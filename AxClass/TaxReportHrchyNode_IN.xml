<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportHrchyNode_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the hierarchy node tree for tax report.
/// </summary>
public class TaxReportHrchyNode_IN
{
    // Fields for Table TaxReportHrchyNode_IN
    TaxReportHrchyNodeId_IN                 nodeId;
    NoYesId                                 canMatch;
    NoYesId                                 canSettle;
    NoYesId                                 canPost;
    NoYesId                                 enable;
    TaxReportHrchyNodeId_IN                 parentId;
    ClassId                                 classId;
    TaxReportHierarchyNodeType_IN           nodeType;
    TaxReportHrchyNodeDisplayValue_IN       displayValue;
    TaxReportHrchyNodeComboDisplayValue_IN  comboDisplayValueStr;
    TaxReportHrchyNodeComboDisplayValue_IN  comboDisplayValue;
    Level                                   level;
    TaxReportHrchyNodeLeftRightId_IN        leftId;
    TaxReportHrchyNodeLeftRightId_IN        rightId;
    RefRecId                                hierarchyVersion;
    RecId                                   recId;
    str                                     enableStr;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>append</Name>
				<Source><![CDATA[
    /// <summary>
    /// Append child <c>TaxReportHrchyNode_IN</c> to the current <c>TaxReportHrchyNode_IN</c>, and sets child node's value from current node.
    /// </summary>
    /// <param name="_childNode">
    /// The child <c>TaxReportHrchyNode_IN</c>.
    /// </param>
    /// <returns>
    /// The updated child <c>TaxReportHrchyNode_IN.</c>
    /// </returns>
    public TaxReportHrchyNode_IN append(TaxReportHrchyNode_IN _childNode)
    {
        //Set values for the childNode;
        _childNode.initFromParentNode(this);
        _childNode.parmNodeId(TaxReportHierarchyHelper_IN::generateNodeId(this.parmTaxReportHierarchyVersion()));

        return _childNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromParentNode</Name>
				<Source><![CDATA[
    public void initFromParentNode(TaxReportHrchyNode_IN _parentNode)
    {
        this.parmTaxReportHierarchyVersion(_parentNode.parmTaxReportHierarchyVersion());
        this.parmParentId(_parentNode.parmNodeId());
        this.parmLevel(_parentNode.parmLevel() + 1);
        this.parmLeftId(_parentNode.parmRightId());
        this.parmRightId(_parentNode.parmRightId() + 1);
        this.parmComboDisplayValue(
            TaxReportHierarchyHelper_IN::getComboDisplayValue(_parentNode.parmComboDisplayValue(), this.parmComboDisplayValue()));
        this.parmComboDisplayValueStr(
            TaxReportHierarchyHelper_IN::getComboDisplayValue(_parentNode.parmComboDisplayValueStr(), this.parmDisplayValue()));
        this.parmEnable(_parentNode.parmEnable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeTypeLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label indicating the type of node, such as "Tax type", "Tax component", etc.
    /// </summary>
    /// <returns>
    /// The label for node type.
    /// </returns>
    public str getNodeTypeLabel()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.parmClassId(classNum(TaxReportHrchyNode_IN));
        this.parmEnable(NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanMatch</Name>
				<Source><![CDATA[
    public NoYesId parmCanMatch(NoYesId _canMatch = canMatch)
    {
        canMatch = _canMatch;

        return canMatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanPost</Name>
				<Source><![CDATA[
    public NoYesId parmCanPost(NoYesId _canPost = canPost)
    {
        canPost = _canPost;

        return canPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanSettle</Name>
				<Source><![CDATA[
    public NoYesId parmCanSettle(NoYesId _canSettle = canSettle)
    {
        canSettle = _canSettle;

        return canSettle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmClassId</Name>
				<Source><![CDATA[
    public ClassId parmClassId(classId _classId = classId)
    {
        classId = _classId;
        return classId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmComboDisplayValue</Name>
				<Source><![CDATA[
    public TaxReportHrchyNodeComboDisplayValue_IN parmComboDisplayValue(TaxReportHrchyNodeComboDisplayValue_IN _comboDisplayValue = comboDisplayValue)
    {
        comboDisplayValue = _comboDisplayValue;
        return comboDisplayValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmComboDisplayValueStr</Name>
				<Source><![CDATA[
    public TaxReportHrchyNodeComboDisplayValue_IN parmComboDisplayValueStr(TaxReportHrchyNodeComboDisplayValue_IN _comboDisplayValueStr = comboDisplayValueStr)
    {
        if (comboDisplayValueStr == '' && _comboDisplayValueStr != '')
        {
            comboDisplayValueStr = _comboDisplayValueStr;
        }
        return comboDisplayValueStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisplayValue</Name>
				<Source><![CDATA[
    public TaxReportHrchyNodeDisplayValue_IN parmDisplayValue(TaxReportHrchyNodeDisplayValue_IN _displayValue = '')
    {
        if (displayValue == '' && _displayValue != '')
        {
            displayValue = _displayValue;
        }

        return displayValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnable</Name>
				<Source><![CDATA[
    public NoYesId parmEnable(NoYesId _enable = enable)
    {
        enable = _enable;
        return enable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeftId</Name>
				<Source><![CDATA[
    public TaxReportHrchyNodeLeftRightId_IN parmLeftId(TaxReportHrchyNodeLeftRightId_IN _leftId = 0)
    {
        if (leftId == 0 && _leftId != 0)
        {
            leftId = _leftId;
        }
        return leftId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLevel</Name>
				<Source><![CDATA[
    public Level parmLevel(Level _level = 0)
    {
        if (level == 0 && _level != 0)
        {
            level = _level;
        }
        return level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNodeId</Name>
				<Source><![CDATA[
    public TaxReportHrchyNodeId_IN parmNodeId(TaxReportHrchyNodeId_IN _nodeId = 0)
    {
        if (nodeId == 0 && _nodeId != 0)
        {
            nodeId = _nodeId;
        }
        return nodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNodeType</Name>
				<Source><![CDATA[
    public TaxReportHierarchyNodeType_IN parmNodeType(TaxReportHierarchyNodeType_IN _nodeType = TaxReportHierarchyNodeType_IN::None)
    {
        if (nodeType == TaxReportHierarchyNodeType_IN::None && _nodeType != TaxReportHierarchyNodeType_IN::None)
        {
            nodeType = _nodeType;
        }
        return nodeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentId</Name>
				<Source><![CDATA[
    public TaxReportHrchyNodeId_IN parmParentId(TaxReportHrchyNodeId_IN _parentId = 0)
    {
        if (parentId == 0 && _parentId != 0)
        {
            parentId = _parentId;
        }
        return parentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecId</Name>
				<Source><![CDATA[
    public RecId parmRecId(recId _recId = 0)
    {
        if (recId == 0 && _recId != 0)
        {
            recId = _recId;
        }
        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRightId</Name>
				<Source><![CDATA[
    public TaxReportHrchyNodeLeftRightId_IN parmRightId(TaxReportHrchyNodeLeftRightId_IN _rightId = rightId)
    {
        rightId = _rightId;
        return rightId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxReportHierarchyVersion</Name>
				<Source><![CDATA[
    public RefRecId parmTaxReportHierarchyVersion(RefRecId _hierarchyVersion = hierarchyVersion)
    {
        hierarchyVersion = _hierarchyVersion;
        return hierarchyVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnableStr</Name>
				<Source><![CDATA[
    public str parmEnableStr(str _enableStr = enableStr)
    {
        enableStr = _enableStr;
        return enableStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>persist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persist current <c>TaxReportHrchyNode_IN</c> to the database.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Throw error if persist fails.
    /// </exception>
    public void persist()
    {
        TaxReportHierarchyNode_IN  tableNode;

        if (!TaxReportHierarchyHelper_IN::nodeExists(this))
        {
            ttsBegin;

            //Update existing node's left and right id
            TaxReportHierarchyHelper_IN::updateNodeValueBeforeInsert(this);

            tableNode.initValue();
            tableNode.NodeId = nodeId;
            tableNode.CanMatch = canMatch;
            tableNode.CanSettle = canSettle;
            tableNode.CanPost = canPost;
            tableNode.Enable = enable;
            tableNode.ParentId = parentId;
            tableNode.RefClassId = classId;
            tableNode.NodeType = nodeType;
            tableNode.DisplayValue = displayValue;
            tableNode.ComboDisplayValueStr = comboDisplayValueStr;
            tableNode.ComboDisplayValue = comboDisplayValue;
            tableNode.Level = level;
            tableNode.LeftId = leftId;
            tableNode.RightId = rightId;
            tableNode.TaxReportHierarchyVersion_IN = hierarchyVersion;
            tableNode.insert();

            this.parmRecId(tableNode.RecId);

            //Update descendant node's level
            TaxReportHierarchyHelper_IN::updateNodeValueAfterInsert(this);

            if (tableNode.NodeType == TaxReportHierarchyNodeType_IN::Root)
            {
                this.parmComboDisplayValue(int642str(this.parmRecId()));
                tableNode.ComboDisplayValue = this.parmComboDisplayValue();
                tableNode.update();
            }

            ttsCommit;
        }
        else
        {
            throw error(strFmt("@SYS4005702", nodeType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>remove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove current <c>TaxReportHrchyNode_IN</c> from the <c>TaxReportHierarchy_IN</c> instance.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Throw error if remove fails.
    /// </exception>
    public void remove()
    {
        TaxReportHierarchyNode_IN   tableNode = TaxReportHierarchyNode_IN::find(this.parmRecId(), true);
        TaxReportHierarchyNode_IN   tmpTableNode;

        if (tableNode.RecId)
        {
            tmpTableNode = tableNode;

            ttsBegin;

            TaxReportHierarchyHelper_IN::updateNodeValueBeforeRemove(TaxReportHierarchyHelper_IN::initNodeFromValueTable(tableNode));
            tableNode.delete();
            TaxReportHierarchyHelper_IN::updateNodeValueAfterRemove(TaxReportHierarchyHelper_IN::initNodeFromValueTable(tmpTableNode));

            ttsCommit;
        }
        else
        {
            throw error(strFmt("@SYS4005703", this.parmRecId()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxReportHrchyNode_IN construct()
    {
        TaxReportHrchyNode_IN  reportHierarchyNode = new TaxReportHrchyNode_IN();
        return reportHierarchyNode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>