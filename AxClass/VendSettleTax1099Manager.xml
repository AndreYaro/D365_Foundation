<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendSettleTax1099Manager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VendSettle1099Manager</c> class is used to calculate and track the 1099 amounts during the
///    settlement process.
/// </summary>
class VendSettleTax1099Manager
{
    Tax1099Amount tax1099Amount; // The tax 1099 amount on the invoice
    Tax1099StateAmount tax1099StateAmount; // The tax 1099 state amount on the invoice

    Tax1099Amount creditTax1099Amount; // The 1099 amount to adjust credit transactions
    Tax1099StateAmount creditTax1099StateAmount; // The 1099 state amount to adjust credit transaction
    Tax1099Amount debitTax1099Amount; // The 1099 amount to adjust debit transactions
    Tax1099StateAmount debitTax1099StateAmount; // The 1099 state amount to adjust debit transactions

    Tax1099Amount settleCreditTax1099Amount; // The settled 1099 amount
    Tax1099StateAmount settleCreditTax1099StateAmount; // The settle 1099 state amount
    Tax1099Amount settleDebitTax1099Amount; // The settled 1099 amount
    Tax1099StateAmount settleDebitTax1099StateAmount; // The settled 1099 state amount

    AmountCur origTransOpenDebitAmountCur; // Remaining to settle amount of the invoice
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcSettleTax1099Amount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the 1099 amounts to settle.
    /// </summary>
    /// <param name="_invoiceAmount">
    /// The original amount on the invoice.
    /// </param>
    /// <param name="_settleAmountCurDebit">
    /// The calculated settlement debit amount for this transaction.
    /// </param>
    /// <param name="_discountSettleAmountCurDebit">
    /// The calculated settlement debit discount amount for this transaction.
    /// </param>
    /// <param name="_paymToInvoiceRate">
    /// The exchange rate between the payment and invoice.
    /// </param>
    /// <param name="_lateReporting">
    /// If the settlement date is 30 days past the invoice date, this parm is true.
    /// </param>

    public void calcSettleTax1099Amount(AmountCur _invoiceAmount, AmountCur _settleAmountCurDebit, AmountCur _discountSettleAmountCurDebit, ExchRate _paymToInvoiceRate, boolean _lateReporting = false)
    {
        Percent settlePercent;
        Percent settlePercentWithDiscount;
        Tax1099Amount settleTax1099Amount;
        Tax1099StateAmount settleTax1099StateAmount;
        Tax1099Amount lateFee;
        #define.MaxPenalty(50000)

        if (_invoiceAmount != 0)
        {
            settlePercent = (_settleAmountCurDebit + _discountSettleAmountCurDebit) / _invoiceAmount;
            settlePercentWithDiscount = _settleAmountCurDebit / _invoiceAmount;
        }
        else
        {
            settlePercent = 0;
            settlePercentWithDiscount = 0;
        }

        // This will set amounts used to update the invoice and open transactions
        settleTax1099Amount = tax1099Amount * settlePercent;
        settleTax1099StateAmount = tax1099StateAmount * settlePercent;

        creditTax1099Amount = settleTax1099Amount / _paymToInvoiceRate;
        creditTax1099StateAmount = settleTax1099StateAmount / _paymToInvoiceRate;
        debitTax1099Amount = settleTax1099Amount;
        debitTax1099StateAmount = settleTax1099StateAmount;

        // This will set amounts used for VendSettlementTax1099 records
        settleTax1099Amount = tax1099Amount * settlePercentWithDiscount;
        settleTax1099StateAmount = tax1099StateAmount * settlePercentWithDiscount;

        // If reporting late, late fee is 1% of issue price or 50000, whichever is smaller.
        if (_lateReporting)
        {
            lateFee = settleTax1099Amount / 100;
            lateFee = lateFee > #MaxPenalty ? #MaxPenalty : lateFee;
            settleTax1099Amount = settleTax1099Amount + lateFee;
            info(strFmt("@SYS344549", lateFee));
        }
        settleCreditTax1099Amount = settleTax1099Amount / _paymToInvoiceRate;
        settleCreditTax1099StateAmount = settleTax1099StateAmount / _paymToInvoiceRate;
        settleDebitTax1099Amount = settleTax1099Amount;
        settleDebitTax1099StateAmount = settleTax1099StateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTax1099Amount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the tax 1099 amounts for the specified transaction.
    /// </summary>
    /// <param name="_custVendTrans">
    ///    The transaction for which to set the tax 1099 amount.
    /// </param>
    public void getTax1099Amount(CustVendTrans _custVendTrans)
    {
        if (_custVendTrans.TableId == tablenum(VendTrans))
        {
            tax1099Amount = -_custVendTrans.Tax1099Amount;
            tax1099StateAmount = -_custVendTrans.Tax1099StateAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreditTax1099Amount</Name>
				<Source><![CDATA[
    public Tax1099Amount parmCreditTax1099Amount(Tax1099Amount _creditTax1099Amount = creditTax1099Amount)
    {
        creditTax1099Amount = _creditTax1099Amount;
        return creditTax1099Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreditTax1099StateAmount</Name>
				<Source><![CDATA[
    public Tax1099StateAmount parmCreditTax1099StateAmount(Tax1099StateAmount _creditTax1099StateAmount = creditTax1099StateAmount)
    {
        creditTax1099StateAmount = _creditTax1099StateAmount;
        return creditTax1099StateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDebitTax1099Amount</Name>
				<Source><![CDATA[
    public Tax1099Amount parmDebitTax1099Amount(Tax1099Amount _debitTax1099Amount = debitTax1099Amount)
    {
        debitTax1099Amount = _debitTax1099Amount;
        return debitTax1099Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDebitTax1099StateAmount</Name>
				<Source><![CDATA[
    public Tax1099StateAmount parmDebitTax1099StateAmount(Tax1099StateAmount _debitTax1099StateAmount = debitTax1099StateAmount)
    {
        debitTax1099StateAmount = _debitTax1099StateAmount;
        return debitTax1099StateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrigTransOpenDebitAmountCur</Name>
				<Source><![CDATA[
    public AmountCur parmOrigTransOpenDebitAmountCur(AmountCur _origTransOpenDebitAmountCur = origTransOpenDebitAmountCur)
    {
        origTransOpenDebitAmountCur = _origTransOpenDebitAmountCur;
        return origTransOpenDebitAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSettleCreditTax1099Amount</Name>
				<Source><![CDATA[
    public Tax1099Amount parmSettleCreditTax1099Amount(Tax1099Amount _settleCreditTax1099Amount = settleCreditTax1099Amount)
    {
        settleCreditTax1099Amount = _settleCreditTax1099Amount;
        return settleCreditTax1099Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSettleCreditTax1099StateAmount</Name>
				<Source><![CDATA[
    public Tax1099StateAmount parmSettleCreditTax1099StateAmount(Tax1099StateAmount _settleCreditTax1099StateAmount = settleCreditTax1099StateAmount)
    {
        settleCreditTax1099StateAmount = _settleCreditTax1099StateAmount;
        return settleCreditTax1099StateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSettleDebitTax1099Amount</Name>
				<Source><![CDATA[
    public Tax1099Amount parmSettleDebitTax1099Amount(Tax1099Amount _settleDebitTax1099Amount = settleDebitTax1099Amount)
    {
        settleDebitTax1099Amount = _settleDebitTax1099Amount;
        return settleDebitTax1099Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSettleDebitTax1099StateAmount</Name>
				<Source><![CDATA[
    public Tax1099StateAmount parmSettleDebitTax1099StateAmount(Tax1099StateAmount _settleDebitTax1099StateAmount = settleDebitTax1099StateAmount)
    {
        settleDebitTax1099StateAmount = _settleDebitTax1099StateAmount;
        return settleDebitTax1099StateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTax1099Amount</Name>
				<Source><![CDATA[
    public Tax1099Amount parmTax1099Amount(Tax1099Amount _tax1099Amount = tax1099Amount)
    {
        tax1099Amount = _tax1099Amount;
        return tax1099Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTax1099StateAmount</Name>
				<Source><![CDATA[
    public Tax1099StateAmount parmTax1099StateAmount(Tax1099StateAmount _tax1099StateAmount = tax1099StateAmount)
    {
        tax1099StateAmount = _tax1099StateAmount;
        return tax1099StateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendSettlementTax1099</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates VendSettlementTax1099 records for specified parameters.
    /// </summary>
    /// <param name="_settleAmountCur">
    /// The amount that was settled in transaction currency.
    /// </param>
    /// <param name="_custVendTransDebit">
    /// The CustVendTrans record that represents the debit transaction.
    /// </param>
    /// <param name="_custVendTransCredit">
    /// The CustVendTrans record that represents the credit transaction.
    /// </param>
    /// <param name="_paymToInvoiceRate">
    /// The exchange rate between the payment and invoice.
    /// </param>
    /// <remarks>
    /// This method assumes that the <c>calcSettleTax1099Amount</c> method has been called previous to the
    /// call to this method.
    /// The purpose of this method is to record the payments per invoice line for 1099 purposes. The reason is that Axapta
    /// allows you to specify a different box per line and now you can also specify a different amount for 1099 versus the line
    /// amount. Therefore, we need to record for each payment the date and amount per invoice to get an accurate amount to report
    /// to the IRS.
    /// This method calculates the line amount by using the following formula:
    /// Federal: Invoice 1099 line amount / (Total amount for the invoice / payment amount)
    /// State: Invoice 1099 state line amount / (Total amount for the invoice / payment amount)
    /// </remarks>
    public void updateVendSettlementTax1099(AmountCur _settleAmountCur, CustVendTrans _custVendTransDebit, CustVendTrans _custVendTransCredit, ExchRate _paymToInvoiceRate)
    {
        VendSettlementTax1099 vendSettlementTax1099;
        VendInvoiceTrans vendInvoiceTrans;
        VendInvoiceJour vendInvoiceJour;
        VendTrans localVendTrans;
        boolean pullFromVendTrans = true;
        Tax1099Fields tax1099Fields;
        Tax1099BoxDetail tax1099Detail;
        Tax1099BoxDetail tax1099DetailDebit;

        if ((_custVendTransDebit.Tax1099Fields != 0 && this.parmOrigTransOpenDebitAmountCur() != 0) && (this.parmSettleCreditTax1099Amount() != 0 || this.parmSettleCreditTax1099StateAmount() != 0))
        {
            ttsbegin;

            // This code path used for invoices that orginate from the Purchase order form.
            while select vendInvoiceTrans
            where vendInvoiceTrans.InvoiceId == _custVendTransDebit.Invoice
            {
                vendInvoiceJour = vendInvoiceTrans.vendInvoiceJour();
                localVendTrans = vendInvoiceJour.vendTrans();

                if (localVendTrans.RecId == _custVendTransDebit.RecId || localVendTrans.RecId == _custVendTransCredit.RecId)
                {
                    pullFromVendTrans = false;

                    if (!_custVendTransCredit.Invoice)
                    {
                        changecompany(_custVendTransCredit.company())
                        {
                            // Settling transaction is not a reversing invoice
                            vendSettlementTax1099.clear();
                            vendSettlementTax1099.VendAccount = _custVendTransCredit.AccountNum;
                            vendSettlementTax1099.TransDate = _custVendTransCredit.TransDate;
                            vendSettlementTax1099.Voucher = _custVendTransCredit.Voucher;
                            vendSettlementTax1099.VendInvoiceId = _custVendTransDebit.Invoice;
                            vendSettlementTax1099.PurchInternalInvoiceId = vendInvoiceTrans.InternalInvoiceId;
                            vendSettlementTax1099.InventTransId = vendInvoiceTrans.InventTransId;
                            vendSettlementTax1099.ExternalRecId = _custVendTransCredit.RecId;

                            if (_custVendTransCredit.DataAreaId != _custVendTransDebit.DataAreaId)
                            {
                                vendSettlementTax1099.Tax1099Fields = VendTable::find(_custVendTransCredit.AccountNum).Tax1099Fields;
                            }
                            else
                            {
                                vendSettlementTax1099.Tax1099Fields = vendInvoiceTrans.Tax1099Fields;
                            }

                            vendSettlementTax1099.Tax1099State = vendInvoiceTrans.Tax1099State;

                            // Figure the SettleTax1099Amount and SettleTax1099StateAmounts taking into consideration the percentage of the total invoice actually paid.
                            // Less may have been paid due to cash discounts. Also different payment and invoice currencies need to be taken into consideration.
                            if (_custVendTransDebit.AmountCur != 0 && _settleAmountCur != 0 && vendSettlementTax1099.Tax1099Fields != 0)
                            {
                                // Take into consideration cash discount
                                vendSettlementTax1099.SettleTax1099Amount = vendTax1099Update::getAmountIncludingTax(vendInvoiceTrans) * (_settleAmountCur / -_custVendTransDebit.AmountCur);

                                // Take into consideration invoice and payment may have been in different currencies
                                vendSettlementTax1099.SettleTax1099Amount = vendSettlementTax1099.SettleTax1099Amount / _paymToInvoiceRate;
                            }

                            if (_custVendTransDebit.AmountCur != 0 && _settleAmountCur != 0 && vendSettlementTax1099.Tax1099State != '')
                            {
                                // Take into consideration cash discount
                                vendSettlementTax1099.SettleTax1099StateAmount = vendInvoiceTrans.Tax1099StateAmount * (_settleAmountCur / -_custVendTransDebit.AmountCur);

                                // Take into consideration invoice and payment may have been in different currencies
                                vendSettlementTax1099.SettleTax1099StateAmount = vendSettlementTax1099.SettleTax1099StateAmount / _paymToInvoiceRate;
                            }

                            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                            {
                                if ((vendSettlementTax1099.Tax1099Fields == Tax1099Base::findTax1099FieldsRecId(Tax1099S::grossProceeds()))
                                    || (vendSettlementTax1099.Tax1099Fields == Tax1099Base::findTax1099FieldsRecId(Tax1099G::unemploymentCompensation()))
                                    || (vendSettlementTax1099.Tax1099Fields == Tax1099Base::findTax1099FieldsRecId(Tax1099G::incomeTaxRefundsCreditsOffsets())))
                                {
                                    //If we have 1099G or 1099S detail records set values
                                    select firstonly tax1099Detail
                                        where tax1099Detail.RecId == vendInvoiceTrans.Tax1099RecId;

                                    vendSettlementTax1099.Tax1099TaxYear = tax1099Detail.Tax1099TaxYear;
                                    vendSettlementTax1099.Tax1099TradeOrBusiness = tax1099Detail.Tax1099TradeOrBusiness;
                                    vendSettlementTax1099.Tax1099AddressOrLegalDesc = tax1099Detail.Tax1099AddressorLegalDesc;
                                    vendSettlementTax1099.Tax1099BuyersTax = tax1099Detail.Tax1099BuyersTax;
                                    vendSettlementTax1099.Tax1099DateOfClosing = tax1099Detail.Tax1099DateOfClosing;
                                    vendSettlementTax1099.Tax1099PropertyOrServices = tax1099Detail.Tax1099PropertyOrServices;
                                    vendSettlementTax1099.State = tax1099Detail.State;
                                    vendSettlementTax1099.Tax1099StateTaxID = tax1099Detail.Tax1099StateTaxID;
                                    vendSettlementTax1099.Tax1099StateTaxWithheld = tax1099Detail.Tax1099StateTaxWithheld;
                                }
                            }

                            if (vendSettlementTax1099.Tax1099Fields)
                            {
                                tax1099Fields = Tax1099Fields::find(vendSettlementTax1099.Tax1099Fields);
                                vendSettlementTax1099.irsReportable = vendSettlementTax1099.SettleTax1099Amount >= tax1099Fields.Tax1099Amount ? true : false;
                            }
                            vendSettlementTax1099.insert();
                        }
                    }
                }
            }

            // This code path used for invoices that originate from the Invoice journal
            if (pullFromVendTrans)
            {
                if (!_custVendTransCredit.Invoice)
                {
                    changecompany(_custVendTransCredit.company())
                    {
                        // Settling transaction is not a reversing invoice
                        vendSettlementTax1099.VendAccount = _custVendTransCredit.AccountNum;
                        vendSettlementTax1099.TransDate = _custVendTransCredit.TransDate;
                        vendSettlementTax1099.Voucher = _custVendTransCredit.Voucher;
                        vendSettlementTax1099.VendInvoiceId = _custVendTransDebit.Invoice;
                        vendSettlementTax1099.ExternalRecId = _custVendTransCredit.RecId;

                        if (_custVendTransCredit.DataAreaId != _custVendTransDebit.DataAreaId)
                        {
                            vendSettlementTax1099.Tax1099Fields = VendTable::find(_custVendTransCredit.AccountNum).Tax1099Fields;
                        }
                        else
                        {
                            vendSettlementTax1099.Tax1099Fields = _custVendTransDebit.Tax1099Fields;
                        }

                        vendSettlementTax1099.Tax1099State = _custVendTransDebit.Tax1099State;

                        vendSettlementTax1099.SettleTax1099Amount = this.parmSettleCreditTax1099Amount();
                        vendSettlementTax1099.SettleTax1099StateAmount = this.parmSettleCreditTax1099StateAmount();

                        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                        {
                            if ((vendSettlementTax1099.Tax1099Fields == Tax1099Base::findTax1099FieldsRecId(Tax1099S::grossProceeds()))
                                || (vendSettlementTax1099.Tax1099Fields == Tax1099Base::findTax1099FieldsRecId(Tax1099G::incomeTaxRefundsCreditsOffsets()))
                                || (vendSettlementTax1099.Tax1099Fields == Tax1099Base::findTax1099FieldsRecId(Tax1099G::unemploymentCompensation())))
                            {
                                select firstonly tax1099DetailDebit
                                        where tax1099DetailDebit.RecId == _custVendTransDebit.Tax1099RecId;

                                //If we have 1099G or 1099S detail records set values
                                vendSettlementTax1099.Tax1099TaxYear = tax1099DetailDebit.Tax1099TaxYear;
                                vendSettlementTax1099.Tax1099TradeOrBusiness = tax1099DetailDebit.Tax1099TradeOrBusiness;
                                vendSettlementTax1099.Tax1099AddressOrLegalDesc = tax1099DetailDebit.Tax1099AddressorLegalDesc;
                                vendSettlementTax1099.Tax1099BuyersTax = tax1099DetailDebit.Tax1099BuyersTax;
                                vendSettlementTax1099.Tax1099DateOfClosing = tax1099DetailDebit.Tax1099DateOfClosing;
                                vendSettlementTax1099.Tax1099PropertyOrServices = tax1099DetailDebit.Tax1099PropertyOrServices;

                                //for G1 box detail
                                vendSettlementTax1099.State = tax1099DetailDebit.State;
                                vendSettlementTax1099.Tax1099StateTaxID = tax1099DetailDebit.Tax1099StateTaxID;
                                vendSettlementTax1099.Tax1099StateTaxWithheld = tax1099DetailDebit.Tax1099StateTaxWithheld;
                            }
                        }

                        if (vendSettlementTax1099.Tax1099Fields) // if not blank
                        {
                            tax1099Fields = Tax1099Fields::find(vendSettlementTax1099.Tax1099Fields);
                            vendSettlementTax1099.irsReportable = vendSettlementTax1099.SettleTax1099Amount >= tax1099Fields.Tax1099Amount ? true : false;
                        }
                        vendSettlementTax1099.insert();
                    }
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>