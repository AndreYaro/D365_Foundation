<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTotalsForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class PurchTotalsForm implements SysSaveable
{
    int             specQty;
    Common          callingTable;
    container       displayFields;
    boolean         salesTaxDetailIsNotNeeded;

    #localmacro.CurrentList
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEditCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method can be overridden to make the currency code control of the <c>PurchTotals</c> form
    /// editable.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean allowEditCurrencyCode()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calctotals</Name>
				<Source><![CDATA[
    public void calctotals()
    {
        displayFields = PurchtotalsForm::displayFieldsServer(callingTable, specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseSysLastValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method can be overridden to enable pack and unpack on the respective derived class.
    /// </summary>
    /// <returns>
    ///     false;
    /// </returns>
    public boolean canUseSysLastValue()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDisc</Name>
				<Source><![CDATA[
    public boolean cashDisc()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscValue</Name>
				<Source><![CDATA[
    public VendCashDiscAmount cashDiscValue()
    {
        return conPeek(displayFields, TradeTotals::posCashDisc());
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCreditPrepayDataGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method can be overridden to hide the field group containing data regarding credit limits, prepayments and qty/weight data.
    /// </summary>
    /// <returns>
    ///     Always returns true;
    /// </returns>
    public boolean showCreditPrepayDataGroup()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructTotals</Name>
				<Source><![CDATA[
    abstract protected TradeTotalsBase constructTotals()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code of the record in the <c>Currency</c> table.
    /// </summary>
    /// <returns>
    /// The currency code of the record in the <c>Currency</c> table.
    /// </returns>
    public CurrencyCode currencyCode()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCodeValue</Name>
				<Source><![CDATA[
    public CurrencyCode currencyCodeValue()
    {
        return conPeek(displayFields, TradeTotals::posCurrency());
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTaxCurrencyCodeValue_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code of the sales tax.
    /// </summary>
    /// <returns>
    /// The currency code of the sales tax.
    /// </returns>
    public CurrencyCode salesTaxCurrencyCodeValue_BR()
    {
        return conPeek(displayFields, PurchTotals::posSalesTaxCurrency_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the packed contents to the <c>SysLastValue</c> table.
    /// </summary>
    public void doPack()
    {
        if (this.canUseSysLastValue())
        {
            xSysLastValue::saveLast(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUnPack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the controls of the <c>PurchTotals</c> form with the last selected values.
    /// </summary>
    /// <remarks>
    /// This method initializes the controls of the <c>PurchTotals</c> form with the last selected values
    /// only if the <c>canUseSysLastValue</c> method returns true.
    /// </remarks>
    public void doUnPack()
    {
        if (this.canUseSysLastValue())
        {
            xSysLastValue::getLast(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDiscValue</Name>
				<Source><![CDATA[
    public PurchEndDiscAmount endDiscValue()
    {
        return (conPeek(displayFields, TradeTotals::posEndDisc()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDiscValueVisible</Name>
				<Source><![CDATA[
    public boolean endDiscValueVisible()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateValue</Name>
				<Source><![CDATA[
    public ExchRate exchRateValue()
    {
        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.currencyCodeValue());

        return exchangeRateHelper.displayStoredExchangeRate(conPeek(displayFields, TradeTotals::posExchRate()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called when no record is found in the <c>SysLastvalue</c> table.
    /// </summary>
    void initParmDefault()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmountValue</Name>
				<Source><![CDATA[
    public AmountCur invoiceAmountValue()
    {
        return conPeek(displayFields, TradeTotals::posTotalAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceRoundOffValue</Name>
				<Source><![CDATA[
    public RoundOff invoiceRoundOffValue()
    {
        return (conPeek(displayFields, TradeTotals::posRoundOff()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data area ID of the currently logged in company.
    /// </summary>
    /// <returns>
    /// The <c>dataAreaId</c> value of the company that is currently logged in.
    /// </returns>
    public dataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the application object.
    /// </summary>
    /// <returns>
    /// The name of the application object.
    /// </returns>
    public identifierName lastValueDesignName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the class of the current instance.
    /// </summary>
    /// <returns>
    /// The name of the class of the current instance.
    /// </returns>
    public identifierName lastValueElementName()
    {
        return classId2Name(classIdGet(this));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the type of the element.
    /// </summary>
    /// <returns>
    /// An element of the <c>UtilElementType</c> enumeration type.
    /// </returns>
    public UtilElementType lastValueType()
    {
        return UtilElementType::Class;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the user ID of the currently logged in user.
    /// </summary>
    /// <returns>
    /// The user ID of the user who is currently logged in.
    /// </returns>
    public userId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineCount</Name>
				<Source><![CDATA[
    public NumberOfRecords lineCount()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineCountVisible</Name>
				<Source><![CDATA[
    boolean lineCountVisible()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscValue</Name>
				<Source><![CDATA[
    public PurchSumLineDiscAmount lineDiscValue()
    {
        return (conPeek(displayFields, TradeTotals::posLineDisc()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalsTabCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the caption that is displayed on the Totals tab on the <c>PurchTotals</c> form.
    /// </summary>
    /// <returns>
    /// The caption that is displayed on the Totals tab on the <c>PurchTotals</c> form.
    /// </returns>
    public str totalsTabCaption()
    {
        return "@SYS128477";
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupFreightAmountMST_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>Freight</c> markup type in accounting currency.
    /// </summary>
    /// <returns>
    ///    The value of the <c>Freight</c> markup type.
    /// </returns>
    public MarkupAmount markupFreightAmountMST_BR()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupInsuranceAmountMST_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>Insurance</c> markup type in accounting currency.
    /// </summary>
    /// <returns>
    ///    The value of the <c>Insurance</c> markup type.
    /// </returns>
    public MarkupAmount markupInsuranceAmountMST_BR()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupOthersAmountMST_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>Other</c> markup type in transaction currency.
    /// </summary>
    /// <returns>
    ///    The value of the <c>Other</c> markup type.
    /// </returns>
    public MarkupAmount markupOthersAmountMST_BR()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupSiscomexAmountMST_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>Siscomex</c> markup type in accounting currency.
    /// </summary>
    /// <returns>
    ///    The value of the <c>Siscomex</c> markup type.
    /// </returns>
    public MarkupAmount markupSiscomexAmountMST_BR()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTotalAmount_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the total markup value in the accounting currency.
    /// </summary>
    /// <returns>
    ///    Total markup value.
    /// </returns>
    MarkupAmount markupTotalAmount_BR()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method can be overridden to pack the data in the respective derived class.
    /// </summary>
    /// <returns>
    ///     An empty container.
    /// </returns>
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallingTable</Name>
				<Source><![CDATA[
    public Common parmCallingTable(Common _callingTable = callingTable)
    {
        callingTable = _callingTable;
        return callingTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecQty</Name>
				<Source><![CDATA[
    public int parmSpecQty(int _specQty = specQty)
    {
        specQty = _specQty;
        return specQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTaxDetailIsNotNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parm the value whether sales tax detail is not needed.
    /// </summary>
    /// <param name = "_salesTaxDetailIsNotNeeded">The boolean buffer of whether sales tax detail is not needed.</param>
    /// <returns>Determines whether the sales tax details is needed.</returns>
    [Hookable(false)]
    public boolean parmSalesTaxDetailIsNotNeeded(boolean _salesTaxDetailIsNotNeeded = salesTaxDetailIsNotNeeded)
    {
        salesTaxDetailIsNotNeeded = _salesTaxDetailIsNotNeeded;
        return salesTaxDetailIsNotNeeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the purchase line catch weight inventory quantity.
    /// </summary>
    /// <returns>
    /// The catch weight quantity.
    /// </returns>
    public PdsCWInventQty pdsCWQtyValue()
    {
        return conpeek(displayFields, TradeTotals::pdsCWPosQty());
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepayVisible</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>PurchTotals</c> form should display the <c>Prepay</c> group.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    boolean prepayVisible()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchCOFINSTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>COFINS</c> tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the <c>COFINS</c> tax type.
    /// </returns>
    public TaxAmount purchCOFINSTotal_BR()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchCSLLTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>CSLL</c> tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the <c>CSLL</c> tax type.
    /// </returns>
    public TaxAmount purchCSLLTotal_BR()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchICMSTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>ICMS</c> tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the <c>ICMS</c> tax type.
    /// </returns>
    public TaxAmount purchICMSTotal_BR()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchICMSSTTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>ICMS-ST</c> tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the <c>ICMS-ST</c> tax type.
    /// </returns>
    public TaxAmount purchICMSSTTotal_BR()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchICMSDiffTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>ICMS-Dif</c> tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the <c>ICMS-Dif</c> tax type.
    /// </returns>
    public TaxAmount purchICMSDiffTotal_BR()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchImportTaxTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>ImportTax</c> tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the <c>ImportTax</c> tax type.
    /// </returns>
    public TaxAmount purchImportTaxTotal_BR()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchINSSRetainedTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>INSSRetained</c> tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the <c>INSSRetained</c> tax type.
    /// </returns>
    public TaxAmount purchINSSRetainedTotal_BR()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchINSSTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>INSS</c> tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the <c>INSS</c> tax type.
    /// </returns>
    public TaxAmount purchINSSTotal_BR()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchIPITotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>IPI</c> tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the <c>IPI</c> tax type.
    /// </returns>
    public TaxAmount purchIPITotal_BR()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchIRRFTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>IRRF</c> tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the <c>IRRF</c> tax type.
    /// </returns>
    public TaxAmount purchIRRFTotal_BR()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchISSTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>ISS</c> tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the <c>ISS</c> tax type.
    /// </returns>
    public TaxAmount purchISSTotal_BR()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchPISTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>PIS</c> tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the <c>PIS</c> tax type.
    /// </returns>
    public TaxAmount purchPISTotal_BR()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchPrepayAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>Available</c> field value of the <c>PurchPrepayTable</c> table from the
    ///    <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The vendor advance available value.
    /// </returns>
    public PurchPrepayAvailable purchPrepayAvailable()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchPrepayLimit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>Limit</c> field value of the <c>PurchPrepayTable</c> table from the
    ///    <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The vendor advance limit value.
    /// </returns>
    public PurchPrepayLimit purchPrepayLimit()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if Qty field should be displayed in <c>PurchTotals</c> form.
    /// </summary>
    /// <returns>
    ///    true.
    /// </returns>
    public boolean qty()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyValue</Name>
				<Source><![CDATA[
    public PurchQty qtyValue()
    {
        return (conPeek(displayFields, TradeTotals::posQty()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionUpdateValue</Name>
				<Source><![CDATA[
    public int selectionUpdateValue()
    {
        return specQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Assigns a specific currency code.
    /// </summary>
    /// <param name="_targetCurrencyCode">
    ///     The currency code of a record in the <c>Currency</c> table.
    /// </param>
    public void setCurrencyCode(CurrencyCode _targetCurrencyCode)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumLinesValue</Name>
				<Source><![CDATA[
    public AmountCur sumLinesValue()
    {
        return (conPeek(displayFields, TradeTotals::posBalance()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumMarkUpValue</Name>
				<Source><![CDATA[
    public MarkupSumPurch sumMarkUpValue()
    {
        return (conPeek(displayFields, TradeTotals::posMarkup()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumTaxValue</Name>
				<Source><![CDATA[
    public TaxAmountCur sumTaxValue()
    {
        return (conPeek(displayFields, TradeTotals::posTaxTotal()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumWithholdTCSValue_IN</Name>
				<Source><![CDATA[
    internal AmountCur sumWithholdTCSValue_IN()
    {
        return (conPeek(displayFields, PurchTotals::posWithholdTCSAmount_IN()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumTaxWithhold_THValue</Name>
				<Source><![CDATA[
    public TaxAmountCur sumTaxWithhold_THValue()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method can be overridden to unpack the data in the respective derived class.
    /// </summary>
    /// <param name="_packedClass">
    ///     A container containing version and value for the fields.
    /// </param>
    /// <returns>
    ///     True;
    /// </returns>
    [SuppressBPWarning('BPParameterNotUsed', 'Parameter used elsewhere in the hierarchy')]
    public boolean unpack(container _packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSelection</Name>
				<Source><![CDATA[
    public boolean updateSelection()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSelectionType</Name>
				<Source><![CDATA[
    public int updateSelectionType()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSelectionValue</Name>
				<Source><![CDATA[
    public int updateSelectionValue()
    {
        return specQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendCreditMax</Name>
				<Source><![CDATA[
    public boolean vendCreditMax()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendCreditMaxValue</Name>
				<Source><![CDATA[
    public VendCreditMaxMST vendCreditMaxValue()
    {
        return conPeek(displayFields, TradeTotals::posCreditMax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendFreeValue</Name>
				<Source><![CDATA[
    public boolean vendFreeValue()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendFreeValueValue</Name>
				<Source><![CDATA[
    public VendCreditFreeValueMST vendFreeValueValue()
    {
        return conPeek(displayFields, TradeTotals::posFreeValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>volume</Name>
				<Source><![CDATA[
    public boolean volume()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>volumeValue</Name>
				<Source><![CDATA[
    public Volume volumeValue()
    {
        return conPeek(displayFields, TradeTotals::posVolume());
    }

]]></Source>
			</Method>
			<Method>
				<Name>weight</Name>
				<Source><![CDATA[
    public boolean weight()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>weightValue</Name>
				<Source><![CDATA[
    public Weight weightValue()
    {
        return conPeek(displayFields, TradeTotals::posWeight());
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFieldsServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates totals and sets the fields values to be shown on the totals form.
    /// </summary>
    /// <param name="_orderTable">
    /// The order table to calculate totals for.
    /// </param>
    /// <param name="_specQty">
    /// Quantity to calculate totals for. It can be eitehr <c>PurchUpdate</c> or <c>PurchRFQUpdate</c> enum value.
    /// </param>
    /// <returns>
    /// Container of the field values to be shown on the totals form.
    /// </returns>
    static public container displayFieldsServer(Common _orderTable, int _specQty)
    {
        container resultContainer;
        TradeTotalsContract contract;

        contract = TradeTotalsContract::construct();
        contract.parmOrderTable(_orderTable);
        contract.parmSpecQty(_specQty);

        if (_orderTable.TableId == tableNum(PurchTable))
        {
            return PurchTotalsForm_PurchTable::executeDisplayFieldsServer(_orderTable, any2Enum(_specQty));
        }

        PurchtotalsForm totalsForm = PurchtotalsForm::newPurchTotalsForm(_orderTable, _specQty);
        TradeTotals totals = totalsForm.constructTotals();
        totals.calc();

        return totals.displayFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchTotalsForm</Name>
				<Source><![CDATA[
    static PurchtotalsForm newPurchTotalsForm(Common _callingTable, int _specQty = 0)
    {
        PurchtotalsForm purchtotalsForm;

        switch (_callingTable.TableId)
        {
            case tableNum(PurchTable):
                purchtotalsForm = PurchTotalsForm_PurchTable::construct();
                break;

            case tableNum(PurchRFQReplyTable):
            case tableNum(PurchRFQCaseTable):
                purchtotalsForm = purchTotalsForm_PurchRFQ::construct();
                break;

            case tableNum(PurchReqTable):
                purchtotalsForm = PurchTotalsForm_PurchReq::construct();
                break;

            default :
                throw error(strFmt("@SYS19306", funcName()));
        }

        purchtotalsForm.parmCallingTable(_callingTable);
        purchtotalsForm.parmSpecQty(_specQty);

        if (TaxSalesTaxDetailIsNotNeededToggle::instance().isEnabled())
        {
            purchtotalsForm.parmSalesTaxDetailIsNotNeeded(true);
        }

        return purchtotalsForm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>