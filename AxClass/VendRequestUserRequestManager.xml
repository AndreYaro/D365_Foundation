<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendRequestUserRequestManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendRequestUserRequestManager extends UserRequestManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>associateUserRelations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Associates user relations to the user for the user request.
    /// </summary>
    /// <param name="_userRequest">
    /// The user request for which to associate user relations.
    /// </param>
    protected void associateUserRelations(UserRequest _userRequest)
    {
        VendRequestUserRequest  request = _userRequest as VendRequestUserRequest;
        VendRequest             vendorRequest = request.vendorRequest();
        ValidFromDateTime       validFrom;
        ValidToDateTime         validTo = DateTimeUtil::maxValue();
        int                     prospectiveVendorEffectivePeriod;

        if (!DirPersonUser::exist(_userRequest.User))
        {
            validFrom = DateTimeUtil::getSystemDateTime();

            changecompany(vendorRequest.
            company()
            )
            {
                prospectiveVendorEffectivePeriod = VendRequestManagementParameters::find().ProspectiveVendorEffectivePeriod;
            }

            if (prospectiveVendorEffectivePeriod > 0)
            {
                validTo = DateTimeUtil::addDays(validFrom, prospectiveVendorEffectivePeriod);
            }

            DirPersonUser::createDirPersonUser(
                _userRequest.User,
                _userRequest.Person,
                validFrom,
                validTo);
        }

        if (!UserExternalParty::existRelation(
            request.User,
            UserExternalPartyEntityType::ProspectiveVendor,
            vendorRequest.VendParty,
            vendorRequest.DataAreaId))
        {
            UserExternalParty::createRelation(
                request.User,
                UserExternalPartyEntityType::ProspectiveVendor,
                vendorRequest.VendParty,
                vendorRequest.DataAreaId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>entityType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the external entity type that is associated with a <c>VendRequestUserRequestManager</c>
    /// object.
    /// </summary>
    /// <returns>
    /// An external entity type prospective vendor.
    /// </returns>
    public UserExternalPartyEntityType entityType()
    {
        return UserExternalPartyEntityType::ProspectiveVendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default company for new users.
    /// </summary>
    /// <param name="_userRequest">
    /// The user request for which to get the default company.
    /// </param>
    /// <returns>
    /// The company account.
    /// </returns>
    protected dataAreaId getDefaultCompany(UserRequest _userRequest)
    {
        VendRequestUserRequest request = _userRequest as VendRequestUserRequest;

        return request.vendorRequest().DataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDomain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the domain for the user request.
    /// </summary>
    /// <param name="_userRequest">
    /// The user request for which to get the domain.
    /// </param>
    /// <returns>
    /// The domain for the user request.
    /// </returns>
    /// <remarks>
    /// For claims-based requests, the domain will be the claims provider name.
    /// </remarks>
    public networkDomain getDomain(UserRequest _userRequest)
    {
        networkDomain domain;

        if (_userRequest.AuthenticationMode == UserRequestAuthenticationMode::ActiveDirectory
            || _userRequest.AuthenticationMode == UserRequestAuthenticationMode::AzureAcs)
        {
            domain = super(_userRequest);
        }
        else
        {
            domain = UserRequestParameters::find().VendorProviderName;
        }

        return domain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewUserEmailTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the e-mail template ID for the new user notification.
    /// </summary>
    /// <returns>
    /// The e-mail template ID.
    /// </returns>
    public SysEmailSystemId getNewUserEmailTemplate()
    {
        return UserRequestParameters::find().VendorNewUserEmailTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPortalSiteUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SharePoint portal base URL for the user request.
    /// </summary>
    /// <returns>
    /// The SharePoint portal base URL.
    /// </returns>
    public URL getPortalSiteUrl()
    {
        return UserRequestParameters::find().editVendorSelfServiceWebsiteUrl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserName</Name>
				<Source><![CDATA[
        protected UserName getUserName(UserRequest _userRequest)
    {
        UserName userName;

        if (_userRequest is VendRequestUserRequest)
        {
            userName = VendRequestSignup::findByUserRequest(_userRequest).ContactName;
        }
        else
        {
            userName = super(_userRequest);
        }

        return userName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inactiveUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inactivates the user who is associated to the request.
    /// </summary>
    /// <param name="_userRequest">
    /// The user request for which to inactivate the user.
    /// </param>
    public void inactiveUser(UserRequest _userRequest)
    {
        VendRequestUserRequest  request = _userRequest as VendRequestUserRequest;

        UserExternalParty::removeRelation(_userRequest.User,
                                        this.entityType(),
                                        request.vendorRequest().VendParty,
                                        request.vendorRequest().DataAreaId);

        super(_userRequest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitUserRequest</Name>
				<Source><![CDATA[
/// <summary>
    /// Creates and submits a user request that is based on a related record to the workflow.
    /// </summary>
    /// <param name="_relatedRecord">
    /// The related record.
    /// </param>
    public void submitUserRequest(Common _relatedRecord)
    {
        VendRequest vendorRequest;
        VendRequestUserRequest userRequest;
        VendRequestCompany vendorRequestCompany;
        VendRequestSignup vendorRequestSignup;
        NoYes isEP = NoYes::No;
        WorkflowComment workflowComment = '';
        WorkflowVersionTable workflowVersion;
        WorkflowConfigurationName  workflowDisplayName;
        UserRequestAuthenticationMode unsolicitedVendorAuthenticationMode =
            UserRequestParameters::find().UnSolicitedVendorAuthenticationMode;

        if (_relatedRecord is VendRequest)
        {
            vendorRequest = _relatedRecord as VendRequest;
            vendorRequestCompany = _relatedRecord as VendRequestCompany;
            userRequest.initValue();
            userRequest.initFrom(vendorRequest);
            userRequest.RequestID = this.newRequestID();

            ttsbegin;
            userRequest.workflowSubmitted();

            if (vendorRequestCompany.SignUp)
            {
                userRequest.AuthenticationMode = unsolicitedVendorAuthenticationMode;

                if (unsolicitedVendorAuthenticationMode == UserRequestAuthenticationMode::AzureAcs)
                {
                    vendorRequestSignup = VendRequestSignup::find(vendorRequestCompany.SignUp);
                    userRequest.UserAlias = userRequest.Email();
                }
            }

            userRequest.insert();

            workflowVersion = Workflow::findWorkflowConfigToActivateForType(userRequest.workflowType(), userRequest.RecId, tableNum(UserRequest));
            if (workflowVersion.Enabled)
            {
                Workflow::activateFromWorkflowConfigurationId(
                    workflowVersion.ConfigurationId,
                    userRequest.RecId,
                    workflowComment,
                    isEP);
            }
            else
            {
                if (!workflowVersion || !workflowVersion.workflowTable())
                {
                    workflowDisplayName = userRequest.workflowType();
                }
                else
                {
                    workflowDisplayName = workflowVersion.workflowTable().Name;
                }
                throw error(strFmt("@GLS130222", workflowDisplayName));
            }
            ttscommit;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a table ID that is related to the <c>UserRequestManager</c> object.
    /// </summary>
    /// <returns>
    /// The table ID that inherits from the <c>UserRequest</c> table.
    /// </returns>
    public tableId tableId()
    {
        return tableNum(VendRequestUserRequest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static VendRequestUserRequestManager construct()
    {
        return new VendRequestUserRequestManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNameId</Name>
				<Source><![CDATA[
    public UserRequestNameId getNameId(UserRequest _userRequest)
    {
        UserRequestNameId nameId;

        if (_userRequest is VendRequestUserRequest)
        {
            nameId = VendRequestSignup::findByUserRequest(_userRequest).SignupUID;
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        return nameId;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>