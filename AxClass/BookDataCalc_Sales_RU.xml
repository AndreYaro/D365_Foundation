<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BookDataCalc_Sales_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BookDataCalc_Sales_RU extends BookDataCalc_Sales_All_RU implements BatchRetryable
{
    TransDate closingDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>begin</Name>
				<Source><![CDATA[
    protected void begin()
    {
        // do nothing
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    public boolean check()
    {
        boolean         ret = true;
        CustInvoiceJour custInvoiceJour;
        CustInvoiceJour_RU custInvoiceJourRU;
        CustTransOpen   custTransOpenPayment, custTransOpenInvoice;
        CustTrans       custTransPayment, custTransInvoice;

        setPrefix(this.getInfologPrefix());

        if (SalesBookTable_RU::findByClosingDate(toDate))
        {
            ret = checkFailed(strFmt("@GLS101246", toDate));
        }

        if (fullCheck)
        {
            while select InvoiceId, InvoiceDate from custInvoiceJour
                where custInvoiceJour.InvoiceId &&
                      custInvoiceJour.InvoiceDate <= toDate     &&
                      custInvoiceJour.InvoiceDate >= fromDate
            exists join custInvoiceJourRU
                where custInvoiceJourRU.CustInvoiceJour == custInvoiceJour.RecId
                    && custInvoiceJourRU.FacturedFully_RU == NoYes::No
                    && (custInvoiceJourRU.InventProfileType_RU == InventProfileType_RU::General
                    || custInvoiceJourRU.InventProfileType_RU == InventProfileType_RU::NotSpecified)
            {
                setPrefix("@GLS104858");
                info(strFmt("@GLS222771", custInvoiceJour.InvoiceId, custInvoiceJour.InvoiceDate),
                     "",
                     new SysInfoAction_FormName_RU(custInvoiceJour, formStr(CustInvoiceJournal)));
            }

            while select InvoiceId, InvoiceDate from custInvoiceJour
                where custInvoiceJour.InvoiceId
            exists join custInvoiceJourRU
                where custInvoiceJourRU.CustInvoiceJour == custInvoiceJour.RecId
                    && (custInvoiceJourRU.InventProfileType_RU == InventProfileType_RU::General
                    || custInvoiceJourRU.InventProfileType_RU == InventProfileType_RU::NotSpecified)
            exists join custTransInvoice
                where custTransInvoice.AccountNum == custInvoiceJour.InvoiceAccount &&
                    custTransInvoice.Invoice      == custInvoiceJour.InvoiceId      &&
                    custTransInvoice.TransDate    == custInvoiceJour.InvoiceDate    &&
                    custTransInvoice.Voucher      == custInvoiceJour.LedgerVoucher
            exists join custTransOpenInvoice
                where custTransOpenInvoice.RefRecId  == custTransInvoice.RecId &&
                    custTransOpenInvoice.TransDate <= toDate
            {
                setPrefix("@GLS3800144");
                info(strFmt("@GLS104918", custInvoiceJour.InvoiceId, custInvoiceJour.InvoiceDate),
                     '',
                     new SysInfoAction_FormName_RU(custInvoiceJour, formStr(CustInvoiceJournal)));
            }

            while select AccountNum, Voucher, TransDate from custTransPayment
                where custTransPayment.TransDate  <= toDate    &&
                      custTransPayment.Invoice    == ''        &&
                      custTransPayment.Prepayment == NoYes::No &&
                      custTransPayment.AmountCur   < 0
                exists join custTransOpenPayment
                    where custTransOpenPayment.RefRecId == custTransPayment.RecId
            {
                setPrefix("@GLS104915");
                info(strFmt("@SYS66048", custTransPayment.TransDate, custTransPayment.Voucher, custTransPayment.AccountNum),
                     '',
                     new SysInfoAction_FormName_RU(custTransPayment, formStr(SalesBookPrepayments_RU)));
            }
        }

        if (!RestoredVATLogTable_RU::exist(toDate))
        {
            warning("@GLS114574");
        }

        if (!ret)
        {
            warning("@GLS104916");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>end</Name>
				<Source><![CDATA[
    protected void end()
    {
        SalesBookTrans_RU salesBookTrans;
        ;

        while select LineNum, FactureID, FactureExternalId, CorrectingFactureId, FactureDate, TransType, AccountNum,
                     AccountName, PaymentDate, PaymentRecIdRef, RefTableId, PaymentCompany, SettlementDate, PaymDocumentNum,
                     sum(AmountInclVAT), sum(AmountLiableToVAT20), sum(AmountLiableToVAT10),
                     sum(AmountLiableToVAT0), sum(AmountNotLiableToVAT), sum(TaxAmountVAT20), sum(TaxAmountVAT10)
              from salesPurchBookData
              group by LineNum, FactureExternalId, FactureDate_External, AccountNum, FactureID, CorrectingFactureId, TransType,
                       AccountName, PaymentDate, PaymentRecIdRef, RefTableId, PaymentCompany, SettlementDate, PaymDocumentNum, FactureDate,
                       Reversed,ReverseDate, CorrectedFactureExternalId, CorrectedFactureDate, CorrectedSalesPurchBookTable_RU
        {
            salesBookTrans.clear();
            salesBookTrans.data(salesPurchBookData);
            salesBookTrans.SalesBookTable_RU = bookTable.RecId;
            salesBookTrans.FactureJour_RU    = FactureJour_RU::find(salesBookTrans.FactureId, salesBookTrans.factureModule()).RecId;
            if (salesBookTrans.CorrectedSalesBookTable_RU && salesBookTrans.CorrectedSalesBookTable_RU == salesBookTrans.SalesBookTable_RU)
            {
                salesBookTrans.CorrectedSalesBookTable_RU = 0;
            }

            salesBookTrans.SalesPurchBookDataMap_RU::initSalesPurchBookDataFields();

            salesBookTrans.insert();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchNextRecord</Name>
				<Source><![CDATA[
    protected boolean fetchNextRecord()
    {
        return recordSortedList.next(factureJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        SalesBookTrans_RU    salesBookTrans;

        closingDate = SalesBookTable_RU::getLastClosedBook().ClosingDate;

        salesPurchBookData = salesBookTrans;
        salesPurchBookData.setTmp();

        this.initBookTable();
        this.initRecordSortedList();

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00022, funcName());

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBookTransCalcClass</Name>
				<Source><![CDATA[
    protected BookTransCalc_RU initBookTransCalcClass()
    {
        BookTransCalc_Sales_RU bookTransCalc_Sales;

        progress.setText(strFmt("@GLS111359", factureJour.CustVendInvoiceAccount, factureJour.FactureExternalId));

        bookTransCalc_Sales = BookTransCalc_Sales_RU::newTransCalc(fromDate > #TransitionEndDate ? bookTable.Policy : CustParameters::taxation_RU(factureJour.FactureDate),
                                                                   factureJour,
                                                                   salesPurchBookData,
                                                                   fromDate,
                                                                   toDate,
                                                                   bookTableMode,
                                                                   closingDate,
                                                                   null,
                                                                   recordSortedList,
                                                                   fullCheck,
                                                                   lineNum);

        return bookTransCalc_Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOnDelivery</Name>
				<Source><![CDATA[
    private void initOnDelivery()
    {
        FactureJour_RU      fJour;

        while select fJour
            where (fJour.Module      == FactureModule_RU::Cust                     ||
                   fJour.Module      == FactureModule_RU::TaxCorrectionSales       ||
                   fJour.Module      == FactureModule_RU::TaxCorrectionSales_Vend) &&
                 ((fJour.FactureDate >= fromDate                                   &&
                   fJour.FactureDate <= toDate)                                    ||
                  (fJour.ReverseDate                                               &&
                   fJour.ReverseDate >= fromDate                                   &&
                   fJour.ReverseDate <= toDate))                                   &&
                  (fJour.InventProfileType == InventProfileType_RU::General        ||
                   fJour.InventProfileType == InventProfileType_RU::NotSpecified)  &&
                   ! fJour.ExportProcessing
        {
            if (! fJour.isBlockedForBookFacture() && ! fJour.isPuchaseCommission())
            {
                recordSortedList.ins(fJour);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOnPayment</Name>
				<Source><![CDATA[
    private void initOnPayment()
    {
        FactureJour_RU  fJour;
        FactureTrans_RU fTrans;
        CustInvoiceJour custInvoiceJour;
        CustTrans       invoiceTrans;
        CustSettlement  custSettlement;

        while select fJour
            where fJour.FactureType       == FactureType_RU::Invoice             &&
                  fJour.Module            == FactureModule_RU::Cust              &&
                 (fJour.InventProfileType == InventProfileType_RU::General       ||
                  fJour.InventProfileType == InventProfileType_RU::NotSpecified) &&
                  ! fJour.ExportProcessing
            exists join RecId from fTrans
                where fTrans.Module          == fJour.Module    &&
                      fTrans.FactureId       == fJour.FactureId
            exists join RecId from custInvoiceJour
                where custInvoiceJour.InvoiceAccount      == fJour.CustVendInvoiceAccount &&
                      custInvoiceJour.InvoiceDate         == fTrans.InvoiceDate           &&
                      custInvoiceJour.InvoiceId           == fTrans.InvoiceId             &&
                      custInvoiceJour.SalesId             == fTrans.SalesPurchId          &&
                      custInvoiceJour.NumberSequenceGroup == fTrans.NumberSequenceGroup
            exists join RecId from invoiceTrans
                where invoiceTrans.Voucher    == custInvoiceJour.LedgerVoucher  &&
                      invoiceTrans.TransDate  == custInvoiceJour.InvoiceDate    &&
                      invoiceTrans.AccountNum == custInvoiceJour.InvoiceAccount &&
                      invoiceTrans.Invoice    == custInvoiceJour.InvoiceId
            exists join RecId from custSettlement
                where custSettlement.TransRecId      == invoiceTrans.RecId      &&
                      custSettlement.TransCompany    == invoiceTrans.DataAreaId &&
                     (custSettlement.CanBeReversed                         ||
                      custSettlement.ReversedRecId_RU)                     &&
                     ((fJour.FactureDate        >= fromDate && fJour.FactureDate        <= min(toDate, #BeforeTransitionStartDate)) ||
                      (custSettlement.TransDate >= fromDate && custSettlement.TransDate <= toDate))
        {
            if (! recordSortedList.find(fJour) && ! fJour.isBlockedForBookFacture() && ! fJour.isPuchaseCommission())
            {
                recordSortedList.ins(fJour);
            }
        }

        while select fJour
            where (fJour.Module             == FactureModule_RU::Cust               &&
                  (fJour.FactureType        == FactureType_RU::AmoutDifference      ||
                   fJour.FactureType        == FactureType_RU::ExchAdj              ||
                   fJour.FactureType        == FactureType_RU::AdvanceAdjustment    ||
                   fJour.FactureType        == FactureType_RU::VATAdjustment        ||
                   fJour.FactureType        == FactureType_RU::Prepayment))         ||

                  (fJour.FactureType == FactureType_RU::TaxCorrection               &&
                  (fJour.Module      == FactureModule_RU::TaxCorrectionSales        ||
                   fJour.Module      == FactureModule_RU::TaxCorrectionSales_Vend)) &&

                 ((fJour.FactureDate >= fromDate                                    &&
                   fJour.FactureDate <= min(toDate, #BeforeTransitionStartDate))    ||
                  (fJour.ReverseDate                                                &&
                   fJour.ReverseDate >= fromDate                                    &&
                   fJour.ReverseDate <= min(toDate, #BeforeTransitionStartDate)))   &&

                  (fJour.InventProfileType  == InventProfileType_RU::General        ||
                   fJour.InventProfileType  == InventProfileType_RU::NotSpecified)
        {
            if (! recordSortedList.find(fJour))
            {
                recordSortedList.ins(fJour);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordSortedList</Name>
				<Source><![CDATA[
    protected void initRecordSortedList()
    {
        ;
        recordSortedList = new RecordSortedList(tableNum(FactureJour_RU));
        recordSortedList.sortOrder(fieldnum(FactureJour_RU, CreatedDateTime), fieldnum(FactureJour_RU, SeqNumber), fieldnum(FactureJour_RU, RecId));

        if (fromDate < #TransitionStartDate)
        {
            switch (bookTable.Policy)
            {
                case CustTaxation_RU::OnDelivery :
                    this.initOnDelivery();
                    break;

                case CustTaxation_RU::OnPayment  :
                    this.initOnPayment();
                    break;
            }
        }
        else
        {
            this.initOnDelivery();
            this.initOnPayment();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFullCheck</Name>
				<Source><![CDATA[
    public boolean parmFullCheck(boolean _fullCheck = fullCheck)
    {
        fullCheck = _fullCheck;
        return fullCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>