<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferShipReceiveController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTransferShipController</c> class is the controller class for the
///    <c>InventTransferShip</c> report.
/// </summary>
class InventTransferShipReceiveController extends SrsReportRunController implements BatchRetryable
{
    FiscalDocument_BR               fiscalDocument;
    // <GIN>
    #ISOCountryRegionCodes
    // </GIN>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    private void initFromArgs()
    {
        InventTransferParmTable inventTransferParmTable;
        InventTransferPrintDataProvider inventTransferPrintDataProvider;

        if (this.parmArgs())
        {
            inventTransferParmTable = this.parmArgs().record() as InventTransferParmTable;
            inventTransferPrintDataProvider = this.parmArgs().object() as InventTransferPrintDataProvider;
        }

        if (inventTransferParmTable && inventTransferPrintDataProvider)
        {
            if (inventTransferPrintDataProvider is InventTransferPrintDataProviderShip)
            {
                this.extractRdlContractInfoFromParentFormSettings(inventTransferParmTable.InventDimFixedShipList, inventTransferParmTable.SetupPrintShipList);
            }
            else if (inventTransferPrintDataProvider is InventTransferPrintDataProviderReceive)
            {
                this.extractRdlContractInfoFromParentFormSettings(inventTransferParmTable.InventDimFixedReceiveList, inventTransferParmTable.SetupPrintReceiveList);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>extractRdlContractInfoFromParentFormSettings</Name>
				<Source><![CDATA[
    private void extractRdlContractInfoFromParentFormSettings(InventDimFixed _inventDimFixed, PrintJobSettingsPacked _printSettings)
    {
        InventDimParm inventDimParm;
        inventDimParm.initFromInventDimFixed(_inventDimFixed);
        ListEnumerator enumerator = InventDim::dimFieldListEnumerator();
        SRSReportRdlDataContract rdlContractInfo = this.parmReportContract().parmRdlContract();
   
        while (enumerator.moveNext())
        {
            FieldId dimFieldId = enumerator.current();
            FieldId dimParmFieldId = InventDim::dim2dimParm(dimFieldId);
            FieldName dimFieldName = new DictField(tableNum(InventDim), dimFieldId).name();

            if (rdlContractInfo.parameterExists(dimFieldName))
            {
                rdlContractInfo.setValue(dimFieldName, inventDimParm.(dimParmFieldId) == NoYes::Yes);
            }
        }

        rdlContractInfo.setValue(fieldId2Name(tableNum(InventDim), fieldNum(InventDim, wMSPalletId)), false);

        this.parmReportContract().parmPrintSettings().unpack(_printSettings);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the report name.
    /// </summary>
    /// <returns>
    /// The report name.
    /// </returns>
    public str getReportName()
    {
        str strReportName;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            if (this.parmArgs().parmEnum() == InventTransferUpdateType::Receive)
            {
                strReportName = ssrsReportStr(InventTransferReceive_IN, Report);
            }
            else if (this.parmArgs().parmEnum() == InventTransferUpdateType::Shipment)
            {
                strReportName = ssrsReportStr(InventTransferShip_IN, Report);
            }
        }
        else if (TaxIntegrationUtils::isTaxInTransferOrderEnabled())
        {
            if (this.parmArgs().parmEnum() == InventTransferUpdateType::Receive)
            {
                strReportName = ssrsReportStr(TaxIntegrationInventTransferReceive, Report);
            }
            else if (this.parmArgs().parmEnum() == InventTransferUpdateType::Shipment)
            {
                strReportName = ssrsReportStr(TaxIntegrationInventTransferShip, Report);
            }
        }
        else
        {
            if (this.parmArgs().parmEnum() == InventTransferUpdateType::Receive)
            {
                strReportName = ssrsReportStr(InventTransferReceive, Report);
            }
            else if (this.parmArgs().parmEnum() == InventTransferUpdateType::Shipment)
            {
                strReportName = ssrsReportStr(InventTransferShip, Report);
            }
        }

        return strReportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the report contract before a dialog box is shown to the user.
    /// </summary>
    /// <remarks>
    /// Use this method to change the report contract, a common use case is to add or change a query.This
    /// method is called only during interactive scenario, before the UI is rendered to the user.For a
    /// batch scenario, this method is not called because there is no user interaction and contract values
    /// are already saved in batch.Do not instantiate any instance variables in this code if they are used
    /// during the lifetime of controller because these will fail in batch cases.
    /// </remarks>
    protected void prePromptModifyContract()
    {
        this.setRanges(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()));
        this.initFromArgs();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the report query ranges based on the caller.
    /// </summary>
    /// <param name="_query">
    ///    The <c>Query</c> object of the report.
    /// </param>
    public void setRanges(Query _query)
    {
        if (!this.parmArgs())
        {
            return;
        }

        InventTransferUpdateType updateType = this.parmArgs().parmEnum();

        QueryBuildDataSource queryBuildDataSource = _query.dataSourceTable(tableNum(InventTransferJour));
        QueryBuildRange qbrUpdateType = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventTransferJour, UpdateType));
        qbrUpdateType.value(queryValue(updateType));
        qbrUpdateType.status(RangeStatus::Locked);

        QueryBuildRange qbrTransferId = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventTransferJour, TransferId));
        QueryBuildRange qbrVoucherId  = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventTransferJour, VoucherId));
        QueryBuildRange qbrTransDate  = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventTransferJour, TransDate));

        if (this.parmArgs().record() is InventTransferJour)
        {
            InventTransferJour callerTransferJour = this.parmArgs().record() as InventTransferJour;
            qbrTransferId.value(queryValue(callerTransferJour.TransferId));
            qbrVoucherId.value(queryValue(callerTransferJour.VoucherId));
            qbrTransDate.value(queryValue(callerTransferJour.TransDate));
        }

        if (this.parmArgs().record() is InventTransferParmTable)
        {
            InventTransferParmTable callerParmTable = this.parmArgs().record() as InventTransferParmTable;

            qbrTransferId.value(queryValue(callerParmTable.TransferId));
            qbrTransDate.value(queryValue(callerParmTable.TransDate));

            Object argsObject = this.parmArgs().object();

            if (argsObject is InventTransferPrintDataProviderShip)
            {
                InventTransferPrintDataProviderShip providerShip = argsObject as InventTransferPrintDataProviderShip;
                qbrVoucherId.value(queryValue(providerShip.parmInventTransferJour().VoucherId));
            }

            if (this.parmArgs().object() is InventTransferPrintDataProviderReceive)
            {
                InventTransferPrintDataProviderReceive providerReceive = argsObject as InventTransferPrintDataProviderReceive;
                qbrVoucherId.value(queryValue(providerReceive.parmVoucherId()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocument_BR</Name>
				<Source><![CDATA[
    private static FiscalDocument_BR getFiscalDocument_BR(Args _args)
    {
        FiscalDocument_BR fiscalDocument;
        InventTransferJour inventTransferJour;
        Voucher voucherId;

        switch (_args.dataset())
        {
            case tableNum(InventTransferJour) :
                select fiscalDocument
                    where fiscalDocument.RefRecId == _args.record().RecId
                        && fiscalDocument.RefTableId == _args.record().TableId;
                break;

            case tableNum(InventTransferParmTable) :
                InventTransferParmTable inventTransferParmTable = _args.record() as InventTransferParmTable;

                if (_args.object() is InventTransferPrintDataProviderShip)
                {
                    InventTransferPrintDataProviderShip dataProvider = _args.object() as InventTransferPrintDataProviderShip;
                    voucherId = dataProvider.parmInventTransferJour().VoucherId;
                }

                select fiscalDocument
                    exists join inventTransferJour
                    where fiscalDocument.RefRecId         == inventTransferJour.RecId
                        && fiscalDocument.RefTableId      == inventTransferJour.TableId
                        && inventTransferJour.TransferId  == inventTransferParmTable.TransferId
                        && inventTransferJour.TransDate   == inventTransferParmTable.TransDate
                        && inventTransferJour.VoucherId   == voucherId;
                break;
        }

        return fiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventTransferShipReceiveController  controller = new InventTransferShipReceiveController();

        // <GBR>

        if (BrazilParameters::isEnabled())
        {
            FiscalDocument_BR fiscalDocument = InventTransferShipReceiveController::getFiscalDocument_Br(_args);

            if (fiscalDocument)
            {
                Args args = new args();
                args.record(fiscalDocument);

                new MenuFunction(menuitemoutputstr(FiscalDocument_BR), MenuItemType::Output).run(args);
            }

            return;
        }
        // </GBR>

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            controller.parmArgs(_args);
            controller.parmReportName(controller.getReportName());
        }
        else if (TaxIntegrationUtils::isTaxInTransferOrderEnabled())
        {
            controller.parmArgs(_args);
            controller.parmReportName(controller.getReportName());
        }
        else
        {
        // </GIN>
            controller.parmReportName(_args.parm());
            controller.parmArgs(_args);
        // <GIN>
        }
        // </GIN>

        if (controller.isInBatch())
        {
            controller.parmShowDialog(false);
            controller.batchInfo().parmBatchExecute(true);
        }

        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
