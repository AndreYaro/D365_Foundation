<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymCalendarSourceVendInvoiceInfo</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PaymCalendarSourceVendInvoiceInfo</c> class is an interface that is used to find payment
/// calendars when the source is the <c>VendInvoiceInfoTable</c> table.
/// </summary>
public class PaymCalendarSourceVendInvoiceInfo implements PaymCalendarIDerivationSource, PaymCalendarIBankAddress, PaymCalendarIDocumentAddress
{
    private VendInvoiceInfoTable vendInvoiceInfoTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBankPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the postal address associated to the bank account.
    /// </summary>
    /// <returns>
    /// The <c>LogisticsPostalAddress</c> record that represents the postal address.
    /// </returns>
    public LogisticsPostalAddress getBankPostalAddress()
    {
        VendBankAccount vendBankAccount;
        LogisticsPostalAddress postalAddress;

        vendBankAccount = VendBankAccount::findByCompany(
            vendInvoiceInfoTable.DataAreaId,
            vendInvoiceInfoTable.InvoiceAccount,
            vendInvoiceInfoTable.VendBankAccountID);

        postalAddress = LogisticsLocationEntity::location2PostalAddress(vendBankAccount.Location);

        return postalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the postal address associated to the document.
    /// </summary>
    /// <returns>
    /// The <c>LogisticsPostalAddress</c> record that represents the postal address.
    /// </returns>
    public LogisticsPostalAddress getDocumentPostalAddress()
    {
        LogisticsPostalAddress postalAddress;

        postalAddress = LogisticsPostalAddress::findRecId(vendInvoiceInfoTable.RemittanceLocation);

        return postalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the postal address associated to the third-party entity.
    /// </summary>
    /// <returns>
    /// The <c>LogisticsPostalAddress</c> record that represents the postal address.
    /// </returns>
    public LogisticsPostalAddress getPrimaryPostalAddress()
    {
        VendTable vendTable;
        LogisticsPostalAddress postalAddress;

        vendTable = VendTable::findByCompany(vendInvoiceInfoTable.DataAreaId, vendInvoiceInfoTable.InvoiceAccount);
        postalAddress = vendTable.postalAddress();

        return postalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the payment calendar derivation source instance for the specified record.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// A populated <c>VendInvoiceInfoTable</c> table buffer that specifies the initialization data.
    /// </param>
    public void initialize(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        vendInvoiceInfoTable = _vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModuleType</Name>
				<Source><![CDATA[
    public PaymCalendarModuleType parmModuleType()
    {
        return PaymCalendarModuleType::Vendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymMode</Name>
				<Source><![CDATA[
    public PaymMode parmPaymMode()
    {
        return vendInvoiceInfoTable.PaymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymTermDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmPaymTermDataAreaId()
    {
        return vendInvoiceInfoTable.DataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymTermId</Name>
				<Source><![CDATA[
    public PaymTermId parmPaymTermId()
    {
        if (vendInvoiceInfoTable.isNonPO())
        {
            return vendInvoiceInfoTable.Payment;
        }
        else
        {
            return vendInvoiceInfoTable.purchTable().Payment;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an instance of the <c>PaymCalendarSourceVendInvoiceInfo</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>PaymCalendarSourceVendInvoiceInfo</c> class.
    /// </returns>
    private static PaymCalendarSourceVendInvoiceInfo construct()
    {
        return new PaymCalendarSourceVendInvoiceInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the adjusted due date so that it falls on a business day per calendar rules.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The vendor invoice information table buffer that specifies the due date and the calendar source.
    /// </param>
    /// <returns>
    /// An instance of <c>PaymCalendarAdjustedDate</c> which contains the adjusted due date together with
    /// the calendar and rule that was applied when adjusting the date.
    /// </returns>
    /// <remarks>
    /// If no adjustment is needed, the original date is returned. An empty record ID is returned for the
    /// payment calendar and calendar rule whenever a calendar is not found.
    /// </remarks>
    public static PaymCalendarAdjustedDate getAdjustedDate(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        return PaymCalendarSourceVendInvoiceInfo::getAdjustedDatePrivate(_vendInvoiceInfoTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedDatePrivate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the adjusted due date so that it falls on a business day per calendar rules.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The vendor invoice information table buffer that specifies the due date and the calendar source.
    /// </param>
    /// <returns>
    /// An instance of <c>PaymCalendarAdjustedDate</c> which contains the adjusted due date together with
    /// the calendar and rule that was applied when adjusting the date.
    /// </returns>
    private static PaymCalendarAdjustedDate getAdjustedDatePrivate(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        PaymTerm paymTerm;
        PaymCalendarSourceVendInvoiceInfo calendarSource;
        PaymCalendarProcessor paymCalendarProcessor;
        PaymCalendarAdjustedDate paymCalendarAdjustedDate;

        if (_vendInvoiceInfoTable.isNonPO())
        {
            paymTerm = PaymTerm::find(_vendInvoiceInfoTable.Payment);
        }
        else
        {
            paymTerm = PaymTerm::find( _vendInvoiceInfoTable.purchTable().Payment);
        }

        if (paymTerm.VendorUpdateDueDate != PaymentDueDateUpdatePolicy::NoUpdate)
        {
            calendarSource = PaymCalendarSourceVendInvoiceInfo::newCalendarSource(_vendInvoiceInfoTable);
            paymCalendarProcessor = PaymCalendarProcessor::construct();
            paymCalendarAdjustedDate = paymCalendarProcessor.getAdjustedDate(_vendInvoiceInfoTable.FixedDueDate, paymTerm.VendorUpdateDueDate, calendarSource);
        }
        else
        {
            paymCalendarAdjustedDate = PaymCalendarAdjustedDate::construct(_vendInvoiceInfoTable.FixedDueDate);
        }

        return paymCalendarAdjustedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the adjusted due date so that it falls on a business day per calendar rules.
    /// </summary>
    /// <param name="_dueDate">
    /// The original due date.
    /// </param>
    /// <param name="_updatePolicy">
    /// A value that specifies the search direction when seeking the next valid business day.
    /// </param>
    /// <param name="_vendInvoiceInfoTable">
    /// The vendor invoice information table buffer that specifies the calendar source.
    /// </param>
    /// <returns>
    /// An instance of <c>PaymCalendarAdjustedDate</c> that contains the adjusted due date and the calendar
    /// and rule that was applied when adjusting the date.
    /// </returns>
    /// <remarks>
    /// If no adjustment is needed, the original date is returned. An empty record ID is returned for the
    /// payment calendar and calendar rule whenever a calendar is not found.
    /// </remarks>
    public static PaymCalendarAdjustedDate getAdjustedDueDate(DueDate _dueDate, PaymentDueDateUpdatePolicy _updatePolicy, VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        return PaymCalendarSourceVendInvoiceInfo::getAdjustedDueDatePrivate(_dueDate, _updatePolicy, _vendInvoiceInfoTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedDueDatePrivate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the adjusted due date so that it falls on a business day per calendar rules.
    /// </summary>
    /// <param name="_dueDate">
    /// The original due date.
    /// </param>
    /// <param name="_updatePolicy">
    /// A value that specifies the search direction when seeking the next valid business day.
    /// </param>
    /// <param name="_vendInvoiceInfoTable">
    /// The vendor invoice information table buffer that specifies the calendar source.
    /// </param>
    /// <returns>
    /// An instance of <c>PaymCalendarAdjustedDate</c> which contains the adjusted due date together with
    /// the calendar and rule that was applied when adjusting the date.
    /// </returns>
    public static PaymCalendarAdjustedDate getAdjustedDueDatePrivate(DueDate _dueDate, PaymentDueDateUpdatePolicy _updatePolicy, VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        PaymCalendarSourceVendInvoiceInfo calendarSource;
        PaymCalendarProcessor paymCalendarProcessor;
        PaymCalendarAdjustedDate paymCalendarAdjustedDate;

        paymCalendarProcessor = PaymCalendarProcessor::construct();
        calendarSource = PaymCalendarSourceVendInvoiceInfo::newCalendarSource(_vendInvoiceInfoTable);
        paymCalendarAdjustedDate = paymCalendarProcessor.getAdjustedDate(_dueDate, _updatePolicy, calendarSource);

        return paymCalendarAdjustedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCalendarSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an instance of the <c>PaymCalendarSourceVendInvoiceInfo</c> class.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The <c>VendInvoiceInfoTable</c> record to load.
    /// </param>
    /// <returns>
    /// A new instance of the <c>PaymCalendarSourceVendInvoiceInfo</c> class.
    /// </returns>
    public static PaymCalendarSourceVendInvoiceInfo newCalendarSource(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        PaymCalendarSourceVendInvoiceInfo paymCalendarSourceVendInvoiceInfo;

        paymCalendarSourceVendInvoiceInfo = PaymCalendarSourceVendInvoiceInfo::construct();
        paymCalendarSourceVendInvoiceInfo.initialize(_vendInvoiceInfoTable);

        return paymCalendarSourceVendInvoiceInfo;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>