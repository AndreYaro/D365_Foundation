<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesOrderHeaderStatusConsistencyRemoval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesOrderHeaderStatusConsistencyRemoval</c> class is a removal batch that identifies the empty header values in SalesTable and
/// checks whether they have orphan Sales line record and removes them.
/// </summary>
public final class SalesOrderHeaderStatusConsistencyRemoval extends SysConsistencyCheck implements BatchRetryable
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    configurationKeyId configurationKey()
    {
        return configurationkeynum(LogisticsBasic);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        var instance = new SalesOrderHeaderStatusConsistencyRemoval();
        instance.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>executionOrder</Name>
				<Source><![CDATA[
    Integer executionOrder()
    {
        return 40;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        boolean doUpdate = this.checkFix() == CheckFix::Fix;
        int deletedRecords = this.handleOrphanSalesLines(doUpdate);

        if (doUpdate)
        {
            this.updateCorrected(deletedRecords);
        }

        this.updateNotCorrected();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SalesAndMarketing:SalesOrderOrphanLinesCleanUp_Description";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    static HelpTxt helpText()
    {
        return "@SalesAndMarketing:SalesOrderOrphanLinesCleanUp_HelpText";
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    ClassId treeParentClassId()
    {
        return classNum(SalesRootConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleOrphanSalesLines</Name>
				<Source><![CDATA[
    private  int handleOrphanSalesLines(boolean _doUpdate)
    {
        SalesLine salesLine;
        SalesTable salesOrder;

        if(!_doUpdate)
        {
            this.reportOrphanSalesLines();
            return 0;
        }
        return this.performCleanUp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performCleanUp</Name>
				<Source><![CDATA[
    private int performCleanUp()
    {
        SalesLine salesLine;
        SalesTable salesOrder;
        int numberOfDeletedRec = 0;
        int totalOrphanLines = 0;

        SalesInstrumentationLogger instrumentationLogger = SalesInstrumentationLogger::createLogger(tableStr(SalesLine));
        using (var activity = instrumentationLogger.salesOrderActivities().deleteOrphanSalesLines())
        {
            while select forupdate *
                from salesLine
                notexists join salesOrder
                where salesOrder.salesId == salesLine.SalesId
            {
                totalOrphanLines++;
                var inventTransOriginRecId = InventTransOrigin::findByInventTransId(salesLine.InventTransId).RecId;
            
                if(this.shouldDeleteSalesLine(salesLine,inventTransOriginRecId))
                {
                    ttsbegin;

                    this.deleteSalesLineTransactions(inventTransOriginRecId);
                    this.performAdditionalCleanUp(salesLine);
                    salesLine.doDelete();
                    numberOfDeletedRec++;
                
                    ttscommit;
                }
                else
                {
                    activity.addCustomProperty(SalesOrderInstrumentationActivities::SalesLineRecId, int642str(salesLine.RecId));
                    activity.addCustomProperty(tableStr(CompanyInfo), int642str(CompanyInfo::current()));
                }
            }

            activity.addCustomProperty(SalesOrderInstrumentationActivities::DeletedOrphanSalesLines,int2Str(numberOfDeletedRec));
        }

        warning(strFmt("@SalesAndMarketing:SalesOrderOrphanLinesCleanUp_ReportDeletedLines",int2Str(totalOrphanLines),int2Str(numberOfDeletedRec)));

        return numberOfDeletedRec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDeleteSalesLine</Name>
				<Source><![CDATA[
    private boolean shouldDeleteSalesLine(SalesLine _salesLine, InventTransOriginId _transOriginId)
    {
        return _salesLine.SalesStatus == SalesStatus::Backorder
                 && !this.HasIntercompanyReferences(_salesLine)
                 && !this.HasTransactionsBeyondOnOrder(_transOriginId);

    }

]]></Source>
			</Method>
			<Method>
				<Name>performAdditionalCleanUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs additional cleanup on other tables related to <c>SalesLine</c> table.
    /// </summary>
    /// <param name="_salesLine">
    /// The sales order line to be deleted.
    /// </param>
    public void performAdditionalCleanUp(SalesLine _salesLine)
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrphanSalesLinesNum</Name>
				<Source><![CDATA[
    private int getOrphanSalesLinesNum()
    {
        SalesLine salesLine;
        SalesTable salesOrder;

        select count(RecId) from salesLine
            notexists join salesOrder
            where salesOrder.salesId == salesLine.SalesId;
        
        return salesLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportOrphanSalesLines</Name>
				<Source><![CDATA[
    private void reportOrphanSalesLines()
    {
        var orphanLinesNum = this.getOrphanSalesLinesNum();
        warning(strFmt("@SalesAndMarketing:SalesOrderOrphanLinesCleanUp_ReportOrphanLines",int2Str(orphanLinesNum)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSalesLineTransactions</Name>
				<Source><![CDATA[
    private void deleteSalesLineTransactions(InventTransOriginId _transOriginId)
    {
        if(_transOriginId)
        {
            this.cleanInventTransRecords(_transOriginId);
            this.cleanInventTransOriginRecord(_transOriginId);
            this.cleanInventTransOriginSalesLine(_transOriginId);
        }
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanInventTransRecords</Name>
				<Source><![CDATA[
    private void cleanInventTransRecords(InventTransOriginId _transOriginId)
    {
        InventTrans inventTrans;
        delete_from inventTrans
            where inventTrans.InventTransOrigin == _transOriginId
                && inventTrans.StatusIssue != StatusIssue::OnOrder
                && inventTrans.StatusReceipt != StatusReceipt::Ordered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanInventTransOriginRecord</Name>
				<Source><![CDATA[
    private void cleanInventTransOriginRecord(InventTransOriginId _transOriginId)
    {
        InventTransOrigin inventTransOrigin;
        inventTransOrigin = InventTransOrigin::find(_transOriginId,true);
        inventTransOrigin.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanInventTransOriginSalesLine</Name>
				<Source><![CDATA[
    private void cleanInventTransOriginSalesLine(InventTransOriginId _transOriginId)
    {
        InventTransOriginSalesLine::deleteOriginRelationship(_transOriginId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasIntercompanyReferences</Name>
				<Source><![CDATA[
    private boolean hasIntercompanyReferences(SalesLine _salesLine)
    {
        return _salesLine.InterCompanyInventTransId
            || _salesLine.InventRefType == InventRefType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>HasTransactionsBeyondOnOrder</Name>
				<Source><![CDATA[
    private boolean HasTransactionsBeyondOnOrder(InventTransOriginId _transOriginId)
    {
        InventTrans inventTrans;
        return (select firstonly RecId from inventTrans
                where inventTrans.InventTransOrigin == _transOriginId
                   && ((inventTrans.StatusIssue != StatusIssue::OnOrder && inventTrans.StatusIssue != StatusIssue::None)
                        || (inventTrans.StatusReceipt != StatusReceipt::Ordered && inventTrans.StatusReceipt != StatusReceipt::None))).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>