<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDigitalSignatureManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Implements the signing (hashing and encrypting) of input data with a digital signature.
/// </summary>
/// <remarks>
/// The default encoding is UTF-8.
/// The default hashing algorithm is SHA1.
/// The result signature created in base64 format, which is usable for transmission on the URL.
/// </remarks>
public class RetailDigitalSignatureManager implements RetailIDigitalSignatureManager
{
    /// <summary>
    /// Default encoding.
    /// </summary>
    public const str DefaultEncodingUTF8 = 'UTF-8';

    /// <summary>
    /// Default hash algorithm.
    /// </summary>
    [SysObsolete('SHA1 is no longer supported. Use the RetailDigitalSignatureManager::DefaultHashAlgorithm constant.', false, 21\01\2021)]
    public const str DefaultHashAlgorithmSHA1 = 'SHA1';

    /// <summary>
    /// Default hash algorithm.
    /// </summary>
    public const str DefaultHashAlgorithm = 'SHA256';

    private const container SupportedHashAlgorithmNames = [ 'SHA256', 'SHA384', 'SHA512' ];

    private DigitalCertificateSubject certificateSubject;
    private KeyVaultCertificateRef keyVaultCertificateRef;
    private str digestAlgorithm;
    private str encoding;

    private boolean useAdvCert = SystemParameters::find().UseAdvCertificateStore;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isHashAlgorithmSupported</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if hash algorithm supported.
    /// </summary>
    /// <param name = "hashAlgorithm">The hash algorithm.</param>
    /// <returns>Returns true if the hash algorithm is supported; otherwise false.</returns>
    public static boolean isHashAlgorithmSupported(RetailHashAlgorithm hashAlgorithm)
    {
        return conFind(SupportedHashAlgorithmNames, strUpr(hashAlgorithm));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSupportedHashAlgorithms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets supported hash algorithms.
    /// </summary>
    /// <returns>Returns supported hash algorithms.</returns>
    public static container getSupportedHashAlgorithms()
    {
        return SupportedHashAlgorithmNames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCertificateThumbprint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets thumbprint from certificate.
    /// </summary>
    /// <returns>
    /// Returns thumbprint of the certificate.
    /// </returns>
    public System.String getCertificateThumbprint()
    {
        System.String ret;
        System.Security.Cryptography.X509Certificates.X509Certificate2 certificate;

        certificate = this.getDigitalCertificate();
        ret = certificate.get_Thumbprint();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hashAndSign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes the hash value of the specified string and signs the resulting hash value.
    /// </summary>
    /// <param name="_subjectToSign">
    /// String data to sign.
    /// </param>
    /// <returns>
    /// The signed hash.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Error can be thrown if encryption failed.
    /// </exception>
    public System.String hashAndSign(System.String _subjectToSign)
    {
        System.Text.Encoding encodingObj;
        System.Byte[] inputBytes;
        System.Byte[] encryptedData;
        System.String algorithmOID;
        System.String ret;

        encodingObj = System.Text.Encoding::GetEncoding(this.getEncoding());
        inputBytes  = encodingObj.GetBytes(_subjectToSign);

        try
        {
            System.Security.Cryptography.RSA rsa = this.getRSAPrivateKey();
            System.Security.Cryptography.HashAlgorithmName hashAlgorithmName = new System.Security.Cryptography.HashAlgorithmName(this.getDigestAlgorithm());
            encryptedData = rsa.SignData(inputBytes, hashAlgorithmName, System.Security.Cryptography.RSASignaturePadding::Pkcs1);
        }
        catch
        {
            throw error("@RetailGrandTotalJournal:JournalSigningFailure");
        }

        ret = this.convertToBase64UrlString(encryptedData);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hashAndSignBytes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes the hash value of the specified array of bytes and signs the resulting hash value.
    /// </summary>
    /// <param name="_bytesToSign">
    /// The array of bytes to sign.
    /// </param>
    /// <returns>
    /// The signature of the data from the stream.
    /// </returns>
    public System.String hashAndSignBytes(System.Byte[] _bytesToSign)
    {
        if (_bytesToSign == null)
        {
            throw new System.ArgumentNullException('_bytesToSign');
        }
        
        System.Byte[] encryptedData;
        try
        {
            System.Security.Cryptography.RSA rsa = this.getRSAPrivateKey();
            System.Security.Cryptography.HashAlgorithmName hashAlgorithmName = new System.Security.Cryptography.HashAlgorithmName(this.getDigestAlgorithm());
            encryptedData = rsa.SignData(_bytesToSign, hashAlgorithmName, System.Security.Cryptography.RSASignaturePadding::Pkcs1);
        }
        catch
        {
            throw error("@RetailGrandTotalJournal:JournalSigningFailure");
        }

        System.String ret = this.convertToBase64UrlString(encryptedData);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToBase64UrlString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encodes a byte array into its equivalent string representation using base 64 digits, which is usable for transmission on the URL.
    /// This method follows RFC 4648.
    /// </summary>
    /// <param name = "_input">The byte array to encode.</param>
    /// <returns>The string containing the encoded token if the byte array length is greater than one; otherwise, an empty string ("").</returns>
    /// <exception cref="T:System.ArgumentNullException">The value of the <paramref name="input" /> parameter is <see langword="null" />.</exception>
    private str convertToBase64UrlString(System.Byte[] _input)
    {
        if (_input == null)
        {
            throw new System.ArgumentNullException('_input');
        }
        if (_input.Length < 1)
        {
            return System.String::Empty;
        }

        System.Text.StringBuilder builder = new System.Text.StringBuilder(System.Convert::ToBase64String(_input));
        builder.Replace('+', '-')
            .Replace('/', '_')
            .Replace('=', '');

        return builder.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDigitalCertificate</Name>
				<Source><![CDATA[
    private System.Security.Cryptography.X509Certificates.X509Certificate2 getDigitalCertificate()
    {
        System.Security.Cryptography.X509Certificates.X509Certificate2 certificate;

        if (useAdvCert)
        {
            certificate = KeyVaultCertificateHelper::getDigitalCertificate(this.parmKeyVaultCertificateRef());
        }
        else
        {
            certificate = DigitalCertificateManager::getDigitalCertificate(this.parmCertificateSubject());
        }

        this.validateCertificate(certificate);

        return certificate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRSAPrivateKey</Name>
				<Source><![CDATA[
    private System.Security.Cryptography.RSA getRSAPrivateKey()
    {
        System.Security.Cryptography.X509Certificates.X509Certificate2 certificate = this.getDigitalCertificate();
        System.Security.Cryptography.RSA rsa;

        System.Security.Cryptography.CryptographicException crypographicException;

        if (!certificate)
        {
            throw Global::error("@SYS341169");
        }

        try
        {
            rsa = System.Security.Cryptography.X509Certificates.RSACertificateExtensions::GetRSAPrivateKey(certificate);
        }
        catch (Exception::CLRError)
        {
            rsa = null;
        }
        catch (crypographicException)
        {
            rsa = null;
        }

        if (!rsa)
        {
            throw Global::error("@SYS344228");
        }

        return rsa;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKeyVaultCertificateRef</Name>
				<Source><![CDATA[
    public KeyVaultCertificateRef parmKeyVaultCertificateRef(KeyVaultCertificateRef _keyVaultCertificateRef = keyVaultCertificateRef)
    {
        keyVaultCertificateRef = _keyVaultCertificateRef;
        return keyVaultCertificateRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCertificateSubject</Name>
				<Source><![CDATA[
    public DigitalCertificateSubject parmCertificateSubject(DigitalCertificateSubject _certificateSubject = certificateSubject)
    {
        certificateSubject = _certificateSubject;
        return certificateSubject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDigestAlgorithm</Name>
				<Source><![CDATA[
    public str getDigestAlgorithm()
    {
        return digestAlgorithm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEncoding</Name>
				<Source><![CDATA[
    public str getEncoding()
    {
        return encoding;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDigestAlgorithm</Name>
				<Source><![CDATA[
    public void setDigestAlgorithm(str _digestAlgorithm)
    {
        digestAlgorithm = _digestAlgorithm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEncoding</Name>
				<Source><![CDATA[
    public void setEncoding(str _encoding)
    {
        encoding = _encoding;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withCertificateSubject</Name>
				<Source><![CDATA[
    public RetailDigitalSignatureManager withCertificateSubject(DigitalCertificateSubject _certificateSubject)
    {
        this.parmCertificateSubject(_certificateSubject);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withKeyVaultCertificateRef</Name>
				<Source><![CDATA[
    public RetailDigitalSignatureManager withKeyVaultCertificateRef(KeyVaultCertificateRef _keyVaultCertificateRef)
    {
        this.parmKeyVaultCertificateRef(_keyVaultCertificateRef);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withDigestAlgirothm</Name>
				<Source><![CDATA[
    public RetailDigitalSignatureManager withDigestAlgirothm(str _digestAlgorithm)
    {
        this.setDigestAlgorithm(_digestAlgorithm);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withEncoding</Name>
				<Source><![CDATA[
    public RetailDigitalSignatureManager withEncoding(str _encoding)
    {
        this.setEncoding(_encoding);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withSettingsFromParms</Name>
				<Source><![CDATA[
    public RetailDigitalSignatureManager withSettingsFromParms()
    {
        this.validateDigitalSignatureParameters();

        RetailDigitalSignatureParameters signParms = RetailDigitalSignatureParameters::find();

        this.withCertificateSubject(signParms.DigitalCertificateSubject)
            .withKeyVaultCertificateRef(signParms.KeyVaultCertificateRef)
            .withDigestAlgirothm(signParms.DigestAlgorithm ? signParms.DigestAlgorithm : DefaultHashAlgorithm)
            .withEncoding(signParms.Encoding ? signParms.Encoding : DefaultEncodingUTF8);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDigitalSignatureParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates parameters.
    /// </summary>
    protected void validateDigitalSignatureParameters()
    {
        RetailDigitalSignatureParameters signParms = RetailDigitalSignatureParameters::find();

        if ((useAdvCert && !signParms.KeyVaultCertificateRef)
            || (!useAdvCert && !signParms.DigitalCertificateSubject))
        {
            throw error("@RetailGrandTotalJournal:JournalSigningFailure");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromParms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fabric method to create instance of <c>RetailDigitalSignatureManager</c> class with parameters defined in <c>RetailGrandTotalSignatureParameters</c> table.
    /// </summary>
    /// <returns>
    /// The instance of <c>RetailDigitalSignatureManager</c> class.
    /// </returns>
    public server static RetailIDigitalSignatureManager constructFromParms()
    {
        RetailDigitalSignatureManager ret = new RetailDigitalSignatureManager();

        return ret.withSettingsFromParms();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCertificate</Name>
				<Source><![CDATA[
    private void validateCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2 _certificate)
    {
        if (!_certificate)
        {
            return;
        }

        if (_certificate.NotBefore > System.DateTime::Now)
        {
            throw error("@SYS107064" + ' ' + _certificate.NotBefore.ToString());
        }

        if (_certificate.NotAfter < System.DateTime::Now)
        {
            throw error("@SYS107065" + ' ' + _certificate.NotAfter.ToString());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>