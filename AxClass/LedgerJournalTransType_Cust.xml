<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransType_Cust</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerJournalTransType_Cust extends LedgerJournalTransType
{
    CustTable custTableAccountNum;
    CustTable custTableOffsetAccountNum;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeCustTableAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the customer for a ledger journal transaction.
    /// </summary>
    protected void initializeCustTableAccountNum()
    {
        if (ledgerJournalTrans.parmLedgerDimension())
        {
            if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
            {
                if (custTableAccountNum.DataAreaId != ledgerJournalTrans.Company ||
                    custTableAccountNum.AccountNum != ledgerJournalTrans.parmAccount())
                {
                    this.defaultCompany();
                    this.validateCompany();
                    custTableAccountNum = ledgerJournalTrans.findCustTable();
                }
            }
            else
            {
                custTableAccountNum.clear();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCustTableOffsetAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the offset customer for a ledger journal transaction.
    /// </summary>
    protected void initializeCustTableOffsetAccountNum()
    {
        if (ledgerJournalTrans.parmOffsetLedgerDimension())
        {
            if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust)
            {
                if (custTableOffsetAccountNum.DataAreaId != ledgerJournalTrans.OffsetCompany ||
                    custTableOffsetAccountNum.AccountNum != ledgerJournalTrans.parmOffsetAccount())
                {
                    this.defaultOffsetCompany();
                    this.validateOffsetCompany();
                    custTableOffsetAccountNum = ledgerJournalTrans.findCustForOffset();
                }
            }
            else
            {
                custTableOffsetAccountNum.clear();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>LedgerJournalTransType_Cust</c> class.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    An instance of the <c>LedgerJournalTrans</c> table that is defaulted and validated.
    /// </param>
    /// <param name="_operation">
    ///    A <c>LedgerJournalOperation</c> enumeration value that indicates the callers operation.
    /// </param>
    /// <param name="_isInteractiveContext">
    ///    A Boolean value that indicates the caller context.
    /// </param>
    protected void new(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalOperation _operation, boolean _isInteractiveContext)
    {
        ledgerJournalTrans = _ledgerJournalTrans;
        operation = _operation;
        isInteractiveContext = _isInteractiveContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an initialized instance of the <c>LedgerJournalTransType_Cust</c> class.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    An instance of the <c>LedgerJournalTrans</c> table that represents the data that is applied and
    ///    validated.
    /// </param>
    /// <param name="_operation">
    ///    A <c>LedgerJournalOperation</c> enumeration value that indicates the callers operation.
    /// </param>
    /// <param name="_isInteractiveContext">
    ///    A Boolean value that indicates the caller context.
    /// </param>
    /// <returns>
    ///    A <c>LedgerJournalTableType_Cust</c> instance.
    /// </returns>
    public static LedgerJournalTransType_Cust construct(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalOperation _operation, boolean _isInteractiveContext)
    {
        return new LedgerJournalTransType_Cust(_ledgerJournalTrans, _operation, _isInteractiveContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTaxGroup</Name>
				<Source><![CDATA[
    protected TaxGroupJournal determineDefaultTaxGroup()
    {
        TaxGroupJournal taxGroup;

        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
        {
            this.initializeCustTableAccountNum();
            if (custTableAccountNum)
            {
                taxGroup = custTableAccountNum.TaxGroup;
            }
        }

        return taxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDimension</Name>
				<Source><![CDATA[
    protected DimensionDefault determineDefaultDimension()
    {
        DimensionDefault defaultDimension;
        DimensionDefault defaultDimensionCustTableAccountNum;

        defaultDimension = super();

        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
        {
            this.initializeCustTableAccountNum();

            if (custTableAccountNum && custTableAccountNum.DefaultDimension)
            {
                defaultDimensionCustTableAccountNum = custTableAccountNum.DefaultDimension;
                defaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(defaultDimension, defaultDimensionCustTableAccountNum);
            }
        }

        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCurrencyCode</Name>
				<Source><![CDATA[
    protected CurrencyCode determineDefaultCurrencyCode()
    {
        CurrencyCode currencyCode;

        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust && ledgerJournalTrans.parmLedgerDimension())
        {
            this.initializeCustTableAccountNum();
            // get CurrencyCode from the account first
            currencyCode = custTableAccountNum.Currency;
        }

        // if still not defaulted, use fallback
        if (currencyCode == '')
        {
            currencyCode = super();
        }

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOffsetDefaultDimension</Name>
				<Source><![CDATA[
    protected void defaultOffsetDefaultDimension()
    {
        // don't default for Cust strategy
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTaxItemGroup</Name>
				<Source><![CDATA[
    protected void defaultTaxItemGroup()
    {
        // don't default for Cust strategy
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLedgerDimension</Name>
				<Source><![CDATA[
    protected boolean validateLedgerDimension(boolean logFault = true)
    {
        boolean isValid = true;

        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust && ledgerJournalTrans.parmLedgerDimension())
        {
            this.initializeCustTableAccountNum();
            if (!custTableAccountNum)
            {
                isValid = false;
                if (logFault)
                {
                    checkFailed(strFmt("@SYS4730", ledgerJournalTrans.parmAccount()));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOffsetLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the offset ledger dimension is correct for the given account type.
    /// </summary>
    /// <param name = "logFault">true if an error should be added to the infolog; otherwise, suppress. Optional.</param>
    /// <returns>true if the offset ledger dimension is valid; otherwise, false.</returns>
    protected boolean validateOffsetLedgerDimension(boolean logFault = true)
    {
        boolean isValid = true;

        if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust && ledgerJournalTrans.parmOffsetLedgerDimension())
        {
            this.initializeCustTableOffsetAccountNum();
            if (!custTableOffsetAccountNum)
            {
                isValid = false;
                if (logFault)
                {
                    checkFailed(strFmt("@SYS4730", ledgerJournalTrans.parmOffsetAccount()));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineCashDiscCode</Name>
				<Source><![CDATA[
    protected CashDiscCode determineCashDiscCode()
    {
        CashDiscCode cashDiscCode;

        this.initializeCustTableAccountNum();
        if (custTableAccountNum && !ledgerJournalTrans.CashDiscCode && custTableAccountNum.CashDisc)
        {
            this.initializeLedgerJournalTable();

            if (ledgerjournalTable.JournalType == LedgerJournalType::Daily)
            {
                cashDiscCode =  custTableAccountNum.CashDisc;
            }
        }
        else
        {
            cashDiscCode = ledgerJournalTrans.CashDiscCode;
        }
        return cashDiscCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOffsetAccount</Name>
				<Source><![CDATA[
    protected void defaultOffsetAccount()
    {
        boolean wasDefaulted;

        if (operation == LedgerJournalOperation::Create
            && ledgerJournalTrans.OffsetLedgerDimension == 0
            && this.isConsumerStateTracked()
            && ledgerJournalTrans.PaymMode != '')
        {
            this.initializeLedgerJournalTable();
            if (ledgerJournalTable.JournalType == LedgerJournalType::CustPayment)
            {
                //When payments use bridging, we know the offset information
                CustPaymModeTable custPaymModeTable = CustPaymModeTable::find(ledgerJournalTrans.PaymMode);
                if (custPaymModeTable.FurtherPosting == NoYes::Yes)
                {
                    this.defaultFieldValue(fieldNum(LedgerJournalTrans, OffsetCompany), curExt());
                    this.defaultFieldValue(fieldNum(LedgerJournalTrans, OffsetAccountType), LedgerJournalACType::Ledger);
                    this.defaultFieldValue(fieldNum(LedgerJournalTrans, OffsetLedgerDimension), custPaymModeTable.InterCompanyLedgerDimension);

                    wasDefaulted = true;
                }
            }
        }


        if (!wasDefaulted)
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determinePostingProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves default posting profile from <c>CustParameters</c> table record.
    /// </summary>
    /// <returns>
    /// returns the default posting profile from parameters setup.
    /// </returns>
    protected PostingProfile determinePostingProfile()
    {
        PostingProfile postingProfile = ledgerJournalTrans.PostingProfile;

        if (!postingProfile)
        {
            postingProfile = CustParameters::find().PostingProfile;
        }

        return postingProfile;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>