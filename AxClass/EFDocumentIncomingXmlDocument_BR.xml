<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocumentIncomingXmlDocument_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Incoming XML document implementation
/// Provides means to extract information from incoming XML
/// </summary>
public class EFDocumentIncomingXmlDocument_BR
{
    EFDocReceivedXmlReader_BR xmlReader;
    XmlDocument               xmlDoc;
    #EFDocumentXpath_BR
    #EFDocConstants_BR
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAccessKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the access key from the XML
    /// </summary>
    /// <returns>
    /// Access key in the xml
    /// </returns>
    public EFDocAccessKey_BR getAccessKey()
    {
        EFDocAccessKey_BR accessKey;
        str               idAttributeValue;

        idAttributeValue = this.getAttributeValue('/x:nfeProc/x:NFe/x:infNFe', 'Id');
        accessKey = subStr(idAttributeValue, 4, strLen(idAttributeValue));

        return accessKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdditionalInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the additional information
    /// </summary>
    /// <returns>
    /// Additional information from infAdic tag
    /// </returns>
    public EFDocRecXmlAddInf_BR getAdditionalInformation()
    {
        return this.getNodeContent('/x:nfeProc/x:NFe/x:infNFe/x:infAdic/x:infAdFisco');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributeValue</Name>
				<Source><![CDATA[
    private str getAttributeValue(str _xPath, str _attributeName)
    {
        return xmlReader.getAttributeValue(_xPath, _attributeName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getComplementaryInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the complementary information
    /// </summary>
    /// <returns>
    /// Complementary information from infAdic tag
    /// </returns>
    public EFDocRecXmlCompInf_BR getComplementaryInformation()
    {
        return this.getNodeContent('/x:nfeProc/x:NFe/x:infNFe/x:infAdic/x:infCpl');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDestCnpj</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Destination CNPJ from the XML
    /// </summary>
    /// <returns>
    /// CNPJ from the dest tag
    /// </returns>
    public CNPJCPFNum_BR getDestCnpj()
    {
        return strKeep(this.getNodeContent('/x:nfeProc/x:NFe/x:infNFe/x:dest/x:CNPJ'), '0123456789');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIcmsBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ICMS base amount from the xml
    /// </summary>
    /// <returns>
    /// ICMS base amount tag content
    /// </returns>
    public TaxBase getIcmsBaseAmount()
    {
        str nodeContent = this.getNodeContent('/x:nfeProc/x:NFe/x:infNFe/x:total/x:ICMSTot/x:vBC');

        return str2num(nodeContent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIcmsStBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ICMS ST Base amount from the xml
    /// </summary>
    /// <returns>
    /// ICMS ST Base amount tag content
    /// </returns>
    public TaxBase getIcmsStBaseAmount()
    {
        str nodeContent = this.getNodeContent('/x:nfeProc/x:NFe/x:infNFe/x:total/x:ICMSTot/x:vBCST');

        return str2num(nodeContent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIcmsStTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ICMS ST total amount from the xml
    /// </summary>
    /// <returns>
    /// ICMS ST total amount tag content
    /// </returns>
    public TaxAmount getIcmsStTotalAmount()
    {
        str nodeContent = this.getNodeContent('/x:nfeProc/x:NFe/x:infNFe/x:total/x:ICMSTot/x:vST');

        return str2num(nodeContent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIcmsTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ICMS total amount from the xml
    /// </summary>
    /// <returns>
    /// ICMS total amount tag content
    /// </returns>
    public TaxAmount getIcmsTotalAmount()
    {
        str nodeContent = this.getNodeContent('/x:nfeProc/x:NFe/x:infNFe/x:total/x:ICMSTot/x:vICMS');

        return str2num(nodeContent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIpiTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets IPI total amount from the xml
    /// </summary>
    /// <returns>
    /// IPI total amount tag content
    /// </returns>
    public TaxAmount getIpiTotalAmount()
    {
        str nodeContent = this.getNodeContent('/x:nfeProc/x:NFe/x:infNFe/x:total/x:ICMSTot/x:vIPI');

        return str2num(nodeContent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIssueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the issue date from the received XML
    /// </summary>
    /// <returns>
    /// The issue date of the received XML
    /// </returns>
    public EFDocRecXmlIssueDate_BR getIssueDate()
    {
        date    issueDate;
        str     nodeContent;

        if (this.getVersion() == #EFDocLayoutVersion200)
        {
            nodeContent = this.getNodeContent('/x:nfeProc/x:NFe/x:infNFe/x:ide/x:dEmi');

            issueDate = str2Date(nodeContent, 321);
        }
        else
        {
            nodeContent = this.getNodeContent('/x:nfeProc/x:NFe/x:infNFe/x:ide/x:dhEmi');

            nodeContent = subStr(nodeContent, 1, 19);

            issueDate = DateTimeUtil::date(DateTimeUtil::parse(nodeContent));
        }

        return issueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIssuerAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a new instance of the parser that gets the content of the issuer address tags
    /// </summary>
    /// <returns>
    /// Parser to get the content of the issuer address tags
    /// </returns>
    public EFDocumentIncomingXmlDocIssuerAddress_BR getIssuerAddress()
    {
        return new EFDocumentIncomingXmlDocIssuerAddress_BR(xmlDoc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of EFDocumentIncomingXmlDocumentLine_BR which will be able to parse the fiscal document lines of the xml.
    /// </summary>
    /// <returns>
    /// List of EFDocumentIncomingXmlDocumentLine_BR
    /// </returns>
    public List getLines()
    {
        List                                 xmlFiscalDocumentLines = new List(Types::Class);
        int                                  i;
        int                                  numberOfLines;
        EFDocumentIncomingXmlDocumentLine_BR newLine;

        numberOfLines = this.getNumberOfLines();

        for (i = 1; i <= numberOfLines; ++i)
        {
            newLine = EFDocumentIncomingXmlDocumentLine_BR::construct(xmlDoc, i);
            xmlFiscalDocumentLines.addEnd(newLine);
        }

        return xmlFiscalDocumentLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeContent</Name>
				<Source><![CDATA[
    private str getNodeContent(str _xPath)
    {
        return xmlReader.getNodeContent(_xpath);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of fiscal document lines from the xml.
    /// </summary>
    /// <returns>
    /// Number of fiscal document lines
    /// </returns>
    public int getNumberOfLines()
    {
        return xmlDoc.getElementsByTagName(#FiscalDocumentLineTag).length();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total document amount from the xml
    /// </summary>
    /// <returns>
    /// total  amount tag content
    /// </returns>
    public TaxAmount getTotalAmount()
    {
        str nodeContent = this.getNodeContent('/x:nfeProc/x:NFe/x:infNFe/x:total/x:ICMSTot/x:vNF');

        return str2num(nodeContent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total discount amount from the xml
    /// </summary>
    /// <returns>
    /// total discount amount tag content
    /// </returns>
    public DiscAmount getTotalDiscount()
    {
        str nodeContent = this.getNodeContent('/x:nfeProc/x:NFe/x:infNFe/x:total/x:ICMSTot/x:vDesc');

        return str2num(nodeContent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalMarkupFreightAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets freight total amount from the xml
    /// </summary>
    /// <returns>
    /// Freight amount tag content
    /// </returns>
    public MarkupSumFreight_BR getTotalMarkupFreightAmount()
    {
        str nodeContent = this.getNodeContent('/x:nfeProc/x:NFe/x:infNFe/x:total/x:ICMSTot/x:vFrete');

        return str2num(nodeContent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalMarkupInsuranceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets insurance total amount from the xml
    /// </summary>
    /// <returns>
    /// Insurance amount tag content
    /// </returns>
    public MarkupSumInsurance_BR getTotalMarkupInsuranceAmount()
    {
        str nodeContent = this.getNodeContent('/x:nfeProc/x:NFe/x:infNFe/x:total/x:ICMSTot/x:vSeg');

        return str2num(nodeContent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalMarkupOtherAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets other miscellaneous charges total amount from the xml
    /// </summary>
    /// <returns>
    /// Other miscellaneous charges amount tag content
    /// </returns>
    public MarkupSumOthers_BR getTotalMarkupOtherAmount()
    {
        str nodeContent = this.getNodeContent('/x:nfeProc/x:NFe/x:infNFe/x:total/x:ICMSTot/x:vOutro');

        return str2num(nodeContent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalProductAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total amount from products and services from the XML
    /// </summary>
    /// <returns>
    /// The total amounts from products and services
    /// </returns>
    public TaxAmount getTotalProductAmount()
    {
        str productsNodeContent = this.getNodeContent('/x:nfeProc/x:NFe/x:infNFe/x:total/x:ICMSTot/x:vProd');
        str servicesNodeContent = this.getNodeContent('/x:nfeProc/x:NFe/x:infNFe/x:total/x:ISSQNtot/x:vServ');

        return str2num(productsNodeContent) + str2num(servicesNodeContent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorCnpj</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets vendor CNPJ
    /// </summary>
    /// <returns>
    /// Vendor CNPJ from emit tag
    /// </returns>
    public CNPJCPFNum_BR getVendorCnpj()
    {
        return strkeep(this.getNodeContent('/x:nfeProc/x:NFe/x:infNFe/x:emit/x:CNPJ'), '0123456789');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorIe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets vendor IE
    /// </summary>
    /// <returns>
    /// Vendor IE from emit tag
    /// </returns>
    public IENum_BR getVendorIe()
    {
        return strkeep(this.getNodeContent('/x:nfeProc/x:NFe/x:infNFe/x:emit/x:IE'), '0123456789');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorIeTributarySubstitute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets vendor IE ST
    /// </summary>
    /// <returns>
    /// Vendor IE ST from emit tag
    /// </returns>
    public IENum_BR getVendorIeTributarySubstitute()
    {
        str ieSt = this.getNodeContent('/x:nfeProc/x:NFe/x:infNFe/x:emit/x:IEST');

        if (ieSt)
        {
            return strKeep(ieSt, '0123456789');
        }

        return ieSt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets vendor name
    /// </summary>
    /// <returns>
    /// Vendor s name from emit tag
    /// </returns>
    public EFDocRecXmlThirdPartyName_BR getVendorName()
    {
        return this.getNodeContent('/x:nfeProc/x:NFe/x:infNFe/x:emit/x:xNome');
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(XmlDocument _xmlDoc)
    {
        xmlDoc = _xmlDoc;
        xmlReader = new EFDocReceivedXmlReader_BR(xmlDoc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>xml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Xml as string
    /// </summary>
    /// <returns>
    /// Xml from XML document
    /// </returns>
    public str xml(int _indent = 0)
    {
        return xmlDoc.xml();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>EFDocumentIncomingXmlDocument_BR</c> class for a given XML
    /// </summary>
    /// <param name="_xml">
    /// The received XML to be parsed
    /// </param>
    /// <returns>
    /// A new instance of the <c>EFDocumentIncomingXmlDocument_BR</c> class
    /// </returns>
    public static EFDocumentIncomingXmlDocument_BR construct(str _xml)
    {
        EFDocumentIncomingXmlDocument_BR efDocumentIncomingXmlDocument;
        XmlDocument                      newXmlDoc;

        newXmlDoc = new XmlDocument();
        newXmlDoc.loadXml(_xml);

        efDocumentIncomingXmlDocument = new EFDocumentIncomingXmlDocument_BR(newXmlDoc);

        return efDocumentIncomingXmlDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>EFDocumentIncomingXmlDocument_BR</c> instance from a stream
    /// </summary>
    /// <param name="stream">
    /// Stream containing a XML
    /// </param>
    /// <returns>
    /// <c>EFDocumentIncomingXmlDocument_BR</c> instance from the given stream
    /// </returns>
    public static EFDocumentIncomingXmlDocument_BR constructFromStream(System.IO.Stream stream)
    {
        System.IO.StreamReader streamReader;
        str xmlAsString;

        streamReader = new System.IO.StreamReader(stream);

        xmlAsString = streamReader.ReadToEnd();

        return EFDocumentIncomingXmlDocument_BR::construct(xmlAsString);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIssueTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the issue time from the received XMl
    /// </summary>
    /// <returns>
    /// The issue time of the received XML
    /// </returns>
    public TimeOfDay getIssueTime()
    {
        TimeOfDay   issueTime;
        str         nodeContent;

        if (this.getVersion() == #EFDocLayoutVersion310)
        {
            nodeContent = this.getNodeContent('/x:nfeProc/x:NFe/x:infNFe/x:ide/x:dhEmi');

            nodeContent = subStr(nodeContent, 1, 19);

            issueTime = DateTimeUtil::time(DateTimeUtil::parse(nodeContent));
        }

        return issueTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIssueTimezone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the issue timezone from the received XMl
    /// </summary>
    /// <returns>
    /// The issue timezone of the received XML
    /// </returns>
    public EFDocRecXmlIssueTimezone_BR getIssueTimezone()
    {
        EFDocRecXmlIssueTimezone_BR     issueTimezone;
        str                             nodeContent;

        if (this.getVersion() == #EFDocLayoutVersion310)
        {
            nodeContent = this.getNodeContent('/x:nfeProc/x:NFe/x:infNFe/x:ide/x:dhEmi');

            issueTimezone = subStr(nodeContent, 20, 6);
        }

        return issueTimezone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVersion</Name>
				<Source><![CDATA[
    private str getVersion()
    {
        str                 version;

        version = this.getAttributeValue('/x:nfeProc/x:NFe/x:infNFe', 'versao');

        return version;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>