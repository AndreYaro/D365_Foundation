<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_Ledger</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rTax25RegCalc_Ledger extends RTax25RegCalc implements BatchRetryable
{
    int                             maxThreads;
    RTax25RegCalc_LedgerMultiply    itemThread, finalThread;
    BatchHeader                     batchHeader;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        int       startCount = 1;
        SetEnumerator   periodsEnumerator;
        ;

        super();

        finalThread = RTax25RegCalc_LedgerMultiply::construct(registerType);
        finalThread.parmStartCount(0);
        finalThread.parmJournalTransRecId(registerJournalTrans.RecId);
        finalThread.parmIsInBatch(this.isInBatch());

        if (maxThreads > 1)
        {
            batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
            finalThread.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);
            finalThread.batchInfo().parmCaption(registerJournalTrans.RegisterId + ": " + "@SYP4860779");
            batchHeader.addRuntimeTask(finalThread, this.parmCurrentBatch().RecId);

            periodsEnumerator = RTax25PeriodFactory::createIteratorSetJournal(registerJournalTrans.registerJournalTable(), maxThreads).getEnumerator();

            while (periodsEnumerator.moveNext())
            {
                startCount += this.createTask(
                    startCount,
                    dateFrom,
                    dateTo,
                    periodsEnumerator.current());
            }

            batchHeader.save();
        }
        else
        {
            itemThread = RTax25RegCalc_LedgerMultiply::construct(registerType);
            itemThread.parmStartCount(1);
            itemThread.parmJournalTransRecId(registerJournalTrans.RecId);
            itemThread.parmRTax25PeriodIterator(rTax25PeriodIterator);
            itemThread.parmDateRange(dateFrom, dateTo);
            itemThread.runOperation();
            finalThread.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParameters</Name>
				<Source><![CDATA[
    protected boolean checkParameters()
    {
        if (! (select firstonly RTax25ProfitTable from rTax25RegisterProfit
                   where rTax25RegisterProfit.RegisterId == registerId).RTax25ProfitTable)
            return checkFailed("@GLS103998");

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctedPeriodDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the minimum date from the dates which correspond to the end of the quarter in which the reporting date of the corrective transaction is included.
    /// </summary>
    /// <param name="_fromDateCalc">
    ///    Start date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCalc">
    ///    End date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCorr">
    ///    End date of the period in which the reporting date should be included.
    /// </param>
    /// <returns>
    ///    Minimum date from the dates which correspond to the end of the quarter in which the corrective transaction is included.
    /// </returns>
    public ReportingDate_RU correctedPeriodDate(FromDate _fromDateCalc, ToDate _toDateCalc, ToDate _toDateCorr)
    {
        return RTax25LedgerRun::newRegisterIdCheckCorr(registerId).calcCorrectedPeriodDate(
            _fromDateCalc,
            _toDateCalc,
            _toDateCorr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTask</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int64 createTask(int                  _startCount,
                            TransDate            _curDateFrom,
                            TransDate            _curDateTo,
                            RTax25PeriodIterator _rTax25PeriodIterator)
    {
        GeneralJournalEntryReportingView_RU gje;
        GeneralJournalAccountEntry          gjae;
        GeneralJournalAccountEntry_W        gjae_W;

        int64                               startCount;

        itemThread = RTax25RegCalc_LedgerMultiply::construct(registerType);
        itemThread.parmStartCount(_startCount);
        itemThread.parmJournalTransRecId(registerJournalTrans.RecId);
        itemThread.parmIsInBatch(this.isInBatch());
        itemThread.parmRTax25PeriodIterator(_rTax25PeriodIterator);
        itemThread.parmDateRange(_curDateFrom, _curDateTo);

        _rTax25PeriodIterator.first();

        itemThread.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);
        itemThread.batchInfo().parmCaption(registerJournalTrans.RegisterId + ": " + strfmt("@SYP4860774", _rTax25PeriodIterator.fromDateAccounting(), _rTax25PeriodIterator.toDateAccounting()));
        batchHeader.addRuntimeTask(itemThread, this.parmCurrentBatch().RecId);
        batchHeader.addDependency(finalThread, itemThread);

        do
        {
            select count(RecId) from gjae
                where gjae.IsCredit       == NoYes::No
            exists join gje
                where gje.TransRecId      == gjae.GeneralJournalEntry                       &&
                      gje.Ledger          == Ledger::current()                              &&
                      gje.PostingLayer    == CurrentOperationsTax::Current                  &&
                      gje.AccountingDate  >= _rTax25PeriodIterator.fromDateAccounting()     &&
                      gje.AccountingDate  <= _rTax25PeriodIterator.toDateAccounting()       &&
                      gje.ReportingDate   >= _rTax25PeriodIterator.fromDateReporting()      &&
                      gje.ReportingDate   <= _rTax25PeriodIterator.toDateReporting()
            exists join gjae_W
                where gjae_W.GeneralJournalAccountEntry == gjae.RecId &&
                      gjae_W.BondBatchTrans_RU;

            startCount += gjae.RecId;
        }
        while (_rTax25PeriodIterator.next());

        return startCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init(RTax25RegisterJournalTrans  _registerJournalTrans = null,
                        Batch                       _batch                = null)
    {
        super(_registerJournalTrans, _batch);

        if (this.isInBatch())
        {
            maxThreads = RTax25RegisterParameters::find(registerId, 1).Parameter ?
                         str2int(RTax25RegisterParameters::find(registerId, 1).Parameter) :
                         0;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCalc</Name>
				<Source><![CDATA[
    public void postCalc()
    {
    //   super(); do not change the register status
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>