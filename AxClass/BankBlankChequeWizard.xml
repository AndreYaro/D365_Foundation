<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankBlankChequeWizard</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>BankBlankChequeWizard</c> class is creating the cheques with blank status.
/// </summary>
internal final class BankBlankChequeWizard extends SysWizard
{
    private CompanyBankAccountId bankAccountId;
    private BankChequeQty numOfBlankCheques;
    private CustVendCheque custVendCheque;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    internal FormName formName()
    {
        return formstr(BankBlankChequeWizard);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    internal void run()
    {
        try
        {
            ttsbegin;
            if (!this.isBankAccountStatusActive())
            {
                custVendCheque.createAndSetBlankCheques(
                Ledger::accountingCurrency(CompanyInfo::current()),
                DatetimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                this.parmNumOfBlankCheques());
            }
            else
            {
                throw error(strFmt("@CashManagement:BankBlankChequeWizardBankAccountErrorMsg", bankAccountId));
            }
            ttscommit;
        }
        catch (Exception::Error)
        {
            throw Exception::Error;
        }
        finally
        {
            this.updateBankAccountStatus(BankAccountHoldStatus::ActiveForAllTransactions);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupNavigation</Name>
				<Source><![CDATA[
    protected void setupNavigation()
    {
        this.nextEnabled(false, this.curTab(), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankAccountId</Name>
				<Source><![CDATA[
    internal CompanyBankAccountId parmBankAccountId(CompanyBankAccountId _bankAccountId = bankAccountId)
    {
        bankAccountId = _bankAccountId;
        return bankAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBankAccountStatusActive</Name>
				<Source><![CDATA[
    internal boolean isBankAccountStatusActive()
    {
        return BankAccountTable::find(this.parmBankAccountId()).BankAccountStatus == BankAccountHoldStatus::ActiveForAllTransactions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumOfBlankCheques</Name>
				<Source><![CDATA[
    internal BankChequeQty parmNumOfBlankCheques(BankChequeQty _numOfBlankCheques = numOfBlankCheques)
    {
        numOfBlankCheques = _numOfBlankCheques;
        return numOfBlankCheques;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancel</Name>
				<Source><![CDATA[
    internal void cancel()
    {
        if (!this.isBankAccountStatusActive())
        {
            this.updateBankAccountStatus(BankAccountHoldStatus::ActiveForAllTransactions);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCustVendCheque</Name>
				<Source><![CDATA[
    private void initializeCustVendCheque()
    {
        custVendCheque = new CustVendCheque();

        custVendCheque.parmAccountId(this.parmBankAccountId());
        custVendCheque.initChequeNumEx(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextChequeNumber</Name>
				<Source><![CDATA[
    internal BankChequeStartNum getNextChequeNumber()
    {
        this.initializeCustVendCheque();

        return custVendCheque.parmFirstChequeNum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    internal boolean validate()
    {
        BankBlankChequeValidator bankBlankChequeValidator = BankBlankChequeValidator::construct();
        
        return bankBlankChequeValidator.validateNumOfBlankCheques(this.parmNumOfBlankCheques());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankAccountStatus</Name>
				<Source><![CDATA[
    internal void updateBankAccountStatus(BankAccountHoldStatus _bankAccountStatus)
    {
        BankAccountTable bankAccountTable;

        update_recordset bankAccountTable
            setting
                BankAccountStatus = _bankAccountStatus
            where bankAccountTable.AccountID == bankAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    internal static str description()
    {
        return "@CashManagement:BankBlankChequeCreate";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    internal static void main(Args _args)
    {
        BankBlankChequeWizard wizard = new BankBlankChequeWizard();

        if (wizard.prompt())
        {
            wizard.run();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>