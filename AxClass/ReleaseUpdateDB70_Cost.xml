<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReleaseUpdateDB70_Cost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReleaseUpdateDB70_Cost</c> class contains upgrade scripts from CTP7 to CTP8 releases of AX7.
/// </summary>
public class ReleaseUpdateDB70_Cost extends ReleaseUpdateDB
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>moduleName</Name>
				<Source><![CDATA[
    public ReleaseUpdateModule moduleName()
    {
        return "@CostManagement:UpgradeScript_Cost";
    }

]]></Source>
			</Method>
			<Method>
				<Name>myVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// The script runs in any system having version < CTP8.
    /// </summary>
    /// <returns>Script version.</returns>
    public sysReleasedVersion myVersion()
    {
        return sysReleasedVersion::CTP8;
    }

]]></Source>
			</Method>
			<Method>
				<Name>upgradeCostReconciliationParameters</Name>
				<Source><![CDATA[
    [
    UpgradeScriptDescriptionAttribute("@CostManagement:UpgradeScript_Cost_CostReconciliationParameters"),
    UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PreSyncUpdate),
    UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::SharedScript),
    UpgradeScriptConfigKeyAttribute(configurationKeyStr(LogisticsBasic)),
    UpgradeScriptTableAttribute(tableStr(CostParameters), true, false, true, false)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void upgradeCostReconciliationParameters()
    {
        // Upgrade the cost reconciliation parameters
        const str tempTableName = 'TEMPORARYCOSTPARAMETERSTABLE';
        const str tempReconciliationMethodFieldName = 'RECONCILIATIONMETHOD';
        const str tempInventoryMainAccountFieldName = 'INVENTORYMAINACCOUNT';
        const str tempWIPMainAccountFieldName = 'WIPMAINACCOUNT';
        const str tempInventoryAccountCategoryRefFieldName = 'INVENTORYACCOUNTCATEGORYREF';
        const str tempWIPAccountCategoryRefFieldName = 'WIPACCOUNTCATEGORYREF';
        const str tempPartitionFieldName = 'PARTITION';

        SysDictTable dictCostParameters = new SysDictTable(tableNum(CostParameters));
        SysDictTable dictDataArea = new SysDictTable(tableNum(DataArea));

        Connection sessionConn = new Connection();
        Statement statement = sessionConn.createStatement();

        // Save the data from the old table into a temp table, in case the old table gets dropped when we
        // synchronize the new table
        /*
        SELECT
         RECONCILIATIONMETHOD
         ,INVENTORYMAINACCOUNT
         ,WIPMAINACCOUNT
         ,INVENTORYACCOUNTCATEGORYREF
         ,WIPACCOUNTCATEGORYREF
         ,PARTITION
        INTO TEMPORARYCOSTPARAMETERSTABLE
        FROM COSTRECONCILIATIONPARAMETERS
        */
        str sqlCopyTempStatement = 'SELECT '
            + '\n '  + tempReconciliationMethodFieldName
            + '\n ,' + tempInventoryMainAccountFieldName
            + '\n ,' + tempWIPMainAccountFieldName
            + '\n ,' + tempInventoryAccountCategoryRefFieldName
            + '\n ,' + tempWIPAccountCategoryRefFieldName
            + '\n ,' + tempPartitionFieldName
            + '\n INTO ' + tempTableName
            + '\n FROM COSTRECONCILIATIONPARAMETERS';

        new SqlStatementExecutePermission(sqlCopyTempStatement).assert();
        statement.executeUpdateWithParameters(sqlCopyTempStatement, SqlParams::create());

        // Synchronize the CostParameters table to the database
        appl().dbSynchronize(tableNum(CostParameters), false);

        // Copy the data from the temp table to the new table, by adding one record per company
        /*
        INSERT INTO COSTPARAMETERS
           (RECONCILIATIONMETHOD
           ,INVENTORYMAINACCOUNT
           ,WIPMAINACCOUNT
           ,INVENTORYACCOUNTCATEGORYREF
           ,WIPACCOUNTCATEGORYREF
           ,STATEMENTCACHEAGGREGATIONAFTER
           ,DATAAREAID
           ,PARTITION)
             SELECT RECONCILIATIONMETHOD
              ,T1.INVENTORYMAINACCOUNT
              ,T1.WIPMAINACCOUNT
              ,T1.INVENTORYACCOUNTCATEGORYREF
              ,T1.WIPACCOUNTCATEGORYREF
              ,2
              ,T2.ID
              ,T1.PARTITION
          FROM TEMPORARYCOSTPARAMETERSTABLE T1
          JOIN DATAAREA T2 on T1.PARTITION = T2.PARTITION
        */
        str sqlCopyStatement = 'INSERT INTO ' + dictCostParameters.name(DbBackend::Sql)
            + '\n (' + dictCostParameters.fieldName(fieldnum(CostParameters, ReconciliationMethod), DbBackend::Sql)
            + '\n ,' + dictCostParameters.fieldName(fieldnum(CostParameters, InventoryMainAccount), DbBackend::Sql)
            + '\n ,' + dictCostParameters.fieldName(fieldnum(CostParameters, WIPMainAccount), DbBackend::Sql)
            + '\n ,' + dictCostParameters.fieldName(fieldnum(CostParameters, InventoryAccountCategoryRef), DbBackend::Sql)
            + '\n ,' + dictCostParameters.fieldName(fieldnum(CostParameters, WIPAccountCategoryRef), DbBackend::Sql)
            + '\n ,' + dictCostParameters.fieldName(fieldnum(CostParameters, StatementCacheAggregationAfter), DbBackend::Sql)
            + '\n ,' + dictCostParameters.fieldName(fieldnum(CostParameters, DataAreaId), DbBackend::Sql)
            + '\n ,' + dictCostParameters.fieldName(fieldnum(CostParameters, Partition), DbBackend::Sql) + ')'
            + '\n SELECT ' + tempReconciliationMethodFieldName
            + '\n ,T1.' + tempInventoryMainAccountFieldName
            + '\n ,T1.' + tempWIPMainAccountFieldName
            + '\n ,T1.' + tempInventoryAccountCategoryRefFieldName
            + '\n ,T1.' + tempWIPAccountCategoryRefFieldName
            + '\n ,' + int2Str(enum2int(CostStatementCacheAggregationAfter::TwoYears))
            + '\n ,T2.' + dictDataArea.fieldName(fieldnum(DataArea, Id), DbBackend::Sql)
            + '\n ,T1.' + tempPartitionFieldName
            + '\n FROM ' + tempTableName + ' T1'
            + '\n JOIN '
            + dictDataArea.name(DbBackend::Sql) + ' T2 on T2.' + dictDataArea.fieldName(fieldnum(DataArea, Partition), DbBackend::Sql) + ' = T1.PARTITION';

        new SqlStatementExecutePermission(sqlCopyStatement).assert();
        statement.executeUpdateWithParameters(sqlCopyStatement, SqlParams::create());

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCostStatementCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the cost statement cache tables.
    /// </summary>
    [
    UpgradeScriptDescriptionAttribute("@CostManagement:UpgradeScript_Cost_CostStatementCache"),
    UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PreSyncUpdate),
    UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::StandardScript),
    UpgradeScriptConfigKeyAttribute(configurationKeyStr(LogisticsBasic)),
    UpgradeScriptTableAttribute(tableStr(CostStatementCache), false, false, true, false),
    UpgradeScriptTableAttribute(tableStr(CostStatementCacheOpenPeriod), false, false, true, false),
    UpgradeScriptTableAttribute(tableStr(CostStatementCacheTrackDeltaUpdate), false, false, true, false)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void clearCostStatementCache()
    {
        CostStatementCacheOpenPeriod            costStatementCacheOpenPeriod;
        CostStatementCacheTrackDeltaUpdate      costStatementCacheTrackDeltaUpdate;
        CostStatementCache                      costStatementCache;

        ttsbegin;

        delete_from costStatementCacheOpenPeriod;
        delete_from costStatementCacheTrackDeltaUpdate;
        delete_from costStatementCache;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dropInventStandardCostVarianceLedgerPostingDefinitionStagingTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Drops the <c>InventStandardCostVarianceLedgerPostingDefinitionStaging</c> table.
    /// </summary>
    [
    UpgradeScriptDescriptionAttribute("@CostManagement:UpgradeScript_Cost_InventStandardCostVarianceLedgerPostingDefinitionStaging"),
    UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PreSyncUpdate),
    UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::SharedScript),
    UpgradeScriptConfigKeyAttribute(configurationKeyStr(LogisticsBasic)),
    UpgradeScriptTableAttribute(tableStr(SqlDictionary), false, false, false, true)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void dropInventStandardCostVarianceLedgerPostingDefinitionStagingTable()
    {
        UserConnection  sessionConnection = new UserConnection();
        Statement   statement = sessionConnection.createStatement();
        SysDictTable dictInventStandardCostVarianceLedgerPostingDefinitionStaging = new SysDictTable(tableNum(InventStandardCostVarianceLedgerPostingDefinitionStaging));

        str sqlStatement = strFmt(@"IF EXISTS (SELECT * FROM sys.tables where Name = N'%1')
                            BEGIN
                                DROP TABLE [%1]
                                DELETE FROM SQLDICTIONARY WHERE TABLEID = %2
                            END",
                                    dictInventStandardCostVarianceLedgerPostingDefinitionStaging.name(DbBackend::Sql),
                                    dictInventStandardCostVarianceLedgerPostingDefinitionStaging.id());

        new SqlStatementExecutePermission(sqlStatement).assert();
        statement.executeUpdateWithParameters(sqlStatement, SqlParams::create());

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>