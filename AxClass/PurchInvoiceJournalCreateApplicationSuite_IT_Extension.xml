<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchInvoiceJournalCreateApplicationSuite_IT_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class complements <c>PurchInvoiceJournalCreate</c> behavior in order to support extension fields and operations on them.
/// </summary>
[ExtensionOf(classStr(PurchInvoiceJournalCreate))]
public final class PurchInvoiceJournalCreateApplicationSuite_IT_Extension
{
    public boolean isUsualExporterInvoice;
    public IntentLetter_IT intentLetter;
    public Plafond_IT plafond;
    public TaxGroup plafondTaxGroup;
    public AmountCur totalExemptAmount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkHeading</Name>
				<Source><![CDATA[
    protected boolean checkHeading()
    {
        boolean ok = next checkHeading();

        if (FeatureStateProvider::isFeatureEnabled(PlafondFeature::instance()))
        {
            this.initUsualExporter_IT();

            if (isUsualExporterInvoice)
            {
                if (!this.plafondDate_IT())
                {
                    throw error("@ExtendedItallianLocalization:PlafondDateNotSpecified");
                }

                if (! plafond)
                {
                    throw error(strfmt("@ExtendedItallianLocalization:NoActivePlafondFoundInDate", this.plafondDate_IT()));
                }

                if (! plafondTaxGroup)
                {
                    throw error("@ExtendedItallianLocalization:ExemptionTaxGroupNotDefined");
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    protected void createJournalLine(Common _vendInvoiceInfoLine)
    {
        if (FeatureStateProvider::isFeatureEnabled(PlafondFeature::instance()))
        {
            this.checkUsualExporterBeforePosting_IT();
        }

        next createJournalLine( _vendInvoiceInfoLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalHeader</Name>
				<Source><![CDATA[
    protected void initJournalHeader()
    {
        next initJournalHeader();

        if (isUsualExporterInvoice && FeatureStateProvider::isFeatureEnabled(PlafondFeature::instance()))
        {
            VendInvoiceJour vendInvoiceJour = this.parmVendInvoiceJour_W();
            vendInvoiceJour.IntentLetterId_IT = intentLetter.IntentLetterId;
            vendInvoiceJour.PlafondDate_IT = vendInvoiceInfoTable.PlafondDate_IT;
            this.parmVendInvoiceJour_W(vendInvoiceJour);
        }

        if (FeatureStateProvider::isFeatureEnabled(VendorVATDateFeature::instance()))
        {
            VendInvoiceJour vendInvoiceJour = this.parmVendInvoiceJour_W();
            vendInvoiceJour.VendorVATDate = vendInvoiceInfoTable.VendorVATDate;
            this.parmVendInvoiceJour_W(vendInvoiceJour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendInvoiceJour_W</Name>
				<Source><![CDATA[
    VendInvoiceJour parmVendInvoiceJour_W(VendInvoiceJour _vendInvoiceJour = vendInvoiceJour)
    {
        this.vendInvoiceJour = _vendInvoiceJour;
        return this.vendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUsualExporterBeforePosting_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates tax group on purchase line.
    /// </summary>
    /// <exception>Throws exception if tax group is not applicable.</exception>
    protected void checkUsualExporterBeforePosting_IT()
    {
        if (!isUsualExporterInvoice
            && purchLine.TaxGroup
            && purchLine.TaxGroup == plafondTaxGroup)
        {
            throw error(strFmt("@ExtendedItallianLocalization:ExemptionTaxGroupCannotBeUsed", plafondTaxGroup));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUsualExporter_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes plafond values.
    /// </summary>
    public void initUsualExporter_IT()
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        PurchTable purchTableCycle;
        IntentLetterInternalId_IT prevIntentLetterId;
        PurchParmUpdate purchParmUpdate = this.parmPurchParmUpdate_W();
        VendInvoiceInfoTable vendInvoiceInfoTable = this.parmVendInvoiceInfoTable_W();

        while select purchTableCycle
            group by IntentLetterId_IT, InvoiceAccount
            where purchTableCycle.IntentLetterId_IT
            exists join vendInvoiceInfoLine
                where vendInvoiceInfoLine.OrigPurchId == purchTableCycle.PurchId
                    && vendInvoiceInfoLine.ParmId == purchParmUpdate.ParmId
                    && vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
        {
            if (prevIntentLetterId && prevIntentLetterId != purchTableCycle.IntentLetterId_IT)
            {
                throw error("@ExtendedItallianLocalization:OneLetterPerInvoice");
            }

            prevIntentLetterId = purchTableCycle.IntentLetterId_IT;
        }

        if (purchTableCycle.IntentLetterId_IT)
        {
            intentLetter = IntentLetter_IT::find(purchTableCycle.IntentLetterId_IT);

            if (intentLetter.VendAccount != purchTableCycle.InvoiceAccount)
            {
                throw error(strfmt(
                    "@ExtendedItallianLocalization:IntentLetterRelatedToVendor",
                    intentLetter.IntentLetterId,
                    intentLetter.VendAccount));
            }

            isUsualExporterInvoice = (intentLetter.RecId != 0);
            plafondTaxGroup = VendParameters::find().PlafondTaxGroup_IT;
            plafond = Plafond_IT::findActivePlafond(this.plafondDate_IT());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>plafondDate_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets plafond date from vendor invoice.
    /// </summary>
    /// <returns>The plafond date.</returns>
    protected PlafondDate_IT plafondDate_IT()
    {
        return VendInvoiceInfoTable.PlafondDate_IT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchParmUpdate_W</Name>
				<Source><![CDATA[
    public PurchParmUpdate parmPurchParmUpdate_W(PurchParmUpdate _purchParmUpdate = purchParmUpdate)
    {
        this.purchParmUpdate = _purchParmUpdate;
        return this.purchParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendInvoiceInfoTable_W</Name>
				<Source><![CDATA[
    public VendInvoiceInfoTable parmVendInvoiceInfoTable_W(VendInvoiceInfoTable _vendInvoiceInfoTable = vendInvoiceInfoTable)
    {
        this.vendInvoiceInfoTable = _vendInvoiceInfoTable;
        return this.vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>