<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGSTDataUpgrade_MY</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxGSTDataUpgrade_MY</c> class implements data upgrade for GAF information
/// </summary>
class TaxGSTDataUpgrade_MY
{
    TaxGSTTaxInformation_MY taxGSTTaxInformation_MY;
    TaxGSTTaxInformation_MY taxGSTTaxInformation_MYMaxRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createForProjInvoiceCost_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create GAF information for project invoice cost
    /// </summary>
    public void createForProjInvoiceCost_MY()
    {
        ProjInvoiceCost                             projInvoiceCost;
        DirPartyTable                               dirPartyTable;
        DirOrganization                             dirOrganization;
        TaxTrans                                    taxTrans;
        LogisticsPostalAddress                      logisticsPostalAddress;
        LogisticsAddressCountryRegionTranslation    logisticsAddressCountryRegionTranslation;
        TaxGSTTaxInformation_MY                     taxGSTTaxInformation_MYNotExists;
        CustTable                                   custTable;
        TaxTable                                    taxTable;
        ProjInvoiceJour                             projInvoiceJour;
        ProjInvoiceTransUnion                       projInvoiceTransUnionGetLineNumber;
        TableId                                     projInvoiceTransTableId = projInvoiceCost.TableId;

        select maxof(RecId) from taxGSTTaxInformation_MYMaxRecId;

        insert_recordset taxGSTTaxInformation_MY(
            SourceTableId,
            SourceRecId,
            InvoiceId,
            InvoiceDate,
            Description,
            Name,
            LineNumber)
        select projInvoiceTransTableId, RecId, ProjInvoiceId, InvoiceDate, Txt from projInvoiceCost
            group by RecId, ProjInvoiceId, InvoiceDate, Txt
            join projInvoiceJour
                where projInvoiceJour.InvoiceDate       == projInvoiceCost.InvoiceDate
                    && projInvoiceJour.ProjInvoiceId    == projInvoiceCost.ProjInvoiceId
                join custTable
                    where custTable.AccountNum == projInvoiceJour.InvoiceAccount
                    join Name from dirPartyTable
                    group by Name
                        where dirPartyTable.RecId == custTable.Party
            join count(RecId) from projInvoiceTransUnionGetLineNumber
                where projInvoiceTransUnionGetLineNumber.ProjInvoiceId  == projInvoiceCost.ProjInvoiceId
                    && projInvoiceTransUnionGetLineNumber.SourceTableId == projInvoiceCost.TableId
                    && projInvoiceTransUnionGetLineNumber.RecId         <= projInvoiceCost.RecId
            exists join taxTrans
                where taxTrans.SourceTableId    == projInvoiceCost.TableId
                    && taxTrans.SourceRecId     == projInvoiceCost.RecId
                join taxTable
                    where taxTable.IsGST_MY == NoYes::Yes
            notExists join taxGSTTaxInformation_MYNotExists
                where taxGSTTaxInformation_MYNotExists.SourceTableId    == projInvoiceCost.TableId
                    && taxGSTTaxInformation_MYNotExists.SourceRecId     == projInvoiceCost.RecId;

        update_recordSet taxGSTTaxInformation_MY
            setting OrganizationNumber = dirOrganization.OrgNumber
            // Only update those records inserted by this method
            where taxGSTTaxInformation_MY.RecId > taxGSTTaxInformation_MYMaxRecId.RecId
            join projInvoiceCost
                where projInvoiceCost.TableId   == taxGSTTaxInformation_MY.SourceTableId
                    && projInvoiceCost.RecId    == taxGSTTaxInformation_MY.SourceRecId
                join projInvoiceJour
                    where projInvoiceJour.InvoiceDate       == projInvoiceCost.InvoiceDate
                        && projInvoiceJour.ProjInvoiceId    == projInvoiceCost.ProjInvoiceId
                    join custTable
                        where custTable.AccountNum == projInvoiceJour.InvoiceAccount
                        join OrgNumber from dirOrganization
                            where dirOrganization.RecId == custTable.Party;

        update_recordSet taxGSTTaxInformation_MY
            setting Country = logisticsAddressCountryRegionTranslation.ShortName
            // Only update those records inserted by this method
            where taxGSTTaxInformation_MY.RecId > taxGSTTaxInformation_MYMaxRecId.RecId
            join projInvoiceCost
                where projInvoiceCost.TableId   == taxGSTTaxInformation_MY.SourceTableId
                    && projInvoiceCost.RecId    == taxGSTTaxInformation_MY.SourceRecId
                join projInvoiceJour
                    where projInvoiceJour.InvoiceDate       == projInvoiceCost.InvoiceDate
                        && projInvoiceJour.ProjInvoiceId    == projInvoiceCost.ProjInvoiceId
                    join custTable
                        where custTable.AccountNum == projInvoiceJour.InvoiceAccount
                        join dirPartyTable
                            where dirPartyTable.RecId == custTable.Party
                    join logisticsPostalAddress
                        where logisticsPostalAddress.RecId  == projInvoiceJour.DeliveryPostalAddress
                        join ShortName from logisticsAddressCountryRegionTranslation
                            where logisticsAddressCountryRegionTranslation.CountryRegionId  == logisticsPostalAddress.CountryRegionId
                                && logisticsAddressCountryRegionTranslation.LanguageId      == dirPartyTable.LanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForProjInvoiceEmpl_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create GAF information for project invoice employee
    /// </summary>
    public void createForProjInvoiceEmpl_MY()
    {
        ProjInvoiceEmpl                             projInvoiceEmpl;
        DirPartyTable                               dirPartyTable;
        DirOrganization                             dirOrganization;
        TaxTrans                                    taxTrans;
        LogisticsPostalAddress                      logisticsPostalAddress;
        LogisticsAddressCountryRegionTranslation    logisticsAddressCountryRegionTranslation;
        TaxGSTTaxInformation_MY                     taxGSTTaxInformation_MYNotExists;
        CustTable                                   custTable;
        TaxTable                                    taxTable;
        ProjInvoiceJour                             projInvoiceJour;
        ProjInvoiceTransUnion                       projInvoiceTransUnionGetLineNumber;
        TableId                                     projInvoiceTransTableId = projInvoiceEmpl.TableId;

        select maxof(RecId) from taxGSTTaxInformation_MYMaxRecId;

        insert_recordset taxGSTTaxInformation_MY(
            SourceTableId,
            SourceRecId,
            InvoiceId,
            InvoiceDate,
            Description,
            Name,
            LineNumber)
        select projInvoiceTransTableId, RecId, ProjInvoiceId, InvoiceDate, Txt from projInvoiceEmpl
            group by RecId, ProjInvoiceId, InvoiceDate, Txt
            join projInvoiceJour
                where projInvoiceJour.InvoiceDate       == projInvoiceEmpl.InvoiceDate
                    && projInvoiceJour.ProjInvoiceId    == projInvoiceEmpl.ProjInvoiceId
                join custTable
                    where custTable.AccountNum == projInvoiceJour.InvoiceAccount
                    join Name from dirPartyTable
                    group by Name
                        where dirPartyTable.RecId == custTable.Party
            join count(RecId) from projInvoiceTransUnionGetLineNumber
                where projInvoiceTransUnionGetLineNumber.ProjInvoiceId  == projInvoiceEmpl.ProjInvoiceId
                    && projInvoiceTransUnionGetLineNumber.SourceTableId == projInvoiceEmpl.TableId
                    && projInvoiceTransUnionGetLineNumber.RecId         <= projInvoiceEmpl.RecId
            exists join taxTrans
                where taxTrans.SourceTableId    == projInvoiceEmpl.TableId
                    && taxTrans.SourceRecId     == projInvoiceEmpl.RecId
                join taxTable
                    where taxTable.IsGST_MY == NoYes::Yes
            notExists join taxGSTTaxInformation_MYNotExists
                where taxGSTTaxInformation_MYNotExists.SourceTableId    == projInvoiceEmpl.TableId
                    && taxGSTTaxInformation_MYNotExists.SourceRecId     == projInvoiceEmpl.RecId;

        update_recordSet taxGSTTaxInformation_MY
            setting OrganizationNumber = dirOrganization.OrgNumber
            // Only update those records inserted by this method
            where taxGSTTaxInformation_MY.RecId > taxGSTTaxInformation_MYMaxRecId.RecId
            join projInvoiceEmpl
                where projInvoiceEmpl.TableId   == taxGSTTaxInformation_MY.SourceTableId
                    && projInvoiceEmpl.RecId    == taxGSTTaxInformation_MY.SourceRecId
                join projInvoiceJour
                    where projInvoiceJour.InvoiceDate       == projInvoiceEmpl.InvoiceDate
                        && projInvoiceJour.ProjInvoiceId    == projInvoiceEmpl.ProjInvoiceId
                    join custTable
                        where custTable.AccountNum == projInvoiceJour.InvoiceAccount
                        join OrgNumber from dirOrganization
                            where dirOrganization.RecId == custTable.Party;

        update_recordSet taxGSTTaxInformation_MY
            setting Country = logisticsAddressCountryRegionTranslation.ShortName
            // Only update those records inserted by this method
            where taxGSTTaxInformation_MY.RecId > taxGSTTaxInformation_MYMaxRecId.RecId
            join projInvoiceEmpl
                where projInvoiceEmpl.TableId   == taxGSTTaxInformation_MY.SourceTableId
                    && projInvoiceEmpl.RecId    == taxGSTTaxInformation_MY.SourceRecId
                join projInvoiceJour
                    where projInvoiceJour.InvoiceDate       == projInvoiceEmpl.InvoiceDate
                        && projInvoiceJour.ProjInvoiceId    == projInvoiceEmpl.ProjInvoiceId
                    join custTable
                        where custTable.AccountNum == projInvoiceJour.InvoiceAccount
                        join dirPartyTable
                            where dirPartyTable.RecId == custTable.Party
                    join logisticsPostalAddress
                        where logisticsPostalAddress.RecId  == projInvoiceJour.DeliveryPostalAddress
                        join ShortName from logisticsAddressCountryRegionTranslation
                            where logisticsAddressCountryRegionTranslation.CountryRegionId  == logisticsPostalAddress.CountryRegionId
                                && logisticsAddressCountryRegionTranslation.LanguageId      == dirPartyTable.LanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForProjInvoiceItem_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create GAF information for project invoice item
    /// </summary>
    public void createForProjInvoiceItem_MY()
    {
        ProjInvoiceItem                             projInvoiceItem;
        DirPartyTable                               dirPartyTable;
        DirOrganization                             dirOrganization;
        TaxTrans                                    taxTrans;
        LogisticsPostalAddress                      logisticsPostalAddress;
        LogisticsAddressCountryRegionTranslation    logisticsAddressCountryRegionTranslation;
        TaxGSTTaxInformation_MY                     taxGSTTaxInformation_MYNotExists;
        CustTable                                   custTable;
        TaxTable                                    taxTable;
        ProjInvoiceJour                             projInvoiceJour;
        ProjInvoiceTransUnion                       projInvoiceTransUnionGetLineNumber;
        TableId                                     projInvoiceTransTableId = projInvoiceItem.TableId;

        select maxof(RecId) from taxGSTTaxInformation_MYMaxRecId;

        insert_recordset taxGSTTaxInformation_MY(
            SourceTableId,
            SourceRecId,
            InvoiceId,
            InvoiceDate,
            Description,
            Name,
            LineNumber)
        select projInvoiceTransTableId, RecId, ProjInvoiceId, InvoiceDate, Txt from projInvoiceItem
            group by RecId, ProjInvoiceId, InvoiceDate, Txt
            join projInvoiceJour
                where projInvoiceJour.InvoiceDate       == projInvoiceItem.InvoiceDate
                    && projInvoiceJour.ProjInvoiceId    == projInvoiceItem.ProjInvoiceId
                join custTable
                    where custTable.AccountNum == projInvoiceJour.InvoiceAccount
                    join Name from dirPartyTable
                    group by Name
                        where dirPartyTable.RecId == custTable.Party
            join count(RecId) from projInvoiceTransUnionGetLineNumber
                where projInvoiceTransUnionGetLineNumber.ProjInvoiceId  == projInvoiceItem.ProjInvoiceId
                    && projInvoiceTransUnionGetLineNumber.SourceTableId == projInvoiceItem.TableId
                    && projInvoiceTransUnionGetLineNumber.RecId         <= projInvoiceItem.RecId
                    && (
                            (projInvoiceItem.SalesId      && projInvoiceTransUnionGetLineNumber.SalesId)
                            || (!projInvoiceItem.SalesId  && !projInvoiceTransUnionGetLineNumber.SalesId)
                        )
            exists join taxTrans
                where taxTrans.SourceTableId    == projInvoiceItem.TableId
                    && taxTrans.SourceRecId     == projInvoiceItem.RecId
                join taxTable
                    where taxTable.IsGST_MY == NoYes::Yes
            notExists join taxGSTTaxInformation_MYNotExists
                where taxGSTTaxInformation_MYNotExists.SourceTableId    == projInvoiceItem.TableId
                    && taxGSTTaxInformation_MYNotExists.SourceRecId     == projInvoiceItem.RecId;

        update_recordSet taxGSTTaxInformation_MY
            setting OrganizationNumber = dirOrganization.OrgNumber
            // Only update those records inserted by this method
            where taxGSTTaxInformation_MY.RecId > taxGSTTaxInformation_MYMaxRecId.RecId
            join projInvoiceItem
                where projInvoiceItem.TableId   == taxGSTTaxInformation_MY.SourceTableId
                    && projInvoiceItem.RecId    == taxGSTTaxInformation_MY.SourceRecId
                join projInvoiceJour
                    where projInvoiceJour.InvoiceDate       == projInvoiceItem.InvoiceDate
                        && projInvoiceJour.ProjInvoiceId    == projInvoiceItem.ProjInvoiceId
                    join custTable
                        where custTable.AccountNum == projInvoiceJour.InvoiceAccount
                        join OrgNumber from dirOrganization
                            where dirOrganization.RecId == custTable.Party;

        update_recordSet taxGSTTaxInformation_MY
            setting Country = logisticsAddressCountryRegionTranslation.ShortName
            // Only update those records inserted by this method
            where taxGSTTaxInformation_MY.RecId > taxGSTTaxInformation_MYMaxRecId.RecId
            join projInvoiceItem
                where projInvoiceItem.TableId   == taxGSTTaxInformation_MY.SourceTableId
                    && projInvoiceItem.RecId    == taxGSTTaxInformation_MY.SourceRecId
                join projInvoiceJour
                    where projInvoiceJour.InvoiceDate       == projInvoiceItem.InvoiceDate
                        && projInvoiceJour.ProjInvoiceId    == projInvoiceItem.ProjInvoiceId
                    join custTable
                        where custTable.AccountNum == projInvoiceJour.InvoiceAccount
                        join dirPartyTable
                            where dirPartyTable.RecId == custTable.Party
                    join logisticsPostalAddress
                        where logisticsPostalAddress.RecId  == projInvoiceJour.DeliveryPostalAddress
                        join ShortName from logisticsAddressCountryRegionTranslation
                            where logisticsAddressCountryRegionTranslation.CountryRegionId  == logisticsPostalAddress.CountryRegionId
                                && logisticsAddressCountryRegionTranslation.LanguageId      == dirPartyTable.LanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForProjInvoiceOnAcc_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create GAF information for project invoice on account
    /// </summary>
    public void createForProjInvoiceOnAcc_MY()
    {
        ProjInvoiceOnAcc                            projInvoiceOnAcc;
        DirPartyTable                               dirPartyTable;
        DirOrganization                             dirOrganization;
        TaxTrans                                    taxTrans;
        LogisticsPostalAddress                      logisticsPostalAddress;
        LogisticsAddressCountryRegionTranslation    logisticsAddressCountryRegionTranslation;
        TaxGSTTaxInformation_MY                     taxGSTTaxInformation_MYNotExists;
        CustTable                                   custTable;
        TaxTable                                    taxTable;
        ProjInvoiceJour                             projInvoiceJour;
        ProjInvoiceTransUnion                       projInvoiceTransUnionGetLineNumber;
        TableId                                     projInvoiceTransTableId = projInvoiceOnAcc.TableId;

        select maxof(RecId) from taxGSTTaxInformation_MYMaxRecId;

        insert_recordset taxGSTTaxInformation_MY(
            SourceTableId,
            SourceRecId,
            InvoiceId,
            InvoiceDate,
            Description,
            Name,
            LineNumber)
        select projInvoiceTransTableId, RecId, ProjInvoiceId, InvoiceDate, Txt from projInvoiceOnAcc
            group by RecId, ProjInvoiceId, InvoiceDate, Txt
            join projInvoiceJour
                where projInvoiceJour.InvoiceDate       == projInvoiceOnAcc.InvoiceDate
                    && projInvoiceJour.ProjInvoiceId    == projInvoiceOnAcc.ProjInvoiceId
                join custTable
                    where custTable.AccountNum == projInvoiceJour.InvoiceAccount
                    join Name from dirPartyTable
                    group by Name
                        where dirPartyTable.RecId == custTable.Party
            join count(RecId) from projInvoiceTransUnionGetLineNumber
                where projInvoiceTransUnionGetLineNumber.ProjInvoiceId  == projInvoiceOnAcc.ProjInvoiceId
                    && projInvoiceTransUnionGetLineNumber.SourceTableId == projInvoiceOnAcc.TableId
                    && projInvoiceTransUnionGetLineNumber.RecId         <= projInvoiceOnAcc.RecId
            exists join taxTrans
                where taxTrans.SourceTableId    == projInvoiceOnAcc.TableId
                    && taxTrans.SourceRecId     == projInvoiceOnAcc.RecId
                join taxTable
                    where taxTable.IsGST_MY == NoYes::Yes
            notExists join taxGSTTaxInformation_MYNotExists
                where taxGSTTaxInformation_MYNotExists.SourceTableId    == projInvoiceOnAcc.TableId
                    && taxGSTTaxInformation_MYNotExists.SourceRecId     == projInvoiceOnAcc.RecId;

        update_recordSet taxGSTTaxInformation_MY
            setting OrganizationNumber = dirOrganization.OrgNumber
            // Only update those records inserted by this method
            where taxGSTTaxInformation_MY.RecId > taxGSTTaxInformation_MYMaxRecId.RecId
            join projInvoiceOnAcc
                where projInvoiceOnAcc.TableId   == taxGSTTaxInformation_MY.SourceTableId
                    && projInvoiceOnAcc.RecId    == taxGSTTaxInformation_MY.SourceRecId
                join projInvoiceJour
                    where projInvoiceJour.InvoiceDate       == projInvoiceOnAcc.InvoiceDate
                        && projInvoiceJour.ProjInvoiceId    == projInvoiceOnAcc.ProjInvoiceId
                    join custTable
                        where custTable.AccountNum == projInvoiceJour.InvoiceAccount
                        join OrgNumber from dirOrganization
                            where dirOrganization.RecId == custTable.Party;

        update_recordSet taxGSTTaxInformation_MY
            setting Country = logisticsAddressCountryRegionTranslation.ShortName
            // Only update those records inserted by this method
            where taxGSTTaxInformation_MY.RecId > taxGSTTaxInformation_MYMaxRecId.RecId
            join projInvoiceOnAcc
                where projInvoiceOnAcc.TableId   == taxGSTTaxInformation_MY.SourceTableId
                    && projInvoiceOnAcc.RecId    == taxGSTTaxInformation_MY.SourceRecId
                join projInvoiceJour
                    where projInvoiceJour.InvoiceDate       == projInvoiceOnAcc.InvoiceDate
                        && projInvoiceJour.ProjInvoiceId    == projInvoiceOnAcc.ProjInvoiceId
                    join custTable
                        where custTable.AccountNum == projInvoiceJour.InvoiceAccount
                        join dirPartyTable
                            where dirPartyTable.RecId == custTable.Party
                    join logisticsPostalAddress
                        where logisticsPostalAddress.RecId  == projInvoiceJour.DeliveryPostalAddress
                        join ShortName from logisticsAddressCountryRegionTranslation
                            where logisticsAddressCountryRegionTranslation.CountryRegionId  == logisticsPostalAddress.CountryRegionId
                                && logisticsAddressCountryRegionTranslation.LanguageId      == dirPartyTable.LanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForProjInvoiceRevenue_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create GAF information for project invoice revenue
    /// </summary>
    public void createForProjInvoiceRevenue_MY()
    {
        ProjInvoiceRevenue                          projInvoiceRevenue;
        DirPartyTable                               dirPartyTable;
        DirOrganization                             dirOrganization;
        TaxTrans                                    taxTrans;
        LogisticsPostalAddress                      logisticsPostalAddress;
        LogisticsAddressCountryRegionTranslation    logisticsAddressCountryRegionTranslation;
        TaxGSTTaxInformation_MY                     taxGSTTaxInformation_MYNotExists;
        CustTable                                   custTable;
        TaxTable                                    taxTable;
        ProjInvoiceJour                             projInvoiceJour;
        ProjInvoiceTransUnion                       projInvoiceTransUnionGetLineNumber;
        TableId                                     projInvoiceTransTableId = projInvoiceRevenue.TableId;

        select maxof(RecId) from taxGSTTaxInformation_MYMaxRecId;

        insert_recordset taxGSTTaxInformation_MY(
            SourceTableId,
            SourceRecId,
            InvoiceId,
            InvoiceDate,
            Description,
            Name,
            LineNumber)
        select projInvoiceTransTableId, RecId, ProjInvoiceId, InvoiceDate, Txt from projInvoiceRevenue
            group by RecId, ProjInvoiceId, InvoiceDate, Txt
            join projInvoiceJour
                where projInvoiceJour.InvoiceDate       == projInvoiceRevenue.InvoiceDate
                    && projInvoiceJour.ProjInvoiceId    == projInvoiceRevenue.ProjInvoiceId
                join custTable
                    where custTable.AccountNum == projInvoiceJour.InvoiceAccount
                    join Name from dirPartyTable
                    group by Name
                        where dirPartyTable.RecId == custTable.Party
            join count(RecId) from projInvoiceTransUnionGetLineNumber
                where projInvoiceTransUnionGetLineNumber.ProjInvoiceId  == projInvoiceRevenue.ProjInvoiceId
                    && projInvoiceTransUnionGetLineNumber.SourceTableId == projInvoiceRevenue.TableId
                    && projInvoiceTransUnionGetLineNumber.RecId         <= projInvoiceRevenue.RecId
                    && (
                            (projInvoiceRevenue.SMASubscriptionId        && projInvoiceTransUnionGetLineNumber.SMASubscriptionId)
                            || (!projInvoiceRevenue.SMASubscriptionId    && !projInvoiceTransUnionGetLineNumber.SMASubscriptionId)
                        )
            exists join taxTrans
                where taxTrans.SourceTableId    == projInvoiceRevenue.TableId
                    && taxTrans.SourceRecId     == projInvoiceRevenue.RecId
                join taxTable
                    where taxTable.IsGST_MY == NoYes::Yes
            notExists join taxGSTTaxInformation_MYNotExists
                where taxGSTTaxInformation_MYNotExists.SourceTableId    == projInvoiceRevenue.TableId
                    && taxGSTTaxInformation_MYNotExists.SourceRecId     == projInvoiceRevenue.RecId;

        update_recordSet taxGSTTaxInformation_MY
            setting OrganizationNumber = dirOrganization.OrgNumber
            // Only update those records inserted by this method
            where taxGSTTaxInformation_MY.RecId > taxGSTTaxInformation_MYMaxRecId.RecId
            join projInvoiceRevenue
                where projInvoiceRevenue.TableId   == taxGSTTaxInformation_MY.SourceTableId
                    && projInvoiceRevenue.RecId    == taxGSTTaxInformation_MY.SourceRecId
                join projInvoiceJour
                    where projInvoiceJour.InvoiceDate       == projInvoiceRevenue.InvoiceDate
                        && projInvoiceJour.ProjInvoiceId    == projInvoiceRevenue.ProjInvoiceId
                    join custTable
                        where custTable.AccountNum == projInvoiceJour.InvoiceAccount
                        join OrgNumber from dirOrganization
                            where dirOrganization.RecId == custTable.Party;

        update_recordSet taxGSTTaxInformation_MY
            setting Country = logisticsAddressCountryRegionTranslation.ShortName
            // Only update those records inserted by this method
            where taxGSTTaxInformation_MY.RecId > taxGSTTaxInformation_MYMaxRecId.RecId
            join projInvoiceRevenue
                where projInvoiceRevenue.TableId   == taxGSTTaxInformation_MY.SourceTableId
                    && projInvoiceRevenue.RecId    == taxGSTTaxInformation_MY.SourceRecId
                join projInvoiceJour
                    where projInvoiceJour.InvoiceDate       == projInvoiceRevenue.InvoiceDate
                        && projInvoiceJour.ProjInvoiceId    == projInvoiceRevenue.ProjInvoiceId
                    join custTable
                        where custTable.AccountNum == projInvoiceJour.InvoiceAccount
                        join dirPartyTable
                            where dirPartyTable.RecId == custTable.Party
                    join logisticsPostalAddress
                        where logisticsPostalAddress.RecId  == projInvoiceJour.DeliveryPostalAddress
                        join ShortName from logisticsAddressCountryRegionTranslation
                            where logisticsAddressCountryRegionTranslation.CountryRegionId  == logisticsPostalAddress.CountryRegionId
                                && logisticsAddressCountryRegionTranslation.LanguageId      == dirPartyTable.LanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGAFInformation_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create GAF information for posted transactions
    /// </summary>
    public void createGAFInformation_MY()
    {
        TaxGSTTaxInformation_MY taxGSTTaxInformation_MYGetMaxRecId;

        new SkipAOSValidationPermission().assert();

        select maxof(RecId) from taxGSTTaxInformation_MYGetMaxRecId;

        taxGSTTaxInformation_MY.skipAosValidation(true);
        taxGSTTaxInformation_MY.skipDatabaseLog(true);
        taxGSTTaxInformation_MY.skipDataMethods(true);

        this.createGAFInformationForJournals_MY();
        this.createGAFInformationForPOOpenVendInv_MY();
        this.createGAFInformationForProjInvoice_MY();
        this.createGAFInformationForSOFTI_MY();

        update_recordSet taxGSTTaxInformation_MY
            setting LineNumber = taxGSTTaxInformation_MY.LineNumber * TaxGSTHelper_MY::LineNumberInterval
            where taxGSTTaxInformation_MY.RecId > taxGSTTaxInformation_MYGetMaxRecId.RecId;

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGAFInformationForJournals_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create GAF information for posted journals
    /// </summary>
    private void createGAFInformationForJournals_MY()
    {
        BankAccountTable                            bankAccountTable;
        DirPartyTable                               dirPartyTable;
        DirOrganization                             dirOrganization;
        VendTrans                                   vendTrans;
        TaxTrans                                    taxTrans;
        TaxGSTTaxInformation_MY                     taxGSTTaxInformation_MYNotExists;
        VendTable                                   vendTableAccount;
        VendTable                                   vendTableOffsetAccount;
        CustTable                                   custTableAccount;
        CustTable                                   custTableOffsetAccount;
        TaxTable                                    taxTable;
        CustVendPaymJournalFee                      custVendPaymJournalFee;
        LedgerJournalTable                          ledgerJournalTable;
        LedgerJournalTrans                          ledgerJournalTrans_JournalLine;
        LedgerJournalTrans                          ledgerJournalTrans_JournalLineOrFee;
        LedgerJournalTrans                          ledgerJournalTrans_Fee;
        LedgerJournalTrans                          ledgerJournalTransGetLineNumber;
        DimensionAttributeValueCombination          dimensionAttributeValueCombinationAccount;
        DimensionAttributeValueCombination          dimensionAttributeValueCombinationOffsetAccount;
        CustVendPaymFeeUnion_MY                     custVendPaymFeeUnion_MY;
        TableId                                     ledgerJournalTransTableId = tableNum(LedgerJournalTrans);

        select maxof(RecId) from taxGSTTaxInformation_MYMaxRecId;

        insert_recordset taxGSTTaxInformation_MY(
            SourceTableId,
            SourceRecId,
            InvoiceId,
            InvoiceDate,
            LineNumber)
        select ledgerJournalTransTableId, RecId, Invoice, TransDate from ledgerJournalTrans_JournalLineOrFee
            group by RecId, Invoice, TransDate
            join ledgerJournalTable
                where ledgerJournalTable.JournalNum             == ledgerJournalTrans_JournalLineOrFee.JournalNum
                    && ledgerJournalTable.Posted                == NoYes::Yes
                    && ((ledgerJournalTable.JournalType         == LedgerJournalType::VendInvoiceRegister   /*AP > Journals > Invoices > Inovice journal*/
                            || ledgerJournalTable.JournalType   == LedgerJournalType::Approval              /*AP > Journals > Invoices > Inovice approval journal*/
                            || ledgerJournalTable.JournalType   == LedgerJournalType::PurchaseLedger        /*AP > Journals > Invoices > Inovice register*/
                            || ledgerJournalTable.JournalType   == LedgerJournalType::Payment               /*AP > Journals > Payments > Payment journal*/
                            || ledgerJournalTable.JournalType   == LedgerJournalType::Daily                 /*GL > Journals > General journal*/
                            || ledgerJournalTable.JournalType   == LedgerJournalType::CustPayment)          /*AR > Journals > Payments > Payemnt journal*/
                        || ledgerJournalTrans_JournalLineOrFee.TransactionType   == LedgerTransType::Fee)   /*Payment fee of all kinds of journals*/
            outer join custVendPaymJournalFee
                where custVendPaymJournalFee.FeeTransRecId  == ledgerJournalTrans_JournalLineOrFee.RecId
            join ledgerJournalTrans_JournalLine
                where /*ledgerJournalTrans_JournalLineOrFee is a journal line created for a payment fee line automatically by AX*/
                     (ledgerJournalTrans_JournalLineOrFee.TransactionType   == LedgerTransType::Fee
                        && ledgerJournalTrans_JournalLine.RecId             == custVendPaymJournalFee.RefRecId)
                      /*ledgerJournalTrans_JournalLineOrFee is a journal line created manually on UI*/
                      || (ledgerJournalTrans_JournalLineOrFee.TransactionType     != LedgerTransType::Fee
                        && ledgerJournalTrans_JournalLine.RecId                 == ledgerJournalTrans_JournalLineOrFee.RecId)
            // get line number here
            join count(RecId) from ledgerJournalTransGetLineNumber
                where ledgerJournalTransGetLineNumber.JournalNum        == ledgerJournalTrans_JournalLine.JournalNum
                    && ledgerJournalTransGetLineNumber.TransactionType  != LedgerTransType::Fee
                    && (ledgerJournalTransGetLineNumber.Voucher         < ledgerJournalTrans_JournalLine.Voucher
                        || (ledgerJournalTransGetLineNumber.Voucher     == ledgerJournalTrans_JournalLine.Voucher
                            && ledgerJournalTransGetLineNumber.LineNum  <= ledgerJournalTrans_JournalLine.LineNum))
            exists join taxTrans
                where taxTrans.SourceTableId    == ledgerJournalTrans_JournalLineOrFee.TableId
                    && taxTrans.SourceRecId     == ledgerJournalTrans_JournalLineOrFee.RecId
                join taxTable
                    where taxTable.IsGST_MY == NoYes::Yes
                        && taxTable.TaxCode == taxTrans.TaxCode
            notExists join taxGSTTaxInformation_MYNotExists
                where taxGSTTaxInformation_MYNotExists.SourceTableId    == ledgerJournalTrans_JournalLineOrFee.TableId
                    && taxGSTTaxInformation_MYNotExists.SourceRecId     == ledgerJournalTrans_JournalLineOrFee.RecId;

        // update Name field for journal lines created manually on UI, but except for invoice approval journal lines
        update_recordSet taxGSTTaxInformation_MY
            setting Name = dirPartyTable.Name
            // Only update those records inserted by this method
            where taxGSTTaxInformation_MY.RecId > taxGSTTaxInformation_MYMaxRecId.RecId
            join RecId from ledgerJournalTrans_JournalLine
                where ledgerJournalTrans_JournalLine.TableId            == taxGSTTaxInformation_MY.SourceTableId
                    && ledgerJournalTrans_JournalLine.RecId             == taxGSTTaxInformation_MY.SourceRecId
                    && ledgerJournalTrans_JournalLine.TransactionType   != LedgerTransType::Fee
                join RecId from ledgerJournalTable
                    where ledgerJournalTable.JournalNum     == ledgerJournalTrans_JournalLine.JournalNum
                        && ledgerJournalTable.JournalType   != LedgerJournalType::Approval
                outer join RecId from dimensionAttributeValueCombinationAccount
                    where dimensionAttributeValueCombinationAccount.RecId   == ledgerJournalTrans_JournalLine.LedgerDimension
                outer join RecId from dimensionAttributeValueCombinationOffsetAccount
                    where dimensionAttributeValueCombinationOffsetAccount.RecId == ledgerJournalTrans_JournalLine.OffsetLedgerDimension
                    outer join RecId from custTableAccount
                        where custTableAccount.AccountNum                   == dimensionAttributeValueCombinationAccount.DisplayValue
                            && ledgerJournalTrans_JournalLine.AccountType   == LedgerJournalACType::Cust
                    outer join RecId from custTableOffsetAccount
                        where custTableOffsetAccount.AccountNum                 == dimensionAttributeValueCombinationOffsetAccount.DisplayValue
                            && ledgerJournalTrans_JournalLine.OffsetAccountType == LedgerJournalACType::Cust
                    outer join RecId from vendTableAccount
                        where vendTableAccount.AccountNum                   == dimensionAttributeValueCombinationAccount.DisplayValue
                            && ledgerJournalTrans_JournalLine.AccountType   == LedgerJournalACType::Vend
                    outer join RecId from vendTableOffsetAccount
                        where vendTableOffsetAccount.AccountNum                 == dimensionAttributeValueCombinationOffsetAccount.DisplayValue
                            && ledgerJournalTrans_JournalLine.OffsetAccountType == LedgerJournalACType::Vend
                        join Name from dirPartyTable
                            where (
                                    (
                                        (
                                            (
                                                ledgerJournalTrans_JournalLine.AccountType      == LedgerJournalACType::Cust
                                                || ledgerJournalTrans_JournalLine.AccountType   == LedgerJournalACType::Vend
                                            )
                                            && ledgerJournalTrans_JournalLine.LedgerDimension
                                        )
                                        && (dirPartyTable.RecId     == custTableAccount.Party
                                            || dirPartyTable.RecId  == vendTableAccount.Party)
                                    )
                                    ||
                                    (
                                        !(
                                            (
                                                ledgerJournalTrans_JournalLine.AccountType      == LedgerJournalACType::Cust
                                                || ledgerJournalTrans_JournalLine.AccountType   == LedgerJournalACType::Vend
                                            )
                                            && ledgerJournalTrans_JournalLine.LedgerDimension
                                        )
                                        && (dirPartyTable.RecId     == custTableOffsetAccount.Party
                                            || dirPartyTable.RecId  == vendTableOffsetAccount.Party)
                                    )
                                  );

        // update Name field for invoice approval journal lines
        update_recordSet taxGSTTaxInformation_MY
            setting Name = dirPartyTable.Name
            // Only update those records inserted by this method
            where taxGSTTaxInformation_MY.RecId > taxGSTTaxInformation_MYMaxRecId.RecId
            join RecId from ledgerJournalTrans_JournalLine
                where ledgerJournalTrans_JournalLine.TableId    == taxGSTTaxInformation_MY.SourceTableId
                    && ledgerJournalTrans_JournalLine.RecId     == taxGSTTaxInformation_MY.SourceRecId
                join RecId from ledgerJournalTable
                    where ledgerJournalTable.JournalNum     == ledgerJournalTrans_JournalLine.JournalNum
                        && ledgerJournalTable.JournalType   == LedgerJournalType::Approval
                join RecId from vendTrans
                    where vendTrans.RecId == ledgerJournalTrans_JournalLine.VendTransId
                    join RecId from vendTableAccount
                        where vendTableAccount.AccountNum == vendTrans.AccountNum
                        join Name from dirPartyTable
                            where dirPartyTable.RecId == vendTableAccount.Party;

        // update Name field for journal lines created automatically by AX for payment fee lines
        update_recordSet taxGSTTaxInformation_MY
            setting Name = bankAccountTable.Name
            // Only update those records inserted by this method
            where taxGSTTaxInformation_MY.RecId > taxGSTTaxInformation_MYMaxRecId.RecId
            join RecId from ledgerJournalTrans_Fee
                where ledgerJournalTrans_Fee.TableId            == taxGSTTaxInformation_MY.SourceTableId
                    && ledgerJournalTrans_Fee.RecId             == taxGSTTaxInformation_MY.SourceRecId
                    && ledgerJournalTrans_Fee.TransactionType   == LedgerTransType::Fee
                join RecId from custVendPaymJournalFee
                    where custVendPaymJournalFee.FeeTransRecId  == ledgerJournalTrans_Fee.RecId
                    join RecId from ledgerJournalTrans_JournalLine
                        where ledgerJournalTrans_JournalLine.RecId == custVendPaymJournalFee.RefRecId
                    outer join RecId from dimensionAttributeValueCombinationAccount
                        where dimensionAttributeValueCombinationAccount.RecId   == ledgerJournalTrans_JournalLine.LedgerDimension
                    outer join RecId from dimensionAttributeValueCombinationOffsetAccount
                        where dimensionAttributeValueCombinationOffsetAccount.RecId == ledgerJournalTrans_JournalLine.OffsetLedgerDimension
                        join Name from bankAccountTable
                            where (ledgerJournalTrans_JournalLine.AccountType   == LedgerJournalACType::Bank
                                    && bankAccountTable.AccountId               == dimensionAttributeValueCombinationAccount.DisplayValue)
                                || (ledgerJournalTrans_JournalLine.AccountType          != LedgerJournalACType::Bank
                                    && ledgerJournalTrans_JournalLine.OffsetAccountType == LedgerJournalACType::Bank
                                    && bankAccountTable.AccountId                       == dimensionAttributeValueCombinationOffsetAccount.DisplayValue);

        // update OrganizationNumber field for journal lines created manually on UI, but except for invoice approval journal
        update_recordSet taxGSTTaxInformation_MY
            setting OrganizationNumber = dirOrganization.OrgNumber
            // Only update those records inserted by this method
            where taxGSTTaxInformation_MY.RecId > taxGSTTaxInformation_MYMaxRecId.RecId
            join RecId from ledgerJournalTrans_JournalLine
                where ledgerJournalTrans_JournalLine.TableId            == taxGSTTaxInformation_MY.SourceTableId
                    && ledgerJournalTrans_JournalLine.RecId             == taxGSTTaxInformation_MY.SourceRecId
                    && ledgerJournalTrans_JournalLine.TransactionType   != LedgerTransType::Fee
                join RecId from ledgerJournalTable
                    where ledgerJournalTable.JournalNum     == ledgerJournalTrans_JournalLine.JournalNum
                        && ledgerJournalTable.JournalType   != LedgerJournalType::Approval
                outer join RecId from dimensionAttributeValueCombinationAccount
                    where dimensionAttributeValueCombinationAccount.RecId   == ledgerJournalTrans_JournalLine.LedgerDimension
                outer join RecId from dimensionAttributeValueCombinationOffsetAccount
                    where dimensionAttributeValueCombinationOffsetAccount.RecId == ledgerJournalTrans_JournalLine.OffsetLedgerDimension
                    outer join RecId from custTableAccount
                        where custTableAccount.AccountNum                  == dimensionAttributeValueCombinationAccount.DisplayValue
                            && ledgerJournalTrans_JournalLine.AccountType  == LedgerJournalACType::Cust
                    outer join RecId from custTableOffsetAccount
                        where custTableOffsetAccount.AccountNum                 == dimensionAttributeValueCombinationOffsetAccount.DisplayValue
                            && ledgerJournalTrans_JournalLine.OffsetAccountType == LedgerJournalACType::Cust
                    outer join RecId from vendTableAccount
                        where vendTableAccount.AccountNum                   == dimensionAttributeValueCombinationAccount.DisplayValue
                            && ledgerJournalTrans_JournalLine.AccountType   == LedgerJournalACType::Vend
                    outer join RecId from vendTableOffsetAccount
                        where vendTableOffsetAccount.AccountNum                 == dimensionAttributeValueCombinationOffsetAccount.DisplayValue
                            && ledgerJournalTrans_JournalLine.OffsetAccountType == LedgerJournalACType::Vend
                    join OrgNumber from dirOrganization
                        where (
                                    (
                                        (
                                            (
                                                ledgerJournalTrans_JournalLine.AccountType      == LedgerJournalACType::Cust
                                                || ledgerJournalTrans_JournalLine.AccountType   == LedgerJournalACType::Vend
                                            )
                                            && ledgerJournalTrans_JournalLine.LedgerDimension
                                        )
                                        && (dirOrganization.RecId     == custTableAccount.Party
                                            || dirOrganization.RecId  == vendTableAccount.Party)
                                    )
                                    ||
                                    (
                                        !(
                                            (
                                                ledgerJournalTrans_JournalLine.AccountType      == LedgerJournalACType::Cust
                                                || ledgerJournalTrans_JournalLine.AccountType   == LedgerJournalACType::Vend
                                            )
                                            && ledgerJournalTrans_JournalLine.LedgerDimension
                                        )
                                        && (dirOrganization.RecId     == custTableOffsetAccount.Party
                                            || dirOrganization.RecId  == vendTableOffsetAccount.Party)
                                    )
                              );

        // update OrganizationNumber field for invoice approval journal lines
        update_recordSet taxGSTTaxInformation_MY
            setting OrganizationNumber = dirOrganization.OrgNumber
            // Only update those records inserted by this method
            where taxGSTTaxInformation_MY.RecId > taxGSTTaxInformation_MYMaxRecId.RecId
            join RecId from ledgerJournalTrans_JournalLine
                where ledgerJournalTrans_JournalLine.TableId    == taxGSTTaxInformation_MY.SourceTableId
                    && ledgerJournalTrans_JournalLine.RecId     == taxGSTTaxInformation_MY.SourceRecId
                join RecId from ledgerJournalTable
                    where ledgerJournalTable.JournalNum     == ledgerJournalTrans_JournalLine.JournalNum
                        && ledgerJournalTable.JournalType   == LedgerJournalType::Approval
                join RecId from vendTrans
                    where vendTrans.RecId == ledgerJournalTrans_JournalLine.VendTransId
                    join RecId from vendTableAccount
                        where vendTableAccount.AccountNum == vendTrans.AccountNum
                        join OrgNumber from dirOrganization
                            where dirOrganization.RecId == vendTableAccount.Party;

        // Description field for normal journal lines created manually on UI gets LedgerJournalTrans.Txt field
        update_recordSet taxGSTTaxInformation_MY
            setting Description = ledgerJournalTrans_JournalLine.Txt
            // Only update those records inserted by this method
            where taxGSTTaxInformation_MY.RecId > taxGSTTaxInformation_MYMaxRecId.RecId
            join TXT from ledgerJournalTrans_JournalLine
                where ledgerJournalTrans_JournalLine.TableId            == taxGSTTaxInformation_MY.SourceTableId
                    && ledgerJournalTrans_JournalLine.RecId             == taxGSTTaxInformation_MY.SourceRecId
                    && ledgerJournalTrans_JournalLine.TransactionType   != LedgerTransType::Fee;

        // Description field for AP journal lines created automatically by AX for cust payment fee lines gets from payment fee
        update_recordSet taxGSTTaxInformation_MY
            setting Description = custVendPaymFeeUnion_MY.TransTxt
            // Only update those records inserted by this method
            where taxGSTTaxInformation_MY.RecId > taxGSTTaxInformation_MYMaxRecId.RecId
            join RecId from ledgerJournalTrans_Fee
                where ledgerJournalTrans_Fee.TableId            == taxGSTTaxInformation_MY.SourceTableId
                    && ledgerJournalTrans_Fee.RecId             == taxGSTTaxInformation_MY.SourceRecId
                    && ledgerJournalTrans_Fee.TransactionType   == LedgerTransType::Fee
                join RecId from custVendPaymJournalFee
                    where custVendPaymJournalFee.FeeTransRecId == ledgerJournalTrans_Fee.RecId
                join TransTxt from custVendPaymFeeUnion_MY
                    where (custVendPaymJournalFee.Module                == ModuleCustVend::Vend
                            && custVendPaymFeeUnion_MY.FeeId            == custVendPaymJournalFee.FeeId
                            && custVendPaymFeeUnion_MY.SourceTableId    == tableNum(VendPaymFee))
                        || (custVendPaymJournalFee.Module               == ModuleCustVend::Cust
                            && custVendPaymFeeUnion_MY.FeeId            == custVendPaymJournalFee.FeeId
                            && custVendPaymFeeUnion_MY.SourceTableId    == tableNum(CustPaymFee)) ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGAFInformationForPOOpenVendInv_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create GAF information for posted purchase orders and open vend invoices
    /// </summary>
    private void createGAFInformationForPOOpenVendInv_MY()
    {
        DirPartyTable                               dirPartyTable;
        DirOrganization                             dirOrganization;
        TaxTrans                                    taxTrans;
        VendInvoiceJour                             vendInvoiceJour;
        VendInvoiceJour_W                           vendInvoiceJour_W;
        TaxGSTTaxInformation_MY                     taxGSTTaxInformation_MYNotExists;
        VendTable                                   vendTable;
        TaxTable                                    taxTable;
        TableId                                     vendInvoiceTransTableId = tableNum(VendInvoiceTrans);
        TaxGSTVendInvoiceTransView_MY				taxGSTVendInvoiceTransView_MY;

        select maxof(RecId) from taxGSTTaxInformation_MYMaxRecId;

        insert_recordset taxGSTTaxInformation_MY(
            SourceTableId,
            SourceRecId,
            InvoiceId,
            InvoiceDate,
            Description,
            LineNumber,
            ImportDeclarationNo,
            Name)
        select vendInvoiceTransTableId, RecId, InvoiceId, InvoiceDate, Name, LineNum from taxGSTVendInvoiceTransView_MY
            join vendInvoiceJour
                where vendInvoiceJour.PurchId                == taxGSTVendInvoiceTransView_MY.PurchID
                    && vendInvoiceJour.InvoiceId             == taxGSTVendInvoiceTransView_MY.InvoiceId
                    && vendInvoiceJour.InvoiceDate           == taxGSTVendInvoiceTransView_MY.InvoiceDate
                    && vendInvoiceJour.numberSequenceGroup   == taxGSTVendInvoiceTransView_MY.numberSequenceGroup
                    && vendInvoiceJour.InternalInvoiceId     == taxGSTVendInvoiceTransView_MY.InternalInvoiceId
                join TaxGSTImportDeclarationNo_MY from vendInvoiceJour_W
                    where vendInvoiceJour_W.VendInvoiceJour  == vendInvoiceJour.RecId
                join vendTable
                    where vendTable.AccountNum == vendInvoiceJour.InvoiceAccount
                    join Name from dirPartyTable
                        where dirPartyTable.RecId == vendTable.Party
            exists join taxTrans
                where taxTrans.SourceTableId    == taxGSTVendInvoiceTransView_MY.SourceTableId
                    && taxTrans.SourceRecId     == taxGSTVendInvoiceTransView_MY.RecId
                join taxTable
                    where taxTable.IsGST_MY == NoYes::Yes
                        && taxTable.TaxCode == taxTrans.TaxCode
            notExists join taxGSTTaxInformation_MYNotExists
                where taxGSTTaxInformation_MYNotExists.SourceTableId    == taxGSTVendInvoiceTransView_MY.SourceTableId
                    && taxGSTTaxInformation_MYNotExists.SourceRecId     == taxGSTVendInvoiceTransView_MY.RecId;

        update_recordSet taxGSTTaxInformation_MY
            setting OrganizationNumber = dirOrganization.OrgNumber
            // Only update those records inserted by this method
            where taxGSTTaxInformation_MY.RecId > taxGSTTaxInformation_MYMaxRecId.RecId
            join RecId from taxGSTVendInvoiceTransView_MY
                where taxGSTVendInvoiceTransView_MY.SourceTableId  == taxGSTTaxInformation_MY.SourceTableId
                    && taxGSTVendInvoiceTransView_MY.RecId   == taxGSTTaxInformation_MY.SourceRecId
                join RecId from vendInvoiceJour
                    where vendInvoiceJour.PurchId                == taxGSTVendInvoiceTransView_MY.PurchID
                        && vendInvoiceJour.InvoiceId             == taxGSTVendInvoiceTransView_MY.InvoiceId
                        && vendInvoiceJour.InvoiceDate           == taxGSTVendInvoiceTransView_MY.InvoiceDate
                        && vendInvoiceJour.numberSequenceGroup   == taxGSTVendInvoiceTransView_MY.numberSequenceGroup
                        && vendInvoiceJour.InternalInvoiceId     == taxGSTVendInvoiceTransView_MY.InternalInvoiceId
                    join RecId from vendTable
                        where vendTable.AccountNum == vendInvoiceJour.InvoiceAccount
                        join OrgNumber from dirOrganization
                            where dirOrganization.RecId == vendTable.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGAFInformationForProjInvoice_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create GAF information for posted project proposals
    /// </summary>
    private void createGAFInformationForProjInvoice_MY()
    {
        this.createForProjInvoiceCost_MY();
        this.createForProjInvoiceEmpl_MY();
        this.createForProjInvoiceItem_MY();
        this.createForProjInvoiceOnAcc_MY();
        this.createForProjInvoiceRevenue_MY();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGAFInformationForSOFTI_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create GAF information for posted sales orders and free text invoices
    /// </summary>
    private void createGAFInformationForSOFTI_MY()
    {
        DirPartyTable                               dirPartyTable;
        DirOrganization                             dirOrganization;
        TaxTrans                                    taxTrans;
        CustInvoiceTrans                            custInvoiceTrans;
        CustInvoiceTrans                            custInvoiceTransGetLineNumber;
        CustInvoiceJour                             custInvoiceJour;
        LogisticsPostalAddress                      logisticsPostalAddress;
        LogisticsAddressCountryRegionTranslation    logisticsAddressCountryRegionTranslation;
        TaxGSTTaxInformation_MY                     taxGSTTaxInformation_MYNotExists;
        CustTable                                   custTable;
        TaxTable                                    taxTable;
        TableId                                     custInvoiceTransTableId = tableNum(CustInvoiceTrans);

        select maxof(RecId) from taxGSTTaxInformation_MYMaxRecId;

        insert_recordset taxGSTTaxInformation_MY(
            SourceTableId,
            SourceRecId,
            InvoiceId,
            InvoiceDate,
            Description,
            Name,
            LineNumber)
        select custInvoiceTransTableId, RecId, InvoiceId, InvoiceDate, Name from custInvoiceTrans
            group by RecId, InvoiceId, InvoiceDate, Name
            join custInvoiceJour
                where custInvoiceJour.SalesId               == custInvoiceTrans.SalesId
                    && custInvoiceJour.InvoiceId            == custInvoiceTrans.InvoiceId
                    && custInvoiceJour.InvoiceDate          == custInvoiceTrans.InvoiceDate
                    && custInvoiceJour.numberSequenceGroup  == custInvoiceTrans.numberSequenceGroup
                join custTable
                    where custTable.AccountNum == custInvoiceJour.InvoiceAccount
                    join Name from dirPartyTable
                        group by Name
                        where dirPartyTable.RecId == custTable.Party
            // get line number here
            join count(RecId) from custInvoiceTransGetLineNumber
                where custInvoiceTransGetLineNumber.SalesId     == custInvoiceTrans.SalesId
                && custInvoiceTransGetLineNumber.InvoiceDate    == custInvoiceTrans.InvoiceDate
                && custInvoiceTransGetLineNumber.InvoiceId      == custInvoiceTrans.InvoiceId
                && custInvoiceTransGetLineNumber.LineNum        <= custInvoiceTrans.LineNum
            exists join taxTrans
                where taxTrans.SourceTableId    == custInvoiceTrans.TableId
                    && taxTrans.SourceRecId     == custInvoiceTrans.RecId
                join taxTable
                    where taxTable.IsGST_MY == NoYes::Yes
                        && taxTable.TaxCode == taxTrans.TaxCode
            notExists join taxGSTTaxInformation_MYNotExists
                where taxGSTTaxInformation_MYNotExists.SourceTableId    == custInvoiceTrans.TableId
                    && taxGSTTaxInformation_MYNotExists.SourceRecId     == custInvoiceTrans.RecId;

        // create GAF information for SO/FTI
        update_recordset taxGSTTaxInformation_MY
            setting  OrganizationNumber = dirOrganization.OrgNumber
            // Only update those records inserted by this method
            where taxGSTTaxInformation_MY.RecId > taxGSTTaxInformation_MYMaxRecId.RecId
            join RecId from custInvoiceTrans
                where custInvoiceTrans.TableId  == taxGSTTaxInformation_MY.SourceTableId
                    && custInvoiceTrans.RecId   == taxGSTTaxInformation_MY.SourceRecId
                join RecId from custInvoiceJour
                    where custInvoiceJour.SalesId               == custInvoiceTrans.SalesId
                        && custInvoiceJour.InvoiceId            == custInvoiceTrans.InvoiceId
                        && custInvoiceJour.InvoiceDate          == custInvoiceTrans.InvoiceDate
                        && custInvoiceJour.numberSequenceGroup  == custInvoiceTrans.numberSequenceGroup
                    join RecId from custTable
                        where custTable.AccountNum == custInvoiceJour.InvoiceAccount
                        join OrgNumber from dirOrganization
                            where dirOrganization.RecId == custTable.Party;

        // create GAF information for SO/FTI
        update_recordset taxGSTTaxInformation_MY
            setting  Country = logisticsAddressCountryRegionTranslation.ShortName
            // Only update those records inserted by this method
            where taxGSTTaxInformation_MY.RecId > taxGSTTaxInformation_MYMaxRecId.RecId
            join RecId from custInvoiceTrans
                where custInvoiceTrans.TableId  == taxGSTTaxInformation_MY.SourceTableId
                    && custInvoiceTrans.RecId   == taxGSTTaxInformation_MY.SourceRecId
                join RecId from custInvoiceJour
                    where custInvoiceJour.SalesId               == custInvoiceTrans.SalesId
                        && custInvoiceJour.InvoiceId            == custInvoiceTrans.InvoiceId
                        && custInvoiceJour.InvoiceDate          == custInvoiceTrans.InvoiceDate
                        && custInvoiceJour.numberSequenceGroup  == custInvoiceTrans.numberSequenceGroup
                    join RecId from custTable
                        where custTable.AccountNum == custInvoiceJour.InvoiceAccount
                        join Name from dirPartyTable
                            where dirPartyTable.RecId == custTable.Party
                    join RecId from logisticsPostalAddress
                        where logisticsPostalAddress.RecId  == custInvoiceJour.DeliveryPostalAddress
                        join ShortName from logisticsAddressCountryRegionTranslation
                            where logisticsAddressCountryRegionTranslation.CountryRegionId  == logisticsPostalAddress.CountryRegionId
                                && logisticsAddressCountryRegionTranslation.LanguageId      == dirPartyTable.LanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxTable_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update IsGST_MY field of TaxTable from NoYes::No to NoYes::Yes
    /// </summary>
    public void updateTaxTable_MY()
    {
        TaxTable    taxTable;

        select firstonly RecId from taxTable
            where taxTable.IsGST_MY == NoYes::Yes;

        if (!taxTable)
        {
            update_recordset taxTable
                setting IsGST_MY = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>