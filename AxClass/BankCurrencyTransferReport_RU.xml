<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCurrencyTransferReport_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BankCurrencyTransferReport_RU
{
    LedgerJournalTrans          ledgerJournalTrans;
    BankCurrencyTransferLog_RU  bankPurchaseOrderLog;

    protected container mandatoryFields = ['PaymentOrderNum', 'PaymentOrderDate', 'NamePayer', 'CodeOKPO',
        'AddressPayer', 'RespEmplName', 'BankAccountPayer', 'TransitBankAccount', 'AmountCur', 'PurchaseAmount',
        'AmountRub', 'Bank', 'Market', 'PaymPurchase', 'AccountantName', 'PresidentName', 'PurposeCode',
        'CurrencyCode', 'CommBankAccountPayer', 'CorrBankProperty'];


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentTemplateStream</Name>
				<Source><![CDATA[
    private System.IO.MemoryStream getDocumentTemplateStream()
    {
        DocuRef ref = DocuRef::findRecId(this.templateFileAttachmentId());
        System.IO.MemoryStream attachmentStream;

        if (ref)
        {
            DocumentManagement::getAttachmentStream(ref).CopyTo(attachmentStream);
        }
        else
        {
            throw error(strFmt("@GLS101762", ''));
        }

        return attachmentStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Forms and provides Word document of the report.
    /// </summary>
    protected void printData()
    {
        const str PaymentOrderDateFieldName = 'PaymentOrderDate';
        Dictionary  dict        = new Dictionary();
        DictTable   dictTable   = dict.tableObject(bankPurchaseOrderLog.TableId);

        container   fieldNames;
        fieldName   fieldName;
        int         i;
        ExecutePermission   executePermission;

        using (var templateStream = this.getDocumentTemplateStream())
        {
            using (WordDocument_RU wordDocument = new WordDocument_RU(templateStream))
            {
                fieldNames = mandatoryFields;

                executePermission = new ExecutePermission();
                executePermission.assert();
                for (i=1; i <= conlen(fieldNames); i++)
                {
                    fieldName = conpeek(fieldNames, i);
                    var value = dictTable.callObject(fieldName, bankPurchaseOrderLog);

                    if (fieldName == PaymentOrderDateFieldName)
                    {
                        value = date2Str(value, 123, 2, 2, 2, 2, 4, DateFlags::None);
                    }
                    else 
                    {
                        wordDocument.insertValue(fieldName, value);
                    }
                }

                CodeAccessPermission::revertAssert();

                wordDocument.sendFileToBrowser(bankPurchaseOrderLog.BankCurrencyTransferId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00036, funcName());
        this.printData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBankPurchaseOrderLog</Name>
				<Source><![CDATA[
    public void setBankPurchaseOrderLog(BankCurrencyTransferLog_RU _bankPurchaseOrderLog)
    {
        bankPurchaseOrderLog = _bankPurchaseOrderLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerJournalTrans</Name>
				<Source><![CDATA[
    public void setLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        ledgerJournalTrans = _ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateFileAttachmentId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the attachment Id of template file.
    /// </summary>
    /// <returns>The <c>RefRecId</c> object.</returns>
    protected RefRecId templateFileAttachmentId()
    {
        RefRecId templateFileRecId;
        BankAccountTable bankAccountTable;


        select firstonly  CurrencyOrder_TemplateRefRecId_RU, CurrencySellOrder_TemplateRefRecId_RU, BankGroupId from bankAccountTable
            where bankAccountTable.AccountID == bankPurchaseOrderLog.bankAccountPayerId();

        switch (bankPurchaseOrderLog.BankAdvancedTransType)
        {
            case BankAdvancedTransType_RU::CurrBuy:
                templateFileRecId = bankAccountTable.CurrencyOrder_TemplateRefRecId_RU;
                break;

            case BankAdvancedTransType_RU::CurrSell:
                templateFileRecId = bankAccountTable.CurrencySellOrder_TemplateRefRecId_RU;
                break;

            default:
                throw error("@GLS114424");
        }

        if (! templateFileRecId)
        {
            templateFileRecId = BankGroup::find(bankAccountTable.BankGroupId).CurrencyTemplateRefRecId;
        }

        return templateFileRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        BankCurrencyTransferReport_RU  bankCurrencyTransferOrder;
        LedgerJournalTrans             ledgerJournalTrans;
        BankCurrencyTransferLog_RU     bankPurchaseOrderLog;

        bankCurrencyTransferOrder = new BankCurrencyTransferReport_RU();

        ledgerJournalTrans = _args.record();

        bankCurrencyTransferOrder.setLedgerJournalTrans(ledgerJournalTrans);

        bankPurchaseOrderLog = BankCurrencyTransferLog_RU::find(ledgerJournalTrans.BankCurrencyTransferLog_RU);

        if (! bankPurchaseOrderLog)
        {
            throw error("@GLS102990");
        }

        bankCurrencyTransferOrder.setBankPurchaseOrderLog(bankPurchaseOrderLog);

        bankCurrencyTransferOrder.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>