<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdPurch</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProdPurch
{
    Map                             mapKey2PurchId;             // VendAccount#ItemBuyerGroup,PurchId

    protected ReqPOCollectPerPlanningPriority   collectPerPlanningPriority;
    ReqPOCollectPerVendor                       collectPerVendor;
    ReqPOCollectPerBuyer                        collectPerBuyer;
    ReqPOCollectPerPurchAgreement               collectPerPurchAgreement;
    ReqPoCollectPerPeriod                       collectPerPeriodPurch;
    ReqPOSearchPurchAgreement                   searchPurchAgreement;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapKey2PurchId</Name>
				<Source><![CDATA[
    Map mapKey2PurchId()
    {
        return mapKey2PurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        mapKey2PurchId = new Map(Types::String, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCollectPerBuyer</Name>
				<Source><![CDATA[
    public ReqPOCollectPerBuyer parmCollectPerBuyer(ReqPOCollectPerBuyer _collectPerBuyer = collectPerBuyer)
    {
        collectPerBuyer = _collectPerBuyer;
        return collectPerBuyer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCollectPerPeriodPurch</Name>
				<Source><![CDATA[
    public ReqPoCollectPerPeriod parmCollectPerPeriodPurch(ReqPoCollectPerPeriod _collectPerPeriodPurch = collectPerPeriodPurch)
    {
        collectPerPeriodPurch = _collectPerPeriodPurch;
        return collectPerPeriodPurch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCollectPerPurchAgreement</Name>
				<Source><![CDATA[
    public ReqPOCollectPerPurchAgreement parmCollectPerPurchAgreement(ReqPOCollectPerPurchAgreement _collectPerPurchAgreement = collectPerPurchAgreement)
    {
        collectPerPurchAgreement   = _collectPerPurchAgreement;
        return collectPerPurchAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCollectPerVendor</Name>
				<Source><![CDATA[
    public ReqPOCollectPerVendor parmCollectPerVendor(ReqPOCollectPerVendor _collectPerVendor = collectPerVendor)
    {
        collectPerVendor = _collectPerVendor;
        return collectPerVendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCollectPerPlanningPriority</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ReqPOCollectPerPlanningPriority parmCollectPerPlanningPriority(ReqPOCollectPerPlanningPriority _collectPerPlanningPriority = collectPerPlanningPriority)
    {
        collectPerPlanningPriority = _collectPerPlanningPriority;
        return collectPerPlanningPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSearchPurchAgreement</Name>
				<Source><![CDATA[
    public ReqPOSearchPurchAgreement parmSearchPurchAgreement(ReqPOSearchPurchAgreement _searchPurchAgreement = searchPurchAgreement)
    {
        searchPurchAgreement = _searchPurchAgreement;
        return searchPurchAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodBOMPurchIdKey</Name>
				<Source><![CDATA[
    public str prodBOMPurchIdKey(
        ProdBOM             _prodBOM,
        PurchAgreementId    _purchAgreementId
        )
    {
        VendTable   vendTable;
        str         key;

        if (! collectPerVendor)
        {
            key = strfmt('%1', _prodBOM.RecId);
        }
        else
        {
            key = _prodBOM.VendId;
        }

        if (collectPerBuyer)
        {
            if (_prodBOM.VendId)
            {
                vendTable = VendTable::find(_prodBOM.VendId);
            }

            if (vendTable.ItemBuyerGroupId)
            {
                key += '#' + vendTable.ItemBuyerGroupId;
            }
            else
            {
                key += '#' + InventTable::find(_prodBOM.ItemId).ItemBuyerGroupId;
            }
        }

        if (collectPerPurchAgreement && _purchAgreementId)
        {
            key += '#' + _purchAgreementId;
        }

        if (collectPerPeriodPurch)
        {
            key += '#' + this.prodBOMPurchPeriodKey(_prodBOM);
        }

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodBOMPurchPeriodKey</Name>
				<Source><![CDATA[
    public str prodBOMPurchPeriodKey(ProdBOM _prodBOM)
    {
        switch (collectPerPeriodPurch)
        {
            case ReqPoCollectPerPeriod::ReqDate     : return int2str(date2num(_prodBOM.RawMaterialDate));
            case ReqPoCollectPerPeriod::ReqWeek     : return int2str(wkofyr(_prodBOM.RawMaterialDate));
            case ReqPoCollectPerPeriod::ReqMonth    : return int2str(mthofyr(_prodBOM.RawMaterialDate));
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurchaseOrderGroupingEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if purchase orders are to be grouped, i.e. if <c>reqTransPurchIdKey</c> method might return the same value for different <c>ReqTrans</c> records.
    /// </summary>
    /// <returns>true if grouping is on; false otherwise.</returns>
    /// <remarks>Purchase orders are to be grouped if and only if grouping by vendor is enabled. Since a purchase order has to have exactly one vendor, not grouping by vendor means not grouping at all.</remarks>
    internal boolean isPurchaseOrderGroupingEnabled()
    {
        return collectPerVendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTransPurchIdKey</Name>
				<Source><![CDATA[
    public str reqTransPurchIdKey(
        ReqTrans    _reqTrans,
        ReqPO       _reqPO,
        PurchAgreementId _agreementId,
        ProjId  _projId = '',
        SalesId _salesId = '')
    {
        str key;

        if (! collectPerVendor)
        {
            key = strfmt('%1', _reqTrans.RecId);
        }
        else
        {
            key = _reqPO.VendId;
        }

        if (collectPerBuyer)
        {
            key += '#ItemBuyerGroupId:' + _reqPO.ItemBuyerGroupId;
        }

        if (collectPerPurchAgreement && _agreementId)
        {
            key += '#AgreementId:' + _agreementId;
        }

        if (collectPerPeriodPurch)
        {
            key += '#PurchPeriodKey:' + this.reqTransPurchPeriodKey(_reqTrans);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && _projId)
        {
            key += '#ProjId:' + _projId;
            key += '#SalesId:' + _salesId;
        }

        if (collectPerPlanningPriority)
        {
            key += '#PlanningPriority:' + num2Str(_reqPO.PlanningPriority, 0, 2, DecimalSeparator::Auto, ThousandSeparator::None);
        }
        
        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTransPurchPeriodKey</Name>
				<Source><![CDATA[
    public str reqTransPurchPeriodKey(ReqTrans _reqTrans)
    {
        return ReqPoCollectPerPeriodHelper::getPeriodKeyForDate(collectPerPeriodPurch, _reqTrans.ReqDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendorBlocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the blocked status of the given vendor account.
    /// </summary>
    /// <param name = "_vendAccount">The current vendor account.</param>
    /// <returns>true if the vendor has a blocked status; otherwise, false.</returns>
    protected static boolean isVendorBlocked(VendAccount _vendAccount)
    {
        return
            VendTable::isVendorBlocked(_vendAccount, CustVendorBlocked::PurchOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreatePurchLine</Name>
				<Source><![CDATA[
    public static boolean checkCreatePurchLine(
        PurchId                 _purchId,
        ItemId                  _itemId,
        PurchTable              _purchTable,
        InventTable             _inventTable,
        InventItemInventSetup   _inventItemInventSetup,
        InventItemPurchSetup    _inventItemPurchSetup,
        boolean                 _checkItemOrderSetup    = true
        )
    {
        if (! _purchTable.RecId)
            return checkFailed(strfmt("@SYS15741",_purchId));

        if (! _inventTable.RecId)
            return checkFailed(strfmt("@SYS10752",_itemId));

        if (_checkItemOrderSetup && !_inventItemInventSetup.RecId)
            return checkFailed(strfmt("@SYS5700", _itemId, InventItemOrderSetupType::Invent));

        if (_checkItemOrderSetup && !_inventItemPurchSetup.RecId)
            return checkFailed(strfmt("@SYS5700", _itemId, InventItemOrderSetupType::Purch));

        if (_checkItemOrderSetup && _inventItemPurchSetup.isStopped())
            return checkFailed(strfmt("@SYS13295", _itemId, InventItemOrderSetupType::Purch));

        if (ProdPurch::isVendorBlocked(_purchTable.OrderAccount))
            return checkFailed(strfmt("@SYS1138",_purchTable.OrderAccount));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static ProdPurch construct()
    {
        return new ProdPurch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchTable</Name>
				<Source><![CDATA[
    [SysObsolete("This method has been made obsolete, please use createPurchTable method of the <c>ProdPurchCreate<c> class.", false, 30\06\2018)]
    public static PurchId createPurchTable(
        VendAccount      _vendId,
        PurchaseType     _purchaseType,
        DlvDate          _deliveryDate,
        PurchAgreementId _agreementId = '',
        boolean          _interCompanySilent = false,
        ProjId           _projId = '',
        SalesId          _salesId = '')
    {
        ProdPurchCreateParameters prodPurchCreateParameters = ProdPurchCreateParameters::construct();
        prodPurchCreateParameters.parmVendAccount(_vendId);
        prodPurchCreateParameters.parmPurchaseType(_purchaseType);
        prodPurchCreateParameters.parmDeliveryDate(_deliveryDate);
        prodPurchCreateParameters.parmAgreementId(_agreementId);
        prodPurchCreateParameters.parmInterCompanySilent(_interCompanySilent);
        prodPurchCreateParameters.parmProjId(_projId);
        prodPurchCreateParameters.parmSalesId(_salesId);

        ProdPurchCreate prodPurchCreate                     = ProdPurchCreate::construct(prodPurchCreateParameters);
        return prodPurchCreate.createPurchTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrievePurchaseOrderNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>NumberSeq</c> for purchase orders.
    /// </summary>
    /// <returns>A <c>NumberSeq</c> instance.</returns>
    protected static NumberSeq retrievePurchaseOrderNumberSequence()
    {
        return NumberSeq::newGetNum(PurchParameters::numRefPurchId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchTable</Name>
				<Source><![CDATA[
    public static PurchTable initPurchTable(
        VendAccount             _vendId,
        PurchaseType            _purchaseType,
        DlvDate                 _deliveryDate,
        PurchAgreementHeader    _purchAgreementHeader,
        ProjId                  _projId = '',
        SalesId                 _salesId = '')
    {
        VendTable vendTable = VendTable::find(_vendId);
        if (! vendTable.RecId)
        {
            throw error(strfmt("@SYS11817",_vendId));
        }

        if (ProdPurch::isVendorBlocked(vendTable.AccountNum))
        {
            throw error(strfmt("@SYS1138",_vendId));
        }

        PurchTable purchTable;
        purchTable.initValue(_purchaseType);

        NumberSeq   num = ProdPurch::retrievePurchaseOrderNumberSequence();

        PurchId     purchId = num.num();

        if (PurchTable::exist(purchId))
        {
            num.abort();
            checkFailed("@SYS19304");
            checkFailed(strfmt("@SYS24176",purchId));
            throw error("@SYS23020");
        }

        purchTable.PurchId = purchId;

        num.used();
        purchTable.DeliveryDate = _deliveryDate;

        purchTable.initFromVendTable(vendTable);

        if (purchTable.OrderAccount != purchTable.InvoiceAccount)
        {
            purchTable.initInvoiceAccount();
        }

        if (_purchAgreementHeader)
        {
            purchTable.initFromPurchAgreementHeader(_purchAgreementHeader, true, true);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && _projId)
        {
            purchTable.ProjId = _projId;
            purchTable.initFromSalesTable(SalesTable::find(_salesId));
        }

        purchTable.calculateRequestedShipAndReceiptDate(dateNull(), purchTable.DeliveryDate, SchedDirection::Backward);
        purchTable.SkipShipReceiptDateCalculation = true;

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProd</Name>
				<Source><![CDATA[
    public static ProdPurch newProd()
    {
        ProdParameters prodParameters = ProdParameters::find();

        ProdPurch prodPurch = ProdPurch::construct();
        prodPurch.parmCollectPerVendor(prodParameters.ProdAutoPurchCollectPerVendor);
        prodPurch.parmCollectPerBuyer(prodParameters.ProdAutoPurchCollectPerBuyer);
        prodPurch.parmCollectPerPurchAgreement(prodParameters.ProdAutoPurchCollectPerPurchAgreement);
        prodPurch.parmCollectPerPeriodPurch(ReqPoCollectPerPeriod::No);
        prodPurch.parmSearchPurchAgreement(prodParameters.ProdAutoPurchSearchPurchAgreement);

        return prodPurch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReq</Name>
				<Source><![CDATA[
    public static ProdPurch newReq(
        ReqPOCollectPerVendor          _collectPerVendor,
        ReqPOCollectPerBuyer           _collectPerBuyer,
        ReqPoCollectPerPeriod          _collectPerPeriodPurch,
        ReqPOCollectPerPurchAgreement  _collectPerPurchAgreement
        )
    {
        ProdPurch prodPurch = ProdPurch::construct();
        prodPurch.parmCollectPerVendor(_collectPerVendor);
        prodPurch.parmCollectPerBuyer(_collectPerBuyer);
        prodPurch.parmCollectPerPeriodPurch(_collectPerPeriodPurch);
        prodPurch.parmCollectPerPurchAgreement(_collectPerPurchAgreement);

        return prodPurch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromReqParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the class from the given planning parameters.
    /// </summary>
    /// <param name = "_reqParameters">A <c>ReqParameters</c> record.</param>
    /// <returns>A new instance of the class for the given planning parameters.</returns>
    internal static ProdPurch newFromReqParameters(ReqParameters _reqParameters)
    {
        return ProdPurch::newReq(_reqParameters.ReqPOCollectPerVendor, _reqParameters.ReqPOCollectPerBuyer, _reqParameters.DefaultCollectPerPeriodPurch, _reqParameters.ReqPOCollectPerPurchAgreement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventStorageDim</Name>
				<Source><![CDATA[
    public static void setInventStorageDim(
        PurchLine                   _purchLine,
        InventDim                   _inventDim              = InventDim::find(_purchLine.InventDimId),
        InventTable                 _inventTable            = InventTable::find(_purchLine.ItemId),
        InventItemOrderSetupType    _setupType              = InventItemOrderSetupType::Purch,
        InventLocationId            _inventLocationIdVend   = '')
    {
        InventSiteId            inventSiteIdOrig        = _inventDim.InventSiteId;
        InventLocationId        inventLocationIdOrig    = _inventDim.InventLocationId;

        InventItemOrderSetupMap itemOrderSetupDefaultMap = _inventTable.inventItemOrderSetupMap(_setupType, _inventDim.inventDimId);
        InventItemOrderSetupMap itemOrderSetupDimMap;

        if (!_inventDim.InventLocationId)
        {
            _inventDim.InventLocationId = _inventLocationIdVend;
        }

        if (!_inventDim.InventSiteId || _inventDim.InventSiteId != itemOrderSetupDefaultMap.inventSiteId(_inventDim.InventSiteId, _inventTable))
        {
            _inventDim.InventSiteId = itemOrderSetupDefaultMap.inventSiteId(_inventDim.InventSiteId, _inventTable);
        }

        if (_inventDim.InventSiteId)
        {
            itemOrderSetupDimMap    = _inventTable.inventItemOrderSetupMap(_setupType, InventDim::findOrCreate(_inventDim).InventDimId);
        }
        else
        {
            itemOrderSetupDimMap    = _inventTable.inventItemOrderSetupMap(_setupType, InventDim::inventDimIdBlank());
        }

        if (!_inventDim.InventLocationId || _inventDim.InventLocationId != itemOrderSetupDimMap.inventLocationId(_inventDim.InventLocationId,
                                                                                                                _inventTable,
                                                                                                                _inventDim.InventSiteId))
        {
            _inventDim.InventLocationId = itemOrderSetupDimMap.inventLocationId(_inventDim.InventLocationId,
                                                                                _inventTable,
                                                                                _inventDim.InventSiteId);

            _inventDim.initFromInventLocation(_inventDim.inventLocation());
        }

        if ((inventSiteIdOrig != _inventDim.InventSiteId) || (inventLocationIdOrig != _inventDim.InventLocationId))
        {
            _inventDim.InventDimId = InventDim::findOrCreate(_inventDim).InventDimId;

            _purchLine.setInventDimId(_inventDim.InventDimId, _inventDim);
        }

        _purchLine.setAddressFromInventDim(_inventDim);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>