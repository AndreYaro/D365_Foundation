<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRMarginAlert_Sales</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRMarginAlert_Sales</c> class handles logic for margins in terms of
/// a sales order.
/// </summary>
public class MCRMarginAlert_Sales extends MCRMarginAlert
{
    SalesLine   salesLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPdsRebateAgreementCalcDate</Name>
				<Source><![CDATA[
    protected date getPdsRebateAgreementCalcDate(PdsRebateAgreement _pdsRebateAgreement)
    {
        date pdsRebateAgreementCalcDate;

        pdsRebateAgreementCalcDate = _pdsRebateAgreement.setCalcDate(salesLine);

        return pdsRebateAgreementCalcDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRoyaltyCalcDate</Name>
				<Source><![CDATA[
    protected date getRoyaltyCalcDate(MCRRoyaltyTable _mcrRoyaltyTable)
    {
        date royaltyCalcDate;
        royaltyCalcDate = _mcrRoyaltyTable.setCalcDate(salesLine);
        return royaltyCalcDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRoyaltyCalcDateRequestShipDate</Name>
				<Source><![CDATA[
    protected date getRoyaltyCalcDateRequestShipDate()
    {
        return salesLine.ShippingDateRequested;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustAccount</Name>
				<Source><![CDATA[
    protected CustAccount parmCustAccount()
    {
        return salesLine.CustAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQty</Name>
				<Source><![CDATA[
    protected Qty parmInventQty()
    {
        return salesLine.QtyOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModuleInventPurchSales</Name>
				<Source><![CDATA[
    protected ModuleInventPurchSales parmModuleInventPurchSales()
    {
        return ModuleInventPurchSales::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultiLnDisc</Name>
				<Source><![CDATA[
    protected DiscAmount parmMultiLnDisc()
    {
        return salesLine.MultiLnDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultiLnPercent</Name>
				<Source><![CDATA[
    protected DiscPct parmMultiLnPercent()
    {
        return salesLine.MultiLnPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPDSCWQty</Name>
				<Source><![CDATA[
    protected Qty parmPDSCWQty()
    {
        return salesLine.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesLine</Name>
				<Source><![CDATA[
    public SalesLine parmSalesLine(SalesLine _salesLine = salesLine)
    {
        salesLine = _salesLine;

        // Initialize the map of parent.
        this.parmMCRMarginAlertMap(salesLine);

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDeductBroker</Name>
				<Source><![CDATA[
    protected boolean shouldDeductBroker()
    {
        boolean ret;

        ret = super();

        // Only calculate for sales or return orders
        ret = ret
             && (salesLine.SalesType == SalesType::Sales
                   || salesLine.SalesType == SalesType::ReturnItem);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDeductCustRebate</Name>
				<Source><![CDATA[
    protected boolean shouldDeductCustRebate()
    {
        boolean ret;

        ret = super();

        // Do not deduct rebates for item requirement orders or subscription orders.
        if (ret
            && (salesLine.SalesType    == SalesType::ItemReq
                || salesLine.SalesType == SalesType::Subscription))
        {
            ret = false;
        }        

        if (ret && salesLine.PdsExcludeFromRebate)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDeductRoyalty</Name>
				<Source><![CDATA[
    protected boolean shouldDeductRoyalty()
    {
        boolean ret;

        // Do not estimate roylaties if the sales order is of
        // type item requirement - all other types need to estimate royalties.
        ret = salesLine.SalesType != SalesType::ItemReq;

        ret = ret && super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventDimFromCustomer</Name>
				<Source><![CDATA[
    static public InventDim updateInventDimFromCustomer(InventDim _inventDim, CustAccount _accountNum)
    {
        InventDim inventDim = _inventDim;

        if (! inventDim.InventSiteId)
        {
            inventDim.InventSiteId = CustTable::find(_accountNum).InventSiteId;
            inventDim = inventDim::findOrCreate(inventDim);
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static MCRMarginAlert_Sales construct()
    {
        return new MCRMarginAlert_Sales();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>MCRMarginAlert_Sales</c> object from a <c>SalesLine</c> record.
    /// </summary>
    /// <param name="_salesLine">
    /// The record to use to create the margin alert object.
    /// </param>
    /// <returns>
    /// An initialized margin alert object.
    /// </returns>
    public static MCRMarginAlert_Sales newSalesLine(SalesLine _salesLine)
    {
        MCRMarginAlert_Sales mcrMarginAlert_Sales;

        mcrMarginAlert_Sales = MCRMarginAlert_Sales::construct();
        mcrMarginAlert_Sales.parmSalesLine(_salesLine);
        return mcrMarginAlert_Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineAmountExclTax</Name>
				<Source><![CDATA[
    protected LineAmount parmLineAmountExclTax()
    {
        return salesLine.calcLineAmountExclTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGrossAmountExclTax</Name>
				<Source><![CDATA[
    protected LineAmount parmGrossAmountExclTax()
    {
        return salesLine.calcGrossAmountExclTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>marginPercentToPersist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the margin percentage to persist on the sales line.
    /// </summary>
    /// <returns>The calculated margin percentage when the calculation could determine a margin price; otherwise a special value to indicate that calculation is not valid.</returns>
    public McrMarginPercent marginPercentToPersist()
    {
        McrMarginPercent persistPercent = this.parmMarginPercent();
        if (!this.parmMarginPrice())
        {
            persistPercent = McrMarginAlert::percentValueForNotCalculated();
        }

        return persistPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistMarginCalculation</Name>
				<Source><![CDATA[
    public void persistMarginCalculation()
    {
        SalesLine salesLineUpdate;

        ttsbegin;

        McrMarginPercent newPercent = this.marginPercentToPersist();

        select firstonly forupdate salesLineUpdate
            where salesLineUpdate.RecId == salesLine.RecId
            && salesLineUpdate.McrMarginPercent != newPercent;
        
        if (salesLineUpdate)
        {
            salesLineUpdate.McrMarginPercent = newPercent;
            salesLineUpdate.update();

            if (salesLine.isFormDataSource())
            {
                Object callerFormRun = salesLine.dataSource().formRun();
                if (formHasMethod(callerFormRun, formMethodStr(SalesTable, mcrRereadMarginAlert)))
                {
                    callerFormRun.mcrRereadMarginAlert();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>