<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgPayCount</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgPayCount</c> class is used to calculate count units.
/// </summary>
public class JmgPayCount extends RunBase
{
    container   externWorkers;
    QueryRun    queryRun;
    container   packedQuery;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        packedQuery
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        packedQuery = queryRun.pack();
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version     = RunBase::getVersion(_packedClass);
        boolean     ret = true;

        switch (version)
        {
            case #CurrentVersion  :
                [version, #CurrentList] = _packedClass;
                break;
            default :
                ret = false;
                break;
        }

        if (SysQuery::isPackedOk(packedQuery))
        {
            queryRun = new QueryRun(packedQuery);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves whether the class can be run as a batch job.
    /// </summary>
    /// <returns>
    ///    true if the class can be run as a batch job; otherwise, false.
    /// </returns>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query to use when recalculating count units.
    /// </summary>
    public void initQuery()
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        int                     i;
        query = new Query();
        queryBuildDataSource = query.addDataSource(tableNum(JmgEmployee));
        queryBuildRange = queryBuildDataSource.addRange(fieldNum(JmgEmployee,Worker));
        if (externWorkers)
        {
            for (i = 1; i <= conLen(externWorkers); i++)
            {
                queryBuildRange.value(queryRangeConcat(queryBuildRange.value(), conPeek(externWorkers, i)));
            }
        }
        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();
        this.initQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        JmgEmployee             jmgEmployee;
        int                     counter;

        using(var activityContext = JmgInstrumentationLogger::createLogger(classStr(JmgPayCount)).maintainPayroll().recalculateWorkerBalances())
        {
            this.progressInit(JmgPayCount::description(), SysQuery::countLoops(queryRun), #AviUpdate);

            ttsbegin;

            while (queryRun.next())
            {
                jmgEmployee = queryRun.get(tableNum(JmgEmployee));
                setPrefix(#PreFixField(jmgEmployee, Worker));
                progress.setText(HcmWorker::worker2Name(jmgEmployee.Worker));
                JmgPayCount::sumWorker(jmgEmployee.Worker);
                counter++;
                progress.setCount(counter);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExternWorkers</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Set the workers for which the pay count balances is recalculated.
    /// </summary>
    /// <param name="_workers">
    ///    A container that has worker IDs.
    /// </param>
    /// <remarks>
    ///    If the <c>setExternWorkers</c> method is set, then the query is initialized with a range on these
    ///    worker IDs.
    /// </remarks>
    public void setExternWorkers(container _workers)
    {
        externWorkers = _workers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQuerySelectButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves whether select button is shown on the dialog.
    /// </summary>
    /// <returns>
    ///    true if the select button is shown on the dialog; otherwise, false.
    /// </returns>
    boolean showQuerySelectButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a Select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c> .If you change the return value to false the button will no longer
    ///    be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS38609";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        JmgPayCount     jmgPayCount;
        JmgEmployee     jmgEmployee;
        FormRun         caller;
        container       externWorkers;
        FormDataSource  fds;
        HcmWorker       hcmWorker;

        jmgPayCount = new JmgPayCount();

        if (_args.dataset() == tableNum(JmgEmployee))
        {
            jmgEmployee = _args.record();
            jmgPayCount.setExternWorkers([jmgEmployee.Worker]);
            jmgPayCount.initQuery();
        }
        else
        {
            caller = _args.caller();
            externWorkers = conNull();

            if (caller 
                && (caller.name() == formStr(HcmWorker) || caller.name() == formStr(HcmWorkerV2)))
            {
                fds         = FormDataUtil::getFormDataSource(_args.record());
                hcmWorker   = fds.getFirst(true);
                if (!hcmWorker)
                {
                    hcmWorker = _args.record();
                }

                while (hcmWorker)
                {
                    externWorkers  += [hcmWorker.RecId];
                    hcmWorker       = fds.getNext();
                }
                jmgPayCount.setExternWorkers(externWorkers);
                jmgPayCount.initQuery();
            }
        }

        if (jmgPayCount.prompt())
        {
            jmgPayCount.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumWorker</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Recalculates the pay count balance for the specified worker.
    /// </summary>
    /// <param name="_worker">
    ///     The worker for which pay count balance is recalculated.
    /// </param>
    static void sumWorker(JmgWorkerRecId _worker)
    {
        JmgPayEvents    jmgPayEvents;
        JmgPayCountSum  jmgPayCountSum;

        ttsbegin;

        delete_from jmgPayCountSum
            where jmgPayCountSum.Worker == _worker;

        while select PayCountId, Worker, ProfileDate, PayCountSeconds, PaySeconds from jmgPayEvents
            where jmgPayEvents.Worker == _worker &&
                  jmgPayEvents.PayCountId
        {
            jmgPayCountSum = JmgPayCountSum::find(jmgPayEvents.PayCountId,jmgPayEvents.Worker,jmgPayEvents.ProfileDate, true);

            jmgPayCountSum.TotalSeconds += jmgPayEvents.PayCountSeconds < 0 ? - jmgPayEvents.PayCountSeconds : jmgPayEvents.PayCountSeconds;
            jmgPayCountSum.PaySeconds   += jmgPayEvents.PaySeconds < 0 ? - jmgPayEvents.PaySeconds : jmgPayEvents.PaySeconds;
            jmgPayCountSum.write();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>