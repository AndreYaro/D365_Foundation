<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCustomerAttributeHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailCustomerAttributeHelper</c> class is a helper class
/// contains method to create, update, and read attributes related to
/// customer.
/// </summary>
public class RetailCustomerAttributeHelper
{
    private const str RecIdElement = 'RecordId';
    private const str AttributeNameElement = 'Name';
    private const str AttributeDataTypeElement = 'DataTypeValue';
    private const str AttributeValueElement = 'AttributeValue';
    private const str StringValueElement = 'StringValue';
    private const str DecimalValueElement = 'DecimalValue';
    private const str BooleanValueElement = 'BooleanValue';
    private const str IntegerValueElement = 'IntegerValue';
    private const str DateStringElement = 'DateString';
    private const str TimeOfDayElement = 'TimeOfDayString';
    public const int DateSequence = 321;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deserializeCustomerAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserialize customer attributes. The expected xml format should be like this:
    /// <ArrayOfCustomerAttribute>
    ///     <CustomerAttribute>
    ///         <RecordId>123</RecordId>
    ///         <Name>AttributeName</Name>
    ///         <DataType>Text</DataType>
    ///         <DataTypeValue>5</DataTypeValue>
    ///         <AttributeValueRecordId>0</AttributeValueRecordId>
    ///         <AttributeValue>
    ///             <BooleanValue />
    ///             <ByteValue />
    ///             <DecimalValue />
    ///             <DateTimeOffsetValue />
    ///             <IntegerValue />
    ///             <LongValue />
    ///             <StringValue>Test attribute text value</StringValue>
    ///         </AttributeValue>
    ///     </CustomerAttribute>
    ///     <CustomerAttribute>
    ///     ...
    ///     </CustomerAttribute>
    /// </ArrayOfCustomerAttribute>
    /// </summary>
    /// <param name = "_xml">The string xml to be deserialized.</param>
    /// <returns>Dictionary object that has key of attribute definition record identifier, and value of attribute value details.</returns>
    public static Map deserializeCustomerAttributes(str _xml)
    {
        Map customerAttributes = new Map(Types::Int64, Types::AnyType);

        if (_xml == '')
        {
            // return empty collection of attributes when xml string is empty.
            return customerAttributes;
        }

        XmlDocument xmlDoc = new XmlDocument();
        xmlDoc.loadXml(_xml);
        XmlElement rootElement = xmlDoc.documentElement();
        XmlNodeList attributeNodes = rootElement.childNodes();
        XmlNode item;
        XmlElement attributeValueNode;
        RecId attributeDefinitionRecId;
        AttributeDataType dataType;
        str attributeDefinitionName;
        str attrValueString;
        anytype attrValue;
        Map attributeValueDetails;
        Set attrValueSet;


        for (int i = 0; i < attributeNodes.length(); i++)
        {
            // Retrieve values from xml elements.
            item = attributeNodes.item(i);
            attributeDefinitionRecId = str2Int64(item.getNamedElement(RecIdElement).text());
            attributeDefinitionName = item.getNamedElement(AttributeNameElement).text();
            dataType = str2Int(item.getNamedElement(AttributeDataTypeElement).text());
            attributeValueNode = item.getNamedElement(AttributeValueElement);

            switch (dataType)
            {
                case AttributeDataType::Text:
                    attrValueString = attributeValueNode.getNamedElement(StringValueElement).text();
                    attrValue = attrValueString;
                    break;
                case AttributeDataType::TrueFalse:
                    attrValueString = attributeValueNode.getNamedElement(BooleanValueElement).text();
                    attrValue = strLwr(attrValueString) == 'true' ? true : false;
                    break;
                case AttributeDataType::DateTime:
                    str dateString = attributeValueNode.getNamedElement(DateStringElement).text();
                    str timeOfDayString = attributeValueNode.getNamedElement(TimeOfDayElement).text();
                    attrValue = DateTimeUtil::newDateTime(str2Date(dateString, DateSequence), str2time(timeOfDayString));
                    break;
                case AttributeDataType::Decimal:
                    attrValueString = attributeValueNode.getNamedElement(DecimalValueElement).text();
                    attrValue = str2Num(attrValueString);
                    break;
                case AttributeDataType::Integer:
                    attrValueString = attributeValueNode.getNamedElement(IntegerValueElement).text();
                    attrValue = str2Int(attrValueString);
                    break;
                default:
                    attrValue = RetailCustomerAttributeHelper::getDefaultCustomerAttributeDataType(_xml, dataType);
            }

            if (!customerAttributes.exists(attributeDefinitionRecId))
            {
                // Instantiate a new dictionary attribute details.
                attributeValueDetails = new Map(Types::String, Types::AnyType);
                attributeValueDetails.insert(RetailAttributeHelper::AttributeDefinitionNameKey, attributeDefinitionName);
                attributeValueDetails.insert(RetailAttributeHelper::AttributeDefinitionTypeKey, dataType);

                // Instantiate a new Set object that holds attribute values.
                attrValueSet = new Set(Types::AnyType);
                attrValueSet.add(attrValue);

                // Insert the Set object to attribute details dictionary.
                attributeValueDetails.insert(RetailAttributeHelper::AttributeValuesKey, attrValueSet);

                // Insert attribute details dictionary to customer attributes dictionary.
                customerAttributes.insert(attributeDefinitionRecId, attributeValueDetails);
            }
            else
            {
                // Attribute details has been instantiated, get the instance of this dictionary.
                attributeValueDetails = customerAttributes.lookup(attributeDefinitionRecId);

                // Retrieve the Set instance that holds attribute values.
                attrValueSet = attributeValueDetails.lookup(RetailAttributeHelper::AttributeValuesKey);
                attrValueSet.add(attrValue);
            }
        }

        // Example of end result: dictionary of attribute values
        // [
        //      attrDefinitionRecId01 => [ 'AttributeName' => 'AttrName01', 'AttributeType' => 5, 'AttributeValues' => Set('Value1', 'Value2', 'Value3') ],
        //      attrDefinitionRecId02 => [ 'AttributeName' => 'AttrName02', 'AttributeType' => 4, 'AttributeValues' => Set(5, 6, 7) ]
        // ]
        return customerAttributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultCustomerAttributeDataType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets customer default attribute data type.
    /// </summary>
    /// <param name = "_xml">
    ///     The string xml to be deserialized.
    /// </param>
    /// <param name = "_dataType">
    ///     An attribute data type.
    /// </param>
    /// <returns>
    ///     Anytype value used for setting default attribute value.
    /// </returns>
    [Replaceable]
    protected static anytype getDefaultCustomerAttributeDataType(str _xml, AttributeDataType _dataType)
    {
        SysDictEnum sysDictEnum = new SysDictEnum(enumNum(AttributeDataType));
        str dataTypeText = sysDictEnum.value2Symbol(_dataType);
        throw error(strFmt('Data type conversion %1 is not supported', dataTypeText != '' ? dataTypeText : int2Str(_dataType)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributeValuesOnCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get list of attribute values on a customer.
    /// </summary>
    /// <param name = "_customerId">The customer account number.</param>
    /// <param name = "_dataAreaId">The data area identifier.</param>
    /// <returns>List of attribute values associated with the customer.</returns>
    public static Map getAttributeValuesOnCustomer(str _customerId, str _dataAreaId)
    {
        RetailParameters retailParameters;
        CustomerInstanceValue customerInstanceValue;
        Map attributeDefinitions;

        customerInstanceValue = CustomerInstanceValue::find(_customerId, _dataAreaId);

        if (!customerInstanceValue.RecId)
        {
            // if no rows found on CustomerInstanceValue table, return empty collection.
            return new Map(Types::Int64, Types::AnyType);
        }

        select firstonly CustomerAttributeGroup from retailParameters
            where retailParameters.DataAreaId == _dataAreaId;

        attributeDefinitions = RetailAttributeHelper::getAttributeDefinitionsByAttributeGroup(retailParameters.CustomerAttributeGroup);
        return RetailAttributeHelper::getAttributeValues(customerInstanceValue.RecId, attributeDefinitions.keySet());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormattedCustomerAttributeValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get list of attribute values on a customer.
    /// This list is formatted in the same format used to upsert existing customer attribute values.
    /// </summary>
    /// <param name = "_customerId">The customer account number.</param>
    /// <param name = "_dataAreaId">The data area identifier.</param>
    /// <returns>List of attribute values associated with the customer.</returns>
    [Hookable(false)]
    internal static Map getFormattedCustomerAttributeValues(str _customerId, str _dataAreaId)
    {
        Map result = new Map(Types::Int64, Types::AnyType);
        Map customerAttributes = RetailCustomerAttributeHelper::getAttributeValuesOnCustomer(_customerId, _dataAreaId);

        MapEnumerator mapEnumerator = customerAttributes.getEnumerator();

        EcoResAttribute ecoResAttrib;
        EcoResAttributeType ecoResAttribType;

        while (mapEnumerator.moveNext())
        {
            select firstonly1 ecoResAttrib
                    join ecoResAttribType
                        where ecoResAttrib.RecId == mapEnumerator.currentKey() && ecoResAttribType.RecId == ecoResAttrib.AttributeType;

            // Instantiate a new dictionary of attribute details.
            Map attributeValueDetails = new Map(Types::String, Types::AnyType);
            attributeValueDetails.insert(RetailAttributeHelper::AttributeDefinitionNameKey, ecoResAttrib.Name);
            attributeValueDetails.insert(RetailAttributeHelper::AttributeDefinitionTypeKey, ecoResAttribType.DataType);

            // The Map pointed to, by the mapEnumerator variable contains a name-value pair where the 'name' is the EcoResAttribute table RecId.
            // The 'value' is a set with only 1 element. It cannot have more or less.
            // This set contains the attribute value saved in all possible formats like text, int, decimal, etc inside a map.
            // We retrieve the appropriate attribute value based on the AttributeDataType supported by the attribute pointed in the 'name' field.
            Map attribDetailsMap = RetailCustomerAttributeHelper::getFirstElementOfSet(mapEnumerator.currentValue());

            // Extract the attribute value from the map above.
            anytype attrValue = '';
            AttributeDataType attribType = ecoResAttribType.DataType;
            switch (attribType)
            {
                case AttributeDataType::Text:
                    if (attribDetailsMap.exists(RetailAttributeHelper::AttributeValueTextKey))
                    {
                        attrValue = attribDetailsMap.lookup(RetailAttributeHelper::AttributeValueTextKey);
                    }
                    
                    break;
                case AttributeDataType::TrueFalse:
                    if (attribDetailsMap.exists(RetailAttributeHelper::AttributeValueBooleanKey))
                    {
                        attrValue = attribDetailsMap.lookup(RetailAttributeHelper::AttributeValueBooleanKey);
                    }

                    break;
                case AttributeDataType::DateTime:
                    if (attribDetailsMap.exists(RetailAttributeHelper::AttributeValueDateTimeKey))
                    {
                        attrValue = attribDetailsMap.lookup(RetailAttributeHelper::AttributeValueDateTimeKey);
                    }

                    break;
                case AttributeDataType::Decimal:
                    if (attribDetailsMap.exists(RetailAttributeHelper::AttributeValueDecimalKey))
                    {
                        attrValue = attribDetailsMap.lookup(RetailAttributeHelper::AttributeValueDecimalKey);
                    }

                    break;
                case AttributeDataType::Integer:
                    if (attribDetailsMap.exists(RetailAttributeHelper::AttributeValueIntKey))
                    {
                        attrValue = attribDetailsMap.lookup(RetailAttributeHelper::AttributeValueIntKey);
                    }

                    break;
                default:
                    break;
            }

            // Instantiate a new Set object that holds attribute values.
            Set attrValueSet = new Set(Types::AnyType);
            attrValueSet.add(attrValue);

            // Insert the Set object to attribute details dictionary.
            attributeValueDetails.insert(RetailAttributeHelper::AttributeValuesKey, attrValueSet);

            // Insert attribute details dictionary to results dictionary.
            result.insert(mapEnumerator.currentKey(), attributeValueDetails);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUpdateAttributeValuesOnCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create or update attribute values on customer.
    /// </summary>
    /// <param name = "_customerId">The customer account number.</param>
    /// <param name = "_dataAreaId">The customer data area identifier.</param>
    /// <param name = "_newAttributeValues">The attribute values to be updated.</param>
    /// <param name="_channelId">The channel identifier.</param>
    /// <param name="_attrDataPackageVersion">The CDX data package version for attributes on customer record changes.</param>
    /// <returns>A serialized CDX data package containing records to be added or removed if the channel id is specified. Otherwise, return an empty string.</returns>
    public static str createUpdateAttributeValuesOnCustomer(str _customerId, str _dataAreaId, Map _newAttributeValues,
         RefRecId _channelId = 0, int _attrDataPackageVersion = 1)
    {
        RetailParameters retailParameters;
        CustomerInstanceValue instanceValue;
        MapEnumerator oldAttributesEnumerator;
        MapEnumerator updatedAttrValuesEnumerator;
        Set attributeGroupSet = new Set(Types::Int64);
        Map attributeDefinitions;
        Map oldAttributeValues;
        str errorMessages;
        boolean isNewCustomerInstanceValue = false;
        Set attrDefinitionRecIdSet;
        RefRecId attrDefinitionRecId;

        if (_customerId == '' || _dataAreaId == '')
        {
            // no updates will be performed when _customerId or _dataAreaId is empty string.
            return '';
        }

        select firstonly CustomerAttributeGroup from retailParameters
            where retailParameters.DataAreaId == _dataAreaId;

        attributeGroupSet.add(retailParameters.CustomerAttributeGroup);
        attributeGroupSet.add(retailParameters.ClientBookAttributeGroup);
        attributeDefinitions = RetailAttributeHelper::getAttributeDefinitionsByAttributeGroups(attributeGroupSet);

        if (attributeDefinitions.elements() == 0 && _newAttributeValues.elements() == 0)
        {
            // neither attribute definitions nor new attribute values are found.
            // do nothing.
            return '';
        }
        else
        {
            errorMessages = RetailCustomerAttributeHelper::validateAttributeValuesIncludedOnAttributeDefinitions(
                attributeDefinitions, _newAttributeValues);
            errorMessages += RetailAttributeHelper::validateAttributeValueBoundaries(attributeDefinitions, _newAttributeValues);

            if (errorMessages != '')
            {
                throw error(errorMessages);
            }
        }

        instanceValue = CustomerInstanceValue::find(_customerId, _dataAreaId);

        if (!instanceValue.RecId)
        {
            // Set the flag that new instance attribute values of customer is just created.
            isNewCustomerInstanceValue = true;
            instanceValue = CustomerInstanceValue::findOrCreate(_customerId, _dataAreaId);
        }

        attrDefinitionRecIdSet = attributeDefinitions.keySet();
        updatedAttrValuesEnumerator = _newAttributeValues.getEnumerator();

        // Iterate through attribute definition record identifier on attribute values.
        while (updatedAttrValuesEnumerator.moveNext())
        {
            attrDefinitionRecId = updatedAttrValuesEnumerator.currentKey();

            // Add attribute definition record identifier that is not in the current attribute definition record
            // identifier set.
            if (!attrDefinitionRecIdSet.in(attrDefinitionRecId))
            {
                attrDefinitionRecIdSet.add(attrDefinitionRecId);
            }
        }

        Map recordChanges = RetailAttributeHelper::updateInstanceAttributeValues(
            instanceValue.RecId, _newAttributeValues, attrDefinitionRecIdSet);

        if (isNewCustomerInstanceValue)
        {
            // Insert CustomerInstanceValueRecord to the recordChanges if we just created the record.
            Map insertionChanges = recordChanges.lookup(RetailAttributeHelper::InsertionRecordsKey);
            List instanceValueList = new List(Types::Record);
            instanceValueList.addEnd(instanceValue);
            insertionChanges.insert(tableId2Name(tableNum(CustomerInstanceValue)), instanceValueList);
        }

        // Return the serialized CDX package only if the channel identifier is specified.
        if (_channelId != 0)
        {
            return RetailCustomerAttributeHelper::createSerializedAttributesDataPackage(recordChanges, _channelId,
            _attrDataPackageVersion);
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustAttrGroupOnRetailParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate attributes within an attribute group. If attribute type is not supported, then error message will be generated.
    /// </summary>
    /// <param name = "attributeGroupId">The attribute group identifier to be validated.</param>
    /// <returns>The list of error messages.</returns>
    public static List validateCustAttrGroupOnRetailParameters(RefRecId attributeGroupId)
    {
        EcoResAttributeGroup erag;
        List errorMessagesList = new List(Types::String);
        Map attributeDefinitionsMap = RetailAttributeHelper::getAttributeDefinitionsByAttributeGroup(attributeGroupId);
        MapEnumerator attrDefinitionEnumerator = attributeDefinitionsMap.getEnumerator();
        AttributeDataType attrDataType;
        Map attributeDetails;
        str attrErrorMessage, attrTypeStr, attrName;
        SysDictEnum sysDictEnum = new SysDictEnum(enumNum(AttributeDataType));

        // Get attribute group name
        select firstonly RecId, Name from erag where erag.RecId == attributeGroupId;

        if (!erag.RecId)
        {
            return errorMessagesList;
        }

        // Iterate through attribute definitions.
        while (attrDefinitionEnumerator.moveNext())
        {
            attributeDetails = attrDefinitionEnumerator.currentValue();
            attrDataType = attributeDetails.lookup(RetailAttributeHelper::AttributeDefinitionTypeKey);
            attrName = attributeDetails.lookup(RetailAttributeHelper::AttributeDefinitionNameKey);

            if (!RetailCustomerAttributeHelper::validateAttrTypeOnCustAttrGroup(attrDataType))
            {
                attrTypeStr = sysDictEnum.value2Symbol(attrDataType);
                attrErrorMessage = strFmt('@Retail:CustAttrNotSupportedAttributes', attrTypeStr, attrName, erag.Name);
                errorMessagesList.addEnd(attrErrorMessage);
                break;
            }
        }

        return errorMessagesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAttrTypeOnCustAttrGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks for <c>AttributeDataType</c> and returns a boolean value.
    /// </summary>
    /// <param name = "_attrDataType">
    ///     An attribute data type.
    /// </param>
    /// <returns>
    ///     true for available attribute data types; Otherwise, false.
    /// </returns>
    protected static boolean validateAttrTypeOnCustAttrGroup(AttributeDataType _attrDataType)
    {
        boolean isKnownType = false;

        switch(_attrDataType)
        {
            case AttributeDataType::Decimal:
            case AttributeDataType::Integer:
            case AttributeDataType::Text:
            case AttributeDataType::TrueFalse:
                isKnownType = true;
                break;
        }

        return isKnownType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustAttrGroupOnEcoResTmpAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates customer attribute group from table EcoResTmpAttribute.
    /// </summary>
    /// <param name = "_attributeGroupId">The attribute group identifier to validate.</param>
    /// <param name = "_erta"></param>
    /// <returns>List of error messages.</returns>
    public static List validateCustAttrGroupOnEcoResTmpAttribute(RefRecId _attributeGroupId, EcoResTmpAttribute _erta)
    {
        EcoResAttributeGroup erag;
        RetailParameters rp;
        List errorMessages = new List(Types::String);
        SysDictEnum sysDictEnum = new SysDictEnum(enumNum(AttributeDataType));
        str attrTypeStr, attrErrorMessage;

        // Get attribute group name
        erag = EcoResAttributeGroup::find(_attributeGroupId);

        if (!erag.RecId)
        {
            return errorMessages;
        }

        rp = RetailParameters::find();

        if (rp.CustomerAttributeGroup == _attributeGroupId)
        {
            while select Name, DataType from _erta
                where _erta.DataType != AttributeDataType::Decimal
                && _erta.DataType != AttributeDataType::Integer
                && _erta.DataType != AttributeDataType::Text
                && _erta.DataType != AttributeDataType::TrueFalse
            {
                attrTypeStr = sysDictEnum.value2Symbol(_erta.DataType);
                attrErrorMessage = strFmt('@Retail:CustAttrNotSupportedAttributes', attrTypeStr, _erta.Name, erag.Name);
                errorMessages.addEnd(attrErrorMessage);
            }
        }

        return errorMessages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAttributeValuesIncludedOnAttributeDefinitions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate whether attribute values to be updated contains attribute definition record identifier that is not included at
    /// given attribute definitions.
    /// For example, if attribute definition list is [RecId01, RecId03, RecId05]
    /// and attribute values are [RecId01 --> 'updatedText', RecId02 --> true]
    /// Then we should throw exception saying that RecId02 is not included on attribute definition.
    /// </summary>
    /// <param name = "_attributeDefinitions">List of attribute definitions.</param>
    /// <param name = "_newAttributeValues">List of attribute values to be updated.</param>
    /// <returns>Error messages from validation results, if any.</returns>
    private static str validateAttributeValuesIncludedOnAttributeDefinitions(Map _attributeDefinitions, Map _newAttributeValues)
    {
        SetEnumerator attrEnumerator = _newAttributeValues.keySet().getEnumerator();
        Map attributeDefinitionDetails;
        boolean allowMultipleValues;
        RefRecId attrDefinitionRecId;
        Set attributeValues;
        str errorMessages = '';
        str attributeName;
        EcoResAttribute era;

        while (attrEnumerator.moveNext())
        {
            attrDefinitionRecId = attrEnumerator.current();

            if (!_attributeDefinitions.exists(attrDefinitionRecId))
            {
                // We allow attribute value creation / update even if the attribute definition record identifier
                // is not included on the list of attribute definition.
                // We just need to validate the attribute definition record identifier exists on the EcoResTable.
                select firstonly RecId from era where era.RecId == attrDefinitionRecId;

                if (era.RecId == 0)
                {
                    // Add error message.
                    errorMessages += strFmt('Unknown attribute record id: %1', attrDefinitionRecId);
                }
            }
            else
            {
                attributeDefinitionDetails = _attributeDefinitions.lookup(attrDefinitionRecId);
                allowMultipleValues = attributeDefinitionDetails.lookup(
                    RetailAttributeHelper::AttributeDefinitionIsMultiValuesKey);
                attributeValues = _newAttributeValues.lookup(attrDefinitionRecId)
                    .lookup(RetailAttributeHelper::AttributeValuesKey);

                if (!allowMultipleValues && attributeValues.elements() > 1)
                {
                    errorMessages += strFmt('Multiple attribute values on attribute name %1 is not supported.',
                        attributeDefinitionDetails.lookup(RetailAttributeHelper::AttributeDefinitionNameKey));
                }
            }
        }

        return errorMessages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSerializedAttributesDataPackage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates CDX serialized data package contains attribute values for insertion and removal.
    /// </summary>
    /// <param name = "_recordChanges">List of attribute records to be inserted or removed.</param>
    /// <param name = "_channelId">The channel identifier.</param>
    /// <param name="_attrDataPackageVersion">The CDX data package version for attributes on customer record changes.</param>
    /// <returns>A serialized CDX data package.</returns>
    private static str createSerializedAttributesDataPackage(Map _recordChanges, RefRecId _channelId, int _attrDataPackageVersion = 1)
    {
        RetailCdxDataPackageSerializationHelper serializer;
        RecId channelSchemaRecId;
        str serializedPackage = '';
        Map insertionChanges, removalChanges;

        if (_channelId != 0)
        {
            channelSchemaRecId = RetailTransactionServiceUtilities::getChannelSchemaRecId(_channelId);
            insertionChanges = _recordChanges.lookup(RetailAttributeHelper::InsertionRecordsKey);
            removalChanges = _recordChanges.lookup(RetailAttributeHelper::RemovalRecordsKey);

            serializer = new RetailCdxDataPackageSerializationHelper(channelSchemaRecId);

            RetailCustomerAttributeHelper::writeInsertionRecordsToDataPackage(serializer, insertionChanges);
            RetailCustomerAttributeHelper::writeRemovalRecordsToDataPackage(serializer, removalChanges);

            serializedPackage = serializer.getBase64EncodedDataPackage();
            serializer.cleanUp();
            serializer = null;
        }

        return serializedPackage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeInsertionRecordsToDataPackage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Write insertion records to CDX data package.
    /// </summary>
    /// <param name = "_serializer">The CDX package serializer instance.</param>
    /// <param name = "_insertionChanges">Collection contains the records for insertion.</param>
    private static void writeInsertionRecordsToDataPackage(RetailCdxDataPackageSerializationHelper _serializer, Map _insertionChanges)
    {
        List insertionRecords;
        MapEnumerator insertionEnumerator;
        ListEnumerator recordEnumeratorList;
        str tableName;

        insertionEnumerator = _insertionChanges.getEnumerator();

        // loop through each table names.
        while (insertionEnumerator.moveNext())
        {
            tableName = insertionEnumerator.currentKey();
            insertionRecords = insertionEnumerator.currentValue();

            recordEnumeratorList = insertionRecords.getEnumerator();

            // loop through each insertion record on the insertion enumerator
            while (recordEnumeratorList.moveNext())
            {
                // write insertion record to serializer.
                _serializer.writeRecord(recordEnumeratorList.current());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRemovalRecordsToDataPackage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Write removal records to CDX data package.
    /// </summary>
    /// <param name = "_serializer">The CDX package serializer instance.</param>
    /// <param name = "_removalChanges">Collection contains record identifiers to be removed.</param>
    private static void writeRemovalRecordsToDataPackage(RetailCdxDataPackageSerializationHelper _serializer, Map _removalChanges)
    {
        MapEnumerator removalEnumerator;
        ListEnumerator recordIdentifierEnumeratorList;
        List removalIds;
        TableId tableId;
        str tableName;

        removalEnumerator = _removalChanges.getEnumerator();

        // loop through each table name.
        while (removalEnumerator.moveNext())
        {
            tableName = removalEnumerator.currentKey();
            removalIds = removalEnumerator.currentValue();
            tableId = tableName2Id(tableName);

            recordIdentifierEnumeratorList = removalIds.getEnumerator();

            // loop through each removal record identifier on the removal enumerator
            while (recordIdentifierEnumeratorList.moveNext())
            {
                // write removal record identifier to serializer.
                _serializer.writeRemovalRecord(tableId, recordIdentifierEnumeratorList.current());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributeDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>RetailEcoResAttributeDefinitionsView</c> based on the CustomerAttributeGroup and EcoResAttribute.
    /// </summary>
    /// <param name = "_ecoResAttributeValue">The EcoResAttributeValue record.</param>
    /// <returns>The <c>RetailEcoResAttributeDefinitionsView</c> record of the current EcoResAttribute.</returns>
    public static RetailEcoResAttributeDefinitionsView getAttributeDefinition(EcoResAttributeValue _ecoResAttributeValue)
    {
        EcoResAttribute ecoResAttribute;
        RetailEcoResAttributeDefinitionsView attributeDefinitionsView;
        RefRecId customerAttributeGroup = RetailParameters::find().CustomerAttributeGroup;

        select firstonly attributeDefinitionsView
            where attributeDefinitionsView.AttributeGroupRecId == customerAttributeGroup
            join  ecoResAttribute
            where ecoResAttribute.Name  == attributeDefinitionsView.AttributeName &&
                  ecoResAttribute.RecId == _ecoResAttributeValue.Attribute;

        return attributeDefinitionsView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstElementOfSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the first element of the set.
    /// </summary>
    /// <param name = "set">The set.</param>
    /// <returns>The first element of the set, if available.</returns>
    private static anytype getFirstElementOfSet(Set set)
    {
        anytype result;
        SetEnumerator enumerator = set.getEnumerator();

        if (enumerator.moveNext())
        {
            result = enumerator.current();
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>