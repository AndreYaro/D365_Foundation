<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventValueReportPopulateLedger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventValueReportPopulateLedger</c> class generates main account balances, totals, and
///    differences for the inventory value report per financial position.
/// </summary>
public class InventValueReportPopulateLedger extends InventValueReportBase
{
    InventValueReport   inventValueReport;
    UserConnection      userConnection;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmUserConnection</Name>
				<Source><![CDATA[
    public UserConnection parmUserConnection(UserConnection _userConnection = userConnection)
    {
        userConnection = _userConnection;
        return userConnection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDimensionAttributeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a query to retrieve dimension values for a specific dimension attribute.
    /// </summary>
    /// <param name="_dimensionAttributeRange">
    ///    The range that is entered in the dialog for the dimension value.
    /// </param>
    /// <param name="_dimensionAttribute">
    ///    The dimension attribute record.
    /// </param>
    /// <returns>
    ///    A query with data sources and ranges that corresponds the dimension attribute.
    /// </returns>
    protected Query buildDimensionAttributeQuery(
        QueryBuildRange     _dimensionAttributeRange,
        DimensionAttribute  _dimensionAttribute
        )
    {
        Query                   query;

        if (_dimensionAttribute)
        {
            query = new Query();
            QueryBuildDataSource qbdsCommon = query.addDataSource(_dimensionAttribute.BackingEntityType);

            // Transfer the range from the contract query
            qbdsCommon.addRange(_dimensionAttribute.ValueAttribute).value(_dimensionAttributeRange.value());

            // In the DimensionFinancialTag table, an extra range has to be added
            if (_dimensionAttribute.BackingEntityType == tableNum(DimensionFinancialTag))
            {
                qbdsCommon.addRange(fieldNum(DimensionFinancialTag, FinancialTagCategory)).value(queryValue(_dimensionAttribute.financialTagCategory()));
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTotalMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates main account balances, totals, and differences for the inventory value report.
    /// </summary>
    /// <param name="_accountCategory">
    ///    The financial position for which to generate data.
    /// </param>
    /// <param name="_totalLedgerDimension">
    ///    The total main account that corresponds to the financial position.
    /// </param>
    /// <param name="_amount">
    ///    The subledger balance that corresponds to the financial position.
    /// </param>
    protected void buildTotalMainAccount(
        InventValueReportLedgerAccountCategory _accountCategory,
        RefRecId _totalLedgerDimension,
        AmountMST _amount)
    {
        AmountMST                       totalAmount;
        InventValueReportTmpLedgerLine  inventValueReportTmpLedgerLine;

        if (this.parmUserConnection())
        {
            inventValueReportTmpLedgerLine.setConnection(this.parmUserConnection());
        }

        MainAccount totalMainAccount = LedgerDimensionFacade::getMainAccountFromLedgerDimension(_totalLedgerDimension);

        ListEnumerator listEnumerator = this.getLedgerIntervalBalances(totalMainAccount, _accountCategory).getEnumerator();
        while (listEnumerator.moveNext())
        {
            MainAccountNum mainAccountId   = conPeek(listEnumerator.current(), 1);
            AccountName    mainAccountName = conPeek(listEnumerator.current(), 2);
            AmountMST      amount          = conPeek(listEnumerator.current(), 3);
            String30       dimensionSet    = conPeek(listEnumerator.current(), 4);

            inventValueReportTmpLedgerLine.AccountCategory      = _accountCategory;
            inventValueReportTmpLedgerLine.MainAccountId        = mainAccountId;
            inventValueReportTmpLedgerLine.MainAccountName      = mainAccountName;
            inventValueReportTmpLedgerLine.Amount               = amount;
            inventValueReportTmpLedgerLine.LineType             = InventValueReportLedgerLineType::AccountBalance;
            inventValueReportTmpLedgerLine.Percent              = 0;
            inventValueReportTmpLedgerLine.TransactionId        = inventValueReportContract.parmTransactionId();
            inventValueReportTmpLedgerLine.DimensionSet         = dimensionSet;
            inventValueReportTmpLedgerLine.insert();

            // Don't add the amounts from the total account as they are already added in the dimension totals
            if (mainAccountId != totalMainAccount.MainAccountId)
            {
                totalAmount += inventValueReportTmpLedgerLine.Amount;
            }
        }

        if (!this.isExportFormat())
        {
            // No total record is written if dimensions are printed as dimension totals already have been written to the table
            if (!inventValueReportContract.parmWithDimensionSet())
            {
                inventValueReportTmpLedgerLine.AccountCategory      = _accountCategory;
                inventValueReportTmpLedgerLine.MainAccountId        = totalMainAccount.MainAccountId;
                inventValueReportTmpLedgerLine.MainAccountName      = totalMainAccount.localizedName();
                inventValueReportTmpLedgerLine.Amount               = totalAmount;
                inventValueReportTmpLedgerLine.LineType             = InventValueReportLedgerLineType::TotalBalance;
                inventValueReportTmpLedgerLine.Percent              = 0;
                inventValueReportTmpLedgerLine.TransactionId        = inventValueReportContract.parmTransactionId();
                inventValueReportTmpLedgerLine.insert();
            }

            inventValueReportTmpLedgerLine.AccountCategory      = _accountCategory;
            inventValueReportTmpLedgerLine.MainAccountId        = '';
            inventValueReportTmpLedgerLine.MainAccountName      = '';
            inventValueReportTmpLedgerLine.Amount               = _amount - totalAmount;
            inventValueReportTmpLedgerLine.LineType             = InventValueReportLedgerLineType::Discrepancy;
            if (_amount != 0.00)
            {
                inventValueReportTmpLedgerLine.Percent          = inventValueReportTmpLedgerLine.Amount / _amount * 100;
            }
            inventValueReportTmpLedgerLine.TransactionId        = inventValueReportContract.parmTransactionId();
            inventValueReportTmpLedgerLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionSetValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a printable value for the given dimension set.
    /// </summary>
    /// <param name="_dimensionSetList">
    ///    A container that contains a list of dimensions to print.
    /// </param>
    /// <param name="_mainAccountId">
    ///    The main account to be printed.
    /// </param>
    /// <param name="_dimensionValue">
    ///    The dimension value to be printed.
    /// </param>
    /// <returns>
    ///    A printable string value for the given dimension set.
    /// </returns>
    protected String30 getDimensionSetValue(
        container       _dimensionSetList,
        MainAccountNum  _mainAccountId,
        DimensionValue  _dimensionValue)
    {
        container dimensionSet;

        // The dimension set must be ordered in the same order as the dimension set list
        // We know that the dimensionSetlist only has two dimensions and that one of them is the main account (from the report spec)
        if (conPeek(_dimensionSetList, 1) == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount))
        {
            dimensionSet = [_mainAccountId, _dimensionValue];
        }
        else
        {
            dimensionSet = [_dimensionValue, _mainAccountId];
        }

        return DimensionHierarchyHelper::focusValue2Str(_dimensionSetList, _mainAccountId, dimensionSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerIntervalBalances</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list that has ledger balances for all the accounts that belong to the given total main
    ///    account.
    /// </summary>
    /// <param name="_totalMainAccount">
    ///    The total main account that holds all the single accounts.
    /// </param>
    /// <param name ="_accountCategory">
    ///  The ledger account account category; optional
    /// </param>
    /// <returns>
    ///    A list that has ledger balances for accounts.
    /// </returns>
    /// <remarks>
    ///    Each list element is a container that holds the number, name, balance, and dimension set for the
    ///    account.
    /// </remarks>
    protected List getLedgerIntervalBalances(MainAccount _totalMainAccount, InventValueReportLedgerAccountCategory _accountCategory = InventValueReportLedgerAccountCategory::Inventory)
    {
        List list;
        MainAccount mainAccount;
        DimensionAttribute mainDimensionAttribute;
        DimensionAttributeValueTotallingCriteria dimAttrValueTotCrit;
        int sign;
        FromDate fromDate;
        DimensionHierarchyLevel             dimensionHierarchyLevel;
        DimensionAttribute                  dimensionAttribute = null;
        QueryRun                            queryRun;
        LedgerBalanceDimAttrValueAmounts    ledgerBalance;
        boolean                             includeBlankDimension = false;
        container                           dimensionSetList;
        Map                                 dimensionTotals = new Map(Types::String, Types::Real);

        // Calculate the balance and insert to the list of balances
        // Also calculate dimension balances
        void calculateAndInsertBalance(DimensionValue _dimensionValue)
        {
            AmountMST   balance;

            // Setup the balance calculation
            ledgerBalance.clearDimAttrValues();
            ledgerBalance.addDimAttrValue(mainDimensionAttribute.RecId, mainAccount.MainAccountId);

            if (dimensionAttribute)
            {
                ledgerBalance.addDimAttrValue(dimensionAttribute.RecId, _dimensionValue);
            }
            ledgerBalance.calculateBalance(null);

            balance = ledgerBalance.getAccountingCurrencyBalance() * sign;
            list.addEnd([mainAccount.MainAccountId,
                         mainAccount.localizedName(),
                         balance,
                         this.getDimensionSetValue(dimensionSetList, mainAccount.MainAccountId, _dimensionValue)]);

            // If dimensions are printed, a total per dimension must be printed as well.
            // These totals are calculated here and added at the end.
            if (dimensionAttribute)
            {
                if (dimensionTotals.exists(_dimensionValue))
                {
                    balance += dimensionTotals.lookup(_dimensionValue);
                    dimensionTotals.remove(_dimensionValue);
                }
                dimensionTotals.insert(_dimensionValue, balance);
            }
        }

        // Insert a balance per value in the provided dimension or for the main account only
        void getBalances()
        {
            Common  common;

            if (dimensionAttribute)
            {
                // Iterate over all the dimension values
                queryRun.reset();
                while (queryRun.next())
                {
                    common = queryRun.get(dimensionAttribute.BackingEntityType);
                    calculateAndInsertBalance(common.(dimensionAttribute.ValueAttribute));
                }

                // If no criteria has been given for the dimension then include blank dimension
                if (includeBlankDimension)
                {
                    calculateAndInsertBalance('');
                }
            }
            else
            {
                // Calculate the balance for all dimensions
                calculateAndInsertBalance('');
            }
        }

        if (inventValueReport.DetailLevel == TotalTrans::Trans && !inventValueReport.IncludeBeginningBalance)
        {
            fromDate = this.getActualFromDate();
        }
        else if (inventValueReport.DetailLevel == TotalTrans::Total &&
                 _accountCategory == InventValueReportLedgerAccountCategory::COGS && // For InventValueReportLedgerAccountCategory::COGS, use From date and To date if provided.
                 inventValueReportContract.parmFromDate() != dateNull())
        {
            fromDate = inventValueReportContract.parmFromDate();
        }
        else
        {
            fromDate = dateNull();
        }

        mainDimensionAttribute = DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount));

        // If dimension set is selected, find the dimension attribute
        if (inventValueReport.DimensionFocus)
        {
            while select DimensionAttribute from dimensionHierarchyLevel
                where dimensionHierarchyLevel.DimensionHierarchy == inventValueReport.DimensionFocus
            {
                if (dimensionHierarchyLevel.DimensionAttribute != mainDimensionAttribute.RecId)
                {
                    // Initialization of misc. values for getting balances per dimension set.
                    dimensionAttribute = DimensionAttribute::find(dimensionHierarchyLevel.DimensionAttribute);
                    QueryBuildRange queryBuildRange = this.parmInventValueReportContract().parmQuery().dataSourceTable(tableNum(DimensionAttributeLevelValue)).rangeField(fieldNum(DimensionAttributeLevelValue, DisplayValue));
                    Query query = this.buildDimensionAttributeQuery(queryBuildRange, dimensionAttribute);
                    includeBlankDimension = queryBuildRange.value() == '';
                    queryRun = new QueryRun(query);
                    dimensionSetList = DimensionHierarchyHelper::generateFocusTemplate(DimensionHierarchy::find(inventValueReport.DimensionFocus));
                    break;
                }
            }
        }

        DimensionAttributeValue dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndValue(mainDimensionAttribute, _totalMainAccount.MainAccountId);

        list = new List(Types::Container);

        // Initialize the balance object for later calculations.
        ledgerBalance = LedgerBalanceDimAttrValueAmounts::construct();
        ledgerBalance.parmIncludeRegularPeriod(true);
        ledgerBalance.parmAccountingDateRange(fromDate, this.getActualToDate());
        ledgerBalance.parmPostingLayerList(con2List([CurrentOperationsTax::Current]));
        ledgerBalance.parmIncludeRegularPeriod(true);
        ledgerBalance.parmIncludeClosingPeriod(true);

        SysDaSearchObject searchObject = InvertValueReportPopulateLedgerInvertBalanceForMainAccountQuery::createSearchObject(mainAccount, dimAttrValueTotCrit, dimensionAttributeValue.RecId);

        SysDaSearchStatement searchStatement = new SysDaSearchStatement();

        while (searchStatement.next(searchObject))
        {
            if (dimAttrValueTotCrit.InvertTotalSign)
            {
                sign = -1;
            }
            else
            {
                sign = 1;
            }

            getBalances();
        }

        // Add dimension totals - if any
        if (dimensionTotals.elements() > 0)
        {
            MapEnumerator mapEnumerator = dimensionTotals.getEnumerator();
            while (mapEnumerator.moveNext())
            {
                list.addEnd([_totalMainAccount.MainAccountId,
                             "@SYS809",
                             mapEnumerator.currentValue(),
                             this.getDimensionSetValue(dimensionSetList, _totalMainAccount.MainAccountId, mapEnumerator.currentKey())]);
            }
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        InventValueReportTmpLine    completeInventValueReportTmpLine;
        CostAmount                  inventoryPhysicalAmount;
        CostAmount                  wipPhysicalAmount;
        CostAmount                  deferredCOGSPhysicalAmount;

        inventValueReport = InventValueReport::findByReportId(inventValueReportContract.parmReportId());

        if (inventValueReport.IncludeNotPostedValue)
        {
            select sum(InventoryFinancialAmount),
               sum(InventoryPhysicalPostedAmount),
               sum(InventoryPhysicalNonPostedAmount),
               sum(wipPhysicalPostedAmount),
               sum(wipPhysicalNonPostedAmount),
               sum(DeferredCOGSPhysicalPostedAmount),
               sum(DeferredCOGSPhysicalNonPostedAmount),
               sum(cogsFinancialAmount)
            from completeInventValueReportTmpLine
                where completeInventValueReportTmpLine.TransactionId == inventValueReportContract.parmTransactionId();

            inventoryPhysicalAmount = completeInventValueReportTmpLine.InventoryPhysicalPostedAmount + completeInventValueReportTmpLine.InventoryPhysicalNonPostedAmount;
            wipPhysicalAmount = completeInventValueReportTmpLine.wipPhysicalPostedAmount + completeInventValueReportTmpLine.wipPhysicalNonPostedAmount;
            deferredCOGSPhysicalAmount = completeInventValueReportTmpLine.DeferredCOGSPhysicalPostedAmount + completeInventValueReportTmpLine.DeferredCOGSPhysicalNonPostedAmount;
        }
        else
        {
            select sum(InventoryFinancialAmount),
               sum(InventoryPhysicalPostedAmount),
               sum(wipPhysicalPostedAmount),
               sum(DeferredCOGSPhysicalPostedAmount),
               sum(cogsFinancialAmount)
            from completeInventValueReportTmpLine
                where completeInventValueReportTmpLine.TransactionId == inventValueReportContract.parmTransactionId();

            inventoryPhysicalAmount = completeInventValueReportTmpLine.InventoryPhysicalPostedAmount;
            wipPhysicalAmount = completeInventValueReportTmpLine.wipPhysicalPostedAmount;
            deferredCOGSPhysicalAmount = completeInventValueReportTmpLine.DeferredCOGSPhysicalPostedAmount;
        }

        if (inventValueReport.InventoryLedgerDimension != 0)
        {
            this.buildTotalMainAccount(
                InventValueReportLedgerAccountCategory::Inventory,
                inventValueReport.InventoryLedgerDimension,
                completeInventValueReportTmpLine.InventoryFinancialAmount + inventoryPhysicalAmount);
        }
        if (inventValueReport.wipLedgerDimension != 0)
        {
            this.buildTotalMainAccount(
                InventValueReportLedgerAccountCategory::WIP,
                inventValueReport.wipLedgerDimension,
                wipPhysicalAmount);
        }
        if (inventValueReport.DeferredCOGSLedgerDimension != 0)
        {
            this.buildTotalMainAccount(
                InventValueReportLedgerAccountCategory::DeferredCOGS,
                inventValueReport.DeferredCOGSLedgerDimension,
                deferredCOGSPhysicalAmount);
        }
        if (inventValueReport.cogsLedgerDimension != 0)
        {
            this.buildTotalMainAccount(
                InventValueReportLedgerAccountCategory::COGS,
                inventValueReport.cogsLedgerDimension,
                completeInventValueReportTmpLine.cogsFinancialAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExportFormat</Name>
				<Source><![CDATA[
    private boolean isExportFormat()
    {
        return this.parmInventValueReportContract().parmReportName() == ssrsReportStr(InventValue, Excel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventValueReportPopulateLedger construct()
    {
        return new InventValueReportPopulateLedger();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>