<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayCalculate_BusinessTrip</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rPayCalculate_BusinessTrip extends RPayCalculate
{
    RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable;
    RPayAverageEarnValue           rPayAverageEarnValue;
    RPayDayHour                    payDayHour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc_BusinessTripCurrent</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calc_BusinessTripCurrent()
    {
        RPayAmount           amount;
        ;
        amount = rPayAverageEarnValue.Amount;

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCommon</Name>
				<Source><![CDATA[
    protected void calcCommon(RPaySequence _paySequence  = 0,
                              NoYes        _errorMessage = NoYes::No)
    {
        RHRMBusinessTripType    hrmBusinessTripType;
        ;
        rPayAverageEarnEmplPeriodTable = sourceTable;

        if (needCheckModuleCalculate && ! this.canModuleCalculate())
        {
            throw info("@RUP387");
        }

        if (emplTable.checkEmplBeforeCalc(payPeriod, _errorMessage))
        {
            this.initTransDate(emplTable.EmployeeId);

            while select paySeqTable
                where paySeqTable.PayModuleCode == payModuleTable.PayModuleCode
                   && (paySeqTable.Scanning     == _paySequence
                    || (_paySequence ? false : true))
            exists join hrmBusinessTripType
                where hrmBusinessTripType.BusinessTripTypeId == rPayAverageEarnEmplPeriodTable.BusinessTripTypeId
                   && hrmBusinessTripType.PaySequence        == paySeqTable.Scanning
            {
                while select rPayAverageEarnValue
                    where rPayAverageEarnValue.AverageEarnEmplPeriodRecid == rPayAverageEarnEmplPeriodTable.RecId
                       && ( rPayAverageEarnValue.PayPeriod                == payPeriod
                         || ( rPayAverageEarnValue.PayPeriod              <= payPeriod
                           && rPayAverageEarnEmplPeriodTable.PayPeriod    == payPeriod) )
                {
                    sourceTable = rPayAverageEarnValue;
                    this.calcSequence();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcEmpl</Name>
				<Source><![CDATA[
    public void calcEmpl(RHRMEmplId   _emplId,
                         RPaySequence _paySequence = 0)
    {
        QueryBuildDataSource            qbd;
        QueryBuildRange                 qbr;
        RPayAverageEarnEmplPeriodTable  rPayAverageEarnEmplPeriodTableLocal;
        int                             i;
        int                             dsCount = queryRun.query().dataSourceCount();
        ;
        setPrefix(payModuleTable.PayModuleName);
        needCheckModuleCalculate = false;

        this.payPeriod(RPayParameters::payPeriod(_emplId));
        payPeriodVirtual = this.payPeriod();

        if (payModuleTable.NeedDeleteBeforeCalc)
        {
            ttsbegin;

            delete_from payTrans
                where payTrans.PayPeriod     == payPeriod
                   && payTrans.PayModuleCode == payModuleTable.PayModuleCode
                   && payTrans.Emplid        == _emplId
                   && payTrans.SourceTableId
                   && payTrans.SourceRecId
                   && payTrans.PayPeriod == payTrans.CorrectedPeriod;

            ttscommit;
        }

        for (i = 1; i <= dsCount ; i ++)
        {
            queryRun.query().dataSourceNo(i).clearRanges();
        }

        qbd = queryRun.query().dataSourceTable(tableNum(RPayAverageEarnEmplPeriodTable));
        qbr = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable, PayPeriod));
        qbr.value(SysQuery::range(dateNull() + 1, payPeriod));

        qbr = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable, EmplId));
        qbr.value(queryValue(_emplId));

        qbr = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable, Included));
        qbr.value(queryValue(NoYes::Yes));

        qbr = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable, AverageEarnCodeType));
        qbr.value(queryValue(RPayAverageEarnCodeType::BusinessTrip));

        qbd = qbd.addDataSource(tableNum(RPayAverageEarnValue));
        qbd.joinMode(JoinMode::ExistsJoin);
        qbd.relations(true);

        qbr = qbd.addRange(fieldNum(RPayAverageEarnValue, PayPeriod));
        qbr.value(queryValue(payPeriod));

        while (queryRun.next())
        {
            rPayAverageEarnEmplPeriodTableLocal = queryRun.get(tableNum(RPayAverageEarnEmplPeriodTable));
            if (rPayAverageEarnEmplPeriodTableLocal.EmplId)
            {
                this.setSourceTable(rPayAverageEarnEmplPeriodTableLocal);
                this.calcCommon(_paySequence, NoYes::Yes);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQuery</Name>
				<Source><![CDATA[
    public void calcQuery(RPaySequence _paySequence=0)
    {
        QueryBuildDataSource qbd;
        QueryBuildRange      qbrPeriod,
                             qbrSost,
                             qbrCodeType,
                             qbrCorrectedPeriod;
        int                  current;
        int                  dsCount = queryRun.query().dataSourceCount();
        ;
        qbd = queryRun.query().dataSourceTable(tableNum(RPayAverageEarnEmplPeriodTable));
        if (queryRun.interactive())
        {
             qbrPeriod   = qbd.rangeField(fieldNum(RPayAverageEarnEmplPeriodTable, PayPeriod));
             qbrPeriod.status(RangeStatus::Locked);
             qbrSost     = qbd.rangeField(fieldNum(RPayAverageEarnEmplPeriodTable, Included));
             qbrSost.status(RangeStatus::Locked);
             qbrCodeType = qbd.rangeField(fieldNum(RPayAverageEarnEmplPeriodTable, AverageEarnCodeType));
             qbrCodeType.status(RangeStatus::Hidden);
        }
        else
        {
            for (current = 1; current <= dsCount ; current ++)
            {
                queryRun.query().dataSourceNo(current).clearRanges();
            }
            current = 0;
            qbrPeriod   = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable, PayPeriod));
            qbrSost     = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable, Included));
            qbrCodeType = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable, AverageEarnCodeType));
        }

        qbrCorrectedPeriod = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable,CorrectedPeriod));
        qbrCorrectedPeriod.status(RangeStatus::Hidden);
        qbrCorrectedPeriod.value(strFmt("(%1 == %2)", fieldId2name(tableNum(RPayAverageEarnEmplPeriodTable), fieldNum(RPayAverageEarnEmplPeriodTable,CorrectedPeriod)),
                                                      fieldId2name(tableNum(RPayAverageEarnEmplPeriodTable), fieldNum(RPayAverageEarnEmplPeriodTable,PayPeriod))));

        qbrPeriod.value(SysQuery::range(dateNull() + 1, payPeriod));
        qbrSost.value(queryValue(NoYes::Yes));
        qbrCodeType.value(queryValue(RPayAverageEarnCodeType::BusinessTrip));

        super(_paySequence);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPayTransValue</Name>
				<Source><![CDATA[
    protected void initPayTransValue()
    {
        ;
        transDate = rPayAverageEarnEmplPeriodTable.StartDate;

        super();

        if (rPayAverageEarnEmplPeriodTable.rPayDayHourCalc == RPayDayHourCalc::Day)
            payTrans.QtyDay  = rPayAverageEarnValue.PayDayHour;
        else
            payTrans.QtyHour = rPayAverageEarnValue.PayDayHour;

        payTrans.SourceDate = rPayAverageEarnValue.PayPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmplTable</Name>
				<Source><![CDATA[
    protected void setEmplTable(Common _common)
    {
        ;
        emplTable = RHRMEmplTable::find(_common.(fieldNum(RPayAverageEarnEmplPeriodTable, EmplId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDateStart</Name>
				<Source><![CDATA[
    protected TransDate transDateStart(TransDate _transDate = transDate)
    {
        TransDate ret;
        ;
        transDate = rPayAverageEarnEmplPeriodTable.StartDate;

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>