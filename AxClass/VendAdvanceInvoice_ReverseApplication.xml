<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendAdvanceInvoice_ReverseApplication</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendAdvanceInvoice_ReverseApplication</c> class is the derived class of the
/// <c>VendAdvanceInvoice</c> class that is used to reverse the application of a paid advance against
/// purchase invoices.
/// </summary>
public class VendAdvanceInvoice_ReverseApplication extends VendAdvanceInvoice
{
    SpecTransManager specTransManager;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    protected void createJournal(VendAdvanceApplicationTrans _vendAdvanceApplicationTrans)
    {
        formLetterJournalCreate = PurchAdvanceApplicationJournalCreate::construct(_vendAdvanceApplicationTrans);

        formLetterJournalCreate.parmParmTable(invoiceVendInvoiceInfoTable);
        formLetterJournalCreate.parmIsReverseAdvanceApplication(true);
        formLetterJournalCreate.parmIsInvoicePosted(isInvoicePosted);
        formLetterJournalCreate.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultAdvancedApplicationTransQueryParam</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>VendAdvanceApplicationTransQueryParameters</c> class with
    /// values defaulted.
    /// </summary>
    /// <returns>An instance of <c>VendAdvanceApplicationTransQueryParameters</c> class.</returns>
    [Hookable(false)]
    protected VendAdvanceApplicationTransQueryParameters getDefaultAdvancedApplicationTransQueryParam()
    {
        VendAdvanceApplicationTransQueryParameters queryParams = super();
        queryParams.isPosted = true;
        queryParams.isReversal = true;

        return queryParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        return callerVendInvoiceJour.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>VendSettlement</c> record for the application line to reversed.
    /// </summary>
    /// <param name="_tmpVendStandardInvoice">
    /// The <c>TmpVendStandardInvoice</c> record that contains the applied invoice.
    /// </param>
    /// <param name="_tmpVendAdvanceInvoice">
    /// The <c>TmpVendAdvanceInvoice</c> record that contains the applied paid advance to invoice.
    /// </param>
    /// <returns>
    /// The <c>VendSettlement</c> record for the application line to reversed.
    /// </returns>
    /// <remarks>
    /// This method is used in reverse application of advance invoice.
    /// </remarks>
    public VendSettlement getVendSettlement(TmpVendStandardInvoice _tmpVendStandardInvoice, TmpVendAdvanceInvoice _tmpVendAdvanceInvoice)
    {
        Voucher offsetTransVoucher = this.getVoucher(_tmpVendStandardInvoice.LedgerVoucher, _tmpVendStandardInvoice.InvoiceDate);

        VendSettlement vendSettlement;
        VendTrans vendTrans;
        VendInvoiceTrans vendInvoiceTrans;

        //Retrieves prepayment settlement record for reversal which was previously applied
        select vendSettlement
            where vendSettlement.OffsetTransVoucher == offsetTransVoucher
                && vendSettlement.CanBeReversed == NoYes::Yes
            exists join vendTrans
            where vendTrans.dataAreaId == vendSettlement.TransCompany
                && vendTrans.RecId == vendSettlement.TransRecId
                && vendTrans.AccountNum == vendSettlement.AccountNum
                && vendTrans.Voucher == _tmpVendAdvanceInvoice.LedgerVoucher
            exists join vendInvoiceTrans
            where vendInvoiceTrans.RecId == _tmpVendAdvanceInvoice.InvoiceRecId;

        return vendSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>VendTrans</c> record of an advance application to reverse.
    /// </summary>
    /// <param name="_tmpVendStandardInvoice">
    /// The <c>TmpVendStandardInvoice</c> record that contains the applied invoice.
    /// </param>
    /// <param name="_tmpVendAdvanceInvoice">
    /// The <c>TmpVendAdvanceInvoice</c> record that contains the applied paid advance to invoice.
    /// </param>
    /// <returns>
    /// The <c>VendTrans</c> record of an advance application to reverse.
    /// </returns>
    public VendTrans getVendTrans(TmpVendStandardInvoice _tmpVendStandardInvoice, TmpVendAdvanceInvoice _tmpVendAdvanceInvoice)
    {
        Voucher offsetTransVoucher = this.getVoucher(_tmpVendStandardInvoice.LedgerVoucher, _tmpVendStandardInvoice.InvoiceDate);

        VendSettlement vendSettlement;
        VendTrans vendTransLocal;
        VendInvoiceTrans vendInvoiceTrans;

        //retrieves vendor transaction for advance application which need to be reversed
        select vendTransLocal
            where vendTransLocal.Voucher == _tmpVendAdvanceInvoice.LedgerVoucher//voucher of applied advance
            exists join vendSettlement
            where vendSettlement.TransCompany == vendTransLocal.dataAreaId
                && vendSettlement.TransRecId == vendTransLocal.RecId
                && vendSettlement.AccountNum == vendTransLocal.AccountNum
                && vendSettlement.OffsetTransVoucher == offsetTransVoucher //voucher of applied invoice
            exists join vendInvoiceTrans
            where vendInvoiceTrans.RecId == _tmpVendAdvanceInvoice.InvoiceRecId;

        return vendTransLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes field values in a new <c>VendAdvanceInvoice_ReverseApplication</c> record.
    /// </summary>
    protected void initValues()
    {
        callerVendTable = callerTable;
        isAdvanceApplication = false;
        invoiceAccount = callerVendTable.AccountNum;

        specTransManager = SpecTransManager::newRefTableId(callerTable, tablenum(VendSettlement), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecTransManager</Name>
				<Source><![CDATA[
    public SpecTransManager parmSpecTransManager(SpecTransManager _specTransManager = specTransManager)
    {
        specTransManager = _specTransManager;

        return specTransManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateAdvances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets advance records for the <c>VendAdvance</c> form.
    /// </summary>
    /// <param name="_tmpVendStandardInvoice">
    /// The <c>TmpVendStandardInvoice</c> table buffer.
    /// </param>
    /// <returns>
    /// The <c>TmpVendAdvanceInvoice</c> table buffer that contains advance records.
    /// </returns>
    public TmpVendAdvanceInvoice populateAdvances(TmpVendStandardInvoice _tmpVendStandardInvoice)
    {
        VendInvoiceTrans vendInvoiceTrans, vendInvoiceTransApplication;
        VendInvoiceJour vendInvoiceJour;
        TmpVendAdvanceInvoice tmpVendAdvanceInvoice;
        VendTrans vendTrans;
        VendSettlement vendSettlement;
        AmountCur appliedAmount, advanceAmount;
        Voucher ledgerVoucher;

        super(_tmpVendStandardInvoice);

        // Loop through all advance applications for the standard invoice
        while select RecId, PurchId, AdvanceApplicationId, InvoiceDate, CurrencyCode, LineAmount, InternalInvoiceId, InvoiceId from vendInvoiceTrans
            where vendInvoiceTrans.PurchID == _tmpVendStandardInvoice.PurchId
            && vendInvoiceTrans.InvoiceId == _tmpVendStandardInvoice.InvoiceNum
            && vendInvoiceTrans.LineType == PurchInvoiceLineType::AdvanceApplication
        {
            vendInvoiceJour = VendInvoiceJour::findRecId(_tmpVendStandardInvoice.InvoiceRecId);

            Voucher lastSettleVoucher = this.getVoucher(vendInvoiceJour.LedgerVoucher, vendInvoiceJour.InvoiceDate);

            // See if the VendTrans for this advance application was last settled by the current standard invoice
            select firstonly AmountCur, SettleAmountCur from vendTrans
                where vendTrans.Voucher == vendInvoiceTrans.InternalInvoiceId
                && vendTrans.AccountNum == _tmpVendStandardInvoice.InvoiceAccount
                && vendTrans.TransDate == vendInvoiceTrans.InvoiceDate
                && vendTrans.LastSettleVoucher == lastSettleVoucher
                && vendTrans.TransType == LedgerTransType::PurchAdvanceApplication
            exists join vendSettlement
                where vendSettlement.TransCompany == vendTrans.dataAreaId
                && vendSettlement.TransRecId == vendTrans.RecId
                && vendSettlement.AccountNum == vendTrans.AccountNum;
    
            if (vendTrans)
            {
                vendInvoiceTransApplication = vendInvoiceTrans.data();
                appliedAmount = vendTrans.SettleAmountCur;
                advanceAmount = vendInvoiceTransApplication.LineAmount;
                ledgerVoucher = vendInvoiceTransApplication.InternalInvoiceId;
            }
            else
            {
                // If the application line doesn't have a vendTrans record, then it is a cash discount application
                select firstonly RecId from vendTrans
                    where vendTrans.Voucher == vendInvoiceTrans.InternalInvoiceId
                        && vendTrans.AccountNum == _tmpVendStandardInvoice.InvoiceAccount
                        && vendTrans.TransDate == VendInvoiceTrans.InvoiceDate;
    
                if (!vendTrans)
                {
                    // Find the cash discount's original advance application
                    select firstonly RecId, PurchId, AdvanceApplicationId, InvoiceDate, CurrencyCode, LineAmount, InternalInvoiceId from vendInvoiceTransApplication
                        where vendInvoiceTransApplication.LineType == PurchInvoiceLineType::AdvanceApplication
                           && vendInvoiceTransApplication.AdvanceApplicationId == vendInvoiceTrans.AdvanceApplicationId
                           && vendInvoiceTransApplication.RecId != vendInvoiceTrans.RecId
                    join AmountCur, SettleAmountCur from vendTrans
                        where vendTrans.AccountNum == _tmpVendStandardInvoice.InvoiceAccount
                           && vendTrans.LastSettleVoucher == vendInvoiceTransApplication.InternalInvoiceId
                    exists join vendInvoiceJour
                        where vendInvoiceJour.LedgerVoucher == vendTrans.Voucher
                           && vendInvoiceJour.InvoiceId == vendInvoiceTrans.InvoiceId
                           && vendInvoiceJour.InvoiceDate == vendTrans.TransDate
                           && vendInvoiceJour.InvoiceAccount == vendTrans.AccountNum;
    
                    appliedAmount = vendInvoiceTrans.LineAmount;
                    advanceAmount = vendInvoiceTrans.LineAmount;
                    ledgerVoucher = vendInvoiceTransApplication.InternalInvoiceId;
                }
            }
    
            if (vendInvoiceTransApplication)
            {
                VendInvoiceJour vendInvoiceJourLocal = VendInvoiceJour::findRecId(vendInvoiceTransApplication.AdvanceApplicationId);
                tmpVendAdvanceInvoice.clear();
                tmpVendAdvanceInvoice.PurchId = vendInvoiceJourLocal.PurchID;
                tmpVendAdvanceInvoice.InvoiceNum = vendInvoiceJourLocal.InvoiceId;
                tmpVendAdvanceInvoice.InvoiceDate = vendInvoiceTransApplication.InvoiceDate;
                tmpVendAdvanceInvoice.CurrencyCode = vendInvoiceTransApplication.CurrencyCode;
                tmpVendAdvanceInvoice.InvoiceAccount = invoiceAccount;
                tmpVendAdvanceInvoice.AdvanceAmount = advanceAmount;
                tmpVendAdvanceInvoice.AppliedAmount = appliedAmount;
                tmpVendAdvanceInvoice.LedgerVoucher = ledgerVoucher;
                tmpVendAdvanceInvoice.InvoiceRecId = vendInvoiceTransApplication.RecId;
                tmpVendAdvanceInvoice.IsReversal = NoYes::Yes;
                tmpVendAdvanceInvoice.insert();
    
                vendInvoiceTransApplication.clear();
                appliedAmount = 0;
                advanceAmount = 0;
                ledgerVoucher = '';
            }
        }
    
        return tmpVendAdvanceInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInvoices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets invoices to populate the <c>VendAdvance</c> form.
    /// </summary>
    /// <returns>
    /// The <c>TmpVendStandardInvoice</c> table buffer that contains invoice records.
    /// </returns>
    public TmpVendStandardInvoice populateInvoices()
    {
        VendInvoiceJour localVendInvoiceJour;
        TmpVendStandardInvoice tmpVendStandardInvoice;
        VendInvoiceTrans localVendInvoiceTrans;

        TransDate reversalSettlementDate = this.getDateInOpenPeriod(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        while select RecId, PurchId, InvoiceId, CurrencyCode, InvoiceDate, InvoiceAccount, InvoiceAmount, LedgerVoucher from localVendInvoiceJour
            where localVendInvoiceJour.InvoiceType == PurchInvoiceType::Standard
                && localVendInvoiceJour.InvoiceAccount == callerVendTable.AccountNum
                && localVendInvoiceJour.PurchaseType != PurchaseType::Journal
            exists join localVendInvoiceTrans
            where localVendInvoiceTrans.LineType == PurchInvoiceLineType::AdvanceApplication
                && localVendInvoiceTrans.InvoiceId == localVendInvoiceJour.InvoiceId
                && localVendInvoiceTrans.PurchId == localVendInvoiceJour.PurchId
                && localVendInvoiceTrans.numberSequenceGroup == localVendInvoiceJour.numberSequenceGroup
        {
            tmpVendStandardInvoice.clear();
            tmpVendStandardInvoice.PurchId = localVendInvoiceJour.PurchId;
            tmpVendStandardInvoice.InvoiceNum = localVendInvoiceJour.InvoiceId;
            tmpVendStandardInvoice.CurrencyCode = localVendInvoiceJour.CurrencyCode;
            tmpVendStandardInvoice.InvoiceDate = localVendInvoiceJour.InvoiceDate;
            tmpVendStandardInvoice.InvoiceAccount = localVendInvoiceJour.InvoiceAccount;
            tmpVendStandardInvoice.InvoiceAmount = localVendInvoiceJour.InvoiceAmount;
            tmpVendStandardInvoice.LedgerVoucher = localVendInvoiceJour.LedgerVoucher;
            tmpVendStandardInvoice.InvoiceRecId = localVendInvoiceJour.RecId;
            tmpVendStandardInvoice.SettlementPostingDate = reversalSettlementDate;
            tmpVendStandardInvoice.IsPosted = NoYes::Yes;
            tmpVendStandardInvoice.insert();
        }

        return tmpVendStandardInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournal</Name>
				<Source><![CDATA[
    public FormletterJournalPost postJournal()
    {
        PurchAdvanceApplicationJournalPost formletterJournalPost;

        formletterJournalPost = PurchAdvanceApplicationJournalPost::construct(formLetterJournalCreate.getApplicationLine());
        formletterJournalPost.parmJournalTable(formLetterJournalCreate.getJournal());
        formletterJournalPost.parmIsReverseAdvanceApplication(formLetterJournalCreate.parmIsReverseAdvanceApplication());
        formletterJournalPost.parmParmTable(this.parmVendInvoiceInfoTable());
        formletterJournalPost.run();

        return formletterJournalPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAdvances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates advance application reversal lines.
    /// </summary>
    public void processAdvances()
    {
        if (isInvoicePosted)
        {
            ttsbegin;

            if (specTransManager.getSpecTransCount() > 0)
            {
                // Reverse settlements
                VendTrans::reverseTransact(callerVendTable, null, SettleDatePrinc::SelectDate, vendAdvanceApplicationTrans.SettlementPostingDate);

                // Clean up SpecTrans records for reversal
                specTransManager.deleteAll();
            }

            this.processPostedAdvanceLines();

            ttscommit;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAdvanceApplicationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the advance application amount against the respective <c>VendAdvanceApplicationTrans</c>
    /// record.
    /// </summary>
    /// <param name="_standardInvoice">
    /// The record ID of an invoice on which the advance was applied.
    /// </param>
    /// <param name="_appliedAdvanceInvoice">
    /// The record ID of the advance that was applied.
    /// </param>
    /// <param name="_appliedAmount">
    /// The applied advance amount to be updated.
    /// </param>
    public void updateAdvanceApplicationAmount(RecId _standardInvoice, RecId _appliedAdvanceInvoice, AmountCur _appliedAmount)
    {
        VendAdvanceApplicationTransQueryParameters queryParam = this.getDefaultAdvancedApplicationTransQueryParam();
        queryParam.advancedInvoiceRecId = _appliedAdvanceInvoice;
        queryParam.standardInvoiceRecId = _standardInvoice;

        ttsBegin;
        VendAdvanceApplicationTrans::updateAdvanceAppliedAmountForPostedOrReversal(_appliedAmount, queryParam);
        VendAdvanceApplicationTrans::updateAdvanceAppliedAmount(_appliedAdvanceInvoice, _standardInvoice, _appliedAmount);

        VendInvoiceInfoLine vendInvoiceInfoLine = VendInvoiceInfoLine::findRecId(vendAdvanceApplicationTrans.AdvanceApplicationId, true);

        if (vendInvoiceInfoLine)
        {
            vendInvoiceInfoLine.LineAmount = _appliedAmount;
            vendInvoiceInfoLine.ReceiveNow = 1; //to avoid discount in initialization of discount in missing distributions
            vendInvoiceInfoLine.update();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUnposted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>VendInvoiceInfoLine</c> table for advance application and reversal lines to be
    /// posted.
    /// </summary>
    /// <param name="_invoiceId">
    /// The record ID of the invoice on which the advance is to be applied.
    /// </param>
    /// <param name="_appliedAdvanceInvoiceId">
    /// The record ID of the advance to be applied.
    /// </param>
    /// <param name="_set">
    /// A Boolean value that indicates whether the transaction is marked.
    /// </param>
    protected void updateUnposted(RecId _invoiceId, RecId _appliedAdvanceInvoiceId, boolean _set)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine, localVendInvoiceInfoLine;
        VendInvoiceJour localVendInvoiceJour;
        VendInvoiceTrans applicationVendInvoiceTrans;
        VendInvoiceInfoTable vendInvoiceInfoTable;
        PurchCategory procurementCategory;

        if (isInvoicePosted)
        {
            // initialization for posted advances for application.
            select firstonly ReceiveNow, OrigPurchId from localVendInvoiceInfoLine
            join ParmId, TableRefId, CurrencyCode from vendInvoiceInfoTable
            exists join localVendInvoiceJour
                where vendInvoiceInfoTable.ParmId == localVendInvoiceInfoLine.ParmId
                && vendInvoiceInfoTable.TableRefId == localVendInvoiceInfoLine.TableRefId
                && localVendInvoiceJour.SourceDocumentHeader == vendInvoiceInfoTable.SourceDocumentHeader
                && localVendInvoiceJour.RecId == _invoiceId;

            // retrieves procurement category against an advance application line for reversal of an advance application against posted invoice
            select firstonly ProcurementCategory from applicationVendInvoiceTrans
                where applicationVendInvoiceTrans.LineType == PurchInvoiceLineType::AdvanceApplication
                && applicationVendInvoiceTrans.RecId == _appliedAdvanceInvoiceId;

            procurementCategory = applicationVendInvoiceTrans.ProcurementCategory;
        }
        else
        {
            // initialization for unposted advances for application.
            vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(_invoiceId);

            select firstonly ReceiveNow, OrigPurchId from localVendInvoiceInfoLine
                where localVendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                && localVendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
                && localVendInvoiceInfoLine.LineType == PurchInvoiceLineType::Advance;

            procurementCategory = localVendInvoiceInfoLine.ProcurementCategory;
        }

        // _set identifies whether the transaction is marked or unmarked, if marked the line is to be inserted; deleted otherwise.
        if (_set)
        {
            ttsbegin;
            vendInvoiceInfoLine.clear();
            vendInvoiceInfoLine.ParmId = vendInvoiceInfoTable.parmId;
            vendInvoiceInfoLine.TableRefId = vendInvoiceInfoTable.TableRefId;
            vendInvoiceInfoLine.InvoiceAccount = invoiceAccount;
            vendInvoiceInfoLine.ProcurementCategory = procurementCategory;
            vendInvoiceInfoLine.OrderAccount = invoiceAccount;
            vendInvoiceInfoLine.ReceiveNow = localVendInvoiceInfoLine.ReceiveNow;
            vendInvoiceInfoLine.currencyCode = vendInvoiceInfoTable.CurrencyCode;
            vendInvoiceInfoLine.AdvanceApplicationId = _appliedAdvanceInvoiceId;

            vendInvoiceInfoLine.LineType = PurchInvoiceLineType::ReverseAdvanceApplication;

            vendInvoiceInfoLine.defaultRow(null, null, 1.0);

            vendInvoiceInfoLine.insert(false);

            // Update VendAdvanceApplicationTrans record
            vendAdvanceApplicationTrans.AdvanceApplicationId = vendInvoiceInfoLine.RecId;
            vendAdvanceApplicationTrans.update();
            ttscommit;
        }
        else
        {
            delete_from vendInvoiceInfoLine
            where vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.parmId
                && vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
                && vendInvoiceInfoLine.AdvanceApplicationId == _appliedAdvanceInvoiceId
                && vendInvoiceInfoLine.LineType == PurchInvoiceLineType::ReverseAdvanceApplication;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAdvanceApplicationTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts advance application transaction in the <c>VendAdvanceApplicationTrans</c> table.
    /// </summary>
    /// <param name="_standardInvoiceId">
    /// The record ID of the invoice on which advance is to be applied.
    /// </param>
    /// <param name="_advanceInvoiceId">
    /// The record ID of the advance to which it is to be applied.
    /// </param>
    /// <param name="_settlementPostingDate">
    /// The settlement posting date of prepayment application; optional.
    /// </param>
    public void insertAdvanceApplicationTrans(RecId _standardInvoiceId, RecId _advanceInvoiceId, TransDate _settlementPostingDate = dateNull())
    {
        this.initAdvanceApplicationTransForPostedOrReversal(_standardInvoiceId, _advanceInvoiceId, true, true);

        super(_standardInvoiceId, _advanceInvoiceId, _settlementPostingDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    private Voucher getVoucher(Voucher _voucher, TransDate _transDate)
    {
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;

        select firstOnly FromVoucher from ledgerJournalVoucherChanged
            where ledgerJournalVoucherChanged.ToVoucher == _voucher
                && ledgerJournalVoucherChanged.ToDate == _transDate;

        return ledgerJournalVoucherChanged.FromVoucher ? ledgerJournalVoucherChanged.FromVoucher : _voucher;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>