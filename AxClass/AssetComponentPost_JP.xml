<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetComponentPost_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Posting of asset component.
/// </summary>
class AssetComponentPost_JP
{
    LedgerJournalTrans_Asset ledgerJournalTrans_Asset;
    LedgerJournalTrans ledgerJournalTrans;
    AssetTrans assetTrans;
    LedgerVoucher ledgerVoucher;
    LedgerDimensionDefaultAccount offsetLedgerDimension;

    Amount totalAmount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isAssembling</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if it is assembling.
    /// </summary>
    /// <returns>
    /// True if it is assembling; otherwise, false.
    /// </returns>
    public boolean isAssembling()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if it is reversal.
    /// </summary>
    /// <returns>
    /// True if it is reversal; otherwise, false.
    /// </returns>
    public boolean isReversal()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance.
    /// </summary>
    /// <param name="_ledgerJournalTrans_Asset">
    /// LedgerJournalTrans_Asset.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// LedgerJournalTrans.
    /// </param>
    /// <param name="_assetTrans">
    /// AssetTrans.
    /// </param>
    /// <param name="_ledgerVoucher">
    /// LedgerVoucher.
    /// </param>
    protected void new(
        LedgerJournalTrans_Asset _ledgerJournalTrans_Asset,
        LedgerJournalTrans _ledgerJournalTrans,
        AssetTrans _assetTrans,
        LedgerVoucher _ledgerVoucher)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceJP00028, funcName());

        ledgerJournalTrans_Asset = _ledgerJournalTrans_Asset;
        ledgerJournalTrans = _ledgerJournalTrans;
        assetTrans = _assetTrans;
        ledgerVoucher = _ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOffsetLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount parmOffsetLedgerDimension(
        LedgerDimensionDefaultAccount _offsetLedgerDimension = offsetLedgerDimension)
    {
        offsetLedgerDimension = _offsetLedgerDimension;

        return offsetLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the asset component.
    /// </summary>
    public void post()
    {
        AssetComponent_JP assetComponent;

        ttsbegin;

        if (this.validate())
        {
            while select forupdate assetComponent
            where   assetComponent.AssetId      == assetTrans.AssetId
                &&  assetComponent.Assembling   == this.isAssembling()
                &&  (!this.isReversal() || assetComponent.StornoRecId)
                &&  !assetComponent.TransDate
            {
                this.updateAssetComponent(assetComponent);
                this.postMovement(assetComponent);
                this.updateAssetComponentAfterPosting(assetComponent);

                totalAmount += assetComponent.CostAmount;
            }

            this.updateAfterPosting();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts asset movement.
    /// </summary>
    /// <param name="_assetComponent">
    /// The asset movement.
    /// </param>
    protected void postMovement(AssetComponent_JP _assetComponent)
    {
        InventMov_Component_JP  movement;
        InventUpd_Financial updFinancial;
        movement  = InventMovement::construct(_assetComponent);

        movement.cacheAccountOperations(ledgerJournalTrans.parmOffsetLedgerDimension());
        updFinancial = InventUpd_Financial::newPostAssetComponent_JP(movement, ledgerVoucher);
        updFinancial.updateNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAfterPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates after posting.
    /// </summary>
    protected void updateAfterPosting()
    {
        //if journal line is empty, update the amount.
        if (totalAmount
            && ledgerJournalTrans.amount() == 0)
        {
            ledgerJournalTrans.selectForUpdate(true);
            ledgerJournalTrans.AmountCurDebit = CurrencyExchangeHelper::curAmount(totalAmount, ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
            ledgerJournalTrans.update();
            assetTrans.selectForUpdate(true);
            assetTrans.AmountCur = ledgerJournalTrans.amount();
            assetTrans.AmountMST = ledgerJournalTrans.calcAmountMST();
            assetTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssetComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates asset component.
    /// </summary>
    /// <param name="_assetComponent">
    /// The asset component.
    /// </param>
    protected void updateAssetComponent(AssetComponent_JP _assetComponent)
    {
        _assetComponent.TransDate  = assetTrans.TransDate;
        _assetComponent.Voucher = assetTrans.Voucher;
        _assetComponent.AssetTrans = assetTrans.RecId;
        _assetComponent.update(NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssetComponentAfterPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates asset component after posting.
    /// </summary>
    /// <param name="_assetComponent">
    /// The asset component.
    /// </param>
    protected void updateAssetComponentAfterPosting(AssetComponent_JP _assetComponent)
    {
        //refresh the cost
        _assetComponent.CostAmount = -1 * conPeek(
            InventTransOrigin::calcInvoicedCostValue(InventTransOriginAssetComponent_JP::findInventTransOriginId(_assetComponent.recId)),
            2);
        _assetComponent.CostPrice = _assetComponent.getCostPrice();
        _assetComponent.update(NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the posting.
    /// </summary>
    /// <returns>
    /// True if it passed validation;otherwise, false.
    /// </returns>
    protected boolean validate()
    {
        boolean result = true;

        if (ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Ledger)
        {
            throw error("@SYS4110653");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of <c>AssetComponentPost_JP</c>.
    /// </summary>
    /// <param name="_ledgerJournalTrans_Asset">
    /// The buffer of <c>LedgerJournalTrans_Asset</c>.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// The buffer of <c>LedgerJournalTrans</c>.
    /// </param>
    /// <param name="_assetTrans">
    /// The buffer of <c>AssetTrans</c>.
    /// </param>
    /// <param name="_ledgerVoucher">
    /// The instance of <c>LedgerVoucher</c>.
    /// </param>
    /// <returns>
    /// An instance of <c>AssetComponentPost_JP</c>.
    /// </returns>
    public static AssetComponentPost_JP construct(
        LedgerJournalTrans_Asset _ledgerJournalTrans_Asset,
        LedgerJournalTrans _ledgerJournalTrans,
        AssetTrans _assetTrans,
        LedgerVoucher _ledgerVoucher)
    {
        AssetComponentPost_JP assetComponentPost;

        assetComponentPost = new AssetComponentPost_JP(
            _ledgerJournalTrans_Asset,
            _ledgerJournalTrans,
            _assetTrans,
            _ledgerVoucher);

        return assetComponentPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAssetComponent_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of <c>AssetComponentPost_JP</c>.
    /// </summary>
    /// <param name="_ledgerJournalTrans_Asset">
    /// The buffer of <c>LedgerJournalTrans_Asset</c>.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// The buffer of <c>LedgerJournalTrans</c>.
    /// </param>
    /// <param name="_assetTrans">
    /// The buffer of <c>AssetTrans</c>.
    /// </param>
    /// <param name="_ledgerVoucher">
    /// The instance of <c>LedgerVoucher</c>.
    /// </param>
	/// <param name="_disposalAccount">
	/// The disposal account.
	/// </param>
    public static void postAssetComponent_JP(
        LedgerJournalTrans_Asset _ledgerJournalTrans_Asset,
        LedgerJournalTrans _ledgerJournalTrans,
        AssetTrans _assetTrans,
    	LedgerVoucher _ledgerVoucher,
    	LedgerDimensionDefaultAccount _disposalAccount = 0)
    {
        AssetComponentPost_JP assetComponentPost;

        if (AssetComponent_JP::isAssemblingEnabled()
	        && _assetTrans.BookId == AssetComponent_JP::getAssemblingAssetBookId(_assetTrans.AssetId))
        {
	        //reversal - assembling reversal
	        if (AssetComponent_JP::isAssemblingReversalNeeded(_ledgerJournalTrans_Asset.AssetId))
	        {
	            assetComponentPost = AssetComponentPostReversal_JP::construct(
	                _ledgerJournalTrans_Asset,
	                _ledgerJournalTrans,
	                _assetTrans,
	                _ledgerVoucher);
	        }

	        if (AssetComponent_JP::isDisassemblingReversalNeeded(_ledgerJournalTrans_Asset.AssetId))
	        {
	            assetComponentPost = AssetComponentPostReversalDisassemble_JP::construct(
	                _ledgerJournalTrans_Asset,
	                _ledgerJournalTrans,
	                _assetTrans,
	                _ledgerVoucher);
	        }

            if (!assetComponentPost)
            {
                if (_ledgerJournalTrans_Asset.isAssembling_JP())
                {
                    assetComponentPost = AssetComponentPost_JP::construct(
                        _ledgerJournalTrans_Asset,
                        _ledgerJournalTrans,
                        _assetTrans,
                        _ledgerVoucher);
                }

                if (_ledgerJournalTrans_Asset.isDisassembling_JP())
                {
                    assetComponentPost = AssetComponentPostDisassembling_JP::construct(
                        _ledgerJournalTrans_Asset,
                        _ledgerJournalTrans,
                        _assetTrans,
                        _ledgerVoucher);
                }

	            if (_disposalAccount)
	            {
	                assetComponentPost = AssetComponentPostDisassembling_JP::construct(
	                    null,
	                    null,
	                    _assetTrans,
	                    _ledgerVoucher);
	                assetComponentPost.parmOffsetLedgerDimension(_disposalAccount);
                }
            }

            if (assetComponentPost)
            {
                assetComponentPost.post();
            }

	        if (_assetTrans.TransType == AssetTransType::Acquisition
	            && !_ledgerJournalTrans_Asset
	            && AssetComponent_JP::isAssemblingExist(_assetTrans.AssetId))
	        {
	            throw error("@FixedAssets:PostAcquistionUseAssetJournal");
	        }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>