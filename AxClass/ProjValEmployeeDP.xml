<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjValEmployeeDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjValEmployeeDP</c> class is the report data provider class for the <c>ProjValEmployee</c>
///    report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(ProjValEmployee)),
    SRSReportParameterAttribute(classStr(ProjValEmployeeContract))
]
public class ProjValEmployeeDP extends SRSReportDataProviderBase
{
    #ProjReports

    ProjValEmpl                 valEmployee;

    ProjOptionTM                projTM;
    ProjOptionFixedPrice        projFixedPrice;
    ProjOptionInternal          projInternal;
    ProjOptionInvestment        projInvestment;
    ProjOptionTime              projTime;
    Noyes                       projTMBillingMethod;
    NoYes                       projFixedPriceBillingMethod;

    ProjValEmpl                 projValEmployeeEnum;

    QueryBuildDataSource        qb_MainTable;
    QueryRun                    queryRun;

    ProjValProjectTmp           projValProjectTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getParameterValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the parameter values and assigns them to the variables.
    /// </summary>
    private void getParameterValues()
    {
        ProjValEmployeeContract contract = this.parmDataContract() as ProjValEmployeeContract;

        projTM = contract.parmTimeMaterial();
        projFixedPrice = contract.parmFixedPrice();
        projInvestment = contract.parmInvestment();
        projInternal = contract.parmInternalCost();
        projTime = contract.parmTime();

        projTMBillingMethod = contract.parmTimeMaterial();
        projFixedPriceBillingMethod = contract.parmFixedPrice();

        projValEmployeeEnum = contract.parmValEmployee();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjValProjectTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data from the <c>ProjValProjectTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>ProjValProjectTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute('ProjValProjectTmp')]
    public ProjValProjectTmp getProjValProjectTmp()
    {
        select * from projValProjectTmp;
        return projValProjectTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the query ranges.
    /// </summary>
    void initQuery()
    {
        qb_MainTable = queryRun.query().dataSourceTable(tableNum(ResourceView));
        qb_MainTable.orderMode(OrderMode::GroupBy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjValProjectTmp</Name>
				<Source><![CDATA[
        /// <summary>
    ///    Inserts the values into the temporary table
    /// </summary>
    /// <param name="_projTable">
    ///    A table buffer for the <c>ProjTable</c> table.
    /// </param>
    /// <param name="_projCategory">
    ///    A table buffer for the <c>ProjCategory</c> table.
    /// </param>
    /// <param name="_resource">
    ///    A table buffer for the <c>ResourceView</c> table.
    /// </param>
    private void insertProjValProjectTmp(ProjTable  _projTable, ProjCategory _projCategory, ResourceView _resource)
    {
        projValProjectTmp.clear();
        projValProjectTmp.ProjId = _projTable.ProjId;
        projValProjectTmp.Name = _projTable.Name;
        projValProjectTmp.CategoryId = _projCategory.CategoryId;
        projValProjectTmp.CategoryName = _projCategory.Name;
        projValProjectTmp.ResourceId = _resource.ResourceId;
        projValProjectTmp.Resource = _resource.RecId;
        projValProjectTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic. This method will be called by SSRS at
    ///    runtime. The method computes the data and populates the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        ResourceView                qr_Resource;
        ProjTable                   projTable;
        ProjCategory                projCategory;
        ProjValEmplCategorySetUp    projValEmplCategorySetUp1, projValEmplCategorySetUp2;
        ProjValProjCategorySetUp    projValProjCategorySetUp1, projValProjCategorySetUp2;
        ProjValEmplProjSetup        projValEmplProjSetup1, projValEmplProjSetup2;
        ResourceRecId               prev_Id;

        this.getParameterValues();
        queryRun = new QueryRun(this.parmQuery());
        this.initQuery();
        boolean projMultipleContractLinesForProjectFeatureEnabled = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

        while (queryRun.next())
        {
            switch (projValEmployeeEnum)
            {
                case ProjValEmpl::Project:
                    qr_Resource = queryRun.get(tableNum(ResourceView));

                    while select projValEmplProjSetup1
                        where (projValEmplProjSetup1.Resource == qr_Resource.RecId) &&
                              (projValEmplProjSetup1.Projid || projValEmplProjSetup1.GroupId)
                        join projValEmplProjSetup2
                           where projValEmplProjSetup2.Projid &&
                                (
                                 (projValEmplProjSetup2.Projid  && (projValEmplProjSetup2.Projid  == projValEmplProjSetup1.Projid)) ||
                                 (projValEmplProjSetup2.GroupId && (projValEmplProjSetup2.GroupId == projValEmplProjSetup1.GroupId))
                                )
                        join projTable group by ProjId, Name, ProjInvoiceProjId
                            where projTable.ProjId == projValEmplProjSetup2.Projid
                                && ((!projMultipleContractLinesForProjectFeatureEnabled
                                    && (!(projFixedPrice
                                        ^ projInternal
                                        ^ projTM
                                        ^ projInvestment
                                        ^ projTime)
                                    || (projFixedPrice && projTable.Type == ProjType::FixedPrice)
                                    || (projInternal   && projTable.Type == ProjType::Internal)
                                    || (projInternal   && projTable.Type == ProjType::Cost)
                                    || (projInvestment && projTable.Type == ProjType::Investment)
                                    || (projTime       && projTable.Type == ProjType::Time)
                                    || (projTM         && projTable.Type == ProjType::TimeMaterial)))
                                || projMultipleContractLinesForProjectFeatureEnabled)
                    {
                        if (!projMultipleContractLinesForProjectFeatureEnabled
                            || (projFixedPriceBillingMethod &&
                                ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForBillingMethod(
                                    projTable.ProjId,
                                    projTable.ProjInvoiceProjId,
                                    ProjContractBillingMethod::FixedPrice))
                            || (projTMBillingMethod &&
                                ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForBillingMethod(
                                    projTable.ProjId,
                                    projTable.ProjInvoiceProjId,
                                    ProjContractBillingMethod::TimeMaterial)))
                        {
                            this.insertProjValProjectTmp(projTable, projCategory, qr_Resource);

                            if (qr_Resource.RecId != prev_Id)
                            {
                                prev_Id = qr_Resource.RecId;
                            }
                        }
                    }
                    break;

                case ProjValEmpl::Category:
                    qr_Resource = queryRun.get(tableNum(ResourceView));

                    while select projValEmplCategorySetUp1
                        where (projValEmplCategorySetUp1.Resource == qr_Resource.RecId) &&
                              (projValEmplCategorySetUp1.CategoryId || projValEmplCategorySetUp1.GroupId)
                        join projValEmplCategorySetUp2
                            where (projValEmplCategorySetUp2.CategoryId) &&
                                 (
                                  (projValEmplCategorySetUp2.CategoryId && (projValEmplCategorySetUp2.CategoryId == projValEmplCategorySetUp1.CategoryId)) ||
                                  (projValEmplCategorySetUp2.GroupId    && (projValEmplCategorySetUp2.GroupId    == projValEmplCategorySetUp1.GroupId))
                                 )
                        join projCategory
                            group by CategoryId, Name
                            where projCategory.CategoryId == projValEmplCategorySetUp2.CategoryId
                    {
                        this.insertProjValProjectTmp(projTable, projCategory, qr_Resource);

                        if (qr_Resource.RecId != prev_Id)
                        {
                           prev_Id = qr_Resource.RecId;
                        }
                    }
                    break;

                case ProjValEmpl::ProjCategory:
                    qr_Resource = queryRun.get(tableNum(ResourceView));

                    while select projValEmplCategorySetUp1
                        where projValEmplCategorySetUp1.Resource == qr_Resource.RecId
                        join projValEmplCategorySetUp2
                            where ((projValEmplCategorySetUp2.GroupId == projValEmplCategorySetUp1.GroupId) && projValEmplCategorySetUp2.CategoryId && projValEmplCategorySetUp2.GroupId) ||
                                  ((projValEmplCategorySetUp2.Resource  == projValEmplCategorySetUp1.Resource)  && projValEmplCategorySetUp2.CategoryId && ! projValEmplCategorySetUp1.CategoryId)
                    join projValEmplProjSetup1
                        where (projValEmplProjSetup1.Resource == qr_Resource.RecId)
                        join projValEmplProjSetup2
                                where ((projValEmplProjSetup2.GroupId == projValEmplProjSetup1.GroupId) && projValEmplProjSetup2.Projid && projValEmplProjSetup2.GroupId) ||
                                      ((projValEmplProjSetup2.Resource  == projValEmplProjSetup1.Resource) && projValEmplProjSetup2.Projid && ! projValEmplProjSetup1.GroupId)
                    join projValProjCategorySetUp1
                        where (projValProjCategorySetUp1.CategoryId == projValEmplCategorySetUp2.CategoryId)
                        join projValProjCategorySetUp2
                             where ((projValProjCategorySetUp2.GroupId    == projValProjCategorySetUp1.GroupId)    && (projValProjCategorySetUp2.ProjId == projValEmplProjSetup2.Projid) && projValProjCategorySetUp2.GroupId) ||
                                   ((projValProjCategorySetUp2.CategoryId == projValProjCategorySetUp1.CategoryId) && (projValProjCategorySetUp2.ProjId == projValEmplProjSetup2.Projid))
                    join projTable
                        group by ProjId, Name, ProjInvoiceProjId
                        where projTable.ProjId  == projValEmplProjSetup2.Projid
                            && ((!projMultipleContractLinesForProjectFeatureEnabled
                                    && (!(projFixedPrice
                                        ^ projInternal
                                        ^ projTM
                                        ^ projInvestment
                                        ^ projTime)
                                    || (projFixedPrice && projTable.Type == ProjType::FixedPrice)
                                    || (projInternal   && projTable.Type == ProjType::Internal)
                                    || (projInternal   && projTable.Type == ProjType::Cost)
                                    || (projInvestment && projTable.Type == ProjType::Investment)
                                    || (projTime       && projTable.Type == ProjType::Time)
                                    || (projTM         && projTable.Type == ProjType::TimeMaterial)))
                                || projMultipleContractLinesForProjectFeatureEnabled)
                    join projCategory
                        group by CategoryId, Name
                        where projCategory.CategoryId == projValEmplCategorySetUp2.CategoryId
                    {
                        if (!projMultipleContractLinesForProjectFeatureEnabled
                            || (projFixedPriceBillingMethod &&
                                ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForBillingMethod(
                                    projTable.ProjId,
                                    projTable.ProjInvoiceProjId,
                                    ProjContractBillingMethod::FixedPrice))
                            || (projTMBillingMethod &&
                                ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForBillingMethod(
                                    projTable.ProjId,
                                    projTable.ProjInvoiceProjId,
                                    ProjContractBillingMethod::TimeMaterial)))
                        {
                            this.insertProjValProjectTmp(projTable, projCategory, qr_Resource);

                            if (qr_Resource.RecId != prev_Id)
                            {
                                prev_Id = qr_Resource.RecId;
                            }
                        }
                    }
                    break;

                case ProjValEmpl::CategoryProj:
                    qr_Resource = queryRun.get(tableNum(ResourceView));

                    while select projValEmplCategorySetUp1
                        where projValEmplCategorySetUp1.Resource == qr_Resource.RecId
                        join projValEmplCategorySetUp2
                            where ((projValEmplCategorySetUp2.GroupId == projValEmplCategorySetUp1.GroupId) && projValEmplCategorySetUp2.CategoryId && projValEmplCategorySetUp2.GroupId) ||
                                  ((projValEmplCategorySetUp2.Resource  == projValEmplCategorySetUp1.Resource)  && projValEmplCategorySetUp2.CategoryId && ! projValEmplCategorySetUp1.CategoryId)
                    join projValEmplProjSetup1
                        where (projValEmplProjSetup1.Resource == qr_Resource.RecId)
                        join projValEmplProjSetup2
                                where ((projValEmplProjSetup2.GroupId == projValEmplProjSetup1.GroupId) && projValEmplProjSetup2.Projid && projValEmplProjSetup2.GroupId) ||
                                      ((projValEmplProjSetup2.Resource  == projValEmplProjSetup1.Resource) && projValEmplProjSetup2.Projid && ! projValEmplProjSetup1.GroupId)
                    join projValProjCategorySetUp1
                        where (projValProjCategorySetUp1.CategoryId == projValEmplCategorySetUp2.CategoryId)
                        join projValProjCategorySetUp2
                             where ((projValProjCategorySetUp2.GroupId    == projValProjCategorySetUp1.GroupId)    && (projValProjCategorySetUp2.ProjId == projValEmplProjSetup2.Projid) && projValProjCategorySetUp2.GroupId) ||
                                   ((projValProjCategorySetUp2.CategoryId == projValProjCategorySetUp1.CategoryId) && (projValProjCategorySetUp2.ProjId == projValEmplProjSetup2.Projid))
                    join projCategory
                        group by CategoryId, Name
                        where projCategory.CategoryId == projValEmplCategorySetUp2.CategoryId
                    join projTable
                        group by ProjId, Name, ProjInvoiceProjId
                        where projTable.ProjId  == projValEmplProjSetup2.Projid
                            && ((!projMultipleContractLinesForProjectFeatureEnabled
                                    && (!(projFixedPrice
                                        ^ projInternal
                                        ^ projTM
                                        ^ projInvestment
                                        ^ projTime)
                                    || (projFixedPrice && projTable.Type == ProjType::FixedPrice)
                                    || (projInternal   && projTable.Type == ProjType::Internal)
                                    || (projInternal   && projTable.Type == ProjType::Cost)
                                    || (projInvestment && projTable.Type == ProjType::Investment)
                                    || (projTime       && projTable.Type == ProjType::Time)
                                    || (projTM         && projTable.Type == ProjType::TimeMaterial)))
                                || projMultipleContractLinesForProjectFeatureEnabled)
                    {
                        if (!projMultipleContractLinesForProjectFeatureEnabled
                            || (projFixedPriceBillingMethod &&
                                ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForBillingMethod(
                                    projTable.ProjId,
                                    projTable.ProjInvoiceProjId,
                                    ProjContractBillingMethod::FixedPrice))
                            || (projTMBillingMethod &&
                                ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForBillingMethod(
                                    projTable.ProjId,
                                    projTable.ProjInvoiceProjId,
                                    ProjContractBillingMethod::TimeMaterial)))
                        {
                            this.insertProjValProjectTmp(projTable, projCategory, qr_Resource);

                            if (qr_Resource.RecId != prev_Id)
                            {
                                prev_Id = qr_Resource.RecId;
                            }
                        }
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>