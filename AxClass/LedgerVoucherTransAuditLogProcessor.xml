<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerVoucherTransAuditLogProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal static class LedgerVoucherTransAuditLogProcessor
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateRecordsToTempTableFromMassUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mass updates the selected field in <c>LedgerVoucherTransAuditLogDetailTmp</c> to the provided value.
    /// </summary>
    /// <param name = "_tempTable">The instance of LedgerVoucherTransAuditLogDetailTmp to mass update.</param>
    /// <param name = "_fieldValue">The selected field to update.</param>
    /// <param name = "_targetField">Target Field.</param>
    internal static void updateRecordsToTempTableFromMassUpdate(LedgerVoucherTransAuditLogDetailTmp _tempTable, str _fieldValue, str _targetField)
    {
        update_recordset _tempTable setting FieldUpdateTemp = _fieldValue
            where _tempTable.IsSelected == NoYes::Yes;

        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(LedgerVoucherTransAuditLogDetailTmp));
        qbds.addRange(fieldNum(LedgerVoucherTransAuditLogDetailTmp, IsSelected)).value(queryValue(NoYes::Yes));
        qbds.cursor(_tempTable);

        Map fieldSetMap = new Map(Types::String, Types::String);

        fieldSetMap.insert(_targetField, fieldStr(LedgerVoucherTransAuditLogDetailTmp, FieldUpdateTemp));

        Query::update_recordset(fieldSetMap, query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bulkUpdateFinTagValue</Name>
				<Source><![CDATA[
    internal static void bulkUpdateFinTagValue(LedgerVoucherTransAuditLogDetailTmp _tempTable, str _fieldValue, FinTagColumnName _columnName)
    {
        LedgerVoucherTransAuditLogDetailTmp tempTableLocal;
        tempTableLocal.linkPhysicalTableInstance(_tempTable);
        FinTagInstrumentationLogger finTagBulkUpdateProgressLogger = FinTagInstrumentationLogger::createProgressLogger(classStr(LedgerVoucherTransAuditLogProcessor));

        using (SysInstrumentationActivityContext activityContext = finTagBulkUpdateProgressLogger.entry().trackBulkUpdateFinTagValues(_tempTable))
        {
            int recordCounter = 1;
            while select forupdate * from tempTableLocal
                where tempTableLocal.IsSelected == NoYes::Yes
            {
                System.Exception clrException;

                try
                {
                    // Use the NewFinTag so that multiple bulk updates compound on each other.
                    // If FinTag is used, multiple bulk updates will only persist the last update.
                    tempTableLocal.NewFinTag = FinTag::newFromExisting(tempTableLocal.NewFinTag, _columnName, _fieldValue);

                    ttsbegin;
                    tempTableLocal.update();
                    ttscommit;
                }
                catch (clrException)
                {
                    if (clrException is Microsoft.Dynamics.Ax.Xpp.ErrorException)
                    {
                        SysInstrumentationLoggerFactory::CreateLogger(classStr(LedgerVoucherTransAuditLogProcessor)).logException(clrException, clrException.Message);
                        error("@GeneralLedger:LedgerVoucherTransAuditLogBulkUpdateError");
                        break;
                    }
                    else
                    {
                        throw clrException;
                    }
                }

                finTagBulkUpdateProgressLogger.trackProgress(recordCounter);

                recordCounter++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRecordsToDb</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persists modified records by updating <c>GeneralJournalAccountEntry</c> and inserts new records to 
    /// <c>LedgerVoucherTransAuditLog</c> and <c>LedgerVoucherTransAuditLogDetail</c> tables.
    /// </summary>
    /// <param name = "_tempTable">The temp table containing the changes to persist.</param>
    /// <param name = "_note">Optional note saved with the parent record for an audit log entry.</param>
    internal static void updateRecordsToDb(LedgerVoucherTransAuditLogDetailTmp _tempTable, str _note)
    {
        LedgerVoucherTransAuditLogDetailTmp touchedTempTable = LedgerVoucherTransAuditLogProcessor::getChanges(_tempTable);

        if (touchedTempTable.RowCount() == 0)
        {
            warning("@GeneralLedger:LedgerVoucherTransAuditLogSaveNoChanges");
            return;
        }

        ttsbegin;
        RecId auditLogRecId = LedgerVoucherTransAuditLogProcessor::insertAuditLog(_note);
        LedgerVoucherTransAuditLogProcessor::insertAuditLogDetails(auditLogRecId, touchedTempTable);
        LedgerVoucherTransAuditLogProcessor::updateGeneralJournalAccountEntry(touchedTempTable);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChanges</Name>
				<Source><![CDATA[
    private static LedgerVoucherTransAuditLogDetailTmp getChanges(LedgerVoucherTransAuditLogDetailTmp _tempTable)
    {
        LedgerVoucherTransAuditLogDetailTmp changes;

        insert_recordset changes (GeneralJournalAccountEntry, LedgerAccount, AccountName, Description, Voucher, NewDescription, FieldUpdateTemp, NewFinTag)
        select GeneralJournalAccountEntry, LedgerAccount, AccountName, Description, Voucher, NewDescription, FieldUpdateTemp, NewFinTag
            from _tempTable
                where (_tempTable.Description != _tempTable.NewDescription || _tempTable.FinTag != _tempTable.NewFinTag)
                    && _tempTable.RecVersion != 1;

        return changes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateGeneralJournalAccountEntry</Name>
				<Source><![CDATA[
    private static void updateGeneralJournalAccountEntry(LedgerVoucherTransAuditLogDetailTmp _touchedTempTable)
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        LedgerVoucherTransAuditLogProcessor::setSkipMethods(generalJournalAccountEntry);
        SubledgerJournalEntry subledgerJournalEntry;

        update_recordset generalJournalAccountEntry 
            setting Text = _touchedTempTable.NewDescription,
                    FinTag = _touchedTempTable.NewFinTag
            join _touchedTempTable
                where _touchedTempTable.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId;

        if (LedgerVoucherTransAuditLogAddLedgerFlight::instance().isEnabled())
        {
            GeneralJournalEntry journalEntry;
            GeneralJournalAccountEntry journalAccountEntry;

            update_recordset subledgerJournalEntry
                setting TransTxt = _touchedTempTable.NewDescription
                join _touchedTempTable
                    where _touchedTempTable.Voucher == subledgerJournalEntry.Voucher
                join journalAccountEntry
                    where journalAccountEntry.RecId == _touchedTempTable.GeneralJournalAccountEntry
                join journalEntry
                    where journalAccountEntry.GeneralJournalEntry == journalEntry.RecId
                        && journalEntry.Ledger == subledgerJournalEntry.Ledger;
        }
        else
        {
            update_recordset subledgerJournalEntry
                setting TransTxt = _touchedTempTable.NewDescription
                join _touchedTempTable
                    where _touchedTempTable.Voucher == subledgerJournalEntry.Voucher;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAuditLog</Name>
				<Source><![CDATA[
    private static RecId insertAuditLog(str _note)
    {
        LedgerVoucherTransAuditLog ledgerVoucherTransAuditLog;

        ledgerVoucherTransAuditLog.Note = _note;
        ledgerVoucherTransAuditLog.UserId = curUserId();
        ledgerVoucherTransAuditLog.insert();

        return ledgerVoucherTransAuditLog.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAuditLogDetails</Name>
				<Source><![CDATA[
    private static void insertAuditLogDetails(RecId _auditLogRecId, LedgerVoucherTransAuditLogDetailTmp _touchedTempTable)
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        MainAccount mainAccount;

        LedgerVoucherTransAuditLogDetail ledgerVoucherTransAuditLogDetail;
        LedgerVoucherTransAuditLogProcessor::setSkipMethods(ledgerVoucherTransAuditLogDetail);

        insert_recordset ledgerVoucherTransAuditLogDetail (LedgerVoucherTransAuditLog, GeneralJournalAccountEntry, Description, LedgerAccount, FinTag, Voucher, AccountName, NewDescription, NewFinTag)
        select _auditLogRecId, RecId, Text, LedgerAccount, FinTag from generalJournalAccountEntry
            join SubledgerVoucher from generalJournalEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
            join Name from mainAccount
                where mainAccount.RecId == generalJournalAccountEntry.MainAccount
            join NewDescription, NewFinTag from _touchedTempTable
                where _touchedTempTable.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSkipMethods</Name>
				<Source><![CDATA[
    private static void setSkipMethods(Common _common)
    {
        _common.skipDatabaseLog();
        _common.skipDataMethods();
        _common.skipEvents();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerVoucherTransAuditLogDetailTmp</Name>
				<Source><![CDATA[
    internal static LedgerVoucherTransAuditLogDetailTmp getLedgerVoucherTransAuditLogDetailTmp(GeneralJournalAccountEntryRecIdTmp _accountEntryTmp)
    {
        LedgerVoucherTransAuditLogDetailTmp tempTable;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        MainAccount mainAccount;

        insert_recordset tempTable (GeneralJournalAccountEntry, LedgerAccount, Description, NewDescription, FinTag, NewFinTag, Voucher, AccountName)
            select RecId, LedgerAccount, Text, Text, FinTag, FinTag from generalJournalAccountEntry
                join _accountEntryTmp
                    where _accountEntryTmp.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                join SubledgerVoucher from generalJournalEntry
                    where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                join Name from MainAccount
                    where mainAccount.RecId == generalJournalAccountEntry.MainAccount;

        return tempTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>