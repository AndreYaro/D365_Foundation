<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlSourceDocumentLineRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetControlSourceDocumentLineRule</c> class defines the default budget control processing
///    rule for a source document line.
/// </summary>
public class BudgetControlSourceDocumentLineRule
{
    SourceDocumentLineItem              budgetSourceSourceDocumentLineItem;
    SourceDocumentType                  budgetSourceSourceDocumentType;
    SourceDocumentTypeIBudgetControl    budgetControlSourceDocumentType;

    boolean                             isDraftReservation;
    userId                              budgetUser;
    BudgetControlCategory               budgetControlCategory;
    Num                                 budgetTrackingNumber;
    boolean                             isSimulationBudgetCheck;
    SourceDocumentLine                  simulationSourceDocumentLine;
    boolean                             doBudgetCheckForGraph;
    boolean                             isCarryforward;
    Object                              caller;

    SubledgerJournalRelievingMethod     relievingMethod;

    AccountingDistribution              currentDistributionToRelieveBudget;
    SourceDocumentLine                  currentSourceDocumentLineToRelieveBudget;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>determineBudgetControlCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the budget control category.
    /// </summary>
    /// <param name="_totalTransactionCurrencyAmount">
    /// The total distribution transaction currency amount.
    /// </param>
    public void determineBudgetControlCategory(AmountCur _totalTransactionCurrencyAmount)
    {
        if (budgetControlSourceDocumentType != null)
        {
            budgetControlCategory = budgetControlSourceDocumentType.parmBudgetControlCategory();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDistributionToRelieveDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the source document line item and the accounting distribution for the budget reservation
    ///    amounts that are relieved.
    /// </summary>
    /// <param name="_distribution">
    ///    The <c>AccountingDistribution</c> record that directly or indirectly references the distribution
    ///    details from which the budget reservation amounts are to be relieved.
    /// </param>
    public void determineDistributionToRelieveDetail(AccountingDistribution _distribution)
    {
        AccountingDistribution  referenceDistribution;
        SourceDocumentLine      topParentSourceDocumentLine;
        SourceDocumentLineItem  topParentSourceDocumentLineItem;
        Object                  topParentSourceDocumentType;

        if (_distribution && _distribution.ReferenceDistribution)
        {
            referenceDistribution = AccountingDistribution::find(_distribution.ReferenceDistribution);

            if (PurchBudgetConsistencyCheckRefDistFlight::instance().isEnabled()
                && referenceDistribution.RecId == 0)
            {
                BudgetControlInstrumentationLogger::createLogger(classStr(BudgetControlSourceDocumentLineRule))
                    .processing()
                    .noReferenceDistribution(
                        _distribution.RecId,
                        _distribution.SourceDocumentLine,
                        _distribution.ReferenceDistribution);

                ttsbegin;
                // reset non-existent reference distribution to fix orphaned distribution
                _distribution.selectForUpdate(true);
                _distribution.ReferenceDistribution = 0;
                _distribution.update();
                ttscommit;

                return;
            }
            else if (!PurchBudgetConsistencyCheckRefDistFlight::instance().isEnabled()
                      && referenceDistribution.RecId == 0)
            {
                BudgetControlInstrumentationLogger::createLogger(classStr(BudgetControlSourceDocumentLineRule)).processing().noReferenceDistribution(_distribution.RecId, _distribution.SourceDocumentLine, _distribution.ReferenceDistribution);
                if (BudgetControlDetermineDistributionToRelieveFlight::instance().isEnabled())
                {
                    throw error("@Budget:BudgetControlSourceDocumentProcessingSeriousError");
                }
            }

            topParentSourceDocumentLine = SourceDocumentLine::findTopParentSourceDocumentLine(referenceDistribution.SourceDocumentLine);
            if (topParentSourceDocumentLine.RecId == 0)
            {
                BudgetControlInstrumentationLogger::createLogger(classStr(BudgetControlSourceDocumentLineRule)).processing().noTopParentSourceDocumentLine(referenceDistribution.RecId, referenceDistribution.SourceDocumentLine);
                if (BudgetControlDetermineDistributionToRelieveFlight::instance().isEnabled())
                {
                    throw error("@Budget:BudgetControlSourceDocumentProcessingSeriousError");
                }
            }

            topParentSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(topParentSourceDocumentLine);
            topParentSourceDocumentType = topParentSourceDocumentLineItem.parmSourceDocument().parmSourceDocumentType();

            if (topParentSourceDocumentType is SourceDocumentTypeIBudgetControl)
            {
                currentDistributionToRelieveBudget = referenceDistribution;
                currentSourceDocumentLineToRelieveBudget = topParentSourceDocumentLine;
            }
            else
            {
                this.determineDistributionToRelieveDetail(referenceDistribution);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineIsSimulationBudgetCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the budget check is a simulation.
    /// </summary>
    public void determineIsSimulationBudgetCheck()
    {
        isSimulationBudgetCheck = false;
        simulationSourceDocumentLine = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineRelievingMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the budget relieving method.
    /// </summary>
    public void determineRelievingMethod()
    {
        if (budgetSourceSourceDocumentType)
        {
            relievingMethod = budgetSourceSourceDocumentType.parmSubledgerJournalRelievingMethod();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>BudgetControlSourceDocumentLineRule</c> class.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The instance of the <c>SourceDocumentLineItem</c> that is referenced for initializing the instance
    /// of the rule.
    /// </param>
    /// <param name="_isDraftReservation">
    /// A Boolean value that indicates whether the budget check is for a draft budget reservation.
    /// </param>
    /// <param name="_user">
    /// The user who initiates the budget check.
    /// </param>
    /// <param name="_caller">
    /// The caller of the source document process.
    /// </param>
    /// <param name="_isCarryforwardReservation">
    /// A Boolean value that indicates whether the budget check is for a carryforward budget reservation.
    /// </param>
    protected void initialize(
        SourceDocumentLineItem _sourceDocumentLineItem,
        boolean _isDraftReservation,
        userId _user,
        SourceDocumentProcessorCaller _caller,
        boolean _isCarryforwardReservation)
    {
        budgetSourceSourceDocumentLineItem = _sourceDocumentLineItem;
        budgetSourceSourceDocumentType = budgetSourceSourceDocumentLineItem.parmSourceDocument().parmSourceDocumentType();
        isDraftReservation = _isDraftReservation;
        caller = _caller;
        isCarryforward = _isCarryforwardReservation;

        budgetControlSourceDocumentType = budgetSourceSourceDocumentType as SourceDocumentTypeIBudgetControl;

        this.initializeBudgetUser(_user);
        this.initializeBudgetTrackingNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBudgetTrackingNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the budget tracking number that is associated with the budget check.
    /// </summary>
    protected void initializeBudgetTrackingNumber()
    {
        if (budgetSourceSourceDocumentLineItem.parmSourceDocument())
        {
            budgetTrackingNumber = budgetSourceSourceDocumentLineItem.parmSourceDocument().parmDocumentNumber();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBudgetUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the user who initiates the budget check.
    /// </summary>
    /// <param name="_userId">
    /// The user who initiates the budget check.
    /// </param>
    protected void initializeBudgetUser(userId _userId)
    {
        budgetUser = _userId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetControlCategory</Name>
				<Source><![CDATA[
    public final BudgetControlCategory parmBudgetControlCategory()
    {
        return budgetControlCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetTrackingNumber</Name>
				<Source><![CDATA[
    public final Num parmBudgetTrackingNumber()
    {
        return budgetTrackingNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetUser</Name>
				<Source><![CDATA[
    public final userId parmBudgetUser()
    {
        return budgetUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentDistributionToRelieveBudget</Name>
				<Source><![CDATA[
    public final AccountingDistribution parmCurrentDistributionToRelieveBudget()
    {
        return currentDistributionToRelieveBudget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentSourceDocLineToRelieveBudget</Name>
				<Source><![CDATA[
    public final SourceDocumentLine parmCurrentSourceDocLineToRelieveBudget()
    {
        return currentSourceDocumentLineToRelieveBudget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSimulationBudgetCheck</Name>
				<Source><![CDATA[
    public final boolean parmIsSimulationBudgetCheck()
    {
        return isSimulationBudgetCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRelievingMethod</Name>
				<Source><![CDATA[
    public final SubledgerJournalRelievingMethod parmRelievingMethod()
    {
        return relievingMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSimulatedSourceDocumentLine</Name>
				<Source><![CDATA[
    public final SourceDocumentLine parmSimulatedSourceDocumentLine()
    {
        return simulationSourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the rule.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <param name="_isDraftReservation">
    /// A Boolean value that indicates whether the budget reservation is a draft reservation.
    /// </param>
    /// <param name="_user">
    /// The user.
    /// </param>
    /// <param name="_caller">
    /// An Object instance that initiated the source document line submission.
    /// </param>
    /// <param name="_isCarryforwardReservation">
    /// A Boolean that indicates whether the budget reservation for the source document line
    /// is carryforward reservation.
    /// </param>
    /// <returns>
    /// An instance of the rule.
    /// </returns>
    public static BudgetControlSourceDocumentLineRule newRule(
        SourceDocumentLineItem _sourceDocumentLineItem,
        boolean _isDraftReservation,
        userId _user,
        SourceDocumentProcessorCaller _caller,
        boolean _isCarryforwardReservation)
    {
        BudgetControlSourceDocumentLineRule rule;
        BusinessEvent businessEvent;

        businessEvent = _sourceDocumentLineItem.documentsBusinessEvent();
        rule = SourceDocumentExtensionFactory::newObject(classNum(BudgetControlSourceDocumentLineRule), [businessEvent.parmBusinessEventClass(), businessEvent.parmBusinessEvent()]);

        if (!rule)
        {
            // Use the base rule because there is no specific extension for the source document's business event.
            rule = new BudgetControlSourceDocumentLineRule();
        }

        rule.initialize(_sourceDocumentLineItem, _isDraftReservation, _user, _caller, _isCarryforwardReservation);

        return rule;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>