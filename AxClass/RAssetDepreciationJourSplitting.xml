<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RAssetDepreciationJourSplitting</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RAssetDepreciationJourSplitting extends RunBaseBatch implements BatchRetryable
{
    protected QueryRun queryRun;

    protected RAssetStandardId standardId;
    protected RAssetTransDate runDate;
    protected LedgerJournalNameId journalNameId;
    protected int limitOfFixedAssets;

    protected DialogField standardIdField;
    protected DialogField runDateField;
    protected DialogField journalNameField;
    protected DialogField limitField;
    protected DialogField reasonCommentField;
    protected DialogField reasonCodeField;

    protected DialogGroup reasonGroup;
    protected ReasonCode reasonCode;
    protected ReasonComment reasonComment;
    protected ReasonRefRecID reasonRefRecID;
    protected LedgerJournalTrans ledgerJournalTrans;
    protected Counter journals;
    protected LedgerJournalId firstJournalNum;
    protected LedgerJournalId prevJournalNum;
    protected LedgerJournalId lastJournalNum;

    protected const Version CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    private LedgerJournalTable createJournal()
    {
        LedgerJournalTable ledgerJournalTable;

        ttsbegin;

        ledgerJournalTable.JournalName = journalNameId;
        ledgerJournalTable.JournalType = LedgerJournalType::Assets_RU;
        ledgerJournalTable.insert();

        ttscommit;

        if (!ledgerJournalTable)
        {
            throw Exception::Error;
        }

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates lines in the journal passed as a parameter.
    /// </summary>
    /// <param name="_journalTable">
    /// Table <c>LedgerJournalTable</c>.
    /// </param>
    /// <param name="_assetId">
    /// The ID of the fixed asset.
    /// </param>
    public void createJournalLine(LedgerJournalTable _journalTable, RAssetId _assetId)
    {
        RAssetProposalDepreciation proposal = RAssetProposal::construct(RAssetTransType::Depreciation);
        proposal.initParameters(_journalTable.JournalNum, runDate, null);
        proposal.parmReasonCode(reasonCode);
        proposal.parmReasonComment(reasonComment);
        proposal.queryRun()
            .query()
            .dataSourceName(tableStr(RAssetTable))
            .addRange(fieldNum(RAssetTable, AccountNum))
            .value(queryValue(_assetId));

        proposal.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEmptyJournal</Name>
				<Source><![CDATA[
    private void deleteEmptyJournal()
    {
        LedgerJournalTable journalTable = LedgerJournalTable::find(lastJournalNum);

        if (journalTable.numOfLines() == 0)
        {
            journalTable.selectForUpdate(true);
            journalTable.delete();
            journals--;

            if (journals != 0)
            {
                lastJournalNum = prevJournalNum;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase  dialog = super();

        runDateField = dialog.addFieldValue(extendedTypeStr(RAssetTransDate), runDate, "@SYS67");

        if (!runDateField.value())
        {
            runDateField.value(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }

        standardIdField = dialog.addFieldValue(extendedTypeStr(RAssetStandardId), standardId, "@GLS116120");
        journalNameField = dialog.addFieldValue(extendedTypeStr(LedgerJournalNameId), journalNameId, "@RussianFixedAssets:NameOfJournal");
        journalNameField.control().registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(RAssetDepreciationJourSplitting, journalNameField_lookup), this);

        limitField = dialog.addFieldValue(extendedTypeStr(Integer), limitOfFixedAssets, "@RussianFixedAssets:LimitOnTheNumberOfFixedAssets", "@RussianFixedAssets:LimitationOnTheNumberOfFixedAssetsInOneJournal");

        reasonGroup = dialog.addGroup("@SYS86426");
        reasonCodeField = dialog.addFieldValue(extendedTypeStr(ReasonCode), reasonCode);

        reasonCodeField.control().registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(RAssetDepreciationJourSplitting, dialogReasonCode_lookup), this);
        reasonCodeField.control().registerOverrideMethod(methodStr(FormStringControl, jumpRef), methodStr(RAssetDepreciationJourSplitting, dialogReasonCode_jumpRef), this);
        reasonCodeField.control().registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(RAssetDepreciationJourSplitting, dialogReasonCode_modified), this);

        reasonCommentField = dialog.addFieldValue(extendedTypeStr(ReasonComment), reasonComment);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogReasonCode_jumpRef</Name>
				<Source><![CDATA[
    private void dialogReasonCode_jumpRef(FormStringControl _ctrl)
    {
        new MenuFunction(menuItemDisplayStr(RAssetReasons), MenuItemType::Display).run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogReasonCode_lookup</Name>
				<Source><![CDATA[
    private void dialogReasonCode_lookup(FormStringControl _ctrl)
    {
        LedgerJournalACType ledgerJournalACType = LedgerJournalACType::FixedAssets_RU;
        ReasonFormTable::reasonCodeLookup(_ctrl, ledgerJournalACType, ledgerJournalACType, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalNameField_lookup</Name>
				<Source><![CDATA[
    private void journalNameField_lookup(FormStringControl _ctrl)
    {
        LedgerJournalName::lookupJournalNameByJournalType(_ctrl, LedgerJournalType::Assets_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogReasonCode_modified</Name>
				<Source><![CDATA[
    private void dialogReasonCode_modified(FormStringControl _ctrl)
    {
        FormStringControl controlReasonComment = reasonCommentField.control();

        _ctrl.modified();

        controlReasonComment.text(ReasonTable::find(_ctrl.text()).Description);
        controlReasonComment.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        standardId = standardIdField.value();
        runDate = runDateField.value();
        journalNameId = journalNameField.value();
        limitOfFixedAssets = limitField.value();
        reasonCode = reasonCodeField.value();
        reasonComment = reasonCommentField.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        this.initQuery();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    private void initQuery()
    {
        queryRun = new QueryRun(queryStr(RassetTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, standardId, runDate, journalNameId, limitOfFixedAssets, reasonCode, reasonComment, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        LedgerJournalTable journalTable;

        #OCCRetryCount

        journals = 0;

        setPrefix(RAssetDepreciationJourSplitting::description());

        if (!this.validate())
        {
            throw error("@SYS18447");
        }

        try
        {
            ttsbegin;

            queryRun.query(RAssetStatusType::allowStatusRangeValue(queryRun.query(), RAssetTransType::Depreciation));
            queryRun.query()
                .dataSourceName(tableStr(RAssetTable))
                .addRange(fieldNum(RAssetTable, Status))
                .value(queryValue(RAssetStatus::Suspended));

            Counter assetsAdded = 0;

            while (queryRun.next())
            {
                if (assetsAdded >= limitOfFixedAssets
                    || !assetsAdded)
                {
                    journalTable = this.createJournal();
                    journals++;
                    assetsAdded = 0;

                    if (!firstJournalNum)
                    {
                        firstJournalNum = journalTable.JournalNum;
                    }

                    prevJournalNum  = lastJournalNum;
                    lastJournalNum  = journalTable.JournalNum;
                }

                RAssetTable rAssetTable = queryRun.get(tableNum(RAssetTable));
                int64 numOfLinesInitial = journalTable.numOfLines();

                this.createJournalLine(journalTable, rAssetTable.AccountNum);

                if (numOfLinesInitial != journalTable.numOfLines())
                {
                    assetsAdded++;
                }
            }

            this.deleteEmptyJournal();

            ttscommit;

            if (journals == 0)
            {
                info("@SYP4880964");
            }
            else
            {
                info(strFmt("@RussianFixedAssets:FaDepreciationJournalsCreatedInfo", journals, firstJournalNum, lastJournalNum));
            }
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            ttsabort;
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean ret = true;
        Version version = RunBase::getVersion(_packedClass);
        container queryCon;

        switch (version)
        {
            case CurrentVersion:
                [version, standardId, runDate, journalNameId, limitOfFixedAssets, reasonCode, reasonComment, queryCon] = _packedClass;

                if (SysQuery::isPackedOk(queryCon))
                {
                    queryRun = new QueryRun(queryCon);
                }
                else
                {
                    this.initQuery();
                }
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super(_calledFrom);

        if (!runDate)
        {
            ret = checkFailed("@RussianFixedAssets:SpecifyTransactionDate");
        }
        if (!journalNameId)
        {
            ret = checkFailed("@RussianFixedAssets:SpecifyJournalName");
        }
        if (limitOfFixedAssets <= 0)
        {
            ret = checkFailed("@RussianFixedAssets:SpecifyLimitOnTheNumberOfFixedAssets");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@RussianFixedAssets:CreateDepreciationJournalsWithNumberOfFixedAssetsNoMoreThanTheLimit";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RAssetDepreciationJourSplitting  splitting = new RAssetDepreciationJourSplitting();

        if (splitting.prompt())
        {
            splitting.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>