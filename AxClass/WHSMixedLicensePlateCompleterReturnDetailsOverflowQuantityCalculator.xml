<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMixedLicensePlateCompleterReturnDetailsOverflowQuantityCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSMixedLicensePlateCompleterReturnDetailsOverflowQuantityCalculator</c> class is responsible for calculating
/// the returned overflow quantity during mixed license plate completion.
/// </summary>
internal final class WHSMixedLicensePlateCompleterReturnDetailsOverflowQuantityCalculator
{
    private WHSMixedLicensePlateReceiptLine mixedLicensePlateReceiptLine;
    private WHSMixedLicensePlateReceiptPlannedLine mixedLicensePlateReceiptPlannedLine;

    private UnitOfMeasureSymbol inventUOM;
    private WHSReturnID returnID;
    private InventDim mixedLPLineProdTrackInventDim;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromMixedLicensePlateLineAndPlannedLine</Name>
				<Source><![CDATA[
    internal static WHSMixedLicensePlateCompleterReturnDetailsOverflowQuantityCalculator newFromMixedLicensePlateLineAndPlannedLine(
        WHSMixedLicensePlateReceiptLine         _mixedLicensePlateReceiptLine,
        WHSMixedLicensePlateReceiptPlannedLine  _mixedLicensePlateReceiptPlannedLine)
    {
        WHSMixedLicensePlateCompleterReturnDetailsOverflowQuantityCalculator calculator = new WHSMixedLicensePlateCompleterReturnDetailsOverflowQuantityCalculator();
        calculator.mixedLicensePlateReceiptLine = _mixedLicensePlateReceiptLine.data();
        calculator.mixedLicensePlateReceiptPlannedLine = _mixedLicensePlateReceiptPlannedLine.data();

        return calculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventUOM</Name>
				<Source><![CDATA[
    internal UnitOfMeasureSymbol inventUOM()
    {
        if (!inventUOM)
        {
            inventUOM = this.calculateInventUOM();
        }

        return inventUOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInventUOM</Name>
				<Source><![CDATA[
    private UnitOfMeasureSymbol calculateInventUOM()
    {
        return InventTableModule::find(mixedLicensePlateReceiptPlannedLine.ItemId, ModuleInventPurchSales::Invent).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnID</Name>
				<Source><![CDATA[
    internal WHSReturnID returnID()
    {
        if (!returnID)
        {
            returnID = this.calculateReturnID();
        }

        return returnID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateReturnId</Name>
				<Source><![CDATA[
    private WHSReturnID calculateReturnId()
    {
        WHSReturnLineDetail returnLineDetail;
        WHSReturnLineDetailMixedLicensePlateReceiptLine returnLineDetailMixedLicensePlateReceiptLine;

        select firstonly ReturnID from returnLineDetail
            exists join returnLineDetailMixedLicensePlateReceiptLine
                where returnLineDetailMixedLicensePlateReceiptLine.ReturnLineDetail == returnLineDetail.RecId
                    && returnLineDetailMixedLicensePlateReceiptLine.MixedLicensePlateReceiptLine == mixedLicensePlateReceiptLine.RecId;

        return returnLineDetail.ReturnID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mixedLPLineProdTrackInventDim</Name>
				<Source><![CDATA[
    private InventDim mixedLPLineProdTrackInventDim()
    {
        if (!mixedLPLineProdTrackInventDim.RecId)
        {
            mixedLPLineProdTrackInventDim = this.calculateMixedLPLineProdTrackInventDim();
        }

        return mixedLPLineProdTrackInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMixedLPLineProdTrackInventDim</Name>
				<Source><![CDATA[
    private InventDim calculateMixedLPLineProdTrackInventDim()
    {
        InventDim productAndTrackingInventDim;

        InventDim mixedLicensePlateReceiptLineInventDim = InventDim::find(mixedLicensePlateReceiptLine.InventDimId);

        if (mixedLicensePlateReceiptLineInventDim.anyProductDimensionSpecified()
            || mixedLicensePlateReceiptLineInventDim.anyTrackingDimensionSpecified())
        {
            // A new list needs to be instantiated, so the InventDimMetaDataCache is not changed.
            List dimList = new List(Types::Integer);
            dimList.appendList(InventDim::dimProductDimFieldList());
            dimList.appendList(InventDim::dimTrackingDimFieldList());

            productAndTrackingInventDim.initFromInventDim(mixedLicensePlateReceiptLineInventDim, dimList);
            productAndTrackingInventDim = InventDim::findOrCreate(productAndTrackingInventDim);
        }

        return productAndTrackingInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateOverflowReturnInventoryQuantity</Name>
				<Source><![CDATA[
    internal InventQty calculateOverflowReturnInventoryQuantity()
    {
        InventQty alreadyReturnedInventQtyOnClosedLicensePlates = this.alreadyReturnedInventQtyOnClosedLicensePlates();
        InventQty currentInventQty = mixedLicensePlateReceiptLine.InventQty;
        InventQty totalReturnLineDetailInventQty = this.totalReturnLineDetailInventQty();

        return alreadyReturnedInventQtyOnClosedLicensePlates + currentInventQty - totalReturnLineDetailInventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>alreadyReturnedInventQtyOnClosedLicensePlates</Name>
				<Source><![CDATA[
    private InventQty alreadyReturnedInventQtyOnClosedLicensePlates()
    {
        InventQty alreadyReturnedInventQty;

        if (this.mixedLPLineProdTrackInventDim().RecId)
        {
            alreadyReturnedInventQty = WHSReturnLineDetailMixedLicensePlateReceiptLine::alreadyReturnedInventQtyOnClosedLPsForReturnIdItemIdAndInventoryDimensions(this.returnID(), mixedLicensePlateReceiptPlannedLine.ItemId, this.mixedLPLineProdTrackInventDim());
        }
        else
        {
            alreadyReturnedInventQty = WHSReturnLineDetailMixedLicensePlateReceiptLine::alreadyReturnedInventQtyOnClosedLicensePlatesForReturnIdAndItemId(this.returnID(), mixedLicensePlateReceiptPlannedLine.ItemId);
        }

        return alreadyReturnedInventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalReturnLineDetailInventQty</Name>
				<Source><![CDATA[
    private InventQty totalReturnLineDetailInventQty()
    {
        InventQty totalReturnLineDetailInventQty;

        if (this.mixedLPLineProdTrackInventDim().RecId)
        {
            totalReturnLineDetailInventQty = WHSReturnLineDetail::totalInventQtyForReturnIdItemIdAndInventoryDimensions(this.returnID(), mixedLicensePlateReceiptPlannedLine.ItemId, this.mixedLPLineProdTrackInventDim(), this.inventUOM());
        }
        else
        {
            totalReturnLineDetailInventQty = WHSReturnLineDetail::totalInventQtyForReturnIdAndItemId(this.returnID(), mixedLicensePlateReceiptPlannedLine.ItemId, this.inventUOM());
        }

        return totalReturnLineDetailInventQty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>