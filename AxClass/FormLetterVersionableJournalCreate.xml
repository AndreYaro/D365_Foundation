<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormLetterVersionableJournalCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FormLetterVersionableJournalCreate</c> class forwards all version dependent logic of journal
/// creation to a versioning strategy object.It is also acts as an interface that is used by the
/// versioning strategy classes to perform document-specific actions.
/// </summary>
abstract class FormLetterVersionableJournalCreate extends FormletterJournalCreate
{
    FormLetterJournalCreateVersioning formLetterJournalCreateVersioning;
    AccountingDate  accountingDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustAccountingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the accounting date that is based on fiscal and inventory period availability.
    /// </summary>
    /// <param name="_showMessage">
    /// A Boolean value that indicates whether messages will be displayed when the accounted date is
    /// adjusted.
    /// </param>
    /// <returns>
    /// The adjusted accounting date.
    /// </returns>
    public AccountingDate adjustAccountingDate(boolean _showMessage)
    {
        return accountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the journal can be created.
    /// </summary>
    /// <returns>
    /// true if the journal can be created; otherwise, false.
    /// </returns>
    protected boolean check()
    {
        return super() && formLetterJournalCreateVersioning.check();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDiscardLine</Name>
				<Source><![CDATA[
        protected boolean  checkDiscardLine(Common _salesParmLine)
    {
        return formLetterJournalCreateVersioning.checkDiscardLine(_salesParmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if journal can be created.
    /// </summary>
    /// <returns>
    /// true if journal can be created; otherwise, false.
    /// </returns>
    public boolean checkJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks a journal line.
    /// </summary>
    /// <param name="_journalLine">
    /// The journal line to be checked.
    /// </param>
    /// <param name="_parmLine">
    /// The parameter line to check against.
    /// </param>
    /// <remarks>
    /// An exception should be thrown by subclasses on check failure.
    /// </remarks>
    public void checkJournalLine(Common _journalLine, Common _parmLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalChain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a journal chain for chained documents
    /// </summary>
    public void createJournalChain()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the journal header when updating the sales order, the purchase order, or the request for a
    /// quote.
    /// </summary>
    protected void  createJournalHeader()
    {
        this.updateJournalHeader();
        this.getJournal().write();

        if (formLetterJournalCreateVersioning.createJournalHistory())
        {
            this.createJournalLinesHistory();
        }
        this.createJournalVersion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
        protected void createJournalLine(Common _salesParmLine)
    {
        formLetterJournalCreateVersioning.createJournalLine(_salesParmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLinesHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates journal line history records for all lines.
    /// </summary>
    abstract protected void createJournalLinesHistory()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLink</Name>
				<Source><![CDATA[
        protected void createJournalLink(Common _salesParmLine)
    {
        formLetterJournalCreateVersioning.createJournalLink(_salesParmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new journal version.
    /// </summary>
    protected abstract void createJournalVersion()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an existing journal line that is based on a parameter line.
    /// </summary>
    /// <param name="_parmLine">
    /// The parameter line that is used to find the journal line.
    /// </param>
    /// <returns>
    /// The journal line.
    /// </returns>
    public abstract Common findJournalLine(Common _parmLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class.
    /// </summary>
    protected void init()
    {
        super();
        formLetterJournalCreateVersioning.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormletterProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>FormletterProvider</c> object.
    /// </summary>
    public void initFormletterProvider()
    {
        super();
        formLetterJournalCreateVersioning.initFormletterProvider(formletterProvider);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes non-correctable fields on the journal header.
    /// </summary>
    abstract public void initHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the journal header record.
    /// </summary>
    protected void initJournalHeader()
    {
        formLetterJournalCreateVersioning.initJournalHeader();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes non-correctable fields on the journal line.
    /// </summary>
    /// <param name="_salesParmLine">
    /// The parameter line that is to initialize.
    /// </param>
    /// <returns>
    /// The found journal line.
    /// </returns>
    public abstract Common initJournalLine(Common _salesParmLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes new link between the journal and the order.
    /// </summary>
    /// <param name="_salesParmLine">
    /// A parameter line that indicates the journal line and the order line.
    /// </param>
    /// <returns>
    /// The journal link record.
    /// </returns>
    public abstract Common initJournalLink(Common _salesParmLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in the journal line table.
    /// </summary>
    /// <param name="_journalLine">
    /// The record to insert.
    /// </param>
    public void insertJournalLine(Common _journalLine)
    {
        super(_journalLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJournalLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in the journal link table.
    /// </summary>
    /// <param name="_journalLink">
    /// The record to insert.
    /// </param>
    public void insertJournalLink(Common _journalLink)
    {
        super(_journalLink);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormLetterJournalCreateVersioning</Name>
				<Source><![CDATA[
        public FormLetterJournalCreateVersioning parmFormLetterJournalCreateVersioning(FormLetterJournalCreateVersioning _formLetterJournalCreateVersioning = formLetterJournalCreateVersioning)
    {
        formLetterJournalCreateVersioning = _formLetterJournalCreateVersioning;

        return formLetterJournalCreateVersioning;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether document posting to the general ledger is enabled.
    /// </summary>
    /// <returns>
    /// true if the document is posted to the general ledger; otherwise, false.
    /// </returns>
    abstract protected boolean postingEnabled()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the journal to an existing record.
    /// </summary>
    /// <param name="_journal">
    /// An existing journal record.
    /// </param>
    public abstract void setJournal(Common _journal)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets correctable fields on journal header.
    /// </summary>
    abstract protected void updateJournalHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets correctable fields on journal line.
    /// </summary>
    /// <param name="_journalLine">
    /// The journal line to update.
    /// </param>
    /// <param name="_parmLine">
    /// The parameter line to update based on.
    /// </param>
    public abstract void updateJournalLine(Common _journalLine, Common _parmLine)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>