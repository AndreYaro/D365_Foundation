<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_BOMDesigner_BOMVersion</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Form control handler for the <c>BOMVersion</c> datasource of the <c>BOMDesigner</c> form
/// </summary>
class PmfFormCtrl_BOMDesigner_BOMVersion extends PmfFormCtrl
{
    BOM         bom;
    BOM         lineDeleted;
    InventDim   inventDim;

    boolean     hasChanged;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bomRecPreDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called, before a BOM line is being removed
    /// </summary>
    /// <param name="_bom">
    /// The BOM line to be removed
    /// </param>
    public void bomRecPreDelete(BOM _bom)
    {
        lineDeleted.data(_bom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the record buffer as a typed BOMVersion record
    /// </summary>
    /// <returns>
    /// The bomVersion record
    /// </returns>
    private BOMVersion bomVersion()
    {
        return buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceWritePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls post <c>write</c> operation processes.
    /// </summary>
    /// <remarks>
    /// Unapproves the formula if the <c>BOMVersion</c> record has changed.
    /// </remarks>
    public void dataSourceWritePost()
    {
        BOMVersion  bomVersion = this.bomVersion();

        super();

        if (bomVersion.inventTable().isFormulaAllowed())
        {
            PmfFormulaCoBy::setInventSite(bomVersion);
        }
        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handle the modification of fields for the BOMVersion datasource
    /// </summary>
    /// <param name="_fieldId">
    /// The id of the field that has changed
    /// </param>
    public void fieldModified(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(BOMVersion,PmfBatchSize):
                this.modifiedFormulaSize(true);
                break;
            case fieldnum(BOMVersion,PdsCWSize):
                this.modifiedFormulaSize(true);
                break;
            default:
                break;
        }

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called after the form element has been initialized
    /// </summary>
    /// <remarks>
    /// Creates and initializes the form button manager and adjusts various
    /// properties for the usage of the form with formulas
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// throws an exception, if the form element has not been set for this class
    /// </exception>
    public void initPost()
    {
        super();

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.isPmfEnabled())
        {
            this.registerPmfEnabledCtrlRules();
        }

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMDesigner, BOMVersionTab)),
                methodstr(PmfFormCtrl_BomDesigner_BOMVersion,isFormulaOnly),
                ButtonRuleEffectType::Visible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPmfEnabledCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPmfEnabledCtrlRules()
    {
        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMDesigner, BOMVersionTab)),
                methodstr(PmfFormCtrl_BomDesigner_BOMVersion,isBOMOrFormulaEnabled),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMDesigner, ApproveVersionButton)),
                methodstr(PmfFormCtrl_BomDesigner_BOMVersion,mayVersionBeApproved),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMDesigner, ActivateVersionButton)),
                methodstr(PmfFormCtrl_BomDesigner_BOMVersion,mayVersionBeActive),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMDesigner, BOMVersion_PdsCWSize)),
                methodstr(PmfFormCtrl_BomDesigner_BOMVersion,isVersionItemCW),
                ButtonRuleEffectType::AllowEdit);
        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMDesigner, BOMVersion_PdsCWFromQty)),
                methodstr(PmfFormCtrl_BomDesigner_BOMVersion,isVersionItemCW),
                ButtonRuleEffectType::AllowEdit);
        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMDesigner, BOMVersion_PmfBatchSize)),
                methodstr(PmfFormCtrl_BomDesigner_BOMVersion,isVersionItemNotCW),
                ButtonRuleEffectType::AllowEdit);
        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMDesigner, BOMVersion_FromQty)),
                methodstr(PmfFormCtrl_BomDesigner_BOMVersion,isVersionItemNotCW),
                ButtonRuleEffectType::AllowEdit);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMDesigner, BOMLineTab)),
                methodstr(PmfFormCtrl_BomDesigner_BOMVersion,isFormulaOnly),
                ButtonRuleEffectType::Caption,
                "@SCM:FormulaLineDetails");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMDesigner, BOMTab)),
                methodstr(PmfFormCtrl_BomDesigner_BOMVersion,isFormulaOnly),
                ButtonRuleEffectType::Caption,
                "@PRO1115");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMDesigner, BOMTable_BOMId)),
                methodstr(PmfFormCtrl_BomDesigner_BOMVersion,isFormulaOnly),
                ButtonRuleEffectType::Label,
                "@PRO1115");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMDesigner, BOMLinesMenu)),
                methodstr(PmfFormCtrl_BomDesigner_BOMVersion,isFormulaOnly),
                ButtonRuleEffectType::Text,
                "@PRO1509");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMDesigner, BOMMenu)),
                methodstr(PmfFormCtrl_BomDesigner_BOMVersion,isFormulaOnly),
                ButtonRuleEffectType::Text,
                "@PRO1115");
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBOMOrFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the version is a formula.
    /// </summary>
    /// <returns>
    /// True if the version is a formula; otherwise false.
    /// </returns>
    public boolean isBOMOrFormulaEnabled()
    {
        InventTable callerInventTable;
        InventSum   callerInventSum;
        Common      common = this.callerBuffer();

        boolean     ret = false;

        switch (common.TableId)
        {
            case tablenum(InventTable) :
                callerInventTable = common;
                ret = callerInventTable.isFormulaOrBOMAllowed();
                break;
            case tablenum(BOMVersion):
                ret = true;
                break;
            case tablenum(BOMTable) :
                ret = true;
                break;
            case tablenum(InventSum) :
                callerInventSum = common;
                ret = callerInventSum.inventTable().isFormulaOrBOMAllowed();
                break;
            default:
                // break;
        }

        ret = ret
            || this.menuItemName() == menuitemdisplaystr(PmfFormulaTable)
            || this.menuItemName() == menuitemdisplaystr(PmfFormulaTableHeader);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaOnly</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the item attached to the version is a formula item.
    /// </summary>
    /// <returns>
    ///     True if the item is a formula; otherwise false.
    /// </returns>
    public boolean isFormulaOnly()
    {
        BOMVersion  callerBOMVersion;
        InventTable callerInventTable;
        InventSum   callerInventSum;
        Common      common = this.callerBuffer();

        boolean     ret = false;

        switch (common.TableId)
        {
            case tablenum(InventTable) :
                callerInventTable = common;
                ret = callerInventTable.isFormulaAllowed();
                break;
            case tablenum(BOMVersion):
                callerBOMVersion = common;
                ret = callerBOMVersion.inventTable().isFormulaAllowed();
                break;
            case tablenum(BOMTable) :
                ret = (this.menuItemName() == menuItemDisplayStr(PmfFormulaTable))
                    || (this.menuItemName() == menuItemDisplayStr(PmfFormulaDesigner));
                break;
            case tablenum(InventSum) :
                callerInventSum = common;
                ret = callerInventSum.inventTable().isFormulaAllowed();
                break;
            default:
                // break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVersionItemCW</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the item from the version is catch-weight.
    /// </summary>
    /// <returns>
    /// true, if the item version is catch-weight.
    /// </returns>
    public boolean isVersionItemCW()
    {
        boolean     ret = false;
        BOMVersion  callerBOMVersion;
        InventTable callerInventTable;
        InventSum   callerInventSum;
        Common      common = this.callerBuffer();

        switch (common.TableId)
        {
            case tablenum(InventTable) :
                callerInventTable = common;
                ret = PdsGlobal::pdsIsCWItem(callerInventTable.ItemId);
                break;
            case tablenum(BOMVersion):
                callerBOMVersion = common;
                ret = PdsGlobal::pdsIsCWItem(callerBOMVersion.ItemId);
                break;
            case tablenum(InventSum) :
                callerInventSum = common;
                ret = PdsGlobal::pdsIsCWItem(callerInventSum.itemId);
                break;
            default:
                // break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVersionItemNotCW</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the item from the version is not catch-weight.
    /// </summary>
    /// <returns>
    /// true, if the item version is not catch-weight.
    /// </returns>
    public boolean isVersionItemNotCW()
    {
        return !this.isVersionItemCW();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayVersionBeActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check, if the calling version can be activated
    /// </summary>
    /// <returns>
    /// true, if the version can be activated
    /// </returns>
    public boolean mayVersionBeActive()
    {
        boolean     ret = false;
        BOMVersion  callerBOMVersion;
        Common      common = buffer;

        if (common.TableId == tablenum(BOMVersion))
        {
            callerBOMVersion = common;
            ret = !callerBOMVersion.Active;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayVersionBeApproved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check, if the version can be approved
    /// </summary>
    /// <returns>
    /// true, if the version can be approved
    /// </returns>
    public boolean mayVersionBeApproved()
    {
        boolean     ret = false;
        BOMVersion  callerBOMVersion;
        Common      common = buffer;

        if (common.TableId == tablenum(BOMVersion))
        {
            callerBOMVersion = common;
            ret = !callerBOMVersion.Approved;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFormulaSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate and modify BOMVersion formula size.
    /// </summary>
    /// <param name="_updateDS">
    /// By default, will update form data source with modified value.
    /// </param>
    private void modifiedFormulaSize(boolean _updateDS = true)
    {
        BOM             localBOM;
        BOMVersion      bomVerOrig, bomVersion = this.bomVersion();
        PmfFormulaCoBy  coBy;

        if (bomVersion.RecId)
        {
            ttsbegin;

            bomVerOrig = bomVersion.orig();

            if (bomVersion.PmfBatchSize != bomVerOrig.PmfBatchSize)
            {
                while select forupdate localBOM
                    where localBOM.bomId == bomVersion.bomId
                {
                    localBOM.bomQtySerie  = bomVersion.PmfBatchSize;

                    if (localBOM.PmfPctEnable)
                    {
                        localBOM.bomQty       = localBOM.pmfBOMPctQty(bomVersion);
                    }
                    else if (localBOM.PmfScalable)
                    {
                        localBOM.bomQty       = localBOM.bomQty
                                                * (bomVersion.PmfBatchSize
                                                    / bomVerOrig.PmfBatchSize);
                    }

                    localBOM.update();
                }
                while select forupdate coBy
                    where coBy.bomId == bomVersion.bomId
                {
                    coBy.CoByQtySerie = bomVersion.PmfBatchSize;
                    coBy.update();
                }
            }

            ttscommit;

            if (_updateDS)
            {
                this.parmFormDataSource().write();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOM</Name>
				<Source><![CDATA[
    public BOM parmBOM(BOM _bom = bom)
    {
        if (!prmisdefault(_bom))
        {
            bom = _bom;
        }

        return bom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources
    /// additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common _datasources1 ,
        Common _datasources2 = null,
        Common _datasources3 = null,
        Common _datasources4 = null,
        Common _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(BOMVersion))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (_datasources2.TableId != tablenum(InventDim))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the form design
    /// </summary>
    public void updateDesign()
    {
        super();

        this.parmFormDataSource().refresh();
        this.refreshManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_BomDesigner_BOMVersion construct()
    {
        return new PmfFormCtrl_BomDesigner_BOMVersion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new form control handler from the form element
    /// </summary>
    /// <param name="_formRun">
    /// The form element to create the form control handler for
    /// </param>
    /// <returns>
    /// The created form control handler
    /// </returns>
    public static PmfFormCtrl_BomDesigner_BOMVersion newFromForm(FormRun _formRun)
    {
        PmfFormCtrl_BomDesigner_BOMVersion frmCtrl;

        frmCtrl = PmfFormCtrl_BomDesigner_BOMVersion::construct();
        frmCtrl.parmFormRun(_formRun);
        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>