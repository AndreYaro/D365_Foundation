<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustDirectiveDP_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustDirectiveDP_PSN</c> class is the data provider class for the <c>CustDirective_PSN</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(CustVendDirectiveDPContract_PSN)),
    SRSReportQueryAttribute(queryStr(CustDirective_PSN))
]
class CustDirectiveDP_PSN extends CustVendDirectiveDP_PSN
{
    CustDirective_PSN custDirective_PSN;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
        public void getFromDialog()
    {
        CustVendDirectiveDPContract_PSN custVendDirectiveDPContract_PSN = this.parmDataContract();

        director    = custVendDirectiveDPContract_PSN.parmDirector();
        accountant  = custVendDirectiveDPContract_PSN.parmAccountant();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReverseTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the boolean that indicates whether tax amount should be reversed.
    /// </summary>
    /// <returns>
    /// A boolean value that indicates whether tax amount should be reversed.
    /// </returns>
    public boolean getReverseTaxAmount()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performProcessReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>custVendTmpDirective_PSN</c> table fields with the appropriate values.
    /// </summary>
    /// <param name="_queryRun">
    /// The current query run object.
    /// </param>
    /// <param name="_unpostedQuery">
    /// Always false for this extended class.
    /// </param>
    public void performProcessReport(QueryRun _queryRun, boolean _unpostedQuery = false)
    {
        super(_queryRun);

        // All the sources for the values below come from tables that will exist on both queries.
        this.setDirectiveRoutingSlipID(_queryRun.get(tableNum(CustRoutingSlip_PSN)));
        this.setCustVendInvoiceNumber(_queryRun.get(tableNum(CustInvoiceTable)));
        this.setCustBankAccountNumber(_queryRun.get(tableNum(CustInvoiceTable)));
        this.setDirectiveID();
        this.setFinalAccount();
        custVendTmpDirective_PSN.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        QueryRun                queryRun;

        super();

        query = this.parmQuery();
        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            this.setCommonTables(queryRun, false);

            custDirective_PSN = custVendDirective_PSN as CustDirective_PSN;
            this.performProcessReport(queryRun, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCommonTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets common tables found in the <c>classDeclaration</c> method.
    /// </summary>
    /// <param name="_queryRun">
    /// The current query object.
    /// </param>
    /// <param name="_unpostedQuery">
    /// Always false for this extended class.
    /// </param>
    public void setCommonTables(QueryRun _queryRun, boolean _unpostedQuery = false)
    {
        CustInvoiceLine custInvoiceLine;

        custInvoiceLine = _queryRun.get(tableNum(CustInvoiceLine)) as custInvoiceLine;

        budgetaryDocumentSourceDocumentLine = SourceDocumentLine::find(custInvoiceLine.SourceDocumentLine);
        CompanyInfo                         = CompanyInfo::find();
        dirPartyTable                       = _queryRun.get(tableNum(DirPartyTable)) as DirPartyTable;
        mainAccount                         = _queryRun.get(tableNum(MainAccount)) as MainAccount;
        custVendDirective_PSN               = _queryRun.get(tableNum(CustDirective_PSN)) as CustVendDirective_PSN;
        taxGroup                            = custInvoiceLine.TaxGroup;
        CustVendTable                       = _queryRun.get(tableNum(CustTable)) as CustTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustBankAccountNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>CustBankAccountNumber</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    /// <param name="_custInvoiceTable">
    /// The current free text invoice header record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setCustBankAccountNumber(CustInvoiceTable _custInvoiceTable)
    {
        CustBankAccount custBankAccount;

        select firstOnly AccountNum from custBankAccount
            where custBankAccount.AccountID == _custInvoiceTable.CustBankAccountId
                && custBankAccount.CustAccount == _custInvoiceTable.InvoiceAccount;

        custVendTmpDirective_PSN.CustBankAccountNumber = custBankAccount.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendInvoiceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>CustVendInvoiceNumber</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    /// <param name="_custInvoiceTable">
    /// The current invoice record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setCustVendInvoiceNumber(CustInvoiceTable _custInvoiceTable)
    {
        custVendTmpDirective_PSN.CustVendInvoiceNumber = _custInvoiceTable.InvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDirectiveID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>DirectiveID</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    public void setDirectiveID()
    {
        custVendTmpDirective_PSN.DirectiveID = custDirective_PSN.CustDirectiveId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDirectiveRoutingSlipID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>DirectiveRoutingSlipID</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    /// <param name="_custRoutingSlip_PSN">
    /// The current routing slip record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setDirectiveRoutingSlipID(CustRoutingSlip_PSN _custRoutingSlip_PSN)
    {
        custVendTmpDirective_PSN.DirectiveRoutingSlipID = _custRoutingSlip_PSN.CustRoutingSlipId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFinalAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>FinalAccount</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setFinalAccount()
    {
        custVendTmpDirective_PSN.FinalAccount = custDirective_PSN.CustDirectiveBudgetaryAccount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
