<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximAuthorization_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The exim authorization class.
/// </summary>
abstract class  EximAuthorization_IN extends EximIncentiveSchemes_IN
{
    EximAuthorizationSchemesTableRecId_IN authorizationSchemesTableRecId;
    TmpEximImportableItems_IN             tmpImportableItems;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cumulativeAssessableValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get cumulative assessable value.
    /// </summary>
    /// <returns>
    /// The isntance of the <c>AmountMST</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST cumulativeAssessableValue()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes table records.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void deleteRecords()
    {
        EximImportableItems_IN          importableItems;
        EximAuthorizationSchemesLine_IN authorizationSchemesLine;
        ;

        delete_from authorizationSchemesLine
            where authorizationSchemesLine.AuthorizationSchemesTableRecId == authorizationSchemesTableRecId;

        delete_from importableItems
            where importableItems.AuthorizationSchemesTableRecId == authorizationSchemesTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object  dialog()
    {
        Args                             args = new Args();
        FormRun                          eximBasisRelatedForm;
        EximAuthorizationSchemesTable_IN authorizationSchemesTable;

        authorizationSchemesTable = EximAuthorizationSchemesTable_IN::find(authorizationSchemesTableRecId);

        args.caller(this);
        args.record(authorizationSchemesTable);

        switch (classidget(this))
        {
            case classnum(EximAuthorization_Confirmed_IN)      :
                if (hasMenuItemAccess(menuitemdisplaystr(EximConfirmOrderTable_IN),  MenuItemType::Display))
                {
                    args.name(formstr(EximConfirmOrderTable_IN));
                }
                else
                {
                    throw error(strfmt("@SYS104222", menuitemdisplaystr(EximConfirmOrderTable_IN)));
                }
                break;
            case classnum(EximAuthorization_Annual_IN)         :
                if (hasMenuItemAccess(menuitemdisplaystr(EximAnnualConsumption_IN),  MenuItemType::Display))
                {
                    args.name(formstr(EximAnnualConsumption_IN));
                }
                else
                {
                    throw error(strfmt("@SYS104222", menuitemdisplaystr(EximAnnualConsumption_IN)));
                }
                break;
            case classnum(EximAuthorization_ExportOrder_IN)    :
                if (hasMenuItemAccess(menuitemdisplaystr(EximExportOrderTable_IN),  MenuItemType::Display))
                {
                    args.name(formstr(EximExportOrderTable_IN));
                }
                else
                {
                    throw error(strfmt("@SYS104222", menuitemdisplaystr(EximExportOrderTable_IN)));
                }
                break;
        }
        eximBasisRelatedForm = classfactory.formRunClass(args);
        eximBasisRelatedForm.init();

        return eximBasisRelatedForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSummaryImportableItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the summary importable items.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertSummaryImportableItems()
    {
        EximValue_IN                     value;
        Qty                              qty;
        UnitOfMeasureSymbol              toUnit;
        EximSionTable_IN                 sionTable;
        EximSionLine_IN                  sionLine;
        EximSionItemTable_IN             sionItemTable;
        EximSummaryImportableItems_IN    summaryImportableItems;
        RecordSortedList                 summaryImportableItemsList;
        EximImportableItems_IN           importableItems;
        EximImportableItems_IN           importableItemsLoc;
        EximAuthorizationSchemesTable_IN authorizationSchemesTable;
        ;

        delete_from summaryImportableItems
            where summaryImportableItems.AuthorizationSchemesTableRecId == authorizationSchemesTableRecId;

        summaryImportableItemsList = new RecordSortedList(tablenum(EximSummaryImportableItems_IN));
        summaryImportableItemsList.sortOrder(fieldnum(EximSummaryImportableItems_IN, ItemId));

        while select AuthorizationSchemesTableRecId, ItemId from importableItems
            group by AuthorizationSchemesTableRecId, ItemId
            where importableItems.AuthorizationSchemesTableRecId == authorizationSchemesTableRecId
        join EximProductGroupTable, AuthorizationDateTime from authorizationSchemesTable
            group by EximProductGroupTable, AuthorizationDateTime
            where authorizationSchemesTable.RecId == importableItems.AuthorizationSchemesTableRecId
        {
            value = 0;
            qty   = 0;

            sionTable = EximSionTable_IN::findPeriod(authorizationSchemesTable.EximProductGroupTable,
                                                     authorizationSchemesTable.AuthorizationDateTime);

            while select RecId from sionLine
                where sionLine.SionTableRecId == sionTable.RecId
                join Unit from sionItemTable
                    where sionItemTable.SionLineRecId == sionLine.RecId
                       && sionItemTable.ItemId        == importableItems.ItemId
            {
                toUnit = sionItemTable.Unit;
                break;
            }

            while select ItemId, Unit, sum(Value), sum(Qty)
                from importableItemsLoc
                group by Unit, ItemId
                    where importableItemsLoc.ItemId                         == importableItems.ItemId
                       && importableItemsLoc.AuthorizationSchemesTableRecId == importableItems.AuthorizationSchemesTableRecId
            {
                value += importableItemsLoc.Value;
                qty   += UnitOfMeasureConverter::convert(importableItemsLoc.Qty,
                                          UnitOfMeasure::unitOfMeasureIdBySymbol(importableItemsLoc.Unit),
                                          UnitOfMeasure::unitOfMeasureIdBySymbol(toUnit),
                                          NoYes::Yes,
                                          InventTable::itemProduct(importableItemsLoc.ItemId));
            }

            qty = value ? 0 : qty;

            summaryImportableItems.clear();
            summaryImportableItems.AuthorizationSchemesTableRecId = importableItems.AuthorizationSchemesTableRecId;
            summaryImportableItems.LicenseStatus                  = EximLicenseStatus_IN::Original;
            summaryImportableItems.ItemId                         = importableItems.ItemId;
            summaryImportableItems.Unit                           = toUnit;
            summaryImportableItems.Value                          = value;
            summaryImportableItems.AllowedValue                   = value;
            summaryImportableItems.Qty                            = qty;
            summaryImportableItems.AllowedQty                     = qty;
            summaryImportableItemsList.ins(summaryImportableItems);
        }

        if (summaryImportableItemsList.len())
        {
            summaryImportableItemsList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpImportableItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts temporary importable items.
    /// </summary>
    /// <param name="_sionTableRecId">
    /// The instance of the <c>EximSionTableRecId_IN</c> class.
    /// </param>
    /// <param name="_sourceRecId">
    /// The id of the source records.
    /// </param>
    /// <param name="_assessableValue">
    /// The amount of the assessable value.
    /// </param>
    /// <param name="_itemId">
    /// The id of the item.
    /// </param>
    /// <param name="_unit">
    /// The unit of measure symbol.
    /// </param>
    /// <param name="_qty">
    /// The quantity.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency code.
    /// </param>
    /// <param name="_transDate">
    /// The date of the transaction.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertTmpImportableItems(
        EximSionTableRecId_IN _sionTableRecId,
        RefRecId              _sourceRecId,
        AmountCur             _assessableValue,
        ItemId                _itemId,
        UnitOfMeasureSymbol   _unit,
        Qty                   _qty,
        CurrencyCode          _currencyCode = '',
        TransDate             _transDate = dateNull())
    {
        Qty                  qty;
        Qty                  importableQty;
        EximValue_IN         importablevalue;
        EximSionLine_IN      sionLine;
        EximSionItemTable_IN sionItemTable;
        AmountMST            assessableValue;

        #define.hunderd(100)

         sionLine = EximSionLine_IN::findBySionTableItem(_sionTableRecId, _itemId);

        ttsbegin;
        while select SionLineRecId, Basis, ItemId, ApplyRestriction, AllowedQty, RestrictedAllowedQty, Value, Unit
            from sionItemTable
            where sionItemTable.SionLineRecId == sionLine.RecId
        {
            qty             = 0;
            importableQty   = 0;
            importablevalue = 0;
            assessableValue = 0;

            if (sionItemTable.Basis != EximSionBasis_IN::PctOfFOB
                && !UnitOfMeasureConverter::canBeConverted(UnitOfMeasure::unitOfMeasureIdBySymbol(_unit),
                                                                               UnitOfMeasure::unitOfMeasureIdBySymbol(sionLine.Unit),
                                                                               InventTable::itemProduct(sionLine.ItemId)))
            {
                tmpImportableItems = null;
                throw error(strfmt("@SYS28690", _unit, sionLine.Unit));
            }

            switch (sionItemTable.Basis)
            {
                case EximSionBasis_IN::NetPct:
                case EximSionBasis_IN::PctOfInput:
                case EximSionBasis_IN::StandardQty:
                    qty = UnitOfMeasureConverter::convert(_qty,
                                                          UnitOfMeasure::unitOfMeasureIdBySymbol(_unit),
                                                          UnitOfMeasure::unitOfMeasureIdBySymbol(sionLine.Unit),
                                                          NoYes::Yes,
                                                          InventTable::itemProduct(sionLine.ItemId));
                    importableQty   = sionItemTable.ApplyRestriction ? sionItemTable.RestrictedAllowedQty : sionItemTable.AllowedQty;
                    importableQty   = (importableQty * qty) / sionLine.Qty;
                    importablevalue = 0;
                    break;

                case EximSionBasis_IN::Value:
                    qty = UnitOfMeasureConverter::convert(_qty,
                                                          UnitOfMeasure::unitOfMeasureIdBySymbol(_unit),
                                                          UnitOfMeasure::unitOfMeasureIdBySymbol(sionLine.Unit),
                                                          NoYes::Yes,
                                                          InventTable::itemProduct(sionLine.ItemId));
                    importableQty   = 0;
                    importablevalue = (qty * sionItemTable.Value);
                    break;

                case EximSionBasis_IN::PctOfFOB:
                    assessableValue = _assessableValue;

                    if (_currencyCode)
                    {
                        assessableValue = CurrencyHelper_IN::customsMSTAmount_IN(_assessableValue, _currencyCode, Direction_IN::Export, _transDate);
                    }

                    importableQty   = 0;
                    importablevalue = (assessableValue * sionItemTable.Value) / #hunderd;
                    break;
            }

            tmpImportableItems.clear();
            tmpImportableItems.ItemId      = sionItemTable.ItemId;
            tmpImportableItems.Unit        = sionItemTable.Unit;
            tmpImportableItems.Qty         = importableQty;
            tmpImportableItems.Value       = importablevalue;
            tmpImportableItems.SourceRecId = _sourceRecId;
            tmpImportableItems.insert();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAuthorizationSchemesTableRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId parmAuthorizationSchemesTableRecId(RefRecId _authorizationSchemesTableRecId = authorizationSchemesTableRecId)
    {
        authorizationSchemesTableRecId = _authorizationSchemesTableRecId;

        return authorizationSchemesTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpEximImportableItems</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpEximImportableItems_IN parmTmpEximImportableItems(TmpEximImportableItems_IN _tmpImportableItems = tmpImportableItems)
    {
        tmpImportableItems = _tmpImportableItems;

        return tmpImportableItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateScheme</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates scheme.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateScheme()
    {
        EximSummaryImportableItems_IN    summaryImportableItems;
        EximAuthorizationSchemesTable_IN authorizationSchemesTable;
        EximAuthorizationSchemesLine_IN  authorizationSchemesLine;
        Percent                          importAssessablePct;

        #define.hundred(100)

        authorizationSchemesLine = EximAuthorizationSchemesLine_IN::findByAuthorizationVersionId(authorizationSchemesTableRecId, 0);

        select firstonly summaryImportableItems
            where summaryImportableItems.AuthorizationSchemesTableRecId == authorizationSchemesTableRecId;

        if (!authorizationSchemesLine && summaryImportableItems)
        {
            if (this.parmSchemeType() ==  EximAuthorizationType_IN::AA)
            {
                importAssessablePct = EximParameters_IN::find().aaAssessableValuePct;
            }
            else
            {
                importAssessablePct = EximParameters_IN::find().dfiaAssessableValuePct;
            }

            authorizationSchemesLine.LicenseStatus                  = EximLicenseStatus_IN::Original;
            authorizationSchemesLine.ExportAssessableValue          = this.cumulativeAssessableValue();
            authorizationSchemesLine.ImportAssessableValue          = (authorizationSchemesLine.ExportAssessableValue
                                                                       * importAssessablePct / #hundred);
            authorizationSchemesLine.AuthorizationSchemesTableRecId = authorizationSchemesTableRecId;
            authorizationSchemesLine.insert();
        }

        authorizationSchemesTable = EximAuthorizationSchemesTable_IN::find(authorizationSchemesTableRecId, true);

        authorizationSchemesTable.Status = summaryImportableItems ? EximAuthorizationStatus_IN::Applied
                                                                  : EximAuthorizationStatus_IN::Created;
        authorizationSchemesTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// The constructor of the <c>EximAuthorization_IN</c> class.
    /// </summary>
    /// <param name="_eximAuthorizationBasis">
    /// The instance of the <c>EximAuthorizationBasis_IN</c> class.
    /// </param>
    /// <returns>
    /// The instance of the <c>EximAuthorization_IN</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximAuthorization_IN construct(EximAuthorizationBasis_IN _eximAuthorizationBasis)
    {
        switch (_eximAuthorizationBasis)
        {
            case  EximAuthorizationBasis_IN::ConfirmedOrder     : return new EximAuthorization_Confirmed_IN();
            case  EximAuthorizationBasis_IN::AnnualConsumption  : return new EximAuthorization_Annual_IN();
            case  EximAuthorizationBasis_IN::ExportOrder        : return new EximAuthorization_ExportOrder_IN();
        }

        throw error(strfmt("@SYS19306", funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        EximAuthorization_IN             eximAuthorization;
        EximAuthorizationSchemesTable_IN authorizationSchemesTable;
        FormDataSource                   formDataSource;
        ;

        if (!_args
            || !_args.record()
            || _args.dataset() != tablenum(EximAuthorizationSchemesTable_IN))
        {
            throw error("@SYS25407");
        }

        authorizationSchemesTable = _args.record();
        formDataSource = FormDataUtil::getFormDataSource(_args.record());

        eximAuthorization = EximAuthorization_IN::construct(_args.parmEnum());

        eximAuthorization.getLast();
        eximAuthorization.parmAuthorizationSchemesTableRecId(authorizationSchemesTable.RecId);
        eximAuthorization.parmAuthorizationId(authorizationSchemesTable.AuthorizationId);
        eximAuthorization.parmSchemeType(authorizationSchemesTable.AuthorizationType);

        if (eximAuthorization.prompt())
        {
            eximAuthorization.runOperation();
        }

        EximAuthorization_IN::updateCallerDataSource(formDataSource, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCallerDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates data source of the caller.
    /// </summary>
    /// <param name="_formDataSource">
    /// The data source form.
    /// </param>
    /// <param name="_recordExists">
    /// If 'True', the record exists.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static void updateCallerDataSource(
        Object  _formDataSource = null,
        boolean _recordExists = false)
    {
        if (_recordExists)
        {
            _formDataSource.executeQuery();
        }
        else
        {
            _formDataSource.reSearch();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>