<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>whsWorkExecuteDisplayDriverCheckInOut</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to checkin/checkout for drivers.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::DriverCheckIn)]
[WHSWorkExecuteMode(WHSWorkExecuteMode::DriverCheckOut)]
class whsWorkExecuteDisplayDriverCheckInOut extends WHSWorkExecuteDisplay
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildCarrier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to form state for selecting carrier.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <param name="_label">
    /// Label text.
    /// </param>
    /// <param name="_showRemove">
    /// Determines whether Remove From Quarantine button should be added, false by default.
    /// </param>
    /// <param name="_showBlank">
    /// Determines whether blank carrier is allowed, false by default.
    /// </param>
    /// <param name="_showOK">
    /// Determines whether OK button should be added, false by default.
    /// </param>
    /// <param name="_selected">
    /// Selected carrier from carrier combobox, empty string by default.
    /// </param>
    /// <param name="_enabled">
    /// Determines whether the carrier combobox is enabled, true by default.
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    public container buildCarrier(container    _con,
                           str          _label = '',
                           boolean      _showRemove = false,
                           boolean      _showBlank = false,
                           boolean      _showOK = true,
                           str          _selected = '',
                           boolean      _enabled = true)
    {
        TMSCarrier          carrier;
        container           ret = _con;
        boolean             first = true;
        str                 elements;
        str                 label = _label ? _label : "@SYS50733";      // Carrier

        if (_showBlank)
        {
            elements = '||';
        }

        while select Name, CarrierCode from carrier
            where carrier.Active == true
        {
            var carrierName = carrier.Name ? carrier.Name : carrier.CarrierCode;

            if (first)
            {
                elements += carrierName;
                first = false;
            }
            else
            {
                elements = elements + '||' + carrierName;
            }
        }

        ret += [this.buildControl(#RFLabel, "@WAX4153", "@WAX4153", 1, '', #WHSRFUndefinedDataType, '', 0, true, "", WHSRFColorText::Default, extendedTypeNum(WHSId))];
        ret += [this.buildControl(#RFText, #CheckInOutId, 'Id:', 1, pass.lookupStr(#CheckInOutId), extendedTypeNum(WHSId), '', 0, 0)];
        ret += [this.buildControl(#RFCombobox, #Carrier, label, 1, elements, #WHSRFUndefinedDataType, '', 0, _enabled, _selected ? _selected : '', WHSRFColorText::Default, extendedTypeNum(TMSName))];

        if (_showRemove)
        {
            ret += [this.buildControl(#RFButton, "@SYS26394", "@WAX879", 1, '', #WHSRFUndefinedDataType, '', 0)];
        }

        if (_showOK)
        {
            ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        }

        ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCheckIn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to form state for Driver check-in screen.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    public container buildCheckIn(container _con)
    {
        container ret = _con;

        ret += [this.buildControl(#RFLabel, "@WAX4153", "@WAX4153", 1, '', #WHSRFUndefinedDataType, '', 0, true, "", WHSRFColorText::Default, extendedTypeNum(WHSId))];
        ret += [this.buildControl(#RFText, #CheckInOutId, 'Id:', 1, pass.lookupStr(#CheckInOutId), extendedTypeNum(WHSId), '', 0, 0)];

        WHSLoadTable loadTable = WHSLoadTable::find(pass.lookup(#LoadId));

        str effectiveGrossWeight = WHSWorkExecuteDisplay::num2StrDisplay(loadTable.effectiveGrossWeight());

        ret += [this.buildControl(#RFText, 'Weight', "@SYS11575", 1, effectiveGrossWeight, #WHSRFUndefinedDataType, '', 0, 0)];
        
        WHSShipmentTable shipmentTable;
        while select AccountNum,Address,DeliveryName,OrderNum from shipmentTable
            where shipmentTable.LoadId == loadTable.LoadId
        {
            ret += [this.buildControl(#RFLabel, 'ShippingDestination', strFmt('%1 \n %2 \n %3 \n %4 \n', shipmentTable.DeliveryName,
                                                                                                           SalesTable::find(shipmentTable.OrderNum).CustomerRef,
                                                                                                           CustTable::find(shipmentTable.AccountNum).name(),
                                                                                                           shipmentTable.Address), 1, '', #WHSRFUndefinedDataType, '', 0)];
        }

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '',#WHSRFUndefinedDataType, '', 1)];
        ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCheckOut</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to form state for Driver check-out screen.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    public container buildCheckOut(container        _con)
    {
        container           ret        = _con;
        WHSShipmentTable    shipmentTable;
        WHSLoadTable        loadTable;

        ret += [this.buildControl(#RFLabel, "@WAX4154", "@WAX4154", 1, '', #WHSRFUndefinedDataType, '', 0, true, "", WHSRFColorText::Default, extendedTypeNum(WHSId))];
        ret += [this.buildControl(#RFText, #CheckInOutId, 'Id:', 1, pass.lookupStr(#CheckInOutId), extendedTypeNum(WHSId), '', 0, 0)];

        loadTable = WHSLoadTable::find(pass.lookup(#LoadId));

        while select AccountNum,Address,DeliveryName,OrderNum from shipmentTable
            where shipmentTable.LoadId == loadTable.LoadId
        {
            ret += [this.buildControl(#RFLabel, 'ShippingDestination', strFmt('%1 \n %2 \n %3 \n %4 \n', shipmentTable.DeliveryName,
                                                                                                         SalesTable::find(shipmentTable.OrderNum).CustomerRef,
                                                                                                         CustTable::find(shipmentTable.AccountNum).name(),
                                                                                                         shipmentTable.Address), 1, '', #WHSRFUndefinedDataType, '', 0)];
        }
        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGetCheckInOutId</Name>
				<Source><![CDATA[
    public container buildGetCheckInOutId(container        _con)
    {
        container   ret = _con;

        if (mode == WHSWorkExecuteMode::DriverCheckIn)
        {
            ret += [this.buildControl(#RFLabel, "@WAX4153", "@WAX4153", 1, '', #WHSRFUndefinedDataType, '', 0, true, "", WHSRFColorText::Default, extendedTypeNum(WHSId))];
        }
        else
        {
            ret += [this.buildControl(#RFLabel, "@WAX4154", "@WAX4154", 1, '', #WHSRFUndefinedDataType, '', 0, true, "", WHSRFColorText::Default, extendedTypeNum(WHSId))];
        }

        ret += [this.buildControl(#RFLabel, 'Scan', 'Scan Id:', 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFText, #CheckInOutId, 'Id:', 1, pass.lookupStr(#CheckInOutId), extendedTypeNum(WHSId), '', 0)];

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    public container displayForm(container _con, str _buttonClicked = '')
    {
        WHSWorkExecuteDisplay       workExecuteDisplay = WHSWorkExecuteDisplay::construct(mode);
        container                   ret = conNull();
        container                   con = _con;
        WHSRFPassthrough            globalPass;
        int                         hasError = 0;
        boolean                     addCancel = true;
        container                   tmpFieldValues;
        WHSRFPassthrough            fieldValues = new WHSRFPassthrough(Types::String, Types::String);
        boolean                     complete;
        TMSAppointment              appt;

        globalPass = pass;
        pass = WHSRFPassthrough::create(conPeek(_con, 2));

        pass = this.combineMaps(globalPass, pass);

        hasError = this.hasError(_con);

        if (pass.exists(#UserId))
        {
            userId = pass.lookup(#UserId);
        }

        switch (step)
        {
            case 0, 1:
                if (pass.exists(#WorkComplete))
                {
                    if (mode == WHSWorkExecuteMode::DriverCheckIn)
                    {
                        ret = this.addErrorLabel(ret, "@WAX4158", WHSRFColorText::Success);
                    }
                    else
                    {
                        ret = this.addErrorLabel(ret, "@WAX4159", WHSRFColorText::Success);
                    }

                    pass.remove(#WorkComplete);
                    addCancel = false;
                }

                if (step)
                {
                    if (hasError)
                    {
                        con = conDel(con, 3, 1);
                    }

                    [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);
                    fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                    pass = this.combineMaps(pass, fieldValues);

                    [ret, complete] = this.processFieldValues(con, fieldValues);

                    if (complete)
                    {
                        ret = conNull();
                        if (mode == WHSWorkExecuteMode::DriverCheckIn)
                        {
                            ret = this.buildCheckIn(ret);

                            step = 2;
                        }
                        else
                        {
                            ret = this.buildCheckOut(ret);

                            step = 4;
                        }
                    }
                }
                else
                {
                    step = 1;
                    pass.insert(#Initiation, '1');
                    ret = this.buildGetCheckInOutId(ret);
                }
                break;

            case 2:
                if (hasError)
                {
                    con = conDel(con, 3, 1);
                }

                [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);
                fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                pass = this.combineMaps(pass, fieldValues);

                if (!fieldValues.empty())
                {
                    [ret, complete] = this.processFieldValues(con, fieldValues);

                    if (complete)
                    {
                        ret = conNull();

                        appt = TMSAppointment::findActiveByLoadId(pass.lookup(#LoadId));

                        pass.insert(#SelectedValue, TMSCarrier::find(appt.CarrierCode).Name);

                        ret = this.buildCarrier(ret,'',false, true, true, pass.lookup(#SelectedValue));

                        step = 3;
                    }
                }
                break;

            case 3:
                if (hasError)
                {
                    con = conDel(con, 3, 1);
                }

                [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);
                fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                pass = this.combineMaps(pass, fieldValues);

                [ret, complete] = this.processFieldValues(con, fieldValues);

                this.driverCheckIn();

                pass = this.resetPassthrough(con, false);
                pass.insert(#WorkComplete, 1);
                con = conPoke(con, 2, pass.pack());
                step = 0;
                workExecuteDisplay.setGlobals(mode, step, userId, pass, null);
                ret = workExecuteDisplay.displayForm(con, _buttonClicked);
                pass = new WHSRFPassthrough(Types::String, Types::String);
                pass = WHSRFPassthrough::create(conPeek(ret, 2));
                break;

            case 4:
                if (hasError)
                {
                    con = conDel(con, 3, 1);
                }

                [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);
                fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                pass = this.combineMaps(pass, fieldValues);

                if (!fieldValues.empty())
                {
                    [ret, complete] = this.processFieldValues(con, fieldValues);

                    if (complete)
                    {
                        this.driverCheckOut();

                        pass = this.resetPassthrough(con, false);
                        pass.insert(#WorkComplete, 1);
                        con = conPoke(con, 2, pass.pack());
                        step = 0;
                        workExecuteDisplay.setGlobals(mode, step, userId, pass, null);
                        ret = workExecuteDisplay.displayForm(con, _buttonClicked);
                        pass = new WHSRFPassthrough(Types::String, Types::String);
                        pass = WHSRFPassthrough::create(conPeek(ret, 2));
                        break;
                    }
                }
                break;
        }

        ret = this.updateModeStepPass(ret, mode, step, pass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>driverCheckIn</Name>
				<Source><![CDATA[
    public void driverCheckIn()
    {
        TMSAppointment  appt;
        TMSDriverLog    driverLog;
        WHSLoadTable    loadTable;

        ttsbegin;

        appt = TMSAppointment::findActiveByLoadId(pass.lookup(#LoadId), true);

        driverLog = TMSDriverLog::find(appt.ApptId, true);
        driverLog.ActualStartUTCDateTime = DateTimeUtil::utcNow();
        driverLog.updateDates();
        driverLog.update();

        appt.ApptStatus = TMSApptStatus::CheckedIn;
        appt.CarrierCode = pass.lookup(#Carrier);
        appt.createHistory(enum2str(TMSApptStatus::CheckedIn));
        appt.update();

        loadTable = WHSLoadTable::find(pass.lookup(#LoadId), true);
        loadTable.CarrierCode = pass.lookup(#Carrier);
        loadTable.update();

        WHSMobileDeviceActivityLogger::newStandard(userId, WHSWorkExecuteMode::DriverCheckIn)
            .append(#WHSLabelFromEDT(TMSApptRefNum), appt.ApptRefNum)
            .save();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>driverCheckOut</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates appointment record and driver logs when driver checks out.
    /// </summary>
    public void driverCheckOut()
    {
        TMSAppointment  appt;
        TMSDriverLog    driverLog;

        ttsbegin;

        appt = TMSAppointment::findActiveByLoadId(pass.lookup(#LoadId), true);

        appt.createHistory(enum2str(TMSApptStatus::Completed));

        driverLog = TMSDriverLog::find(appt.ApptId, true);
        driverLog.ActualEndUTCDateTime = DateTimeUtil::utcNow();
        driverLog.update();
        driverLog.updateDates();

        WHSMobileDeviceActivityLogger::newStandard(userId, WHSWorkExecuteMode::DriverCheckOut)
            .append(#WHSLabelFromEDT(TMSApptRefNum), appt.ApptRefNum)
            .save();

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>