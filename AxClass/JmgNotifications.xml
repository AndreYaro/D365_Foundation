<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgNotifications</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgNotifications</c> class is used to handle the messages that are shown on the registration
///    form.
/// </summary>
class JmgNotifications extends Object
{
    JmgBulletinBoard        jmgBB;
    FormGroupControl        myParent;
    FormRun                 parentForm;
    JmgWorkerRecId          worker;
    JmgWorkerRecId          lastWorker;
    container               messagesContainer;
    int                     elements;
    int                     totalElements;
    int64                   docRecID;
    FormStaticTextControl   noMsgs;
    container               myGroups;
    container               myFroms;
    container               mySents;
    container               myBodys;
    container               mychecks;
    container               myImages;
    container               mySubjects;
    container               myMsgIDs;
    Object                  cptCtrl;
    int                     limit;
    boolean                 headlinesOnly;

    #define.MessageID(1)
    #define.Message(2)
    #define.IsPublic(3)
    #define.Receipt(4)
    #define.Subject(5)
    #define.DocExists(6)
    #define.CreatedBy(7)
    #define.ViewDateTime(8)
    #define.MessageType(9)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkForMarked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a message has been checked.
    /// </summary>
    /// <returns>
    ///    true if a message has been checked; otherwise, false.
    /// </returns>
    public boolean checkForMarked()
    {
        FormCheckBoxControl checkBox;
        boolean             ret = false;
        int i;

        for (i = 1; i <= conlen(myMsgIds); i++)
        {
            checkBox = parentForm.control(conpeek(myChecks, i));
            if (checkBox.visible() && checkBox.value())
            {
                this.readMsg(conpeek(myMsgIds, i));
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearWorker</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the worker parameter.
    /// </summary>
    void clearWorker()
    {
        worker = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureMessageControlsCreated</Name>
				<Source><![CDATA[
    private void ensureMessageControlsCreated(int msgNo)
    {
        FormGroupControl        fgc;
        FormGroupControl        fgcII;
        FormStaticTextControl   bodyTxt;
        FormStaticTextControl   subjectTxt;
        FormStaticTextControl   fromTxt;
        FormStaticTextControl   sentTxt;
        FormWindowControl       fwc;
        FormCheckBoxControl     fcb;

        if (msgNo >= conlen(myGroups))
        {
            fgc = myParent.addControl(FormControlType::Group,'Group'+int2str(msgNo));
            myGroups += fgc.id();

            fgcII = fgc.addControl(FormControlType::Group,'grp'+int2str(msgNo));
            fgcII.columns(2);

            fwc = fgcII.addControl(FormControlType::Image,'img'+int2str(msgNo));

            fwc.width(Imagelist::smallIconWidth());
            fwc.alignControl(false);
            myImages += fwc.id();

            subjectTxt = fgcII.addControl(FormControlType::StaticText,'subj'+int2str(msgNo));
            subjectTxt.displayLengthMode(AutoMode::Auto);
            subjectTxt.allowEdit(false);
            mySubjects += subjectTxt.id();

            fgcII = fgc.addControl(FormControlType::Group,'grpII'+int2str(msgNo));
            fgcII.columns(2);

            fromTxt = fgcII.addControl(FormControlType::StaticText,'str'+int2str(msgNo));
            myFroms += fromTxt.id();

            sentTxt = fgcII.addControl(FormControlType::StaticText,'sent'+int2str(msgNo));
            sentTxt.displayLengthMode(AutoMode::Auto);
            mySents += sentTxt.id();

            bodyTxt = fgc.addControl(FormControlType::StaticText,'Body'+int2str(msgNo));
            bodyTxt.allowEdit(false);
            myBodys += bodyTxt.id();

            fcb = fgc.addControl(FormControlType::CheckBox,'check'+int2str(msgNo));
            fcb.label("@SYS116451");
            fcb.style(CheckBoxStyle::Checkbox);
            fcb.viewEditMode(ViewEditMode::Edit);
            myChecks += fcb.id();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAttachText</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the text that is attached to the specified element.
    /// </summary>
    /// <param name="_curElement">
    ///    The ID of the element.
    /// </param>
    /// <returns>
    ///    The text that is attached to the specified element.
    /// </returns>
    private str findAttachText(int _curElement)
    {
        DocuRef             docRef;
        JmgBulletinBoard    bBoard;
        JmgMsgId            myID = conpeek(messagesContainer, _curElement * elements + 1);

        select firstonly MsgId, TableId, RecId, DataAreaId
        from bBoard
        where bBoard.MsgId == myID;

        select Name
        from docRef
        where docRef.RefTableId   == bBoard.TableId &&
              docRef.RefRecId     == bBoard.RecId &&
              docRef.RefCompanyId == bBoard.DataAreaId;

        docRecID = docRef.RecId;

        return docRef.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessageData</Name>
				<Source><![CDATA[
    private anytype getMessageData(int _messageNo, int _messagePart)
    {
        return conpeek(messagesContainer, _messageNo * elements + _messagePart);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessageFormatedViewDate</Name>
				<Source><![CDATA[
    private str getMessageFormatedViewDate(int _messageNo)
    {
        #JmgConstants
        utcdatetime     dt = DateTimeUtil::parse(this.getMessageData(_messageNo, #ViewDateTime));
        str             dtStr;
        JmgDayIdEnum    wkDay;

        if (DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) == DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(dt, DateTimeUtil::getUserPreferredTimeZone())))
        {
            dtStr = time2str(DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(dt, DateTimeUtil::getUserPreferredTimeZone())),-1,-1);
        }
        else
        {
            wkDay = dayofwk(DateTimeUtil::date(dt))-1;
            dtStr = strfmt("@SYS311966", substr(enum2str(wkDay), 1, 3), DateTimeUtil::date(dt));
        }

        return dtStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessages</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds relevant messages for the current worker, and displays them on the provided element.
    /// </summary>
    /// <param name="_updateSelf">
    ///    A Boolean value that specifies whether to have update messages displayed continuously.
    /// </param>
    /// <param name="_forceUpdate">
    ///    A Boolean value that indicates whether to force an update of the displayed messages.
    /// </param>
    public void getMessages(boolean _updateSelf = true, boolean _forceUpdate = false)
    {
        boolean             docExist;
        JmgBulletinBoard    bBoard;
        boolean             doUpdate = false;

        doUpdate = this.checkForMarked() || (worker && lastWorker != worker) || _forceUpdate;

        if (doUpdate)
        {
            jmgBB = JmgNotifications::updateMessages(worker);

            totalElements = 0;
            messagesContainer = connull();
            while select jmgBB
            order by MessageType desc, PublicMessage, ViewDateTimeTo
            {
                select firstonly bBoard where bBoard.MsgId == jmgBB.MsgId;
                docExist = DocuRef::exist(bBoard.DataAreaId,bBoard.TableId,bBoard.RecId);
                messagesContainer += [
                        jmgBB.MsgId,        // #MessageID
                        jmgBB.Message,      // #Message
                        jmgBB.PublicMessage,// #IsPublic
                        jmgBB.Receipt,      // #Receipt
                        jmgBB.Subject,      // #Subject
                        docExist,           // #DocExists
                        jmgBB.CreatedBy,    // #CreatedBy
                        DateTimeUtil::toStr(jmgBB.ViewDateTime), // #ViewDateTime
                        jmgBB.MessageType   //#MessageType
                     ];
                totalElements++;
            }
            this.showCurrentMessage();

            if (cptCtrl != null)
            {
                if (classidget(cptCtrl) == classnum(FormTabPageControl))
                {
                    cptCtrl.caption(strfmt("@SYS70938","@SYS74342",totalElements));
                }
                else if (classidget(cptCtrl) == classnum(FormButtonControl))
                {
                    cptCtrl.text(strfmt("@SYS70938","@SYS301839",totalElements));
                }
            }
        }

        lastWorker = worker;
        if (!_updateSelf && !doUpdate)
            return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>JmgNotifications</c> object.
    /// </summary>
    public void init()
    {
        int i;
        elements = 9;
        limit = 5000;

        lastWorker = -10;

        myGroups = connull();
        myFroms = connull();
        mySents = connull();
        myBodys = connull();
        mychecks = connull();
        myMsgIDs = conNull();

        for (i = 1; i <= myParent.controlCount(); i++)
        {
            myParent.controlNum(i).visible(false);
        }
        noMsgs = myParent.addControl(FormControlType::StaticText,'noMsg');
        noMsgs.text("@SYS300074");
        noMsgs.widthMode(1);
        noMsgs.heightMode(1);
        noMsgs.allowEdit(false);

        this.getMessages();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>JmgNotifications</c> class.
    /// </summary>
    /// <param name="_parentControl">
    ///    The <c>FormGroupControl</c> object, which is used to display the messages.
    /// </param>
    /// <param name="_formRun">
    ///    A reference to the calling form.
    /// </param>
    /// <param name="_captionCtrl">
    ///    The control that is used to display the caption of the notifications part.
    /// </param>
    void new(FormGroupControl _parentControl, FormRun _formRun, FormControl _captionCtrl = null)
    {
        myParent = _parentControl;
        parentForm = _formRun;
        cptCtrl = _captionCtrl;
        super();
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHeadlinesOnly</Name>
				<Source><![CDATA[
    public boolean parmHeadlinesOnly(boolean _headlinesOnly = headlinesOnly)
    {
        headlinesOnly = _headlinesOnly;
        return headlinesOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLimitMsgs</Name>
				<Source><![CDATA[
    public int parmLimitMsgs(int _limit = limit)
    {
        limit = _limit;
        return limit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorker</Name>
				<Source><![CDATA[
    public JmgWorkerRecId parmWorker(JmgWorkerRecId _worker = worker)
    {
        worker = _worker;
        return worker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readMsg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks a message as read.
    /// </summary>
    /// <param name="_myID">
    /// The ID of the message to mark as read.
    /// </param>
    private void readMsg(JmgMsgId _myID)
    {
        JmgBulletinBoardRecipient   jmgBBR;

        ttsbegin;
        select jmgBB
            where   jmgBB.MsgId == _myID
            join firstonly forupdate jmgBBR
            where jmgBBR.MsgId == jmgBB.MsgId && jmgBBR.Worker == (worker ? worker:lastWorker);

        if (jmgBBR)
        {
            jmgBBR.MessageRead = NoYes::Yes;
            jmgBBR.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCurrentMessage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows the currently selected message to the user.
    /// </summary>
    private void showCurrentMessage()
    {
        FormGroupControl        fgc;
        FormStaticTextControl   bodyTxt;
        FormStaticTextControl   subjectTxt;
        FormStaticTextControl   fromTxt;
        FormStaticTextControl   sentTxt;
        FormWindowControl       fwc;
        FormCheckBoxControl     fcb;
        str                     dtStr;
        int                     msgNo;
        int                     resourceID;

        myMsgIDs = connull();

        noMsgs.visible(!totalElements);

        for (msgNo = 0; msgNo < max(totalElements, conlen(myGroups)) ; msgNo++)
        {
            this.ensureMessageControlsCreated(msgNo);

            fgc = parentForm.control(conpeek(myGroups, msgNo + 1));
            if ((msgNo >= totalElements) || (msgNo >= limit))
            {
                fgc.visible(false);
            }
            else
            {
                // set message subject
                subjectTxt = parentForm.control(conpeek(mySubjects, msgNo + 1));
                subjectTxt.text(strfmt("@SYS327892", msgNo + 1, totalElements, this.getMessageData(msgNo, #Subject)));

                // set messageFrom
                fromTxt = parentForm.control(conpeek(myFroms,msgNo+1));
                fromTxt.text(strfmt("@SYS311966","@SYS131757",this.getMessageData(msgNo, #CreatedBy)));
                fromTxt.visible(!this.parmHeadlinesOnly());

                // set view date
                dtStr = this.getMessageFormatedViewDate(msgNo);
                sentTxt = parentForm.control(conpeek(mySents,msgNo+1));
                sentTxt.text(dtStr);
                sentTxt.visible(!this.parmHeadlinesOnly());

                // set body text
                bodyTxt = parentForm.control(conpeek(myBodys,msgNo+1));
                bodyTxt.text(this.getMessageData(msgNo, #Message));
                bodyTxt.visible(!this.parmHeadlinesOnly());

                fcb = parentForm.control(conpeek(myChecks,msgNo+1));
                fcb.value(0);
                fcb.visible(fcb.enabled(!this.parmHeadlinesOnly() && !this.getMessageData(msgNo, #IsPublic)));

                fwc = parentForm.control(conpeek(myImages,msgNo+1));
                resourceID = 927 + this.getMessageData(msgNo, #MessageType);
                fwc.imageResource(resourceID);
                myMsgIds += this.getMessageData(msgNo, #MessageID);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMessages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>JmgBulletinBoard</c> temporary buffer that has messages to show for the specified
    /// worker.
    /// </summary>
    /// <param name="_worker">
    /// The ID of the worker for which to fetch messages.
    /// </param>
    /// <returns>
    /// a <c>JmgBulletinBoard</c> temporary buffer that has messages to show for the specified worker.
    /// </returns>
    private static JmgBulletinBoard updateMessages(JmgWorkerRecId _worker)
    {
        JmgBulletinBoard jmgBB = null;

        if (_worker)
        {
            jmgBB = JmgBulletinBoard::findPersonalMessages(_worker, NoYes::Yes);
        }

        return jmgBB;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>