<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendTransPostingProfileAccountsDataUpgrade</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysSetupTableAttribute(tableStr(VendTrans))]
final class VendTransPostingProfileAccountsDataUpgrade Extends SysSetupAsync implements SysSetup
{
    #OCCRetryCount

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements the loadData method of the <c>SysSetup</c> interface.
    /// </summary>
    public void loadData()
    {
        CompanyInfo companyInfo;

        while select companyInfo
        {
            changecompany(companyInfo.DataArea)
            {
                VendTransPostingProfileAccountsDataUpgrade::performUpgrade();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performUpgrade</Name>
				<Source><![CDATA[
    internal static void performUpgrade()
    {
        try
        {
            ttsbegin;
            VendTransPostingProfileAccountsDataUpgrade::processOperation();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() < #RetryNum)
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (xSession::currentRetryCount() < #RetryNum)
            {
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSkipMethods</Name>
				<Source><![CDATA[
    private static void setSkipMethods(Common _common)
    {
        _common.skipAosValidation(true);
        _common.skipDatabaseLog(true);
        _common.skipDataMethods(true);
        _common.skipEvents(true);
        _common.skipPostLoad(true);
        _common.skipNumberSequenceCheck(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOperation</Name>
				<Source><![CDATA[
    private static void processOperation()
    {
        VendTrans vendTrans;
        SubLedgerVoucherGeneralJournalEntry subLedgerVoucherGeneralJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;
        MainAccount mainAccount;

        VendTransPostingProfileAccountsDataUpgrade::setSkipMethods(vendTrans);

        //Updating arrival account
        update_recordset vendTrans
                setting ArrivalAccountId = mainAccount.MainAccountId
            join  MainAccountId from mainAccount
            join dimensionAttributeValueCombination
                where dimensionAttributeValueCombination.MainAccount == mainAccount.RecId
            Join generalJournalAccountEntry
                where generalJournalAccountEntry.LedgerDimension == dimensionAttributeValueCombination.RecId
                    && generalJournalAccountEntry.PostingType == LedgerPostingType::VendBalance
            join subLedgerVoucherGeneralJournalEntry
                where subLedgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalAccountEntry.GeneralJournalEntry
                    && vendTrans.Voucher == subLedgerVoucherGeneralJournalEntry.Voucher
                    && vendTrans.TransDate == subLedgerVoucherGeneralJournalEntry.AccountingDate
                    && vendTrans.ArrivalAccountId == ''
                    && vendTrans.Arrival == NoYes::Yes;

        //Updating sumamry account
        update_recordset vendTrans
                setting SummaryAccountId = mainAccount.MainAccountId
            join  MainAccountId from mainAccount
            join dimensionAttributeValueCombination
                    where dimensionAttributeValueCombination.MainAccount == mainAccount.RecId
            Join generalJournalAccountEntry
                    where generalJournalAccountEntry.LedgerDimension == dimensionAttributeValueCombination.RecId
                        && generalJournalAccountEntry.PostingType == LedgerPostingType::VendBalance
            join subLedgerVoucherGeneralJournalEntry
                    where subLedgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalAccountEntry.GeneralJournalEntry
                        && vendTrans.Voucher == subLedgerVoucherGeneralJournalEntry.Voucher
                        && vendTrans.TransDate == subLedgerVoucherGeneralJournalEntry.AccountingDate
                        && vendTrans.SummaryAccountId == ''
                        && vendTrans.Approved == NoYes::Yes
                        && vendTrans.Arrival == NoYes::No;

        //Updating sumamry account
        update_recordset vendTrans
                setting SummaryAccountId = mainAccount.MainAccountId
            join  MainAccountId from mainAccount
            join dimensionAttributeValueCombination
                    where dimensionAttributeValueCombination.MainAccount == mainAccount.RecId
            Join generalJournalAccountEntry
                    where generalJournalAccountEntry.LedgerDimension == dimensionAttributeValueCombination.RecId
                        && generalJournalAccountEntry.PostingType == LedgerPostingType::VendBalance
            join subLedgerVoucherGeneralJournalEntry
                    where subLedgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalAccountEntry.GeneralJournalEntry
                        && vendTrans.Voucher == subLedgerVoucherGeneralJournalEntry.Voucher
                        && vendTrans.TransDate == subLedgerVoucherGeneralJournalEntry.AccountingDate
                        && vendTrans.ArrivalAccountId != mainAccount.MainAccountId
                        && vendTrans.SummaryAccountId == ''
                        && vendTrans.Approved == NoYes::Yes
                        && vendTrans.Arrival == NoYes::Yes;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>