<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconMatchingMatchDocumentClear</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>BankReconciliationMatchingMatch</c> class contains business logic
///     for matching bank statement and bank document.
/// </summary>
[BankReconciliationMatchingAttribute(BankReconciliationMatchingType::DocumentClear)]
class BankReconMatchingMatchDocumentClear extends BankReconciliationMatchingMatch
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isEntryCounterDual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the entry counter.
    /// </summary>
    /// <param name="_entryCount">
    /// The entry counter.
    /// </param>
    /// <returns>
    /// True if the entry counter meets the criteria; otherwise, false.
    /// </returns>
    protected boolean isEntryCounterDual(Counter _entryCount)
    {
        #define.Dual(2)
        return _entryCount == #Dual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
        protected boolean validate()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = this.validateDocumentClear();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBalance</Name>
				<Source><![CDATA[
        protected boolean validateBalance()
    {
        boolean result = true;

        if (this.getDocumentBalance() != 0)
        {
            result = this.validateError("@CashManagement:ReconcileReversedTwoTransactions");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankTransType</Name>
				<Source><![CDATA[
        protected boolean validateBankTransType()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCounter</Name>
				<Source><![CDATA[
        protected boolean validateCounter()
    {
        boolean result = true;

        if (!(this.isEntryCounterDual(documentList.elements())
            && this.isEntryCounterNone(statementList.elements())))
        {
            result = this.validateError("@CashManagement:ReconcileReversedTwoTransactions");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDate</Name>
				<Source><![CDATA[
        protected boolean validateDate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDocumentClear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the bank documents can be cleared.
    /// </summary>
    /// <returns>
    /// True if the bank documents can be cleared; otherwise, false.
    /// </returns>
    protected boolean validateDocumentClear()
    {
        BankDocument                    bankDocument;
        BankDocument                    bankDocumentMatched;
        BankReconciliationMatchingEntry matchingEntry;
        ListEnumerator                  enumerator;
        boolean                         result = true;

        enumerator = documentList.getEnumerator();

        if (enumerator.moveNext())
        {
            matchingEntry = enumerator.current();
            bankDocument = BankDocument::newFromBankDocumentTableRecId(matchingEntry.parmRefRecId());
        }

        if (enumerator.moveNext())
        {
            matchingEntry = enumerator.current();
            bankDocumentMatched = BankDocument::newFromBankDocumentTableRecId(matchingEntry.parmRefRecId());
        }

        Debug::assert((bankDocument != null) && (bankDocumentMatched != null));

        //validate same bank account, transaction type, payment reference
        if (bankDocument.getBankAccount() != bankDocumentMatched.getBankAccount())
        {
            result = false;
        }

        if (result)
        {
            if (bankDocument.getBankTransType() != bankDocumentMatched.getBankTransType())
            {
                result = false;
            }
        }

        if (result)
        {
            if (bankDocument.getReference() != bankDocumentMatched.getReference())
            {
                result = false;
            }
        }

        if (result)
        {
            //validate bank document type
            if (bankDocument.getDocumentType()              != BankDocumentBookType::Others
                || bankDocumentMatched.getDocumentType()    != BankDocumentBookType::Others)
            {
                result = false;
            }
        }

        if (!result)
        {
            this.validateError("@CashManagement:ReconcileReversedTwoTransactions");
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>