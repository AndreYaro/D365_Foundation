<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RhrmJournalCheckUnPost_Transfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RhrmJournalCheckUnPost_Transfer extends RHRMJournalCheckPost implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
        protected boolean checkJournal(JournalTransList _journalTransList)
    {
        boolean ret;

        ret = super(_journalTransList);

        if (ret && isConfigurationkeyEnabled(configurationKeyNum(RPayroll)))
        {
            ret = this.checkTblExist(_journalTransList);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
        protected boolean checkTrans(JournalTransData _journalTransData)
    {
        RPayHistory                 rPayHistory;
        boolean                     ret;
        RHRMOrderTrans              rhrmOrderTrans = _journalTransData.journalTrans();
        RHRMStaffListHistoryCheck   rhrmStaffListHistoryCheck;

        ret = super(_journalTransData);

        if (RPayHistory::find(rhrmOrderTrans.EmplId).RecId != RPayHistory::findOrderTransRecId(rhrmOrderTrans.RecId).RecId)
        {
            ret = ret && checkFailed(strFmt("@RUP1869",
                                            rhrmOrderTrans.EmplId,
                                            RHRMEmplTable::emplId2Name(rhrmOrderTrans.EmplId)));
        }

        if ((select firstonly rpayTrans
                 where rpayTrans.Emplid    == rHRMOrderTrans.EmplId &&
                       rpayTrans.PayPeriod >= rHRMOrderTrans.StartDate).RecId)
        {
            ret = ret && checkFailed(strfmt("@RUP1834",
                                            rHRMOrderTrans.EmplId,
                                            RHRMEmplTable::emplId2Name(rHRMOrderTrans.EmplId)));
        }

        if (!RHRMParameters::find().AllowOverdraft)
        {
            rPayHistory = RPayHistory::findLastSignOnMove(rhrmOrderTrans.EmplId, rhrmOrderTrans.StartDate, rhrmOrderTrans.RecId);
            if (rPayHistory.hrmStaffListRefRecId)
            {
                rhrmStaffListHistoryCheck = new RHRMStaffListHistoryCheck(rPayHistory.hrmStaffListRefRecId, maxDate());
                rhrmStaffListHistoryCheck.deleteHistory(rhrmOrderTrans);
                if (! rhrmStaffListHistoryCheck.historyIsCorrect())
                {
                    ret = ret && checkFailed(strFmt("@RUP1909",
                                                    rhrmOrderTrans.EmplId,
                                                    RHRMEmplTable::emplId2Name(rhrmOrderTrans.EmplId)));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTrans</Name>
				<Source><![CDATA[
        protected void postTrans(JournalTransData _journalTransData)
    {
        RHRMOrderTrans          rhrmOrderTrans          = _journalTransData.journalTrans();
        RPayHistory             rPayHistoryLast         = RPayHistory::findLastSignOnMove(rhrmOrderTrans.EmplId,
                                                                                          rhrmOrderTrans.StartDate,
                                                                                          rhrmOrderTrans.RecId);
        RHRMEmplTable           emplTable               = RHRMEmplTable::find(rhrmOrderTrans.EmplId, true);
        RpayHRMOrganizationId   organizationId;

        super(_journalTransData);

        emplTable.HcmTitle = rPayHistoryLast.HcmTitle;

        if (emplTable.HcmTitle != rhrmOrderTrans.HcmTitle)
            emplTable.PersonnelCategoryId = RHRMPersonTitleTable::find(emplTable.HcmTitle).PersonnelCategoryId;

        emplTable.PayHRMOrganizationId  = rPayHistoryLast.HrmOrganizationId;
        emplTable.TermDate              = dateNull();
        emplTable.KindOfWork            = RHRMKindOfWork::Permanent;

        emplTable.doUpdate();

        rPayHistoryLast = RPayHistory::findOrderTransRecId(rhrmOrderTrans.RecId, true);
        organizationId  = rPayHistoryLast.HrmOrganizationId;
        rPayHistoryLast.doDelete();

        this.deleteRates(rhrmOrderTrans);

        if (updateTbl && isConfigurationkeyEnabled(configurationkeynum(RPayTbl)))
        {
            RPayTblSpecTimeTrans::reCreateTbl(rHRMOrderTrans.EmplId,
                                              max(dateStartMth(RPayParameters::payPeriod()), dateStartMth(rHRMOrderTrans.StartDate)),
                                              dateNull(),
                                              organizationId);
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>