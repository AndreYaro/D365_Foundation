<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayTaxWithholdPeriodFunc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Implements folder functor to calculate tax based on employee tax state (withhold).
/// </summary>
class rPayTaxWithholdPeriodFunc implements IRPayTaxCalcFunctor
{
    RPayTaxCalcContext      calcContext;
    QueryRun                queryRunItem;

    RPayCorrectedPeriod     correctedPeriod;
    ReportPeriod_RU         payPeriod;
    RHRMPayMainEmplId       emplId;
    Map                     taxAmount2RefundDed;
    RPayAmount              limitWithholdAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>apply</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the function.
    /// </summary>
    /// <param name="_args">
    /// The argument.
    /// </param>
    /// <param name="_context">
    /// The context.
    /// </param>
    /// <returns>
    /// The result.
    /// </returns>
    public Object apply(anytype _args, Object _context)
    {
        Object obj;

        calcContext = _context as RPayTaxCalcContext;
        Debug::assert(calcContext != null);

        Debug::assert(typeOf(_args) == Types::Class);
        obj = _args;

        queryRunItem = obj as QueryRun;
        Debug::assert(queryRunItem != null);

        this.initFun();
        this.withhold();

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyWithholdLimit</Name>
				<Source><![CDATA[
        private RPayAmount applyWithholdLimit(RPayAmount _amount2Withhold)
    {
        RPayTaxEmplSum taxEmplSum;
        RPayAmount     amountWithheld;

        select sum(DeductTaxAmount), sum(PayrollRedemptionAmount) from taxEmplSum
            where   taxEmplSum.EmplId       == emplId
                &&  taxEmplSum.PayPeriod    == payPeriod
                &&  taxEmplSum.Source == NoYes::No;

        amountWithheld = taxEmplSum.DeductTaxAmount - taxEmplSum.PayrollRedemptionAmount;

        if ((amountWithheld + _amount2Withhold) <= limitWithholdAmount)
        {
            return _amount2Withhold;
        }
        else
        {
            if (limitWithholdAmount == 0)
            {
                return 0;
            }
            else
            {
                return max(0, limitWithholdAmount - amountWithheld);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides accessebility to external variables from functor.
    /// </summary>
    /// <param name="_closure">
    /// The closure.
    /// </param>
    public void closure(anytype _closure)
    {
        RPayTaxWithholdClosure  closure;

        if (typeOf(_closure) == Types::Class)
        {
            closure = _closure;

            taxAmount2RefundDed = closure.parmTaxAmount2RefundDeduction();
            limitWithholdAmount = closure.parmLimitWithholdAmount();
        }
        else
        {
            throw error(Error::missingParameter(null));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewStatus</Name>
				<Source><![CDATA[
        private container getNewStatus(RPayEmplTaxStatus _prevStatus)
    {
        RPayTaxEmplSum taxSumStatus;
        RPayTaxIncomeGroupTable groupTableStatus;

        select firstonly BranchId, RecId from taxSumStatus
            where  taxSumStatus.EmplId            == emplId
                && taxSumStatus.CorrectedPeriod   == correctedPeriod
                && taxSumStatus.PayPeriod         <= payPeriod
                && taxSumStatus.Source            == NoYes::No
            join  EmplTaxStatus from groupTableStatus
                where  groupTableStatus.RpayTaxIncomeGroupCode == taxSumStatus.RpayTaxIncomeGroupCode
                    && groupTableStatus.EmplTaxStatus          != _prevStatus;

        if (taxSumStatus.RecId == 0) //system identified that status has changed but there is no transaction for new status in corrected period
        {
            select firstonly BranchId, RecId from taxSumStatus
                where  taxSumStatus.EmplId            == emplId
                    && taxSumStatus.CorrectedPeriod   <  correctedPeriod
                    && taxSumStatus.CorrectedPeriod   >= dateStartYr(correctedPeriod)
                    && taxSumStatus.PayPeriod         == payPeriod
                    && taxSumStatus.Source            == NoYes::No
                join  EmplTaxStatus from groupTableStatus
                    where  groupTableStatus.RpayTaxIncomeGroupCode == taxSumStatus.RpayTaxIncomeGroupCode
                        && groupTableStatus.EmplTaxStatus          != _prevStatus;
        }

        return [groupTableStatus.EmplTaxStatus, taxSumStatus.BranchId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleBranchChange</Name>
				<Source><![CDATA[
        private void handleBranchChange()
    {
        RPayTaxEmplSum      taxSumPrev, taxSumPrevUpd, taxSumNew;
        BranchId_RU         prevBranchId;
        RPayEmplTaxStatus   prevStatus;
        RPayAmount          prevAmount, amount2RefundPrev;

        [prevStatus, prevBranchId] = RPayTaxEmplSum::findLastTaxStatusBranch(payPeriod, correctedPeriod, emplId);

        while select sum(DeductTaxAmount), sum(PayrollRedemptionAmount) from taxSumPrev
            group by RpayTaxIncomeGroupCode
            where  taxSumPrev.EmplId            == emplId
                && taxSumPrev.PayPeriod         <= payPeriod
                && taxSumPrev.CorrectedPeriod   == correctedPeriod
                && taxSumPrev.Source            == NoYes::No
                && taxSumPrev.BranchId          == prevBranchId
        {
            prevAmount          = taxSumPrev.DeductTaxAmount - taxSumPrev.PayrollRedemptionAmount;
            amount2RefundPrev   = 0;

            select firstonly forupdate * from taxSumNew
                where  taxSumNew.EmplId            == emplId
                    && taxSumNew.PayPeriod         == payPeriod
                    && taxSumNew.CorrectedPeriod   == correctedPeriod
                    && taxSumNew.Source            == NoYes::No
                    && taxSumNew.BranchId          != prevBranchId
                    && taxSumNew.RpayTaxIncomeGroupCode == taxSumPrev.RpayTaxIncomeGroupCode;

            if (prevAmount >= taxSumNew.AddTaxAmount)
            {
                switch (calcContext.taxParameters().ReimbursementType)
                {
                    case RPayTaxReimbursementType::RefundBank:
                        taxSumNew.DeductTaxAmount   = taxSumNew.AddTaxAmount;
                        amount2RefundPrev           = prevAmount - taxSumNew.DeductTaxAmount;
                        break;

                    case RPayTaxReimbursementType::RefundPayroll:
                        taxSumNew.DeductTaxAmount = taxSumNew.AddTaxAmount;
                        break;

                    case RPayTaxReimbursementType::ReckoningTax:
                        if (taxAmount2RefundDed.exists(taxSumNew.RpayTaxIncomeGroupCode))
                        {
                            amount2RefundPrev = taxAmount2RefundDed.lookup(taxSumNew.RpayTaxIncomeGroupCode);
                            taxAmount2RefundDed.remove(taxSumNew.RpayTaxIncomeGroupCode);
                        }
                        taxSumNew.DeductTaxAmount = prevAmount;
                        break;
                }
            }
            else
            {
                taxSumNew.DeductTaxAmount = taxSumNew.AddTaxAmount;
            }
            taxSumNew.update();

            select firstonly forupdate * from taxSumPrevUpd
                where  taxSumPrevUpd.EmplId            == emplId
                    && taxSumPrevUpd.PayPeriod         == payPeriod
                    && taxSumPrevUpd.CorrectedPeriod   == correctedPeriod
                    && taxSumPrevUpd.Source            == NoYes::No
                    && taxSumPrevUpd.BranchId          == prevBranchId
                    && taxSumPrevUpd.RpayTaxIncomeGroupCode == taxSumPrev.RpayTaxIncomeGroupCode;

            taxSumPrevUpd.PayrollRedemptionAmount = amount2RefundPrev;
            taxSumPrevUpd.DeductTaxAmount         = taxSumPrev.PayrollRedemptionAmount + amount2RefundPrev - taxSumPrev.DeductTaxAmount;
            taxSumPrevUpd.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleStatusChange</Name>
				<Source><![CDATA[
        private void handleStatusChange()
    {
        RPayTaxEmplSum          taxSumStatusPrev, taxSumStatusPrevUpd,
                                taxSumStatusPrevEmpty, taxSumStatusNew, taxSumStatusNewRate;
        RPayTaxEmplTrans        taxTransStatusPrevEmpty;
        RPayTaxIncomeGroupTable groupTableStatusPrev;
        BranchId_RU             prevBranchId, newBranchId;
        RPayEmplTaxStatus       prevStatus, newStatus;
        RpayTaxIncomeGroupCode  newTaxGroupCode;
        container               taxGroups;
        int i, len;
        RPayAmount              prevAmount, amount2RefundPrev;

        [prevStatus, prevBranchId] = RPayTaxEmplSum::findLastTaxStatusBranch(payPeriod, correctedPeriod, emplId);
        [newStatus, newBranchId]   = this.getNewStatus(prevStatus);

        //try to settle deducted amounts by groups
        while select sum(AddTaxAmount), sum(DeductTaxAmount), sum(PayrollRedemptionAmount), sum(DeductionStandardAmount), RpayTaxIncomeGroupCode from taxSumStatusPrev
            group by RpayTaxIncomeGroupCode
            where  taxSumStatusPrev.EmplId            == emplId
                && taxSumStatusPrev.CorrectedPeriod   == correctedPeriod
                && taxSumStatusPrev.PayPeriod         <= payPeriod
                && taxSumStatusPrev.BranchId          == prevBranchId
                && taxSumStatusPrev.Source            == NoYes::No
            exists join groupTableStatusPrev
                where  groupTableStatusPrev.RpayTaxIncomeGroupCode == taxSumStatusPrev.RpayTaxIncomeGroupCode
                    && groupTableStatusPrev.EmplTaxStatus          == prevStatus
        {
            taxGroups  = this.prevTaxGroup2NewTaxGroup(taxSumStatusPrev.RpayTaxIncomeGroupCode, newStatus);
            prevAmount = taxSumStatusPrev.DeductTaxAmount - taxSumStatusPrev.PayrollRedemptionAmount;
            len        = conLen(taxGroups);

            amount2RefundPrev = 0;
            //calculate amounts for new status
            for (i = 1; i <= len; ++i)
            {
                newTaxGroupCode = conPeek(taxGroups, i);

                select firstonly forupdate * from taxSumStatusNew
                    where  taxSumStatusNew.EmplId            == emplId
                        && taxSumStatusNew.CorrectedPeriod   == correctedPeriod
                        && taxSumStatusNew.PayPeriod         == payPeriod
                        && taxSumStatusNew.BranchId          == newBranchId
                        && taxSumStatusNew.Source            == NoYes::No
                        && taxSumStatusNew.RpayTaxIncomeGroupCode == newTaxGroupCode;

                if (taxSumStatusNew.RecId)
                {
                    if (prevAmount >= taxSumStatusNew.AddTaxAmount)
                    {
                        switch (calcContext.taxParameters().ReimbursementType)
                        {
                            case RPayTaxReimbursementType::RefundBank:
                                taxSumStatusNew.DeductTaxAmount = taxSumStatusNew.AddTaxAmount;
                                amount2RefundPrev               = prevAmount - taxSumStatusNew.DeductTaxAmount;
                                break;

                            case RPayTaxReimbursementType::RefundPayroll:
                                taxSumStatusNew.DeductTaxAmount = taxSumStatusNew.AddTaxAmount;
                                break;

                            case RPayTaxReimbursementType::ReckoningTax:
                                if (i > 1)
                                {
                                    taxSumStatusNew.DeductTaxAmount = 0; //update only first new group
                                }
                                else
                                {
                                    taxSumStatusNew.DeductTaxAmount = prevAmount;
                                }

                                if (taxAmount2RefundDed.exists(taxSumStatusNew.RpayTaxIncomeGroupCode))
                                {
                                    taxSumStatusNew.PayrollRedemptionAmount = taxAmount2RefundDed.lookup(taxSumStatusNew.RpayTaxIncomeGroupCode);
                                    taxAmount2RefundDed.remove(taxSumStatusNew.RpayTaxIncomeGroupCode);
                                }
                                else
                                {
                                    taxSumStatusNew.PayrollRedemptionAmount = 0;
                                }

                                break;
                        }
                    }
                    else
                    {
                        taxSumStatusNew.DeductTaxAmount += taxSumStatusPrev.DeductTaxAmount - taxSumStatusPrev.PayrollRedemptionAmount;
                    }
                    taxSumStatusNew.update();
                }
                else
                {
                    //this case is used when there are not imposed amount in new status, but in prev status row contains refund amount as result of applying deduction without income
                    select firstonly IncomeAmount, DeductionStandardAmount from taxSumStatusPrevEmpty
                        where taxSumStatusPrevEmpty.EmplId            == emplId
                           && taxSumStatusPrevEmpty.CorrectedPeriod   == correctedPeriod
                           && taxSumStatusPrevEmpty.PayPeriod         == payPeriod
                           && taxSumStatusPrevEmpty.BranchId          == prevBranchId
                           && taxSumStatusPrevEmpty.Source            == NoYes::No
                           && taxSumStatusPrevEmpty.RpayTaxIncomeGroupCode == taxSumStatusPrev.RpayTaxIncomeGroupCode;

                    if (prevAmount != 0 && taxSumStatusPrevEmpty.IncomeAmount == 0 && taxSumStatusPrevEmpty.DeductionStandardAmount != 0)
                    {
                        select firstonly TaxRateCode from taxSumStatusNewRate //find appropriate rate code for new status
                            where taxSumStatusNewRate.EmplId            == emplId
                               && taxSumStatusNewRate.PayPeriod         == payPeriod
                               && taxSumStatusNewRate.BranchId          == newBranchId
                               && taxSumStatusNewRate.Source            == NoYes::No
                               && taxSumStatusNewRate.RpayTaxIncomeGroupCode == newTaxGroupCode;

                        taxSumStatusNew.EmplId                  = emplId;
                        taxSumStatusNew.CorrectedPeriod         = correctedPeriod;
                        taxSumStatusNew.PayPeriod               = payPeriod;
                        taxSumStatusNew.BranchId                = newBranchId;
                        taxSumStatusNew.Source                  = NoYes::No;
                        taxSumStatusNew.RpayTaxIncomeGroupCode  = newTaxGroupCode;
                        taxSumStatusNew.DeductTaxAmount         = prevAmount;
                        taxSumStatusNew.TaxRateCode             = taxSumStatusNewRate.TaxRateCode;
                        taxSumStatusNew.insert();

                        //create empty trans to have correct a joined queries
                        taxTransStatusPrevEmpty.TaxSumRecId         = taxSumStatusNew.RecId;
                        taxTransStatusPrevEmpty.RpayTaxType         = RpayTaxType::Deduction;
                        taxTransStatusPrevEmpty.RpayTaxIncDedCode   = 0;
                        taxTransStatusPrevEmpty.Amount              = 0;
                        taxTransStatusPrevEmpty.insert();
                    }
                }
            }
            //calculate amounts for previous status
            select firstonly forupdate * from taxSumStatusPrevUpd
                where  taxSumStatusPrevUpd.EmplId            == emplId
                    && taxSumStatusPrevUpd.CorrectedPeriod   == correctedPeriod
                    && taxSumStatusPrevUpd.PayPeriod         == payPeriod
                    && taxSumStatusPrevUpd.BranchId          == prevBranchId
                    && taxSumStatusPrevUpd.Source            == NoYes::No
                    && taxSumStatusPrevUpd.RpayTaxIncomeGroupCode == taxSumStatusPrev.RpayTaxIncomeGroupCode;

            taxSumStatusPrevUpd.PayrollRedemptionAmount   = amount2RefundPrev;
            taxSumStatusPrevUpd.DeductTaxAmount           = taxSumStatusPrev.AddTaxAmount - (taxSumStatusPrev.DeductTaxAmount - taxSumStatusPrev.PayrollRedemptionAmount - amount2RefundPrev);
            taxSumStatusPrevUpd.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFun</Name>
				<Source><![CDATA[
        private void initFun()
    {
        RPayTaxEmplSum taxSum;
        taxSum = queryRunItem.get(tableNum(RPayTaxEmplSum));

        correctedPeriod = taxSum.CorrectedPeriod;
        payPeriod       = calcContext.parmPayPeriodOpen();
        emplId          = calcContext.parmEmplId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBranchChanged</Name>
				<Source><![CDATA[
        private boolean isBranchChanged()
    {
        RPayTaxEmplSum  taxSum, taxSum2;

        select firstonly RecId from taxSum
            where  taxSum.EmplId            == emplId
                && taxSum.PayPeriod         == payPeriod
                && taxSum.CorrectedPeriod   == correctedPeriod
                && taxSum.Source            == NoYes::No
            exists join taxSum2
                where  taxSum2.EmplId           == taxSum.EmplId
                    && taxSum2.PayPeriod        == taxSum.PayPeriod
                    && taxSum2.CorrectedPeriod  == taxSum.CorrectedPeriod
                    && taxSum2.Source           == taxSum.Source
                    && taxSum2.BranchId         != taxSum.BranchId;

        return taxSum.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStatusChanged</Name>
				<Source><![CDATA[
        private boolean isStatusChanged()
    {
        RPayTaxEmplSum          taxSum;
        RPayTaxIncomeGroupTable groupTable;
        RPayEmplTaxStatus       taxStatus;

        select firstonly RecId from taxSum
            where  taxSum.EmplId            == emplId
                && taxSum.PayPeriod         == payPeriod
                && taxSum.CorrectedPeriod   == correctedPeriod
            join EmplTaxStatus from groupTable
                where groupTable.RpayTaxIncomeGroupCode == taxSum.RpayTaxIncomeGroupCode;

        taxStatus = groupTable.EmplTaxStatus;

        select firstonly RecId from taxSum
            where  taxSum.EmplId            == emplId
                && taxSum.PayPeriod         == payPeriod
                && taxSum.CorrectedPeriod   == correctedPeriod
            exists join groupTable
                where groupTable.RpayTaxIncomeGroupCode == taxSum.RpayTaxIncomeGroupCode
                    && groupTable.EmplTaxStatus != taxStatus;

        //might be not created trans for new status but really status has changed
        if (taxSum.RecId == 0)
        {
            select firstonly RecId from taxSum
                order by CorrectedPeriod desc
                where  taxSum.EmplId            == emplId
                    && taxSum.PayPeriod         == payPeriod
                    && taxSum.CorrectedPeriod   <  correctedPeriod
                    && taxSum.CorrectedPeriod   >= dateStartYr(correctedPeriod)
                exists join groupTable
                    where groupTable.RpayTaxIncomeGroupCode == taxSum.RpayTaxIncomeGroupCode
                        && groupTable.EmplTaxStatus != taxStatus;
        }

        return taxSum.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevTaxGroup2NewTaxGroup</Name>
				<Source><![CDATA[
        //build links between codes for different statuses
    private container prevTaxGroup2NewTaxGroup(RpayTaxIncomeGroupCode _prevIncomeGroup, RPayEmplTaxStatus _newTaxStatus)
    {
        RPayTaxIncomeGroupTable newTaxGroupTable, prevTaxGroupTable;
        RPayFundMember fundMember, fundMemberLink;
        container con;

        while select RpayTaxIncomeGroupCode from newTaxGroupTable
            group by RpayTaxIncomeGroupCode
            where newTaxGroupTable.EmplTaxStatus == _newTaxStatus
            exists join fundMember
                where fundMember.CounterUnit == newTaxGroupTable.Fund
            exists join fundMemberLink
                where fundMemberLink.PayCostType == fundMember.PayCostType
            exists join prevTaxGroupTable
                where prevTaxGroupTable.RpayTaxIncomeGroupCode == _prevIncomeGroup
                   && fundMemberLink.CounterUnit == prevTaxGroupTable.Fund

        {
            con += newTaxGroupTable.RpayTaxIncomeGroupCode;
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withhold</Name>
				<Source><![CDATA[
        private void withhold()
    {
        switch (true)
        {
            case this.isStatusChanged():
                this.handleStatusChange();
                break;

            case this.isBranchChanged():
                this.handleBranchChange();
                break;
        }

        this.withholdCommon();
    }

]]></Source>
			</Method>
			<Method>
				<Name>withholdCommon</Name>
				<Source><![CDATA[
        private void withholdCommon()
    {
        RPayTaxEmplSum      taxSum, taxSumUpd;
        RPayAmount          deductAmount, amount2Refund;
        RPayCorrectedPeriod corrPeriodFrom = dateStartYr(correctedPeriod);
        RHRMEmplTable       emplTable = RHRMEmplTable::find(emplId);

        if (emplTable.PayBlocked && emplTable.PayBlockedFrom <= payPeriod)
        {
            return;
        }

        while select forupdate taxSumUpd
            where  taxSumUpd.EmplId            == emplId
                && taxSumUpd.PayPeriod         == payPeriod
                && taxSumUpd.Source            == NoYes::No
                && taxSumUpd.CorrectedPeriod   == correctedPeriod
        {
            select sum(AddTaxAmount), sum(DeductTaxAmount), sum(PayrollRedemptionAmount) from taxSum
                where  taxSum.EmplId            == emplId
                    && taxSum.PayPeriod         <= payPeriod
                    && taxSum.CorrectedPeriod   <= correctedPeriod
                    && taxSum.CorrectedPeriod   >= corrPeriodFrom
                    && taxSum.Source            == NoYes::No
                    && taxSum.BranchId          == taxSumUpd.BranchId
                    && taxSum.RpayTaxIncomeGroupCode == taxSumUpd.RpayTaxIncomeGroupCode;

             deductAmount = taxSum.DeductTaxAmount - taxSum.PayrollRedemptionAmount;

            if (deductAmount == taxSum.AddTaxAmount)
            {
                continue;
            }

            if (deductAmount > taxSum.AddTaxAmount)
            {
                switch (calcContext.taxParameters().ReimbursementType)
                {
                    case RPayTaxReimbursementType::RefundBank:
                        taxSumUpd.PayrollRedemptionAmount = deductAmount - taxSum.AddTaxAmount;
                        break;

                    case RPayTaxReimbursementType::RefundPayroll:
                        taxSumUpd.DeductTaxAmount = taxSum.AddTaxAmount - deductAmount;
                        break;

                    case RPayTaxReimbursementType::ReckoningTax:
                        if (taxAmount2RefundDed.exists([taxSumUpd.RpayTaxIncomeGroupCode, correctedPeriod, taxSumUpd.BranchId]))
                        {
                            amount2Refund = taxAmount2RefundDed.lookup([taxSumUpd.RpayTaxIncomeGroupCode, correctedPeriod, taxSumUpd.BranchId]);
                            taxAmount2RefundDed.remove([taxSumUpd.RpayTaxIncomeGroupCode, correctedPeriod, taxSumUpd.BranchId]);

                            taxSumUpd.PayrollRedemptionAmount = amount2Refund;
                        }
                        break;
                }
            }
            else
            {
                //the reason of using plus operator instead of assignment is we may have already calculated field DeductTaxAmount by status or branch change
                //and we need whithhold delta between amount from previous status\branch and the current
                taxSumUpd.DeductTaxAmount += this.applyWithholdLimit(taxSum.AddTaxAmount - deductAmount);
            }
            taxSumUpd.update();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>