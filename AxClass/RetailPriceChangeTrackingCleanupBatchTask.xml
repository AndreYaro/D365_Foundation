<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceChangeTrackingCleanupBatchTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The batch job to clean up records from RetailPriceChangeTracking table when feature is turned off.
/// </summary>
internal class RetailPriceChangeTrackingCleanupBatchTask extends RunBaseBatch
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        System.Exception ex;

        try
        {
            RetailPriceChangeTracking::deleteAllChangeTrackingRecords();
        }
        catch(ex)
        {
            var exceptionTelemetry = RetailPricingInstrumentatioBatchFailureSegment::construct(classStr(RetailPriceChangeTrackingCleanupBatchTask), methodStr(RetailPriceChangeTrackingCleanupBatchTask, run));
            exceptionTelemetry.addException(ex);
            exceptionTelemetry.log();
            throw error("@RetailPricing:RetailPriceChangeTrackingCleanupBatchTaskError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailPriceChangeTrackingCleanupBatchTask construct()
    {
        return new RetailPriceChangeTrackingCleanupBatchTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailPriceChangeTrackingCleanupBatchTask scheduler = new RetailPriceChangeTrackingCleanupBatchTask();

        if (scheduler.prompt())
        {
            scheduler.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@RetailPricing:RetailPriceChangeTrackingCleanupBatchTaskLabel";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the job must be run in batch.
    /// </summary>
    /// <returns>Always return true.</returns>
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>