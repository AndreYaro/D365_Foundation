<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EuSalesListReportingEngine_DE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EUSalesListReportingEngine_DE</c> class extends the functionality of the 
/// <c>EUSalesListReportingEngine</c> class in order to support requirements that are specific to
/// Germany.
/// </summary>
#ISOCountryRegionCodes
[CountryRegionAttribute(#isoDE)]
class EuSalesListReportingEngine_DE extends EUSalesListReportingEngine implements BatchRetryable
{
    DialogGroup                     dialogGroupCorrection;
    DialogField                     dialogCorrection;
    Correct                         correction;
    Line                            xmlLineCount;

    EUSalesListRegistrationId_DE    euSalesListRegistrationId;
    DialogField                     dialogEUSalesListRegistrationId;

    EUSalesListNotificationType_DE  notificationType;
    DialogField                     dialogNotificationType;

    #define.CurrentVersion(2)

    #localmacro.CurrentList
        correction,
        euSalesListRegistrationId,
        notificationType
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and inserts a record into the <c>EUSalesListReportingHeader</c> table.
    /// </summary>
    /// <returns>
    /// A <c>EUSalesListReportingHeader</c> table buffer.
    /// </returns>
    protected EUSalesListReportingHeader addHeader()
    {
        EUSalesListReportingHeader euSalesListReportingHeader;

        euSalesListReportingHeader = super();
        euSalesListReportingHeader.Correction                       = correction;
        euSalesListReportingHeader.EUSalesListRegistrationId_DE     = euSalesListRegistrationId;
        euSalesListReportingHeader.EUSalesListNotificationType_DE   = notificationType;

        euSalesListReportingHeader.update();

        return euSalesListReportingHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.addGroup("@SYS4002071");
        dialogEUSalesListRegistrationId  = dialog.addFieldValue(extendedTypeStr(EUSalesListRegistrationId_DE), euSalesListRegistrationId, "@SYS4002071", "@SYS4002072");
        dialogGroupCorrection = dialog.addGroup("@SYS13069");
        dialogCorrection = dialog.addFieldValue(extendedTypeStr(Correct), correction, "@SYS13069", "@SYS334906");
        dialog.addGroup("@SYS108196");
        dialogNotificationType = dialog.addFieldValue(enumStr(EUSalesListNotificationType_DE), notificationType);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        correction                  = dialogCorrection.value();
        euSalesListRegistrationId   = dialogEUSalesListRegistrationId.value();
        notificationType            = dialogNotificationType.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes a record of the <c>EUSalesListReportingLine</c> table with DE specific functionality.
    /// </summary>
    /// <param name="_euSalesListReportingGroupRecId">
    ///     The reference to the group record to which the line belongs.
    /// </param>
    /// <returns>
    ///     A <c>EUSalesListReportingLine</c> table buffer.
    /// </returns>
    /// <remarks>
    ///     We need full (not stripped) VATNum in DE functionality.
    /// </remarks>
    protected EUSalesListReportingLine initializeLine(RefRecId _euSalesListReportingGroupRecId)
    {
        EUSalesListReportingLine euSalesListReportingLine;
        EUSalesList euSalesList;

        euSalesList = queryRun.get(tableNum(EUSalesList));

        euSalesListReportingLine                    = super(_euSalesListReportingGroupRecId);
        euSalesListReportingLine.VATNum_DE          = euSalesList.VATNum;

        return euSalesListReportingLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to create a new record in the <c>EUSalesListReportingGroup</c> table.
    /// </summary>
    /// <returns>
    /// true if a new group is created; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Descendant classes can override this method to support any special or logical grouping logic such
    /// as the splitting of files.
    /// </remarks>
    protected boolean isNewGroup()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrection</Name>
				<Source><![CDATA[
    public Correct parmCorrection(Correct _correction = correction)
    {
        correction = _correction;
        return correction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEUSalesListRegistrationId</Name>
				<Source><![CDATA[
    public EUSalesListRegistrationId_DE parmEUSalesListRegistrationId(EUSalesListRegistrationId_DE _euSalesListRegistrationId = euSalesListRegistrationId)
    {
        euSalesListRegistrationId = _euSalesListRegistrationId;
        return euSalesListRegistrationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNotificationType</Name>
				<Source><![CDATA[
    public EUSalesListNotificationType_DE parmNotificationType(EUSalesListNotificationType_DE _notificationType = notificationType)
    {
        notificationType = _notificationType;
        return notificationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version = RunBase::getVersion(packedClass);
        container       packedSuper;

        switch (version)
        {
            case #CurrentVersion:
                [version, #currentList, packedSuper] = packedClass;
                if (packedSuper)
                {
                    return super(packedSuper);
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    #define.noticeAndRevocationStartDate(01\07\2012)
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (ret)
        {
            if (! euSalesListRegistrationId)
            {
                ret = checkFailed(strfmt("@GLS103654", "@SYS4002071"));
            }

            if (notificationType == EUSalesListNotificationType_DE::Notice && reportingPeriodType != EUSalesListReportingPeriodType::Monthly)
            {
                ret = checkFailed("@SYS4002066");
            }

            if (notificationType != EUSalesListNotificationType_DE::None && fromDate < #noticeAndRevocationStartDate)
            {
                ret = checkFailed(strfmt("@SYS4002067", #noticeAndRevocationStartDate));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return EUSalesListReportingEngine::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>