<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventoryTransactionContainerReopenController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventoryTransactionContainerReopenController</c> class controls the interaction of the warehouse container opening
/// with the warehouse inventory transaction stack.
/// </summary>
internal final class WHSInventoryTransactionContainerReopenController extends WHSInventoryTransactionContainerController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createInventoryTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates inventory transactions for all items in the reopening container.
    /// </summary>
    /// <param name = "_containerTable">Container to reopen.</param>
    /// <param name = "_itemSetsMap">Information about item sets within container.</param>
    [Hookable(false)]
    internal void createInventoryTransactions(WHSContainerTable _containerTable, WHSInventoryItemSetsMap _itemSetsMap)
    {
        MapEnumerator itemSetsCreatorEnumerator = _itemSetsMap.getEnumerator();
        while (itemSetsCreatorEnumerator.moveNext())
        {
            WHSInventoryItemSetsPair    currentItemSetPair              = itemSetsCreatorEnumerator.currentValue();
            WHSLicensePlateId           originalSourceLicensePlateId    = itemSetsCreatorEnumerator.currentKey();

            guid inventoryTransactionOriginId = this.linkContainerInventTransWithInventoryTransaction(currentItemSetPair);

            this.revertInventoryTransactionsForSourceLicensePlate(
                inventoryTransactionOriginId,
                _containerTable,
                currentItemSetPair,
                originalSourceLicensePlateId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemSetsKey</Name>
				<Source><![CDATA[
    protected WHSLicensePlateId getItemSetsKey(WHSContainerTrans _containerTrans)
    {
        return InventDim::find(_containerTrans.InventDimIdTo).LicensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revertInventoryTransactionsForSourceLicensePlate</Name>
				<Source><![CDATA[
    private void revertInventoryTransactionsForSourceLicensePlate(
        guid                        _inventoryTransactionOriginId,
        WHSContainerTable           _containerTable,
        WHSInventoryItemSetsPair    _itemSets,
        WHSLicensePlateId           _originalLicensePlateIdFrom)
    {
        WHSInventoryStorageDimensions originalStorageDimFrom = this.getStorageDimFrom(_containerTable, _originalLicensePlateIdFrom);
        WHSInventoryStorageDimensions storageDimFrom         = this.getContainerStorageDim(originalStorageDimFrom, _containerTable);
        WHSInventoryStorageDimensions storageDimTo           = originalStorageDimFrom;

        this.createAndExecuteWorkInventoryTransactions(_inventoryTransactionOriginId, _containerTable, _itemSets, storageDimFrom, storageDimTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContainerStorageDim</Name>
				<Source><![CDATA[
    private WHSInventoryStorageDimensions getContainerStorageDim(WHSInventoryStorageDimensions _storageDim, WHSContainerTable _containerTable)
    {
        InventDim containerInventDim = InventDim::find(_containerTable.InventDimId);

        WHSInventoryStorageDimensions containerStorageDim = WHSInventoryStorageDimensions::newFromValues(
            _storageDim.parmInventSiteId(),
            _storageDim.parmInventLocationId(),
            containerInventDim.wMSLocationId,
            containerInventDim.LicensePlateId);

        return containerStorageDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSInventoryTransactionContainerReopenController construct()
    {
        return new WHSInventoryTransactionContainerReopenController();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>