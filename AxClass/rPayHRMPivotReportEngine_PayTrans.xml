<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayHRMPivotReportEngine_PayTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rPayHRMPivotReportEngine_PayTrans extends RPayHRMPivotReportEngine implements BatchRetryable
{
    RPayTrans                 rPayTrans;

    ReportPeriod_RU           startPeriod;
    ReportPeriod_RU           endPeriod;
    RPayCorrectedPeriod       corStartPeriod;
    RPayCorrectedPeriod       corEndPeriod;
    DialogField               dfStartPeriod, dfCorStartPeriod;
    DialogField               dfEndPeriod, dfCorEndPeriod;

    #DEFINE.Amount("Amount")
    #DEFINE.EmplId("EmplId")
    #DEFINE.EmplName("EmplName")
    #DEFINE.PayCostType("PayCostType")
    #DEFINE.PayCostName("PayCostName")
    #DEFINE.OrganizationId("OrganizationId")
    #DEFINE.OrganizationName("OrganizationName")
    #DEFINE.PayChargeType("PayChargeType")
    #DEFINE.PayPeriod("PayPeriod")
    #DEFINE.SourceDate("SourceDate")
    #DEFINE.AccountType("AccountType")
    #DEFINE.LedgerAccount("LedgerAccount")
    #DEFINE.OffsetAccountType("OffsetAccountType")
    #DEFINE.OffsetAccount("OffsetAccount")
    #DEFINE.Dimension("Dm")
    #DEFINE.QtyDay("QtyDay")
    #DEFINE.QtyHour("QtyHour")
    #DEFINE.PayModuleCode("PayModuleCode")
    #DEFINE.CorrectedPeriod("CorrectedPeriod")
    #DEFINE.EnumStrLen(100)

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        startPeriod,
        endPeriod,
        corStartPeriod,
        corEndPeriod,
        conNameCodeFieldsSettings
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildData</Name>
				<Source><![CDATA[
    protected void buildData()
    {
        RHRMEmplTable emplTable;
        Map       dataMap;
        DimensionDefault transDimDefault;
        Map        dimAttrCollection;
        MapEnumerator me;
        container con;
        RefRecId  dimensionAttr;

        this.updateQuery(queryRun.query());

        this.progressInit("@SYS60116",0,#AviTransfer);
        progress.setTotal(SysQuery::countTotal(queryRun));

        pivotTableData.rsOpen();

        while (queryRun.next())
        {
            emplTable = queryRun.get(tableNum(RHRMEmplTable));
            rPayTrans = queryRun.get(tableNum(RPayTrans));

            progress.setText(strFmt("@RUP742", emplTable.EmployeeId, rPayTrans.PayCtype));
            progress.incCount();

            dataMap =  new Map(Types::String, Types::Container);

            dataMap.insert(#Amount,            [rPayTrans.Amount]);
            dataMap.insert(#QtyDay,            [rPayTrans.QtyDay]);
            dataMap.insert(#QtyHour,           [rPayTrans.QtyHour]);
            dataMap.insert(#EmplId,            [emplTable.EmployeeId]);
            dataMap.insert(#EmplName,          [emplTable.name()]);
            dataMap.insert(#PayCostType,       [rPayTrans.PayCtype]);
            dataMap.insert(#PayCostName,       [rPayTrans.costTypeName()]);
            dataMap.insert(#PayChargeType,     [enum2str(RPayTable::find(rPayTrans.PayCtype).PayChargeType)]);
            dataMap.insert(#OrganizationId,    [rPayTrans.HrmOrganisationId]);
            dataMap.insert(#OrganizationName,  [RPayHRMOrganization::find(rPayTrans.HrmOrganisationId).Description]);
            dataMap.insert(#PayPeriod,         [rPayTrans.PayPeriod]);
            dataMap.insert(#SourceDate,        [rPayTrans.SourceDate]);
            dataMap.insert(#AccountType,       [enum2str(rPayTrans.AccountType)]);
            dataMap.insert(#LedgerAccount,     [LedgerDimensionFacade::getMainAccountFromLedgerDimension(rPayTrans.LedgerDimension)]);
            dataMap.insert(#OffsetAccountType, [enum2str(rPayTrans.OffsetAccountType)]);
            dataMap.insert(#OffsetAccount,     [LedgerDimensionFacade::getMainAccountFromLedgerDimension(rPayTrans.OffsetLedgerDimension)]);
            dataMap.insert(#PayModuleCode,     [rPayTrans.PayModuleCode]);
            dataMap.insert(#CorrectedPeriod,   [rPayTrans.CorrectedPeriod]);

            transDimDefault = rPayTrans.getDefaultDimension();
            dimAttrCollection = LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(transDimDefault);
            me = dimAttrCollection.getEnumerator();

            while (me.moveNext())
            {
                dimensionAttr = me.currentKey();
                con = me.currentValue();
                dataMap.insert(strFmt("@GLS116884",#Dimension, dimensionAttr), [conPeek(con, 1)]);
            }

            pivotTableData.insertRecord(dataMap);
        }

        pivotTableData.rsUpdateBatch();

        this.progressHide();
        this.progressKill();
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@RUP778";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog;

        dialog = super() as DialogRunbase;
        dialog.caption(this.caption());

        dialog.addGroup("@GLS105772");
        dfStartPeriod = dialog.addFieldValue(extendedTypeStr(ReportPeriod_RU), startPeriod, "@GLS106049");
        dfEndPeriod   = dialog.addFieldValue(extendedTypeStr(ReportPeriod_RU), endPeriod, "@GLS106050");

        dialog.addGroup("@GLS111794");
        dfCorStartPeriod = dialog.addFieldValue(extendedTypeStr(RPayCorrectedPeriod), corStartPeriod, "@GLS106049");
        dfCorEndPeriod   = dialog.addFieldValue(extendedTypeStr(RPayCorrectedPeriod), corEndPeriod, "@GLS106050");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            pivotTableMetaData.updateCodeNameSettingsFromTable();
            startPeriod = dfStartPeriod.value();
            endPeriod   = dfEndPeriod.value();
            corStartPeriod = dfCorStartPeriod.value();
            corEndPeriod   = dfCorEndPeriod.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPivotCodeNameFields</Name>
				<Source><![CDATA[
    protected void initPivotCodeNameFields()
    {
        DictType    dictTypeCode;

        void addCodeNameField(FieldName  _codeField,
                              FieldName  _nameField,
                              FieldLabel _fieldLabel = dictTypeCode.label())
        {
            pivotTableMetaData.addCodeNameField(_codeField,_nameField,_fieldLabel);
        }

        dictTypeCode = new DictType(extendedTypeNum(RHRMEmplId));
        addCodeNameField(#EmplId, #EmplName);

        dictTypeCode = new DictType(extendedTypeNum(RPayCostType));
        addCodeNameField(#PayCostType, #PayCostName);

        dictTypeCode = new DictType(extendedTypeNum(RpayHRMOrganizationId));
        addCodeNameField(#OrganizationId, #OrganizationName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPivotMetadata</Name>
				<Source><![CDATA[
    protected void initPivotMetadata()
    {
        Map      metaDataMap;
        DictType dictType;
        DictEnum dictEnum;
        DimensionAttribute              dimAttr;
        DimensionAttributeSetItem       dimAttrSetItem;
        DimensionEnumeration dimensionSetId = DimensionCache::getDimensionAttributeSetForLedger();

        void addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup _fieldsGroup,
                                    FieldName                    _fieldName,
                                    FieldLabel                   _fieldLabel = dictType.label(),
                                    Types                        _baseType   = dictType.baseType(),
                                    int                          _stringLen  = dictType.stringLen())
        {
            metaDataMap.insert(_fieldName,[_fieldLabel, _fieldsGroup, _baseType, _stringLen]);
        }

        void addMetaDataMapFromEnum(RPayHRMPivotTableFieldsGroup _fieldsGroup,
                                    FieldName                    _fieldName,
                                    FieldLabel                   _fieldLabel = dictEnum.label(),
                                    Types                        _baseType   = Types::String,
                                    int                          _stringLen  = #EnumStrLen)
        {
            metaDataMap.insert(_fieldName,[_fieldLabel, _fieldsGroup, _baseType, _stringLen]);
        }

        metaDataMap = new Map(Types::String, Types::Container);

        dictType = new DictType(extendedTypeNum(RHRMEmplId));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #EmplId);

        dictType = new DictType(extendedTypeNum(DirPartyName));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::None, #EmplName);

        dictType = new DictType(extendedTypeNum(Amount));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::MeasureFields,#Amount);

        dictType = new DictType(extendedTypeNum(RPayDayHour));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::MeasureFields, #QtyDay, "@RUP355");

        dictType = new DictType(extendedTypeNum(RPayDayHour));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::MeasureFields, #QtyHour, "@GLS105378");

        dictType = new DictType(extendedTypeNum(RPayCostType));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #PayCostType);

        dictType = new DictType(extendedTypeNum(Name));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::None, #PayCostName);

        dictEnum = new DictEnum(enumNum(RPayChargeType));
        addMetaDataMapFromEnum(RPayHRMPivotTableFieldsGroup::DimensionFields, #PayChargeType);

        dictType = new DictType(extendedTypeNum(RpayHRMOrganizationId));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #OrganizationId);

        dictType = new DictType(extendedTypeNum(RHRMOrganizationName));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::None, #OrganizationName);

        dictType = new DictType(extendedTypeNum(ReportPeriod_RU));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #PayPeriod);

        dictType = new DictType(extendedTypeNum(ReportPeriod_RU));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #SourceDate, "@RUP393");

        dictEnum = new DictEnum(enumNum(LedgerJournalACType));
        addMetaDataMapFromEnum(RPayHRMPivotTableFieldsGroup::DimensionFields, #AccountType);

        dictType = new DictType(extendedTypeNum(RPayAccountNum));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #LedgerAccount);

        dictEnum = new DictEnum(enumNum(LedgerJournalACType));
        addMetaDataMapFromEnum(RPayHRMPivotTableFieldsGroup::DimensionFields, #OffsetAccountType, "@SYS23950" );

        dictType = new DictType(extendedTypeNum(RPayAccountNum));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #OffsetAccount, "@SYS11162");

        dictType = new DictType(extendedTypeNum(RPayModuleCode));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #PayModuleCode);

        dictType = new DictType(extendedTypeNum(RPayCorrectedPeriod));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #CorrectedPeriod);

        dictType = new DictType(extendedTypeNum(Name));
        while select * from dimAttr
                where dimAttr.Type != DimensionAttributeType::MainAccount
            exists join dimAttrSetItem
                where dimAttrSetItem.DimensionAttribute == dimAttr.RecId &&
                      dimAttrSetItem.DimensionAttributeSet == dimensionSetId
        {
            addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, strFmt("@GLS116884",#Dimension, dimAttr.RecId), dimAttr.localizedName());
        }

        pivotTableMetaData.addFields(metaDataMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container conQuery = this.queryRun().pack();
        ;

        conNameCodeFieldsSettings = pivotTableMetaData.codeNameFields().pack();
        return [#CurrentVersion, #CurrentList, conQuery];
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    public Query query()
    {
        Query                query;
        QueryBuildDataSource qbdsEmplTable;
        QueryBuildDataSource qbdsRPayTrans;

        query = new Query();

        qbdsEmplTable = query.addDataSource(tableNum(RHRMEmplTable));
        qbdsEmplTable.addRange(fieldNum(RHRMEmplTable, PayHRMOrganizationId));

        qbdsRPayTrans  = qbdsEmplTable.addDataSource(tableNum(RPayTrans));
        qbdsRPayTrans.relations(true);

        qbdsRPayTrans.addRange(fieldNum(RPayTrans,PayCtype));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean   ret;
        Version   version = RunBase::getVersion(_packedClass);
        container packedQuery = conPeek(_packedClass, conLen(_packedClass));
        ;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new SysQueryRun(packedQuery);
                }
                pivotTableMetaData.unpackCodeNameSettings(conNameCodeFieldsSettings);
                break;

            default :
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    public void updateQuery(Query _query)
    {
        QueryBuildDataSource qbdsRPayTrans;

        qbdsRPayTrans = _query.dataSourceTable(tableNum(RPayTrans));
        if (endPeriod)
        {
            qbdsRPayTrans.addRange(fieldNum(RPayTrans, PayPeriod)).value(queryRange(dateStartMth(startPeriod), dateEndMth(endPeriod)));
        }
        else
        {
            qbdsRPayTrans.addRange(fieldNum(RPayTrans, PayPeriod)).value(queryRange(dateStartMth(startPeriod), dateMax()));
        }

        if (corEndPeriod)
        {
            qbdsRPayTrans.addRange(fieldNum(RPayTrans, CorrectedPeriod)).value(queryRange(dateStartMth(corStartPeriod), dateEndMth(corEndPeriod)));
        }
        else
        {
            qbdsRPayTrans.addRange(fieldNum(RPayTrans, CorrectedPeriod)).value(queryRange(dateStartMth(corStartPeriod), dateMax()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (ret && !startPeriod && !corStartPeriod)
        {
            ret = checkFailed("@RUP881");
        }

        if (ret && !endPeriod && !corEndPeriod)
        {
            ret = checkFailed("@RUP882");
        }

        if (ret && (startPeriod > endPeriod) && (corStartPeriod > corEndPeriod))
        {
            ret = checkFailed("@RUP883");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>