<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeNonStockedRegistrationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class TradeNonStockedRegistrationHelper
{
    SalesPurchLine salesPurchLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkNotOverDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the quantity that is being registered causes over delivery.
    /// </summary>
    /// <param name="_qtyBeingRegistered">
    ///    The quantity that is being registered.
    /// </param>
    /// <returns>
    ///    true if the quantity being registered exceeds the defined over delivery constraints; otherwise,
    ///    false.
    /// </returns>
    protected boolean checkNotOverDelivery(UnitQty _qtyBeingRegistered)
    {
        TradeNonStockedValidator tradeNonStockedValidator = TradeNonStockedValidator::newFromSalesPurchLine(salesPurchLine);

        return tradeNonStockedValidator.checkNotOverDelivery(_qtyBeingRegistered, false, false, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePendingRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes any pending registrations for the line that is specified.
    /// </summary>
    /// <remarks>
    ///    This method is used when a line is deleted.
    /// </remarks>
    public void deletePendingRegistration()
    {
        if (this.validateDelete())
        {
            InventPendingQuantity::deletePendingRegistration(salesPurchLine.salesPurchLineInterface().parmSourceDocumentLine());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventRegistrationHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an instance of the <c>InventRegistrationHandler</c> class for the line.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>InventRegistrationHandler</c> class for the line.
    /// </returns>
    abstract protected InventRegistrationHandler getInventRegistrationHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line quantity.
    /// </summary>
    /// <returns>
    /// A <c>UnitQty</c> value.
    /// </returns>
    abstract public UnitQty lineQty()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPurchLine</Name>
				<Source><![CDATA[
        public SalesPurchLine parmSalesPurchLine(SalesPurchLine _salesPurchLine = salesPurchLine)
    {
        salesPurchLine = _salesPurchLine;

        return salesPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>register</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Registers the specified quantity for the line.
    /// </summary>
    /// <param name="_qtyToRegister">
    ///    The quantity to register.
    /// </param>
    public void register(UnitQty _qtyToRegister)
    {
        InventPendingQuantityRegistrar inventPendingQuantityRegistrar;

        inventPendingQuantityRegistrar = InventPendingQuantityRegistrar::newFromRegistrationHandler(
            this.getInventRegistrationHandler(),
            _qtyToRegister > 0?
                InventPendingQuantity::findBySourceDocumentLine(salesPurchLine.salesPurchLineInterface().parmSourceDocumentLine(), InventProcessRole::PendingRegistration, true):
                InventPendingQuantity::findBySourceDocumentLine(salesPurchLine.salesPurchLineInterface().parmSourceDocumentLine(), InventProcessRole::PendingReceipt, true),
            _qtyToRegister);

        inventPendingQuantityRegistrar.register();
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizePendingRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates or updates the pending registration records from the line.
    /// </summary>
    /// <param name="_adjustedQty">
    ///    The quantity to be added onto the pending registration records.
    /// </param>
    /// <param name="_isNewLine">
    ///    A Boolean value that indicates whether the line is a new line.
    /// </param>
    /// <remarks>
    ///    This method is used when an order line is created, updated or a change management enabled purchase
    ///    order is approved.
    /// </remarks>
    public abstract void synchronizePendingRegistration(UnitQty _adjustedQty, boolean _isNewLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOnRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs updates on the order line when a registration has been completed.
    /// </summary>
    public void updateOnRegistration()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePendingQuantityOnPosting</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deducts the quantity that is being posted from the records in the <c>InventPendingQuantity</c>
    ///    table.
    /// </summary>
    /// <param name="_quantityBeingPosted">
    ///    The <c>InventQty</c> value that is being posted.
    /// </param>
    /// <remarks>
    ///    Deletes the record in the <c>InventPendingQuantity</c> table if the full quantity is being posted.
    /// </remarks>
    public void updatePendingQuantityOnPosting(UnitQty _quantityBeingPosted)
    {
        ttsbegin;

        //Deduct from pending receipt records
        if (_quantityBeingPosted > 0)
        {
            _quantityBeingPosted = InventPendingQuantity::deductOrDeletePendingQuantity(salesPurchLine.salesPurchLineInterface().parmSourceDocumentLine(), _quantityBeingPosted, InventProcessRole::PendingReceipt);
        }

        //Deduct the remaining quantity from pending registration records
        if (_quantityBeingPosted > 0)
        {
            _quantityBeingPosted = InventPendingQuantity::deductOrDeletePendingQuantity(salesPurchLine.salesPurchLineInterface().parmSourceDocumentLine(), _quantityBeingPosted, InventProcessRole::PendingRegistration);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the pending registration records can be deleted.
    /// </summary>
    /// <returns>
    ///    true if the pending registration records can be deleted; otherwise, false.
    /// </returns>
    public boolean validateDelete()
    {
        if (TradeNonStockedRegistrationHelper::getInventPendingReceipt(salesPurchLine.salesPurchLineInterface().parmSourceDocumentLine()).Quantity)
        {
            //Pending registration records cannot be deleted when registered quantities exist for the line.
            throw error("@SYS315652");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOrderLineUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the order line can be updated.
    /// </summary>
    /// <returns>
    ///    true if the order line can be updated; otherwise, false.
    /// </returns>
    public boolean validateOrderLineUpdate()
    {
        InventQty   registeredQty;
        boolean     ok = true;

        registeredQty = TradeNonStockedRegistrationHelper::getInventPendingReceipt(salesPurchLine.salesPurchLineInterface().parmSourceDocumentLine()).Quantity;

        if (abs(this.lineQty()) < registeredQty)
        {
            ok = checkFailed("@SYS315653");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRegister</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the specified quantity can be registered.
    /// </summary>
    /// <param name="_qtyToRegister">
    ///    The quantity to register.
    /// </param>
    /// <returns>
    ///    true if the quantity can be registered; otherwise, false.
    /// </returns>
    public boolean validateRegister(UnitQty _qtyToRegister)
    {
        boolean ok = true;
        UnitQty qtyRegistered;

        if (_qtyToRegister > 0)
        {
            ok = this.checkNotOverDelivery(_qtyToRegister);
        }
        else
        {
            qtyRegistered = TradeNonStockedRegistrationHelper::getInventPendingReceipt(salesPurchLine.salesPurchLineInterface().parmSourceDocumentLine()).Quantity;

            if (abs(_qtyToRegister) > qtyRegistered)
            {
                ok = checkFailed(strfmt("@SYS53751", qtyRegistered));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventPendingReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventPendingQuantity</c> record pending registration for the current
    ///    <c>SalesPurchLine</c> value.
    /// </summary>
    /// <param name="_sourceDocumentLineRecId">
    ///    The <c>SourceDocumentLineRecId</c> value of an order line.
    /// </param>
    /// <returns>
    ///    The <c>InventPendingQuantity</c> pending registration.
    /// </returns>
    public static InventPendingQuantity getInventPendingReceipt(SourceDocumentLineRecId _sourceDocumentLineRecId)
    {
        return InventPendingQuantity::findBySourceDocumentLine(_sourceDocumentLineRecId, InventProcessRole::PendingReceipt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventPendingRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventPendingQuantity</c> record pending registration for the current
    ///    <c>SalesPurchLine</c> value.
    /// </summary>
    /// <param name="_sourceDocumentLineRecId">
    ///    The <c>SourceDocumentLineRecId</c> value of an order line.
    /// </param>
    /// <returns>
    ///    The <c>InventPendingQuantity</c> pending registration.
    /// </returns>
    public static InventPendingQuantity getInventPendingRegistration(SourceDocumentLineRecId _sourceDocumentLineRecId)
    {
        return InventPendingQuantity::findBySourceDocumentLine(_sourceDocumentLineRecId, InventProcessRole::PendingRegistration);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of <c>TradeNonStockedRegistrationHelper</c> with the given <c>SalesLine</c>
    ///    or <c>PurchLine</c>.
    /// </summary>
    /// <param name="_salesPurchLine">
    ///    A <c>SalesPurchLine</c> object based on which the <c>TradeNonStockedRegistrationHelper</c> would be instantiated.
    /// </param>
    /// <param name="_wmsArrivalDetailTmp">
    ///    A <c>WMSArrivalDetailTmp</c> record based on which the validations and updations for the registration are to be done.
    /// </param>
    /// <returns>
    ///    A <c>TradeNonStockedRegistrationHelper</c> object.
    /// </returns>
    public static TradeNonStockedRegistrationHelper newFromSalesPurchLine(SalesPurchLine _salesPurchLine, WMSArrivalDetailTmp _wmsArrivalDetailTmp = null)
    {
        TradeNonStockedRegistrationHelper tradeNonStockedRegistrationHelper;

        switch (_salesPurchLine.TableId)
        {
            case tablenum(PurchLine):
                tradeNonStockedRegistrationHelper = PurchNonStockedRegistrationHelper::newFromPurchLine(_salesPurchLine);
                break;
            case tablenum(SalesLine):
                tradeNonStockedRegistrationHelper = SalesNonStockedRegistrationHelper::newFromSalesLine(_salesPurchLine, _wmsArrivalDetailTmp);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return tradeNonStockedRegistrationHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the ordered quantity for an order line.
    /// </summary>
    /// <param name="_sourceDocumentLineRecId">
    ///    The <c>SourceDocumentLineRecId</c> value of an order line.
    /// </param>
    /// <returns>
    ///    A <c>UnitQty</c> value.
    /// </returns>
    public static UnitQty qtyOrdered(SourceDocumentLineRecId _sourceDocumentLineRecId)
    {
        return TradeNonStockedRegistrationHelper::getInventPendingRegistration(_sourceDocumentLineRecId).Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the registered quantity for an order line.
    /// </summary>
    /// <param name="_sourceDocumentLineRecId">
    ///    The <c>SourceDocumentLineRecId</c> value of an order line.
    /// </param>
    /// <returns>
    ///    A <c>UnitQty</c> value.
    /// </returns>
    public static UnitQty qtyRegistered(SourceDocumentLineRecId _sourceDocumentLineRecId)
    {
        return TradeNonStockedRegistrationHelper::getInventPendingReceipt(_sourceDocumentLineRecId).Quantity;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>