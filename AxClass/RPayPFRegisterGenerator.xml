<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFRegisterGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPFRegisterGenerator extends RunBaseBatch implements IRPayReportRunClass, BatchRetryable
{
    RPayPFRegister                  rPayPFRegister;
    RPayPFRegister                  rPayPFRegisterOriginal;
    RPayPFRegister                  rPayPFRegisterPrevCorr;
    RPayPFRegister                  rPayPFRegisterCorrOriginal;

    RPayPFReportParmContractRSVPF   parmContract;
    IRPayPFReportCommand            totalFundCommand, seniorityCommand, monthFundCommand;

    IRPayPFReportDataIterator       fundDataIterator, seniorityIterator, monthFundIterator;
    RPayTaxParameters               payTaxParameters;
    Counter                         docPersonQty, docPersonQtyMax;
    int                             maxDocPerFile;
    Set                             keyDocChanged, keyFileChanged;

    RHRMEmplId                      keyEmplId;
    int                             keyAgreementType;
    RPayPFEmplCategory              keyCategory;

    RPayAmount                      fundAmountIns, fundAmountSto;
    Counter                         emplNo;

    Integer                         packageNum;

    ReportPeriod_RU                 reportStartPeriod,
                                    reportEndPeriod,

                                    corrReportStartPeriod,
                                    corrReportEndPeriod,

                                    seniorityStartPeriod,
                                    seniorityEndPeriod;
    RPayPFReportCtrl                reportData;
    RPayTaxParameters               rPayTaxParameters;

    Map                             batchEmplsMap;
    int                             batchNumber;
    RPayGroup                       groupWorkers;
    RecordInsertList                recordInsertListRegTotals;

    QueryRun queryRun;

    #RPayPFReportSZV64XML
    #RPayPFReport

    #define.Year2014(01\01\2014)
    #define.TotalCol(3)
    #define.Mth1Col(4)
    #define.Mth2Col(5)
    #define.Mth3Col(6)

    #define.CurrentVersion(1)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendNewTotalTrans</Name>
				<Source><![CDATA[
    void appendNewTotalTrans(RPayPFRegisterTrans _rPayPFRegisterTransTotalTmp)
    {
        RPayPFRegisterTrans     rPayPFRegisterTransCorrTotal, rPayPFRegisterTransCorrOrigTotal;

        while select rPayPFRegisterTransCorrTotal
            where rPayPFRegisterTransCorrTotal.RegisterRefRecId == rPayPFRegisterPrevCorr.RecId &&
                  rPayPFRegisterTransCorrTotal.LineType == RPayPFLineType::Total &&
                  rPayPFRegisterTransCorrTotal.EmplId == _rPayPFRegisterTransTotalTmp.EmplId &&
                  rPayPFRegisterTransCorrTotal.Category == _rPayPFRegisterTransTotalTmp.Category &&
                  rPayPFRegisterTransCorrTotal.Agreement == _rPayPFRegisterTransTotalTmp.Agreement
        notexists join rPayPFRegisterTransCorrOrigTotal
            where rPayPFRegisterTransCorrOrigTotal.RegisterRefRecId == rPayPFRegisterCorrOriginal.RecId &&
                  rPayPFRegisterTransCorrOrigTotal.EmplId == rPayPFRegisterTransCorrTotal.EmplId &&
                  rPayPFRegisterTransCorrOrigTotal.Tariff == rPayPFRegisterTransCorrTotal.Tariff &&
                  rPayPFRegisterTransCorrOrigTotal.Category == rPayPFRegisterTransCorrTotal.Category &&
                  rPayPFRegisterTransCorrOrigTotal.Agreement == rPayPFRegisterTransCorrTotal.Agreement &&
                  rPayPFRegisterTransCorrOrigTotal.ListCode == rPayPFRegisterTransCorrTotal.ListCode &&
                  rPayPFRegisterTransCorrOrigTotal.WorkCondCode == rPayPFRegisterTransCorrTotal.WorkCondCode &&
                  rPayPFRegisterTransCorrOrigTotal.LineType == rPayPFRegisterTransCorrTotal.LineType
        {
            rPayPFRegisterTransCorrTotal.RegisterRefRecId = rPayPFRegister.RecId;
            rPayPFRegisterTransCorrTotal.Type = RpayPensionFundExportKindOfCorrection::None;
            this.initBatchReference(rPayPFRegisterTransCorrTotal, true);
            this.updateTotalTransTmp(rPayPFRegisterTransCorrTotal, _rPayPFRegisterTransTotalTmp, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcEmplQty</Name>
				<Source><![CDATA[
    protected void calcEmplQty()
    {
        rPayPFRegister.InsuredPersonsNum = this.getEmplQtyByGroup(groupWorkers);
        rPayPFRegister.AverageHeadCount = this.getEmplQtyAvg(groupWorkers);
        rPayPFRegister.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcStudents</Name>
				<Source><![CDATA[
    protected void calcStudents(RPayPFRegisterGeneratorRSV _registerGeneratorRSV)
    {
        RecordInsertList recordInsertListStudents = new RecordInsertList(tablenum(RPayPFRegisterStudents));
        RPayPFRegisterStudents rPayPFRegisterStudents;
        container   studentsData, student;

        int i;

        rPayPFRegisterStudents.RegisterRefRecId = rPayPFRegister.RecId;

        studentsData = _registerGeneratorRSV.getStudentsData();

        for (i = 1; i <= conlen(studentsData); i++)
        {
            student = conpeek(studentsData, i);

            rPayPFRegisterStudents.EmplId = conpeek(student, 1);
            rPayPFRegisterStudents.BrigadeNumber = conpeek(student, 2);
            rPayPFRegisterStudents.BrigadeDate = conpeek(student, 3);
            rPayPFRegisterStudents.UniversityNumber = conpeek(student, 4);
            rPayPFRegisterStudents.UniversityDate = conpeek(student, 5);
            rPayPFRegisterStudents.Payments = conpeek(student, 6);
            rPayPFRegisterStudents.Payments1 = conpeek(student, 7);
            rPayPFRegisterStudents.Payments2 = conpeek(student, 8);
            rPayPFRegisterStudents.Payments3 = conpeek(student, 9);
            recordInsertListStudents.add(rPayPFRegisterStudents);
        }

        recordInsertListStudents.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotals</Name>
				<Source><![CDATA[
    protected void calcTotals(RPayPFRegisterGeneratorRSV _registerGeneratorRSV)
    {
        recordInsertListRegTotals = new RecordInsertList(tablenum(RPayPFRegisterTotals));

        this.calcTotalsPage3(_registerGeneratorRSV);
        this.calcTotalsPage4();
        this.calcTotalsPage5();
        this.calcTotalsPage2();

        this.checkNegative();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalsPage2</Name>
				<Source><![CDATA[
    protected void calcTotalsPage2()
    {
        RPayPFRegisterTotals registerTotals;

        registerTotals.RegisterRefRecId = rPayPFRegister.RecId;
        registerTotals.AddInfo = '';

        this.fillAddAmounts(registerTotals, 100, RPayPFAddPremiumType::OpenBalance);

        recordInsertListRegTotals.insertDatabase();

        this.fillTotalInsuranceAmount(registerTotals, 3, 110);
        this.fillTotalInsuranceAmount(registerTotals, 4, 111);
        this.fillTotalInsuranceAmount(registerTotals, 5, 112);
        this.fillTotalInsuranceAmount(registerTotals, 6, 113);

        recordInsertListRegTotals.insertDatabase();

        this.fillTotalInsuranceAmount3Mth(registerTotals, 114);
        this.fillAddAmounts(registerTotals, 120, RPayPFAddPremiumType::AddAmounts);
        this.fillAddAmountsOver(registerTotals, 121);

        recordInsertListRegTotals.insertDatabase();

        this.fillTotalToPay(registerTotals, 130);
        this.fillAddAmounts(registerTotals, 140, RPayPFAddPremiumType::Payments);
        this.fillAddAmountsMth(registerTotals, 141, RPayPFAddPremiumType::Payments, endmth(rPayPFRegister.dateStartQuarter()));
        this.fillAddAmountsMth(registerTotals, 142, RPayPFAddPremiumType::Payments, endmth(nextmth(rPayPFRegister.dateStartQuarter())));
        this.fillAddAmountsMth(registerTotals, 143, RPayPFAddPremiumType::Payments, endmth(rPayPFRegister.dateEndQuarter()));

        recordInsertListRegTotals.insertDatabase();

        this.fillTotalPaid(registerTotals, 144);
        this.fillNeedToBePaid(registerTotals, 150);

        recordInsertListRegTotals.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalsPage3</Name>
				<Source><![CDATA[
    protected void calcTotalsPage3(RPayPFRegisterGeneratorRSV _registerGeneratorRSV)
    {
        RPayPFRegisterTotals registerTotals;

        registerTotals.RegisterRefRecId = rPayPFRegister.RecId;

        this.fillInsData(registerTotals, RPayPFTariff::Normal);

        this.fillFSSData(_registerGeneratorRSV, registerTotals, RPayPFTariff::Normal);

        this.fillInsData(registerTotals, RPayPFTariff::Invalid);

        this.fillFSSData(_registerGeneratorRSV, registerTotals, RPayPFTariff::Invalid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalsPage4</Name>
				<Source><![CDATA[
    protected void calcTotalsPage4()
    {
        RPayPFRegisterTotals registerTotals;

        registerTotals.RegisterRefRecId = rPayPFRegister.RecId;

        this.fillExtraInsData(registerTotals, RPayPFListCode::Extra1);
        this.fillExtraInsData(registerTotals, RPayPFListCode::Extra2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalsPage5</Name>
				<Source><![CDATA[
    protected void calcTotalsPage5()
    {
        RPayPFRegisterTotals registerTotals;

        registerTotals.RegisterRefRecId = rPayPFRegister.RecId;

        this.fillExtraInsDataByCategory(registerTotals, RPayPFListCode::Extra1);
        this.fillExtraInsDataByCategory(registerTotals, RPayPFListCode::Extra2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected boolean check()
    {
        boolean ret = true;

        if (rPayPFRegister.existsLaterRegister())
        {
            ret = checkfailed("@SYP4881346");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndPrepareParameters</Name>
				<Source><![CDATA[
    protected void checkAndPrepareParameters()
    {
        setprefix("@RUP2178");

        groupWorkers = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2014, 6, "@RUP1230", "@RUP2160");
        rPayTaxParameters = RPayTaxParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNegative</Name>
				<Source><![CDATA[
    protected void checkNegative()
    {
        RPayPFRegisterTotals registerTotals;

        select firstonly recId from registerTotals
            where registerTotals.RegisterRefRecId == rPayPFRegister.RecId &&
                  registerTotals.LineNum >= 200 &&
                  registerTotals.LineNum <= 215 &&
                  registerTotals.Value < 0;

        if (registerTotals.RecId)
        {
            info(strfmt("@SYP4881575", conpeek(rPayPFRegister.getPreviousPeriod(), 1)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>colNum2LineTypePeriod</Name>
				<Source><![CDATA[
    protected container colNum2LineTypePeriod(int _colNum)
    {
        RPayPFLineType  lineType;
        ReportPeriod_RU payPeriod;

        switch (_colNum)
        {
            case #TotalCol:
                lineType = RPayPFLineType::Total;
                break;
            case #Mth1Col:
                payPeriod = endmth(rPayPFRegister.dateStartQuarter());
                lineType = RPayPFLineType::Month;
                break;
            case #Mth2Col:
                payPeriod = endmth(nextmth(rPayPFRegister.dateStartQuarter()));
                lineType = RPayPFLineType::Month;
                break;
            case #Mth3Col:
                payPeriod = endmth(rPayPFRegister.dateEndQuarter());
                lineType = RPayPFLineType::Month;
                break;
        }

        return [lineType, payPeriod];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSeniority</Name>
				<Source><![CDATA[
    protected void createSeniority()
    {
        container seniorityCon;
        TransDate                       seniorityDateFrom, seniorityDateTo;
        Months                          senMonths;
        Days                            senDays;
        RHRMSpecCond                    specCondition;
        RPayInsuranceSeniorityTypeId    insuranceTypeId;
        RHRMPositionList                positionList;
        RPayPFSeniority                 rPayPFSeniority;

        rPayPFSeniority.clear();
        rPayPFSeniority.initValue();
        rPayPFSeniority.RegisterRefRecId = rPayPFRegister.RecId;
        rPayPFSeniority.EmplId = keyEmplId;

        seniorityCommand.parmValue([#SeniorityKey]);
        seniorityIterator = seniorityCommand.iterator();

        while (seniorityIterator.more())
        {
            seniorityCon = seniorityIterator.value();
            [#seniorityValue] = seniorityCon;

            rPayPFSeniority.StartDate = seniorityDateFrom;
            rPayPFSeniority.EndDate = seniorityDateTo;
            rPayPFSeniority.SpecCond = specCondition;
            rPayPFSeniority.PositionList = positionList;
            rPayPFSeniority.SeniorityTypeId = insuranceTypeId;

            if (rPayPFSeniority.validateWrite())
            {
                rPayPFSeniority.insert();
            }

            seniorityIterator.moveNext();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    protected void createTrans(boolean _isTotalCreation)
    {
        RPayPFRegisterTrans             rPayPFRegisterTrans, rPayPFRegisterTransTotalTmp, rPayPFRegisterTransTotal;
        boolean                         existsMonthData = false;
        container                       monthFundCon;
        ReportPeriod_RU                 startPeriodMth, endPeriodMth, currMonth, startPayPeriodMth, endPayPeriodMth, curPayPeriod;

        rPayPFRegisterTrans.clear();
        rPayPFRegisterTrans.initValue();
        rPayPFRegisterTrans.RegisterRefRecId = rPayPFRegister.RecId;

        if (keyCategory == #InsuredPersonCatDisabled ||
            keyCategory == #InsuredPersonCatDisabled1 ||
            keyCategory == #TempLiveForeignDis ||
            keyCategory == #TempResidenceForeignDis)
        {
            rPayPFRegisterTrans.Tariff = RPayPFTariff::Invalid;
        }
        else
        {
            rPayPFRegisterTrans.Tariff = RPayPFTariff::Normal;
        }

        rPayPFRegisterTrans.Category = keyCategory;
        rPayPFRegisterTrans.Agreement = keyAgreementType - 1;
        rPayPFRegisterTrans.EmplId = keyEmplId;

        rPayPFRegisterTransTotalTmp.setTmp();

        rPayPFRegisterTrans.LineType = RPayPFLineType::Month;

        startPeriodMth = this.getStartPeriodMth(keyEmplId);
        endPeriodMth = this.getEndPeriodMth(keyEmplId);

        startPayPeriodMth = reportStartPeriod;
        endPayPeriodMth = reportEndPeriod;

        for (currMonth = startPeriodMth; currMonth <= endPeriodMth; currMonth = endmth(nextmth(currMonth)))
        {
            for (curPayPeriod = startPayPeriodMth; curPayPeriod <= endPayPeriodMth; curPayPeriod = endmth(nextmth(curPayPeriod)))
            {
                monthFundCommand.parmValue([#parmKeyReport, currMonth, curPayPeriod]);
                monthFundIterator = monthFundCommand.iterator();

                if (monthFundIterator.more())
                {
                    monthFundCon = monthFundIterator.value();

                    rPayPFRegisterTrans.Period = this.getPeriod(currMonth, curPayPeriod);
                    rPayPFRegisterTrans.PayPeriod = curPayPeriod;

                    if (conpeek(monthFundCon, 1) != 0 ||
                        conpeek(monthFundCon, 2) != 0 ||
                        conpeek(monthFundCon, 3) != 0 ||
                        conpeek(monthFundCon, 6) != 0 ||
                        conpeek(monthFundCon, 7) != 0 ||
                        conpeek(monthFundCon, 8) != 0 ||
                        conpeek(monthFundCon, 13) != 0 ||
                        conpeek(monthFundCon, 16) != 0)
                    {
                        rPayPFRegisterTrans.ListCode = RPayPFListCode::Normal;
                        rPayPFRegisterTrans.WorkCondCode = RPayPFWorkCondCode::None;
                        rPayPFRegisterTrans.TotalPayments = conpeek(monthFundCon, 1);

                        rPayPFRegisterTrans.SpecDeductions = conpeek(monthFundCon, 13);

                        rPayPFRegisterTrans.OtherDeductions = conpeek(monthFundCon, 16);

                        rPayPFRegisterTrans.FundBase = conpeek(monthFundCon, 2);
                        rPayPFRegisterTrans.OverLimitBase = conpeek(monthFundCon, 3);

                        rPayPFRegisterTrans.PFIns = conpeek(monthFundCon, 6) - conpeek(monthFundCon, 8);
                        rPayPFRegisterTrans.PFInsOver = conpeek(monthFundCon, 8);
                        rPayPFRegisterTrans.PFAcc = conpeek(monthFundCon, 7);

                        this.insertRegTrans(rPayPFRegisterTrans, rPayPFRegisterTransTotalTmp, _isTotalCreation);
                    }

                    if (conpeek(monthFundCon, 4) != 0 ||
                        conpeek(monthFundCon, 9) != 0 ||
                        conpeek(monthFundCon, 10) != 0 ||
                        conpeek(monthFundCon, 14) != 0 ||
                        conpeek(monthFundCon, 17) != 0)
                    {
                        rPayPFRegisterTrans.ListCode = RPayPFListCode::Extra1;
                        rPayPFRegisterTrans.WorkCondCode = this.getWorkCondCode(
                            conpeek(monthFundCon, 19),
                            conpeek(monthFundCon, 20),
                            conpeek(monthFundCon, 21),
                            conpeek(monthFundCon, 22),
                            conpeek(monthFundCon, 23));

                        rPayPFRegisterTrans.TotalPayments = conpeek(monthFundCon, 4);

                        rPayPFRegisterTrans.SpecDeductions = conpeek(monthFundCon, 14);

                        rPayPFRegisterTrans.OtherDeductions = conpeek(monthFundCon, 17);

                        rPayPFRegisterTrans.FundBase = conpeek(monthFundCon, 9);
                        rPayPFRegisterTrans.OverLimitBase = 0;

                        rPayPFRegisterTrans.PFIns = conpeek(monthFundCon, 10);
                        rPayPFRegisterTrans.PFAcc = 0;
                        rPayPFRegisterTrans.PFInsOver = 0;

                        this.insertRegTrans(rPayPFRegisterTrans, rPayPFRegisterTransTotalTmp, _isTotalCreation);
                    }

                    if (conpeek(monthFundCon, 5) != 0 ||
                        conpeek(monthFundCon, 11) != 0 ||
                        conpeek(monthFundCon, 12) != 0 ||
                        conpeek(monthFundCon, 15) != 0 ||
                        conpeek(monthFundCon, 18) != 0)
                    {
                        rPayPFRegisterTrans.ListCode = RPayPFListCode::Extra2;
                        rPayPFRegisterTrans.WorkCondCode = this.getWorkCondCode(
                            conpeek(monthFundCon, 24),
                            conpeek(monthFundCon, 25),
                            conpeek(monthFundCon, 26),
                            conpeek(monthFundCon, 27),
                            conpeek(monthFundCon, 28));

                        rPayPFRegisterTrans.TotalPayments = conpeek(monthFundCon, 5);

                        rPayPFRegisterTrans.SpecDeductions = conpeek(monthFundCon, 15);

                        rPayPFRegisterTrans.OtherDeductions = conpeek(monthFundCon, 18);

                        rPayPFRegisterTrans.FundBase = conpeek(monthFundCon, 11);
                        rPayPFRegisterTrans.OverLimitBase = 0;

                        rPayPFRegisterTrans.PFIns = conpeek(monthFundCon, 12);
                        rPayPFRegisterTrans.PFAcc = 0;
                        rPayPFRegisterTrans.PFInsOver = 0;

                        this.insertRegTrans(rPayPFRegisterTrans, rPayPFRegisterTransTotalTmp, _isTotalCreation);
                    }
                }
            }
        }

        if (_isTotalCreation)
        {
            this.appendNewTotalTrans(rPayPFRegisterTransTotalTmp);
        }

        while select rPayPFRegisterTransTotalTmp
        {
            rPayPFRegisterTransTotal.data(rPayPFRegisterTransTotalTmp);
            rPayPFRegisterTransTotal.insert();
        }

        if (!_isTotalCreation)
        {
            this.createSeniority();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRegisterData</Name>
				<Source><![CDATA[
    protected void deleteRegisterData()
    {
        RPayPFRegisterTrans rPayPFRegisterTransToDelete;
        RPayPFSeniority rPayPFSeniorityToDelete;
        RPayPFRegisterStudents rPayPFRegisterStudentsToDelete;
        RPayPFBatches rPayPFBatchesToDelete;
        RPayPFRegisterTotals rPayPFRegisterTotalsToDelete;

        if (rPayPFRegister.RecId)
        {
            delete_from rPayPFRegisterTransToDelete
                where rPayPFRegisterTransToDelete.RegisterRefRecId == rPayPFRegister.RecId;

            delete_from rPayPFSeniorityToDelete
                where rPayPFSeniorityToDelete.RegisterRefRecId == rPayPFRegister.RecId;

            delete_from rPayPFRegisterStudentsToDelete
                where rPayPFRegisterStudentsToDelete.RegisterRefRecId == rPayPFRegister.RecId;

            delete_from rPayPFBatchesToDelete
                where rPayPFBatchesToDelete.RegisterRefRecId == rPayPFRegister.RecId;

            delete_from rPayPFRegisterTotalsToDelete
                where rPayPFRegisterTotalsToDelete.RegisterRefRecId == rPayPFRegister.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAddAmounts</Name>
				<Source><![CDATA[
    protected void fillAddAmounts(
        RPayPFRegisterTotals    _registerTotals,
        int                     _createdLineNum,
        RPayPFAddPremiumType    _addType)
    {
        RPayPFRegisterAdd rPayPFRegisterAdd;

        _registerTotals.LineNum = _createdLineNum;

        _registerTotals.ColNum = 3;
        select sum(PFIns) from rPayPFRegisterAdd
            where (rPayPFRegisterAdd.RegisterRefRecId == _registerTotals.RegisterRefRecId ||
                   (rPayPFRegisterOriginal && rPayPFRegisterAdd.RegisterRefRecId == rPayPFRegisterOriginal.RecId)) &&
                  rPayPFRegisterAdd.Type == _addType &&
                  rPayPFRegisterAdd.Period >= #Year2014;
        _registerTotals.Value = rPayPFRegisterAdd.PFIns;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.ColNum = 4;
        select sum(PFIns) from rPayPFRegisterAdd
            where (rPayPFRegisterAdd.RegisterRefRecId == _registerTotals.RegisterRefRecId ||
                   (rPayPFRegisterOriginal && rPayPFRegisterAdd.RegisterRefRecId == rPayPFRegisterOriginal.RecId)) &&
                  rPayPFRegisterAdd.Type == _addType &&
                  rPayPFRegisterAdd.Period < #Year2014;
        _registerTotals.Value = rPayPFRegisterAdd.PFIns;
        recordInsertListRegTotals.add(_registerTotals);

        select sum(PFAcc), sum(PFAdd1), sum(PFAdd2), sum(MedIns) from rPayPFRegisterAdd
            where (rPayPFRegisterAdd.RegisterRefRecId == _registerTotals.RegisterRefRecId ||
                   (rPayPFRegisterOriginal && rPayPFRegisterAdd.RegisterRefRecId == rPayPFRegisterOriginal.RecId)) &&
                  rPayPFRegisterAdd.Type == _addType;

        _registerTotals.ColNum = 5;
        _registerTotals.Value = rPayPFRegisterAdd.PFAcc;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.ColNum = 6;
        _registerTotals.Value = rPayPFRegisterAdd.PFAdd1;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.ColNum = 7;
        _registerTotals.Value = rPayPFRegisterAdd.PFAdd2;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.ColNum = 8;
        _registerTotals.Value = rPayPFRegisterAdd.MedIns;
        recordInsertListRegTotals.add(_registerTotals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAddAmountsMth</Name>
				<Source><![CDATA[
    protected void fillAddAmountsMth(
        RPayPFRegisterTotals    _registerTotals,
        int                     _createdLineNum,
        RPayPFAddPremiumType    _addType,
        ReportPeriod_RU         _period)
    {
        RPayPFRegisterAdd rPayPFRegisterAdd;

        _registerTotals.LineNum = _createdLineNum;

        select sum(PFIns), sum(PFAdd1), sum(PFAdd2), sum(MedIns) from rPayPFRegisterAdd
            where (rPayPFRegisterAdd.RegisterRefRecId == _registerTotals.RegisterRefRecId ||
                   (rPayPFRegisterOriginal && rPayPFRegisterAdd.RegisterRefRecId == rPayPFRegisterOriginal.RecId)) &&
                  rPayPFRegisterAdd.Type == _addType &&
                  rPayPFRegisterAdd.Period == _period;

        _registerTotals.ColNum = 3;
        _registerTotals.Value = rPayPFRegisterAdd.PFIns;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.ColNum = 6;
        _registerTotals.Value = rPayPFRegisterAdd.PFAdd1;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.ColNum = 7;
        _registerTotals.Value = rPayPFRegisterAdd.PFAdd2;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.ColNum = 8;
        _registerTotals.Value = rPayPFRegisterAdd.MedIns;
        recordInsertListRegTotals.add(_registerTotals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAddAmountsOver</Name>
				<Source><![CDATA[
    protected void fillAddAmountsOver(
        RPayPFRegisterTotals    _registerTotals,
        int                     _createdLineNum)
    {
        RPayPFRegisterAdd rPayPFRegisterAdd;

        _registerTotals.LineNum = _createdLineNum;

        _registerTotals.ColNum = 3;
        select sum(PFInsOverLimit) from rPayPFRegisterAdd
            where (rPayPFRegisterAdd.RegisterRefRecId == _registerTotals.RegisterRefRecId ||
                   (rPayPFRegisterOriginal && rPayPFRegisterAdd.RegisterRefRecId == rPayPFRegisterOriginal.RecId)) &&
                  rPayPFRegisterAdd.Type == RPayPFAddPremiumType::AddAmounts &&
                  rPayPFRegisterAdd.Period >= #Year2014;
        _registerTotals.Value = rPayPFRegisterAdd.PFInsOverLimit;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.ColNum = 4;
        select sum(PFInsOverLimit) from rPayPFRegisterAdd
            where (rPayPFRegisterAdd.RegisterRefRecId == _registerTotals.RegisterRefRecId ||
                   (rPayPFRegisterOriginal && rPayPFRegisterAdd.RegisterRefRecId == rPayPFRegisterOriginal.RecId)) &&
                  rPayPFRegisterAdd.Type == RPayPFAddPremiumType::AddAmounts &&
                  rPayPFRegisterAdd.Period < #Year2014;
        _registerTotals.Value = rPayPFRegisterAdd.PFInsOverLimit;
        recordInsertListRegTotals.add(_registerTotals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillExtraInsData</Name>
				<Source><![CDATA[
    protected void fillExtraInsData(
        RPayPFRegisterTotals        _registerTotals,
        RPayPFListCode              _listCode)
    {
        _registerTotals.AddInfo = '';

        this.fillExtraInsDataCol(_registerTotals, #TotalCol, _listCode);

        this.fillExtraInsDataCol(_registerTotals, #Mth1Col, _listCode);

        this.fillExtraInsDataCol(_registerTotals, #Mth2Col, _listCode);

        this.fillExtraInsDataCol(_registerTotals, #Mth3Col, _listCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillExtraInsDataByCategory</Name>
				<Source><![CDATA[
    protected void fillExtraInsDataByCategory(
        RPayPFRegisterTotals        _registerTotals,
        RPayPFListCode              _listCode)
    {
        _registerTotals.AddInfo = this.getAddInfoListCode(_listCode);

        this.fillExtraInsDataWorkCondByCategory(_registerTotals, _listCode, RPayPFWorkCondCode::O4);

        this.fillExtraInsDataWorkCondByCategory(_registerTotals, _listCode, RPayPFWorkCondCode::B34);

        this.fillExtraInsDataWorkCondByCategory(_registerTotals, _listCode, RPayPFWorkCondCode::B33);

        this.fillExtraInsDataWorkCondByCategory(_registerTotals, _listCode, RPayPFWorkCondCode::B32);

        this.fillExtraInsDataWorkCondByCategory(_registerTotals, _listCode, RPayPFWorkCondCode::B31);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillExtraInsDataCol</Name>
				<Source><![CDATA[
    protected void fillExtraInsDataCol(
        RPayPFregisterTotals    _registerTotals,
        int                     _colNum,
        RPayPFListCode          _listCode)
    {
        RPayPFRegisterTrans     rPayPFRegisterTrans;
        RPayPFLineType          lineType;
        ReportPeriod_RU         payPeriod;

        [lineType, payPeriod] = this.colNum2LineTypePeriod(_colNum);

        rPayPFRegisterTrans = this.selectRegisterTrans(
            _registerTotals.RegisterRefRecId,
            RPayPFTariff::Normal,
            _listCode,
            lineType,
            payPeriod,
            true,
            RPayPFWorkCondCode::None,
            false);

        _registerTotals.ColNum = _colNum;

        _registerTotals.LineNum = _listCode == RPayPFListCode::Extra1 ? 220 : 230;
        _registerTotals.Value = rPayPFRegisterTrans.TotalPayments;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.LineNum = _listCode == RPayPFListCode::Extra1 ? 221 : 231;
        _registerTotals.Value = rPayPFRegisterTrans.SpecDeductions + rPayPFRegisterTrans.OtherDeductions;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.LineNum = _listCode == RPayPFListCode::Extra1 ? 223 : 233;
        _registerTotals.Value = rPayPFRegisterTrans.FundBase;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.LineNum = _listCode == RPayPFListCode::Extra1 ? 224 : 234;
        _registerTotals.Value = rPayPFRegisterTrans.PFIns;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.LineNum = _listCode == RPayPFListCode::Extra1 ? 225 : 235;
        _registerTotals.Value = this.getPersonsTotalPaym(
            _registerTotals.RegisterRefRecId,
            RPayPFTariff::Normal,
            _listCode,
            lineType,
            payPeriod,
            true,
            false,
            RPayPFWorkCondCode::None,
            false);
        recordInsertListRegTotals.add(_registerTotals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillExtraInsDataColByCategory</Name>
				<Source><![CDATA[
    protected void fillExtraInsDataColByCategory(
        RPayPFregisterTotals    _registerTotals,
        int                     _colNum,
        RPayPFListCode          _listCode,
        RPayPFWorkCondCode      _workCond)
    {
        RPayPFRegisterTrans     rPayPFRegisterTrans;
        RPayPFLineType          lineType;
        ReportPeriod_RU         payPeriod;
        int                     lineNum1,lineNum2, lineNum3, lineNum4, lineNum5;

        [lineType, payPeriod] = this.colNum2LineTypePeriod(_colNum);

        rPayPFRegisterTrans = this.selectRegisterTrans(
            _registerTotals.RegisterRefRecId,
            RPayPFTariff::Normal,
            _listCode,
            lineType,
            payPeriod,
            true,
            _workCond,
            false);

        _registerTotals.ColNum = _colNum;

        switch (_workCond)
        {
            case RPayPFWorkCondCode::O4:
                lineNum1 = 240;
                lineNum2 = 241;
                lineNum3 = 243;
                lineNum4 = 244;
                lineNum5 = 245;
                break;
            case RPayPFWorkCondCode::B34:
                lineNum1 = 246;
                lineNum2 = 247;
                lineNum3 = 249;
                lineNum4 = 250;
                lineNum5 = 251;
                break;
            case RPayPFWorkCondCode::B33:
                lineNum1 = 252;
                lineNum2 = 253;
                lineNum3 = 255;
                lineNum4 = 256;
                lineNum5 = 257;
                break;
            case RPayPFWorkCondCode::B32:
                lineNum1 = 258;
                lineNum2 = 259;
                lineNum3 = 261;
                lineNum4 = 262;
                lineNum5 = 263;
                break;
            case RPayPFWorkCondCode::B31:
                lineNum1 = 264;
                lineNum2 = 265;
                lineNum3 = 267;
                lineNum4 = 268;
                lineNum5 = 269;
                break;
        }

        _registerTotals.LineNum = lineNum1;
        _registerTotals.Value = rPayPFRegisterTrans.TotalPayments;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.LineNum = lineNum2;
        _registerTotals.Value = rPayPFRegisterTrans.SpecDeductions + rPayPFRegisterTrans.OtherDeductions;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.LineNum = lineNum3;
        _registerTotals.Value = rPayPFRegisterTrans.FundBase;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.LineNum = lineNum4;
        _registerTotals.Value = rPayPFRegisterTrans.PFIns;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.LineNum = lineNum5;
        _registerTotals.Value = this.getPersonsTotalPaym(
            _registerTotals.RegisterRefRecId,
            RPayPFTariff::Normal,
            _listCode,
            lineType,
            payPeriod,
            true,
            false,
            _workCond,
            false);
        recordInsertListRegTotals.add(_registerTotals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillExtraInsDataWorkCondByCategory</Name>
				<Source><![CDATA[
    protected void fillExtraInsDataWorkCondByCategory(
        RPayPFRegisterTotals        _registerTotals,
        RPayPFListCode              _listCode,
        RPayPFWorkCondCode          _workCond)
    {
        this.fillExtraInsDataColByCategory(_registerTotals, #TotalCol, _listCode, _workCond);

        this.fillExtraInsDataColByCategory(_registerTotals, #Mth1Col, _listCode, _workCond);

        this.fillExtraInsDataColByCategory(_registerTotals, #Mth2Col, _listCode, _workCond);

        this.fillExtraInsDataColByCategory(_registerTotals, #Mth3Col, _listCode, _workCond);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFSSData</Name>
				<Source><![CDATA[
    protected void fillFSSData(
        RPayPFRegisterGeneratorRSV  _registerGeneratorRSV,
        RPayPFRegisterTotals        _registerTotals,
        RPayPFTariff                _tariff)
    {
        _registerTotals.AddInfo = this.getAddInfoTariff(_tariff);

        this.fillFSSDataCol(
            _registerGeneratorRSV,
            _registerTotals,
            _tariff,
            #TotalCol);

        this.fillFSSDataCol(
            _registerGeneratorRSV,
            _registerTotals,
            _tariff,
            #Mth1Col);

        this.fillFSSDataCol(
            _registerGeneratorRSV,
            _registerTotals,
            _tariff,
            #Mth2Col);

        this.fillFSSDataCol(
            _registerGeneratorRSV,
            _registerTotals,
            _tariff,
            #Mth3Col);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFSSDataCol</Name>
				<Source><![CDATA[
    protected void fillFSSDataCol(
        RPayPFRegisterGeneratorRSV  _registerGeneratorRSV,
        RPayPFRegisterTotals        _registerTotals,
        RPayPFTariff                _tariff,
        int                         _colNum)
    {
        RPayAmount value214;

        _registerTotals.ColNum = _colNum;

        _registerTotals.LineNum = 210;
        _registerTotals.Value = _registerGeneratorRSV.getFSSData(271, _colNum, _tariff);
        value214 = _registerTotals.Value;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.LineNum = 211;
        _registerTotals.Value = _registerGeneratorRSV.getFSSData(272, _colNum, _tariff);
        value214 -= _registerTotals.Value;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.LineNum = 212;
        _registerTotals.Value = _registerGeneratorRSV.getFSSData(273, _colNum, _tariff);
        value214 -= _registerTotals.Value;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.LineNum = 213;
        _registerTotals.Value = _registerGeneratorRSV.getFSSData(274, _colNum, _tariff);
        value214 -= _registerTotals.Value;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.LineNum = 214;
        _registerTotals.Value = value214;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.LineNum = 215;
        _registerTotals.Value = _registerGeneratorRSV.getFSSData(276, _colNum, _tariff);
        recordInsertListRegTotals.add(_registerTotals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillInsData</Name>
				<Source><![CDATA[
    protected void fillInsData(
        RPayPFRegisterTotals        _registerTotals,
        RPayPFTariff                _tariff)
    {
        _registerTotals.AddInfo = this.getAddInfoTariff(_tariff);

        this.fillInsDataCol(_registerTotals, #TotalCol, _tariff);

        this.fillInsDataCol(_registerTotals, #Mth1Col, _tariff);

        this.fillInsDataCol(_registerTotals, #Mth2Col, _tariff);

        this.fillInsDataCol(_registerTotals, #Mth3Col, _tariff);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillInsDataCol</Name>
				<Source><![CDATA[
    protected void fillInsDataCol(
        RPayPFregisterTotals    _registerTotals,
        int                     _colNum,
        RPayPFTariff            _tariff)
    {
        RPayPFRegisterTrans     rPayPFRegisterTrans;
        RPayPFLineType          lineType;
        ReportPeriod_RU         payPeriod;
        Set                     personsOverLimitBase = new Set(Types::String);
        boolean                 skipCorrections = false;

        if (rPayPFRegister.dateStartQuarter() == #Year2014)
        {
            skipCorrections = true;
        }

        [lineType, payPeriod] = this.colNum2LineTypePeriod(_colNum);

        rPayPFRegisterTrans = this.selectRegisterTrans(
            _registerTotals.RegisterRefRecId,
            _tariff,
            RPayPFListCode::Normal,
            lineType,
            payPeriod);

        _registerTotals.ColNum = _colNum;

        _registerTotals.LineNum = 200;
        _registerTotals.Value = rPayPFRegisterTrans.TotalPayments;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.LineNum = 201;
        _registerTotals.Value = rPayPFRegisterTrans.OtherDeductions;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.LineNum = 202;
        _registerTotals.Value = rPayPFRegisterTrans.SpecDeductions;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.LineNum = 203;
        _registerTotals.Value = rPayPFRegisterTrans.OverLimitBase;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.LineNum = 204;
        _registerTotals.Value = rPayPFRegisterTrans.FundBase;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.LineNum = 205;
        _registerTotals.Value = rPayPFRegisterTrans.PFIns;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.LineNum = 206;
        _registerTotals.Value = rPayPFRegisterTrans.PFInsOver;
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.LineNum = 207;
        _registerTotals.Value = this.getPersonsTotalPaym(
            _registerTotals.RegisterRefRecId,
            _tariff,
            RPayPFListCode::Normal,
            lineType,
            payPeriod);
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.LineNum = 208;

        while select sum(OverLimitBase) from rPayPFRegisterTrans group by EmplId
            where (rPayPFRegisterTrans.RegisterRefRecId  == _registerTotals.RegisterRefRecId ||
                   (rPayPFRegisterOriginal && rPayPFRegisterTrans.RegisterRefRecId == rPayPFRegisterOriginal.RecId)) &&
                  rPayPFRegisterTrans.Tariff            == _tariff &&
                  rPayPFRegisterTrans.LineType          == lineType &&
                  (lineType == RPayPFLineType::Total ||
                   rPayPFRegisterTrans.Period          == payPeriod) &&
                  (!skipCorrections ||
                   (rPayPFRegisterTrans.RegisterRefRecId != rPayPFRegisterOriginal.RecId ||
                    (rPayPFRegisterTrans.RegisterRefRecId == rPayPFRegisterOriginal.RecId &&
                     rPayPFRegisterTrans.Type             == RpayPensionFundExportKindOfCorrection::None)))
        {
            if (rPayPFRegisterTrans.OverLimitBase != 0)
            {
                personsOverLimitBase.add(rPayPFRegisterTrans.EmplId);
            }
        }

        _registerTotals.Value = personsOverLimitBase.elements();
        recordInsertListRegTotals.add(_registerTotals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillNeedToBePaid</Name>
				<Source><![CDATA[
    protected void fillNeedToBePaid(
        RPayPFregisterTotals _registerTotals,
        int                  _createdLineNum)
    {
        _registerTotals.LineNum = _createdLineNum;

        _registerTotals.ColNum = 3;
        _registerTotals.Value = this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            3,
            strfmt('%1', 130));
        _registerTotals.Value -= this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            3,
            strfmt('%1', 140));
        _registerTotals.insert();

        _registerTotals.ColNum = 4;
        _registerTotals.Value = this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            4,
            strfmt('%1', 130));
        _registerTotals.Value -= this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            4,
            strfmt('%1', 140));
        _registerTotals.insert();

        _registerTotals.ColNum = 5;
        _registerTotals.Value = this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            5,
            strfmt('%1', 130));
        _registerTotals.Value -= this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            5,
            strfmt('%1', 140));
        _registerTotals.insert();

        _registerTotals.ColNum = 6;
        _registerTotals.Value = this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            6,
            strfmt('%1', 130));
        _registerTotals.Value -= this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            6,
            strfmt('%1', 140));
        _registerTotals.insert();

        _registerTotals.ColNum = 7;
        _registerTotals.Value = this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            7,
            strfmt('%1', 130));
        _registerTotals.Value -= this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            7,
            strfmt('%1', 140));
        _registerTotals.insert();

        _registerTotals.ColNum = 8;
        _registerTotals.Value = this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            8,
            strfmt('%1', 130));
        _registerTotals.Value -= this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            8,
            strfmt('%1', 140));
        _registerTotals.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTotalInsuranceAmount</Name>
				<Source><![CDATA[
    protected void fillTotalInsuranceAmount(
        RPayPFregisterTotals    _registerTotals,
        int                     _selectedColNum,
        int                     _createdLineNum)
    {
        _registerTotals.LineNum = _createdLineNum;

        _registerTotals.ColNum = 3;
        _registerTotals.Value = this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            _selectedColNum,
            strfmt('%1,%2', 205, 206));
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.ColNum = 6;
        _registerTotals.Value = this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            _selectedColNum,
            strfmt('%1', 224));
        _registerTotals.Value += this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            _selectedColNum,
            strfmt('%1,%2,%3,%4,%5', 244, 250, 256, 262, 268),
            this.getAddInfoListCode(RPayPFListCode::Extra1));
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.ColNum = 7;
        _registerTotals.Value = this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            _selectedColNum,
            strfmt('%1', 234));
        _registerTotals.Value += this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            _selectedColNum,
            strfmt('%1,%2,%3,%4,%5', 244, 250, 256, 262, 268),
            this.getAddInfoListCode(RPayPFListCode::Extra2));
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.ColNum = 8;
        _registerTotals.Value = this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            _selectedColNum,
            strfmt('%1', 215));
        recordInsertListRegTotals.add(_registerTotals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTotalInsuranceAmount3Mth</Name>
				<Source><![CDATA[
    protected void fillTotalInsuranceAmount3Mth(
        RPayPFRegisterTotals _registerTotals,
        int                  _createdLineNum)
    {
        _registerTotals.LineNum = _createdLineNum;

        _registerTotals.ColNum = 3;
        _registerTotals.Value = this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            3,
            strfmt('%1,%2,%3', 111, 112, 113));
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.ColNum = 6;
        _registerTotals.Value = this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            6,
            strfmt('%1,%2,%3', 111, 112, 113));
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.ColNum = 7;
        _registerTotals.Value = this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            7,
            strfmt('%1,%2,%3', 111, 112, 113));
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.ColNum = 8;
        _registerTotals.Value = this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            8,
            strfmt('%1,%2,%3', 111, 112, 113));
        recordInsertListRegTotals.add(_registerTotals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTotalPaid</Name>
				<Source><![CDATA[
    protected void fillTotalPaid(
        RPayPFregisterTotals _registerTotals,
        int                  _createdLineNum)
    {
        _registerTotals.LineNum = _createdLineNum;

        _registerTotals.ColNum = 3;
        _registerTotals.Value = this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            3,
            strfmt('%1,%2,%3', 141, 142, 143));
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.ColNum = 4;
        _registerTotals.Value = this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            4,
            strfmt('%1,%2,%3', 141, 142, 143));
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.ColNum = 5;
        _registerTotals.Value = this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            5,
            strfmt('%1,%2,%3', 141, 142, 143));
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.ColNum = 6;
        _registerTotals.Value = this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            6,
            strfmt('%1,%2,%3', 141, 142, 143));
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.ColNum = 7;
        _registerTotals.Value = this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            7,
            strfmt('%1,%2,%3', 141, 142, 143));
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.ColNum = 8;
        _registerTotals.Value = this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            8,
            strfmt('%1,%2,%3', 141, 142, 143));
        recordInsertListRegTotals.add(_registerTotals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTotalToPay</Name>
				<Source><![CDATA[
    protected void fillTotalToPay(
        RPayPFregisterTotals _registerTotals,
        int                  _createdLineNum)
    {
        _registerTotals.LineNum = _createdLineNum;

        _registerTotals.ColNum = 3;
        _registerTotals.Value = this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            3,
            strfmt('%1,%2,%3', 100, 110, 120));
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.ColNum = 4;
        _registerTotals.Value = this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            4,
            strfmt('%1,%2,%3', 100, 110, 120));
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.ColNum = 5;
        _registerTotals.Value = this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            5,
            strfmt('%1,%2,%3', 100, 110, 120));
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.ColNum = 6;
        _registerTotals.Value = this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            6,
            strfmt('%1,%2,%3', 100, 110, 120));
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.ColNum = 7;
        _registerTotals.Value = this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            7,
            strfmt('%1,%2,%3', 100, 110, 120));
        recordInsertListRegTotals.add(_registerTotals);

        _registerTotals.ColNum = 8;
        _registerTotals.Value = this.getRegisterTotals(
            _registerTotals.RegisterRefRecId,
            8,
            strfmt('%1,%2,%3', 100, 110, 120));
        recordInsertListRegTotals.add(_registerTotals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAddInfoListCode</Name>
				<Source><![CDATA[
    protected str getAddInfoListCode(RPayPFListCode _listCode)
    {
        return _listCode == RPayPFListCode::Extra1 ? '1' : (_listCode == RPayPFListCode::Extra2 ? '2' : '0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAddInfoTariff</Name>
				<Source><![CDATA[
    protected str getAddInfoTariff(RPayPFTariff _tariff)
    {
        return _tariff == RPayPFTariff::Invalid ? '03' : '01';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmplQtyAvg</Name>
				<Source><![CDATA[
    #define.RoundOffEmplQtyAvg(1.0)
    private int getEmplQtyAvg(RPayGroup _payGroup)
    {
        Query                   query;
        QueryBuildDataSource    qbds, qbdsGroupMember, qbdsFund, qbdsPerson, qbdsEmpl;
        QueryRun                queryRunQty;
        RPayAverageQuantity     rPayAverageQuantity;

        int                     emplQtyAvg;
        int                     roundDecimals;

        if (_payGroup)
        {
            query = new Query();
            qbds = query.addDataSource(tablenum(RPayAverageQuantity));

            qbds.addSelectionField(fieldnum(RPayAverageQuantity, AverageQty), SelectionField::Avg);
            qbds.addRange(fieldnum(RPayAverageQuantity, PayPeriod)).value(
                SysQuery::range(dateStartYr(rPayPFRegister.dateEndQuarter()), rPayPFRegister.dateEndQuarter()));
            qbds.addRange(fieldnum(RPayAverageQuantity, PayGroup)).value(_payGroup);
            qbdsGroupMember = qbds.addDataSource(tablenum(RPayGroupMember));
            qbdsGroupMember.addLink(fieldnum(RPayAverageQuantity, PayGroup), fieldnum(RPayGroupMember, PayGroup));
            if (RPayGroupTable::find(_payGroup).Type == RPayGroupType::Employee)
            {
                qbdsFund = qbdsGroupMember.addDataSource(tablenum(RPayFundEmplSum));
                qbdsFund.addLink(fieldnum(RPayGroupMember, PersonEmplId), fieldnum(RPayFundEmplSum, EmplId));
            }
            else
            {
                qbdsPerson = qbdsGroupMember.addDataSource(tableNum(RHRMPersonTable));
                qbdsPerson.addLink(fieldnum(RPayGroupMember, PersonEmplId), fieldnum(RHRMPersonTable, PersonnelNumber));
                qbdsPerson.addSelectionField(fieldNum(RHRMPersonTable, RecId));

                qbdsEmpl = qbdsPerson.addDataSource(tableNum(RHRMEmplTable));
                qbdsEmpl.addLink(fieldnum(RHRMPersonTable, RecId), fieldnum(RHRMEmplTable, RHRMPersonTable));
                qbdsEmpl.addRange(fieldNum(RHRMEmplTable, EmployeeId)).value(strFmt('(%1 == %2)',
                    fieldstr(RHRMEmplTable, PayMainEmplId),
                    fieldstr(RHRMEmplTable, EmployeeId)));

                qbdsFund = qbdsEmpl.addDataSource(tablenum(RPayFundEmplSum));
                qbdsFund.addLink(fieldnum(RHRMEmplTable, PayMainEmplId), fieldnum(RPayFundEmplSum, EmplId));
            }

            if (rPayPFRegister.CorrType == RPayPFCorrectionType::None)
            {
                qbdsFund.addRange(fieldnum(RPayFundEmplSum, PayPeriod)).value(
                    SysQuery::range(dateStartYr(rPayPFRegister.dateEndQuarter()), rPayPFRegister.dateEndQuarter()));
            }
            else
            {
                qbdsFund.addRange(fieldnum(RPayFundEmplSum, CorrectedPeriod)).value(
                    SysQuery::range(dateStartYr(rPayPFRegister.dateEndQuarter()), rPayPFRegister.dateEndQuarter()));
            }

            queryRunQty = new QueryRun(query);
            queryRunQty.next();

            rPayAverageQuantity = queryRunQty.get(tablenum(RPayAverageQuantity));

            roundDecimals = strlen(int2str(real2int(1/#RoundOffEmplQtyAvg))) - 1;
            emplQtyAvg = any2int(round(rPayAverageQuantity.AverageQty, #RoundOffEmplQtyAvg));
        }

        return emplQtyAvg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmplQtyByGroup</Name>
				<Source><![CDATA[
    private int getEmplQtyByGroup(RPayGroup _payGroup)
    {
        RPayRateTable rateTableEmplQty;
        RPayGroupMember groupMember;
        RHRMEmplTable   emplTable;
        RHRMPersonTable personTable;
        RPayGroupTable  payGroupTable = RPayGroupTable::find(_payGroup);
        Set st = new Set(Types::String);

        boolean findHistory(RHRMEmplId _emplId)
        {
            RPayHistory payHistory, payHistoryDismiss;
            select firstonly recId from payHistory
                order by startDate desc, transTime desc
                where payHistory.Number        == _emplId &&
                     (payHistory.operationType == RHRMJournalType::Receive   ||
                      payHistory.operationType == RHRMJournalType::Transfer) &&
                      payHistory.StartDate     <= rPayPFRegister.dateEndQuarter()
                notexists join payHistoryDismiss
                    where payHistoryDismiss.Number          == payHistory.Number        &&
                          payHistoryDismiss.operationType   == RHRMJournalType::Dismiss &&
                          payHistoryDismiss.StartDate       >= payHistory.StartDate     &&
                          payHistoryDismiss.StartDate       <  dateStartYr(rPayPFRegister.Year);

            return payHistory.RecId != 0;
        }

        void countMember(RPayPersonEmplId PersonEmplIdRate, RHRMEmplId emplIdHistory, str emplIdMain)
        {
            if (rateTableEmplQty.getValue(RPayRateCallContext::construct(rPayPFRegister.dateEndQuarter(), PersonEmplIdRate)) && findHistory(emplIdHistory))
            {
                st.add(emplIdMain);
            }
        }

        rateTableEmplQty = RPayRateTable::find(RPayCounterTable::find(payTaxParameters.PensionFundInsurance).PayRateEmpl);

        if (payGroupTable.Type == RPayGroupType::Employee)
        {
            while select PersonEmplId from groupMember
                where groupMember.PayGroup == _payGroup
                join EmployeeId, payMainEmplId from emplTable
                    where emplTable.EmployeeId == groupMember.PersonEmplId
            {
                countMember(groupMember.PersonEmplId, emplTable.EmployeeId, emplTable.PayMainEmplId);
            }
        }
        else
        {
            while select PersonEmplId from groupMember
                where groupMember.PayGroup == _payGroup
            join RecId from personTable
                where personTable.PersonnelNumber == groupMember.PersonEmplId
           join EmployeeId, payMainEmplId from emplTable
                where emplTable.RHRMPersonTable == personTable.RecId
            {
                countMember(groupMember.PersonEmplId, emplTable.EmployeeId, emplTable.PayMainEmplId);
            }
        }

        return st.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEndPeriodMth</Name>
				<Source><![CDATA[
    protected ReportPeriod_RU getEndPeriodMth(RHRMEmplId _emplId)
    {
        ReportPeriod_RU endPeriodMth;
        RPayFundEmplSum rPayFundEmplSum;

        if (rPayPFRegister.CorrType == RPayPFCorrectionType::None)
        {
            select maxof(CorrectedPeriod) from rPayFundEmplSum
                where rPayFundEmplSum.EmplId == _emplId &&
                      rPayFundEmplSum.PayPeriod >= reportStartPeriod &&
                      rPayFundEmplSum.PayPeriod <= reportEndPeriod;

            endPeriodMth = rPayFundEmplSum.CorrectedPeriod;
        }
        else
        {
            endPeriodMth = endmth(rPayPFRegister.dateEndQuarter());
        }

        return endPeriodMth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriod</Name>
				<Source><![CDATA[
    protected ReportPeriod_RU getPeriod(ReportPeriod_RU _period, ReportPeriod_RU _payPeriod)
    {
        ReportPeriod_RU period = _period;

        if (!rPayPFRegister.isCorrRegister() && _period != _payPeriod)
        {
            if (rPayTaxParameters.PFReportStornoType == RPayPFReportStornoType::Inevitable)
            {
                period = _payPeriod;
            }
        }

        return period;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPersonsTotalPaym</Name>
				<Source><![CDATA[
    protected int getPersonsTotalPaym(
        RefRecId            _registerRefRecId,
        RPayPFTariff        _tariff,
        RPayPFListCode      _listCode,
        RPayPFLineType      _lineType,
        ReportPeriod_RU     _payPeriod = datenull(),
        boolean             _allTariffs = false,
        boolean             _allListCodes = true,
        RPayPFWorkCondCode  _workCond = RPayPFWorkCondCode::None,
        boolean             _allWorkConds = true)
    {
        RPayPFRegisterTrans     rPayPFRegisterTrans;
        Set                     personsTotalPayments = new Set(Types::String);
        boolean                 skipCorrections = false;

        if (rPayPFRegister.dateStartQuarter() == #Year2014)
        {
            skipCorrections = true;
        }

        while select sum(TotalPayments) from rPayPFRegisterTrans group by EmplId
            where (rPayPFRegisterTrans.RegisterRefRecId  == _registerRefRecId ||
                   (rPayPFRegisterOriginal && rPayPFRegisterTrans.RegisterRefRecId == rPayPFRegisterOriginal.RecId)) &&
                  (_allTariffs ||
                   rPayPFRegisterTrans.Tariff           == _tariff) &&
                  (_allListCodes ||
                   rPayPFRegisterTrans.ListCode         == _listCode) &&
                  (_allWorkConds ||
                   rPayPFRegisterTrans.WorkCondCode     == _workCond) &&
                  rPayPFRegisterTrans.LineType          == _lineType &&
                  (_lineType == RPayPFLineType::Total ||
                   rPayPFRegisterTrans.Period          == _payPeriod) &&
                  (!skipCorrections ||
                   (rPayPFRegisterTrans.RegisterRefRecId != rPayPFRegisterOriginal.RecId ||
                    (rPayPFRegisterTrans.RegisterRefRecId == rPayPFRegisterOriginal.RecId &&
                     rPayPFRegisterTrans.Type             == RpayPensionFundExportKindOfCorrection::None)))
        {
            if (rPayPFRegisterTrans.TotalPayments != 0)
            {
                personsTotalPayments.add(rPayPFRegisterTrans.EmplId);
            }
        }

        return personsTotalPayments.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRegisterTotals</Name>
				<Source><![CDATA[
    protected RPayAmount getRegisterTotals(
        RefRecId                _registerRefRecId,
        int                     _colNum,
        Range                   _lineNums,
        RPayPFRegisterAddInfo   _addInfo = '')
    {
        RPayPFRegisterTotals    rPayPFRegisterTotals;
        Query                   query = new Query();
        QueryRun                queryRunLoc;
        QueryBuildDataSource    qbds;

        qbds = query.addDataSource(tablenum(RPayPFRegisterTotals));
        qbds.addSelectionField(fieldnum(RPayPFRegisterTotals, Value), SelectionField::Sum);
        qbds.addRange(fieldnum(RPayPFRegisterTotals, RegisterRefRecId)).value(queryvalue(_registerRefRecId));
        qbds.addRange(fieldnum(RPayPFRegisterTotals, ColNum)).value(queryvalue(_colNum));
        qbds.addRange(fieldnum(RPayPFRegisterTotals, LineNum)).value(_lineNums);
        qbds.addRange(fieldnum(RPayPFRegisterTotals, AddInfo)).value(_addInfo);

        queryRunLoc = new QueryRun(query);
        queryRunLoc.next();
        rPayPFRegisterTotals = queryRunLoc.get(tablenum(RPayPFRegisterTotals));

        return rPayPFRegisterTotals.Value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartPeriodMth</Name>
				<Source><![CDATA[
    protected ReportPeriod_RU getStartPeriodMth(RHRMEmplId _emplId)
    {
        ReportPeriod_RU startPeriodMth;
        RPayFundEmplSum rPayFundEmplSum;

        if (rPayPFRegister.CorrType == RPayPFCorrectionType::None)
        {
            select minof(CorrectedPeriod) from rPayFundEmplSum
                where rPayFundEmplSum.EmplId == _emplId &&
                      rPayFundEmplSum.PayPeriod >= reportStartPeriod &&
                      rPayFundEmplSum.PayPeriod <= reportEndPeriod;

            startPeriodMth = rPayFundEmplSum.CorrectedPeriod;
        }
        else
        {
            startPeriodMth = endmth(rPayPFRegister.dateStartQuarter());
        }

        return startPeriodMth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkCondCode</Name>
				<Source><![CDATA[
    protected RPayPFWorkCondCode getWorkCondCode(
        RPayAmount _deductionO4extra,
        RPayAmount _deductionB34extra,
        RPayAmount _deductionB33extra,
        RPayAmount _deductionB32extra,
        RPayAmount _deductionB31extra)
    {
        RPayPFWorkCondCode      rPayPFWorkCondCode = RPayPFWorkCondCode::None;

        if (_deductionO4extra != 0)
        {
            rPayPFWorkCondCode = RPayPFWorkCondCode::O4;
        }
        else if (_deductionB34extra != 0)
        {
            rPayPFWorkCondCode = RPayPFWorkCondCode::B34;
        }
        else if (_deductionB33extra != 0)
        {
            rPayPFWorkCondCode = RPayPFWorkCondCode::B33;
        }
        else if (_deductionB32extra != 0)
        {
            rPayPFWorkCondCode = RPayPFWorkCondCode::B32;
        }
        else if (_deductionB31extra != 0)
        {
            rPayPFWorkCondCode = RPayPFWorkCondCode::B31;
        }

        return rPayPFWorkCondCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBatchReference</Name>
				<Source><![CDATA[
    protected void initBatchReference(RPayPFRegisterTrans _rPayPFRegisterTrans, boolean _isTotalCreation)
    {
        RPayPFBatches       rPayPFBatches;
        RPayPFEmplCategory  category = _rPayPFRegisterTrans.Period < #Year2014 ? _rPayPFRegisterTrans.Category : '';
        RHRMSortOfWork      agreement = _rPayPFRegisterTrans.Period < #Year2014 ? _rPayPFRegisterTrans.Agreement : RHRMSortOfWork::Direct;
        RefREcId            existingBatchRecId;

        if (!rPayPFRegister.isCorrRegister())
        {
            if (batchEmplsMap.exists([_rPayPFRegisterTrans.EmplId, _rPayPFRegisterTrans.Type, dateEndQtr(_rPayPFRegisterTrans.Period), category, agreement]))
            {
                existingBatchRecId = batchEmplsMap.lookup([_rPayPFRegisterTrans.EmplId, _rPayPFRegisterTrans.Type, dateEndQtr(_rPayPFRegisterTrans.Period), category, agreement]);
            }

            select firstonly forupdate rPayPFBatches order by Qty
                where rPayPFBatches.RegisterRefRecId == rPayPFRegister.RecId &&
                      rPayPFBatches.Type == _rPayPFRegisterTrans.Type &&
                      (_isTotalCreation ||
                       (rPayPFBatches.Period == dateEndQtr(_rPayPFRegisterTrans.Period) &&
                        (_rPayPFRegisterTrans.Period < #Year2014 &&
                         rPayPFBatches.Category == _rPayPFRegisterTrans.Category &&
                         rPayPFBatches.Agreement == _rPayPFRegisterTrans.Agreement ||
                         _rPayPFRegisterTrans.Period >= #Year2014)
                         )
                        ) &&
                      (docPersonQtyMax == 0 ||
                       rPayPFBatches.Qty <= docPersonQtyMax) &&
                      (rPayPFBatches.RecId == existingBatchRecId || !existingBatchRecId);

            if (!_isTotalCreation && this.isAnyValueTrans(_rPayPFRegisterTrans))
            {
                if (rPayPFBatches &&
                    (docPersonQtyMax == 0 ||
                     rPayPFBatches.Qty < docPersonQtyMax ||
                     (rPayPFBatches.Qty == docPersonQtyMax &&
                      existingBatchRecId)))
                {
                    if (_rPayPFRegisterTrans.ListCode == RPayPFListCode::Normal)
                    {
                        rPayPFBatches.FundBase += _rPayPFRegisterTrans.FundBase;
                        rPayPFBatches.PFIns += _rPayPFRegisterTrans.PFIns;
                        rPayPFBatches.PFAcc += _rPayPFRegisterTrans.PFAcc;
                    }

                    if (!existingBatchRecId)
                    {
                        batchEmplsMap.insert([_rPayPFRegisterTrans.EmplId, _rPayPFRegisterTrans.Type, dateEndQtr(_rPayPFRegisterTrans.Period), category, agreement], rPayPFBatches.RecId);
                        rPayPFBatches.Qty ++;
                    }

                    rPayPFBatches.update();
                }
                else
                {
                    rPayPFBatches.clear();
                    rPayPFBatches.RegisterRefRecId = rPayPFRegister.RecId;
                    rPayPFBatches.Type = _rPayPFRegisterTrans.Type;
                    rPayPFBatches.Period = dateEndQtr(_rPayPFRegisterTrans.Period);

                    if (_rPayPFRegisterTrans.Period < #Year2014)
                    {
                        rPayPFBatches.Agreement = _rPayPFRegisterTrans.Agreement;
                        rPayPFBatches.Category = _rPayPFRegisterTrans.Category;
                    }
                    else
                    {
                        rPayPFBatches.Agreement = RHRMSortOfWork::Direct;
                        rPayPFBatches.Category = '';
                    }

                    if (_rPayPFRegisterTrans.ListCode == RPayPFListCode::Normal)
                    {
                        rPayPFBatches.FundBase = _rPayPFRegisterTrans.FundBase;
                        rPayPFBatches.PFIns = _rPayPFRegisterTrans.PFIns;
                        rPayPFBatches.PFAcc = _rPayPFRegisterTrans.PFAcc;
                    }

                    rPayPFBatches.Qty = 1;
                    batchNumber++;
                    rPayPFBatches.Number = batchNumber;
                    rPayPFBatches.insert();

                    batchEmplsMap.insert([_rPayPFRegisterTrans.EmplId, _rPayPFRegisterTrans.Type, dateEndQtr(_rPayPFRegisterTrans.Period), category, agreement], rPayPFBatches.RecId);
                }
            }

            _rPayPFRegisterTrans.BatchRefRecId = rPayPFBatches.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCorrectType</Name>
				<Source><![CDATA[
    protected void initCorrectType(RPayPFRegisterTrans _rPayPFRegisterTrans, boolean _isTotalCreation)
    {
        _rPayPFRegisterTrans.Type = RpayPensionFundExportKindOfCorrection::None;

        if (!_isTotalCreation)
        {
            if (rPayPFRegister.CorrType != RPayPFCorrectionType::None ||
                _rPayPFRegisterTrans.Period < endmth(rPayPFRegister.dateStartQuarter()) ||
                _rPayPFRegisterTrans.Period > endmth(rPayPFRegister.dateEndQuarter()))
            {
                _rPayPFRegisterTrans.Type = RpayPensionFundExportKindOfCorrection::Correctional;
            }

            if (_rPayPFRegisterTrans.FundBase < 0)
            {
                if (RPayFundEmplSum::getFundBaseAmount(
                    _rPayPFRegisterTrans.EmplId,
                    this.listCode2FundCode(_rPayPFRegisterTrans.ListCode),
                    endmth(dateStartYr(_rPayPFRegisterTrans.Period)),
                    _rPayPFRegisterTrans.Period,
                    maxdate()) == 0)
                {
                    _rPayPFRegisterTrans.Type = RpayPensionFundExportKindOfCorrection::Cancellative;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmployeesData</Name>
				<Source><![CDATA[
    protected void initEmployeesData(boolean _isDataForLastQuarter)
    {
        if (rPayPFRegister.CorrType == RPayPFCorrectionType::None)
        {
            if (_isDataForLastQuarter)
            {
                reportStartPeriod       = endmth(rPayPFRegister.dateStartQuarter());
                reportEndPeriod         = rPayPFRegister.dateEndQuarter();
            }
            else
            {
                reportEndPeriod         = endmth(prevMth(rPayPFRegister.dateStartQuarter()));
                reportStartPeriod       = endmth(dateStartYr(reportEndPeriod));
            }

            corrReportStartPeriod   = datenull();

            corrReportEndPeriod     = maxdate();
        }
        else
        {
            reportStartPeriod       = endmth(nextmth(rPayPFRegister.dateEndQuarter()));
            reportEndPeriod         = rPayPFRegister.CorrDate;
            corrReportStartPeriod   = endmth(rPayPFRegister.dateStartQuarter());
            corrReportEndPeriod     = rPayPFRegister.dateEndQuarter();
        }

        seniorityStartPeriod    = rPayPFRegister.dateStartQuarter();
        seniorityEndPeriod      = rPayPFRegister.dateEndQuarter();

        payTaxParameters        = RPayTaxParameters::find();

        parmContract = new RPayPFReportParmContractRSVPF();
        parmContract.reportStartPeriod(reportStartPeriod);
        parmContract.reportEndPeriod(reportEndPeriod);
        parmContract.corrReportStartPeriod(corrReportStartPeriod);
        parmContract.corrReportEndPeriod(corrReportEndPeriod);
        parmContract.seniorityStartPeriod(seniorityStartPeriod);
        parmContract.seniorityEndPeriod(seniorityEndPeriod);
        parmContract.queryRun(queryRun.pack());
        parmContract.correctionType(rPayPFRegister.CorrType == RPayPFCorrectionType::None ?
                                        RpayPensionFundExportKindOfCorrection::None :
                                        RpayPensionFundExportKindOfCorrection::Correctional);
        parmContract.correctionTypePFRegister(rPayPFRegister.CorrType);

        reportData = RPayPFReportCtrl::construct(this);
        reportData.prepareData();

        totalFundCommand = new RPayReportCommandSZV6(reportData.reportData(), [#FundAmountDS]);
        seniorityCommand = new RPayReportCommandSZV6(reportData.reportData(), [#SeniorityDS]);
        monthFundCommand = new RPayReportCommandSZV64(reportData.reportData(), [#MonthFundAmountDS]);

        if (payTaxParameters.MaxDocPerFilePFR)
        {
            maxDocPerFile = real2int(RPayRateTable::find(payTaxParameters.MaxDocPerFilePFR).getValue(RPayRateCallContext::construct(reportEndPeriod)));
        }

        if (payTaxParameters.SZVPersonCounter)
        {
            docPersonQtyMax = real2int(RPayRateTable::find(payTaxParameters.SZVPersonCounter).getValue(RPayRateCallContext::construct(reportEndPeriod)));

            if (maxDocPerFile)
            {
                docPersonQtyMax = min(maxDocPerFile, docPersonQtyMax);
            }
        }
        else
        {
            docPersonQtyMax = maxDocPerFile;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    void initFromArgs(Args _args)
    {
        int                         prevYear;
        RPayReportSocialTaxPeriod   prevPeriod;

        if (!_args || !_args.record() || _args.dataset() != tablenum(RPayPFRegister))
        {
            throw error(strfmt("@SYS25516", 'RPayPFRegisterGenerator'));
        }

        rPayPFRegister = _args.record();

        if (rPayPFRegister.isCorrRegister())
        {
            select firstonly rPayPFRegisterOriginal
                where rPayPFRegisterOriginal.Year == rPayPFRegister.Year &&
                      rPayPFRegisterOriginal.Period == rPayPFRegister.Period &&
                      rPayPFRegisterOriginal.CorrType == RPayPFCorrectionType::None &&
                      rPayPFRegisterOriginal.CorrNum == '' &&
                      rPayPFRegisterOriginal.RecId != rPayPFRegister.RecId;
        }
        else
        {
            [prevPeriod, prevYear] = rPayPFRegister.getPreviousPeriod();

            select firstonly rPayPFRegisterPrevCorr
                order by CorrNum desc
                where rPayPFRegisterPrevCorr.Year == mkdate(31, 12, prevYear) &&
                      rPayPFRegisterPrevCorr.Period == prevPeriod &&
                      rPayPFRegisterPrevCorr.CorrType != RPayPFCorrectionType::None;

            select firstonly rPayPFRegisterCorrOriginal
                where rPayPFRegisterCorrOriginal.Year ==  mkdate(31, 12, prevYear) &&
                      rPayPFRegisterCorrOriginal.Period == prevPeriod &&
                      rPayPFRegisterCorrOriginal.CorrType == RPayPFCorrectionType::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        queryBuildDataSource = query.addDataSource(tablenum(RHRMEmplTable));
        queryBuildDataSource.addSortField(fieldnum(RHRMEmplTable, EmployeeId));
        queryBuildRange = queryBuildDataSource.addRange(fieldnum(RHRMEmplTable, EmployeeId));
        queryBuildRange = queryBuildDataSource.addRange(fieldnum(RHRMEmplTable, PayMainEmplId));
        queryBuildRange.value(#RPayMainEmplId(queryBuildDataSource.name()));
        queryBuildRange.status(RangeStatus::Hidden);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRegTrans</Name>
				<Source><![CDATA[
    protected void insertRegTrans(
        RPayPFRegisterTrans _rPayPFRegisterTrans,
        RPayPFRegisterTrans _rPayPFRegisterTransTotalTmp,
        boolean             _isTotalCreation)
    {
        this.initCorrectType(_rPayPFRegisterTrans, _isTotalCreation);
        this.substructLastCorrTrans(_rPayPFRegisterTrans, _isTotalCreation);
        this.initBatchReference(_rPayPFRegisterTrans, _isTotalCreation);
        this.updateTotalTransTmp(_rPayPFRegisterTrans, _rPayPFRegisterTransTotalTmp, _isTotalCreation);

        if (!_isTotalCreation &&
            this.isAnyValueTrans(_rPayPFRegisterTrans))
        {
            _rPayPFRegisterTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyValueTrans</Name>
				<Source><![CDATA[
    protected boolean isAnyValueTrans(RPayPFRegisterTrans _rPayPFRegisterTrans)
    {
        return _rPayPFRegisterTrans.TotalPayments ||
               _rPayPFRegisterTrans.SpecDeductions ||
               _rPayPFRegisterTrans.OtherDeductions ||
               _rPayPFRegisterTrans.OverLimitBase ||
               _rPayPFRegisterTrans.FundBase ||
               _rPayPFRegisterTrans.PFIns ||
               _rPayPFRegisterTrans.PFAcc ||
               _rPayPFRegisterTrans.PFInsOver;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewDocument</Name>
				<Source><![CDATA[
    protected boolean isNewDocument()
    {
        boolean ret;

        if (keyDocChanged.in([#parmKeyReport]) || !keyEmplId)
        {
            ret = false;
        }
        else
        {
            ret = true;
            keyDocChanged.add([#parmKeyReport]);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewPackage</Name>
				<Source><![CDATA[
    protected boolean isNewPackage()
    {
        boolean ret;

        if (keyFileChanged.in([#parmKeyFile]) || !keyCategory || !keyAgreementType)
        {
            ret = false;
        }
        else
        {
            ret = true;
            keyFileChanged.add([#parmKeyFile]);
            docPersonQty = 0;
        }

        if (docPersonQtyMax && docPersonQtyMax <= docPersonQty &&
            keyCategory && keyAgreementType)
        {
            ret = true;
            docPersonQty = 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listCode2FundCode</Name>
				<Source><![CDATA[
    protected RPayCounterUnit listCode2FundCode(RPayPFListCode _listCode)
    {
        return (_listCode == RPayPFListCode::Extra1) ?
            rPayTaxParameters.PensionFundExtra1 :
            ((_listCode == RPayPFListCode::Extra2) ?
                rPayTaxParameters.PensionFundExtra2 :
                rPayTaxParameters.PensionFundInsurance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    public container parmContract()
    {
        return parmContract.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRPayPFRegister</Name>
				<Source><![CDATA[
    RPayPFRegister parmRPayPFRegister(RPayPFRegister _rPayPFRegister = rPayPFRegister)
    {
        rPayPFRegister = _rPayPFRegister;
        return rPayPFRegister;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    public boolean prompt()
    {
        boolean ret;

        if (queryRun && queryRun.prompt())
        {
            this.saveLast();
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportData</Name>
				<Source><![CDATA[
    public RPayPFReportCtrl reportData()
    {
        return new RPayPFReportCtrlRSVPF();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        RHRMEmplTable   emplTableLocal;
        container   con;
        RPayPFRegisterGeneratorRSV registerGeneratorRSV;

        try
        {
            if (this.check())
            {
                keyDocChanged  = new Set(Types::Container);
                keyFileChanged = new Set(Types::Container);
                batchEmplsMap  = new Map(Types::Container, Types::Int64);
                batchNumber = rPayPFRegister.FirstBatchNum;

                this.checkAndPrepareParameters();

                this.progressInit(this.caption(), 4, #AviFormLetter);
                progress.setText("@SYP4881372");
                progress.incCount(1);
                progress.update(true);

                registerGeneratorRSV = RPayPFRegisterGeneratorRSV::newRPayPFRegisterGeneratorRSV(
                    rPayPFRegister.dateEndQuarter(),
                    rPayPFRegister.CorrType == RPayPFCorrectionType::None ?
                        rPayPFRegister.dateEndQuarter() :
                        rPayPFRegister.CorrDate,
                    queryRun.pack());
                registerGeneratorRSV.prepareData();

                this.initEmployeesData(true);
                ttsbegin;
                this.deleteRegisterData();

                totalFundCommand.parmValue(connull());

                fundDataIterator = totalFundCommand.iterator();

                if (fundDataIterator.more())
                {
                    while (fundDataIterator.more())
                    {
                        con = fundDataIterator.value();
                        [#parmKeyReport] = conpeek(con, 1);
                        [#parmValue]     = conpeek(con, 2);

                        if (this.isNewDocument())
                        {
                            emplTableLocal = RHRMEmplTable::find(keyEmplId);

                            this.createTrans(false);
                            docPersonQty++;
                        }

                        fundDataIterator.moveNext();
                    }
                }

                progress.setText("@SYP4881373");
                progress.incCount(1);
                progress.update(true);

                if (rPayPFRegister.Period != RPayReportSocialTaxPeriod::Quarter &&
                    rPayPFRegister.CorrType == RPayPFCorrectionType::None)
                {
                    keyDocChanged  = new Set(Types::Container);
                    keyFileChanged = new Set(Types::Container);

                    this.initEmployeesData(false);
                    totalFundCommand.parmValue(connull());

                    fundDataIterator = totalFundCommand.iterator();

                    if (fundDataIterator.more())
                    {
                        while (fundDataIterator.more())
                        {
                            con = fundDataIterator.value();
                            [#parmKeyReport] = conpeek(con, 1);
                            [#parmValue]     = conpeek(con, 2);

                            if (this.isNewDocument())
                            {
                                emplTableLocal = RHRMEmplTable::find(keyEmplId);

                                this.createTrans(true);
                                docPersonQty++;
                            }

                            fundDataIterator.moveNext();
                        }
                    }
                }

                this.updateCorrBatches();

                progress.setText("@SYP4881374");
                progress.incCount(1);
                progress.update(true);
                this.calcStudents(registerGeneratorRSV);

                progress.setText("@SYP4881375");
                progress.incCount(1);
                progress.update(true);
                this.calcTotals(registerGeneratorRSV);

                this.calcEmplQty();

                ttscommit;

                if (FormDataUtil::getFormDataSource(rPayPFRegister))
                {
                    FormDataUtil::getFormDataSource(rPayPFRegister).research(true);
                }
            }
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectRegisterTrans</Name>
				<Source><![CDATA[
    protected RPayPFRegisterTrans selectRegisterTrans(
        RefRecId            _registerRefRecId,
        RPayPFTariff        _tariff,
        RPayPFListCode      _listCode,
        RPayPFLineType      _lineType,
        ReportPeriod_RU     _payPeriod = datenull(),
        boolean             _allTariffs = false,
        RPayPFWorkCondCode  _workCond = RPayPFWorkCondCode::None,
        boolean             _allWorkConds = true)
    {
        RPayPFRegisterTrans     rPayPFRegisterTrans;
        boolean                 skipCorrections = false;

        if (rPayPFRegister.dateStartQuarter() == #Year2014)
        {
            skipCorrections = true;
        }

        select sum(TotalPayments), sum(OtherDeductions), sum(SpecDeductions),
               sum(OverLimitBase), sum(FundBase), sum(PFIns),
               sum(PFInsOver) from rPayPFRegisterTrans
            where (rPayPFRegisterTrans.RegisterRefRecId  == _registerRefRecId ||
                   (rPayPFRegisterOriginal && rPayPFRegisterTrans.RegisterRefRecId == rPayPFRegisterOriginal.RecId)) &&
                  (_allTariffs ||
                   rPayPFRegisterTrans.Tariff           == _tariff) &&
                  (_allWorkConds ||
                   rPayPFRegisterTrans.WorkCondCode     == _workCond) &&
                  rPayPFRegisterTrans.ListCode          == _listCode &&
                  rPayPFRegisterTrans.LineType          == _lineType &&
                  (_lineType == RPayPFLineType::Total ||
                   rPayPFRegisterTrans.Period          == _payPeriod) &&
                  (!skipCorrections ||
                   (rPayPFRegisterTrans.RegisterRefRecId != rPayPFRegisterOriginal.RecId ||
                    (rPayPFRegisterTrans.RegisterRefRecId == rPayPFRegisterOriginal.RecId &&
                     rPayPFRegisterTrans.Type             == RpayPensionFundExportKindOfCorrection::None)));

        return rPayPFRegisterTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>substructLastCorrTrans</Name>
				<Source><![CDATA[
    protected void substructLastCorrTrans(RPayPFRegisterTrans _rPayPFRegisterTrans, boolean _isTotalCreation)
    {
        RPayPFRegisterTrans         rPayPFRegisterTransCorr;

        if (rPayPFRegister.CorrType == RPayPFCorrectionType::None)
        {
            if ((_rPayPFRegisterTrans.Period < endmth(rPayPFRegister.dateStartQuarter()) ||
                _rPayPFRegisterTrans.Period > endmth(rPayPFRegister.dateEndQuarter())) &&
                rPayPFRegisterPrevCorr)
            {
                select sum(TotalPayments), sum(SpecDeductions), sum(OtherDeductions),
                       sum(OverLimitBase), sum(FundBase), sum(PFIns), sum(PFInsOver),
                       sum(PFAcc) from rPayPFRegisterTransCorr
                    where rPayPFRegisterTransCorr.RegisterRefRecId == rPayPFRegisterPrevCorr.RecId &&
                          rPayPFRegisterTransCorr.EmplId == _rPayPFRegisterTrans.EmplId &&
                          rPayPFRegisterTransCorr.Tariff == _rPayPFRegisterTrans.Tariff &&
                          rPayPFRegisterTransCorr.Category == _rPayPFRegisterTrans.Category &&
                          rPayPFRegisterTransCorr.Agreement == _rPayPFRegisterTrans.Agreement &&
                          rPayPFRegisterTransCorr.ListCode == _rPayPFRegisterTrans.ListCode &&
                          rPayPFRegisterTransCorr.WorkCondCode == _rPayPFRegisterTrans.WorkCondCode &&
                          rPayPFRegisterTransCorr.LineType == RPayPFLineType::Month &&
                          rPayPFRegisterTransCorr.Period == _rPayPFRegisterTrans.Period &&
                          (rPayPFRegisterTransCorr.PayPeriod == _rPayPFRegisterTrans.PayPeriod || _isTotalCreation);

                _rPayPFRegisterTrans.addTrans(rPayPFRegisterTransCorr, _isTotalCreation ? false : true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version = RunBase::getVersion(packedClass);
        container   conQueryRun;

        switch (version)
        {
            case #CurrentVersion:
                [version, conQueryRun] = packedClass;
                queryRun = new QueryRun(conQueryRun);
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCorrBatches</Name>
				<Source><![CDATA[
    protected void updateCorrBatches()
    {
        RPayPFRegisterTrans rPayPFRegisterTrans;

        if (!rPayPFRegister.isCorrRegister() && rPayPFRegisterPrevCorr)
        {
            while select forupdate rPayPFRegisterTrans
                where rPayPFRegisterTrans.RegisterRefRecId == rPayPFRegisterPrevCorr.RecId
            {
                this.initBatchReference(rPayPFRegisterTrans, rPayPFRegisterTrans.LineType == RPayPFLineType::Month ? false : true);
                rPayPFRegisterTrans.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotalTransTmp</Name>
				<Source><![CDATA[
    protected void updateTotalTransTmp(
        RPayPFRegisterTrans _rPayPFRegisterTrans,
        RPayPFRegisterTrans _rPayPFRegisterTransTotalTmp,
        boolean             _isTotalCreation)
    {
        RPayPFRegisterTrans rPayPFRegisterTransTotal;

        void updateTransTotalTmp()
        {
            select forupdate _rPayPFRegisterTransTotalTmp
                where _rPayPFRegisterTransTotalTmp.RegisterRefRecId == _rPayPFRegisterTrans.RegisterRefRecId &&
                      _rPayPFRegisterTransTotalTmp.BatchRefRecId == _rPayPFRegisterTrans.BatchRefRecId &&
                      _rPayPFRegisterTransTotalTmp.Type == _rPayPFRegisterTrans.Type &&
                      _rPayPFRegisterTransTotalTmp.Tariff == _rPayPFRegisterTrans.Tariff &&
                      _rPayPFRegisterTransTotalTmp.Category == _rPayPFRegisterTrans.Category &&
                      _rPayPFRegisterTransTotalTmp.Agreement == _rPayPFRegisterTrans.Agreement &&
                      _rPayPFRegisterTransTotalTmp.EmplId == _rPayPFRegisterTrans.EmplId &&
                      _rPayPFRegisterTransTotalTmp.ListCode == _rPayPFRegisterTrans.ListCode &&
                      _rPayPFRegisterTransTotalTmp.WorkCondCode == _rPayPFRegisterTrans.WorkCondCode;

            if (_rPayPFRegisterTransTotalTmp.RecId)
            {
                _rPayPFRegisterTransTotalTmp.addTrans(_rPayPFRegisterTrans);

                if (this.isAnyValueTrans(_rPayPFRegisterTransTotalTmp))
                {
                    _rPayPFRegisterTransTotalTmp.update();
                }
                else
                {
                    _rPayPFRegisterTransTotalTmp.delete();
                }
            }
            else
            {
                if (this.isAnyValueTrans(_rPayPFRegisterTrans))
                {
                    _rPayPFRegisterTransTotalTmp.data(_rPayPFRegisterTrans);
                    _rPayPFRegisterTransTotalTmp.LineType = RPayPFLineType::Total;
                    _rPayPFRegisterTransTotalTmp.Period = datenull();
                    _rPayPFRegisterTransTotalTmp.PayPeriod = datenull();
                    _rPayPFRegisterTransTotalTmp.insert();
                }
            }
        }

        if (_isTotalCreation)
        {
            select forupdate rPayPFRegisterTransTotal
                where rPayPFRegisterTransTotal.RegisterRefRecId == _rPayPFRegisterTrans.RegisterRefRecId &&
                      rPayPFRegisterTransTotal.BatchRefRecId == _rPayPFRegisterTrans.BatchRefRecId &&
                      rPayPFRegisterTransTotal.Type == _rPayPFRegisterTrans.Type &&
                      rPayPFRegisterTransTotal.Tariff == _rPayPFRegisterTrans.Tariff &&
                      rPayPFRegisterTransTotal.Category == _rPayPFRegisterTrans.Category &&
                      rPayPFRegisterTransTotal.Agreement == _rPayPFRegisterTrans.Agreement &&
                      rPayPFRegisterTransTotal.EmplId == _rPayPFRegisterTrans.EmplId &&
                      rPayPFRegisterTransTotal.ListCode == _rPayPFRegisterTrans.ListCode &&
                      rPayPFRegisterTransTotal.WorkCondCode == _rPayPFRegisterTrans.WorkCondCode &&
                      rPayPFRegisterTransTotal.LineType == RPayPFLineType::Total;

            if (rPayPFRegisterTransTotal.RecId)
            {
                rPayPFRegisterTransTotal.addTrans(_rPayPFRegisterTrans);

                if (this.isAnyValueTrans(rPayPFRegisterTransTotal))
                {
                    rPayPFRegisterTransTotal.update();
                }
                else
                {
                    rPayPFRegisterTransTotal.delete();
                }
            }
            else
            {
                updateTransTotalTmp();
            }
        }
        else
        {
            updateTransTotalTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYP4881303";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayPFRegisterGenerator registerGenerator = new RPayPFRegisterGenerator();

        registerGenerator.getLast();
        registerGenerator.initFromArgs(_args);

        if (registerGenerator.prompt())
        {
            registerGenerator.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareSpecWorkCondSet</Name>
				<Source><![CDATA[
    static public container prepareSpecWorkCondSet(Range _specWorkCondRange)
    {
        Set                     set = new Set(Types::String);
        QueryRun                queryRunDeductionTable;
        Query                   query = new Query();
        QueryBuildDataSource    qbds;
        RPayFundDeductionTable  rPayFundDeductionTable;

        if (_specWorkCondRange)
        {
            qbds = query.addDataSource(tablenum(RPayFundDeductionTable));
            qbds.addRange(fieldnum(RPayFundDeductionTable, RPayFundDeductionCode)).value(_specWorkCondRange);
            qbds.addSelectionField(fieldnum(RPayFundDeductionTable, RPayFundDeductionCode));

            queryRunDeductionTable = new QueryRun(query);

            while (queryRunDeductionTable.next())
            {
                rPayFundDeductionTable = queryRunDeductionTable.get(tablenum(RPayFundDeductionTable));
                set.add(rPayFundDeductionTable.RpayFundDeductionCode);
            }
        }

        return set.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
