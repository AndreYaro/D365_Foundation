<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelTaxable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The interface of the document line supporting the Tax.
/// </summary>
public interface TaxModelTaxable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getConsumptionAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the comsumption address.
    /// </summary>
    /// <returns>
    /// The comsumption address.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsPostalAddress getConsumptionAddress()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumptionCountryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the comsumption country region id of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line consumption country region id.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsAddressCountryRegionId getConsumptionCountryRegionId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumptionCityName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the comsumption city name of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line consumption city name.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsAddressCityName getConsumptionCityName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumptionStateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the comsumption state id of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line consumption state id.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsAddressStateId getConsumptionStateId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumptionZipCodeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the comsumption zip code id of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line consumption zip code id.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsAddressZipCodeId getConsumptionZipCodeId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the origin address.
    /// </summary>
    /// <returns>
    /// The origin address.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsPostalAddress getOriginAddress()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginCountryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the origin country region id of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line origin country region id.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsAddressCountryRegionId getOriginCountryRegionId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginCityName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the origin city name of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line origin city name.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsAddressCityName getOriginCityName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginStateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the origin state id of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line origin state id.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsAddressStateId getOriginStateId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginZipCodeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the origin zip code id of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line origin zip code id.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsAddressZipCodeId getOriginZipCodeId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustGroupId</c> based on the customer account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>CustGroupId</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustGroupId getCustGroupId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTable</c> based on the cust account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>CustTable</c>
    /// </returns>
    public CustTable getCustTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLineMainTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TableId</c> of the document line main table.
    /// </summary>
    /// <returns>
    /// The <c>TableId</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TableId getDocumentLineMainTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLineMainTableRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of the document line main table.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c> of the document line main table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RecId getDocumentLineMainTableRecId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventTransId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>InventTransId</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventTransId getInventTransId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventDimId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>InventDimId</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventDimId getInventDimId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCommodityCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>EcoResCategoryCommodityCode</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>EcoResCategoryCommodityCode</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EcoResCategoryCommodityCode getCommodityCode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ItemId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>ItemId</c>
    /// </returns>
    public ItemId getItemId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the product category <c>EcoResCategoryId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>EcoResCategoryId</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EcoResCategoryId getProductCategory()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the product type <c>EcoResProductType</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>EcoResProductType</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EcoResProductType getProductType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Qty getQuantity()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the tax code for the transaction line.
    /// </summary>
    /// <returns>
    ///    The tax code.
    /// </returns>
    /// <remarks>
    ///    Specifying in a tax code on a transaction line implies that this transaction line is a direct tax
    ///    adjustment. No tax calculations will occur. Instead, the transaction amount is treated as the tax
    ///    amount and will be applied to this tax code. Specify an empty string if this functionality is not
    ///    desired.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxCode getTaxCode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax direction.
    /// </summary>
    /// <returns>
    /// The tax direction
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxDirection getTaxDirection()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the tax group for the transaction line.
    /// </summary>
    /// <returns>
    ///   The tax group.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxGroup getTaxGroup()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the item tax group for the transaction line.
    /// </summary>
    /// <returns>
    ///   The item tax group.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxItemGroup getTaxItemGroup()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction posting date
    /// </summary>
    /// <returns>
    /// The transaction posting date
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate getTransDate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>VendGroupId</c> based on the vendor account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>VendGroupId</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VendGroupId getVendGroupId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>VendTable</c> based on the vendor account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>VendTable</c>
    /// </returns>
    public VendTable getVendTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is a payment or not.
    /// </summary>
    /// <returns>
    /// True if the document line is a payment; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes isPayment()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax module type
    /// </summary>
    /// <returns>
    /// The transaction tax module type
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxModuleType getTaxModuleType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transction company
    /// </summary>
    /// <returns>
    /// The transaction company
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SelectableDataArea getTransactionCompany()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line amount of the document line.
    /// </summary>
    /// <returns>
    /// The line amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LineAmount getLineAmount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustVendTable</c> based on the customer or vendor account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>CustVendTable</c>
    /// </returns>
    public CustVendTable getPartyTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBaseModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the base Model.
    /// </summary>
    /// <param name="_baseModel">
    /// The base model.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setBaseModel(Object _baseModel)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalTaxModelTaxable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the original <c>TaxModelTaxable</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>TaxModelTaxable</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxModelTaxable getOriginalTaxModelTaxable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferenceTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reference TaxModel doc line.
    /// </summary>
    /// <returns>
    /// The refernece taxModel doc line.
    /// </returns>
    public TaxModelTaxable getReferenceTaxModelDocLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLocationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax location <c>RefRecId</c> on the transaction.
    /// </summary>
    /// <returns>
    /// The tax location of the transaction.
    /// </returns>
    /// <remarks>
    /// The method may be required to be overridden by different type of transaction.
    /// </remarks>
    public RefRecId getTaxLocationRefRecId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <param name="_type">
    /// The type. 
    /// </param>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    public LogisticsPostalAddress getTaxLogisticsPostalAddress(TransTaxInformationType_IN _type)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if tax transaction should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post tax transaction; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes shouldPostTaxTrans()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBasedOnReferenceTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the doc line is based on reference taxmodel doc line  or not.
    /// </summary>
    /// <returns>
    /// True if the doc line is based on the reference taxModel doc line;Oterwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isBasedOnReferenceTaxModelDocLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForegin</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is related to a foregin account.
    /// </summary>
    /// <returns>
    /// True if the document line is related to a foregin account; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes isForegin()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>TaxModelTransactionType</c> of the transaction
    /// </summary>
    /// <returns>
    /// The <c>TaxModelTransactionType</c> of the transaction
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxModelTransactionType getTransactionType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLineOriginalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document line original table.
    /// </summary>
    /// <returns>
    /// The document line original table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Common getDocumentLineOriginalTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document line transaction currency.
    /// </summary>
    /// <returns>The document line transaction currency.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CurrencyCode getTransactionCurrency()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipForTaxCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should skip this line for tax calculation.
    /// </summary>
    /// <returns>True Yes if tax should be skipped for calculation, otherwise, return false.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean shouldSkipForTaxCalculation()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the domain object
    /// The method should only be called by the <c>TaxModelDocLineFactoryable</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void init(SalesPurchJournalLine _documentLineMap)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsInterStateTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if it is the inter state transaction.
    /// </summary>
    /// <returns>
    /// True if it is not inter state transaction; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes IsInterStateTransaction()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total discount amount.
    /// </summary>
    /// <returns>The total discount amount</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Amount getDiscAmount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxIdentificationDimensionValueForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax identification dimension's value for item.
    /// </summary>
    /// <param name = "_referenceModelName">The reference model name.</param>
    /// <param name = "_modelType">The invent model type.</param>
    /// <returns>The tax identification dimension's value.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ERComponentLookupConditionDimValue getTaxIdentificationDimensionValueForItem(Name _referenceModelName, ModuleInventPurchSales _modelType)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxIdentificationDimensionValueForCustVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax identification dimension's value for customer or vendor.
    /// </summary>
    /// <param name = "_referenceModelName">The reference model name.</param>
    /// <returns>The tax identification dimension's value.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ERComponentLookupConditionDimValue getTaxIdentificationDimensionValueForCustVend(Name _referenceModelName)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxIdentificationDimensionValueForLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax identification dimension's value for legal entity.
    /// </summary>
    /// <param name = "_referenceModelName">The reference model name.</param>
    /// <returns>The tax identification dimension's value.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ERComponentLookupConditionDimValue getTaxIdentificationDimensionValueForLegalEntity(Name _referenceModelName)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxIdentificationDimensionValueFromTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax identification dimension's value from transaction.
    /// </summary>
    /// <param name = "_referenceModelName">The reference model name.</param>
    /// <returns>The tax identification dimension's value.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ERComponentLookupConditionDimValue getTaxIdentificationDimensionValueFromTransaction(Name _referenceModelName)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurpose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax document purpose.
    /// </summary>
    /// <returns>The tax document purpose.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxDocumentPurpose getPurpose()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction delivery date
    /// </summary>
    /// <returns>
    /// The transaction delivery date
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Date getDeliveryDate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifyTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction tax information can be modified or not.
    /// </summary>
    /// <returns>
    /// True if the tax information of document line can be modified; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes canModifyTaxInformation()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxExempt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if tax is exempt for the transaction line.
    /// </summary>
    /// <returns>
    /// True if the tax is exempt for the transaction line; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYesId isTaxExempt()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldEnableAccounting</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if tax transaction should enable accounting or not.
    /// </summary>
    /// <returns>
    /// True if the document line should enable accounting; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes shouldEnableAccounting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPriceInclTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the line of the sales tax is a prices include line or not.
    /// </summary>
    /// <returns>
    /// True if the document line is a prices included sales tax line; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes isPriceInclTax()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLogisticsPostalAddressTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    public LogisticsPostalAddress getTaxLogisticsPostalAddressTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    public LogisticsPostalAddress getPartyLogisticsPostalAddress()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyTaxID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>TaxRegistrationNumber</c>.
    /// </summary>
    /// <returns>
    /// The party <c>TaxRegistrationNumber</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxRegistrationNumber getPartyTaxID()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyTaxInfomationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>TaxInformation_IN</c>.
    /// </summary>
    /// <returns>
    /// The party <c>TaxInformation_IN</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxInformation_IN getPartyTaxInfomationTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxInfomationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TaxInformation_IN</c> based on the tax location.
    /// </summary>
    /// <returns>
    /// The <c>TaxInformation_IN</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxInformation_IN getTaxInfomationTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransTaxInfomation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TransTaxInformation</c> based on the tax location.
    /// </summary>
    /// <returns>
    /// The <c>TransTaxInformation</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransTaxInformation getTransTaxInfomation()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>