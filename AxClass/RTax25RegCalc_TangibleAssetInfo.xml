<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_TangibleAssetInfo</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rTax25RegCalc_TangibleAssetInfo extends RTax25RegCalc_AssetsInfo implements BatchRetryable
{
    RAssetAmount netBookGroup, netBookSubGroup, deprGroup, deprSubGroup;
    Map          map;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAsset</Name>
				<Source><![CDATA[
protected boolean checkAsset()
    {
        rTax25PeriodIterator.first(true);
    
        do
        {
            select firstonly  ReportingDate, RecId from rAssetTrans
                order by  ReportingDate asc
            where rAssetTrans.AccountNum      == rAssetTable.AccountNum                &&
                    (!rTax25PeriodIterator.fromDateAccounting()                                 ||
                      rAssetTrans.AccountingDate  >= rTax25PeriodIterator.fromDateAccounting()) &&
                    (!rTax25PeriodIterator.fromDateReporting()                                  ||
                      rAssetTrans.ReportingDate   >= rTax25PeriodIterator.fromDateReporting())  &&
                      rAssetTrans.AccountingDate  <= rTax25PeriodIterator.toDateAccounting()    &&
                      rAssetTrans.ReportingDate   <= rTax25PeriodIterator.toDateReporting()     &&
                  rAssetTrans.AssetStandardId == assetStandardId                       &&
                  rAssetTrans.AssetTransType  == RAssetTransType::Acquisition          &&
                  ! rAssetTrans.StornoRecId;
    
        if (rAssetTrans.RecId)
            return true;
        }
        while (rTax25PeriodIterator.next());
    
        return false;
    }
]]></Source>
			</Method>
			<Method>
				<Name>createFooterGroup</Name>
				<Source><![CDATA[
private void createFooterGroup(RAssetId _assetId, FieldId _fieldId, RAssetSubGroupId _subGroupId)
    {
        fieldValue = ["", "", dateNull(),
                      _fieldId == fieldNum(RAssetStandards, AssetGroup) ? netBookGroup : netBookSubGroup,
                      0,
                      RAssetStandards::find(_assetId, assetStandardId).AssetGroup,
                      _fieldId == fieldNum(RAssetStandards, SubGroupId) ? _subGroupId : "",
                      0, "", dateNull(), "", 0., dateNull(), dateNull(),
                      _fieldId == fieldNum(RAssetStandards, AssetGroup) ? deprGroup : deprSubGroup,
                      0., 0, 0, "", dateNull(), "", 0, dateNull(), "", dateNull(), ""];
        regQuery.addFooterRecord(0, fieldValue,
                                 0,
                                 _fieldId == fieldNum(RAssetStandards, AssetGroup) ?
                                 strFmt("@GLS117102", RAssetStandards::find(_assetId, assetStandardId).(_fieldId)) :
                                 strFmt("@GLS117103", _subGroupId));
    }
]]></Source>
			</Method>
			<Method>
				<Name>createHeaderGroup</Name>
				<Source><![CDATA[
private void createHeaderGroup(RAssetId _assetId, FieldId _fieldId, RAssetSubGroupId _subGroupId)
    {
        regQuery.addHeaderRecord(0,
                                 conNull(),
                                 0,
                                 _fieldId == fieldNum(RAssetStandards, AssetGroup) ?
                                 strFmt("@GLS117100", RAssetStandards::find(_assetId, assetStandardId).(_fieldId)) :
                                 strFmt("@GLS117101", _subGroupId));
    }
]]></Source>
			</Method>
			<Method>
				<Name>createRegisterTrans</Name>
				<Source><![CDATA[
private void createRegisterTrans()
    {
        AmountMST                   repairAmount;
        TransDate                   operationDate, deductionDate, lastDeprMonth, tmpAccountingDate;
        RAssetLifeTime              monthsLine, lifeTime;
        RTax25NotesLine             deductionBase;
        boolean                     prodSign;
        MapIterator                 iterator = new MapIterator(map);
        container                   con;
        RecId                       recId;
        int                         trans;
        Voucher                     tmpVoucher;
    
        void initialize()
        {
            rAssetTable     = RAssetTable::find(rAssetStandards.AssetId);
            deprNewDate     = dateNull();
            deprEndDateS    = dateNull();
            reduceDate      = dateNull();
            deductionDate   = dateNull();
            operationDate   = dateMax();
            lastDeprMonth   = dateNull();
            deprEndType     = '';
            deprNewBase     = '';
            deductionBase   = '';
            operationAmount = 0;
            reduceFactor    = 0;
            baseCostValue   = 0;
            tmpAccountingDate = dateNull();
            tmpVoucher      = '';
    
            lifeTime   = this.lifeTime(dateTo - 1);
            deprMethod = this.assetDeprMethod(dateFrom);
            this.endDeprSuspend();
            this.baseCostValue(dateTo);
        }
    
        while (iterator.more())
        {
            con = iterator.value();
            for (trans = 1; trans <= conLen(con); trans++)
            {
                recId = conPeek(con, trans);
                select firstonly rAssetStandards
                    where rAssetStandards.RecId == recId;
                initialize();
    
                rTax25PeriodIterator.first(true);
    
                do
                {
                    select firstonly ReportingDate, AssetTransType, AttachDocumentNumber, AttachDocumentDate from rAssetTrans
                        order by ReportingDate desc
                    where rAssetTrans.AccountNum      == rAssetTable.AccountNum                &&
                            (!rTax25PeriodIterator.fromDateAccounting()                                 ||
                              rAssetTrans.AccountingDate  >= rTax25PeriodIterator.fromDateAccounting()) &&
                            (!rTax25PeriodIterator.fromDateReporting()                                  ||
                              rAssetTrans.ReportingDate   >= rTax25PeriodIterator.fromDateReporting())  &&
                              rAssetTrans.AccountingDate  <= rTax25PeriodIterator.toDateAccounting()    &&
                              rAssetTrans.ReportingDate   <= rTax25PeriodIterator.toDateReporting()     &&
                          rAssetTrans.AssetStandardId == assetStandardId                       &&
                          (rAssetTrans.AssetTransType == RAssetTransType::Disposal             ||
                           rAssetTrans.AssetTransType == RAssetTransType::DisposalSale         ||
                           rAssetTrans.AssetTransType == RAssetTransType::DisposalScrap)       &&
                          ! rAssetTrans.StornoRecId;
    
                    if (deductionDate < rAssetTrans.ReportingDate)
                {
                        deductionDate  = rAssetTrans.ReportingDate;
                    deductionBase  = strFmt("@GLS101406" + "@GLS102908" + enum2str(rAssetTrans.AssetTransType));
                    if (rAssetTrans.AttachDocumentNumber)
                    {
                        deductionBase += strFmt("@SYS26801", rAssetTrans.AttachDocumentNumber, rAssetTrans.AttachDocumentDate);
                    }
                    this.endDeprSale(rAssetTrans);
                }
    
                    select firstonly  ReportingDate from rAssetTrans
                        order by  ReportingDate asc
                    where rAssetTrans.AccountNum      == rAssetTable.AccountNum                &&
                            (!rTax25PeriodIterator.fromDateAccounting()                                 ||
                              rAssetTrans.AccountingDate >= rTax25PeriodIterator.fromDateAccounting())  &&
                            (!rTax25PeriodIterator.fromDateReporting()                                  ||
                              rAssetTrans.ReportingDate  >= rTax25PeriodIterator.fromDateReporting())   &&
                              rAssetTrans.AccountingDate <= rTax25PeriodIterator.toDateAccounting()     &&
                              rAssetTrans.ReportingDate  <= rTax25PeriodIterator.toDateReporting()      &&
                          rAssetTrans.AssetStandardId == assetStandardId                       &&
                          rAssetTrans.AssetTransType  == RAssetTransType::Acquisition          &&
                          ! rAssetTrans.StornoRecId;
    
                    if (operationDate > rAssetTrans.ReportingDate)
                {
                        operationDate = rAssetTrans.ReportingDate;
                }
    
                    select firstonly ReportingDate, Voucher, AccountingDate from rAssetTrans
                        order by  ReportingDate desc
                    where rAssetTrans.AccountNum      == rAssetTable.AccountNum                &&
                            (!rTax25PeriodIterator.fromDateAccounting()                                 ||
                              rAssetTrans.AccountingDate >= rTax25PeriodIterator.fromDateAccounting())  &&
                            (!rTax25PeriodIterator.fromDateReporting()                                  ||
                              rAssetTrans.ReportingDate  >= rTax25PeriodIterator.fromDateReporting())   &&
                              rAssetTrans.AccountingDate <= rTax25PeriodIterator.toDateAccounting()     &&
                              rAssetTrans.ReportingDate  <= rTax25PeriodIterator.toDateReporting()      &&
                          rAssetTrans.AssetStandardId == assetStandardId                       &&
                          rAssetTrans.AssetTransType  == RAssetTransType::Depreciation         &&
                          rAssetTrans.AssetDeprPeriod <= dateTo                                &&
                          ! rAssetTrans.StornoRecId;
    
                    if (lastDeprMonth < rAssetTrans.ReportingDate)
                    {
                        lastDeprMonth     = rAssetTrans.ReportingDate;
                        tmpAccountingDate = rAssetTrans.AccountingDate;
                        tmpVoucher        = rAssetTrans.Voucher;
    
                    }
                }
                while (rTax25PeriodIterator.next());
    
                if (operationDate == dateMax())
                {
                    operationDate = dateNull();
                }
    
                monthsLine    = this.deprMonthsCalc(lastDeprMonth);
                prodSign      = this.productionSign(tmpVoucher, tmpAccountingDate);
    
                repairAmount  = rAssetSumTrans.takeDownAcqAdjValueMST() + rAssetSumTrans.revaluationValueMST();
                this.reduceFactor();
    
                this.outputHeaderFooterGroup();
    
                regQuery.addBodyRecord(profitTableRecId,
                                      [strFmt(rAssetTable.AccountNum),   //Asset inventary number
                                      rAssetTable.Name,  //Asset name
                                      operationDate,  //Operation date
                                      operationAmount,  //Operation cost value
                                      repairAmount,  //Repair and operation adjustment amount of partial takedown
                                      rAssetStandards.AssetGroup,  //Depreciation group
                                      rAssetStandards.subGroupId(dateTo),
                                      lifeTime,  //Life time
                                      rAssetStandards.deprProfile(dateFrom).Name ?
                                      rAssetStandards.deprProfile(dateFrom).Name :
                                      rAssetStandards.deprProfile(dateFrom).DeprProfile,
                                      RAssetMoveHist::findLastOperation(rAssetTable.AccountNum, RAssetMoveType::Transfer, NoYes::No, dateTo).ChangeDate, //Direction date
                                      prodSign ? "@SYS5461" : "@SYS2048", //Using for production : from RegisterProfit setup -> PaymentCondition
                                      reduceFactor,   //Special factor
                                      reduceDate,   //Start date for factor
                                      this.deprStartDate(),  //Depreciation start date
                                      -rAssetSumTrans.depreciationValueMST(), //Depreciation amount
                                      baseCostValue, // Base cost value
                                      (baseCostValue && rAssetStandards.CostLimitDate) ? lifeTime - this.deprMonthsCalc(rAssetStandards.CostLimitDate - 1) : 0, //Base cost amount
                                      monthsLine, // Depreciation months
                                      deprEndType,  //Type            of finish depreciation operation
                                      deprEndDateS, //Document date   of finish depreciation operation
                                      "",  //Document number of finish depreciation operation
                                      this.intervalMonths(), //Depreciation interval (Missing depreciation)
                                      deprNewDate, //Return asset operation document date
                                      deprNewBase, //Return asset operation document number
                                      deductionDate,  //Deduction document date
                                      deductionBase], //Deduction document number
                                      rAssetTable.TableId,
                                      rAssetTable.RecId,
                                      strFmt("@GLS116360", rAssetTable.AccountNum, rAssetTable.Name));
    
                netBookGroup    += operationAmount;
                netBookSubGroup += operationAmount;
                deprGroup       += -rAssetSumTrans.depreciationValueMST();
                deprSubGroup    += -rAssetSumTrans.depreciationValueMST();
                totalAmount     += deprGroup;
            }
            iterator.next();
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>createTotal</Name>
				<Source><![CDATA[
        protected void createTotal()
    {
        this.createRegisterTrans();
        rAssetStandards = null;
        this.outputHeaderFooterGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDeprSale</Name>
				<Source><![CDATA[
private void endDeprSale(RAssetTransReportingView _rAssetTrans)
    {
        if  (_rAssetTrans.ReportingDate <= dateTo && !(deprEndType && deprEndDateS))
        {
            deprEndType  = enum2str(_rAssetTrans.AssetTransType);
            deprEndDateS = _rAssetTrans.ReportingDate;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>endDeprSuspend</Name>
				<Source><![CDATA[
        private void endDeprSuspend()
    {
        RAssetSuspend assetSuspend;
        TransDate     lastStart;
        ;
        deprEndDateS = dateNull();

        while select SuspendStart, SuspendEnd
            from assetSuspend
            order by SuspendStart asc
            where  assetSuspend.Assetid      == rAssetTable.AccountNum &&
                   assetSuspend.SuspendStart <= dateTo
        {
            lastStart    = assetSuspend.SuspendStart;
            deprEndDateS = deprEndDateS ? deprEndDateS : assetSuspend.SuspendStart;
            deprNewDate  = assetSuspend.SuspendEnd <= dateTo ? assetSuspend.SuspendEnd : dateNull();
        }

        deprEndType =  deprEndDateS ? "@GLS116134"  : "";
        deprNewBase =  deprNewDate  ? "@GLS116206" : "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
public boolean init(RTax25RegisterJournalTrans  _registerJournalTrans = null,
                        Batch                       _batch                = null)
    {
        boolean ret;
    
        ret = super(_registerJournalTrans, _batch);
        map = new Map(Types::Container, Types::Container);
        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>outputHeaderFooterGroup</Name>
				<Source><![CDATA[
        private void outputHeaderFooterGroup()
    {
        RAssetStandards             lastStandards;
        RAssetSubGroupId            lastSubGroupId, subGroupId;
        ;

        lastStandards = RAssetStandards::find(lastAssetId, assetStandardId);

        lastSubGroupId = lastStandards.subGroupId(dateTo);
        subGroupId     = rAssetStandards.subGroupId(dateTo);
        if (lastStandards.AssetGroup != rAssetStandards.AssetGroup ||
            lastSubGroupId != subGroupId)
        {
            if (lastSubGroupId != subGroupId && lastSubGroupId)
            {
                this.createFooterGroup(lastStandards.AssetId, fieldNum(RAssetStandards, SubGroupId), lastSubGroupId);
            }
            if (lastStandards.AssetGroup != rAssetStandards.AssetGroup)
            {
                if (lastStandards.AssetGroup)
                {
                    if (! lastSubGroupId)
                        this.createFooterGroup(lastStandards.AssetId, fieldNum(RAssetStandards, SubGroupId), lastSubGroupId);
                    this.createFooterGroup(lastStandards.AssetId, fieldNum(RAssetStandards, AssetGroup), "");
                }
                if (rAssetStandards.AssetGroup)
                {
                    this.createHeaderGroup(rAssetStandards.AssetId, fieldNum(RAssetStandards, AssetGroup), "");
                    this.createHeaderGroup(rAssetStandards.AssetId, fieldNum(RAssetStandards, SubGroupId), subGroupId);
                }
                netBookGroup = 0; netBookSubGroup = 0; deprGroup = 0; deprSubGroup = 0;
            }
            else if (lastSubGroupId != subGroupId && subGroupId)
            {
                if (! lastSubGroupId)
                    this.createFooterGroup(lastStandards.AssetId, fieldNum(RAssetStandards, SubGroupId), lastSubGroupId);
                this.createHeaderGroup(rAssetStandards.AssetId, fieldNum(RAssetStandards, SubGroupId), subGroupId);
                netBookSubGroup = 0; deprSubGroup = 0;
            }
        }
        lastAssetId = rAssetTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableOperation</Name>
				<Source><![CDATA[
        protected AmountMST tableOperation()
    {
        void insCon()
        {
            container con;

            if (map.exists([rAssetStandards.AssetGroup, rAssetStandards.subGroupId(dateTo)]))
            {
                con = map.lookup([rAssetStandards.AssetGroup, rAssetStandards.subGroupId(dateTo)]);
            }
            map.insert([rAssetStandards.AssetGroup, rAssetStandards.subGroupId(dateTo)],
                       conIns(con, conLen(con) + 1, [rAssetStandards.RecId]));

        }
        ;

        insCon();

        return 1;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>