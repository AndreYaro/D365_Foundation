<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSubledgerJournalRounderSourceEnumeratorGeneral</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The common implementation of the <c>TaxSubledgerJournalRounderSourceEnumerator</c> that fetches records to be processed by <c>TaxSubledgerJourRounder</c>.
/// </summary>
public class TaxSubledgerJournalRounderSourceEnumeratorGeneral extends TaxSubledgerJournalRounderSourceEnumerator
{
    MonetaryAmountTmpGroup  monetaryAmountGroup;
    TaxMap taxMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>definitionString</Name>
				<Source><![CDATA[
    public str definitionString()
    {
        return classStr(TaxSubledgerJournalRounderSourceEnumeratorGeneral);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    public void initialize(TaxMap _taxMap, SubledgerJournalAccountEntryTmpDetail _subledgerJournalAccountEntryTmpDetail, MonetaryAmountTmpGroup  _monetaryAmountGroup)
    {
        taxMap = SysDictTable::newTableId(_taxMap.TableId).makeRecord();
        tmpDetail.linkPhysicalTableInstance(_subledgerJournalAccountEntryTmpDetail);
        monetaryAmountGroup.linkPhysicalTableInstance(_monetaryAmountGroup);

        this.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    public boolean moveNext()
    {
        next tmpDetail;

        return tmpDetail.RecId != 0 ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    public void reset()
    {
        AccountingDistribution  accountingDistribution;
        TaxTable taxTable;

        select noFetch maxOf(RecId), sum(TransactionCurrencyAmount), sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount)
            from tmpDetail
            join accountingDistribution
            join taxMap
            join monetaryAmountGroup
            exists join taxTable
            group by    tmpDetail.TransactionCurrencyCode,
                        tmpDetail.ExchangeRate1,
                        tmpDetail.ExchangeRate2,
                        tmpDetail.ReportingExchangeRate1,
                        tmpDetail.ReportingExchangeRate2,
                        tmpDetail.ExchangeRateDate,
                        tmpDetail.Ledger,
                        taxMap.TaxCode,
                        monetaryAmountGroup.GroupNumber
            where   tmpDetail.IsReversal == NoYes::No //reversal/relieving entries are backing out already rounded entries and should stay as they are
                    && tmpDetail.PostingType == LedgerPostingType::Tax
                    && tmpDetail.AccountingDistribution == accountingDistribution.RecId
                    && accountingDistribution.SourceDocumentLine == taxMap.SourceDocumentLine
                    && accountingDistribution.MonetaryAmount == monetaryAmountGroup.MonetaryAmount
                    && taxMap.TaxCode == taxTable.TaxCode
                    && (taxTable.TaxLimitBase == TaxLimitBase::InvoiceWithoutVAT || taxTable.TaxLimitBase == TaxLimitBase::InvoiceInclVAT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>toString</Name>
				<Source><![CDATA[
    public str toString()
    {
        return this.current().toString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>TaxSubledgerJournalRounderSourceEnumerator</c> object.
    /// </summary>
    /// <returns>
    /// A <c>TaxSubledgerJournalRounderSourceEnumerator</c> object.
    /// </returns>
    public static TaxSubledgerJournalRounderSourceEnumeratorGeneral construct()
    {
        return new TaxSubledgerJournalRounderSourceEnumeratorGeneral();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>