<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgLoadArchivedTermReg</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Loads <see cref="T:JmgTermReg" /> or <see cref="T:JmgTermRegArchive" /> records back into the
///    <c>JmgTermRegArchive</c> table. These records were saved to file using the <see
///    cref="T:JmgCleanupTermReg" /> class.
/// </summary>
/// <remarks>
///    The file format must be the format described for the <see cref="T:JmgCleanupTermReg" /> class.
/// </remarks>
class JmgLoadArchivedTermReg extends RunBaseBatch implements BatchRetryable
{
    str   downloadFileUrl;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        downloadFileUrl
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method returns a class that contains the methods described by the <see
    ///    cref="T:RunBaseDialogable" /> interface.
    /// </summary>
    /// <returns>
    ///    An object that contains the methods described by the <see cref="T:RunBaseDialogable" /> interface.
    /// </returns>
    public Object dialog()
    {
        return this.dialogInternal(Dialog::newFormnameRunbase(formstr(JmgLoadArchivedTermReg), this));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDownloadFileUrl</Name>
				<Source><![CDATA[
    public void setDownloadFileUrl(str _downloadFileUrl)
    {
        downloadFileUrl = _downloadFileUrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDownloadFileStream</Name>
				<Source><![CDATA[
    private CommaStreamIo getDownloadFileStream()
    {
        if (downloadFileUrl)
        {
            System.IO.Stream fileStream = File::UseFileFromURL(downloadFileUrl);
            CommaStreamIo fileHandle = CommaStreamIo::constructForRead(fileStream);

            if (!fileHandle)
            {
                checkFailed(strfmt("@SYS18678", downloadFileUrl));
            }
            else
            {
                fileHandle.inFieldDelimiter(',');
                fileHandle.inRecordDelimiter('\r\n');
            }

            return fileHandle;
        }
        else
        {
            throw error("@SYS18624");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS40044";
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFileRecords</Name>
				<Source><![CDATA[
    private RecordSortedList readFileRecords()
    {
        RecordSortedList    jmgTermRegArchiveList = new RecordSortedList(tablenum(JmgTermRegArchive));

        CommaStreamIo fileHandle = this.getDownloadFileStream();

        // The first line is the header. Throw that away.
        fileHandle.read();

        while (fileHandle.status() == IO_Status::Ok)
        {
            container input = fileHandle.read();

            if (input)
            {
                JmgTermRegArchive   jmgTermRegArchive;

                try
                {
                    jmgTermRegArchive.data(JmgCleanupTermReg::container2TermReg(input));
                }
                catch
                {
                    throw error("@SYS98433");
                }

                jmgTermRegArchiveList.ins(jmgTermRegArchive);
            }
        }

        return jmgTermRegArchiveList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>JmgLoadArchivedTermReg</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>JmgLoadArchivedTermReg</c> class.
    /// </returns>
    public static JmgLoadArchivedTermReg construct()
    {
        return new JmgLoadArchivedTermReg();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the actual job of the class. Loads the archived file name into the <see
    ///    cref="T:JmgTermRegArchive" /> file.
    /// </summary>
    public void run()
    {
        super();

        RecordSortedList jmgTermRegArchiveList = this.readFileRecords();

        ttsbegin;

        jmgTermRegArchiveList.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    You must override the <c>runsImpersonated</c> method and return false, if you want the tasks to run
    ///    on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean ret;
        Integer version;

        version = conpeek(packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                ret = true;
                break;
            default:
                ret = false;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        JmgLoadArchivedTermReg jmgLoadArchivedTermReg = JmgLoadArchivedTermReg::construct();

        if (jmgLoadArchivedTermReg.prompt())
        {
            jmgLoadArchivedTermReg.runOperation();
            if (_args && _args.caller())
            {
                FormRun caller = _args.caller();
                caller.dataSource().research();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>