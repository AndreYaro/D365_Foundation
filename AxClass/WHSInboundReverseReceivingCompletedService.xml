<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInboundReverseReceivingCompletedService</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSInboundReverseReceivingCompletedService extends WHSInboundReceivingCompletedServiceBase
{
    private WHSInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCanReverseReceiptConfirmLoad</Name>
				<Source><![CDATA[
    private boolean validateCanReverseReceiptConfirmLoad()
    {
        return loadTable.canReverseReceivingCompleted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseReceiptConfirmLoads</Name>
				<Source><![CDATA[
    internal static void reverseReceiptConfirmLoads(ListEnumerator _loadIds)
    {
        while (_loadIds.moveNext())
        {
            WHSLoadId loadId = _loadIds.current();
            WHSInboundReverseReceivingCompletedService::reverseReceiptConfirmSingleLoad(loadId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseReceiptConfirmSingleLoad</Name>
				<Source><![CDATA[
    internal static void reverseReceiptConfirmSingleLoad(WHSLoadId _loadId)
    {
        WHSInboundReverseReceivingCompletedService registrationCompletedService = new WHSInboundReverseReceivingCompletedService();
        registrationCompletedService.reverseReceiptConfirmLoad(_loadId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseReceiptConfirmLoad</Name>
				<Source><![CDATA[
    private void reverseReceiptConfirmLoad(WHSLoadId _loadId)
    {
        setPrefix(strFmt("@WAX:ReverseReceivingCompletedOfLoad", _loadId));

        using (var activityContext = this.logger().inboundLoadReceivingCompleted().reverseReceiptConfirmLoad())
        {
            this.setNewLoadById(_loadId);

            this.logger().logRecordInformation(loadTable);
        
            if (!this.validateCanReverseReceiptConfirmLoad())
            {
                return;
            }

            ttsbegin;

            this.updateLoadForReverseReceiptConfirmation();
            this.updateShipmentsForReverseReceiptConfirmation();

            this.onReverseReceivingCompleted(_loadId);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onReverseReceivingCompleted</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal void onReverseReceivingCompleted(WHSLoadId _loadId)
    {
        // For extensibility purposes
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadForReverseReceiptConfirmation</Name>
				<Source><![CDATA[
    private void updateLoadForReverseReceiptConfirmation()
    {
        loadTable.LoadReceivingCompletedUTCDateTime = DateTimeUtil::minValue();
        loadTable.ProductReceiptProcessingStatus = WHSProductReceiptProcessingStatus::NotReady;
        loadTable.update();

        if (this.mustUpdateLoadStatusToReceived())
        {
            WHSLoadStatusUpdater loadStatusUpdater = WHSLoadStatusUpdater::newFromLoadId(loadTable.LoadId);
            loadTable.LoadStatus = loadStatusUpdater.determineUnreceivedInboundLoadStatus();
            loadTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateShipmentsForReverseReceiptConfirmation</Name>
				<Source><![CDATA[
    private void updateShipmentsForReverseReceiptConfirmation()
    {
        if (this.mustUpdateLoadStatusToReceived())
        {
            WHSShipmentTable shipmentInLoad;

            update_recordset shipmentInLoad
                setting ShipmentStatus = WHSReverseRecvCompletedWhenCancelPackingSlipFlight::instance().isEnabled() ? WHSShipmentStatus::Shipped : WHSShipmentStatus::InProcess
                  where shipmentInLoad.LoadId == loadTable.LoadId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger logger()
    {
        if (!logger)
        {
            logger = WHSInstrumentationLogger::createLogger(classStr(WHSInboundReverseReceivingCompletedService));
        }

        return logger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>