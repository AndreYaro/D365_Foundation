<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SourceDocumentLineStateContainerCleanerHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for data maintenance task to clear out source document line state containers.
/// Encapsulates functions to execute sql-statements, constants.
/// </summary>
internal final class SourceDocumentLineStateContainerCleanerHelper
{
    #OCCRetryCount

    // accounting statuses of SDL which can be cleaned
    // applicable for all documents except PurchaseOrder and ProductReceipt
    public static container accountingStatusesForDocumentsWithoutSpecialLogic = [
        SourceDocumentLineAccountingStatus::Completed,
        SourceDocumentLineAccountingStatus::Finalized,
        SourceDocumentLineAccountingStatus::Canceled
    ];

    // accounting statuses of SDL which can be cleaned for PurchaseOrder
    public static container accountingStatusesForDocumentTypePurchaseOrder = [
        SourceDocumentLineAccountingStatus::Finalized,
        SourceDocumentLineAccountingStatus::Canceled
    ];

    public static int maxRecordsToClean = SourceDocumentParameters::find().SourceDocumentLineStateContainerCleanerTaskLimit;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getActivityContextForRun</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static SysInstrumentationActivityContext getActivityContextForRun()
    {
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(classStr(SourceDocumentLineStateContainerCleanerTask),
            methodStr(SourceDocumentLineStateContainerCleanerTask, run));
        SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(classStr(SourceDocumentLineStateContainerCleanerTask));
        
        return instrumentationLogger.activityContextWithCustomProperties(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSQL</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static int64 executeSQL(str _sqlStatement = '', Map _sqlParams = SqlParams::create())
    {
        int64 impactedRows;

        Connection sessionConn = new Connection();

        try
        {
            SqlStatementExecutePermission permission = new SqlStatementExecutePermission(_sqlStatement);
            permission.assert();
            Statement statement = sessionConn.createStatement();

            impactedRows = statement.executeUpdateWithParameters(_sqlStatement, _sqlParams);

            CodeAccessPermission::revertAssert();
            statement.close();
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        finally
        {
            sessionConn.finalize();
        }
        
        return impactedRows;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>