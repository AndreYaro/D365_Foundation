<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanCreateForecastDataContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>ReqDemPlanCreateForecastDataContract</c> class contains the runtime parameters for forecast generation.
/// </summary>
[DataContractAttribute,
SysOperationGroupAttribute('General', "@SYS104288", '1'),
SysOperationGroupAttribute('Identification', "@DMP1121", '2'),
SysOperationGroupAttribute('ForecastFilter', "@DMP1024", '3')]
class ReqDemPlanCreateForecastDataContract extends ReqDemPlanExportBaseDataContract
{
    ReqDemPlanForecastHorizon        forecastHorizon;
    ReqDemPlanFreezingHorizon        freezingHorizon;
    ReqDemPlanForecastStart          forecastStart;
    ReqDemPlanForecastTitle          title;
    ReqDemPlanForecastComment        comment;
    ReqDemPlanTransferChanges        transferChanges;

    ReqDemPlanForecastHorizon        gapPeriodSize;
    ReqDemPlanForecastStart          updatedStartDate;
    boolean                          offsetCalculated;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>actualDemandEndDate</Name>
				<Source><![CDATA[
    public ReqDemPlanHistoricalHorizonEnd actualDemandEndDate()
    {
        ReqDemPlanDateConverter converter = ReqDemPlanDateConverter::construct();
        return converter.addPeriods(this.offsetForecastStartDate(), this.parmDateGranularity(), this.parmForecastHorizon()) - 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateActualForecastStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the actual date from which forecast will be generated.
    /// </summary>
    /// <returns>
    ///     The date from which forecast will be generated.
    /// </returns>
    public date calculateActualForecastStartDate()
    {
        forecastStart = ReqDemPlanDateConverter::getAdjustedDateDimensionEntry(forecastStart, dateGranularity).Date;
        return forecastStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateActualHistoricalEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the actual historical end date from which forecast will be generated.
    /// </summary>
    /// <returns>
    ///     The date from which forecast will be generated.
    /// </returns>
    public date calculateActualHistoricalEndDate()
    {
        return ReqDemPlanDateConverter::getPeriodEndDate(historicalEnd, dateGranularity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateActualHistoricalStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the actual historical start date from which forecast will be generated.
    /// </summary>
    /// <returns>
    ///     The date from which forecast will be generated.
    /// </returns>
    public date calculateActualHistoricalStartDate()
    {
        return ReqDemPlanDateConverter::getFirstDateDimensionEntry(historicalStart, dateGranularity).Date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateOffsets</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates potential offsetting of the start date and forecast horizon.
    /// </summary>
    /// <remarks>
    ///     This is needed for correctly returning time-offset forecasts.
    /// </remarks>
    private void calculateOffsets()
    {
        date                        historicalEndDate   = this.parmHistoricalEnd();
        ReqDemPlanDateGranularity   granularity         = this.parmDateGranularity();
        BIDateDimensionsView        startDateBuf;
        BIDateDimensionsView        endDateBuf;

        if (offsetCalculated)
        {
            return;
        }

        startDateBuf    = ReqDemPlanDateConverter::getFirstDateDimensionEntry(historicalEndDate, granularity);
        endDateBuf      = ReqDemPlanDateConverter::getAdjustedDateDimensionEntry(this.parmForecastStartDate(), granularity);

        switch (this.parmDateGranularity())
        {
            case ReqDemPlanDateGranularity::Day:
                gapPeriodSize = int642int(endDateBuf.DateKey - startDateBuf.DateKey);
                break;
            case ReqDemPlanDateGranularity::Week:
                gapPeriodSize = int642int(endDateBuf.WeekKey - startDateBuf.WeekKey);
                break;
            case ReqDemPlanDateGranularity::Month:
                gapPeriodSize = int642int(endDateBuf.MonthKey - startDateBuf.MonthKey);
                break;
            default:
                throw error("@DMP1061");
        }

        // make sure we always use the beginning of the actual period
        updatedStartDate    = endDateBuf.Date;
        gapPeriodSize       = max(gapPeriodSize - 1, 0);
        offsetCalculated    = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the default values for the contract members.
    /// </summary>
    public void initValues()
    {
        super();

        this.parmForecastStartDate(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) + 1);
        this.parmTitle("@DMP1122");
        this.parmTransferChanges(true);
        this.parmForecastHorizon(1);
        this.calculateActualForecastStartDate();

        offsetCalculated = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetForecastHorizon</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the actual horizon to be used for retrieving data from the mining model.
    /// </summary>
    /// <returns>
    ///     The forecast horizon.
    /// </returns>
    public ReqDemPlanForecastHorizon offsetForecastHorizon()
    {
        this.calculateOffsets();

        return this.parmForecastHorizon() + any2int(gapPeriodSize);
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetForecastStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the actual start date to be used for retrieving data from the mining model.
    /// </summary>
    /// <returns>
    ///     A date instance.
    /// </returns>
    public ReqDemPlanForecastStart offsetForecastStartDate()
    {
        this.calculateOffsets();

        return updatedStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmComment</Name>
				<Source><![CDATA[
    [DataMemberAttribute,
    SysOperationGroupMemberAttribute('Identification'),
    SysOperationDisplayOrderAttribute('2')]
    public ReqDemPlanForecastComment parmComment(ReqDemPlanForecastComment _comment = comment)
    {
        comment = _comment;
        return comment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForecastHorizon</Name>
				<Source><![CDATA[
    [DataMemberAttribute,
    SysOperationGroupMemberAttribute('General'),
    SysOperationDisplayOrderAttribute('2')]
    public ReqDemPlanForecastHorizon parmForecastHorizon(ReqDemPlanForecastHorizon _forecastHorizon = forecastHorizon)
    {
        forecastHorizon = _forecastHorizon;

        return forecastHorizon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForecastStartDate</Name>
				<Source><![CDATA[
    [DataMemberAttribute,
    SysOperationGroupMemberAttribute('General'),
    SysOperationDisplayOrderAttribute('6')]
    public ReqDemPlanForecastStart parmForecastStartDate(ReqDemPlanForecastStart _forecastStart = forecastStart)
    {
        forecastStart = _forecastStart;

        return forecastStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFreezingHorizon</Name>
				<Source><![CDATA[
    [DataMemberAttribute,
    SysOperationGroupMemberAttribute('General'),
    SysOperationDisplayOrderAttribute('3')]
    public ReqDemPlanFreezingHorizon parmFreezingHorizon(ReqDemPlanFreezingHorizon _freezingHorizon = freezingHorizon)
    {
        freezingHorizon = _freezingHorizon;

        return freezingHorizon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTitle</Name>
				<Source><![CDATA[
    [DataMemberAttribute,
    SysOperationGroupMemberAttribute('Identification'),
    SysOperationDisplayOrderAttribute('1')]
    public ReqDemPlanForecastTitle parmTitle(ReqDemPlanForecastTitle _title = title)
    {
        title = _title;
        return title;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferChanges</Name>
				<Source><![CDATA[
    [DataMemberAttribute,
    SysOperationGroupMemberAttribute('General'),
    SysOperationDisplayOrderAttribute('8')]
    public ReqDemPlanTransferChanges parmTransferChanges(ReqDemPlanTransferChanges _transferChanges = transferChanges)
    {
        transferChanges = _transferChanges;

        return transferChanges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the data contract.
    /// </summary>
    /// <returns>
    ///     true if the data contract is valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean ret = true;

        ret = super();

        if (forecastHorizon <= 0)
        {
            ret = checkFailed("@DMP1050");
        }

        if (freezingHorizon < 0)
        {
            ret = checkFailed("@DMP1193");
        }

        if (freezingHorizon >= forecastHorizon)
        {
            ret = checkFailed("@DMP1194");
        }

        if (historicalEnd >= forecastStart)
        {
            ret = checkFailed("@DMP1241");
        }

        if (ret && ReqDemForecastEndDateValueValidationToggle::instance().isEnabled())
        {
            date periodEndDate, endDateForecast;

            [periodEndDate, endDateForecast]= this.getForecastPeriodEndDates();

            // PeriodEndDate and forecastStart will be used during data generation
            // In case periodEndDate exceeds the maximum date dimension available it will be dateNull
            if (periodEndDate < forecastStart)
            {
                BIDateDimension biDateDimension;
                select maxOf(EndDate) from biDateDimension;
            
                ret = checkFailed(strFmt("@DMP:ForecastEndDateBiggerThanAvailable",endDateForecast,biDateDimension.EndDate));
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getForecastPeriodEndDates</Name>
				<Source><![CDATA[
    private container getForecastPeriodEndDates()
    {
        var dateConverter = ReqDemPlanDateConverter::construct();

        var startKey = dateConverter.dateToDateKey(forecastStart, dateGranularity);
        var endKey = startKey + forecastHorizon;
        date endDateForecast;

        if (dateGranularity == ReqDemPlanDateGranularity::Week &&
            !dateConverter.weekDateKeyExists(endKey))
        {
            // Week end key does not exist in date dimensions table, use expected date
            endDateForecast = this.getExpectedForecastPeriodEndDate(dateConverter);
        }
        else
        {
            endDateForecast = dateConverter.dateKeyToDate(endKey, this.DateGranularity);
        }

        return [ReqDemPlanDateConverter::getPeriodEndDate(endDateForecast - 1, this.dateGranularity), endDateForecast];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpectedForecastPeriodEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate expected end date for current forecast period.
    /// </summary>
    /// <param name = "_dateConverter"><c>ReqDemPlanDateConverter</c> instance to be used.</param>
    /// <returns>The date.</returns>
    private date getExpectedForecastPeriodEndDate(ReqDemPlanDateConverter _dateConverter)
    {
        var periodStartDate = ReqDemPlanDateConverter::getAdjustedDateDimensionEntry(forecastStart, dateGranularity).Date;
        var expectedPeriodEndDate = _dateConverter.addPeriods(periodStartDate, dateGranularity, forecastHorizon);

        return expectedPeriodEndDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>