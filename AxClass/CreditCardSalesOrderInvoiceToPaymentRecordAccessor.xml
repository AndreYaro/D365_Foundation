<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardSalesOrderInvoiceToPaymentRecordAccessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CreditCardSalesOrderInvoiceToPaymentRecordAccessor implements ICreditCardSalesOrderInvoiceToPaymentRecordAccess
{
    private CreditCardPaymentBreakDownLogger creditCardPaymentBreakDownLogger;
    private const int ContainerLength = 3;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        creditCardPaymentBreakDownLogger = CreditCardPaymentBreakDownLogger::createLogger();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static ICreditCardSalesOrderInvoiceToPaymentRecordAccess construct()
    {
        return new CreditCardSalesOrderInvoiceToPaymentRecordAccessor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerTask</Name>
				<Source><![CDATA[
    public boolean registerTask(CreditCardPaymentBreakDownTable _creditCardPaymentBreakDownTable, CreditCardPaymentStatus _startPaymentStatus)
    {
        using (var runActivityContext = creditCardPaymentBreakDownLogger.activityContextWithCustomProperties(CreditCardPaymentBreakDownInstrumentationConstants::CreditCardPaymentBreakDownRecordAccess))
        {
            boolean ret = false;
            try
            {
                ttsbegin;
                _creditCardPaymentBreakDownTable.CreditCardPaymentProcessingStatus = CreditCardPaymentProcessingState::NotStarted;
                _creditCardPaymentBreakDownTable.CreditCardPaymentStatus = _startPaymentStatus;
                _creditCardPaymentBreakDownTable.insert();
                ttscommit;
                ret = true;
            }
            catch (Exception::Deadlock)
            {
                creditCardPaymentBreakDownLogger.logError('Fail to register task due to dead lock');
            }
            catch (Exception::UpdateConflict)
            {
                creditCardPaymentBreakDownLogger.logError('Fail to register task due to update conflict');
            }
            catch (Exception::DuplicateKeyException)
            {
                creditCardPaymentBreakDownLogger.logError('Fail to register task due to duplicate key');
            }
            catch (Exception::error)
            {
                creditCardPaymentBreakDownLogger.logError('Fail to register task due to error');
            }
            catch
            {
                creditCardPaymentBreakDownLogger.logError('Fail to register task due to error');
            }
            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>finishTask</Name>
				<Source><![CDATA[
    public boolean finishTask(CreditCardPaymentBreakDownTable _creditCardPaymentBreakDownTable,
        CreditCardPaymentProcessingState _creditCardPaymentProcessingState)
    {
        using (var runActivityContext = creditCardPaymentBreakDownLogger.activityContextWithCustomProperties(CreditCardPaymentBreakDownInstrumentationConstants::CreditCardPaymentBreakDownRecordAccess))
        {
            boolean ret = false;
            try
            {
                ttsbegin;
                _creditCardPaymentBreakDownTable.CreditCardPaymentProcessingStatus = _creditCardPaymentProcessingState;
                _creditCardPaymentBreakDownTable.update();
                ttscommit;
                ret = true;
            }
            catch (Exception::Deadlock)
            {
                creditCardPaymentBreakDownLogger.logError('Fail to finish task due to dead lock');
            }
            catch (Exception::UpdateConflict)
            {
                creditCardPaymentBreakDownLogger.logError('Fail to finish task due to update conflict');
            }
            catch (Exception::error)
            {
                creditCardPaymentBreakDownLogger.logError('Fail to finish task due to error');
            }
            catch
            {
                creditCardPaymentBreakDownLogger.logError('Fail to finish task due to error');
            }
            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preemptBreakDownTask</Name>
				<Source><![CDATA[
    public boolean preemptBreakDownTask(CreditCardPaymentBreakDownTable _creditCardPaymentBreakDownTable, CreditCardPaymentExecutionId _creditCardPaymentExecutionId)
    {
        boolean ret = false;
        try
        {
            ttsbegin;
            _creditCardPaymentBreakDownTable.CreditCardPaymentProcessingStatus = CreditCardPaymentProcessingState::InProcess;
            _creditCardPaymentBreakDownTable.CreditCardPaymentExecutionId = _creditCardPaymentExecutionId;
            _creditCardPaymentBreakDownTable.update();
            ttscommit;
            ret = true;
        }
        catch (Exception::Deadlock)
        {
            creditCardPaymentBreakDownLogger.logError('Fail to preempt task due to dead lock');
        }
        catch (Exception::UpdateConflict)
        {
            creditCardPaymentBreakDownLogger.logError('Fail to preempt task due to update conflict');
        }
        catch (Exception::error)
        {
            creditCardPaymentBreakDownLogger.logError('Fail to preempt task due to error');
        }
        catch
        {
            creditCardPaymentBreakDownLogger.logError('Fail to preempt task due to error');
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaskResult</Name>
				<Source><![CDATA[
    public boolean updateTaskResult(CreditCardPaymentBreakDownTable _creditCardPaymentBreakDownTable, CreditCardPaymentStatus _creditCardPaymentStatus, CreditCardBreakDownExecutionResult _creditCardBreakDownExecutionResult)
    {
        boolean ret = false;
        try
        {
            if (_creditCardBreakDownExecutionResult == CreditCardBreakDownExecutionResult::ApplicationExeuctionSucceed)
            {
                ttsbegin;
                _creditCardPaymentBreakDownTable.CreditCardPaymentStatus = _creditCardPaymentStatus;
                _creditCardPaymentBreakDownTable.update();
                ttscommit;
            }
            else
            {
                if (_creditCardBreakDownExecutionResult == CreditCardBreakDownExecutionResult::ApplicationExecutionFailed)
                {
                    _creditCardPaymentBreakDownTable.CreditCardPaymentProcessingStatus = CreditCardPaymentProcessingState::StopOnerror;
                }
                if (_creditCardBreakDownExecutionResult == CreditCardBreakDownExecutionResult::ApplicationExecutionExceptionOccured)
                {
                    _creditCardPaymentBreakDownTable.CreditCardPaymentProcessingStatus = CreditCardPaymentProcessingState::StopOnException;
                }
                ttsbegin;
                _creditCardPaymentBreakDownTable.update();
                ttscommit;
            }
            ret = true;
        }
        catch (Exception::Deadlock)
        {
            creditCardPaymentBreakDownLogger.logError('Fail to preempt task due to dead lock');
        }
        catch (Exception::UpdateConflict)
        {
            creditCardPaymentBreakDownLogger.logError('Fail to preempt task due to update conflict');
        }
        catch (Exception::error)
        {
            creditCardPaymentBreakDownLogger.logError('Fail to preempt task due to error');
        }
        catch
        {
            creditCardPaymentBreakDownLogger.logError('Fail to preempt task due to error');
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logExecutionResult</Name>
				<Source><![CDATA[
    public boolean logExecutionResult(
        CreditCardPaymentExecutionId _creditCardPaymentExecutionId, 
        CreditCardPaymentExecutionDateTime _startTime, 
        CreditCardPaymentExecutionDateTime _endTime, 
        CreditCardPaymentExecutionInfologContainer _infoLog, 
        RefRecId _breakDownTableRecId, 
        CreditCardPaymentInfoContainer _salesTablePacked, 
        CreditCardPaymentInfoContainer _custInvoiceJourPacked, 
        CreditCardPaymentInfoContainer _mCRCustPaymTablePacked, 
        CreditCardBreakDownExecutionResult _creditCardBreakDownExecutionResult,
        ClassId _classId,
        CreditCardPaymentStatus _creditCardPaymentStatus)
    {
        UserConnection userConnection = new UserConnection();
        boolean ret = false;
        CreditCardPaymentBreakDownExecutionLog creditCardPaymentBreakDownExecutionLog;
        creditCardPaymentBreakDownExecutionLog.ExecutionStartTime = _startTime;
        creditCardPaymentBreakDownExecutionLog.ExecutionEndTime = _endTime;
        creditCardPaymentBreakDownExecutionLog.CreditCardPaymentExecutionId = _creditCardPaymentExecutionId;
        creditCardPaymentBreakDownExecutionLog.CreditCardPaymentExecutionInfologContainer = _infoLog;
        creditCardPaymentBreakDownExecutionLog.CreditCardPaymentBreakDownTable = _breakDownTableRecId;
        creditCardPaymentBreakDownExecutionLog.SalesTablePacked = _salesTablePacked;
        creditCardPaymentBreakDownExecutionLog.CustInvoiceJourPacked = _custInvoiceJourPacked;
        creditCardPaymentBreakDownExecutionLog.MCRCustPaymPacked = _mCRCustPaymTablePacked;
        creditCardPaymentBreakDownExecutionLog.CreditCardBreakDownExecutionResult = _creditCardBreakDownExecutionResult;
        creditCardPaymentBreakDownExecutionLog.ClassId = _classId;
        creditCardPaymentBreakDownExecutionLog.PaymentStatus = _creditCardPaymentStatus;
        try
        {
            userConnection.ttsbegin();
            creditCardPaymentBreakDownExecutionLog.setConnection(userConnection);
            creditCardPaymentBreakDownExecutionLog.insert();
            userConnection.ttscommit();
            ret = true;
        }
        catch (Exception::Deadlock)
        {
            creditCardPaymentBreakDownLogger.logError('Fail to insert log due to dead lock');
        }
        catch (Exception::UpdateConflict)
        {
            creditCardPaymentBreakDownLogger.logError('Fail to insert log due to update conflict');
        }
        catch (Exception::DuplicateKeyException)
        {
            creditCardPaymentBreakDownLogger.logError('Fail to insert log due to dulicate key');
        }
        catch (Exception::error)
        {
            creditCardPaymentBreakDownLogger.logError('Fail to insert log due to error');
        }
        catch
        {
            creditCardPaymentBreakDownLogger.logError('Fail to insert log due to error');
        }
        finally
        {
            userConnection.finalize();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerIdempotencyStore</Name>
				<Source><![CDATA[
    public boolean registerIdempotencyStore(CreditCardPaymentBreakDownExecutionHashVal _creditCardPaymentBreakDownExecutionHashVal)
    {
        UserConnection userConnection = new UserConnection();
        boolean ret = false;
        CreditCardPaymentBreakDownIdempotencyStore creditCardPaymentBreakDownIdempotencyStore;
        creditCardPaymentBreakDownIdempotencyStore.HashedParm = _creditCardPaymentBreakDownExecutionHashVal;
        try
        {
            creditCardPaymentBreakDownIdempotencyStore.setConnection(userConnection);
            userConnection.ttsbegin();
            creditCardPaymentBreakDownIdempotencyStore.insert();
            userConnection.ttscommit();
            ret = true;
        }
        catch (Exception::Deadlock)
        {
            creditCardPaymentBreakDownLogger.logError('Fail to insert idempotency store due to dead lock');
        }
        catch (Exception::UpdateConflict)
        {
            creditCardPaymentBreakDownLogger.logError('Fail to insert idempotency store due to update conflict');
        }
        catch (Exception::DuplicateKeyException)
        {
            creditCardPaymentBreakDownLogger.logError('Fail to insert idempotency store due to dulicate key');
        }
        catch (Exception::error)
        {
            creditCardPaymentBreakDownLogger.logError('Fail to insert idempotency store due to error');
        }
        catch
        {
            creditCardPaymentBreakDownLogger.logError('Fail to insert idempotency store due to error');
        }
        finally
        {
            userConnection.finalize();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existInIdempotencyStore</Name>
				<Source><![CDATA[
    public boolean existInIdempotencyStore(CreditCardPaymentBreakDownExecutionHashVal _creditCardPaymentBreakDownExecutionHashVal)
    {
        CreditCardPaymentBreakDownIdempotencyStore creditCardPaymentBreakDownIdempotencyStore;
        select firstonly creditCardPaymentBreakDownIdempotencyStore 
            where creditCardPaymentBreakDownIdempotencyStore.HashedParm == _creditCardPaymentBreakDownExecutionHashVal;

        return creditCardPaymentBreakDownIdempotencyStore.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastExecutionLogList</Name>
				<Source><![CDATA[
    public List getLastExecutionLogList(CreditCardPaymentExecutionId _creditCardPaymentExecutionId)
    {
        List logList = new List(Types::Container);
        CreditCardPaymentBreakDownExecutionLog creditCardPaymentBreakDownExecutionLog;
        while select creditCardPaymentBreakDownExecutionLog
            order by creditCardPaymentBreakDownExecutionLog.ExecutionStartTime asc
            where creditCardPaymentBreakDownExecutionLog.CreditCardPaymentExecutionId == _creditCardPaymentExecutionId
        {
            logList.addEnd([creditCardPaymentBreakDownExecutionLog.CreditCardPaymentExecutionInfologContainer, 
                creditCardPaymentBreakDownExecutionLog.ExecutionStartTime, 
                creditCardPaymentBreakDownExecutionLog.PaymentStatus]);
        }

        return logList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBreakDownExecutionPacked</Name>
				<Source><![CDATA[
    public container getBreakDownExecutionPacked(CreditCardPaymentExecutionId _creditCardPaymentExecutionId)
    {
        CreditCardPaymentBreakDownExecutionLog creditCardPaymentBreakDownExecutionLog;

        select firstonly creditCardPaymentBreakDownExecutionLog
            order by ExecutionEndTime desc
            where creditCardPaymentBreakDownExecutionLog.CreditCardPaymentExecutionId == _creditCardPaymentExecutionId
                && creditCardPaymentBreakDownExecutionLog.CreditCardBreakDownExecutionResult == CreditCardBreakDownExecutionResult::ApplicationExeuctionSucceed;

        if (creditCardPaymentBreakDownExecutionLog)
        {
            return [creditCardPaymentBreakDownExecutionLog.SalesTablePacked, creditCardPaymentBreakDownExecutionLog.CustInvoiceJourPacked, creditCardPaymentBreakDownExecutionLog.MCRCustPaymPacked];
        }

        CreditCardPaymentBreakDownTable creditCardPaymentBreakDownTable = CreditCardPaymentBreakDownTable::findByExecutionId(_creditCardPaymentExecutionId);
        return [creditCardPaymentBreakDownTable.SalesTableContainer, creditCardPaymentBreakDownTable.CustInvoiceJourContainer, creditCardPaymentBreakDownExecutionLog.MCRCustPaymPacked];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviousFinishedExecutionLogList</Name>
				<Source><![CDATA[
    public List getPreviousFinishedExecutionLogList(RecId _recId, CreditCardPaymentExecutionId _creditCardPaymentExecutionId)
    {
        List logList = new List(Types::Container);
        CreditCardPaymentBreakDownExecutionLog creditCardPaymentBreakDownExecutionLog;
        while select creditCardPaymentBreakDownExecutionLog
            order by creditCardPaymentBreakDownExecutionLog.ExecutionStartTime asc
            where creditCardPaymentBreakDownExecutionLog.CreditCardPaymentBreakDownTable == _recId
                && creditCardPaymentBreakDownExecutionLog.CreditCardBreakDownExecutionResult == CreditCardBreakDownExecutionResult::ApplicationExeuctionSucceed
                && creditCardPaymentBreakDownExecutionLog.CreditCardPaymentExecutionId != _creditCardPaymentExecutionId
        {
            logList.addEnd([creditCardPaymentBreakDownExecutionLog.CreditCardPaymentExecutionInfologContainer,
                creditCardPaymentBreakDownExecutionLog.ExecutionStartTime,
                creditCardPaymentBreakDownExecutionLog.PaymentStatus]);
        }

        return logList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContractNum</Name>
				<Source><![CDATA[
    public int getContractNum()
    {
        return ContainerLength;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>