<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsCatchWeightMovementQtyAdjustment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Adjusts inventory quantities taking into consideration inventory transactions related to a particular inventory movement.
/// </summary>
class PdsCatchWeightMovementQtyAdjustment
{
    InventMovement                          inventMovement;
    InventUpdate                            inventUpdate;
    InventDim                               inventDimCriteria;
    InventDimId                             inventDimPhysicalMatched;
    InventDimParm                           inventDimParm;
    PdsCatchWeightQtyCalculationStrategy    calculationStrategy;
    boolean                                 checkTransactionPhysicalUpdate;
    boolean                                 isFullCatchWeightQuantityAssigned;
    boolean                                 countryRegion_RU;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convertQtyUnit</Name>
				<Source><![CDATA[
    private InventQty convertQtyUnit(InventQty _inventQty, UnitOfMeasureSymbol _unitOfMeasure)
    {
        UnitOfMeasureConverter_Product  unitConverter;

        unitConverter = UnitOfMeasureConverter_Product::construct();
        unitConverter.parmProduct(inventMovement.inventTable().Product);
        unitConverter.parmFromUnitOfMeasure(UnitOfMeasure::unitOfMeasureIdBySymbol(inventMovement.inventTable().inventUnitId()));
        unitConverter.parmToUnitOfMeasure(UnitOfMeasure::unitOfMeasureIdBySymbol(_unitOfMeasure));

        return unitConverter.convertValue(_inventQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQtyForIssueTransactions</Name>
				<Source><![CDATA[
    private InventQty inventQtyForIssueTransactions(
        PdsCWInventQty      _cwQty,
        StatusIssue         _issueFrom,
        StatusIssue         _issueTo)
    {
        InventQty               result = 0;
        InventTrans             inventTrans;
        PdsCWInventQty          cwQtyLeft = _cwQty;

        if (cwQtyLeft != 0)
        {
            inventUpdate.initInventTransToIssueList(
                _issueFrom,
                _issueTo,
                '',
                inventDimCriteria,
                inventDimParm,
                inventMovement.transChildType(),
                inventMovement.transChildRefId());

            while (cwQtyLeft != 0 && inventUpdate.getNextInventTransToIssue(inventTrans))
            {
                if (!checkTransactionPhysicalUpdate || inventMovement.canInventTransBePhysicalUpdated(inventTrans))
                {
                    calculationStrategy.calculate(inventTrans, cwQtyLeft);

                    result += calculationStrategy.inventoryQuantityDelta();
                    cwQtyLeft -= calculationStrategy.catchWeightQuantityDelta();
                }
            }
        }

        isFullCatchWeightQuantityAssigned = (cwQtyLeft == 0);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQtyForReceiptTransactions</Name>
				<Source><![CDATA[
    private InventQty inventQtyForReceiptTransactions(
        PdsCWInventQty      _cwQty,
        StatusReceipt       _receiptFrom,
        StatusReceipt       _receiptTo,
        PackingSlipId       _packingSlipId)
    {
        InventQty               result = 0;
        InventTrans             inventTrans;
        PdsCWInventQty          cwQtyLeft = _cwQty;

        if (cwQtyLeft != 0)
        {
            if (inventDimPhysicalMatched)
            {
                inventUpdate.initInventTransToReceiveList(
                    _receiptFrom,
                    _receiptTo,
                    inventDimPhysicalMatched,
                    inventDimCriteria,
                    inventDimParm,
                    inventMovement.transChildType(),
                    inventMovement.transChildRefId(),
                    PdsCatchWeight::maxInventQty(inventMovement.itemId(), _cwQty),
                    true);
            }
            else
            {
                InventDimId   inventDimIdCriteria = '';
                if (   _receiptFrom ==StatusReceipt::Registered
                    && _receiptTo == StatusReceipt::Registered
                    && inventMovement.isTransfer())
                {
                    InventDimParm inventDimParmCriteria;
                    InventDimParm inventDimParmActive;
                    inventDimParmCriteria.initFromInventDim(inventDimCriteria);
                    inventDimParmActive.initFromInventDimFieldList(inventMovement.inventDimGroupSetup().activeFields());

                    if (inventDimParmActive.LicensePlateFlag 
                        && !inventMovement.inventdim().inventLocation().WHSEnabled)
                    {
                        inventDimParmActive.LicensePlateFlag = NoYes::No;
                    }

                    if (InventDimParm::isInventDimParmEqual(inventDimParmCriteria, inventDimParm)
                        && InventDimParm::isInventDimParmEqual(inventDimParmActive, inventDimParm))
                    {
                        inventDimIdCriteria = InventDim::findOrCreate(inventDimCriteria).inventDimId;
                    }
                }

                inventUpdate.initInventTransToReceiveList(
                    _receiptFrom,
                    _receiptTo,
                    inventDimIdCriteria,
                    inventDimCriteria,
                    inventDimParm,
                    inventMovement.transChildType(),
                    inventMovement.transChildRefId(),
                    PdsCatchWeight::maxInventQty(inventMovement.itemId(), _cwQty));
            }

            while (cwQtyLeft != 0 && inventUpdate.getNextInventTransToReceive(inventTrans))
            {
                if (_packingSlipId && _packingSlipId != inventTrans.PackingSlipId)
                {
                    continue;
                }

                if (!checkTransactionPhysicalUpdate || inventMovement.canInventTransBePhysicalUpdated(inventTrans))
                {
                    calculationStrategy.calculate(inventTrans, cwQtyLeft);

                    result += calculationStrategy.inventoryQuantityDelta();
                    cwQtyLeft -= calculationStrategy.catchWeightQuantityDelta();
                }
            }
        }

        isFullCatchWeightQuantityAssigned = (cwQtyLeft == 0);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFullCatchWeightQuantityAssigned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the full catch weight quantity requested was processed.
    /// </summary>
    /// <returns>
    /// true if the full catch weight quantity requested was processed; otherwise, false.
    /// </returns>
    public boolean isFullCatchWeightQuantityAssigned()
    {
        return isFullCatchWeightQuantityAssigned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        // <GEERU>
        #ISOCountryRegionCodes

        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalculationStrategy</Name>
				<Source><![CDATA[
    public PdsCatchWeightQtyCalculationStrategy parmCalculationStrategy(PdsCatchWeightQtyCalculationStrategy _calculationStrategy = calculationStrategy)
    {
        calculationStrategy = _calculationStrategy;

        return calculationStrategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckTransactionPhysicalUpdate</Name>
				<Source><![CDATA[
    public boolean parmCheckTransactionPhysicalUpdate(boolean _checkTransactionPhysicalUpdate = checkTransactionPhysicalUpdate)
    {
        checkTransactionPhysicalUpdate = _checkTransactionPhysicalUpdate;

        return checkTransactionPhysicalUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimPhysicalMatched</Name>
				<Source><![CDATA[
    public InventDimId parmInventDimPhysicalMatched(InventDimId _inventDimPhysicalMatched = inventDimPhysicalMatched)
    {
        inventDimPhysicalMatched = _inventDimPhysicalMatched;

        return inventDimPhysicalMatched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimCriteria</Name>
				<Source><![CDATA[
    public InventDim parmInventDimCriteria(InventDim _inventDimCriteria = inventDimCriteria)
    {
        inventDimCriteria = _inventDimCriteria;

        return inventDimCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParm</Name>
				<Source><![CDATA[
    public InventDimParm parmInventDimParm(InventDimParm _inventDimParm = inventDimParm)
    {
        inventDimParm = _inventDimParm;

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventMovement</Name>
				<Source><![CDATA[
    public InventMovement parmInventMovement(InventMovement _inventMovement = inventMovement)
    {
        inventMovement = _inventMovement;
        return inventMovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventUpdate</Name>
				<Source><![CDATA[
    public InventUpdate parmInventUpdate(InventUpdate _inventUpdate = inventUpdate)
    {
        inventUpdate = _inventUpdate;
        return inventUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchReceiptQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts a receipt catch weight quantity to inventory quantity, taking into consideration related inventory transactions for a particular document status of a purchase order.
    /// </summary>
    /// <param name="_documentStatus">
    ///     The status of the document that restricts the inventory transactions taken into consideration when adjusting the inventory quantity.
    /// </param>
    /// <param name="_cwQty">
    ///     The catch weight quantity for which the corresponding inventory quantity is calculated.
    /// </param>
    /// <param name="_packingSlipId">
    ///     The packing slip ID to be used for filtering the inventory transactions; Optional.
    /// </param>
    /// <returns>
    ///     An inventory quantity.
    /// </returns>
    public InventQty purchReceiptQty(
            DocumentStatus  _documentStatus,
            PdsCWInventQty  _cwQty,
            PackingSlipId   _packingSlipId = '')
    {
        switch (_documentStatus)
        {
            case DocumentStatus::Invoice :
                return this.inventQtyForReceiptTransactions(_cwQty, StatusReceipt::Received, StatusReceipt::Registered, _packingSlipId);

            case DocumentStatus::PackingSlip :
                return this.inventQtyForReceiptTransactions(_cwQty, StatusReceipt::Registered, StatusReceipt::Registered, _packingSlipId);

            default:
                return PdsCatchWeight::inventQty(inventMovement.itemId(), _cwQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnOrderIssueTransactionQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts a catch weight quantity to inventory quantity.
    /// </summary>
    /// <param name="_cwQty">
    ///     The CW quantity for which the corresponding inventory quantity is calculated.
    /// </param>
    /// <param name="_movementUnitOfMeasureSymbol">
    ///     The unit of measure used by a particular source of inventory transaction.
    /// </param>
    /// <returns>
    ///     Inventory quantity.
    /// </returns>
    public InventQty returnOrderIssueTransactionQty(PdsCWInventQty _cwQty, UnitOfMeasureSymbol _movementUnitOfMeasureSymbol)
    {
        InventQty   inventQty;

        inventQty = this.inventQtyForIssueTransactions(_cwQty, StatusIssue::Sold, StatusIssue::QuotationIssue);
        return this.convertQtyUnit(inventQty, _movementUnitOfMeasureSymbol);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesIssueQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts an issue catch weight quantity to inventory quantity, taking into consideration related inventory transactions for a particular document status of the order.
    /// </summary>
    /// <param name="_documentStatus">
    ///     The status of the document, that restricts the inventory transactions taken into consideration when adjusting the inventory quantity.
    /// </param>
    /// <param name="_cwQty">
    ///     The CW quantity for which the corresponding inventory quantity is calculated.
    /// </param>
    /// <param name="_movementUnitOfMeasureSymbol">
    ///     The unit of measure used by a particular source of inventory transaction.
    /// </param>
    /// <returns>
    ///     Inventory quantity.
    /// </returns>
    public InventQty salesIssueQty(DocumentStatus _documentStatus, PdsCWInventQty _cwQty, UnitOfMeasureSymbol _movementUnitOfMeasureSymbol)
    {
        InventQty   inventQty;
        switch (_documentStatus)
        {
            case DocumentStatus::PickingList:
                inventQty = this.inventQtyForIssueTransactions(_cwQty, StatusIssue::ReservPhysical, StatusIssue::OnOrder);
                return this.convertQtyUnit(inventQty, _movementUnitOfMeasureSymbol);
            case DocumentStatus::PackingSlip:
                inventQty = this.inventQtyForIssueTransactions(_cwQty, StatusIssue::Picked, StatusIssue::Picked);
                return this.convertQtyUnit(inventQty, _movementUnitOfMeasureSymbol);
            case DocumentStatus::Invoice:
                inventQty = this.inventQtyForIssueTransactions(_cwQty, StatusIssue::Deducted, StatusIssue::Picked);
                return this.convertQtyUnit(inventQty, _movementUnitOfMeasureSymbol);
            default:
                return PdsCatchWeight::inventQty(inventMovement.itemId(), _cwQty, _movementUnitOfMeasureSymbol);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferIssueQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts an issue catch weight quantity to inventory quantity, taking into consideration related inventory transactions for a particular status of the transfer order.
    /// </summary>
    /// <param name="_transferUpdateType">
    ///     The status of the document that restricts the inventory transactions taken into consideration when adjusting the inventory quantity.
    /// </param>
    /// <param name="_cwQty">
    ///     The catch weight quantity for which the corresponding inventory quantity is calculated.
    /// </param>
    /// <returns>
    ///     An inventory quantity.
    /// </returns>
    public InventQty transferIssueQty(InventTransferUpdateType _transferUpdateType, PdsCWInventQty _cwQty)
    {
        // <GEERU>
        if (_cwQty < 0)
        {
            return this.inventQtyForIssueTransactions(_cwQty, StatusIssue::Sold, StatusIssue::Sold);
        }
        else
        {
        // </GEERU>
            switch (_transferUpdateType)
            {
                case InventTransferUpdateType::PickingList:
                    return this.inventQtyForIssueTransactions(_cwQty, StatusIssue::ReservPhysical, StatusIssue::OnOrder);

                case InventTransferUpdateType::Shipment:
                    return this.inventQtyForIssueTransactions(
                                    _cwQty,
                                    StatusIssue::Picked,
                                    // <GEERU>
                                    countryRegion_RU ?
                                        StatusIssue::OnOrder :
                                    // </GEERU>
                                        StatusIssue::Picked);

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        // <GEERU>
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferReceiptQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts a receipt catch weight quantity to inventory quantity, taking into consideration related inventory transactions for a particular status of the transfer order.
    /// </summary>
    /// <param name="_transferUpdateType">
    ///     The status of the document that restricts the inventory transactions taken into consideration when adjusting the inventory quantity.
    /// </param>
    /// <param name="_cwQty">
    ///     The catch weight quantity for which the corresponding inventory quantity is calculated.
    /// </param>
    /// <returns>
    ///     An inventory quantity.
    /// </returns>
    public InventQty transferReceiptQty(InventTransferUpdateType _transferUpdateType, PdsCWInventQty _cwQty)
    {
        // <GEERU>
        if (_cwQty < 0)
        {
            return this.inventQtyForReceiptTransactions(_cwQty, StatusReceipt::Purchased, StatusReceipt::Purchased, '');
        }
        else
        {
        // </GEERU>
            switch (_transferUpdateType)
            {
                case InventTransferUpdateType::Receive:
                    return this.inventQtyForReceiptTransactions(
                                    _cwQty,
                                    StatusReceipt::Registered,
                                    // <GEERU>
                                    countryRegion_RU ?
                                        StatusReceipt::Ordered :
                                    // </GEERU>
                                        StatusReceipt::Registered,
                                    '');

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        // <GEERU>
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PdsCatchWeightMovementQtyAdjustment construct()
    {
        return new PdsCatchWeightMovementQtyAdjustment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes a new instance of <c>PdsCatchWeightMovementQtyAdjustment</c> class.
    /// </summary>
    /// <param name="_buffer">
    ///     A table buffer for which a related movement is initialized.
    /// </param>
    /// <returns>
    ///     A new instance of <c>PdsCatchWeightMovementQtyAdjustment</c> class.
    /// </returns>
    public static PdsCatchWeightMovementQtyAdjustment newBuffer(Common _buffer)
    {
        InventMovement                          inventMovement;
        InventUpd_Physical                      inventUpdate;
        PdsCatchWeightQtyCalculationStrategy    calculationStrategy;
        PdsCatchWeightMovementQtyAdjustment     qtyAdjustment = PdsCatchWeightMovementQtyAdjustment::construct();

        inventMovement = InventMovement::construct(_buffer);
        inventUpdate = InventUpd_Physical::newInventMovement(inventMovement);
        calculationStrategy = PdsCatchWeightQtyCalcInRangeStrategy::construct();

        qtyAdjustment.parmInventMovement(inventMovement);
        qtyAdjustment.parmInventUpdate(inventUpdate);
        qtyAdjustment.parmInventDimCriteria(inventUpdate.parmInventDim());
        qtyAdjustment.parmInventDimParm(inventUpdate.parmInventDimParm());
        qtyAdjustment.parmCalculationStrategy(calculationStrategy);
        qtyAdjustment.parmCheckTransactionPhysicalUpdate(false);

        return qtyAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of <c>PdsCatchWeightMovementQtyAdjustment</c> class for the purchase order invoice scenario.
    /// </summary>
    /// <param name="_inventMovement">
    /// An inventory movement.
    /// </param>
    /// <param name="_vendInvoiceInfoLine">
    /// A <c>VendInvoiceInfoLine</c> table buffer.
    /// </param>
    /// <returns>
    /// A new instance of <c>PdsCatchWeightMovementQtyAdjustment</c> class.
    /// </returns>
    public static PdsCatchWeightMovementQtyAdjustment newPurchInvoice(
        InventMov_Purch     _inventMovement,
        VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        InventUpd_Financial                     inventUpdate;
        PdsCatchWeightQtyCalculationStrategy    calculationStrategy;
        PdsCatchWeightMovementQtyAdjustment     qtyAdjustment = PdsCatchWeightMovementQtyAdjustment::construct();

        inventUpdate = InventUpd_Financial::newPurchInvoiceProforma(
            _inventMovement,
            LedgerVoucher::newLedgerPost(
                DetailSummary::Summary,
                SysModule::Purch,
                NumberSequenceTable::find(PurchParameters::numRefPurchInvoiceVoucher().NumberSequenceId).NumberSequence),
            _vendInvoiceInfoLine);
        calculationStrategy = PdsCatchWeightQtyCalcProportionStrategy::construct();

        qtyAdjustment.parmInventMovement(_inventMovement);
        qtyAdjustment.parmInventUpdate(inventUpdate);
        qtyAdjustment.parmInventDimCriteria(inventUpdate.parmInventDim());
        qtyAdjustment.parmInventDimParm(inventUpdate.parmInventDimParm());
        qtyAdjustment.parmCalculationStrategy(calculationStrategy);
        qtyAdjustment.parmCheckTransactionPhysicalUpdate(true);

        return qtyAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of <c>PdsCatchWeightMovementQtyAdjustment</c> class for the purchase order packing slip scenario.
    /// </summary>
    /// <param name="_inventMovement">
    /// An inventory movement.
    /// </param>
    /// <param name="_vendPackingSlipTrans">
    /// A <c>VendPackingSlipTrans</c> table buffer.
    /// </param>
    /// <returns>
    /// A new instance of <c>PdsCatchWeightMovementQtyAdjustment</c> class.
    /// </returns>
    public static PdsCatchWeightMovementQtyAdjustment newPurchPackingSlip(
        InventMov_Purch             _inventMovement,
        VendPackingSlipTrans        _vendPackingSlipTrans)
    {
        InventUpd_Physical                      inventUpdate;
        PdsCatchWeightQtyCalculationStrategy    calculationStrategy;
        PdsCatchWeightMovementQtyAdjustment     qtyAdjustment = PdsCatchWeightMovementQtyAdjustment::construct();

        inventUpdate = InventUpd_Physical::newPurchPackingSlipProforma(
            _inventMovement,
            _vendPackingSlipTrans,
            _vendPackingSlipTrans.vendPackingslipJour().PackingSlipId);
        calculationStrategy = PdsCatchWeightQtyCalcProportionStrategy::construct();

        qtyAdjustment.parmInventMovement(_inventMovement);
        qtyAdjustment.parmInventUpdate(inventUpdate);
        qtyAdjustment.parmInventDimCriteria(inventUpdate.parmInventDim());
        qtyAdjustment.parmInventDimParm(inventUpdate.parmInventDimParm());
        qtyAdjustment.parmCalculationStrategy(calculationStrategy);
        qtyAdjustment.parmCheckTransactionPhysicalUpdate(true);

        return qtyAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSalesInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of <c>PdsCatchWeightMovementQtyAdjustment</c> class for the sales order invoice scenario.
    /// </summary>
    /// <param name="_inventMovement">
    /// An inventory movement.
    /// </param>
    /// <param name="_salesParmLine">
    /// A <c>SalesParmLine</c> table buffer.
    /// </param>
    /// <param name="_salesParmSubLine">
    /// A <c>SalesParmSubLine</c> table buffer.
    /// </param>
    /// <returns>
    /// A new instance of <c>PdsCatchWeightMovementQtyAdjustment</c> class.
    /// </returns>
    public static PdsCatchWeightMovementQtyAdjustment newSalesInvoice(
        InventMov_Sales _inventMovement,
        SalesParmLine   _salesParmLine,
        SalesParmSubLine _salesParmSubLine = null)
    {
        InventUpd_Financial                     inventUpdate;
        PdsCatchWeightQtyCalculationStrategy    calculationStrategy;
        PdsCatchWeightMovementQtyAdjustment     qtyAdjustment = PdsCatchWeightMovementQtyAdjustment::construct();

        inventUpdate = InventUpd_Financial::newSalesInvoiceProforma(
            _inventMovement,
            LedgerVoucher::newLedgerPost(
                DetailSummary::Summary,
                SysModule::Purch,
                NumberSequenceTable::find(SalesParameters::numRefSalesInvoiceVoucher().NumberSequenceId).NumberSequence),
            _salesParmLine,
            _salesParmSubLine);
        calculationStrategy = PdsCatchWeightQtyCalcProportionStrategy::construct();

        qtyAdjustment.parmInventMovement(_inventMovement);
        qtyAdjustment.parmInventUpdate(inventUpdate);
        qtyAdjustment.parmInventDimCriteria(inventUpdate.parmInventDim());
        qtyAdjustment.parmInventDimParm(inventUpdate.parmInventDimParm());
        qtyAdjustment.parmCalculationStrategy(calculationStrategy);
        qtyAdjustment.parmCheckTransactionPhysicalUpdate(true);

        return qtyAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSalesPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of <c>PdsCatchWeightMovementQtyAdjustment</c> class for the sales order packing slip scenario.
    /// </summary>
    /// <param name="_inventMovement">
    /// An inventory movement.
    /// </param>
    /// <param name="_custPackingSlipTrans">
    /// A <c>CustPackingSlipTrans</c> table buffer.
    /// </param>
    /// <returns>
    /// A new instance of <c>PdsCatchWeightMovementQtyAdjustment</c> class.
    /// </returns>
    public static PdsCatchWeightMovementQtyAdjustment newSalesPackingSlip(
        InventMov_Sales             _inventMovement,
        CustPackingSlipTrans        _custPackingSlipTrans)
    {
        InventUpd_Physical                      inventUpdate;
        PdsCatchWeightQtyCalculationStrategy    calculationStrategy;
        PdsCatchWeightMovementQtyAdjustment     qtyAdjustment = PdsCatchWeightMovementQtyAdjustment::construct();

        inventUpdate = InventUpd_Physical::newSalesPackingSlip(_inventMovement, _custPackingSlipTrans, _custPackingSlipTrans.custPackingslipJour().PackingSlipId);
        calculationStrategy = PdsCatchWeightQtyCalcProportionStrategy::construct();

        qtyAdjustment.parmInventMovement(_inventMovement);
        qtyAdjustment.parmInventUpdate(inventUpdate);
        qtyAdjustment.parmInventDimCriteria(inventUpdate.parmInventDim());
        qtyAdjustment.parmInventDimParm(inventUpdate.parmInventDimParm());
        qtyAdjustment.parmCalculationStrategy(calculationStrategy);
        qtyAdjustment.parmCheckTransactionPhysicalUpdate(true);

        return qtyAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTransferReceive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of <c>PdsCatchWeightMovementQtyAdjustment</c> class for the transfer order receive scenario.
    /// </summary>
    /// <param name="_inventTransferParmLine">
    /// A <c>InventTransferParmLine</c> table buffer.
    /// </param>
    /// <param name="_ledgerVoucher">
    /// An instance of the <c>LedgerVoucher</c> class.
    /// </param>
    /// <returns>
    /// A new instance of <c>PdsCatchWeightMovementQtyAdjustment</c> class.
    /// </returns>
    public static PdsCatchWeightMovementQtyAdjustment newTransferReceive(InventTransferParmLine _inventTransferParmLine, LedgerVoucher _ledgerVoucher)
    {
        InventUpd_Physical                      inventUpd_Physical;
        InventTransferLine                      inventTransferLine;
        InventMovement                          inventMovement;
        InventDim                               inventDimTransferParmLine;
        InventDimParm                           inventDimParmTransferParmLine;
        PdsCatchWeightMovementQtyAdjustment     qtyAdjustment = PdsCatchWeightMovementQtyAdjustment::construct();

        inventTransferLine = InventTransferLine::findTransIdReceive(_inventTransferParmLine.InventTransId, true);
        inventMovement = InventMov_TransferTo::newFromInventTransferLine(inventTransferLine);
        inventDimTransferParmLine  = InventDim::find(_inventTransferParmLine.InventDimId);
        inventDimParmTransferParmLine.initFromInventDim(inventDimTransferParmLine);

        // Find the first transactions and split quantity for the next if needed
        inventUpd_Physical = InventUpd_Financial::newInventTransferLineReceive(
            inventMovement,
            _ledgerVoucher,
            0,
            _inventTransferParmLine.QtyReceiveNow,
            inventDimTransferParmLine,
            inventDimParmTransferParmLine,
            _inventTransferParmLine.PdsCWQtyReceiveNow).createInventUpd_Physical();

        qtyAdjustment.parmInventMovement(inventMovement);
        qtyAdjustment.parmInventUpdate(inventUpd_Physical);
        qtyAdjustment.parmCalculationStrategy(PdsCatchWeightQtyCalcProportionStrategy::construct());
        qtyAdjustment.parmInventDimCriteria(inventUpd_Physical.parmInventDim());
        qtyAdjustment.parmInventDimParm(inventUpd_Physical.parmInventDimParm());
        qtyAdjustment.parmCheckTransactionPhysicalUpdate(true);

        return qtyAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTransferScrap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of <c>PdsCatchWeightMovementQtyAdjustment</c> class for the transfer order scrap scenario.
    /// </summary>
    /// <param name="_inventTransferParmLine">
    /// An <c>InventTransferParmLine</c> table buffer.
    /// </param>
    /// <param name="_ledgerVoucher">
    /// An instance of the <c>LedgerVoucher</c> class.
    /// </param>
    /// <returns>
    /// A new instance of <c>PdsCatchWeightMovementQtyAdjustment</c> class.
    /// </returns>
    public static PdsCatchWeightMovementQtyAdjustment newTransferScrap(InventTransferParmLine _inventTransferParmLine, LedgerVoucher _ledgerVoucher)
    {
        InventUpd_Physical                      inventUpd_Physical;
        InventTransferLine                      inventTransferLine;
        InventMovement                          inventMovement;
        InventDim                               inventDimTransferParmLine;
        InventDimParm                           inventDimParmTransferParmLine;
        PdsCatchWeightMovementQtyAdjustment     qtyAdjustment = PdsCatchWeightMovementQtyAdjustment::construct();

        inventTransferLine = InventTransferLine::findTransIdReceive(_inventTransferParmLine.InventTransId, true);
        inventMovement = InventMov_TransferTo::newFromInventTransferLine(inventTransferLine);
        inventDimTransferParmLine  = InventDim::find(_inventTransferParmLine.InventDimId);
        inventDimParmTransferParmLine.initFromInventDim(inventDimTransferParmLine);

        // Find the first transactions and split quantity for the next if needed
        inventUpd_Physical = InventUpd_Financial::newInventTransferLineReceive(
            inventMovement,
            _ledgerVoucher,
            0,
            _inventTransferParmLine.QtyScrapNow,
            inventDimTransferParmLine,
            inventDimParmTransferParmLine,
            _inventTransferParmLine.PdsCWQtyScrapNow).createInventUpd_Physical();

        qtyAdjustment.parmInventMovement(inventMovement);
        qtyAdjustment.parmInventUpdate(inventUpd_Physical);
        qtyAdjustment.parmCalculationStrategy(PdsCatchWeightQtyCalcProportionStrategy::construct());
        qtyAdjustment.parmInventDimCriteria(inventUpd_Physical.parmInventDim());
        qtyAdjustment.parmInventDimParm(inventUpd_Physical.parmInventDimParm());
        qtyAdjustment.parmCheckTransactionPhysicalUpdate(true);

        return qtyAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTransferShip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of <c>PdsCatchWeightMovementQtyAdjustment</c> class for the transfer order ship scenario.
    /// </summary>
    /// <param name="_inventTransferParmLine">
    /// An <c>InventTransferParmLine</c> table buffer.
    /// </param>
    /// <param name="_ledgerVoucher">
    /// An instance of the <c>LedgerVoucher</c> class.
    /// </param>
    /// <returns>
    /// A new instance of <c>PdsCatchWeightMovementQtyAdjustment</c> class.
    /// </returns>
    public static PdsCatchWeightMovementQtyAdjustment newTransferShip(InventTransferParmLine _inventTransferParmLine, LedgerVoucher _ledgerVoucher)
    {
        InventUpd_Physical                      inventUpd_Physical;
        InventTransferLine                      inventTransferLine;
        InventMovement                          inventMovement;
        InventDim                               inventDimTransferParmLine;
        InventDimParm                           inventDimParmTransferParmLine;
        PdsCatchWeightMovementQtyAdjustment     qtyAdjustment = PdsCatchWeightMovementQtyAdjustment::construct();

        inventTransferLine = InventTransferLine::findTransIdShip(_inventTransferParmLine.InventTransId, true);
        inventMovement = InventMov_TransferFrom::newFromInventTransferLine(inventTransferLine);
        inventDimTransferParmLine  = InventDim::find(_inventTransferParmLine.InventDimId);
        inventDimParmTransferParmLine.initFromInventDim(inventDimTransferParmLine);

        // Find the first transactions and split quantity for the next if needed
        inventUpd_Physical = InventUpd_Financial::newInventTransferLineShip(
            inventMovement,
            _ledgerVoucher,
            _inventTransferParmLine,
            0,
            _inventTransferParmLine.QtyShipNow,
            inventDimTransferParmLine,
            inventDimParmTransferParmLine,
            _inventTransferParmLine.PdsCWQtyShipNow).createInventUpd_Physical();

        qtyAdjustment.parmInventMovement(inventMovement);
        qtyAdjustment.parmInventUpdate(inventUpd_Physical);
        qtyAdjustment.parmCalculationStrategy(PdsCatchWeightQtyCalcProportionStrategy::construct());
        qtyAdjustment.parmInventDimCriteria(inventUpd_Physical.parmInventDim());
        qtyAdjustment.parmInventDimParm(inventUpd_Physical.parmInventDimParm());
        qtyAdjustment.parmCheckTransactionPhysicalUpdate(true);

        return qtyAdjustment;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>