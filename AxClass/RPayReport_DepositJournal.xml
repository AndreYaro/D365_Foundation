<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayReport_DepositJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The payroll deposit journal report.
/// </summary>
class RPayReport_DepositJournal extends OXMLExcelReport_RPay implements BatchRetryable
{
    ReportPeriod_RU payPeriod;
    DialogField     dialogPayPeriod;
    QueryRun        queryRun;
    Counter         pageNumber;
    LedgerDimensionAccount cashLedgerDimension;
    Map             mthAmounts;
    Map             yearAmounts;

    #define.Prolog('PROLOG')
    #define.Header('HEADER')
    #define.Body('BODY')
    #define.MthFooter('MthFooter')
    #define.YearFooter('YearFooter')

    #define.pageWidth(169)
    #define.sumIndex(13)
    #define.CurrentVersion(1)
    #localmacro.CurrentList
        payPeriod
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToMap</Name>
				<Source><![CDATA[
    private void addToMap(Map _map, int _index, real _value)
    {
        real oldV =  _map.exists(_index) ? any2real(_map.lookup(_index)) : 0;
        real newV = oldV + _value;

        _map.insert(_index, newV);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(15)

        switch (_bookmark)
        {
            case #Prolog:
            case #Header:
            case #MthFooter:
            case #YearFooter:
                return conPeek(mapSections.lookup(_bookmark), #posSectionHeight);
        }

        return #minHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        RPayDepositTable        depositTable;
        ReportPeriod_RU prevPayPeriod;

        void checkAndFillMidFooters()
        {
            depositTable = queryRun.get(tableNum(RPayDepositTable));

            if (prevPayPeriod != depositTable.PayPeriod)
            {
                if (mthOfYr(prevPayPeriod) != mthOfYr(depositTable.payPeriod))
                {
                    this.execute(#MthFooter);
                }
                if (year(prevPayPeriod) != year(depositTable.PayPeriod))
                {
                    this.execute(#YearFooter);
                }
                prevPayPeriod = depositTable.PayPeriod;
            }
        }

        currentHeight = 0;
        pageNumber = 0;
        this.initSectionMap();

        this.setCurrentWorksheetNum(1, #pageWidth);

        this.execute(#Prolog);

        this.execute(#Header);

        this.updateQuery();

        queryRun.next();
        depositTable = queryRun.get(tableNum(RPayDepositTable));
        prevPayPeriod = depositTable.PayPeriod;

        queryRun.reset();
        while (queryRun.next())
        {
            checkAndFillMidFooters();
            this.execute(#Body);
        }

        this.execute(#MthFooter);
        this.execute(#YearFooter);

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog;

        this.updateQuery();
        dialog = super();

        dialog.addGroup("@SYS2163");
        dialogPayPeriod = dialog.addFieldValue(extendedTypeStr(ReportPeriod_RU), payPeriod);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    #define.fileName('RPayDepositJournalReport')
    protected Filename fileName()
    {
        return #fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    #define.Dash('_')
    protected Filename fileNamePostfix()
    {
        return #Dash + date2StrUsr(payPeriod, DateFlags::None) + #Dash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    #define.emplId('emplId')
    #define.fio('fio')
    #define.emplDate('emplDate')
    #define.paySheet('paySheet')
    #define.amount('amount')
    #define.accountNum('accountNum')
    #define.cashOrder('cashOrder')
    #define.balance('balance')
    private void fillBody()
    {
        RPayDepositTable depositTable;
        LedgerDimensionAccount  dimAccount;
        Counter i;
        Amount  lineSum;
        Amount  distrSum = 0;

        depositTable = queryRun.get(tableNum(RPayDepositTable));
        this.insertValueToSection(#emplId, depositTable.EmplId);
        this.insertValueToSection(#fio, RHRMEmplTable::find(depositTable.EmplId).personTable().fio());
        this.insertValueToSection(#emplDate, int2str(mthOfYr(depositTable.PayPeriod)) + "@SYS35672" + int2str(year(depositTable.PayPeriod)));
        this.insertValueToSection(#paySheet, depositTable.PaySheetNum);

        this.insertValueToSection(#amount, depositTable.DepositSum);
        lineSum = depositTable.DepositSum;
        this.addToMap(mthAmounts, #sumIndex, depositTable.DepositSum);
        this.addToMap(yearAmounts, #sumIndex, depositTable.DepositSum);
        //clear row
        for (i=1;i<=12;i++)
        {
             this.insertValueToSection(#amount + int2str(i), '');
        }

        this.insertValueToSection(#accountNum, '');
        this.insertValueToSection(#cashOrder, '');
        if (depositTable.ClosedDate && mthOfYr(depositTable.ClosedDate) <= mthOfYr(payPeriod))
        {
            this.insertValueToSection(#amount + int2str(mthOfYr(depositTable.ClosedDate)), depositTable.DepositSum);
            this.addToMap(mthAmounts, mthOfYr(depositTable.ClosedDate), depositTable.DepositSum);
            this.addToMap(yearAmounts, mthOfYr(depositTable.ClosedDate), depositTable.DepositSum);
            distrSum += depositTable.DepositSum;

            this.insertValueToSection(#cashOrder, depositTable.CashJournalNum);

            dimAccount = (select firstonly LedgerDimension from rCashTrans
                                        where rCashTrans.AccountNum == depositTable.CashAccount     &&
                                              rCashTrans.DocType    == RCashDocType::DisbursementSlip   &&
                                              rCashTrans.DocId      == depositTable.PayDocNum       &&
                                              rCashTrans.TransDate  == depositTable.ClosedDate).LedgerDimension;
            this.insertValueToSection(#accountNum, LedgerDimensionFacade::getMainAccountFromLedgerDimension(dimAccount));
        }

        if (lineSum == distrSum)
        {
            this.insertValueToSection(#balance,'');
        }
        else
        {
            this.insertValueToSection(#balance, lineSum - distrSum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    #define.yearAmount('sumYearAmount')
    #define.mthAmount('sumMthAmount')
    #define.mthBalance('mthBalance')
    #define.yearBalance('yearBalance')
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #Prolog:
                this.fillProlog();
                break;
            case #Body:
                this.fillBody();
                break;
            case #MthFooter:
                this.fillFooter(#mthAmount, mthAmounts, #mthBalance);
                mthAmounts = new Map(Types::Integer, Types::Real);
                break;
            case #YearFooter:
                this.fillFooter(#yearAmount, yearAmounts, #yearBalance);
                yearAmounts = new Map(Types::Integer, Types::Real);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFooter</Name>
				<Source><![CDATA[
    private void fillFooter(str _label, Map _map, str _balanceLabel)
    {
        MapEnumerator e = _map.getEnumerator();
        Counter i;
        Amount  lineSum;
        Amount  distrSum = 0;

        for (i=1;i<=12;i++)
        {
            this.insertValueToSection(_label+int2str(i),'');
        }

        while (e.moveNext())
        {
            if (e.currentKey() == #sumIndex)
            {
                this.insertValueToSection(_label, e.currentValue());
                lineSum = e.currentValue();
            }
            else
            {
                this.insertValueToSection(_label + int2str(e.currentKey()), e.currentValue());
                distrSum += e.currentValue();
            }

            if (lineSum == distrSum)
            {
                this.insertValueToSection(_balanceLabel, '');
            }
            else
            {
                this.insertValueToSection(_balanceLabel, lineSum - distrSum);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillProlog</Name>
				<Source><![CDATA[
    #define.companyName('companyName')
    #define.okpo('okpo')
    #define.payPeriod('payPeriod')
    private void fillProlog()
    {
        CompanyInfo      company = CompanyInfo::find();
        RPayDepositTable depositTable = queryRun.get(tableNum(RPayDepositTable));

        this.insertValueToSection(#companyName, company.Name);
        this.insertValueToSection(#okpo, CompanyInfoHelper::partyOKPOasOfDate_RU(company, payPeriod));
        this.insertValueToSection(#payPeriod, date2StrUsr(payPeriod, DateFlags::None));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        payPeriod = dialogPayPeriod.value() ? endmth(dialogPayPeriod.value()) : RPayParameters::payPeriod();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report.
    /// </summary>
    /// <returns>
    /// True.
    /// </returns>
    public boolean init()
    {
        boolean ret = super();

        mthAmounts = new Map(Types::Integer, Types::Real);
        yearAmounts = new Map(Types::Integer, Types::Real);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();
        payPeriod = RPayParameters::payPeriod();
        queryRun = this.initQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    private QueryRun initQueryRun()
    {
        Query                   query = new Query();
        QueryBuildDataSource    depositTable = query.addDataSource(tablenum(RPayDepositTable));
        depositTable.addOrderByField(fieldNum(RPayDepositTable, PayPeriod));

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#Prolog);
        this.addSection(#Header);
        this.addSection(#Body, true);
        this.addSection(#MthFooter);
        this.addSection(#YearFooter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(RPayDepositJournalReport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        #define.headerCells(3)
        #define.footerCells(15)
        #define.bodyCells(15)

        return #headerCells + #footerCells + #bodyCells;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        container       packedQR;

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, packedQR] = packedClass;

                queryRun = SysQuery::isPackedOk(packedQR) ?
                                        new QueryRun(packedQR)
                                      : this.initQueryRun();

                break;
            default:
                queryRun = this.initQueryRun();
                payPeriod = endmth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                break;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    private void updateQuery()
    {
        findOrCreateRange_W(queryRun.query().dataSourceTable(tableNum(RPayDepositTable)), fieldNum(RPayDepositTable, payPeriod),'<=' + queryValue(payPeriod));
        queryRun.query().dataSourceTable(tableNum(RPayDepositTable)).findRange(fieldNum(RPayDepositTable, payPeriod)).status(RangeStatus::Locked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayReport_DepositJournal   report = new RPayReport_DepositJournal();

        report.parmArgs(_args);
        report.init();
        if (report.prompt())
        {
            report.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>