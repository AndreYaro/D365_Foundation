<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxOBExport_NL</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

class TaxOBExport_NL extends RunBase
{
    TaxTurnOverTable_NL taxTurnOverTable_NL;
    TaxEvatReportMode taxEvatReportMode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    public void initParameters(Args _args)
    {
        taxTurnOverTable_NL = _args.record();
        taxEvatReportMode = _args.parmEnum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (taxEvatReportMode == TaxEvatReportMode::SaveToFile)
        {
            this.generateDataAndSaveToFile();
        }
        else
        {
            this.generateDataAndSendToService();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDataAndSaveToFile</Name>
				<Source><![CDATA[
	/// <summary>
    /// Runs ER solution with an <c>ERFileDestinationBrowser</c> instance as destination.
    /// </summary>
    void generateDataAndSaveToFile()
    {
        this.runErSolution(ERObjectsFactory::createFileDestinationBrowser());
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDataAndSendToService</Name>
				<Source><![CDATA[
	/// <summary>
    /// Generates declaration data and then sends it to service.
    /// </summary>
    void generateDataAndSendToService()
    {
        var data = this.generateData();

        TaxDPSend_NL::sendVAT(taxTurnOverTable_NL, data);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateData</Name>
				<Source><![CDATA[
	/// <summary>
    /// Generates declaration data by running ER solution with
	/// an <c>ERFileDestinationMemory</c> instance as destination.
    /// </summary>
    /// <returns>
    /// Returns the <c>ERFileDestinationMemory</c> instance's underlying content as array of bytes.
	/// </returns>
    System.Byte[] generateData()
    {
        var dest = new ERFileDestinationMemory();

        this.runErSolution(dest);

        return dest.getByteArray();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runErSolution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs ER solution.
    /// </summary>
    /// <param name = "_fileDestination">Destination</param>
    public void runErSolution(ERIFileDestination _fileDestination)
    {
        ERObjectsFactory::createFormatMappingRunByFormatMappingId(TaxEvatParameters_NL::find().ERFormatMappingID)
            .withFileDestination(_fileDestination)
            .withParameter(new ERModelDefinitionDatabaseContext()
                .addValue(tableNum(TaxTurnOverTable_NL), fieldNum(TaxTurnOverTable_NL, RecId), taxTurnOverTable_NL.RecId)).run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCanSendToService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current record is valid and ready to be processed.
    /// </summary>
    /// <returns>
    /// true if the current record is valid; otherwise, false.
    /// </returns>
    public boolean validateCanSendToService()
    {
        boolean ret = true;

        if (TaxEvatParameters_NL::find().PartOfFiscalGroup)
        {
            ret = checkFailed("@SYS107062");
        }
        else
        {
            if (taxTurnOverTable_NL.FiscalGroup)
            {
                ret = checkFailed("@SYS107063");
            }
            else
            {
                ret = ret & this.validateCanGenerateCorrectFile();

                var declarationYear = year(taxTurnOverTable_NL.StartDate);
                if (DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) > mkdate(31, 8, declarationYear + 1))
                {
                    ret = checkFailed(strfmt("@SYS96834", declarationYear, declarationYear + 1));
                }

                if (DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) < taxTurnOverTable_NL.EndDate)
                {
                    ret = checkFailed("@SYS96831");
                }

                ret = ret & TaxEvatParameters_NL::validateServiceParameters();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCanGenerateCorrectFile</Name>
				<Source><![CDATA[
    private boolean validateCanGenerateCorrectFile()
    {
        boolean ret = true;

        if (taxTurnOverTable_NL.ContactPersonName == '')
        {
            ret = checkFailed("@SYS96833");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxOBExport_NL construct()
    {
        return new TaxOBExport_NL();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TaxOBExport_NL  taxOBExport_NL = TaxOBExport_NL::construct();

        if (_args)
        {
            taxOBExport_NL.initParameters(_args);

            if (taxOBExport_NL.taxEvatReportMode == TaxEvatReportMode::SaveToFile)
            {
                taxOBExport_NL.validateCanGenerateCorrectFile(); //warn, but do not block operation
                if (taxOBExport_NL.prompt())
                {
                    taxOBExport_NL.generateDataAndSaveToFile();
                }
            }
            else
            {
                if (taxOBExport_NL.validateCanSendToService())
                {
                    if (taxOBExport_NL.prompt())
                    {
                        taxOBExport_NL.generateDataAndSendToService();
                    }
                }
            }
        }
        else
        {
            throw error("@SYS4205");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>