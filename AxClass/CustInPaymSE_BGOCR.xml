<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInPaymSE_BGOCR</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustInPaymSE_BGOCR extends CustInPaymSE
{
    private boolean errorSomewhere;
    private str endErrorTxt1;
    private str endErrorTxt2;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fromDisk2JournalLogic</Name>
				<Source><![CDATA[
    void fromDisk2JournalLogic()
    {
        const str startRecordTxt = "BANKGIROT";
        const str startRecordPos = "72-80";

        CustTrans                   custTrans;

        str 80                      inRecord;
        str 2                       transType;
        str 1                       sistaSiffran;
        str 1                       nyaSiffran;
        str 13                      kreditbelopp;
        str 9                       bankgiro_txt;

        Integer                     antal_i;

        Amount                      endRecAmount;
        Integer                     endQty;

        LedgerJournalTransImport    ledgerJournalTransImport;
        AccountNum                  accountNum;
        AmountCurDebit              amountCurDebit;
        AmountCurCredit             amountCurCredit;
        str 25                      invoice;
        PaymId                      paymId;
        TransDate                   transDate;
        CurrencyCode                currencyCode;

        str                         errorTxt;

        UnknownNoYes                insertRecord;
        boolean                     kredit;
        Integer                     pos;
        Integer                     pos2;

        ttsbegin;

        ledgerJournalTransImport = new LedgerJournalTransImport();

        totalAmount_SEK = 0;
        numOfRecord     = 0;

        while (asciiFile.status() == IO_Status::Ok)
        {
            [inRecord] = asciiFile.read();

            if (inRecord != '0')
            {
                transType = substr(inRecord,1,2);

                switch (transType)
                {
                    case '00' :
                        bankgiro_txt = substr(inRecord, 72, 9);
                        if (bankgiro_txt != 'BANKGIROT')
                        {
                            ttsabort;
                            throw error(strfmt("@SYS84821", startRecordTxt, startRecordPos));
                        }

                        currencyCode = ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::SEK);
                        break;

                    case '10' :
                        break;

                    case '20' :
                        break;

                    case '30' :
                        transDate = str2date(substr(inRecord, 19, 6), 321);
                        break;

                    case '40' :
                        paymId = strltrim(substr(inRecord, 3, 25));

                        if (paymId)
                        {
                            custTrans = this.findInvoiceCustTransByPaymId(paymId, ledgerJournalTrans.company());
                        }
                        if (custTrans && paymId)
                        {
                            invoice = custTrans.Invoice;
                        }
                        else
                        {
                            invoice = substr(inRecord, 3, 25);
                            invoice = strLRTrim(invoice);

                            pos = strfind(invoice, '0123456789', 1, 25);

                            if (pos != 0)
                            {
                                pos2 = strnfind(invoice, '0123456789', pos,(26 - pos));

                                if (pos2 > 0)
                                {
                                    invoice = substr(invoice, pos, (pos2 - pos));
                                }
                                else
                                {
                                    invoice = substr(invoice, pos, (26 - pos));
                                }
                            }

                            if (invoice)
                            {
                                custTrans = this.findInvoiceCustTransByInvoice(invoice, ledgerJournalTrans.company());
                            }
                            if (! custTrans)
                            {
                                invoice = strLRTrim(invoice);
                                antal_i = strlen(invoice);
                                invoice = substr(invoice, 1, antal_i-1);

                                if (invoice)
                                {
                                    custTrans = this.findInvoiceCustTransByInvoice(invoice, ledgerJournalTrans.company());
                                }
                                if (! custTrans)
                                {
                                    invoice = strLRTrim(invoice);
                                    antal_i = strlen(invoice);
                                    invoice = substr(invoice,1,antal_i-1);

                                    if (invoice)
                                    {
                                        custTrans = this.findInvoiceCustTransByInvoice(invoice, ledgerJournalTrans.company());
                                    }
                                    if (! custTrans.Invoice)
                                    {
                                        invoice = '';
                                    }
                                }
                            }
                        }
                        accountNum   = custTrans.AccountNum;
                        paymId       = strltrim(substr(inRecord, 3, 25));

                        kredit = false;

                        sistaSiffran = substr(inRecord, 40, 1);

                        if (sistaSiffran == '-')
                        {
                            nyaSiffran = '0';
                            kredit     = true;
                        }
                        if (sistaSiffran == 'J')
                        {
                            nyaSiffran = '1';
                            kredit     = true;
                        }
                        if (sistaSiffran == 'K')
                        {
                            nyaSiffran = '2';
                            kredit     = true;
                        }
                        if (sistaSiffran == 'L')
                        {
                            nyaSiffran = '3';
                            kredit     = true;
                        }
                        if (sistaSiffran == 'M')
                        {
                            nyaSiffran = '4';
                            kredit     = true;
                        }
                        if (sistaSiffran == 'N')
                        {
                            nyaSiffran = '5';
                            kredit     = true;
                        }
                        if (sistaSiffran == 'O')
                        {
                            nyaSiffran = '6';
                            kredit     = true;
                        }
                        if (sistaSiffran == 'P')
                        {
                            nyaSiffran = '7';
                            kredit     = true;
                        }
                        if (sistaSiffran == 'Q')
                        {
                            nyaSiffran = '8';
                            kredit     = true;
                        }
                        if (sistaSiffran == 'R')
                        {
                            nyaSiffran = '9';
                            kredit     = true;
                        }

                        if (!kredit)
                        {
                            amountCurCredit = str2num(substr(inRecord, 28, 13)) / 100;
                            amountCurDebit  = 0;
                        }
                        else
                        {
                            amountCurCredit = 0;
                            kreditbelopp    = substr(inRecord, 28, 12);
                            kreditbelopp    = strins(kreditbelopp, nyaSiffran, 13);
                            amountCurDebit  = str2num(kreditbelopp) / 100;
                        }

                        if (insertIncorrectRecords == NoYes::Yes)
                        {
                            insertRecord = UnknownNoYes::Yes;
                        }
                        else
                        {
                            insertRecord = UnknownNoYes::Unknown;
                        }

                        ledgerJournalTransImport.accountNum(accountNum);
                        ledgerJournalTransImport.primaryCompany(custTrans.company());
                        ledgerJournalTransImport.amountCurDebit(amountCurDebit);
                        ledgerJournalTransImport.amountCurCredit(amountCurCredit);
                        ledgerJournalTransImport.currencyCode(currencyCode);
                        ledgerJournalTransImport.invoice(invoice);
                        ledgerJournalTransImport.paymId(paymId);
                        ledgerJournalTransImport.transDate(transDate);

                        errorTxt = this.createLedgerJournalTrans(ledgerJournalTransImport, insertRecord);

                        if (insertIncorrectRecords == NoYes::Yes || (insertIncorrectRecords == NoYes::No && errorTxt == ''))
                        {
                            totalAmount_SEK += (ledgerJournalTrans.AmountCurCredit - ledgerJournalTrans.AmountCurDebit);
                            numOfRecord ++;
                        }

                        if (errorTxt)
                        {
                            errorSomewhere = true;
                        }

                        if (errorTxt == "@SYS68580")
                        {
                            errorTxt = strfmt("@SYS82640",paymId);
                        }

                        this.fillControlReport(ledgerJournalTrans, transType, errorTxt);
                        ledgerJournalTrans.reread();

                        if (!insertRecord && errorSomewhere)
                        {
                            error(errorTxt);
                        }
                        break;

                    case '50' :
                        break;

                    case '90' :
                        endQty       = str2int(substr(inRecord, 25, 7));
                        endRecAmount = str2num(substr(inRecord, 32, 15)) / 100;

                        if (endQty != numOfRecord)
                        {
                            endErrorTxt1   = strfmt("@SYS18621", numOfRecord, endQty);
                            errorSomewhere = true;
                        }
                        if (endRecAmount != totalAmount_SEK)
                        {
                            endErrorTxt2   = strfmt("@SYS82641", endRecAmount, totalAmount_SEK);
                            errorSomewhere = true;
                        }
                        break;

                    default:
                }
            }
        }

        if (numOfRecord > 0)
        {
            ttscommit;
        }
        else
        {
            ttsabort;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDisk2Journal</Name>
				<Source><![CDATA[
    void fromDisk2Journal()
    {
        errorSomewhere = false;
        endErrorTxt1 = '';
        endErrorTxt2 = '';

        if (asciiFile)
        {
            this.fromDisk2JournalLogic();
            this.printControlReport();

            if (errorSomewhere)
            {
                warning("@SYS13619");

                if (endErrorTxt1)
                {
                     warning(endErrorTxt1);
                }

                if (endErrorTxt2)
                {
                    warning(endErrorTxt2);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>importFileText</Name>
				<Source><![CDATA[
    public TempStr importFileText()
    {
        return  'Bankgirot OCR  ' + "@SYS4047" + ': ' + filename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    className interfaceName()
    {
        return "@SYS86046";
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                break;

            default :
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return new CustInPaymSE_BGOCR().interfaceName();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>