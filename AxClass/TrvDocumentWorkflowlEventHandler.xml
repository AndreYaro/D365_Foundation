<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvDocumentWorkflowlEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvDocumentWorkflowlEventHandler implements
    WorkflowStartedEventHandler,
    WorkflowCompletedEventHandler,
    WorkflowCanceledEventHandler,
    WorkflowElementReturnedEventHandler,
    WorkflowElemChangeRequestedEventHandler,
    WorkflowElementExecutionEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    public void canceled(WorkflowEventArgs _workflowEventArgs)
    {
        TrvWorkflowUtilities::setExpenseDocumentStatus(_workflowEventArgs.parmWorkflowContext(), TrvAppStatus::Create);

        TrvWorkflowExpProviderCache::clearExpProviderLogsForHeader(_workflowEventArgs.parmWorkflowContext().parmRecId(),
                                                                   _workflowEventArgs.parmWorkflowContext().parmWorkflowCorrelationId());

        TrvWorkflowUtilities::clearPolicyJustifications(_workflowEventArgs.parmWorkflowContext(),
                                                        _workflowEventArgs.parmWorkflowContext().parmRecId(),
                                                        TrvPolicyViolationJustificationTypeEnum::TrvExpHeader,
                                                        true);

        // clear workflow logs and policy violation logs when the expense reports items are canceled
        TrvWorkflowUtilities::clearWorkflowLogs(_workflowEventArgs.parmWorkflowContext().parmRecId(), tablenum(TrvExpTable), true);
        TrvWorkflowUtilities::clearPolicyViolations(_workflowEventArgs.parmWorkflowContext().parmRecId(), tablenum(TrvExpTable), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeRequested</Name>
				<Source><![CDATA[
    public void changeRequested(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        TrvWorkflowUtilities::setExpenseDocumentStatus(_workflowElementEventArgs.parmWorkflowContext(), TrvAppStatus::Returned);
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    public void completed(WorkflowEventArgs _workflowEventArgs)
    {
        TrvWorkflowUtilities::setExpenseDocumentStatus(_workflowEventArgs.parmWorkflowContext(), TrvAppStatus::Approved);
        TrvWorkflowUtilities::generateExpMobileWorkflowNotification(TrvExpMobileNotificationEventType::WorkflowCompleted, tableNum(TrvExpTable), _workflowEventArgs.parmWorkflowContext().parmRecId());

        TrvWorkflowExpProviderCache::clearExpProviderLogsForHeader(_workflowEventArgs.parmWorkflowContext().parmRecId(),
                                                                   _workflowEventArgs.parmWorkflowContext().parmWorkflowCorrelationId());

        TrvWorkflowUtilities::updateViolationsLog(_workflowEventArgs.parmWorkflowContext().parmRecId(), TrvWorkflowAction::Approve, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    public void execute(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        TrvWorkflowUtilities::autoPostExpenseDocument(_workflowElementEventArgs.parmWorkflowContext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>returned</Name>
				<Source><![CDATA[
    public void returned(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        TrvWorkflowUtilities::setExpenseDocumentStatus(_workflowElementEventArgs.parmWorkflowContext(), TrvAppStatus::Returned);

        TrvWorkflowExpProviderCache::clearExpProviderLogsForHeader(_workflowElementEventArgs.parmWorkflowContext().parmRecId(),
                                                                   _workflowElementEventArgs.parmWorkflowContext().parmWorkflowCorrelationId());

        TrvWorkflowUtilities::clearPolicyJustifications(_workflowElementEventArgs.parmWorkflowContext(),
                                                        _workflowElementEventArgs.parmWorkflowContext().parmRecId(),
                                                        TrvPolicyViolationJustificationTypeEnum::TrvExpHeader);

        TrvWorkflowUtilities::updateViolationsLog(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), TrvWorkflowAction::Return, true);

        // clear workflow logs when the expense reports items are returned
        TrvWorkflowUtilities::clearWorkflowLogs(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), tablenum(TrvExpTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    public void started(WorkflowEventArgs _workflowEventArgs)
    {
        TrvWorkflowUtilities::setExpenseDocumentStatus(_workflowEventArgs.parmWorkflowContext(), TrvAppStatus::Pending);

        TrvWorkflowUtilities::AddWorkflowContextToInterimApprovers(_workflowEventArgs.parmWorkflowContext());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>