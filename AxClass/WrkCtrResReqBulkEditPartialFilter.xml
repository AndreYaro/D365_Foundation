<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrResReqBulkEditPartialFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WrkCtrResReqBulkEditPartialFilter</c> class is a partial filter for maintaining the resource
/// requirements wizard.
/// </summary>
class WrkCtrResReqBulkEditPartialFilter
{
    List filteringItems;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addFilteringItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a requirement filter.
    /// </summary>
    /// <param name="filterItem">
    /// A <c>WrkCtrRequirementWizardFilterTmp</c> record.
    /// </param>
    public void addFilteringItem(WrkCtrRequirementWizardFilterTmp filterItem)
    {
        WrkCtrRequirementWizardFilterTmp item;

        buf2Buf(filterItem, item);
        filteringItems.addEnd(item);
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendSummaryText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a String that contains the summary description of the filter and its items.
    /// </summary>
    /// <param name="_text">
    /// The String to which the summary will be appended.
    /// </param>
    /// <param name="_separator">
    /// The separator String.
    /// </param>
    /// <returns>
    /// The String that contains the summary description.
    /// </returns>
    public str appendSummaryText(str _text, str _separator)
    {
        ListEnumerator                      enumerator = filteringItems.getEnumerator();
        WrkCtrRequirementWizardFilterTmp    filterItem;

        while (enumerator.moveNext())
        {
            if (_text != '')
            {
                _text += '\r\n' + _separator + '\r\n';
            }

            filterItem = enumerator.current();

            _text += filterItem.summaryText();
        }

        return _text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyFilterItemsToQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies filter items to the query.
    /// </summary>
    /// <param name="_query">The query.</param>
    protected void applyFilterItemsToQuery(Query _query)
    {
        ListEnumerator                      enumerator = filteringItems.getEnumerator();
        WrkCtrRequirementWizardFilterTmp    filter;

        while (enumerator.moveNext())
        {
            filter = enumerator.current();
            filter.addRangeToRequirementsQuery(_query);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the query.
    /// </summary>
    /// <param name="_query">
    /// The query.
    /// </param>
    protected void executeQuery(Query _query)
    {
        Map                             map;
        List                            requirements;
        Integer                         i;
        QueryRun                        queryRun;
        WrkCtrActivityRequirement       requirement, requirementTmp;
        WrkCtrActivityRequirementSet    set, oldSet;

        queryRun = new QueryRun(_query);
        while (queryRun.next())
        {
            set = queryRun.get(tableNum(WrkCtrActivityRequirementSet));
            if (oldSet.RecId != set.RecId)
            {
                if (requirements)
                {
                    this.onFilterSet(oldSet, requirements);
                }
                map = new Map(Types::Integer, Types::Integer);
                requirements = new List(Types::Record);
            }
            for (i=1;i<=filteringItems.elements();i++)
            {
                requirement = queryRun.get(tableNum(WrkCtrActivityRequirement), i);
                if (!map.exists(requirement.RecId))
                {
                    buf2Buf(requirement, requirementTmp);
                    requirementTmp.RecId = requirement.RecId;
                    map.insert(requirement.RecId, 1);
                    requirements.addEnd(requirementTmp);
                }
            }

            buf2Buf(set, oldSet);
            oldSet.RecId = set.RecId;
        }
        if (requirements)
        {
            this.onFilterSet(oldSet, requirements);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the query to filter requirements.
    /// </summary>
    /// <param name="_query">
    /// The query.
    /// </param>
    public void filterRequirements(Query _query)
    {
        QueryBuildDataSource queryBuildDataSource;

        queryBuildDataSource = SysQuery::findOrCreateDataSource(_query, tableNum(WrkCtrActivityRequirementSet));
        queryBuildDataSource.addOrderByField(fieldNum(WrkCtrActivityRequirementSet, RecId));

        this.applyFilterItemsToQuery(_query);
        this.executeQuery(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates instance of the WrkCtrResReqBulkEditPartialFilter class.
    /// </summary>
    public void new()
    {
        filteringItems = new List(Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onFilterSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the appropriate requirement set that contains the requirements is found
    /// </summary>
    /// <param name="_requirementSet">
    /// A<c>WrkCtrActivityRequirementSet</c> record.
    /// </param>
    /// <param name="requirements">
    /// A List of <c>WrkCtrActivityRequirement</c> records.
    /// </param>
    protected void onFilterSet(WrkCtrActivityRequirementSet _requirementSet, List requirements)
    {
        this.requirementSetFound(_requirementSet, requirements);
    }

]]></Source>
			</Method>
			<Method>
				<Name>requirementSetFound</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the appropriate requirement set that contains the requirements is found.
    /// </summary>
    /// <param name="_requirementSet">
    /// A <c>WrkCtrActivityRequirementSet</c> record.
    /// </param>
    /// <param name="requirements">
    /// A list of <c>WrkCtrActivityRequirement</c> records.
    /// </param>
    delegate void requirementSetFound(WrkCtrActivityRequirementSet _requirementSet, List requirements)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>