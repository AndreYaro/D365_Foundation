<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SpecTransInsertSetManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SpecTransInsertSetManager</c> class exposes the ability to delay <c>SpecTrans</c> inserts.
/// </summary>
public class SpecTransInsertSetManager
{
    SpecTransInsertTmp specTransInsertTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a new record in <c>SpecTransInsertTmp</c>.
    /// </summary>
    /// <param name = "_specCompany">The specification company.</param>
    /// <param name = "_specTableId">The specification table identifier.</param>
    /// <param name = "_specRecId">The specification record identifer.</param>
    /// <param name = "_refCompany">The reference company.</param>
    /// <param name = "_refTableId">The reference table identifier.</param>
    /// <param name = "_refRecId">The reference record identifier.</param>
    /// <param name = "_settleAmount">The settle amount.</param>
    /// <param name = "_currency">The currency.</param>
    /// <param name = "_markedPayment">Identifies the payment when no invoices have been created.</param>
    /// <param name = "_discAmountToTake">The cash discount to take.</param>
    /// <param name = "_selectedDateUsedToCalcCashDisc">The date used to calculate the cash discount</param>
    public void insert(
        CompanyId _specCompany,
        tableId _specTableId,
        RefRecId _specRecId,
        CompanyId _refCompany,
        tableId _refTableId,
        RefRecId _refRecId,
        Amount _settleAmount,
        CurrencyCode _currency,
        NoYes _markedPayment = NoYes::No,
        AmountCur _discAmountToTake = 0,
        TransDate _selectedDateUsedToCalcCashDisc = dateNull())
    {
        specTransInsertTmp.SpecCompany = _specCompany;
        specTransInsertTmp.SpecTableId = _specTableId;
        specTransInsertTmp.SpecRecId = _specRecId;
        specTransInsertTmp.RefCompany = _refCompany;
        specTransInsertTmp.RefTableId = _refTableId;
        specTransInsertTmp.RefRecId = _refRecId;
        specTransInsertTmp.Balance01 = _settleAmount;
        specTransInsertTmp.Code = _currency;
        specTransInsertTmp.Payment = _markedPayment;
        specTransInsertTmp.CashDiscToTake = _discAmountToTake;
        specTransInsertTmp.SelectedDateUsedToCalcCashDisc = _selectedDateUsedToCalcCashDisc;
        specTransInsertTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSearchResultMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes field mapping to do a set-based insert from target (query) to destination (table) buffer.
    /// </summary>
    /// <param name = "_sourceQueryBuildDataSource">An instatnce of <c>QueryBuildDataSource</c>.</param>
    /// <returns>The map of source (query) and target (buffer) fields together with identification which datasource query fields come from.</returns>
    protected Map createSearchResultMap(QueryBuildDataSource _sourceQueryBuildDataSource)
    {
        Map targetToSourceMap = new Map(Types::String, Types::Container);
        int dataSourceId = _sourceQueryBuildDataSource.uniqueId();
        QueryBuildFieldList fieldList = _sourceQueryBuildDataSource.fields();

        this.addDestinationFieldToFieldMapping(fieldList, tableNum(SpecTransInsertTmp), targetToSourceMap, dataSourceId, fieldStr(SpecTransInsertTmp, Balance01), fieldStr(SpecTrans, Balance01));
        this.addDestinationFieldToFieldMapping(fieldList, tableNum(SpecTransInsertTmp), targetToSourceMap, dataSourceId, fieldStr(SpecTransInsertTmp, CashDiscToTake), fieldStr(SpecTrans, CashDiscToTake));
        this.addDestinationFieldToFieldMapping(fieldList, tableNum(SpecTransInsertTmp), targetToSourceMap, dataSourceId, fieldStr(SpecTransInsertTmp, Code), fieldStr(SpecTrans, Code));
        this.addDestinationFieldToFieldMapping(fieldList, tableNum(SpecTransInsertTmp), targetToSourceMap, dataSourceId, fieldStr(SpecTransInsertTmp, Payment), fieldStr(SpecTrans, Payment));
        this.addDestinationFieldToFieldMapping(fieldList, tableNum(SpecTransInsertTmp), targetToSourceMap, dataSourceId, fieldStr(SpecTransInsertTmp, RefCompany), fieldStr(SpecTrans, RefCompany));
        this.addDestinationFieldToFieldMapping(fieldList, tableNum(SpecTransInsertTmp), targetToSourceMap, dataSourceId, fieldStr(SpecTransInsertTmp, RefTableId), fieldStr(SpecTrans, RefTableId));
        this.addDestinationFieldToFieldMapping(fieldList, tableNum(SpecTransInsertTmp), targetToSourceMap, dataSourceId, fieldStr(SpecTransInsertTmp, RefRecId), fieldStr(SpecTrans, RefRecId));
        this.addDestinationFieldToFieldMapping(fieldList, tableNum(SpecTransInsertTmp), targetToSourceMap, dataSourceId, fieldStr(SpecTransInsertTmp, SelectedDateUsedToCalcCashDisc), fieldStr(SpecTrans, SelectedDateUsedToCalcCashDisc));
        this.addDestinationFieldToFieldMapping(fieldList, tableNum(SpecTransInsertTmp), targetToSourceMap, dataSourceId, fieldStr(SpecTransInsertTmp, SpecCompany), fieldStr(SpecTrans, SpecCompany));
        this.addDestinationFieldToFieldMapping(fieldList, tableNum(SpecTransInsertTmp), targetToSourceMap, dataSourceId, fieldStr(SpecTransInsertTmp, SpecTableId), fieldStr(SpecTrans, SpecTableId));
        this.addDestinationFieldToFieldMapping(fieldList, tableNum(SpecTransInsertTmp), targetToSourceMap, dataSourceId, fieldStr(SpecTransInsertTmp, SpecRecId), fieldStr(SpecTrans, SpecRecId));

        fieldList.dynamic(QueryFieldListDynamic::No);

        return targetToSourceMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDestinationFieldToFieldMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add Destination field to Field Mapping.
    /// </summary>
    /// <param name = "_fieldList">The field list where the field will be added.</param>
    /// <param name = "_tableId">The tableId for the field being added.</param>
    /// <param name = "_fieldMapping">The field Mapping where the field will be added.</param>
    /// <param name = "_dataSourceUniqueId">The unique Id for the data source.</param>
    /// <param name = "_sourceFieldName">The data source field name being added.</param>
    /// <param name = "_destinationFieldName">The Target field name where the field will be added.</param>
    protected void addDestinationFieldToFieldMapping(
        QueryBuildFieldList _fieldList,
        int _tableId,
        Map _fieldMapping,
        int _dataSourceUniqueId,
        FieldName _sourceFieldName,
        FieldName _destinationFieldName)
    {
        _fieldList = _fieldList.addField(fieldName2Id(_tableId, _sourceFieldName));
        _fieldMapping.insert(_destinationFieldName, [_dataSourceUniqueId, _sourceFieldName]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the logged <c>SpecTrans</c> rows to the database.
    /// </summary>
    /// <param name = "_journalId">
    /// The journal that indicates <c>SpecTrans.SpecRecId</c> values that need be be updated from the <c>CustVendPaymProposalLine.TempRecId</c> rows; optional.
    /// </param>
    public void insertDatabase(LedgerJournalId _journalId = '')
    {
        SpecTrans specTrans;

        Debug::assert(appl.ttsLevel() > 0);

        if (_journalId)
        {
            this.updateSpecRecId(_journalId);
        }
        Query query = new Query();
        QueryBuildDataSource sourceQueryBuildDataSource = query.addDataSource(tableNum(SpecTransInsertTmp));
        sourceQueryBuildDataSource.cursor(specTransInsertTmp);
        query.clearAllFields();
        Map searchResultMap = this.createSearchResultMap(sourceQueryBuildDataSource);
        Query::insert_recordset(specTrans, searchResultMap, query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSpecRecId</Name>
				<Source><![CDATA[
    private void updateSpecRecId(LedgerJournalId _ledgerJournalId)
    {
        CustVendPaymProposalLine custVendPaymProposalLine;

        update_recordset specTransInsertTmp
            setting SpecRecId = custVendPaymProposalLine.RecId
        join custVendPaymProposalLine
        where custVendPaymProposalLine.JournalId == _ledgerJournalId
            && custVendPaymProposalLine.DataAreaId == specTransInsertTmp.SpecCompany
            && custVendPaymProposalLine.TableId == specTransInsertTmp.SpecTableId
            && custVendPaymProposalLine.TmpRecId == specTransInsertTmp.SpecRecId
            && custVendPaymProposalLine.TmpRecId != 0;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>