<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBatchChooser</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>InventBatchChooser</c> provides a way to choose a batch from two batches based on a given criteria.
/// </summary>
public class InventBatchChooser
{
    protected InventIBatchComparer batchComparer;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultBatchComparerFromItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the batch comparer based on the item.
    /// </summary>
    /// <param name = "_itemId">The item ID.</param>
    protected void setDefaultBatchComparerFromItem(ItemId _itemId)
    {
        this.parmBatchComparer(InventBatchComparerFactory::createFromItemId(_itemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of the <c>InventBatchChooser</c> class that by default will compare bacthes according to the settings on the items model group.
    /// </summary>
    /// <param name = "_itemId">The item for which to choose batches.</param>
    /// <returns>A new instance of the <c>InventBatchChooser</c> class.</returns>
    public static InventBatchChooser construct(ItemId _itemId)
    {
        InventBatchChooser inventBatchChooser = new InventBatchChooser();
        inventBatchChooser.setDefaultBatchComparerFromItem(_itemId);
        return inventBatchChooser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchComparer</Name>
				<Source><![CDATA[
    public InventIBatchComparer parmBatchComparer(InventIBatchComparer _batchComparer = batchComparer)
    {
        batchComparer = _batchComparer;
        return batchComparer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBatchComparer</Name>
				<Source><![CDATA[
	/// <summary>
    /// Returns a new instance of the <c>InventBatchChooser</c> class that will compare dates based on a Last Expiry - First Out principle.
    /// </summary>
    /// <param name = "_batchComparer">The comparer that will determine which batch to choose.</param>
    /// <returns>A new instance of the <c>InventBatchChooser</c> class.</returns>
    public static InventBatchChooser newFromBatchComparer(InventIBatchComparer _batchComparer)
    {
        InventBatchChooser inventBatchChooser = new InventBatchChooser();
        inventBatchChooser.parmBatchComparer(_batchComparer);
        
        return inventBatchChooser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Choose one of two batches to be returned using the comparer.
    /// </summary>
    /// <param name="_batch1">
    /// The first batch. 
    /// </param>
    /// <param name="_batch2">
    /// The second batch.
    /// </param>
    /// <returns>
    /// The batch number which is one of the two batches by comparing them based on the comparison rules.
    /// </returns>
    public InventBatchId chooseBatch(InventBatch _batch1, InventBatch _batch2)
    {
        if (!_batch1.RecId)
        {
            return _batch2.inventBatchId;
        }

        if (!_batch2.RecId)
        {
            return _batch1.inventBatchId;
        }

        return batchComparer.compare(_batch1, _batch2);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>