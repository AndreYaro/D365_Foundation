<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustRecurrenceInvoicePostService</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This class is used to validate and post all the free text invoice created in <c>CustRecurrenceInvoiceGroup</c> table record.
class CustRecurrenceInvoicePostService
{
    CustRecurrenceInvoiceGroup custRecurrenceInvoiceGroup;
    CustRecurrenceInvoiceGroup custRecurrenceInvoiceGroupTransferError;
    RecurrenceInvoice recurrenceInvoice;
    CustInvoiceTable custInvoiceTable;
    Map transferErrorLines;
    boolean isCustRecurrenceInvoiceGroupCreated;
    boolean invoicePosted;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        transferErrorLines = new Map(Types::Int64, Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates and posts the recurrence invoices for the selected recurrence invoice group, the
    ///    <c>CustRecurrenceInvoiceGroup</c> table.
    /// </summary>
    /// <param name="custRecurrenceInvoicePostContract">
    ///    An instance of the <c>CustRecurrenceInvoicePostContract</c> class.
    /// </param>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An unrecoverable update conflict occurs.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An update conflict occurs.
    /// </exception>
    public void post(CustRecurrenceInvoicePostContract custRecurrenceInvoicePostContract)
    {
        RecurrenceInvoiceId newRecurrenceInvoiceId;
        int numOfErrorLine;
        int numOfRecurrenceInvoice;

        custRecurrenceInvoiceGroup = custRecurrenceInvoicePostContract.parmCustRecurrenceInvoiceGroup();

        if (custRecurrenceInvoicePostContract.parmRecurrenceInvoicePost() || custRecurrenceInvoicePostContract.parmRecurrencePostTransfer())
        {
            this.postRecurrenceInvoice(custRecurrenceInvoicePostContract);
            numOfErrorLine = transferErrorLines.elements();

            // <GEERU>
            if (custRecurrenceInvoicePostContract.parmPostFacture())
            {
                this.postRecurrenceFacture(custRecurrenceInvoicePostContract.parmSummaryUpdate());
            }
            // </GEERU>

            if (custRecurrenceInvoicePostContract.parmRecurrencePostTransfer())
            {
                numOfRecurrenceInvoice = CustRecurrenceInvoiceGroup::numOfRecurrenceInvoice(custRecurrenceInvoicePostContract.parmCustRecurrenceInvoiceGroup().RecId);

                // If all recurrence invoices for a recurrence invoice group have an error,
                // doesn't transfer error recurrence invoices into a new recurrence invoice group.
                if ( numOfErrorLine > 0 && numOfErrorLine != numOfRecurrenceInvoice)
                {
                    newRecurrenceInvoiceId = this.transferErrorToRecurrenceInvoiceGroup();
                    info(strFmt("@SYS318912", custRecurrenceInvoicePostContract.parmCustRecurrenceInvoiceGroup().RecurrenceInvoiceId, newRecurrenceInvoiceId));
                }
            }

            if (custRecurrenceInvoicePostContract.parmRecurrenceInvoicePost() 
				|| (custRecurrenceInvoicePostContract.parmRecurrencePostTransfer() && numOfErrorLine != numOfRecurrenceInvoice))
            {
                this.updateRecurrenceInvoiceGroupStatus(custRecurrenceInvoicePostContract.parmCustRecurrenceInvoiceGroup());

                if (custRecurrenceInvoicePostContract.parmRecurrencePostTransfer() && numOfErrorLine == 0)
                {
                    info(strFmt("@SYS318911", custRecurrenceInvoicePostContract.parmCustRecurrenceInvoiceGroup().RecurrenceInvoiceId));
                }
            }
        }
        if (custRecurrenceInvoicePostContract.parmCheckRecurrenceInvoice() && this.validateRecurrenceInvoice(custRecurrenceInvoicePostContract.parmValidateInSandbox()))
        {
            info("@SYS318913");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInvoice4Paym</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates recurring invoices for payment for the selected recurrence invoice group, the
    ///    <c>CustRecurrenceInvoiceGroup</c> table.
    /// </summary>
    /// <param name="custRecurrenceInvoicePostContract">
    ///    An instance of the <c>CustRecurrenceInvoicePostContract</c> class.
    /// </param>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An unrecoverable update conflict occurs.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An update conflict occurs.
    /// </exception>
    public void postInvoice4Paym(CustRecurrenceInvoicePostContract custRecurrenceInvoicePostContract)
    {
        #OCCRetryCount

        if (! custRecurrenceInvoicePostContract.parmPostInvoice4Paym())
            return;

        custRecurrenceInvoiceGroup = custRecurrenceInvoicePostContract.parmCustRecurrenceInvoiceGroup();
        try
        {
            ttsbegin;

            this.postRecurrenceInvoice4Paym(custRecurrenceInvoicePostContract.parmSummaryUpdate());

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRecurrenceFacture</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts factures on invoices posted based on a <c>CustRecurrenceInvoiceGroup</c> record.
    /// </summary>
    /// <param name="_summaryUpdate">
    /// If set to true, then factures will be created as summary, aggregated by customer account, currency
    /// and some other parameters, that are not generally set up via invoice template but can be edited
    /// manually in FTI form.
    /// </param>
    private void postRecurrenceFacture(NoYes _summaryUpdate)
    {
        CustInvoiceJour custInvoiceJour;
        CustInvoiceJour_RU custInvoiceJourRU;
        FactureJourCreate_RU factureCreate;
        FactureEditLinesEngine_RU engine;
        OfficialsServ_RU offServer;
        int factureCnt;

        // key:
        // if _summaryUpdate == true key contains unique properties for facture creation
        //                            value contains max() date of invoices and list of RecIds of invoices to be updated into 1 facture
        // if _summaryUpdate == false key in addition to above contains RecId of invoice
        //                            value contains invoice date and a list containing single RecId of invoice to be updated
        Map invoiceMap = new Map(Types::Container, Types::Container);
        MapEnumerator en;
        container key, value;
        InvoiceDate invoiceDate;
        container invoiceList;
        int invoiceListLen, invoiceListIdx;

        while select * from custInvoiceJour
            where custInvoiceJour.SalesId == ''
        outer join * from custInvoiceJourRU
            where custInvoiceJourRU.CustInvoiceJour == custInvoiceJour.RecId
                && custInvoiceJourRU.FacturedFully_RU == NoYes::No
        join CorrectedFactureExternalId_RU, CorrectedFactureDate_RU, CorrectedPeriod_RU, RecId from custInvoiceTable
            where custInvoiceTable.InvoiceId == custInvoiceJour.InvoiceId &&
                  custInvoiceTable.InvoiceDate == custInvoiceJour.InvoiceDate &&
                  custInvoiceTable.NumberSequenceGroup == custInvoiceJour.NumberSequenceGroup &&
                  custInvoiceTable.Posted == NoYes::Yes
        join RecId from recurrenceInvoice
            where recurrenceInvoice.CustInvoiceTable == custInvoiceTable.RecId &&
                  recurrenceInvoice.CustRecurrenceInvoiceGroup == custRecurrenceInvoiceGroup.RecId
        {
            key = [ custInvoiceJour.InvoiceAccount,
                    custInvoiceJour.CurrencyCode,
                    custInvoiceJourRU.ConsigneeAccount_RU,
                    custInvoiceJourRU.ConsignorAccount_RU,
                    custInvoiceJourRU.AttorneyId_RU,
                    custInvoiceJourRU.AttorneyIssuedName_RU,
                    custInvoiceJourRU.AttorneyDate_RU,
                    custInvoiceJour.LanguageId,
                    custInvoiceJourRU.VATOnPayment_RU,
                    custInvoiceJourRU.Correct_RU,
                    custInvoiceTable.CorrectedFactureExternalId_RU,
                    custInvoiceTable.CorrectedFactureDate_RU,
                    custInvoiceTable.CorrectedPeriod_RU ];
            if (! _summaryUpdate)
            {
                key = key + custInvoiceJour.RecId;
            }

            if (invoiceMap.exists(key))
            {
                value = invoiceMap.lookup(key);
                [ invoiceDate, invoiceList ] = value;
                invoiceDate = max(invoiceDate, custInvoiceJour.InvoiceDate);
            }
            else
            {
                invoiceDate = custInvoiceJour.InvoiceDate;
                invoiceList = conNull();
            }
            invoiceList += custInvoiceJour.RecId;
            value = [ invoiceDate, invoiceList ];
            invoiceMap.insert(key, value);
        }

        en = invoiceMap.getEnumerator();
        while (en.moveNext())
        {
            key = en.currentKey();
            value = en.currentValue();
            [ invoiceDate, invoiceList ] = value;

            // there is always at least 1 journal for each key/value
            invoiceListLen = conLen(invoiceList);
            for (invoiceListIdx = 1; invoiceListIdx <= invoiceListLen; invoiceListIdx ++)
            {
                custInvoiceJour = CustInvoiceJour::findRecId(conPeek(invoiceList, invoiceListIdx));

                if (invoiceListIdx == 1)
                {
                    if (OfficialsServ_RU::isFeatureEnabled())
                    {
                        offServer = new OfficialsServ_RU();
                        offServer.initTableFacture(FactureModule_RU::Cust, custInvoiceJour.InvoiceAccount);
                    }

                    factureCreate = FactureJourCreate_RU::construct(FactureModule_RU::Cust);
                    engine = FactureEditLinesEngine_RU::construct(factureCreate);
                }

                engine.insertJour(custInvoiceJour);
            }

            // note that custInvoiceJour used below is the last custInvoiceJour in the invoiceList cycle
            // but due to grouping above fields have same values in the cycle
            // values from key container could be used as well, but custInvoiceJour fields are more obvious
            factureCreate.initParameters(NoYes::Yes,
                                         NoYes::No,
                                         Printout::After,
                                         false,
                                         "",
                                         invoiceDate,
                                         custInvoiceJour.InvoiceAccount,
                                         custInvoiceJour.CurrencyCode,
                                         FactureType_RU::Invoice,
                                         custInvoiceJourRU.ConsigneeAccount_RU,
                                         custInvoiceJourRU.ConsignorAccount_RU,
                                         offServer ? offServer.newId() : "",
                                         custInvoiceJourRU.AttorneyId_RU,
                                         custInvoiceJourRU.AttorneyIssuedName_RU,
                                         custInvoiceJourRU.AttorneyDate_RU,
                                         0,
                                         invoiceDate,
                                         custInvoiceJour.NumberSequenceGroup,
                                         custInvoiceTable.CorrectedFactureExternalId_RU,
                                         custInvoiceTable.CorrectedFactureDate_RU,
                                         custInvoiceTable.CorrectedPeriod_RU);

            factureCreate.parmVATOnPayment (custInvoiceJourRU.VATOnPayment_RU);
            factureCreate.parmCorrect (custInvoiceJourRU.Correct_RU);
            factureCreate.parmDlvInfoNoPrint (NoYes::Yes);
            factureCreate.parmPrinterSettings(conNull());
            factureCreate.runOperation();

            if (factureCreate.getFactureJour())
            {
                FactureCalcAmountAdjustments_RU::factureAdjUpdate(factureCreate.getFactureJour());
                factureCnt ++;
            }
        }

        if (factureCnt)
        {
            if (factureCnt == 1)
            {
                info(strFmt("@GLS221835", factureCreate.getFactureJour().FactureExternalId));
            }
            else
            {
                info(strFmt("@GLS221836", factureCnt));
            }
        }
        else
        {
            info("@GLS221837");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRecurrenceInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts the free text invoices based on a <c>CustRecurrenceInvoiceGroup</c> record.
    /// </summary>
    private void postRecurrenceInvoice(CustRecurrenceInvoicePostContract _contract)
    {
        #OCCRetryCount
        CustPostInvoice custPostInvoice;

        this.setRecurrenceInvoiceRange(_contract);

        // Iterates all the recurrence invoices belongs to a selected recurrence invoice group.
        while select recurrenceInvoice
            order by recurrenceInvoice.RecId
            where recurrenceInvoice.CustRecurrenceInvoiceGroup == custRecurrenceInvoiceGroup.RecId
                && recurrenceInvoice.RecId >= _contract.parmStartBundle()
                && recurrenceInvoice.RecId <= _contract.parmEndBundle()
            join custInvoiceTable
                where custInvoiceTable.RecId == recurrenceInvoice.CustInvoiceTable &&
                custInvoiceTable.Posted == NoYes::No
        {
            if (transferErrorLines.empty() || !transferErrorLines.exists(custInvoiceTable.RecId))
            {
				try
                {
					custPostInvoice = CustPostInvoice::construct(custInvoiceTable);
					custPostInvoice.run();

					// <GEERU>
					invoicePosted = true;
					// </GEERU>
                }
                catch (Exception::Deadlock)
                {
                    retry;
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        throw Exception::UpdateConflict;
                    }
                }
                catch (Exception::Error)
                {
                    transferErrorLines.insert(custInvoiceTable.RecId, recurrenceInvoice);
                }
            }
        }

        if (!transferErrorLines.empty() && _contract.parmRecurrenceInvoicePost())
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecurrenceInvoiceRange</Name>
				<Source><![CDATA[
    private void setRecurrenceInvoiceRange(CustRecurrenceInvoicePostContract _contract)
    {
        NoYes isFirstInvoice = NoYes::Yes;

        if (_contract.parmStartBundle() == 0 && _contract.parmEndBundle() == 0)
        {
            RecurrenceInvoice invoice;
            CustInvoiceTable custInvoice;

            select minof(RecId) from invoice
                where invoice.CustRecurrenceInvoiceGroup == _contract.parmCustRecurrenceInvoiceGroup().RecId
                exists join custInvoice
                    where custInvoice.RecId == invoice.CustInvoiceTable
                        && custInvoice.Posted == NoYes::No;

            _contract.parmStartBundle(invoice.RecId);

            select maxOf(RecId) from invoice
                where invoice.CustRecurrenceInvoiceGroup == _contract.parmCustRecurrenceInvoiceGroup().RecId
                exists join custInvoice
                    where custInvoice.RecId == invoice.CustInvoiceTable
                        && custInvoice.Posted == NoYes::No;

            _contract.parmEndBundle(invoice.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRecurrenceInvoice4Paym</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts invoice(s) for payment on invoices posted based on a <c>CustRecurrenceInvoiceGroup</c> record.
    /// </summary>
    /// <param name="_summaryUpdate">
    /// If set to true, then invoices for payment will be created as summary, aggregated by customer account, currency
    /// and some other parameters, that are not generally set up via invoice template but can be edited manually in FTI form.
    /// </param>
    private void postRecurrenceInvoice4Paym(NoYes _summaryUpdate)
    {
        CustPostInvoice4Paym_RU custPostInvoice4Paym;

        // key:
        // if _summaryUpdate == true key contains unique properties for invoice for payment creation
        //                            value contains max() date of free text invoices and list of RecIds of FTIs to be
        //                            updated into 1 summary invoice for payment
        // if _summaryUpdate == false key in addition to above contains RecId of invoice
        //                            value contains invoice date and a list containing single RecId of FTI to be updated
        Map invoiceMap = new Map(Types::Container, Types::Container);
        MapEnumerator en;
        container key, value;
        InvoiceDate invoiceDate;
        container invoiceList;

        while select custInvoiceTable
            where custInvoiceTable.Posted == NoYes::No
        join RecId from recurrenceInvoice
            where recurrenceInvoice.CustInvoiceTable == custInvoiceTable.RecId &&
                  recurrenceInvoice.CustRecurrenceInvoiceGroup == custRecurrenceInvoiceGroup.RecId
        {
            key = [ custInvoiceTable.InvoiceAccount,
                    custInvoiceTable.CurrencyCode,
                    custInvoiceTable.ConsigneeAccount_RU,
                    custInvoiceTable.ConsignorAccount_RU,
                    custInvoiceTable.LanguageId,
                    custInvoiceTable.vatOnPayment_RU,
                    custInvoiceTable.Correct_RU,
                    custInvoiceTable.CorrectedFactureExternalId_RU,
                    custInvoiceTable.CorrectedFactureDate_RU,
                    custInvoiceTable.CorrectedPeriod_RU ];
            if (! _summaryUpdate)
            {
                key = key + custInvoiceTable.RecId;
            }

            if (invoiceMap.exists(key))
            {
                value = invoiceMap.lookup(key);
                [ invoiceDate, invoiceList ] = value;
                invoiceDate = max(invoiceDate, custInvoiceTable.InvoiceDate);
            }
            else
            {
                invoiceDate = custInvoiceTable.InvoiceDate;
                invoiceList = conNull();
            }
            invoiceList += custInvoiceTable.RecId;
            value = [ invoiceDate, invoiceList ];
            invoiceMap.insert(key, value);
        }

        en = invoiceMap.getEnumerator();
        while (en.moveNext())
        {
            key = en.currentKey();
            value = en.currentValue();
            [ invoiceDate, invoiceList ] = value;

            custPostInvoice4Paym = CustPostInvoice4Paym_RU::construct();
            custPostInvoice4Paym.runSummary(invoiceList, invoiceDate);
        }

        if (invoiceMap.elements())
        {
            if (invoiceMap.elements() == 1)
            {
                info(strFmt("@GLS221805", custPostInvoice4Paym.getFirstJournal().Invoice4PaymId));
            }
            else
            {
                info(strFmt("@GLS221806", invoiceMap.elements()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferErrorToRecurrenceInvoiceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified recurrence invoice contains an error, creates a new
    ///    <c>CustRecurrenceInoiceGroup</c> record, and transfers all the error lines in to a new
    ///    <c>RecurrenceInvoice</c> table.
    /// </summary>
    /// <returns>
    ///    The new recurrence invoice ID.
    /// </returns>
    private RecurrenceInvoiceId transferErrorToRecurrenceInvoiceGroup()
    {
        NumberSeq numberSeq;
        RecurrenceInvoice recurrenceInvoiceLocal;
        RecurrenceInvoice updateRecurrenceInvoice;
        MapEnumerator transferErrorLinesIterator;

        isCustRecurrenceInvoiceGroupCreated = true;
        transferErrorLinesIterator = transferErrorLines.getEnumerator();

        ttsbegin;

        if (transferErrorLinesIterator != null && custRecurrenceInvoiceGroupTransferError.RecId == 0)
        {
            numberSeq = NumberSeq::newGetNum(CustParameters::numRefCustRecurringInvoice());
            custRecurrenceInvoiceGroupTransferError.RecurrenceInvoiceId = numberSeq.num();
            custRecurrenceInvoiceGroupTransferError.insert();

            while (transferErrorLinesIterator.moveNext())
            {
                recurrenceInvoiceLocal = transferErrorLinesIterator.currentValue();
                updateRecurrenceInvoice.CustInvoiceTable = transferErrorLinesIterator.currentKey();
                updateRecurrenceInvoice.CustRecurrenceInvoice = recurrenceInvoiceLocal.CustRecurrenceInvoice;
                updateRecurrenceInvoice.CustRecurrenceInvoiceGroup = custRecurrenceInvoiceGroupTransferError.RecId;
                updateRecurrenceInvoice.RecurrenceInvoiceDate = recurrenceInvoiceLocal.RecurrenceInvoiceDate;
                updateRecurrenceInvoice.insert();

                recurrenceInvoiceLocal = RecurrenceInvoice::find(recurrenceInvoiceLocal.RecId, true);
                recurrenceInvoiceLocal.CustInvoiceTable = 0; // set to zero so it doesn't do a cascading delete on CustInvoiceTable
                recurrenceInvoiceLocal.delete();
            }
        }

        ttscommit;

        return custRecurrenceInvoiceGroupTransferError.RecurrenceInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRecurrenceInvoiceGroupStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the selected recurrence invoice group status.
    /// </summary>
    /// <param name="_custRecurrenceInvoiceGroup">
    ///    The buffer of the <c>CustRecurrenceInvoiceGroup</c> table.
    /// </param>
    private void updateRecurrenceInvoiceGroupStatus(CustRecurrenceInvoiceGroup _custRecurrenceInvoiceGroup)
    {
        RecurrenceInvoice invoice;
        CustInvoiceTable custInvoice;

        select firstonly RecId from invoice
            where invoice.CustRecurrenceInvoiceGroup == _custRecurrenceInvoiceGroup.RecId
            exists join custInvoice
                where custInvoice.RecId == invoice.CustInvoiceTable
                && custInvoice.Posted == NoYes::No;

        if (_custRecurrenceInvoiceGroup.Posted == NoYes::No && !invoice.RecId)
        {
            ttsbegin;
            _custRecurrenceInvoiceGroup.selectForUpdate(true);
            _custRecurrenceInvoiceGroup.Posted = NoYes::Yes;
            _custRecurrenceInvoiceGroup.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRecurrenceInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Synchronusly validates all the free text invoices for the selected <c>CustRecurrenceInvoiceGroup</c> record.
    /// </summary>
    /// <parameter name="_runInSandBox">
    ///     If yes then validation is run in the sandbox; otherwise, validation is run normaly
    /// </parameter>
    /// <returns>
    ///    true if all the free text invoices validate successfully, otherwise; false.
    /// </returns>
    private boolean validateRecurrenceInvoice(NoYes _runInSandBox)
    {
        boolean isValidateOK;
        container inputParameters = [recurrenceInvoice, custInvoiceTable, custRecurrenceInvoiceGroup];

        if (_runInSandbox)
        {
            setPrefix("@SYS318913");
            [isValidateOK, recurrenceInvoice, custInvoiceTable, custRecurrenceInvoiceGroup] = SysOperationSandbox::callStaticMethod(
                    classIdGet(this),
                    staticMethodStr(CustRecurrenceInvoicePostService, validateRecurrenceInvoiceSandboxHelper),
                    inputParameters,
                    "@AccountsReceivable:CustReccurInvoicePostServiceValidateWaitCaption");
        }
        else
        {
            [isValidateOK, recurrenceInvoice, custInvoiceTable, custRecurrenceInvoiceGroup] = CustRecurrenceInvoicePostService::validateRecurrenceInvoiceSandboxHelper(inputParameters);
        }

        return isValidateOK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRecurrenceInvoiceSandboxHelper</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates all the free text invoices for the selected <c>CustRecurrenceInvoiceGroup</c> record.
    /// </summary>
    /// <param name="_inputParameters">
    ///    The container of [<c>RecurrenceInvoice</c>, <c>CustInvoiceTable</c>, <c>CustRecurrenceInvoiceGroup</c>].
    /// </param>
    /// <returns>
    ///    The container of [boolean, <c>RecurrenceInvoice</c>, <c>CustInvoiceTable</c>, <c>CustRecurrenceInvoiceGroup</c>].
    /// </returns>
    public static container validateRecurrenceInvoiceSandboxHelper(container _inputParameters)
    {
        CustPostInvoice custPostInvoice;
        CustFreeInvoiceCalcTotals custFreeInvoiceCalcTotals;
        RecurrenceInvoice recurrenceInvoceLocal;
        CustInvoiceTable custInvoiceTableLocal;
        CustRecurrenceInvoiceGroup custRecurrenceInvoiceGroupLocal;
        boolean isValidateOK = true;

        [recurrenceInvoceLocal, custInvoiceTableLocal, custRecurrenceInvoiceGroupLocal] = _inputParameters;

        // Iterates all the recurrence invoices belongs to a selected recurrence invoice group.
        while select recurrenceInvoceLocal
            where recurrenceInvoceLocal.CustRecurrenceInvoiceGroup == custRecurrenceInvoiceGroupLocal.RecId
                join custInvoiceTableLocal
                    where custInvoiceTableLocal.RecId == recurrenceInvoceLocal.CustInvoiceTable &&
                    custInvoiceTableLocal.Posted == NoYes::No
        {
            custPostInvoice = CustPostInvoice::construct(custInvoiceTableLocal);
            custFreeInvoiceCalcTotals = new CustFreeInvoiceCalcTotals(custInvoiceTableLocal);
            custFreeInvoiceCalcTotals.calc();
            isValidateOK = custPostInvoice.validate(custFreeInvoiceCalcTotals.custFreeInvoiceInvoiceAmount()) && isValidateOK;
        }

        return [isValidateOK, recurrenceInvoceLocal, custInvoiceTableLocal, custRecurrenceInvoiceGroupLocal];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>