<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationToLineUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesQuotationToLineUpdate</c> class is updating the sales quotation lines in the header to line feature
/// for sales quotations.
/// </summary>
class SalesQuotationToLineUpdate extends SalesPurchTableToLineUpdate
{
    DialogButton                copyTaxGroupToMarkupTrans;
    boolean                     updateTaxGroupOnLines;
    NoYes                       updatePricedisc;
    PriceDiscUpdatePriceDisc    updatePriceDiscMode;
    protected DialogButton copyOverrideSalesTaxToMarkupTrans;
    protected boolean updateOverrideSalesTaxOnLines;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canUpdateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a sales quotation line can be updated.
    /// </summary>
    /// <param name="_sourceLine">
    /// The source line to be validated
    /// </param>
    /// <param name="_previousErrorsFound">
    /// A Boolean value that determines whether errors previous have been found; optional.
    /// </param>
    /// <param name="_axTable">
    /// A <c>AxInternalBase</c> object that can be used for validating if a sales quotation line can be
    /// update; optional.
    /// </param>
    /// <returns>
    /// Always returns true.
    /// </returns>
    protected boolean canUpdateLine(Common _sourceLine, boolean _previousErrorsFound = false, AxInternalBase _axTable = null)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAxLineObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>AxSalesQuotationLine</c> class.
    /// </summary>
    /// <param name="_axTable">
    /// The <c>AxSalesQuotationTable</c> class from which to initialize the <c>AxSalesQuotationLine</c>
    /// class.
    /// </param>
    /// <param name="_sourceLine">
    /// The <c>SalesQuotationLine</c> buffer to initialize the <c>AxSalesQuotationLine</c> class from.
    /// </param>
    /// <returns>
    /// A <c>AxSalesQuotationLine</c> class.
    /// </returns>
    protected AxInternalBase getAxLineObject(AxInternalBase _axTable, Common _sourceLine)
    {
        AxSalesQuotationLine axSalesQuotationLine = AxSalesQuotationLine::newSalesQuotationLine(_sourceLine);

        axSalesQuotationLine.axSalesQuotationTable(_axTable);

        return axSalesQuotationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAxTableObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>AxSalesQuotationTable</c> class.
    /// </summary>
    /// <param name="_sourceTable">
    /// The <c>SalesQuotationTable</c> buffer from which to initialize the <c>AxSalesQuotationTable</c>
    /// class.
    /// </param>
    /// <returns>
    /// An <c>AxSalesQuotationTable</c> class.
    /// </returns>
    protected AxInternalBase getAxTableObject(Common _sourceTable)
    {
        return AxSalesQuotationTable::newSalesQuotationTable(_sourceTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the line table that is used in the header to line feature.
    /// </summary>
    /// <returns>
    /// The table ID for the <c>SalesQuotationLine</c> table.
    /// </returns>
    protected TableId lineTableId()
    {
        return tableNum(SalesQuotationLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyTaxGroupToMarkupTrans</Name>
				<Source><![CDATA[
    public DialogButton parmCopyTaxGroupToMarkupTrans(DialogButton _copyTaxGroupToMarkupTrans = copyTaxGroupToMarkupTrans)
    {
        copyTaxGroupToMarkupTrans = _copyTaxGroupToMarkupTrans;

        return copyTaxGroupToMarkupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdatePricedisc</Name>
				<Source><![CDATA[
    public NoYes parmUpdatePricedisc(NoYes _updatePricedisc = updatePricedisc)
    {
        updatePricedisc = _updatePricedisc;
        return updatePricedisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdatePriceDiscMode</Name>
				<Source><![CDATA[
    public PriceDiscUpdatePriceDisc parmUpdatePriceDiscMode(PriceDiscUpdatePriceDisc _updatePriceDiscMode = updatePriceDiscMode)
    {
        updatePriceDiscMode = _updatePriceDiscMode;
        return updatePriceDiscMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRunLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds and returns a <c>QueryRun</c> object.
    /// </summary>
    /// <param name="_update">
    ///    A Boolean value that determines whether the record is to be selected for updated; optional.
    /// </param>
    /// <returns>
    ///    A <c>QueryRun</c> object.
    /// </returns>
    protected QueryRun queryRunLine(boolean _update = false)
    {
        SalesQuotationTable salesQuotationTable = sourceTable as SalesQuotationTable;

        return new QueryRun(SysQuery::queryFromTableRelation(salesQuotationTable, tableNum(SalesQuotationLine), _update));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldAsModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a field as modified in a <c>AxInternalBase</c> object.
    /// </summary>
    /// <param name="_axTable">
    /// An <c>AxInternalBase</c> object.
    /// </param>
    /// <param name="_fieldId">
    /// The field ID for the field to be set as modified.
    /// </param>
    protected void setFieldAsModified(AxInternalBase _axTable, FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(SalesQuotationTable, InventLocationId):
                _axTable.setFieldAsModified(fieldNum(SalesQuotationTable,InventSiteId));
                break;

            case fieldNum(SalesQuotationTable, TaxGroup):
                updateTaxGroupOnLines = true;
                break;

            case fieldNum(SalesQuotationTable, OverrideSalesTax):
                updateOverrideSalesTaxOnLines = true;
                copyOverrideSalesTaxToMarkupTrans = this.promptCopyOverrideSalesTaxToQuotationLineCharges();
                break;
        }

        _axTable.setFieldAsModified(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a <c>SalesQuotationLine</c> record.
    /// </summary>
    /// <param name="_sourceLine">
    /// The <c>SalesQuotationLine</c> record to be update.
    /// </param>
    /// <param name="_axLine">
    /// A <c>AxSalesQuotationLine</c> object that contains the <c>SalesQuotationLine</c> record to be
    /// updated.
    /// </param>
    /// <param name="_sourceTable">
    /// The <c>SalesQuotationTable</c> record for the <c>SalesQuotationLine</c> record to be updated.
    /// </param>
    protected void updateLine(Common _sourceLine, AxInternalBase _axLine, Common _sourceTable)
    {
        AxSalesQuotationLine    axSalesQuotationLine = _axLine as AxSalesQuotationLine;
        int                     i;
        container               priceDiscChangePolicyFieldIds;
        boolean                 createSystemEntryChangePolicy = false;

        if (updatePricedisc)
        {
            switch (updatePriceDiscMode)
            {
                case PriceDiscUpdatePriceDisc::KeepManualSystem:
                    {
                        createSystemEntryChangePolicy = true;
                        axSalesQuotationLine.salesQuotationLine().setPriceDiscChangePolicy(PriceDiscSystemSource::CopyFromSalesQuotation);
                    }

                case PriceDiscUpdatePriceDisc::UpdateIndividual:
                    priceDiscChangePolicyFieldIds = PriceDiscPolicyCheckPolicy::newFromParm(_sourceLine).getPolicyFields();
                    for (i=1; i<=conLen(priceDiscChangePolicyFieldIds); i++)
                    {
                        axSalesQuotationLine.setFieldAsTouched(conPeek(priceDiscChangePolicyFieldIds, i));
                    }
                    if (createSystemEntryChangePolicy)
                    {
                        SalesQuotationLine::resetAxSalesQuotationLinePolicies(axSalesQuotationLine, PriceDiscSystemSource::None, 0, axSalesQuotationLine.parmManualEntryChangepolicy());
                    }
                    break;

                case PriceDiscUpdatePriceDisc::UpdateAll :
                        SalesQuotationLine::resetAxSalesQuotationLinePolicies(axSalesQuotationLine);
                        break;
            }
        }

        if (updateTaxGroupOnLines)
        {
            this.updateTaxGroupOnLine(_sourceLine, _sourceTable);
        }

        if (updateOverrideSalesTaxOnLines)
        {
            this.updateOverrideSalesTaxOnLine(_sourceLine, _sourceTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxGroupOnLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the tax group for quotation line of a sales quotation.
    /// </summary>
    /// <param name="_sourceLine">
    /// The quotation line record.
    /// </param>
    /// <param name="_sourceTable">
    /// The sales quotation record.
    /// </param>
    protected void updateTaxGroupOnLine(Common _sourceLine, Common _sourceTable)
    {
        SalesQuotationLine  salesQuotationLine  = _sourceLine  as SalesQuotationLine;
        SalesQuotationTable salesQuotationTable = _sourceTable as SalesQuotationTable;

        MarkupTrans::updateTaxGroup(salesQuotationLine.TableId,
                                    salesQuotationLine.RecId,
                                    salesQuotationTable.TaxGroup,
                                    salesQuotationLine.TaxGroup,
                                    copyTaxGroupToMarkupTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOverrideSalesTaxOnLine</Name>
				<Source><![CDATA[
    private void updateOverrideSalesTaxOnLine(Common _sourceLine, Common _sourceTable)
    {
        SalesQuotationLine salesQuotationLine = _sourceLine  as SalesQuotationLine;
        SalesQuotationTable salesQuotationTable = _sourceTable as SalesQuotationTable;
        if (Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationUtils::getBusinessProcessForSalesQuotationTable(salesQuotationTable)))
        {
            MarkupTrans::updateOverrideSalesTax(
                salesQuotationLine.TableId,
                salesQuotationLine.RecId,
                salesQuotationTable.OverrideSalesTax,
                copyOverrideSalesTaxToMarkupTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>SalesQuotationToLineUpdate</c> class.
    /// </summary>
    /// <param name="_quotationToLineUpdatePrompt">
    /// A <c>SalesQuotationToLineUpdatePrompt</c> object that contains fields to be updated.
    /// </param>
    /// <returns>
    /// A new instance of the <c>SalesQuotationToLineUpdate</c> class.
    /// </returns>
    public static SalesQuotationToLineUpdate construct(SalesQuotationToLineUpdatePrompt _quotationToLineUpdatePrompt)
    {
        SalesQuotationToLineUpdate quotationToLineUpdate = new SalesQuotationToLineUpdate();
        quotationToLineUpdate.initUpdateFields(_quotationToLineUpdatePrompt);
        return quotationToLineUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptCopyOverrideSalesTaxToQuotationLineCharges</Name>
				<Source><![CDATA[
    private DialogButton promptCopyOverrideSalesTaxToQuotationLineCharges()
    {
        DialogButton ret = DialogButton::No;
        SalesQuotationTable salesQuotationTable = sourceTable as SalesQuotationTable;

        if (Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationUtils::getBusinessProcessForSalesQuotationTable(salesQuotationTable)))
        {
            MarkupTrans markupTrans;
            SalesQuotationLine salesQuotationLine;
            select firstonly RecId from salesQuotationLine
                where salesQuotationLine.QuotationId == salesQuotationTable.QuotationId
                join TransTableId, TransRecId, IsDeleted from markupTrans
                    where markupTrans.TransTableId == tableNum(SalesQuotationLine)
                        && markupTrans.TransRecId == salesQuotationLine.RecId
                        && !markupTrans.IsDeleted;

            if (salesQuotationLine.RecId)
            {
                ret = MarkupTrans::promptCopyOverrideSalesTaxToMarkupTrans(tableNum(SalesQuotationLine), salesQuotationLine.RecId, false);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>