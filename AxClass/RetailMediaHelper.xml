<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailMediaHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.DynamicsOnline.Infrastructure.Components.SharedServiceUnitStorage;
using System.DateTime;

/// <summary>
/// This class contains the helper routines used to managing the media.
/// </summary>
class RetailMediaHelper
{
    /// <summary>
    /// The blob container files are stored in.
    /// </summary>
    public const str AzureStorageCategory = 'retailmediastaticimages';
    public const str AzureStorageSecuredImagesCategory = 'retailmediasecuredimages';
    public const str AzureStorageSecuredImagesPolicyName = 'retailmediaimagepolicy';
    public const str SupportedImageFileTypes = 'image/*,.jpg,.jpeg,.gif,.bmp,.png';
    public const int UrlExpirationForPublicContainerBlobs = 0;
    public const str CatalogImage = '';
    public const str ThumbnailImageNamePrefix = 'thumbnail_';
    public const str CustomImageNamePrefix = 'custom_';
    public const int ThumbnailImageSize = 30;
    public const int CustomImageSize = 60;
    public const int DefaultClxSasKeyLifetimeInHours = 8;
    public const int DefaultClxSasKeyRecycleWindowInHours = 1;
    public const str ProductFileNameSeperator = '_';

    public const str CustomerImageFilePath = 'Images/Customers/';
    public const str WorkerImageFilePath = 'Images/Workers/';
    public const str CatalogImageFilePath = 'Images/Catalogs/';
    public const str CategoryImageFilePath = 'Images/Category/';
    public const str ProductImageFilePath = 'Images/Products/';
    public const str ColorImageFilePath = 'Images/colors/';
    public const str SizeImageFilePath = 'Images/Sizes/';
    public const str StyleImageFilePath = 'Images/Styles/';
    public const str ColorImageFileName = '{ColorName}';
    public const str SizeImageFileName = '{SizeName}';
    public const str StyleImageFileName = '{StyleName}';
    public const str CustomerImageFileName = '{CustomerNumber}';
    public const str workerImageFileName = '{WorkerNumber}';
    public const str CatalogImageFileName = '{CatalogName}';
    public const str CategoryImageFileName = '{CategoryName}';
    public const str ProductImageFileName = '{ProductNumber}';
    public const str ProductImageFileNameSuffix = '_000_001';
    public const str FilePathEndsWith = '/';
    public const str LanguageToken = '{LANGUAGEID}';
    public const str Forwardslash = '/';
    public const str Backslash = '\\';

    public const int OfflineImageWidth = 300;
    public const int OfflineImageHeight = 120;

    private const int CacheSasKeyExpirationInHours = 1;
    private const str validUrlPrefix_1 = 'http';
    private const str validUrlPrefix_2 = 'www';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getResizedImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the resized image as <c>System.IO.MemoryStream</c>.
    /// </summary>
    /// <param name = "inputStream">The memory stream object.</param>
    /// <param name = "size">Target size of the image.</param>
    /// <returns>Returns the resized image.</returns>
    public static System.IO.MemoryStream getResizedImage(System.IO.Stream inputStream, int size)
    {
        var image = System.Drawing.Image::FromStream(inputStream);
        System.Drawing.Image customImage = RetailMediaHelper::scaleImage(image, size, size);

        System.IO.MemoryStream outputStream = new System.IO.MemoryStream();
        customImage.Save(outputStream, System.Drawing.Imaging.ImageFormat::Jpeg);
        return outputStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileDetailsFromTetmplateUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the file details, the details contains the path, name and extension from the input url.
    /// </summary>
    /// <param name = "url">The media url.</param>
    /// <returns>The container returns the file path, file name and the file extension.</returns>
    public static container getFileDetailsFromTetmplateUrl(str url)
    {
        str filePathAndName;
        str filePath;
        str fileName;
        str fileExtension;
        container result = [filePath, fileName, fileExtension];

        // Splits the end of the url by '.' to get the file extension
        // and file path with name out.
        container splitRes = RetailMediaHelper::strSplitEnd(url, '.');
        filePathAndName = conPeek(splitRes, 1);
        fileExtension = conPeek(splitRes, 2);

        // Splits the end of the file path with name by '/' and '\\' to get
        // the file path and file name out. It's necassary to do both because
        // the file path with name could separate the path and name with either.
        // The way that produces the longer path is the right one to use.
        splitRes = RetailMediaHelper::strSplitEnd(filePathAndName, Forwardslash);
        str filePathForwardslash = conPeek(splitRes, 1) + Forwardslash;
        str fileNameForwardslash = conPeek(splitRes, 2);
        splitRes = RetailMediaHelper::strSplitEnd(filePathAndName, Backslash);
        str filePathBackslash = conPeek(splitRes, 1) + Backslash;
        str fileNameBackslash = conPeek(splitRes, 2);
        if (strLen(filePathForwardslash) > strLen(filePathBackslash))
        {
            filePath = filePathForwardslash;
            fileName = fileNameForwardslash;
        }
        else
        {
            filePath = filePathBackslash;
            fileName = fileNameBackslash;
        }

        result = [filePath, fileName, fileExtension];
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>strSplitEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits the given string by the given delimiter at the last occurance
    /// of the delimiter. A container is returned with the portion of the string
    /// before the split at index 1 and the portion after at index 2.
    /// </summary>
    /// <param name = "string">The string to split.</param>
    /// <param name = "delimiter">The delimiter to use. It should be length 1.</param>
    /// <returns>The container.</returns>
    private static container strSplitEnd(str string, str delimiter)
    {
        str front;
        str end;
        container result = [front, end];

        var list = Global::strSplit(string, delimiter);
        ListIterator iterator = new ListIterator(list);

        str previousValue;
        int i = 0;
        while (iterator.more())
        {
            if (i == 1)
            {
                front = previousValue;
            }
            else if (i > 1)
            {
                front = front + delimiter + previousValue;
            }
            previousValue = iterator.value();
            iterator.next();
            i++;
        }
        end = previousValue;

        result = [front, end];
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFilePathFromToken</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the file path value by breaking the input token value.
    /// </summary>
    /// <param name = "token">The file path token.</param>
    /// <returns>The file path.</returns>
    public static str getFilePathFromToken(str token)
    {
        str path;
        if (strUpr(token) == '{LANGUAGEID}')
        {
            var languageId = SystemParameters::getSystemLanguageId();
            path = languageId;
        }

        return path;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateGalleryWithCustomerHostedImageDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the media gallery persistance with the uploaded image details.
    /// </summary>
    /// <param name = "imageUrl">The image url.</param>
    /// <param name = "retailMediaGallery">RetailImageResource table.</param>
    public static void updateGalleryWithCustomerHostedImageDetails(str imageUrl, RetailImageResource retailMediaGallery)
    {
        System.Net.WebRequest request = System.Net.WebRequest::Create(imageUrl);
        System.Net.WebResponse response = request.GetResponse();

        using(System.IO.Stream connectedStream = response.GetResponseStream())
        {
            System.Drawing.Bitmap img = new System.Drawing.Bitmap(connectedStream);
            int imageHeight = img.Height;
            int imageWidth = img.Width;
            retailMediaGallery.Height = imageHeight;
            retailMediaGallery.Width = imageWidth;

            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
            connectedStream.CopyTo(memoryStream);
            int imageSize = int642int(memoryStream.Length);
            retailMediaGallery.SizeInKB = real2int(imageSize / 1024);
            memoryStream.Dispose();
        }

        retailMediaGallery.FileName = RetailMediaHelper::getFileNameByUrl(imageUrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImageInBinaryByURL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the image in binary from the input image url.
    /// </summary>
    /// <param name = "url">The image url.</param>
    /// <returns>Returns the image in binary.</returns>
    public static System.IO.MemoryStream getImageInBinaryByURL(str url)
    {
        System.IO.MemoryStream responseStream = new System.IO.MemoryStream();
        System.Net.WebRequest request = System.Net.WebRequest::Create(url);
        System.Net.WebResponse response = request.GetResponse();

        using(System.IO.Stream connectedStream = response.GetResponseStream())
        {
            connectedStream.CopyTo(responseStream);
        }

        return responseStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImageByURL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>System.Drawing.Image</c> from the input image url.
    /// </summary>
    /// <param name = "url">The image url.</param>
    /// <returns>The image object if image was found, null otherwise.</returns>
    private static System.Drawing.Image getImageByURL(str url)
    {
        System.IO.MemoryStream responseStream = new System.IO.MemoryStream();
        System.Net.WebRequest request = System.Net.WebRequest::Create(url);
        System.Net.WebResponse response = request.GetResponse();

        using(System.IO.Stream connectedStream = response.GetResponseStream())
        {
            connectedStream.CopyTo(responseStream);
        }

        var image = System.Drawing.Image::FromStream(responseStream);

        // Disallow Emf and Wmf formats to prevent random code injection code in GDI+.
        If (image.RawFormat.Equals(System.Drawing.Imaging.ImageFormat::Emf)
            || (image.RawFormat.Equals(System.Drawing.Imaging.ImageFormat::Wmf)))
        {
            throw error("@RetailMediaGalleryLabels:ImageFormatValidateErrorMessage");
        }

        return image;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAbsoluteURL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retruns whether the URL is absolute.
    /// </summary>
    /// <param name = "url">The url.</param>
    /// <returns>True if the passed url is absolute otherwise false.</returns>
    public static boolean isAbsoluteURL(str url)
    {
        boolean flag = false;

        if (strStartsWith(url, validUrlPrefix_1) || strStartsWith(url, validUrlPrefix_2))
        {
            System.Uri uri = null;
            flag = System.Uri::TryCreate(url, System.UriKind::Absolute, byRef uri);
        }

        return flag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processMediaUploadedFromEntityPages</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine onboards the media into the media gallery and returns meida identifer.
    /// </summary>
    /// <param name = "fileName">The filename.</param>
    /// <param name = "mediaUrl">The media url.</param>
    /// <param name = "mediaSizeInKB">The media file size in KB.</param>
    /// <param name = "nediaHeight">The height of the media file.</param>
    /// <param name = "mediaWidth">The width of the media file.</param>
    /// <param name = "description">Decricption of the media.</param>
    /// <param name = "masterEntity">The RetailMediaMasterEntity value.</param>
    /// <param name = "masterEntityRecId">The master entity record identifier.</param>
    /// <param name = "catalog">Catalog record identifier.</param>
    /// <param name = "internalOrgRecId">Internal Organization record identifier.</param>
    /// <param name = "productRecId">Product record identifier.</param>
    /// <returns>The media identifer.</returns>
    public static int processMediaUploadedFromEntityPages(str fileName, str mediaUrl, int mediaSizeInKB, int nediaHeight, int mediaWidth, str description, RetailMediaMasterEntity masterEntity, RecId masterEntityRecId,
                                                            RefRecId catalog = 0, RetailInternalOrgRefRecId internalOrgRecId = 0, RefRecId productRecId = 0)
    {
        int resourceId  = 0;
        RetailImageResource imageTable;
        boolean isPartialUrl = !RetailMediaHelper::isAbsoluteURL(mediaUrl);

        // Check if the image already exist.
        imageTable = RetailImageResource::findByImageUrl(mediaUrl);

        // If the image doesn't exist then add this image.
        if (!imageTable)
        {
            imageTable.clear();
            imageTable.initValue();

            imageTable.ResourceId = RetailMediaResource::getNextResourceId();
            imageTable.FileName = fileName;
            imageTable.ResourceUrl = mediaUrl;
            imageTable.SizeInKB = mediaSizeInKB;
            imageTable.Height = nediaHeight;
            imageTable.Width = mediaWidth;
            imageTable.Description = description;
            imageTable.InUse = NoYes::Yes;
            imageTable.IsPartialUrl = isPartialUrl;

            if (masterEntity == RetailMediaMasterEntity::Catalog)
            {
                imageTable.IsCatalog = NoYes::Yes;
            }
            else if (masterEntity == RetailMediaMasterEntity::Category)
            {
                imageTable.IsCategory = NoYes::Yes;
            }
            else if (masterEntity == RetailMediaMasterEntity::Product)
            {
                imageTable.IsProduct = NoYes::Yes;
            }
            else if (masterEntity == RetailMediaMasterEntity::Worker)
            {
                imageTable.IsWorker = NoYes::Yes;
            }
            else if (masterEntity == RetailMediaMasterEntity::Customer)
            {
                imageTable.IsCustomer = NoYes::Yes;
            }
            else if (masterEntity == RetailMediaMasterEntity::Color)
            {
                imageTable.IsColor = NoYes::Yes;
            }
            else if (masterEntity == RetailMediaMasterEntity::Size)
            {
                imageTable.IsSize = NoYes::Yes;
            }
            else if (masterEntity == RetailMediaMasterEntity::Style)
            {
                imageTable.IsStyle = NoYes::Yes;
            }

            imageTable.insert();
        }

        RetailMediaHelper::updateMediaRelationTable(masterEntity, masterEntityRecId, imageTable.ResourceId, catalog, internalOrgRecId, productRecId);
        return imageTable.ResourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMediaRelationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the media relation table.
    /// </summary>
    /// <param name = "masterEntity">The retail entity enum value.</param>
    /// <param name = "masterEntityRecId">The entity RecId.</param>
    /// <param name = "resourceId">The media resource Identifier.</param>
    /// <param name = "catalog">The catalog record identifier.</param>
    /// <param name = "internalOrg">The internal organization record identifier.</param>
    /// <param name = "product">The product record identifier.</param>
    /// <param name = "isDefault">If this image is selected as default image.</param>
    public static void updateMediaRelationTable(RetailMediaMasterEntity masterEntity, RecId masterEntityRecId, int resourceId, RefRecId catalog = 0,
                                                              RetailInternalOrgRefRecId internalOrg = 0, RefRecId product = 0, NoYes isDefault = NoYes::No)
    {
        if (masterEntity == RetailMediaMasterEntity::Product)
        {
            RetailImageResource imageResource = RetailImageResource::findByResourceId(resourceId);
            RetailMediaProductRelation productRelationTable = RetailMediaProductRelation::find(imageResource.RecId, product, catalog, internalOrg, true);

            if (!productRelationTable)
            {
                productRelationTable.clear();
                productRelationTable.initValue();

                productRelationTable.MediaResource = imageResource.RecId;
                productRelationTable.Product = product;
                productRelationTable.IsDefault = isDefault;
                productRelationTable.Catalog = catalog;
                productRelationTable.InternalOrganization = internalOrg;

                productRelationTable.insert();
            }
            else
            {
                productRelationTable.IsDefault = isDefault;
                productRelationTable.update();
            }
        }
        else
        {
            RetailMediaAndMasterEntityRelation relationTable = RetailMediaAndMasterEntityRelation::find(resourceId, masterEntityRecId, masterEntity, true);
            if (relationTable)
            {
                relationTable.IsDefault = isDefault;
                relationTable.update();
            }
            else
            {
                relationTable.clear();
                relationTable.initValue();
                relationTable.MediaResourceId = resourceId;
                relationTable.MasterEntityType = masterEntity;
                relationTable.MasterEntityRecId = masterEntityRecId;
                relationTable.IsDefault = isDefault;
                relationTable.insert();
            }
        }

        RetailImageResource::updateInUseStatus(resourceId, NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFromMediaRelationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove the association form the media relation table.
    /// </summary>
    /// <param name = "masterEntity">The retail entity enum value.</param>
    /// <param name = "masterEntityRecId">The retail entity record identifier.</param>
    /// <param name = "resourceId">The media resource identifier.</param>
    /// <param name = "productId">The product record identifier.</param>
    /// <param name = "catalog">The catalog record identifier.</param>
    /// <param name = "internalOrgId">The internal organization record identifier.</param>
    public static void deleteFromMediaRelationTable(RetailMediaMasterEntity masterEntity, RecId masterEntityRecId, int resourceId = 0, RefRecId productId = 0, RefRecId catalog = 0, RefRecId internalOrgId = 0)
    {
        if (resourceId > 0)
        {
            boolean _forUpdate = true;
            if (masterEntity == RetailMediaMasterEntity::Product)
            {
                //Product and media association information persisted in the RetailMediaProductRelation table.
                RetailImageResource imageTable = RetailImageResource::findByResourceId(resourceId);
                if (imageTable)
                {
                    RetailMediaProductRelation record = RetailMediaProductRelation::find(imageTable.RecId, productId, catalog, internalOrgId, _forUpdate);

                    if (record)
                    {
                        record.delete();

                        RetailMediaProductRelation relationTable;
                        relationTable = RetailMediaProductRelation::findByResourceId(resourceId);
                        if (!relationTable)// there are no other reference to this record, so set InUse to False.
                        {
                            RetailImageResource::updateInUseStatus(resourceId, NoYes::No);
                        }
                    }
                }
            }
            else
            {
                // For Catalog, Customer, Category and Worker media association information persisted in the RetailMediaAndMasterEntityRelation table.
                RetailMediaAndMasterEntityRelation relationTable;
                relationTable = RetailMediaAndMasterEntityRelation::find(resourceId, masterEntityRecId, masterEntity, true);

                if (relationTable)
                {
                    // Delete the records from the image association table.
                    relationTable.delete();

                    relationTable = RetailMediaAndMasterEntityRelation::findByResourceId(resourceId);
                    if (!relationTable)// there are no other reference to this record, so set InUse to False.
                    {
                        RetailImageResource::updateInUseStatus(resourceId, NoYes::No);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMediaAssociationFromMediaRelationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the RichMediaTmp table with the media association infromation from the media association table.
    /// </summary>
    /// <param name = "masterEntityRecId">The retail entity record identifier.</param>
    /// <param name = "masterEntity">The entity type.</param>
    /// <param name = "mediaAssociationTable">The RetailRichMediaTmp table.</param>
    /// <param name = "catalogRecId">The catalog record identifier.</param>
    /// <param name = "internalOrgRecId">The internal organization record identifier.</param>
    /// <returns>True if it has successfully populated the RetailRichMediaTmp table otherwise false.</returns>
    public static boolean populateMediaAssociationFromMediaRelationTable(RefRecId masterEntityRecId, RetailMediaMasterEntity masterEntity, RetailRichMediaTmp mediaAssociationTable,
        RefRecId catalogRecId = 0, RefRecId internalOrgRecId = 0)
    {
        RetailMediaAndMasterEntityRelation enityRelationTable;
        RetailMediaProductRelation productMediaRelationTable;
        RetailImageResource imageResourceTable;
        int recCount = 0;

        ttsbegin;
        if (masterEntity ==RetailMediaMasterEntity::Product)
        {
            while select * from productMediaRelationTable
            join imageResourceTable
            where imageResourceTable.RecId == productMediaRelationTable.MediaResource &&
            productMediaRelationTable.Product == masterEntityRecId && productMediaRelationTable.Catalog == catalogRecId
            && productMediaRelationTable.InternalOrganization ==  internalOrgRecId
            {
                mediaAssociationTable.clear();
                mediaAssociationTable.initValue();

                mediaAssociationTable.Url = imageResourceTable.ResourceUrl;
                mediaAssociationTable.ImageId = imageResourceTable.ResourceId;
                mediaAssociationTable.IsTemplateUrl = ZeroOrOne::Zero;
                int isDefault = productMediaRelationTable.IsDefault;
                mediaAssociationTable.IsDefault = isDefault;

                mediaAssociationTable.insert();
                recCount++;
            }
        }
        else
        {
            while select * from enityRelationTable
            join imageResourceTable
            where imageResourceTable.ResourceId == enityRelationTable.MediaResourceId &&
            enityRelationTable.MasterEntityRecId == masterEntityRecId && enityRelationTable.MasterEntityType == masterEntity
            {
                mediaAssociationTable.clear();
                mediaAssociationTable.initValue();

                mediaAssociationTable.Url = imageResourceTable.ResourceUrl;
                mediaAssociationTable.ImageId = imageResourceTable.ResourceId;
                mediaAssociationTable.IsTemplateUrl = ZeroOrOne::Zero;
                int isDefault = enityRelationTable.IsDefault;
                mediaAssociationTable.IsDefault = isDefault;

                mediaAssociationTable.insert();
                recCount++;
            }
        }

        ttscommit;

        return (recCount > 0) ? true: false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMediaAssociationFromMediaTemplateTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine populates the RetailRichMediaTmp table based on the media template entries.
    /// </summary>
    /// <param name = "masterEntity">The retail master entity type.</param>
    /// <param name = "mediaAssociationTable">The RetailRichMediaTmp table.</param>
    public static void populateMediaAssociationFromMediaTemplateTable(RetailMediaMasterEntity masterEntity, RetailRichMediaTmp mediaAssociationTable)
    {
        RetailMediaTemplate mediaTemplateTable;
        int recCount = 0;
        boolean explicitDefaultRecordExist = false;

        select firstonly mediaAssociationTable
            where mediaAssociationTable.IsDefault == ZeroOrOne::One;

        if (mediaAssociationTable)
        {
            explicitDefaultRecordExist = true;
        }

        ttsbegin;

        while select * from mediaTemplateTable
            where mediaTemplateTable.MasterEntityType == masterEntity
        {
            mediaAssociationTable.clear();
            mediaAssociationTable.initValue();

            mediaAssociationTable.Url = mediaTemplateTable.ImageUrl;
            mediaAssociationTable.IsTemplateUrl = ZeroOrOne::One;

            if (!explicitDefaultRecordExist && mediaTemplateTable.isDefault)
            {
                mediaAssociationTable.IsDefault = ZeroOrOne::One;
            }
            else
            {
                mediaAssociationTable.IsDefault = ZeroOrOne::Zero;
            }

            mediaAssociationTable.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDefaultRecordInMediaRelationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the media relation table.
    /// </summary>
    /// <param name = "masterEntity">The retail entity enum value.</param>
    /// <param name = "masterEntityRecId">The retail entity record identifier.</param>
    /// <param name = "resourceId">the media resource identifier.</param>
    /// <param name = "imageUrl">The image url.</param>
    /// <param name = "catalog">The catalog record identifier.</param>
    /// <param name = "internalOrgRecId">The internal organization record identifier.</param>
    /// <param name = "productRecId">The product record identifier.</param>
    /// <param name = "isDefault">Whether the image is selected as default image.</param>
    public static void updateDefaultRecordInMediaRelationTable(RetailMediaMasterEntity masterEntity, RecId masterEntityRecId,  int resourceId, str imageUrl,
                        RefRecId catalog = 0, RetailInternalOrgRefRecId internalOrgRecId = 0, RefRecId productRecId = 0, NoYes isDefault = NoYes::No)
    {
        boolean _forUpdate = true;

        ttsbegin;
        if (masterEntity == RetailMediaMasterEntity::Product)
        {
            RefRecId mediaResRecId = 0;
            if (resourceId > 0 )
            {
                RetailImageResource imageResource = RetailImageResource::findByResourceId(resourceId);
                if (imageResource)
                {
                    mediaResRecId = imageResource.RecId;
                }
            }

            RetailMediaProductRelation record = RetailMediaProductRelation::find(mediaResRecId, productRecId, catalog, internalOrgRecId, _forUpdate);
            if (record)
            {
                record.IsDefault = isDefault;
                record.update();
            }
        }
        else
        {
            RetailMediaAndMasterEntityRelation record = RetailMediaAndMasterEntityRelation::find(resourceId, masterEntityRecId, masterEntity, _forUpdate);
            if (record)
            {
                record.IsDefault = isDefault;
                record.update();
            }
        }

        RetailMediaHelper::processDefaultRecordInMediaGallery(resourceId, imageUrl, isDefault, masterEntity);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductPrimaryImageUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the primary image url based on the of the passed Products.
    /// </summary>
    /// <param name = "productRecIds">The product record identifier collection.</param>
    /// <param name = "catalogRecId">The catalog record identifier.</param>
    /// <param name = "internalOrgRecId">The internal organization record identifier.</param>
    /// <param name = "languageId">The language identifer.</param>
    /// <returns>The map which contains the product record identifier as the Key and the image url as the value.</returns>
    public static Map getProductPrimaryImageUrl(Set productRecIds, RefRecId catalogRecId, RefRecId internalOrgRecId, LanguageId languageId)
    {
        RetailImageResource imageResource;
        RetailMediaProductRelation mediaProductRelation;
        EcoResProduct ecoResProduct;
        Map productPrimaryImageUrls = new Map(Types::Int64, Types::String);
        Map explicitProductImageAssociation = new Map(Types::Int64, Types::Class);
        str productImageTemplateUrl = RetailMediaTemplate::getPrimaryImageUrl(RetailMediaMasterEntity::Product);

        RetailTmpRecId productTmpRecIds = RetailMediaHelper::populateProductRecIdTempTable(productRecIds);

        while select Product, Catalog, InternalOrganization, IsDefault from mediaProductRelation
            join ResourceUrl from imageResource where imageResource.RecId == mediaProductRelation.MediaResource
            join productTmpRecIds where productTmpRecIds.ReferenceRecId == mediaProductRelation.Product
            && (mediaProductRelation.Catalog == catalogRecId || mediaProductRelation.Catalog == 0)
            && (mediaProductRelation.InternalOrganization == internalOrgRecId || mediaProductRelation.InternalOrganization == 0)
        {
            RetailProductImageAssociation productImageAssociation;

            if (explicitProductImageAssociation.exists(mediaProductRelation.Product))
            {
                RetailProductImageAssociation currentProductImageAssociation = new RetailProductImageAssociation();
                currentProductImageAssociation.setValues(
                        mediaProductRelation.Product,
                        mediaProductRelation.Catalog,
                        mediaProductRelation.InternalOrganization,
                        imageResource.ResourceUrl,
                        mediaProductRelation.IsDefault);
                productImageAssociation = explicitProductImageAssociation.lookup(mediaProductRelation.Product);
                int result = productImageAssociation.compareTo(currentProductImageAssociation);

                if (result < 0)
                {
                    //The existsing product image association has lower priority than the current one hence keep the current product image association.
                    explicitProductImageAssociation.remove(mediaProductRelation.Product);
                    explicitProductImageAssociation.insert(mediaProductRelation.Product, currentProductImageAssociation);
                }
            }
            else
            {
                productImageAssociation = new RetailProductImageAssociation();
                productImageAssociation.setValues(mediaProductRelation.Product, mediaProductRelation.Catalog,
                        mediaProductRelation.InternalOrganization, imageResource.ResourceUrl, mediaProductRelation.IsDefault);

                explicitProductImageAssociation.insert(mediaProductRelation.Product, productImageAssociation);
            }
        }

        // If no explicit image associeted with the Product then consider the implicit image template Url.
        while select ReferenceRecId from productTmpRecIds
            join ecoResProduct where productTmpRecIds.ReferenceRecId == ecoResProduct.RecId
        {
            if (!explicitProductImageAssociation.exists(ecoResProduct.RecId))
            {
                str imageUrl = RetailMediaHelper::getExpandedMediaUrl(productImageTemplateUrl, ecoResProduct.DisplayProductNumber);
                productPrimaryImageUrls.insert(ecoResProduct.RecId, imageUrl);
            }
        }

        //Now, iterate thru the RetailProductImageAssociation Map and populate the productPrimaryImageUrls Map.
        MapIterator productImageAssociationMapIterator = new MapIterator(explicitProductImageAssociation);
        while (productImageAssociationMapIterator.more())
        {
            int64 productRecId = productImageAssociationMapIterator.key();
            RetailProductImageAssociation productImageAssociation = productImageAssociationMapIterator.value();

            if (!productPrimaryImageUrls.exists(productRecId))
            {
                productPrimaryImageUrls.insert(productRecId, productImageAssociation.PrimaryImageUrl());
            }

            productImageAssociationMapIterator.next();
        }

        return productPrimaryImageUrls;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openRetailMediaForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine opens the <c>RetailMedia</c> Form.
    /// </summary>
    /// <param name = "_caller">The <c>FormRun</c> instance. </param>
    /// <param name = "_productRecId">The Product record identifier.</param>
    /// <param name = "_catalog">The catalog record identifier.</param>
    /// <param name = "_internalOrgRecId">The internal org record identifier.</param>
    public static void openRetailMediaForm(FormRun _caller, RefRecId _productRecId, RefRecId _catalog = 0, RetailInternalOrgRefRecId _internalOrgRecId = 0)
    {
        Args args;
        FormRun formRun;

        //Open the RetailMedia form
        args = new Args();
        args.name(formStr(RetailMedia));
        args.caller(_caller);
        str paramValue = strFmt("%1:%2:%3:%4", int642Str(_productRecId), int642Str(_catalog), int642Str(_internalOrgRecId), int642Str(_productRecId));
        args.parm(paramValue);

        if (_caller.inViewMode())
        {
            args.openMode(OpenMode::View);
        }

        formRun = classfactory.formRunClass(args);

        if (formRun)
        {
            formRun.run();
            formRun.wait();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openUploadRetailMediaDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine opens the <c>RetailMediaUploadDialog</c> Form.
    /// </summary>
    /// <param name = "_args">The Form argument.</param>
    /// <param name = "_callerRecId">The caller form record identifier.</param>
    /// <param name = "_productRecId">The Product record identifier.</param>
    /// <param name = "_catalogRecId">The catalog record identifier.</param>
    /// <param name = "_internalOrgRecId">The internal organization record identifier.</param>
    public static void openUploadRetailMediaDialog(Args _args, RefRecId _callerRecId, RefRecId _productRecId = 0, RefRecId _catalogRecId = 0, RefRecId _internalOrgRecId = 0)
    {
        str paramValue = strFmt('%1:%2:%3:%4',
                            int642Str(_callerRecId),
                            int642Str(_catalogRecId),
                            int642Str(_internalOrgRecId),
                            int642Str(_productRecId));

        _args.name(formStr(RetailMediaUploadDialog));
        _args.parm(paramValue);
        formRun formRun = classfactory.formRunClass(_args);

        if (formRun)
        {
            formRun.run();
            formRun.wait();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProductRecIdTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the <c>RetailTmpRecId</c> table from the Product RecId collection.
    /// </summary>
    /// <param name = "_productRecIds">The product record identifier collection.</param>
    /// <returns>The populated RetailTmpRecId table.</returns>
    private static RetailTmpRecId populateProductRecIdTempTable(Set _productRecIds)
    {
        int              i;
        RetailTmpRecId  productRecIdTmptable;
        int              startTime, endTime;

        RecordInsertList productRecIdsToBeInserted = new RecordInsertList(tableNum(RetailTmpRecId), // table id
        false, // skip insert
        false, // skip database log
        false, // skip events
        false, // skip aos validation
        false, // skip RLS validation
        productRecIdTmptable); // buffer where records will be inserted

        SetEnumerator productIdEnumerator = _productRecIds.getEnumerator();
        while (productIdEnumerator.moveNext())
        {
            RefRecId productRecId = productIdEnumerator.current();
            productRecIdTmptable.ReferenceRecId = productRecId;
            productRecIdsToBeInserted.add(productRecIdTmptable);
        }

        productRecIdsToBeInserted.insertDatabase();
        return productRecIdTmptable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileNameByUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the fileName from the url.
    /// </summary>
    /// <param name = "url">The image url.</param>
    /// <returns>The file name.</returns>
    private static str getFileNameByUrl(str url)
    {
        var list = Global::strSplit(url, "/");
        ListIterator iterator = new ListIterator(list);
        str imageFileName = "";
        while (iterator.more())
        {
            imageFileName = iterator.value();
            iterator.next();
        }
        return imageFileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scaleImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine scale the image object by keeping the orignal aspect ratio and using high quality scaling.
    /// </summary>
    /// <param name = "image">The image object to be scaled.</param>
    /// <param name = "maxWidth">The width of the scaled image.</param>
    /// <param name = "maxHeight">The  height of the scaled image.</param>
    /// <returns>The scaled image.</returns>
    private static System.Drawing.Image scaleImage(System.Drawing.Image image, int maxWidth, int maxHeight)
    {
        if (image == null || maxWidth <= 0 || maxHeight <= 0)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        int origWidth = image.get_Width();
        int origHeight = image.get_Height();

        real realOrigWidth = origWidth;
        real realOrigHeight = origHeight;
        real realMaxWidth = maxWidth;
        real realMaxHeight = maxHeight;

        real ratioX = realMaxWidth/realOrigWidth;
        real ratioY = realMaxHeight/realOrigHeight;
        real ratio = min(ratioX, ratioY);

        int newWidth = real2int(realOrigWidth * ratio);
        int newHeight = real2int(realOrigHeight * ratio);

        System.Drawing.Rectangle destRect = new System.Drawing.Rectangle(0, 0, newWidth, newHeight);
        System.Drawing.Bitmap newImage = new System.Drawing.Bitmap(newWidth, newHeight);
        newImage.SetResolution(image.get_HorizontalResolution(), image.get_VerticalResolution());

        using (System.Drawing.Graphics graphics = System.Drawing.Graphics::FromImage(newImage))
        {
            graphics.set_InterpolationMode(System.Drawing.Drawing2D.InterpolationMode::HighQualityBicubic);
            graphics.set_CompositingMode(System.Drawing.Drawing2D.CompositingMode::SourceCopy);
            graphics.set_CompositingQuality(System.Drawing.Drawing2D.CompositingQuality::HighQuality);
            graphics.set_SmoothingMode(System.Drawing.Drawing2D.SmoothingMode::HighQuality);
            graphics.set_PixelOffsetMode(System.Drawing.Drawing2D.PixelOffsetMode::HighQuality);

            using (System.Drawing.Imaging.ImageAttributes wrapMode = new System.Drawing.Imaging.ImageAttributes())
            {
                wrapMode.SetWrapMode(System.Drawing.Drawing2D.WrapMode::TileFlipXY);
                graphics.DrawImage(image, destRect, 0, 0, origWidth, origHeight, System.Drawing.GraphicsUnit::Pixel, wrapMode);
            }
        }

        return newImage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertImageToContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a <c>System.Drawing.Image</c> object into Container.
    /// </summary>
    /// <param name = "image">The image object.</param>
    /// <returns>The container.</returns>
    private static container convertImageToContainer(System.Drawing.Image image)
    {
        using(var memoryStream = new System.IO.MemoryStream())
        {
            image.Save(memoryStream, System.Drawing.Imaging.ImageFormat::Png);
            return Binary::constructFromMemoryStream(memoryStream).getContainer();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDefaultRecordInMediaGallery</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine sets or unsets an image default image.
    /// </summary>
    /// <param name = "resourceId">The media resource Identifier.</param>
    /// <param name = "imageUrl">The image url.</param>
    /// <param name = "isDefault">Is this image to be set as default image.</param>
    /// <param name = "masterEntity">The retail entity type.</param>
    public static void processDefaultRecordInMediaGallery(int resourceId, str imageUrl, NoYes isDefault, RetailMediaMasterEntity masterEntity)
    {
        boolean _forUpdate = true;

        RetailImageResource resource = RetailImageResource::findByResourceId(resourceId, _forUpdate);
        if (resource !=null)
        {
            if (isDefault == NoYes::Yes)
            {
                if (!resource.ResourceBlob && !resource.IsPartialUrl)
                {
                    var fullSizeImage = RetailMediaHelper::getImageByURL(imageUrl);
                    if (fullSizeImage)
                    {
                        System.Drawing.Image mediumImage = RetailMediaHelper::scaleImage(fullSizeImage, OfflineImageWidth, OfflineImageHeight);
                        container binImage = RetailMediaHelper::convertImageToContainer(mediumImage);

                        ttsbegin;
                        resource.ResourceBlob = binImage;
                        resource.update();
                        ttscommit;
                    }
                }
            }
            else
            {
                //find whether the Image is used Default by any other Master Entity.
                if (!RetailMediaAndMasterEntityRelation::IsThisImageUsedAsDefultByOtherMasterEntities(resourceId))
                {
                    ttsbegin;
                    container c;
                    resource.ResourceBlob = c;
                    resource.update();
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStorageSasKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the storage shared access signature key.
    /// </summary>
    /// <returns>The shared access signature key.</returns>
    public static str getStorageSasKey()
    {
        str containerName = RetailMediaHelper::AzureStorageSecuredImagesCategory;
        container result = RetailMediaHelper::getStorageSasKeyDetails(containerName);
        str sasKey = conPeek(result, 3);
        return sasKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStorageSasKeyDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the storage shared access signature key details.
    /// </summary>
    /// <param name = "containerName">The container name.</param>
    /// <returns>The container which contains four values, 1.the result state, 2.error message, 3.shared access signature key, 4.shared access signature key expiration time in UTC.</returns>
    public static container getStorageSasKeyDetails(str containerName)
    {
        container sasKeyDetails = [false, '', '', null];
        int existingSasKeyPolicyNumber;
        boolean isNewRecord = false;

        //revoke the expired sas key.
        var sasKeyRevokingResult = RetailCloudStorageSecurityHelper::revokeExpiredSaskeys(containerName);
        var result = conPeek(sasKeyRevokingResult, 1); //whether the previous method call was successful.
        if (!result)
        {
            sasKeyDetails = [false, conPeek(sasKeyRevokingResult, 2), '', null];
            return sasKeyDetails;
        }

        //Check from cache.
        sasKeyDetails = RetailMediaStorageSasKeyAccessor::getMediaStorageSasKey();
        result = conPeek(sasKeyDetails, 1); //whether the previous method call was successful.
        if (result)
        {
            return sasKeyDetails;
        }

        //Check from DB.
        RetailCloudStorageSecurity storageSecurity;
        System.TimeSpan sasKeyLifeTime = System.TimeSpan::FromHours(RetailSharedParameters::ClxSasKeyLifetimeInHours());
        var currentUtcDateTime = DateTimeUtil::utcNow();
        while select storageSecurity
            where ContainerName == containerName
        {
            var sasKeyExpirationDateTimeInUtc = storageSecurity.SasExpirationDateTimeInUtc;
            int64 sasKeyValidityInSeconds = DateTimeUtil::getDifference(sasKeyExpirationDateTimeInUtc, currentUtcDateTime);
            int sasRecyleWindowInSeconds = RetailSharedParameters::ClxSasKeyRecycleWindowInHours() * 3600;
            existingSasKeyPolicyNumber = str2Int(storageSecurity.SasPolicyName);

            if (sasKeyValidityInSeconds > sasRecyleWindowInSeconds) //valid sas key.
            {
                sasKeyDetails = RetailCloudStorageSecurityHelper::getSasKeyFromClx(containerName, existingSasKeyPolicyNumber, BlobUrlPermission::Read, sasKeyLifeTime, isNewRecord);
            }
        }

        result = conPeek(sasKeyDetails, 1); //whether the previous method call was successful.
        if (result)
        {
            var resultSasKey = conPeek(sasKeyDetails, 3);
            var cacheSasKeyExpirationDateTimeInUtc = DateTimeUtil::utcNow();
            cacheSasKeyExpirationDateTimeInUtc = DateTimeUtil::addHours(cacheSasKeyExpirationDateTimeInUtc, CacheSasKeyExpirationInHours);
            RetailMediaStorageSasKeyAccessor::setMediaStorageSasKey(resultSasKey, cacheSasKeyExpirationDateTimeInUtc);
            return sasKeyDetails;
        }

        //get a new sas key.
        isNewRecord = true;
        sasKeyDetails = RetailCloudStorageSecurityHelper::getSasKeyFromClx(containerName, existingSasKeyPolicyNumber, BlobUrlPermission::Read, sasKeyLifeTime, isNewRecord);
        result = conPeek(sasKeyDetails, 1); //whether the previous method call was successful.
        if (result)
        {
            var resultSasKey = conPeek(sasKeyDetails, 3);
            var cacheSasKeyExpirationDateTimeInUtc = DateTimeUtil::utcNow();
            cacheSasKeyExpirationDateTimeInUtc = DateTimeUtil::addHours(cacheSasKeyExpirationDateTimeInUtc, CacheSasKeyExpirationInHours);
            RetailMediaStorageSasKeyAccessor::setMediaStorageSasKey(resultSasKey, cacheSasKeyExpirationDateTimeInUtc);
            return sasKeyDetails;
        }

        return sasKeyDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpandedMediaUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the media url by expanding the token with the token value.
    /// </summary>
    /// <param name = "tokenizedUrl">The media url which is having token in it.</param>
    /// <param name = "tokenValue">The toekn value.</param>
    /// <returns>The expanded media url.</returns>
    public static str getExpandedMediaUrl(str tokenizedUrl, str tokenValue)
    {
        // Replace the unwanted characters in the token.
        tokenValue = RetailMediaAssociationHelper::getFileName(tokenValue);

        // Replace the language token with the current language id.
        tokenizedUrl = strReplace(tokenizedUrl, RetailMediaHelper::LanguageToken, SystemParameters::getSystemLanguageId());

        // Replace the Catalog filename token with the token value.
        tokenizedUrl = strReplace(tokenizedUrl, RetailMediaHelper::CatalogImageFileName, tokenValue);

        // Replace the Category filename token with the token value.
        tokenizedUrl = strReplace(tokenizedUrl, RetailMediaHelper::CategoryImageFileName, tokenValue);

        // Replace the Customer filename token with the token value.
        tokenizedUrl = strReplace(tokenizedUrl, RetailMediaHelper::CustomerImageFileName, tokenValue);

        // Replace the Worker filename token with the token value.
        tokenizedUrl = strReplace(tokenizedUrl, RetailMediaHelper::workerImageFileName, tokenValue);

        // Replace the Product filename token with the token value.
        tokenizedUrl = strReplace(tokenizedUrl, RetailMediaHelper::ProductImageFileName, tokenValue);

        // Replace the Color filename token with the token value.
        tokenizedUrl = strReplace(tokenizedUrl, RetailMediaHelper::ColorImageFileName, tokenValue);

        // Replace the Size filename token with the token value.
        tokenizedUrl = strReplace(tokenizedUrl, RetailMediaHelper::SizeImageFileName, tokenValue);
 
        // Replace the Style filename token with the token value.
        tokenizedUrl  = strReplace(tokenizedUrl, RetailMediaHelper::StyleImageFileName, tokenValue);

        return tokenizedUrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStoreAndMediaBaseUrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the collection of the retail stores and media base urls.
    /// </summary>
    /// <returns>The collection of the retail stores and media base urls inside the Map.</returns>
    public static Map getStoreAndMediaBaseUrls()
    {
        RetailChannelProfile channelProfile;
        RetailChannelProfileProperty channelProfileProperty;
        RetailChannelTableExt channelTableExt;
        RetailChannelTable channelTable;
        DirPartyTable partyTable;
        Map storeMediaBaseUrls = new Map(Types::String, Types::String);

        while select * from channelProfileProperty
        join  channelProfile
        where channelProfileProperty.ChannelProfile == channelProfile.RecId &&
        channelProfile.ChannelProfileType == RetailChannelProfileType::RetailServer &&
        channelProfileProperty.Key == RetailServerProfilePropertyKey::MediaBaseUrl
        join channelTableExt
        where channelTableExt.ChannelProfile == channelProfile.RecId
        join channelTable
        where channelTableExt.Channel == channelTable.RecId
        join partyTable
        where partyTable.RecId == channelTable.OMOperatingUnitID
        {
            str storeName = partyTable.Name;
            str baseUrl = channelProfileProperty.Value;
            storeMediaBaseUrls.insert(storeName, baseUrl);
        }

        return storeMediaBaseUrls;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailBaseMediaUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the media base url based on passed store name.
    /// </summary>
    /// <param name = "_storeName">The retail store name.</param>
    /// <returns>The media base url.</returns>
    public static str getRetailBaseMediaUrl(str _storeName)
    {
        str baseUrl = '';

        if (_storeName)
        {
            Map storeMediaBaseUrls = RetailMediaHelper::getStoreAndMediaBaseUrls();

            if (storeMediaBaseUrls.exists(_storeName))
            {
                baseUrl = storeMediaBaseUrls.lookup(_storeName);
            }
            else
            {
                warning("@RetailMediaGalleryLabels:NoBaseMediaUrlFound" + _storeName);
            }
        }
        else
        {
            info("@RetailMediaGalleryLabels:NoStoreSelected");
        }

        return baseUrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductImageUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the product image url.
    /// </summary>
    /// <param name = "_imageUrl">The image url.</param>
    /// <param name = "_storeName">The retail store name.</param>
    /// <param name = "_productRecId">The product record identifier.</param>
    /// <returns>The product image url.</returns>
    public static str getProductImageUrl(str _imageUrl, str _storeName, RefRecId _productRecId)
    {
        if (!RetailMediaHelper::isAbsoluteURL(_imageUrl))
        {
            //Partial url.
            EcoResProduct productTable = EcoResProduct::find(_productRecId);
            str fileNameTokenValue = productTable.DisplayProductNumber;

            str expandedFileName = RetailMediaHelper::getExpandedMediaUrl(_imageUrl, fileNameTokenValue);
            str baseUrl = RetailMediaHelper::getRetailBaseMediaUrl(_storeName);

            if (baseUrl && expandedFileName)
            {
                if (!strEndsWith(baseUrl, '/') && (!strStartsWith(expandedFileName, '/')))
                {
                    baseUrl = baseUrl + '/';
                }

                _imageUrl = baseUrl + expandedFileName;
            }
        }

        return _imageUrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultRecordInMediaGrid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default record in the media grid.
    /// </summary>
    /// <param name = "_retailRichMediaTmp">RetailRichMediaTmp table.</param>
    /// <param name = "_selectedRecId">The selected record which has been selected to set as default.</param>
    /// <param name = "_callerRecId">The caller Form entity record Identifier.</param>
    /// <param name = "_callerForm">The caller form in RetailMediaMasterEntity enum value.</param>
    /// <param name = "_catalogRecId">The catalog record Identifier.</param>
    /// <param name = "_internalOrgRecId">The internal organization record Identifier.</param>
    public static void setDefaultRecordInMediaGrid(RetailRichMediaTmp _retailRichMediaTmp, RefRecId _selectedRecId, RefRecId _callerRecId,
                                    RetailMediaMasterEntity _callerForm, RefRecId _catalogRecId = 0, RefRecId _internalOrgRecId = 0)
    {
        //Uncheck or set undefault rest of the records in the grid.
        while select forupdate _retailRichMediaTmp
            where _retailRichMediaTmp.RecId != _selectedRecId && _retailRichMediaTmp.IsDefault == ZeroOrOne::One
        {
            _retailRichMediaTmp.IsDefault = ZeroOrOne::Zero;
            _retailRichMediaTmp.update();

            RetailMediaHelper::updateDefaultRecordInMediaRelationTable(
                            _callerForm,
                            _callerRecId,
                            _retailRichMediaTmp.ImageId,
                            _retailRichMediaTmp.Url,
                            _catalogRecId,
                            _internalOrgRecId,
                            _callerRecId,
                            NoYes::No);
        }

        //Default the selected record.
        select firstonly forupdate _retailRichMediaTmp
            where _retailRichMediaTmp.RecId == _selectedRecId;

        _retailRichMediaTmp.IsDefault = ZeroOrOne::One;
        _retailRichMediaTmp.update();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>