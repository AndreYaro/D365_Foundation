<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGSTRReportRunUIBuilder_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Interface builder for Tax GSTR report.
/// </summary>
public class TaxGSTRReportRunUIBuilder_IN extends SysOperationAutomaticUIBuilder
{
    private DialogField dialogRegNum, dialogErConfiguration;
    private Dialogfield dialogFromDate, dialogToDate, dialogFinancialYear, dialogPeriod, dialogFiscalCalendarId;
    private Dialogfield dialogReturnFilingMonth, dialogReturnFilingQuarter;
    private ERSolutionID erConfiguration;
    private TaxRegistrationNumber_IN regNum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public void getFromDialog()
    {
        super();

        TaxGSTRReportRunContract_IN contract = this.dataContractObject();
        contract.parmErConfiguration(dialogErConfiguration.value());
        contract.parmRegNum(dialogRegNum.value());
        contract.parmFinancialYear(dialogFinancialYear.value());
        contract.parmTaxPeriod(dialogPeriod.value());
        contract.parmFiscalCalendarId(dialogFiscalCalendarId.value());
        contract.parmFromDate(dialogFromDate.value());
        contract.parmToDate(dialogToDate.value());
        contract.parmReturnFilingMonth(dialogReturnFilingMonth.value());
        contract.parmReturnFilingQuarter(dialogReturnFilingQuarter.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDialogField</Name>
				<Source><![CDATA[
    protected DialogField addDialogField(IdentifierName _methodName, Object _dataContract = this.dataContractObject())
    {
        DialogField ret;
        TaxGSTRReportRunContract_IN dataContract = _dataContract;
        

        switch (_methodName)
        {
            case methodStr(TaxGSTRReportRunContract_IN, parmErConfiguration):
                dialogErConfiguration = this.dialog().addFieldValue(extendedTypeStr(ERSolutionID), dataContract.parmErConfiguration());
                dialogErConfiguration.registerOverrideMethod(methodStr(FormReferenceControl, lookupReference),
                    methodStr(TaxGSTRReportRunUIBuilder_IN, erConfigurationReferenceLookup), this);
                dialogErConfiguration.registerOverrideMethod(methodStr(FormReferenceGroupControl, modified),
                    methodStr(TaxGSTRReportRunUIBuilder_IN, erConfigurationModified), this);

                ret = dialogErConfiguration;

                break;

            case methodStr(TaxGSTRReportRunContract_IN, parmRegNum):
                dialogRegNum = this.dialog().addFieldValue(extendedTypeStr(TaxRegistrationNumber_IN), dataContract.parmRegNum());
                dialogRegNum.control().registerOverrideMethod(methodStr(FormStringControl, lookup),
                    methodStr(TaxGSTRReportRunUIBuilder_IN, taxTypeLookup), this);

                ret = dialogRegNum;
                break;

            case methodStr(TaxGSTRReportRunContract_IN, parmFinancialYear):
                dialogFinancialYear = this.dialog().addFieldValue(extendedTypeStr(FinancialYearName), dataContract.parmFinancialYear());
                dialogFinancialYear.control().registerOverrideMethod(methodStr(FormStringControl, lookup),
                    methodStr(TaxGSTRReportRunUIBuilder_IN, financialYearLookup), this);
                dialogFinancialYear.control().registerOverrideMethod(methodStr(FormStringControl, modified),
                    methodStr(TaxGSTRReportRunUIBuilder_IN, financialYearOrTaxPeriodModified), this);

                ret = dialogFinancialYear;
                break;

            case methodStr(TaxGSTRReportRunContract_IN, parmTaxPeriod):
                dialogPeriod = this.dialog().addFieldValue(enumStr(TaxGSTRTaxPeriod_IN), dataContract.parmTaxPeriod());
                dialogPeriod.control().registerOverrideMethod(methodStr(FormComboBoxControl, modified),
                    methodStr(TaxGSTRReportRunUIBuilder_IN, financialYearOrTaxPeriodModified), this);

                ret = dialogPeriod;
                break;

            case methodStr(TaxGSTRReportRunContract_IN, parmFiscalCalendarId):
                dialogFiscalCalendarId = this.dialog().addFieldValue(extendedTypeStr(FiscalCalendarID), dataContract.parmFiscalCalendarId());
                dialogFiscalCalendarId.control().registerOverrideMethod(methodStr(FormStringControl, lookup),
                    methodStr(TaxGSTRReportRunUIBuilder_IN, fiscalCalendarLookup), this);
                dialogFiscalCalendarId.control().registerOverrideMethod(methodStr(FormStringControl, modified),
                    methodStr(TaxGSTRReportRunUIBuilder_IN, fiscalCalendarModified), this);

                ret = dialogFiscalCalendarId;
                break;

            case methodStr(TaxGSTRReportRunContract_IN, parmFromDate):
                dialogFromDate = this.dialog().addFieldValue(extendedTypeStr(FromDate), dataContract.parmFromDate());
                dialogFromDate.control().registerOverrideMethod(methodStr(FormStringControl, modified),
                    methodStr(TaxGSTRReportRunUIBuilder_IN, fromDateOrToDateModified), this);

                ret = dialogFromDate;
                break;

            case methodStr(TaxGSTRReportRunContract_IN, parmToDate):
                dialogToDate = this.dialog().addFieldValue(extendedTypeStr(ToDate), dataContract.parmToDate());
                dialogToDate.control().registerOverrideMethod(methodStr(FormStringControl, modified),
                    methodStr(TaxGSTRReportRunUIBuilder_IN, fromDateOrToDateModified), this);

                ret = dialogToDate;
                break;

            case methodStr(TaxGSTRReportRunContract_IN, parmReturnFilingMonth):
                dialogReturnFilingMonth = this.dialog().addFieldValue(extendedTypeStr(TaxGSTRReturnFilingMonth_IN), dataContract.parmReturnFilingMonth());

                ret = dialogToDate;
                break;

            case methodStr(TaxGSTRReportRunContract_IN, parmReturnFilingQuarter):
                dialogReturnFilingQuarter    = this.dialog().addFieldValue(extendedTypeStr(TaxGSTRReturnFilingQuarter_IN), dataContract.parmReturnFilingQuarter());

                ret = dialogToDate;
                break;

            default :
                ret = super(_methodName, _dataContract);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>erConfigurationReferenceLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs lookup to find available report configurations.
    /// </summary>
    /// <param name = "_formControl">Control to show search results/</param>
    /// <returns>
    /// Lookup results.
    /// </returns>
    private Common erConfigurationReferenceLookup(FormReferenceControl _formControl)
    {
        Query query = new Query();

        TaxSolutionScopeSetup taxSolutionScopeSetup = TaxSolutionScopeSetup::findByLedger(Ledger::current());

        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(ERSolutionTable));
        queryBuildDataSource.relations(true);
        queryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(TaxSolutionReportConfigurations));
        queryBuildDataSource.relations(true);

        SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(TaxSolutionReportConfigurations, TaxSolutionScope)).value(queryValue(taxSolutionScopeSetup.TaxSolutionScope));
        SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(TaxSolutionReportConfigurations, Active)).value(queryValue(NoYes::Yes));

        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tablenum(ERSolutionTable), _formControl);
        sysTableLookup.addLookupfield(fieldNum(ERSolutionTable, Name));
        sysTableLookup.addLookupfield(fieldNum(ERSolutionTable, Description));
        sysTableLookup.addSelectionField(fieldNum(ERSolutionTable, Name));
        sysTableLookup.parmQuery(query);

        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxTypeLookup</Name>
				<Source><![CDATA[
    private void taxTypeLookup(FormControl _formControl)
    {
        Query query = new Query();

        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(TaxRegistrationNumbers_IN));
        queryBuildDataSource.addRange(fieldNum(TaxRegistrationNumbers_IN, TaxType)).value(queryValue(TaxType_IN::GST));
        queryBuildDataSource.addRange(fieldNum(TaxRegistrationNumbers_IN, RegistrationType)).value(queryValue(TaxRegistrationType_IN::Company));

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(TaxRegistrationNumbers_IN), _formControl);
        sysTableLookup.addLookupfield(fieldNum(TaxRegistrationNumbers_IN, RegistrationNumber), true);
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalCalendarLookup</Name>
				<Source><![CDATA[
    private void fiscalCalendarLookup(FormControl _formControl)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(FiscalCalendar), _formControl);
        sysTableLookup.addLookupfield(fieldNum(FiscalCalendar, CalendarId), true);
        sysTableLookup.addLookupfield(fieldNum(FiscalCalendar, Description));
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalCalendarModified</Name>
				<Source><![CDATA[
    private boolean fiscalCalendarModified(FormControl _formControl)
    {
        dialogFinancialYear.value('');

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendarForFinancialYear</Name>
				<Source><![CDATA[
    private FiscalCalendarID getCalendarForFinancialYear()
    {
        if (!dialogFiscalCalendarId.value())
        {
            dialogFiscalCalendarId.value(TaxGSTRReportPurchaseRegisterHelper::getDefaultCalendarForFinancialYear());
        }

        return dialogFiscalCalendarId.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>financialYearLookup</Name>
				<Source><![CDATA[
    private void financialYearLookup(FormControl _formControl)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsFiscalYear = query.addDataSource(tableNum(TaxGSTRFinancialYear_IN));

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(TaxGSTRFinancialYear_IN), _formControl);
        FiscalCalendarID calendarID = this.getCalendarForFinancialYear();
        qbdsFiscalYear.addRange(fieldNum(TaxGSTRFinancialYear_IN, CalendarId)).value(queryValue(calendarID));
        sysTableLookup.addLookupfield(fieldNum(TaxGSTRFinancialYear_IN, FiscalYear), true);
        sysTableLookup.addLookupfield(fieldNum(TaxGSTRFinancialYear_IN, Name));
        sysTableLookup.addLookupfield(fieldNum(TaxGSTRFinancialYear_IN, StartDate));
        sysTableLookup.addLookupfield(fieldNum(TaxGSTRFinancialYear_IN, EndDate));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>financialYearOrTaxPeriodModified</Name>
				<Source><![CDATA[
    private boolean financialYearOrTaxPeriodModified(FormControl _formControl)
    {
        this.updateFromDateAndToDate();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDateOrToDateModified</Name>
				<Source><![CDATA[
    private boolean fromDateOrToDateModified(FormControl _formControl)
    {
        this.updateReturnFilingMonthAndReturnFilingQuarter();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReturnFilingMonthAndReturnFilingQuarter</Name>
				<Source><![CDATA[
    private void updateReturnFilingMonthAndReturnFilingQuarter()
    {
        FromDate fromDate = dialogFromDate.value();
        ToDate toDate = dialogToDate.value();
        str quarter;

        if (fromDate && toDate && year(fromDate) == year(toDate))
        {
            if (mthOfYr(fromDate) == mthOfYr(toDate))
            {
                dialogReturnFilingMonth.value(strFmt('%1/%2', mthOfYr(fromDate), year(fromDate)));
                dialogReturnFilingQuarter.value(strFmt(''));
            }
            else if (date2Qtr(fromDate) == date2Qtr(toDate))
            {
                switch(date2Qtr(fromDate))
                {
                    case 1:
                        quarter = 'Jan-Mar';
                        break;
                    case 2:
                        quarter = 'Apr-Jun';
                        break;
                    case 3:
                        quarter = 'Jul-Sep';
                        break;
                    case 4:
                        quarter = 'Oct-Dec';
                        break;
                }
                dialogReturnFilingMonth.value('');
                dialogReturnFilingQuarter.value(strFmt('%1 %2', quarter, year(fromDate)));
            }
            else
            {
                dialogReturnFilingMonth.value('');
                dialogReturnFilingQuarter.value(strFmt(''));
            }
        }
        else
        {
            dialogReturnFilingMonth.value('');
            dialogReturnFilingQuarter.value(strFmt(''));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromDateAndToDate</Name>
				<Source><![CDATA[
    private void updateFromDateAndToDate()
    {
        TaxGSTRTaxPeriod_IN period = dialogPeriod.value();
        FiscalYearName financialYear = dialogFinancialYear.value();
        FiscalCalendarID fiscalCalendarId = dialogFiscalCalendarId.value();

        TransDate fromDate, toDate;
        [fromDate, toDate] = TaxGSTRReportPurchaseRegisterHelper::getFromDateAndToDate(fiscalCalendarId, financialYear, period);

        dialogFromDate.value(fromDate);
        dialogToDate.value(toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportClass</Name>
				<Source><![CDATA[
    private TaxGSTRReportControllerBase_IN getReportClass(ERSolutionTable _solution)
    {
        TaxSolutionReportConfigurations reportConfiguration = TaxSolutionReportConfigurations::find(
            TaxSolutionScopeSetup::findByLedger(Ledger::current()).TaxSolutionScope, _solution.RecId);

        DictClass dictClass = new DictClass(
            TaxGSTRReportingControllers_IN::find(reportConfiguration.ReportController).ReportControllerClassID);

        return dictClass.makeObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>erConfigurationModified</Name>
				<Source><![CDATA[
    private boolean erConfigurationModified(FormReferenceGroupControl _control)
    {
        this.enableControl();
        return _control.modified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    public void postBuild()
    {
        this.enableControl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableControl</Name>
				<Source><![CDATA[
    private void enableControl()
    {
        ERSolutionTable solution = ERSolutionTable::find(dialogErConfiguration.value());
        TaxGSTRReportControllerBase_IN reportController;
        if (solution)
        {
            reportController = this.getReportClass(solution);
        }

        boolean isPurchaseRegisterReport = reportController is TaxGSTRReportControllerPurchaseRegister_IN;

        dialogFromDate.enabled(!isPurchaseRegisterReport);
        dialogToDate.enabled(!isPurchaseRegisterReport);
        dialogFiscalCalendarId.visible(isPurchaseRegisterReport);
        dialogFinancialYear.visible(isPurchaseRegisterReport);
        dialogPeriod.visible(isPurchaseRegisterReport);

        boolean isGSTRReportForNewReturn = reportController is TaxGSTRReportController1New_IN
            || reportController is TaxGSTRReportController2New_IN;

        dialogReturnFilingMonth.visible(isGSTRReportForNewReturn);
        dialogReturnFilingMonth.enabled(!isGSTRReportForNewReturn);
        dialogReturnFilingQuarter.visible(isGSTRReportForNewReturn);
        dialogReturnFilingQuarter.enabled(!isGSTRReportForNewReturn);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>