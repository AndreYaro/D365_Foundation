<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerAllocationRulesDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerAllocationRulesDP</c> class fetches records for the <c>LedgerAllocationRules</c> SSRS
///    report.
/// </summary>
[
    SRSReportQueryAttribute(QueryStr(LedgerAllocationRules))
]
public class LedgerAllocationRulesDP extends SRSReportDataProviderBase
{
    LedgerAllocationRulesTmp ledgerAllocationRulesTmp;
    LedgerAllocationRule ledgerAllocationRule;
    LedgerAllocationRuleSource ledgerAllocationRuleSource;
    LedgerAllocationRuleDestination ledgerAllocationRuleDestination;
    DefaultDimensionView defaultDimensionView;
    MainAccountLedgerDimensionView mainAccountLedgerDimensionView;
    DimensionAttributeValueCombination dimensionAttributeValueCombination;
    DimensionAttributeValueSetItem dimensionAttributeValueSetItem;
    DimensionAttribute destinationDimensionAttribute;
    DimensionAttribute sourceDimensionAttribute;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerAllocationRulesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the actual data for the report from the <c>LedgerAllocationRulesTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>LedgerAllocationRulesTmp</c> temporary table.
    /// </returns>
    [
        SrsReportDataSetAttribute(tablestr(LedgerAllocationRulesTmp))
    ]
    public ledgerAllocationRulesTmp getLedgerAllocationRulesTmp()
    {
        select ledgerAllocationRulesTmp;
        return ledgerAllocationRulesTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerAllocationRulesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into the <c>LedgerAllocationRulesTmp</c> temporary table.
    /// </summary>
    private void insertLedgerAllocationRulesTmp()
    {
        ledgerAllocationRulesTmp.RuleId = ledgerAllocationRule.RuleId;
        ledgerAllocationRulesTmp.AllocationDescription = ledgerAllocationRule.AllocationDescription;
        ledgerAllocationRulesTmp.EffectiveStartDate = ledgerAllocationRule.EffectiveStartDate;
        ledgerAllocationRulesTmp.EffectiveEndDate = ledgerAllocationRule.EffectiveEndDate;
        ledgerAllocationRulesTmp.AllocationActive = ledgerAllocationRule.AllocationActive;
        ledgerAllocationRulesTmp.DateLastRun = ledgerAllocationRule.DateLastRun;
        ledgerAllocationRulesTmp.IntercompanyRule = ledgerAllocationRule.IntercompanyRule;
        ledgerAllocationRulesTmp.AllocationMethod = ledgerAllocationRule.AllocationMethod;
        ledgerAllocationRulesTmp.CalculationType = ledgerAllocationRule.CalculationType;
        ledgerAllocationRulesTmp.CalculationAmount = ledgerAllocationRule.CalculationAmount;
        ledgerAllocationRulesTmp.DataSource = ledgerAllocationRule.DataSource;
        ledgerAllocationRulesTmp.FixedValue = ledgerAllocationRule.FixedValue;
        ledgerAllocationRulesTmp.DateInterval = ledgerAllocationRule.DateInterval;
        ledgerAllocationRulesTmp.JournalName = ledgerAllocationRule.JournalName;
        ledgerAllocationRulesTmp.Name = ledgerJournalName::find(ledgerAllocationRule.JournalName).Name;
        ledgerAllocationRulesTmp.OffsetAccountFrom = ledgerAllocationRule.OffsetAccountFrom;
        ledgerAllocationRulesTmp.OffsetDimensionFrom = ledgerAllocationRule.OffsetDimensionFrom;
        ledgerAllocationRulesTmp.LedgerAllocationRuleSourceRecId = ledgerAllocationRuleSource.RecId;
        ledgerAllocationRulesTmp.FieldSetting = ledgerAllocationRuleSource.FieldSetting;
        ledgerAllocationRulesTmp.SourceCriteria = ledgerAllocationRuleSource.SourceCriteria;
        ledgerAllocationRulesTmp.SourceDimensionAttributeName = sourceDimensionAttribute.localizedName();
        ledgerAllocationRulesTmp.LedgerAllocationRuleDestinationRecId = ledgerAllocationRuleDestination.RecId;
        ledgerAllocationRulesTmp.BasisId = ledgerAllocationRuleDestination.BasisId;
        ledgerAllocationRulesTmp.FixedWeight =  ledgerAllocationRuleDestination.FixedWeight;
        ledgerAllocationRulesTmp.FixedPercent = ledgerAllocationRuleDestination.FixedPercent;
        ledgerAllocationRulesTmp.ToCompany = ledgerAllocationRuleDestination.ToCompany;
        ledgerAllocationRulesTmp.DestinationAccountFrom = ledgerAllocationRule.DestinationAccountFrom;
        ledgerAllocationRulesTmp.DestinationDimensionFrom = ledgerAllocationRule.DestinationDimensionFrom;
        ledgerAllocationRulesTmp.DimName = defaultDimensionView.DisplayValue;
        ledgerAllocationRulesTmp.DestinationDimName = dimensionAttributeValueSetItem.DisplayValue;
        ledgerAllocationRulesTmp.OffsetAccount = mainAccountLedgerDimensionView.MainAccount;
        ledgerAllocationRulesTmp.DestinationAccount = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerAllocationRuleDestination.ToLedgerDimension);
        ledgerAllocationRulesTmp.NameDefaultDimension = defaultDimensionView.Name;
        ledgerAllocationRulesTmp.NameDestinationDefaultDimension = destinationDimensionAttribute.localizedName();

        ledgerAllocationRulesTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the records.
    /// </summary>
    public void processReport()
    {
        QueryRun queryRun;
        Query query = new Query(this.parmQuery());

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            ledgerAllocationRule = queryRun.get(tablenum(LedgerAllocationRule));
            ledgerAllocationRuleSource = queryRun.get(tablenum(LedgerAllocationRuleSource));
            ledgerAllocationRuleDestination = queryRun.get(tablenum(LedgerAllocationRuleDestination));
            defaultDimensionView = queryRun.get(tablenum(DefaultDimensionView));
            mainAccountLedgerDimensionView = queryRun.get(tablenum(MainAccountLedgerDimensionView));
            dimensionAttributeValueSetItem = queryRun.get(tablenum(DimensionAttributeValueSetItem));
            destinationDimensionAttribute = queryRun.query().dataSourceName(identifierStr(DimDest)).getNo();
            sourceDimensionAttribute = queryRun.query().dataSourceName(identifierStr(DimensionAttribute_Source)).getNo();

            this.insertLedgerAllocationRulesTmp();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
