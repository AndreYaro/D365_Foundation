<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedDRCSTlFileValidation_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FBSpedDRCSTlFileValidation_BR</c> class sends the SPED DRCST file to the web validation tool.
/// </summary>
public class FBSpedDRCSTlFileValidation_BR
{
    protected FBSpedDRCSTFileContract_BR contract;

    private str spedFileInBase64;
    private FBBookingPeriod_BR fbBookingPeriod;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    public FBSpedDRCSTFileContract_BR parmContract(FBSpedDRCSTFileContract_BR _contract = contract)
    {
        contract = _contract;
        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public void validate()
    {
        fbBookingPeriod = contract.parmBookingPeriod();

        this.prepareSpedFile();
        this.sendSpedFile();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareSpedFile</Name>
				<Source><![CDATA[
    private void prepareSpedFile()
    {
        try
        {
            container con;
            using (System.IO.Stream spedFileText = this.getSpedFileFromAttachment())
            {
                using (System.IO.MemoryStream memoryStream = new System.IO.MemoryStream())
                {
                    using (System.IO.Compression.ZipArchive archive = new System.IO.Compression.ZipArchive(memoryStream, System.IO.Compression.ZipArchiveMode::Create, true))
                    {
                        System.IO.Compression.ZipArchiveEntry demoFile = archive.CreateEntry(System.IO.Path::GetFileNameWithoutExtension(contract.parmSpedFileName()) + '.txt');

                        using (System.IO.Stream entryStream = demoFile.Open())
                        {
                            using (System.IO.StreamWriter streamWriter = new System.IO.StreamWriter(entryStream))
                            {
                                spedFileText.CopyTo(streamWriter.BaseStream);
                            }
                        }
                    }

                    con = Binary::constructFromMemoryStream(memoryStream).getContainer();
                }
            }

            BinData bindata = new BinData();
            bindata.setData(con);
            spedFileInBase64 = bindata.base64Encode();
        }
        catch
        {
            throw error("@FiscalBooks_SpedDRCST:ValidationToolErrorPreparingFile");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendSpedFile</Name>
				<Source><![CDATA[
    private void sendSpedFile()
    {
        try
        {
            RetailWebRequest webRequest = this.getWebRequest();
            RetailCommonWebAPI webApi = RetailCommonWebAPI::construct();
            RetailWebResponse webResponse = webApi.getResponse(webRequest);
            str responseData = webResponse.parmData();

            this.saveResponse(responseData);

            if (webResponse.parmHttpStatus() == 200)
            {
                str resultCode = this.getResultCode(responseData);
                info(strFmt("@FiscalBooks_SpedDRCST:ValidationToolResultCode", resultCode));
            }
            else
            {
                warning(strFmt("@FiscalBooks_SpedDRCST:ValidationToolHTTPStatusCode", webResponse.parmHttpStatus()));
            }
        }
        catch (Exception::CLRError)
        {
            error("@FiscalBooks_SpedDRCST:ValidationToolErrorSendingFile");

            System.Exception ex = ClrInterop::getLastException();
            if (ex != null)
            {
                ex = ex.get_InnerException();
                if (ex != null)
                {
                    error(ex.ToString());
                }
            }
        }
        catch
        {
            throw error("@FiscalBooks_SpedDRCST:ValidationToolErrorSendingFile");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWebRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the object <c>RetailWebRequest</c> prepared for sending to the validation tool.
    /// </summary>
    /// <returns>
    /// Object <c>RetailWebRequest</c>.
    /// </returns>
    protected RetailWebRequest getWebRequest()
    {
        FBSpedDRCSTSetupParameters_BR parameters = FBSpedDRCSTSetupParameters_BR::findByFiscalEstablishmentId(
            fbBookingPeriod.FiscalEstablishmentId,
            fbBookingPeriod.FiscalEstablishmentDataArea);

        URL url = strLTrim(parameters.URL);
        FBSpedRequestHeader_BR header = strLTrim(parameters.RequestHeader);
        str method = 'POST';
        str contentType = @'application/json';
        System.Text.UTF8Encoding encoding = new System.Text.UTF8Encoding();

        RetailWebRequest webRequest = RetailWebRequest::newUrl(url);
        webRequest.parmMethod(method);
        webRequest.parmHeader(header);
        webRequest.parmContentType(contentType);
        webRequest.setContentBytes(encoding.GetBytes(@'"' + spedFileInBase64 + @'"'));

        return webRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResultCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the result code after processes response received from the validation tool.
    /// </summary>
    /// <param name="_responseData">
    /// The response received from the validation tool.
    /// </param>
    /// <returns>
    /// The result code.
    /// </returns>
    public str getResultCode(str _responseData)
    {
        str resultCode;

        try
        {
            System.Web.Script.Serialization.JavaScriptSerializer jsonSerializer = new System.Web.Script.Serialization.JavaScriptSerializer();
            System.Collections.IDictionary jsonObject = jsonSerializer.DeserializeObject(_responseData);

            if (jsonObject != null)
            {
                str jsonStrKey;
                System.Collections.IDictionaryEnumerator jsonObjectEnumerator = jsonObject.GetEnumerator();

                while (jsonObjectEnumerator.MoveNext() && !resultCode)
                {
                    jsonStrKey = jsonObjectEnumerator.get_Key();

                    if (jsonStrKey == 'ResultCode')
                    {
                        resultCode = CLRInterop::getAnyTypeForObject(jsonObjectEnumerator.get_Value());
                    }
                }
            }
        }
        catch (Exception::CLRError)
        {
            error("@FiscalBooks_SpedDRCST:ValidationToolErrorParsingResponse");

            System.Exception ex = ClrInterop::getLastException();
            if (ex != null)
            {
                ex = ex.get_InnerException();
                if (ex != null)
                {
                    error(ex.ToString());
                }
            }
        }
        catch
        {
            throw error("@FiscalBooks_SpedDRCST:ValidationToolErrorParsingResponse");
        }

        return resultCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpedFileFromAttachment</Name>
				<Source><![CDATA[
    private System.IO.Stream getSpedFileFromAttachment()
    {
        DocuRef docuRef;
        select firstonly crosscompany docuRef
            order by CreatedDateTime desc
            where docuRef.RefTableId == fbBookingPeriod.TableId
                && docuRef.RefRecId == fbBookingPeriod.RecId
                && docuRef.Name like strFmt('%1*', subStr(System.IO.Path::GetFileNameWithoutExtension(contract.parmSpedFileName()), 1, 59));

        System.IO.Stream streamDoc;
        if (docuRef)
        {
            streamDoc = this.getStream(docuRef);
        }
        else
        {
            throw error(strFmt("@FiscalBooks_SpedDRCST:ValidationToolErrorFileNotFound", fbBookingPeriod.PeriodMonth, fbBookingPeriod.PeriodYear, fbBookingPeriod.FiscalEstablishmentId));
        }

        return streamDoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStream</Name>
				<Source><![CDATA[
    private System.IO.Stream getStream(DocuRef _ref)
    {
        System.IO.Stream attachmentStream = null;

        if (_ref.isValueAttached())
        {
            DocuValue docValue = _ref.docuValue();

            var storageProvider = docValue.getStorageProvider();

            if (storageProvider != null)
            {
                var docContents = storageProvider.GetFile(docValue.createLocation());
                attachmentStream = docContents.Content;
            }
            else
            {
                throw error("@ApplicationFoundation:Docu_UnsupportedStorageType");
            }
        }

        return attachmentStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveResponse</Name>
				<Source><![CDATA[
    private void saveResponse(str _responseData)
    {
        if (_responseData)
        {
            str responseNamePrefix = 'respuesta';
            DocuRef oldDocuRefResponse;

            delete_from oldDocuRefResponse
                where oldDocuRefResponse.RefTableId == fbBookingPeriod.TableId
                    && oldDocuRefResponse.RefRecId == fbBookingPeriod.RecId
                    && oldDocuRefResponse.Name like strFmt('%1*', responseNamePrefix);

            using (System.IO.MemoryStream memoryStream = new System.IO.MemoryStream(System.Text.Encoding::get_UTF8().GetBytes(_responseData)))
            {
                Filename fileName = strFmt('%1_%2.%3', responseNamePrefix, System.IO.Path::GetFileNameWithoutExtension(contract.parmSpedFileName()), 'json');
                ERObjectsFactory::createDocuManagement().insertFileWithOtherDocuType(fbBookingPeriod, memoryStream, fileName, fileName);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>