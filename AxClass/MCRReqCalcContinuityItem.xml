<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRReqCalcContinuityItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRReqCalcContinuityItem</c> does
/// the calculations for continuity piece of
/// master planning.
/// </summary>
public class MCRReqCalcContinuityItem extends ReqCalc implements BatchRetryable
{
    ItemId itemId;

    #DEFINE.CurrentVersion(3)

    #LOCALMACRO.CurrentList
        ItemId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return strFmt("@MCR31331", itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSafetyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates safety requirement transaction based on the passed parameters.
    /// </summary>
    /// <param name="_setupDim">
    /// The <c>ReqSetupDim</c> object used to create the safety requirement.
    /// </param>
    /// <param name="_fromCoverage">
    /// A boolean that determins whether form coverage is needed.
    /// </param>
    protected void createSafetyInvent(
        ReqSetupDim     _setupDim,
        boolean         _fromCoverage
        )
    {
        if (_setupDim.covRule() == ReqCovType::MinMax)
        {
            super(_setupDim, _fromCoverage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Dialog of request calculate continuity item.
    /// </summary>
    /// <returns>The dialog object.</returns>
    public Object dialog()
    {
        dialog = super();
        dflReqPlanId = dialog.addField(extendedTypeStr(MCRReqPlanIdContinuity));
        dflReqPlanId.value(reqPlanId);
        this.dialogQueryButton();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogQueryButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the dialog query button.
    /// </summary>
    protected void dialogQueryButton()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        reqPlanId = dflReqPlanId.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReqLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initilizes the <c>RecCalc</c> class log.
    /// </summary>
    protected void initReqLog()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the relevant data from the <c>ReqSetup</c> object.
    /// </summary>
    protected void insertData()
    {
        ReqSetup        setup;

        setup = reqPlanData.newReqSetup(itemId);

        if (setup.mustItemReqBeCreated())
        {
            setPrefix(fieldLabelValue(tableNum(InventTable), fieldNum(InventTable, ItemId), itemId));
            this.updateItemLock(itemId);

            this.deleteItemRequirement(setup);
            this.addItem2ReqTransCache(itemId, false);

            this.insertItemSafetyInvent(setup);
            this.mcrinsertItemContinuityInvent(setup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>safetyStockDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets today's date on the <c>ReqSetup</c> object.
    /// </summary>
    /// <param name="setupDim">
    /// The <c>ReqSetupDim</c> object to be passed along to the parent method.
    /// </param>
    /// <returns>
    /// The results of the parent method.
    /// </returns>
    protected TransDate safetyStockDate(ReqSetupDim     setupDim)
    {
        if (setupDim.covRule() == ReqCovType::MinMax)
        {
            return reqPlanData.todaysdate();
        }

        return super(setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version        = conPeek(packedClass, 1);
        container       base;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = packedClass;
                super(base);
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReqTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the transaction.
    /// </summary>
    /// <param name="_itemId">
    /// The item on the transaction for which this method updates.
    /// </param>
    protected void updateReqTransUpdate(ItemId _itemId)
    {
           // nothing to update
    }

]]></Source>
			</Method>
			<Method>
				<Name>useCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the maximum value of the enumeration <c>ReqUseCache</c>, denoting that the operation
    /// should use the maximum amount of cache.
    /// </summary>
    /// <returns>
    /// The maximum amount of cache to use.
    /// </returns>
    public ReqUseCache useCache()
    {
        return ReqUseCache::Maximum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the item and <c>MCRReqPlanContinuity</c> record exisats.
    /// </summary>
    /// <param name="calledFrom">
    /// The calling object of this method; optional.
    /// </param>
    /// <returns>
    /// true if the item and <c>MCRReqPlanContinuity</c> record exists; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        if (!itemId)
            return checkFailed("@SYS23094");

        if (!MCRReqPlanContinuity::find(this.parmReqPlanId()).RecId)
            return checkFailed(strFmt("@MCR31332", this.parmReqPlanId()));

        return super(calledFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static MCRReqCalcContinuityItem construct()
    {
        return new MCRReqCalcContinuityItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@MCR12105";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        #OCCRetryCount
        ItemId                      itemId;
        MCRReqCalcContinuityItem     mcrReqCalcContinuityItem;
        ReqPlanId                   reqPlanId;
        ReqTransForm                reqTransForm;

        itemId    = ReqCalc::argsItemId(args);
        reqPlanId = ReqCalc::argsReqPlanId(args);

        if (!reqPlanId)
            reqPlanId = ReqParameters::find().MCRCurrentReqPlanIdContinuity;

        if (!itemId)
            throw error(strFmt("@SYS25516", funcName()));

        mcrReqCalcContinuityItem = MCRReqCalcContinuityItem::newItemId(itemId, reqPlanId);

        if (!mcrReqCalcContinuityItem.prompt())
            return;

        try
        {
            ttsBegin;
            mcrReqCalcContinuityItem.runOperation();
            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        if (args.caller().name() == formStr(ReqTransOverview))
        {
            reqTransForm =  args.caller().reqTransForm();
            reqTransForm.doResearch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the class <c>MCRReqCalcContinuityItem</c> and sets relevant data.
    /// </summary>
    /// <param name="_itemId">
    /// The item to be set on the newly constructed <c>MCRReqCalcContinuityItem</c> class.
    /// </param>
    /// <param name="_reqPlanIdContinuity">
    /// The ID of the continuity plan to be set on the newly constructed <c>MCRReqCalcContinuityItem</c> class.
    /// </param>
    /// <returns>
    /// An instance of the newly constructed <c>MCRReqCalcContinuityItem</c> class.
    /// </returns>
    public static MCRReqCalcContinuityItem newItemId(ItemId _itemId, MCRReqPlanIdContinuity _reqPlanIdContinuity)
    {
        MCRReqCalcContinuityItem mcrReqCalcContinuityItem  = MCRReqCalcContinuityItem::construct();
        mcrReqCalcContinuityItem.getLast();
        mcrReqCalcContinuityItem.parmItemId(_itemId);
        mcrReqCalcContinuityItem.parmReqPlanId(_reqPlanIdContinuity);
        mcrReqCalcContinuityItem.parmReqCalcUpdate(ReqCalcUpdate::Regeneration);
        mcrReqCalcContinuityItem.parmAutoReserveCoverage(false);

        return mcrReqCalcContinuityItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>