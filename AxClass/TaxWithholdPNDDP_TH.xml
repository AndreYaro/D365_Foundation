<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdPNDDP_TH</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxWithholdPNDDP</c> class is the report data provider class for the
///    <c>TaxWithholdPND</c> report.
/// </summary>
[SRSReportParameterAttribute(classStr(TaxWithholdPNDContract_TH))]
class TaxWithholdPNDDP_TH extends SRSReportDataProviderBase
{
    TaxWithholdPNDTmpHeader_TH     taxWithholdPNDTmpHeader;
    TaxWithholdPNDTmpLine_TH       taxWithholdPNDTmpLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates query for report based on parameters.
    /// </summary>
    /// <returns>
    /// The query based on parameters.
    /// </returns>
    protected Query buildQuery()
    {
        Query                           query = new Query();
        QueryBuildDataSource            qbds;
        TaxWithholdPNDContract_TH       contract        = this.getContract();
        TaxWithholdCommonContract_TH    commonContract  = contract.parmCommonContract();
        TaxWithholdCode                 taxWithholdCode = commonContract.parmTaxWithholdCode();
        Voucher                         voucher         = commonContract.parmVoucher();
        TaxBranchCode                   taxBranchCode   = commonContract.parmTaxBranchCode();
        TaxWithholdReportLayout_TH      pndType         = contract.parmPNDType();

        qbds = query.addDataSource(tableNum(TaxWithholdTrans));
        qbds.addSortField(fieldNum(TaxWithholdTrans, TransDate), SortOrder::Ascending);
        qbds.addRange(fieldNum(TaxWithholdTrans, TransDate)).value(SysQuery::range(commonContract.parmFromDate(), commonContract.parmToDate()));
        qbds.addRange(fieldNum(TaxWithholdTrans, Posted)).value(SysQuery::value(NoYes::Yes));
        if (taxWithholdCode)
        {
            qbds.addRange(fieldNum(TaxWithholdTrans, TaxWithholdCode)).value(SysQuery::value(taxWithholdCode));
        }
        if (voucher)
        {
            qbds.addRange(fieldNum(TaxWithholdTrans, Voucher)).value(SysQuery::value(voucher));
        }

        qbds = query.dataSourceTable(tableNum(TaxWithholdTrans));
        qbds = qbds.addDataSource(tableNum(TaxWithholdTransExtensionTH));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.relations(false);
        qbds.addLink(fieldNum(TaxWithholdTrans, RecId), fieldNum(TaxWithholdTransExtensionTH, TaxWithholdTrans));
        qbds.addRange(fieldNum(TaxWithholdTransExtensionTH, HideInReports)).value(SysQuery::value(NoYes::No));

        qbds = query.dataSourceTable(tableNum(TaxWithholdTransExtensionTH));
        qbds = qbds.addDataSource(tableNum(LedgerJournalTrans));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.relations(false);
        qbds.addLink(fieldNum(TaxWithholdTransExtensionTH, LedgerJournalTrans), fieldNum(LedgerJournalTrans, RecId));

        qbds = query.dataSourceTable(tableNum(TaxWithholdTrans));
        qbds = qbds.addDataSource(tableNum(VendTrans));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.relations(false);
        qbds.addLink(fieldNum(TaxWithholdTrans, VendTransInvoiceId), fieldNum(VendTrans, RecId));

        qbds = query.dataSourceTable(tableNum(VendTrans));
        qbds = qbds.addDataSource(tableNum(VendInvoiceJour));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);

        qbds = query.dataSourceTable(tableNum(VendInvoiceJour));
        qbds = qbds.addDataSource(tableNum(DimensionAttributeValueSetTaxBranchView));
        qbds.relations(false);
        qbds.addLink(fieldNum(VendInvoiceJour, DefaultDimension), fieldNum(DimensionAttributeValueSetTaxBranchView, DimensionAttributeValueSet));
        if (taxBranchCode)
        {
            qbds.joinMode(JoinMode::InnerJoin);
            qbds.addRange(fieldNum(DimensionAttributeValueSetTaxBranchView, DisplayValue)).value(SysQuery::value(taxBranchCode));
        }
        else
        {
            // Incase tax branch code on the transaction is empty, so use OuterJoin
            qbds.joinMode(JoinMode::OuterJoin);
        }

        qbds = query.dataSourceTable(tableNum(TaxWithholdTrans));
        qbds = qbds.addDataSource(tableNum(TaxWithholdReportSetup_TH));
        qbds.relations(false);
        qbds.addLink(fieldNum(TaxWithholdTrans, VendorType_TH), fieldNum(TaxWithholdReportSetup_TH, TaxWithholdVendorType_TH));
        qbds.addLink(fieldNum(TaxWithholdTrans, TaxWithholdItemGroupHeading_TH), fieldNum(TaxWithholdReportSetup_TH, TaxWithholdItemGroupHeading_TH));

        if (isFlightEnabled(LocalizationFlights::TaxWithholdPND_UseNoExistsPND2ForFiltering))
        {
            qbds.joinMode(JoinMode::NoExistsJoin);
            qbds.addRange(fieldNum(TaxWithholdReportSetup_TH, TaxWithholdReportLayout_TH)).value(SysQuery::value(TaxWithholdReportLayout_TH::ThaiPND2));
        }
        else
        {
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.addRange(fieldNum(TaxWithholdReportSetup_TH, TaxWithholdReportLayout_TH)).value(SysQuery::value(pndType));
        }

        qbds = query.dataSourceTable(tableNum(TaxWithholdTrans));
        qbds = qbds.addDataSource(tableNum(VendTable));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.relations(false);
        qbds.addLink(fieldNum(TaxWithholdTrans, VendAccount), fieldNum(VendTable, AccountNum));
        if (pndType == TaxWithholdReportLayout_TH::ThaiPND53)
        {
            qbds.addRange(fieldNum(VendTable,TaxWithholdVendorType_TH)).value(SysQuery::value(TaxWithholdVendorType_TH::Domestic));
        }

        qbds = query.dataSourceTable(tableNum(VendTable));
        qbds = qbds.addDataSource(tableNum(DirPartyTable));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.relations(false);
        qbds.addLink(fieldNum(VendTable, Party), fieldNum(DirPartyTable, RecId));
        this.updateQueryAddInstanceRelationType(qbds, pndType);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryAddInstanceRelationType</Name>
				<Source><![CDATA[
    protected void updateQueryAddInstanceRelationType(QueryBuildDataSource _qbds, TaxWithholdReportLayout_TH _pndType)
    {
        if (_pndType == TaxWithholdReportLayout_TH::ThaiPND3)
        {
            _qbds.addRange(fieldNum(DirPartyTable, InstanceRelationType)).value(SysQuery::value(tableNum(DirPerson)));
        }
        else if (_pndType == TaxWithholdReportLayout_TH::ThaiPND53)
        {
            _qbds.addRange(fieldNum(DirPartyTable, InstanceRelationType)).value(SysQuery::valueNot(tableNum(DirPerson)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxWithholdPNDTmpHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates data for <c>TaxWithholdPNDTmpHeader</c> table.
    /// </summary>
    protected void initTaxWithholdPNDTmpHeader()
    {
        taxWithholdPNDTmpHeader.TaxBranchName       = this.getContract().parmCommonContract().parmTaxBranchCode();
        taxWithholdPNDTmpHeader.CompanyTaxRegNum    = CompanyInfo::find().CoRegNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxWithholdPNDTmpHeader</Name>
				<Source><![CDATA[
    private void createTaxWithholdPNDTmpHeader()
    {
        taxWithholdPNDTmpHeader.clear();
        this.initTaxWithholdPNDTmpHeader();
        taxWithholdPNDTmpHeader.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxWithholdPNDTmpLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the line for <c>TaxWithholdPNDTmpLine</c> table.
    /// </summary>
    /// <param name="_queryRun">
    /// QueryRun for initialization.
    /// </param>
    /// <param name="lineNo">
    /// Line number.
    /// </param>
    protected void initTaxWithholdPNDTmpLine(QueryRun _queryRun, int lineNo)
    {
        TaxWithholdTrans                            taxWithholdTrans;
        TaxWithholdTransExtensionTH                 taxWithholdTransExtensionTH;
        LedgerJournalTrans                          ledgerJournalTrans;
        VendTable                                   vendTable;
        DimensionAttributeValueSetTaxBranchView     dimensionAttributeValueSetTaxBranchView;
        VendInvoiceJour                             vendInvoiceJour;
        VendInvoiceJourExtensionTH                  vendInvoiceJourExtensionTH;
        LogisticsPostalAddress                      logisticsPostalAddress;

        
        taxWithholdTrans                        = _queryRun.get(tableNum(TaxWithholdTrans));
        taxWithholdTransExtensionTH             = _queryRun.get(tableNum(TaxWithholdTransExtensionTH));
        ledgerJournalTrans                      = _queryRun.get(tableNum(LedgerJournalTrans));
        vendTable                               = _queryRun.get(tableNum(VendTable));
        vendInvoiceJour                         = _queryRun.get(tableNum(VendInvoiceJour));
        dimensionAttributeValueSetTaxBranchView = _queryRun.get(tableNum(DimensionAttributeValueSetTaxBranchView));
        vendInvoiceJourExtensionTH              = vendInvoiceJour.vendInvoiceJourExtensionTH();

        if (vendInvoiceJourExtensionTH.InvoicePostalAddress)
        {
            logisticsPostalAddress = LogisticsPostalAddress::findRecId(vendInvoiceJourExtensionTH.InvoicePostalAddress);
        }
        else
        {
            logisticsPostalAddress = vendTable.invoiceAddress();
        }

        taxWithholdPNDTmpLine.VendName              = vendTable.name();
        taxWithholdPNDTmpLine.VendAddress           = logisticsPostalAddress.Address;
        taxWithholdPNDTmpLine.VendVATNum            = vendTable.VATNum ? vendTable.VATNum : vendTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, ledgerJournalTrans.TransDate);
        taxWithholdPNDTmpLine.TaxBranchCode         = dimensionAttributeValueSetTaxBranchView.DisplayValue;
        taxWithholdPNDTmpLine.TaxBranchNumber       = taxInformation_TH::find(logisticsPostalAddress.Location).getBranchNumber();
        taxWithholdPNDTmpLine.TaxRegistrationNumber = TaxRegistration::getTaxRegistrationFromInvoiceJour_TH(vendInvoiceJour).RegistrationNumber;
        taxWithholdPNDTmpLine.TaxWithholdName       = TaxWithholdTable::find(taxWithholdTrans.TaxWithholdCode).TaxWithholdName;
        taxWithholdPNDTmpLine.TaxWithholdValue      = TaxWithholdData::find(
                taxWithholdTrans.TaxWithholdCode,
                taxWithholdTrans.TransDate,
                taxWithholdTrans.WithholdBaseAmount).TaxWithholdValue;

        taxWithholdPNDTmpLine.PaymentDate                       = ledgerJournalTrans.TransDate;
        taxWithholdPNDTmpLine.AccountingCurTaxWithholdAmount    = taxWithholdTrans.TaxWithholdAmount;
        taxWithholdPNDTmpLine.AccountingCurPaidAmount           = (taxWithholdTransExtensionTH.AccountingCurUpdatedWithholdBaseAmt != 0)
                ? taxWithholdTransExtensionTH.AccountingCurUpdatedWithholdBaseAmt
                : taxWithholdTrans.TaxWithholdBaseAmount;

        taxWithholdPNDTmpLine.LineNo                            = lineNo;

        taxWithholdPNDTmpLine.TaxWithholdConditions = TaxWithholdPNDDP_TH::getTaxWithholdConditions(
                this.getContract().parmPNDType(),
                LedgerJournalTransExtensionTH::findByLedgerJournalTrans(ledgerJournalTrans.RecId).PaymentGrossUpType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxWithholdPNDTmpLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates data for <c>TaxWithholdPNDTmpLine</c> table.
    /// </summary>
    private void createTaxWithholdPNDTmpLine()
    {
        int lineNo = 1;
        QueryRun queryRun = new QueryRun(this.buildQuery());

        while (queryRun.next())
        {
            taxWithholdPNDTmpLine.clear();
            this.initTaxWithholdPNDTmpLine(queryRun, lineNo);
            taxWithholdPNDTmpLine.insert();
            lineNo++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the contract instance with type <c>TaxWithholdPNDContract</c>.
    /// </summary>
    /// <returns>
    /// The contract instance with type <c>TaxWithholdPNDContract</c>.
    /// </returns>
    protected TaxWithholdPNDContract_TH getContract()
    {
        TaxWithholdPNDContract_TH contract = this.parmDataContract() as TaxWithholdPNDContract_TH;

        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdPNDTmpHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data from the <c>TaxWithholdPNDTmpHeader</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>TaxWithholdPNDTmpHeader</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TaxWithholdPNDTmpHeader_TH))]
    public TaxWithholdPNDTmpHeader_TH getTaxWithholdPNDTmpHeader()
    {
        return taxWithholdPNDTmpHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdPNDTmpLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data from the <c>TaxWithholdPNDTmpLine</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>TaxWithholdPNDTmpLine</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TaxWithholdPNDTmpLine_TH))]
    public TaxWithholdPNDTmpLine_TH getTaxWithholdPNDTmpLine()
    {
        return taxWithholdPNDTmpLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        this.createTaxWithholdPNDTmpHeader();
        this.createTaxWithholdPNDTmpLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdConditions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the withholding tax conditions value based on PND type and grossup type.
    /// </summary>
    /// <param name="_PNDType">
    /// The PND type.
    /// </param>
    /// <param name="_paymentGrossupType">
    /// The gross up type.
    /// </param>
    /// <returns>
    /// The withholding tax conditions value.
    /// </returns>
    /// <remarks>
    /// The withholding tax conditions value is only used to show in report.
    /// </remarks>
    public static TaxWithholdConditions getTaxWithholdConditions(
        TaxWithholdReportLayout_TH          _PNDType,
        TaxWithholdPaymentGrossUpType       _paymentGrossupType)
    {
        TaxWithholdConditions   taxWithholdConditions;
        const int Conditions1 = 1;
        const int Conditions2 = 2;
        const int Conditions3 = 3;

        switch (_PNDType)
        {
            case TaxWithholdReportLayout_TH::ThaiPND3:
                if (_paymentGrossupType == TaxWithholdPaymentGrossUpType::SingleIteration)
                {
                    taxWithholdConditions = Conditions2;
                }
                else if (_paymentGrossupType == TaxWithholdPaymentGrossUpType::Perpetual)
                {
                    taxWithholdConditions = Conditions3;
                }
                else
                {
                    taxWithholdConditions = Conditions1;
                }
                break;

            case TaxWithholdReportLayout_TH::ThaiPND53:
                if (_paymentGrossupType     == TaxWithholdPaymentGrossUpType::SingleIteration
                    || _paymentGrossupType  == TaxWithholdPaymentGrossUpType::Perpetual)
                {
                    taxWithholdConditions = Conditions2;
                }
                else
                {
                    taxWithholdConditions = Conditions1;
                }
                break;

            default:
                taxWithholdConditions = TaxWithholdPNDDP_TH::getDefaultConditions(_PNDType);
                if (!taxWithholdConditions)
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
        }

        return taxWithholdConditions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultConditions</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method provides the extension point for adding a new WHT report layout.
    /// </summary>
    /// <param name = "_reportLayout">A report layout type.</param>
    /// <returns>A default value of conditions.</returns>
    public static int getDefaultConditions(TaxWithholdReportLayout_TH _reportLayout)
    {
        return 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>