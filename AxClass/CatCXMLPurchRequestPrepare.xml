<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatCXMLPurchRequestPrepare</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CatCXMLPurchRequestPrepare</c> contains all the methods related to preparing the CXML Purch request
/// </summary>
internal class CatCXMLPurchRequestPrepare
{
    TextBuffer                      cxmlHeader, orderRequest, orderHeader, itemOut, street, deliverTo, addressId;
    CatCXMLPurchRequest             cxmlPurchRequest;
    CatCXMLPurchRequestHistory      cxmlPurchRequestHistory;
    SystemLanguageId                systemLanguageId;
    CatCXMLParameters               cxmlParameters;

    //Purchase order related records
    VendPurchOrderJour              vendPurchOrderJour;
    PurchTableVersion               purchTableVersion;
    PurchTotalsSummary              purchTotalsSummary;
    DirPartyTable                   purchPlacerDirTable;
    DirPartyTable                   purchRequesterDirTable;
    PurchLineAllVersions            purchLineAllVersions;

    //External catalog related records.
    CatExternalCatalog              catExternalCatalog;
    CatExternalCatalogVendor        catExternalCatalogVendor;
    CatExternalCatalogProperties    catExternalCatalogProperties;

    //Street lines
    LogisticsAddressStreet workingstreet;
    str Line1, Line2, catvalue;
    int streetlenth, maxstreetlength,streetparm,newlinepos,remainingchar, breakpos;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>breakStreetSpace</Name>
				<Source><![CDATA[
    private void breakStreetSpace()
    {

        //If there is a space at the street length then just break there.
        //If not then we'll have to find the next logical break.
        if (this.checkBreakSpace(workingstreet,streetparm))
        {
            Line1 = subStr(workingstreet,1,streetparm);
            Line2 = subStr(workingstreet,streetparm + 1,maxstreetlength);
        }
        else
        {
            //Find the position to break.
            breakpos = this.findBreakSpace(workingstreet,streetparm);

            //Take the characters from the beginning to the break position for first line
            //remaining char for second line.
            //Depending on where the break is on the first line it could mean there are extra characters for the second line over the limit.
            Line1 = subStr(workingstreet,1,breakpos);
            Line2 = subStr(workingstreet,breakpos + 1,maxstreetlength);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBreakSpace</Name>
				<Source><![CDATA[
    private boolean checkBreakSpace(str _workingstreet, int _char)
    {
        str nextChar;

        //Find the next character
        nextChar = subStr(_workingstreet, _char, 1);

        //Check if the character is a space
        return nextChar == ' ';
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkClosestNL</Name>
				<Source><![CDATA[
    private int checkClosestNL(str _workingstreet, int _char)
    {
        int nextCharPos,charrev;
        str nextChar;

        //Reverse the character count
        charrev = _char * -1;

        //find the next character
        nextCharPos = strScan(_workingstreet, '\n', _char, charrev);

        return nextCharPos;

    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNewLine</Name>
				<Source><![CDATA[
    private int checkNewLine(str _workingstreet, int _char)
    {
        int nextCharPos,charrev, countnl, streetlength;
        int streetloop;
        str nextChar;

        streetlength = strLen(_workingstreet);
        countnl = 0;

        for (streetloop = 1; streetloop <= streetlength; streetloop++)
        {
            nextChar = subStr(_workingstreet,streetloop,1);

            if(nextChar == '\n')
            {
                countnl++;
            }
        }

        return countnl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBreakSpace</Name>
				<Source><![CDATA[
    private int findBreakSpace(str _workingstreet, int _char)
    {
        int nextCharPos,charrev;
        str nextChar;

        //Reverse the character count
        charrev = _char * -1;

        //find the next character
        nextCharPos = strScan(_workingstreet, ' ', _char, charrev);

        return nextCharPos;

    }

]]></Source>
			</Method>
			<Method>
				<Name>generatecXMLHeader</Name>
				<Source><![CDATA[
    private str generatecXMLHeader()
    {
        cxmlHeader = new TextBuffer();

        cxmlHeader.appendText('<?xml version=\'1.0\' encoding=\'UTF-8\'?>');
        cxmlHeader.appendText('<!DOCTYPE cXML SYSTEM \'http://xml.cxml.org/schemas/cXML/1.2.007/cXML.dtd\'>');
        cxmlHeader.appendText('<cXML version=\'' + this.getCatSessionProperty('VERSION') + '\' ');
        cxmlHeader.appendText('payloadID=\'' + this.generatePayloadID() + '\' ');
        cxmlHeader.appendText('timestamp=\'' + this.generateTimeStamp() + '\'>');
        cxmlHeader.appendText('<Header>');

        cxmlHeader.appendText('<From>');
        cxmlHeader.appendText('<Credential domain=\'' + this.getCatSessionProperty('FROM_DOMAIN') + '\'>');
        cxmlHeader.appendText('<Identity>' + this.getCatSessionProperty('FROM_IDENTITY') + '</Identity>');
        cxmlHeader.appendText('</Credential>');
        cxmlHeader.appendText('</From>');

        cxmlHeader.appendText('<To>');
        cxmlHeader.appendText('<Credential domain=\'' + this.getCatSessionProperty('TO_DOMAIN') + '\'>');
        cxmlHeader.appendText('<Identity>' + this.getCatSessionProperty('TO_IDENTITY') + '</Identity>');
        cxmlHeader.appendText('</Credential>');
        cxmlHeader.appendText('</To>');

        cxmlHeader.appendText('<Sender>');
        cxmlHeader.appendText('<Credential domain=\'' + this.getCatSessionProperty('SENDER_DOMAIN') + '\'>');
        cxmlHeader.appendText('<Identity>' + this.getCatSessionProperty('SENDER_IDENTITY') + '</Identity>');
        cxmlHeader.appendText('<SharedSecret>' + this.getCatSessionProperty('SHARED_SECRET') + '</SharedSecret>');
        cxmlHeader.appendText('</Credential>');
        cxmlHeader.appendText('<UserAgent>' + this.getCatSessionProperty('USERAGENT') + '</UserAgent>');
        cxmlHeader.appendText('</Sender>');

        cxmlHeader.appendText('</Header>');

        return cxmlHeader.getText();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDeliveryDate</Name>
				<Source><![CDATA[
    private str generateDeliveryDate(PurchLineDlvDate _dlvDate)
    {
        str datetemp;

        datetemp = date2str(_dlvDate,321, 2,3,2,3,4);

        datetemp = datetemp + 'T12:00:00';

        return datetemp;

    }

]]></Source>
			</Method>
			<Method>
				<Name>generateItemOut</Name>
				<Source><![CDATA[
    private str generateItemOut()
    {
        ItemFreeTxt productdesc;

        itemOut = new TextBuffer();
   
        str skipEncodeDesc = this.getCatSessionProperty('PUNCHOUTSKIPENCODEXML');

        while select * from purchLineAllVersions
            where purchLineAllVersions.PurchTableVersionRecId == cxmlPurchRequestHistory.PurchTableVersion
        {

            itemOut.appendText('<ItemOut lineNumber=\'' + int642str(purchLineAllVersions.LineNumber) + '\' ');
            itemOut.appendText('quantity=\'' + num2str(purchLineAllVersions.PurchQty, 0, 2, 1, 0) + '\' ');
            itemOut.appendText('requestedDeliveryDate=\'' + this.generateDeliveryDate(purchLineAllVersions.DeliveryDate) + '\'>');

            itemOut.appendText('<ItemID>');
            itemOut.appendText('<SupplierPartID>' + this.escape(purchLineAllVersions.ExternalItemId) + '</SupplierPartID>');
            itemOut.appendText('<SupplierPartAuxiliaryID>' + this.escape(PurchReqLine::findLineRefId(purchLineAllVersions.PurchReqLineRefId).PurchSupplierAuxId) + '</SupplierPartAuxiliaryID>');
            itemOut.appendText('</ItemID>');

            itemOut.appendText('<ItemDetail>');
            itemOut.appendText('<UnitPrice>');
            itemOut.appendText('<Money currency=\'' + this.escape(purchLineAllVersions.CurrencyCode) + '\'>');
            itemOut.appendText(num2str(purchLineAllVersions.PurchPrice,0,2,1,0) + '</Money>');
            itemOut.appendText('</UnitPrice>');

            if (CatCXMLPurchRequestRemoveNewLineSymbolFlight::instance().isEnabled())
            {
                str purchLineVersionsName = strReplace(purchLineAllVersions.Name, '\n', ' ');
                purchLineVersionsName = strReplace(purchLineVersionsName, '\r', '');

                if (strUpr(skipEncodeDesc)!='TRUE')
                {
                    productdesc = System.Web.HttpUtility::HtmlEncode(purchLineVersionsName);
                }
                else
                {
                    productdesc = '<![CDATA[' + purchLineVersionsName + ']]]]><![CDATA[>';
                }
            }
            else
            {
                if (strUpr(skipEncodeDesc)!='TRUE')
                {
                    productdesc = System.Web.HttpUtility::HtmlEncode(purchLineAllVersions.Name);
                }
                else
                {
                    productdesc = '<![CDATA[' + purchLineAllVersions.Name + ']]]]><![CDATA[>';
                }
            }
            itemOut.appendText('<Description xml:lang=\'' + this.escape(systemLanguageId) + '\'>' + this.escape(productdesc) + '</Description>');
            itemOut.appendText('<UnitOfMeasure>' + this.escape(purchLineAllVersions.PurchUnit) + '</UnitOfMeasure>');
            itemOut.appendText('<Classification domain=\'DUMMY\'>DUMMY</Classification>');
            itemOut.appendText('</ItemDetail>');

            //Supplier details
            itemOut.appendText('<SupplierList>');
            itemOut.appendText('<Supplier>');
            itemOut.appendText('<Name xml:lang=\'' + this.escape(systemLanguageId) + '\'>' + this.escape(vendPurchOrderJour.vendTable_OrderAccount().name()) + '</Name>');
            itemOut.appendText('<Comments/>');
            itemOut.appendText('<SupplierID domain=\'DUMMY\'>' + this.escape(vendPurchOrderJour.OrderAccount) + '</SupplierID>');
            itemOut.appendText('<SupplierLocation>');
            itemOut.appendText('<Address isoCountryCode=\'US\'>');
            itemOut.appendText('<Name xml:lang=\'' +this.escape( systemLanguageId) + '\'>' + this.escape(vendPurchOrderJour.vendTable_OrderAccount().name()) + '</Name>');

            //Primary Address
            itemOut.appendText('<PostalAddress>');
            itemOut.appendText('<DeliverTo/>');

            itemOut.appendText(this.processStreet(vendPurchOrderJour.vendTable_OrderAccount().postalAddress().Street));
            itemOut.appendText('<City>' + this.escape(vendPurchOrderJour.vendTable_OrderAccount().postalAddress().City) + '</City>');
            itemOut.appendText('<State>' + this.escape(vendPurchOrderJour.vendTable_OrderAccount().postalAddress().State) + '</State>');
            itemOut.appendText('<PostalCode>' + this.escape(vendPurchOrderJour.vendTable_OrderAccount().postalAddress().ZipCode) + '</PostalCode>');
            itemOut.appendText('<Country isoCountryCode=\'' + this.escape(LogisticsAddressCountryRegion::find(vendPurchOrderJour.vendTable_OrderAccount().postalAddress().CountryRegionId).ISOcode) + '\'>');
            itemOut.appendText(this.escape(vendPurchOrderJour.vendTable_OrderAccount().postalAddress().CountryRegionId) + '</Country>');
            itemOut.appendText('</PostalAddress>');

            //Email
            itemOut.appendText('<Email>' + this.escape(vendPurchOrderJour.vendTable_OrderAccount().email()) + '</Email>');

            //Phone
            itemOut.appendText('<Phone>');
            itemOut.appendText('<TelephoneNumber>');
            itemOut.appendText('<CountryCode isoCountryCode=\'US\'/>');
            itemOut.appendText('<AreaOrCityCode/>');
            itemOut.appendText('<Number>' + this.escape(vendPurchOrderJour.vendTable_OrderAccount().phone()) + '</Number>');
            itemOut.appendText('</TelephoneNumber>');
            itemOut.appendText('</Phone>');

            itemOut.appendText('</Address>');

            //Order methods
            itemOut.appendText('<OrderMethods>');
            itemOut.appendText('<OrderMethod>');
            itemOut.appendText('<OrderTarget>');
            itemOut.appendText('<OtherOrderTarget>cXML</OtherOrderTarget>');
            itemOut.appendText('</OrderTarget>');
            itemOut.appendText('<OrderProtocol/>');
            itemOut.appendText('</OrderMethod>');

            //Contact info.
            itemOut.appendText('<Contact>');
            itemOut.appendText('<Name xml:lang=\'' + this.escape(systemLanguageId) + '\'>  </Name>');
            itemOut.appendText('<Email>' + this.escape(vendPurchOrderJour.vendTable_OrderAccount().email()) + '</Email>');
            itemOut.appendText('<Phone>');
            itemOut.appendText('<TelephoneNumber>');
            itemOut.appendText('<CountryCode isoCountryCode=\'US\'/>');
            itemOut.appendText('<AreaOrCityCode/>');
            itemOut.appendText('<Number>' + this.escape(vendPurchOrderJour.vendTable_OrderAccount().phone()) + '</Number>');
            itemOut.appendText('</TelephoneNumber>');
            itemOut.appendText('</Phone>');
            itemOut.appendText('</Contact>');

            itemOut.appendText('</OrderMethods>');

            itemOut.appendText('</SupplierLocation>');
            itemOut.appendText('</Supplier>');
            itemOut.appendText('</SupplierList>');

            //ShipTo info
            itemOut.appendText('<ShipTo>');
            itemOut.appendText('<Address isoCountryCode=\'' + this.escape(LogisticsAddressCountryRegion::find(vendPurchOrderJour.deliveryAddress().CountryRegionId).ISOcode) + '\' ');
            itemOut.appendText(this.processShipAddressId());
            
            itemOut.appendText('<Name xml:lang=\'' + this.escape(systemLanguageId) + '\'>');
            itemOut.appendText(this.escape(vendPurchOrderJour.DeliveryName) +'</Name>');

            itemOut.appendText('<PostalAddress>');
            itemOut.appendText(this.processDeliverTo());

            itemOut.appendText(this.processStreet(vendPurchOrderJour.deliveryAddress().Street));
            itemOut.appendText('<City>' + this.escape(vendPurchOrderJour.deliveryAddress().City) + '</City>');
            itemOut.appendText('<State>' + this.escape(vendPurchOrderJour.deliveryAddress().State) + '</State>');
            itemOut.appendText('<PostalCode>' + this.escape(vendPurchOrderJour.deliveryAddress().ZipCode) + '</PostalCode>');
            itemOut.appendText('<Country isoCountryCode=\'' + this.escape(LogisticsAddressCountryRegion::find(vendPurchOrderJour.deliveryAddress().CountryRegionId).ISOcode) +'\'>');
            itemOut.appendText(this.escape(vendPurchOrderJour.deliveryAddress().CountryRegionId) + '</Country>');
            itemOut.appendText('</PostalAddress>');

            itemOut.appendText('<Email>' + this.escape(purchPlacerDirTable.primaryEmail()) + '</Email>');

            itemOut.appendText('<Phone>');
            itemOut.appendText('<TelephoneNumber>');
            itemOut.appendText('<CountryCode isoCountryCode=\'' + this.escape(LogisticsAddressCountryRegion::find(vendPurchOrderJour.deliveryAddress().CountryRegionId).ISOcode) +'\'/>');
            itemOut.appendText('<AreaOrCityCode/>');
            itemOut.appendText('<Number>' + this.escape(purchPlacerDirTable.primaryPhone()) + '</Number>');
            itemOut.appendText('</TelephoneNumber>');
            itemOut.appendText('</Phone>');

            itemOut.appendText('</Address>');
            itemOut.appendText('</ShipTo>');

            //Comments
            itemOut.appendText('<Comments xml:lang=\'' + this.escape(systemLanguageId) + '\'/>');
            itemOut.appendText('</ItemOut>');

        }

        return itemOut.getText();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateOrderHeader</Name>
				<Source><![CDATA[
    private str generateOrderHeader()
    {
        orderHeader = new TextBuffer();

        orderHeader.appendText('<OrderRequest>');
        orderHeader.appendText('<OrderRequestHeader orderID=\'' + this.escape(cxmlPurchRequest.PurchId) + '\' ');
        orderHeader.appendText('orderDate=\'' + this.generateTimeStamp() + '\' ');
        orderHeader.appendText('orderType=\'regular\' ');
        orderHeader.appendText('type=\'' +  strLwr(enum2Symbol(enumNum(PurchReqMessageType), cxmlPurchRequestHistory.PurchReqMessageType)) + '\'>');
        orderHeader.appendText('<Total>');
        orderHeader.appendText('<Money currency=\'' + this.escape(purchTotalsSummary.CurrencyCode) + '\'>' + num2str(purchTotalsSummary.NetLines, 0, 2, 1,0) + '</Money>');
        orderHeader.appendText('</Total>');

        //Header ShipTo
        orderHeader.appendText('<ShipTo>');
        orderHeader.appendText('<Address isoCountryCode=\'' + this.escape(LogisticsAddressCountryRegion::find(vendPurchOrderJour.deliveryAddress().CountryRegionId).ISOcode) + '\' ');
        orderHeader.appendText(this.processShipAddressId());

        orderHeader.appendText('<Name xml:lang=\'' + this.escape(systemLanguageId) + '\'>');
        orderHeader.appendText(this.escape(vendPurchOrderJour.DeliveryName) +'</Name>');
        orderHeader.appendText('<PostalAddress>');
        orderHeader.appendText(this.processDeliverTo());

        orderHeader.appendText(this.processStreet(vendPurchOrderJour.deliveryAddress().Street));
        orderHeader.appendText('<City>' + this.escape(vendPurchOrderJour.deliveryAddress().City) + '</City>');
        orderHeader.appendText('<State>' + this.escape(vendPurchOrderJour.deliveryAddress().State) + '</State>');
        orderHeader.appendText('<PostalCode>' +this.escape( vendPurchOrderJour.deliveryAddress().ZipCode) + '</PostalCode>');
        orderHeader.appendText('<Country isoCountryCode=\'' + this.escape(LogisticsAddressCountryRegion::find(vendPurchOrderJour.deliveryAddress().CountryRegionId).ISOcode) +'\'>');
        orderHeader.appendText(this.escape(vendPurchOrderJour.deliveryAddress().CountryRegionId) + '</Country>');
        orderHeader.appendText('</PostalAddress>');

        orderHeader.appendText(this.processShipToEmail());

        orderHeader.appendText('<Phone>');
        orderHeader.appendText('<TelephoneNumber>');
        orderHeader.appendText('<CountryCode isoCountryCode=\'' + this.escape(LogisticsAddressCountryRegion::find(vendPurchOrderJour.deliveryAddress().CountryRegionId).ISOcode) +'\'/>');
        orderHeader.appendText('<AreaOrCityCode/>');

        orderHeader.appendText(this.processShipToPhone());

        orderHeader.appendText('</TelephoneNumber>');
        orderHeader.appendText('</Phone>');
        orderHeader.appendText('</Address>');
        orderHeader.appendText('</ShipTo>');

        //Header BillTo
        orderHeader.appendText('<BillTo>');
        orderHeader.appendText('<Address isoCountryCode=\'US\' ');
        orderHeader.appendText(this.processBillAddressId());

        orderHeader.appendText('<Name xml:lang=\'' + this.escape(systemLanguageId) + '\'>');
        orderHeader.appendText(this.escape(CompanyInfo::findDataArea(cxmlPurchRequest.VendorDataAreaId).Name) +'</Name>');
                
        orderHeader.appendText('<PostalAddress>');
        orderHeader.appendText('<DeliverTo/>');
        orderHeader.appendText(this.processStreet(this.getCompanyInvAddress().Street));
        orderHeader.appendText('<City>' + this.escape(this.getCompanyInvAddress().City) + '</City>');
        orderHeader.appendText('<State>' + this.escape(this.getCompanyInvAddress().State) + '</State>');
        orderHeader.appendText('<PostalCode>' + this.escape(this.getCompanyInvAddress().ZipCode) + '</PostalCode>');
        orderHeader.appendText('<Country isoCountryCode=\'' + this.escape(LogisticsAddressCountryRegion::find(this.getCompanyInvAddress().CountryRegionId).ISOcode) +'\'>');
        orderHeader.appendText(this.escape(this.getCompanyInvAddress().CountryRegionId) + '</Country>');
        orderHeader.appendText('</PostalAddress>');

        orderHeader.appendText('<Email/>');

        orderHeader.appendText('<Phone>');
        orderHeader.appendText('<TelephoneNumber>');
        orderHeader.appendText('<CountryCode isoCountryCode=\'US\'/>');
        orderHeader.appendText('<AreaOrCityCode/>');
        orderHeader.appendText('<Number/>');
        orderHeader.appendText('<Extension/>');
        orderHeader.appendText('</TelephoneNumber>');
        orderHeader.appendText('</Phone>');

        orderHeader.appendText('</Address>');
        orderHeader.appendText('</BillTo>');

        //Header Shipping
        orderHeader.appendText('<Shipping trackingDomain=\'\'>');
        orderHeader.appendText('<Money currency=\'' + this.escape(vendPurchOrderJour.purchTable().CurrencyCode) + '\'/>');
        orderHeader.appendText('<Description xml:lang=\'' + this.escape(systemLanguageId) + '\'/>');
        orderHeader.appendText('</Shipping>');

        //Header Contact
        orderHeader.appendText('<Contact role=\'buyer\'>');
        orderHeader.appendText('<Name xml:lang=\'' + this.escape(systemLanguageId) + '\'>' + this.escape(purchPlacerDirTable.Name) + '</Name>');
        orderHeader.appendText('<PostalAddress>');

        orderHeader.appendText(this.processStreet(vendPurchOrderJour.deliveryAddress().Street));
        orderHeader.appendText('<City>' + this.escape(vendPurchOrderJour.deliveryAddress().City) + '</City>');
        orderHeader.appendText('<State>' + this.escape(vendPurchOrderJour.deliveryAddress().State) + '</State>');
        orderHeader.appendText('<PostalCode>' + this.escape(vendPurchOrderJour.deliveryAddress().ZipCode) + '</PostalCode>');
        orderHeader.appendText('<Country isoCountryCode=\'' + this.escape(LogisticsAddressCountryRegion::find(vendPurchOrderJour.deliveryAddress().CountryRegionId).ISOcode) +'\'>');
        orderHeader.appendText(this.escape(vendPurchOrderJour.deliveryAddress().CountryRegionId) + '</Country>');
        orderHeader.appendText('</PostalAddress>');

        orderHeader.appendText('<Email>' + this.escape(purchPlacerDirTable.primaryEmail()) + '</Email>');
        orderHeader.appendText('<Phone>');
        orderHeader.appendText('<TelephoneNumber>');
        orderHeader.appendText('<CountryCode isoCountryCode=\'US\'/>');
        orderHeader.appendText('<AreaOrCityCode/>');
        orderHeader.appendText('<Number>' + this.escape(purchPlacerDirTable.primaryPhone()) + '</Number>');
        orderHeader.appendText('</TelephoneNumber>');
        orderHeader.appendText('</Phone>');
        orderHeader.appendText('</Contact>');

        //Header Comments.
        orderHeader.appendText(this.processPOComments());

        if (CatCXMLPurchRequestExtrinsicFlight::instance().isEnabled())
        {
            this.addDynamicExtrinsics(orderHeader);
        }
        else
        {
            // Added new provider to support company extrinsic.
            // So, should be removed when flight is removed.
            orderHeader.appendText('<Extrinsic name=\'COMPANY\'>' + this.escape(cxmlPurchRequest.VendorDataAreaId) +  '</Extrinsic>');
        }

        orderHeader.appendText('</OrderRequestHeader>');

        return orderHeader.getText();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDynamicExtrinsics</Name>
				<Source><![CDATA[
    private void addDynamicExtrinsics(TextBuffer _orderHeader)
    {
        CatExternalMessageFormat externalMessageFormat;
        CatCXMLExtrinsic extrinsic;
        
        while select extrinsic
            exists join externalMessageFormat
                where externalMessageFormat.RecId == extrinsic.MessageFormat
                    && externalMessageFormat.ExternalCatalog == catExternalCatalog.RecId
        {
            _orderHeader.appendText('<Extrinsic name=\'' + this.escape(extrinsic.Name) + '\'>' + this.escape(CatCXMLExtrinsicValueProvider::getInstance(extrinsic.Value).value()) + '</Extrinsic>');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateOrderRequest</Name>
				<Source><![CDATA[
    public str generateOrderRequest()
    {
        orderRequest = new TextBuffer();

        this.populateBuffers();

        orderRequest.appendText(this.generatecXMLHeader());
        orderRequest.appendText('<Request deploymentMode=\'' + this.getCatSessionProperty('DEPLOYMENTMODE') + '\'>');
        
        orderRequest.appendText(this.generateOrderHeader());
        orderRequest.appendText(this.generateItemOut());
        orderRequest.appendText('</OrderRequest>');
        orderRequest.appendText('</Request>');
        orderRequest.appendText('</cXML>');

        return orderRequest.getText();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePayloadID</Name>
				<Source><![CDATA[
    private str generatePayloadID()
    {
        str payloadID;

        payloadID = this.escape(cxmlPurchRequest.PurchId + '.' +
                int642str(cxmlPurchRequest.RecId) + '.' +
                cxmlPurchRequest.VendAccount + '.' +
                cxmlPurchRequest.VendorDataAreaId);

        return payloadID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateTimeStamp</Name>
				<Source><![CDATA[
    private TimestampString generateTimeStamp()
    {
        TimestampString timeStampString;

        //Using the time of the Purchase Confirmation as the this timestampe shouldn't change on retry attempts so that will be the
        //request time and not the actual time of the transmission.
        //This should be in ISO 8601 format which is what the toStr will return.
        //This is UTC time. So the record will display in the form based on there timezone offset.
        timeStampString = DateTimeUtil::toStr(cxmlPurchRequestHistory.PurchReqDateTime);

        return timeStampString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCatSessionProperty</Name>
				<Source><![CDATA[
    private CatPropertyValue getCatSessionProperty(CatPropertyName _catPropertyName)
    {
        select firstonly * from catExternalCatalogProperties
            where catExternalCatalogProperties.ExternalCatalog == catExternalCatalog.RecId
                && catExternalCatalogProperties.Name           == _catPropertyName;

        return this.escape(catExternalCatalogProperties.editCatPropertyName(false, ''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyInvAddress</Name>
				<Source><![CDATA[
    private LogisticsPostalAddress getCompanyInvAddress()
    {

        return CompanyInfo::findDataArea(cxmlPurchRequest.VendorDataAreaId).invoiceAddress();

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchPlacer</Name>
				<Source><![CDATA[
    private DirPartyTable getPurchPlacer()
    {
        DirPartyTable   dirPartyTable;
        HcmWorker       hcmWorker;

        hcmWorker = HcmWorker::find(vendPurchOrderJour.purchTable().WorkerPurchPlacer);
        dirPartyTable = DirPartyTable::findRec(HcmWorker.Person);

        return dirPartyTable;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchRequester</Name>
				<Source><![CDATA[
    private DirPartyTable getPurchRequester()
    {
        DirPartyTable   dirPartyTable;
        HcmWorker       hcmWorker;

        hcmWorker = HcmWorker::find(vendPurchOrderJour.purchTable().Requester);
        dirPartyTable = DirPartyTable::findRec(HcmWorker.Person);

        return dirPartyTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCatCXMLPurchRequest</Name>
				<Source><![CDATA[
    public CatCXMLPurchRequest parmCatCXMLPurchRequest(CatCXMLPurchRequest _cxmlPurchRequest = cxmlPurchRequest)
    {
        cxmlPurchRequest = _cxmlPurchRequest;

        return cxmlPurchRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCatCXMLPurchRequestHistory</Name>
				<Source><![CDATA[
    public CatCXMLPurchRequestHistory parmCatCXMLPurchRequestHistory(CatCXMLPurchRequestHistory _cxmlPurchRequestHistory = cxmlPurchRequestHistory)
    {
        cxmlPurchRequestHistory = _cxmlPurchRequestHistory;

        return cxmlPurchRequestHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCatExternalCatalog</Name>
				<Source><![CDATA[
    public CatExternalCatalog parmCatExternalCatalog(CatExternalCatalog _catExternalCatalog = catExternalCatalog)
    {
        catExternalCatalog = _catExternalCatalog;

        return catExternalCatalog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBuffers</Name>
				<Source><![CDATA[
    private void populateBuffers()
    {
        //Get the parameter
        cxmlParameters = CatCXMLParameters::find();

        //Get the table version as we can use it to find the VendPurchOrderJour
        //Probably don't really need this record as we can basis for most of the transactions.
        purchTableVersion = PurchTableVersion::find(cXMLPurchRequestHistory.PurchTableVersion);

        //Get the specific VendPurchOrderJour as the basic for the record to update.
        vendPurchOrderJour = VendPurchOrderJour::findRecId(cxmlPurchRequestHistory.VendPurchOrderJour);

        //Get the purchaseTotalsSummary to use for the order totals.
        if (CatCXMLPurchTotalsFlight::instance().isEnabled())
        {
            PurchTotalsSummaryController::calculateAndUpdateTotalsSummary(PurchTable::find(cxmlPurchRequest.PurchId), purchTotalsSummary);
        }
        else
        {
            purchTotalsSummary = PurchTotalsSummary::findByPurchId(cxmlPurchRequest.PurchId);
        }

        //Get the orderer
        purchPlacerDirTable = this.getPurchPlacer();

        //Get the requester
        purchRequesterDirTable = this.getPurchRequester();

        //Get the system language.
        systemLanguageId = SystemParameters::find(false).SystemLanguageId;

        //Get the external catalog setup details.
        select firstOnly * from catExternalCatalogVendor
        where catExternalCatalogVendor.VendorDataAreaId == cxmlPurchRequest.VendorDataAreaId &&
        catExternalCatalogVendor.VendorAccountNumber == cxmlPurchRequest.VendAccount;

        select firstOnly * from catExternalCatalog
        where catExternalCatalog.RecId == catExternalCatalogVendor.ExternalCatalog;

    }

]]></Source>
			</Method>
			<Method>
				<Name>processDeliverTo</Name>
				<Source><![CDATA[
    private str processDeliverTo()
    {
        deliverTo = new TextBuffer();

        //See if there is a vendor parameter.
        catvalue = this.getCatSessionProperty('DELIVERTO');
                
        if( catvalue == 'REQUESTER')
        {
            deliverTo.appendText('<DeliverTo>' + this.escape(HcmWorker::find(vendPurchOrderJour.purchTable().Requester).name()) + '</DeliverTo>');
        }
        else
        {
            deliverTo.appendText('<DeliverTo>' + this.escape(vendPurchOrderJour.purchTable().ReqAttention) + '</DeliverTo>');
        }

        return deliverTo.getText();
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>processShipToEmail</Name>
				<Source><![CDATA[
    private str processShipToEmail()
    {
        deliverTo = new TextBuffer();

        //See if there is a vendor parameter.
        catvalue = this.getCatSessionProperty('DELIVERTO');

        if( catvalue == 'REQUESTER')
        {
            deliverTo.appendText('<Email>' + this.escape(purchRequesterDirTable.primaryEmail()) + '</Email>');
        }
        else
        {
            deliverTo.appendText('<Email>' + this.escape(purchPlacerDirTable.primaryEmail()) + '</Email>');
        }

        return deliverTo.getText();
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>processShipToPhone</Name>
				<Source><![CDATA[
    private str processShipToPhone()
    {
        deliverTo = new TextBuffer();

        //See if there is a vendor parameter.
        catvalue = this.getCatSessionProperty('DELIVERTO');

        if( catvalue == 'REQUESTER')
        {
            deliverTo.appendText('<Number>' + this.escape(purchRequesterDirTable.primaryPhone()) + '</Number>');
        }
        else
        {
            deliverTo.appendText('<Number>' + this.escape(purchPlacerDirTable.primaryPhone()) + '</Number>');
        }

        return deliverTo.getText();
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>processShipAddressId</Name>
				<Source><![CDATA[
    private str processShipAddressId()
    {
        PurchInventLocationId purchWMS;
        addressId = new TextBuffer();


        //See if there is a vendor parameter
        catvalue = this.getCatSessionProperty('FIXEDSHIPADDRESSID');


        //If there is a fixed addressID used that. If not check if we want to use the WMS as the ID.
        if( catvalue != '')
        {
            addressId.appendText('addressID=\'' + this.escape(catvalue) + '\'>');
        }
        else
        {
            //See if the WMSADDRESSID property is set.
            catvalue = this.getCatSessionProperty('WMSADDRESSID');

            if (catvalue == 'TRUE' || catvalue == 'true')
            {
                purchWMS = vendPurchOrderJour.purchTable().InventLocationId;

                //if there is a WMS on the document then try to use that otherwise just default back to location.
                if ( purchWMS != '')
                {
                    addressId.appendText('addressID=\'' +  this.escape(purchWMS) + '\'>');
                }
                else
                {
                    addressId.appendText('addressID=\'' + (LogisticsLocation::find(vendPurchOrderJour.deliveryAddress().Location).LocationId) + '\'>');
                }
            }
            else
            {
                addressId.appendText('addressID=\'' + this.escape(LogisticsLocation::find(vendPurchOrderJour.deliveryAddress().Location).LocationId) + '\'>');
            }
        }

        return addressId.getText();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBillAddressId</Name>
				<Source><![CDATA[
    private str processBillAddressId()
    {
        PurchInventLocationId purchWMS;
        addressId = new TextBuffer();

        //See if there is a vendor parameter
        catvalue = this.getCatSessionProperty('FIXEDBILLADDRESSID');


        //If there is a fixed addressID used that. If not check if we want to use the WMS as the ID.
        if( catvalue != '')
        {
            addressId.appendText('addressID=\'' + this.escape(catvalue) + '\'>');
        }
        else
        {
            addressId.appendText('addressID=\'' + this.escape(LogisticsLocation::find(this.getCompanyInvAddress().Location).LocationId) + '\'>');
        }

        return addressId.getText();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processStreet</Name>
				<Source><![CDATA[
    private str processStreet(LogisticsAddressStreet _addressstreet)
    {

        street = new TextBuffer();

        //Work out how long the street is to test.
        streetlenth = strLen(_addressstreet);

        //See if there is a vendor override in the session properties otherwise use the cXMLParms length.
        catvalue = this.getCatSessionProperty('STREETLENGTH');
        

        if( catvalue != '')
        {
            streetparm = str2int(catvalue);
        }
        else
        {
            streetparm = cxmlParameters.CXMLMaxStreet;
        }

        //If the street is already less than the max just return it, save time processing.
        if (streetlenth <= streetparm)
        {
            street.appendText('<Street>' + this.escape(_addressstreet) + '</Street>');
        }
        else
        {
            //Find the max number of characters. This will be used to trim the address.
            maxstreetlength = streetparm * 2;

            //Truncate the street based on the max amount of characters.
            //This could result in an incorrect adress but it will vary vendor to vendor.
            workingstreet = subStr(_addressstreet,1,maxstreetlength);

            //Check if there are newlines in the address.
            if (this.checkNewLine(workingstreet,streetparm) > 0)
            {
                //Find the closest NL.
                breakpos = this.checkClosestNL(workingstreet,streetparm);

                //If the break doesn't find a NL then there isn't one in the streetlength characters
                //so just break at space. Otherwise break at the first NL.
                if (breakpos == 0)
                {
                    this.breakStreetSpace();
                }
                else
                {
                    //Split the street
                    Line1 = subStr(workingstreet,1,breakpos);
                    Line2 = subStr(workingstreet,breakpos + 1,maxstreetlength);
                }
            }
            else
            {
                this.breakStreetSpace();
            }

            //Populate the tags with the street lines.
            street.appendText('<Street>' + this.escape(Line1) + '</Street>');
            street.appendText('<Street>' + this.escape(Line2) + '</Street>');

        }

        return street.getText();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPOComments</Name>
				<Source><![CDATA[
    private str processPOComments()
    {
        deliverTo = new TextBuffer();

        str                     commentTXT;
        VendFormletterDocument  vendDocparms;
        PurchTable              purchTable;
        VendTable               vendTable;
        DocuRef                 docuRef;
        str                     POCOMMENTS, VENDCOMMENTS;

        //See if there is a vendor parameter.
        POCOMMENTS = this.getCatSessionProperty('POCOMMENTS');
        VENDCOMMENTS = this.getCatSessionProperty('VENDCOMMENTS');

        if (POCOMMENTS == 'TRUE' || POCOMMENTS == 'true' || VENDCOMMENTS == 'TRUE' || VENDCOMMENTS == 'true')
        {
            commentTXT = '';
            select firstonly * from vendDocparms;
            purchTable = PurchTable::find(cxmlPurchRequest.PurchId);
            vendTable = PurchTable.vendTable_OrderAccount();
        }

        if (POCOMMENTS == 'TRUE' || POCOMMENTS == 'true')
        {
            while select Notes from docuRef
                    where DocuRef.RefTableId == PurchTable.TableId
                        && DocuRef.RefRecId == PurchTable.RecId
                        && DocuRef.TypeId == vendDocparms.DocuTypePurchOrder
            {
                commentTXT = commentTXT + ' ' + DocuRef.Notes;
            }

            if (VENDCOMMENTS == 'TRUE' || VENDCOMMENTS == 'true')
            {
                while select Notes from docuRef
                        where DocuRef.RefTableId == vendTable.TableId
                            && DocuRef.RefRecId == vendTable.RecId
                            && DocuRef.TypeId == vendDocparms.DocuTypePurchOrder
                {
                    commentTXT = commentTXT + ' ' + DocuRef.Notes;
                }
            }

            deliverTo.appendText('<Comments>' + this.escape(commentTXT) + '</Comments>');
        }
        else
        {
            if (VENDCOMMENTS == 'TRUE' || VENDCOMMENTS == 'true')
            {
                while select Notes from docuRef
                        where DocuRef.RefTableId == vendTable.TableId
                            && DocuRef.RefRecId == vendTable.RecId
                            && DocuRef.TypeId == vendDocparms.DocuTypePurchOrder
                {
                    commentTXT = commentTXT + ' ' + DocuRef.Notes;
                }

                deliverTo.appendText('<Comments>' + this.escape(commentTXT) + '</Comments>');
            }
            else
            {
                deliverTo.appendText('<Comments/>');
            }
        }

        return deliverTo.getText();
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>escape</Name>
				<Source><![CDATA[
    private str escape(str _input)
    {
        return System.Security.SecurityElement::Escape(_input);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static CatCXMLPurchRequestPrepare construct()
    {
        CatCXMLPurchRequestPrepare cxmlPurchRequestPrepare;

        cxmlPurchRequestPrepare = new CatCXMLPurchRequestPrepare();

        return cxmlPurchRequestPrepare;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>