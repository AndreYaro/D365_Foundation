<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqSetupDimReqGroupCacheObject</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class stores the values of a <c>ReqGroup</c> buffer needed in the <c>ReqSetupDim</c> class.
/// </summary>
class ReqSetupDimReqGroupCacheObject
{
    public NoYes ActionAdvance;
    public MarginAdvance ActionAdvanceMargin;
    public NoYes ActionAppreciate;
    public ActionBasicDateType ActionBasicDateType;
    public NoYes ActionCalc;
    public NoYes ActionDepreciate;
    public NoYesId ActionDerived;
    public NoYes ActionPostpone;
    public MarginPostpone ActionPostponeMargin;
    public TimeFenceAction ActionTimeFence;
    public TimeFenceAuthorization AuthorizationTimeFence;
    public NoYes BOMVersionReq;
    public ReqCalendarId CalendarId;
    public TimeFenceCapacity CapacityTimeFence;
    public ReqCovPeriod CovPeriod;
    public ReqCovType CovRule;
    public TimeFenceCoverage CovTimeFence;
    public ReqCustForecastIncludedInOverallForecast CustForecastIncludedInOverallForecast;
    public TimeFenceExplosion ExplosionTimeFence;
    public ReqForecastReducedBy ForecastReducedBy;
    public NoYes FuturesCalc;
    public TimeFenceFutures FuturesTimeFence;
    public MarginIssue IssueMargin;
    public TimeFenceLocking LockingTimeFence;
    public TimeFenceMasterPlan MasterPlanTimeFence;
    public ReqMaxNegativeDays MaxNegativeDays;
    public ReqMaxPositiveDays MaxPositiveDays;
    public ReqOnHandConsumptionStrategy OnHandConsumptionStrategy;
    public ReqMustUseLatestPossibleSupplyFirst MustUseLatestPossibleSupplyFirst;
    public MarginOrder OrderMargin;
    public WorkPeriodTemplateRecId PeriodTemplate;
    public MarginReceipt ReceiptMargin;
    public ReqReduceForecastWithIntercompanyOrders ReduceForecastWithIntercompanyOrders;
    public ReqGroupId ReqGroupId;
    public ReqReduceKeyId ReqReduceKeyId;
    public NoYes RouteVersionReq;
    public TimeFenceBackRequisition TimeFenceBackRequisition;

    private boolean IsInitialized;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isCacheInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the cache object has been initialized.
    /// </summary>
    /// <returns>true if the cache object is initialized; otherwise, false.</returns>
    public boolean isCacheInitialized()
    {
        return IsInitialized;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ReqSetupReqGroupCacheObject</c> instance from a <c>ReqGroup</c> record.
    /// </summary>
    /// <param name = "_record">A <c>ReqGroup</c> record.</param>
    public void initFromRecord(ReqGroup _record)
    {
        Isinitialized = true;

        ActionAdvance = _record.ActionAdvance;
        ActionAdvanceMargin = _record.ActionAdvanceMargin;
        ActionAppreciate = _record.ActionAppreciate;
        ActionBasicDateType = _record.ActionBasicDateType;
        ActionCalc = _record.ActionCalc;
        ActionDepreciate = _record.ActionDepreciate;
        ActionDerived = _record.ActionDerived;
        ActionPostpone = _record.ActionPostpone;
        ActionPostponeMargin = _record.ActionPostponeMargin;
        ActionTimeFence = _record.ActionTimeFence;
        AuthorizationTimeFence = _record.AuthorizationTimeFence;
        BOMVersionReq = _record.BOMVersionReq;
        CalendarId = _record.CalendarId;
        CapacityTimeFence = _record.CapacityTimeFence;
        CovPeriod = _record.CovPeriod;
        CovRule = _record.CovRule;
        CovTimeFence = _record.CovTimeFence;
        CustForecastIncludedInOverallForecast = _record.CustForecastIncludedInOverallForecast;
        ExplosionTimeFence = _record.ExplosionTimeFence;
        ForecastReducedBy = _record.ForecastReducedBy;
        FuturesCalc = _record.FuturesCalc;
        FuturesTimeFence = _record.FuturesTimeFence;
        IssueMargin = _record.IssueMargin;
        LockingTimeFence = _record.LockingTimeFence;
        MasterPlanTimeFence = _record.MasterPlanTimeFence;
        MaxNegativeDays = _record.MaxNegativeDays;
        MaxPositiveDays = _record.MaxPositiveDays;
        OnHandConsumptionStrategy = _record.OnHandConsumptionStrategy;
        MustUseLatestPossibleSupplyFirst = _record.MustUseLatestPossibleSupplyFirst;
        OrderMargin = _record.OrderMargin;
        PeriodTemplate = _record.PeriodTemplate;
        ReceiptMargin = _record.ReceiptMargin;
        ReduceForecastWithIntercompanyOrders = _record.ReduceForecastWithIntercompanyOrders;
        ReqGroupId = _record.ReqGroupId;
        ReqReduceKeyId = _record.ReqReduceKeyId;
        RouteVersionReq = _record.RouteVersionReq;
        TimeFenceBackRequisition = _record.TimeFenceBackRequisition;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>