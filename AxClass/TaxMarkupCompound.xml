<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxMarkupCompound</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class TaxMarkupCompound extends Tax
{
    private RefRecId        sourceRecId;
    private RefTableId      sourceTableId;
    private TmpTaxWorkTrans taxWorkTransSource;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public RecId sourceRecId()
    {
        return sourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public RefTableId sourceTableId()
    {
        return sourceTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static TaxMarkupCompound construct(Tax _tax)
    {
        TaxMarkupCompound taxMarkupCompound = new TaxMarkupCompound();

        taxMarkupCompound.init(_tax);

        return taxMarkupCompound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init(Tax _tax)
    {
        taxModuleType = _tax.getTaxModuleType();
        taxDate = _tax.getTaxDate();
        taxIncludedInItemPrice = _tax.getTaxIncludedInItemPrice();
        sourceCurrencyCode = _tax.getTransactionalCurrency();
        triangulation = _tax.getTriangulation();
        exchRate = _tax.exchRate();
        exchRateSecond = _tax.exchRateSecondary();
        reportingCurrencyExchRate = _tax.parmReportingCurrencyExchRate();
        reportingCurrencyExchRateSecondary = _tax.parmReportingCurrencyExchRateSecondary();
        cashDiscAmount = _tax.getCashDiscAmount();
        cashDiscPercent = _tax.getCashDiscPercent();
        taxWorkTransSource.setTmpData(_tax.tmpTaxWorkTrans());
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxLineCalc</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void processTaxLineCalc(TmpTax _tmpTax, RefRecId _headingRecId, RefTableId _headingTableId, RefRecId _sourceRecId, RefTableId _sourceTableId)
    {
        tmpTax          = _tmpTax;
        headingRecId    = _headingRecId;
        headingTableId  = _headingTableId;
        sourceRecId     = _sourceRecId;
        sourceTableId   = _sourceTableId;

        this.syncTaxWorkTransWithSourceTaxForLine();

        this.calcTax();

        this.saveInProcessTransaction();

        if (exchRate != ExchangeRateHelper::exchRate(sourceCurrencyCode, taxDate) ||
            exchRateSecond != ExchangeRateHelper::exchRateSecond(sourceCurrencyCode, taxDate) ||
            triangulation != Currency::triangulation(sourceCurrencyCode, taxDate))
        {
            this.adjustAmount(exchRate, exchRateSecond);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncTaxWorkTransWithSourceTaxForLine</Name>
				<Source><![CDATA[
    private void syncTaxWorkTransWithSourceTaxForLine()
    {
        while select * from taxWorkTransSource
            where taxWorkTransSource.SourceRecId == this.sourceRecId() &&
                taxWorkTransSource.SourceTableId == this.sourceTableId()
        {
            taxWorkTrans.clear();
            taxWorkTrans.data(taxWorkTransSource);
            taxWorkTrans.HeadingRecId = this.headingRecId();
            taxWorkTrans.HeadingTableId = this.headingTableId();
            taxWorkTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRequiredBySource</Name>
				<Source><![CDATA[
    internal static boolean isRequiredBySource(ITaxMarkupCompound _tax, boolean _isTaxIncludedInItemPrice)
    {
        boolean ret;
        SysGlobalCache transactionCache;
        str transactionScopeCacheKey;

        Common source = _tax.getMarkupAutoOriginSource();

        if (appl.ttsLevel() > 0)
        {
            transactionCache = appl.transactionScope().parmTransactionScopeCache();
            transactionScopeCacheKey = strFmt('RequiredBySource%1.%2', source.TableId, source.RecId);
        }

        if (transactionCache && transactionCache.isSet(classStr(TaxMarkupCompound), transactionScopeCacheKey))
        {
            ret = transactionCache.get(classStr(TaxMarkupCompound), transactionScopeCacheKey);
        }
        else
        {
            ret = SalesParameters::find().MarkupValueBase == MarkupValueBase::LineAmountInclCharges
                && MarkupTrans::exist(source.TableId, source.RecId)
                && (_isTaxIncludedInItemPrice || TaxMarkupCompound::existsMarkupTransWithMarkupTaxChargeList(source));

            if (transactionCache)
            {
                transactionCache.set(classStr(TaxMarkupCompound), transactionScopeCacheKey, ret);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsMarkupTransWithMarkupTaxChargeList</Name>
				<Source><![CDATA[
    private static boolean existsMarkupTransWithMarkupTaxChargeList(Common _source)
    {
        MarkupTrans markupTrans;

        while select MarkupTaxCharge from markupTrans
            index hint TableRecIdIdx
            where markupTrans.TransTableId == _source.TableId
                && markupTrans.TransRecId == _source.RecId
                && !markupTrans.IsDeleted
        {
            if (markupTrans.MarkupTaxCharge != conNull())
            {
                MarkupTaxCharge markupTaxCharge = MarkupTaxCharge::construct();
                markupTaxCharge.unpack(markupTrans.MarkupTaxCharge);

                if (markupTaxCharge.parmSalesTaxCodeList() && !markupTaxCharge.parmSalesTaxCodeList().empty())
                {
                    return true;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>