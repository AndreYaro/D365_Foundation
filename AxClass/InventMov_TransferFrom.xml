<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_TransferFrom</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventMov_TransferFrom</c> class is used together with inventory transfer orders.
/// </summary>
/// <remarks>
///  When using transfer orders and inventory movements, the following four movements are created for
///  each transfer order; that is, a
///  <c>
///  TableNum::InventTransferLine
///  </c>
///   record:
///  <list type="bullet">
///   <item>
///    <description>
///    <c>InventMov_TransferFrom</c> : issue transaction from warehouse.
///    </description>
///   </item>
///   <item>
///    <description>
///    <c>InventMov_TransferTransitTo</c> : receipt transaction to transit warehouse.
///    </description>
///   </item>
///   <item>
///    <description>
///    <c>InventMov_TransferTransitFrom</c> : issue transaction from transit warehouse.
///    </description>
///   </item>
///   <item>
///    <description>
///    <c>InventMov_TransferTo</c> : receipt transaction to warehouse.
///    </description>
///   </item>
///  </list>
/// </remarks>
[InventMovementFactoryAttribute(tableStr(InventTransferLine),InventMovSubType::None)]
class InventMov_TransferFrom extends InventMov_Transfer
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the specified <c>InventQty</c> to the <c>qtyRemainShip</c> of the <see
    ///    cref="T:InventTransferLine" /> that is related to this movement.
    /// </summary>
    /// <param name="_inventQty">
    ///    The quantity to be added.
    /// </param>
    public void addRemainPhysical(InventQty  _inventQty)
    {
        inventTransferLine.QtyRemainShip    += _inventQty * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchDispReservationBlockedFieldId</Name>
				<Source><![CDATA[
    public FieldId batchDispReservationBlockedFieldId()
    {
        return fieldNum(PdsDispositionMaster, PdsTransBlockReserve);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBuffer</Name>
				<Source><![CDATA[
    public void updateBuffer(boolean _updateReservation = true)
    {
        InventTransferLineEstimation estimation = InventTransferLineEstimation::newFromLine(inventTransferLine);
        estimation.parmUpdateHeader(NoYes::Yes);
        estimation.parmSkipReservation(!_updateReservation);
        estimation.setIsCancellingTransferOrder(parmId);

        InventTransferLineUpdateParameters parameters = InventTransferLineUpdateParameters::construct();
        parameters.updateLoadLines = true;
        parameters.estimation = estimation;

        inventTransferLine.update(parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveReservedWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the movement type can have WHS work created that takes over reserving the lower levels of the hierarchy.
    /// </summary>
    /// <returns>
    /// This method return true for this type of movement if the movement item is WHS enabled.
    /// </returns>
    public boolean canHaveReservedWork()
    {
        return this.isItemWHSEnabled() 
            && (!WHSReservationHierarchyInventDimUtil::isLocationOrBelowSpecified(this.inventTable(), this.inventdim()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the <c>InventLocationId</c> value of the <c>InventDim</c> record of this movement is
    ///    the same as the <c>InventLocationId</c> value of the <c>TransferFrom</c> location of the <see
    ///    cref="T:InventTransferTable" /> that is related to this movement.
    /// </summary>
    /// <returns>
    ///    true if the two <c>InventLocationId</c> values are the same; otherwise, false.
    /// </returns>
    protected boolean checkInventLocationId()
    {
        if (this.inventdim().InventLocationId != InventTransferTable::find(inventTransferLine.TransferId).InventLocationIdFrom)
        {
            return checkFailed(strFmt("@SYS78511", InventTransferTable::find(inventTransferLine.TransferId).InventLocationIdFrom));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateReservation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that used inventory items cannot be reserved at the destination warehouse.
    /// </summary>
    /// <param name="_updateNow">
    ///    An instance of the <c> InventUpd_Reservation</c> class that contains the current inventory update
    ///    reservation.
    /// </param>
    /// <returns>
    ///    true if the validation is correct; otherwise, false.
    /// </returns>
    public boolean checkUpdateReservation(InventUpd_Reservation _updateNow)
    {
        boolean     ret = true;

        if (_updateNow)
        {
            InventDim inventDimLocal = _updateNow.parmInventDimCriteria();

            if (inventTransferTable.InventLocationIdTo == inventDimLocal.InventLocationId)
            {
                ret = checkFailed(strFmt("@SYS111426", inventDimLocal.InventLocationId));
            }
        }

        ret = ret && super(_updateNow);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWHSLoadLineInventTransConsistency</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the <c>WHSLoadLine</c> loadlines related to the source line is in sync with the inventory transactions.
    /// </summary>
    /// <param name="_onlyCheckWork">
    /// Determines if we only need to check for conflict with work created qty instead of doing full check.
    /// </param>
    public void checkWHSLoadLineInventTransConsistency(boolean _onlyCheckWork = false)
    {
        WHSLoadLineInventTransValidator whsLoadLineInventTransValidator = WHSLoadLineInventTransValidator::newFromParameters(this.transId(),this.inventTransOriginId(),WHSLoadLineDataBuilder::construct(),WHSLoadLineUpdater::newFromTransId(this.transId()));
        whsLoadLineInventTransValidator.parmOnlyCheckWork(_onlyCheckWork);
        whsLoadLineInventTransValidator.validateLoadLineDimensionConsistency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveOutboundLoadLine</Name>
				<Source><![CDATA[
    public boolean canHaveOutboundLoadLine()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the relationship between the inventory transactions originator and the owner.
    /// </summary>
    public void createOriginOwnerRelationship()
    {
        InventTransOriginId originId = this.inventTransOriginId();

        if (originId && inventTransferLine.RecId)
        {
            InventTransOriginTransferShip::writeOriginOwnerRelationship(inventTransferLine.DataAreaId, inventTransferLine.TransferId, inventTransferLine.LineNum, originId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will return the DefaultDimension based up on the InventTransId
    /// </summary>
    /// <returns>
    /// Default dimension
    /// </returns>
    public DimensionDefault defaultDimension()
    {
        if (InventTransferLine::enableDefaultDimensionControl())
        {
            return inventTransferLine.DimensionDefaultShipFrom;
        }

        // <GIN>
        if (this.useParmLineDefaultDimension_IN())
        {
            return (select firstOnly InventTransferParmLine where InventTransferParmLine.ParmId == this.parmInventParmID_IN()
                                                                && InventTransferParmLine.InventTransId == inventTransferLine.InventTransId).DefaultDimension_IN;
        }
        // </GIN>

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the relationship between the inventory transactions originator and the owner that
    ///    corresponds.
    /// </summary>
    public void deleteOriginOwnerRelationship()
    {
        if (inventTransferLine.RecId)
        {
            InventTransOriginTransferShip::deleteOwnerRelationship(inventTransferLine.DataAreaId, inventTransferLine.TransferId, inventTransferLine.LineNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpiryCheckDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the date to check against for an expiry date.
    /// </summary>
    /// <returns>
    /// A date.
    /// </returns>
    public TransDate getExpiryCheckDate()
    {
        TransDate   transDate;

        if (#PdsShelfEnabled)
        {
            transDate = inventTransferLine.ReceiveDate;
        }
        else
        {
            transDate = super();
        }

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimFrom</Name>
				<Source><![CDATA[
    protected InventDim inventDimFrom()
    {
        return inventTransferLine.inventDimShip();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>InventDimId</c> of the <see cref="T:InventTransferLine" /> that is related to this
    ///    movement.
    /// </summary>
    /// <returns>
    ///    The <c>InventDimId</c> of the <c>InventTransferLine</c> that is related to this movement.
    /// </returns>
    public InventDimId inventDimId()
    {
        return inventTransferLine.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimMerged</Name>
				<Source><![CDATA[
    public InventDim inventDimMerged(InventDim _inventDim)
    {
        return inventTransferLine.inventDimMergeWarehouse(inventTransferTable.InventLocationIdFrom,inventTransferTable,_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimTo</Name>
				<Source><![CDATA[
    protected InventDim inventDimTo()
    {
        return inventTransferLine.inventDimTransitTo(inventTransferTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the ID of the inventory transaction originator that corresponds to the movement.
    /// </summary>
    /// <param name="_inventTransOriginId">
    ///    The new value of the ID of the inventory transaction originator.
    /// </param>
    /// <returns>
    ///    The ID of the inventory transaction originator that corresponds to the movement.
    /// </returns>
    public InventTransOriginId inventTransOriginId(InventTransOriginId _inventTransOriginId = inventTransOriginId)
    {
        if (_inventTransOriginId != inventTransOriginId)
        {
            inventTransOriginId = _inventTransOriginId;
        }
        else
        {
            if (!inventTransOriginId)
            {
                inventTransOriginId = InventTransOriginTransferShip::findInventTransOriginId(inventTransferLine.DataAreaId, inventTransferLine.TransferId, inventTransferLine.LineNum);
            }
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markingRefInventTransOrigin</Name>
				<Source><![CDATA[
    public InventTransOriginId markingRefInventTransOrigin()
    {
        // When Retail is enabled
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            // Mark PO for cross docking
            if (inventTransferLine.RetailReplenishRefRecId && inventTransferLine.RetailReplenishRefTableId == tableNum(RetailBuyersPushLineQty))
            {
                // Find the InventTransOrigin of the PO line of the BuyersPushLine
                InventTransOriginId originId = RetailBuyersPushLineQty::findPurchLineInventTransOriginId(inventTransferLine.RetailReplenishRefRecId);

                if (originId)
                {
                    return originId;
                }
            }
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a new <see cref="T:InventMov_TransferFrom" /> that is based on the original <see
    ///    cref="T:InventTransferLine" />.
    /// </summary>
    /// <returns>
    ///    A new instance of <c>InventMov_TransferFrom</c>.
    /// </returns>
    public InventMovement newMovement_Orig()
    {
        if (!inventTransferLine.RecId)
        {
            return null;
        }

        return InventMov_TransferFrom::newFromInventTransferLine(inventTransferLine.orig(),inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_TransferIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns this instance of <c>InventMovement</c>.
    /// </summary>
    /// <returns>
    ///    The current instance of <c>InventMovement</c>.
    /// </returns>
    public InventMovement  newMovement_TransferIssue()
    {
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_TransferReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a value of new <c>InventMovement</c> that is based on the movement of <see
    ///    cref="T:InventTransferLine" /> and an <c>InventMovSunType</c> of <c>TransferOrderTransitTo</c>.
    /// </summary>
    /// <returns>
    ///    A new <c>InventMovement</c> that is constructed based on this movement of <see
    ///    cref="T:InventTransferLine" /> and a <c>InventMovSunType</c> of <c>TransferOrderTransitTo</c>.
    /// </returns>
    public InventMovement  newMovement_TransferReceipt()
    {
        return InventMovement::construct(this.buffer(),InventMovSubType::TransferOrderTo,this.childBuffer());
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_TransferReceiptShip</Name>
				<Source><![CDATA[
    public InventMovement newMovement_TransferReceiptShip()
    {
        return InventMovement::construct(this.buffer(),InventMovSubType::TransferOrderTo,this.childBuffer());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsConsiderRestrictReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the batch disposition functionality should be considered reservation.
    /// </summary>
    /// <returns>
    /// Always returns true;
    /// </returns>
    public boolean pdsConsiderRestrictReservation()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAddRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an amount to the catch weight remain physical quantity.
    /// </summary>
    /// <param name="_qty">
    /// The catch weight quantity to add to the catch weight remain physical quantity.
    /// </param>
    public void pdsCWAddRemainPhysical(PdsCWInventQty _qty)
    {
        inventTransferLine.PdsCWQtyRemainShip +=  _qty * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight remain physical quantity.
    /// </summary>
    /// <returns>
    /// The catch weight remain physical quantity.
    /// </returns>
    public PdsCWInventQty pdsCWRemainPhysical()
    {
        return this.transSign() * inventTransferLine.PdsCWQtyRemainShip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReserveQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight reserve quantity.
    /// </summary>
    /// <returns>
    /// The catch weight reserve quantity.
    /// </returns>
    public PdsCWInventQty pdsCWReserveQty()
    {
        return abs(inventTransferLine.PdsCWQtyRemainShip) * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSetRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the catch weight remain physical quantity.
    /// </summary>
    /// <param name="_qty">
    /// The value to set.
    /// </param>
    public void pdsCWSetRemainPhysical(PdsCWInventQty _qty)
    {
        inventTransferLine.PdsCWQtyRemainShip = _qty * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight transaction quantity.
    /// </summary>
    /// <returns>
    /// The catch weight quantity.
    /// </returns>
    public PdsCWInventQty pdsCWTransQty()
    {
        return inventTransferLine.PdsCWQtyTransfer * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsOverrideFEFO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a FEFO override.
    /// </summary>
    /// <returns>
    /// The FEFO override.
    /// </returns>
    public PdsOverrideFEFO pdsOverrideFEFO()
    {
        return inventTransferLine.PdsOverrideFEFO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the quantity that remains to be shipped.
    /// </summary>
    /// <returns>
    ///    The quantity that remains to be shipped.
    /// </returns>
    public InventQty remainPhysical()
    {
        // <GIN>
        if (inventTransferLine.checkForUnitID_IN())
        {
            return this.transSign() * inventTransferLine.converUnit_IN(inventTransferLine.QtyRemainShip);
        }
        else
        {
        // </GIN>
            return this.transSign() * inventTransferLine.QtyRemainShip;
        // <GIN>
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reserve quantity.
    /// </summary>
    /// <returns>
    /// The reserve quantity.
    /// </returns>
    public InventQty reserveQty()
    {
        InventQty ret;

        if (inventTransferLine.AutoReservation
            && this.transSign() <= 0
            && this.pdsCWItem())
        {
            ret = abs(inventTransferLine.PdsCWQtyRemainShip * PdsCatchWeight::minInventQty(this.itemId(), 1)) * this.transSign();
        }
        else 
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the inventory dimension ID of the <see cref="T:InventTransferLine" /> of this movement to the
    ///    <c>InventDimId</c> that is passed as an argument.
    /// </summary>
    /// <param name="_dimId">
    ///    The<c> InventDimId</c> that should be assigned.
    /// </param>
    public void setInventDimId(InventDimId _dimId)
    {
        inventTransferLine.InventDimId = _dimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the quantity that remains to be shipped to the quantity that is passed as an argument.
    /// </summary>
    /// <param name="_inventQty">
    ///    The <c>InventQty</c> that should be assigned.
    /// </param>
    public void setRemainPhysical(InventQty  _inventQty)
    {
        inventTransferLine.QtyRemainShip = _inventQty * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>shipdate</c> of the <see cref="T:InventTransferLine" /> of this movement.
    /// </summary>
    /// <returns>
    ///    The <c>shipdate</c> of the <c>InventTransferLine</c> of this movement.
    /// </returns>
    public TransDate transDate()
    {
        return inventTransferLine.ShipDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferDirection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the direction of the transfer movements.
    /// </summary>
    /// <returns>
    ///    The direction of the transfer movements.
    /// </returns>
    public InventDirection transferDirection()
    {
        return InventDirection::Issue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferInventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of a transfer counterpart inventory transaction originator that corresponds to the
    ///    movement.
    /// </summary>
    /// <returns>
    ///    An ID of transfer counterpart inventory transaction originator that corresponds to the movement.
    /// </returns>
    public InventTransOriginId transferInventTransOriginId()
    {
        return InventTransOrigin::findByInventTransId(inventTransferLine.InventTransIdTransitTo).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>InventTransId</c> of the <see cref="T:InventTransferLine" /> of this movement.
    /// </summary>
    /// <returns>
    ///    The <c>InventTransId</c> of the <c>InventTransferLine</c> of this movement.
    /// </returns>
    public InventTransId transId()
    {
        return inventTransferLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>transSign</c> that represents the direction of this transaction.
    /// </summary>
    /// <returns>
    ///    -1, as an <c>Integer</c>.
    /// </returns>
    public Integer transSign()
    {
        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>InventTransType</c> of this movement.
    /// </summary>
    /// <returns>
    ///    <c>InventTransType::TransferOrderShip</c>.
    /// </returns>
    public InventTransType transType()
    {
        return InventTransType::TransferOrderShip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReturnCostValue</Name>
				<Source><![CDATA[
    public container calcReturnCostValue(InventTrans _inventTrans)
    {
        Voucher returnVoucher;

        if (this.parmInventParmID())
        {
            InventTransferParmTable inventTransferParmTable = InventTransferParmTable::find(this.parmInventParmID(), this.transRefId());
            if (inventTransferParmTable.CanceledShipmentJournalRecId)
            {
                returnVoucher = inventTransferParmTable.VoucherShipmentId;
            }
        }

        if (returnVoucher)
        {
            InventTrans     inventTrans;
            InventQty       qty;
            CostAmount      value;
            CostAmount      valueSecCur;

            select sum(Qty), sum(CostAmountPosted), sum(CostAmountAdjustment), sum(CostAmountSecCurPosted_RU), sum(CostAmountSecCurAdjustment_RU) from inventTrans
                where inventTrans.InventTransOrigin           == _inventTrans.ReturnInventTransOrigin
                    &&  inventTrans.StatusIssue               == StatusIssue::Sold
                    &&  inventTrans.StatusReceipt             == StatusReceipt::None
                    &&  inventTrans.PackingSlipReturned       == NoYes::No
                    &&  inventTrans.ReturnInventTransOrigin   == _inventTrans.InventTransOrigin
                    &&  inventTrans.VoucherPhysical           == returnVoucher
                    &&  inventTrans.inventDimId               == _inventTrans.inventDimId;

            qty   += inventTrans.Qty;
            value += inventTrans.costValue();
            valueSecCur += inventTrans.costValueSecCur_RU();

            return [qty, value, valueSecCur];
        }
        else
        {
            return super(_inventTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReceiptPhysicalCostAmount</Name>
				<Source><![CDATA[
    [Wrappable(false), Hookable(false)]
    protected CostAmount calcReceiptPhysicalCostAmount(
        InventTrans     _inventTrans,
        InventUpd_Physical  _update)
    {
        CostAmount costAmount;

        if (_update &&
            _update.parmReturnMode() == InventUpdate::financialReturn())
        {
            boolean isTransferOrderShipmentCancellation;

            if (this.parmInventParmID() && this.transRefId())
            {
                InventTransferParmTable inventTransferParmTable = InventTransferParmTable::find(this.parmInventParmID(), this.transRefId());
                isTransferOrderShipmentCancellation = inventTransferParmTable.CanceledShipmentJournalRecId != 0;
            }

            if (isTransferOrderShipmentCancellation)
            {
                InventQty       returnQty;
                CostAmount      returnValue;

                [returnQty,returnValue] = this.calcReturnCostValue(_inventTrans);
                if (returnQty < 0 && returnValue < 0)
                {
                    costAmount = CurrencyExchangeHelper::amount(returnValue / returnQty * _inventTrans.Qty);
                }
            }
            else
            {
                costAmount = super(_inventTrans, _update);
            }
        }
        else
        {
            costAmount = super(_inventTrans, _update);
        }

        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>InventMov_TransferFrom</c> class based on the specified record.
    /// </summary>
    /// <param name="_inventTransferLine">
    ///    The record in the <c>InventTransferLine</c> table for which the class is instantiated.
    /// </param>
    /// <param name="_inventType">
    ///    The associated <c>InventType</c> class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_TransferFrom</c> class.
    /// </returns>
    public static InventMov_TransferFrom newFromInventTransferLine(
        InventTransferLine      _inventTransferLine,
        InventType              _inventType         = new InventType(_inventTransferLine))
    {
        return new InventMov_TransferFrom(_inventTransferLine, _inventType);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>