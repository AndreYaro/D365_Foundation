<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OffCheckPosition_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class OffCheckPosition_RU
{
    OffReportType_RU   reportType;
    OffPosition_RU     position;

    boolean            ret;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    public boolean check()
    {
        switch (reportType)
        {
            case OffReportType_RU::General                  :
                ret = this.checkGeneral();
                break;
            case OffReportType_RU::AdvanceReport,
                 OffReportType_RU::CashBookPage,
                 OffReportType_RU::CashSlip,
                 OffReportType_RU::CashCountStatement       :
                ret = this.checkGL();
                break;
            case OffReportType_RU::SalesInvoice,
                 OffReportType_RU::SalesInvoiceCreditNote,
                 OffReportType_RU::SalesInvoice4Paym        :
                ret = this.checkSales();
                break;

            case OffReportType_RU::PurchInvoice,
                 OffReportType_RU::PurchInvoiceCreditNote,
                 OffReportType_RU::PurchInvoice4Paym        :
                ret = this.checkPurch();
                break;
            case OffReportType_RU::InventTORG16,
                 OffReportType_RU::InventTORG13,
                 OffReportType_RU::InventM11,
                 OffReportType_RU::InventINV19              :
                ret = this.checkInvent();
                break;
            case OffReportType_RU::ProdM8                   :
                ret = this.checkProd();
                break;
            case OffReportType_RU::CustFacture,
                 OffReportType_RU::VendFacture,
                 OffReportType_RU::CustFactureCreditNote,
                 OffReportType_RU::VendFactureCreditNote,
                 OffReportType_RU::EmplAdvanceReportFacture,
                 OffReportType_RU::TaxCorrectionFactureCust,
                 OffReportType_RU::TaxCorrectionFactureVend  :
                ret = this.checkFacture();
                break;
            case OffReportType_RU::SalesInvoiceM15,
                 OffReportType_RU::PurchM4M7,
                 OffReportType_RU::TransferInvoiceM15        :
                ret = this.checkInvLocation();
                break;
            case OffReportType_RU::RDeferrals                :
                ret = this.checkRDeferrals();
                break;
            case OffReportType_RU::RAssetsINV1,
                 OffReportType_RU::RAssetsINV1a              :
                 ret = this.checkInventoryRAssets();
                break;
            default:
                ret = this.checkDefaultReportTypes();
                break;
        }

        if (! ret)
        {
            error(strFmt("@GLS102177", enum2str(reportType), enum2str(position)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFacture</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for facture report types.
    /// </summary>
    /// <returns>true if validation succeeded; otherwise, false.</returns>
    public boolean checkFacture()
    {
        boolean ok = false;

        switch (reportType)
        {
            case OffReportType_RU::CustFacture               :
            case OffReportType_RU::VendFactureCreditNote     :
            case OffReportType_RU::TaxCorrectionFactureCust  :
                ok = (position == OffPosition_RU::Responsible);
                break;
            case OffReportType_RU::TaxCorrectionFactureVend  :
            case OffReportType_RU::EmplAdvanceReportFacture  :
            case OffReportType_RU::CustFactureCreditNote     :
            case OffReportType_RU::VendFacture               :
                ok = (position == OffPosition_RU::Director      ||
                      position == OffPosition_RU::Accountant    ||
                      position == OffPosition_RU::Responsible);
                break;
            default :
                ok = this.checkFactureDefaultReportTypes();
                break;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkGeneral</Name>
				<Source><![CDATA[
    private boolean checkGeneral()
    {
        boolean ok;

        switch (position)
        {
            case OffPosition_RU::Director,
                 OffPosition_RU::Accountant :
                ok = true;
                break;

            default :
                ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkGL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for GL report types.
    /// </summary>
    /// <returns>true if validation succeeded; otherwise, false.</returns>
    public boolean checkGL()
    {
        boolean ok;

        switch (reportType)
        {
            case OffReportType_RU::CashSlip :
                ok = (position == OffPosition_RU::Cashier);
                break;
            case OffReportType_RU::AdvanceReport :
                ok = (position == OffPosition_RU::Cashier   ||
                      position == OffPosition_RU::Requester ||
                      position == OffPosition_RU::Manager   ||
                      position == OffPosition_RU::AccountantJ);
                break;
            case OffReportType_RU::CashBookPage :
                ok = (position == OffPosition_RU::Cashier);
                break;
            case OffReportType_RU::CashCountStatement :
                ok = (position == OffPosition_RU::InCharge  ||
                      position == OffPosition_RU::Chairman  ||
                      position == OffPosition_RU::Member);
                break;
            default:
                ok = this.checkGLDefaultReportTypes();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for invent report types.
    /// </summary>
    /// <returns>true if validation succeeded; otherwise, false.</returns>
    public boolean checkInvent()
    {
        boolean ok;

        switch (reportType)
        {
            case OffReportType_RU::InventTORG16 :
                ok = (position == OffPosition_RU::Chairman  ||
                      position == OffPosition_RU::Member    ||
                      position == OffPosition_RU::InCharge);
                break;
            case OffReportType_RU::InventTORG13 :
                ok = (position == OffPosition_RU::Supplier  ||
                      position == OffPosition_RU::Taker);
                break;
            case OffReportType_RU::InventM11:
                ok = (position == OffPosition_RU::Requester ||
                      position == OffPosition_RU::Manager   ||
                      position == OffPosition_RU::InCharge  ||
                      position == OffPosition_RU::Supplier  ||
                      position == OffPosition_RU::Acceptor);
                break;
            case OffReportType_RU::InventINV19:
                ok = (position == OffPosition_RU::InCharge);
                break;

            default:
                ok = this.checkInventDefaultReportTypes();
                break;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventoryRAssets</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for asset report types.
    /// </summary>
    /// <returns>true if validation succeeded; otherwise, false.</returns>
    public boolean checkInventoryRAssets()
    {
        return (position == OffPosition_RU::Chairman    ||
                position == OffPosition_RU::Member);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for inventory location report types.
    /// </summary>
    /// <returns>true if validation succeeded; otherwise, false.</returns>
    public boolean checkInvLocation()
    {
        boolean ok = false;

        switch (reportType)
        {
            case OffReportType_RU::PurchM4M7        :
                ok = (position == OffPosition_RU::Acceptor   ||
                      position == OffPosition_RU::Member     ||
                      position == OffPosition_RU::Chairman   ||
                      position == OffPosition_RU::Supplier);
                break;
            case OffReportType_RU::SalesInvoiceM15  :
                ok = (position == OffPosition_RU::Supplier   ||
                      position == OffPosition_RU::Taker      ||
                      position == OffPosition_RU::TransResp  ||
                      position == OffPosition_RU::TransRespCust);
                break;
            case OffReportType_RU::TransferInvoiceM15:
                ok = (position == OffPosition_RU::Supplier   ||
                      position == OffPosition_RU::Taker      ||
                      position == OffPosition_RU::TransResp);
                break;
            default:
                ok = this.checkInvLocationDefaultReportTypes();
                break;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for production report types.
    /// </summary>
    /// <returns>true if validation succeeded; otherwise, false.</returns>
    public boolean checkProd()
    {
        boolean ok;

        switch (reportType)
        {
            case OffReportType_RU::ProdM8:
                ok = (position == OffPosition_RU::Manager  ||
                      position == OffPosition_RU::Supplier ||
                      position == OffPosition_RU::Taker);
                break;

            default:
                ok = this.checkProdDefaultReportTypes();
                break;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for purchase report types.
    /// </summary>
    /// <returns>true if validation succeeded; otherwise, false.</returns>
    public boolean checkPurch()
    {
        boolean ok;

        switch (reportType)
        {
            case OffReportType_RU::PurchInvoice             :
                ok = (position == OffPosition_RU::Director      ||
                      position == OffPosition_RU::Accountant    ||
                      position == OffPosition_RU::Acceptor      ||
                      position == OffPosition_RU::Taker         ||
                      position == OffPosition_RU::Supplier      ||
                      position == OffPosition_RU::TransRespVend ||
                      position == OffPosition_RU::TransResp);
                break;
            case OffReportType_RU::PurchInvoiceCreditNote   :
                ok = (position == OffPosition_RU::Acceptor      ||
                      position == OffPosition_RU::Taker         ||
                      position == OffPosition_RU::Supplier      ||
                      position == OffPosition_RU::TransResp     ||
                      position == OffPosition_RU::TransRespVend);
                break;
            case OffReportType_RU::PurchInvoice4Paym        :
                ok = (position == OffPosition_RU::Director      ||
                      position == OffPosition_RU::Accountant    ||
                      position == OffPosition_RU::Filler        ||
                      position == OffPosition_RU::Responsible);
                break;

            default:
                ok = this.checkPurchDefaultReportTypes();
                break;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRDeferrals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for deferrals report types.
    /// </summary>
    /// <returns>true if validation succeeded; otherwise, false.</returns>
    public boolean checkRDeferrals()
    {
        return (position == OffPosition_RU::Chairman    ||
                position == OffPosition_RU::AccountantJ ||
                position == OffPosition_RU::Member      ||
                position == OffPosition_RU::InCharge);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for sales report types.
    /// </summary>
    /// <returns>true if validation succeeded; otherwise, false.</returns>
    public boolean checkSales()
    {
        boolean ok = true;

        switch (reportType)
        {
            case OffReportType_RU::SalesInvoice             :
                ok = (position == OffPosition_RU::Acceptor     ||
                      position == OffPosition_RU::Taker        ||
                      position == OffPosition_RU::Supplier     ||
                      position == OffPosition_RU::TransResp    ||
                      position == OffPosition_RU::TransRespCust);
                break;
            case OffReportType_RU::SalesInvoiceCreditNote   :
                ok = (position == OffPosition_RU::Acceptor     ||
                      position == OffPosition_RU::Taker        ||
                      position == OffPosition_RU::Director     ||
                      position == OffPosition_RU::Accountant   ||
                      position == OffPosition_RU::Supplier     ||
                      position == OffPosition_RU::TransResp    ||
                      position == OffPosition_RU::TransRespCust);
                break;
            case OffReportType_RU::SalesInvoice4Paym        :
                ok = (position == OffPosition_RU::Filler       ||
                      position == OffPosition_RU::Responsible);
                break;
            default:
                ok = this.checkSalesDefaultReportTypes();
                break;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(OffReportType_RU _reportType, OffPosition_RU _position)
    {
        reportType  = _reportType;
        position    = _position;

        ret         = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDefaultReportTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for another report types.
    /// </summary>
    /// <returns>true if validation succeeded; otherwise, false.</returns>
    [Replaceable]
    public boolean checkDefaultReportTypes()
    {
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkGLDefaultReportTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for another GL report types.
    /// </summary>
    /// <returns>true if validation succeeded; otherwise, false.</returns>
    [Replaceable]
    public boolean checkGLDefaultReportTypes()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesDefaultReportTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for another sales report types.
    /// </summary>
    /// <returns>true if validation succeeded; otherwise, false.</returns>
    [Replaceable]
    public boolean checkSalesDefaultReportTypes()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchDefaultReportTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for another purchase report types.
    /// </summary>
    /// <returns>true if validation succeeded; otherwise, false.</returns>
    [Replaceable]
    public boolean checkPurchDefaultReportTypes()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventDefaultReportTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for another inventory report types.
    /// </summary>
    /// <returns>true if validation succeeded; otherwise, false.</returns>
    [Replaceable]
    public boolean checkInventDefaultReportTypes()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProdDefaultReportTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for another production report types.
    /// </summary>
    /// <returns>true if validation succeeded; otherwise, false.</returns>
    [Replaceable]
    public boolean checkProdDefaultReportTypes()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFactureDefaultReportTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for another facture report types.
    /// </summary>
    /// <returns>true if validation succeeded; otherwise, false.</returns>
    [Replaceable]
    public boolean checkFactureDefaultReportTypes()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvLocationDefaultReportTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates position for another inventory location report types.
    /// </summary>
    /// <returns>true if validation succeeded; otherwise, false.</returns>
    [Replaceable]
    public boolean checkInvLocationDefaultReportTypes()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>