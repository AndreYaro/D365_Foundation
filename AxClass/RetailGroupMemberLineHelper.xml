<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailGroupMemberLineHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Retail group member line helper class.
/// </summary>
class RetailGroupMemberLineHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createOrUpdateOrDeleteRetailGroupMemberLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// create or update or delete retail group member line.
    /// </summary>
    /// <param name="_groupMemberLine">Group member line record.</param>
    /// <param name="_itemId">Item Id.</param>
    /// <param name="_color">Color.</param>
    /// <param name="_size">Size.</param>
    /// <param name="_style">Style.</param>
    /// <param name="_configId">Configuration.</param>
    /// <param name="_categoryName">Category name.</param>
    /// <param name="_categoryHierarchyName">Category hierarchy name.</param>
    /// <returns>true if deleted; otherwise, false.</returns>
    public static boolean createOrUpdateOrDeleteRetailGroupMemberLine(
        RetailGroupMemberLine _groupMemberLine,
        ItemId _itemId,
        EcoResColorName _color,
        EcoResSizeName _size,
        EcoResStyleName _style,
        EcoResConfigurationName _configId,
        EcoResCategoryName _categoryName,
        EcoResCategoryHierarchyName _categoryHierarchyName)
    {
        return RetailGroupMemberLineHelper::internalCreateOrUpdateOrRemoveRetailGroupMemberLine(
            _groupMemberLine,
            false,
            _itemId,
            _color,
            _size,
            _style,
            _configId,
            _categoryName,
            _categoryHierarchyName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateRetailGroupMemberLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// create or update retail group member line.
    /// </summary>
    /// <param name="_groupMemberLine">Group member line record.</param>
    /// <param name="_itemId">Item Id.</param>
    /// <param name="_color">Color.</param>
    /// <param name="_size">Size.</param>
    /// <param name="_style">Style.</param>
    /// <param name="_configId">Configuration.</param>
    /// <param name="_categoryName">Category name.</param>
    /// <param name="_categoryHierarchyName">Category hierarchy name.</param>
    public static void createOrUpdateRetailGroupMemberLine(
            RetailGroupMemberLine _groupMemberLine,
            ItemId _itemId,
            EcoResColorName _color,
            EcoResSizeName _size,
            EcoResStyleName _style,
            EcoResConfigurationName _configId,
            EcoResCategoryName _categoryName,
            EcoResCategoryHierarchyName _categoryHierarchyName)
    {
        RetailGroupMemberLineHelper::internalCreateOrUpdateOrRemoveRetailGroupMemberLine(
            _groupMemberLine,
            true,
            _itemId,
            _color,
            _size,
            _style,
            _configId,
            _categoryName,
            _categoryHierarchyName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>internalCreateOrUpdateOrRemoveRetailGroupMemberLine</Name>
				<Source><![CDATA[
    private static boolean internalCreateOrUpdateOrRemoveRetailGroupMemberLine(
        RetailGroupMemberLine _groupMemberLine,
        boolean _isRequired,
        ItemId _itemId,
        EcoResColorName _color,
        EcoResSizeName _size,
        EcoResStyleName _style,
        EcoResConfigurationName _configId,
        EcoResCategoryName _categoryName,
        EcoResCategoryHierarchyName _categoryHierarchyName)
    {
        boolean deleted = false;
        if (_itemId)
        {
            InventTable inventTable = InventTable::find(_itemId);
            if (!inventTable)
            {
                throw error(strFmt("@Retail:InvalidItemId", _itemId));
            }

            _groupMemberLine.Product = inventTable.Product;

            if (_color || _size || _style || _configId)
            {
                InventDimCombination inventDimCombination;
                InventDim inventDim;
                select firstonly inventDimCombination
                        where inventDimCombination.ItemId == _itemId
                            && inventDimCombination.DistinctProductVariant != 0
                    join inventDim
                        where inventDim.inventDimId == inventDimCombination.InventDimId
                            && inventDim.InventColorId == _color
                            && inventDim.InventSizeId == _size
                            && inventDim.InventStyleId == _style
                            && inventDim.configId == _configId
                    ;

                if (!inventDimCombination)
                {
                    select firstonly inventDim
                        where inventDim.InventColorId == _color
                            && inventDim.InventSizeId == _size
                            && inventDim.InventStyleId == _style
                        && inventDim.configId == _configId;

                    if (inventDim)
                    {
                        _groupMemberLine.InventDimId = inventDim.inventDimId;
                    }
                    else
                    {
                        inventDim.InventColorId = _color;
                        inventDim.InventSizeId = _size;
                        inventDim.InventStyleId = _style;
                        inventDim.configId = _configId;

                        InventDim::create(inventDim);

                        select firstonly inventDim
                        where inventDim.InventColorId == _color
                            && inventDim.InventSizeId == _size
                            && inventDim.InventStyleId == _style
                        && inventDim.configId == _configId;

                        _groupMemberLine.InventDimId = inventDim.inventDimId;
                    }
                }
                else
                {
                    _groupMemberLine.Variant = inventDimCombination.DistinctProductVariant;
                }
            }
            else
            {
                _groupMemberLine.Variant = 0;
            }

            // Check if product is modified to reset the category.
            if (_groupMemberLine.RecId
                && _groupMemberLine.Product
                && _groupMemberLine.Product != _groupMemberLine.orig().Product)
            {
                if (_categoryName)
                {
                    // Check if the modified product exist under the specified category.
                    boolean found = RetailGroupMemberLineHelper::checkRetailProductExistInCategory(
                        EcoResCategory::findCategoryByNameAndHierarchy(_categoryName, _categoryHierarchyName).RecId, _groupMemberLine.Product);

                    // If modified product does not exist under specified category then reset category & category hierarchy values.
                    if (!found)
                    {
                        _groupMemberLine.Category = 0;
                        _categoryName = '';
                        _groupMemberLine.CategoryHierarchy = 0;
                        _categoryHierarchyName = '';
                    }
                }
                else
                {
                    _groupMemberLine.Category = 0;
                    _groupMemberLine.CategoryHierarchy = 0;
                }
            }
        }
        else
        {
            _groupMemberLine.Product = 0;
            _groupMemberLine.Variant = 0;
        }

        if (_categoryName && _categoryHierarchyName)
        {
            EcoResCategoryHierarchy categoryHierarchy = EcoResCategoryHierarchy::findByName(_categoryHierarchyName);

            EcoResCategory ecoResCategory;
            if (categoryHierarchy)
            {
                ecoResCategory = EcoResCategory::findByName(_categoryName, categoryHierarchy.RecId);
            }

            if (!ecoResCategory)
            {
                throw error(strFmt("@Retail:InvalidCategory", _categoryName, _categoryHierarchyName));
            }

            _groupMemberLine.Category = ecoResCategory.RecId;
            _groupMemberLine.CategoryHierarchy = categoryHierarchy.Recid;
        }
        else if (_groupMemberLine.Category && _groupMemberLine.Product == 0 && _groupMemberLine.Variant == 0)
        {
            // Keep _groupMemberLine.Category for category based discount lines.
        }
        else
        {
            // Resetting the Category to update based on product while importing through Data Entities.
            if (_groupMemberLine.Product && !_groupMemberLine.Category)
            {
                if (_categoryHierarchyName)
                {
                    // Resetting the category based on product and category hierarchy.
                    EcoResCategoryHierarchy categoryHierarchy = EcoResCategoryHierarchy::findByName(_categoryHierarchyName);
                    _groupMemberLine.Category = EcoResProductCategory::findByProductAndCategoryHierarchy(_groupMemberLine.Product, categoryHierarchy.RecId).Category;
                }
                else
                {
                    EcoResProductCategory ecoResProductCategory;
                    EcoResCategoryHierarchyRole ecoResCategoryHierarchyRole;

                    // Resetting the category based on product for retail hierarchy.
                    _groupMemberLine.Category = EcoResProductCategory::findByProductIdCategoryHierarchyRole(_groupMemberLine.Product,
                        EcoResCategoryNamedHierarchyRole::Retail).Category;

                    // If product is not found in retail category then fetch the product in category and category hierarchy with Supplemental retail hierarchy.
                    if (!_groupMemberLine.Category)
                    {
                        EcoResCategory ecoResCategory;
                        RetailAllProductCategories retailAllProductCategories;

                        // Retrieve the maximum level of children category with Supplemental retail hierarchy for the product.
                        select firstonly RecId from ecoResCategory
                            order by ecoResCategory.Level desc
                            exists join retailAllProductCategories
                                where retailAllProductCategories.Category == ecoResCategory.RecId
                                    && retailAllProductCategories.Product == _groupMemberLine.Product
                                exists join ecoResCategoryHierarchyRole
                                    where ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::RetailSpecialGroup
                                        && ecoResCategoryHierarchyRole.CategoryHierarchy == ecoResCategory.CategoryHierarchy;

                        _groupMemberLine.Category = ecoResCategory.RecId;
                    }

                    // Resetting the category hierarchy based on category.
                    if (!_groupMemberLine.CategoryHierarchy)
                    {
                        _groupMemberLine.CategoryHierarchy = EcoResCategory::find(_groupMemberLine.Category).CategoryHierarchy;
                    }
                }
            }
            else
            {
                _groupMemberLine.Category = 0;
                _groupMemberLine.CategoryHierarchy = 0;
            }
        }

        deleted = RetailGroupMemberLineHelper::createOrUpdateOrRemoveRetailGroupMemberLine(
                    _groupMemberLine,
                    _isRequired,
                    _itemId,
                    _color,
                    _size,
                    _style,
                    _configId,
                    _categoryName,
                    _categoryHierarchyName);

        return deleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateOrRemoveRetailGroupMemberLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates or deletes retail group member line.
    /// </summary>
    /// <param name="_groupMemberLine">The record buffer of <c>RetailGroupMemberLine</c> table.</param>
    /// <param name="_isRequired">Requires at least one product, variant, or category.</param>
    /// <param name="_itemId">Item Id.</param>
    /// <param name="_color">Color.</param>
    /// <param name="_size">Size.</param>
    /// <param name="_style">Style.</param>
    /// <param name="_configId">Configuration.</param>
    /// <param name="_categoryName">Category name.</param>
    /// <param name="_categoryHierarchyName">Category hierarchy name.</param>
    /// <returns>true if deleted; otherwise, false.</returns>
    protected static boolean createOrUpdateOrRemoveRetailGroupMemberLine(
        RetailGroupMemberLine _groupMemberLine,
        boolean _isRequired,
        ItemId _itemId,
        EcoResColorName _color,
        EcoResSizeName _size,
        EcoResStyleName _style,
        EcoResConfigurationName _configId,
        EcoResCategoryName _categoryName,
        EcoResCategoryHierarchyName _categoryHierarchyName)
    {
        boolean deleted = false;

        if (!_groupMemberLine.Product && !_groupMemberLine.Variant && !_groupMemberLine.Category)
        {
            if (_isRequired)
            {
                throw error("@Retail:InvalidGroupMemberLine");
            }
            else if (_groupMemberLine)
            {
                _groupMemberLine.delete();
                deleted = true;
            }
        }
        else
        {
            _groupMemberLine.write();
        }

        return deleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRetailProductExistInCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified product is part of a specified category or ascendant categories.
    /// </summary>
    /// <param name = "_ecoResCategoryId">
    /// The Recid of the specified category.
    /// </param>
    /// <param name = "_ecoResProductRecId">
    /// The RecId of the specified product.
    /// </param>
    /// <returns>
    /// true if the specified product is part of a specified category or ascendant categories; otherwise, false.
    /// </returns>
    internal static boolean checkRetailProductExistInCategory(
        EcoResCategoryId _ecoResCategoryId,
        EcoResProductRecId _ecoResProductRecId)
    {
        boolean found = false;

        EcoResProductCategory ecoResProductCategory;
        EcoResCategoryHierarchyRole ecoResCategoryHierarchyRole;
        
        // Retrieves all the Retail category and product that matches with specified category and specified product.
        select RecId from ecoResProductCategory
            where ecoResProductCategory.Category == _ecoResCategoryId
                && ecoResProductCategory.Product == _ecoResProductRecId
            exists join ecoResCategoryHierarchyRole
                where ecoResCategoryHierarchyRole.CategoryHierarchy == ecoResProductCategory.CategoryHierarchy
                    && ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Retail;

        if (ecoResProductCategory.RecId)
        {
            found = true;
        }

        // If specified product is not found in specified category then fetch the specified product in all categories with retail Category hierarchy.
        if (!found)
        {
            select Category from ecoResProductCategory
                where ecoResProductCategory.Product == _ecoResProductRecId
                exists join ecoResCategoryHierarchyRole
                    where ecoResCategoryHierarchyRole.CategoryHierarchy == ecoResProductCategory.CategoryHierarchy
                        && ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Retail;

            if (ecoResProductCategory.Category)
            {
                // Retrieves all the ascendant categories to compare with specified category.
                EcoResCategory ascCategory = EcoResCategory::find(ecoResProductCategory.Category).getAscendants();

                while (ascCategory)
                {
                    // If ascendant categories matches with specified category then set true.
                    if (ascCategory.RecId == _ecoResCategoryId)
                    {
                        found = true;
                        break;
                    }

                    next ascCategory;
                }
            }

        }

        // If specified product is not found in category with retail Category hierarchy then fetch the specified product in category with Supplemental retail hierarchy.
        if (!found)
        {
            EcoResCategory ecoResCategory;
            RetailAllProductCategories retailAllProductCategories;

            // Finding specified product in all the categories with Supplemental retail hierarchy.
            select RecId from ecoResCategory
                where ecoResCategory.RecId == _ecoResCategoryId
                exists join retailAllProductCategories
                    where retailAllProductCategories.Category == ecoResCategory.RecId
                        && retailAllProductCategories.Product == _ecoResProductRecId
                    exists join ecoResCategoryHierarchyRole
                        where ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::RetailSpecialGroup
                            && ecoResCategoryHierarchyRole.CategoryHierarchy == ecoResCategory.CategoryHierarchy;

            if (ecoResCategory.RecId)
            {
                found = true;
            }
        }

        return found;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>