<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineCustInvoiceTransImpl_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax model class for <c>CustInvoiceTrans</c>.
/// </summary>
[TaxModelDocumentLineAttribute(tableStr(CustInvoiceTrans))]
public class TaxModelDocLineCustInvoiceTransImpl_IN extends TaxModelDocLineWithholdImpl_IN
{
    CustInvoiceJour  custInvoiceJour;
    CustInvoiceTrans custInvoiceTrans;

    TaxModelDocLineWithholdImpl_IN referenceModel;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canModifyTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction tax information can be modified or not.
    /// </summary>
    /// <returns>
    /// True if the tax information of document line can be modified; otherwise, false.
    /// </returns>
    public NoYes canModifyTaxInformation()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomsDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Customs Direction
    /// </summary>
    /// <returns>
    /// The <c>Direction_IN</c>
    /// </returns>
    public Direction_IN getCustomsDirection()
    {
        return referenceModel.getCustomsDirection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTable</c> based on the cust account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>CustTable</c>
    /// </returns>
    public CustTable getCustTable()
    {
        return custInvoiceJour.custTable_InvoiceAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLineOriginalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document line original table.
    /// </summary>
    /// <returns>
    /// The document line original table.
    /// </returns>
    public Common getDocumentLineOriginalTable()
    {
        return referenceModel.getDocumentLineOriginalTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseDirectSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets direct settlement of this document line.
    /// </summary>
    /// <returns>
    /// The <c>DirectSettlement_IN</c>
    /// </returns>
    public DirectSettlement_IN getExciseDirectSettlement()
    {
        return referenceModel.getExciseDirectSettlement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaximumRetailPriceTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the maximum retail price of the document line.
    /// </summary>
    /// <returns>
    /// The maximum retail price.
    /// </returns>
    public MaximumRetailPrice_IN getMaximumRetailPriceTransactionCurrency()
    {
        return referenceModel.getMaximumRetailPriceTransactionCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    public Qty getQuantity()
    {
        return custInvoiceTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferenceTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reference TaxModel doc line.
    /// </summary>
    /// <returns>
    /// The refernece taxModel doc line.
    /// </returns>
    public TaxModelTaxable getReferenceTaxModelDocLine()
    {
        return referenceModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax direction.
    /// </summary>
    /// <returns>
    /// The tax direction
    /// </returns>
    public TaxDirection getTaxDirection()
    {
        return TaxDirection::OutgoingTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRateBasingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax rate basing date for the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given tax type.
    /// </param>
    /// <returns>
    /// The tax rate date.
    /// </returns>
    public TransDate getTaxRateBasingDate(TaxType_IN _taxType)
    {
        return custInvoiceJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>TaxModelTransactionType_IN</c> of the transaction
    /// </summary>
    /// <returns>
    /// The <c>TaxModelTransactionType_IN</c> of the transaction
    /// </returns>
    public TaxModelTransactionType getTransactionType()
    {
        return referenceModel.getTransactionType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable_IN</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        SalesPurchJournalLine referenceTable;

        custInvoiceTrans = _documentLineMap;
        custInvoiceJour = custInvoiceTrans.custInvoiceJour();

        super(_documentLineMap);

        if (custInvoiceTrans.SalesId
        && custInvoiceTrans.InventTransId)
        {
            referenceTable = SalesParmLine::findInventTransId(custInvoiceJour.ParmId, custInvoiceTrans.InventTransId);
        }
        else
        {
            referenceTable = custInvoiceLine::findBySourceDocumentLine(custInvoiceTrans.SourceDocumentLine);
        }

        referenceModel = TaxModelDocLineFactory::newTaxModelDocLine(referenceTable) as TaxModelDocLineWithholdImpl_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExciseCENVATCreditAvailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line is CENVAT CreditA vailed or not.
    /// </summary>
    /// <returns>
    /// True if the document line is CENVAT Credit Availed;otherwise, false.
    /// </returns>
    public NoYes isExciseCENVATCreditAvailed()
    {
        return referenceModel.isExciseCENVATCreditAvailed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExciseConsignment</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line is consignment or not.
    /// </summary>
    /// <returns>
    /// True if the document line is consignment;otherwise, false.
    /// </returns>
    public NoYesId isExciseConsignment()
    {
        return referenceModel.isExciseConsignment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostAmountRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if excise amount register should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post excise amount register; otherwise, false.
    /// </returns>
    public NoYes shouldPostAmountRegister()
    {
        return referenceModel.shouldPostAmountRegister();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostQuantityRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if excise quantity register should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post excise quantity register; otherwise, false.
    /// </returns>
    public NoYes shouldPostQuantityRegister()
    {
        return referenceModel.shouldPostQuantityRegister();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isScrap</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line is scrap or not.
    /// </summary>
    /// <returns>
    /// True if the document line is scrap;otherwise, false.
    /// </returns>
    public NoYes isScrap()
    {
        NoYes ret;

        ret = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(custInvoiceTrans.salesLine()).ExciseIsScrap;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax module type
    /// </summary>
    /// <returns>
    /// The transaction tax module type
    /// </returns>
    public TaxModuleType getTaxModuleType()
    {
        if (custInvoiceTrans.SalesId
            && custInvoiceTrans.InventTransId)
        {
            return TaxModuleType::SalesInvoice;
        }
        else
        {
            return TaxModuleType::FreeTxtInvoice;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDiscAmount</Name>
				<Source><![CDATA[
    public Amount getDiscAmount()
    {
        return referenceModel.getDiscAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date
    /// </summary>
    /// <returns>
    /// The transaction invoice date
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        return custInvoiceJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction document date
    /// </summary>
    /// <returns>
    /// The transaction document date
    /// </returns>
    public DocumentDate getDocumentDate()
    {
        return custInvoiceJour.DocumentDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>