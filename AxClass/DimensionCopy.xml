<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
abstract class DimensionCopy
{
    DimensionDefaultMap         dimensionDefaultMap;

    LegalEntityRecId            legalEntityRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    abstract public DimensionDefault copy(DimensionDefault _defaultDimension)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionDefaultMap</Name>
				<Source><![CDATA[
    public DimensionDefaultMap parmDimensionDefaultMap(DimensionDefaultMap _dimensionDefaultMap = dimensionDefaultMap)
    {
        dimensionDefaultMap = _dimensionDefaultMap;

        return dimensionDefaultMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLegalEntityRecId</Name>
				<Source><![CDATA[
    public LegalEntityRecId parmLegalEntityRecId(LegalEntityRecId _legalEntityRecId = legalEntityRecId)
    {
        legalEntityRecId = _legalEntityRecId;

        return legalEntityRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCommon</Name>
				<Source><![CDATA[
    public static DimensionCopy newFromCommon(
        Common  _common,
        RecId _legalEntity
        )
    {
        DimensionDefaultMap dimensionDefaultMap;

        // the table should have the DefaultDimension field
        if (!SysDictTable::isTableMapped(tableNum(DimensionDefaultMap), _common.TableId))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        dimensionDefaultMap = _common;

        return DimensionCopy::newFromTable(dimensionDefaultMap, _legalEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTable</Name>
				<Source><![CDATA[
    public static DimensionCopy newFromTable(
        DimensionDefaultMap _dimensionDefaultMap,
        LegalEntityRecId    _legalEntityRecId
        )
    {
        DimensionCopy           dimensionCopy;
        boolean                 useSiteLink = DimensionCopy::useSiteLink(_dimensionDefaultMap, _legalEntityRecId);

        if (useSiteLink)
        {
            dimensionCopy = DimensionCopy_SiteActive::newStandard();
        }
        else
        {
            dimensionCopy = DimensionCopy_All::newStandard();
        }

        dimensionCopy.parmDimensionDefaultMap(_dimensionDefaultMap);
        dimensionCopy.parmLegalEntityRecId(_legalEntityRecId);

        return dimensionCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSiteLink</Name>
				<Source><![CDATA[
    private static boolean useSiteLink(
        DimensionDefaultMap _dimensionDefaultMap,
        LegalEntityRecId    _legalEntityRecId
    )
    {
        DataAreaId              legalEntityDataAreaId;
        legalEntityDataAreaId = CompanyInfo::getDataArea(_legalEntityRecId);

        if (!legalEntityDataAreaId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        changecompany (legalEntityDataAreaId)
        {
            return InventSite::useSiteLink(_dimensionDefaultMap);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>