<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_BOMChangeLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Process form control class for BOMChangeLine.
/// </summary>
class PmfFormCtrl_BOMChangeLine
    extends PmfFormCtrl
{
    BOM bom;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dataSourceActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event procesing for after active event on the data source.
    /// </summary>
    public void dataSourceActivePost()
    {
        super();

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.isFormulaEnabled())
        {
            this.parmFormRun().design().caption("@PRO145");

            this.registerCtrlRule(
                formRun.design().controlName(formcontrolstr(BOMChangeLine, GridBOM)),
                formRun.design().controlName(formcontrolstr(BOMChangeLine, BOM_BOMId)),
                methodstr(PmfFormCtrl_BOMChangeLine, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@PRO1115");

            this.registerCtrlRule(
                formRun.design().controlName(formcontrolstr(BOMChangeLine, GroupBOM)),
                formRun.design().controlName(formcontrolstr(BOMChangeLine, ItemBOMId)),
                methodstr(PmfFormCtrl_BOMChangeLine, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@PRO97");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Helper method to determine if the form is operating with a Formula.
    /// </summary>
    /// <returns>true if the form is operating with a Formula; false otherwise.</returns>
    public boolean isFormulaEnabled()
    {
        boolean     ret = false;

        ret = ret
            || this.menuItemName()
                    == menuitemdisplaystr(PmfFormChangeLine);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1 = buffer,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(BOM))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_BOMChangeLine construct()
    {
        return new PmfFormCtrl_BOMChangeLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct an instance of this form control using a given form reference.
    /// </summary>
    /// <param name="_fr">FormRun object reference of the form.</param>
    /// <returns>New instance of the form control for the change line form.</returns>
    public static PmfFormCtrl_BOMChangeLine newFromForm(FormRun _fr)
    {
        PmfFormCtrl frmCtrl;

        frmCtrl = PmfFormCtrl_BOMChangeLine::construct();
        frmCtrl.parmFormRun(_fr);
        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>