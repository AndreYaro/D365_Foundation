<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqEventProcessBatchDeleteUnusedKanbanTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Deletes the unused Kanbans.
/// </summary>
class ReqEventProcessBatchDeleteUnusedKanbanTask extends ReqEventProcessBatch implements BatchRetryable
{
    KanbanId                kanbanId;
    SalesId                 salesId;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        kanbanId,
        salesId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanId parmKanbanId(KanbanId _kanbanId = kanbanId)
    {
        kanbanId = _kanbanId;
        return kanbanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SalesId parmSalesId(KanbanId _salesId = salesId)
    {
        salesId = _salesId;
        return salesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReqEventProcessBatchDeleteUnusedKanbanTask newStandard(KanbanId _kanbanId, SalesId _salesId)
    {
        ReqEventProcessBatchDeleteUnusedKanbanTask  reqEventProcessBatchScheduleTask = new ReqEventProcessBatchDeleteUnusedKanbanTask();

        reqEventProcessBatchScheduleTask.parmKanbanId(_kanbanId);
        reqEventProcessBatchScheduleTask.parmSalesId(_salesId);

        return reqEventProcessBatchScheduleTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteUnusedEventKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the unused event kanbans by applying filters by kanban and sales order, if specified.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void deleteUnusedEventKanbans()
    {
        using (KanbanJobDeferredSchedulingScope deferredSchedulingScope = new KanbanJobDeferredSchedulingScope())
        {
            ReqEventProcessDeleteUnusedKanban   reqEventProcessDeleteUnusedKanban;

            reqEventProcessDeleteUnusedKanban = ReqEventProcessDeleteUnusedKanban::newStandard();

            if (kanbanId)
            {
                reqEventProcessDeleteUnusedKanban.run(Kanban::findKanbanId(kanbanId));
            }
            if (salesId)
            {
                reqEventProcessDeleteUnusedKanban.run(SalesTable::find(salesId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEvents</Name>
				<Source><![CDATA[
    public void processEvents()
    {
        try
        {
            this.deleteUnusedEventKanbans();
        }
        catch (Exception::Deadlock)
        {
            if (this.manageExceptionDeadlock())
            {
                retry;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (this.manageExceptionUpdateConflict())
            {
                retry;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if (this.manageExceptionDuplicateKeyException())
            {
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Description description()
    {
        return "@SYS321498";
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>