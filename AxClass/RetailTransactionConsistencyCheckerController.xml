<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionConsistencyCheckerController</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
using Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder;
using Microsoft.Dynamics.Commerce.Runtime.DataModel;

/// <summary>
/// The <c>RetailTransactionConsistencyChecker</c> class validates the Retail transaction before posting them in statement posting.
/// </summary>
internal class RetailTransactionConsistencyCheckerController extends RunBaseBatch implements BatchRetryable
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    private RetailTransactionConsistencyCheckerTaskParameters taskParameters;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct new consistency checker driver for a given store.
    /// </summary>
    /// <param name = "_storeId">Store number.</param>
    /// <returns>Consistency checker driver.</returns>
    public static RetailTransactionConsistencyCheckerController constructForStore(RetailStoreId _storeId = '')
    {
        RetailTransactionConsistencyCheckerController transactionConsistencyCheckerController = new RetailTransactionConsistencyCheckerController();
        transactionConsistencyCheckerController.taskParameters = RetailTransactionConsistencyCheckerTaskParameters::constructForStore(_storeId);

        return transactionConsistencyCheckerController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct new consistency checker driver for a given statement.
    /// </summary>
    /// <param name = "_params">The task paramters.</param>
    /// <returns>Consistency checker driver.</returns>
    public static RetailTransactionConsistencyCheckerController constructForParameters(RetailTransactionConsistencyCheckerTaskParameters _params)
    {
        RetailTransactionConsistencyCheckerController transactionConsistencyCheckerController = new RetailTransactionConsistencyCheckerController();

        transactionConsistencyCheckerController.taskParameters = _params;
        
        return transactionConsistencyCheckerController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runAsync</Name>
				<Source><![CDATA[
    internal static void runAsync(container _params)
    {
        RetailTransactionConsistencyCheckerTaskParameters taskParameters = RetailTransactionConsistencyCheckerTaskParameters::create(_params);

        RetailTransactionConsistencyCheckerController transactionConsistencyCheckerController = RetailTransactionConsistencyCheckerController::constructForParameters(taskParameters);
        transactionConsistencyCheckerController.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        System.Exception ex;
        int fromLine;

        RetailTransactionTable transactionTable;
        transactionTable.allowIndexHint(true);
        transactionTable.skipPostLoad(true);
        transactionTable.readPast(true);

        // Go though all transations that need to be validated.
        do
        {
            fromLine = Global::infologLine();

            try
            {
                ttsbegin;

                eventSource.EventWriteTransactionValidationTopPickingTransactionToValidate();
                
                // Top picking of a transaction.
                select pessimisticLock firstonly transactionTable
                    index hint invoiceIdSOIdStmtIdx
                    where   transactionTable.store == taskParameters.getStoreId()
                        &&  transactionTable.statementId == taskParameters.getStatementId()
                        &&  transactionTable.type == RetailTransactionType::Sales
                        &&  transactionTable.entryStatus == RetailEntryStatus::None
                        &&  (   transactionTable.ValidationStatus == RetailTransactionValidationStatus::None
                            ||  transactionTable.ValidationStatus == RetailTransactionValidationStatus::Pending);
            
                
                if (transactionTable)
                {
                    eventSource.EventWriteTransactionValidationTransactionSelectedToValidate(transactionTable.RecId);

                    transactionTable.ValidationStatus = RetailTransactionValidationStatus::InProgress;
                    transactionTable.update();
                }
                else
                {
                    eventSource.EventWriteTransactionValidationNoMoreTransactionsToValidate();
                }

                ttscommit;

                if (transactionTable)
                {
                    RetailTransactionValidationResultPersister resultPersister = RetailTransactionValidationResultPersister::construct(transactionTable);
                    resultPersister.cleanUpPreviousErrors();
                    
                    // Invoke postLoad() manually so that any exception inside it can be handled properly by the catch-block below.
                    transactionTable.postLoad();

                    RetailTransactionValidationCustomerOrderInfoCreator custOrderInfoCreator = RetailTransactionValidationCustomerOrderInfoCreator::construct(transactionTable);
                    CustomerOrderInfo customerOrderInfo = custOrderInfoCreator.create();

                    using (var timer = RetailTransactionValidationTimer::construct(transactionTable))
                    {
                        RetailTransactionValidationValidateSingleTransaction singleTransactionValidator = RetailTransactionValidationValidateSingleTransaction::construct(transactionTable, customerOrderInfo);
                        RetailTransactionValidationResult validationResult = singleTransactionValidator.run();

                        if (validationResult != null)
                        {
                            resultPersister.persist(validationResult);
                        }
                    }
                }
            }
            catch (ex)
            {
                if (transactionTable.RecId)
                {
                    eventSource.EventWriteTransactionValidationTransactionValidationClrError(transactionTable.RecId, ex.ToString());

                    str infologMsgs = RetailUtilities::getInfologMessages(fromLine);

                    RetailTransactionValidationSystemErrorHandler::markTransactionAsSystemError(transactionTable, infologMsgs);
                }
                else
                {
                    eventSource.EventWriteTransactionValidationExceptionResultsInEmptyTransactionRecord(ex.ToString());
                }
            }
        } while (transactionTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>