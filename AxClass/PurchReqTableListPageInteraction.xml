<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqTableListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchReqTableListPageInteraction extends SysListPageInteractionBase
{
    Common                          externalRecord;
    QueryBuildDataSource            requisitionerDataSource;
    QueryBuildRange                 requisitionerRange;
    container                       webParameters;
    PurchReqShowRequisitions        showRequisitions;
    HcmWorkerRecId                  requisitionerRecId;
    PurchReqShowRequisitionsFilter  showRequisitionsFilter;


    #define.PurchReqTable('PurchReqTable')
    #define.RequisitionerDataSourceName('Requisitioner')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the requester filter to a query.
    /// </summary>
    /// <param name="_query">
    /// The query selected based on a show requisitions filter.
    /// </param>
    /// <param name="_requisitionerRecId">
    /// The ID of a selected requester.
    /// </param>
    public void applyFilter(Query _query, HcmWorkerRecId _requisitionerRecId)
    {
        QueryBuildDataSource    purchReqTableDataSource;
        HcmWorkerRecId          localRequisitionerRecId = _requisitionerRecId;

        purchReqTableDataSource = _query.dataSourceTable(tableNum(PurchReqTable));

        this.initRequisitionerDataSource(_query, purchReqTableDataSource);

        if (localRequisitionerRecId == 0)
        {
            requisitionerDataSource.enabled(false);
        }
        else
        {
            requisitionerRange.value(queryValue(localRequisitionerRecId));
            requisitionerDataSource.enabled(true);
            requisitionerRange.status(RangeStatus::Hidden);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialized</Name>
				<Source><![CDATA[
    public void initialized()
    {
        super();

        if (externalRecord.TableId == tableNum(ProjTable))
        {
            this.listPage().actionPaneControlParameters(formControlStr(PurchReqTableListPage, RequisitionButton), externalRecord.getFieldValue(fieldStr(ProjTable, ProjId)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    public void initializeQuery(Query _query)
    {
        QueryBuildDataSource        purchReqTableDS;
        ProjTable                   projTableLink;
        ProjInvoiceTable            projInvoiceTableLink;
        ProjWIPTable                projWIPTableLink;

        super(_query);

        purchReqTableDS = _query.dataSourceTable(tableNum(PurchReqTable));

        this.initRequisitionerDataSource(_query, purchReqTableDS);

        if (externalRecord)
        {
            switch (externalRecord.TableId)
            {
                // Projects
                case tableNum(ProjTable):
                    projTableLink = externalRecord;
                    purchReqTableDS.addRange(fieldNum(PurchReqTable, ProjId)).value(projTableLink.ProjId+'*');
                    break;

                // Project invoices
                case tableNum(ProjInvoiceTable):
                    projInvoiceTableLink = externalRecord;

                    while select ProjId from projTableLink
                        where projTableLink.ProjInvoiceProjId == projInvoiceTableLink.ProjInvoiceProjId
                    {
                        purchReqTableDS.addRange(fieldNum(PurchReqTable, ProjId)).value(projTableLink.ProjId);
                    }
                    break;

                // Project estimates
                case tableNum(ProjWIPTable):
                    projWIPTableLink = externalRecord;

                    while select ProjId from projTableLink
                        where projTableLink.wipProject == projWIPTableLink.ProjId
                    {
                        purchReqTableDS.addRange(fieldNum(PurchReqTable, ProjId)).value(projTableLink.ProjId);
                    }
                    break;
            }
        }

        this.applyFilter(_query, requisitionerRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializing</Name>
				<Source><![CDATA[
    public void initializing()
    {
        super();

        if (this.listPage().listPageArgs().menuItemName() == menuitemDisplayStr(PurchReqTableListPage) ||
            this.listPage().listPageArgs().menuItemName() == menuitemDisplayStr(EPPurchReqTableListPage))
        {
            requisitionerRecId = HcmWorkerLookup::currentWorker();
        }

        if (this.listPage() &&
            this.listPage().listPageArgs())
        {
            if (this.listPage().listPageArgs().externalRecord())
            {
                externalRecord = this.listPage().listPageArgs().externalRecord();
            }
            else
            {
                // EP custom filter
                webParameters = this.parseWebParameters();
                if (conLen(webParameters) > 0)
                {
                    [requisitionerRecId] = webParameters;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRequisitionerDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the requester data source.
    /// </summary>
    /// <param name="_query">
    /// The query for the selected filter criteria.
    /// </param>
    /// <param name="_parentDataSource">
    /// The main data source for the <c>PurchReqTable</c> list page.
    /// </param>
    protected void initRequisitionerDataSource(Query _query, QueryBuildDataSource _parentDataSource)
    {
        requisitionerDataSource = _query.dataSourceName(#RequisitionerDataSourceName);

        if (requisitionerDataSource == null)
        {
            requisitionerDataSource = _parentDataSource.addDataSource(tableNum(PurchReqLine), #RequisitionerDataSourceName);
            requisitionerDataSource.joinMode(JoinMode::ExistsJoin);
            requisitionerDataSource.addLink(fieldNum(PurchReqTable, RecId), fieldNum(PurchReqLine, PurchReqTable));
        }

        requisitionerRange = SysQuery::findOrCreateRange(requisitionerDataSource, fieldNum(PurchReqLine, Requisitioner));
        requisitionerRange.status(RangeStatus::Locked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseWebParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses parameters that were sent from Enterprise Portal.
    /// </summary>
    /// <returns>
    /// A container that contains the parameters that were received from Enterprise Portal.
    /// </returns>
    private container parseWebParameters()
    {
        str             parameters;
        container       parametersContainer;

        if (this.listPage() &&
            this.listPage().listPageArgs() &&
            this.listPage().listPageArgs().parameters() &&
            this.listPage().listPageArgs().parameters() != '')
        {
            parameters = this.listPage().listPageArgs().parameters();
            parametersContainer = Global::str2con(parameters);
        }

        return parametersContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    public void selectionChanged()
    {
        ListPage        listPage                = this.listPage();
        PurchReqTable   activeRecord;
        HcmEmployment   hcmEmployment           = HcmEmployment::getActiveEmploymentsByWorker(HcmWorkerLookup::currentWorker());
        boolean         isGridNotEmpty          = false;
        boolean         enableRFQControl        = false;
        boolean         enableHistoryControls   = false;
        boolean         canReserveBudgetFunds   = false;
        boolean         canCopy                 = false;
        boolean         canUpdate               = false;
        boolean         isConsumption           = false;
        boolean         isWorkflowEnabledForHeader = false;

        if (listPage.activeRecord(#PurchReqTable))
        {
            activeRecord            = listPage.activeRecord(#PurchReqTable);
            isGridNotEmpty          = true;
            isConsumption           = activeRecord.isConsumption();
            enableRFQControl        = (activeRecord.RequisitionStatus == PurchReqRequisitionStatus::InReview
                                        && isConsumption
                                        && !activeRecord.OnHold
                                      );
            enableHistoryControls   = PurchReqTableHistory::existsHistory(activeRecord.RecId);
            canReserveBudgetFunds   = activeRecord.canRecordBudgetFundReservation();
            canCopy                 = (activeRecord.Originator == HcmWorkerLookup::currentWorker());
            canUpdate               = activeRecord.checkUpdate() || activeRecord.canResetToDraftStatus();
            isWorkflowEnabledForHeader = PurchReqTableForm::isWorkflowVisibleForHeader(activeRecord);
        }

        /* These buttons are always active:
         * EditInGridButton
         * RefreshButton
         */

        /* These buttons are active if the grid is not empty (i.e. a valid record is selected) */
        listPage.actionPaneControlEnabled(formControlStr(PurchReqTableListPage, RequisitionButton), hcmEmployment.RecId);

        listPage.actionPaneControlEnabled(formControlStr(PurchReqTableListPage, EditButton), isGridNotEmpty);

        listPage.actionPaneControlEnabled(formControlStr(PurchReqTableListPage, TotalsButton), isGridNotEmpty && isConsumption);

        listPage.actionPaneControlEnabled(formControlStr(PurchReqTableListPage, CancelButton), isGridNotEmpty);

        /* These buttons are active if the purchase requisition preparer is same as the current worker*/
        listPage.actionPaneControlEnabled(formControlStr(PurchReqTableListPage, CopyButton), canCopy);

        /* PurchCopyAllHeader button is active if any lines can be copied */
        listPage.actionPaneControlEnabled(formControlStr(PurchReqTableListPage, PurchCopyAllHeader), PurchReqLine::existLine());

        /* These buttons are active if the record has history */
        listPage.actionPaneControlEnabled(formControlStr(PurchReqTableListPage, VersionsButton), enableHistoryControls);
        listPage.actionPaneControlEnabled(formControlStr(PurchReqTableListPage, CompareButton), enableHistoryControls);

        /* These buttons are active if an RFQ can be created */
        listPage.actionPaneControlEnabled(formControlStr(PurchReqTableListPage, RequestForQuoteButton), enableRFQControl);

        /* These buttons are active if budget funds can be reserved */
        listPage.actionPaneControlEnabled(formControlStr(PurchReqTableListPage, ReserveBudgetFundsButton), canReserveBudgetFunds);

        listPage.actionPaneControlEnabled(formControlStr(PurchReqTableListPage, ProjBudgetDisplayButton), true);
        listPage.actionPaneControlEnabled(formControlStr(PurchReqTableListPage, CostControlCommittedCostButton), true);

        listPage.actionPaneControlEnabled(formControlStr(PurchReqTableListPage, FinancialsActionPaneTab), isConsumption);
        listPage.actionPaneControlEnabled(formControlStr(PurchReqTableListPage, PurchReqTableWorkflowDropDialog), isWorkflowEnabledForHeader);

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>