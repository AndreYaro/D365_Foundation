<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatTransfer_CZ</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>IntrastatTransfer_CZ</c> class is responsible for transfer data to Intrastat for Czech Republic.
/// </summary>
#ISOCountryRegionCodes
[IntrastatCountryRegion(#isoCZ)]
class IntrastatTransfer_CZ extends IntrastatTransfer implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initIntrastatFromTransferMap</Name>
				<Source><![CDATA[
    protected void initIntrastatFromTransferMap(Intrastat _intrastat, IntrastatTransferMap _intrastatTransferMap)
    {
        super(_intrastat, _intrastatTransferMap);

        if (_intrastatTransferMap.ItemId)
        {
            _intrastat.StatProcId = InventTable::find(_intrastatTransferMap.ItemId).IntrastatProcId_CZ;
        }
        else
        {
            _intrastat.StatProcId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromCustInvoiceTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromCustInvoiceTrans(CustInvoiceJour _custInvoiceJour,
                                                          CustInvoiceTrans _custInvoiceTrans,
                                                          CustInvoiceJour_Intrastat _custInvoiceJour_Intrastat = null,
                                                          CustInvoiceTrans_Intrastat _custInvoiceTrans_Intrastat = null)
    {
        Intrastat intrastat;

        intrastat = super(_custInvoiceJour, _custInvoiceTrans, _custInvoiceJour_Intrastat, _custInvoiceTrans_Intrastat);

        intrastat.IntrastatSpecMove_CZ = _custInvoiceTrans_Intrastat.SpecialMovement_CZ;

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromCustPckSlpTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromCustPckSlpTrans(CustPackingSlipJour _custPackingSlipJour,
                                                         CustPackingSlipTrans _custPackingSlipTrans,
                                                         CustPackingSlipJour_Intrastat _custPackingSlipJour_Intrastat = null,
                                                         CustPackingSlipTrans_Intrastat _custPackingSlipTrans_Intrastat = null)
    {
        Intrastat intrastat;

        intrastat = super(_custPackingSlipJour, _custPackingSlipTrans, _custPackingSlipJour_Intrastat, _custPackingSlipTrans_Intrastat);

        intrastat.IntrastatSpecMove_CZ = _custPackingSlipTrans_Intrastat.SpecialMovement_CZ;

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromInventTransferJour</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromInventTransferJour(IntrastatDirection      _direction,
                                                            InventTransferJour      _inventTransferJour,
                                                            InventTransferJourLine  _inventTransferJourLine)
    {
        Intrastat intrastat;

        intrastat = super(_direction, _inventTransferJour, _inventTransferJourLine);

        intrastat.IntrastatSpecMove_CZ = _inventTransferJourLine.IntrastatSpecMove_CZ;

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromVendInvoiceTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromVendInvoiceTrans(VendInvoiceJour _vendInvoiceJour,
                                                          VendInvoiceTrans _vendInvoiceTrans,
                                                          VendInvoiceJour_Intrastat _vendInvoiceJour_Intrastat = null,
                                                          VendInvoiceTrans_Intrastat _vendInvoiceTrans_Intrastat = null)
    {
        Intrastat intrastat;

        intrastat = super(_vendInvoiceJour, _vendInvoiceTrans, _vendInvoiceJour_Intrastat, _vendInvoiceTrans_Intrastat);

        intrastat.IntrastatSpecMove_CZ = _vendInvoiceTrans_Intrastat.SpecialMovement_CZ;

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromVendPckSlpTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromVendPckSlpTrans(VendPackingSlipJour _vendPackingSlipJour,
                                                         VendPackingSlipTrans _vendPackingSlipTrans,
                                                         VendPackingSlipJour_Intrastat vendPackingSlipJour_Intrastat = null,
                                                         VendPackingSlipTrans_Intrastat vendPackingSlipTrans_Intrastat = null)
    {
        Intrastat intrastat;

        intrastat = super(_vendPackingSlipJour, _vendPackingSlipTrans, vendPackingSlipJour_Intrastat, vendPackingSlipTrans_Intrastat);

        intrastat.IntrastatSpecMove_CZ = vendPackingSlipTrans_Intrastat.SpecialMovement_CZ;

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>