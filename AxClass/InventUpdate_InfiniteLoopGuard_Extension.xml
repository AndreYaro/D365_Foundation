<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventUpdate_InfiniteLoopGuard_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(InventUpdate))]
internal final class InventUpdate_InfiniteLoopGuard_Extension
{
    const private int infiniteLoopThreshold = 150;
    const private int numOfCallsThreshold = 7;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processReceiptTransactionsForTransIssueQty</Name>
				<Source><![CDATA[
    protected static InventQty processReceiptTransactionsForTransIssueQty(InventMovement _movementReceipt,
                                                                        InventDim _inventDimReceiptOrig,
                                                                        InventDimParm _inventDimParm,
                                                                        InventDim _inventDimReceiptNew,
                                                                        InventQty _qtyRemain,
                                                                        PdsCWInventQty _cwQtyRemain)
    {
        InventUpdate::preventStackOverflow(_movementReceipt.itemId());
        return next processReceiptTransactionsForTransIssueQty(_movementReceipt, _inventDimReceiptOrig, _inventDimParm, _inventDimReceiptNew, _qtyRemain, _cwQtyRemain);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentNumOfCalls</Name>
				<Source><![CDATA[
    private static int currentNumOfCalls()
    {
        str cacheKey = funcName();
        int numOfCalls = SysTransactionScopeCache::get(cacheKey, 0, 0) + 1;

        SysTransactionScopeCache::set(cacheKey, 0, numOfCalls);

        return numOfCalls;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventUpdateStackFramesAboveThreshold</Name>
				<Source><![CDATA[
    private static boolean isInventUpdateStackFramesAboveThreshold(System.Diagnostics.StackTrace _stackTrace)
    {
        int frameCount = _stackTrace.FrameCount;

        if (frameCount <= infiniteLoopThreshold)
        {
            return false;
        }
        int result = 0;
        
        for (int i = 0; i < frameCount; i++)
        {
            var frame = _stackTrace.GetFrame(i);
            if (frame)
            {
                var method = frame.GetMethod();
                if (method)
                {
                    var declaringType = method.DeclaringType;
                    if (declaringType)
                    {
                        str className = declaringType.Name;
                        if (strStartsWith(className, 'InventUpdate'))
                        {
                            result++;
                        }
                    }
                }
            }
        }
        return result > infiniteLoopThreshold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preventStackOverflow</Name>
				<Source><![CDATA[
    private static void preventStackOverflow(ItemId _itemId)
    {
        int numOfCalls = InventUpdate::currentNumOfCalls();

        if (numOfCalls > numOfCallsThreshold)
        {
            var stackTrace = new System.Diagnostics.StackTrace(false);

            if (InventUpdate::isInventUpdateStackFramesAboveThreshold(stackTrace))
            {
                throw error(strFmt("@SCM:InventUpdInfiniteLoopErrorMsg", _itemId));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>