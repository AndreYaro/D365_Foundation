<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjTrans_ProfitLoss</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjListProjTrans_ProfitLoss extends ProjListProjTrans

{
    DialogField     dialogFixedPrice,
                    dialogTimeMaterial,
                    dialogInternalCost,
                    dialogInvestment,
                    dialogTime,
                    dialogHour,
                    dialogExpenses,
                    dialogRevenue,
                    dialogOnAcc,
                    dialogItem;

    boolean         fixedPrice;
    boolean         timeMaterial;
    boolean         internalCost;
    boolean         investment;
    boolean         time;
    boolean         hour;
    boolean         expenses;
    boolean         revenue;
    boolean         onAcc;
    boolean         item;

    //
    // The dontShowDialog variable in ProjListProjTran is use to hide information
    // in the 2 Period reports and show not be used by the classes that extend from it.
    //
    boolean         dontShowDialog1;

    #define.CurrentVersion(2)

    #localmacro.CurrentList
        fixedPrice,
        timeMaterial,
        internalCost,
        investment,
        time,
        hour,
        expenses,
        revenue,
        onAcc,
        item
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
Object dialog(Object _dialog)
    {

        DialogRunbase dialog = _dialog;
        DialogGroup   dialogMainGroup;
        ;

        if (!dontShowDialog1)
        {
            dialogMainGroup = dialog.addGroup();
            dialogMainGroup.columns(2);
            dialogMainGroup.frameType(FormFrameType::None);

            dialog.addGroup("@SYS78367",dialogMainGroup);

            dialogTimeMaterial  = dialog.addFieldValue(extendedtypestr(ProjOptionTM),         timeMaterial, "@SYS53874", "@SYS78362");
            dialogFixedPrice    = dialog.addFieldValue(extendedtypestr(ProjOptionFixedPrice), fixedPrice,   "@SYS3237",  "@SYS78361");
            dialogInvestment    = dialog.addFieldValue(extendedtypestr(ProjOptionInvestment), investment,   "@SYS78353", "@SYS78364");
            dialogInternalCost  = dialog.addFieldValue(extendedtypestr(ProjOptionInternal),   internalCost, "@SYS78366", "@SYS78363");
            dialogTime          = dialog.addFieldValue(extendedtypestr(ProjOptionTime),       time,         "@SYS8827",  "@SYS78365");

            dialog.addGroup("@SYS78373",dialogMainGroup);

            dialogHour         = dialog.addFieldValue(extendedtypestr(ProjOptionHours),      hour,         "@SYS5269",  "@SYS78368");
            dialogExpenses     = dialog.addFieldValue(extendedtypestr(ProjOptionCost),       expenses,     "@SYP4882014", "@SYS78369");
            dialogItem         = dialog.addFieldValue(extendedtypestr(ProjOptionItem),       item,         "@SYS7407",  "@SYS78372");
            dialogRevenue      = dialog.addFieldValue(extendedtypestr(ProjOptionRevenue),    revenue,      "@SYS9154",  "@SYS78818");
            dialogOnAcc        = dialog.addFieldValue(extendedtypestr(ProjOptionOnAcc),      onAcc,        "@SYS7659",  "@SYS78371");

            dialog = super(dialog);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalCostGrossMargin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the total cost and gross margin columns should print on the report.
    /// </summary>
    /// <returns>
    ///    true if total cost and gross margin should be printed on the report; otherwise, false.
    /// </returns>
    boolean displayTotalCostGrossMargin()
    {
        // "Total cost" and "Gross Margin" should disappear when only transaction "Fee" or "On account" is selected.
        if (!(hour || item || expenses))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
        public boolean getFromDialog()
    {
        ;

        if (!dontShowDialog1)
        {
            super();

            fixedPrice      = dialogFixedPrice.value();
            timeMaterial    = dialogTimeMaterial.value();
            internalCost    = dialogInternalCost.value();
            investment      = dialogInvestment.value();
            time            = dialogTime.value();

            hour            = dialogHour.value();
            expenses        = dialogExpenses.value();
            revenue         = dialogRevenue.value();
            onAcc           = dialogOnAcc.value();
            item            = dialogItem.value();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowHourQty</Name>
				<Source><![CDATA[
        boolean mustShowHourQty()
    {
        boolean ret;
        ;
        ret = super();
        return ret && !showDeviance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return [#CurrentVersion, #currentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDontShowDialog1</Name>
				<Source><![CDATA[
        public boolean parmDontShowDialog1(boolean _dontShowDialog1 = dontShowDialog1)
    {
        ;

        dontShowDialog1 = _dontShowDialog1;

        return dontShowDialog1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpenses</Name>
				<Source><![CDATA[
        public boolean parmExpenses(boolean _expenses = expenses)
    {
        ;
        expenses = _expenses;

        return expenses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFixedPrice</Name>
				<Source><![CDATA[
        public boolean parmFixedPrice(boolean _fixedPrice = fixedPrice)
    {
        ;
        fixedPrice = _fixedPrice;

        return fixedPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHour</Name>
				<Source><![CDATA[
        public boolean parmHour(boolean _hour = hour)
    {
        ;
        hour = _hour;

        return hour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInternalCost</Name>
				<Source><![CDATA[
        public boolean parmInternalCost(boolean _internalCost = internalCost)
    {
        ;
        internalCost = _internalCost;

        return internalCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvestment</Name>
				<Source><![CDATA[
        public boolean parmInvestment(boolean _investment = investment)
    {
        ;
        investment = _investment;

        return investment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItem</Name>
				<Source><![CDATA[
        public boolean parmItem(boolean _item = item)
    {
        ;
        item = _item;

        return item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnAcc</Name>
				<Source><![CDATA[
        public boolean parmOnAcc(boolean _onAcc = onAcc)
    {
        ;
        onAcc = _onAcc;

        return onAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRevenue</Name>
				<Source><![CDATA[
        public boolean parmRevenue(boolean _revenue = revenue)
    {
        ;
        revenue = _revenue;

        return revenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTime</Name>
				<Source><![CDATA[
        public boolean parmTime(boolean _time = time)
    {
        ;
        time = _time;

        return time;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimeMaterial</Name>
				<Source><![CDATA[
        public boolean parmTimeMaterial(boolean _timeMaterial = timeMaterial)
    {
        ;
        timeMaterial = _timeMaterial;

        return timeMaterial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDisplayFlags</Name>
				<Source><![CDATA[
        container setDisplayFlags(boolean _hour, boolean _expenses, boolean _item, ProjAmountQty _amountQty, ProjListProfitFactor _profitFactor)
    {
        Counter     numOfTypes;
        int         showContributionMargin = 1;
        int         showCostExpense = 1;
        int         showCostHour = 1;
        int         showCostInventory = 1;
        int         showGrossMarginPct = 1;
        int         showQtyHour = 1;
        int         showRevenue = 1;
        int         showTotalCost = 1;
        int         showValueAdded = 1;
        int         showValueFactor = 1;

        if (_amountQty == ProjAmountQty::Amount)
        {
            showQtyHour = 0;
        }
        if (_amountQty == ProjAmountQty::Qty)
        {
           showQtyHour = 0;
           showValueAdded = 0;
        }

        if (_profitFactor == ProjListProfitFactor::Both ||
            _profitFactor == ProjListProfitFactor::ValueAddedFactorPct)
        {
            showValueFactor = 1;
        }
        else
        {
            showValueFactor = 0;
        }
        if (_profitFactor == ProjListProfitFactor::Both ||
            _profitFactor == ProjListProfitFactor::GrossMarginFactorPct)
        {
            showGrossMarginPct = 1;
        }
        else
        {
            showGrossMarginPct = 0;
        }

        if (_hour)
        {
            if  (_amountQty == ProjAmountQty::Amount ||
                 _amountQty == ProjAmountQty::AmountQty)
            {
                numOfTypes  +=1;
            }
        }
        else
        {
            showQtyHour = 0;
            showCostHour = 0;
            showValueFactor = 0;
            showValueAdded = 0;
        }

        if (_expenses)
        {
            numOfTypes  +=1;
        }
        else
        {
            showCostExpense = 0;
        }
        if (_item)
        {
            numOfTypes  +=1;
        }
        else
        {
            showCostInventory = 0;
        }

        //  if only one type is choosen remove total column
        if (numOfTypes <= 1)
        {
            showTotalCost = 0;
        }
        if (numOfTypes <= 1 && hour)
        {
            showValueFactor  = 0;
            showValueAdded = 0;

            if (_amountQty == ProjAmountQty::Qty)
            {
                showRevenue = 0;
                showValueAdded = 0;
                showGrossMarginPct = 0;
            }
        }

        // "Total cost" and "Gross Margin" should disappear when only transaction "Fee" or "On account" is selected.
        if (_amountQty == ProjAmountQty::Qty || !_hour)
        {
            if (!(_item || _expenses))
            {
                showTotalCost = 0;
                showContributionMargin = 0;
            }
        }

        return [showQtyHour, showCostHour, showCostExpense, showCostInventory, showTotalCost, showRevenue,
                showContributionMargin, showGrossMarginPct, showValueAdded, showValueFactor];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDisplayFlags2Column</Name>
				<Source><![CDATA[
        container setDisplayFlags2Column(boolean _hour, boolean _expenses, boolean _item)
    {
        int         showMargin = 1;
        int         showTotalCost = 1;

        // "Total cost" and "Gross Margin" should disappear when only transaction "Fee" or "On account" is selected.
        if (!(hour || item || expenses))
        {
            showTotalCost = 0;
            showMargin = 0;
        }

        return [showTotalCost, showMargin];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDisplayFlags2PeriodColumn</Name>
				<Source><![CDATA[
        container setDisplayFlags2PeriodColumn(boolean _hour, boolean _expenses, boolean _item, boolean _revenue, boolean _onAcc, ProjAmountQty _amountQty)
    {
        int         showContributionMargin = 1;
        int         showQtyHour = 1;
        int         showRevenue = 1;
        int         showTotalCost = 1;

        if (_amountQty == ProjAmountQty::Amount || !_hour)
        {
            showQtyHour = 0;
        }

        if ((_amountQty == ProjAmountQty::Qty && _hour) &&
             !(_revenue || _item || _expenses || _onAcc))
        {
            showTotalCost = 0;
            showContributionMargin = 0;
            showRevenue = 0;
        }

        // "Total cost" and "Gross Margin" should disappear when only transaction "Fee" or "On account" is selected.
        if (!(_hour || _item || _expenses))
        {
            showTotalCost = 0;
            showContributionMargin = 0;
        }

        return [showQtyHour, showTotalCost, showRevenue, showContributionMargin];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDisplayLabel</Name>
				<Source><![CDATA[
        container setDisplayLabel(ProjListProfitFactor  _profitFactor)
    {
        str valueFactorLabel;
        str grossMarginPctLabel;

        if (_profitFactor == ProjListProfitFactor::Both ||
            _profitFactor == ProjListProfitFactor::ValueAddedFactorPct)
        {
            valueFactorLabel = ProjParameters::find().valueAddedDisplayLabel();
        }
        if (_profitFactor == ProjListProfitFactor::Both ||
            _profitFactor == ProjListProfitFactor::GrossMarginFactorPct)
        {
            grossMarginPctLabel = ProjParameters::find().grossMarginDisplayLabel();
        }

        return [valueFactorLabel, grossMarginPctLabel];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDisplayLabel2Column</Name>
				<Source><![CDATA[
        container setDisplayLabel2Column(boolean _hour, boolean _expenses, boolean _item)
    {
        str totalCostLabel = "@SYS74805";
        str revenueLabel   = "@SYS2835";
        str marginLabel    = "@SYS78439";
        str devianceLabel  = "@SYS78417";

        revenueLabel = this.formatPeriodLabel(revenueLabel,DateFlags::None);
        totalCostLabel = this.formatPeriodLabel(totalCostLabel,DateFlags::None);

        if (_hour && !(_expenses || _item))
        {
            totalCostLabel = this.formatPeriodLabel("@SYS60097",DateFlags::None);
        }
        if (_expenses && !(_hour || _item))
        {
            totalCostLabel = this.formatPeriodLabel("@SYS78743",DateFlags::None);
        }
        if (_item && !(_expenses || _hour))
        {
            totalCostLabel = this.formatPeriodLabel("@SYS58392",DateFlags::None);
        }

        marginLabel = this.formatPeriodLabel(marginLabel,DateFlags::None);
        devianceLabel =  ProjListProjHelpClass::descActualVsBudget(actualVsBudget);

        return [totalCostLabel, revenueLabel, marginLabel, devianceLabel];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDisplayLabel2PeriodColumn</Name>
				<Source><![CDATA[
        str setDisplayLabel2PeriodColumn(boolean _hour, boolean _expenses, boolean _item)
    {
        str totalCostLabel = "@SYS74805";

        if (_hour && !(_expenses || _item))
        {
            totalCostLabel = "@SYS60097";
        }

        if (_expenses && !(_hour || _item))
        {
            totalCostLabel = "@SYS78743";
        }

        if (_item && !(_expenses || _hour))
        {
            totalCostLabel = "@SYS58392";
        }

        return totalCostLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        boolean         ret;
        Integer         version    = RunBase::getVersion(_packedClass);
        container       conListProjTrans;

        switch (version)
        {
            case #CurrentVersion:
                [version, #currentList, conListProjTrans] = _packedClass;
                super(conListProjTrans);
                ret = true;
                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
        boolean validate()
    {
        boolean ret;

        ret = super();

        // Check if project type has been selected
        if (!ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled() &&
            !(fixedPrice || timeMaterial || internalCost || investment || time))
        {
            ret = checkFailed("@SYS91026");
        }

        // Check if transaction type has been selected
        if (!(hour || expenses || revenue || onAcc || item))
        {
            ret = checkFailed("@SYS91027");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>