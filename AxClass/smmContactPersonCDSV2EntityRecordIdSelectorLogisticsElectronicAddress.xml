<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmContactPersonCDSV2EntityRecordIdSelectorLogisticsElectronicAddress</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[ExportMetadataAttribute(identifierStr(TableName), tableStr(LogisticsElectronicAddress))]
[ExportMetadataAttribute(identifierStr(EntityName), dataentityviewstr(smmContactPersonCDSV2Entity))]
[ExportAttribute(identifierstr(Dynamics.AX.Application.IBusinessEventsTableToEntityRecordIdSelector))]
internal final class smmContactPersonCDSV2EntityRecordIdSelectorLogisticsElectronicAddress implements IBusinessEventsTableToEntityRecordIdSelector
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getEntityRecordIdsImpactedByTableChange</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public List getEntityRecordIdsImpactedByTableChange(BusinessEventsDefinition _eventDefinition, BusinessEventsActions _changeType, RecId _changedRecordId)
    {
        // Only process primary contact changes for types that are mapped and retun null for mappings not known.
        List impactedRecIds = null;

        FieldId primaryContactFieldId;

        // This mapping is defined in smmContactPersonCDSV2Entity::getEntityDataSourceToFieldMapping.
        // That definition and this mappy need to stay in sync.
        switch (_eventDefinition.DataSourceName)
        {
            case identifierstr(DirPartyBaseEntity1):
                primaryContactFieldId = fieldNum(DirPartyTable, PrimaryContactEmail);
                break;
            case identifierstr(DirPartyBaseEntity2):
                primaryContactFieldId = fieldNum(DirPartyTable, PrimaryContactFax);
                break;
            case identifierstr(DirPartyBaseEntity3):
                primaryContactFieldId = fieldNum(DirPartyTable, PrimaryContactPhone);
                break;
            case identifierstr(DirPartyBaseEntity4):
                primaryContactFieldId = fieldNum(DirPartyTable, PrimaryContactFacebook);
                break;
            case identifierstr(DirPartyBaseEntity5):
                primaryContactFieldId = fieldNum(DirPartyTable, PrimaryContactTwitter);
                break;
            case identifierstr(DirPartyBaseEntity6):
                primaryContactFieldId = fieldNum(DirPartyTable, PrimaryContactURL);
                break;
            case identifierstr(DirPartyBaseEntity7):
                primaryContactFieldId = fieldNum(DirPartyTable, PrimaryContactLinkedIn);
                break;
            case identifierstr(DirPartyBaseEntity8):
                primaryContactFieldId = fieldNum(DirPartyTable, PrimaryContactTelex);
                break;
            default:
                primaryContactFieldId = 0;
                break;
        }

        if (primaryContactFieldId)
        {
            impactedRecIds = new List(Types::Int64);

            ContactPerson contactPerson;
            DirPartyTable dirPartyTable;

            while select RecId from contactPerson
                exists join dirPartyTable
                    where dirPartyTable.RecId == contactPerson.Party
                        && dirPartyTable.(primaryContactFieldId) == _changedRecordId
            {
                impactedRecIds.addEnd(contactPerson.RecId);
            }
        }

        return impactedRecIds;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>