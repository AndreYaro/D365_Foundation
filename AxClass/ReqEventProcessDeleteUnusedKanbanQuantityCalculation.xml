<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqEventProcessDeleteUnusedKanbanQuantityCalculation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Calculates the pegged quantity for the deletion of unused kanbans.
/// </summary>
public class ReqEventProcessDeleteUnusedKanbanQuantityCalculation
{
    ReqPegging              reqPegging;
    ReqPeggingAssignment    reqPeggingAssignmentSupply;
    ReqPeggingAssignment    reqPeggingAssignmentRequirement;
    SourceDocumentLine      sourceDocumentLine;
    SalesLine               salesLine;
    KanbanJobIssue          kanbanJobIssue;
    KanbanJobPickingList    kanbanJobPickingList;
    KanbanJob               kanbanJobKanbanJobIssue;
    Kanban                  kanbanKanbanJobIssue;
    Kanban                  kanbanKanbanJobPickingList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an instance of <ReqEventProcessDeleteUnusedKanbanQuantityCalculation></c> class.
    /// </summary>
    /// <returns>
    ///     An instance of <ReqEventProcessDeleteUnusedKanbanQuantityCalculation></c> class.
    /// </returns>
    public static ReqEventProcessDeleteUnusedKanbanQuantityCalculation construct()
    {
        return new ReqEventProcessDeleteUnusedKanbanQuantityCalculation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPeggedEventsFromSupply</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Processes the events that use pegging tables.
    /// </summary>
    /// <param name = "_receiptInventTransOriginId">
    ///     The inventory transaction originator of the kanban job receipt.
    /// </param>
    /// <param name = "_setPeggedEvents">
    ///     A set of pegged events.
    /// </param>
    /// <param name = "_kanbanJobReceipt">
    ///     A <c>KanbanJobReceipt</c> record.
    /// </param>
    /// <returns>
    ///     Returns the pegged quantity.
    /// </returns>
    protected internal InventQty processPeggedEventsFromSupply(
        InventTransOriginId _receiptInventTransOriginId,
        Set _setPeggedEvents,
        KanbanJobReceipt _kanbanJobReceipt)
    {
        InventQty               peggedQty = 0;
        InventTransOrigin       inventTransOrigin;
        ProdBOM                 prodBOM;
        InventTrans             inventTrans;
        SysDaSearchObject		searchObject;
        SysDaSearchStatement	searchStatement;

        // part 1: events that do use pegging tables (salesLine, kanbanJob transfer issue and semi finished, kanbanJobPickingList
        if (_receiptInventTransOriginId)
        {
            // salesLine (supplying kanbans will always be inventory controlled)
            searchObject = new SysDaSearchObject(this.selectReqPeggingAssignmentSupply(_kanbanJobReceipt, tableNum(SalesLine)));
            searchStatement = new SysDaSearchStatement();

            while (searchStatement.nextRecord(searchObject))
            {
                if (salesLine.InventTransId)
                {
                    inventTransOrigin = InventTransOrigin::findByInventTransId(salesLine.InventTransId);
                    if (inventTransOrigin)
                    {
                        _setPeggedEvents.add(inventTransOrigin.RecId);
                        peggedQty += reqPegging.Quantity;
                    }
                }
            }

            // kanbanJobPickingList (supplying kanban will always be inventory controlled)
            searchObject = new SysDaSearchObject(this.selectReqPeggingAssignmentSupply(_kanbanJobReceipt, tableNum(KanbanJobPickingList)));
            searchStatement = new SysDaSearchStatement();

            while (searchStatement.nextRecord(searchObject))
            {
                if (   kanbanJobPickingList.InventTransId
                        && kanbanKanbanJobPickingList.RecId)
                {
                    inventTransOrigin = InventTransOrigin::findByInventTransId(kanbanJobPickingList.InventTransId);
                    if (inventTransOrigin)
                    {
                        _setPeggedEvents.add(inventTransOrigin.RecId);
                        peggedQty += reqPegging.Quantity;
                    }
                }
            }
        }

        // kanbanJobIssue (supplying kanban may or may not be inventory controlled)
        searchObject = new SysDaSearchObject(this.selectReqPeggingAssignmentSupply(_kanbanJobReceipt, tableNum(KanbanJobIssue)));
        searchStatement = new SysDaSearchStatement();

        while (searchStatement.nextRecord(searchObject))
        {
            if (kanbanJobKanbanJobIssue.IssueInventTransId
                    && kanbanKanbanJobIssue.RecId)
            {
                inventTransOrigin = InventTransOrigin::findByInventTransId(kanbanJobKanbanJobIssue.IssueInventTransId);
                if (inventTransOrigin)
                {
                    _setPeggedEvents.add(inventTransOrigin.RecId);
                }
                peggedQty += reqPegging.Quantity;
            }
        }

        //part 2: not all events use pegging tables. Add marked transactions (ProdBOM). Always inventory controlled.
        if (_receiptInventTransOriginId)
        {
            while select sum(Qty) from inventTrans
                    group by inventTransOrigin.RecId
                    where inventTrans.MarkingRefInventTransOrigin == _receiptInventTransOriginId
                    join RecId from inventTransOrigin
                        where inventTransOrigin.RecId   == inventTrans.InventTransOrigin
                        exists join prodBOM
                            where prodBOM.InventTransId == inventTransOrigin.InventTransId
            {
                _setPeggedEvents.add(inventTransOrigin.RecId);
                peggedQty -= inventTrans.Qty;
            }
        }

        return peggedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectReqPeggingAssignmentSupply</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the query for pegging assigment supply.
    /// </summary>
    /// <param name = "_kanbanJobReceipt">
    ///     The Kanban job receipt record.
    /// </param>
    /// <param name = "_tableId">
    ///     The table ID of the pegging table.
    /// </param>
    /// <returns>
    ///    A <c>SysDaQueryObject</c> instance.
    /// </returns>
    protected SysDaQueryObject selectReqPeggingAssignmentSupply(KanbanJobReceipt _kanbanJobReceipt, TableId _tableId)
    {
        SysDaQueryObject queryObject = new SysDaQueryObject(reqPeggingAssignmentSupply);
        
        queryObject.projection().add(fieldStr(ReqPeggingAssignment, TableId));
        queryObject.whereClause(this.buildReqPeggingAssignmentSupplyWhereClause(_kanbanJobReceipt));

        SysDaQueryObject reqPeggingQueryObject                      = this.joinReqPegging(queryObject);
        SysDaQueryObject reqPeggingAssignmentRequirementQueryObject = this.joinReqPeggingAssignmentRequirement(reqPeggingQueryObject);
        SysDaQueryObject sourceDocumentLineQueryObject              = this.joinSourceDocumentLine(reqPeggingAssignmentRequirementQueryObject, _tableId);
        
        this.joinPeggingSource(sourceDocumentLineQueryObject, _tableId);

        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinReqPegging</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a join with requirements pegging.
    /// </summary>
    /// <param name = "_queryObject">
    ///     A <c>SysDaQueryObject</c> instance.
    /// </param>
    /// <returns>
    ///     A <c>SysDaQueryObject</c> instance.
    /// </returns>
    private SysDaQueryObject joinReqPegging(SysDaQueryObject _queryObject)
    {
        SysDaQueryObject queryObject = new SysDaQueryObject(reqPegging);

        queryObject.projection().add(fieldStr(ReqPegging, Quantity));
        queryObject.whereClause(this.buildReqPeggingWhereClause());
        _queryObject.joinClause(SysDaJoinKind::InnerJoin, queryObject);

        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinReqPeggingAssignmentRequirement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a join with pegging assignment requirement.
    /// </summary>
    /// <param name = "_queryObject">
    ///     A <c>SysDaQueryObject</c> instance.
    /// </param>
    /// <returns>
    ///     A <c>SysDaQueryObject</c> instance.
    /// </returns>
    private SysDaQueryObject joinReqPeggingAssignmentRequirement(SysDaQueryObject _queryObject)
    {
        SysDaQueryObject queryObject = new SysDaQueryObject(reqPeggingAssignmentRequirement);

        queryObject.projection().add(fieldStr(ReqPeggingAssignment, RecId));
        queryObject.whereClause(this.buildReqPeggingAssignmentRequirementWhereClause());
        _queryObject.joinClause(SysDaJoinKind::InnerJoin, queryObject);
        
        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a join with source document line.
    /// </summary>
    /// <param name = "_queryObject">
    ///     A <c>SysDaQueryObject</c> instance.
    /// </param>
    /// <param name = "_tableId">
    ///     The table ID of the pegging table.
    /// </param>
    /// <returns>
    ///     A <c>SysDaQueryObject</c> instance.
    /// </returns>
    private SysDaQueryObject joinSourceDocumentLine(SysDaQueryObject _queryObject, TableId _tableId)
    {
        SysDaQueryObject queryObject = new SysDaQueryObject(sourceDocumentLine);

        queryObject.projection().add(fieldStr(SourceDocumentLine, RecId));
        queryObject.whereClause(this.buildSourceDocumentLineWhereClause(_tableId));
        _queryObject.joinClause(SysDaJoinKind::InnerJoin, queryObject);

        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinPeggingSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a join with the pegging source.
    /// </summary>
    /// <param name = "_queryObject">
    ///     A <c>SysDaQueryObject</c> instance.
    /// </param>
    /// <param name = "_tableId">
    ///     The table ID of the pegging table.
    /// </param>
    protected void joinPeggingSource(SysDaQueryObject _queryObject, TableId _tableId)
    {
        SysDaQueryObject queryObject;

        switch(_tableId)
        {
            case tableNum(SalesLine):   
                queryObject = new SysDaQueryObject(salesLine);

                queryObject.projection().add(fieldStr(SalesLine, RecId));
                queryObject.projection().add(fieldStr(SalesLine, InventTransId));
                queryObject.whereClause(this.buildSalesLineWhereClause());
                
                _queryObject.joinClause(SysDaJoinKind::InnerJoin, queryObject);
                break;

            case tableNum(KanbanJobPickingList):
                queryObject = new SysDaQueryObject(kanbanJobPickingList);

                queryObject.projection().add(fieldStr(KanbanJobPickingList, RecId));
                queryObject.projection().add(fieldStr(KanbanJobPickingList, InventTransId));
                queryObject.whereClause(this.buildKanbanJobPickingListWhereClause());

                this.joinKanbanKanbanJobPickingList(queryObject);

                _queryObject.joinClause(SysDaJoinKind::InnerJoin, queryObject);
                break;

            case tableNum(KanbanJobIssue):
                queryObject = new SysDaQueryObject(kanbanJobIssue);

                queryObject.projection().add(fieldStr(KanbanJobIssue, TableId));
                queryObject.whereClause(this.buildKanbanJobIssueWhereClause());

                SysDaQueryObject kanbanJobKanbanJobIssueQueryObject = this.joinkanbanJobKanbanJobIssue(queryObject);
                this.joinkanbanKanbanJobIssue(kanbanJobKanbanJobIssueQueryObject);

                _queryObject.joinClause(SysDaJoinKind::InnerJoin, queryObject);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinKanbanKanbanJobPickingList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a joins on kanban - kanban job picking list.
    /// </summary>
    /// <param name = "_queryObject">
    ///     A <c>SysDaQueryObject</c> instance.
    /// </param>
    private void joinKanbanKanbanJobPickingList(SysDaQueryObject _queryObject)
    {
        SysDaQueryObject queryObject = new SysDaQueryObject(kanbanKanbanJobPickingList);

        queryObject.projection().add(fieldStr(Kanban, RecId));
        queryObject.whereClause(this.buildkanbanKanbanJobPickingListWhereClause());
        _queryObject.joinClause(SysDaJoinKind::InnerJoin, queryObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinkanbanJobKanbanJobIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a join on kanban job - kanban job issue.
    /// </summary>
    /// <param name = "_queryObject">
    ///     A <c>SysDaQueryObject</c> instance.
    /// </param>
    /// <returns>
    ///      A <c>SysDaQueryObject</c> instance.
    /// </returns>
    private SysDaQueryObject joinkanbanJobKanbanJobIssue(SysDaQueryObject _queryObject)
    {
        SysDaQueryObject queryObject = new SysDaQueryObject(kanbanJobKanbanJobIssue);

        queryObject.projection().add(fieldStr(KanbanJob, RecId));
        queryObject.projection().add(fieldStr(KanbanJob, IssueInventTransId));
        queryObject.whereClause(this.buildkanbanJobKanbanJobIssueWhereClause());
        _queryObject.joinClause(SysDaJoinKind::InnerJoin, queryObject);

        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinkanbanKanbanJobIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a join on kanban - kanban job issue join.
    /// </summary>
    /// <param name = "_queryObject">
    ///     A <c>SysDaQueryObject</c> instance.
    /// </param>
    private void joinkanbanKanbanJobIssue(SysDaQueryObject _queryObject)
    {
        SysDaQueryObject queryObject = new SysDaQueryObject(kanbanKanbanJobIssue);

        queryObject.projection().add(fieldStr(Kanban, RecId));
        queryObject.whereClause(this.buildkanbanKanbanJobIssueWhereClause());
        _queryObject.joinClause(SysDaJoinKind::InnerJoin, queryObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReqPeggingAssignmentSupplyWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the where clause for the pegging assigment supply.
    /// </summary>
    /// <param name = "_kanbanJobReceipt">
    ///     The Kanban job receipt record.
    /// </param>
    /// <returns>
    ///     A <c>SysDaQueryExpression</c> instance.
    /// </returns>
    private SysDaQueryExpression buildReqPeggingAssignmentSupplyWhereClause(KanbanJobReceipt _kanbanJobReceipt)
    {
        SysDaQueryExpression whereClause =  new SysDaEqualsExpression(
                                                new SysDaFieldExpression(reqPeggingAssignmentSupply, fieldStr(ReqPeggingAssignment, SourceDocumentLine)),
                                                new SysDaValueExpression(_kanbanJobReceipt.SourceDocumentLine))
                                            .and(new SysDaEqualsExpression(
                                                new SysDaFieldExpression(reqPeggingAssignmentSupply, fieldStr(ReqPeggingAssignment, ReqPeggingAssignmentType)),
                                                new SysDaValueExpression(ReqPeggingAssignmentType::Supply)));
        return whereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReqPeggingWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the where clause for requirements pegging.
    /// </summary>
    /// <returns>
    ///     A <c>SysDaQueryExpression</c> instance.
    /// </returns>
    private SysDaQueryExpression buildReqPeggingWhereClause()
    {
        SysDaQueryExpression whereClause =  new SysDaEqualsExpression(
                                                new SysDaFieldExpression(reqPegging, fieldStr(ReqPegging, PeggingAssignedSupply)),
                                                new SysDaFieldExpression(reqPeggingAssignmentSupply, fieldStr(ReqPeggingAssignment, RecId)));
        return whereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReqPeggingAssignmentRequirementWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the where clause for the pegging assignment requirement.
    /// </summary>
    /// <returns>
    ///     A <c>SysDaQueryExpression</c> instance.
    /// </returns>
    private SysDaQueryExpression buildReqPeggingAssignmentRequirementWhereClause()
    {
        SysDaQueryExpression whereClause =  new SysDaEqualsExpression(
                                                new SysDaFieldExpression(reqPeggingAssignmentRequirement, fieldStr(ReqPeggingAssignment, RecId)),
                                                new SysDaFieldExpression(reqPegging, fieldStr(ReqPegging, PeggingAssignedRequirement)))
                                            .and(new SysDaEqualsExpression(
                                                new SysDaFieldExpression(reqPeggingAssignmentRequirement, fieldStr(ReqPeggingAssignment, ReqPeggingAssignmentType)),
                                                new SysDaValueExpression(ReqPeggingAssignmentType::Requirement)));
        return whereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSourceDocumentLineWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the where clause for the source document line.
    /// </summary>
    /// <param name = "_tableId">
    ///     The table ID of the pegging table.
    /// </param>
    /// <returns>
    ///     A <c>SysDaQueryExpression</c> instance.
    /// </returns>
    private SysDaQueryExpression buildSourceDocumentLineWhereClause(TableId _tableId)
    {
        SysDaQueryExpression whereClause =  new SysDaEqualsExpression(
                                                new SysDaFieldExpression(sourceDocumentLine, fieldStr(SourceDocumentLine, RecId)),
                                                new SysDaFieldExpression(reqPeggingAssignmentRequirement, fieldStr(ReqPeggingAssignment, SourceDocumentLine)))
                                            .and(new SysDaEqualsExpression(
                                                new SysDaFieldExpression(sourceDocumentLine, fieldStr(SourceDocumentLine, SourceRelationType)),
                                                new SysDaValueExpression(_tableId)));
        return whereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSalesLineWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the where clause for sales line.
    /// </summary>
    /// <returns>
    ///      A <c>SysDaQueryExpression</c> instance.
    /// </returns>
    private SysDaQueryExpression buildSalesLineWhereClause()
    {
        SysDaQueryExpression whereClause =  new SysDaEqualsExpression(
                                                new SysDaFieldExpression(salesLine, fieldStr(SalesLine, SourceDocumentLine)),
                                                new SysDaFieldExpression(reqPeggingAssignmentRequirement, fieldStr(ReqPeggingAssignment, SourceDocumentLine)));
        return whereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildKanbanJobPickingListWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the where clause for the kanban job picking list.
    /// </summary>
    /// <returns>
    ///      A <c>SysDaQueryExpression</c> instance.
    /// </returns>
    private SysDaQueryExpression buildKanbanJobPickingListWhereClause()
    {
        SysDaQueryExpression whereClause =  new SysDaEqualsExpression(
                                                new SysDaFieldExpression(kanbanJobPickingList, fieldStr(KanbanJobPickingList, SourceDocumentLine)),
                                                new SysDaFieldExpression(reqPeggingAssignmentRequirement, fieldStr(ReqPeggingAssignment, SourceDocumentLine)));
        return whereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildkanbanKanbanJobPickingListWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the where clause for the kanban - kanban job picking list join.
    /// </summary>
    /// <returns>
    ///      A <c>SysDaQueryExpression</c> instance.
    /// </returns>
    private SysDaQueryExpression buildkanbanKanbanJobPickingListWhereClause()
    {
        SysDaQueryExpression whereClause =  new SysDaEqualsExpression(
                                                new SysDaFieldExpression(kanbanKanbanJobPickingList, fieldStr(Kanban, RecId)),
                                                new SysDaFieldExpression(kanbanJobPickingList, fieldStr(KanbanJobPickingList, Kanban)));
        return whereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildKanbanJobIssueWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the where clause for the kanban job issue.
    /// </summary>
    /// <returns>
    ///      A <c>SysDaQueryExpression</c> instance.
    /// </returns>
    private  SysDaQueryExpression buildKanbanJobIssueWhereClause()
    {
        SysDaQueryExpression whereClause =  new SysDaEqualsExpression(
                                                new SysDaFieldExpression(kanbanJobIssue, fieldStr(KanbanJobIssue, SourceDocumentLine)),
                                                new SysDaFieldExpression(reqPeggingAssignmentRequirement, fieldStr(ReqPeggingAssignment, SourceDocumentLine)));
        return whereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildkanbanJobKanbanJobIssueWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the where clause for the kanban job - kanban job issue join.
    /// </summary>
    /// <returns>
    ///     A <c>SysDaQueryExpression</c> instance.
    /// </returns>
    private  SysDaQueryExpression buildkanbanJobKanbanJobIssueWhereClause()
    {
        SysDaQueryExpression whereClause =  new SysDaEqualsExpression(
                                                new SysDaFieldExpression(kanbanJobKanbanJobIssue, fieldStr(KanbanJob, RecId)),
                                                new SysDaFieldExpression(kanbanJobIssue, fieldStr(KanbanJobIssue, KanbanJob)));
        return whereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildkanbanKanbanJobIssueWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the where clause for kanban - kanban job issue join.
    /// </summary>
    /// <returns>
    ///     A <c>SysDaQueryExpression</c> instance.
    /// </returns>
    private  SysDaQueryExpression buildkanbanKanbanJobIssueWhereClause()
    {
        SysDaQueryExpression whereClause = new SysDaEqualsExpression(
                                        new SysDaFieldExpression(kanbanKanbanJobIssue, fieldStr(Kanban, RecId)),
                                        new SysDaFieldExpression(kanbanJobKanbanJobIssue, fieldStr(KanbanJob, Kanban)));

        return whereClause;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>