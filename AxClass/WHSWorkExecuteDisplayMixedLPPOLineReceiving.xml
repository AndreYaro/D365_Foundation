<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayMixedLPPOLineReceiving</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Executes inbound order line receiving flow for mixed license plate receiving.
/// </summary>
[WHSMixedLPReceivingMode(WHSMixedLPReceivingMode::POLineReceiving)]
public class WHSWorkExecuteDisplayMixedLPPOLineReceiving extends WHSWorkExecuteDisplayMixedLPPOReceiving
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createOrderProvider</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkExecuteDisplayReceivingOrderProvider createOrderProvider(boolean _throwOnNonReceiving)
    {
        return new WHSWorkExecuteDisplayReceivingPurchOrderProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildNextRegistration</Name>
				<Source><![CDATA[
    protected container buildNextRegistration(
        container   _con,
        str         _extraText = '')
    {
        WHSRFMenuItemTable  rfMenuItem = WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem));
        container           ret = _con;

        var orderProvider = this.receivingOrderProvider();
        boolean hasOrderNum = orderProvider.hasOrderNum(pass);

        ret += this.buildLPContainerControls(rfMenuItem.DisplayContainerTypeCode);
        ret += [this.buildControl(#RFText, orderProvider.orderKey(), orderProvider.orderFieldLabel(), 1, orderProvider.orderNum(pass), orderProvider.orderTypeId(), '', 0, !hasOrderNum)];

        if (hasOrderNum)
        {
            ret += [this.buildControl(#RFText, orderProvider.lineKey(), orderProvider.lineFieldLabel(), 1, '', extendedTypeNum(LineNum), '', 0)];
        }

        ret += this.buildNextRegistrationButtonList();

        if (hasOrderNum)
        {
            ret += [this.buildControl(#RFButton, #RFChangePO, orderProvider.changeOrderFieldLabel(), 1, '', #WHSRFUndefinedDataType, '', 0)];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRegistering</Name>
				<Source><![CDATA[
    protected container buildRegistering(
        container   _con,
        str         _extraText = '',
        boolean     _enableContainerType = true)
    {
        WHSRFMenuItemTable  rfMenuItem = WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem));
        WHSReceiptOrderLine orderLine;
        container           ret = _con;
        boolean             contBuilding;
        boolean             additionalButtons;

        ret += [this.buildControl(#RFLabel, #MixedLPReceiving, pass.exists(#MenuItem) ? rfMenuItem.rfTitle : '', 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += this.buildLPContainerControls(rfMenuItem.DisplayContainerTypeCode, _enableContainerType);

        var orderProvider = this.receivingOrderProvider();
       
        if (orderProvider.hasOrderNum(pass))
        {
            ret += [this.buildControl(#RFText, orderProvider.orderKey(), orderProvider.orderFieldLabel(), 1, orderProvider.orderNum(pass), orderProvider.orderTypeId(), '', 0, false)];

            if (orderProvider.hasLineNum(pass))
            {
                orderLine = this.getOrderLine();

                ret += [this.buildControl(#RFText, orderProvider.lineKey(), orderProvider.lineFieldLabel(), 1, orderProvider.lineNumStr(pass), extendedTypeNum(LineNum), '', 0)];
                ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, orderLine.ItemId, extendedTypeNum(InventInventItemSearchItem), '', 0, false)];

                pass.insert(#ItemId, orderLine.ItemId);
                contBuilding = true;
            }
            else
            {
                ret += [this.buildControl(#RFText, orderProvider.lineKey(), orderProvider.lineFieldLabel(), 1, '', extendedTypeNum(LineNum), '', 0)];
            }
        }
        else
        {
            ret += [this.buildControl(#RFText, orderProvider.orderKey(), orderProvider.orderFieldLabel(), 1, '', orderProvider.orderTypeId(), '', 0)];
            additionalButtons = true;
        }

        if (contBuilding)
        {
            ItemId itemId = pass.lookup(#ItemId);

            // Product variant could be uniquely identified, do not allow product dimensions to be changed
            ret = this.buildProductDimensionsFromInventDim(ret, itemId, InventDim::find(orderLine.InventDimId), false);
            
            WHSProdQty defaultQty = WHSInventTable::find(itemId).ProdQty;

            if (pass.lookupStr(#SelectedValueUOM) == '')
            {
                pass.insert(#SelectedValueUOM, WHSUOMSeqGroupTable::getDefaultPurchUOM(itemId));
            }

            ret += [this.buildControl(#RFText, #Qty, "@SYS105177", 1, defaultQty ? WHSWorkExecuteDisplay::num2StrDisplay(defaultQty) : pass.lookupStr(#Qty), extendedTypeNum(Qty), '', 0)];
            ret = this.buildUOM(ret, '', false, false, false, pass.lookupStr(#SelectedValueUOM));
            ret = this.buildCatchWeight(ret, pass.lookup(#ItemId));

            ret = this.buildConversion(ret);
        }

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        if (additionalButtons)
        {
            ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];

            if (WHSMixedLicensePlateReceipt::hasOpenRecord(pass.lookup(#LicensePlateId)))
            {
                ret += [this.buildControl(#RFButton, #RFLPComplete, "@WAX:MixedLPComplete", 1, '', #WHSRFUndefinedDataType, '', 0)];
                ret += [this.buildControl(#RFButton, #RFList, "@WAX:MixedLPShowList", 1, '', #WHSRFUndefinedDataType, '', 0)];
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>