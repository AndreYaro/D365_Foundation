<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationDocumentOpenQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class BankReconciliationDocumentOpenQuery extends BankReconciliationQuery
{
    private const TableId DocumentOpenTableId = tableNum(BankReconciliationDocumentOpenTmp);
    private const FieldId BankCurrencyAmountFieldId = fieldNum(BankReconciliationDocumentOpenTmp, BankCurrencyAmount);
    private QueryBuildDataSource documentQbds;
    private boolean firstBuild;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(BankReconciliationMatchRule _rule)
    {
        super(_rule, DocumentOpenTableId);
        this.buildDocumentMatchRuleCache();
        firstBuild = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    public void buildQuery()
    {
        if (firstBuild)
        {
            this.initQuery();
            this.addGroupByFields(DocumentOpenTableId, rule.BankDocumentGroupRule);
            this.addFieldRanges(documentQbds, fieldNum(BankReconciliationDocumentOpenTmp, IsMatched), DocumentOpenTableId);

            if (this.getGroupByFieldIds().elements())
            {
                this.addAggregationField(new BankAggregationField(DocumentOpenTableId, BankCurrencyAmountFieldId, SelectionField::Sum));
            }

            super();
            firstBuild = false;
        }
        else
        {
            this.resetRanges();
            this.addFieldRanges(documentQbds, fieldNum(BankReconciliationDocumentOpenTmp, IsMatched), DocumentOpenTableId);
            documentQbds.clearRanges();
            this.applyRanges();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    private void initQuery()
    {
        documentQbds = query.addDataSource(DocumentOpenTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDocumentMatchRuleCache</Name>
				<Source><![CDATA[
    private void buildDocumentMatchRuleCache()
    {
        matchRuleCache = new List(Types::Record);
        BankReconciliationMatchRuleLine matchRuleLine;
        while select matchRuleLine
            where matchRuleLine.BankReconciliationMatchRule == rule.RecId
                && matchRuleLine.LineType == BankReconciliationMatchRuleLineType::Document
        {
            matchRuleCache.addEnd(matchRuleLine.data());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>