<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsRebatePaymentPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Abstract class that holds the rebate payment posting processes.
/// </summary>
abstract class PdsRebatePaymentPost
{
    PdsRebateTable  callerRebateTable;
    Args            args;
    LedgerJournalId ledgerJournalId;
    AccountNum      custVendAccount;
    PdsRebateTable  rebateTableForPostingInfo;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>callerFormDatasource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the datasource of the caller form.
    /// </summary>
    /// <returns>
    /// The datasource of the caller form.
    /// </returns>
    protected FormDataSource callerFormDatasource()
    {
        return FormDataUtil::getFormDataSource(callerRebateTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger dimension used for posting.
    /// </summary>
    /// <returns>
    /// The ledger dimension.
    /// </returns>
    public DimensionDynamicAccount dimensionAccount()
    {
        List dimensionSources = new List(Types::Class);

        dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(rebateTableForPostingInfo.DefaultDimension));

        return LedgerDimensionFacade::serviceCreateLedgerDimension(rebateTableForPostingInfo.LedgerDimension, LedgerDimensionDefaultingEngine::getDefaultDimension(dimensionSources));
    }

]]></Source>
			</Method>
			<Method>
				<Name>endInfoLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows infolog message when rebate posting succeeds.
    /// </summary>
    protected void endInfoLog()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default dimension that should be used to process the rebate payment.
    /// </summary>
    /// <returns>
    /// The default dimension.
    /// </returns>
    /// <remarks>
    /// The default dimension is needed to post against the customer or vendor.
    /// </remarks>
    protected DimensionDefault getDefaultDimension()
    {
        return rebateTableForPostingInfo.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRebateCustomerCurrencyCode</Name>
				<Source><![CDATA[
    protected CurrencyCode getRebateCustomerCurrencyCode()
    {
        return CustTable::find(callerRebateTable.CustAccount).Currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>LedgerJournalTable</c> record used for the posting.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    /// The <c>LedgerJournalTable</c> table record.
    /// </param>
    /// <returns>
    /// The <c>LedgerJournalTable</c> table record.
    /// </returns>
    protected LedgerJournalTable initLedgerJournalTable(LedgerJournalTable _ledgerJournalTable)
    {
        LedgerJournalTable ledgerJournalTable = _ledgerJournalTable;

        ledgerJournalTable = ledgerJournalTable.pdsInitFromledgerJournalName(this.ledgerJournalName());

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>LedgerJournalTrans</c> record used for the posting.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> table record.
    /// </param>
    /// <returns>
    /// The <c>LedgerJournalTrans</c> table record.
    /// </returns>
    protected LedgerJournalTrans initLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans ledgerJournalTrans   = _ledgerJournalTrans;

        ledgerJournalTrans.TransDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        ledgerJournalTrans.DocumentDate         = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        ledgerJournalTrans.CurrencyCode         = this.getRebateCustomerCurrencyCode();
        ledgerJournalTrans.ExchRate             = ExchangeRateHelper::exchRate(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
        ledgerJournalTrans.ExchRateSecond       = ExchangeRateHelper::exchRateSecond(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
        ledgerJournalTrans.Payment              = PdsRebateParameters::find().PdsInvoiceJournalPaymentTerm;
        ledgerJournalTrans.TransactionType      = this.ledgerTransType();
        ledgerJournalTrans.Approver             = HcmWorker::userId2Worker(curuserid());
        ledgerJournalTrans.Approved             = NoYes::Yes;

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeRebateEntryForSummarizingFromRebateTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the rebate for summarizing from a rebate record.
    /// </summary>
    /// <param name = "_pdsRebateTable">The rebate record to initialize from.</param>
    /// <returns>The initialized rebate for summarizing.</returns>
    protected PdsRebateTable initializeRebateEntryForSummarizingFromRebateTable(PdsRebateTable _pdsRebateTable)
    {
        PdsRebateTable pdsRebateTableForSummarizing;

        pdsRebateTableForSummarizing.LedgerDimension        = _pdsRebateTable.LedgerDimension;
        pdsRebateTableForSummarizing.OffsetLedgerDimension  = _pdsRebateTable.OffsetLedgerDimension;
        pdsRebateTableForSummarizing.DefaultDimension       = _pdsRebateTable.DefaultDimension;
        pdsRebateTableForSummarizing.OffsetDefaultDimension = _pdsRebateTable.OffsetDefaultDimension;
        pdsRebateTableForSummarizing.TaxGroup               = _pdsRebateTable.TaxGroup;
        pdsRebateTableForSummarizing.TaxItemGroup           = _pdsRebateTable.TaxItemGroup;

        return pdsRebateTableForSummarizing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRebateEntryForSummarizing</Name>
				<Source><![CDATA[
    private void insertRebateEntryForSummarizing(PdsRebateTable          _pdsRebateTableForSummarizing,
                                                 PdsRebateTable          _pdsRebateTable,
                                                 Amount                  _rebateAmount,
                                                 int                     _counter)
    {
        _pdsRebateTableForSummarizing.data(this.initializeRebateEntryForSummarizingFromRebateTable(_pdsRebateTable));
        _pdsRebateTableForSummarizing.PdsRebateId = int2str(_counter);
        _pdsRebateTableForSummarizing.PdsCorrectedRebateAmt = _rebateAmount;
        _pdsRebateTableForSummarizing.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>LedgerJournalName</c> table record used for payment posting.
    /// </summary>
    /// <returns>
    /// The <c>LedgerJournalName</c> table record.
    /// </returns>
    abstract public LedgerJournalName ledgerJournalName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalNameVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the number sequence code used to create a journal name.
    /// </summary>
    /// <returns>
    ///     The number sequence code used to create journals.
    /// </returns>
    public NumberSequenceCode ledgerJournalNameVoucher()
    {
        LedgerJournalName   ledgerJournalName   = this.ledgerJournalName();
        NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(ledgerJournalName.NumberSequenceTable);

        return numberSequenceTable.NumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>LedgerTransType</c> of the payment posting.
    /// </summary>
    /// <returns>
    /// The <c>ledgerTransType</c> of the payment posting.
    /// </returns>
    abstract public LedgerTransType ledgerTransType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>Args</c> value from the caller.
    /// </summary>
    /// <param name="_args">
    /// An <c>Args</c> value from the caller.
    /// </param>
    /// <returns>
    /// The current <c>Args</c> value.
    /// </returns>
    public Args parmArgs(Args _args = args)
    {
        if (!prmisdefault(_args))
        {
            args = _args;
        }

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsRebateTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>PdsRebateTable</c> table record on which rebate payment posting is performing.
    /// </summary>
    /// <param name="_rebateTable">
    /// The <c>PdsRebateTable</c> table record.
    /// </param>
    /// <returns>
    /// The rebate table record.
    /// </returns>
    public PdsRebateTable parmPdsRebateTable(PdsRebateTable _rebateTable = callerRebateTable)
    {
        if (!prmisdefault(_rebateTable))
        {
            callerRebateTable = _rebateTable;
        }

        return callerRebateTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsRebateTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the  rebate transaction type.
    /// </summary>
    /// <returns>
    /// The rebate transaction type.
    /// </returns>
    abstract public PdsRebateTransaction pdsRebateTransaction()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the ledger journal number and post the journal.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// The AR consumption journal parameter for the rebate program module is not set correctly.
    /// </exception>
    protected void postLedger()
    {
        NumberSeq                   numberSeq;

        if (this.ledgerJournalName())
        {
            try
            {
                numberSeq = NumberSeq::newGetVoucherFromCode(
                                                this.ledgerJournalNameVoucher(),
                                                NumberSeqScopeFactory::createDefaultScope(),
                                                true);

                this.postLedgerTrans(numberSeq.voucher());
                numberSeq.used();
                this.updateRebateTransLedgerJournalId();
            }
            catch (Exception::Error)
            {
                throw error(strFmt("@PDS1924", this.pdsRebateTransaction()));
            }
        }
        else
        {
            if (this.pdsRebateTransaction() == PdsRebateTransaction::PassToAP)
            {
                throw error("@PRO1197");
            }
            else
            {
                throw error("@PRO1195");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLedgerTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts and posts the Journal header and the Journal line.
    /// </summary>
    /// <param name="_voucher">
    /// The Voucher number of the ledger.
    /// </param>
    protected void postLedgerTrans(Voucher _voucher)
    {
        LedgerJournalTable  ledgerJournalTable;
        LedgerJournalTrans  ledgerJournalTrans;

        ttsBegin;
        ledgerJournalTable.initValue();
        ledgerJournalTable = this.initLedgerJournalTable(ledgerJournalTable);
        ledgerJournalTable.insert();

        ledgerJournalTable.LedgerJournalInclTax = NoYes::No;
        ledgerJournalTable.doUpdate();

        ledgerJournalTrans.initValue();
        ledgerJournalTrans.Voucher      = _voucher;
        ledgerJournalTrans.JournalNum   = ledgerJournalTable.JournalNum;
        ledgerJournalTrans              = this.initLedgerJournalTrans(ledgerJournalTrans);
        ledgerJournalTrans.insert();
        ttscommit;

        ledgerJournalId                 = ledgerJournalTable.JournalNum;

        LedgerJournalPost::postJournal(ledgerJournalTable, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    public void prompt()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryPdsRebateTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query of the caller form datasource.
    /// </summary>
    /// <returns>
    /// The query of the caller form datasource.
    /// </returns>
    protected Query queryPdsRebateTable()
    {
        return this.callerFormDatasource().query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the rebate payment posting process.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// No records are found.
    /// </exception>
    public void run()
    {
        PdsRebateTable  pdsRebateTable;
        PdsRebateTable  pdsRebateTableForSummary;
        Amount          rebateAmount;
        CurrencyCode    ledgerCurrency;
        CurrencyCode    customerCurrency;
        int             counter = 0;
        Amount          tempRebateAmount;
        QueryRun        queryRun;

        ledgerCurrency   = Ledger::accountingCurrencyByLedger(Ledger::current());
        customerCurrency = CustTable::find(callerRebateTable.CustAccount).Currency;

        try
        {
            ttsBegin;
            pdsRebateTableForSummary.setTmp();

            queryRun = new QueryRun(this.queryPdsRebateTable());

            queryRun.query().dataSourceTable(tablenum(PdsRebateTable)).update(true);

            while (queryRun.next())
            {
                pdsRebateTable = queryRun.get(tableNum(PdsRebateTable));

                if (!pdsRebateTable.PdsMarkForCredit)
                {
                    continue;
                }

                rebateAmount     = pdsRebateTable.PdsCorrectedRebateAmt;
                tempRebateAmount = CurrencyExchangeHelper::amountCur2MST(pdsRebateTable.PdsCorrectedRebateAmt, pdsRebateTable.CurrencyCode);

                if (this.pdsRebateTransaction() == PdsRebateTransaction::CreditNote && args.caller().paymentReference())
                {
                    pdsRebateTable.PdsCustomerRef = args.caller().paymentReference();
                }

                if (this.pdsRebateTransaction() == PdsRebateTransaction::PassToAP)
                {
                    pdsRebateTable.PdsRebatePayTo = custVendAccount;
                }

                pdsRebateTable.status().runPayment();

                PdsRebateTrans::insertFromPdsRebateTable(
                                        pdsRebateTable,
                                        this.pdsRebateTransaction(),
                                        rebateAmount);

                counter++;
                this.insertRebateEntryForSummarizing(pdsRebateTableForSummary, pdsRebateTable, tempRebateAmount, counter);
            }

            if (pdsRebateTableForSummary)
            {
                Query rebateSumQuery =  this.buildRebateSummarizingQuery();
                QueryRun rebateSumQueryRun = new QueryRun(rebateSumQuery);
                rebateSumQueryRun.setCursor(pdsRebateTableForSummary);

                while (rebateSumQueryRun.next())
                {
                    if (pdsRebateTableForSummary.PdsCorrectedRebateAmt)
                    {
                        rebateTableForPostingInfo = pdsRebateTableForSummary;

                        if (customerCurrency != ledgerCurrency)
                        {
                            pdsRebateTableForSummary.PdsCorrectedRebateAmt = CurrencyExchangeHelper::curAmount2CurAmount(pdsRebateTableForSummary.PdsCorrectedRebateAmt, ledgerCurrency, customerCurrency);
                        }

                        if (PdsRebateParameters::find().ManualPaymPost == NoYes::No)
                        {
                            this.postLedger();
                        }
                    }
                }
            }
            else
            {
                throw error(strfmt("@SYS96310", "@SYS24272"));
            }

            ttsCommit;

            this.endInfoLog();
        }
        catch (Exception::Error)
        {
            error("@PDS1930");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRebateSummarizingQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for summarizing the rebates.
    /// </summary>
    /// <returns>The rebate query.</returns>
    protected Query buildRebateSummarizingQuery()
    {
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tableNum(PdsRebateTable));
        qbds.addSelectionField(fieldNum(PdsRebateTable, PdsCorrectedRebateAmt), SelectionField::Sum);
        qbds.addGroupByField(fieldNum(PdsRebateTable, LedgerDimension));
        qbds.addGroupByField(fieldNum(PdsRebateTable, OffsetLedgerDimension));
        qbds.addGroupByField(fieldNum(PdsRebateTable, DefaultDimension));
        qbds.addGroupByField(fieldNum(PdsRebateTable, OffsetDefaultDimension));
        qbds.addGroupByField(fieldNum(PdsRebateTable, TaxGroup));
        qbds.addGroupByField(fieldNum(PdsRebateTable, TaxItemGroup));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRebateTransLedgerJournalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new rebate transaction for all rebates that are being paid with the payment.
    /// </summary>
    private void updateRebateTransLedgerJournalId()
    {
        PdsRebateTable  pdsRebateTable;
        PdsRebateTrans  pdsRebateTrans;

        update_recordSet pdsRebateTrans
            setting LedgerJournalId = ledgerJournalId
            where ! pdsRebateTrans.LedgerJournalId
        join RecId from pdsRebateTable
            where pdsRebateTrans.PdsRebateId             == pdsRebateTable.PdsRebateId
                && pdsRebateTable.CustAccount            == callerRebateTable.CustAccount
                && pdsRebateTable.PdsMarkForCredit       == NoYes::No
                && (pdsRebateTable.PdsRebateStatus       == PdsRebateStatus::Processed
                    || pdsRebateTable.PdsRebateStatus    == PdsRebateStatus::Free
                    || pdsRebateTable.PdsRebateStatus    == PdsRebateStatus::MarkForCredit)
                && pdsRebateTable.LedgerDimension        == rebateTableForPostingInfo.LedgerDimension
                && pdsRebateTable.OffsetLedgerDimension  == rebateTableForPostingInfo.OffsetLedgerDimension
                && pdsRebateTable.DefaultDimension       == rebateTableForPostingInfo.DefaultDimension
                && pdsRebateTable.OffsetDefaultDimension == rebateTableForPostingInfo.OffsetDefaultDimension
                && pdsRebateTable.TaxGroup               == rebateTAbleForPostingInfo.TaxGroup
                && pdsRebateTable.TaxItemGroup           == rebateTAbleForPostingInfo.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the customer vendor account.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean validate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>PdsRebatePaymentPost</c> class based on the rebate transaction type.
    /// </summary>
    /// <param name="_rebateTransType">
    /// The rebate transaction type for payment.
    /// </param>
    /// <returns>
    /// A <c>PdsRebatePaymentPost</c> class instance.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The rebate transaction types other than CreditNote and PassToAP are invalid.
    /// </exception>
    public static PdsRebatePaymentPost construct(PdsRebateTransaction _rebateTransType)
    {
        PdsRebatePaymentPost    pdsRebatePaymentPost;

        switch (_rebateTransType)
        {
            case PdsRebateTransaction::CreditNote:
                pdsRebatePaymentPost = new PdsRebatePaymentPost_CreditNote();
                break;

            case PdsRebateTransaction::PassToAP:
                pdsRebatePaymentPost = new PdsRebatePaymentPost_PassToAP();
                break;

            default:
                throw error("@PDS1554");
        }

        return pdsRebatePaymentPost;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>