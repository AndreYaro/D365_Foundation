<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxableDocumentDescriptorPurchaseOrderParm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents the tax document bundler for normal purchase order packing slip and import order bill of entry.
/// </summary>
[TaxableDocumentDescriptorAttribute("Purchase order packing slip, receipts list and import order bill of entry", "PurchOrderParm")]
public class TaxableDocumentDescriptorPurchaseOrderParm extends TaxableDocumentDescriptorBase
    implements TaxableDocumentTypeDefinitionPurchaseOrderPackingSlip, TaxableDocumentTypeDefinitionPurchaseOrderReceiptsList,
        TaxableDocumentTypeDefinitionImportOrderBillOfEntry_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDataProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data provider.
    /// </summary>
    /// <returns>
    /// The data provider instance.
    /// </returns>
    public ITaxableDocumentDataProvider getDataProvider()
    {
        return new TaxableDocPurchOrderParmDataProvider(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributionSide</Name>
				<Source><![CDATA[
    public TaxAccountingPostingProfileDistributionSide getDistributionSide()
    {
        return TaxAccountingPostingProfileDistributionSide::Debit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceTaxableDocumentType</Name>
				<Source><![CDATA[
    public ClassName getSourceTaxableDocumentType()
    {
        PurchParmTable purchParmTable = rootTable as PurchParmTable;
        ClassName ret;

        switch (purchParmTable.Ordering)
        {
            case DocumentStatus::PurchaseOrder:
                ret = classStr(TaxableDocumentTypeDefinitionPurchOrderConfirmation);
                break;
            case DocumentStatus::PackingSlip:
                ret = classStr(TaxableDocumentTypeDefinitionPurchaseOrderPackingSlip);
                break;
            case DocumentStatus::ReceiptsList:
                ret = classStr(TaxableDocumentTypeDefinitionPurchaseOrderReceiptsList);
                break;
            // <GIN>
            case DocumentStatus::BillOfEntry_IN:
                ret = classStr(TaxableDocumentTypeDefinitionImportOrderBillOfEntry_IN);
                break;
            // </GIN>
            default:
                ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxableDocumentRootTableId</Name>
				<Source><![CDATA[
    public TableId getTaxableDocumentRootTableId()
    {
        return tableNum(PurchParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxAdjustable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is tax adjustable for this transaction
    /// </summary>
    /// <returns>
    /// True if tax is adjustable; otherwise, false.
    /// </returns>
    public boolean isTaxAdjustable()
    {
        PurchParmTable purchParmTable = rootTable as PurchParmTable;

        if ((purchParmTable.Ordering == DocumentStatus::PackingSlip && InventParameters::find().PostPhysicalTax)
            || purchParmTable.Ordering == DocumentStatus::BillOfEntry_IN)
        {
            return true;
        }
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPersistTaxDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if tax document should be persisted in database.
    /// </summary>
    /// <returns>True if the tax document should be persisted; otherwise, false.</returns>
    public boolean shouldPersistTaxDocument()
    {
        if (rootTable is purchParmTable)
        {
            PurchParmTable purchParmTable = rootTable as PurchParmTable;
            if (purchParmTable.Ordering == DocumentStatus::BillOfEntry_IN)
            {
                return true;
            }
        }
        // VendPackingSlipJour is the journal table for product receipt journal.
        else if (rootTable is CustomsVendBOEJour_IN
                 || (rootTable is VendPackingSlipJour))
        {
            return true;
        }
       
        return super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>