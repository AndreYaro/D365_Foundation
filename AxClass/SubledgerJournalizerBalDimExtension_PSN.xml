<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalizerBalDimExtension_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SubledgerJournalizerBalDimExtension_PSN</c> class handles the Subledger Journalizer events for dimension attribute(s) that are required to be balanced.
/// </summary>
[SourceDocumentExtensionAttribute()]
class SubledgerJournalizerBalDimExtension_PSN extends SubledgerJournalizerExtension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postDimensionBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and checks dimension balance for posting.
    /// </summary>
    /// <param name="_subledgerJournalizerExtensionArgs">
    /// An object that holds subledger journalizer extension arguments.
    /// </param>
    public void postDimensionBalance(SubledgerJournalizerExtensionArgs _subledgerJournalizerExtensionArgs)
    {
        SubledgerJournalAccountEntry    subledgerJournalAccountEntry;
        SubledgerJournalEntry           subledgerJournalEntry;
        DimensionBalancingValidator     dimensionBalancingValidator = DimensionBalancingValidator::construct();

        while select LedgerDimension, sum(AccountingCurrencyAmount)
            from subledgerJournalAccountEntry
                group by LedgerDimension
                    exists join subledgerJournalEntry
                        where subledgerJournalAccountEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId
                            && subledgerJournalEntry.AccountingEvent == _subledgerJournalizerExtensionArgs.parmAccountingEvent().RecId

        {
            dimensionBalancingValidator.calculateDimensionBalance(
                subledgerJournalAccountEntry.LedgerDimension,
                subledgerJournalAccountEntry.AccountingCurrencyAmount);
        }

        _subledgerJournalizerExtensionArgs.parmIsDimensionBalanced(dimensionBalancingValidator.checkDimensionBalance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewDimensionBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and checks dimension balance for preview.
    /// </summary>
    /// <param name="_tmpDetail">
    /// Subledger journal account entry detail.
    /// </param>
    /// <param name="_tmpSummary">
    /// Subledger journal account entry summary.
    /// </param>
    public void previewDimensionBalance(
        SubledgerJournalAccountEntryTmpDetail  _tmpDetail,
        SubledgerJournalAccountEntryTmpSummary _tmpSummary)
    {
        DimensionBalancingValidator dimensionBalancingValidator = DimensionBalancingValidator::construct();

        while select LedgerDimension, sum(AccountingCurrencyAmount)
            from _tmpSummary
                group by LedgerDimension
        {
            dimensionBalancingValidator.calculateDimensionBalance(
                _tmpSummary.LedgerDimension,
                _tmpSummary.AccountingCurrencyAmount);
        }

        dimensionBalancingValidator.checkDimensionBalance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the events of Subledger Journalizer.
    /// </summary>
    protected void subscribe()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && DimensionAttributeExtensionProvider::balancingDimensionsExist())
        {
            subledgerJournalizer.recordedSubledgerJournalAccountEntries += eventhandler(this.postDimensionBalance);
            subledgerJournalizer.summarizedPreviewJourAccEntryDetail += eventhandler(this.previewDimensionBalance);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SubledgerJournalizerBalDimExtension_PSN construct()
    {
        return new SubledgerJournalizerBalDimExtension_PSN();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>