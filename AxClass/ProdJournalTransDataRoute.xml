<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalTransDataRoute</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProdJournalTransDataRoute extends ProdJournalTransData
{
    ProdJournalRoute    prodJournalRoute;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    void create(boolean _doInsert = false, boolean _initVoucherList = true)
    {
        if (prodJournalRoute.isProjMethodConsumed() && !prodJournalRoute.validateWrite())
            throw error("@SYS21628");

        super(_doInsert, _initVoucherList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVoucher</Name>
				<Source><![CDATA[
    Voucher findVoucher()
    {
        ProdJournalRoute        tmpJournalTrans;
        Integer                 journalVoucherChange = journalTableData.journalTable().VoucherChange;

        switch (journalVoucherChange)
        {
            case ProdJournalVoucherChange::DateProdChange    :
                select firstonly Voucher from tmpJournalTrans
                    index hint ProdIdx
                    where tmpJournalTrans.JournalId    == prodJournalRoute.JournalId  &&
                          tmpJournalTrans.TransDate    == prodJournalRoute.TransDate  &&
                          tmpJournalTrans.ProdId       == prodJournalRoute.ProdId     &&
                          tmpJournalTrans.Voucher;

                return tmpJournalTrans.Voucher;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromJournalTable</Name>
				<Source><![CDATA[
    void initFromJournalTable()
    {
        ProdJournalTable prodJournalTable = journalTableData.journalTable();

        super();

        prodJournalRoute.ProdId           = prodJournalTable.ProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVoucherObjectKeyValid</Name>
				<Source><![CDATA[
    boolean isVoucherObjectKeyValid()
    {
        Integer journalVoucherChange = journalTableData.journalTable().VoucherChange;

        switch (journalVoucherChange)
        {
            case ProdJournalVoucherChange::DateProdChange    : return prodJournalRoute.TransDate && prodJournalRoute.ProdId ? true : false;
        }
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(
        JournalTransMap     _journalTrans,
        JournalTableData    _journalTableData)
    {
        prodJournalRoute = _journalTrans;

        super(_journalTrans,_journalTableData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodId</Name>
				<Source><![CDATA[
    ProdId prodId()
    {
        return prodJournalRoute.ProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodJourType</Name>
				<Source><![CDATA[
    ProdJourType prodJourType()
    {
        return ProdJourType::RouteCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherObjectKey</Name>
				<Source><![CDATA[
    container voucherObjectKey()
    {
        Integer journalVoucherChange = journalTableData.journalTable().VoucherChange;

        switch (journalVoucherChange)
        {
            case ProdJournalVoucherChange::DateProdChange         : return [prodJournalRoute.TransDate,prodJournalRoute.ProdId];
        }
        return super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>