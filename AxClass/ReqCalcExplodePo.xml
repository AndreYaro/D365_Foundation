<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcExplodePo</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ReqRefTypeFactory(ReqRefType::BOMPlannedOrder),
ReqRefTypeFactory(ReqRefType::ItemPlannedOrder),
ReqRefTypeFactory(ReqRefType::TransferPlannedOrder),
ReqRefTypeFactory(ReqRefType::PlannedKanban),
ReqRefTypeFactory(ReqRefType::PmfPlannedProdBatch)]
public class ReqCalcExplodePo extends ReqCalcExplode implements BatchRetryable
{
    ItemId  explodeItemId;
    Set     safetyStockReqTransRecIdsToKeepDuringNetChange;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return strfmt("@SYS28623",refId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>explodeItemId</Name>
				<Source><![CDATA[
    ItemId explodeItemId()
    {
        return explodeItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqCalcExplodePo construct()
    {
        return new ReqCalcExplodePo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the <c>ReqTrans</c> records into the internal cache.
    /// </summary>
    /// <remarks>
    ///    Records in the internal cache will be coverage planned.
    /// </remarks>
    protected void insertData()
    {
        ReqTrans        reqTrans;

        select firstonly forupdate reqTrans
            index hint RefIdx
            where reqTrans.PlanVersion            == this.reqPlanVersionRefRecId() &&
                  reqTrans.RefType                == refType                       &&
                  reqTrans.RefId                  == refId                         &&
                  reqTrans.InventTransOrigin      == 0;

        if (reqTrans.RecId)
        {
            this.updateItemLock(reqTrans.ItemId);

            ReqTraceLog::deleteTraceForReqTrans(reqTrans);

            if (deleteCoverage)
            {
                reqTrans.deleteExplosionCoverage(reqPlanData);
            }

            if (reqTraceLogger.loggingEnabled())
            {
                reqTraceLogger.writeLog(ReqTraceLogMessageEntry::newFromReqTrans(ReqTraceMessageType::ExplodePO, [reqTrans.RefId], reqTrans));
            }

            this.addReqTrans2ReqTransCache(reqTrans,false);
            this.addRef2ReqTransCache(ReqTrans::derivedRefType(refType),
                                      refId,
                                      0,
                                      false,
                                      InventDistinctProduct::find(reqTrans.ItemId, reqTrans.CovInventDimId).Level);

            this.updateReqTransUpdate(reqTrans.ItemId);
            this.insertApprovedPo(reqTrans.ItemId);
            this.createReqProcessTransFilterForInventJournalReqTrans(reqTrans.ItemId);
        }

        explodeItemId = reqTrans.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        ReqTrans    reqTransCheck;
        reqTransCheck.RefType = refType;

        if (!reqTransCheck.isPlannedOrder())
        {
            return checkFailed("@SYS69860");
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReqPoPreventDeletionContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a context in order to prevent deletion for current planned order since it is being exploded.
    /// </summary>
    /// <returns>An instance of context.</returns>
    internal ReqPoPreventDeletionContext createReqPoPreventDeletionContext()
    {
        return ReqPoPreventDeletionContext::construct(this.parmRefId(), this.parmRefType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>