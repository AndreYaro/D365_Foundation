<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlProcessingLogController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlProcessingLogger</c> class is responsible for maintainig objects necessary to log stored procedure processing.
/// </summary>
internal final class BudgetControlProcessingLogController
{
    internal RecId processingHeaderRecId;

    private BudgetControlProcessingHeader processingHeaderLocal;
    private BudgetControlProcessingLog processingLogTmp;
    private BudgetControlProcessingDetail processingDetailTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static BudgetControlProcessingLogController construct()
    {
        return new BudgetControlProcessingLogController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetControlProcessingHeader</Name>
				<Source><![CDATA[
    internal void createBudgetControlProcessingHeader(sequenceNum _budgetCheckGroup)
    {
        if (BudgetControlParameters::isStoredProcedureLoggingEnabled())
        {
            BudgetControlProcessingHeader header;
            header.BudgetCheckGroup = _budgetCheckGroup;

            header.insert();

            this.processingHeaderRecId = header.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeAllProcessingInfo</Name>
				<Source><![CDATA[
    internal void storeAllProcessingInfo()
    {
        if (this.isStoredProcedureLoggingEnabled())
        {
            UserConnection userConnection = new UserConnection();

            Microsoft.Dynamics.Ax.Xpp.ErrorException errorEx;

            try
            {
                userConnection.ttsbegin();

                processingHeaderLocal = BudgetControlProcessingHeader::find(processingHeaderRecId);
                processingHeaderLocal.IsTransactionAborted = NoYes::Yes;

                this.storeBudgetControlProcessingLog(userConnection);
                this.storeBudgetControlProcessingDetail(userConnection);

                userConnection.ttscommit();
            }
            catch(errorEx)
            {
                BudgetControlInstrumentationLogger::createLogger(classStr(BudgetControlProcessingLogController)).logError(errorEx.Message);
            }
            finally
            {
                userConnection.finalize();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAllProcessingInfo</Name>
				<Source><![CDATA[
    internal void saveAllProcessingInfo()
    {
        if (this.isStoredProcedureLoggingEnabled())
        {
            UserConnection userConnection = new UserConnection();

            Microsoft.Dynamics.Ax.Xpp.ErrorException errorEx;

            try
            {
                userConnection.ttsbegin();

                BudgetControlProcessingHeader processingHeader = BudgetControlProcessingHeader::find(processingHeaderRecId, false, userConnection);
                if (!processingHeader)
                {
                    // Header was not committed, need to insert it.
                    processingHeaderLocal.setConnection(userConnection);
                    processingHeaderLocal.insert();

                    // The header recId might change after inserting again.
                    // The original is used to find the records for the other tables.
                    // The new recId is inserted as the BudgetControlProcessingHeader field.
                    RecId newProcessingHeaderRecId = processingHeaderLocal.RecId;

                    if (newProcessingHeaderRecId != 0)
                    {
                        this.saveBudgetControlProcessingLog(userConnection, newProcessingHeaderRecId);
                        this.saveBudgetControlProcessingDetail(userConnection, newProcessingHeaderRecId);

                        BudgetControlInstrumentationLogger::createLogger(classStr(BudgetControlProcessingLogController))
                            .processing().processingHeaderChanged(this.processingHeaderRecId, newProcessingHeaderRecId);

                        // Don't set this field until the old value isn't needed anymore.
                        this.processingHeaderRecId = newProcessingHeaderRecId;
                    }
                }

                userConnection.ttscommit();
            }
            catch (errorEx)
            {
                BudgetControlInstrumentationLogger::createLogger(classStr(BudgetControlProcessingLogController)).logError(errorEx.Message);
            }
            finally
            {
                userConnection.finalize();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeBudgetControlProcessingLog</Name>
				<Source><![CDATA[
    private void storeBudgetControlProcessingLog(UserConnection _userConnection)
    {
        BudgetControlProcessingLog processingLog;
        processingLogTmp.setConnection(_userConnection);
        processingLogTmp.setTempDB();

        RecordInsertList recordInsertList = new RecordInsertList(tableNum(BudgetControlProcessingLog), true, true, true, true, true, processingLogTmp);

        while select processingLog
            where processingLog.BudgetControlProcessingHeader == processingHeaderRecId
        {
            processingLogTmp.data(processingLog);
            recordInsertList.add(processingLogTmp);
        }

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeBudgetControlProcessingDetail</Name>
				<Source><![CDATA[
    private void storeBudgetControlProcessingDetail(UserConnection _userConnection)
    {
        BudgetControlProcessingDetail processingDetail;
        processingDetailTmp.setConnection(_userConnection);
        processingDetailTmp.setTempDB();

        RecordInsertList recordInsertList = new RecordInsertList(tableNum(BudgetControlProcessingDetail), true, true, true, true, true, processingDetailTmp);

        while select processingDetail
            where processingDetail.BudgetControlProcessingHeader == processingHeaderRecId
        {
            processingDetailTmp.data(processingDetail);
            recordInsertList.add(processingDetailTmp);
        }

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveBudgetControlProcessingLog</Name>
				<Source><![CDATA[
    private void saveBudgetControlProcessingLog(UserConnection _userConnection, RecId _newProcessingHeaderRecId)
    {
        BudgetControlProcessingLog processingLog;
        processingLog.setConnection(_userConnection);

        insert_recordset processingLog (BudgetControlProcessingHeader, Message, Level, MessageCreatedTime)
            select _newProcessingHeaderRecId, Message, Level, MessageCreatedTime
            from processingLogTmp
                where processingLogTmp.BudgetControlProcessingHeader == processingHeaderRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveBudgetControlProcessingDetail</Name>
				<Source><![CDATA[
    private void saveBudgetControlProcessingDetail(UserConnection _userConnection, RecId _newProcessingHeaderRecId)
    {
        BudgetControlProcessingDetail processingDetail;
        processingDetail.setConnection(_userConnection);

        insert_recordset processingDetail
            (BudgetControlProcessingHeader
            ,ID
            ,IsRelieved
            ,BudgetSourceTrackingDetail
            ,BudgetSourceTrackingRelievingDetail
            ,BudgetSourceTracking
            ,BudgetSource
            ,BudgetCheckGroupSequence
            ,IsSummarized
            ,IntegratorType
            ,Status
            ,Category
            ,TrackingDate
            ,TrackingNumber
            ,PrimaryLedger
            ,BudgetSourceLedgerDimension
            ,BudgetControlLedgerDimension
            ,AccountingCurrencyAmount
            ,IsReturnOfBudgetFunds
            ,IsCarryForward
            ,IsDeletePending
            ,IsProcessed
            ,BudgetControlRule
            ,BudgetGroupMember
            ,IsOverrunApproved
            ,AccountingCurrencyAmountOverThresholdRule
            ,AccountingCurrencyAmountOverRemainingRule
            ,CheckResultRule
            ,CheckResultErrorWarningRule
            ,AccountingCurrencyAmountOverThresholdGroup
            ,AccountingCurrencyAmountOverRemainingGroup
            ,CheckResultGroup
            ,CheckResultErrorWarningGroup
            ,IsBudgetSourceFailed
            ,IsChecked
            ,IsUntrackedBudgetFundsAvailable)
        select
            _newProcessingHeaderRecId
            ,ID
            ,IsRelieved
            ,BudgetSourceTrackingDetail
            ,BudgetSourceTrackingRelievingDetail
            ,BudgetSourceTracking
            ,BudgetSource
            ,BudgetCheckGroupSequence
            ,IsSummarized
            ,IntegratorType
            ,Status
            ,Category
            ,TrackingDate
            ,TrackingNumber
            ,PrimaryLedger
            ,BudgetSourceLedgerDimension
            ,BudgetControlLedgerDimension
            ,AccountingCurrencyAmount
            ,IsReturnOfBudgetFunds
            ,IsCarryForward
            ,IsDeletePending
            ,IsProcessed
            ,BudgetControlRule
            ,BudgetGroupMember
            ,IsOverrunApproved
            ,AccountingCurrencyAmountOverThresholdRule
            ,AccountingCurrencyAmountOverRemainingRule
            ,CheckResultRule
            ,CheckResultErrorWarningRule
            ,AccountingCurrencyAmountOverThresholdGroup
            ,AccountingCurrencyAmountOverRemainingGroup
            ,CheckResultGroup
            ,CheckResultErrorWarningGroup
            ,IsBudgetSourceFailed
            ,IsChecked
            ,IsUntrackedBudgetFundsAvailable
        from processingDetailTmp
            where processingDetailTmp.BudgetControlProcessingHeader == processingHeaderRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStoredProcedureLoggingEnabled</Name>
				<Source><![CDATA[
    private boolean isStoredProcedureLoggingEnabled()
    {
        return BudgetControlParameters::isStoredProcedureLoggingEnabled() && processingHeaderRecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>