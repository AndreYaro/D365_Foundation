<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsLocationLoadCreateManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WMSLocationLoadCreateManager</c> class is used to cache physical dimensions and create the
/// <c>WMSLocationLoad</c> records for the <c>WMSLocation</c> locations.
/// </summary>
class WmsLocationLoadCreateManager
{
    Map         inventLocationMap;
    boolean     mustInventBeControlled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into the <c>WMSLocationLoad</c> table.
    /// </summary>
    public void insertRecords()
    {
        Map                 wmsLocationMap;
        MapEnumerator       inventLocationEnumerator;
        MapEnumerator       wmsLocationEnumerator;
        InventLocationId    inventLocationId;
        WMSLocationId       wmsLocationId;
        WMSLocation         wmsLocation;
        Weight              currentWeightAdjustment;
        Volume              currentVolumeAdjustment;
        WMSLocationLoad     wmsLocationLoad;
        RecordInsertList    recordInsertList = new RecordInsertList(tableNum(WMSLocationLoad));

        ttsbegin;

        inventLocationEnumerator = inventLocationMap.getEnumerator();

        // for each warehouse
        while (inventLocationEnumerator.moveNext())
        {
            inventLocationId        = inventLocationEnumerator.currentKey();
            wmsLocationMap          = inventLocationEnumerator.currentValue();
            wmsLocationEnumerator   = wmsLocationMap.getEnumerator();

            // for each location
            while (wmsLocationEnumerator.moveNext())
            {
                wmsLocationId                                       = wmsLocationEnumerator.currentKey();
                [currentWeightAdjustment, currentVolumeAdjustment]  = wmsLocationEnumerator.currentValue();

                if (currentWeightAdjustment || currentVolumeAdjustment)
                {
                    wmsLocation  = WMSLocation::find(wmsLocationId, inventLocationId);

                    wmsLocationLoad.clear();
                    wmsLocationLoad.initFromLocationCurrentAdjusted(wmsLocation, currentWeightAdjustment, currentVolumeAdjustment);
                    recordInsertList.add(wmsLocationLoad);
                }
            }
        }

        //insert all the records
        recordInsertList.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlePhysicalOnHandOnLocationChanging</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(InventUpdate), delegateStr(InventUpdate,physicalOnHandChanging ))]
    /// <summary>
    /// Makes necessary adjustments to the <c>WMSLocationLoad</c> table
    /// when physical on hand is about to change.
    /// </summary>
    /// <param name="_context">
    /// The physical on hand change context.
    /// </param>
    /// <param name="_args">
    /// The information that describes the change of the physical on hand.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The <c>_context</c> must implement the <c>WHSILocationLoadTrackingContext</c> interface.
    /// Otherwise an error will be thrown.
    /// </exception>
    public static void handlePhysicalOnHandOnLocationChanging(Object _context, InventPhysicalOnHandChangeArgs _args)
    {
        WMSILocationLoadTrackingContext loadTrackingContext = _context as WMSILocationLoadTrackingContext;

        if (!_context)
        {
            // changes to physical on hand on a location must be tracked. otherwise we will have inconsistent data in WMSLocationLoad
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if ( _args.parmWMSLocation().wMSLocationId
             && loadTrackingContext.parmAdjustWMSLocationLoad()       
             && _args.parmWMSLocation().trackPhysicalLoad())
        {
            loadTrackingContext.parmWMSLocationLoadCreateManager().trackPhysicalOnHandChange(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        inventLocationMap = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackPhysicalOnHandChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tracks the physical on hand change in order to account for it
    /// in the <c>WMSLocationLoad</c> table.
    /// </summary>
    /// <param name="_args">
    /// The information about the change to the physical on hand.
    /// </param>
    public void trackPhysicalOnHandChange(InventPhysicalOnHandChangeArgs _args)
    {
        InventLocationId    inventLocationId;
        WMSLocationId       wmsLocationId;
        InventTable         inventTable;
        Map                 wmsLocationMap;
        WMSLocation         wmsLocation = _args.parmWMSLocation();

        Weight              weight;
        Volume              volume;

        if (!wmsLocation)
        {
            return;
        }

        inventLocationId = wmsLocation.inventLocationId;

        if (inventLocationMap.exists(inventLocationId))
        {
            wmsLocationMap = inventLocationMap.lookup(inventLocationId);
        }
        else
        {
            wmsLocationMap = new Map(Types::String, Types::Container);
            inventLocationMap.insert(inventLocationId, wmsLocationMap);
        }

        wmsLocationId = wmsLocation.wMSLocationId;
        if (wmsLocationMap.exists(wmsLocationId))
        {
            [weight, volume] = wmsLocationMap.lookup(wmsLocationId);
        }

        inventTable = _args.parmInventTable();
        wmsLocationMap.insert(wmsLocationId,
                         [weight + _args.parmDeltaQuantity() * inventTable.grossWeight(),
                          volume + _args.parmDeltaQuantity() * inventTable.grossVolume()]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WMSLocationLoadCreateManager</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>WMSLocationLoadCreateManager</c> class.
    /// </returns>
    public static WMSLocationLoadCreateManager construct()
    {
        return new WMSLocationLoadCreateManager();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>