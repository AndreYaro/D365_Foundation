<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayHRMPivotTableTemplateOpen</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rPayHRMPivotTableTemplateOpen extends RPayHRMPivotTableTemplateEngine
{
    DialogRunbase          dialog;
    FormBuildStringControl fbs_PivotTemplateId;
    FormStringControl      fb_PivotTemplateId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteColumns</Name>
				<Source><![CDATA[
        private void deleteColumns()
    {
        InteropPermission perm;
        int               lines = infologLine();

        COM               ptFieldSets;
        COM               ptFieldSet;
        int               itemCount;
        ;

        perm = new InteropPermission(InteropKind::ComInterop);
        perm.assert();

        try
        {
            ptFieldSets = ptColAxis.fieldSets();
            itemCount   = ptFieldSets.count();

            while (itemCount > 0)
            {
                ptFieldSet = ptFieldSets.item(0);
                ptColAxis.removeFieldSet(ptFieldSet);
                ptFieldSets = ptColAxis.fieldSets();
                itemCount   = ptFieldSets.count();
            }
        }
        catch
        {
            infolog.clear(lines);
        }

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRows</Name>
				<Source><![CDATA[
        private void deleteRows()
    {
        InteropPermission perm;
        int               lines = infologLine();

        COM               ptFieldSets;
        COM               ptFieldSet;
        int               itemCount;

        ;

        perm = new InteropPermission(InteropKind::ComInterop);
        perm.assert();

        try
        {
            ptFieldSets = ptRowAxis.fieldSets();
            itemCount   = ptFieldSets.count();

            while (itemCount > 0)
            {
                ptFieldSet = ptFieldSets.item(0);
                ptRowAxis.removeFieldSet(ptFieldSet);
                ptFieldSets = ptRowAxis.fieldSets();
                itemCount   = ptFieldSets.count();
            }
        }
        catch
        {
            infolog.clear(lines);
        }

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTotals</Name>
				<Source><![CDATA[
        private void deleteTotals()
    {
        InteropPermission         perm;
        int                       lines = infologLine();
        COM                       ptTotal;
        int                       itemCount;

        RPayHRMPivotItemTotalType totalType;
        int                       i;
        ;

        perm = new InteropPermission(InteropKind::ComInterop);
        perm.assert();

        try
        {
            ptTotals = ptDataAxis.totals();
            itemCount = ptTotals.count();
            while (itemCount > 0)
            {
                ptTotal = ptTotals.item(0);
                ptDataAxis.removeTotal(ptTotal);
                ptTotals = ptDataAxis.totals();
                itemCount = ptTotals.count();
            }

            itemCount = ptPivotTotals.count();
            for (i = 0; i <= itemCount - 1; i ++)
            {
                ptField = ptPivotTotals.item(i);
                totalType = ptField.type();
                if (totalType == RPayHRMPivotItemTotalType::PlTotalTypeCalculated)
                {
                    ptView.deletetotal(i);
                }
            }
        }
        catch
        {
            infolog.clear(lines);
        }

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
        public Object dialog()
    {
        DialogGroup         dlgGrpLoad;
        FormBuildControl    templateGroupControl;

        dialog = super();

        dialog.caption("@RUP2883");
        dlgGrpLoad = dialog.addGroup("@SYS8494");

        templateGroupControl = dialog.formBuildDesign().control(dlgGrpLoad.formBuildGroup().id());

        fbs_PivotTemplateId = templateGroupControl.addControl(FormControlType::String,'PivotTemplateId');
        fbs_PivotTemplateId.extendedDataType(extendedTypeNum(RPayHRMPivotTemplateId));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
        public void dialogPostRun(DialogRunbase _dialog)
    {
        FormRun formRun;
        ;

        super(_dialog);

        formRun = _dialog.dialogForm().formRun();
        formRun.controlMethodOverload(true);
        formRun.controlMethodOverloadObject(this);

        fb_PivotTemplateId = formRun.design().control(fbs_PivotTemplateId.id());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
        public boolean getFromDialog()
    {
        boolean ret;

        ret = super();
        if (ret)
        {
            pivotTemplateId = fb_PivotTemplateId.text();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadColumns</Name>
				<Source><![CDATA[
        private void loadColumns()
    {
        InteropPermission perm;
        int               lines = infologLine();
        ;

        perm = new InteropPermission(InteropKind::ComInterop);
        perm.assert();

        try
        {
            ptColAxis.insertFieldSet(ptPivotFieldSets.item(pivotTableTemplateItem.ItemName));
        }
        catch
        {
            infolog.clear(lines);
        }

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadRows</Name>
				<Source><![CDATA[
        private void loadRows()
    {
        InteropPermission perm;
        int               lines = infologLine();
        ;

        perm = new InteropPermission(InteropKind::ComInterop);
        perm.assert();

        try
        {
            ptGroupAxis = ptRowAxis.insertFieldSet(ptPivotFieldSets.item(pivotTableTemplateItem.ItemName));

            if (!pivotTableTemplateItem.SubTotal)
            {
                this.subTotal(ptGroupAxis, pivotTableTemplateItem.ItemName);
            }
            else
            {
                this.subTotal(ptGroupAxis, pivotTableTemplateItem.ItemName, true);
            }
        }
        catch
        {
            infolog.clear(lines);
        }

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTotals</Name>
				<Source><![CDATA[
        private void loadTotals()
    {
        InteropPermission perm;
        int               lines = infologLine();
        COM               ptTotal;
        ;

        perm = new InteropPermission(InteropKind::ComInterop);
        perm.assert();

        try
        {
            if (pivotTableTemplateItem.ItemTotalType == RPayHRMPivotItemTotalType::PlTotalTypeCalculated)
            {
                try
                {
                    ptTotal = ptView.addCalculatedTotal(pivotTableTemplateItem.ItemName,pivotTableTemplateItem.ItemName, pivotTableTemplateItem.PivotItemExpression);
                }
                catch (Exception::Error)
                {
                    ptTotal = ptPivotTotals.item(pivotTableTemplateItem.ItemName);
                }
            }
            else
            {
                ptTotal = ptPivotTotals.item(pivotTableTemplateItem.ItemName);
            }
            ptDataAxis.insertTotal(ptTotal);
        }
        catch
        {
            infolog.clear(lines);
        }

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pivotTemplateId_lookup</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        void pivotTemplateId_lookup()
    {
        Query                   query;
        QueryBuildDataSource    qbdsPivotTableTemplate;
        SysTableLookup          sysTableLookup;
        ;
        sysTableLookup = SysTableLookup::newParameters(tableNum(RPayHRMPivotTableTemplate),
                                                       dialog.formRun().controlCallingMethod(),
                                                       true);

        sysTableLookup.addLookupfield(fieldNum(RPayHRMPivotTableTemplate, PivotTemplateId), true);
        sysTableLookup.addLookupfield(fieldNum(RPayHRMPivotTableTemplate, PivotTemplateName));

        query = new Query();

        qbdsPivotTableTemplate = query.addDataSource(tableNum(RPayHRMPivotTableTemplate));

        qbdsPivotTableTemplate.addRange(fieldNum(RPayHRMPivotTableTemplate, PivotTableType)).value(queryValue(pivotTableType));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run()
    {
        ;

        super();

        this.deleteRows();
        this.deleteColumns();
        this.deleteTotals();

        while select pivotTableTemplateItem
            order by ItemPosition, ItemPositionNumber
            where pivotTableTemplateItem.PivotTemplateId == pivotTemplateId
        join pivotTableTemplate
            where pivotTableTemplate.PivotTableType  == pivotTableType &&
                  pivotTableTemplate.PivotTemplateId == pivotTableTemplateItem.PivotTemplateId
        {
            switch (pivotTableTemplateItem.ItemPosition)
            {
                case RPayHRMPivotTableItemPosition::Row:
                    this.loadRows();
                    break;

                case RPayHRMPivotTableItemPosition::Column:
                    this.loadColumns();
                    break;

                case RPayHRMPivotTableItemPosition::Total:
                    this.loadTotals();
                    break;

                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subTotal</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void subTotal(COM _ptGroupAxis, str _item, boolean _set = false)
    {
        InteropPermission perm;
        int               lines = infologLine();
        COM               ptFieldSetsLoc;
        COM               ptFieldSetLoc;
        COM               ptFieldsLoc;
        COM               ptFieldLoc;
        ;

        perm = new InteropPermission(InteropKind::ComInterop);
        perm.assert();

        try
        {
            ptFieldSetsLoc = _ptGroupAxis.fieldSets();
            ptFieldSetLoc  = ptFieldSetsLoc.item(_item);
            ptFieldsLoc    = ptFieldSetLoc.fields();
            ptFieldLoc     = ptFieldsLoc.item(_item);
            ptFieldLoc.subTotals(2, _set);
        }
        catch
        {
            infolog.clear(lines);
        }

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
        public boolean validate(Object calledFrom = null)
    {
        RPayHRMPivotTableTemplate pivotTableTemplateLoc;
        boolean                   ret;
        ;

        ret = super(calledFrom);

        if (ret)
        {
            pivotTableTemplateLoc = RPayHRMPivotTableTemplate::find(fb_PivotTemplateId.text(),pivotTableType);

            if (! pivotTableTemplateLoc.RecId)
            {
                ret = checkFailed(strFmt("@GLS111555", fb_PivotTemplateId.text()));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>