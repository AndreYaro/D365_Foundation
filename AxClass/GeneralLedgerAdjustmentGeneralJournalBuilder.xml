<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GeneralLedgerAdjustmentGeneralJournalBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Static class creates general journals for adjustment scenarios.
/// </summary>
internal static class GeneralLedgerAdjustmentGeneralJournalBuilder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createGeneralJournalsForAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a general journal with journal lines from a given <c>GeneralLedgerAdjustmentJournalCreationContract</c>.
    /// </summary>
    /// <param name = "_journalCreationContract">The <c>GeneralLedgerAdjustmentJournalCreationContract</c> containing the necessary data to create the general journal.</param>
    /// <returns>A <c>LedgerJournalTable</c> record.</returns>
    internal static LedgerJournalTable createGeneralJournalsForAdjustments(GeneralLedgerAdjustmentJournalCreationContract _journalCreationContract)
    {
        changecompany (_journalCreationContract.getJournalDataArea())
        {
            // Create the journal header
            LedgerJournalTable adjustmentJournal = GeneralLedgerAdjustmentGeneralJournalBuilder::createJournalHeader(_journalCreationContract);

            // Create the journal lines
            GeneralLedgerAdjustmentGeneralJournalBuilder::createJournalLines(adjustmentJournal, _journalCreationContract);

            return adjustmentJournal;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    private static LedgerJournalTable createJournalHeader(GeneralLedgerAdjustmentJournalCreationContract _journalCreationContract)
    {
        // Find the LedgerJournalName table record for the journal header
        LedgerJournalNameId journalNameId = _journalCreationContract.getJournalNameId();
        LedgerJournalName journalName = LedgerJournalName::find(journalNameId);

        // Find the relevant number sequences for use in journal creation
        NumberSequenceTable journalNumberSequenceTable = LedgerParameters::numRefJournalNum().numberSequenceTable();
        NumberSequenceTable tempVoucherNumberSequenceTable = LedgerParameters::numRefLedgerTempVoucher().numberSequenceTable();

        NumberSeq journalNumberSequence = NumberSeq::newGetNumFromCode(journalNumberSequenceTable.NumberSequence, NumberSeqScopeFactory::createDefaultScope(), true, false);

        // Initialize the journal header
        LedgerJournalTable adjustmentJournal;
        adjustmentJournal.JournalNum = journalNumberSequence.num();
        adjustmentJournal.JournalType = LedgerJournalType::Daily;
        adjustmentJournal.JournalName = journalName.JournalName;
        adjustmentJournal.NumberSequenceTable = tempVoucherNumberSequenceTable.RecId;
        adjustmentJournal.Name = _journalCreationContract.getJournalDescription();
        adjustmentJournal.VoucherAllocatedAtPosting = NoYes::Yes;

        // Mark the journal header as an adjustment journal, then insert
        adjustmentJournal.IsAdjustmentJournal = NoYes::Yes;
        adjustmentJournal.insert();

        return adjustmentJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
    private static void createJournalLines(LedgerJournalTable _adjustmentJournalHeader, GeneralLedgerAdjustmentJournalCreationContract _journalCreationContract)
    {
        DataAreaId journalDataArea = _journalCreationContract.getJournalDataArea();
        GeneralLedgerAdjustmentProposedAdjustmentTmp adjustmentRecordsMarkedForJournalCreation = _journalCreationContract.getAdjustmentRecords();

        NumberSequenceTable tempVoucherNumberSequenceTable = LedgerParameters::numRefLedgerTempVoucher().numberSequenceTable();
        NumberSeq tempVoucherNumberSequence = NumberSeq::newGetVoucherFromId(tempVoucherNumberSequenceTable.RecId);

        int journalLineNumberCounter = 1;

        GeneralLedgerAdjustmentProposedAdjustment adjustmentsGroupedByVoucher;

        // Group the proposed adjustment records by the original voucher, accounting date, and data area to reflect the new vouchers
        // that will be created in the general journal
        while select adjustmentsGroupedByVoucher
            group by adjustmentsGroupedByVoucher.Voucher, adjustmentsGroupedByVoucher.AccountingDate, adjustmentsGroupedByVoucher.VoucherDataAreaId
            exists join adjustmentRecordsMarkedForJournalCreation
                where adjustmentsGroupedByVoucher.RecId == adjustmentRecordsMarkedForJournalCreation.AdjustmentRecId
                   && adjustmentsGroupedByVoucher.AdjustmentJournalNumber == ''
                   && adjustmentsGroupedByVoucher.IsExcluded == NoYes::No
                   && adjustmentsGroupedByVoucher.VoucherDataAreaId == journalDataArea
        {
            // Create a new voucher for use in the general journal
            Voucher adjustmentVoucherNumber = tempVoucherNumberSequence.voucher();

            GeneralLedgerAdjustmentProposedAdjustment proposedAdjustments;

            // For each marked adjustment in the original voucher, create a journal line belonging to the newly created journal voucher
            while select forupdate proposedAdjustments
                exists join adjustmentRecordsMarkedForJournalCreation
                where proposedAdjustments.RecId == adjustmentRecordsMarkedForJournalCreation.AdjustmentRecId
                   && proposedAdjustments.Voucher == adjustmentsGroupedByVoucher.Voucher
                   && proposedAdjustments.AccountingDate == adjustmentsGroupedByVoucher.AccountingDate
                   && proposedAdjustments.VoucherDataAreaId == adjustmentsGroupedByVoucher.VoucherDataAreaId
                   && proposedAdjustments.IsExcluded == NoYes::No
                   && proposedAdjustments.AdjustmentJournalNumber == ''
            {
                ttsbegin;

                // Set the Txt field on the created journal line to depict the original voucher that it is adjusting
                LedgerJournalTransTxt journalTransactionDescription = proposedAdjustments.getJournalTransactionSummary();

                // Use the journal creation contract to determine which transaction date to use for the created journal line
                TransDate journalTransactionDate =
                    _journalCreationContract.shouldUseExistingAccountingDateForJournalTransactionDate() ? proposedAdjustments.AccountingDate
                                                                                                        : _journalCreationContract.getJournalTransactionDate();

                LedgerJournalTrans journalTransaction;
                journalTransaction.JournalNum = _adjustmentJournalHeader.JournalNum;
                journalTransaction.Voucher = adjustmentVoucherNumber;
                journalTransaction.TransDate = journalTransactionDate;
                journalTransaction.Company = proposedAdjustments.VoucherDataAreaId;
                journalTransaction.Txt = journalTransactionDescription;
                journalTransaction.CurrencyCode = proposedAdjustments.TransactionCurrency;
                journalTransaction.AccountType = LedgerJournalACType::Ledger;
                journalTransaction.LineNum = journalLineNumberCounter;
                journalTransaction.LedgerDimension = proposedAdjustments.LedgerDimension;

                // Determine debit or credit based on the sign of the proposed adjustment
                if (proposedAdjustments.TransactionCurrencyRecommendedAdjustment > 0)
                {
                    // If the proposed adjustment is positive, create a debit transaction
                    journalTransaction.AmountCurDebit = abs(proposedAdjustments.TransactionCurrencyRecommendedAdjustment);
                }
                else
                {
                    // If the proposed adjustment is negative, create a credit transaction
                    journalTransaction.AmountCurCredit = abs(proposedAdjustments.TransactionCurrencyRecommendedAdjustment);
                }

                journalTransaction.ExchRate = proposedAdjustments.AccountingCurrencyExchangeRate;
                journalTransaction.ReportingCurrencyExchRate = proposedAdjustments.ReportingCurrencyExchangeRate;
                journalTransaction.insert();

                // Update the status on the adjustment record to reflect that it has been exported to a journal
                proposedAdjustments.AdjustmentJournalNumber = _adjustmentJournalHeader.JournalNum;
                proposedAdjustments.update();

                journalLineNumberCounter++;

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>