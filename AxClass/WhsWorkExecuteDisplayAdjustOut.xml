<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayAdjustOut</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsWorkExecuteDisplayAdjustOut</c> class is used to display Adjust Out form in RF device.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::AdjustmentOut)]
class WhsWorkExecuteDisplayAdjustOut extends WHSWorkExecuteDisplay
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildAdjustOut</Name>
				<Source><![CDATA[
	/// <summary>
	/// Adds controls to Adjustment Out form state.
	/// </summary>
	/// <param name="_con">
	/// Container containing the form state before the controls are added.
	/// </param>
	/// <param name="_extraText">
	/// Label text.
	/// </param>
	/// <param name="_locationId">
	/// Location id of the adjusted item, empty string by default.
	/// </param>
	/// <param name="_itemId">
	/// Item id of the adjusted item, empty string by default.
	/// </param>
	/// <returns>
	/// Contaienr containing the form state after the controls are added.
	/// </returns>
    container buildAdjustOut(container          _con,
                             str                _extraText = '',
                             WMSLocationId      _locationId = '',
                             ItemId             _itemId = '')
    {
        InventTable         inventTable;
        container           ret = _con;
        str                 finalLabel = _extraText ? _extraText : "@WAX1099";
        WMSLocation         location;
        WHSInventTable      whsInventTable;
        WHSInventStatusId   inventStatusId;

        if (_itemId)
        {
            inventTable = InventTable::find(_itemId);
        }

        ret += [this.buildControl(#RFLabel, 'AdjustmentOut', finalLabel, 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFText, #LocOrLP, "@WAX1146", 1, _locationId, extendedTypeNum(WHSLicensePlateId), '', 0)];

        if (_locationId && pass.exists(#InventLocationId))
        {
            location = WMSLocation::find(_locationId, pass.lookup(#InventLocationId));

            if (location.whsLocationIsLPControlled())
            {
                ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, '', extendedTypeNum(WHSLicensePlateId), '', 0)];

                if (WHSLocationProfile::find(location.LocProfileId).DisplayMobileDeviceLocationLicensePlatePositioning)
                {
                    ret += [this.buildControl(#RFText, 
                                              WHSWorkExecuteDisplayLocationLicensePlatePositionControls::LocationLicensePlatePosition,
                                              "@WAX:LPPositionFormat",
											  1, 
											  int2Str(WHSLocationLicensePlatePositioning::find(pass.lookupStr(#LicensePlateId)).LicensePlatePosition), 
											  extendedTypeNum(WHSLocationLicensePlatePosition),
											  '',
											  0, 
											  false)];
                }
            }
        }

        ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, '', extendedTypeNum(InventInventItemSearchItem), '', 0)];

        if (pass.exists(#ItemId) && pass.lookup(#ItemId) != '')
        {
            whsInventTable = WHSInventTable::find(pass.lookup(#ItemId));

            if (whsInventTable.rfDescription1)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', whsInventTable.rfDescription1), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription1))];
            }
            else
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', inventTable.productNameWhsWorkExecute()), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(EcoResProductName))];
            }

            if (whsInventTable.rfDescription2)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt('\t        %1', whsInventTable.rfDescription2), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription2))];
            }
        }

        ret = this.buildProductDimensionsText(ret, inventTable.ItemId);

        ret = this.buildTrackingDimensionsText(ret, inventTable.ItemId, location);

        ret += [this.buildControl(#RFText, #CurrentQty, "@WAX1147", 1, '', extendedTypeNum(Qty), '', 0, false)];
        ret += [this.buildControl(#RFText, #Qty, "@SYS105177", 1, '', extendedTypeNum(Qty), '', 0)];

        if (pass.exists(#LicensePlateId) && pass.lookup(#LicensePlateId) != "")
        {
            inventStatusId = this.getDefaultLPInventStatusId(pass.lookup(#LicensePlateId));
        }

        ret = this.buildUOM(ret, '', false, false, false, pass.lookupStr(#SelectedValueUOM));

        if (inventTable.ItemId
            && PdsGlobal::pdsIsCWItem(inventTable.ItemId)
            && !WHSInventTable::isCatchWeightTagTracked(inventTable.ItemId)
            && pass.hasValue(#Qty))
        {
            if (pass.lookupNum(#Qty) < whsInventOnHand::getWorkPhysicalInventHandlingQty(inventTable.ItemId, pass.createInventDimFromPass().inventDimId)
                && WHSInventTable::correctionWeightCapturingProcess(inventTable.ItemId) != WHSCountingWeightCapturingMethod::NotCaptured)
            {
                // Only displays the weight control if it is a partial reduction
                ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, "@WAX:Weight", 1, '', extendedTypeNum(Weight), '', 0, true)];
            }
            else
            {
                // When adjusting out a full dimension set, use the weight existing in inventory
                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, whsInventOnHand::getWorkPhysicalInvent(inventTable.ItemId, pass.createInventDimFromPass().inventDimId));
            }
        }

        WHSRFMenuItemTable rfMenuItemTable = WHSRFMenuItemTable::find(pass.lookup(#MenuItem));

        if (rfMenuItemTable.RFDisplayStatus)
        {
            if (inventStatusId)
            {
                pass.insert(#SelectedValue, inventStatusId);
                ret = this.buildInventoryStatus(ret, '', false, false, false, pass.lookup(#SelectedValue), false);
            }
            else
            {
                ret = this.buildInventoryStatus(ret, '', false, false, false, pass.lookupStr(#SelectedValue), !location.whsLocationIsLPControlled());
            }
        }

        ret = this.buildAdjustmentType(ret, '', false, false, false, pass.lookupStr(#SelectedAdjustmentType));

        if (rfMenuItemTable.DisplayCountingReasonCode == WHSDisplayCountingReasonCode::Line)
        {
            ret = this.buildCountingReasonCode(ret, rfMenuItemTable.DefaultCountingReasonCode, rfMenuItemTable.EditCountingReasonCode);
        }
        else
        {
            pass.insert(WHSWorkExecuteDisplayCycleCountControls::CountingReasonCode, rfMenuItemTable.DefaultCountingReasonCode);
        }

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    container displayForm(container _con, str _buttonClicked = "")
    {
        WHSWorkExecuteDisplay   workExecuteDisplay = WHSWorkExecuteDisplay::construct(WHSWorkExecuteMode::AdjustmentOut);
        WhsWorkExecute          workExecute = WhsWorkExecute::construct();
        InventDim               inventDim;
        Qty                     qty;
        container               ret = conNull();
        container               con = _con;
        int                     hasError = 0;
        container               tmpFieldValues;
        boolean                 complete;
        WHSRFPassthrough        fieldValues = new WHSRFPassthrough(Types::String, Types::String);
        boolean                 addCancel = true;

        pass = WHSRFPassthrough::create(conPeek(_con, 2));

        if (!pass.exists(#InventLocationId))
        {
            pass.insert(#InventLocationId, WHSWorkUserSession::find(userId).InventLocationId);
            pass.insert(#InventSiteId, InventLocation::find(pass.lookup(#InventLocationId)).InventSiteId);
        }

        hasError = this.hasError(_con);

        if (pass.exists(#UserId))
        {
            userId = pass.lookup(#UserId);
        }

        switch (step)
        {
            case 0,1:
                if (pass.exists(#WorkComplete))
                {
                    ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);
                    pass.remove(#WorkComplete);
                    addCancel = false;
                }
                if (step)
                {
                    if (hasError)
                    {
                        con = conDel(con, 3, 1);
                    }

                    ret = this.displayLocOrLPCheck(ret, this.getControlDataFromContainer(con, #LocOrLP));
                    
                    if (step == #LocOrLPCheck)
                    {
                        break;
                    }

                    [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);
                    fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                    pass = this.combineMaps(pass, fieldValues);
                    hasError = this.hasError(con);
                    if (hasError)
                    {
                        ret = con;
                        addCancel = false;
                        break;
                    }
                }
                else
                {
                    step = 1;
                }

                con = this.buildAdjustOut(ret,
                                            '',
                                            fieldValues.lookupStr(#WMSLocationId),
                                            fieldValues.lookupStr(#ItemId));

                if (fieldValues.exists(#WMSLocationId)                                  &&
                    fieldValues.exists(#LocOrLP)                                        &&
                    fieldValues.lookup(#WMSLocationId)  != fieldValues.lookup(#LocOrLP))
                {
                    fieldValues.insert(#LocOrLP, pass.lookup(#WMSLocationId));
                }

                if (!fieldValues.empty())
                {
                    [ret, complete] = this.processFieldValues(con, fieldValues);

                    if (complete
                        && !pass.hasValue(WHSWorkExecuteDisplayCatchWeightControls::WeightPrompt)
                        && PdsGlobal::pdsIsCWItem(pass.lookup(#ItemId))
                        && !WHSInventTable::isCatchWeightTagTracked(pass.lookup(#ItemId))
                        && (!pass.hasValue(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight)
                            || pass.lookupNum(#Qty) < pass.lookupNum(#CurrentQty)))
                    {
                        complete = false;
                        pass.insert(WHSWorkExecuteDisplayCatchWeightControls::WeightPrompt, 1);
                    }

                    if (complete && !pass.exists(#Initiation))
                    {
                        inventDim = pass.createInventDimFromPass();

                        this.validateCountingReasonCode(pass.lookupStr(#ItemId), inventDim.inventDimId);

                        // If Inventory status is not displayed need to resolve the correct value
                        if (!WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).RFDisplayStatus)
                        {
                            WHSInventStatusId resolvedInventoryStatusId = WhsWorkExecuteDisplay::getUniqueInventStatusWithPhysicalOnHand(pass.lookup(#ItemId), inventDim);

                            if (resolvedInventoryStatusId)
                            {
                                inventDim.InventStatusId = resolvedInventoryStatusId;
                                inventDim = inventDim::findOrCreate(inventDim);
                            }
                        }

                        qty = pass.lookupNum(#Qty);

                        if (WHSInventOnHand::getWorkPhysicalInventHandlingQty(pass.lookup(#ItemId), inventDim.InventDimId)
                            < WHSCatchWeightHelper::convertInventQuantity(pass.lookup(#ItemId),
                                                                      pass.lookup(#UOM),
                                                                      qty,
                                                                     inventDim.InventDimId))
                        {
                            throw error("@WAX2390");
                        }

                        if (pass.exists(#LicensePlateId)        &&
                            pass.lookup(#LicensePlateId) != ''  &&
                            WHSWorkTable::findByLicensePlate(pass.lookup(#LicensePlateId)))
                        {
                            throw error("@WAX3837");
                        }

                        if (!pass.exists(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight)
                            && WHSInventTable::isCatchWeightTagTracked(pass.lookup(#ItemId)))
                        {
                            pass.insert(#InventoryStatus, WhsWorkExecuteDisplay::getUniqueInventStatusWithPhysicalOnHand(pass.lookup(#ItemId), inventDim));
                                
                            WHSCatchWeightTagAutoSelect tagAutoSelect = WHSCatchWeightTagAutoSelectAdjustOut::newFromParams(mode, pass);
                            if (tagAutoSelect.canUseAutoSelection())
                            {
                                tagAutoSelect.process();
                            }
                            else
                            {
                                step = #CatchWeightTagCapture;
                                ret = conNull();
                                ret = this.buildCatchWeightTagCaptureAdjustOut(ret);
                                break;
                            }                            
                        }

                        this.createAdjustmentWork(inventDim);

                        // If adjusted out entire child LP, break from parent
                        if (pass.exists(#LicensePlateId)                                                &&
                            pass.lookup(#LicensePlateId) != ''                                          &&
                            WHSLicensePlate::find(pass.lookup(#LicensePlateId)).LicensePlateParent   &&
                            !WHSInvent::calculateHandlingQtyOnLicensePlate(pass.lookup(#LicensePlateId)))
                        {
                            WHSLicensePlate::removeFromParentLP(pass.lookup(#LicensePlateId));
                        }

                        pass = this.resetPassthrough(con, false);
                        pass.insert(#WorkComplete, 1);
                        con = conPoke(con, 2, pass.pack());
                        step = 0;
                        workExecuteDisplay.setGlobals(mode, step, userId, pass, null);
                        ret = workExecuteDisplay.displayForm(con, _buttonClicked);
                        pass = new WHSRFPassthrough(Types::String, Types::String);
                        pass = WHSRFPassthrough::create(conPeek(ret, 2));
                    }
                }
                else
                {
                    ret = con;
                }
                break;

            case #CatchWeightTagCapture:
                ret = this.processCatchWeightTagCaptureAdjustOut(hasError, _con);
                break;

            case #LocOrLPCheck:
                ret = this.processLocOrLPCheck(con, _buttonClicked);
                break;
        }

        if (pass.exists(#Initiation))
        {
            pass.remove(#Initiation);
        }

        ret = this.updateModeStepPass(ret, mode, step, pass);

        if (addCancel)
        {
            ret = this.addCancelButton(ret, 1, true);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLocOrLPCheck</Name>
				<Source><![CDATA[
    private container processLocOrLPCheck(container _con, str _buttonClicked)
    {
        step = 1;

        var locOrLpIdentifier = pass.lookupStr(#LocOrLP);
        container ret = conNull();
        
        pass = this.resetPassthrough(ret, false);
        pass.insert(WHSWorkExecuteDisplayLocOrLPCheckControls::LocOrLPCheck, _buttonClicked);
        
        ret = this.updateModeStepPass(ret, mode, step, pass);
        ret = this.buildAdjustOut(ret, '', locOrLpIdentifier);
        ret = this.displayForm(ret, _buttonClicked);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAdjustmentWorkParams</Name>
				<Source><![CDATA[
    protected WHSInventAdjustmentCreateParameters createAdjustmentWorkParams(InventDim _inventDim)
    {
        WHSInventAdjustmentCreateParameters params = WHSInventAdjustmentCreateParameters::construct();
        
		params.WorkUserId				= pass.lookupStr(#UserId);
        params.ItemId					= pass.lookup(#ItemId);
        params.InventDim				= _inventDim;
        params.AdjustmentQty			= -pass.lookupNum(#Qty);
        params.AdjustmentUnit			= pass.lookup(#UOM);
        params.WmsLocationId			= pass.lookup(#WMSLocationId);
        params.InventLocationId			= _inventDim.InventLocationId;
        params.AdjustmentTypeCode		= pass.lookup(#AdjustmentType);
        params.LicensePlateId			= pass.lookupStr(#LicensePlateId);
        params.WorkCreatedBy			= WHSWorkUser::getWorkerEmployeeRecId(params.WorkUserId);
        params.InventCountingReasonCode = pass.lookupStr(WHSWorkExecuteDisplayCycleCountControls::CountingReasonCode);
        params.AdjustmentCatchWeight    = -pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight);

        return params;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAdjustmentWork</Name>
				<Source><![CDATA[
    protected void createAdjustmentWork(InventDim _inventDim)
    {
        WHSInventAdjustmentCreateParameters params = this.createAdjustmentWorkParams(_inventDim);
        WHSInventAdjustmentCreate createAdj = WHSInventAdjustmentCreate::newFromParams(params);
        createAdj.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCatchWeightTagCaptureAdjustOut</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the mobile device screen for capturing catch weight tags.
    /// </summary>
    /// <param name="_con">
    /// The current mobile device container.
    /// </param>
    /// <returns>
    /// An updated mobile device container with appropriate mobile device controls.
    /// </returns>
    protected container buildCatchWeightTagCaptureAdjustOut(container _con)
    {
        container   ret = _con;

        if (!pass.exists(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty))
        {
            pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter, 1);
            pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty, pass.lookupNum(#Qty));
        }

        ret += [this.buildControl(#RFLabel, #Scan, "@WAX:CatchWeightAssignCatchWeightTag", 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel,
                                  WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter,
                                  strFmt("@WAX:CatchWeightTagCountOfWhole",
                                         pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter),
                                         pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty)),
                                  1,
                                  '',
                                  #WHSRFUndefinedDataType,
        '',
                                  0)];

        ret += [this.buildControl(#RFText,
                                  WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag,
                                  "@WAX:CatchWeightTag",
                                  1,
                                  pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag),
                                  extendedTypeNum(WHSCatchWeightTagNumber),
                                  '',
                                  0)];

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCatchWeightTagCaptureAdjustOut</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the catch weight tag capture display step for adjustments out.
    /// </summary>
    /// <param name="_hasError">
    /// True if mobile device screen has an error message; otherwise False.
    /// </param>
    /// <param name="_con">
    /// The current mobile device container being built.
    /// </param>
    /// <returns>
    /// An updated mobile device container.
    /// </returns>
    private container processCatchWeightTagCaptureAdjustOut(
        boolean     _hasError,
        container   _con)
    {
        container           ret = _con;
        
        if (_hasError)
        {
            ret = conDel(ret, #RFErrorLoc, 1);
        }

        container tmpFieldValues;
        WHSRFPassthrough fieldValues = new WHSRFPassthrough(Types::String, Types::String);
        
        [ret, tmpFieldValues] = WHSRFControlData::processData(ret, pass);
        fieldValues = WHSRFPassthrough::create(tmpFieldValues);
        pass = this.combineMaps(pass, fieldValues);
        boolean hasError = this.hasError(ret);

        if (hasError)
        {
            return ret;
        }

        if (!fieldValues.empty())
        {
            boolean complete;
            [ret, complete] = this.processFieldValues(ret, fieldValues);

            if (complete)
            {
                WHSCapturedWeight capturedTagWeight = WHSCatchWeightTag::find(pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag)).CapturedWeight;

                if (!WHSCatchWeightTag::deleteByTagNumber(pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag)))
                {
                    throw error(strFmt("@WAX:CatchWeighTagCannotBeDeleted", pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag)));
                }

                // Increment total catch weight value
                if (!pass.exists(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight))
                {
                    pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, capturedTagWeight);
                }
                else
                {
                    pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, (pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight) + capturedTagWeight));
                }

                // Remove current Tag Id and increment Tag Counter
                pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag);
                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter,
                            (pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter) + 1));

                // Check to see if all tags have been captured
                if (pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter)
                    > pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty))
                {
                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter);

                    step = 1;
                    ret = conNull();
                    ret += [this.buildControl(#RFLabel, #Scan, "@WAX:CatchWeightAssignCatchWeightTag", 1, '', #WHSRFUndefinedDataType, '', 0)];
                    ret = this.updateModeStepPass(ret, mode, step, pass);
                    ret = this.displayForm(ret);
                }
                else
                {
                    ret = conNull();
                    ret = this.buildCatchWeightTagCaptureAdjustOut(ret);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>