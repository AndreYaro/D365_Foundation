<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayReportTuning_PersonalCardReport_2010</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rPayReportTuning_PersonalCardReport_2010 extends RPayReportTuning
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
        public void lookup(FormStringControl _lookupCtrl)
    {
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();

        rPayReportTuningTable = rPayReportTuningTableDs.cursor();

        switch (rPayReportTuningTable.ParameterCode)
        {
            case 1:
                this.lookupEDT(extendedTypeNum(RpayBudgetFund), _lookupCtrl);
                break;

            case 2, 5, 7, 8:
                sysTableLookup = SysTableLookup::newParameters(tableNum(RPayCounterTable), _lookupCtrl);
                query.addDataSource(tableNum(RPayCounterTable));

                query.dataSourceNo(1).addRange(fieldNum(RPayCounterTable, LineType)).value(queryValue(RPayCtypeType::BaseTotal));
                query.dataSourceNo(1).addRange(fieldNum(RPayCounterTable, CounterType)).value(queryValue(RPayCounterType::Fund));

                sysTableLookup.addLookupfield(fieldNum(RPayCounterTable, CounterUnit));
                sysTableLookup.addLookupfield(fieldNum(RPayCounterTable, Name));

                sysTableLookup.parmQuery(query);
                sysTableLookup.performFormLookup();
                break;

            case 3:
                sysTableLookup = SysTableLookup::newParameters(tableNum(RPayCounterTable), _lookupCtrl);
                query.addDataSource(tableNum(RPayCounterTable));

                query.dataSourceNo(1).addRange(fieldNum(RPayCounterTable, CounterType)).value(queryValue(RPayCounterType::Fund));

                sysTableLookup.addLookupfield(fieldNum(RPayCounterTable, CounterUnit));
                sysTableLookup.addLookupfield(fieldNum(RPayCounterTable, Name));

                sysTableLookup.parmQuery(query);
                sysTableLookup.performFormLookup();
                break;

            case 4, 6:
                sysTableLookup = SysTableLookup::newParameters(tableNum(RPayFundDeductionTable), _lookupCtrl);
                query.addDataSource(tableNum(RPayFundDeductionTable));
                sysTableLookup.addLookupfield(fieldNum(RPayFundDeductionTable, RpayFundDeductionCode));
                sysTableLookup.addLookupfield(fieldNum(RPayFundDeductionTable, Name));

                _lookupCtrl.replaceOnLookup(false);
                sysTableLookup.parmQuery(query);
                sysTableLookup.performFormLookup();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(RPayReportName _reportName, FormRun _formRun)
    {
        parameterName = [literalStr("@RUP732"),
                         literalStr("@RUP866"),
                         literalStr("@RUP3008"),
                         literalStr("@RUP3009"),
                         literalStr("@RUP3010"),
                         literalStr("@RUP3011"),
                         literalStr("@RUP3012"),
                         literalStr("@RUP3013")];

        super(_reportName, _formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openReportTemplate</Name>
				<Source><![CDATA[
        public void openReportTemplate()
    {
        ComExcelDocument_RU doc = new ComExcelDocument_RU();
        doc.open(TemplateProvider_RU::getFor(RPayReport_EmplPensionIncome::construct()).get(resourceStr(RPayPersonalCardReport_2010)), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReport</Name>
				<Source><![CDATA[
        public void printReport()
    {
        new MenuFunction(menuitemoutputstr(RPayPersonalCardReport_2010), MenuItemType::Output).run(new Args());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the possibility of saving parameter.
    /// </summary>
    /// <returns>
    /// True if parameter could be saved otherwise false.
    /// </returns>
    public boolean validateWrite()
    {
        rPayReportTuningTable = rPayReportTuningTableDs.cursor();

        switch (rPayReportTuningTable.ParameterCode)
        {
            case 1:
                if (! (select firstfast rPayCounterTable
                           where rPayCounterTable.CounterUnit == rPayReportTuningTable.Parameter &&
                                 rPayCounterTable.LineType    == RPayCtypeType::BudgetFund       &&
                                 rPayCounterTable.CounterType == RPayCounterType::Fund).RecId)
                {
                    return checkFailed(strFmt("@GLS106038",
                                       rPayReportTuningTable.Parameter,
                                       fieldPName(RPayCounterTable, CounterUnit),
                                       tablePName(RPayCounterTable)));
                }
                break;

            case 2, 5, 7, 8:
                if (! (select firstfast rPayCounterTable
                          where rPayCounterTable.CounterUnit == rPayReportTuningTable.Parameter &&
                                rPayCounterTable.LineType    == RPayCtypeType::BaseTotal        &&
                                rPayCounterTable.CounterType == RPayCounterType::Fund).RecId)
                {
                    return checkFailed(strFmt("@GLS106038",
                                       rPayReportTuningTable.Parameter,
                                       fieldPName(RPayCounterTable, CounterUnit),
                                       tablePName(RPayCounterTable)));
                }
                break;

            case 3:
                if (! (select firstfast rPayCounterTable
                          where rPayCounterTable.CounterUnit == rPayReportTuningTable.Parameter &&
                                rPayCounterTable.CounterType == RPayCounterType::Fund).RecId)
                {
                    return checkFailed(strFmt("@GLS106038",
                                       rPayReportTuningTable.Parameter,
                                       fieldPName(RPayCounterTable, CounterUnit),
                                       tablePName(RPayCounterTable)));
                }
                break;

            case 4, 6:
                if (rPayReportTuningTable.Parameter &&
                    ! (select firstfast RPayFundDeductionTable
                            where RPayFundDeductionTable.RpayFundDeductionCode == rPayReportTuningTable.Parameter).RecId)
                {
                    checkFailed(strFmt("@GLS106038",
                        rPayReportTuningTable.Parameter,
                        fieldpname(RPayFundDeductionTable, RpayFundDeductionCode),
                        tablepname(RPayFundDeductionTable)));
                }

                return true;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>