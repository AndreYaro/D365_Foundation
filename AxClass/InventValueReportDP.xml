<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventValueReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Handles extraction of data for the <c>InventValueReport</c> report.
/// </summary>
[
SRSReportQueryAttribute(queryStr(InventValueReportTmpLine)),
SRSReportParameterAttribute(classStr(InventValueReportContract))
]
class InventValueReportDP extends SrsReportDataProviderPreProcess
{
    InventValueReportContract inventValueReportContract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventValueReportTmpLedgerLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches data from the <c>InventValueReportTmpLedgerLine</c> table.
    /// </summary>
    /// <returns>
    ///    The required report data.
    /// </returns>
    [
    SRSReportDataSetAttribute(tableStr(InventValueReportTmpLedgerLine))
    ]
    public InventValueReportTmpLedgerLine getInventValueReportTmpLedgerLine()
    {
        InventValueReportTmpLedgerLine inventValueReportTmpLedgerLine;

        inventValueReportTmpLedgerLine.setConnection(this.parmUserConnection());

        select inventValueReportTmpLedgerLine;
        return inventValueReportTmpLedgerLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInventValueReportTmpLedgerLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process all <c>InventValueReportTmpLedgerLine</c> records for this report by
    /// updating their <c>CreatedTransactionId</c> field so that it can be picked up by
    /// the report query.
    /// </summary>
    private void processInventValueReportTmpLedgerLine()
    {
        Connection  connection  = this.parmUserConnection();
        Statement   statement   = connection.createStatement();

        str sqlStatement = this.getSqlStatementForLedgerLineRecordsUpdate();
        new SqlStatementExecutePermission(sqlStatement).assert();

        statement.executeUpdateWithParameters(sqlStatement, SqlParams::create());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSqlStatementForLedgerLineRecordsUpdate</Name>
				<Source><![CDATA[
    private str getSqlStatementForLedgerLineRecordsUpdate()
    {
        SysDictTable    dictInventValueReportTmpLedgerLine = new SysDictTable(tableNum(InventValueReportTmpLedgerLine));
        SqlSystem       sqlSystem = new SqlSystem();

        /*
        update INVENTVALUEREPORTTMPLEDGERLINETMP
        set CREATEDTRANSACTIONID = <this.parmCreatedTransactionId()>
        where INVENTVALUEREPORTTMPLEDGERLINETMP.TRANSACTIONID = <this.parmCreatedTransactionId()>
        and INVENTVALUEREPORTTMPLEDGERLINETMP.DATAAREAID = curext()
        and INVENTVALUEREPORTTMPLEDGERLINETMP.PARTITION = getCurrentPartitionRecId()
        */

        str sqlUpdateInventValueReportTmpLedgerLine;
        sqlUpdateInventValueReportTmpLedgerLine += strFmt('UPDATE %1 SET %2 = %3 ',
                                                            dictInventValueReportTmpLedgerLine.name(DbBackend::Sql),
                                                            dictInventValueReportTmpLedgerLine.fieldName(fieldnum(InventValueReportTmpLedgerLine, CreatedTransactionId), DbBackend::Sql),
                                                            sqlSystem.sqlLiteral(this.parmCreatedTransactionId()));

        sqlUpdateInventValueReportTmpLedgerLine += strFmt('WHERE %1.%2 = %3 ',
                                                            dictInventValueReportTmpLedgerLine.name(DbBackend::Sql),
                                                            dictInventValueReportTmpLedgerLine.fieldName(fieldnum(InventValueReportTmpLedgerLine, TransactionId), DbBackend::Sql),
                                                            sqlSystem.sqlLiteral(this.parmCreatedTransactionId()));

        sqlUpdateInventValueReportTmpLedgerLine += strFmt('AND %1.%2 = %3 ',
                                                            dictInventValueReportTmpLedgerLine.name(DbBackend::Sql),
                                                            dictInventValueReportTmpLedgerLine.fieldName(fieldNum(InventValueReportTmpLedgerLine, DataAreaId), DbBackend::Sql),
                                                            sqlSystem.sqlLiteral(curExt()));

        sqlUpdateInventValueReportTmpLedgerLine += strFmt('AND %1.%2 = %3 ',
                                                            dictInventValueReportTmpLedgerLine.name(DbBackend::Sql),
                                                            dictInventValueReportTmpLedgerLine.fieldName(fieldNum(InventValueReportTmpLedgerLine, Partition), DbBackend::Sql),
                                                            sqlSystem.sqlLiteral(getCurrentPartitionRecId()));

        return sqlUpdateInventValueReportTmpLedgerLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventValueReportTmpLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches data from the <c>inventValueReportTmpLine</c> table.
    /// </summary>
    /// <returns>
    ///    The required report data.
    /// </returns>
    [
    SRSReportDataSetAttribute(tableStr(InventValueReportTmpLine))
    ]
    public InventValueReportTmpLine getInventValueReportTmpLine()
    {
        InventValueReportTmpLine inventValueReportTmpLine;

        inventValueReportTmpLine.setConnection(this.parmUserConnection());

        select inventValueReportTmpLine;
        return inventValueReportTmpLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInventValueReportTmpLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process all <c>inventValueReportTmpLine</c> records for this report by
    /// summing them up and re-inserting them, thus updating their <c>CreatedTransactionId</c>
    /// field so that it can be picked up by the report query.
    /// </summary>
    protected void processInventValueReportTmpLine()
    {
        InventValueReportTmpLine inventValueReportTmpLineReport;
        InventValueReportTmpLine inventValueReportTmpLine;

        inventValueReportTmpLine.setConnection(this.parmUserConnection());
        inventValueReportTmpLineReport.setConnection(this.parmUserConnection());

        // <GEERU>
        #InventDimDevelop
        // </GEERU>

        #LOCALMACRO.GroupByFields
            ResourceType,
            ResourceGroupId,
            ResourceId,
            configId,
            InventSizeId,
            InventColorId,
            InventStyleId,
            InventVersionId,
            InventSiteId,
            InventLocationId,
            WMSLocationId,
            InventBatchId,
            InventSerialId,
            // <GEERU>
            InventGTDId_RU,
            InventProfileId_RU,
            // </GEERU>
            InventOwnerId_RU,
            InventDimension1,
            InventDimension2,
            InventDimension3,
            InventDimension4,
            InventDimension5,
            InventDimension6,
            InventDimension7,
            InventDimension8,
            InventDimension9,
            InventDimension10,
            InventDimension11,
            InventDimension12,
            LineType,
            TransBeginTime,
            Voucher,
            TransDate,
            InventTransId,
            ReferenceCategory,
            Reference
        #ENDMACRO

        ttsbegin;

        insert_recordset inventValueReportTmpLineReport
        (
            #GroupByFields,
            InventoryFinancialQty,
            InventoryFinancialAmount,
            InventoryPhysicalPostedQty,
            InventoryPhysicalPostedAmount,
            InventoryPhysicalNonPostedQty,
            InventoryPhysicalNonPostedAmount,
            WIPPhysicalPostedQty,
            WIPPhysicalPostedAmount,
            WIPPhysicalNonPostedQty,
            WIPPhysicalNonPostedAmount,
            DeferredCOGSPhysicalPostedQty,
            DeferredCOGSPhysicalPostedAmount,
            DeferredCOGSPhysicalNonPostedQty,
            DeferredCOGSPhysicalNonPostedAmount,
            COGSFinancialQty,
            COGSFinancialAmount,
            PLFinancialQty,
            PLFinancialAmount
        )
        select #GroupByFields,
               sum(InventoryFinancialQty),
               sum(InventoryFinancialAmount),
               sum(InventoryPhysicalPostedQty),
               sum(InventoryPhysicalPostedAmount),
               sum(InventoryPhysicalNonPostedQty),
               sum(InventoryPhysicalNonPostedAmount),
               sum(wipPhysicalPostedQty),
               sum(wipPhysicalPostedAmount),
               sum(wipPhysicalNonPostedQty),
               sum(wipPhysicalNonPostedAmount),
               sum(DeferredCOGSPhysicalPostedQty),
               sum(DeferredCOGSPhysicalPostedAmount),
               sum(DeferredCOGSPhysicalNonPostedQty),
               sum(DeferredCOGSPhysicalNonPostedAmount),
               sum(cogsFinancialQty),
               sum(cogsFinancialAmount),
               sum(plFinancialQty),
               sum(plFinancialAmount)
        from inventValueReportTmpLine
        group by #GroupByFields
            where inventValueReportTmpLine.TransactionId == this.parmCreatedTransactionId();

        // Cleanup the data
        delete_from inventValueReportTmpLine
            where inventValueReportTmpLine.TransactionId == this.parmCreatedTransactionId();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic. For this report only data in pseudo-temporary tables are
    ///    transferred to SSRS.
    /// </summary>
    public void processReport()
    {
        InventValueReportInit inventValueReportInit = InventValueReportInit::construct();

        inventValueReportContract = this.parmDataContract() as InventValueReportContract;

        this.parmCreatedTransactionId(appl.curTransactionId(true));

        inventValueReportInit.parmInventValueReportContract(inventValueReportContract);
        inventValueReportInit.parmQuery(this.parmQuery());
        inventValueReportInit.parmUserConnection(this.parmUserConnection());
        inventValueReportInit.parmCreatedTransactionId(this.parmCreatedTransactionId());
        inventValueReportInit.run();

        CostManagementInstrumentationLogger instrumentationLogger = CostManagementInstrumentationLogger::createLogger(classStr(InventValueReportDP));
        using (var activityTmpLedgerLineContext = instrumentationLogger.inventoryValueReportActivity().processReport(this.parmCreatedTransactionId(), methodStr(InventValueReportDP, processInventValueReportTmpLedgerLine)))
        {
            this.processInventValueReportTmpLedgerLine();
        }

        using (var activityTmpLineContext = instrumentationLogger.inventoryValueReportActivity().processReport(this.parmCreatedTransactionId(), methodStr(InventValueReportDP, processInventValueReportTmpLine)))
        {
            this.processInventValueReportTmpLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventValueReportDP construct()
    {
        return new InventValueReportDP();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>