<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransDateVoucherContract_FR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerTransDateVoucherContract_FR</c> class is the RDL contract class for <c>LedgerTransDateVoucher_FR</c> report.
/// </summary>
public class LedgerTransDateVoucherContract_FR implements SysOperationValidatable
{
    FromDate            fromDate;
    ToDate              toDate;
    SortDateVoucher_FR  sorting;
    str 30              periodStatus;
    boolean             totalPrVoucher;
    int                 totalPrXDigits;
    Range               rangeVoucher;
    CurrentOperationsTaxInclAll_FR  postingLayerFilter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute(identifierStr(FromDate))
    ]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodStatus</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute(identifierStr(PeriodStatus))
    ]
    public str 30 parmPeriodStatus(str 30 _periodStatus = periodStatus)
    {
        periodStatus = _periodStatus;
        return periodStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingLayerFilter</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute(identifierStr(PostingLayerFilter)),
        SysOperationLabelAttribute(literalstr("@SYS10925"))
    ]
    public CurrentOperationsTaxInclAll_FR parmPostingLayerFilter(CurrentOperationsTaxInclAll_FR _postingLayerFilter = postingLayerFilter)
    {
        postingLayerFilter = _postingLayerFilter;
        return postingLayerFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRangeVoucher</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute(identifierStr(RangeVoucher)),
        SysOperationLabelAttribute(literalStr("@SYS77934"))
    ]
    public Range parmRangeVoucher(Range _rangeVoucher = rangeVoucher)
    {
        rangeVoucher = _rangeVoucher;
        return rangeVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSorting</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute(identifierStr(Sorting)),
        SysOperationLabelAttribute(literalStr("@SYS4138"))
    ]
    public SortDateVoucher_FR parmSorting(SortDateVoucher_FR _sorting = sorting)
    {
        sorting = _sorting;
        return sorting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute(identifierStr(ToDate))
    ]
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalPrVoucher</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute(identifierStr(TotalPrVoucher)),
        SysOperationLabelAttribute(literalStr("@SYS77883"))
    ]
    public boolean parmTotalPrVoucher(boolean _totalPrVoucher = totalPrVoucher)
    {
        totalPrVoucher = _totalPrVoucher;
        return totalPrVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalPrXDigits</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute(identifierStr(TotalPrXDigits)),
        SysOperationLabelAttribute(literalStr("@SYS77887"))
    ]
    public int parmTotalPrXDigits(int _totalPrXDigits = totalPrXDigits)
    {
        totalPrXDigits = _totalPrXDigits;
        return totalPrXDigits;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the report contract.
    /// </summary>
    /// <returns>
    /// true if the report contract is valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean ret = true;

        if (this.parmFromDate() == dateNull() || this.parmToDate() == dateNull())
        {
            if (this.parmFromDate() == dateNull())
            {
                ret = checkFailed("@SYS39559");
            }

            if (this.parmToDate() == dateNull())
            {
                ret = checkFailed("@SYS39563");
            }
        }

        else
        {
            if (this.parmFromDate() > this.parmToDate())
            {
                ret = checkFailed("@SYS16982");
            }

            if (this.parmSorting() == SortDateVoucher_FR::SortDate && (this.parmTotalPrVoucher() || this.parmTotalPrXDigits() != 0))
            {
                ret = checkFailed("@SYS77935");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>