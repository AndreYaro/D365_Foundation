<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgPayStatAdjustBalance</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgPayStatAdjustBalance</c> class is used to create adjustments on payroll statistics.
/// </summary>
/// <remarks>
///    <list type="bullet">
///       <item>
///          <description>
///             Opening balance: set the adjustment field of the <c>JmgPayStatTrans</c> records so that adding the
///             opening balance and the adjustment is equal to the entered value.
///          </description>
///       </item>
///       <item>
///          <description>
///             Balance: set the adjustment field of the <c>JmgPayStatTrans</c> records so that adding the opening
///             balance, change, and adjustment is equal to the entered value.
///          </description>
///       </item>
///       <item>
///          <description>
///             Adjustment: set the adjustment field of the <c>JmgPayStatTrans</c> records to the entered value.
///          </description>
///       </item>
///    </list>
/// </remarks>
class JmgPayStatAdjustBalance extends RunBaseBatch implements BatchRetryable
{
    JmgPayStatGroupId               payStatGroupId;
    JmgPayCostType                  payCostType;
    JmgDate                         payDate;
    JmgPayStatBalanceAdjustmentType type;
    JmgTimeString                   value;

    DialogField                     dfPayStatGroupId;
    DialogField                     dfPayCostType;
    DialogField                     dfPayDate;
    DialogField                     dfType;
    DialogField                     dfValue;

    QueryRun                        queryRun;

    private container               packedQuery;

    #DEFINE.Version1(1)

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        payStatGroupId,
        payCostType,
        payDate,
        type,
        value
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an adjustment for the specified worker, such that the entered value is equal to the balance.
    /// </summary>
    /// <param name="_jmgEmployee">
    ///    A <c>JmgEmployee</c> record, which refers to the employee for which to create an adjustment.
    /// </param>
    private void adjustBalance(JmgEmployee _jmgEmployee)
    {
        JmgPayStatTrans payStatTrans;
        JmgSeconds      valueSeconds;
        boolean         adjustmentCreated;
        adjustmentCreated   = false;
        valueSeconds = JmgProfileSeconds::unFormattedSeconds(value, JmgSecondPresentationEnum::Centitime);
        while select forupdate payStatTrans
            where payStatTrans.PayStatGroupId   == payStatGroupId       &&
                  payStatTrans.PayCostType      == payCostType          &&
                  payStatTrans.Worker           == _jmgEmployee.Worker  &&
                  payStatTrans.FromDate         <= payDate              &&
                  payStatTrans.ToDate           >= payDate
        {
            payStatTrans.Adjustment = valueSeconds - payStatTrans.PaySeconds + payStatTrans.Adjustment;
            payStatTrans.update();
            adjustmentCreated       = true;
        }

        if (!adjustmentCreated)
        {
            payStatTrans            = this.createEmpty(_jmgEmployee);
            payStatTrans.Adjustment = valueSeconds - payStatTrans.PaySeconds + payStatTrans.Adjustment;
            payStatTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustOpeningBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an adjustment for the specified worker, such that the entered value is equal to the opening
    ///    balance.
    /// </summary>
    /// <param name="_jmgEmployee">
    ///    A <c>JmgEmployee</c> record, which refers to the employee for which to create an adjustment.
    /// </param>
    private void adjustOpeningBalance(JmgEmployee _jmgEmployee)
    {
        JmgPayStatTrans         payStatTrans;
        JmgSeconds              valueSeconds;
        boolean                 adjustmentCreated;
        valueSeconds        = JmgProfileSeconds::unFormattedSeconds(value, JmgSecondPresentationEnum::Centitime);
        adjustmentCreated   = false;
        while select forupdate payStatTrans
            where payStatTrans.PayStatGroupId   == payStatGroupId       &&
                  payStatTrans.PayCostType      == payCostType          &&
                  payStatTrans.Worker           == _jmgEmployee.Worker  &&
                  payStatTrans.FromDate         <= payDate              &&
                  payStatTrans.ToDate           >= payDate
        {
            payStatTrans.Adjustment = valueSeconds - payStatTrans.OpeningBalance;
            payStatTrans.update();
            adjustmentCreated = true;
        }

        if (!adjustmentCreated)
        {
            payStatTrans    = this.createEmpty(_jmgEmployee);
            payStatTrans.Adjustment = valueSeconds - payStatTrans.OpeningBalance;
            payStatTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an empty payroll transaction for the specified worker.
    /// </summary>
    /// <param name="_jmgEmployee">
    ///    A <c>JmgEmployee</c> record, which refers to the employee for which to insert a payroll transaction.
    /// </param>
    /// <returns>
    ///    The inserted payroll transaction.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The period does not contain an interval, which covers the specified date.
    /// </exception>
    private JmgPayStatTrans createEmpty(JmgEmployee _jmgEmployee)
    {
        JmgPayStatTrans ret;
        ProjPeriodLine  projPeriodLine;

        projPeriodLine = ProjPeriodLine::findFromPeriod(JmgPayStatConfig::find(payStatGroupId, payCostType).ProjPeriodId, payDate);

        if (projPeriodLine)
        {
            ret.PayStatGroupId = payStatGroupId;
            ret.PayCostType    = payCostType;
            ret.FromDate       = projPeriodLine.PeriodFrom;
            ret.ToDate         = projPeriodLine.PeriodTo;
            ret.Worker         = _jmgEmployee.Worker;
            ret.OpeningBalance = 0;
            ret.Adjustment     = 0;
            ret.PaySeconds     = 0;
            ret.insert();
        }
        else
        {
            throw error(strfmt("@SYS39744", JmgPayStatConfig::find(payStatGroupId, payCostType).ProjPeriodId, date2StrUsr(payDate, DateFlags::FormatAll)));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <param name="dialog">
    ///    An already initialized instance of the <c>DialogRunBase</c> class; optional.
    /// </param>
    /// <param name="forceOnClient">
    ///    A Boolean value that specifies whether the dialog must be created on the client; optional.
    /// </param>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        Dialog ret = this.dialogInternal(dialog, forceOnClient);

        ret.caption("@SYS40024");

        dfPayStatGroupId    = ret.addField(extendedtypestr(JmgPayStatGroupId));
        dfPayCostType       = ret.addField(extendedtypestr(JmgPayCostType));
        dfPayDate           = ret.addField(extendedtypestr(JmgDate));
        dfType              = ret.addField(enumstr(JmgPayStatBalanceAdjustmentType));
        dfValue             = ret.addField(extendedtypestr(JmgTimeString), "@SYS11762");

        dfPayStatGroupId.control().mandatory(true);
        dfPayCostType.control().mandatory(true);
        dfPayDate.control().mandatory(true);

        dfPayStatGroupId.value(payStatGroupId);
        dfPayCostType.value(payCostType);
        dfPayDate.value(payDate);
        dfType.value(type);
        dfValue.value(value);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS40024";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the values that are entered by the user.
    /// </summary>
    /// <returns>
    ///    true if validation is successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method is called after the dialog is closed. When you inherit from this method, always
    ///    remember to call the <c>super</c> method.
    /// </remarks>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        payStatGroupId  = dfPayStatGroupId.value();
        payCostType     = dfPayCostType.value();
        payDate         = dfPayDate.value();
        type            = dfType.value();
        value           = dfValue.value();

        if (ret && !JmgPayStatConfig::find(payStatGroupId, payCostType))
        {
            ret = checkFailed(strfmt("@SYS99597", payCostType, payStatGroupId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        Query                   q;
        QueryBuildDataSource    qbds;

        super();

        q = new Query();
        qbds = q.addDataSource(tablenum(JmgEmployee));
        qbds.addRange(fieldnum(JmgEmployee, Worker));
        qbds.addRange(fieldnum(JmgEmployee, CalculateGroupId));
        qbds.addRange(fieldnum(JmgEmployee, ApproveGroupId));
        qbds.addRange(fieldnum(JmgEmployee, Active)).value(queryValue(NoYes::Yes));
        queryRun = new QueryRun(q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container ret = [#CurrentVersion, #CurrentList];
        ret = this.appendVariableToPack(ret, varStr(packedQuery), queryRun.pack());
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendVariableToPack</Name>
				<Source><![CDATA[
    private container appendVariableToPack(container _pack, str _variableName, anytype _value)
    {
        XppPrePostArgs packArgs = this.createXppPrePostArgsWithPack(_pack);
        SysPackExtensions::pack(packArgs, this.getVariablePackKey(_variableName), [_value]);
        return packArgs.getReturnValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXppPrePostArgsWithPack</Name>
				<Source><![CDATA[
    private XppPrePostArgs createXppPrePostArgsWithPack(container _pack)
    {
        XppPrePostArgs prePostArgs = new XppPrePostArgs(_pack, '',  XppEventHandlerCalledWhen::Post);
        prePostArgs.setReturnValue(_pack);
        return prePostArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVariablePackKey</Name>
				<Source><![CDATA[
    private ClassName getVariablePackKey(str _variableName)
    {
        return classStr(JmgPayStatAdjustBalance) + '.' + _variableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    /// <remarks>
    ///    Based on the selected type of adjustment, one of the following methods is called:
    ///    <list type="number">
    ///       <item>
    ///          <description>
    ///             The <c>JmgPayStatAdjustBalance.adjustBalance</c> or <c>JmgPayStatBalanceAdjustmentType::Balance</c>
    ///             method.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             The <c>JmgPayStatAdjustBalance.adjustOpeningBalance</c> or
    ///             <c>JmgPayStatBalanceAdjustmentType::OpeningBalance</c> method.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             The <c>JmgPayStatAdjustBalance.setAdjustment</c> or
    ///             <c>JmgPayStatBalanceAdjustmentType::Adjustment</c> method.
    ///          </description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public void run()
    {
        super();
        JmgEmployee jmgEmployee;

        using(var activityContext = JmgInstrumentationLogger::createLogger(classStr(JmgPayStatAdjustBalance)).maintainPayroll().adjustPayrollStatistics())
        {
            QueryRun    qr = this.queryRun();

            ttsbegin;
            while (qr.next())
            {
                jmgEmployee = qr.get(tablenum(JmgEmployee));

                switch (type)
                {
                    case JmgPayStatBalanceAdjustmentType::OpeningBalance:
                        this.adjustOpeningBalance(jmgEmployee);
                        break;
                    case JmgPayStatBalanceAdjustmentType::Balance:
                        this.adjustBalance(jmgEmployee);
                        break;
                    case JmgPayStatBalanceAdjustmentType::Adjustment:
                        this.setAdjustment(jmgEmployee);
                        break;
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an adjustment for the specified worker, such that the entered value is equal to the
    ///    adjustment.
    /// </summary>
    /// <param name="_jmgEmployee">
    ///    A <c>JmgEmployee</c> record that refers to the employee for which to create an adjustment.
    /// </param>
    private void setAdjustment(JmgEmployee _jmgEmployee)
    {
        JmgPayStatTrans payStatTrans;
        JmgSeconds      valueSeconds;
        boolean         adjustmentCreated;
        adjustmentCreated   = false;
        valueSeconds = JmgProfileSeconds::unFormattedSeconds(value, JmgSecondPresentationEnum::Centitime);
        while select forupdate payStatTrans
            where payStatTrans.PayStatGroupId   == payStatGroupId       &&
                  payStatTrans.PayCostType      == payCostType          &&
                  payStatTrans.Worker           == _jmgEmployee.Worker  &&
                  payStatTrans.FromDate         <= payDate              &&
                  payStatTrans.ToDate           >= payDate
        {
            payStatTrans.Adjustment = valueSeconds;
            payStatTrans.update();
            adjustmentCreated = true;
        }
        if (!adjustmentCreated)
        {
            payStatTrans            = this.createEmpty(_jmgEmployee);
            payStatTrans.Adjustment = valueSeconds;
            payStatTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>QueryRun</c> object.If you change the return value to false the button will no
    ///    longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        boolean ret;

        ret = true;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean ret;
        Integer version;

        version = conpeek(packedClass, 1);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                packedQuery = this.extractPackedVariable(packedClass, varStr(packedQuery));
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;
            case #Version1:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extractPackedVariable</Name>
				<Source><![CDATA[
    private anytype extractPackedVariable(container _pack, str _variableName)
    {
        anytype unpackedValue;
        [unpackedValue] = SysPackExtensions::unpack(this.createXppPrePostArgsWithPack(_pack), this.getVariablePackKey(_variableName));
        return unpackedValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        JmgPayStatAdjustBalance jmgPayStatAdjustBalance;
        jmgPayStatAdjustBalance = new JmgPayStatAdjustBalance();

        if (jmgPayStatAdjustBalance.prompt())
        {
            jmgPayStatAdjustBalance.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>