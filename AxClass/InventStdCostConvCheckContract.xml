<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStdCostConvCheckContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data Contract class for InventStdCostConvCheck SSRS report
/// </summary>
/// <remarks>
/// This is the Data Contract class for the InventStdCostConvCheck SSRS Report.
/// </remarks>
[
    DataContractAttribute,
    SysOperationContractProcessingAttribute(classStr(InventStdCostConvCheckUIBuilder), SysOperationDataContractProcessingMode::CreateSeparateUIBuilderForEachContract),
    SysOperationGroupAttribute('DateGroup', "@SYS119346", '1'),
    SysOperationGroupAttribute('CheckGroup', "@SYS24056", '2'),
    SysOperationGroupAttribute('UpdateGroup', "@SYS119924", '3')
]
public class InventStdCostConvCheckContract implements SysOperationValidatable
{
    InventStdCostConvEndDate    conversionDate;
    boolean                     item             = true;
    boolean                     modelGroup       = true;
    boolean                     standardCost     = true;
    boolean                     updateStatus     = true;
    RecId                       inventStdCostConvRecId;
    InventTransCurrency_RU      inventTransCurrency;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCheckMap</Name>
				<Source><![CDATA[
    public Map parmCheckMap()
    {
        Map checkMap = new Map(Types::Integer, Types::Enum);

        checkMap.insert(enum2int(InventStdCostConvCheckType::Item), item);
        checkMap.insert(enum2int(InventStdCostConvCheckType::ModelGroup), modelGroup);
        checkMap.insert(enum2int(InventStdCostConvCheckType::StandardCost), standardCost);

        return checkMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConversionDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ConversionDate.
    /// </summary>
    /// <param name="_conversionDate">
    /// The new value of the datacontract parameter ConversionDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ConversionDate
    /// </returns>
    [
        DataMemberAttribute('ConversionDate'),
        SysOperationLabelAttribute(literalStr("@SYS119338")),
        SysOperationGroupMemberAttribute('DateGroup')
    ]
    public InventStdCostConvEndDate parmConversionDate(InventStdCostConvEndDate _conversionDate = conversionDate)
    {
        conversionDate = _conversionDate;
        return conversionDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventStdCostConvRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter InventStdCostConvRecId.
    /// </summary>
    /// <param name="_inventStdCostConvRecId">
    /// The new value of the datacontract parameter InventStdCostConvRecId; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter InventStdCostConvRecId
    /// </returns>
    [
        DataMemberAttribute('InventStdCostConvRecId'),
        SysOperationLabelAttribute(literalStr("@SYS3676"))
    ]
    public RecId parmInventStdCostConvRecId(RecId _inventStdCostConvRecId = inventStdCostConvRecId)
    {
        inventStdCostConvRecId = _inventStdCostConvRecId;
        return inventStdCostConvRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter InventTransCurrency.
    /// </summary>
    /// <param name="_inventTransCurrency">
    /// The new value of the datacontract parameter InventTransCurrency; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter InventTransCurrency
    /// </returns>
    [
        DataMemberAttribute('InventTransCurrency'),
        SysOperationLabelAttribute(literalStr("@SYS7572"))
    ]
    public InventTransCurrency_RU parmInventTransCurrency(InventTransCurrency_RU _inventTransCurrency = inventTransCurrency)
    {
        inventTransCurrency = _inventTransCurrency;
        return inventTransCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Item.
    /// </summary>
    /// <param name="_item">
    /// The new value of the datacontract parameter Item; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter Item
    /// </returns>
    [
        DataMemberAttribute('Item'),
        SysOperationLabelAttribute(literalStr("@SYS7407")),
        SysOperationDisplayOrderAttribute('1'),
        SysOperationGroupMemberAttribute('CheckGroup')
    ]
    public boolean parmItem(boolean _item = item)
    {
        item = _item;
        return item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModelGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ModelGroup.
    /// </summary>
    /// <param name="_modelGroup">
    /// The new value of the datacontract parameter ModelGroup; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ModelGroup
    /// </returns>
    [
        DataMemberAttribute('ModelGroup'),
        SysOperationLabelAttribute(literalStr("@SYS119933")),
        SysOperationDisplayOrderAttribute('2'),
        SysOperationGroupMemberAttribute('CheckGroup')
    ]
    public boolean parmModelGroup(boolean _modelGroup = modelGroup)
    {
        modelGroup = _modelGroup;
        return modelGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStandardCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter StandardCost.
    /// </summary>
    /// <param name="_standardCost">
    /// The new value of the datacontract parameter StandardCost; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter StandardCost
    /// </returns>
    [
        DataMemberAttribute('StandardCost'),
        SysOperationLabelAttribute(literalStr("@SYS104353")),
        SysOperationDisplayOrderAttribute('3'),
        SysOperationGroupMemberAttribute('CheckGroup')
    ]
    public boolean parmStandardCost(boolean _standardCost = standardCost)
    {
        standardCost = _standardCost;
        return standardCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter UpdateStatus.
    /// </summary>
    /// <param name="_updateStatus">
    /// The new value of the datacontract parameter UpdateStatus; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter UpdateStatus
    /// </returns>
    [
        DataMemberAttribute('UpdateStatus'),
        SysOperationLabelAttribute(literalStr("@SYS119925")),
        SysOperationGroupMemberAttribute('UpdateGroup')
    ]
    public boolean parmUpdateStatus(boolean _updateStatus = updateStatus)
    {
        updateStatus = _updateStatus;
        return updateStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the report contract parameters.
    /// </summary>
    /// <returns>
    ///    true if check pass; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean         isValid = true;

        if (!conversionDate)
        {
            isValid = checkFailed("@SYS119927");
        }
        else
        {
            if (!InventStdCostConv::findTransitionEndDate(conversionDate).RecId)
            {
                isValid = checkFailed("@SYS119928");
            }
        }

        if (updateStatus)
        {
            MapEnumerator mapEnumerator = this.parmCheckMap().getEnumerator();
            while (mapEnumerator.moveNext())
            {
                if (!mapEnumerator.currentValue())
                {
                    isValid = checkFailed("@SYS119929");
                    break;
                }
            }
        }

        if (!updateStatus && Box::yesNo("@SCM:StdCostConversionUpdateStatusNotEnabledConfirmation", dialogButton::Yes) == dialogButton::No)
        {
            return false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventStdCostConvCheckContract construct()
    {
        return new InventStdCostConvCheckContract();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>