<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransPOCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>ReqTransPOCreate</c> handles creation of requirement transactions for a given planned order.
/// </summary>
class ReqTransPOCreate
{
    boolean     alwaysCreateBOM;
    boolean     alwaysCreateRoute;

    BOMDependencyManager    bomDependencyManager;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertFromReqPo</Name>
				<Source><![CDATA[
/// <summary>
    ///    Initializes and inserts a <c>ReqTrans</c> record.
    /// </summary>
    /// <param name="_reqTransPO">
    ///    The <c>ReqTrans</c> table buffer to be used for insertion.
    /// </param>
    /// <param name="_reqPO">
    ///    A <c>ReqPO</c> record.
    /// </param>
    /// <param name="_usingThreads">
    ///    A Boolean value that indicates whether threads are used.
    /// </param>
    /// <param name="_reqPlanData">
    ///    A <c>ReqPlanData</c> object that contains cached data; optional.
    /// </param>
    /// <param name="_setupDim">
    ///    A <c>ReqSetupDim</c> object that holds master planning settings for a specific item and coverage
    ///    dimension; optional.
    /// </param>
    /// <param name="_scheduleOrdersList">
    ///    A <c>List</c> to which new orders are to be added for later scheduling; optional.
    /// </param>
    /// <param name="_reqCalcRecordCacheInventDim">
    /// A <c>ReqCalcRecordCacheInventDim</c> object used to cache invententory dimension information.
    /// </param>
    /// <param name="_reqCalcRecordCacheUnitOfMeasure">
    /// A <c>ReqCalcRecordCacheUnitOfMeasure</c> object used to cache unit of measure information.
    /// </param>
    /// <param name="_issue">
    /// A <c>ReqTrans</c> record that that holds the related issue requirement; optional.
    /// </param>
    /// <param name="_coInventDim">
    /// A <c>Co-product dimension</c> related co-product item dimension that needs to be added; optional.
    /// </param>
    /// <param name="_coItemId">
    /// A <c>Co-product</c> related co-product item that needs to be added; optional.
    /// </param>
    /// <remarks>
    ///    The initialization is done from the parsed <c>ReqPO</c> record. Related records can be created
    ///    after the insert. This depends of the <c>RefType</c>.
    /// </remarks>
    public void insertFromReqPo(
        ReqTrans                        _reqTransPO,
        ReqPO                           _reqPO,
        boolean                         _usingThreads,
        ReqPlanData                     _reqPlanData                     = null,
        ReqSetupDim                     _setupDim                        = null,
        List                            _scheduleOrdersList              = null,
        ReqCalcRecordCacheInventDim     _reqCalcRecordCacheInventDim     = null,
        ReqCalcRecordCacheUnitOfMeasure _reqCalcRecordCacheUnitOfMeasure = null,
        ReqTrans                        _issue                           = null
        , InventDim                     _coInventDim                     = null
        , ItemId                        _coItemId                        = ''
        )
    {
        WrkCtrScheduler_Req scheduleReq;
        WrkCtrParmSchedule  parmSchedule;
        TransDate           minimumSchedDate;

        if (_reqPlanData == null)
        {
            _reqPlanData = ReqPlanData::newReqPlanVersion(_reqPO.PlanVersion);
        }

        if (_setupDim == null)
        {
            _setupDim = _reqPlanData.newReqSetupDim(_reqPlanData.newReqSetup(_reqPO.ItemId),_reqPO.CovInventDimId);
        }

        _reqTransPO.initFromSetupDim(_setupDim);
        _reqTransPO.initFromReqPo(_reqPO);
        if (_reqPlanData.pdsUseShelfLife())
        {
            _reqTransPO.pdsSetShelfLifeFields();
        }

        _reqTransPO.insert(_reqPlanData);

        switch (_reqPO.supplyPrinciple(_reqPlanData))
        {
            case ReqSupplyPrinciple::Conversion:
                if (alwaysCreateRoute || _reqPlanData.mustTransBeScheduled(_setupDim,_reqPO))
                {
                    _reqPO.setRouteCreated(true);
                    _reqTransPO.createRoute(_reqPlanData);
                    _reqPO.doUpdate();
                }

                if (alwaysCreateBOM || _reqPlanData.mustTransBeExploded(_setupDim,_reqPO))
                {
                    _reqPO.setBOMCreated(true);
                    ReqBOMCreate::newReqTrans(_reqTransPO, _reqPO,_reqPlanData, _issue, bomDependencyManager).createBOM(_reqCalcRecordCacheInventDim,
                                                                                                  _reqCalcRecordCacheUnitOfMeasure);
                    _reqPO.doUpdate();
                }

                _reqTransPO.pmfCreateCoProducts(
                        _reqPO,
                        _reqPlanData,
                        _coInventDim,
                        _coItemId);

                if (ReqTrans::refTypeCanReserveWorkCenter(_reqTransPO.RefType))
                {
                    if (_scheduleOrdersList != null)
                    {
                        _scheduleOrdersList.addEnd(_reqTransPO.RefId);
                    }
                    else
                    {
                        if ( _reqPlanData.covTimeFenceSchedBack() > 0)
                        {
                            minimumSchedDate = _reqTransPO.ReqDate - _reqPlanData.covTimeFenceSchedBack();

                            if (minimumSchedDate < _reqPlanData.todaysdate())
                            {
                                minimumSchedDate = _reqPlanData.todaysdate();
                            }
                        }
                        else
                        {
                            minimumSchedDate = _reqPlanData.todaysdate();
                        }

                        scheduleReq = WrkCtrScheduler_Req::newCheckLockingTTSLevel(false);

                        // add the order to be scheduled
                        parmSchedule = WrkCtrParmSchedule::newReqTransCoverage(_reqTransPO,_reqPO,_reqPlanData,false, _usingThreads, minimumSchedDate, _setupDim);
                        scheduleReq.addWrkCtrParmSchedule(parmSchedule);

                        // schedule
                        scheduleReq.run();

                        scheduleReq.dispose();
                    }
                }

                break;

            case ReqSupplyPrinciple::Transfer :
                this.createTransferDemandForPlannedTransferOrder(_reqTransPO, _reqPO, _reqPlanData);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransferDemandForPlannedTransferOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a derived requirement transaction for the planned transfer order.
    /// </summary>
    /// <param name="_reqTransPO">
    /// The <c>ReqTrans</c> table buffer to be used for insertion.
    /// </param>
    /// <param name="_reqPO">
    /// A <c>ReqPO</c> record that represents a planned transfer order.
    /// </param>
    /// <param name="_reqPlanData">
    /// An instance of the <c>ReqPlanData</c> class that holds master scheduling settings.
    /// </param>
    /// <param name="_fromInventLocationId">
    /// A string value that holds the from location ID; optional
    /// </param>
    protected void createTransferDemandForPlannedTransferOrder(
        ReqTrans            _reqTransPO,
        ReqPO               _reqPO,
        ReqPlanData         _reqPlanData,
        InventLocationId    _fromInventLocationId   = '')
    {
        _reqTransPO.createTransferDemand(_reqPO, _reqPlanData, _fromInventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAlwaysCreateBOM</Name>
				<Source><![CDATA[
        public boolean parmAlwaysCreateBOM(boolean _alwaysCreateBOM = alwaysCreateBOM)
    {
        alwaysCreateBOM = _alwaysCreateBOM;
        return alwaysCreateBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAlwaysCreateRoute</Name>
				<Source><![CDATA[
        public boolean parmAlwaysCreateRoute(boolean _alwaysCreateRoute = alwaysCreateRoute)
    {
        alwaysCreateRoute = _alwaysCreateRoute;
        return alwaysCreateRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static ReqTransPOCreate construct()
    {
        return new ReqTransPOCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMDependencyManager</Name>
				<Source><![CDATA[
    public BOMDependencyManager parmBOMDependencyManager(BOMDependencyManager _bomDependencyManager = bomDependencyManager)
    {
        bomDependencyManager = _bomDependencyManager;
        return bomDependencyManager;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>