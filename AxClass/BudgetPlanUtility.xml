<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanUtility</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// General utility methods used across the budget planning domain.
/// </summary>
public class BudgetPlanUtility
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>executeDirectSql</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the direct sql string by opening a new database connection.
    /// </summary>
    /// <param name = "_sqlToExecute">The sql string to execute on the server.</param>
    public static void executeDirectSql(str _sqlToExecute)
    {
        if (_sqlToExecute != BudgetPlanningConstants::emptyString)
        {
            Connection connection = new Connection();
            connection.ttsbegin();

            ExecutePermission permission = new ExecutePermission();
            permission.assert();

            Statement statement = connection.createStatement();
            statement.executeUpdateWithParameters(_sqlToExecute, SqlParams::create());
            statement.close();

            CodeAccessPermission::revertAssert();

            connection.ttscommit();
            connection.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSqlTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the database equivalent physical table name for the given table name.
    /// </summary>
    /// <param name = "_tableName">The name of the table the field belongs to.</param>
    /// <returns>The physical backend database table name equivalent.</returns>
    public static str getSqlTableName(TableName _tableName)
    {
        SysDictTable dictTable;
        TableId tableId = tableName2Id(_tableName);

        if (tableId)
        {
            dictTable = new SysDictTable(tableId);
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return dictTable.name(DbBackend::Sql);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds range criteria on the provided datasource and field.
    /// </summary>
    /// <param name = "_rangeValue">The range value.</param>
    /// <param name = "_rangeCriteria">The range criteria.</param>
    /// <param name = "_dataSourceName">The datasource name on which the range should be added.</param>
    /// <param name = "_fieldName">The field name on which the range should be added.</param>
    /// <returns> A <c>str</c> value of the range criteria. </returns>
    public static str addRangeCriteria(str _rangeValue, str _rangeCriteria, Name _dataSourceName, FieldName _fieldName)
    {
        str rangePlaceHolder = '(%1.%2 == "%3")';

        if (_rangeValue)
        {
            _rangeValue = strDel(_rangeValue, strlen(_rangeValue), 1);

            if (_rangeCriteria)
            {
                _rangeCriteria += BudgetPlanningConstants::OROperator + BudgetPlanningConstants::space;
            }

            List    rangesList = strSplit(_rangeValue, ',');
            Counter rangeCounter;

            ListEnumerator rangesListEnumerator = rangesList.getEnumerator();

            while (rangesListEnumerator.moveNext())
            {
                _rangeCriteria += strfmt(rangePlaceHolder, _dataSourceName, _fieldName, rangesListEnumerator.current());

                rangeCounter++;

                if (rangeCounter < rangesList.elements())
                {
                    _rangeCriteria += "|| ";
                }
            }
        }

        return _rangeCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableExistsAsChildDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a given table exists as a direct child of a given datasource.
    /// </summary>
    /// <param name = "_dataSource"> The <c>QueryBuildDataSource</c> object to check. </param>
    /// <param name = "_childTableId"> The <c>TableId</c> value of the table to search for. </param>
    /// <returns> True, if the table exists as a child datasource; otherwise, false. </returns>
    public static boolean tableExistsAsChildDataSource(QueryBuildDataSource _dataSource, TableId _childTableId)
    {
        int i,
            childDataSourceCount = _dataSource.childDataSourceCount();
        boolean tableExists;

        for (i = 1; i <= childDataSourceCount; i++)
        {
            if (_childTableId == _dataSource.childDataSourceNo(i).table())
            {
                tableExists = true;
                break;
            }
        }

        return tableExists;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>