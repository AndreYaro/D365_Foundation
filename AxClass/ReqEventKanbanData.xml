<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqEventKanbanData</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqEventKanbanData</c> class is a data carrier class that is used by the event kanban handling process.
/// </summary>
public class ReqEventKanbanData
{
    Kanban                          kanban;
    KanbanJob                       kanbanJob;
    KanbanRule                      kanbanRule;
    InventQty                       peggedQty;
    InventQty                       peggedQtyOriginal;
    InventTransOriginId             receiptInventTransOriginId;
    SourceDocumentLineRefRecId      receiptSourceDocumentLine;
    boolean                         canUpdate;
    boolean                         mustCancelBeforeUpdate;
    boolean                         cachedCanUpdate;
    boolean                         cachedMustCancelBeforeUpdate;
    boolean                         cachedKanbanRule;
    boolean                         cachedReceiptInventTransOriginId;
    boolean                         cachedReceiptSourceDocumentLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCancelBeforeUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the kanban can be cancelled.
    /// </summary>
    /// <returns>
    ///    true if the kanban can be cancelled; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean canCancelBeforeUpdate()
    {
        return    this.mustCancelBeforeUpdate()
               && this.kanbanRule().TriggerLevel > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the kanban can be updated.
    /// </summary>
    /// <returns>
    ///    true if the kanban can be updated; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean canUpdate()
    {
        if (!cachedCanUpdate)
        {
            canUpdate       =    kanban.Status     == LeanKanbanStatus::NotAssigned
                              && (kanbanJob.Status == LeanKanbanJobStatus::NotPlanned
                              ||  kanbanJob.Status == LeanKanbanJobStatus::Planned)
                              && !kanbanJob.existPreviousJobGreaterStatus(LeanKanbanJobStatus::Planned);
            cachedCanUpdate = true;
        }

        return canUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the quantity of the last job of the kanban.
    /// </summary>
    /// <returns>
    ///    The quantity of the last job of the kanban.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventQty jobQuantity()
    {
        return kanbanJob.Status == LeanKanbanJobStatus::Completed ? kanbanJob.QuantityReceived : kanbanJob.QuantityOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the kanban rule.
    /// </summary>
    /// <returns>
    ///    The kanban rule that is associated with the kanban.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanRule kanbanRule()
    {
        if (!cachedKanbanRule)
        {
            kanbanRule       = kanban.kanbanRule();
            cachedKanbanRule = true;
        }

        return kanbanRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCancelBeforeUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the kanban must be cancelled before it can be updated.
    /// </summary>
    /// <returns>
    ///    true if the kanban must be cancelled before it can be updated; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean mustCancelBeforeUpdate()
    {
        if (!cachedMustCancelBeforeUpdate)
        {
            mustCancelBeforeUpdate       =    kanban
                                           && kanbanJob
                                           && (kanbanJob.Status == LeanKanbanJobStatus::Planned
                                           ||  kanbanJob.existPreviousJobInStatus(LeanKanbanJobStatus::Planned));
            cachedMustCancelBeforeUpdate = true;
        }

        return mustCancelBeforeUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanban</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public Kanban parmKanban(Kanban _kanban = kanban)
    {
        kanban = _kanban;

        if (!prmisDefault(_kanban))
        {
            this.resetCache();
        }

        return kanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanJob</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public KanbanJob parmKanbanJob(KanbanJob _kanbanJob = kanbanJob)
    {
        kanbanJob = _kanbanJob;

        if (!prmisDefault(_kanbanJob))
        {
            this.resetCache();
        }

        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeggedQty</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public InventQty parmPeggedQty(InventQty _peggedQty = peggedQty)
    {
        peggedQty = _peggedQty;

        return peggedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeggedQtyOriginal</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public InventQty parmPeggedQtyOriginal(InventQty _peggedQtyOriginal = peggedQtyOriginal)
    {
        peggedQtyOriginal = _peggedQtyOriginal;
        return peggedQtyOriginal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptInventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the inventory transaction origin of the last job of the kanban.
    /// </summary>
    /// <returns>
    ///    The inventory transaction origin of the last job of the kanban
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventTransOriginId receiptInventTransOriginId()
    {
        if (!cachedReceiptInventTransOriginId)
        {
            receiptInventTransOriginId       = kanbanJob.receiptInventTransOriginId();
            cachedReceiptInventTransOriginId = true;
        }

        return receiptInventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the source document line of the last job of the kanban.
    /// </summary>
    /// <returns>
    ///    The source document line of the last job of the kanban.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SourceDocumentLineRefRecId receiptSourceDocumentLine()
    {
        if (!cachedReceiptSourceDocumentLine)
        {
            receiptSourceDocumentLine       = kanbanJob.receiptSourceDocumentLine();
            cachedReceiptSourceDocumentLine = true;
        }

        return receiptSourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets cached value flags.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void resetCache()
    {
        cachedCanUpdate                  = false;
        cachedMustCancelBeforeUpdate     = false;
        cachedKanbanRule                 = false;
        cachedReceiptInventTransOriginId = false;
        cachedReceiptSourceDocumentLine  = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>ReqEventKanbanData</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>ReqEventKanbanData</c> class.
    /// </returns>
    private static ReqEventKanbanData construct()
    {
        return new ReqEventKanbanData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>ReqEventKanbanData</c> class.
    /// </summary>
    /// <param name="_kanban">
    ///    A <c>Kanban</c> record.
    /// </param>
    /// <param name="_kanbanJob">
    ///    A <c>KanbanJob</c> record that is the last job of the kanban.
    /// </param>
    /// <param name="_peggedQty">
    ///    The pegged quantity.
    /// </param>
    /// <param name="_peggedQtyOriginal">
    ///    The original pegged quantity.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>ReqEventKanbanData</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReqEventKanbanData newStandard(
        Kanban    _kanban,
        KanbanJob _kanbanJob,
        InventQty _peggedQty,
        InventQty _peggedQtyOriginal)
    {
        ReqEventKanbanData  reqEventKanbanData = ReqEventKanbanData::construct();

        reqEventKanbanData.parmKanban(_kanban);
        reqEventKanbanData.parmKanbanJob(_kanbanJob);
        reqEventKanbanData.parmPeggedQty(_peggedQty);
        reqEventKanbanData.parmPeggedQtyOriginal(_peggedQtyOriginal);

        return reqEventKanbanData;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>