<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvWorkflowActions</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TrvWorkflowActions
{
    tableId                         tableId;
    RecId                           recId;
    CompanyId                       companyId;
    str                             menuitemname;
    MenuItemType                    menuItemType;
    TrvWorkflowAction               trvWorkflowAction;
    NoYes                           hideDialog;
    TrvExpNumber                    trvExpNumber;
    RecId                           wfItemRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelWorkflow</Name>
				<Source><![CDATA[
    private void cancelWorkflow()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertWorkflowLog</Name>
				<Source><![CDATA[
    private void insertWorkflowLog(TrvApprovalLevel _approvalLevel, WorkflowWorkItemActionType _actionType)
    {
        TrvWorkflowLog                        trvWorkflowLog;
        TrvPolicyViolationsLog                policyLog;
        TrvWorkflowAction bothApproveReturn = TrvWorkflowAction::Delegate;
        TrvWorkflowAction action;
        TrvExpTable trvExpTable;

         trvExpTable = TrvExpTable::find(trvExpNumber);
        ttsbegin;

        if (_actionType == WorkflowWorkItemActionType::Complete)
        {
            trvWorkflowLog.ApprovedByWorker = HcmWorker::userId2Worker(curuserid());
            trvWorkflowLog.ApprovedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            action = TrvWorkflowAction::Approve;
        }

        if (_actionType == WorkflowWorkItemActionType::Return)
        {
            trvWorkflowLog.RejectedByWorker = HcmWorker::userId2Worker(curuserid());
            trvWorkflowLog.RejectedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            action = TrvWorkflowAction::Return;
        }

        if (_approvalLevel == TrvApprovalLevel::Document)
        {
            trvWorkflowLog.ExpHeaderRecId = recId;

            update_recordset policyLog setting Action = action
                where policyLog.Header == trvExpTable.RecId &&
                      policyLog.Action == TrvWorkflowAction::Submit;

            // if someone has already returned the document, set status to both Approve/Return
            if (action == TrvWorkflowAction::Approve)
            {
                update_recordset policyLog setting Action = bothApproveReturn
                    where policyLog.Header == trvExpTable.RecId &&
                          policyLog.Action == TrvWorkflowAction::Return;
            }
            else if (action == TrvWorkflowAction::Return)
            {
                update_recordset policyLog setting Action = bothApproveReturn
                    where policyLog.Header == trvExpTable.RecId &&
                          policyLog.Action == TrvWorkflowAction::Approve;
            }
        }
        else
        {
            trvWorkflowLog.ExpLineRecId = recId;
            update_recordset policyLog setting Action = action
                where policyLog.Line == recId &&
                      policyLog.Action == TrvWorkflowAction::Submit;

            // if someone has already returned the document, set status to both Approve/Return
            if (action == TrvWorkflowAction::Approve)
            {
                update_recordset policyLog setting Action = bothApproveReturn
                    where policyLog.Line == recId &&
                          policyLog.Action == TrvWorkflowAction::Return;
            }
            else if (action == TrvWorkflowAction::Return)
            {
                update_recordset policyLog setting Action = bothApproveReturn
                    where policyLog.Line == recId &&
                          policyLog.Action == TrvWorkflowAction::Approve;
            }
        }

        trvWorkflowLog.ApprovalLevel = _approvalLevel;
        trvWorkflowLog.ExpNumber = trvExpNumber;

        trvWorkflowLog.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompanyId</Name>
				<Source><![CDATA[
    public CompanyId parmCompanyId(CompanyId _companyId)
    {;
        companyId = _companyId;
        return companyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMenuItemName</Name>
				<Source><![CDATA[
    public str parmMenuItemName(str _menuitemname)
    {;
        menuitemname = _menuitemname;
        return menuitemname;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMenuItemType</Name>
				<Source><![CDATA[
    public MenuItemType parmMenuItemType(MenuItemType _menuItemType)
    {;
        menuItemType = _menuItemType;
        return menuItemType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecId</Name>
				<Source><![CDATA[
    public RecId parmRecId(RecId _recId)
    {;
        recId = _recId;
        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableId</Name>
				<Source><![CDATA[
    public tableId parmTableId(tableId _tableId)
    {;
        tableId = _tableId;
        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTrvExpNumber</Name>
				<Source><![CDATA[
    public TrvExpNumber parmTrvExpNumber(TrvExpNumber _trvExpNumber)
    {;
        trvExpNumber = _trvExpNumber;
        return trvExpNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTrvWorkflowAction</Name>
				<Source><![CDATA[
    public TrvWorkflowAction parmTrvWorkflowAction(TrvWorkflowAction _trvWorkflowAction)
    {;
        trvWorkflowAction = _trvWorkflowAction;
        return trvWorkflowAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWFItemRecId</Name>
				<Source><![CDATA[
    public RecId parmWFItemRecId(RecId _recId)
    {;
        wfItemRecId = _recId;
        return wfItemRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshForm</Name>
				<Source><![CDATA[
    void refreshForm(FormDataSource ds)
    {
        if (! ds)
            return;

        ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitTaxToWorkflow</Name>
				<Source><![CDATA[
    private void submitTaxToWorkflow()
    {
        TrvExpenseTaxRecovery trvExpenseTaxRecovery;
    ;

        select forupdate firstonly trvExpenseTaxRecovery where trvExpenseTaxRecovery.RecId == recId;

        if (trvExpenseTaxRecovery.RecId)
        {
            Workflow::activateFromWorkflowType('TrvTaxTemplate', recId, '', NoYes::No);

            ttsbegin;
            trvExpenseTaxRecovery.Status = TrvTaxRecoveryStatus::Submitted;
            trvExpenseTaxRecovery.doUpdate();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TrvWorkflowActions construct()
    {
        return new TrvWorkflowActions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        TrvWorkflowActions trvWorkflowActions = TrvWorkflowActions::construct();
        FormRun callerForm;
        Object caller;
        WorkflowWorkItemTable workItem;
    ;

        trvWorkflowActions.parmTableId(args.record().TableId);
        trvWorkflowActions.parmRecId(args.record().RecId);
        trvWorkflowActions.parmCompanyId(args.record().DataAreaId);
        trvWorkflowActions.parmTrvWorkflowAction(args.parmEnum());
        trvWorkflowActions.parmMenuItemName(args.menuItemName());
        trvWorkflowActions.parmMenuItemType(args.menuItemType());

        // submit doesn't have work item yet, no need to save workitem.recid
        if (args.parmEnumType() && args.parmEnumType() == enumnum(TrvWorkflowAction))
        {
            if (args.parmEnum()!= TrvWorkflowAction::Submit)
            {
                workItem = args.caller().getActiveWorkflowWorkItem();
                trvWorkflowActions.parmWFItemRecId(workItem.RecId);
            }
        }

        switch (args.record().TableId)
        {
            case tablenum(TrvExpenseTaxRecovery):
                trvWorkflowActions.submitTaxToWorkflow();
                break;
        }

        caller = args.caller();

        if (SysDictClass::isEqualOrSuperclass(classidget(caller),classnum(FormRun)))
        {
            callerForm = args.caller();

            callerForm.updateWorkflowControls();
            trvWorkflowActions.refreshForm(FormDataUtil::getFormDataSource(args.record()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>