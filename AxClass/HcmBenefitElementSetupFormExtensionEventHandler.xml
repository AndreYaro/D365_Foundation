<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmBenefitElementSetupFormExtensionEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the ApplicationSuite module form extension events for the HcmBenefitElementSetup form.
/// </summary>
class HcmBenefitElementSetupFormExtensionEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>HcmBenefitElementSetup_Post_init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form OnInitialized event handler for HcmBenefitElementSetup form extension.
    /// </summary>
    /// <param name="_args">The args for the event.</param>
    [PostHandlerFor(formStr(HcmBenefitElementSetup), formMethodStr(HcmBenefitElementSetup, init))]
    public static void HcmBenefitElementSetup_Post_init(XppPrePostArgs _args)
    {
        FormRun hcmBenefitElementSetupForm = _args.getThis();
        FormStringControl legalEntity = hcmBenefitElementSetupForm.design().controlName(formControlStr(HcmBenefitElementSetup, legalEntity)) as FormStringControl;

        legalEntity.text(curext());
        RefRecId selectedDataAreaRecId = CompanyInfo::current(legalEntity.text());
        hcmBenefitElementSetupForm.parmSelectedDataAreaRecId(selectedDataAreaRecId);

        SelectableDataArea selectedLegalEntityDataAreaId = CompanyInfo::findRecId(selectedDataAreaRecId).DataArea;
        hcmBenefitElementSetupForm.parmSelectedLegalEntityDataAreaId(selectedLegalEntityDataAreaId);

        HcmBenefitElementSetupFormExtensionEventHandler::setControllersContext(selectedLegalEntityDataAreaId, hcmBenefitElementSetupForm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>LegalEntity_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// HcmBenefitElementSetup LegalEntity form control OnModified event handler for the HcmBenefitElementSetup form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmBenefitElementSetup, LegalEntity), FormControlEventType::Modified)]
    public static void LegalEntity_OnModified(FormControl _sender, FormControlEventArgs _e)
    {
        FormStringControl legalEntity = _sender as FormStringControl;
        FormRun hcmBenefitElementSetupForm = _sender.formRun();

        RefRecId selectedDataAreaRecId = CompanyInfo::current(legalEntity.text());
        hcmBenefitElementSetupForm.parmSelectedDataAreaRecId(selectedDataAreaRecId);

        SelectableDataArea selectedLegalEntityDataAreaId = CompanyInfo::findRecId(selectedDataAreaRecId).DataArea;
        hcmBenefitElementSetupForm.parmSelectedLegalEntityDataAreaId(selectedLegalEntityDataAreaId);

        appl.setDefaultCompany(selectedLegalEntityDataAreaId, false);

        HcmBenefitElementSetupFormExtensionEventHandler::setControllersContext(selectedLegalEntityDataAreaId, hcmBenefitElementSetupForm, true);

        FormDataSource payrollBenefitPlanDefaultDimension_ds = hcmBenefitElementSetupForm.dataSource(formDataSourceStr(HcmBenefitElementSetup, PayrollBenefitPlanDefaultDimension)) as FormDataSource;
        FormDataSource payrollBenefitAccountingRuleDeduction_ds = hcmBenefitElementSetupForm.dataSource(formDataSourceStr(HcmBenefitElementSetup, PayrollBenefitAccountingRuleDeduction)) as FormDataSource;
        FormDataSource payrollBenefitAccountingRuleContribution_ds = hcmBenefitElementSetupForm.dataSource(formDataSourceStr(HcmBenefitElementSetup, PayrollBenefitAccountingRuleContribution)) as FormDataSource;

        payrollBenefitPlanDefaultDimension_ds.executeQuery();
        payrollBenefitAccountingRuleDeduction_ds.executeQuery();
        payrollBenefitAccountingRuleContribution_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>LegalEntity_OnValidated</Name>
				<Source><![CDATA[
    /// <summary>
    /// HcmBenefitElementSetup LegalEntity form control OnValidated event handler for the HcmBenefitElementSetup form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmBenefitElementSetup, LegalEntity), FormControlEventType::Validated)]
    public static void LegalEntity_OnValidated(FormControl _sender, FormControlEventArgs _e)
    {
        FormStringControl legalEntity = _sender as FormStringControl;

        if (!CompanyInfo::findDataArea(legalEntity.text()).RecId)
        {
            throw error(strFmt("@SYS342222", legalEntity.text()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>VendAccountNum_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollBenefitPlanDefaultDimension VendAccountNum form data object OnModified event handler for the HcmBenefitElementSetup form extension.
    /// </summary>
    /// <param name="_sender">The form data object raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataFieldEventHandler(formDataFieldStr(HcmBenefitElementSetup, PayrollBenefitPlanDefaultDimension, VendAccountNum), FormDataFieldEventType::Modified)]
    public static void VendAccountNum_OnModified(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        PayrollBenefitPlanDefaultDimension payrollBenefitPlanDefaultDimension  = _sender.dataSource().cursor();

        VendTable vendTable = VendTable::find(payrollBenefitPlanDefaultDimension.VendAccountNum);
        payrollBenefitPlanDefaultDimension.VendDataAreaId = vendTable.DataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CategoryId_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollBenefitPlanDefaultDimension CategoryId form data object OnModified event handler for the HcmBenefitElementSetup form extension.
    /// </summary>
    /// <param name="_sender">The form data object raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataFieldEventHandler(formDataFieldStr(HcmBenefitElementSetup, PayrollBenefitPlanDefaultDimension, CategoryId), FormDataFieldEventType::Modified)]
    public static void CategoryId_OnModified(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        PayrollBenefitPlanDefaultDimension payrollBenefitPlanDefaultDimension  = _sender.dataSource().cursor();

        ProjCategory projCategory = ProjCategory::find(payrollBenefitPlanDefaultDimension.CategoryId);
        payrollBenefitPlanDefaultDimension.CategoryDataAreaId = projCategory.DataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollBenefitPlanDefaultDimension_CategoryId_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollBenefitPlanDefaultDimension PayrollBenefitPlanDefaultDimension_CategoryId form control OnLookup event handler for the HcmBenefitElementSetup form extension.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmBenefitElementSetup, PayrollBenefitPlanDefaultDimension_CategoryId), FormControlEventType::Lookup)]
    public static void PayrollBenefitPlanDefaultDimension_CategoryId_OnLookup(FormControl _sender, FormControlEventArgs _e)
    {
        ProjCategory::lookupProjCategoryType(_sender, ProjCategoryType::Cost);
        FormControlCancelableSuperEventArgs ce = _e as FormControlCancelableSuperEventArgs;
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmBenefitElementSetup_deletingPayrollData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the Payroll accounting data.
    /// </summary>
    /// <param name = "_formElement">The HcmBenefitElementSetup form instance that raised the event.</param>
    [SubscribesTo(formStr(HcmBenefitElementSetup), delegateStr(HcmBenefitElementSetup, deletingPayrollData))]
    public static void HcmBenefitElementSetup_deletingPayrollData(FormRun _formElement)
    {
        FormDataSource payrollBenefitAccountingRuleContribution_ds = _formElement.dataSource(formDataSourceStr(HcmBenefitElementSetup, PayrollBenefitAccountingRuleContribution)) as FormDataSource;
        PayrollBenefitAccountingRule payrollBenefitAccountingRuleContribution = payrollBenefitAccountingRuleContribution_ds.cursor();

        FormDataSource payrollBenefitPlanDefaultDimension_ds = _formElement.dataSource(formDataSourceStr(HcmBenefitElementSetup, PayrollBenefitPlanDefaultDimension)) as FormDataSource;
        PayrollBenefitPlanDefaultDimension payrollBenefitPlanDefaultDimension = payrollBenefitPlanDefaultDimension_ds.cursor();

        FormDataSource payrollBenefitAccountingRuleDeduction_ds = _formElement.dataSource(formDataSourceStr(HcmBenefitElementSetup, PayrollBenefitAccountingRuleDeduction)) as FormDataSource;
        PayrollBenefitAccountingRule payrollBenefitAccountingRuleDeduction = payrollBenefitAccountingRuleDeduction_ds.cursor();

        if (payrollBenefitAccountingRuleContribution.RecId != 0)
        {
            payrollBenefitAccountingRuleContribution.reread();
            payrollBenefitAccountingRuleContribution.delete();
        }

        if (payrollBenefitPlanDefaultDimension.RecId != 0)
        {
            payrollBenefitPlanDefaultDimension.reread();
            payrollBenefitPlanDefaultDimension.delete();
            payrollBenefitPlanDefaultDimension_ds.research();
        }

        if (payrollBenefitAccountingRuleDeduction.RecId != 0)
        {
            payrollBenefitAccountingRuleDeduction.reread();
            payrollBenefitAccountingRuleDeduction.delete();
        }

        boolean isPayrollUSAConfigurationKeyEnabled = isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministrationUSA));
        if (isPayrollUSAConfigurationKeyEnabled)
        {
            FormDataSource payrollBenefitTaxRule_US_ds = _formElement.dataSource(formDataSourceStr(HcmBenefitElementSetup, PayrollBenefitTaxRule_US)) as FormDataSource;
            PayrollBenefitTaxRule_US payrollBenefitTaxRule_US = payrollBenefitTaxRule_US_ds.cursor();

            if (payrollBenefitTaxRule_US.RecId != 0)
            {
                payrollBenefitTaxRule_US.reread();
                payrollBenefitTaxRule_US.delete();
                payrollBenefitTaxRule_US_ds.research();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollBenefitAccountingRuleContribution_OnInitValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollBenefitAccountingRuleContribution form data source OnInitValue event handler for HcmBenefitElementSetup form extension data source.
    /// </summary>
    /// <param name="_sender">The PayrollBenefitAccountingRuleContribution data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmBenefitElementSetup, PayrollBenefitAccountingRuleContribution), FormDataSourceEventType::InitValue)]
    public static void PayrollBenefitAccountingRuleContribution_OnInitValue(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun hcmBenefitElementSetupForm = _sender.formRun();

        PayrollBenefitAccountingRule payrollBenefitAccountingRuleContribution = _sender.cursor();

        payrollBenefitAccountingRuleContribution.LegalEntity = hcmBenefitElementSetupForm.parmSelectedDataAreaRecId();
        payrollBenefitAccountingRuleContribution.PayrollType = PayrollType::Contribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollBenefitAccountingRuleContribution_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollBenefitAccountingRuleContribution form data source OnInitialized event handler for HcmBenefitElementSetup form extension data source.
    /// </summary>
    /// <param name="_sender">The PayrollBenefitAccountingRuleContribution data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmBenefitElementSetup, PayrollBenefitAccountingRuleContribution), FormDataSourceEventType::Initialized)]
    public static void PayrollBenefitAccountingRuleContribution_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        _sender.query().dataSourceName(_sender.name()).addRange(fieldnum(PayrollBenefitAccountingRule, PayrollType));
        _sender.query().dataSourceName(_sender.name()).addRange(fieldnum(PayrollBenefitAccountingRule, LegalEntity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollBenefitAccountingRuleContribution_OnQueryExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollBenefitAccountingRuleContribution form data source OnQueryExecuting event handler for HcmBenefitElementSetup form extension data source.
    /// </summary>
    /// <param name="_sender">The PayrollBenefitAccountingRuleContribution data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmBenefitElementSetup, PayrollBenefitAccountingRuleContribution), FormDataSourceEventType::QueryExecuting)]
    public static void PayrollBenefitAccountingRuleContribution_OnQueryExecuting(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun hcmBenefitElementSetupForm = _sender.formRun();

        _sender.query().dataSourceName(_sender.name()).findRange(fieldnum(PayrollBenefitAccountingRule, PayrollType))
            .value(queryValue(PayrollType::Contribution));

        _sender.query().dataSourceName(_sender.name()).findRange(fieldnum(PayrollBenefitAccountingRule, LegalEntity))
            .value(queryValue(hcmBenefitElementSetupForm.parmSelectedDataAreaRecId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollBenefitAccountingRuleDeduction_OnInitValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollBenefitAccountingRuleDeduction form data source OnInitValue event handler for HcmBenefitElementSetup form extension data source.
    /// </summary>
    /// <param name="_sender">The PayrollBenefitAccountingRuleDeduction data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmBenefitElementSetup, PayrollBenefitAccountingRuleDeduction), FormDataSourceEventType::InitValue)]
    public static void PayrollBenefitAccountingRuleDeduction_OnInitValue(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun hcmBenefitElementSetupForm = _sender.formRun();

        PayrollBenefitAccountingRule payrollBenefitAccountingRuleDeduction = _sender.cursor();

        payrollBenefitAccountingRuleDeduction.LegalEntity = hcmBenefitElementSetupForm.parmSelectedDataAreaRecId();
        payrollBenefitAccountingRuleDeduction.PayrollType = PayrollType::Deduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollBenefitAccountingRuleDeduction_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollBenefitAccountingRuleDeduction form data source OnInitialized event handler for HcmBenefitElementSetup form extension data source.
    /// </summary>
    /// <param name="_sender">The PayrollBenefitAccountingRuleDeduction data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmBenefitElementSetup, PayrollBenefitAccountingRuleDeduction), FormDataSourceEventType::Initialized)]
    public static void PayrollBenefitAccountingRuleDeduction_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        _sender.query().dataSourceName(_sender.name()).addRange(fieldnum(PayrollBenefitAccountingRule, PayrollType));
        _sender.query().dataSourceName(_sender.name()).addRange(fieldnum(PayrollBenefitAccountingRule, LegalEntity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollBenefitAccountingRuleDeduction_OnQueryExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollBenefitAccountingRuleDeduction form data source OnQueryExecuting event handler for HcmBenefitElementSetup form extension data source.
    /// </summary>
    /// <param name="_sender">The PayrollBenefitAccountingRuleDeduction data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmBenefitElementSetup, PayrollBenefitAccountingRuleDeduction), FormDataSourceEventType::QueryExecuting)]
    public static void PayrollBenefitAccountingRuleDeduction_OnQueryExecuting(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun hcmBenefitElementSetupForm = _sender.formRun();

        _sender.query().dataSourceName(_sender.name()).findRange(fieldnum(PayrollBenefitAccountingRule, PayrollType))
            .value(queryValue(PayrollType::Deduction));
        _sender.query().dataSourceName(_sender.name()).findRange(fieldnum(PayrollBenefitAccountingRule, LegalEntity))
            .value(queryValue(hcmBenefitElementSetupForm.parmSelectedDataAreaRecId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollBenefitPlanDefaultDimension_OnInitValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollBenefitPlanDefaultDimension form data source OnInitValue event handler for HcmBenefitElementSetup form extension data source.
    /// </summary>
    /// <param name="_sender">The PayrollBenefitPlanDefaultDimension data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmBenefitElementSetup, PayrollBenefitPlanDefaultDimension), FormDataSourceEventType::InitValue)]
    public static void PayrollBenefitPlanDefaultDimension_OnInitValue(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun hcmBenefitElementSetupForm = _sender.formRun();

        PayrollBenefitPlanDefaultDimension payrollBenefitPlanDefaultDimension = _sender.cursor();

        payrollBenefitPlanDefaultDimension.LegalEntity = hcmBenefitElementSetupForm.parmSelectedDataAreaRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollBenefitPlanDefaultDimension_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollBenefitPlanDefaultDimension form data source OnInitialized event handler for HcmBenefitElementSetup form extension data source.
    /// </summary>
    /// <param name="_sender">The PayrollBenefitPlanDefaultDimension data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmBenefitElementSetup, PayrollBenefitPlanDefaultDimension), FormDataSourceEventType::Initialized)]
    public static void PayrollBenefitPlanDefaultDimension_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        _sender.query().dataSourceName(_sender.name()).addRange(fieldnum(PayrollBenefitPlanDefaultDimension, LegalEntity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollBenefitPlanDefaultDimension_OnQueryExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollBenefitPlanDefaultDimension form data source OnQueryExecuting event handler for HcmBenefitElementSetup form extension data source.
    /// </summary>
    /// <param name="_sender">The PayrollBenefitPlanDefaultDimension data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmBenefitElementSetup, PayrollBenefitPlanDefaultDimension), FormDataSourceEventType::QueryExecuting)]
    public static void PayrollBenefitPlanDefaultDimension_OnQueryExecuting(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun hcmBenefitElementSetupForm = _sender.formRun();

        _sender.query().dataSourceName(_sender.name()).findRange(fieldnum(PayrollBenefitPlanDefaultDimension, LegalEntity))
            .value(queryValue(hcmBenefitElementSetupForm.parmSelectedDataAreaRecId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmBenefitPlan_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// HcmBenefitPlan form data source OnActivated event handler for HcmBenefitElementSetup form extension data source.
    /// </summary>
    /// <param name="_sender">The HcmBenefitPlan data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmBenefitElementSetup, HcmBenefitPlan), FormDataSourceEventType::Activated)]
    public static void HcmBenefitPlan_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun hcmBenefitElementSetupForm = _sender.formRun();
        HcmBenefitPlan hcmBenefitPlan = _sender.cursor();
        HcmBenefitElementSetupFormExtensionEventHandler::setPayrollControls(hcmBenefitElementSetupForm, hcmBenefitPlan);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmBenefitPlan_OnSelectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// HcmBenefitPlan form data source OnSelectionChanged event handler for HcmBenefitElementSetup form extension data source.
    /// </summary>
    /// <param name="_sender">The HcmBenefitPlan data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmBenefitElementSetup, HcmBenefitPlan), FormDataSourceEventType::SelectionChanged)]
    public static void HcmBenefitPlan_OnSelectionChanged(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun hcmBenefitElementSetupForm = _sender.formRun();
        HcmBenefitPlan hcmBenefitPlan = _sender.cursor();
        HcmBenefitElementSetupFormExtensionEventHandler::setPayrollControls(hcmBenefitElementSetupForm, hcmBenefitPlan);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollImpact_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollImpact form data object OnModified event handler for HcmBenefitElementSetup form extension data source.
    /// </summary>
    /// <param name="_sender">The PayrollImpact data object of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataFieldEventHandler(formDataFieldStr(HcmBenefitElementSetup, HcmBenefitPlan, PayrollImpact), FormDataFieldEventType::Modified)]
    public static void PayrollImpact_OnModified(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        FormRun hcmBenefitElementSetupForm = _sender.datasource().formRun();
        HcmBenefitPlan hcmBenefitPlan = _sender.datasource().cursor();
        HcmBenefitElementSetupFormExtensionEventHandler::setPayrollControls(hcmBenefitElementSetupForm, hcmBenefitPlan);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PreTaxBasis_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// OnModified event handler for PreTaxBasis on the datasource PayrollBenefitTaxRule_US.  Handles setting up the UI based on context
    /// </summary>
    /// <param name="sender">The PreTaxBasis data field of the form extension</param>
    /// <param name="e">Args for the event</param>
    [FormDataFieldEventHandler(formDataFieldStr(HcmBenefitElementSetup, PayrollBenefitTaxRule_US, PreTaxBasis), FormDataFieldEventType::Modified)]
    public static void PreTaxBasis_OnModified(FormDataObject _sender, FormDataFieldEventArgs e)
    {
        FormRun hcmBenefitElementSetupForm = _sender.datasource().formRun();
        HcmBenefitElementSetupFormExtensionEventHandler::setCustomPretaxMethodControl(hcmBenefitElementSetupForm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustomPretaxMethod_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// OnModified event handler for CustomPreTaxMethod on the datasource PayrollBenefitTaxRule_US.  Handles setting up the UI based on context
    /// </summary>
    /// <param name="sender">The CustomPreTaxMethod data field of the form extension</param>
    /// <param name="e">Args for the event</param>
    [FormDataFieldEventHandler(formDataFieldStr(HcmBenefitElementSetup, PayrollBenefitTaxRule_US, CustomPretaxMethod), FormDataFieldEventType::Modified)]
    public static void CustomPretaxMethod_OnModified(FormDataObject _sender, FormDataFieldEventArgs e)
    {
        FormRun hcmBenefitElementSetupForm = _sender.datasource().formRun();
        HcmBenefitElementSetupFormExtensionEventHandler::setCustomPretaxMethodControl(hcmBenefitElementSetupForm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPayrollControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the accounting controls based on the Payroll impact.
    /// </summary>
    /// <param name = "_formElement">The benefit element setUp form instance that raised the event.</param>
    /// <param name = "_hcmBenefitPlan">The HcmBenefitPlan form data source cursor .</param>
    private static void setPayrollControls(FormRun _formElement, HcmBenefitPlan _hcmBenefitPlan)
    {
        boolean isPayrollInfoConfigurationKeyEnabled = isConfigurationkeyEnabled(configurationKeyNum(HRMAdministrationPayrollInfo));
        boolean isPayrollConfigurationKeyEnabled = isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration));
        boolean isPayrollUSAConfigurationKeyEnabled = isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministrationUSA));

        FormGroupControl contributionGroup = _formElement.design().controlName(formControlStr(HcmBenefitElementSetup, ContributionGroup)) as FormGroupControl;
        FormGroupControl deductionGroup = _formElement.design().controlName(formControlStr(HcmBenefitElementSetup, DeductionGroup)) as FormGroupControl;

        FormTabPageControl plans_Details_TaxRule = _formElement.design().controlName(formControlStr(HcmBenefitElementSetup, plans_Details_TaxRule)) as FormTabPageControl;
        FormTabPageControl plans_Details_AccountingTabPage = _formElement.design().controlName(formControlStr(HcmBenefitElementSetup, plans_Details_AccountingTabPage)) as FormTabPageControl;

        if (isPayrollInfoConfigurationKeyEnabled)
        {
            plans_Details_AccountingTabPage.visible(true);
            plans_Details_TaxRule.visible(isPayrollConfigurationKeyEnabled);

            // Hide tabs and controls depending on the payroll impact selected
            switch (_hcmBenefitPlan.PayrollImpact)
            {
                case PayrollImpact::None:
                    plans_Details_TaxRule.visible(false);
                    plans_Details_AccountingTabPage.visible(false);
                    break;

                case PayrollImpact::ContributionOnly:
                    contributionGroup.visible(true);
                    deductionGroup.visible(false);
                    break;

                case PayrollImpact::DeductionOnly:
                    contributionGroup.visible(false);
                    deductionGroup.visible(true);
                    break;

                case PayrollImpact::DeductionAndContribution:
                    contributionGroup.visible(true);
                    deductionGroup.visible(true);
                    break;
            }
        }

        if (isPayrollUSAConfigurationKeyEnabled)
        {
            FormDataSource payrollBenefitTaxRule_US_ds = _formElement.dataSource(formDataSourceStr(HcmBenefitElementSetup, PayrollBenefitTaxRule_US)) as FormDataSource;
            PayrollBenefitTaxRule_US payrollBenefitTaxRule_US = payrollBenefitTaxRule_US_ds.cursor();

            FormGroupControl customGroup = _formElement.design().controlName(formControlStr(HcmBenefitElementSetup, CustomGroup)) as FormGroupControl;
            FormGroupControl exemptFromTaxes = _formElement.design().controlName(formControlStr(HcmBenefitElementSetup, ExemptFromTaxes)) as FormGroupControl;

            // enable\disable tax rule US control and its child controls accordingly
            customGroup.enabled(payrollBenefitTaxRule_US.PreTaxBasis == PayrollPreTaxBasis::Custom);
            payrollBenefitTaxRule_US_ds.object(fieldNum(PayrollBenefitTaxRule_US, TaxGroup)).enabled(payrollBenefitTaxRule_US.CustomPretaxMethod == PayrollCustomPretaxMethod::ByTaxGroup);
            payrollBenefitTaxRule_US_ds.object(fieldNum(PayrollBenefitTaxRule_US, TaxGroup)).mandatory(payrollBenefitTaxRule_US.CustomPretaxMethod == PayrollCustomPretaxMethod::ByTaxGroup);
            exemptFromTaxes.enabled(payrollBenefitTaxRule_US.CustomPretaxMethod == PayrollCustomPretaxMethod::ByType);
        }
     }

]]></Source>
			</Method>
			<Method>
				<Name>setCustomPretaxMethodControl</Name>
				<Source><![CDATA[
    private static void setCustomPretaxMethodControl(FormRun _formElement)
    {
        FormDataSource payrollBenefitTaxRule_US_ds = _formElement.dataSource(formDataSourceStr(HcmBenefitElementSetup, PayrollBenefitTaxRule_US)) as FormDataSource;
        PayrollBenefitTaxRule_US payrollBenefitTaxRule_US = payrollBenefitTaxRule_US_ds.cursor();

        FormGroupControl customGroup = _formElement.design().controlName(formControlStr(HcmBenefitElementSetup, CustomGroup)) as FormGroupControl;
        FormGroupControl exemptFromTaxes = _formElement.design().controlName(formControlStr(HcmBenefitElementSetup, ExemptFromTaxes)) as FormGroupControl;

        // enable\disable tax rule US control and its child controls accordingly
        switch (payrollBenefitTaxRule_US.PreTaxBasis)
        {
           case PayrollPreTaxBasis::None:
                payrollBenefitTaxRule_US.CustomPretaxMethod = PayrollCustomPretaxMethod::ByType;
                customGroup.enabled(false);
                exemptFromTaxes.enabled(false);
                break;

            case PayrollPreTaxBasis::Custom:
                customGroup.enabled(true);
                break;

            default:
                payrollBenefitTaxRule_US.CustomPretaxMethod = PayrollCustomPretaxMethod::ByType;
                customGroup.enabled(false);
                break;
        }

        // enable/disable the tax group and specify if it is required, accordingly
        payrollBenefitTaxRule_US_ds.object(fieldNum(PayrollBenefitTaxRule_US, TaxGroup)).enabled(payrollBenefitTaxRule_US.CustomPretaxMethod == PayrollCustomPretaxMethod::ByTaxGroup);
        payrollBenefitTaxRule_US_ds.object(fieldNum(PayrollBenefitTaxRule_US, TaxGroup)).mandatory(payrollBenefitTaxRule_US.CustomPretaxMethod == PayrollCustomPretaxMethod::ByTaxGroup);

        // clear out tax group value when it is not applicable
        if (payrollBenefitTaxRule_US.CustomPretaxMethod != PayrollCustomPretaxMethod::ByTaxGroup)
        {
            payrollBenefitTaxRule_US.TaxGroup = 0;
            payrollBenefitTaxRule_US_ds.rereadReferenceDataSources();
        }

        // enable/disable the group of custom benefit type checkboxes
        exemptFromTaxes.enabled(payrollBenefitTaxRule_US.CustomPretaxMethod == PayrollCustomPretaxMethod::ByType);

        // clear out any custom benefit type checkbox values if they are not applicable
        if (payrollBenefitTaxRule_US.CustomPretaxMethod != PayrollCustomPretaxMethod::ByType)
        {
            exemptFromTaxes.enabled(false);
            payrollBenefitTaxRule_US.IsExemptFromFederalIncomeTax = false;
            payrollBenefitTaxRule_US.IsExemptFromFICA = false;
            payrollBenefitTaxRule_US.IsExemptFromLocalIncomeTax = false;
            payrollBenefitTaxRule_US.IsExemptFromMedicare = false;
            payrollBenefitTaxRule_US.IsExemptFromStateDisabilityInsurance = false;
            payrollBenefitTaxRule_US.IsExemptFromStateIncomeTax = false;
            payrollBenefitTaxRule_US.IsExemptFromStateUnemployment = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControllersContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set Dimension and LedgerDimension controllers with the proper legal entity context
    /// </summary>
    /// <param name = "_formElement">The benefit element setUp form instance that raised the event.</param>
    /// <param name="_clearDECOnContextChange">
    /// A Boolean indicating if the DEC should be cleared if the company has been changed by the user; optional.
    /// </param>
    private static void setControllersContext(SelectableDataArea _selectedLegalEntityDataAreaId, FormRun _formElement, boolean _clearDECOnContextChange = false)
    {
        FormContainerControl dimensionEntryContainerControl = _formElement.design().controlName(formControlStr(HcmBenefitElementSetup, DimensionEntryControl)) as FormContainerControl;
        DimensionEntryControl dimensionEntryControl = dimensionEntryContainerControl as DimensionEntryControl;

        // reactivate the dimension controller with the proper legal entity context
        dimensionEntryControl.parmCompany(_selectedLegalEntityDataAreaId);
        dimensionEntryControl.reactivate(_clearDECOnContextChange);

        FormSegmentedEntryControl ledgerDimensionDeductionControl = _formElement.design().controlName(formControlStr(HcmBenefitElementSetup, PayrollBenefitAccountingRuleDeduction_LedgerDimension)) as FormSegmentedEntryControl;
        SegmentedEntryControl deductionController = ledgerDimensionDeductionControl as SegmentedEntryControl;

        FormSegmentedEntryControl ledgerDimensionContributionControl = _formElement.design().controlName(formControlStr(HcmBenefitElementSetup, PayrollBenefitAccountingRuleContribution_LedgerDimension)) as FormSegmentedEntryControl;
        SegmentedEntryControl contributionController = ledgerDimensionContributionControl as SegmentedEntryControl;

        deductionController.parmDataAreaId(_selectedLegalEntityDataAreaId);
        contributionController.parmDataAreaId(_selectedLegalEntityDataAreaId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>