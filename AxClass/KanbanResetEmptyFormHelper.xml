<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanResetEmptyFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanResetEmptyFormHelper</c> class provides business logic for the <c>KanbanResetEmpty</c> form.
/// </summary>
public class KanbanResetEmptyFormHelper implements ButtonStateProvider
{
    FormRun                     formRun;
    FormDateControl             ctrlTransactionDate;
    FormStringControl           ctrlInvalidKanbanId;
    FormStringControl           ctrlKanbanCardId;
    FormStringControl           ctrlAssignedKanbanId;
    FormGroupControl            ctrlGroupInvalidKanban;

    Kanban                      kanban;
    KanbanResetEmptyValidate    kanbanResetEmptyValidate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assignedKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>Kanban</c> record that the kanban card is assigned to.
    /// </summary>
    /// <returns>
    /// The <c>Kanban</c> record; otherwise an empty record.
    /// </returns>
    public Kanban assignedKanban()
    {
        return kanban::findKanbanId(this.assignedKanbanId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignedKanbanId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID value of the kanban card that is assigned to from the form.
    /// </summary>
    /// <returns>
    /// The assigned kanban ID; otherwise an empty string.
    /// </returns>
    public KanbanId assignedKanbanId()
    {
        return ctrlAssignedKanbanId.valueStr();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCanReset</Name>
				<Source><![CDATA[
    /// <summary>
    ///    A <c>FormButtonManager</c> rule method for determining whether a user can reset the kanban status.
    /// </summary>
    /// <returns>
    ///    true if the kanban card can be edited; otherwise, false.
    /// </returns>
    public boolean checkCanReset()
    {
        return kanbanResetEmptyValidate.isValid(this.transDate(),this.kanbanCard(),this.invalidKanban(),true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvalidKanbanGroupVisible</Name>
				<Source><![CDATA[
    /// <summary>
    ///    A <c>FormButtonManager</c> rule method for determining whether a user can see the invalid kanban
    ///    selection group.
    /// </summary>
    /// <returns>
    ///    true if the kanban card can be edited; otherwise, false.
    /// </returns>
    public boolean checkInvalidKanbanGroupVisible()
    {
        return kanbanResetEmptyValidate.canHaveInvalidKanban();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkKanbanCardAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a user can modify the kanban card used to reset the kanban status.
    /// </summary>
    /// <returns>
    /// true if the kanban card can be edited; otherwise, false.
    /// </returns>
    public boolean checkKanbanCardAllowEdit()
    {
        KanbanCard kanbanCard = this.kanbanCard();

        return    !kanbanCard
               || kanbanCard.CardType == KanbanCardType::Circulating;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTransactionDateAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the transaction date field is enabled.
    /// </summary>
    /// <returns>
    /// true if the transaction date can be edited; otherwise, false.
    /// </returns>
    public boolean checkTransactionDateAllowEdit()
    {
        return    kanban.RecId != 0
               && kanban.type().mustBeInventoryControlled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the cache.
    /// </summary>
    /// <remarks>
    ///    The method does nothing, but is required for the <c>ButtonStateProvider</c> interface.
    /// </remarks>
    public void clearCache()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlAssignedKanbanId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>FormStringControl</c> object that holds the kanban that the kanban card is assigned to.
    /// </summary>
    /// <returns>
    ///    The <c>FormStringControl</c> object.
    /// </returns>
    public FormStringControl ctrlAssignedKanbanId()
    {
        return ctrlAssignedKanbanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlGroupInvalidKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>FormGroupControl</c> object for the invalid kanban.
    /// </summary>
    /// <returns>
    /// The <c>FormGroupControl</c> object.
    /// </returns>
    public FormGroupControl ctrlGroupInvalidKanban()
    {
        return ctrlGroupInvalidKanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlInvalidKanbanId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>FormStringControl</c> object that holds the invalid kanban ID.
    /// </summary>
    /// <returns>
    ///    The <c>FormStringControl</c> object.
    /// </returns>
    public FormStringControl ctrlInvalidKanbanId()
    {
        return ctrlInvalidKanbanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlKanbanCardId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>FormStringControl</c> object that holds the kanban card ID.
    /// </summary>
    /// <returns>
    ///    The <c>FormStringControl</c> object.
    /// </returns>
    public FormStringControl ctrlKanbanCardId()
    {
        return ctrlKanbanCardId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlTransactionDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>FormDateControl</c> object that holds the transaction date.
    /// </summary>
    /// <returns>
    ///    The <c>FormDateControl</c> object.
    /// </returns>
    public FormDateControl ctrlTransactionDate()
    {
        return ctrlTransactionDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultGroupInvalidKanbanOptionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default option value of the invalid kanban group option.
    /// </summary>
    /// <param name="_assignedKanban">
    /// The <c>Kanban</c> record that is assigned to the selected kanban card; optional.
    /// </param>
    /// <returns>
    /// true if the GroupInvalidKanban is check by default; otherwise, false.
    /// </returns>
    public boolean defaultGroupInvalidKanbanOptionValue(kanban _assignedKanban = this.assignedKanban())
    {
        return    _assignedKanban
               && !_assignedKanban.Manual
               && kanbanResetEmptyValidate.canHaveInvalidKanban();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get the default transaction date for the status reset.
    /// </summary>
    /// <returns>
    ///    The default transaction date.
    /// </returns>
    public TransDate defaultTransDate()
    {
        return kanbanResetEmptyValidate.minTransDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInvalidKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the invalid kanban should be deleted.
    /// </summary>
    /// <returns>
    /// true if the user selected the invalid kanban to be deleted; otherwise, false.
    /// </returns>
    public boolean deleteInvalidKanban()
    {
        return this.ctrlGroupInvalidKanban().optionValue() != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineButtonStates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the button state.
    /// </summary>
    /// <param name="_ruleFunctionName">
    ///    The rule function name.
    /// </param>
    /// <remarks>
    ///    The method does nothing, but is required for the <c>ButtonStateProvider</c> interface.
    /// </remarks>
    public void determineButtonStates(str _ruleFunctionName)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class instance.
    /// </summary>
    protected void init()
    {
        ctrlTransactionDate     = formRun.control(formRun.controlId(identifierStr(TransactionDate)));
        ctrlInvalidKanbanId     = formRun.control(formRun.controlId(identifierStr(InvalidKanban)));
        ctrlGroupInvalidKanban  = formRun.control(formRun.controlId(identifierStr(GroupInvalidKanban)));
        ctrlKanbanCardId        = formRun.control(formRun.controlId(identifierStr(KanbanCardId)));
        ctrlAssignedKanbanId    = formRun.control(formRun.controlId(identifierStr(AssignedKanbanId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>Kanban</c> record that is identified by the invalid kanban ID.
    /// </summary>
    /// <returns>
    /// The <c>Kanban</c> record; otherwise and empty table buffer.
    /// </returns>
    public Kanban invalidKanban()
    {
        return kanban::findKanbanId(this.invalidKanbanId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidKanbanId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the invalid kanban ID value from the form.
    /// </summary>
    /// <returns>
    ///    The invalid kanban ID; otherwise an empty string.
    /// </returns>
    public KanbanId invalidKanbanId()
    {
        KanbanId    invalidKanbanId;

        if (this.ctrlGroupInvalidKanban().optionValue())
        {
            invalidKanbanId = ctrlInvalidKanbanId.valueStr();
        }

        return invalidKanbanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Jumps to the details form of the specified Kanban.
    /// </summary>
    /// <param name="_kanban">
    ///    The <c>Kanban</c> record.
    /// </param>
    public void jumpRefKanban(kanban _kanban)
    {
        if (kanban)
        {
            Args args = new Args();
            args.record(_kanban);
            args.caller(this);
            MenuFunction menuFunction = new MenuFunction(menuitemdisplaystr(Kanban), MenuItemType::Display);
            menuFunction.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefKanbanCard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Jumps to the details form of the specified kanban card.
    /// </summary>
    public void jumpRefKanbanCard()
    {
        KanbanCard      kanbanCard = this.kanbanCard();

        if (kanbanCard)
        {
            Args args = new Args();
            args.record(kanbanCard);
            args.caller(this);
            MenuFunction menuFunction = new MenuFunction(menuitemdisplaystr(KanbanCirculatingCards), MenuItemType::Display);
            menuFunction.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanCard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>KanbanCard</c> record that is identified by the kanban card ID.
    /// </summary>
    /// <returns>
    ///    The <c>KanbanCard</c> record; otherwise and empty table buffer.
    /// </returns>
    public KanbanCard kanbanCard()
    {
        return KanbanCard::findCardId(this.kanbanCardId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanCardId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the kanban card ID value from the form.
    /// </summary>
    /// <returns>
    ///    The kanban card ID; otherwise an empty string.
    /// </returns>
    public KanbanCardId kanbanCardId()
    {
        return ctrlKanbanCardId.valueStr();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCirculatingCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a lookup which contains all circulating cards of the kanban rule, all the placing kanban
    /// rules, and all the replaced kanban rules.
    /// </summary>
    /// <param name="_callingControl">
    /// The string or table control that performs the lookup.
    /// </param>
    public void lookupCirculatingCard(FormControl _callingControl)
    {
        Query                   query = new Query();

        if (_callingControl)
        {
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(KanbanCard), _callingControl);
            QueryBuildDataSource qbdsKanbanCard = query.addDataSource(tableNum(KanbanCard));
            qbdsKanbanCard.addRange(fieldNum(KanbanCard,CardType)).value(enum2str(KanbanCardType::Circulating));

            QueryBuildDataSource qbdsKanban = qbdsKanbanCard.addDataSource(tablenum(Kanban));
            qbdsKanban.fetchMode(QueryFetchMode::One2One);
            qbdsKanban.joinMode(JoinMode::InnerJoin);
            qbdsKanban.relations(true);

            // Replaced kanban rules (Includes current kanban rule)
            KanbanRule kanbanRule = kanban.kanbanRule();
            while (kanbanRule)
            {
                qbdsKanban.addRange(fieldNum(Kanban,KanbanRule)).value(queryValue(kanbanRule.RecId));
                kanbanRule = kanbanRule.replacedRule();
            }

            // Replacing kanban rules
            kanbanRule = kanban.KanbanRule().replacingRule();
            while (kanbanRule)
            {
                qbdsKanban.addRange(fieldNum(Kanban,KanbanRule)).value(queryValue(kanbanRule.RecId));
                kanbanRule = kanbanRule.replacingRule();
            }

            sysTableLookup.parmQuery(query);
            sysTableLookup.addLookupfield(fieldNum(KanbanCard, CardID));
            sysTableLookup.addLookupfield(fieldNum(KanbanCard, Kanban));
            sysTableLookup.addLookupMethod(tableMethodStr(KanbanCard, KanbanId));

            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInvalidKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a lookup which contains all kanbans of the actual kanban rule or any of the replacing rules
    /// of the kanban.
    /// </summary>
    /// <param name="_callingControl">
    /// The string or table control that performs the lookup.
    /// </param>
    public void lookupInvalidKanban(FormControl _callingControl)
    {
        KanbanRule              kanbanRule     = kanban.kanbanRule();
        Query                   query          = new Query();
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(Kanban), _callingControl);

        QueryBuildDataSource qbdsKanbanCard = query.addDataSource(tableNum(Kanban));
        qbdsKanbanCard.addRange(fieldNum(Kanban,Status)).value(queryValue(LeanKanbanStatus::NotAssigned));

        while (kanbanRule)
        {
            qbdsKanbanCard.addRange(fieldNum(Kanban,KanbanRule)).value(queryValue(kanbanRule.RecId));
            kanbanRule = kanbanRule.replacedRule();
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.addLookupfield(fieldNum(Kanban, KanbanId));
        sysTableLookup.addLookupfield(fieldNum(Kanban, ItemId));
        sysTableLookup.addLookupfield(fieldNum(Kanban, QuantityOrdered));
        sysTableLookup.addLookupfield(fieldNum(Kanban, DueDateTime));
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedKanbanCard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the dependent fields assuming the kanban card was modified.
    /// </summary>
    public void modifiedKanbanCard()
    {
        Kanban  assignedKanban = kanban::findKanbanCardId(this.kanbanCardId());

        ctrlAssignedKanbanId.text(assignedKanban.KanbanId);

        // Check if the invalid kanban group should be checked by default
        this.ctrlGroupInvalidKanban().optionValue(this.defaultGroupInvalidKanbanOptionValue(assignedKanban));

        // Set default invalid kanban id

        if (assignedKanban
                 && this.validateInvalidKanban(assignedKanban.KanbanId,assignedKanban))
        {
            ctrlInvalidKanbanId.text(assignedKanban.KanbanId);
        }
        else
        {
            ctrlInvalidKanbanId.text('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
    public FormRun parmFormRun(FormRun _formRun = formRun)
    {
        formRun = _formRun;
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanban</Name>
				<Source><![CDATA[
    public Kanban parmKanban(Kanban _kanban = kanban)
    {
        if (kanban != _kanban)
        {
            kanbanResetEmptyValidate = KanbanResetEmptyValidate::newKanban(_kanban);
        }
        kanban = _kanban;
        return kanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetKanbanEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the reset kanban action was performed.
    /// </summary>
    /// <returns>
    /// true if the action was performed; otherwise, false.
    /// </returns>
    public boolean resetKanbanEmpty()
    {
        return KanbanResetEmptyFormHelper::resetKanbanEmptyServer(
                                                            kanban,
                                                            this.transDateTime(),
                                                            this.kanbanCard().RecId,
                                                            this.deleteInvalidKanban() ? this.invalidKanban().RecId : 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the data sources that are used in the rule computation process.
    /// </summary>
    /// <param name="datasources1">
    /// A <c>Common</c> record that belongs to the first data source instance.
    /// </param>
    /// <param name="datasources2">
    /// A <c>Common</c> record that belongs to the second data source instance; optional.
    /// </param>
    /// <param name="datasources3">
    /// A <c>Common</c> record that belongs to the third data source instance; optional.
    /// </param>
    /// <param name="datasources4">
    /// A <c>Common</c> record that belongs to the fourth data source instance; optional.
    /// </param>
    /// <param name="datasources5">
    /// A <c>Common</c> record that belongs to the fifth data source instance; optional.
    /// </param>
    /// <remarks>
    /// Up to five data sources can be passed. If the implementation requires more data sources, additional
    /// custom methods should be implemented on the rule implementer class.
    /// </remarks>
    public void setDatasources(Common datasources1, Common datasources2 = null, Common datasources3 = null, Common datasources4 = null, Common datasources5 = null)
    {
        // No data source is used
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the transaction date value from the form.
    /// </summary>
    /// <returns>
    ///    The transaction date.
    /// </returns>
    public TransDate transDate()
    {
        return ctrlTransactionDate.dateValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the transaction date and time that will be used by the reset kanban process.
    /// </summary>
    /// <param name="_transDateCompanyTimeZone">
    /// The transaction date in the company time zone; optional.
    /// </param>
    /// <returns>
    /// The transaction date and time as a UTC value.
    /// </returns>
    public TransDateTime transDateTime(TransDate _transDateCompanyTimeZone = this.transDate())
    {
        #TimeConstants
        TransDateTime       transDateTime;
        TransDateTime       dateTimeNow;
        TransDate           transDateTZ;

        if (_transDateCompanyTimeZone)
        {
            // UTC current date and time
            dateTimeNow   = DateTimeUtil::getSystemDateTime();

            // UTC date with current time
            transDateTime = DateTimeUtil::newDateTime(_transDateCompanyTimeZone,DateTimeUtil::time(dateTimeNow));
            transDateTZ   = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(transDateTime,DateTimeUtil::getCompanyTimeZone()));

            // if the resulting UTC date is before the company time zone date,
            // set the UTC date and time to the beginning of the day
            if (transDateTZ < _transDateCompanyTimeZone)
            {
                transDateTime = DateTimeUtil::newDateTime(_transDateCompanyTimeZone,0,DateTimeUtil::getCompanyTimeZone());
            }
            else
            {
                // if the resulting UTC date is after the company time zone date,
                // set the UTC date and time to the end of the day
                if (transDateTZ > _transDateCompanyTimeZone)
                {
                    transDateTime = DateTimeUtil::newDateTime(_transDateCompanyTimeZone,#secondsPerDay-1,
                                                              DateTimeUtil::getCompanyTimeZone());
                }
            }
        }
        else
        {
            transDateTime = DateTimeUtil::getSystemDateTime();
        }

        TransDate dateNowTZ = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(dateTimeNow,DateTimeUtil::getCompanyTimeZone()));
        transDateTZ = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(transDateTime,DateTimeUtil::getCompanyTimeZone()));

        // for any company time zone date in the future, set the time to the beginning of the day
        if (dateNowTZ < transDateTZ)
        {
            transDateTime = DateTimeUtil::newDateTime(transDateTZ,0,DateTimeUtil::getCompanyTimeZone());
        }
        else
        {
            // for any company time zone date in the past, set the time to the end of the day
            if (dateNowTZ > transDateTZ)
            {
                transDateTime = DateTimeUtil::newDateTime(transDateTZ,#secondsPerDay-1,DateTimeUtil::getCompanyTimeZone());
            }
        }

        return transDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvalidKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified kanban can be used as invalid kanban. Shows relevant warnings if
    /// the kanban cannot be used as invalid kanban.
    /// </summary>
    /// <param name="_invalidKanbanId">
    /// The kanban ID of the kanban to validate; optional.
    /// </param>
    /// <param name="_invalidKanban">
    /// The <c>Kanban</c> record to validate; optional.
    /// </param>
    /// <returns>
    /// true if the kanban can be used as invalid kanban; otherwise, false.
    /// </returns>
    public boolean validateInvalidKanban(
        KanbanId _invalidKanbanId = this.invalidKanbanId(),
        Kanban   _invalidKanban   = this.invalidKanban())
    {
        boolean result = kanbanResetEmptyValidate.validateInvalidKanban(_invalidKanban,_invalidKanbanId);

        if (!result)
        {
            warning(kanbanResetEmptyValidate.validationMessage());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateKanbanCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified kanban card can be used to reset the kanban status. Shows relevant
    /// warnings if the kanban card cannot be used for status reset.
    /// </summary>
    /// <returns>
    /// true if the kanban card can be used for the status reset; otherwise, false.
    /// </returns>
    public boolean validateKanbanCard()
    {
        KanbanCard  kanbanCard = this.kanbanCard();
        boolean     result     = kanbanResetEmptyValidate.validateKanbanCard(kanbanCard,this.kanbanCardId());

        if (!result)
        {
            warning(kanbanResetEmptyValidate.validationMessage());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified transaction date is valid.Shows a warning if the transaction date is
    /// not valid.
    /// </summary>
    /// <returns>
    /// true if the transaction date is valid; otherwise, false.
    /// </returns>
    public boolean validateTransDate()
    {
        boolean result = kanbanResetEmptyValidate.validateTransDate(this.transDate());

        if (!result)
        {
            warning(kanbanResetEmptyValidate.validationMessage());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static KanbanResetEmptyFormHelper construct()
    {
        return new KanbanResetEmptyFormHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>KanbanResetEmptyFormHelper</c> object.
    /// </summary>
    /// <param name="_formRun">
    /// The <c>FormRun</c> object that the helper class is used for.
    /// </param>
    /// <param name="_kanban">
    /// The <c>Kanban</c> record, that the form operates on.
    /// </param>
    /// <returns>
    /// A <c>KanbanResetEmptyFormHelper</c> object.
    /// </returns>
    public static KanbanResetEmptyFormHelper newStandard(
        FormRun _formRun,
        Kanban  _kanban)
    {
        KanbanResetEmptyFormHelper  kanbanResetEmptyFormHelper = KanbanResetEmptyFormHelper::construct();

        kanbanResetEmptyFormHelper.parmFormRun(_formRun);
        kanbanResetEmptyFormHelper.parmKanban(_kanban);
        kanbanResetEmptyFormHelper.init();

        return kanbanResetEmptyFormHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetKanbanEmptyServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the reset kanban action on the server tier.
    /// </summary>
    /// <param name="_kanban">
    ///    The <c>Kanban</c> record to reset.
    /// </param>
    /// <param name="_transDateTime">
    ///    The transaction date and time.
    /// </param>
    /// <param name="_kanbanCardRecId">
    ///    The <c>KanbanCard</c> record to assign to the kanban.
    /// </param>
    /// <param name="_deleteKanbanRecId">
    ///    The record ID of a kanban to delete.
    /// </param>
    /// <returns>
    ///    true if the action was performed; otherwise, false.
    /// </returns>
    private static boolean resetKanbanEmptyServer(
        Kanban          _kanban,
        TransDateTime   _transDateTime,
        KanbanCardRecId _kanbanCardRecId,
        KanbanRefRecId  _deleteKanbanRecId)
    {
        ttsBegin;
        KanbanStatus kanbanStatus = _kanban.status();

        // create parameters
        KanbanStatusUpdate kanbanStatusUpdate = kanbanStatusUpdate::makeParameters(
                                                                       kanbanStatus,
                                                                       LeanKanbanStatus::Received,
                                                                       true,
                                                                       false);

        kanbanStatusUpdate.TransactionDateTime = _transDateTime;
        kanbanStatusUpdate.KanbanCard          = _kanbanCardRecId;
        kanbanStatusUpdate.DeleteKanban        = _deleteKanbanRecId;
        kanbanStatusUpdate.insert();
        ttsCommit;

        // run status reset
        return kanbanStatus.runStatusReset(kanbanStatusUpdate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
