<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SourceDocumentLineStateContainerCleanerTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data maintenance task to clear out source document line state containers.
/// This job cleans historical data and helps to save space in DB.
/// StateContainer field can be cleaned for all SDL which AccountingStatus is equal to [Completed, Finalized, Canceled].
/// Exceptions (in case of corrections):
/// 1) For document type ProductReceipt do not clean SDL
/// 2) For document type ProductOrder clean only when AccountingStatus is equal to [Finalized, Canceled]
/// </summary>
internal final class SourceDocumentLineStateContainerCleanerTask implements IDataMaintenanceTask
{
    #OCCRetryCount
    private DataMaintenanceTaskResult taskResult;
    // Variable stores limit on how may records could be cleaned by one job
    private int maxRecordsToClean;
    // Variable stores upper time limit on cleaning. Job cleans documents
    // only after some period of time.
    private utcdatetime createdDateTimeUpperLimit;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        SourceDocumentParameters sourceDocumentParameters = SourceDocumentParameters::find();
        int fixMonthsToSkip = sourceDocumentParameters.SourceDocumentLineStateContainerCleanerMonthsToSkip;
        createdDateTimeUpperLimit = DateTimeUtil::addMonths(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), -fixMonthsToSkip);
        maxRecordsToClean = sourceDocumentParameters.SourceDocumentLineStateContainerCleanerTaskLimit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceCaption caption()
    {
        return literalStr("@SourceDocumentAccountingFramework:SourceDocumentLineStateContainerCleanerTask");
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceTaskResult run()
    {
        System.Exception ex;
        taskResult = DataMaintenanceTaskResult::construct();

        int64 recordsUpdatedCount;

        using (SysInstrumentationActivityContext activityContext = SourceDocumentLineStateContainerCleanerHelper::getActivityContextForRun())
        {
            recordsUpdatedCount = this.cleanStateContainerForProcessedDocuments(activityContext);
        }

        taskResult.parmCount(recordsUpdatedCount);

        return taskResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanDocumentsWithoutSpecialLogic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Function cleans all types of documents without exceptions.
    /// Exceptions: ProductReceipt, PurshaseOrder.
    /// For SDL StateContainer field is cleaned if AccountingStatus is in [Completed, Finalized, Canceled].
    /// </summary>
    /// <returns>Number of successfully cleaned records.</returns>
    private int64 cleanDocumentsWithoutSpecialLogic()
    {
        int64 impactedRows = 0;
        str statusesForDocumentTypesWithoutSpecialLogicStr = con2Str(SourceDocumentLineStateContainerCleanerHelper::accountingStatusesForDocumentsWithoutSpecialLogic);

        str sql = strFmt(@"
            UPDATE TOP (@limitOnRecordsUpdating) SDL
            SET SDL.STATECONTAINER = NULL
            FROM SOURCEDOCUMENTLINE SDL
            JOIN SOURCEDOCUMENTHEADER SDH ON SDH.RECID = SDL.SOURCEDOCUMENTHEADER
            WHERE
                SDL.STATECONTAINER IS NOT NULL
                AND SDL.CREATEDDATETIME <= @createdDateTimeUpperLimit
                AND SDL.PARTITION = @partitionId
                AND SDH.TYPEENUMNAME NOT IN ('SourceDocument_ProductReceipt','SourceDocument_ProductOrder')
                AND SDL.ACCOUNTINGSTATUS IN (%1)"
            , statusesForDocumentTypesWithoutSpecialLogicStr);

        Map paramMap = SqlParams::create();
        paramMap.add('limitOnRecordsUpdating', maxRecordsToClean);
        paramMap.add('createdDateTimeUpperLimit', DateTimeUtil::toStr(createdDateTimeUpperLimit));
        paramMap.add('partitionId', getCurrentPartitionRecId());

        impactedRows = SourceDocumentLineStateContainerCleanerHelper::executeSQL(sql, paramMap);

        return impactedRows;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanDocumentsWithTypeProductOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Function cleans one of exceptions - Purchase Order document type.
    /// For such document type only [Finalized, Canceled] Accounting Statuses are cleaned.
    /// </summary>
    /// <returns>Number of successfully cleaned records.</returns>
    private int64 cleanDocumentsWithTypeProductOrder()
    {
        int64 impactedRows = 0;
        str statusesForPurchaseOrderStr = con2Str(SourceDocumentLineStateContainerCleanerHelper::accountingStatusesForDocumentTypePurchaseOrder);

        str sql = strFmt(@"
            UPDATE TOP (@limitOnRecordsUpdating) SDL
            SET SDL.STATECONTAINER = NULL
            FROM SOURCEDOCUMENTLINE SDL
            JOIN SOURCEDOCUMENTHEADER SDH ON SDH.RECID = SDL.SOURCEDOCUMENTHEADER
            WHERE
                SDL.STATECONTAINER IS NOT NULL
                AND SDL.CREATEDDATETIME <= @createdDateTimeUpperLimit
                AND SDL.PARTITION = @partitionId
                AND SDH.TYPEENUMNAME = 'SourceDocument_ProductOrder'
                AND SDL.ACCOUNTINGSTATUS IN (%1)"
            , statusesForPurchaseOrderStr);

        Map paramMap = SqlParams::create();
        paramMap.add('limitOnRecordsUpdating', maxRecordsToClean);
        paramMap.add('createdDateTimeUpperLimit', DateTimeUtil::toStr(createdDateTimeUpperLimit));
        paramMap.add('partitionId', getCurrentPartitionRecId());

        impactedRows = SourceDocumentLineStateContainerCleanerHelper::executeSQL(sql, paramMap);

        return impactedRows;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanStateContainerForProcessedDocuments</Name>
				<Source><![CDATA[
    internal int64 cleanStateContainerForProcessedDocuments(SysInstrumentationActivityContext _actvityContext = null)
    {
        int64 impactedRows = 0;
        
        impactedRows += this.cleanDocumentsWithoutSpecialLogic();
        impactedRows += this.cleanDocumentsWithTypeProductOrder();

        if (_actvityContext)
        {
            _actvityContext.addCustomProperty(
                SourceDocumentInstrumentationConstants::NumberOfRecordsUpdatedInSourceDocumentLineStateContainerCleaner,
                int2Str(impactedRows));
        }

        if (taskResult)
        {
            taskResult.addMessage(
                DataMaintenanceMessageContract::constructForLabel(Exception::Info,
                literalStr("@SourceDocumentAccountingFramework:SourceDocumentLineStateContainerCleanerUpdateInfoMessage"),
                [int2Str(impactedRows)]));
        }
    
        return impactedRows;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>