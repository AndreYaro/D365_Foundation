<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceConvertFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PriceConvertFactory
{
    // <GEERU>
    #isoCountryRegionCodes
    // </GEERU>

    ItemId              itemId;
    InventDimId         inventDimId;

    Price               price;
    PriceQty            priceQty;
    InventPriceMarkup   markup;
    PriceUnit           priceUnit;
    CurrencyCode        currencyCode;
    UnitOfMeasureSymbol unitID;

    PriceUnit           newPriceUnit;
    boolean             newPriceUnitSet;
    CurrencyCode        newCurrencyCode;
    TransDate           transDate;
    boolean             newCurrencyCodeSet;
    UnitOfMeasureSymbol newUnitId;
    boolean             newUnitIdSet;
    PriceAllocateMarkup allocateMarkup;
    boolean             rounding;
    UnitOfMeasureSymbol intermediateUnitId;
    boolean             intermediateUnitIdSet;

    Price               priceSecCur;
    InventPriceMarkup   markupSecCur;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        itemId          = '';

        price           = 0;
        priceQty        = 0;
        markup          = 0;
        priceUnit       = 0;
        currencyCode    = '';
        unitID          = '';

        newPriceUnit    = 0;
        newCurrencyCode = '';
        transDate       = dateNull();
        newUnitId       = '';
        allocateMarkup  = NoYes::No;
        rounding        = false;

        newPriceUnitSet     = false;
        newCurrencyCodeSet  = false;
        newUnitIdSet        = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllocateMarkup</Name>
				<Source><![CDATA[
    public PriceAllocateMarkup parmAllocateMarkup(PriceAllocateMarkup _allocateMarkup = allocateMarkup)
    {
        if (!prmisdefault(_allocateMarkup))
        {
            allocateMarkup = _allocateMarkup;
        }

        return allocateMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmCurrencyCode(CurrencyCode _currencyCode = currencyCode)
    {
        if (!prmisdefault(_currencyCode))
        {
            currencyCode = _currencyCode;
        }

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntermediateUnitId</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmIntermediateUnitId(UnitOfMeasureSymbol _intermediateUnitId = intermediateUnitId)
    {
        if (!prmisdefault(_intermediateUnitId))
        {
            intermediateUnitId = _intermediateUnitId;
            intermediateUnitIdSet = true;
        }

        return intermediateUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    public InventDimId parmInventDimId(InventDimId _inventDimId = inventDimId)
    {
        inventDimId = _inventDimId;
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        if (!prmisdefault(_itemId))
        {
            itemId = _itemId;
        }

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkup</Name>
				<Source><![CDATA[
    public InventPriceMarkup parmMarkup(InventPriceMarkup _markup = markup)
    {
        if (!prmisdefault(_markup))
        {
            markup = _markup;
        }

        return markup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkupSecCur_RU</Name>
				<Source><![CDATA[
    public InventPriceMarkup parmMarkupSecCur_RU(InventPriceMarkup _markupSecCur = markupSecCur)
    {
        if (! prmisdefault(_markupSecCur))
        {
            markupSecCur = _markupSecCur;
        }

        return markupSecCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmNewCurrencyCode(CurrencyCode _newCurrencyCode = newCurrencyCode)
    {
        if (!prmisdefault(_newCurrencyCode))
        {
            newCurrencyCode = _newCurrencyCode;
            newCurrencyCodeSet = true;
        }

        return newCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewPriceUnit</Name>
				<Source><![CDATA[
    public PriceUnit parmNewPriceUnit(PriceUnit _newPriceUnit = newPriceUnit)
    {
        if (!prmisdefault(_newPriceUnit))
        {
            newPriceUnit = _newPriceUnit;
            newPriceUnitSet = true;
        }

        return newPriceUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewUnitId</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmNewUnitId(UnitOfMeasureSymbol _newUnitId = newUnitId)
    {
        if (!prmisdefault(_newUnitId))
        {
            newUnitId = _newUnitId;
            newUnitIdSet = true;
        }

        return newUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrice</Name>
				<Source><![CDATA[
    public Price parmPrice(Price _price = price)
    {
        if (!prmisdefault(_price))
        {
            price = _price;
        }

        return price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceQty</Name>
				<Source><![CDATA[
    public PriceQty parmPriceQty(PriceQty _priceQty = priceQty)
    {
        if (!prmisdefault(_priceQty))
        {
            priceQty = _priceQty;
        }

        return priceQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceSecCur_RU</Name>
				<Source><![CDATA[
    public Price parmPriceSecCur_RU(Price _priceSecCur = priceSecCur)
    {
        if (! prmisdefault(_priceSecCur))
        {
            priceSecCur = _priceSecCur;
        }

        return priceSecCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceUnit</Name>
				<Source><![CDATA[
    public PriceUnit parmPriceUnit(PriceUnit _priceUnit = priceUnit)
    {
        if (!prmisdefault(_priceUnit))
        {
            priceUnit = _priceUnit;
        }

        return priceUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRounding</Name>
				<Source><![CDATA[
    public boolean parmRounding(boolean _rounding = rounding)
    {
        if (!prmisdefault(_rounding))
        {
            rounding = _rounding;
        }

        return rounding;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        if (!prmisdefault(_transDate))
        {
            transDate = _transDate;
        }

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitId</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmUnitId(UnitOfMeasureSymbol _unitID = unitID)
    {
        if (!prmisdefault(_unitID))
        {
            unitID = _unitID;
        }

        return unitID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceConvert</Name>
				<Source><![CDATA[
    public PriceConvert priceConvert()
    {
        PriceConvert    priceConvert;

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            priceConvert = PriceConvert_BasePrice::newItemPrice(itemId, unitID, price, priceUnit, markup, priceQty, currencyCode, priceSecCur, markupSecCur);
        }
        else
        {
        // </GEERU>
            priceConvert = PriceConvert_BasePrice::newItemPrice(itemId, unitID, price, priceUnit, markup, priceQty, currencyCode);
        // <GEERU>
        }
        // </GEERU>

        if (allocateMarkup)
        {
            priceConvert = PriceConvert_AllocateMarkup::newAllocateMarkup(priceConvert);
        }

        if (newPriceUnitSet)
        {
            priceConvert = PriceConvert_PriceUnit::newPriceUnitConversion(priceConvert, newPriceUnit);
        }

        if (newUnitIdSet)
        {
            if (intermediateUnitIdSet)
            {
                priceConvert = PriceConvert_Unit::newUnitConversion(priceConvert, intermediateUnitId);
            }
            priceConvert = PriceConvert_Unit::newUnitConversion(priceConvert, newUnitId);
            priceConvert.parmInventDimId(inventDimId);
        }

        if (newCurrencyCodeSet)
        {
            priceConvert = PriceConvert_Currency::newCurrencyConversion(priceConvert, newCurrencyCode, transDate);
        }

        if (rounding)
        {
            priceConvert = PriceConvert_Rounding::newRounding(priceConvert);
        }

        return priceConvert;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static PriceConvertFactory construct()
    {
        return new PriceConvertFactory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newItemPriceByInventItemPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an new instance of the <c>PriceConvertFactory</c> class based on the item prices.
    /// </summary>
    /// <param name = "_inventItemPrice">The current instance of the item prices record.</param>
    /// <returns>An new instance of the <c>PriceConvertFactory</c> class.</returns>
    public static PriceConvertFactory newItemPriceByInventItemPrice(InventItemPrice _inventItemPrice)
    {
        return PriceConvertFactory::newItemPrice(
            _inventItemPrice.ItemId,
            _inventItemPrice.UnitID,
            _inventItemPrice.Price,
            _inventItemPrice.PriceUnit,
            _inventItemPrice.Markup,
            _inventItemPrice.PriceQty,
            '',
            _inventItemPrice.PriceSecCur_RU,
            _inventItemPrice.MarkupSecCur_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newItemPriceByInventItemPriceSim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an new instance of the <c>PriceConvertFactory</c> class based on the pending item prices.
    /// </summary>
    /// <param name = "_inventItemPriceSim">The current instance of the pending item prices record.</param>
    /// <returns>An new instance of the <c>PriceConvertFactory</c> class.</returns>
    public static PriceConvertFactory newItemPriceByInventItemPriceSim(InventItemPriceSim _inventItemPriceSim)
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return PriceConvertFactory::newItemPrice(
                _inventItemPriceSim.ItemId,
                _inventItemPriceSim.UnitID,
                _inventItemPriceSim.Price,
                _inventItemPriceSim.PriceUnit,
                _inventItemPriceSim.Markup,
                _inventItemPriceSim.PriceQty,
                '',
                _inventItemPriceSim.PriceSecCur_RU,
                _inventItemPriceSim.MarkupSecCur_RU);
        }
        else
        {
            return PriceConvertFactory::newItemPrice(
                _inventItemPriceSim.ItemId,
                _inventItemPriceSim.UnitID,
                _inventItemPriceSim.Price,
                _inventItemPriceSim.PriceUnit,
                _inventItemPriceSim.Markup,
                _inventItemPriceSim.PriceQty,
                '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newItemPrice</Name>
				<Source><![CDATA[
    public static PriceConvertFactory newItemPrice(ItemId                _itemId,
                                                   UnitOfMeasureSymbol   _unitID,
                                                   Price                 _price,
                                                   PriceUnit             _priceUnit,
                                                   InventPriceMarkup     _markup,
                                                   PriceQty              _priceQty,
                                                   CurrencyCode          _currencyCode,
                                                   Price                 _priceSecCur = 0,
                                                   InventPriceMarkup     _markupSecCur = 0)
    {
        PriceConvertFactory priceConvertFactory;
        priceConvertFactory = PriceConvertFactory::construct();
        priceConvertFactory.parmItemId(_itemId);
        priceConvertFactory.parmUnitId(_unitID);
        priceConvertFactory.parmPrice(_price);
        priceConvertFactory.parmPriceUnit(_priceUnit);
        priceConvertFactory.parmMarkup(_markup);
        priceConvertFactory.parmPriceQty(_priceQty);
        priceConvertFactory.parmCurrencyCode(_currencyCode);
        // <GEERU>
        priceConvertFactory.parmPriceSecCur_RU(_priceSecCur);
        priceConvertFactory.parmMarkupSecCur_RU(_markupSecCur);
        // </GEERU>

        return priceConvertFactory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    public static PriceConvertFactory newStandard()
    {
        return PriceConvertFactory::construct();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>