<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxableDocSalesParmLineRowDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Row data provider for sales parm line.
/// </summary>
public class TaxableDocSalesParmLineRowDataProvider extends TaxableDocSalesLineRowDataProvider
{
    SalesParmLine salesParmLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDispositionAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get disposition action from the transaction.
    /// </summary>
    /// <returns>
    /// The disposition action.
    /// </returns>
    protected DispositionAction getDispositionAction()
    {
        return salesParmLine.salesLine().returnDispositionCode().DispositionAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMainTable</Name>
				<Source><![CDATA[
    protected void initMainTable()
    {
        salesParmLine = mainRecord as salesParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelatedTables</Name>
				<Source><![CDATA[
    protected void initRelatedTables()
    {
        if (salesParmLine.inventTable())
        {
            ecoResProduct = ecoResProduct::find(salesParmLine.inventTable().Product);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustomsExportOrder_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if this is an import order or not.
    /// </summary>
    /// <returns>
    /// True if this transaction is an import order; otherwise, false.
    /// </returns>
    // <GIN>
    [Replaceable]
    protected boolean isCustomsExportOrder_IN()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    // </GIN>

    /// <summary>
    /// Gets reporting currency exchange rate
    /// </summary>
    /// <returns>
    /// Reporting currency exchange rate
    /// </returns>
    [Replaceable]
    protected ExchRate getReportingCurrencyExchangeRate(TaxableDocumentLineObject _lineObj)
    {
        return  super(_lineObj);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets accounting currency exchange rate
    /// </summary>
    /// <returns>
    /// Accounting currency exchange rate
    /// </returns>
    [Replaceable]
    protected ExchRate getAccountingCurrencyExchangeRate(TaxableDocumentLineObject _lineObj)
    {
        return super(_lineObj);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFixedExchangeRateAccountCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Has fixed exchange rate of accounting currency or not.
    /// </summary>
    /// <returns>True if has fixed exchange rate of accounting currency, otherwise false.</returns>
    protected boolean hasFixedExchangeRateAccountCurrency()
    {
        return this.getFixedExchRateFromSalesOrder() != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFixedExchangeRateAccountCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets fixed exchange rate of accounting currency.
    /// </summary>
    /// <returns>Fixed exchange rate of accounting currency.</returns>
    protected ExchRate getFixedExchangeRateAccountCurrency()
    {
        return this.getFixedExchRateFromSalesOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFixedExchangeRateReportCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Has fixed exchange rate of reporting currency or not.
    /// </summary>
    /// <returns>True if has fixed exchange rate of reporting currency, otherwise false.</returns>
    protected boolean hasFixedExchangeRateReportCurrency()
    {
        return this.getReportingCurrencyFixedExchRateFromSalesOrder() != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFixedExchangeRateReportCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets fixed exchange rate of reporting currency.
    /// </summary>
    /// <returns>Fixed exchange rate of reporting currency.</returns>
    protected ExchRate getFixedExchangeRateReportCurrency()
    {
        return this.getReportingCurrencyFixedExchRateFromSalesOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFixedExchRateFromSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets fixed exchange rate from SO header
    /// </summary>
    /// <returns>Fixed exchange rate from SO header</returns>
    private ExchRate getFixedExchRateFromSalesOrder()
    {
        if (!salesTable)
        {
            salesTable = SalesTable::find(salesParmLine.OrigSalesId); 
        }

        return salesTable.FixedExchRate / 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingCurrencyFixedExchRateFromSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets reporting currency fixed exchange rate from SO header
    /// </summary>
    /// <returns>Reporting currency fixed exchange rate from SO header</returns>
    private ExchRate getReportingCurrencyFixedExchRateFromSalesOrder()
    {
        if (!salesTable)
        {
            salesTable = SalesTable::find(salesParmLine.OrigSalesId);
        }

        return salesTable.ReportingCurrencyFixedExchRate / 100;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>