<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayAEFormController_SickList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The average earning form controller (sick list).
/// </summary>
class rPayAEFormController_SickList extends RPayAEFormController
{
    FormDataSource       rPaySickListPrevPeriod_ds;
    FormRealControl      controlRpayDayHourValue,
                         controlPayAverageValue,
                         controlAverageTotal;
    FormGroupControl     controlGroupAverage,
                         groupBonusControl,
                         familyGroupControl;
    FormStringControl    monthForCalcControl,
                         averageFundControl,
                         riseFactorControl,
                         averageTimeGroupCodeControl,
                         controlKinName,
                         controlRPayDayHour,
                         controlAverageRate;

    FormButtonControl    recalcPrevPeriodControl;
    FormCheckBoxControl  controlRecalcByPrevYears;

    FormDateControl      controlPayPeriod;

    FormMenuButtonControl rpayEmplPeriodTransControl, rpaySumModuleControl,  printControl;
    #define.controlRpayDayHourValue("RpayAverageEarnValue_PayDayHour")
    #define.controlPayAverageValue("RpayAverageEarnValue_AverageRate")
    #define.controlAverageTotal("AverageTotal")
    #define.controlGroupAverage("Average")
    #define.monthForCalcControl("MonthForCalc")
    #define.averageFundControl("AverageFund")
    #define.riseFactorControl("RiseFactor")
    #define.averageTimeGroupCodeControl("AverageTimeGroupCode")
    #define.groupBonusControl("GroupBonus")
    #define.recalcPrevPeriodControl("ButtonRecalcPrevWorkPeriod")
    #define.controlKinName("KinName")
    #define.familyGroupControl("FamilyGroup")
    #define.emplPeriodTransControl("RPayEmplPeriodTrans")
    #define.sumModuleControl("RPaySumModule")
    #define.printControl("MenuItemPrint")
    #define.controlRPayDayHour("RpayAverageEarnTrans_RPayDayHour")
    #define.controlAverageRate("AverageRate")
    #define.controlPayPeriod("RpayAverageEarnTrans_PayPeriod")
    #define.controlRecalcByPrevYears("RpayAverageEarnEmplPeriodTable_RecalcByPrevYears")

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formRun</Name>
				<Source><![CDATA[
    public FormRun formRun(FormRun _formRun = formRun)
    {
        super(_formRun);

        rPayAverageEarnValue_ds     = formRun.dataSource(tableStr(RPayAverageEarnValue));
        controlRpayDayHourValue     = formRun.design().controlName(#controlRpayDayHourValue);
        controlPayAverageValue      = formRun.design().controlName(#controlPayAverageValue);
        controlAverageTotal         = formRun.design().controlName(#controlAverageTotal);
        controlGroupAverage         = formRun.design().controlName(#controlGroupAverage);
        monthForCalcControl         = formRun.design().controlName(#monthForCalcControl);
        averageFundControl          = formRun.design().controlName(#averageFundControl);
        riseFactorControl           = formRun.design().controlName(#riseFactorControl);
        averageTimeGroupCodeControl = formRun.design().controlName(#averageTimeGroupCodeControl);
        groupBonusControl           = formRun.design().controlName(#groupBonusControl);
        recalcPrevPeriodControl     = formRun.design().controlName(#recalcPrevPeriodControl);
        controlKinName              = formRun.design().controlName(#controlKinName);
        familyGroupControl          = formRun.design().controlName(#familyGroupControl);
        rpayEmplPeriodTransControl  = formRun.design().controlName(#emplPeriodTransControl);
        rpaySumModuleControl        = formRun.design().controlName(#sumModuleControl);
        printControl                = formRun.design().controlName(#printControl);
        rPaySickListPrevPeriod_ds   = formRun.dataSource(tableStr(RPaySicklistPrevPeriod));
        controlRPayDayHour          = formRun.design().controlName(#controlRPayDayHour);
        controlAverageRate          = formRun.design().controlName(#controlAverageRate);
        controlPayPeriod            = formRun.design().controlName(#controlPayPeriod);
        controlRecalcByPrevYears    = formRun.design().controlName(#controlRecalcByPrevYears);

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormDesign</Name>
				<Source><![CDATA[
    #define.DateSeparatorNoneNone(20)
    #define.DefaultValue(0)
    #define.DateNotShow(1)
    public void updateFormDesign()
    {
        DictTable                       dictTable = new DictTable(tableNum(RPayAverageEarnEmplPeriodTable));
        FormDataObject                  formDataObject;
        FieldId                         fieldId;

        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable = this.getRPayAverageEarnEmplPeriodTable();
        boolean                         storno = rPayAverageEarnEmplPeriodTable.isReverseLine(),
                                        allowEdit = ! (rPayAverageEarnEmplPeriodTable.Included
                                                        || rPayAverageEarnEmplPeriodTable.PrevPaySickListId
                                                        || rPayAverageEarnEmplPeriodTable.RecalcSickListId
                                                        || storno);
        RPayAverageEarnEmplPeriodTable  recalcAverageEarnEmplPeriodTable;
        RPayAverageEarnEmplPeriodTable  previousAverageEarnEmplPeriodTable = rPayAverageEarnEmplPeriodTable;

        if (! formRun)
            return;

        if (rPayAverageEarnEmplPeriodTable.rPayDayHourCalc == RPayDayHourCalc::Day)
        {
            controlRpayDayHourTrans.label("@RUP355");
            controlRpayDayHourTrans.helpText("@RUP473");
            controlPayAverageTrans.label("@RUP471");
            controlPayAverageTrans.helpText("@RUP474");
            controlRpayDayHourValue.label("@RUP355");
            controlRpayDayHourValue.helpText("@RUP1212");
            controlPayAverageValue.label("@RUP471");
            controlPayAverageValue.helpText("@RUP474");
            controlAverageTotal.label("@RUP477");
            controlAverageTotal.helpText("@RUP477");
        }
        else
        {
            controlRpayDayHourTrans.label("@GLS105378");
            controlRpayDayHourTrans.helpText("@RUP475");
            controlPayAverageTrans.label("@RUP472");
            controlPayAverageTrans.helpText("@RUP476");
            controlRpayDayHourValue.label("@GLS105378");
            controlRpayDayHourValue.helpText("@RUP1213");
            controlPayAverageValue.label("@RUP472");
            controlPayAverageValue.helpText("@RUP476");
            controlAverageTotal.label("@RUP478");
            controlAverageTotal.helpText("@RUP478");
        }

        if (rPayAverageEarnEmplPeriodTable.RpaySickListType == RPaySickListType::Stavka)
        {
            controlGroupAverage.visible(false);
            monthForCalcControl.visible(false);
            averageFundControl.visible(false);
            riseFactorControl.visible(false);
            averageTimeGroupCodeControl.visible(false);
            groupBonusControl.visible(false);
            rPayAverageEarnTrans_ds.allowCreate(false);
            rPayAverageEarnTrans_ds.allowDelete(false);
        }
        else
        {
            monthForCalcControl.visible(true);
            averageFundControl.visible(true);
            riseFactorControl.visible(true);
            averageTimeGroupCodeControl.visible(true);
            groupBonusControl.visible(true);
            controlGroupAverage.visible(true);
            rPayAverageEarnTrans_ds.allowCreate(! rPayAverageEarnEmplPeriodTable.Included && ! rPayAverageEarnEmplPeriodTable.PrevPaySickListId);
            rPayAverageEarnTrans_ds.allowDelete(! rPayAverageEarnEmplPeriodTable.Included && ! rPayAverageEarnEmplPeriodTable.PrevPaySickListId);

            while (previousAverageEarnEmplPeriodTable.PrevPaySickListId)
            {
                previousAverageEarnEmplPeriodTable = previousAverageEarnEmplPeriodTable.previousSickList(true);
            }
            if (calcByPrevYears)
            {
                controlRPayDayHour.visible(rPayAverageEarnEmplPeriodTable.exclDaysApplicable());
                controlAverageRate.visible(false);
                controlPayPeriod.dateSeparator(#DateSeparatorNoneNone);
                controlPayPeriod.dateMonth(#DateNotShow);
                controlPayPeriod.dateDay(#DateNotShow);
                controlRecalcByPrevYears.visible(true);
            }
            else
            {
                controlRPayDayHour.visible(rPayAverageEarnEmplPeriodTable.exclDaysApplicable());
                controlAverageRate.visible(true);
                controlPayPeriod.dateSeparator(#DefaultValue);
                controlPayPeriod.dateMonth(#DefaultValue);
                controlPayPeriod.dateDay(#DefaultValue);
                controlRecalcByPrevYears.visible(false);
            }
        }

        if (rPayAverageEarnEmplPeriodTable.RpayIllType == RPayIllType::ChildCare ||
            rPayAverageEarnEmplPeriodTable.RpayIllType == RPayIllType::ChildCareHospital ||
            rPayAverageEarnEmplPeriodTable.RpayIllType == RPayIllType::ChildCareInv ||
            rPayAverageEarnEmplPeriodTable.RpayIllType == RPayIllType::ChildVacation)
        {
            familyGroupControl.visible(true);
        }
        else
        {
            familyGroupControl.visible(false);
        }

        if (rPayAverageEarnEmplPeriodTable.RpayIllType == RPayIllType::ChildVacation)
        {
            if (rPayAverageEarnEmplPeriodTable.isReverseLine())
            {
                rpayEmplPeriodTransControl.enabled(false);
                rpaySumModuleControl.enabled(true);
            }
            else
            {
                rpayEmplPeriodTransControl.enabled(true);
                rpaySumModuleControl.enabled(false);
            }
            printControl.enabled(false);
        }
        else
        {
            rpayEmplPeriodTransControl.enabled(false);
            rpaySumModuleControl.enabled(true);
            printControl.enabled(true);
        }

        rPayAverageEarnTrans_ds.allowEdit(! rPayAverageEarnEmplPeriodTable.Included && ! rPayAverageEarnEmplPeriodTable.PrevPaySickListId);
        rPayAverageEarnValue_ds.allowEdit(! rPayAverageEarnEmplPeriodTable.Included);
        rPayAverageEarnValue_ds.allowCreate(! rPayAverageEarnEmplPeriodTable.Included);
        rPayAverageEarnValue_ds.allowDelete(! rPayAverageEarnEmplPeriodTable.Included);

        rPayAverageEarnEmplPeriodTable_ds.allowDelete(! rPayAverageEarnEmplPeriodTable.Included);

        select firstonly recalcAverageEarnEmplPeriodTable
            where recalcAverageEarnEmplPeriodTable.RecalcSickListId == rPayAverageEarnEmplPeriodTable.RpaySickListId
               && recalcAverageEarnEmplPeriodTable.RecId            != rPayAverageEarnEmplPeriodTable.RecId;

        for (fieldId = dictTable.fieldNext(0); fieldId; fieldId = dictTable.fieldNext(fieldId))
        {
            formDataObject = rPayAverageEarnEmplPeriodTable_ds.object(fieldId);
            if (formDataObject)
            {
                switch (fieldId)
                {
                    case fieldNum(RPayAverageEarnEmplPeriodTable,Included):

                        if ( (rPayAverageEarnEmplPeriodTable.PayPeriod && (rPayAverageEarnEmplPeriodTable.PayPeriod < RPayParameters::payPeriod(rPayAverageEarnEmplPeriodTable.EmplId)))
                         || (rPayAverageEarnEmplPeriodTable.nextSickList() && !rPayAverageEarnEmplPeriodTable.CorrectedSickListId)
                         || recalcAverageEarnEmplPeriodTable)
                        {
                            formDataObject.allowEdit(false);
                        }
                        else
                        {
                            formDataObject.allowEdit(true);
                        }
                        break;
                    case fieldNum(RPayAverageEarnEmplPeriodTable, EndDate):
                        formDataObject.allowEdit((! rPayAverageEarnEmplPeriodTable.Included || rPayAverageEarnEmplPeriodTable.RpayIllType == RPayIllType::ChildVacation)
                            && ! rPayAverageEarnEmplPeriodTable.RecalcSickListId
                            && ! storno);
                        break;
                    case fieldNum(RPayAverageEarnEmplPeriodTable, RpaySickListId):
                    case fieldNum(RPayAverageEarnEmplPeriodTable, PrevPaySickListId):
                        formDataObject.allowEdit(! rPayAverageEarnEmplPeriodTable.Included
                            && ! rPayAverageEarnEmplPeriodTable.RecalcSickListId
                            && ! storno);
                        break;
                    case fieldNum(RPayAverageEarnEmplPeriodTable, RecalcSickListId):
                        formDataObject.allowEdit(! rPayAverageEarnEmplPeriodTable.Included
                            && ! rPayAverageEarnEmplPeriodTable.PrevPaySickListId
                            && ! storno);
                        break;
                    case fieldNum(RPayAverageEarnEmplPeriodTable, SickListRecalcNumber):
                        formDataObject.allowEdit(! rPayAverageEarnEmplPeriodTable.Included
                            && rPayAverageEarnEmplPeriodTable.RecalcSickListId
                            && ! storno);
                        break;
                    case fieldNum(RPayAverageEarnEmplPeriodTable, mrotStartDate):

                        if (rPayAverageEarnEmplPeriodTable.Included
                            || rPayAverageEarnEmplPeriodTable.LimitByMROT
                            || rPayAverageEarnEmplPeriodTable.nextSickList().RecId
                            || storno)
                        {
                            formDataObject.allowEdit(false);
                        }
                        else
                        {
                            formDataObject.allowEdit(true);
                        }
                        break;

                    case fieldNum(RPayAverageEarnEmplPeriodTable, mrotEndDate):

                        if (rPayAverageEarnEmplPeriodTable.Included
                            || rPayAverageEarnEmplPeriodTable.LimitByMROT
                            || rPayAverageEarnEmplPeriodTable.nextSickList().RecId
                            || storno)
                        {
                            formDataObject.allowEdit(false);
                        }
                        else
                        {
                            formDataObject.allowEdit(true);
                        }
                        break;

                    case fieldNum(RPayAverageEarnEmplPeriodTable, LimitByMROT):
                        formDataObject.allowEdit(!rPayAverageEarnEmplPeriodTable.Included
                            && !rPayAverageEarnEmplPeriodTable.mrotStartDate
                            && !rPayAverageEarnEmplPeriodTable.PrevPaySickListId
                            && !storno);
                        break;

                    case fieldNum(RPayAverageEarnEmplPeriodTable, HospitalType):
                        formDataObject.allowEdit((rPayAverageEarnEmplPeriodTable.previousSickList() || allowEdit)
                            && !rPayAverageEarnEmplPeriodTable.Included
                            && !storno);
                        break;

                    case fieldNum(RPayAverageEarnEmplPeriodTable, Hospital):
                        formDataObject.allowEdit((rPayAverageEarnEmplPeriodTable.previousSickList() || allowEdit)
                            && !rPayAverageEarnEmplPeriodTable.Included
                            && !storno);
                        break;

                    default:
                        formDataObject.allowEdit(allowEdit);
                }
            }
        }

        controlKinName.allowEdit(allowEdit);

        recalcPrevPeriodControl.enabled(allowEdit);
        rPaySickListPrevPeriod_ds.allowEdit(allowEdit);
        rPaySickListPrevPeriod_ds.allowCreate(allowEdit);
        rPaySickListPrevPeriod_ds.allowDelete(allowEdit);

        controlShowReverse.enabled(TransLink_RU::exist(rPayAverageEarnEmplPeriodTable.TableId,rPayAverageEarnEmplPeriodTable.RecId,rPayAverageEarnEmplPeriodTable.RecId));

        controlReverse.enabled(rPayAverageEarnEmplPeriodTable.PayPeriod < RPayParameters::payPeriod(rPayAverageEarnEmplPeriodTable.EmplId) &&
                               rPayAverageEarnEmplPeriodTable.Included &&
                               TransLink_RU::canReverse(rPayAverageEarnEmplPeriodTable.TableId, rPayAverageEarnEmplPeriodTable.RecId));

        rPayAverageEarnEmplPeriodTable_ds.object(fieldNum(RPayAverageEarnEmplPeriodTable, PartTimeCoefficient)).visible(true);
        rPayAverageEarnEmplPeriodTable_ds.object(fieldNum(RPayAverageEarnEmplPeriodTable, LimitByMROT)).visible(true);
        rPayAverageEarnEmplPeriodTable_ds.object(fieldNum(RPayAverageEarnEmplPeriodTable, CalcByMROT)).visible(true);
        rPayAverageEarnEmplPeriodTable_ds.object(fieldNum(RPayAverageEarnEmplPeriodTable, CorrectedSickListId)).visible(true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>