<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSDeferredLPReceiving</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class WHSDeferredLPReceiving extends WHSDeferredReceiving
{
    #WHSRF

    private WHSUOMStructure uomStructure;
    private WhsWorkTransType workTransType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    [SysObsolete('Use WHSDeferredLPReceivingFactory instead. Delete when WHSDeferredReceivingISOFlight is deleted. Also make the class and the workTransType method abstract', false, 25\07\2024)]
    internal static WHSDeferredLPReceiving newFromParameters(
        WHSRFPassthrough _pass,
        WHSUOMStructure _uomStructure,
        WHSRFMenuItemTable _menuItemTable,
        WHSDefaultContainerTypeCode _defaultContainerCode,
        WHSWorkTransType _workTransType)
    {
        WHSDeferredLPReceiving deferredReceiving = new WHSDeferredLPReceiving();

        deferredReceiving.initFromUOMStructure(_uomStructure);

        deferredReceiving.initFromParameters(_pass, _menuItemTable, _defaultContainerCode);

        deferredReceiving.parmWorkTransType(_workTransType);

        return deferredReceiving;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUOMStructure</Name>
				<Source><![CDATA[
    internal WHSUOMStructure parmUOMStructure(WHSUOMStructure _uomStructure = uomStructure)
    {
        uomStructure = _uomStructure;
        return uomStructure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkTransType</Name>
				<Source><![CDATA[
    internal WhsWorkTransType parmWorkTransType(WhsWorkTransType _workTransType = workTransType)
    {
        workTransType = _workTransType;
        return workTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromParameters</Name>
				<Source><![CDATA[
    protected internal void initFromParameters(WHSRFPassthrough _pass, WHSRFMenuItemTable _menuItemTable, WHSDefaultContainerTypeCode _defaultContainerCode)
    {
        super(_pass, _menuItemTable, _defaultContainerCode);

        if (WHSDeferredReceivingLPConstructorRefactoringFlight::instance().isEnabled())
        {
            workTransType = this.workTransType();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromUOMStructure</Name>
				<Source><![CDATA[
    internal void initFromUOMStructure(WHSUOMStructure _uomStructure = uomStructure)
    {
        uomStructure = _uomStructure;
        loadId = uomStructure.LoadId;
        shipmentId = uomStructure.ShipmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTransType</Name>
				<Source><![CDATA[
    internal WHSWorkTransType workTransType()
    {
        return WHSWorkTransType::Purch; // Return Purch until the class and method are made abstract.
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventDimFromPassAndASN</Name>
				<Source><![CDATA[
    private InventDimId createInventDimFromPassAndASN(WHSASNItem _asnItem)
    {
        InventDim newInventDim;
        InventDim asnItemInventDim = _asnItem.inventDim();

        newInventDim.initFromInventDim(passthroughInventDim);

        if (!newInventDim.InventStatusId)
        {
            newInventDim.InventStatusId = asnItemInventDim.InventStatusId;
        }

        if (WHSDeferredLPReceivingPopulateTrackingAndProductDimensionsFromASNFlight::instance().isEnabled())
        {
            ListEnumerator le = InventDimGroupSetup::newItemIdNoStorageDimensions(_asnItem.ItemId).activeFields().getEnumerator();

            while (le.moveNext())
            {
                FieldId inventDimFieldId = le.current();

                if (!newInventDim.(inventDimFieldId) && asnItemInventDim.(inventDimFieldId))
                {
                    newInventDim.(inventDimFieldId) = asnItemInventDim.(inventDimFieldId);
                }
            }
        }

        newInventDim.wMSLocationId = InventLocation::find(newInventDim.InventLocationId).wmsLocationIdDefaultReceipt;
        newInventDim = InventDim::findOrCreate(newInventDim);

        return newinventDim.inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDeferBasedOnPolicy</Name>
				<Source><![CDATA[
    internal boolean shouldDeferBasedOnPolicy()
    {
        WHSDeferredReceivingPolicy deferPolicy = WHSDeferredReceivingPolicy::find(deferredReceivingPolicyId);
        if (!deferPolicy || deferPolicy.DeferredReceivingPolicySelection == WHSDeferredReceivingPolicySelectionEnum::Never)
        {
            return false;
        }
        if (deferPolicy.DeferredReceivingPolicySelection == WHSDeferredReceivingPolicySelectionEnum::Always)
        {
            return true;
        }

        WHSASNItem asnItem;

        boolean perSelectionFulfilled = false;
        ItemId prevItemId;

        if (!uomStructure.HasPacks)
        {
            while select ItemId from asnItem
                group by ItemId
                where asnItem.Module == uomStructure.Module
                    && asnItem.ShipmentId == uomStructure.ShipmentId
                    && asnItem.LicensePlateId == uomStructure.LicensePlateId
            {
                if (WHSInventTable::isCatchWeightTagTracked(asnItem.ItemId))
                {
                    return false;
                }

                perSelectionFulfilled = perSelectionFulfilled ? true : this.shouldDeferBasedOnItemId(deferPolicy, asnItem.ItemId, prevItemId);
                prevItemId = asnItem.ItemId;
            }
        }
        else
        {
            WHSUOMStructure childUOMStructure;

            while select ItemId from asnItem
                group by ItemId
                where asnItem.Module == uomStructure.Module
                    && asnItem.ShipmentId == uomStructure.ShipmentId
            exists join childUOMStructure
                where childUOMStructure.LicensePlateId == asnItem.LicensePlateId
                    && childUOMStructure.LicensePlateParent == uomStructure.LicensePlateId
                    && childUOMStructure.Module == uomStructure.Module
                    && childUOMStructure.ShipmentId == uomStructure.ShipmentId
                    && !childUOMStructure.HasPacks
            {
                if (WHSInventTable::isCatchWeightTagTracked(asnItem.ItemId))
                {
                    return false;
                }

                perSelectionFulfilled = perSelectionFulfilled ? true : this.shouldDeferBasedOnItemId(deferPolicy, asnItem.ItemId, prevItemId);
                prevItemId = asnItem.ItemId;
            }
        }

        return perSelectionFulfilled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDeferBasedOnItemId</Name>
				<Source><![CDATA[
    private boolean shouldDeferBasedOnItemId(WHSDeferredReceivingPolicy _deferPolicy, ItemId _currentItemId, ItemId _prevItemId)
    {
        if (_deferPolicy.OnSerialTrackedItems == NoYes::Yes && InventTable::find(_currentItemId).isItemSerialNumberActivated())
        {
            return true;
        }

        if (_deferPolicy.OnMultipleItems == NoYes::Yes && _prevItemId && _prevItemId != _currentItemId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryToDeferLPReceiveOrder</Name>
				<Source><![CDATA[
    internal boolean tryToDeferLPReceiveOrder()
    {
        if (!WHSDeferredLPReceivingFlight::instance().isEnabled() || !this.shouldDeferBasedOnPolicy())
        {
            return false;
        }

        WHSASNItem asnItem;

        if (!uomStructure.HasPacks)
        {
            while select asnItem
                where asnItem.Module == uomStructure.Module
                    && asnItem.ShipmentId == uomStructure.ShipmentId
                    && asnItem.LicensePlateId == uomStructure.LicensePlateId
            {
                this.createMixedLPDataFromASNItem(asnItem);
            }
        }

        else
        {
            WHSUOMStructure childUOMStructure;

            while select asnItem
                where asnItem.Module == uomStructure.Module
                    && asnItem.ShipmentId == uomStructure.ShipmentId
            exists join childUOMStructure 
                where childUOMStructure.LicensePlateId == asnItem.LicensePlateId
                    && childUOMStructure.LicensePlateParent == uomStructure.LicensePlateId
                    && childUOMStructure.Module == uomStructure.Module
                    && childUOMStructure.ShipmentId == uomStructure.ShipmentId
                    && !childUOMStructure.HasPacks
            {
                this.createMixedLPDataFromASNItem(asnItem);
            }
        }

        if (this.parmDispositionCode() && WHSDeferredReceivingDispositionCodeAndUnitizedQtyFlight::instance().isEnabled())
        {
            WHSMixedLicensePlateReceipt receipt = WHSMixedLicensePlateReceipt::find(receiptId, true);
            if (receipt && receipt.DispositionCode != this.parmDispositionCode())
            {
                receipt.DispositionCode = this.parmDispositionCode();
                receipt.update();
            }
        }

        this.updateLicensePlateLevelsBasedOnUOMStructure();

        if (WHSDeferredReceivingBatchTaskBundleCreationContext::isInContext() && WHSDeferredReceivingBatchTaskBundleCreationFlight::instance().isEnabled())
        {
            WHSDeferredReceivingBatchTaskBundleCreationContext::getContext().addReceiptIdToProcess(receiptId);
        }
        else
        {
            WHSDeferredReceiving::createBatchTaskToProcessDeferredReceiving(WHSMixedLicensePlateReceipt::find(receiptId, true));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMixedLPDataFromASNItem</Name>
				<Source><![CDATA[
    private void createMixedLPDataFromASNItem(WHSASNItem _asnItem)
    {
        WHSMixedLicensePlateReceiptLine::mixedLPReceiveLineForDeferredReceiving(this.createInventDimFromPassAndASN(_asnItem),
            this.calculateMixedLicensePlateReceiptLineInventTransId(_asnItem),
            WHSCatchWeightHelper::convertInventQuantity(_asnItem.ItemId, _asnItem.UOM, _asnItem.Qty, _asnItem.InventDimId),
            _asnItem.CapturedWeight,
            receiptId,
            userId,
            menuItemName,
            loadId,
            shipmentId,
            containerTypeCode,
            this.parmWorkTransType(),
            _asnItem.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMixedLicensePlateReceiptLineInventTransId</Name>
				<Source><![CDATA[
    protected InventTransId calculateMixedLicensePlateReceiptLineInventTransId(WHSASNItem _asnItem)
    {
        return _asnItem.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLicensePlateLevelsBasedOnUOMStructure</Name>
				<Source><![CDATA[
    private void updateLicensePlateLevelsBasedOnUOMStructure()
    {
        if (uomStructure.HasPacks && !uomStructure.LicensePlateParent)
        {
            WHSUOMStructure childUOMStructure;

            select firstonly childUOMStructure
                    where childUOMStructure.LicensePlateParent == uomStructure.LicensePlateId;

            if (childUOMStructure)
            {
                WHSLicensePlate parentLicensePlate = WHSLicensePlate::find(uomStructure.LicensePlateId, true);
                parentLicensePlate.LicensePlateLevel  = 1;
                parentLicensePlate.update();

                WHSLicensePlate childLicensePlate;

                while select forupdate childLicensePlate
                exists join childUOMStructure
                    where childUOMStructure.LicensePlateParent == uomStructure.LicensePlateId
                        && childUOMStructure.Module == uomStructure.Module
                        && childUOMStructure.ShipmentId == uomStructure.ShipmentId
                        && childUOMStructure.LicensePlateId == childLicensePlate.LicensePlateId
                {
                    childLicensePlate.LicensePlateParent = uomStructure.LicensePlateId;
                    childLicensePlate.update();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>