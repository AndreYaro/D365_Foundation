<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSTransferLineUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSTransferLineUpdater</c> class is used to update values tracked in <c>WHSInventTransferLine</c> tag tables when transfer lines are updated.
/// </summary>
[WHSSourceLineTableUpdateAttribute(tableStr(InventTransferLine))]
class WHSTransferLineUpdater extends WHSSourceLineUpdater
{
    InventTransferLine inventTransferLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets global variables based on passed in common.
    /// </summary>
    /// <param name="_common">
    /// Common is a transfer line record.
    /// </param>
    /// <remarks>
    /// The transfer line should hold new values after an update.
    /// </remarks>
    public void initFromBuffer(Common _common)
    {
        this.setCommonBuffer(_common);
        
        if (PdsGlobal::pdsIsCWItem(inventTransferLine.ItemId))
        {
            newInventHandlingQty = inventTransferLine.PdsCWQtyRemainShip;
        }
        else
        {
            newInventHandlingQty = inventTransferLine.QtyRemainShip;
        }

        productRefRecId = InventTable::itemProduct(inventTransferLine.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the appropriate <c>WHSInventTransferLine</c> record based on changes to the related transfer line record.
    /// </summary>
    public void updateTable()
    {
        if (newInventHandlingQty != oldInventHandlingQty || loadLineDiffHandlingQty)
        {
            ttsbegin;

            WHSInventTransferLine whsInventTransferLine = WHSInventTransferLine::find(inventTransferLine.RecId, true);
            if (loadLineDiffHandlingQty < 0)
            {
                whsInventTransferLine.QtyLeftToLoad = 0;
            }
            else
            {
                whsInventTransferLine.QtyLeftToLoad += (newInventHandlingQty - oldInventHandlingQty) - loadLineDiffHandlingQty;
            }

            if (loadLineDiffHandlingQty && whsInventTransferLine.ReleasedQty)
            {
                whsInventTransferLine.ReleasedQty += loadLineDiffHandlingQty;
            }

            whsInventTransferLine.update();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCommonBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets <c>SalesLine</c> variable based on the passed in common.
    /// </summary>
    /// <param name="_common">
    /// Common is a sales line record.
    /// </param>
    internal protected void setCommonBuffer(Common _common)
    {
        if (!(_common is InventTransferLine))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        inventTransferLine = _common as InventTransferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemIdFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>ItemId</c> from the <c>InventTransferLine</c>
    /// </summary>
    /// <returns>
    /// <c>ItemId</c> from the the <c>InventTransferLine</c> record
    /// </returns>
    [Hookable(false)]
    internal protected ItemId getItemIdFromBuffer()
    {
        return inventTransferLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHandlingUpdateQuantitiesOverrideNewQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set global parameters for the class.
    /// </summary>
    /// <param name="_common">
    /// Record buffer which holds the 'new' values of the source line.
    /// </param>
    /// <param name="_oldInventHandlingQty">
    /// The previous inventHandlingQty value of the record buffer.
    /// </param>
    /// <param name="_newInventHandlingQty">
    /// The new inventHandlingQty value of the record buffer.
    /// </param>
    /// <param name="_oldUOMSymbol">
    /// The previous UOMSymbol of the record buffer.
    /// </param>
    /// <param name="_loadLineDiffHandlingQty">
    /// The change in loadLine handling qty. (New - old)
    /// </param>
    /// <remarks>
    /// The method overrides newInventHandlingQty value.
    /// </remarks>
    [Hookable(false)]
    public void setHandlingUpdateQuantitiesOverrideNewQty(
        Common              _common,
        InventHandlingQty   _oldInventHandlingQty,
        InventHandlingQty   _newInventHandlingQty,
        UnitOfMeasureSymbol _oldUOMSymbol,
        InventHandlingQty   _loadLineDiffHandlingQty)
    {
        this.setHandlingUpdateQuantities(_common, _oldInventHandlingQty, _oldUOMSymbol, _loadLineDiffHandlingQty);

        newInventHandlingQty = _newInventHandlingQty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>