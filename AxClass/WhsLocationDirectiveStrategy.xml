<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsLocationDirectiveStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsLocationDirectiveStrategy</c> class is the abstract base class for location directive strategies.
/// </summary>
/// <remarks>The strategy classes must not contain any state, as the instance will be reused for performance reasons.</remarks>
abstract class WhsLocationDirectiveStrategy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the current configuration.
    /// </summary>
    /// <param name = "_locDirTable">The location directive to validate.</param>
    /// <param name = "_locDirLine">The location directive line to validate.</param>
    /// <param name = "_locDirAction">The location directive action to validate.</param>
    /// <returns>
    /// true if the selected strategy is allowed for the current configuration; otherwise, false
    /// </returns>
    public boolean validate(
        WHSLocDirTable  _locDirTable,
        WHSLocDirLine   _locDirLine,
        WHSLocDirAction _locDirAction)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reliesOnDimensionsBelowLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if the strategy relies on dimensions below location.
    /// </summary>
    /// <returns>
    /// true if strategy relies on dimensions below location; otherwise, false.
    /// </returns>
    public boolean reliesOnDimensionsBelowLocation()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requiresBatchDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if the strategy is dependent on the batch dimension.
    /// </summary>
    /// <returns>
    /// true if strategy requires the batch dimension; otherwise, false.
    /// </returns>
    public boolean requiresBatchDimension()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApplicableForParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the strategy applies for the specified parameters
    /// </summary>
    /// <param name = "_params">Location directive strategy parameters.</param>
    /// <returns>true, if the location directive strategy is applicable; otherwise, false.</returns>
    public boolean isApplicableForParameters(WhsLocationDirectiveStrategyParameters _params)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useVolumetricsOptimization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if volumetric optimization should be enabled.
    /// </summary>
    /// <returns>
    /// true, if volumetric optimization should be enabled; otherwise, false.
    /// </returns>
    public boolean useVolumetricsOptimization()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useMixedLocationOptimization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if mixed location optimization should be enabled.
    /// </summary>
    /// <returns>
    /// true, if mixed location optimization should be enabled; otherwise, false.
    /// </returns>
    public boolean useMixedLocationOptimization()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyPickLocDirActionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the pick location query on the action line.
    /// </summary>
    /// <param name = "_actionQuery">The location directive action class for the action line.</param>
    /// <param name = "_query">The query to modify.</param>
    /// <returns>true, if the strategy modified the query; otherwise, false.</returns>
    public boolean modifyPickLocDirActionQuery(WhsLocationDirectiveActionQuery _actionQuery, Query _query)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyPutLocDirActionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the put location query on the action line.
    /// </summary>
    /// <param name = "_actionQuery">The location directive action class for the action line.</param>
    /// <param name = "_query">The query to modify.</param>
    /// <returns>true, if the strategy modified the query; otherwise, false.</returns>
    public boolean modifyPutLocDirActionQuery(WhsLocationDirectiveActionQuery _actionQuery, Query _query)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyPutLocDirMultiSkuActionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the put location query on the action line.
    /// </summary>
    /// <param name = "_actionQuery">The location directive action class for the action line.</param>
    /// <param name = "_query">The query to modify.</param>
    /// <returns>true, if the strategy modified the query; otherwise, false.</returns>
    public boolean modifyPutLocDirMultiSkuActionQuery(WhsLocationDirectiveMultiSkuActionQuery _actionQuery, Query _query)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckNonLPLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if the strategy requires checking of non-license plate locations.
    /// </summary>
    /// <returns>
    /// true if strategy requires checking of non-license plate locations; otherwise, false.
    /// </returns>
    public boolean mustCheckNonLPLocation()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionsRequiredToChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a <c>Set</c> of InventDim field names describing if a location should be skipped if it has these dimensions in common with the previous location.
    /// </summary>
    /// <returns>The set.</returns>
    public Set dimensionsRequiredToChange()
    {
        Set result = new Set(Types::String);
        result.add(fieldStr(InventDim, WMSLocationId));
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performStrategy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the strategy.
    /// </summary>
    /// <param name="_locationDirective">
    /// The location directive instance to set the result of the strategy on.
    /// </param>
    /// <param name="_parameters">
    /// The parameters for the strategy.
    /// </param>
    /// <returns>
    /// true if the strategy is successful; otherwise, false.
    /// </returns>
    abstract public boolean performStrategy(
        WhsLocationDirective _locationDirective,
        WhsLocationDirectiveStrategyParameters _parameters)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>singletonFromStrategy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the singleton instance of a <c>WhsLocationDirectiveStrategy</c> class based on a <c>WHSLocDirStrategy</c> enum.
    /// </summary>
    /// <param name = "_strategy">The strategy enum determining the sub-class.</param>
    /// <returns>A strategy instance; or null.</returns>
    static public WhsLocationDirectiveStrategy singletonFromStrategy(WHSLocDirStrategy _strategy)
    {
        WhsLocationDirectiveStrategyFactoryAttribute attribute = new WhsLocationDirectiveStrategyFactoryAttribute(_strategy);
        WhsLocationDirectiveStrategy instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WhsLocationDirectiveStrategy), attribute) as WhsLocationDirectiveStrategy;
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFirstOrderByField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a sort field as the first sort in the query.
    /// </summary>
    /// <param name="_query"> A <c>Query</c> object. The parameter will be modified since it is reference variable. </param>
    /// <param name="_sortTableId"> Sorted table identifier </param>
    /// <param name="_sortFieldId"> Sorted field identifier </param>
    /// <param name="_sortDirection"> Sorted direction type </param>
    final protected void addFirstOrderByField(Query _query,
        TableId _sortTableId,
        FieldId _sortFieldId,
        SortOrder _sortDirection)
    {
        container conSortFields;

        // Loop over current sort fields and store them in containers
        for (var i = 1; i <= _query.orderByFieldCount(); ++i)
        {
            QueryOrderByField orderByField = _query.orderByField(i);
            conSortFields += [[orderByField.dataSource().table(), orderByField.fieldID(), orderByField.direction()]];
        }

        // Remove all sort fields on the query
        _query.clearOrderBy();

        // Add first sort order field
        _query.dataSourceTable(_sortTableId).addOrderByField(_sortFieldId, _sortDirection);

        // Loop over the container of sort fields and add them back in order.
        for (var i = 1; i <= conLen(conSortFields); ++i)
        {
            container dsContainer = conPeek(conSortFields, i);
            _query.dataSourceTable(conPeek(dsContainer, 1)).addOrderByField(conPeek(dsContainer, 2), conPeek(dsContainer, 3));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>