<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTaxCategoryDepreciationDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetTaxCategoryDepreciationDP</c> class is the data provider for the <c>AssetTaxCategoryDepreciationReport</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(AssetTaxCategoryDepreciationReport)),
    SRSReportParameterAttribute(classStr(AssetTaxCategoryDepreciationContract))
]
public class AssetTaxCategoryDepreciationDP extends SRSReportDataProviderPreProcessTempDB
{
    AssetTaxCategoryDepreciationTmp assetTaxCategoryDepreciationTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetTaxCategoryDepreciationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>AssetTaxCategoryDepreciationTmp</c> table.
    /// </summary>
    /// <returns>
    /// The <c>AssetTaxCategoryDepreciationTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AssetTaxCategoryDepreciationTmp))
    ]
    public AssetTaxCategoryDepreciationTmp getAssetTaxCategoryDepreciationTmp()
    {
        select assetTaxCategoryDepreciationTmp;
        return assetTaxCategoryDepreciationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        AssetTaxDepr_LV assetTaxPeriodHelper;
        AssetTaxDeprCategory_LV assetTaxCategory, assetTaxCategoryHelper;
        AssetTaxDepreciationCategoryDetail assetTaxDetail, assetTaxDetailHelper;
        AssetBookTable categoryBook;
        AssetBookId categoryId;
        ValidFromDate currentPeriodStartDate;

        TransDate minimumDate = dateNull(), maximumDate = maxDate();

        QueryRun queryRun = new QueryRun(this.parmQuery());
        AssetTaxCategoryDepreciationContract contract = this.parmDataContract() as AssetTaxCategoryDepreciationContract;
        boolean showAssetInformation = contract.parmShowAssetInformation();

        RecordInsertList recordInsertList = new RecordInsertList(
            tableNum(AssetTaxCategoryDepreciationTmp),
            true,
            true,
            true,
            false,
            true,
            assetTaxCategoryDepreciationTmp);

        while (queryRun.next())
        {
            assetTaxCategoryDepreciationTmp.clear();

            if (showAssetInformation)
            {
                // Asset level report
                assetTaxDetail = queryRun.get(tableNum(AssetTaxDepreciationCategoryDetail)) as AssetTaxDepreciationCategoryDetail;

                if (!categoryId)
                {
                    // All assets will belong to the same category so read it once and reuse
                    categoryId = AssetTaxDeprCategory_LV::find(assetTaxDetail.AssetTaxDeprCategoryRecId).CategoryId;
                    categoryBook = AssetBookTable::find(categoryId);
                }

                assetTaxCategoryDepreciationTmp.AcquisitionAdjustment =
                    categoryBook.roundOffDepreciation(assetTaxDetail.ValueChange - assetTaxDetail.WriteUpAdjustment - assetTaxDetail.WriteDownAdjustment);
                assetTaxCategoryDepreciationTmp.AdjustedAcquisitionValue = categoryBook.roundOffDepreciation(assetTaxDetail.Acquired * assetTaxDetail.Coefficient);
                assetTaxCategoryDepreciationTmp.AdjustedValue = assetTaxDetail.CalcFrom;
                assetTaxCategoryDepreciationTmp.AssetId = assetTaxDetail.AssetId;
                assetTaxCategoryDepreciationTmp.CategoryId = categoryId;
                assetTaxCategoryDepreciationTmp.DepreciationValue = assetTaxDetail.Depreciation;
                assetTaxCategoryDepreciationTmp.DisposalValue = assetTaxDetail.Disposed;
                assetTaxCategoryDepreciationTmp.EndBalance = assetTaxDetail.EndBalance;
                assetTaxCategoryDepreciationTmp.StartBalance = assetTaxDetail.StartBalance;
                assetTaxCategoryDepreciationTmp.WriteUpAdjustment = assetTaxDetail.WriteUpAdjustment;
                assetTaxCategoryDepreciationTmp.WriteDownAdjustment = assetTaxDetail.WriteDownAdjustment;

                // Get the start date for the asset's calculation period
                select firstonly validTimeState(minimumDate, maximumDate) ValidFrom from assetTaxPeriodHelper
                    exists join assetTaxCategoryHelper
                        where assetTaxPeriodHelper.RecId == assetTaxCategoryHelper.AssetTaxDeprRecId
                            && assetTaxCategoryHelper.RecId == assetTaxDetail.AssetTaxDeprCategoryRecId;

                currentPeriodStartDate = assetTaxPeriodHelper.ValidFrom;

                // Sum up depreciation from current and previous periods for this asset
                select firstonly validTimeState(minimumDate, maximumDate) sum(Depreciation) from assetTaxDetailHelper
                    exists join assetTaxCategoryHelper
                        where assetTaxCategoryHelper.RecId == assetTaxDetailHelper.AssetTaxDeprCategoryRecId
                            && assetTaxDetailHelper.AssetId == assetTaxDetail.AssetId
                    exists join assetTaxPeriodHelper
                        where assetTaxPeriodHelper.RecId == assetTaxCategoryHelper.AssetTaxDeprRecId
                            && assetTaxPeriodHelper.ValidFrom <= currentPeriodStartDate;

                assetTaxCategoryDepreciationTmp.AccumulatedDepreciationValue = assetTaxDetailHelper.Depreciation;

                recordInsertList.add(assetTaxCategoryDepreciationTmp);
            }
            else
            {
                // Category level report
                assetTaxCategory = queryRun.get(tableNum(AssetTaxDeprCategory_LV)) as AssetTaxDeprCategory_LV;

                categoryBook = AssetBookTable::find(assetTaxCategory.CategoryId);
                assetTaxCategoryDepreciationTmp.AdjustedAcquisitionValue = categoryBook.roundOffDepreciation(assetTaxCategory.Acquired * assetTaxCategory.Coefficient);
                assetTaxCategoryDepreciationTmp.AdjustedValue = assetTaxCategory.CalcFrom;
                assetTaxCategoryDepreciationTmp.AssetId = '';
                assetTaxCategoryDepreciationTmp.CategoryId = assetTaxCategory.CategoryId;
                assetTaxCategoryDepreciationTmp.DepreciationValue = assetTaxCategory.Depreciation;
                assetTaxCategoryDepreciationTmp.DisposalValue = assetTaxCategory.Disposed;
                assetTaxCategoryDepreciationTmp.EndBalance = assetTaxCategory.EndBalance;
                assetTaxCategoryDepreciationTmp.StartBalance = assetTaxCategory.StartBalance;

                select sum(WriteUpAdjustment), sum(WriteDownAdjustment), sum(ValueChange) from assetTaxDetailHelper
                    where assetTaxDetailHelper.AssetTaxDeprCategoryRecId == assetTaxCategory.RecId;

                assetTaxCategoryDepreciationTmp.WriteUpAdjustment = assetTaxDetailHelper.WriteUpAdjustment;
                assetTaxCategoryDepreciationTmp.WriteDownAdjustment = assetTaxDetailHelper.WriteDownAdjustment;
                assetTaxCategoryDepreciationTmp.AcquisitionAdjustment =
                    categoryBook.roundOffDepreciation(assetTaxDetailHelper.ValueChange - assetTaxDetailHelper.WriteUpAdjustment - assetTaxDetailHelper.WriteDownAdjustment);

                // Get the start date for the category's calculation period
                currentPeriodStartDate = AssetTaxDepr_LV::find(assetTaxCategory.AssetTaxDeprRecId).ValidFrom;

                // Sum up depreciation from current and previous periods for this category
                select validTimeState(minimumDate, maximumDate) sum(Depreciation) from assetTaxCategoryHelper
                    exists join assetTaxPeriodHelper
                        where assetTaxPeriodHelper.RecId == assetTaxCategoryHelper.AssetTaxDeprRecId
                            && assetTaxPeriodHelper.ValidFrom <= currentPeriodStartDate
                            && assetTaxCategoryHelper.CategoryId == assetTaxCategory.CategoryId;

                assetTaxCategoryDepreciationTmp.AccumulatedDepreciationValue = assetTaxCategoryHelper.Depreciation;

                recordInsertList.add(assetTaxCategoryDepreciationTmp);
            }
        }

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>