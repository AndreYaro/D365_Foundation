<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ERPrintMgmtDataProviderReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// The <c>ERPrintMgmtDataProviderReport</c> class helps to run ER report on ssrs process.
/// </summary>
public class ERPrintMgmtDataProviderReport
{
    private const static str DataContractName = 'ReportDataContract';
    private const static str DataProviderName = 'ReportDataProvider';
    private const static str DataRDLContractName = 'ReportRDLDataContract';
    private const static str PrintMgmtSettingDetailName = 'PrintMgmtPrintSettingDetail';

    protected SrsReportRunController reportRunController;
    protected SrsReportDataContract reportDataContract;
    protected SRSReportDataProviderBase reportDataProvider;
    protected PrintMgmtPrintSettingDetail printMgmtPrintSettingDetail;
    protected Common queryTableBuffer;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runER</Name>
				<Source><![CDATA[
    private str runER(RecId _formatMappingRecId, ERIFileDestination _fileDestination = null)
    {
        if (!_formatMappingRecId)
        {
            throw error("@AccountsReceivable:ExpectedFormatMappingNotFound");
        }

        ERSingleModelBinding modelBinding;

        select firstonly SpecificModel from modelBinding
            where modelBinding.FormatBinding == _formatMappingRecId;

        Name modelName = ERDataModelTable::find(modelBinding.SpecificModel).Name;

        ERIFormatMappingRun mappingRun = ERObjectsFactory::createFormatMappingRunByFormatMappingId(
           _formatMappingRecId);

        if (reportDataContract)
        {
            if (reportDataContract.parmRdpName())
            {
                reportDataProvider = this.initDataProvider();
                if (reportDataProvider)
                {
                    mappingRun.withCreatingObjectParameter(modelName, DataProviderName, reportDataProvider);
                }
            }

            if (reportDataContract.parmRdpContract())
            {
                mappingRun.withCreatingObjectParameter(modelName, DataContractName, reportDataContract.parmRdpContract());
            }

            if (reportDataContract.parmRdlContract())
            {
                mappingRun.withCreatingObjectParameter(modelName, DataRDLContractName, reportDataContract.parmRdlContract());
            }

            SrsPrintMgmtExecutionInfo printMgmtExecutionInfo = reportDataContract.parmReportExecutionInfo();

            if (printMgmtExecutionInfo && printMgmtExecutionInfo.parmRdpPreProcessedId() != 0)
            {
                ERSSRSReportDataSetTransformService::setCurrentRdpPreProcessedId(printMgmtExecutionInfo.parmRdpPreProcessedId());
            }

        }

        if (printMgmtPrintSettingDetail)
        {
            mappingRun.withCreatingObjectParameter(modelName, PrintMgmtSettingDetailName, printMgmtPrintSettingDetail);
        }

        if (reportRunController)
        {
            if (reportRunController is FreeTextInvoiceController)
            {
                mappingRun = this.getFreeTextInvoiceMappingRunParameters(mappingRun);

                if (FeatureStateProvider::isFeatureEnabled(FreeTextInvoiceERFormatUseRDPModelMappingEnableFeature::instance()))
                {
                    this.addRDPIntegrationPoint(mappingRun);
                }
                else
                {
                    this.addCustInvoiceJourIntegrationPoint(mappingRun);
                }
            }
            else
            {
                this.addRDPIntegrationPoint(mappingRun);
            }

            Query reportQuery = reportRunController.getFirstQuery();

            if (reportQuery)
            {
                QueryBuildDataSource qbds = reportQuery.dataSourceNo(1);

                if (qbds)
                {
                    mappingRun.withParameter(new ERModelDefinitionDatabaseContext().addQuery(qbds.file(), reportQuery));
                }
            }

            this.setMappingRunDestinationAction(mappingRun);

            this.setMappingRunNamedDestination(mappingRun);

            this.setFormatDestination(mappingRun);
        }

        if (_fileDestination)
        {
            mappingRun.withFileDestination(_fileDestination);
        }

        this.preRunAction(mappingRun);

        str ret = mappingRun.run();

        if (ret)
        {
            this.executePostReportRun(reportRunController, reportDataContract);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRDPIntegrationPoint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds Report Data Provider integration point parameter to the mapping run.
    /// </summary>
    /// <param name = "_mappingRun">MappingRun object.</param>
    [Replaceable]
    protected void addRDPIntegrationPoint(ERIFormatMappingRun _mappingRun)
    {
        ERIIntegrationPoint ip = new ERIntegrationPointFactory().WithObjectIntegrationPoint(
            classId2Name(classIdGet(reportDataProvider))).ToIntegrationPoint();
        _mappingRun.withIntegrationPoint(ip);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustInvoiceJourIntegrationPoint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds CustInvoiceJour integration point parameter to the mapping run.
    /// </summary>
    /// <param name = "_mappingRun">MappingRun object.</param>
    [Replaceable]
    protected void addCustInvoiceJourIntegrationPoint(ERIFormatMappingRun _mappingRun)
    {
        ERIIntegrationPoint ip = new ERIntegrationPointFactory().WithTableRecordsIntegrationPoint(tableStr(CustInvoiceJour)).ToIntegrationPoint();
        _mappingRun.withIntegrationPoint(ip);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method called just before MappingRun object run.
    /// Should be used in extension classes.
    /// </summary>
    /// <param name = "_mappingRun">MappingRun object.</param>
    protected void preRunAction(ERIFormatMappingRun _mappingRun)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRunAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method called after MappingRun object run taking its results as arguments.
    /// Should be used in extension classes.
    /// </summary>
    /// <param name = "_fileName">Name of the result report file.</param>
    /// <param name = "_fileStream">Stream of the result report file.</param>
    protected void postRunAction(str _fileName, System.IO.Stream _fileStream)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataProvider</Name>
				<Source><![CDATA[
    private SRSReportDataProviderBase initDataProvider()
    {
        SRSReportDataProviderBase dataProvider = SrsReportProviderQueryBuilder::createReportProviderQueryBuilder(reportDataContract).getReportDataProvider();

        if (dataProvider is SrsReportDataProviderPreProcess)
        {
            SrsReportDataProviderPreProcess dpPreProcess = dataProvider;

            dpPreProcess.parmCreatedTransactionId(SrsReportPreProcessedDetails::findByRecId(
                reportDataContract.parmReportExecutionInfo().parmRdpPreProcessedId(),
                reportDataContract.parmRdpName()).
                    CreatedTransactionId);
        }

        return dataProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportDataContract</Name>
				<Source><![CDATA[
    private void setReportDataContract(SrsReportDataContract _reportDataContract)
    {
        reportDataContract = _reportDataContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportRunController</Name>
				<Source><![CDATA[
    private void setReportRunController(SrsReportRunController _reportRunController)
    {
        reportRunController = _reportRunController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrintMgmtPrintSettingDetail</Name>
				<Source><![CDATA[
    private void setPrintMgmtPrintSettingDetail(PrintMgmtPrintSettingDetail _printMgmtPrintSettingDetail)
    {
        printMgmtPrintSettingDetail = _printMgmtPrintSettingDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryTableBuffer</Name>
				<Source><![CDATA[
    private void setQueryTableBuffer(Common _queryTableBuffer)
    {
        queryTableBuffer = _queryTableBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static ERPrintMgmtDataProviderReport construct()
    {
        return new ERPrintMgmtDataProviderReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runERFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs ER format and passes report parameters.
    /// </summary>
    /// <param name = "_contract">The data contract to use parameters from.</param>
    [Hookable(false)]
    internal static void runERFormat(ERPrintMgmtRunERFormatContract _contract)
    {
        ERPrintMgmtDataProviderReport srsErPrintMgmt = ERPrintMgmtDataProviderReport::construct();
        srsErPrintMgmt.setPrintMgmtPrintSettingDetail(_contract.parmPrintMgmtPrintSettingDetail());
        srsErPrintMgmt.setQueryTableBuffer(_contract.parmQueryTableBuffer());

        SrsReportRunController reportRunController = _contract.parmReportRunController();

        if (reportRunController)
        {
            srsErPrintMgmt.setReportRunController(reportRunController);
            srsErPrintMgmt.setReportDataContract(reportRunController.parmReportContract());
        }

        try
        {
            RecId formatMappingRecId = ERFormatMappingTable::getRecIDByGuid(
                ERPrintMgmtReportFormatSubscriber::getFormatMappingGuidByFormatStrGUID(_contract.parmFormatStrGuid()));
            ERIFileDestination origFileDestination = _contract.parmFileDestination();
            ERIFileDestination fileDestination = origFileDestination
                ? origFileDestination
                : new ERFileDestinationMemory();

            str fileName = srsErPrintMgmt.runER(formatMappingRecId, fileDestination);

            ERFileDestinationMemory fileDestinationMemory = fileDestination as ERFileDestinationMemory;
            if (fileDestinationMemory)
            {
                System.IO.Stream fileStream = fileDestinationMemory.GetStream();

                srsErPrintMgmt.postRunAction(fileName, fileStream);
                ERDocumentAttachmentContract::setDocumentAttachmentContract(reportRunController, fileName, fileStream);

                if (!origFileDestination && !ERFormatDestinationTable::findByFormatMapping(formatMappingRecId).RecId)
                {
                    ERPrintMgmtDataProviderReport::sendReportFileToBrowser(fileName, fileStream);
                }
            }
            else
            {
                srsErPrintMgmt.postRunAction(fileName, null);
            }
        }
        finally
        {
            ERSSRSReportDataSetTransformService::setCurrentRdpPreProcessedId(0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFreeTextInvoiceMappingRunParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pulls additional mapping run parameters for Free Text Invoice report. Used for DP based Mapping.
    /// </summary>
    /// <param name = "_mappingRun"><c>ERIFormatMappingRun</c> object created by runER method.</param>
    /// <returns><c>ERIFormatMappingRun</c> object with additional parameters set up.</returns>
    private ERIFormatMappingRun getFreeTextInvoiceMappingRunParameters(ERIFormatMappingRun _mappingRun)
    {
        // Assembling event args
        var eventArgs = new NonSSRSPrintMgmtAdapterReportExecutedEventArgs();
        eventArgs.parmSettingDetail(printMgmtPrintSettingDetail);
        eventArgs.parmArgs((reportRunController as FreeTextInvoiceController).originalArgs);
        eventArgs.parmRecordID((reportRunController as FreeTextInvoiceController).getJourId());

        SalesFormLetter_FreeText salesFormLetter = eventArgs.parmArgs().caller();
        if (salesFormLetter && !salesFormLetter.usePrintManagement())
        {
            var packedExtensionsSettings = salesFormLetter.printManagementExtensionsSettings();
            if (packedExtensionsSettings)
            {
                var unpackedExtensionsSettings = new NonSSRSPrintMgmtPromptExtensionParameters();
                if (unpackedExtensionsSettings.unpack(packedExtensionsSettings))
                {
                    eventArgs.parmExtensionsSettings(unpackedExtensionsSettings);
                }
            }
        }
        
        // Executing builder method
        return ERPrintMgmtReportFormatSubscriber::addFreeTextInvoiceReportParametersToMappingRun(eventArgs, _mappingRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMappingRunDestinationAction</Name>
				<Source><![CDATA[
    private void setMappingRunDestinationAction(ERIFormatMappingRun _mappingRun)
    {
        ERIFormatMappingRunWithDestinationAction mappingRunWithAction = _mappingRun as ERIFormatMappingRunWithDestinationAction;
        Args args = reportRunController.parmArgs();

        if (mappingRunWithAction && args)
        {
            ReportDestinationContract contract = args.parmObject() as ReportDestinationContract;
            if (contract)
            {
                ERDestinationAction action = contract.parmDestinationAction();
                if (action != ERDestinationAction::NoAction)
                {
                    mappingRunWithAction.withDestinationAction(action);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMappingRunNamedDestination</Name>
				<Source><![CDATA[
    private void setMappingRunNamedDestination(ERIFormatMappingRun _mappingRun)
    {
        if (printMgmtPrintSettingDetail)
        {
            RefRecId namedDestination = printMgmtPrintSettingDetail.parmNamedDestination();

            if (namedDestination)
            {
                ERIFormatMappingRunWithNamedDestination mappingRunWithNamedDestination = _mappingRun as ERIFormatMappingRunWithNamedDestination;

                if (mappingRunWithNamedDestination)
                {
                    mappingRunWithNamedDestination.withDestinationNamed(namedDestination);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendReportFileToBrowser</Name>
				<Source><![CDATA[
    private static void sendReportFileToBrowser(str _fileName, System.IO.Stream _fileStream)
    {
        str downloadUrl = File::SendFileToTempStore(
            _fileStream,
            _fileName,
            classstr(FileUploadTemporaryStorageStrategy),
            true);
        
        if (downloadUrl != '')
        {
            Browser browser = new Browser();
            browser.navigate(downloadUrl, true, false);
        }
        else
        {
            warning("@ApplicationPlatform:DownloadFailed");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executePostReportRun</Name>
				<Source><![CDATA[
    private void executePostReportRun(SrsReportRunController _reportRunController, SrsReportDataContract _reportDataContract)
    {
        if (_reportRunController && _reportDataContract)
        {
            SRSReportExecutionInfo executionInfo = _reportDataContract.parmReportExecutionInfo();

            if (executionInfo)
            {
                executionInfo.parmIsSuccessful(true);

                _reportRunController.callPostReportRun(executionInfo);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormatDestination</Name>
				<Source><![CDATA[
    private void setFormatDestination(ERIFormatMappingRun _mappingRun)
    {
        if (printMgmtPrintSettingDetail)
        {
            PrintMgmtReportFormatName formatName = printMgmtPrintSettingDetail.parmReportFormatName();
            guid formatMappingGuid = ERPrintMgmtReportFormatSubscriber::getFormatMappingGuidByFormatStrGUID(formatName);

            ERFormatsDestinations destinations =  printMgmtPrintSettingDetail.parmFormatDestinations();
            var formatDestination = destinations ?
                destinations.getDestinationByFormatMappingGUID(formatMappingGuid) :
                null;

            var asFormatDestinationHost = _mappingRun as ERIFormatDestinationHost;

            if (formatDestination && asFormatDestinationHost)
            {
                asFormatDestinationHost.setFormatDestination(formatDestination);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>