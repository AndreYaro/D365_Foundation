<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoiceSignXmlDoc_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;

/// <summary>
/// The <c>EInvoiceSignXmlDoc_MX</c> class generates the digital stamp of the EInvoice XML document.
/// </summary>
public class EInvoiceSignXmlDoc_MX
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getHash</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the hash value for the specified bytes.
    /// </summary>
    /// <param name="_inputBytes">
    /// The input bytes to hash.
    /// </param>
    /// <param name="_algorithm">
    /// The hash algorithm.
    /// </param>
    /// <returns>
    /// The hashed bytes.
    /// </returns>
    public static System.Byte[] getHash(System.Byte[] _inputBytes, CFDDigestAlgorithm_MX _algorithm)
    {
        System.Security.Cryptography.SHA1   sha1;
        System.Security.Cryptography.SHA256 sha256;

        switch (_algorithm)
        {
            case CFDDigestAlgorithm_MX::SHA256:
                sha256 = System.Security.Cryptography.SHA256::Create();
                return sha256.ComputeHash(_inputBytes);

            case CFDDigestAlgorithm_MX::SHA1:
                CFDIWithholdingContext context = CFDIWithholdingContext::current();
                if (context && context.isWithholding && EInvoiceCFDIParameters_MX::find().CFDIVersion < EInvoiceCFDIVersion_MX::V4)
                {
                    sha1 = System.Security.Cryptography.SHA1::Create();
                    return sha1.ComputeHash(_inputBytes);
                }
                throw error("@MexicoCFDI:SHA1ObsoleteErrorMessage");

            default:
                throw error(strfmt("@SYS110217", "@SYS341962"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSello</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the digital stamp with the specified string.
    /// </summary>
    /// <param name="_cadena">
    /// The original string.
    /// </param>
    /// <param name="algorithm">
    /// Algorithm used to get Hash
    /// </param>
    /// <returns>
    /// The digital stamp.
    /// </returns>
    public static str getSello(str _cadena,
        CFDDigestAlgorithm_MX algorithm = EInvoiceParameters_MX::find().CFDDigestAlgorithm)
    {
        str                   sello;
        System.Byte[]         inputBytes ;
        System.Byte[]         hash ;
        System.Text.Encoding  stencoding;
        System.Byte[]         encryptedData;

        new InteropPermission(InteropKind::ClrInterop).assert();

        stencoding  = System.Text.Encoding::get_UTF8();
        inputBytes  = stencoding.GetBytes(_cadena);
        hash        = EInvoiceSignXmlDoc_MX::getHash(inputBytes, algorithm);

        try
        {
            encryptedData = EInvoiceSignXmlDoc_MX::sign(hash, algorithm);
            sello         = System.Convert::ToBase64String(encryptedData);
        }
        catch
        {
            Error("@SYS341994");
            throw Error(AifUtil::getClrErrorMessage());
        }

        CodeAccessPermission::revertAssert();

        return sello;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the digital signature to the input bytes.
    /// </summary>
    /// <param name="_hash">
    /// The hashed bytes.
    /// </param>
    /// <param name="_algorithm">
    /// The digest algorithm.
    /// </param>
    /// <returns>
    /// The digital signature.
    /// </returns>
    public static System.Byte[] sign(System.Byte[] _hash, CFDDigestAlgorithm_MX _algorithm)
    {
        System.Byte[] result;

        switch (_algorithm)
        {
            case CFDDigestAlgorithm_MX::SHA256:
                X509Certificate2 certificate = CertificateHelper_MX::getCurrentDigitalCertificate();
                if (certificate)
                {
                    using (RSA rsa = certificate.GetRSAPrivateKey())
                    {
                        result = rsa.SignHash(_hash, HashAlgorithmName::SHA256, RSASignaturePadding::Pkcs1);
                    }
                }
                else
                {
                    throw error("@SYS341169");
                }
                break;

            case CFDDigestAlgorithm_MX::SHA1:
                CFDIWithholdingContext context = CFDIWithholdingContext::current();
                if (context && context.isWithholding && EInvoiceCFDIParameters_MX::find().CFDIVersion < EInvoiceCFDIVersion_MX::V4)
                {
                    X509Certificate2 certificate1 = CertificateHelper_MX::getCurrentDigitalCertificate();
                    if (certificate1)
                    {
                        using (RSA rsa = certificate1.GetRSAPrivateKey())
                        {
                            result = rsa.SignHash(_hash, HashAlgorithmName::SHA1, RSASignaturePadding::Pkcs1);
                        }
                    }
                    else
                    {
                        throw error("@SYS341169");
                    }
                }
                else
                {
                    throw error("@MexicoCFDI:SHA1ObsoleteErrorMessage");
                }
                break;

            default:
                throw error(strfmt("@SYS110217", "@SYS341962"));
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>