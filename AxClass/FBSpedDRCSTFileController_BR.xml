<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedDRCSTFileController_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FBSpedDRCSTFileController_BR</c> class is the controller class for the DRCST - SC file generation operation.
/// </summary>
[
    FBTaxStatement_BRAttribute("@FiscalBooks_SpedDRCST:SpedDRCST", menuitemDisplayStr(FBSpedDRCSTFileExporter_BR)),
    FBTaxStatementLocation_BRAttribute('BRA', 'SC'),
    FBTaxStatementSetupMenuItem_BRAttribute(menuitemDisplayStr(FBSpedDRCSTSetupParameters_BR))
]
public class FBSpedDRCSTFileController_BR extends FBTaxStatementController_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SysOperationController construct(Args _args)
    {
        FBSpedDRCSTFileController_BR controller = new FBSpedDRCSTFileController_BR();
        controller.initializeFromArgs(_args);

        FBBookingPeriod_BR bookingPeriod = controller.bookingPeriod();

        FBSpedDRCSTFileContract_BR contract = controller.getDataContractObject();
        contract.parmFiscalEstablishmentId(bookingPeriod.FiscalEstablishmentId);
        contract.parmFiscalEstablishmentDataArea(bookingPeriod.FiscalEstablishmentDataArea);
        contract.parmMonth(bookingPeriod.PeriodMonth);
        contract.parmYr(bookingPeriod.PeriodYear);
        contract.parmSpedFileName(FBUtil_BR::getDefaultFileNameSpedDRCST(bookingPeriod));
        contract.parmBookingPeriod(bookingPeriod);

        controller.parmExecutionMode(SysOperationExecutionMode::ReliableAsynchronous);
        controller.parmShowProgressForm(true);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        FBSpedDRCSTFileController_BR::construct(_args).startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>afterOperation</Name>
				<Source><![CDATA[
    protected void afterOperation(SysOperationExecutionMode _executionMode, AifAsyncResult _asyncResult)
    {
        super(_executionMode, _asyncResult);

        FBSpedDRCSTFileContract_BR contract = this.getDataContractObject();

        if (_executionMode != SysOperationExecutionMode::ReliableAsynchronous
            && _asyncResult.parmIsCompleted()
            && !_asyncResult.parmHasException())
        {
            ERFormatMappingRunJobTable formatMappingRunJobTable = ERFormatMappingRunJobTable::find(contract.parmFormatMappingRunJobId());
            DocuRef attachment = DocumentManagement::findAttachmentsForCommon(formatMappingRunJobTable);

            if (attachment)
            {
                DocuRef oldDocuRef;
                bookingPeriod = this.bookingPeriod();

                ttsbegin;
                delete_from oldDocuRef
                    where oldDocuRef.RefTableId == bookingPeriod.TableId
                        && oldDocuRef.RefRecId == bookingPeriod.RecId
                        && oldDocuRef.Name like strFmt('%1*', subStr(System.IO.Path::GetFileNameWithoutExtension(contract.parmSpedFileName()), 1, 59));

                attachment.RefCompanyId = bookingPeriod.DataAreaId;
                DocuRef::createFromDocuRef(attachment, bookingPeriod.RecId, bookingPeriod.TableId);

                ttscommit;

                FBSpedDRCSTlFileValidation_BR spedFileValidation = new FBSpedDRCSTlFileValidation_BR();
                spedFileValidation.parmContract(contract);
                spedFileValidation.validate();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>