<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceRetryHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class  InventInventoryDataServiceRetryHelper
{
    private static int defaultMaxRetryOfTransientError = 3;
    private static InventInstrumentationLogger instrumentationLogger = InventInstrumentationLogger::CreateLogger(classStr(InventInventoryDataServiceRetryHelper));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>retryTransientError</Name>
				<Source><![CDATA[
    internal static boolean retryTransientError(int _maxRetryOfTransientError = defaultMaxRetryOfTransientError)
    {
        var currentRetryCount = xSession::currentRetryCount();
        var shouldRetry = currentRetryCount < _maxRetryOfTransientError;

        if (shouldRetry)
        {
            InventInventoryDataServiceRetryHelper::delayRetry(currentRetryCount);
        }

        InventInventoryDataServiceRetryHelper::logInformation(shouldRetry, currentRetryCount, _maxRetryOfTransientError);

        return shouldRetry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delayRetry</Name>
				<Source><![CDATA[
    internal static void delayRetry(int _retryCount)
    {
        var delay = 2000 * power(2, min(_retryCount, 5));
        sleep(min(30 * 1000, delay));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logInformation</Name>
				<Source><![CDATA[
    private static void logInformation(boolean _shouldRetry, int _currentRetryCount, int _maxRetryOfTransientError)
    {
        try
        {
            var message = strFmt("[IV] Retry transient error. Retry: %1. CurrentRetryCount: %2. MaxRetryOfTransientError: %3", any2Str(_shouldRetry), int2Str(_currentRetryCount), int2Str(_maxRetryOfTransientError));
            instrumentationLogger.logInformation(message);
        }
        catch
        {
            // in case logging not working
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>