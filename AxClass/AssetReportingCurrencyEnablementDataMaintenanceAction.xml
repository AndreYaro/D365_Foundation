<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetReportingCurrencyEnablementDataMaintenanceAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[Export(identifierStr(Dynamics.AX.Application.IDataMaintenanceAction))]
internal final class AssetReportingCurrencyEnablementDataMaintenanceAction implements IDataMaintenanceAction, IDataMaintenanceOpportunity, IDataMaintenanceActionParameters, IDataMaintenanceActionScheduleParameters
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceCaption caption()
    {
        return literalStr("@FixedAssets:AssetReportingCurrencyEnablementDataMaintenanceCaption");
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceDescription description()
    {
        return literalStr("@FixedAssets:AssetReportingCurrencyEnablementDataMaintenanceDescription");
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabled()
    {
        return AssetReportingCurrencyEnablementDataMaintenanceFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>category</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceActionCategory category()
    {
        return DataMaintenanceActionCategory::DataCorruption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ModuleAxapta module()
    {
        return ModuleAxapta::FixedAssets;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tasks</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Array tasks()
    {
        Array tasks = new Array(Types::String);
        return tasks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>opportunityResult</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceOpportunityResult opportunityResult()
    {
        DataMaintenanceOpportunityResult scanResult;
        boolean doesReportingCurrencyDebitAndCreditValuesExist;

        using (SysInstrumentationActivityContext activityContext = this.getActivityContextForRun())
        {
            doesReportingCurrencyDebitAndCreditValuesExist = this.doesReportingCurrencyDebitAndCreditValuesExist();
            scanResult = DataMaintenanceOpportunityResult::construct();
            scanResult.parmOpportunityFound(doesReportingCurrencyDebitAndCreditValuesExist);

            activityContext.addCustomProperty(
                AssetInstrumentationConstants::DoesReportingCurrencyDebitAndCreditValuesExist,
                    any2Str(doesReportingCurrencyDebitAndCreditValuesExist));
        }

        return scanResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>automaticallySchedule</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean automaticallySchedule()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceActionParameters parameters()
    {
        DataMaintenanceActionParameters actionParameters = new DataMaintenanceActionParameters();
        actionParameters.IsSystemAction = true;

        return actionParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesReportingCurrencyDebitAndCreditValuesExist</Name>
				<Source><![CDATA[
    private boolean doesReportingCurrencyDebitAndCreditValuesExist()
    {
        boolean ret;

        Ledger ledger;
        select firstonly RecId
            from ledger
            where ledger.ReportingCurrency != '';

        if (ledger.RecId)
        {
            LedgerJournalTrans ledgerJournalTrans;
            LedgerJournalTrans_Asset ledgerJournalTrans_Asset;
            TransDate sixtyDaysAgoDate = today() - 60;

            select firstonly crosscompany RecId
                from ledgerJournalTrans_Asset
                join ledgerJournalTrans
                where ledgerJournalTrans_Asset.RefRecId == ledgerJournalTrans.RecId
                && ledgerJournalTrans_Asset.AmountCreditReportingCurrency != 0
                && ledgerJournalTrans_Asset.AmountDebitReportingCurrency != 0
                && ledgerJournalTrans.TransDate >= sixtyDaysAgoDate;

            ret =  ledgerJournalTrans_Asset.RecId != 0;    
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContextForRun</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext getActivityContextForRun()
    {
        var logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(AssetReportingCurrencyEnablementDataMaintenanceAction));
        var activity = SysInstrumentationActivity::construct(AssetInstrumentationConstants::AssetReportingCurrencyEnablementDataMaintenanceActionOpportunityResult, AssetInstrumentationConstants::InstrumentationNameSpace);
        return logger.activityContextWithCustomProperties(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceActionScheduleParameters scheduleParameters()
    {
        DataMaintenanceActionScheduleParameters params = new DataMaintenanceActionScheduleParameters();
        params.Frequency = DataMaintenanceActionScheduleFrequency::EveryWeek;
        return params;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>