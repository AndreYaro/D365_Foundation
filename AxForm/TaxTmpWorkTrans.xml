<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>TaxTmpWorkTrans</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public final class TaxTmpWorkTrans extends FormRun
{
    // Control names used to show/hide the info bar and set the text within it
    #define.Control_InfoBarBorder('InfoBarBorder')
    #define.Control_InfoBarText('InfoBarText')
    #define.AdjustmentTab(3)

    TaxTmpWorkTransForm     taxTmpWorkTransForm;
    FormRun                 callerForm;
    int                     currentTab;
    AccessRight             accessRight;
    boolean                 editMode;
    boolean                 isTaxCodeAdjustmentEnabled;

    // <GIN>
    TaxRegulationAmountCur    taxRegulationTotalCustoms;
    AmountCur                 totalAmtCustomsCurrency;
    TransDate                 taxDate;
    PurchParmTable            purchParmTable;
    boolean                   purchInvoice;
    boolean                   purchBillOfEntry;
    [FormObservable]
    AmountMST                 eximTaxAmountMST;
    [FormObservable]
    AmountMST                 eximBalanceTaxAmountMST;
    AmountMST                 correctedCustomsDuty;
    boolean                   isImportOrderExim;
    AmountMST                 eximTaxCorrectedAmount;
    AmountMST                 eximBalanceCorrectedTaxAmount;
    boolean                   isCustomsEnabled;
    boolean                   isFromBOE;
    boolean                   isCountryRegionIN;
    boolean                   isOpenFromSalesEditLines;
    #ISOCountryRegionCodes
    // </GIN>

    TaxTmpWorkTransFormParameters taxTmpWorkTransFormParameters;
    Map taxSpecificExchRateMapWithNewVATDueDate;
    boolean isTaxSpecificExchRateEnabledByTable;

    Int64 countOfAdjustment;
    boolean isGeneralTabViewed, isAmountTabViewed, isAdjustmentTabViewed;

}
]]></Source>
			</Method>
			<Method>
				<Name>adjustedTaxRegulationTotalCustoms_IN</Name>
				<Source><![CDATA[
    edit TaxRegulationAmountCur adjustedTaxRegulationTotalCustoms_IN(
        boolean   _set,
        AmountMST _taxRegulationTotalCustoms)
    {
        if (_taxRegulationTotalCustoms)
        {
            taxTmpWorkTransForm.parmTaxRegulationTotalCur(true, CurrencyHelper_IN::customsCurAmount_IN(_taxRegulationTotalCustoms,
                                                                                              tmpTaxWorkTrans.SourceCurrencyCode,
                                                                                              CurrencyHelper_IN::taxDirection2CustomsDirection_New_IN(tmpTaxWorkTrans.TaxDirection),
                                                                                              tmpTaxWorkTrans.TransDate));
        }
        return  taxTmpWorkTransForm.parmTaxRegulationTotalCustoms_IN(_set, _taxRegulationTotalCustoms, tmpTaxWorkTrans.SourceTableId, tmpTaxWorkTrans.SourceRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerRefresh</Name>
				<Source><![CDATA[
    void callerRefresh()
    {
        IFormRefreshable refreshableForm = callerForm as IFormRefreshable;

        if (refreshableForm)
        {
            refreshableForm.callerRefresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        super();

        taxTmpWorkTransForm.close(element.args().dataset(), element.args().record(), tmpTaxWorkTrans
        // <GEEU>
        , element.args().parmObject()
        // </GEEU>
        );
        
        int64 countOfTaxAdjustable;
        if (Regulation.visible())
        {
            select count(RecId) from TmpTaxRegulation;
            countOfTaxAdjustable = TmpTaxRegulation.RecId;
        }
        else
        {
            countOfTaxAdjustable = 0;
        }

        select * from TmpTaxWorkTrans;

        Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource taxEventSourceLog = Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource::Log;
        taxEventSourceLog.TaxForm(SysCountryRegionCode::countryInfo(), tableId2Name(TmpTaxWorkTrans.SourceTableId), countOfTaxAdjustable, countOfAdjustment, isGeneralTabViewed, isAmountTabViewed, isAdjustmentTabViewed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineAdjustmentMessage</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Determines the appropriate message for the message bar on the adjustments tab.
    /// </summary>
    public void determineAdjustmentMessage()
    {
        Tax tax = taxTmpWorkTransForm.parmTaxObject();

        if (taxTmpWorkTransForm.parmKeepSalesTaxAdjustments())
        {
            if (tmpTaxRegulation.ManualInsertedTax)
            {
                //The tax code is not derived from the tax groups for the invoice.
                warning(strFmt("@Tax:TaxCodeNotFromTaxGroup", tmpTaxRegulation.TaxCode));
            }
            else
            {
                if (taxTmpWorkTransForm.parmIgnoreCalculatedSalesTax() && tmpTaxRegulation.TaxDirection == TaxDirection::IncomingTax && tmpTaxRegulation)
                {
                    if (!TaxWorkRegulation::existForTaxCodeAndDirection(tax.headingTableId(), tax.headingRecId(), tmpTaxRegulation.TaxCode, tmpTaxRegulation.TaxDirection))
                    {
                        //No sales tax amount was sent for this sales tax code on the electronic invoice.
                        warning(strFmt("@Tax:NoTaxSentOnElectronicInvoice", tmpTaxRegulation.TaxCode));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCompanyCurrencyCode</Name>
				<Source><![CDATA[
    display CurrencyCode displayCompanyCurrencyCode()
    {
        if (TaxSalesTaxExchangeRateSpecificLegalEntity_PLFlight::instance().isEnabled()
            && TmpTaxWorkTrans.SourceTableId == tableNum(LedgerJournalTrans)
            && TmpTaxWorkTrans.Company
            && TmpTaxWorkTrans.Company != curExt())
        {
            return Ledger::accountingCurrency(CompanyInfo::findDataArea(TmpTaxWorkTrans.Company).RecId);
        }
        else
        {
            return taxTmpWorkTransForm.getCompanyCurrencyCode();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayReportingCurrencyCode</Name>
				<Source><![CDATA[
    display CurrencyCode displayReportingCurrencyCode()
    {
        return TmpTaxWorkTrans.reportingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableCustomsAdjustmentFields_IN</Name>
				<Source><![CDATA[
    public void enableCustomsAdjustmentFields_IN()
    {
        boolean isTaxTypeCustoms;

        isTaxTypeCustoms = (TaxTable::find(tmpTaxRegulation.TaxCode).TaxType_IN == TaxType_IN::Customs);

        if (purchBillOfEntry)
        {
            tmpTaxRegulation_SourceRegulateAmountCustoms_IN.enabled(isTaxTypeCustoms);
            tmpTaxRegulation_SourceRegulateAmountCur.allowEdit(false);
        }
        else if (purchInvoice)
        {
            tmpTaxRegulation_SourceRegulateAmountCustoms_IN.enabled(false);
            tmpTaxRegulation_SourceRegulateAmountCur.allowEdit(!isTaxTypeCustoms);
        }

        //enable adjustment only for customs type tax
        tmpTaxRegulation_SourceRegulateAmountCur.allowEdit(
            !(taxTmpWorkTransForm.parmTaxRegulation().isImportExportOrder_IN()
                && isTaxTypeCustoms));

        tmpTaxRegulation_SourceRegulateAmountCustoms_IN.allowEdit(
            taxTmpWorkTransForm.parmTaxRegulation().isImportExportOrder_IN()
            && isTaxTypeCustoms);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableFields_IN</Name>
				<Source><![CDATA[
    public void enableFields_IN()
    {
        boolean  isImportOrder;
        Object   caller;
        TaxPurch taxPurch;
        TableId  tableId;
        RefRecId recId;

        caller = element.args().caller();
        if (classId2Name(classIdGet(caller)) == classStr(TaxPurch))
        {
            taxPurch = caller;
            tableId  = taxPurch.headingTableId();
            recId    = taxPurch.headingRecId();

            if ((tableId == tableNum(PurchTable)
                && PurchTable_W::findByPurchTable(recId).CustomsImportOrder_IN == NoYes::Yes)
                || (tableId == tableNum(PurchParmTable)
                && PurchParmTable::findRecId(recId).purchTable().purchTable_W().CustomsImportOrder_IN == NoYes::Yes)
                || (tableId == tableNum(VendInvoiceInfoTable)
                && VendInvoiceInfoTable::findRecId(recId).purchTable().purchTable_W().CustomsImportOrder_IN == NoYes::Yes))
            {
                isImportOrder = true;
            }
            if ((tableId == tableNum(VendInvoiceInfoTable)
                && VendInvoiceInfoTable::findRecId(recId).purchTable().purchTable_W().CustomsImportOrder_IN == NoYes::Yes))
            {
                taxRegulationTotal.allowEdit(false);
                tmpTaxRegulation_SourceRegulateAmountCur.allowEdit(false);
            }
        }

        exim.visible(TaxParameters::find().EximIncentiveSchemes_IN && isImportOrder && isCustomsEnabled);
        eximTaxAmountMST_IN.visible(isImportOrderExim);
        eximBalanceTaxAmountMST_IN.visible(isImportOrderExim);
        eximTaxCorrectedAmount_IN.visible(isImportOrderExim);
        eximBalanceCorrectedTaxAmount_IN.visible(isImportOrderExim);
        customsAdjustment_IN.visible(TaxParameters::find().EximIncentiveSchemes_IN && isImportOrder);
        displayCustomsSourceRegulateAmountCur_IN.visible(!(TaxParameters::find().EximIncentiveSchemes_IN && isImportOrder));

        tmpTaxWorkTrans_ds.object(fieldNum(TmpTaxWorkTrans, EximIncentiveScheme_IN)).visible(TaxParameters::find().EximIncentiveSchemes_IN && isImportOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableRegulationDetailsFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the tax adjustment detail fields.
    /// </summary>
    public void enableRegulationDetailsFields()
    {
        boolean enableTaxAdjustmentType;
        boolean enableRegulationDetailsFields;

        if (regulation.visible()
            && this.enableSingleLineTaxAdjustment())
        {
            if (taxTmpWorkTransForm.parmUseDetailTaxAdjustmentType())
            {
                enableTaxAdjustmentType = true;

                switch (taxAdjustmentType.selection())
                {
                    case TaxAdjustmentType::Detail:
                        enableRegulationDetailsFields = true;

                        // <GBR>
                        if (BrazilParameters::isEnabled())
                        {
                            tmpTaxRegulation_TaxationCode_BR.visible(true);
                            tmpTaxRegulation_editTaxationCode_BR.visible(true);
                            tmpTaxRegulation_TaxFiscalValue_BR.visible(true);
                        }
                        // </GBR>
                        break;

                    default:
                        // <GBR>
                        if (BrazilParameters::isEnabled())
                        {
                            tmpTaxRegulation_TaxationCode_BR.visible(false);
                            tmpTaxRegulation_editTaxationCode_BR.visible(false);
                            tmpTaxRegulation_TaxFiscalValue_BR.visible(false);
                        }
                        // </GBR>
                        break;
                }
            }
        }

        if (enableTaxAdjustmentType)
        {
            taxAdjustmentType.visible(true);
        }
        else
        {
            taxAdjustmentType.visible(false);
        }

        if (enableRegulationDetailsFields)
        {
            tmpTaxRegulation_AdjustmentDetailType.visible(true);
            tmpTaxRegulation_AdjustmentDetailReference.visible(true);
            tmpTaxRegulation_AdjustmentDetailDescription.visible(true);
        }
        else
        {
            tmpTaxRegulation_AdjustmentDetailType.visible(false);
            tmpTaxRegulation_AdjustmentDetailReference.visible(false);
            tmpTaxRegulation_AdjustmentDetailDescription.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableRegulationFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the tax adjustment fields.
    /// </summary>
    public void enableRegulationFields()
    {
        boolean enableRegulationFields;

        if (taxTmpWorkTransForm.parmUseSalesTaxAdjustments())
        {
            if (taxTmpWorkTransForm.parmSourceSingleLine())
            {
                if (taxTmpWorkTransForm.parmAllowSingleLineAdjustment())
                {
                    enableRegulationFields = true;
                }
            }
            else
            {
                enableRegulationFields = true;
            }
        }

        if (enableRegulationFields)
        {
            regulation.visible(true);
        }
        else
        {
            regulation.visible(false);
        }

        element.enableRegulationDetailsFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableTaxExchangeRateFields</Name>
				<Source><![CDATA[
    public void enableTaxExchangeRateFields(boolean _enable)
    {
        boolean enableLoc = _enable;
        if ((element.args().record().TableId == tableNum(CustInvoiceTable) || element.args().record().TableId == tableNum(SalesTable))
            && CustInvoiceBankExchangeRateEligibility_PL::isBankExchangeRateNotApplicableOnInvoice())
        {
            enableLoc = false;
        }

        if (isTaxSpecificExchRateEnabledByTable)
        {
            CurrencyCode accountingCurrency = TmpTaxWorkTrans.accountingCurrency();
            CurrencyCode reportingCurrency = TmpTaxWorkTrans.reportingCurrency();

            salesTaxExchangeRate.allowEdit(
                TmpTaxWorkTrans.SourceCurrencyCode != accountingCurrency
                && TmpTaxWorkTrans.VatDueDate_W
                && enableLoc);
            salesTaxExchangeRateRep.allowEdit(
                accountingCurrency != reportingCurrency
                && TmpTaxWorkTrans.SourceCurrencyCode != reportingCurrency
                && TmpTaxWorkTrans.VatDueDate_W
                && enableLoc);
            salesTaxExchangeRateCur.allowEdit(
                accountingCurrency != TmpTaxWorkTrans.CurrencyCode
                && reportingCurrency != TmpTaxWorkTrans.CurrencyCode
                && TmpTaxWorkTrans.SourceCurrencyCode != TmpTaxWorkTrans.CurrencyCode
                && TmpTaxWorkTrans.VatDueDate_W
                && enableLoc);

            TmpTaxRegulation_ExchangeRateBaseAmountCurRegulated.allowEdit(_enable);
            TmpTaxRegulation_ExchangeRateRegulateAmountCur.allowEdit(_enable);
        }
        else
        {
            salesTaxExchangeRate.allowEdit(enableLoc);
        }

        dateOfVATRegister.allowEdit(enableLoc);
        tmpTaxRegulation_ExchangeRateSourceBaseAmountRegulated.allowEdit(_enable);
        tmpTaxRegulation_ExchangeRateSourceRegulateAmount.allowEdit(_enable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>eximBalanceCorrectedTaxAmount_IN</Name>
				<Source><![CDATA[
    display AmountMST eximBalanceCorrectedTaxAmount_IN()
    {
        return taxTmpWorkTransForm.parmEximBalanceTaxTotalCorrected_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>eximBalanceTaxAmountMST_IN</Name>
				<Source><![CDATA[
    display AmountMST eximBalanceTaxAmountMST_IN()
    {
        return taxTmpWorkTransForm.parmEximBalanceTaxAmountMST_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>eximTaxAmountMST_IN</Name>
				<Source><![CDATA[
    display AmountMST eximTaxAmountMST_IN()
    {
        return taxTmpWorkTransForm.parmEximTaxAmountMST_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>eximTaxCorrectedAmount_IN</Name>
				<Source><![CDATA[
    display AmountMST eximTaxCorrectedAmount_IN()
    {
        return taxTmpWorkTransForm.parmEximTaxTotalCorrected_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeadingRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines the <c>RefRecId</c> of the transaction header.
    /// </summary>
    /// <returns>
    ///   The <c>RefRecId</c> of the transaction header.
    /// </returns>
    public RefRecId getHeadingRecId()
    {
        return taxTmpWorkTransForm.parmTaxObject().headingRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ignoreCalculatedSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines if tax should ignore the calculated sales tax amounts and consider
    ///   only tax adjustments.
    /// </summary>
    /// <returns>
    ///   True if tax should only consider tax adjustments.
    /// </returns>
    public display boolean ignoreCalculatedSalesTax()
    {
        return taxTmpWorkTransForm.ignoreCalculatedSalesTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        // Puts isTaxCodeAdjustmentEnabled initialization at the begin and below codes will use it.
        isTaxCodeAdjustmentEnabled = TaxIntegrationAdjustment::isEnabledForTransaction(element.args().dataset(), element.args().record().recId);

        taxTmpWorkTransForm = TaxTmpWorkTransForm::construct();
        taxTmpWorkTransForm.init();

        super();

        if (element.isOpenFromSalesEditLines())
        {
            TmpTaxRegulation_SourceRegulateAmountCur.visible(false);
            TmpTaxRegulation_ActualSourceRegulateAmountCur.visible(true);
            TaxRegulationTotal.visible(false);
            ActualTaxRegulationTotal.visible(true);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIN00035, funcName());
        }
        else if (BrazilParameters::isEnabled())
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00049, funcName());
        }

        accessRight = FormSecurity::getMenuItemAccessRight(this);

        element.enableRegulationFields();

        if (callerForm)
        {
            taxTmpWorkTransForm.parmCallerFormName(callerForm.name());
            switch (callerForm.name())
            {
                case formStr(PurchTable) :
                case formStr(CustConsInvoice_JP):
                    regulation.visible(false);
                    break;

                case formStr(LedgerJournalTransInvoiceRegister) :
                    taxTmpWorkTransForm.parmInvoiceRegister(true);
                    break;

                case formStr(LedgerJournalTransCustPaym) :
                    taxTmpWorkTransForm.parmInvoiceRegister(true);
                    break;

                case formStr(LedgerJournalTransPeriodic) :
                    taxTmpWorkTransForm.parmInvoiceRegister(true);
                    break;

                case formStr(ledgerjournalTransDaily) :
                    this.setSalesTaxFormEnabled();
                // <GCN>
                case formStr(LedgerJournalVoucher_CN) :
                // </GCN>
                    taxTmpWorkTransForm.parmInvoiceRegister(true);
                    break;

                default:
                    break;
            }
        }
        // <GIN>
        isCustomsEnabled  = TaxParameters::isCustomsEnable_IN();
        isCountryRegionIN = (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]));
        if (isCustomsEnabled)
        {
            customsCurrency_IN.visible(true);
            displayCustomsSourceRegulateAmountCur_IN.visible(true);
        }

        if (TaxParameters::checkTaxParameters_IN())
        {
            element.enableFields_IN();
            formulaDesigner_IN.visible(TaxParameters::checkTaxParameters_IN());
        }

        if (isCountryRegionIN
            && element.args().record().TableId == tableNum(InventTransferLine))
        {
            apply.enabled(false);
        }
        // </GIN>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            if (element.args().menuItemName() == menuitemDisplayStr(TaxTransSourceDeliverySlip_BR))
            {
                element.design().caption("@GLS510135");
                regulation.visible(false);
            }
        }
        // </GBR>

        if (!taxTmpWorkTransForm.parmAccountTypeMap())
        {
            taxTmpWorkTransForm.parmAccountTypeMap(new Map(Types::String, Types::Enum));
        }

        if (element.args().openMode() == OpenMode::View)
        {
            apply.enabled(false);
            reset.enabled(false);
        }
        // <GIN>
        if (element.args().record().TableId == tableNum(PurchParmTable))
        {
            purchParmTable.data(element.args().record());
            if (purchParmTable.Ordering == DocumentStatus::BillOfEntry_IN)
            {
                isFromBOE = true;
            }
        }
        // </GIN>        
        Object caller = element.args().caller();
        switch (classId2Name(classIdGet(caller)))
        {
            case classStr(TaxPurch) :
                if (TaxIntegrationUtils::isMultipleTaxIdEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Purchase))
                {
                    this.updateTaxIdControls("@TaxMultipleVATID:VendorTaxRegistrationNumber");
                }
                break;
            case classStr(TaxSales) :
                if (TaxIntegrationUtils::isMultipleTaxIdEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Sales))
                {
                    this.updateTaxIdControls("@TaxMultipleVATID:CustomerTaxRegistrationNumber");
                }
                break;
            case classStr(TaxSalesQuotation) :
                TaxSalesQuotation taxSalesQuotation = caller as TaxSalesQuotation;
                if (TaxIntegrationUtils::isMultipleTaxIdEnabledForBusinessProcess(taxSalesQuotation.taxIntegrationBusinessProcess()))
                {
                    this.updateTaxIdControls("@TaxMultipleVATID:CustomerTaxRegistrationNumber");
                }
                break;
            case classStr(TaxFreeInvoice):
                TaxFreeInvoice taxFreeInvoice = caller as TaxFreeInvoice;
                if (TaxIntegrationUtils::isMultipleTaxIdEnabledForBusinessProcess(taxFreeInvoice.taxIntegrationBusinessProcess()))
                {
                    this.updateTaxIdControls("@TaxMultipleVATID:CustomerTaxRegistrationNumber");
                }
                break;
            case classStr(TaxInventTransfer) :
                if (TaxIntegrationUtils::isMultipleTaxIdEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Inventory))
                {
                    this.updateTaxIdControls("@TaxMultipleVATID:CounterpartyTaxRegistrationNumber");
                }
                break;
            case classStr(TaxCalculationJournal) :
                TaxCalculationJournal taxCalculationJournal = caller as TaxCalculationJournal;
                if (TaxIntegrationUtils::isMultipleTaxIdEnabledForTaxService() && taxCalculationJournal.isTaxIntegrationEnabled())
                {
                    this.updateTaxIdControls("@TaxMultipleVATID:CounterpartyTaxRegistrationNumber");
                }
                break;
            case classStr(TaxCalculationProjAdvancedJournal):
            case classStr(TaxProj) :
                if (TaxIntegrationUtils::isMultipleTaxIdEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Project))
                {
                    this.updateTaxIdControls("@TaxMultipleVATID:CounterpartyTaxRegistrationNumber");
                }
                break;
            case classStr(TaxSAD) :
                if (TaxIntegrationUtils::isMultipleTaxIdEnabledForBusinessProcess(TaxIntegrationBusinessProcess::SADDocument))
                {
                    this.updateTaxIdControls("@TaxMultipleVATID:CounterpartyTaxRegistrationNumber");
                }
                break;
            default:
                break;
        }

        if (TaxDeliveryDatePickPackingSlipDateHelper::isFeatureEnabled() && this.isCalledBySalesOrder())
        {
            // When users invoice, notify users.
            if (taxTmpWorkTransForm.parmCallerFormName() == formStr(SalesEditLines))
            {
                SalesParmUpdate salesParmUpdate = callerForm.dataSource(formDataSourceStr(SalesEditLines, SalesParmUpdate)).cursor();
                if (salesParmUpdate.DocumentStatus == DocumentStatus::Invoice)
                {
                    SalesParmTable salesParmTable = callerForm.dataSource(formDataSourceStr(SalesEditLines, SalesParmTable)).cursor();
                    TaxDeliveryDatePickPackingSlipDateHelper::notifyUsersWhenInvoice(salesParmUpdate, salesParmTable);
                }
            }
            // Only SalesEditLines form can setup the packing silp date, when users open other
            // forms to check sales tax, if there is posted packing slip, then notify users.
            else if (CustPackingSlipJour::exist(this.getSalesId()))
            {
                warning("@TaxCoreTax:TaxAmountMayBeDifferentFromPostedPackingSlip");
            }
        }

        if (Tax::isTaxIntegrationEnabledForTable(element.args().dataset()))
        {
            Apply.text("@TaxIntegration:ApplyTaxAdjustment");
            Reset.text("@TaxIntegration:ResetTaxAdjustment");
        }

        if (isTaxCodeAdjustmentEnabled)
        {
            this.setDisplayForTaxCodeAdjustment();
            this.setAllowEditForTaxCodeAdjustment();
        }

        // The display menu item TaxTmpWorkConsInvoice_JP is only visible in Japan with feature CustVendConsInvoiceTaxDifferencePostingFeature_JP enabled.
        // No need to check feature status again
        if (element.args().menuItemName() == menuitemDisplayStr(TaxTmpWorkConsInvoice_JP))
        {
            ConsolidateSourceBaseAmountCur_JP.visible(true);
            ConsolidateSourceTaxAmountCurPosted_JP.visible(true);
            ConsolidateSourceRegulateAmountCur_JP.visible(true);
            if (Regulation.visible())
            {
                TmpTaxRegulation_SourceRegulateAmountCur.allowEdit(false);
                TmpTaxRegulation_ConsolidateSourceRegulateAmountCur_JP.visible(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxTmpWorkTransFormHasInit</Name>
				<Source><![CDATA[
    public boolean parmTaxTmpWorkTransFormHasInit(boolean _hasInit = taxTmpWorkTransForm.parmHasTaxFromInit())
    {
        return taxTmpWorkTransForm.parmHasTaxFromInit(_hasInit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxIdControls</Name>
				<Source><![CDATA[
    private void updateTaxIdControls(str _partyTaxIdLabel)
    {
        tmpTaxWorkTrans_ds.object(fieldNum(TmpTaxWorkTrans, TaxId)).visible(true);
        tmpTaxWorkTrans_ds.object(fieldNum(TmpTaxWorkTrans, PartyTaxId)).visible(true);
        TmpTaxWorkTrans_PartyTaxId.label(_partyTaxIdLabel);
        TaxRegistration_ds.query().validTimeStateDateTimeRange(DateTimeUtil::minValue(), DateTimeUtil::maxValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalledBySalesOrder</Name>
				<Source><![CDATA[
    private boolean isCalledBySalesOrder()
    {
        if (element.args().dataset() == tableNum(SalesTable)
            || element.args().dataset() == tableNum(SalesLine))
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesId</Name>
				<Source><![CDATA[
    private SalesId getSalesId()
    {
        if (element.args().dataset() == tableNum(SalesTable))
        {
            SalesTable salesTable = element.args().record();
            return salesTable.SalesId;
        }
        else if (element.args().dataset() == tableNum(SalesLine))
        {
            SalesLine salesLine = element.args().record();
            return salesLine.SalesId;
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTax</Name>
				<Source><![CDATA[
    public void initTax(Tax _tax)
    {
        if (!isTaxSpecificExchRateEnabledByTable)
        {
            isTaxSpecificExchRateEnabledByTable = TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByTable(_tax.headingTableId(), _tax.headingRecId());
        }

        taxTmpWorkTransForm.parmTaxObject(_tax);
        callerForm  = element.args().parmObject();
        taxTmpWorkTransForm.initTax( _tax, element.args().dataset(), element.args().record(), tmpTaxRegulation, tmpTaxWorkTrans);
        // <GEEU>
        if (TaxParameters::isBankExchRateEnabled_W() || isTaxSpecificExchRateEnabledByTable)
        {
            element.showSalesTaxExchangeRateFields(true);
            dateOfVATRegister.dateValue(taxTmpWorkTransForm.parmDateOfVATRegister());

            taxTmpWorkTransFormParameters = TaxTmpWorkTransFormParameters::construct();
            taxTmpWorkTransFormParameters.vatExchRate = taxTmpWorkTransForm.parmSalesTaxExchangeRate();
            salesTaxExchangeRate.realValue(taxTmpWorkTransForm.displaySalesTaxExchRate(taxTmpWorkTransFormParameters));
        }
        // </GEEU>

        if (isTaxSpecificExchRateEnabledByTable)
        {
            taxTmpWorkTransFormParameters = TaxTmpWorkTransFormParameters::construct();
            taxTmpWorkTransFormParameters.vatExchRate = taxTmpWorkTransForm.parmSalesTaxExchangeRateRep();
            salesTaxExchangeRateRep.realValue(taxTmpWorkTransForm.displaySalesTaxExchRate(taxTmpWorkTransFormParameters));

            ExchangeRateTaxBaseAmount.label("@TaxIntegration:ExchangeRateTaxBaseAmount");
            ExchangeRateTaxBaseAmount.helpText("@TaxIntegration:ExchangeRateTaxBaseAmountHelpText");
            ExchangeRateTaxAmount.label("@TaxIntegration:ExchangeRateTaxAmount");
            ExchangeRateTaxAmount.helpText("@TaxIntegration:ExchangeRateTaxAmountHelpText");
        }

        if (_tax.useTaxUncommitted())
        {
            this.design().caption("@SYS55726");
        }

        ignoreCalculatedTaxAmounts.visible(false);
        if (_tax.keepSalesTaxAdjustments())
        {
            warning.visible(true);
            derived.visible(true);
        }
        else
        {
            warning.visible(false);
            derived.visible(false);
        }

        // hide/show distributions button based on whether the calling
        // transaction supports SDF.
        if (_tax.useSubLedgerJournalLines())
        {
            distributeDistributions.visible(true);
        }
        else
        {
            distributeDistributions.visible(false);
        }
        // <GIN>
        if (isCustomsEnabled)
        {
            element.showHideFields_IN(taxTmpWorkTransForm.parmTaxRegulation().isImportExportOrder_IN());
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>pullTaxObject</Name>
				<Source><![CDATA[
    public void pullTaxObject()
    {
        TaxIFormShowTax showTaxForm = callerForm as TaxIFormShowTax;

        if (showTaxForm)
        {
            taxTmpWorkTransForm.initTax(showTaxForm.getShowTax(), element.args().dataset(), element.args().record(), tmpTaxRegulation, tmpTaxWorkTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pushTaxObject</Name>
				<Source><![CDATA[
    public void pushTaxObject(Tax   _tax)
    {
        taxTmpWorkTransForm.initTax(_tax, element.args().dataset(), element.args().record(), tmpTaxRegulation, tmpTaxWorkTrans);
        tmpTaxWorkTrans_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Notifies the calling form the tax adjustments have been reset.
    /// </summary>
    public void resetTax()
    {
        TaxIFormResetTax resetTaxForm = callerForm as TaxIFormResetTax;

        if (resetTaxForm)
        {
            resetTaxForm.taxReset();
        }

        ignoreCalculatedTaxAmounts.value(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowEdit</Name>
				<Source><![CDATA[
    void setAllowEdit()
    {
        LedgerJournalTrans  ledgerJournalTrans;
        FormDataSource      ledgerJournalTransDS;
        boolean             purchaseOrderForm;

        if (taxTmpWorkTransForm.parmTaxObject().keepSalesTaxAdjustments())
        {
            tmpTaxRegulation_ds.allowEdit(true);
            taxRegulationTotal.allowEdit(true);
        }

        if (callerForm)
        {
            if (callerForm.name() == formStr('PurchTable'))
            {
                purchaseOrderForm = true;
            }
        }

        if (
        (!taxTmpWorkTransForm.parmTaxRegulation().taxLinesExist() && !taxTmpWorkTransForm.parmInvoiceRegister())
        || purchaseOrderForm == true
        || !taxTmpWorkTransForm.parmUseSalesTaxAdjustments())
        {
            tmpTaxRegulation_ds.allowEdit(false);
            taxRegulationTotal.allowEdit(false);
            // <GIN>
            if (isCustomsEnabled)
            {
                adjustedTaxRegulationTotalCustoms_IN.visible(false);
            }
            // </GIN>
        }
        else
        {
            if (taxTmpWorkTransForm.parmUseSalesTaxAdjustments())
            {
            if (element.args().dataset() == tableNum(LedgerJournalTrans))
            {
                ledgerJournalTrans      = element.args().record() as LedgerJournalTrans;
                ledgerJournalTransDS    = FormDataUtil::getFormDataSource(ledgerJournalTrans);
                // <GEERU>
                if (ledgerJournalTransDS)
                {
                // </GEERU>
                    tmpTaxRegulation_ds.allowEdit(ledgerJournalTransDS.allowEdit());
                    taxRegulationTotal.allowEdit(ledgerJournalTransDS.allowEdit());
                // <GEERU>
                }
                // </GEERU>
            }
            else
            {
                if (!taxTmpWorkTransForm.parmSourceSingleLine() || taxTmpWorkTransForm.parmAllowSingleLineAdjustment())
                {
                tmpTaxRegulation_ds.allowEdit(true);
                taxRegulationTotal.allowEdit(true);
                // <GIN>
                if (isCustomsEnabled)
                {
                    element.showHideFields_IN(taxTmpWorkTransForm.parmTaxRegulation().isImportExportOrder_IN());
                }
                // </GIN>
                }
                else
                {
                    tmpTaxRegulation_ds.allowEdit(false);
                    taxRegulationTotal.allowEdit(false);
                }
                }
            }
        }

        // <GEEU>
        if (isTaxSpecificExchRateEnabledByTable)
        {
            element.enableTaxExchangeRateFields(taxTmpWorkTransForm.canChangeTaxExchangeRate(element.args().record()));
        }
        else if (!TaxParameters::isBankExchRateEnabled_W() ||
            tmpTaxWorkTrans.SourceCurrencyCode == tmpTaxWorkTrans.accountingCurrency())
        {
            element.enableTaxExchangeRateFields(false);
        }
        else
        {
            element.enableTaxExchangeRateFields(taxTmpWorkTransForm.canChangeTaxExchangeRate(element.args().record()));
        }
        // </GEEU>

        if (isTaxCodeAdjustmentEnabled)
        {
            element.setAllowEditForTaxCodeAdjustment();
        }

        if (element.args().menuItemName() == menuitemDisplayStr(TaxTmpWorkConsInvoice_JP))
        {
            taxRegulationTotal.allowEdit(false);
        }

        element.setSecurableControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCorrectedTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Set the value of the corrected tax amount within caller form
    /// </summary>
    /// <param name="_correctedTaxAmountCur">
    ///     corrected tax amount from sales tax form.
    /// </param>
    /// <remarks>
    ///     Method is used to set the corrected tax amount to caller form
    /// </remarks>
    public void setCorrectedTaxAmount(TaxAmount _correctedTaxAmountCur)
    {
        TaxIFormCorrectableTaxAmount correctableTaxForm = callerForm as TaxIFormCorrectableTaxAmount;

        if (correctableTaxForm)
        {
            this.parmTaxTmpWorkTransFormHasInit(true);
            correctableTaxForm.setCorrectedTaxAmount(_correctedTaxAmountCur);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSecurableControls</Name>
				<Source><![CDATA[
    public void setSecurableControls()
    {
        switch (accessRight)
        {
            case AccessRight::NoAccess:
            case AccessRight::View:
                apply.enabled(false);
                reset.enabled(false);
                taxRegulationTotal.enabled(false);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showHideFields_IN</Name>
				<Source><![CDATA[
    public void showHideFields_IN(boolean _importExportOrder = false)
    {
        adjustedTaxRegulationTotalCustoms_IN.visible(_importExportOrder);
        tmpTaxRegulation_SourceRegulateAmountCustoms_IN.visible(_importExportOrder);
        TmpTaxRegulation_SourceTaxAmountAccountingCur_IN.visible(_importExportOrder);
        taxAmountCustomsCurTotal_IN.visible(_importExportOrder);
        taxRegulationTotal.allowEdit(!_importExportOrder);
        taxRegulationTotal.skip(_importExportOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showSalesTaxExchangeRateFields</Name>
				<Source><![CDATA[
    void showSalesTaxExchangeRateFields(boolean _enable)
    {
        dateOfVATRegister.visible(_enable);
        salesTaxExchangeRate.visible(_enable);
        exchangeRateTaxBaseAmount.visible(_enable);
        exchangeRateTaxAmount.visible(_enable);

        tmpTaxWorkTrans_ds.object(fieldNum(TmpTaxWorkTrans, ExchangeRateTaxBaseAmount)).visible(_enable);
        tmpTaxWorkTrans_ds.object(fieldNum(TmpTaxWorkTrans, ExchangeRateTaxAmount)).visible(_enable);
        tmpTaxWorkTrans_ds.object(fieldNum(TmpTaxWorkTrans, ExchangeRateSourceBaseAmountRegulated)).visible(_enable);
        tmpTaxWorkTrans_ds.object(fieldNum(TmpTaxWorkTrans, ExchangeRateSourceRegulateAmount)).visible(_enable);

        tmpTaxRegulation_ds.object(fieldNum(TmpTaxRegulation, ExchangeRateTaxBaseAmount)).visible(_enable);
        tmpTaxRegulation_ds.object(fieldNum(TmpTaxRegulation, ExchangeRateTaxAmount)).visible(_enable);
        tmpTaxRegulation_ds.object(fieldNum(TmpTaxRegulation, ExchangeRateSourceBaseAmountRegulated)).visible(_enable);
        tmpTaxRegulation_ds.object(fieldNum(TmpTaxRegulation, ExchangeRateSourceRegulateAmount)).visible(_enable);

        if (isTaxSpecificExchRateEnabledByTable)
        {
            tmpTaxWorkTrans_ds.object(fieldNum(TmpTaxWorkTrans, ExchangeRateTaxBaseAmountRep)).visible(_enable);
            tmpTaxWorkTrans_ds.object(fieldNum(TmpTaxWorkTrans, ExchangeRateTaxAmountRep)).visible(_enable);

            tmpTaxWorkTrans_ds.object(fieldNum(TmpTaxWorkTrans, ExchangeRateTaxBaseAmountCur)).visible(_enable);
            tmpTaxWorkTrans_ds.object(fieldNum(TmpTaxWorkTrans, ExchangeRateTaxAmountCur)).visible(_enable);
            tmpTaxWorkTrans_ds.object(fieldNum(TmpTaxWorkTrans, ExchangeRateBaseAmountCurRegulated)).visible(_enable);
            tmpTaxWorkTrans_ds.object(fieldNum(TmpTaxWorkTrans, ExchangeRateRegulateAmountCur)).visible(_enable);

            SalesTaxExchangeRateRep.visible(_enable);
            SalesTaxExchangeRateCur.visible(_enable);

            SalesTaxExchangeRateGroup.visible(false);
            ReportingCurrencyAmount.visible(_enable);
            TaxCurrencyAmount.visible(_enable);

            TaxSpecificExchangeRateTaxBaseAmount.visible(_enable);
            TaxSpecificExchangeRateSourceRegulateAmount.visible(_enable);
            TaxSpecificExchangeRateSourceBaseAmountRegulated.visible(_enable);
            TaxSpecificExchangeRateTaxAmount.visible(_enable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountCurTotal</Name>
				<Source><![CDATA[
    display AmountCur taxAmountCurTotal()
    {
        return  taxTmpWorkTransForm.parmTaxAmountCurTotal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountCustomsCurTotal_IN</Name>
				<Source><![CDATA[
    display AmountCur taxAmountCustomsCurTotal_IN()
    {
        return  taxTmpWorkTransForm.parmtaxAmountCustomsCurTotal_IN(tmpTaxWorkTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxRegulationTotalCur</Name>
				<Source><![CDATA[
    edit TaxRegulationAmountCur taxRegulationTotalCur(boolean                   _set,
                                                      TaxRegulationAmountCur    _taxRegulationTotalCur)
    {
        return  taxTmpWorkTransForm.parmTaxRegulationTotalCur(_set, _taxRegulationTotalCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>actualTaxRegulationTotalCur</Name>
				<Source><![CDATA[
    edit TaxRegulationAmountCur actualTaxRegulationTotalCur(boolean _set,
        TaxRegulationAmountCur _taxRegulationTotalCur)
    {
        return taxTmpWorkTransForm.parmTaxRegulationTotalCur(_set, _taxRegulationTotalCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchInvoiceVarianceApproved</Name>
				<Source><![CDATA[
    /// <summary>
    /// If tax is adjusted for a purchase order invoice, the VendInvoiceInfoTable's varianceApproved value may need to be unmarked.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The PO invoice to be unapproved.
    /// </param>
    public void updatePurchInvoiceVarianceApproved(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        taxTmpWorkTransForm.updatePurchInvoiceVarianceApproved(_vendInvoiceInfoTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesTableEstimated</Name>
				<Source><![CDATA[
    /**
        If tax is adjusted, the salesTable.estimate value must be recalculated
        so the creditlimit-check uses up-to-date data
    **/
    public void updateSalesTableEstimated(SalesTable _salesTable)
    {
        SalesTable salesTableDB;
        boolean salesTableUpdated;
        Object           objDataSource;

        ttsbegin;

        salesTableDB = SalesTable::find(_salesTable.SalesId,true);

        if (salesTableDB)
        {
            if (salesTableDB.setEstimate())
            {
                salesTableDB.doUpdate();
                salesTableUpdated = true;
            }
        }

        ttscommit;

        if (salesTableUpdated && FormDataUtil::isFormDataSource(_salesTable))
        {
            FormDataUtil::getFormDataSource(_salesTable).reread();

            // Note: BP late bound call warning appears here but cannot be resolved because the compiler
            // doesn't support implementing interfaces on DataSource classes.
            if (formDataSourceHasMethod( FormDataUtil::getFormDataSource(_salesTable),identifierStr(setTouched)))
            {
                objDataSource = FormDataUtil::getFormDataSource(_salesTable);

                objDataSource.setTouched();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>task</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override system-defined button behavoir.
    /// </summary>
    /// <param name = "_taskId">The task executed by the system-defined button</param>
    /// <returns></returns>
    public int task(int _taskId)
    {
        #Task
        int ret;
        TmpTaxRegulation tmpTaxRegulationRecord;

        switch (_taskId)
        {
            case #taskDoneEditRecord:
                editMode = false;
            case #taskSave:
                tmpTaxRegulationRecord = TmpTaxRegulation_DS.getFirst();
                do
                {
                    if (tmpTaxRegulationRecord.OverrideCalculatedTax == true)
                    {
                        Apply.clicked();
                        break;
                    }
                    else
                    {
                        tmpTaxRegulationRecord = TmpTaxRegulation_DS.getNext();
                    }
                }
                while (tmpTaxRegulationRecord);
                ret = super(_taskId);
                break;

            case #taskEditRecord:
                if (!editMode)
                {
                    editMode = true;
                    ret = super(_taskId);
                }
                break;

            default:
                ret = super(_taskId);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesTaxFormEnabled</Name>
				<Source><![CDATA[
    public void setSalesTaxFormEnabled()
    {
        LedgerJournalTrans ledgerJournalTrans = element.args().record() as LedgerJournalTrans;
        LedgerJournalTable ledgerJournalTable = ledgerJournalTrans.ledgerJournalTable();

        if (ledgerJournalTable.isInWFApprovalProcess())
        {
            if (ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::NotSubmitted
                 || ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::ChangeRequested)
            {
                ButtonGroup.enabled(true);
                element.setEditMode(true);
            }
            else
            {
                ButtonGroup.enabled(false);
                element.setEditMode(false);
            }
        }

        if (ledgerJournalTrans.TaxCode && !(ledgerJournalTrans.TaxGroup && ledgerJournalTrans.TaxItemGroup))
        {
            TmpTaxRegulation_SourceBaseAmountCurRegulated.allowEdit(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableSingleLineTaxAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether to use detail tax adjustment.
    /// </summary>
    /// <returns>
    /// true if use detail tax adjustment; otherwise, false.
    /// </returns>
    public boolean enableSingleLineTaxAdjustment()
    {
        return SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion()
            || CustParameters::enableSingleLineTaxAdjustment()
            || isTaxCodeAdjustmentEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyForTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the company for TaxCode
    /// </summary>
    /// <returns>
    /// Return the TmpTaxWorkTrans table Company field as the current TaxCode company.
    /// </returns>
    public DataAreaId getCompanyForTaxCode()
    {
        return TmpTaxWorkTrans.Company;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOpenFromSalesEditLines</Name>
				<Source><![CDATA[
    protected boolean isOpenFromSalesEditLines()
    {
        Object salesEditLinesObject = element.args().parmObject();

        if ((CustParameters::find().EnableSingleLineTaxAdjustment || isTaxCodeAdjustmentEnabled)
            && salesEditLinesObject && salesEditLinesObject.name() == formStr(SalesEditLines))
        {
            isOpenFromSalesEditLines = true;
        }

        return isOpenFromSalesEditLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDisplayForTaxCodeAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets display of data sources and controls, for tax code adjustment feature.
    /// </summary>
    private void setDisplayForTaxCodeAdjustment()
    {
        // Show tax code add/remove/cancel button.
        TmpTaxRegulation_LineStripNew.visible(true);
        TmpTaxRegulation_LineStripDelete.visible(true);
        CancelButton.visible(true);

        // Shows line number.
        TmpTaxWorkTrans_ds.object(fieldNum(TmpTaxWorkTrans, SourceLineType)).visible(true);
        TmpTaxWorkTrans_ds.object(fieldNum(TmpTaxWorkTrans, SourceOrderLineNum)).visible(true);
        TmpTaxWorkTrans_ds.object(fieldNum(TmpTaxWorkTrans, SourceChargeLineNum)).visible(true);
            
        TmpTaxRegulation_ds.object(fieldNum(TmpTaxRegulation, SourceLineType)).visible(true);
        TmpTaxRegulation_ds.object(fieldNum(TmpTaxRegulation, SourceOrderLineNum)).visible(true);
        TmpTaxRegulation_ds.object(fieldNum(TmpTaxRegulation, SourceChargeLineNum)).visible(true);

        // Shows line detail mode.
        TaxAdjustmentType.selection(TaxAdjustmentType::Detail);
        TaxAdjustmentType.selectionChange();
        TaxAdjustmentType.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowEditForTaxCodeAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets allow edit of data sources and controls, for tax code adjustment feature.
    /// </summary>
    private void setAllowEditForTaxCodeAdjustment()
    {
        // Allow tax adjustment.
        TmpTaxRegulation_ds.allowCreate(true);
        TmpTaxRegulation_ds.allowEdit(true);
        TmpTaxRegulation_ds.allowDelete(true);
        TmpTaxRegulation_TaxCode.allowEdit(true);

        // Not allow total adjustment.
        TaxRegulationTotal.allowEdit(false);
        ActualTaxRegulationTotal.allowEdit(false);

        // Not allow base amount adjustment.
        TmpTaxRegulation_ds.object(fieldNum(TmpTaxRegulation, SourceBaseAmountCurRegulated)).allowEdit(false);
        TmpTaxRegulation_SourceBaseAmountCurRegulated.allowEdit(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts tax amount when tax code adjustment feature is enabled.
    /// </summary>
    /// <param name = "_taxAmountCur">The target tax amount.</param>
    /// <param name = "_tmpTaxRegulation">The <c>TmpTaxRegulation</c> record.</param>
    /// <returns>true if it can adjust to target tax amount; otherwise, false.</returns>
    private boolean adjustTaxAmount(TaxAmountCur _taxAmountCur, TmpTaxRegulation _tmpTaxRegulation)
    {
        if (_taxAmountCur != 0 &&
            (_tmpTaxRegulation.TaxDirection == TaxDirection::TaxExemptSales
                || _tmpTaxRegulation.TaxDirection  == TaxDirection::TaxExemptPurchase))
        {
            return checkFailed("@Tax:NotPossibleToAdjustTaxFreeSalesTax");
        }

        _tmpTaxRegulation.OverrideCalculatedTax = NoYes::Yes;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcTaxRefreshForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Re-calculates tax and refreshes form.
    /// </summary>
    private void recalcTaxRefreshForm()
    {
        // Re-calculate tax from tax service.
        Tax tax = TaxIntegrationHelper::calcTax(element.args().record(), callerForm);

        if (tax)
        {
            element.initTax(tax);

            // Refreshes tax overview form base on TmpTaxWorkTrans records.
            tmpTaxWorkTrans.setTmpData(tax.tmpTaxWorkTrans());
            tmpTaxWorkTrans_ds.research(true);

            // Refreshed tax adjustment form base on TmpTaxRegulation records.
            TaxRegulationDetail taxRegulationDetail = taxTmpWorkTransForm.parmTaxRegulation();
            taxRegulationDetail.setTax(tax);
            taxRegulationDetail.createSumsFromTmp(); // Create TmpTaxRegulation records.
            tmpTaxregulation.setTmpData(taxRegulationDetail.tmpTaxRegulationDetail());
            if (element.isCalledFromParmTable())
            {
                TaxIntegrationAdjustment::updateSourceRegulateAmountCur(tmpTaxregulation);
            }
            tmpTaxRegulation_ds.research(true);

            element.callerRefresh();

            // Updates total amounts.
            if (Global::mappingExists(tableNum(SalesPurchJournalLine), element.args().dataset()))
            {
                // If it is called from line level, update tax total only for this line.
                taxTmpWorkTransForm.updateTaxShowTaxesSourceSingleLine(element.args().record().TableId, element.args().record().RecId, true);
            }
            TaxAmountCurTotal.update();
            TaxRegulationTotal.update();
            ActualTaxRegulationTotal.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalledFromParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether it is called from parm table.
    /// </summary>
    /// <returns>true if it is called from parm table; otherwise, false. </returns>
    private boolean isCalledFromParmTable()
    {
        return callerForm && callerForm.name() == formStr(SalesEditLines);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>TmpTaxRegulation</Name>
				<Methods>
					<Method>
						<Name>displaySourceTaxAmountAccountingCur_IN</Name>
						<Source><![CDATA[
        /// <summary>
        ///  This method is used to display the calculated sales tax amount in customs currency
        /// </summary>
        /// <param name="_tmpTaxRegulation">
        /// The <c>TmpTaxRegulation</c> table record
        /// </param>
        /// <returns>
        /// The calculated sales tax amount in customs currency
        /// </returns>
        display TaxAmountCur_IN displaySourceTaxAmountAccountingCur_IN(TmpTaxRegulation _tmpTaxRegulation)
        {
            AmountCur               sourceTaxAmountCur;

            if (_tmpTaxRegulation.ManualInsertedTax)
            {
                return 0;
            }

            sourceTaxAmountCur = taxTmpWorkTransForm.getSourceTaxAmountCur(tmpTaxWorkTrans, _tmpTaxRegulation);

            return taxTmpWorkTransForm.getSourceTaxAmountAccountingCur_IN(tmpTaxWorkTrans, _tmpTaxRegulation, sourceTaxAmountCur);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editSourceBaseAmountCurRegulated</Name>
						<Source><![CDATA[
        edit TaxBaseCur editSourceBaseAmountCurRegulated(boolean _set, TmpTaxRegulation _tmpTaxRegulation, TaxBaseCur _taxSourceRegulateAmountCur)
        {
            return taxTmpWorkTransForm.parmSourceBaseAmountCurRegulated(_set, _tmpTaxRegulation, _taxSourceRegulateAmountCur, tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            this.cacheAddMethod(identifierStr(displayTaxAdjustmentDetailDescription));
            this.cacheAddMethod(identifierStr(displayTaxAdjustmentDetailReference));
            this.cacheAddMethod(identifierStr(displayTaxAdjustmentDetailType));
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            this.query().dataSourceTable(tableNum(TmpTaxRegulation)).clearRanges();

            if (element.enableSingleLineTaxAdjustment())
            {
                if (taxAdjustmentType.selection() == TaxAdjustmentType::Summary)
                {
                    tmpTaxRegulation.setTmpData(taxTmpWorkTransForm.parmTaxRegulation().tmpTaxRegulation());
                    this.query().dataSourceTable(tableNum(TmpTaxRegulation)).addRange(fieldNum(TmpTaxRegulation, TaxAdjustmentType)).value(queryValue(TaxAdjustmentType::Summary));
                }
                else
                {
                    tmpTaxRegulation.setTmpData(taxTmpWorkTransForm.parmTaxRegulation().tmpTaxRegulationDetail());
                    this.query().dataSourceTable(tableNum(TmpTaxRegulation)).addRange(fieldNum(TmpTaxRegulation, TaxAdjustmentType)).value(queryValue(TaxAdjustmentType::Detail));
                }
            }

            if (isTaxCodeAdjustmentEnabled)
            {
                QueryBuildDataSource qbds = this.query().dataSourceTable(tableNum(TmpTaxRegulation));
                qbds.sortClear();
                qbds.addSortField(fieldNum(TmpTaxRegulation, SourceOrderLineNum), SortOrder::Ascending);
                qbds.addSortField(fieldNum(TmpTaxRegulation, SourceChargeLineNum), SortOrder::Ascending);
                qbds.addSortField(fieldNum(TmpTaxRegulation, TaxCode), SortOrder::Ascending);
            }

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayTaxInCostPriceAdjusted</Name>
						<Source><![CDATA[
        display TaxAmountCur displayTaxInCostPriceAdjusted(TmpTaxRegulation _tmpTaxRegulation)
        {
            return taxTmpWorkTransForm.getTaxInCostPriceRegulated(tmpTaxWorkTrans, _tmpTaxRegulation);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayTaxInCostPrice</Name>
						<Source><![CDATA[
        display TaxAmountCur displayTaxInCostPrice(TmpTaxRegulation _tmpTaxRegulation)
        {
            return taxTmpWorkTransForm.getTaxInCostPrice(tmpTaxWorkTrans, _tmpTaxRegulation);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displaySourceBaseAmountCur</Name>
						<Source><![CDATA[
        display TaxAmountCur displaySourceBaseAmountCur(TmpTaxRegulation _tmpTaxRegulation)
        {
            if (_tmpTaxRegulation.ManualInsertedTax)
            {
                return 0;
            }

            return taxTmpWorkTransForm.getSourceBaseAmountCur(tmpTaxWorkTrans, _tmpTaxRegulation);
        }

]]></Source>
					</Method>
					<Method>
						<Name>warningIcon</Name>
						<Source><![CDATA[
        /// <summary>
        /// Determines whether the tax line has a posting warning associated with it or not.
        /// </summary>
        /// <param name="_tmpTaxRegulation">
        /// The <c>TmpTaxRegulation</c> table record.
        /// </param>
        /// <returns>
        /// Returns <c>#Image_OK</c> if there isn't a posting warning, otherwise returns <c>#Image_Error</c>.
        /// </returns>
        public display ImageRes warningIcon(TmpTaxRegulation _tmpTaxRegulation)
        {
            #resAppl
            TaxWorkRegulation taxWorkRegulation;
            Tax tax = taxTmpWorkTransForm.parmTaxObject();

            if (_tmpTaxRegulation.ManualInsertedTax)
            {
                return #ImageMatchingError;
            }

            if (taxTmpWorkTransForm.parmIgnoreCalculatedSalesTax() && _tmpTaxRegulation.TaxDirection == TaxDirection::IncomingTax)
            {
                select firstonly RecId from taxWorkRegulation
                where taxWorkRegulation.HeadingTableId == tax.headingTableId() &&
                      taxWorkRegulation.HeadingRecId == tax.headingRecId() &&
                      taxWorkRegulation.TaxCode == _tmpTaxRegulation.TaxCode &&
                      taxWorkRegulation.TaxDirection == _tmpTaxRegulation.TaxDirection;

                if (!taxWorkRegulation.RecId)
                {
                    return #ImageMatchingError;
                }
            }

            return #Image_OK;
        }

]]></Source>
					</Method>
					<Method>
						<Name>derivedIcon</Name>
						<Source><![CDATA[
        /// <summary>
        /// Determines whether the tax code has been derived from the tax groups on the invoice or not.
        /// </summary>
        /// <param name="_tmpTaxRegulation">
        /// The <c>TmpTaxRegulation</c> table record.
        /// </param>
        /// <returns>
        /// Returns <c>#Image_OK</c> if there is a variance, otherwise returns <c>#Image_Error</c>.
        /// </returns>
        public display ImageRes derivedIcon(TmpTaxRegulation _tmpTaxRegulation)
        {
            #resAppl

            if (_tmpTaxRegulation.ManualInsertedTax)
            {
                return 0;
            }

            return #Image_OK;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editSourceRegulateAmountCur</Name>
						<Source><![CDATA[
        edit TaxRegulationAmountCur editSourceRegulateAmountCur(boolean _set, TmpTaxRegulation _tmpTaxRegulation, TaxRegulationAmountCur _taxRegulationAmountCur)
        {
            return taxTmpWorkTransForm.parmSourceRegulateAmountCur(_set, _tmpTaxRegulation, _taxRegulationAmountCur, tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editConsolidateSourceRegulateAmountCur_JP</Name>
						<Source><![CDATA[
        edit TaxRegulationAmountCur editConsolidateSourceRegulateAmountCur_JP(boolean _set, TmpTaxRegulation _tmpTaxRegulation, TaxRegulationAmountCur _taxRegulationAmountCur)
        {
            return taxTmpWorkTransForm.parmConsolidateSourceRegulateAmountCur_JP(_set, _tmpTaxRegulation, _taxRegulationAmountCur, tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editActualSourceRegulateAmountCur</Name>
						<Source><![CDATA[
        edit TaxRegulationAmountCur editActualSourceRegulateAmountCur(boolean _set, TmpTaxRegulation _tmpTaxRegulation, TaxRegulationAmountCur _taxRegulationAmountCur)
        {
            return taxTmpWorkTransForm.parmActualSourceRegulateAmountCur(_set, _tmpTaxRegulation, _taxRegulationAmountCur, tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displaySourceTaxAmountCur</Name>
						<Source><![CDATA[
        display TaxAmountCur displaySourceTaxAmountCur(TmpTaxRegulation _tmpTaxRegulation)
        {
            if (_tmpTaxRegulation.ManualInsertedTax)
            {
                return 0;
            }

            return taxTmpWorkTransForm.getSourceTaxAmountCur(tmpTaxWorkTrans, _tmpTaxRegulation);
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            super();
            taxTmpWorkTransForm.initTmpTaxRegulationValue(tmpTaxRegulation);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editSourceRegulateAmountCustoms_IN</Name>
						<Source><![CDATA[
        edit TaxRegulationAmountCur editSourceRegulateAmountCustoms_IN(
            boolean                 _set,
            TmpTaxRegulation        _tmpTaxRegulation,
            TaxRegulationAmountCur  _taxRegulationAmountCur)
        {
            return taxTmpWorkTransForm.parmSourceRegulateAmountCurCustoms_IN(_set,
                                                                             _tmpTaxRegulation,
                                                                             _taxRegulationAmountCur,
                                                                             tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();
            if (ret)
            {
                element.determineAdjustmentMessage();
                if (tmpTaxRegulation.ManualInsertedTax)
                {
                    tmpTaxRegulation_TaxCode.allowEdit(true);
                    tmpTaxRegulation_OverrideCalculatedTax.allowEdit(false);
                }
                else
                {
                    tmpTaxRegulation_TaxCode.allowEdit(false);
                    tmpTaxRegulation_OverrideCalculatedTax.allowEdit(true);
                }

                if (taxTmpWorkTransForm.parmUseSalesTaxAdjustments() 
                    && taxTmpWorkTransForm.parmKeepSalesTaxAdjustments()
                    && (!taxTmpWorkTransForm.parmSourceSingleLine() 
                        || taxTmpWorkTransForm.parmAllowSingleLineAdjustment()))
                {
                    tmpTaxRegulation_ds.allowEdit(true);
                    taxRegulationTotal.allowEdit(true);
                }
            }

            // <GIN>
            if (isCustomsEnabled)
            {
                element.enableCustomsAdjustmentFields_IN();
                tmpTaxRegulation_ds.refresh();
            }
            // </GIN>

            if (isTaxCodeAdjustmentEnabled)
            {
                element.setAllowEditForTaxCodeAdjustment();
            }

            element.setSecurableControls();
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayTaxAdjustmentDetailDescription</Name>
						<Source><![CDATA[
        /// <summary>
        /// Displays the description of the tax adjustment detail.
        /// </summary>
        /// <param name="_tmpTaxRegulation">
        /// The tax adjustment detail.
        /// </param>
        /// <returns>
        /// The description of the tax adjustment detail.
        /// </returns>
        public display TaxAdjustmentDetailDescription displayTaxAdjustmentDetailDescription(TmpTaxRegulation _tmpTaxRegulation)
        {
            return taxTmpWorkTransForm.getTaxAdjustmentDetailDescription(_tmpTaxRegulation.SourceTableId, _tmpTaxRegulation.SourceRecId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayTaxAdjustmentDetailReference</Name>
						<Source><![CDATA[
        /// <summary>
        /// Displays the reference of the tax adjustment detail.
        /// </summary>
        /// <param name="_tmpTaxRegulation">
        /// The tax adjustment detail.
        /// </param>
        /// <returns>
        /// The reference of the tax adjustment detail.
        /// </returns>
        public display TaxAdjustmentDetailReference displayTaxAdjustmentDetailReference(TmpTaxRegulation _tmpTaxRegulation)
        {
            return taxTmpWorkTransForm.getTaxAdjustmentDetailReference(_tmpTaxRegulation.SourceTableId, _tmpTaxRegulation.SourceRecId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayTaxAdjustmentDetailType</Name>
						<Source><![CDATA[
        /// <summary>
        /// Displays the type of the tax adjustment detail.
        /// </summary>
        /// <param name="_tmpTaxRegulation">
        /// The tax adjustment detail.
        /// </param>
        /// <returns>
        /// The type of the tax adjustment detail.
        /// </returns>
        public display TaxAdjustmentDetailType displayTaxAdjustmentDetailType(TmpTaxRegulation _tmpTaxRegulation)
        {
            return taxTmpWorkTransForm.getTaxAdjustmentDetailType(_tmpTaxRegulation.SourceTableId, _tmpTaxRegulation.SourceRecId);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>TaxationCodeRegulated_BR</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                TaxationCodeTable_BR::lookupByTaxType(_formControl, tmpTaxRegulation.TaxCode, tmpTaxRegulation.TaxFiscalValue_BR);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>TmpTaxWorkTrans</Name>
				<Methods>
					<Method>
						<Name>displayExchangeRateSourceRegulateAmount</Name>
						<Source><![CDATA[
        display TaxAmount displayExchangeRateSourceRegulateAmount(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getExchangeRateSourceRegulateAmount(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayExchRateSourceBaseAmountRegulated</Name>
						<Source><![CDATA[
        display TaxBase displayExchRateSourceBaseAmountRegulated(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getExchangeRateSourceBaseAmountRegulated(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayExchangeRateTaxAmount</Name>
						<Source><![CDATA[
        display TaxAmount displayExchangeRateTaxAmount(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getExchangeRateTaxAmount(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayExchangeRateTaxBaseAmount</Name>
						<Source><![CDATA[
        display TaxBase displayExchangeRateTaxBaseAmount(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getExchangeRateTaxBaseAmount(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayExchangeRateTaxAmountRep</Name>
						<Source><![CDATA[
        internal display TaxAmount displayExchangeRateTaxAmountRep(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getExchangeRateTaxAmountRep(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayExchangeRateTaxBaseAmountRep</Name>
						<Source><![CDATA[
        internal display TaxBase displayExchangeRateTaxBaseAmountRep(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getExchangeRateTaxBaseAmountRep(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayExchangeRateRegulateAmountCur</Name>
						<Source><![CDATA[
        internal display TaxAmount displayExchangeRateRegulateAmountCur(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getExchangeRateRegulateAmountCur(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayExchangeRateBaseAmountCurRegulated</Name>
						<Source><![CDATA[
        internal display TaxBase displayExchangeRateBaseAmountCurRegulated(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getExchangeRateBaseAmountCurRegulated(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayExchangeRateTaxAmountCur</Name>
						<Source><![CDATA[
        internal display TaxAmount displayExchangeRateTaxAmountCur(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getExchangeRateTaxAmountCur(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayExchangeRateTaxBaseAmountCur</Name>
						<Source><![CDATA[
        internal display TaxBase displayExchangeRateTaxBaseAmountCur(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getExchangeRateTaxBaseAmountCur(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayTaxAmountCur</Name>
						<Source><![CDATA[
        internal display TaxAmount displayTaxAmountCur(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getTaxAmountCur(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayTaxBaseAmountCur</Name>
						<Source><![CDATA[
        internal display TaxBase displayTaxBaseAmountCur(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getTaxBaseAmountCur(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayTaxAmountRep</Name>
						<Source><![CDATA[
        internal display TaxAmount displayTaxAmountRep(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getTaxAmountRep(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayTaxBaseAmountRep</Name>
						<Source><![CDATA[
        internal display TaxBase displayTaxBaseAmountRep(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getTaxBaseAmountRep(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>taxableTaxAmount_BR</Name>
						<Source><![CDATA[
        public display TaxAmount taxableTaxAmount_BR(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return _tmpTaxWorkTrans.FiscalValue_BR == TaxFiscalValue_BR::WithCreditDebit ? this.displayTaxAmount(_tmpTaxWorkTrans) : 0;
        }

]]></Source>
					</Method>
					<Method>
						<Name>taxableBaseAmount_BR</Name>
						<Source><![CDATA[
        public display TaxAmount taxableBaseAmount_BR(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return _tmpTaxWorkTrans.FiscalValue_BR == TaxFiscalValue_BR::WithCreditDebit ? _tmpTaxWorkTrans.TaxBaseAmount : 0;
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            // <GIN>
            if (ret && TaxParameters::isCustomsEnable_IN())
            {
                element.enableFields_IN();
                tmpTaxWorkTrans_EximDEPBAmount_IN.visible(TmpTaxWorkTrans::enableDEPBAmount_IN(tmpTaxWorkTrans.SourceTableId, tmpTaxWorkTrans.SourceRecId));
            }
            // </GIN>

            // Does not display counterparty VAT ID for prospect of sales quotation.
            if (tmpTaxWorkTrans.HeadingTableId == tableNum(SalesQuotationTable) && SalesQuotationTable::findRec(tmpTaxWorkTrans.HeadingRecId).BusRelAccount)
            {
                tmpTaxWorkTrans_ds.object(fieldNum(TmpTaxWorkTrans, PartyTaxId)).visible(false);
            }

            if (isTaxSpecificExchRateEnabledByTable)
            {
                taxTmpWorkTransFormParameters = TaxTmpWorkTransFormParameters::construct();
                taxTmpWorkTransFormParameters.vatExchRate = TmpTaxWorkTrans.SalesTaxExchangeRateCur ? TmpTaxWorkTrans.SalesTaxExchangeRateCur : 100;
                SalesTaxExchangeRateCur.realValue(taxTmpWorkTransForm.displaySalesTaxExchRate(taxTmpWorkTransFormParameters));
                if ((element.args().record().TableId == tableNum(CustInvoiceTable) || element.args().record().TableId == tableNum(SalesTable))
                    && CustInvoiceBankExchangeRateEligibility_PL::isBankExchangeRateNotApplicableOnInvoice())
                {
                    SalesTaxExchangeRateCur.allowEdit(false);
                }
                else
                {
                    SalesTaxExchangeRateCur.allowEdit(
                        taxTmpWorkTransForm.canChangeTaxExchangeRate(element.args().record())
                        && TmpTaxWorkTrans.VatDueDate_W
                        && TmpTaxWorkTrans.CurrencyCode != TmpTaxWorkTrans.accountingCurrency()
                        && TmpTaxWorkTrans.CurrencyCode != TmpTaxWorkTrans.reportingCurrency()
                        && TmpTaxWorkTrans.CurrencyCode != TmpTaxWorkTrans.SourceCurrencyCode);
                }
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayOverrideCalculated</Name>
						<Source><![CDATA[
        display NoYes displayOverrideCalculated(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getOverrideCalculated(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayTaxInCostPriceMST</Name>
						<Source><![CDATA[
        display TaxAmountCur displayTaxInCostPriceMST(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getTaxInCostPriceMST(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayActualTaxInCostPrice</Name>
						<Source><![CDATA[
        display TaxAmountCur displayActualTaxInCostPrice(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getActuaTaxIncostPrice(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayTaxInCostPriceRegulated</Name>
						<Source><![CDATA[
        display TaxAmountCur displayTaxInCostPriceRegulated(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getTaxInCostPriceRegulated(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayTaxInCostPrice</Name>
						<Source><![CDATA[
        display TaxAmountCur displayTaxInCostPrice(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getTaxInCostPrice(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayTaxBaseQty</Name>
						<Source><![CDATA[
        display TaxQty displayTaxBaseQty(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getTaxBaseQty(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayTaxBaseAmount</Name>
						<Source><![CDATA[
        display TaxAmountCur displayTaxBaseAmount(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getTaxBaseAmount(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayTaxAmount</Name>
						<Source><![CDATA[
        display TaxAmountCur displayTaxAmount(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getTaxAmount(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displaySourceBaseAmountCurRegulated</Name>
						<Source><![CDATA[
        display TaxBaseCur displaySourceBaseAmountCurRegulated(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getSourceBaseAmountCurRegulated(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displaySourceBaseAmountCur</Name>
						<Source><![CDATA[
        display TaxBaseCur displaySourceBaseAmountCur(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getSourceBaseAmountCur(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displaySourceTaxAmountCur</Name>
						<Source><![CDATA[
        display TaxAmountCur displaySourceTaxAmountCur(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getSourceTaxAmountCur(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displaySourceRegulateAmountCur</Name>
						<Source><![CDATA[
        display TaxRegulationAmountCur displaySourceRegulateAmountCur(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getSourceRegulateAmountCur(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayConsolidateSourceBaseAmountCur_JP</Name>
						<Source><![CDATA[
        display TaxBaseCur displayConsolidateSourceBaseAmountCur_JP(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getConsolidateSourceBaseAmountCur_JP(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayConsolidateSourceTaxAmountCurPosted_JP</Name>
						<Source><![CDATA[
        display TaxRegulationAmountCur displayConsolidateSourceTaxAmountCurPosted_JP(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getConsolidateSourceTaxAmountCurPosted_JP(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayConsolidateSourceRegulateAmountCur_JP</Name>
						<Source><![CDATA[
        display TaxRegulationAmountCur displayConsolidateSourceRegulateAmountCur_JP(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            return taxTmpWorkTransForm.getConsolidateSourceRegulateAmountCur_JP(_tmpTaxWorkTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        void linkActive()
        {
            MarkupTrans markupTrans;

            if (taxTmpWorkTransForm.parmSourceSingleLine())
            {
                taxTmpWorkTransForm.updateTaxShowTaxesSourceSingleLine(element.args().record().TableId, element.args().record().RecId, true);
                switch (element.args().record().TableId)
                {
                    case tableNum(SalesLine):
                    case tableNum(PurchLine):
                    case tableNum(PurchReqLine):
                    case tableNum(VendInvoiceInfoLine):
                    case tableNum(PlSADTrans):
                    case tableNum(PlSADFinanceLines):
                        this.query().dataSourceTable(tableNum(TmpTaxWorkTrans)).clearDynalinks();
                        this.query().dataSourceTable(tableNum(TmpTaxWorkTrans)).clearRanges();
                        this.query().dataSourceTable(tableNum(TmpTaxWorkTrans)).addRange(fieldNum(TmpTaxWorkTrans, SourceRecId)).value(
                            strFmt('(%1 == %2) && (%3 == %4)',
                            fieldStr(TmpTaxWorkTrans, SourceRecId),
                            queryValue(element.args().record().RecId),
                            fieldStr(TmpTaxWorkTrans, SourceTableId),
                            queryValue(element.args().record().TableId)));

                        while select TransTableId, TransRecId, RecId from markupTrans
                            where markupTrans.TransTableId == element.args().record().TableId
                               && markupTrans.TransRecId   == element.args().record().RecId
                               && !markupTrans.IsDeleted
                        {
                            this.query().dataSourceTable(tableNum(TmpTaxWorkTrans)).addRange(fieldNum(TmpTaxWorkTrans, SourceRecId)).value(
                                strFmt('(%1 == %2) && (%3 == %4)',
                                fieldStr(TmpTaxWorkTrans, SourceRecId),
                                queryValue(markupTrans.RecId),
                                fieldStr(TmpTaxWorkTrans, SourceTableId),
                                queryValue(markupTrans.TableId)));
                        }
                }
            }
            else
            {
                switch (element.args().record().TableId)
                {
                    case tableNum(SalesTable) :
                        if (element.getHeadingRecId() != element.args().record().RecId)
                        {
                            element.pushTaxObject(SalesTotals::getTax(element.args().record()));
                        }
                        break;

                    case tableNum(PurchTable) :
                        if (element.getHeadingRecId() != element.args().record().RecId)
                        {
                            element.pushTaxObject(PurchTotals::getTax(element.args().record()));
                        }
                        break;

                    default :
                        if (!taxTmpWorkTransForm.parmHasTaxFromInit())
                        {
                            taxTmpWorkTransForm.pullTaxObject(callerForm, element.args().dataset(), element.args().record(),
                                             tmpTaxRegulation, tmpTaxWorkTrans);
                        }
                        break;
                }
                taxTmpWorkTransForm.parmHasTaxFromInit(false);
            }
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        void init()
        {
            // <GIN>
            TableId  tableId;
            RefRecId recId;
            Tax tax;
            // </GIN>

            // <GIN>
            isCustomsEnabled = TaxParameters::isCustomsEnable_IN();
            if (isCustomsEnabled)
            {
                tax      = element.args().caller();
                tableId  = tax.headingTableId();
                recId    = tax.headingRecId();
                if (TaxParameters::find().EximIncentiveSchemes_IN
                    && (tableId == tableNum(PurchTable)
                    && PurchTable_W::findByPurchTable(recId).CustomsImportOrder_IN == NoYes::Yes)
                    || (tableId == tableNum(PurchParmTable)
                    && PurchParmTable::findRecId(recId).purchTable().purchTable_W().CustomsImportOrder_IN == NoYes::Yes)
                    || (tableId == tableNum(VendInvoiceInfoTable)
                    && VendInvoiceInfoTable::findRecId(recId).purchTable().purchTable_W().CustomsImportOrder_IN == NoYes::Yes))
                {
                    isImportOrderExim = true;
                    taxTmpWorkTransForm.parmIsImportOrderExim_IN(true);
                }
            }
            // </GIN>

            super();

            // <GIN>
            if (isCustomsEnabled)
            {
                element.showHideFields_IN();
            }
            // </GIN>
            element.initTax(element.args().caller());
            taxTmpWorkTransForm.parmHasTaxFromInit(true);
            this.cacheAddMethod(identifierStr(showTaxValue));
            this.cacheAddMethod(identifierStr(displayTaxBaseQty));
            this.cacheAddMethod(identifierStr(displaySourceTaxAmountCur));
            this.cacheAddMethod(identifierStr(displaySourceBaseAmountCurRegulated));
            this.cacheAddMethod(identifierStr(displaySourceRegulateAmountCur));
            this.cacheAddMethod(identifierStr(displaySourceBaseAmountCur));
            // <GEEU>
            this.cacheAddMethod(identifierStr(displayExchangeRateTaxAmount));
            this.cacheAddMethod(identifierStr(displayExchangeRateTaxBaseAmount));
            this.cacheAddMethod(identifierStr(displayExchangeRateSourceRegulateAmount));
            this.cacheAddMethod(identifierStr(displayExchRateSourceBaseAmountRegulated));
            // </GEEU>
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        void executeQuery()
        {
            // if a warning is set on a tax line then do not display it.
            this.query().dataSourceTable(tableNum(TmpTaxWorkTrans)).addRange(fieldNum(TmpTaxWorkTrans, Warning)).value(queryValue(TaxWarning::NoWarning));

            // If the tax line has been soft deleted then don't display it.
            this.query().dataSourceTable(tableNum(TmpTaxWorkTrans)).addRange(fieldNum(TmpTaxWorkTrans, IsDeleted)).value(queryValue(NoYes::No));

            if (isTaxCodeAdjustmentEnabled)
            {
                QueryBuildDataSource qbds = this.query().dataSourceTable(tableNum(TmpTaxWorkTrans));
                qbds.sortClear();
                qbds.addSortField(fieldNum(TmpTaxWorkTrans, SourceOrderLineNum), SortOrder::Ascending);
                qbds.addSortField(fieldNum(TmpTaxWorkTrans, SourceChargeLineNum), SortOrder::Ascending);
                qbds.addSortField(fieldNum(TmpTaxWorkTrans, TaxCode), SortOrder::Ascending);
            }

            super();
            element.setAllowEdit();
            tmpTaxregulation_ds.executeQuery();
            // <GIN>
            if (TaxParameters::checkTaxParameters_IN())
            {
                if (!tmpTaxWorkTrans)
                {
                    formulaDesigner_IN.enabled(false);
                }
            }
            // </GIN>
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayCustomsSourceRegulateAmountMST_IN</Name>
						<Source><![CDATA[
        display AmountMST displayCustomsSourceRegulateAmountMST_IN()
        {
            AmountMST amount;

            if (TaxTable::find(tmpTaxWorkTrans.TaxCode).TaxType_IN == TaxType_IN::Customs)
            {
                amount = tmpTaxWorkTrans.SourceRegulateAmountCustoms_IN;
            }
            else
            {
                amount = 0;
            }

            return amount;
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayBalanceCorrected_IN</Name>
						<Source><![CDATA[
        display TaxAmount displayBalanceCorrected_IN()
        {
            AmountMST amount;

            amount = this.displayCustomsSourceRegulateAmountMST_IN();
            return  taxTmpWorkTransForm.parmBalanceCorrected_IN(tmpTaxWorkTrans, amount);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayEximCorrectedAmount_IN</Name>
						<Source><![CDATA[
        display TaxAmount displayEximCorrectedAmount_IN()
        {
            TaxAmount correctedAmount;

            correctedAmount = this.displayCustomsSourceRegulateAmountMST_IN();
            return  taxTmpWorkTransForm.parmEximCorrectedAmount_IN(tmpTaxWorkTrans, correctedAmount);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>PartyTaxId</DataField>
						<Methods>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            public void jumpRef()
            {
                // Disable the hyperlink for PartyTaxId since there is no form for Registration numbers.
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>TaxId</DataField>
						<Methods>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            public void jumpRef()
            {
                // Disable the hyperlink for TaxId since there is no form for Registration numbers.
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>DistributeDistributions</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            TaxUncommitted  taxUncommitted;
            Args            args;
            MenuFunction    menuFunction;

            taxUncommitted = TaxUncommitted::findBySourceDocumentLine(tmpTaxWorkTrans.SourceDocumentLine);

            if (taxUncommitted)
            {
                args = new Args();
                args.caller(element);
                args.record(taxUncommitted);

                menuFunction = new MenuFunction(menuitemDisplayStr(AccountingDistTaxTransTmp), MenuItemType::Display);
                menuFunction.run(args);
            }
            else
            {
                warning("@SYS335597");
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SalesTaxCode</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            TaxTable taxTalbe = TaxTable::find(TmpTaxWorkTrans.TaxCode);

            if (taxTalbe)
            {
                Args args = new Args();

                args.caller(element);
                args.record(taxTalbe);

                MenuFunction menuFunction =  new MenuFunction(menuitemDisplayStr(TaxTable), MenuItemType::Display);
                menuFunction.run(args);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Tab</Name>
				<Type>Tab</Type>
				<Methods>
					<Method>
						<Name>tabChanged</Name>
						<Source><![CDATA[
        public void tabChanged(int _fromTab, int _toTab)
        {
            currentTab = _toTab;
            super(_fromTab, _toTab);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Overview</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            ignoreCalculatedTaxAmounts.visible(false);
            super();
            distributeDistributions.enabled(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>General</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();
            distributeDistributions.enabled(true);
            isGeneralTabViewed = true;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AmountTab</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();
            isAmountTabViewed = true;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Regulation</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            // <GBR>
            if (BrazilParameters::isEnabled() && taxTmpWorkTransForm.parmUseDetailTaxAdjustmentType())
            {
                taxAdjustmentType.selection(TaxAdjustmentType::Detail);
                taxAdjustmentType.selectionChange();
            }
            // </GBR>

            if (taxTmpWorkTransForm.parmTaxObject().keepSalesTaxAdjustments())
            {
                ignoreCalculatedTaxAmounts.visible(true);
            }

            super();

            element.determineAdjustmentMessage();
            distributeDistributions.enabled(false);
            isAdjustmentTabViewed = true;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Apply</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            if (isTaxCodeAdjustmentEnabled)
            {
                super();

                ttsbegin;
                TaxIntegrationAdjustment::saveTaxAdjustment(element.args().dataset(), element.args().record().RecId, tmpTaxWorkTrans, tmpTaxRegulation, element.isCalledFromParmTable());
                element.recalcTaxRefreshForm();
                ttscommit;

                return ;
            }

            //<GIN>
            TaxParameters   taxParameters;
            Tax             tax;
            TaxRegulation   taxRegulation;
            //</GIN>

            // <GEEU>
            TransDate               localDateOfVATRegister;
            CurrencyExchangeRate    localSalesTaxExchangeRate;

            if (TaxParameters::isBankExchRateEnabled_W())
            {
                localDateOfVATRegister = dateOfVATRegister.dateValue();

                taxTmpWorkTransFormParameters = TaxTmpWorkTransFormParameters::construct();
                taxTmpWorkTransFormParameters.vatExchRate = salesTaxExchangeRate.realValue();
                localSalesTaxExchangeRate = taxTmpWorkTransForm.getSalesTaxExchRateForStorage(taxTmpWorkTransFormParameters);
            }
            // </GEEU>

            super();
            // <GIN>
            if (isCountryRegionIN)
            {
                taxRegulation = taxTmpWorkTransForm.parmTaxRegulation();
                taxRegulation.parmTaxAdjustmentType(taxAdjustmentType.selection());
            }
            //</GIN>

            taxTmpWorkTransForm.parmIsCalledFromSalesEditLines(isOpenFromSalesEditLines);

            taxTmpWorkTransForm.applyTaxAdjustments(element.args().dataset(), element.args().record()
                // <GEEU>
            , localDateOfVATRegister
                , localSalesTaxExchangeRate
                // </GEEU>
            );

            tax = taxTmpWorkTransForm.parmTaxObject();
            taxTmpWorkTransForm.initTax(tax, element.args().dataset(), element.args().record(), tmpTaxRegulation, tmpTaxWorkTrans);
            tmpTaxWorkTrans_ds.research();
            tmpTaxregulation_ds.research();
            element.callerRefresh();

            // <GIN>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            {
                taxParameters = TaxParameters::find();
                if (taxParameters.Customs_IN)
                {
                    correctedCustomsDuty = tax.totalCorrectedCustomsDuty_IN();
                }
            }
            // </GIN>

            TaxRegulationTotal.update();

            TmpTaxRegulation tmpTaxRegulationAppy;
            tmpTaxRegulationAppy.setTmpData(tmpTaxregulation);
            select count(RecId) from tmpTaxRegulationAppy
                where tmpTaxRegulationAppy.OverrideCalculatedTax == NoYes::Yes;
            countOfAdjustment = tmpTaxRegulationAppy.RecId;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Reset</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            if (isTaxCodeAdjustmentEnabled)
            {
                super();

                ttsbegin;
                TaxIntegrationAdjustment::resetTaxAdjustment(element.args().dataset(), element.args().record().RecId);
                element.recalcTaxRefreshForm();
                ttscommit;

                return ;
            }

            //<GIN>
            TaxRegulation   taxRegulation = taxTmpWorkTransForm.parmTaxRegulation();
            //</GIN>

            super();

            taxTmpWorkTransForm.resetTaxAdjustments(element.args().dataset(), element.args().record());
            element.resetTax();

            tmpTaxWorkTrans.setTmpData(taxTmpWorkTransForm.parmTaxObject().tmpTaxWorkTrans());
            tmpTaxRegulation.setTmpData(taxTmpWorkTransForm.parmTaxRegulation().tmpTaxRegulation());
            taxTmpWorkTransForm.parmTaxRegulationTotalCur(true, element.taxAmountCurTotal());

            // <GIN>
            if (isCustomsEnabled)
            {
                taxRegulationTotalCustoms = taxRegulation.totalSourceRegulateAmountCustoms_IN();
            }
            // </GIN>

            tmpTaxregulation_ds.research();
            tmpTaxWorkTrans_ds.research();

            element.callerRefresh();

            TaxRegulationTotal.update();

            // This button can only be clicked while on the adjustments tab;
            // reactivate that tab so that the focus stays on it
            Regulation.activatePage();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TmpTaxRegulation_SourceLineType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            // Resets the source order line number and the source charge line number.
            tmpTaxRegulation.SourceOrderLineNum = 0;
            tmpTaxRegulation.SourceChargeLineNum = 0;

            // If the tax form is called from the transaction header level, when users add header charges, the source is the transaction header.
            if (Global::mappingExists(tableNum(SalesPurchJournalTable), element.args().dataset())
                && tmpTaxRegulation.SourceLineType == TaxIntegrationLineType::HeaderCharge)
            {
                tmpTaxRegulation.SourceTableId = element.args().dataset();
                tmpTaxRegulation.SourceRecId = element.args().record().RecId;
            }
            else
            {
                tmpTaxRegulation.SourceTableId = 0;
                tmpTaxRegulation.SourceRecId = 0;
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TmpTaxRegulation_SourceOrderLineNum</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Only normal line or line charge can select order line number.
            if (tmpTaxRegulation.SourceLineType == TaxIntegrationLineType::NormalLine
                || tmpTaxRegulation.SourceLineType == TaxIntegrationLineType::LineCharge)
            {
                RefTableId sourceTableId = element.args().dataset();
                RefRecId sourceRecId = element.args().record().RecId;
                Range linesRange;

                // If the form is called from the transaction header level and can construct document, update sourceTable and linesRange.
                if (Global::mappingExists(tableNum(SalesPurchJournalTable), sourceTableId))
                {
                    TaxIntegrationDocumentObject document = TaxIntegrationHelper::constructDocument(sourceTableId, sourceRecId, true);
                    if (document)
                    {
                        // Gets transaction line and look up transaction line.
                        SetEnumerator lineSet = document.getLineSet().getEnumerator();
                        if (lineSet.moveNext())
                        {
                            // Build query range from transaction lines recid.
                            TaxIntegrationLineObject line = lineSet.current();
                            sourceTableId = line.getLocalTableId();
                            linesRange = queryValue(line.getLocalRecId());
                            while (lineSet.moveNext())
                            {
                                line = lineSet.current();
                                linesRange = queryRangeConcat(linesRange, line.getLocalRecId());
                            }
                        }
                    }
                }

                // If there is no lineRange (e.g. the form called from transaction line), the lineRange is this record.
                if (!linesRange)
                {
                    linesRange = queryValue(sourceRecId);
                }

                // If the transaction has the corresponding transaction line, it can lookup source order line number.
                if (Global::mappingExists(tableNum(SalesPurchJournalLine), sourceTableId))
                {
                    // Performances line number lookup.
                    SysTableLookup       sysTableLookup = SysTableLookup::newParameters(sourceTableId, this);
                    Query                query          = new Query();
                    QueryBuildDataSource qbds           = query.addDataSource(sourceTableId);

                    // Filters transaction line number by filtering linesRange.
                    qbds.addRange(fieldNum(SalesPurchJournalLine, RecId)).value(linesRange);
                    sysTableLookup.parmQuery(query);

                    // Users can select line number.
                    // "Id -> Name -> Id" makes sure get source table's field.
                    sysTableLookup.addSelectionField(fieldName2Id(sourceTableId,
                        fieldId2Name(tableNum(SalesPurchJournalLine), fieldNum(SalesPurchJournalLine, LineNum))));

                    // Users can see these fields when selecting.
                    sysTableLookup.addLookupfield(fieldName2Id(sourceTableId,
                        fieldId2Name(tableNum(SalesPurchJournalLine), fieldNum(SalesPurchJournalLine, LineNum))));
                    sysTableLookup.addLookupfield(fieldName2Id(sourceTableId,
                        fieldId2Name(tableNum(SalesPurchJournalLine), fieldNum(SalesPurchJournalLine, ItemId))));
                    sysTableLookup.addLookupfield(fieldName2Id(sourceTableId,
                        fieldId2Name(tableNum(SalesPurchJournalLine), fieldNum(SalesPurchJournalLine, LineAmount))));

                    sysTableLookup.performFormLookup();
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            TaxIntegrationDocumentObject document;
            RefTableId sourceTableId = element.args().dataset();
            RefRecId sourceRecId = element.args().record().RecId;

            ret = super();

            // Resets source charge line number.
            tmpTaxRegulation.SourceChargeLineNum = 0;

            // If the form is called from the transaction header level and can construct document, after users selected, updates source.
            if (Global::mappingExists(tableNum(SalesPurchJournalTable), sourceTableId))
            {
                document = TaxIntegrationHelper::constructDocument(sourceTableId, sourceRecId, true);
                if (document)
                {
                    // Gets transaction line recid.
                    SetEnumerator lineSet = document.getLineSet().getEnumerator();
                    while (lineSet.moveNext())
                    {
                        TaxIntegrationLineObject line = lineSet.current();

                        // If the transaction has the corresponding transaction line,
                        // and the line number is users selected.
                        if (Global::mappingExists(tableNum(SalesPurchJournalLine), line.getLocalTableId())
                            && SalesPurchJournalLine::findRecId(line.getLocalTableId(), line.getLocalRecId()).LineNum
                                == tmpTaxRegulation.SourceOrderLineNum)
                        {
                            tmpTaxRegulation.SourceTableId = line.getLocalTableId();
                            tmpTaxRegulation.SourceRecId = line.getLocalRecId();
                            break;
                        }
                    }
                }
            }

            // If the form is called from the transaction line level, the source is this line.
            if (!document && Global::mappingExists(tableNum(SalesPurchJournalLine), sourceTableId))
            {
                tmpTaxRegulation.SourceTableId = sourceTableId;
                tmpTaxRegulation.SourceRecId = sourceRecId;
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TmpTaxRegulation_SourceChargeLineNum</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Only header charge or line charge can select charge line number.
            if (tmpTaxRegulation.SourceLineType == TaxIntegrationLineType::HeaderCharge
                || tmpTaxRegulation.SourceLineType == TaxIntegrationLineType::LineCharge)
            {
                SysTableLookup       sysTableLookup = SysTableLookup::newParameters(tableNum(MarkupTrans), this);
                Query                query          = new Query();
                QueryBuildDataSource qbds           = query.addDataSource(tableNum(MarkupTrans));

                // Filters for the selected order line.
                qbds.addRange(fieldNum(MarkupTrans, TransTableId)).value(queryValue(tmpTaxRegulation.SourceTableId));
                qbds.addRange(fieldNum(MarkupTrans, TransRecId)).value(queryValue(tmpTaxRegulation.SourceRecId));
                sysTableLookup.parmQuery(query);

                // Users can select charge line number.
                sysTableLookup.addSelectionField(fieldNum(MarkupTrans, LineNum));

                // Users can see these fields when selecting.
                sysTableLookup.addLookupfield(fieldNum(MarkupTrans, LineNum));
                sysTableLookup.addLookupfield(fieldNum(MarkupTrans, MarkupCode));
                sysTableLookup.addLookupfield(fieldNum(MarkupTrans, MarkupCategory));
                sysTableLookup.addLookupfield(fieldNum(MarkupTrans, Value));
                sysTableLookup.addLookupfield(fieldNum(MarkupTrans, Txt));

                sysTableLookup.performFormLookup();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TmpTaxRegulation_TaxCode</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            SysTableLookup       sysTableLookup = SysTableLookup::newParameters(tableNum(TaxTable), this);
            Query                query          = new Query();
            QueryBuildDataSource qbds           = query.addDataSource(tableNum(TaxTable));

            // Filters for the tax service.
            qbds.addRange(fieldNum(TaxTable, Source)).value(queryValue(TaxMasterDataSource::TaxService));
            sysTableLookup.parmQuery(query);

            // Users can select tax code.
            sysTableLookup.addSelectionField(fieldNum(TaxTable, TaxCode));

            // Users can see these fields when selecting.
            sysTableLookup.addLookupfield(fieldNum(TaxTable, TaxCode));
            sysTableLookup.addLookupfield(fieldNum(TaxTable, TaxName));
            sysTableLookup.addLookupfield(fieldNum(TaxTable, TaxPeriod));
            sysTableLookup.addLookupfield(fieldNum(TaxTable, TaxAccountGroup));
            sysTableLookup.addLookupfield(fieldNum(TaxTable, TaxCurrencyCode));

            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            // Resets amounts.
            tmpTaxRegulation.SourceBaseAmountCur = 0;
            tmpTaxRegulation.SourceBaseAmountCurRegulated = 0;
            tmpTaxRegulation.TaxInCostPrice = 0;
            tmpTaxRegulation.TaxInCostPriceRegulated = 0;
            tmpTaxRegulation.SourceTaxAmountCur = 0;
            tmpTaxRegulation.SourceRegulateAmountCur = 0;
            tmpTaxRegulation.ActualSourceRegulateAmountCur = 0;
            tmpTaxRegulation.OverrideCalculatedTax = NoYes::No;

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TmpTaxRegulation_SourceRegulateAmountCur</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        boolean modified()
        {
            if (isTaxCodeAdjustmentEnabled)
            {
                boolean ret = element.adjustTaxAmount(tmpTaxRegulation.SourceRegulateAmountCur, tmpTaxRegulation) && super();
                tmpTaxRegulation_ds.research(true);
                return ret;
            }

            AmountMST   correctedTaxAmountCur;
            boolean     ret;
            ret = super();

            if (tmpTaxRegulation.SourceRegulateAmountCur != 0 &&
                (tmpTaxRegulation.TaxDirection == TaxDirection::TaxExemptSales ||
                tmpTaxRegulation.TaxDirection  == TaxDirection::TaxExemptPurchase))
            {
                return checkFailed("@Tax:NotPossibleToAdjustTaxFreeSalesTax");
            }

            tmpTaxRegulation.OverrideCalculatedTax = NoYes::Yes;
            if (tmpTaxRegulation.RecId)
            {
                taxTmpWorkTransForm.parmTaxRegulation().calcAndSaveTaxInCostPrice(tmpTaxRegulation);
                correctedTaxAmountCur = taxTmpWorkTransForm.parmTaxRegulationTotalCur(true, taxTmpWorkTransForm.parmTaxRegulation().getTotalRegulationAmount(tmpTaxRegulation));
                tmpTaxRegulation_ds.reread();
                tmpTaxRegulation_ds.refresh();
            }
            else
            {
                taxTmpWorkTransForm.parmTaxRegulation().calcTaxInCostPrice(tmpTaxRegulation);
                tmpTaxRegulation_ds.refresh();

                correctedTaxAmountCur = taxTmpWorkTransForm.parmTaxRegulationTotalCur(true, taxTmpWorkTransForm.parmTaxRegulation().getTotalRegulationAmount(tmpTaxRegulation) +
                                        tmpTaxRegulation.SourceRegulateAmountCur);
            }

            TaxRegulationTotal.update();

            element.setCorrectedTaxAmount(correctedTaxAmountCur);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TmpTaxRegulation_ActualSourceRegulateAmountCur</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            if (isTaxCodeAdjustmentEnabled)
            {
                boolean ret = element.adjustTaxAmount(tmpTaxRegulation.ActualSourceRegulateAmountCur, tmpTaxRegulation) && super();
                tmpTaxRegulation_ds.research(true);
                return ret;
            }

            AmountMST   correctedTaxAmountCur;
            boolean     ret;
            ret = super();

            if (tmpTaxRegulation.ActualSourceRegulateAmountCur != 0 &&
                (tmpTaxRegulation.TaxDirection == TaxDirection::TaxExemptSales ||
                tmpTaxRegulation.TaxDirection  == TaxDirection::TaxExemptPurchase))
            {
                return checkFailed("@Tax:NotPossibleToAdjustTaxFreeSalesTax");
            }

            tmpTaxRegulation.OverrideCalculatedTax = NoYes::Yes;
            if (tmpTaxRegulation.RecId)
            {
                taxTmpWorkTransForm.parmTaxRegulation().calcAndSaveTaxInCostPrice(tmpTaxRegulation);
                correctedTaxAmountCur = taxTmpWorkTransForm.parmTaxRegulationTotalCur(true, taxTmpWorkTransForm.parmTaxRegulation().getTotalRegulationAmount(tmpTaxRegulation));
                tmpTaxRegulation_ds.reread();
                tmpTaxRegulation_ds.refresh();
            }
            else
            {
                taxTmpWorkTransForm.parmTaxRegulation().calcTaxInCostPrice(tmpTaxRegulation);
                tmpTaxRegulation_ds.refresh();

                correctedTaxAmountCur = taxTmpWorkTransForm.parmTaxRegulationTotalCur(true, taxTmpWorkTransForm.parmTaxRegulation().getTotalRegulationAmount(tmpTaxRegulation) +
                                        tmpTaxRegulation.ActualSourceRegulateAmountCur);
            }

            ActualTaxRegulationTotal.update();

            element.setCorrectedTaxAmount(correctedTaxAmountCur);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TmpTaxRegulation_SourceRegulateAmountCustoms_IN</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        boolean modified()
        {
            boolean ret;
            TaxRegulation             taxRegulation = taxTmpWorkTransForm.parmTaxRegulation();

            ret = super();
            if (tmpTaxRegulation.RecId)
            {
                tmpTaxRegulation.OverrideCalculatedTax = NoYes::Yes;
                taxRegulation.calcAndSaveTaxInCostPrice(tmpTaxRegulation);
                taxRegulationTotalCustoms = taxRegulation.getCustomsTotalRegulationAmount_IN(tmpTaxRegulation);
                if (isFromBOE)
                {
                    tmpTaxRegulation_ds.research();
                }
                else
                {
                    tmpTaxRegulation_ds.reread();
                }
            }
            else
            {
                taxRegulation.calcTaxInCostPrice(tmpTaxRegulation);

                taxRegulationTotalCustoms = taxRegulation.getCustomsTotalRegulationAmount_IN(tmpTaxRegulation)
                                            + tmpTaxRegulation.SourceRegulateAmountCustoms_IN;
            }
            if (taxRegulationTotalCustoms)
            {
                //calculate the tax total from sourcetaxamountcur
                taxTmpWorkTransForm.parmTaxRegulationTotalCur(true,
                                        taxTmpWorkTransForm.parmTaxRegulation().getTotalRegulationAmount(null));

                taxTmpWorkTransForm.parmTaxRegulationTotalCustoms_IN(true, taxRegulationTotalCustoms);
            }
            tmpTaxRegulation_ds.refresh();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TmpTaxRegulation_OverrideCalculatedTax</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            TaxRegulationAmountCur    taxRegulationTotalCur;

            ret = super();

            taxRegulationTotalCur = taxTmpWorkTransForm.updateOverrideCalculatedTax(tmpTaxRegulation);
            tmpTaxRegulation_ds.reread();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TmpTaxRegulation_ExchangeRateSourceBaseAmountRegulated</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        boolean modified()
        {
            boolean ret;

            ret = super();

            if (taxAdjustmentType.selection() == TaxAdjustmentType::Summary)
            {
                taxTmpWorkTransForm.saveExchangeRateTaxBaseRegulationAmount(tmpTaxRegulation);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TmpTaxRegulation_ExchangeRateSourceRegulateAmount</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        boolean modified()
        {
            boolean ret;

            ret = super();

            if (taxAdjustmentType.selection() == TaxAdjustmentType::Summary)
            {
                taxTmpWorkTransForm.saveExchangeRateTaxRegulationAmount(tmpTaxRegulation);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TmpTaxRegulation_ExchangeRateBaseAmountCurRegulated</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (taxAdjustmentType.selection() == TaxAdjustmentType::Summary)
            {
                taxTmpWorkTransForm.saveExchangeRateTaxBaseRegulationAmountCur(tmpTaxRegulation);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TmpTaxRegulation_ExchangeRateRegulateAmountCur</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        boolean modified()
        {
            boolean ret;

            ret = super();

            if (taxAdjustmentType.selection() == TaxAdjustmentType::Summary)
            {
                taxTmpWorkTransForm.saveExchangeRateTaxRegulationAmountCur(tmpTaxRegulation);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TmpTaxRegulation_ConsolidateSourceRegulateAmountCur_JP</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            ret = super();

            if ((tmpTaxRegulation.TaxDirection == TaxDirection::TaxExemptSales || tmpTaxRegulation.TaxDirection  == TaxDirection::TaxExemptPurchase)
                && tmpTaxRegulation.ConsolidateSourceRegulateAmountCur_JP != 0)
            {
                return checkFailed("@Tax:NotPossibleToAdjustTaxFreeSalesTax");
            }

            tmpTaxRegulation.OverrideCalculatedTax = NoYes::Yes;
            AmountMST   correctedTaxAmountCur;
            if (tmpTaxRegulation.RecId)
            {
                taxTmpWorkTransForm.parmTaxRegulation().calcAndSaveTaxInCostPrice(tmpTaxRegulation);
                correctedTaxAmountCur = taxTmpWorkTransForm.parmTaxRegulationTotalCur(true, taxTmpWorkTransForm.parmTaxRegulation().getTotalRegulationAmount(tmpTaxRegulation));
                tmpTaxRegulation_ds.reread();
                tmpTaxRegulation_ds.refresh();
            }

            TaxRegulationTotal.update();

            element.setCorrectedTaxAmount(correctedTaxAmountCur);
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TaxAdjustmentType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            this.selectionChange();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        public int selectionChange()
        {
            int ret;

            taxTmpWorkTransForm.parmSelectedTaxAdjustmentType(taxAdjustmentType.selection());
            tmpTaxRegulation_ds.executeQuery();
            tmpTaxRegulation_ds.refresh();

            ret = super();

            element.enableRegulationDetailsFields();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TaxRegulationTotal</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        boolean modified()
        {
            boolean ret;

            ret = super();
            if (ret)
            {
                taxTmpWorkTransForm.adjustTotalTax(element.args().dataset(), element.args().record());
                tmpTaxRegulation_ds.research();
                tmpTaxWorkTrans_ds.research();
                element.callerRefresh();
                element.setCorrectedTaxAmount(taxRegulationTotal.realValue());
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ActualTaxRegulationTotal</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        boolean modified()
        {
            boolean ret;
    
            ret = super();
            if (ret)
            {
                taxTmpWorkTransForm.adjustTotalTax(element.args().dataset(), element.args().record());
                tmpTaxRegulation_ds.research();
                tmpTaxWorkTrans_ds.research();
                element.callerRefresh();
                element.setCorrectedTaxAmount(taxRegulationTotal.realValue());
            }
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AdjustedTaxRegulationTotalCustoms_IN</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        boolean modified()
        {
            boolean ret;

            ret = super();
            if (ret)
            {
                taxTmpWorkTransForm.adjustTotalCustomsTax_IN();
                tmpTaxRegulation_ds.research();
                tmpTaxWorkTrans_ds.research();
                element.callerRefresh();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EximTaxAmountMST_IN</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        boolean modified()
        {
            boolean ret;

            ret = super();
            if (ret)
            {
                taxTmpWorkTransForm.parmTaxRegulation().allocateAmount(taxTmpWorkTransForm.parmTaxRegulationTotalCur(false, 0));
                tmpTaxRegulation_ds.research();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EximBalanceTaxAmountMST_IN</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        boolean modified()
        {
            boolean ret;

            ret = super();
            if (ret)
            {
                taxTmpWorkTransForm.parmTaxRegulation().allocateAmount(taxTmpWorkTransForm.parmTaxRegulationTotalCur(false, 0));
                tmpTaxRegulation_ds.research();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EximTaxCorrectedAmount_IN</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        boolean modified()
        {
            boolean ret;
            ret = super();
            if (ret)
            {
                taxTmpWorkTransForm.parmTaxRegulation().allocateAmount(taxTmpWorkTransForm.parmTaxRegulationTotalCur(false, 0));
                tmpTaxRegulation_ds.research();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EximBalanceCorrectedTaxAmount_IN</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        boolean modified()
        {
            boolean ret;

            ret = super();
            if (ret)
            {
                taxTmpWorkTransForm.parmTaxRegulation().allocateAmount(taxTmpWorkTransForm.parmTaxRegulationTotalCur(false, 0));
                tmpTaxRegulation_ds.research();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SalesTaxExchangeRate</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                taxTmpWorkTransFormParameters = TaxTmpWorkTransFormParameters::construct();
                taxTmpWorkTransFormParameters.vatExchRate = salesTaxExchangeRate.realValue();
                ExchRate exchRateForStorage = taxTmpWorkTransForm.getSalesTaxExchRateForStorage(taxTmpWorkTransFormParameters);
                taxTmpWorkTransForm.applySalesTaxExchangeRate(dateOfVATRegister.dateValue(), exchRateForStorage);

                if (isTaxSpecificExchRateEnabledByTable)
                {
                    CurrencyCode accountingCurrency = TmpTaxWorkTrans.accountingCurrency();
                    CurrencyCode reportingCurrency = TmpTaxWorkTrans.reportingCurrency();

                    // Updates the reporting currency amount accordingly if the reporting currency code equals to accounting currency code.
                    if (accountingCurrency == reportingCurrency)
                    {
                        SalesTaxExchangeRateRep.realValue(salesTaxExchangeRate.realValue());
                        taxTmpWorkTransForm.applySalesTaxExchangeRateRep(dateOfVATRegister.dateValue(), exchRateForStorage);
                    }

                    if (accountingCurrency == TmpTaxWorkTrans.CurrencyCode)
                    {
                        SalesTaxExchangeRateCur.realValue(salesTaxExchangeRate.realValue());
                    }

                    // Updates the tax currency amount accordingly if there exists tax currency code equals to accounting currency code.
                    TmpTaxWorkTrans tmpTaxWorkTransLoc;
                    tmpTaxWorkTransLoc.setTmpData(TmpTaxWorkTrans);
                    select firstonly CurrencyCode from tmpTaxWorkTransLoc
                        where tmpTaxWorkTransLoc.CurrencyCode == accountingCurrency;
                    if (tmpTaxWorkTransLoc.CurrencyCode)
                    {
                        taxTmpWorkTransForm.applySalesTaxExchangeRateCur(
                            dateOfVATRegister.dateValue(),
                            exchRateForStorage,
                            tmpTaxWorkTransLoc.CurrencyCode);
                    }
                }

                tmpTaxRegulation_ds.research();
                tmpTaxWorkTrans_DS.research();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SalesTaxExchangeRateRep</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                CurrencyCode reportingCurrency = TmpTaxWorkTrans.reportingCurrency();

                taxTmpWorkTransFormParameters = TaxTmpWorkTransFormParameters::construct();
                taxTmpWorkTransFormParameters.vatExchRate = SalesTaxExchangeRateRep.realValue();
                ExchRate exchRateForStorage = taxTmpWorkTransForm.getSalesTaxExchRateForStorage(taxTmpWorkTransFormParameters);
                taxTmpWorkTransForm.applySalesTaxExchangeRateRep(dateOfVATRegister.dateValue(), exchRateForStorage);
                if (reportingCurrency == TmpTaxWorkTrans.CurrencyCode)
                {
                    SalesTaxExchangeRateCur.realValue(salesTaxExchangeRate.realValue());
                }

                // Updates the tax currency amount accordingly if there exists tax currency code equals to accounting currency code.
                TmpTaxWorkTrans tmpTaxWorkTransLoc;
                tmpTaxWorkTransLoc.setTmpData(TmpTaxWorkTrans);
                select firstonly CurrencyCode from tmpTaxWorkTransLoc
                    where tmpTaxWorkTransLoc.CurrencyCode == reportingCurrency;
                if (tmpTaxWorkTransLoc.CurrencyCode)
                {
                    taxTmpWorkTransForm.applySalesTaxExchangeRateCur(
                        dateOfVATRegister.dateValue(),
                        exchRateForStorage,
                        tmpTaxWorkTransLoc.CurrencyCode);
                }

                tmpTaxRegulation_ds.research();
                tmpTaxWorkTrans_DS.research();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SalesTaxExchangeRateCur</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                taxTmpWorkTransFormParameters = TaxTmpWorkTransFormParameters::construct();
                taxTmpWorkTransFormParameters.vatExchRate = SalesTaxExchangeRateCur.realValue();
                taxTmpWorkTransForm.applySalesTaxExchangeRateCur(
                    dateOfVATRegister.dateValue(),
                    taxTmpWorkTransForm.getSalesTaxExchRateForStorage(taxTmpWorkTransFormParameters),
                    TmpTaxWorkTrans.CurrencyCode);
                tmpTaxRegulation_ds.research();
                tmpTaxWorkTrans_DS.research();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DateOfVATRegister</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                if (isTaxSpecificExchRateEnabledByTable)
                {
                    if (taxSpecificExchRateMapWithNewVATDueDate)
                    {
                        taxTmpWorkTransForm.applyTaxSpecificExchRatesWithNewVATDueDate(dateOfVATRegister.dateValue(), taxSpecificExchRateMapWithNewVATDueDate);
                    }

                    taxSpecificExchRateMapWithNewVATDueDate = null;
                }
                else
                {
                    taxTmpWorkTransFormParameters = TaxTmpWorkTransFormParameters::construct();
                    taxTmpWorkTransFormParameters.vatExchRate = salesTaxExchangeRate.realValue();
                    taxTmpWorkTransForm.applySalesTaxExchangeRate(dateOfVATRegister.dateValue(), taxTmpWorkTransForm.getSalesTaxExchRateForStorage(taxTmpWorkTransFormParameters));
                }

                tmpTaxRegulation_ds.research();
                tmpTaxWorkTrans_DS.research();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret = super();

            if (ret)
            {
                VatDueDate_W localDateOfVATRegister = this.dateValue();

                if (localDateOfVATRegister)
                {
                    if (isTaxSpecificExchRateEnabledByTable)
                    {
                        taxSpecificExchRateMapWithNewVATDueDate = TaxTmpWorkTransForm::getTaxSpecificExchRateMapWithVATDueDate(tmpTaxWorkTrans, localDateOfVATRegister);
                        if (taxSpecificExchRateMapWithNewVATDueDate)
                        {
                            CurrencyCode accountingCurrency = TmpTaxWorkTrans.accountingCurrency();
                            if (taxSpecificExchRateMapWithNewVATDueDate.exists(accountingCurrency))
                            {
                                taxTmpWorkTransFormParameters = TaxTmpWorkTransFormParameters::construct();
                                taxTmpWorkTransFormParameters.vatExchRate = taxSpecificExchRateMapWithNewVATDueDate.lookup(accountingCurrency);
                                salesTaxExchangeRate.realValue(taxTmpWorkTransForm.displaySalesTaxExchRate(taxTmpWorkTransFormParameters));
                            }

                            CurrencyCode reportingCurrency = TmpTaxWorkTrans.reportingCurrency();
                            if (taxSpecificExchRateMapWithNewVATDueDate.exists(reportingCurrency))
                            {
                                taxTmpWorkTransFormParameters = TaxTmpWorkTransFormParameters::construct();
                                taxTmpWorkTransFormParameters.vatExchRate = taxSpecificExchRateMapWithNewVATDueDate.lookup(reportingCurrency);
                                salesTaxExchangeRateRep.realValue(taxTmpWorkTransForm.displaySalesTaxExchRate(taxTmpWorkTransFormParameters));
                            }

                            if (taxSpecificExchRateMapWithNewVATDueDate.exists(TmpTaxWorkTrans.CurrencyCode))
                            {
                                taxTmpWorkTransFormParameters = TaxTmpWorkTransFormParameters::construct();
                                taxTmpWorkTransFormParameters.vatExchRate = taxSpecificExchRateMapWithNewVATDueDate.lookup(TmpTaxWorkTrans.CurrencyCode);
                                salesTaxExchangeRateCur.realValue(taxTmpWorkTransForm.displaySalesTaxExchRate(taxTmpWorkTransFormParameters));
                            }
                        }
                        else
                        {
                            ret = checkFailed("@SYS133463");
                        }
                    }
                    else
                    {
                        CurrencyExchangeRate localSalesTaxExchangeRate = TaxTmpWorkTransForm::getSalesTaxExchangeRate(tmpTaxWorkTrans, localDateOfVATRegister);
                        if (localSalesTaxExchangeRate)
                        {
                            taxTmpWorkTransFormParameters = TaxTmpWorkTransFormParameters::construct();
                            taxTmpWorkTransFormParameters.vatExchRate = localSalesTaxExchangeRate;
                            salesTaxExchangeRate.realValue(taxTmpWorkTransForm.displaySalesTaxExchRate(taxTmpWorkTransFormParameters));
                        }
                        else
                        {
                            ret = checkFailed("@SYS133463");
                        }
                    }
                }
                else
                {
                    ret = checkFailed(strFmt("@SYS26332", fieldId2pname(tableNum(TmpTaxWorkTrans), fieldNum(TmpTaxWorkTrans, VatDueDate_W))));
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OKButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// The ok button was clicked to apply any tax adjustments and close the form.
        /// </summary>
        public void clicked()
        {
            select firstonly OverrideCalculatedTax from TmpTaxRegulation
                where TmpTaxRegulation.OverrideCalculatedTax == NoYes::Yes;

            if (isTaxCodeAdjustmentEnabled)
            {
                // When tax code adjustment feature enabled, for performance, OK == Apply only if exists adjustment.
                if (TaxIntegrationAdjustment::existsTaxAdjustment(element.args().dataset(), element.args().record().RecId, tmpTaxWorkTrans, tmpTaxRegulation))
                {
                    Apply.clicked();
                }
            }
            else if (TmpTaxRegulation)
            {
                Apply.clicked();
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>TmpTaxRegulation</Name>
			<Table>TmpTaxRegulation</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActualSourceRegulateAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRateBaseAmountCurRegulated</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRateRegulateAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRateSourceBaseAmountRegulated</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRateSourceRegulateAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRateTaxAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRateTaxAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRateTaxBaseAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRateTaxBaseAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ManualInsertedTax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NegativeTax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OverrideCalculatedTax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>SourceBaseAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceBaseAmountCurRegulated</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceChargeLineNum</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>SourceCurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowAdd>Yes</AllowAdd>
					<DataField>SourceLineType</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceOrderLineNum</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceRegulateAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceRegulateAmountCustoms_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>SourceTaxAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAdjustmentType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxationCodeRegulated_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxationCode_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxDirection</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxFiscalValue_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>TaxInCostPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>TaxInCostPriceRegulated</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<Index>TaxCodeIdx</Index>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TmpTaxWorkTrans</Name>
			<Table>TmpTaxWorkTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AbatementAmount_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Addressing_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CalculationDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ClaimPercentage_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Company</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompanyId_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustomsDuty_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustVendName_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateOfVatRegister</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentDate_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EmptyTaxBaseForOutgoingTax_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EUROTriangulation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRateBaseAmountCurRegulated</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRateRegulateAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRateSourceBaseAmountRegulated</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRateSourceRegulateAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRateTaxAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRateTaxAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRateTaxAmountRep</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRateTaxBaseAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRateTaxBaseAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRateTaxBaseAmountRep</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchRate_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExemptTax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EximAuthorizationId_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EximBalanceTaxAmountCur_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EximBalanceTaxAmount_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EximBalanceTaxCorrectedAmountCur_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EximBalanceTaxCorrectedAmount_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EximDEPBAmountCur_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EximDEPBAmount_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EximIncentiveScheme_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EximTaxAmountCur_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EximTaxAmount_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EximTaxCorrectedAmountCur_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EximTaxCorrectedAmount_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FiscalValue_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FormulaID_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GSTHSTTaxType_CA</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HeadingRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HeadingTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IncludedInPrice_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntracomVAT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventProfileType_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsDeleted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsOffset</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsOverUnderPayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsReversalGainLoss_TH</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsScrapQtyLine_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimensionRev_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimension_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerPost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ManualInsertedTax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkupTransRecId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NegativeTax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetLedgerDimension_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OperationLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OperationPostingType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalTaxTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentSourceRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentSourceTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PartyTaxId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Posted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingProfile_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostponeVAT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Prepayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Reason</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonComment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyExchRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReverseCharge_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesTaxExchangeRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesTaxExchangeRateCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesTaxExchangeRateRep</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ServiceTaxReverseChargePercentage_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Source</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceBaseAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceBaseAmountCurCalculated</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceBaseAmountCurRaw</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceBaseAmountCurRegulated</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceChargeLineNum</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceCurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceExemptBaseAmountMST_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceExemptBaseAmount_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceExemptTaxAmountMST_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceExemptTaxAmount_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceLineType</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceOrderLineNum</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceOtherBaseAmountMST_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceOtherBaseAmount_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceOtherBaseTaxAmount_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceOtherTaxAmountMST_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceRegulateAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceRegulateAmountCustoms_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceTaxAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceTaxAmountCurReal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceTaxSubstitutionAmountAddedCur_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAccountType_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAmountRep</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxationCodeAdj_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxationCode_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxationOrigin_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAutogenerated</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxBaseAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxBaseAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxBaseAmountOrig</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxBaseAmountRaw</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxBaseAmountRep</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxBaseQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxCodeCombinationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxDirection</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxInCostPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxInCostPriceCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxInCostPriceMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxInCostPriceRegulated</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxInCostPriceRep</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxLimitReached</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxLoadOnInventoryCur_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxOffsetUseTaxLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxPeriodPaymentCode_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxReceivableLongTerm_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxReductionPct_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxRefId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxRegistrationNumberTable_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxReports</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxSalesOffsetLedgerDimension_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxSourceType_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxSubstitutionAmountAddedMST_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxTributarySubstitution</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxType_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxType_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxUnrealizedRefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxValue_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UnrealizedTax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VatDueDate_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATNum_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATOperationCode_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATTaxAgentVendAccount_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendInvoiceInfoLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Warning</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WithoutTaxTrans_RU</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources>
				<AxFormReferencedDataSource>
					<Name>TaxRegistration</Name>
					<Table>TaxRegistration</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>DepreciationMethod_JP</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Description</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DirPartyLocation</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>IssueDate</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Issuer</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>NumberSequenceGroupId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Partition</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RegistrationNumber</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Section</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TaxRegistrationTypeApplicabilityRule</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ValidFrom</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ValidTo</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<JoinSource>TmpTaxWorkTrans</JoinSource>
					<LinkType>OuterJoin</LinkType>
					<JoinRelation>TaxRegistration</JoinRelation>
				</AxFormReferencedDataSource>
			</ReferencedDataSources>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<Index>TaxCodeIdx</Index>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS22014</Caption>
		<DialogSize xmlns="">Full</DialogSize>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Mode xmlns="">Edit</Mode>
		<Pattern xmlns="">DialogTabs</Pattern>
		<PatternVersion xmlns="">1.3</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>357913940</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>FormulaDesignerTrans</Name>
						<ElementPosition>1879048189</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>FormulaDesigner_IN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>TmpTaxWorkTrans</DataSource>
								<MenuItemName>FormulaDesigner_IN</MenuItemName>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>Distributions</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>DistributeDistributions</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>AccountingDistTaxVendPackSlipJournal</MenuItemName>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ViewTaxCode</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SalesTaxCode</Name>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>TaxTable</MenuItemName>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Style>Strip</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1610612734</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Overview</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>TmpTaxWorkTrans_SourceLineType</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>SourceLineType</DataField>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_SourceOrderLineNum</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>SourceOrderLineNum</DataField>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<MinNoOfDecimals>0</MinNoOfDecimals>
										<MinNoOfDecimalsMode>Fixed</MinNoOfDecimalsMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_SourceChargeLineNum</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>SourceChargeLineNum</DataField>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<MinNoOfDecimals>0</MinNoOfDecimals>
										<MinNoOfDecimalsMode>Fixed</MinNoOfDecimalsMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpTaxWorkTrans_TaxCode</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<PreviewPartRef>TaxCodeInfoPartPreview</PreviewPartRef>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxCode</DataField>
										<DataSource>TmpTaxWorkTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>TmpTaxWorkTrans_EximIncentiveScheme_IN</Name>
										<ElementPosition>1342177278</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>EximIncentiveScheme_IN</DataField>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpTaxWorkTrans_TaxationCode_BR</Name>
										<ElementPosition>1395864369</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>taxationCodeAdjusted_BR</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>TmpTaxWorkTrans_FiscalValue_BR</Name>
										<ElementPosition>1503238551</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>FiscalValue_BR</DataField>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_TaxBaseQty</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayTaxBaseQty</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SourceBaseAmountCur</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_InventoryManagement:TaxTmpWorkTrans_SourceBaseAmountCur</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displaySourceBaseAmountCur</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>showTaxValue</Name>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_InventoryManagement:TaxTmpWorkTrans_showTaxValue</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>showTaxValue</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@SYS15774</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SourceRegulateAmountCur</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2130706430</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_InventoryManagement:TaxTmpWorkTrans_SourceRegulateAmountCur</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displaySourceRegulateAmountCur</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@SYS128972</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>TmpTaxWorkTrans_TaxDirection</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2143289342</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_InventoryManagement:TaxTmpWorkTrans_TmpTaxWorkTrans_TaxDirection</HelpText>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxDirection</DataField>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ExchangeRateTaxBaseAmount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2143988392</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayExchangeRateTaxBaseAmount</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@GLS112413</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ExchangeRateTaxAmount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2144687442</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayExchangeRateTaxAmount</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@GLS112415</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>TmpTaxWorkTrans_WithoutTaxTrans_RU</Name>
										<ElementPosition>2146435070</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>WithoutTaxTrans_RU</DataField>
										<DataSource>TmpTaxWorkTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>TmpTaxWorkTrans_TaxId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ReferenceGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataSource>TmpTaxWorkTrans</DataSource>
										<ReferenceField>TaxId</ReferenceField>
										<ReplacementFieldGroup>Identification</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>TmpTaxWorkTrans_PartyTaxId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ReferenceGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataSource>TmpTaxWorkTrans</DataSource>
										<ReferenceField>PartyTaxId</ReferenceField>
										<ReplacementFieldGroup>Identification</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ConsolidateSourceBaseAmountCur_JP</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_InventoryManagement:TaxTmpWorkTrans_ConsolidateSourceBaseAmountCur_JP</HelpText>
										<Type>Real</Type>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayConsolidateSourceBaseAmountCur_JP</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@Tax:ConsolidatedAmountOrigin</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ConsolidateSourceTaxAmountCurPosted_JP</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_InventoryManagement:TaxTmpWorkTrans_ConsolidateSourceTaxAmountCurPosted_JP</HelpText>
										<Type>Real</Type>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayConsolidateSourceTaxAmountCurPosted_JP</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@Tax:ConsolidatedPostedSalesTax</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ConsolidateSourceRegulateAmountCur_JP</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_InventoryManagement:TaxTmpWorkTrans_ConsolidateSourceRegulateAmountCur_JP</HelpText>
										<Type>Real</Type>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayConsolidateSourceRegulateAmountCur_JP</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@Tax:ActualConsolidatedSalesTax</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<DataSource>TmpTaxWorkTrans</DataSource>
								<DefaultAction>SalesTaxCode</DefaultAction>
							</AxFormControl>
						</Controls>
						<Caption>@SYS9039</Caption>
						<DataSource>TmpTaxWorkTrans</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>General</Name>
						<ElementPosition>1476395006</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Name</Name>
								<ElementPosition>421108120</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TaxCode</Name>
										<ElementPosition>477218588</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<PreviewPartRef>TaxCodeInfoPartPreview</PreviewPartRef>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxCode</DataField>
										<DataSource>TmpTaxWorkTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Txt</Name>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Txt</DataField>
										<DataSource>TmpTaxWorkTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Name_M_exemptCode</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1193046470</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>exemptCode</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpTaxWorkTrans_Company</Name>
										<ConfigurationKey>LedgerAdvIntercompanyAccounting</ConfigurationKey>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Company</DataField>
										<DataSource>TmpTaxWorkTrans</DataSource>
									</AxFormControl>
								</Controls>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Adjustment</Name>
								<CountryRegionCodes>IN</CountryRegionCodes>
								<ElementPosition>1052770300</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>displayCustomsSourceRegulateAmountCur_IN</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayCustomsSourceRegulateAmountMST_IN</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@GLS5656</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Caption>@SYS596</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CustomsCurrency_IN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1473878420</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>displayCustomsAssessableValue_IN</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayCustomsAssessableValue_IN</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@GLS5298</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CustomsCurrency_IN_CustomsDuty_IN</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CustomsDuty_IN</DataField>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Caption>@GLS5657</Caption>
								<DataSource>TmpTaxWorkTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Exim</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>BalanceTax_IN</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>EximBalanceTaxAmount_IN</DataField>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@GLS61734</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_EximDEPBAmount_IN</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>EximDEPBAmount_IN</DataField>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_EximTaxAmount_IN</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>EximTaxAmount_IN</DataField>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CustomsAdjustment_IN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1684432480</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>displayCustomsSourceRegulateAmountCur</Name>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayCustomsSourceRegulateAmountMST_IN</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@GLS61735</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_EximTaxCorrectedAmount_IN</Name>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>EximTaxCorrectedAmount_IN</DataField>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_EximBalanceTaxCorrectedAmount_IN</Name>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>EximBalanceTaxCorrectedAmount_IN</DataField>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Caption>@GLS61732</Caption>
								<DataSource>TmpTaxWorkTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>KindOfActivity_RU</Name>
								<ElementPosition>1894986540</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>KindOfActivity_RU_WithoutTaxTrans_RU</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>WithoutTaxTrans_RU</DataField>
										<DataSource>TmpTaxWorkTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>KindOfActivity_RU_InventProfileType_RU</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>InventProfileType_RU</DataField>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Items />
									</AxFormControl>
								</Controls>
								<DataGroup>KindOfActivity_RU</DataGroup>
								<DataSource>TmpTaxWorkTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SalesTaxExchangeRateGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>CZ,HU,PL</CountryRegionCodes>
								<ElementPosition>2021235093</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_ExchangeRateTaxBaseAmount</Name>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayExchangeRateTaxBaseAmount</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@GLS112413</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_ExchangeRateSourceBaseAmountRegulated</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayExchRateSourceBaseAmountRegulated</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@GLS112409</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_ExchangeRateTaxAmount</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayExchangeRateTaxAmount</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@GLS112415</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_ExchangeRateSourceRegulateAmount</Name>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayExchangeRateSourceRegulateAmount</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@GLS112411</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Caption>@GLS112405</Caption>
								<DataSource>TmpTaxWorkTrans</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS2952</Caption>
						<DataSource>TmpTaxWorkTrans</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>AmountTab</Name>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SourceAmount</Name>
								<ElementPosition>631662180</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpTaxWorkTrans_SourceCurrencyCode</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:TaxTmpWorkTrans_TmpTaxWorkTrans_SourceCurrencyCode</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SourceCurrencyCode</DataField>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@SYS7572</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_SourceBaseAmountCur1</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:TaxTmpWorkTrans_TmpTaxWorkTrans_SourceBaseAmountCur1</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displaySourceBaseAmountCur</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_SourceBaseAmountCurRegulated</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:TaxTmpWorkTrans_TmpTaxWorkTrans_SourceBaseAmountCurRegulated</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displaySourceBaseAmountCurRegulated</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@SYS67702</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_TaxInCostPrice</Name>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayTaxInCostPrice</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@Tax:CalculatedNonDeductibleSalesTax</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_TaxInCostPriceRegulated</Name>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayTaxInCostPriceRegulated</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@Tax:ActualNonDeductibleSalesTax</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_SourceTaxAmountCur1</Name>
										<ElementPosition>2113929214</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:TaxTmpWorkTrans_TmpTaxWorkTrans_SourceTaxAmountCur1</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displaySourceTaxAmountCur</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@SYS128996</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_SourceRegulateAmountCur</Name>
										<ElementPosition>2130706430</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:TaxTmpWorkTrans_TmpTaxWorkTrans_SourceRegulateAmountCur</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displaySourceRegulateAmountCur</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@SYS128972</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>displayOverrideCalculated</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>2139095038</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:TaxTmpWorkTrans_displayOverrideCalculated</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayOverrideCalculated</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@SYS128982</Label>
									</AxFormControl>
								</Controls>
								<Caption>@SYS62786</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Amount</Name>
								<ElementPosition>842216240</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>displayCompanyCurrencyCode</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:TaxTmpWorkTrans_displayCompanyCurrencyCode</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayCompanyCurrencyCode</DataMethod>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_TaxBaseAmount</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:TaxTmpWorkTrans_TmpTaxWorkTrans_TaxBaseAmount</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayTaxBaseAmount</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@SYS21950</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>displayTaxInCostPriceMST</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayActualTaxInCostPrice</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@Tax:ActualNonDeductibleSalesTax</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_TaxAmount</Name>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:TaxTmpWorkTrans_TmpTaxWorkTrans_TaxAmount</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayTaxAmount</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@SYS128972</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TaxSpecificExchangeRateTaxBaseAmount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@TaxIntegration:ExchangeRateTaxBaseAmountHelpText</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayExchangeRateTaxBaseAmount</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@TaxIntegration:ExchangeRateTaxBaseAmount</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TaxSpecificExchangeRateSourceBaseAmountRegulated</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@TaxIntegration:ExchangeRateBaseAmountRegulatedHelpText</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayExchRateSourceBaseAmountRegulated</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@TaxIntegration:ExchangeRateBaseAmountRegulated</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TaxSpecificExchangeRateTaxAmount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@TaxIntegration:ExchangeRateTaxAmountHelpText</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayExchangeRateTaxAmount</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@TaxIntegration:ExchangeRateTaxAmount</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TaxSpecificExchangeRateSourceRegulateAmount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@TaxIntegration:ExchangeRateRegulateAmountHelpText</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayExchangeRateSourceRegulateAmount</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@TaxIntegration:ExchangeRateRegulateAmount</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Caption>@Tax:AccountingCurrency</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ReportingCurrencyAmount</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Group</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ReportingCurrency</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayReportingCurrencyCode</DataMethod>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_TaxBaseAmountRep</Name>
										<HelpText>@TaxTrans:TaxBaseAmountRepHelpText</HelpText>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayTaxBaseAmountRep</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@SYS21950</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_TaxAmountRep</Name>
										<HelpText>@TaxTrans:TaxAmountRepHelpText</HelpText>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayTaxAmountRep</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TaxSpecificExchangeRateTaxBaseAmountRep</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@TaxIntegration:ExchangeRateTaxBaseAmountRepHelpText</HelpText>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayExchangeRateTaxBaseAmountRep</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@TaxIntegration:ExchangeRateTaxBaseAmountRep</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TaxSpecificExchangeRateTaxAmountRep</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@TaxIntegration:ExchangeRateTaxAmountRepHelpText</HelpText>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayExchangeRateTaxAmountRep</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@TaxIntegration:ExchangeRateTaxAmountRep</Label>
									</AxFormControl>
								</Controls>
								<Caption>@TaxIntegration:ReportingCurrency</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>TaxCurrencyAmount</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Group</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpTaxWorkTrans_CurrencyCode</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyCode</DataField>
										<DataSource>TmpTaxWorkTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_TaxBaseAmountCur</Name>
										<HelpText>@TaxTrans:TaxBaseAmountCurHelpText</HelpText>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayTaxBaseAmountCur</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@SYS21950</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_TaxAmountCur</Name>
										<HelpText>@TaxTrans:TaxAmountCurHelpText</HelpText>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayTaxAmountCur</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TaxSpecificExchangeRateTaxBaseAmountCur</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@TaxIntegration:ExchangeRateTaxBaseAmountCurHelpText</HelpText>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayExchangeRateTaxBaseAmountCur</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@TaxIntegration:ExchangeRateTaxBaseAmountCur</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TaxSpecificExchangeRateBaseAmountCurRegulated</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@TaxIntegration:ExchangeRateBaseAmountCurRegulatedHelpText</HelpText>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayExchangeRateBaseAmountCurRegulated</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@TaxIntegration:ExchangeRateBaseAmountCurRegulated</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TaxSpecificExchangeRateTaxAmountCur</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@TaxIntegration:ExchangeRateTaxAmountCurHelpText</HelpText>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayExchangeRateTaxAmountCur</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@TaxIntegration:ExchangeRateTaxAmountCur</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TaxSpecificExchangeRateRegulateAmountCur</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@TaxIntegration:ExchangeRateRegulateAmountCurHelpText</HelpText>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayExchangeRateRegulateAmountCur</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@TaxIntegration:ExchangeRateRegulateAmountCur</Label>
									</AxFormControl>
								</Controls>
								<Caption>@TaxIntegration:TaxCurrency</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Reporting_BR</Name>
								<CountryRegionCodes>BR</CountryRegionCodes>
								<ElementPosition>1263324360</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>displayCompanyCurrencyCode_BR</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:TaxTmpWorkTrans_displayCompanyCurrencyCode</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayCompanyCurrencyCode</DataMethod>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpTaxWorkTrans_TaxationCode_BR2</Name>
										<ElementPosition>429496728</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>taxationCodeAdjusted_BR</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>TmpTaxWorkTrans_FiscalValue_BR2</Name>
										<ElementPosition>644245092</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>FiscalValue_BR</DataField>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_TaxReductionPct_BR1</Name>
										<ElementPosition>858993456</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxReductionPct_BR</DataField>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
										<SignDisplay>None</SignDisplay>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>taxableBaseAmount_BR</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1073741820</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>taxableBaseAmount_BR</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@GLS100080</Label>
										<NoOfDecimals>-1</NoOfDecimals>
										<SignDisplay>None</SignDisplay>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>taxableTaxAmount_BR</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1288490184</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>taxableTaxAmount_BR</DataMethod>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<Label>@GLS100079</Label>
										<NoOfDecimals>-1</NoOfDecimals>
										<SignDisplay>None</SignDisplay>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_SourceExemptBaseAmountMST_BR</Name>
										<ElementPosition>1503238548</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SourceExemptBaseAmountMST_BR</DataField>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
										<SignDisplay>None</SignDisplay>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_SourceOtherBaseAmountMST_BR</Name>
										<ElementPosition>1717986912</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SourceOtherBaseAmountMST_BR</DataField>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
										<SignDisplay>None</SignDisplay>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxWorkTrans_SourceOtherTaxAmountMST_BR</Name>
										<ElementPosition>1932735276</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SourceOtherTaxAmountMST_BR</DataField>
										<DataSource>TmpTaxWorkTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
										<SignDisplay>None</SignDisplay>
									</AxFormControl>
								</Controls>
								<Caption>@SYS81753</Caption>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS12227</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Regulation</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>FormActionPaneControl1</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>ButtonGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<LeftMode>AutoRight</LeftMode>
										<Top>0</Top>
										<TopMode>BottomEdge</TopMode>
										<Type>ButtonGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>Apply</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<NeededPermission>Update</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<Text>@Tax:ApplyActualAmounts</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>Reset</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<NeededPermission>Update</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<Text>@Tax:ResetActualFromCalculatedAmounts</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>TmpTaxRegulation_LineStripNew</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>596523234</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>CommandButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Visible>No</Visible>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
												<Command>New</Command>
												<MultiSelect>Yes</MultiSelect>
												<NormalImage>Add</NormalImage>
												<Primary>Yes</Primary>
												<ShowShortCut>No</ShowShortCut>
												<Text>@SYS319116</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>TmpTaxRegulation_LineStripDelete</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1491308086</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>CommandButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Visible>No</Visible>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
												<Command>DeleteRecord</Command>
												<MultiSelect>Yes</MultiSelect>
												<NormalImage>Delete</NormalImage>
												<Primary>Yes</Primary>
												<SaveRecord>No</SaveRecord>
												<ShowShortCut>No</ShowShortCut>
												<Text>@SYS135131</Text>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>HorizontalRight</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>RegulationLines</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormImageControl">
										<Name>Warning</Name>
										<AlignControl>No</AlignControl>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Height>14</Height>
										<HeightMode>Auto</HeightMode>
										<Skip>Yes</Skip>
										<Type>Image</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>14</Width>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackStyle>Transparent</BackStyle>
										<DataMethod>warningIcon</DataMethod>
										<DataSource>TmpTaxRegulation</DataSource>
										<Label>@SYS6998</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormImageControl">
										<Name>Derived</Name>
										<AlignControl>No</AlignControl>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Height>14</Height>
										<HeightMode>Auto</HeightMode>
										<Skip>Yes</Skip>
										<Type>Image</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>14</Width>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackStyle>Transparent</BackStyle>
										<DataMethod>derivedIcon</DataMethod>
										<DataSource>TmpTaxRegulation</DataSource>
										<Label>@SYS21777</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>TmpTaxRegulation_AdjustmentDetailType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<CountryRegionCodes>CN,JP,IN,CZ,EE,HU,LT,LV,PL,RU,BR</CountryRegionCodes>
										<ElementPosition>1677721598</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayTaxAdjustmentDetailType</DataMethod>
										<DataSource>TmpTaxRegulation</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpTaxRegulation_AdjustmentDetailReference</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<CountryRegionCodes>CN,JP,IN,CZ,EE,HU,LT,LV,PL,RU,BR</CountryRegionCodes>
										<ElementPosition>1744830462</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayTaxAdjustmentDetailReference</DataMethod>
										<DataSource>TmpTaxRegulation</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpTaxRegulation_AdjustmentDetailDescription</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<CountryRegionCodes>CN,JP,IN,CZ,EE,HU,LT,LV,PL,RU,BR</CountryRegionCodes>
										<ElementPosition>1811939326</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayTaxAdjustmentDetailDescription</DataMethod>
										<DataSource>TmpTaxRegulation</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>TmpTaxRegulation_SourceLineType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>SourceLineType</DataField>
										<DataSource>TmpTaxRegulation</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxRegulation_SourceOrderLineNum</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>SourceOrderLineNum</DataField>
										<DataSource>TmpTaxRegulation</DataSource>
										<MinNoOfDecimals>0</MinNoOfDecimals>
										<MinNoOfDecimalsMode>Fixed</MinNoOfDecimalsMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxRegulation_SourceChargeLineNum</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>SourceChargeLineNum</DataField>
										<DataSource>TmpTaxRegulation</DataSource>
										<MinNoOfDecimals>0</MinNoOfDecimals>
										<MinNoOfDecimalsMode>Fixed</MinNoOfDecimalsMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpTaxRegulation_TaxCode</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<PreviewPartRef>TaxCodeInfoPartPreview</PreviewPartRef>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxCode</DataField>
										<DataSource>TmpTaxRegulation</DataSource>
										<Mandatory>Yes</Mandatory>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpTaxRegulation_SourceCurrencyCode</Name>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_InventoryManagement:TaxTmpWorkTrans_TmpTaxRegulation_SourceCurrencyCode</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>SourceCurrencyCode</DataField>
										<DataSource>TmpTaxRegulation</DataSource>
										<Label>@SYS7572</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpTaxRegulation_TaxationCode_BR</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2085407946</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxationCode_BR</DataField>
										<DataSource>TmpTaxRegulation</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpTaxRegulation_editTaxationCode_BR</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2090441110</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxationCodeRegulated_BR</DataField>
										<DataSource>TmpTaxRegulation</DataSource>
										<Label>@GLS50816</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>TmpTaxRegulation_TaxFiscalValue_BR</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2095474274</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxFiscalValue_BR</DataField>
										<DataSource>TmpTaxRegulation</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxRegulation_SourceBaseAmountCur</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2105540606</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_InventoryManagement:TaxTmpWorkTrans_TmpTaxRegulation_SourceBaseAmountCur</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displaySourceBaseAmountCur</DataMethod>
										<DataSource>TmpTaxRegulation</DataSource>
										<Label>@SYS21950</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxRegulation_SourceBaseAmountCurRegulated</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2130706430</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_InventoryManagement:TaxTmpWorkTrans_TmpTaxRegulation_SourceBaseAmountCurRegulated</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editSourceBaseAmountCurRegulated</DataMethod>
										<DataSource>TmpTaxRegulation</DataSource>
										<Label>@SYS67702</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxRegulation_TaxInCostPrice</Name>
										<ElementPosition>2135599784</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayTaxInCostPrice</DataMethod>
										<DataSource>TmpTaxRegulation</DataSource>
										<Label>@SYS128978</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxRegulation_TaxInCostPriceRegulated</Name>
										<ElementPosition>2140493138</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayTaxInCostPriceAdjusted</DataMethod>
										<DataSource>TmpTaxRegulation</DataSource>
										<Label>@SYS128980</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxRegulation_SourceTaxAmountCur</Name>
										<ElementPosition>2145386494</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_InventoryManagement:TaxTmpWorkTrans_TmpTaxRegulation_SourceTaxAmountCur</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displaySourceTaxAmountCur</DataMethod>
										<DataSource>TmpTaxRegulation</DataSource>
										<Label>@SYS128996</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxRegulation_SourceTaxAmountAccountingCur_IN</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2145910782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displaySourceTaxAmountAccountingCur_IN</DataMethod>
										<DataSource>TmpTaxRegulation</DataSource>
										<Label>@SYP4860327</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxRegulation_SourceRegulateAmountCur</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2146435070</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_InventoryManagement:TaxTmpWorkTrans_TmpTaxRegulation_SourceRegulateAmountCur</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editSourceRegulateAmountCur</DataMethod>
										<DataSource>TmpTaxRegulation</DataSource>
										<Label>@SYS128972</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxRegulation_ActualSourceRegulateAmountCur</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Real</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editActualSourceRegulateAmountCur</DataMethod>
										<DataSource>TmpTaxRegulation</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxRegulation_SourceRegulateAmountCustoms_IN</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2146697214</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editSourceRegulateAmountCustoms_IN</DataMethod>
										<DataSource>TmpTaxRegulation</DataSource>
										<Label>@SYP4860853</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>TmpTaxRegulation_OverrideCalculatedTax</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2146959358</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_InventoryManagement:TaxTmpWorkTrans_TmpTaxRegulation_OverrideCalculatedTax</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>OverrideCalculatedTax</DataField>
										<DataSource>TmpTaxRegulation</DataSource>
										<Label>@SYS128982</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxRegulation_ExchangeRateTaxBaseAmount</Name>
										<ElementPosition>2147064215</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ExchangeRateTaxBaseAmount</DataField>
										<DataSource>TmpTaxRegulation</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxRegulation_ExchangeRateSourceBaseAmountRegulated</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2147169072</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ExchangeRateSourceBaseAmountRegulated</DataField>
										<DataSource>TmpTaxRegulation</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxRegulation_ExchangeRateTaxAmount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2147273929</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ExchangeRateTaxAmount</DataField>
										<DataSource>TmpTaxRegulation</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxRegulation_ExchangeRateSourceRegulateAmount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2147378787</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ExchangeRateSourceRegulateAmount</DataField>
										<DataSource>TmpTaxRegulation</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxRegulation_ExchangeRateTaxBaseAmountCur</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ExchangeRateTaxBaseAmountCur</DataField>
										<DataSource>TmpTaxRegulation</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxRegulation_ExchangeRateBaseAmountCurRegulated</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ExchangeRateBaseAmountCurRegulated</DataField>
										<DataSource>TmpTaxRegulation</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxRegulation_ExchangeRateTaxAmountCur</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ExchangeRateTaxAmountCur</DataField>
										<DataSource>TmpTaxRegulation</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxRegulation_ExchangeRateRegulateAmountCur</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ExchangeRateRegulateAmountCur</DataField>
										<DataSource>TmpTaxRegulation</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpTaxRegulation_ConsolidateSourceRegulateAmountCur_JP</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_InventoryManagement:TaxTmpWorkTrans_ConsolidateSourceRegulateAmountCur_JP</HelpText>
										<Type>Real</Type>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editConsolidateSourceRegulateAmountCur_JP</DataMethod>
										<DataSource>TmpTaxRegulation</DataSource>
										<Label>@Tax:ActualConsolidatedSalesTax</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<DataSource>TmpTaxRegulation</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FormGroupControl1</Name>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>TaxAdjustmentType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<EnumType>TaxAdjustmentType</EnumType>
										<Items />
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
							</AxFormControl>
						</Controls>
						<Caption>@SYS596</Caption>
						<DataSource>TmpTaxRegulation</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>TaxAmounts</Name>
				<ElementPosition>1163220307</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>TaxAmountCurTotal</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>357913940</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Skip>Yes</Skip>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>TaxAmountCurTotal</DataMethod>
						<Label>@SYS128974</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>TaxAmountCustomsCurTotal_IN</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>536870910</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Skip>Yes</Skip>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>taxAmountCustomsCurTotal_IN</DataMethod>
						<Label>@GLS60800</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>TaxRegulationTotal</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>715827880</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>TaxRegulationTotalCur</DataMethod>
						<Label>@SYS128989</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>ActualTaxRegulationTotal</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>715827880</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>ActualTaxRegulationTotalCur</DataMethod>
						<Label>@SYS128989</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>AdjustedTaxRegulationTotalCustoms_IN</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>894784850</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>adjustedTaxRegulationTotalCustoms_IN</DataMethod>
						<Label>@GLS60804</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>EximTaxAmountMST_IN</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741820</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Skip>Yes</Skip>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>eximTaxAmountMST_IN</DataMethod>
						<Label>@GLS62335</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>EximBalanceTaxAmountMST_IN</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1252698790</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Skip>Yes</Skip>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>eximBalanceTaxAmountMST_IN</DataMethod>
						<Label>@GLS62336</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>EximTaxCorrectedAmount_IN</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655760</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Skip>Yes</Skip>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>eximTaxCorrectedAmount_IN</DataMethod>
						<Label>@GLS62337</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>EximBalanceCorrectedTaxAmount_IN</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612730</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Skip>Yes</Skip>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>eximBalanceCorrectedTaxAmount_IN</DataMethod>
						<Label>@GLS62338</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>SalesTaxExchangeRate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2028178996</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>ExchRate</ExtendedDataType>
						<Label>@GLS112406</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>SalesTaxExchangeRateRep</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2028178996</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>ExchRate</ExtendedDataType>
						<Label>@TaxIntegration:SalesTaxExchangeRateRep</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>SalesTaxExchangeRateCur</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2028178996</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>ExchRate</ExtendedDataType>
						<Label>@TaxIntegration:SalesTaxExchangeRateCur</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>IgnoreCalculatedTaxAmounts</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1789569700</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@FieldDescriptions_InventoryManagement:TaxTmpWorkTrans_IgnoreCalculatedTaxAmounts</HelpText>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>ignoreCalculatedSalesTax</DataMethod>
						<Label>@SYS184202</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>DateOfVATRegister</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1908874348</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Date</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>VatDueDate_W</ExtendedDataType>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>FormButtonGroupControl</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>CommandButton</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>