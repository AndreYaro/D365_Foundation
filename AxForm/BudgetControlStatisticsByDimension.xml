<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BudgetControlStatisticsByDimension</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BudgetControlStatisticsByDimension extends FormRun
{
    LedgerRecId primaryLedger;

    BudgetCycle budgetCycle;
    Args budgetCycleLookupArgs;
    BudgetCheckResultErrorWarningDetail budgetCheckResultErrorWarningDetail;
    BudgetTransactionLine budgetTransactionLine;
    BudgetControlStatisticsManager budgetControlStatsManager;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form controls.
    /// </summary>
    public void init()
    {
        #SysSystemDefinedButtons

        BudgetGroupMemberName budgetGroupMemberName;
        BudgetCycleName budgetCycleName;

        boolean isInitialized;

        if (element.args().dataset() && element.args().record())
        {
            if (element.args().dataset() == tableNum(BudgetCheckResultErrorWarningDetail))
            {
                budgetCheckResultErrorWarningDetail = element.args().record() as BudgetCheckResultErrorWarningDetail;

                primaryLedger = budgetCheckResultErrorWarningDetail.PrimaryLedger;

                BudgetSourceIntegrator budgetSourceIntegrator = BudgetSourceIntegrator::newBudgetSourceIntegratorFromBudgetSource(
                    BudgetSource::find(budgetCheckResultErrorWarningDetail.BudgetSource));

                // Get the transaction date from budget source integrator.
                TransDate transactionDate = budgetSourceIntegrator.getBudgetSourceTrackingDate();

                BudgetControlRule budgetControlRule = BudgetControlLedgerDimensionHelper::findBudgetControlRuleByLedgerDimension(
                    budgetCheckResultErrorWarningDetail.PrimaryLedger,
                    budgetCheckResultErrorWarningDetail.BudgetSourceLedgerDimension);

                budgetCycle = BudgetCycle::findBudgetCycleByDate(budgetControlRule.BudgetCycleTimeSpan, transactionDate);

                budgetCycleName = budgetCycle.Name;

                if (budgetCheckResultErrorWarningDetail.BudgetGroupMember)
                {
                    BudgetGroupMember budgetGroupMember;
                    select Name from budgetGroupMember where budgetGroupMember.RecId == budgetCheckResultErrorWarningDetail.BudgetGroupMember;
                    budgetGroupMemberName = budgetGroupMember.Name;
                }

                isInitialized = true;
            }
            else if (element.args().dataset() == tableNum(BudgetTransactionLine))
            {
                budgetTransactionLine = element.args().record() as budgetTransactionLine;

                BudgetTransactionHeader budgetTransactionHeader = budgetTransactionLine.getBudgetTransactionHeader();

                primaryLedger = budgetTransactionHeader.PrimaryLedger;

                BudgetControlRule budgetControlRule = BudgetControlLedgerDimensionHelper::findBudgetControlRuleByLedgerDimension(
                    primaryLedger,
                    budgetTransactionLine.LedgerDimension);

                if (budgetControlRule)
                {
                    budgetCycle = BudgetCycle::findBudgetCycleByDate(budgetControlRule.BudgetCycleTimeSpan, budgetTransactionLine.Date);
                    budgetCycleName = budgetCycle.Name;
                }

                isInitialized = true;
            }
        }

        if (!isInitialized)
        {
            primaryLedger = Ledger::current();

            BudgetControlConfiguration budgetControlConfiguration = BudgetControlConfiguration::findActiveByPrimaryLedger(primaryLedger);

            if (budgetControlConfiguration.DefaultBudgetCycleTimeSpan)
            {
                budgetCycle = BudgetCycle::findBudgetCycleByDate(budgetControlConfiguration.DefaultBudgetCycleTimeSpan, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

                if (BudgetControlBudgetCycle::existByCycleNameAndConfiguration(budgetCycle.Name, budgetControlConfiguration.RecId))
                {
                    budgetCycleName = budgetCycle.Name;
                }
            }

            isInitialized = true;
        }

        super();

        // User access to filters on the grid headers and custom filters replaces the need for the filter pane.
        FormCommandButtonControl showFiltersButton = this.control(this.controlId(#SystemDefinedShowFiltersButton)) as FormCommandButtonControl;
        showFiltersButton.visible(false);

        if (budgetCycleName)
        {
            budgetCycleLookup.text(budgetCycleName);
            budgetCycleLookup.modified();
        }

        this.setGridFieldVisibility();

        budgetControlStatsManager = new BudgetControlStatisticsManager();
        budgetFundsAvailableExpressionStatic.text(budgetControlStatsManager.getBudgetAvailableExpression());

        if ((budgetCheckResultErrorWarningDetail || budgetTransactionLine) && budgetCycleName)
        {
            UpdateTotalsButton.clicked();
        }

        // Inform the DimensionCombinationPreviewPart of the location of the dimension foreign key field.
        BudgetTmpControlStatisticsByDimension_BudgetControlLedgerDimensionName.userDataItem(
            fieldNum(BudgetTmpControlStatisticsByDimension, BudgetControlLedgerDimension));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGridFieldVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines which fields to show in the grid based on whether the data is grouped by dimension values or budget groups and whether budget control
    /// is configured to use apportionment.
    /// </summary>
    public void setGridFieldVisibility()
    {
        if (GroupingRadioButton.selection() == BudgetControlStatisticsValueOption::DimensionValues)
        {
            BudgetTmpControlStatisticsByDimension_BudgetGroupName.visible(false);
            BudgetTmpControlStatisticsByDimension_BudgetControlLedgerDimension.visible(true);
            BudgetTmpControlStatisticsByDimension_BudgetControlLedgerDimensionName.visible(true);
        }
        else
        {
            BudgetTmpControlStatisticsByDimension_BudgetGroupName.visible(true);
            BudgetTmpControlStatisticsByDimension_BudgetControlLedgerDimension.visible(false);
            BudgetTmpControlStatisticsByDimension_BudgetControlLedgerDimensionName.visible(false);
        }

        BudgetTmpControlStatisticsByDimension_TotalApportionment.visible(BudgetControlConfiguration::isApportionmentBudgetEnabled(primaryLedger));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>BudgetControlStatisticsRequest</c> based on the selections made on the form.
    /// </summary>
    /// <param name = "_createForSecondaryForm">
    /// Whether the request is intended for consumption by a secondary form.
    /// </param>
    /// <returns>
    /// The populated <c>BudgetControlStatisticsRequest</c> object.
    /// </returns>
    private BudgetControlStatisticsRequest createRequest(boolean _createForSecondaryForm)
    {
        BudgetControlStatisticsRequest request = BudgetControlStatisticsRequest::construct();

        request.parmPrimaryLedgerRecId(primaryLedger);
        request.parmIncludeCarryForward(carryForwardAmountsRadioButton.selection());
        request.parmStartDate(startDate.dateValue());
        request.parmEndDate(endDate.dateValue());
        request.parmBudgetModelId(budgetModelLookup.text());

        if (GroupingRadioButton.selection() == BudgetControlStatisticsValueOption::BudgetGroup)
        {
            if (_createForSecondaryForm)
            {
                request.parmBudgetGroupName(budgetTmpControlStatisticsByDimension.BudgetGroupName);
            }
            else
            {
                request.parmBudgetGroupName(budgetGroupLookup.text());
            }
        }
        else
        {
            if (_createForSecondaryForm)
            {
                request.parmBudgetControlLedgerDimension(budgetTmpControlStatisticsByDimension.BudgetControlLedgerDimension);
            }
            else
            {
                request.parmBudgetGroupName(budgetGroupLookup.text());
            }
        }

        request.parmBudgetSourceLedgerDimension(budgetTmpControlStatisticsByDimension.BudgetSourceLedgerDimension);
        request.parmBudgetCycleRecId(budgetCycle.RecId);
        request.parmBudgetControlStatisticsValueOption(groupingRadioButton.selection());

        return request;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>BudgetTmpControlStatisticsByDimension</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            QueryBuildDataSource BudgetTmpControlStatisticsByDimension_QBDS = this.query().dataSourceTable(tableNum(BudgetTmpControlStatisticsByDimension));

            if (GroupingRadioButton.selection() == BudgetControlStatisticsValueOption::DimensionValues)
            {
                QueryBuildDataSource DimensionAttributeValueCombination_QBDS = SysQuery::findOrCreateDataSource(
                    this.query(),
                    tableNum(DimensionAttributeValueCombination),
                    BudgetTmpControlStatisticsByDimension_QBDS.table());
                DimensionAttributeValueCombination_QBDS.relations(false);
                DimensionAttributeValueCombination_QBDS.addLink(
                    fieldNum(BudgetTmpControlStatisticsByDimension, BudgetControlLedgerDimension),
                    fieldNum(DimensionAttributeValueCombination, RecId),
                    BudgetTmpControlStatisticsByDimension_QBDS.name());

                DimensionAttributeValueCombination_QBDS.addOrderByField(fieldNum(DimensionAttributeValueCombination, DisplayValue), SortOrder::Ascending);
            }
            else
            {
                BudgetTmpControlStatisticsByDimension_QBDS.addOrderByField(fieldNum(BudgetTmpControlStatisticsByDimension, BudgetGroupName), SortOrder::Ascending);
            }

            super();

            if (budgetTransactionLine)
            {
                // Highlight the line in the BudgetTmpControlStatisticsByDimension table
                // that matches the budget transaction line's control ledger dimension.
                LedgerDimensionBudgetControl budgetTransactionLineControlLedgerDimension =
                    BudgetControlLedgerDimensionHelper::findBudgetControlLedgerDimension(primaryLedger, budgetTransactionLine.LedgerDimension);

                BudgetTmpControlStatisticsByDimension budgetTmpControlStatisticsByDimensionLocal;

                budgetTmpControlStatisticsByDimensionLocal.linkPhysicalTableInstance(budgetTmpControlStatisticsByDimension);

                select * from budgetTmpControlStatisticsByDimensionLocal
                    where budgetTmpControlStatisticsByDimensionLocal.BudgetControlLedgerDimension == budgetTransactionLineControlLedgerDimension;

                BudgetTmpControlStatisticsByDimension_DS.positionToRecord(budgetTmpControlStatisticsByDimensionLocal);
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>UpdateTotalsButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            BudgetControlStatisticsManager manager = new BudgetControlStatisticsManager();

            BudgetTmpControlStatisticsByDimension budgetTmpControlStatisticsByDimensionLocal =
                manager.populateBudgetTmpControlStatisticsByDimension(element.createRequest(false));

            DimensionCombinationNameTmp dimensionCombinationNameTmp;
            insert_recordset dimensionCombinationNameTmp (DimensionAttributeValueCombination)
                select BudgetControlLedgerDimension from budgetTmpControlStatisticsByDimensionLocal
                group by budgetTmpControlStatisticsByDimensionLocal.BudgetControlLedgerDimension;

            DimensionCombinationNameTmp::getDimensionCombinationNames(dimensionCombinationNameTmp);

            update_recordset budgetTmpControlStatisticsByDimensionLocal
                setting BudgetControlLedgerDimensionName = dimensionCombinationNameTmp.Name
                join dimensionCombinationNameTmp
                    where dimensionCombinationNameTmp.DimensionAttributeValueCombination
                        == budgetTmpControlStatisticsByDimensionLocal.BudgetControlLedgerDimension;

            budgetTmpControlStatisticsByDimension.linkPhysicalTableInstance(budgetTmpControlStatisticsByDimensionLocal);

            BudgetTmpControlStatisticsByDimension_DS.executeQuery();

            element.setGridFieldVisibility();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PeriodBalancesButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            Args args = new Args();

            args.parmObject(element.createRequest(true));

            FormRun formRun = new MenuFunction(menuItemDisplayStr(BudgetControlStatisticsByPeriod), MenuItemType::Display).create(args);

            formRun.run();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LedgerAccountsButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            Args args = new Args();

            args.parmObject(element.createRequest(true));

            FormRun formRun = new MenuFunction(menuItemDisplayStr(BudgetControlStatisticsByLedgerAccount), MenuItemType::Display).create(args);

            formRun.run();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetCycleLookup</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            FormRun budgetCycleFormLookup;

            budgetCycleLookupArgs = new Args(formStr(BudgetCycleLookup));
            budgetCycleLookupArgs.caller(this);
            budgetCycleLookupArgs.parmEnum(NoYes::No);

            budgetCycleFormLookup = ClassFactory::formRunClassOnClient(budgetCycleLookupArgs);

            budgetCycleFormLookup.init();

            budgetCycleLookup.performFormLookup(budgetCycleFormLookup);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            BudgetControlConfiguration  budgetControlConfiguration;
            BudgetControlBudgetCycle    budgetControlBudgetCycle;
            BudgetCycleName             budgetCycleName;
            BudgetModel                 budgetModel;
            boolean ret;

            ret = super();

            budgetCycle = null;
            budgetCycleName = budgetCycleLookup.text();

            if (budgetCycleName == '')
            {
                budgetCycle = null;
            }
            else if (budgetCycleLookupArgs != null &&
                    budgetCycleLookupArgs.dataset() == tableNum(BudgetCycle) &&
                    budgetCycleLookupArgs.record() != null)
            {
                budgetCycle = budgetCycleLookupArgs.record() as BudgetCycle;
                budgetCycleLookupArgs.record(null);
            }
            else
            {
                select firstonly * from budgetCycle
                    where budgetCycle.Name == budgetCycleName
                    exists join budgetControlBudgetCycle
                        where budgetControlBudgetCycle.BudgetCycle == budgetCycle.RecId
                    exists join budgetControlConfiguration
                        where budgetControlConfiguration.RecId == budgetControlBudgetCycle.BudgetControlConfiguration &&
                            budgetControlConfiguration.PrimaryLedger == primaryLedger &&
                            budgetControlConfiguration.IsActive == true;
            }

            budgetModelLookup.text('');
            budgetGroupLookup.text('');

            if (budgetCycle)
            {
                select firstonly ModelId from budgetModel
                    where budgetModel.Blocked == NoYes::No
                    exists join budgetControlBudgetCycle
                        where budgetModel.ModelId == budgetControlBudgetCycle.BudgetModelId &&
                            budgetControlBudgetCycle.BudgetCycle == budgetCycle.RecId
                    exists join budgetControlConfiguration
                        where budgetControlConfiguration.RecId == budgetControlBudgetCycle.BudgetControlConfiguration &&
                            budgetControlConfiguration.PrimaryLedger == Ledger::current() &&
                            budgetControlConfiguration.IsActive == true;

                budgetModelLookup.text(budgetModel.ModelId);
                StartDate.dateValue(budgetCycle.getStartDate());
                EndDate.dateValue(budgetCycle.getEndDate());
                UpdateTotalsButton.enabled(true);
            }
            else if (budgetCycleName == '')
            {
                budgetModelLookup.allowEdit(false);
                UpdateTotalsButton.enabled(false);
            }
            else
            {
                budgetModelLookup.allowEdit(false);
                UpdateTotalsButton.enabled(false);
                ret = checkFailed(strFmt("@SYS315908", budgetCycleName, fieldPName(BudgetCycle, Name), tablePName(BudgetCycle)));
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetGroupLookup</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Query                   query          = new Query();
            QueryBuildDataSource    budgetGroup_qbds;
            QueryBuildDataSource    budgetGroupMember_qbds;
            QueryBuildDataSource    budgetControlConfiguration_qbds;

            // Create an instance of SysTableLookup where 'this'
            // is the current form control.
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(BudgetGroupMember), this);

            // Add fields to be shown in the lookup form.
            sysTableLookup.addLookupfield(fieldNum(BudgetGroupMember, Name));
            sysTableLookup.addLookupfield(fieldNum(BudgetGroupMember, Description));

            // Limit and arrange the data selection.
            budgetGroupMember_qbds = query.addDataSource(tableNum(BudgetGroupMember));
            budgetGroupMember_qbds.addRange(fieldNum(BudgetGroupMember, ParentBudgetGroupMember)).value(SysQuery::valueEmptyString());
            budgetGroup_qbds = budgetGroupMember_qbds.addDataSource(tableNum(BudgetGroup));
            budgetGroup_qbds.joinMode(JoinMode::InnerJoin);
            budgetGroup_qbds.addLink(fieldNum(BudgetGroupMember, BudgetGroup), fieldNum(BudgetGroup, RecId));
            budgetControlConfiguration_qbds = budgetGroup_qbds.addDataSource(tableNum(BudgetControlConfiguration));
            budgetControlConfiguration_qbds.joinMode(JoinMode::InnerJoin);
            budgetControlConfiguration_qbds.addLink(fieldNum(BudgetGroup, BudgetControlConfiguration), fieldNum(BudgetControlConfiguration, RecId));
            budgetControlConfiguration_qbds.addRange(fieldNum(BudgetControlConfiguration, PrimaryLedger)).value(SysQuery::value(primaryLedger));
            budgetControlConfiguration_qbds.addRange(fieldNum(BudgetControlConfiguration, IsActive)).value(int2str(enum2int(NoYes::Yes)));

            // Restrict to the active configuration groups and dates for the selected budget cycle.
            BudgetGroupLedgerDimension::addActiveGroupBudgetCycleRangesToQuery(query, budgetCycle);

            sysTableLookup.parmQuery(query);

            // Perform the lookup.
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            BudgetGroupMember           budgetGroupMember;
            BudgetGroup                 budgetGroup;
            BudgetControlConfiguration  budgetControlConfiguration;
            boolean ret;
            BudgetGroupMemberName   budgetGroupName;

            ret = super();

            budgetGroupName = budgetGroupLookup.text();

            select firstonly BudgetGroup
                from budgetGroupMember
                    where budgetGroupMember.Name == budgetGroupName
                    && budgetGroupMember.ParentBudgetGroupMember == 0
                join *
                    from budgetGroup
                        where budgetGroup.RecId == budgetGroupMember.BudgetGroup
                join RecId
                    from budgetControlConfiguration
                        where budgetControlConfiguration.PrimaryLedger == primaryLedger
                            && budgetControlConfiguration.RecId == budgetGroup.BudgetControlConfiguration;

            if (budgetGroup && budgetGroup.BudgetCycleTimeSpan != budgetCycle.BudgetCycleTimeSpan)
            {
                // The budget group is not valid for the selected budget cycle and active budget control configuration.
                ret = checkFailed(strFmt("@Budget:ControlStatisticsBudgetGroupParameterError", budgetModelLookup.text()));
            }
            else if (budgetGroupName && !budgetGroupMember.BudgetGroup)
            {
                ret = checkFailed(strFmt("@SYS315908", budgetGroupName, fieldPName(BudgetGroupMember, Name), tablePName(BudgetGroupMember)));
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>StartDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (budgetCycle)
            {
                if (this.dateValue() < budgetCycle.getStartDate())
                {
                    ret = checkFailed(strFmt("@Budget:BudgetControlStatisticsByDimensionStartDateValidateBudgetCycle", this.dateValue(), budgetCycleLookup.text()));
                }
                else if (this.dateValue() > endDate.dateValue())
                {
                    ret = checkFailed(strFmt("@Budget:BudgetControlStatisticsByDimensionStartDateAfterEndDate", this.dateValue()));
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EndDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (budgetCycle)
            {
                if (this.dateValue() > budgetCycle.getEndDate())
                {
                    ret = checkFailed(strFmt("@Budget:BudgetControlStatisticsByDimensionEndDateValidateBudgetCycle", this.dateValue(), budgetCycleLookup.text()));
                }
                else if (this.dateValue() < startDate.dateValue())
                {
                    ret = checkFailed(strFmt("@Budget:BudgetControlStatisticsByDimensionEndDateBeforeStartDate", this.dateValue()));
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>BudgetTmpControlStatisticsByDimension</Name>
			<Table>BudgetTmpControlStatisticsByDimension</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BudgetControlLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetGroupName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetSourceLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PercentUsed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryLedger</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalActualExpenditures</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalApportionment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalBudgetFundsAvailable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalEncumbrances</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalPreEncumbrances</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalRevisedBudget</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrackingDate</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoSearch>No</AutoSearch>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS129937</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<SetCompany xmlns="">No</SetCompany>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">SimpleList</Style>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>UpdateTotalsButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Enabled>No</Enabled>
								<NeededPermission>Read</NeededPermission>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<DefaultButton>Yes</DefaultButton>
								<Text>@Budget:BudgetInquiryUpdateTotalsButton</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>PeriodBalancesButton</Name>
								<Type>CommandButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@Budget:BudgetControlStatisticsByPeriodCaption</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>LedgerAccountsButton</Name>
								<Type>CommandButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@Budget:BudgetControlStatisticsByLedgerAccountCaption</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>FiltersAndGridTab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>FiltersTabPage</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ParametersGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SelectBudgetCycle</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BudgetCycleLookup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>BudgetCycleName</ExtendedDataType>
												<Label>@SYS314460</Label>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BudgetModelLookup</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS1966</Label>
											</AxFormControl>
										</Controls>
										<Breakable>No</Breakable>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRadioButtonControl">
										<Name>GroupingRadioButton</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>RadioButton</Type>
										<FormControlExtension
											i:nil="true" />
										<Caption>@Budget:BudgetControlStatisticsByDimensionGroupingLabel</Caption>
										<EnumType>BudgetControlStatisticsValueOption</EnumType>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BudgetGroupLookup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@Budget:BudgetGroupLabel</Label>
										<LabelPosition>Above</LabelPosition>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Dates</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>StartDate</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Date</Type>
												<FormControlExtension
													i:nil="true" />
												<Label>@Budget:BudgetControlStatisticsStartDate</Label>
												<LabelPosition>Above</LabelPosition>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>EndDate</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Date</Type>
												<FormControlExtension
													i:nil="true" />
												<Label>@Budget:BudgetControlStatisticsEndDate</Label>
												<LabelPosition>Above</LabelPosition>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>Auto</ArrangeMethod>
										<Breakable>No</Breakable>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRadioButtonControl">
										<Name>CarryForwardAmountsRadioButton</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>RadioButton</Type>
										<FormControlExtension
											i:nil="true" />
										<Caption>@Budget:CarryForwardAmountsInTotals</Caption>
										<EnumType>BudgetControlStatisticsCarryForwardOption</EnumType>
										<Items />
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalWrap</ArrangeMethod>
								<ColumnsMode>Fill</ColumnsMode>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
						</Controls>
						<Caption>@Budget:BudgetInquiryParametersTabPage</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>DetailsGridTabPage</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>BalanceDetails</Name>
								<AllowEdit>No</AllowEdit>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormSegmentedEntryControl">
										<Name>BudgetTmpControlStatisticsByDimension_BudgetControlLedgerDimension</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>SegmentedEntry</Type>
										<FormControlExtension>
											<Name>SegmentedEntryControl</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>parmControllerClassName</Name>
													<Type>String</Type>
													<Value>BudgetLedgerDimensionController</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmAccountTypeEnumName</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIsDefaultAccount</Name>
													<Type>Enum</Type>
													<TypeName>boolean</TypeName>
													<Value>False</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmValidateBlockedForManualEntry</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmLockMainAccountSegment</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmPostingType</Name>
													<Type>Enum</Type>
													<TypeName>LedgerPostingType</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeTotalAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeFinancialAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
										<DataSource>BudgetTmpControlStatisticsByDimension</DataSource>
										<Label>@Budget:BudgetControlDimensionValues</Label>
										<ReferenceField>BudgetControlLedgerDimension</ReferenceField>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BudgetTmpControlStatisticsByDimension_BudgetControlLedgerDimensionName</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<PreviewPartRef>DimensionCombinationPreviewPart</PreviewPartRef>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>BudgetControlLedgerDimensionName</DataField>
										<DataSource>BudgetTmpControlStatisticsByDimension</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BudgetTmpControlStatisticsByDimension_BudgetGroupName</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>BudgetGroupName</DataField>
										<DataSource>BudgetTmpControlStatisticsByDimension</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>BudgetTmpControlStatisticsByDimension_TotalBudgetFundsAvailable</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>TotalBudgetFundsAvailable</DataField>
										<DataSource>BudgetTmpControlStatisticsByDimension</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>BudgetTmpControlStatisticsByDimension_TotalApportionment</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>TotalApportionment</DataField>
										<DataSource>BudgetTmpControlStatisticsByDimension</DataSource>
										<Label>@SPS382</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>BudgetTmpControlStatisticsByDimension_TotalRevisedBudget</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>TotalRevisedBudget</DataField>
										<DataSource>BudgetTmpControlStatisticsByDimension</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>BudgetTmpControlStatisticsByDimension_TotalActualExpenditures</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>TotalActualExpenditures</DataField>
										<DataSource>BudgetTmpControlStatisticsByDimension</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>BudgetTmpControlStatisticsByDimension_TotalEncumbrances</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>TotalEncumbrances</DataField>
										<DataSource>BudgetTmpControlStatisticsByDimension</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>BudgetTmpControlStatisticsByDimension_TotalPreEncumbrances</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>TotalPreEncumbrances</DataField>
										<DataSource>BudgetTmpControlStatisticsByDimension</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>BudgetTmpControlStatisticsByDimension_PercentUsed</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>PercentUsed</DataField>
										<DataSource>BudgetTmpControlStatisticsByDimension</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>BudgetTmpControlStatisticsByDimension</DataSource>
								<MultiSelect>No</MultiSelect>
								<ShowRowLabels>No</ShowRowLabels>
							</AxFormControl>
						</Controls>
						<Caption>@Budget:BudgetInquiryResultsTabPage</Caption>
						<FastTabExpanded>Always</FastTabExpanded>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>BudgetFundsAvailableCalculation</Name>
				<ElementPosition>1879048190</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>FillText</Pattern>
				<PatternVersion>UX7 1.0</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStaticTextControl">
						<Name>budgetFundsAvailableExpressionStatic</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>StaticText</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Text></Text>
					</AxFormControl>
				</Controls>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>