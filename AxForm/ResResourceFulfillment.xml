<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ResResourceFulfillment</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ResResourceFulfillment extends FormRun
{
    private ResResourceSchedulingController controller;
    private ResAvailabilityViewContext context;
    private ActivityResourceRecId requestedResource;
    private Name requestedResourceName;
    private ResAvailabilityViewSearchController searchController;
    private ResCharacteristicsController resourceCharacteristics;
    private ResourceCategoryId defaultCategoryId;
    private ResourceCategoryId currentCategoryId;
    private ResEngagementIDName engagementIDName;
    private boolean requestWorkflowEnabled;
    private boolean showPlannedResourceRequest;
    private boolean showStaffedResourceRequest;
    private UserId currentUserId;
    private AvailabilityViewSelections requiredResourceSelections;
    private AvailabilityViewSelections availableResourcesSelections;
    private AVTimeframeType timescale;
    private Map selectedRequestLinesMap;
    private const int approvalStatusInitialValue = -1;
    private ResResourceFulfillmentType formAccessType;
    private boolean insufficientCalendarRecords;
    private boolean noStaffedResourceIsSelected;
    private boolean moreThanOneStaffedResourceIsSelected;
    private ResourceRecId selectedStaffedResource;

}
]]></Source>
			</Method>
			<Method>
				<Name>schedulingController</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the scheduling controller.
    /// </summary>
    /// <param name = "_controller">Scheduling controller object.</param>
    /// <returns>Instance of <c>ResResourceSchedulingController</c>.</returns>
    public ResResourceSchedulingController schedulingController(ResResourceSchedulingController _controller = controller)
    {
        controller = _controller;
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize form data.
    /// </summary>
    public void init()
    {
        #TimeConstants
        
        ResourceCategoryRecId defaultCategory = ResourceCategoryFacade::defaultResourceCategory();
        defaultCategoryId = ResourceCategoryFacade::getId(defaultCategory);

        requestWorkflowEnabled = ResRequestHelper::isWorkflowEnabled();
        showPlannedResourceRequest = true;
        showStaffedResourceRequest = requestWorkflowEnabled;
        currentUserId = curUserId();

        super();

        ResUtil::validateResPerfDataUpgradeStatus();

        formAccessType = element.args().parmEnum();
        if (!requestWorkflowEnabled && formAccessType == ResResourceFulfillmentType::View)
        {
            formAccessType = ResResourceFulfillmentType::Assign;
        }

        FulFillMenu.visible(formAccessType == ResResourceFulfillmentType::Assign);
        RequestTypeGroup.visible(requestWorkflowEnabled);

        if (!controller && element.args().caller())
        {
            controller = element.args().caller() as ResResourceSchedulingController;

            // engagementIDName will be initialized when form launched from project details.
            // engagementIDName will be blank when from launched from main menu "Project management and Accounting > Project resources > Resource fulfillment"
            ResProjTeamController projTeamController = controller.ProjTeamController();
            if (projTeamController)
            {
                engagementIDName =  projTeamController.ProjId() +  ' ' + projTeamController.ProjName();
            }
        }
        else
        {
            controller = ResResourceSchedulingController::construct();
        }

        // initialize availability views
        ResAvailabilityViewSetting viewSetting = ResAvailabilityViewSetting::construct();
        viewSetting.coverage(ResUserSettingCoverage::PlannedResourceFulfillmentView);
        viewSetting.find();

        ResAvailabilityViewContext requiredResourceContext = this.getViewSettingContext(viewSetting);
        ResAvailabilityViewContext availableResourcesContext = this.getViewSettingContext(viewSetting);
        ResResourceFulfillmentView resResourceFulfillmentView = element.getFirstRecordFromResourceFulfillmentQuery();

        requiredResourceContext.resource(resResourceFulfillmentView.ActivityResource);
        utcdatetime startDateTime, endDateTime;
        
        // Close this form if ResRollupCalendarShared does not have sufficient TimeFrame range.
        if (resResourceFulfillmentView)
        {
            startDateTime = resResourceFulfillmentView.startDateTime;
            endDateTime = resResourceFulfillmentView.endDateTime;

            if (!ResUtil::validateRollupCalendarTimeFrameRange(startDateTime, endDateTime, false, element))
            {
                insufficientCalendarRecords = true;
            }
        }

        if (!insufficientCalendarRecords)
        {
            timescale = ResUtil::getRecommendedTimeframeType(startDateTime, endDateTime);
            requiredResourceContext.timescale(timescale);
            availableResourcesContext.timescale(timescale);

            requiredResourceContext.startDateTime(startDateTime);
            requiredResourceContext.endDateTime(endDateTime);
            availableResourcesContext.startDateTime(startDateTime);
            availableResourcesContext.endDateTime(endDateTime);

            RequiredResource.startDateTime(requiredResourceContext.startDateTime());
            RequiredResource.endDateTime(requiredResourceContext.endDateTime());
            RequiredResource.timescale(requiredResourceContext.timescale());
            RequiredResource.controlContext(requiredResourceContext);
            AvailableResources.startDateTime(availableResourcesContext.startDateTime());
            AvailableResources.endDateTime(availableResourcesContext.endDateTime());
            AvailableResources.timescale(availableResourcesContext.timescale());
            AvailableResources.controlContext(availableResourcesContext);

            // initialize other controls
            NavigationList.visible(true);

            searchController = ResAvailabilityViewSearchController::newFromAvailabilityViewControl(AvailableResources);
            resourceCharacteristics = ResCharacteristicsController::construct();
            resourceCharacteristics.searchCriteriaReady += eventhandler(element.applyAdvancedSearchCriteria);
            resourceCharacteristics.requiringEntityType(ResCharacteristicReqEntityType::ActivityResource);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserSelectedRequestLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set user selected <c>ResRequestLine</c> map with ResRequestLine.Hour as key,
    /// and container as value which has [ResRequestLine.RecId, resource rec ID, activity resource rec ID].
    /// </summary>
    /// <param name = "_selectedRequestLineMap">User selected <c>ResRequestLine</c> map.</param>
    /// <returns>User selected <c>ResRequestLine</c> map.</returns>
    public Map getUserSelectedRequestLines(Map _selectedRequestLinesMap = selectedRequestLinesMap)
    {
        selectedRequestLinesMap = _selectedRequestLinesMap;
        return selectedRequestLinesMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getViewSettingContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an availabilityView context applied with specified view settings.
    /// </summary>
    /// <param name = "_viewSetting">View settings object.</param>
    /// <returns>Instance of <c>ResAvailabilityViewContext</c>.</returns>
    private ResAvailabilityViewContext getViewSettingContext(ResAvailabilityViewSetting _viewSetting)
    {
        context = ResAvailabilityViewContext::construct();
        context.showScheduleDescription(_viewSetting.showScheduleDescription());
        context.showRemainingCapacity(_viewSetting.showScheduleCapacity());
        context.capacityAggregation(_viewSetting.capacityAggregation());
        context.timescale(_viewSetting.timescale());

        if (controller)
        {
            context.activity(controller.activity());
        }

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>plannedResourcesFulfilled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes this form due to planned resources are all fulfilled.
    /// </summary>
    private void plannedResourcesFulfilled()
    {
        info("@Res:PlannedResourcesAllFulfilled");
    }

]]></Source>
			</Method>
			<Method>
				<Name>onResourceAssigned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh activity resources list when resource assignment has been completed.
    /// </summary>
    /// <param name = "_eventData">Action completed event data.</param>
    void onResourceAssigned(AVActionCompletedEventData _eventData)
    {
        ResResourceFulfillmentView resourceFulFillmentView = ResResourceFulFillment_DS.cursor();
        str resourceName = resourceFulFillmentView.ResourceName;
        ResResourceFulFillment_DS.research();
        int rows = ResResourceFulFillment_DS.numberOfRowsLoaded();

        if (rows <= 0)
        {
            element.plannedResourcesFulfilled();
        }
        else
        {
            info(strFmt("@Res:PlannedResourceFulfilled", resourceName));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchForResources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for resources.
    /// </summary>
    public void searchForResources()
    {
        searchController.searchByAnyCriteria(SearchString.text());
        searchController.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyAdvancedSearchCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies selected search criteria to available resources view.
    /// </summary>
    void applyAdvancedSearchCriteria()
    {
        ResSearchCriteria searchCriteria = resourceCharacteristics.searchCriteria();
        ResResourceCategorySearchCriteria criteriaItem = searchCriteria.getCriteriaItem(classNum(ResResourceCategorySearchCriteria));
        boolean requiredRoleExists = false;
        str resourceCategoryCriteria;

        if (criteriaItem)
        {
            resourceCategoryCriteria = criteriaItem.getValues();
            Enumerator enumerator = criteriaItem.getCriteriaItemValuesEnumerator();
            while (enumerator.moveNext())
            {
                if (currentCategoryId == enumerator.current())
                {
                    requiredRoleExists = true;
                    break;
                }
            }
        }

        RoleCriteriaRequired.checked(requiredRoleExists);

        searchController.searchCriteria(resourceCharacteristics.searchCriteria());
        searchController.searchByAnyCriteria(SearchString.text());
        searchController.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewSettingsReady</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies selected view settings to resource fulfillment availability views.
    /// </summary>
    /// <param name = "_viewSetting">View setting object.</param>
    void viewSettingsReady(ResAvailabilityViewSetting _viewSetting)
    {
        context = RequiredResource.controlContext();
        ResAvailabilityViewContext arContext = AvailableResources.controlContext();

        boolean hasChanged;
        boolean needsRefresh;

        utcdatetime dateTime;
        dateTime = _viewSetting.startDateTime();
        if (context.startDateTime() != dateTime)
        {
            context.startDateTime(dateTime);
            RequiredResource.startDateTime(dateTime);

            arContext.startDateTime(dateTime);
            AvailableResources.startDateTime(dateTime);

            hasChanged = true;
            needsRefresh = true;
        }

        dateTime = _viewSetting.endDateTime();
        if (context.endDateTime() != dateTime)
        {
            context.endDateTime(dateTime);
            RequiredResource.endDateTime(dateTime);

            arContext.endDateTime(dateTime);
            AvailableResources.endDateTime(dateTime);

            hasChanged = true;
            needsRefresh = true;
        }

        timescale = _viewSetting.timescale();
        if (context.timescale() != timescale)
        {
            context.timescale(timescale);
            RequiredResource.timescale(timescale);
            
            arContext.timescale(timescale);
            AvailableResources.timescale(timescale);

            hasChanged = true;
            needsRefresh = true;
        }

        boolean showContent;
        showContent = _viewSetting.showScheduleDescription();
        if (context.showScheduleDescription() != showContent)
        {
            context.showScheduleDescription(showContent);
            arContext.showScheduleDescription(showContent);

            hasChanged = true;
        }

        showContent = _viewSetting.showScheduleCapacity();
        if (context.showRemainingCapacity() != showContent)
        {
            context.showRemainingCapacity(showContent);
            arContext.showRemainingCapacity(showContent);

            hasChanged = true;
        }

        ResCapacityAggregation aggregation = _viewSetting.capacityAggregation();
        if (context.capacityAggregation() != aggregation)
        {
            context.capacityAggregation(aggregation);
            arContext.capacityAggregation(aggregation);

            hasChanged = true;
            needsRefresh = true;
        }

        if (hasChanged)
        {
            RequiredResource.controlContext(context);
            AvailableResources.controlContext(arContext);
        }

        if (needsRefresh)
        {
            element.clearSelections();
            RequiredResource.refresh();
            AvailableResources.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlVisibilitySetting</Name>
				<Source><![CDATA[
    private void controlVisibilitySetting()
    {
        boolean isWorkflowRequest = ResResourceFulfillment.ResourceRequest;

        FulfillMenu.visible(!isWorkflowRequest && formAccessType == ResResourceFulfillmentType::Assign);
        ViewHeaderHistory.visible(isWorkflowRequest);
        RequestLineWorkflowDropDialog.visible(isWorkflowRequest);

        if (isWorkflowRequest)
        {
            ResourceRequirement.caption("@Res:StaffedResource");
            ResourceFullfilment.collapse();
        }
        else
        {
            ResourceRequirement.caption("@Res:PlannedResource");
            ResourceFullfilment.expand();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResRequestLineFromUserSelection</Name>
				<Source><![CDATA[
    private ResRequestLineRecId getResRequestLineFromUserSelection()
    {
        Map userRequestBookingLinesSelectionMap = new Map(Types::UtcDateTime, Types::Class);
        int previousApprovalStatus = approvalStatusInitialValue;
        boolean returnNoRequestLine = false;
        ResRequestLineRecId earliestResRequestLineRecId;

        // Get user selections from required resource availability view control.
        AvailabilityViewSelections requiredResourceUserSelections = requiredResourceSelections;
        if (requiredResourceUserSelections)
        {
            List requiredResourceSelectionList = requiredResourceUserSelections.getChartItems();
            [returnNoRequestLine, previousApprovalStatus] = element.getResRequestLineFromUserSelectionDetails(
                requiredResourceSelectionList, userRequestBookingLinesSelectionMap, previousApprovalStatus, returnNoRequestLine,
                timeScale, ResResourceFulfillment.Activity, ResResourceFulfillment.ResourceRequest);
        }

        // Get user selections from available resource availability view control.
        AvailabilityViewSelections availableResourceUserSelections = availableResourcesSelections;
        if (availableResourceUserSelections && !returnNoRequestLine)
        {
            List availableResourcesSelectionList = availableResourceUserSelections.getChartItems();
            [returnNoRequestLine, previousApprovalStatus] = element.getResRequestLineFromUserSelectionDetails(
                availableResourcesSelectionList, userRequestBookingLinesSelectionMap, previousApprovalStatus, returnNoRequestLine,
                timeScale, ResResourceFulfillment.Activity, ResResourceFulfillment.ResourceRequest);
        }

        if (!returnNoRequestLine && !userRequestBookingLinesSelectionMap.empty())
        {
            element.getUserSelectedRequestLines(userRequestBookingLinesSelectionMap);
            earliestResRequestLineRecId = element.getEarliestResRequestLineRecId(userRequestBookingLinesSelectionMap);
        }

        return returnNoRequestLine ? 0 : earliestResRequestLineRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResRequestLineFromUserSelectionDetails</Name>
				<Source><![CDATA[
    private container getResRequestLineFromUserSelectionDetails(List _avSelectionList, Map _userRequestLinesSelectionMap,
        ResApprovalStatus _previousApprovalStatus, boolean _returnNoRequestLine, AVTimeframeType _timeScale,
        ActivityRecId _activityRecId, ResRequestRecId _requestRecId)
    {
        Map resourceActivityResourceMap = new Map(Types::Int64, Types::Int64);
        ResApprovalStatus previousApprovalStatus = _previousApprovalStatus;
        boolean returnNoRequestLine = _returnNoRequestLine;

        if (!_avSelectionList.empty())
        {
            ListEnumerator avSelectionListEnum = _avSelectionList.getEnumerator();
            while (avSelectionListEnum.moveNext())
            {
                if (returnNoRequestLine)
                {
                    break;
                }

                ChartItemDataContract avSelectionChartItem = avSelectionListEnum.current();
                utcdatetime startTime = AVUtil::getDateTime(avSelectionChartItem.timelineKey());
                utcdatetime endTime = AVTimeframe::getTimeframe(startTime, _timeScale).end();
                ResourceRecId chartResource = ResUtil::getResourceRecId(avSelectionChartItem.collectionKey());
                activityresourcerecid activityResource;

                if (resourceActivityResourceMap.exists(chartResource))
                {
                    activityResource = resourceActivityResourceMap.lookup(chartResource);
                }
                else
                {
                    // It may return zero if the selected resource is not a team member of this activity.
                    activityResource = ActivityResourceFacade::findByActivityAndResource(_activityRecId, chartResource);
                }

                ResRequestLine requestLines;
                while select RecId, ApprovalStatus, Hour, ReservationType from requestLines
                    where requestLines.Request ==  _requestRecId
                        && requestLines.Hour >= startTime
                        && requestLines.Hour <= endTime
                {
                    if (previousApprovalStatus == approvalStatusInitialValue)
                    {
                        previousApprovalStatus = requestLines.ApprovalStatus;
                    }

                    if (previousApprovalStatus != requestLines.ApprovalStatus)
                    {
                        // Return no request line if user has selected grid elements with different approval status.
                        returnNoRequestLine = true;
                        break;
                    }

                    if (_userRequestLinesSelectionMap.exists(requestLines.Hour))
                    {
                        ResRequestLineSelectionContext requestLineContext = _userRequestLinesSelectionMap.lookup(requestLines.Hour);
                        if (requestLineContext.parmBookingRequestLine() == requestLines.RecId
                            || requestLineContext.parmAssignmentRequestLine() == requestLines.RecId)
                        {
                            // Return no request line because user has selected grid elements with the same time period.
                            returnNoRequestLine = true;
                            break;
                        }
                        else if (requestLines.ReservationType == ResReservationType::Assignment && (!requestLineContext.parmAssignmentRequestLine()))
                        {
                            // This is an assignment record in the request line which record ID has not been added to requestLineContext
                            requestLineContext.parmAssignmentRequestLine(requestLines.RecId);
                        }
                        else
                        {
                            // This is a booking record in the request line which record ID has not been added to requestLineContext
                            requestLineContext.parmBookingRequestLine(requestLines.RecId);
                        }

                        _userRequestLinesSelectionMap.remove(requestLines.Hour);
                        _userRequestLinesSelectionMap.insert(requestLines.Hour, requestLineContext);
                    }
                    else
                    {
                        ResRequestLineSelectionContext requestLineContext = ResRequestLineSelectionContext::construct();
                        if (requestLines.reservationType == ResReservationType::Assignment)
                        {
                            requestLineContext.parmAssignmentRequestLine(requestLines.RecId);
                        }
                        else
                        {
                            requestLineContext.parmBookingRequestLine(requestLines.RecId);
                        }
                        requestLineContext.parmResource(chartResource);
                        requestLineContext.parmActivityResource(activityResource);
                        _userRequestLinesSelectionMap.insert(requestLines.Hour, requestLineContext);
                    }
                }
            }
        }

        return [returnNoRequestLine, previousApprovalStatus];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEarliestResRequestLineRecId</Name>
				<Source><![CDATA[
    private ResRequestLineRecId getEarliestResRequestLineRecId(Map _userRequestLinesSelectionMap)
    {
        MapEnumerator requestLinesMapEnum = _userRequestLinesSelectionMap.getEnumerator();
        utcdatetime earliestDateTime = DateTimeUtil::maxValue();
        ResRequestLineSelectionContext requestLineContext;

        while (requestLinesMapEnum.moveNext())
        {
            if (requestLinesMapEnum.currentKey() < earliestDateTime)
            {
                earliestDateTime = requestLinesMapEnum.currentKey();
                requestLineContext = requestLinesMapEnum.currentValue();
            }
        }

        return requestLineContext.parmBookingRequestLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearSelections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear all availability view control selections.
    /// </summary>
    private void clearSelections()
    {
        RequiredResource.clearSelections();
        AvailableResources.clearSelections();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstRecordFromResourceFulfillmentQuery</Name>
				<Source><![CDATA[
    private ResResourceFulfillmentView getFirstRecordFromResourceFulfillmentQuery()
    {
        QueryRun queryRun = new QueryRun(element.getResourceFulfillmentQuery());

        ResResourceFulfillmentView resourceFulFillment;

        if (queryRun.next())
        {
            resourceFulFillment = queryRun.getNo(1);
        }

        return resourceFulFillment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceFulfillmentQuery</Name>
				<Source><![CDATA[
    private Query getResourceFulfillmentQuery()
    {
        Query query = new Query();
        QueryBuildDataSource dataSource = query.addDataSource(tableNum(ResResourceFulfillmentView));
        dataSource.addOrderByField(fieldNum(ResResourceFulfillmentView, StartDateTime), SortOrder::Ascending);

        dataSource.addGroupByField(fieldNum(ResResourceFulfillmentView, Activity));
        dataSource.addGroupByField(fieldNum(ResResourceFulfillmentView, ActivityResource));
        dataSource.addGroupByField(fieldNum(ResResourceFulfillmentView, ResourceRequest));
        dataSource.addGroupByField(fieldNum(ResResourceFulfillmentView, RequestId));
        dataSource.addGroupByField(fieldNum(ResResourceFulfillmentView, Capacity));
        dataSource.addGroupByField(fieldNum(ResResourceFulfillmentView, StartDateTime));
        dataSource.addGroupByField(fieldNum(ResResourceFulfillmentView, EndDateTime));
        dataSource.addGroupByField(fieldNum(ResResourceFulfillmentView, CustAccount));
        dataSource.addGroupByField(fieldNum(ResResourceFulfillmentView, ProjectManager));
        dataSource.addGroupByField(fieldNum(ResResourceFulfillmentView, ResourceName));
        dataSource.addGroupByField(fieldNum(ResResourceFulfillmentView, RoleId));
        dataSource.addGroupByField(fieldNum(ResResourceFulfillmentView, ActivityType));
        dataSource.addGroupByField(fieldNum(ResResourceFulfillmentView, EngagementId));
        dataSource.addGroupByField(fieldNum(ResResourceFulfillmentView, EngagementName));

        dataSource.addSelectionField(fieldNum(ResResourceFulfillmentView, Activity));
        dataSource.addSelectionField(fieldNum(ResResourceFulfillmentView, ActivityResource));
        dataSource.addSelectionField(fieldNum(ResResourceFulfillmentView, ResourceRequest));
        dataSource.addSelectionField(fieldNum(ResResourceFulfillmentView, RequestId));
        dataSource.addSelectionField(fieldNum(ResResourceFulfillmentView, Capacity));
        dataSource.addSelectionField(fieldNum(ResResourceFulfillmentView, StartDateTime));
        dataSource.addSelectionField(fieldNum(ResResourceFulfillmentView, EndDateTime));
        dataSource.addSelectionField(fieldNum(ResResourceFulfillmentView, CustAccount));
        dataSource.addSelectionField(fieldNum(ResResourceFulfillmentView, ProjectManager));
        dataSource.addSelectionField(fieldNum(ResResourceFulfillmentView, ResourceName));
        dataSource.addSelectionField(fieldNum(ResResourceFulfillmentView, RoleId));
        dataSource.addSelectionField(fieldNum(ResResourceFulfillmentView, ActivityType));
        dataSource.addSelectionField(fieldNum(ResResourceFulfillmentView, EngagementId));
        dataSource.addSelectionField(fieldNum(ResResourceFulfillmentView, EngagementName));

        ActivityRecId activityRecId;

        if (controller)
        {
            activityRecId = controller.activity();
        }

        if (activityRecId)
        {
            // In case this form is opened from the project details form, a specific activity should be setup.
            dataSource.addRange(fieldNum(ResResourceFulfillmentView, Activity)).value(queryValue(activityRecId));
        }

        if (formAccessType == ResResourceFulfillmentType::Assign)
        {
            if (showStaffedResourceRequest && showPlannedResourceRequest)
            {
                QueryBuildRange qbr = dataSource.addRange(fieldNum(ResResourceFulfillmentView, ApproverUserId));
                qbr.value(strFmt('(%1 == "%2") || (%3 == 0)',
                    fieldStr(ResResourceFulfillmentView, ApproverUserId),
                    queryValue(currentUserId),
                    fieldStr(ResResourceFulfillmentView, ResourceRequest)));

            }
            else if (showStaffedResourceRequest)
            {
                dataSource.addRange(fieldNum(ResResourceFulfillmentView, ApproverUserId)).value(queryValue(currentUserId));
                dataSource.addRange(fieldNum(ResResourceFulfillmentView, ResourceRequest)).value(SysQuery::valueNot(0));
            }
            else
            {
                dataSource.addRange(fieldNum(ResResourceFulfillmentView, ResourceRequest)).value(queryValue(0));
            }
        }
        else if (formAccessType == ResResourceFulfillmentType::View)
        {
            if (!activityRecId)
            {
                // In the case of specific activity is not defined, then this is not opened for any specific project.
                // Then it should only display requests which matches the originator.
                dataSource.addRange(fieldNum(ResResourceFulfillmentView, OriginatorUserId)).value(queryValue(currentUserId));
            }

            if (showStaffedResourceRequest && !showPlannedResourceRequest)
            {
                dataSource.addRange(fieldNum(ResResourceFulfillmentView, ResourceRequest)).value(SysQuery::valueNot(0));
            }
            else if (!showStaffedResourceRequest && showPlannedResourceRequest)
            {
                dataSource.addRange(fieldNum(ResResourceFulfillmentView, ResourceRequest)).value(queryValue(0));
            }
        }
        
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>analysisAvailableResourcesControlSelection</Name>
				<Source><![CDATA[
    private void analysisAvailableResourcesControlSelection(AvailabilityViewSelections _selections)
    {
        const str collectionKeyDelimiter = '-';

        ListEnumerator scheduleEnum = _selections.getChartItems().getEnumerator();
        ListEnumerator enumerator = scheduleEnum;
        Set            resourceSet = new Set(Types::String);

        while (enumerator.moveNext())
        {
            ChartItemDataContract selection = enumerator.current();

            ActivityResourceId collectionKey = selection.collectionKey();
            resourceSet.add(collectionKey);

            container keys = str2con(collectionKey, collectionKeyDelimiter);
            selectedStaffedResource = str2Int64(conPeek(keys, 2));
        }

        if (resourceSet.empty())
        {
            noStaffedResourceIsSelected = true;
            moreThanOneStaffedResourceIsSelected = false;
        }
        else if (resourceSet.elements() != 1)
        {
            moreThanOneStaffedResourceIsSelected = true;
            noStaffedResourceIsSelected = false;
        }
        else
        {
            noStaffedResourceIsSelected = false;
            moreThanOneStaffedResourceIsSelected = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAvailableResourcesControlSelection</Name>
				<Source><![CDATA[
    private boolean validateAvailableResourcesControlSelection()
    {
        boolean allowFulfillment;
        if (noStaffedResourceIsSelected)
        {
            warning("@Res:SelectResourceWarning");
        }
        else if (moreThanOneStaffedResourceIsSelected)
        {
            warning("@Res:MoreThanOneResourceSelectedWarning");
        }
        else
        {
            allowFulfillment = true;
        }

        return allowFulfillment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate there are planned resources to be fulfilled.
    /// </summary>
    public void run()
    {
        super();

        if (!insufficientCalendarRecords)
        {
            int rows = ResResourceFulfillment_DS.numberOfRowsLoaded();
            if (rows <= 0)
            {
                element.plannedResourcesFulfilled();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>ResResourceFulfillment</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes query for resource requests
        /// </summary>
        public void executeQuery()
        {
            this.query(element.getResourceFulfillmentQuery());

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initialize fulfillment requirement title.
        /// </summary>
        /// <returns>Int record index.</returns>
        public int active()
        {
            #TimeConstants
            int ret = super();
            if (ret)
            {
                element.clearSelections();
                element.controlVisibilitySetting();
                ResResourceReservationDetails::removeReservationDetailsTable(
                    ReservationDetails, ReservationDetails_ds, ResReservationDetailsType::AllTypes);

                // initialize requirement title
                ResRequestResourceTitle title = this.getRequestResourceTitle(ResResourceFulfillment);
                Requirement.text(title);
                requestedResource = ResResourceFulfillment.ActivityResource;

                // configure resource requirement
                utcdatetime start = ResResourceFulfillment.StartDateTime;
                utcdatetime end = ResResourceFulfillment.EndDateTime;
                timescale = ResUtil::getRecommendedTimeframeType(start, end);
                ResResourceName resourceName = ResResourceFulfillment.ResourceName;
                requestedResourceName = resourceName;

                context = RequiredResource.controlContext();
                context = context ? context : ResAvailabilityViewContext::construct();

                context.resource(ResResourceFulfillment.ActivityResource);
                context.timescale(timescale);
                context.startDateTime(start);
                context.endDateTime(end);
                context.request(ResResourceFulfillment.ResourceRequest);

                RequiredResource.startDateTime(context.startDateTime());
                RequiredResource.endDateTime(context.endDateTime());
                RequiredResource.timescale(context.timescale());
                boolean needsRefresh = RequiredResource.controlContext() && true;
                RequiredResource.controlContext(context);

                if (needsRefresh)
                {
                    RequiredResource.refresh();
                }

                // configure available resources
                context = AvailableResources.controlContext();
                context = context ? context : ResAvailabilityViewContext::construct();

                if (!ResResourceFulfillment.RequestId)
                {
                    context.activity(ResResourceFulfillment.Activity);
                }
                context.timescale(timescale);
                context.startDateTime(start);
                context.endDateTime(end);

                AvailableResources.startDateTime(context.startDateTime());
                AvailableResources.endDateTime(context.endDateTime());
                AvailableResources.timescale(context.timescale());
                AvailableResources.controlContext(context);

                resourceCharacteristics.requiringEntity(ResResourceFulfillment.ActivityResource);
                resourceCharacteristics.searchCriteria(ResSearchCriteria::construct());
                resourceCharacteristics.retrieveRequirements();
                searchController.searchCriteria(resourceCharacteristics.searchCriteria());

                currentCategoryId = ResourceCategoryFacade::getId(ActivityResourceFacade::getResourceCategory(ResResourceFulfillment.ActivityResource));
                RoleCriteriaRequired.checked(true);
                RoleCriteriaRequired.visible(currentCategoryId != defaultCategoryId);

                if (RoleCriteriaRequired.checked() && currentCategoryId != defaultCategoryId)
                {
                    searchController.searchByResourceCategory(currentCategoryId);
                }
                else
                {
                    searchController.searchByResourceCategory("");
                }

                if (needsRefresh)
                {
                    searchController.refresh();
                }
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>getCustomerName</Name>
						<Source><![CDATA[
        /// <summary>
        /// Get customer name.
        /// </summary>
        /// <param name = "_record"><c>ResResourceFulfillmentView</c> record.</param>
        /// <returns>Customer name.</returns>
        display CustName getCustomerName(ResResourceFulfillmentView _record)
        {
            return CustTable::find(_record.CustAccount).name();
        }

]]></Source>
					</Method>
					<Method>
						<Name>getRequestResourceTitle</Name>
						<Source><![CDATA[
        /// <summary>
        /// Get resource request title.  For workflow request, it will return it with the request ID.
        /// </summary>
        /// <param name = "_record"><c>ResResourceFulfillmentView</c> record.</param>
        /// <returns>Resource request title.</returns>
        display ResRequestResourceTitle getRequestResourceTitle(ResResourceFulfillmentView _record)
        {
            const str requestResourceTitleString = '%1 - %2';
            ResRequestResourceTitle requestResourceTitle;

            if (_record.RequestId)
            {
                requestResourceTitle = strFmt(requestResourceTitleString, _record.ResourceName, _record.RequestId);
            }
            else
            {
                requestResourceTitle = _record.ResourceName;
            }
            return requestResourceTitle;
        }

]]></Source>
					</Method>
					<Method>
						<Name>getStartDate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Get requested resource start date time.
        /// </summary>
        /// <param name = "_record"><c>ResResourceFulFillmentView</c> record.</param>
        /// <returns>Start date.</returns>
        display str getStartDate(ResResourceFulFillmentView _record)
        {
            str detailStartDateTime;

            date startDate = datetimeUtil::date(_record.StartDateTime);

            return date2StrUsr(startDate, DateFlags::FormatAll);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>ReservationDetails</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        /// <summary>
        /// To Enable/Disable confirm and cancel buttons for selected record.
        /// </summary>
        /// <returns></returns>
        public int active()
        {
            int ret;

            ret = super();

            boolean currentEngagementSelected = ResResourceReservationDetails::isOnlyCurrentEngagementSelected(ReservationDetails_ds, engagementIDName);

            Confirm.enabled(currentEngagementSelected && !ResResourceReservationDetails::isWorkflowRecordSelected(ReservationDetails_ds));

            if (!requestWorkflowEnabled)
            {
                Cancel.enabled(currentEngagementSelected);
            }
            else
            {
                Cancel.enabled(currentEngagementSelected && !ResResourceReservationDetails::isWorkflowRecordSelected(ReservationDetails_ds));
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>ResRequestLine</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes query for resource request lines.
        /// </summary>
        public void executeQuery()
        {
            ResResourceRequestRecId earliestResRequestLineRecId = element.getResRequestLineFromUserSelection();

            QueryBuildDataSource dataSource = this.query().dataSourceTable(tableNum(ResRequestLine));
            SysQuery::findOrCreateRange(dataSource, fieldnum(ResRequestLine, RecId)).value(queryValue(earliestResRequestLineRecId));
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>ResRequest</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            ResRequestRecId request = ResResourceFulfillment.ResourceRequest;

            QueryBuildDataSource dataSource = this.query().dataSourceTable(tableNum(ResRequest));
            SysQuery::findOrCreateRange(dataSource, fieldnum(ResRequest, RecId)).value(queryValue(request));
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>FulfillRequest</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Assign the selected resource to the generic resource.
        /// </summary>
        public void clicked()
        {
            super();
            
            if (element.validateAvailableResourcesControlSelection())
            {
                ResPlannedResourcesDataController dataController = ResPlannedResourcesDataController::construct(AvailableResources);
                dataController.actionCompleted += eventhandler(element.onResourceAssigned);
                dataController.assignResource(requestedResource);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EditFulFillment</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Assign the selected resource to the generic resource.
        /// </summary>
        public void clicked()
        {
            super();
    
            if (!ActivityResourceFacade::hasReservation(requestedResource))
            {
                warning("@Res:EditFulfillmentCannotBeLaunched");
            }
            else
            {
                if (element.validateAvailableResourcesControlSelection())
                {
                    ResPlannedResourcesDataController dataController = ResPlannedResourcesDataController::construct(AvailableResources);
                    dataController.actionCompleted += eventhandler(element.onResourceAssigned);
                    dataController.showEditFulfillmentForm(requestedResource, selectedStaffedResource);
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ClearSelections</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Clear all control selections.
        /// </summary>
        public void clicked()
        {
            super();
            element.clearSelections();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Refresh</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Refresh the availability view contents.
        /// </summary>
        public void clicked()
        {
            super();
            if (requiredResourceSelections || availableResourcesSelections)
            {
                int selectedRecord = ReservationDetails_ds.getPosition();
                if (requiredResourceSelections)
                {
                    RequiredResource.selections(requiredResourceSelections);
                }
                else if (availableResourcesSelections)
                {
                    AvailableResources.selections(availableResourcesSelections);
                }
                ReservationDetails_ds.setPosition(selectedRecord);
            }
            element.clearSelections();
            RequiredResource.refreshAll();
            AvailableResources.refreshAll();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OpenViewSettings</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Opens the planned resource assignment view settings form.
        /// </summary>
        public void clicked()
        {
            super();

            ResAvailabilityViewSetting viewSetting = ResAvailabilityViewSetting::construct();
            context = RequiredResource.controlContext();

            viewSetting.startDateTime(RequiredResource.startDateTime());
            viewSetting.endDateTime(RequiredResource.endDateTime());
            viewSetting.timescale(context.timescale());
            viewSetting.capacityToggleDescription("@SYS4008832");
            viewSetting.showScheduleCapacity(context.showRemainingCapacity());
            viewSetting.showScheduleDescription(context.showScheduleDescription());
            viewSetting.capacityAggregation(context.capacityAggregation());

            viewSetting.coverage(ResUserSettingCoverage::PlannedResourceFulfillmentView);
            viewSetting.selectionsReady += eventhandler(element.viewSettingsReady);
            viewSetting.showForm();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RequestTypePicker</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        public int selectionChange()
        {
            // Refresh datasource according to user selection.
            int ret;

            ret = super();

            switch (this.selection())
            {
                case ResFulfillmentType::PlannedResource:
                    showPlannedResourceRequest = true;
                    showStaffedResourceRequest = false;
                    break;
                case ResFulfillmentType::StaffedResource:
                    showPlannedResourceRequest = false;
                    showStaffedResourceRequest = true;
                    break;
                default:
                    showPlannedResourceRequest = true;
                    showStaffedResourceRequest = true;
                    break;
            }

            ResResourceFulfillment_DS.executeQuery();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RequiredResource</Name>
				<Type>Custom</Type>
				<Methods>
					<Method>
						<Name>selections</Name>
						<Source><![CDATA[
        /// <summary>
        /// Update resource reservation details grid upon user updating chart item selection.
        /// </summary>
        /// <param name = "_selections">Chart item selections.</param>
        /// <returns>Chart item selections.</returns>
        public AvailabilityViewSelections selections(AvailabilityViewSelections _selections)
        {
            boolean isWorkflowRequest = ResResourceFulfillment.ResourceRequest;
            AvailabilityViewSelections avSelections = super (_selections);
            requiredResourceSelections = avSelections;
            if (showStaffedResourceRequest && isWorkflowRequest)
            {
                ResRequestLine_DS.executeQuery();
            }
            ResResourceReservationDetails::updateReservationDetailsTable(_selections, context.timescale(),
                ReservationDetails, ReservationDetails_ds, ResReservationDetailsType::RequestResource);
            return avSelections;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SearchString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Triggers searching of resources.
        /// </summary>
        /// <returns>1 when the operation is successful. Otherwise, 0.</returns>
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                element.clearSelections();
                element.searchForResources();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Search</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Searches for resources that matches the specified criteria.
        /// </summary>
        public void clicked()
        {
            super();
            element.clearSelections();
            element.searchForResources();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AdvancedSearch</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Opens advanced search criteria form.
        /// </summary>
        public void clicked()
        {
            super();
            element.clearSelections();
            resourceCharacteristics.showForm();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RoleCriteriaRequired</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Toggles resource category requirement in resource search.
        /// </summary>
        public void clicked()
        {
            super();

            ResSearchCriteria searchCriteria = resourceCharacteristics.searchCriteria();
            ResSearchCriteriaItem criteriaItem = searchCriteria.getCriteriaItem(classNum(ResResourceCategorySearchCriteria));
            str criteriaValues;
            boolean isChecked = this.checked();

            if (criteriaItem)
            {
                if (isChecked && currentCategoryId != defaultCategoryId)
                {
                    criteriaItem.addValue(currentCategoryId);
                }
                else
                {
                    criteriaItem.removeValue(currentCategoryId);
                }

                criteriaValues = criteriaItem.getValues();
            }
            else
            {
                if (isChecked && currentCategoryId != defaultCategoryId)
                {
                    criteriaValues = currentCategoryId;
                }
            }

            element.clearSelections();
            searchController.searchByResourceCategory(criteriaValues);
            searchController.refresh();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AvailableResources</Name>
				<Type>Custom</Type>
				<Methods>
					<Method>
						<Name>getDataController</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets the availabilityView data controller of the control.
        /// </summary>
        /// <returns>Instance of <c>ResourceAvailabilityDataController</c>.</returns>
        public IAvailabilityViewDataController getDataController()
        {
            IAvailabilityViewDataController ret = super();

            if (ret)
            {
                IAVCollectionController collectionProvider = ResResourceAvailabilityCollection::construct();
                collectionProvider.control(this);
                ret.collectionController(collectionProvider);
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>selections</Name>
						<Source><![CDATA[
        /// <summary>
        /// Update resource reservation details grid upon user updating chart item selection.
        /// </summary>
        /// <param name = "_selections">Chart item selections.</param>
        /// <returns>Chart item selections.</returns>
        public AvailabilityViewSelections selections(AvailabilityViewSelections _selections)
        {
            boolean isWorkflowRequest = ResResourceFulfillment.ResourceRequest;
            AvailabilityViewSelections avSelections = super (_selections);
            availableResourcesSelections = avSelections;
            if (showStaffedResourceRequest && isWorkflowRequest)
            {
                ResRequestLine_DS.executeQuery();
            }
            ResResourceReservationDetails::updateReservationDetailsTable(_selections, context.timescale(), ReservationDetails,
                ReservationDetails_ds, ResReservationDetailsType::AvailableResources);

            element.analysisAvailableResourcesControlSelection(_selections);

            return avSelections;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Cancel</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Cancel resource reservation according to user selections.
        /// </summary>
        public void clicked()
        {
            super();

            ResResourceReservationDetails resourceReservation = new ResResourceReservationDetails(AvailableResources);
            resourceReservation.cancelOperationV2(ReservationDetails, ReservationDetails_ds, context.timescale());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Confirm</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Confirm resource soft reservation according to user selections.
        /// </summary>
        public void clicked()
        {
            super();

            ResResourceReservationDetails resourceReservation = new ResResourceReservationDetails(AvailableResources);
            resourceReservation.confirmOperationV2(ReservationDetails, ReservationDetails_ds, context.timescale());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>ResResourceFulfillment</Name>
			<Table>ResResourceFulfillmentView</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Activity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActivityResource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActivityType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApproverUserId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Capacity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EngagementId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EngagementName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginatorUserId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjectManager</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequestId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceRequest</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RoleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StartDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ReservationDetails</Name>
			<Table>ResTmpResourceReservationDetails</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>EndTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EngagementIDName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EngagementType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReservationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReservedHours</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StartTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaskName</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ResRequestLine</Name>
			<Table>ResRequestLine</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Activity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActivityResource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApprovalStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssignedResource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Day</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>End</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HalfYear</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Hour</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Month</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalRequestedResource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Quarter</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Request</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReservationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Start</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Week</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ResRequest</Name>
			<Table>ResRequest</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ApprovalStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequestId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>ResResourceFulfillment</JoinSource>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@Res:FulfillPlannedResource</Caption>
		<Pattern xmlns="">DetailsMaster</Pattern>
		<PatternVersion xmlns="">1.4</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">DetailsFormMaster</Style>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<WindowType xmlns="">ListPage</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>NavigationView</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>RequestedResourceDetails</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>ResRequestedResourcePreviewDisplayMenuItem</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
								<NormalImage>ContactInfo</NormalImage>
								<Text>@Res:RequestDetails</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ViewHeaderHistory</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<DataSource>ResRequest</DataSource>
								<MenuItemName>WorkflowViewHistory</MenuItemName>
								<MenuItemType>Action</MenuItemType>
								<NeedsRecord>Yes</NeedsRecord>
								<Text>@Res:ViewRequestHistory</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>Execute</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>FulfillMenu</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>FulfillRequest</Name>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@Res:Fulfill</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>EditFulFillment</Name>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@Res:EditFulfillment</Text>
									</AxFormControl>
								</Controls>
								<NormalImage>Assign</NormalImage>
								<Text>@Res:FulfillPlannedResourceRequest</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ClearSelections</Name>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<NormalImage>ClearSelection</NormalImage>
								<Text>@Res:ClearSelections</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>View</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>Refresh</Name>
								<HelpText>@Res:RefreshResourceAvailabilityView</HelpText>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<NormalImage>Sync</NormalImage>
								<Text>@Res:ResourceGridRefresh</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>OpenViewSettings</Name>
								<HelpText>@Res:ViewSettingsHelpText</HelpText>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<NormalImage>View</NormalImage>
								<Text>@Res:ViewSettings</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>NavigationList</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ExtendedStyle>group_resRequestLines</ExtendedStyle>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<Visible>No</Visible>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>NavigationListFilter</Name>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>RequestedResources</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>RequestTypeGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>RequestTypePicker</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ComboBox</Type>
								<FormControlExtension
									i:nil="true" />
								<EnumType>ResFulfillmentType</EnumType>
								<ShowLabel>No</ShowLabel>
								<Items />
							</AxFormControl>
						</Controls>
						<FrameType>None</FrameType>
						<Style>CustomFilter</Style>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>RequestedResources</Name>
						<AllowEdit>No</AllowEdit>
						<Type>Grid</Type>
						<WidthMode>SizeToContent</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ResourceTitle</Name>
								<AllowEdit>No</AllowEdit>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>getRequestResourceTitle</DataMethod>
								<DataSource>ResResourceFulfillment</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ResResourceFulfillment_EngagementName</Name>
								<AllowEdit>No</AllowEdit>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>EngagementName</DataField>
								<DataSource>ResResourceFulfillment</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>StartDate</Name>
								<AllowEdit>No</AllowEdit>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>getStartDate</DataMethod>
								<DataSource>ResResourceFulfillment</DataSource>
								<Label>@SYS2168</Label>
							</AxFormControl>
						</Controls>
						<DataSource>ResResourceFulfillment</DataSource>
						<MultiSelect>No</MultiSelect>
						<ShowRowLabels>No</ShowRowLabels>
						<Style>List</Style>
					</AxFormControl>
				</Controls>
				<FrameType>None</FrameType>
				<Style>SidePanel</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>FulfillmentControls</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ResourceRequirementsDetail</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>RequirementTitle</Name>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Requirement</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Skip>Yes</Skip>
										<Type>String</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@Res:ResourceName</Label>
										<ShowLabel>No</ShowLabel>
										<Style>TitleField</Style>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
								<FrameType>None</FrameType>
								<Style>DetailTitleContainer</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormTabControl">
								<Name>RequirementDetails</Name>
								<Type>Tab</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormTabPageControl">
										<Name>ResourceRequirement</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Pattern>Custom</Pattern>
										<Type>TabPage</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormActionPaneControl">
												<Name>ResourceRequirementActionPane</Name>
												<Type>ActionPane</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonGroupControl">
														<Name>ResourceRequirementWorkflowGroup</Name>
														<Type>ButtonGroup</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormDropDialogButtonControl">
																<Name>RequestLineWorkflowDropDialog</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>DropDialogButton</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataSource>ResRequestLine</DataSource>
																<MenuItemName>ResWorkflowLineDropDialogDisplayMenu</MenuItemName>
																<MultiSelect>No</MultiSelect>
																<NeedsRecord>Yes</NeedsRecord>
															</AxFormControl>
														</Controls>
													</AxFormControl>
												</Controls>
												<Style>Strip</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>Legend</Name>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormImageControl">
														<Name>AvailableIcon</Name>
														<ExtendedStyle>image_Available</ExtendedStyle>
														<Skip>Yes</Skip>
														<Type>Image</Type>
														<FormControlExtension
															i:nil="true" />
														<Label>@Res:LegendAvailable</Label>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStaticTextControl">
														<Name>AvailableLabel</Name>
														<Skip>Yes</Skip>
														<Type>StaticText</Type>
														<FormControlExtension
															i:nil="true" />
														<Text>@Res:LegendAvailable</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormImageControl">
														<Name>PartiallyAvailableIcon</Name>
														<ExtendedStyle>image_PartiallyAvailable</ExtendedStyle>
														<Skip>Yes</Skip>
														<Type>Image</Type>
														<FormControlExtension
															i:nil="true" />
														<Label>@Res:LegendPartiallyAvailable</Label>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStaticTextControl">
														<Name>PartiallyAvailableLabel</Name>
														<Skip>Yes</Skip>
														<Type>StaticText</Type>
														<FormControlExtension
															i:nil="true" />
														<Text>@Res:LegendPartiallyAvailable</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormImageControl">
														<Name>BookedIcon</Name>
														<ExtendedStyle>image_Booked</ExtendedStyle>
														<Skip>Yes</Skip>
														<Type>Image</Type>
														<FormControlExtension
															i:nil="true" />
														<Label>@Res:LegendBooked</Label>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStaticTextControl">
														<Name>BookedLabel</Name>
														<Skip>Yes</Skip>
														<Type>StaticText</Type>
														<FormControlExtension
															i:nil="true" />
														<Text>@Res:LegendBooked</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormImageControl">
														<Name>OverbookedIcon</Name>
														<ExtendedStyle>image_Overbooked</ExtendedStyle>
														<Skip>Yes</Skip>
														<Type>Image</Type>
														<FormControlExtension
															i:nil="true" />
														<Label>@Res:LegendOverbooked</Label>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStaticTextControl">
														<Name>OverbookedLabel</Name>
														<Skip>Yes</Skip>
														<Type>StaticText</Type>
														<FormControlExtension
															i:nil="true" />
														<Text>@Res:LegendOverbooked</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormImageControl">
														<Name>UnavailableIcon</Name>
														<ExtendedStyle>image_Unavailable</ExtendedStyle>
														<Skip>Yes</Skip>
														<Type>Image</Type>
														<FormControlExtension
															i:nil="true" />
														<Label>@Res:LegendUnavailable</Label>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStaticTextControl">
														<Name>UnavailableLabel</Name>
														<Skip>Yes</Skip>
														<Type>StaticText</Type>
														<FormControlExtension
															i:nil="true" />
														<Text>@Res:LegendUnavailable</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormImageControl">
														<Name>SoftbookedIcon</Name>
														<ExtendedStyle>image_gridIcon</ExtendedStyle>
														<Skip>Yes</Skip>
														<Type>Image</Type>
														<FormControlExtension
															i:nil="true" />
														<Label>@Res:SoftReservedOrRequested</Label>
														<NormalImage>Tag</NormalImage>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStaticTextControl">
														<Name>SoftbookedLabel</Name>
														<Skip>Yes</Skip>
														<Type>StaticText</Type>
														<FormControlExtension
															i:nil="true" />
														<Text>@Res:SoftReservedOrRequested</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>HorizontalRight</ArrangeMethod>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>RequirementContent</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Height>130</Height>
												<HeightMode>Manual</HeightMode>
												<Type>Group</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl>
														<Name>RequiredResource</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<FormControlExtension>
															<Name>AvailabilityView</Name>
															<ExtensionComponents>
																<AxFormControlExtensionComponent xmlns=""
																	i:type="AxFormControlExtensionComponentLeaf">
																	<Name>Collection</Name>
																	<ComponentType>AvailabilityViewBuildCollection</ComponentType>
																	<IsSystem>true</IsSystem>
																	<ExtensionProperties>
																		<AxFormControlExtensionProperty>
																			<Name>CollectionKey</Name>
																			<Type>ExtendedDataType</Type>
																			<TypeName>FieldName</TypeName>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>TemplateId</Name>
																			<Type>Enum</Type>
																			<TypeName>CollectionTemplates</TypeName>
																			<Value>FlatList</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>Title</Name>
																			<Type>String</Type>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>WidthValue</Name>
																			<Type>Int32</Type>
																			<Value>0</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>WidthMode</Name>
																			<Type>Enum</Type>
																			<TypeName>FormWidth</TypeName>
																			<Value>Auto</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>DataSource</Name>
																			<Type>ExtendedDataType</Type>
																			<TypeName>TableName</TypeName>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>ItemLayout</Name>
																			<Type>String</Type>
																			<Value>ResourceCard</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>SelectionType</Name>
																			<Type>Enum</Type>
																			<TypeName>AVSelectionType</TypeName>
																			<Value>Single</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>addMoreContent</Name>
																			<Type>Enum</Type>
																			<TypeName>boolean</TypeName>
																			<Value>False</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>rows</Name>
																			<Type>Int32</Type>
																			<Value>1</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>topBoundaryValue</Name>
																			<Type>Int32</Type>
																			<Value>0</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>topBoundaryType</Name>
																			<Type>Enum</Type>
																			<TypeName>AVBoundaryType</TypeName>
																			<Value>Auto</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>bottomBoundaryValue</Name>
																			<Type>Int32</Type>
																			<Value>0</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>bottomBoundaryType</Name>
																			<Type>Enum</Type>
																			<TypeName>AVBoundaryType</TypeName>
																			<Value>Auto</Value>
																		</AxFormControlExtensionProperty>
																	</ExtensionProperties>
																</AxFormControlExtensionComponent>
																<AxFormControlExtensionComponent xmlns=""
																	i:type="AxFormControlExtensionComponentComposite">
																	<Name>CollectionFields</Name>
																	<ExtensionComponents />
																</AxFormControlExtensionComponent>
																<AxFormControlExtensionComponent xmlns=""
																	i:type="AxFormControlExtensionComponentLeaf">
																	<Name>Timeline</Name>
																	<ComponentType>AvailabilityViewBuildTimeline</ComponentType>
																	<IsSystem>true</IsSystem>
																	<ExtensionProperties>
																		<AxFormControlExtensionProperty>
																			<Name>TemplateId</Name>
																			<Type>Enum</Type>
																			<TypeName>TimelineTemplates</TypeName>
																			<Value>PointInTime</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>HeightValue</Name>
																			<Type>Int32</Type>
																			<Value>0</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>HeightMode</Name>
																			<Type>Enum</Type>
																			<TypeName>FormHeight</TypeName>
																			<Value>Auto</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>DataSource</Name>
																			<Type>ExtendedDataType</Type>
																			<TypeName>TableName</TypeName>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>ItemLayout</Name>
																			<Type>String</Type>
																			<Value>TimeframeHTM</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>SelectionType</Name>
																			<Type>Enum</Type>
																			<TypeName>AVSelectionType</TypeName>
																			<Value>None</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>timelineKey</Name>
																			<Type>ExtendedDataType</Type>
																			<TypeName>FieldName</TypeName>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>addMoreContent</Name>
																			<Type>Enum</Type>
																			<TypeName>boolean</TypeName>
																			<Value>False</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>columns</Name>
																			<Type>Int32</Type>
																			<Value>5</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>leftBoundaryValue</Name>
																			<Type>Int32</Type>
																			<Value>0</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>leftBoundaryType</Name>
																			<Type>Enum</Type>
																			<TypeName>AVBoundaryType</TypeName>
																			<Value>Auto</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>rightBoundaryValue</Name>
																			<Type>Int32</Type>
																			<Value>0</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>rightBoundaryType</Name>
																			<Type>Enum</Type>
																			<TypeName>AVBoundaryType</TypeName>
																			<Value>Auto</Value>
																		</AxFormControlExtensionProperty>
																	</ExtensionProperties>
																</AxFormControlExtensionComponent>
																<AxFormControlExtensionComponent xmlns=""
																	i:type="AxFormControlExtensionComponentComposite">
																	<Name>TimelineFields</Name>
																	<ExtensionComponents />
																</AxFormControlExtensionComponent>
																<AxFormControlExtensionComponent xmlns=""
																	i:type="AxFormControlExtensionComponentLeaf">
																	<Name>Chart</Name>
																	<ComponentType>AvailabilityViewBuildChart</ComponentType>
																	<IsSystem>true</IsSystem>
																	<ExtensionProperties>
																		<AxFormControlExtensionProperty>
																			<Name>CollectionKey</Name>
																			<Type>ExtendedDataType</Type>
																			<TypeName>FieldName</TypeName>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>TimelineKey</Name>
																			<Type>ExtendedDataType</Type>
																			<TypeName>FieldName</TypeName>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>TemplateId</Name>
																			<Type>Enum</Type>
																			<TypeName>ChartTemplates</TypeName>
																			<Value>Buckets</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>DataSource</Name>
																			<Type>ExtendedDataType</Type>
																			<TypeName>TableName</TypeName>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>ItemLayout</Name>
																			<Type>String</Type>
																			<Value>ReservationCardHTM</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>SelectionType</Name>
																			<Type>Enum</Type>
																			<TypeName>AVSelectionType</TypeName>
																			<Value>Multiple</Value>
																		</AxFormControlExtensionProperty>
																	</ExtensionProperties>
																</AxFormControlExtensionComponent>
																<AxFormControlExtensionComponent xmlns=""
																	i:type="AxFormControlExtensionComponentComposite">
																	<Name>ChartFields</Name>
																	<ExtensionComponents />
																</AxFormControlExtensionComponent>
															</ExtensionComponents>
															<ExtensionProperties>
																<AxFormControlExtensionProperty>
																	<Name>DataController</Name>
																	<Type>ExtendedDataType</Type>
																	<TypeName>ClassName</TypeName>
																	<Value>ResFulfillResourcesDataController</Value>
																</AxFormControlExtensionProperty>
																<AxFormControlExtensionProperty>
																	<Name>Timescale</Name>
																	<Type>Enum</Type>
																	<TypeName>AVTimeframeType</TypeName>
																	<Value>Week</Value>
																</AxFormControlExtensionProperty>
															</ExtensionProperties>
														</FormControlExtension>
													</AxFormControl>
												</Controls>
												<AllowUserSetup>No</AllowUserSetup>
												<HideIfEmpty>No</HideIfEmpty>
											</AxFormControl>
										</Controls>
										<HideIfEmpty>No</HideIfEmpty>
										<Caption>@Res:RequiredResource</Caption>
										<FastTabExpanded>Yes</FastTabExpanded>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormTabPageControl">
										<Name>ResourceFullfilment</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Pattern>Custom</Pattern>
										<Type>TabPage</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>FulfillmentSearch</Name>
												<ExtendedStyle>group_resRequestLines</ExtendedStyle>
												<Type>Group</Type>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>SearchControls</Name>
														<Type>Group</Type>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>SearchString</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>String</Type>
																<FormControlExtension
																	i:nil="true" />
																<Label>Name</Label>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormButtonControl">
																<Name>Search</Name>
																<Type>Button</Type>
																<FormControlExtension
																	i:nil="true" />
																<ButtonDisplay>ImageOnly</ButtonDisplay>
																<NormalImage>Find</NormalImage>
																<Text>Search</Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormButtonControl">
																<Name>AdvancedSearch</Name>
																<Type>Button</Type>
																<FormControlExtension
																	i:nil="true" />
																<ButtonDisplay>ImageOnly</ButtonDisplay>
																<NormalImage>More</NormalImage>
																<Text>Advanced</Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormCheckBoxControl">
																<Name>RoleCriteriaRequired</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>CheckBox</Type>
																<FormControlExtension
																	i:nil="true" />
																<Label>@Res:RoleCriteraiRequired</Label>
																<Value>1</Value>
															</AxFormControl>
														</Controls>
														<ArrangeMethod>HorizontalRight</ArrangeMethod>
														<ViewEditMode>Edit</ViewEditMode>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>HorizontalLeft</ArrangeMethod>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>FulfillmentContent</Name>
												<ExtendedStyle>group_resFulfillment</ExtendedStyle>
												<Height>500</Height>
												<HeightMode>Manual</HeightMode>
												<Type>Group</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl>
														<Name>AvailableResources</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<FormControlExtension>
															<Name>AvailabilityView</Name>
															<ExtensionComponents>
																<AxFormControlExtensionComponent xmlns=""
																	i:type="AxFormControlExtensionComponentLeaf">
																	<Name>Collection</Name>
																	<ComponentType>AvailabilityViewBuildCollection</ComponentType>
																	<IsSystem>true</IsSystem>
																	<ExtensionProperties>
																		<AxFormControlExtensionProperty>
																			<Name>CollectionKey</Name>
																			<Type>ExtendedDataType</Type>
																			<TypeName>FieldName</TypeName>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>TemplateId</Name>
																			<Type>Enum</Type>
																			<TypeName>CollectionTemplates</TypeName>
																			<Value>FlatList</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>Title</Name>
																			<Type>String</Type>
																			<Value>@Res:Resources</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>WidthValue</Name>
																			<Type>Int32</Type>
																			<Value>0</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>WidthMode</Name>
																			<Type>Enum</Type>
																			<TypeName>FormWidth</TypeName>
																			<Value>Auto</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>DataSource</Name>
																			<Type>ExtendedDataType</Type>
																			<TypeName>TableName</TypeName>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>ItemLayout</Name>
																			<Type>String</Type>
																			<Value>ResourceCard</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>SelectionType</Name>
																			<Type>Enum</Type>
																			<TypeName>AVSelectionType</TypeName>
																			<Value>Single</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>addMoreContent</Name>
																			<Type>Enum</Type>
																			<TypeName>boolean</TypeName>
																			<Value>True</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>rows</Name>
																			<Type>Int32</Type>
																			<Value>20</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>topBoundaryValue</Name>
																			<Type>Int32</Type>
																			<Value>0</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>topBoundaryType</Name>
																			<Type>Enum</Type>
																			<TypeName>AVBoundaryType</TypeName>
																			<Value>Auto</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>bottomBoundaryValue</Name>
																			<Type>Int32</Type>
																			<Value>0</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>bottomBoundaryType</Name>
																			<Type>Enum</Type>
																			<TypeName>AVBoundaryType</TypeName>
																			<Value>Auto</Value>
																		</AxFormControlExtensionProperty>
																	</ExtensionProperties>
																</AxFormControlExtensionComponent>
																<AxFormControlExtensionComponent xmlns=""
																	i:type="AxFormControlExtensionComponentComposite">
																	<Name>CollectionFields</Name>
																	<ExtensionComponents>
																		<AxFormControlExtensionComponent xmlns=""
																			i:type="AxFormControlExtensionComponentLeaf">
																			<Name>Name</Name>
																			<ComponentType>AvailabilityViewField</ComponentType>
																			<ExtensionProperties>
																				<AxFormControlExtensionProperty>
																					<Name>DataField</Name>
																					<Type>ExtendedDataType</Type>
																					<TypeName>FieldName</TypeName>
																					<Value>Name</Value>
																				</AxFormControlExtensionProperty>
																				<AxFormControlExtensionProperty>
																					<Name>IsGroup</Name>
																					<Type>Enum</Type>
																					<TypeName>boolean</TypeName>
																					<Value>False</Value>
																				</AxFormControlExtensionProperty>
																			</ExtensionProperties>
																		</AxFormControlExtensionComponent>
																		<AxFormControlExtensionComponent xmlns=""
																			i:type="AxFormControlExtensionComponentLeaf">
																			<Name>Role</Name>
																			<ComponentType>AvailabilityViewField</ComponentType>
																			<ExtensionProperties>
																				<AxFormControlExtensionProperty>
																					<Name>DataField</Name>
																					<Type>ExtendedDataType</Type>
																					<TypeName>FieldName</TypeName>
																					<Value>Company</Value>
																				</AxFormControlExtensionProperty>
																				<AxFormControlExtensionProperty>
																					<Name>IsGroup</Name>
																					<Type>Enum</Type>
																					<TypeName>boolean</TypeName>
																					<Value>False</Value>
																				</AxFormControlExtensionProperty>
																			</ExtensionProperties>
																		</AxFormControlExtensionComponent>
																	</ExtensionComponents>
																</AxFormControlExtensionComponent>
																<AxFormControlExtensionComponent xmlns=""
																	i:type="AxFormControlExtensionComponentLeaf">
																	<Name>Timeline</Name>
																	<ComponentType>AvailabilityViewBuildTimeline</ComponentType>
																	<IsSystem>true</IsSystem>
																	<ExtensionProperties>
																		<AxFormControlExtensionProperty>
																			<Name>TemplateId</Name>
																			<Type>Enum</Type>
																			<TypeName>TimelineTemplates</TypeName>
																			<Value>PointInTime</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>HeightValue</Name>
																			<Type>Int32</Type>
																			<Value>0</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>HeightMode</Name>
																			<Type>Enum</Type>
																			<TypeName>FormHeight</TypeName>
																			<Value>Auto</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>DataSource</Name>
																			<Type>ExtendedDataType</Type>
																			<TypeName>TableName</TypeName>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>ItemLayout</Name>
																			<Type>String</Type>
																			<Value>TimeframeHTM</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>SelectionType</Name>
																			<Type>Enum</Type>
																			<TypeName>AVSelectionType</TypeName>
																			<Value>None</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>timelineKey</Name>
																			<Type>ExtendedDataType</Type>
																			<TypeName>FieldName</TypeName>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>addMoreContent</Name>
																			<Type>Enum</Type>
																			<TypeName>boolean</TypeName>
																			<Value>True</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>columns</Name>
																			<Type>Int32</Type>
																			<Value>5</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>leftBoundaryValue</Name>
																			<Type>Int32</Type>
																			<Value>0</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>leftBoundaryType</Name>
																			<Type>Enum</Type>
																			<TypeName>AVBoundaryType</TypeName>
																			<Value>Auto</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>rightBoundaryValue</Name>
																			<Type>Int32</Type>
																			<Value>0</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>rightBoundaryType</Name>
																			<Type>Enum</Type>
																			<TypeName>AVBoundaryType</TypeName>
																			<Value>Auto</Value>
																		</AxFormControlExtensionProperty>
																	</ExtensionProperties>
																</AxFormControlExtensionComponent>
																<AxFormControlExtensionComponent xmlns=""
																	i:type="AxFormControlExtensionComponentComposite">
																	<Name>TimelineFields</Name>
																	<ExtensionComponents />
																</AxFormControlExtensionComponent>
																<AxFormControlExtensionComponent xmlns=""
																	i:type="AxFormControlExtensionComponentLeaf">
																	<Name>Chart</Name>
																	<ComponentType>AvailabilityViewBuildChart</ComponentType>
																	<IsSystem>true</IsSystem>
																	<ExtensionProperties>
																		<AxFormControlExtensionProperty>
																			<Name>CollectionKey</Name>
																			<Type>ExtendedDataType</Type>
																			<TypeName>FieldName</TypeName>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>TimelineKey</Name>
																			<Type>ExtendedDataType</Type>
																			<TypeName>FieldName</TypeName>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>TemplateId</Name>
																			<Type>Enum</Type>
																			<TypeName>ChartTemplates</TypeName>
																			<Value>Buckets</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>DataSource</Name>
																			<Type>ExtendedDataType</Type>
																			<TypeName>TableName</TypeName>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>ItemLayout</Name>
																			<Type>String</Type>
																			<Value>ReservationCardHTM</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>SelectionType</Name>
																			<Type>Enum</Type>
																			<TypeName>AVSelectionType</TypeName>
																			<Value>Multiple</Value>
																		</AxFormControlExtensionProperty>
																	</ExtensionProperties>
																</AxFormControlExtensionComponent>
																<AxFormControlExtensionComponent xmlns=""
																	i:type="AxFormControlExtensionComponentComposite">
																	<Name>ChartFields</Name>
																	<ExtensionComponents />
																</AxFormControlExtensionComponent>
															</ExtensionComponents>
															<ExtensionProperties>
																<AxFormControlExtensionProperty>
																	<Name>DataController</Name>
																	<Type>ExtendedDataType</Type>
																	<TypeName>ClassName</TypeName>
																	<Value>ResAvailableResourceDataController</Value>
																</AxFormControlExtensionProperty>
																<AxFormControlExtensionProperty>
																	<Name>Timescale</Name>
																	<Type>Enum</Type>
																	<TypeName>AVTimeframeType</TypeName>
																	<Value>Week</Value>
																</AxFormControlExtensionProperty>
															</ExtensionProperties>
														</FormControlExtension>
													</AxFormControl>
												</Controls>
												<AllowUserSetup>No</AllowUserSetup>
												<ArrangeMethod>Auto</ArrangeMethod>
												<HideIfEmpty>No</HideIfEmpty>
											</AxFormControl>
										</Controls>
										<HideIfEmpty>No</HideIfEmpty>
										<Caption>@Res:AvailableResources</Caption>
										<FastTabExpanded>Yes</FastTabExpanded>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormTabPageControl">
										<Name>ReservationDetailsTabPageControl</Name>
										<Pattern>ToolbarList</Pattern>
										<PatternVersion>1.2</PatternVersion>
										<Type>TabPage</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormActionPaneControl">
												<Name>Toolbar</Name>
												<Type>ActionPane</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonGroupControl">
														<Name>ToolbarButtonGroup</Name>
														<Type>ButtonGroup</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormButtonControl">
																<Name>Cancel</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>Button</Type>
																<FormControlExtension
																	i:nil="true" />
																<MultiSelect>Yes</MultiSelect>
																<NeedsRecord>Yes</NeedsRecord>
																<NormalImage>Release</NormalImage>
																<Text>@Res:CancelReservations</Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormButtonControl">
																<Name>Confirm</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>Button</Type>
																<FormControlExtension
																	i:nil="true" />
																<MultiSelect>Yes</MultiSelect>
																<NeedsRecord>Yes</NeedsRecord>
																<NormalImage>OK</NormalImage>
																<Text>@SYS4001382</Text>
															</AxFormControl>
														</Controls>
													</AxFormControl>
												</Controls>
												<Style>Strip</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGridControl">
												<Name>ReservationGrid</Name>
												<AllowEdit>No</AllowEdit>
												<Type>Grid</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ReservationDetails_ResourceName</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>ResourceName</DataField>
														<DataSource>ReservationDetails</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ReservationDetails_EngagementIDName</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>EngagementIDName</DataField>
														<DataSource>ReservationDetails</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>ReservationDetails_EngagementType</Name>
														<Type>ComboBox</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>EngagementType</DataField>
														<DataSource>ReservationDetails</DataSource>
														<Items />
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ReservationDetails_TaskName</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>TaskName</DataField>
														<DataSource>ReservationDetails</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormDateTimeControl">
														<Name>ReservationDetails_StartTime</Name>
														<Type>DateTime</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>StartTime</DataField>
														<DataSource>ReservationDetails</DataSource>
														<TimeSeconds>No</TimeSeconds>
														<TimeZoneIndicator>Never</TimeZoneIndicator>
														<TimezonePreference>NoConversion</TimezonePreference>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormDateTimeControl">
														<Name>ReservationDetails_EndTime</Name>
														<Type>DateTime</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>EndTime</DataField>
														<DataSource>ReservationDetails</DataSource>
														<TimeSeconds>No</TimeSeconds>
														<TimeZoneIndicator>Never</TimeZoneIndicator>
														<TimezonePreference>NoConversion</TimezonePreference>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ReservationDetails_ReservationType</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>ReservationType</DataField>
														<DataSource>ReservationDetails</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>ReservationDetails_ReservedHours</Name>
														<Type>Real</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>ReservedHours</DataField>
														<DataSource>ReservationDetails</DataSource>
													</AxFormControl>
												</Controls>
												<DataSource>ReservationDetails</DataSource>
											</AxFormControl>
										</Controls>
										<Caption>@Res:ReservationDetails</Caption>
									</AxFormControl>
								</Controls>
								<ShowTabs>No</ShowTabs>
								<Style>FastTabs</Style>
							</AxFormControl>
						</Controls>
						<PanelStyle>Details</PanelStyle>
						<Style>DetailsFormDetails</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ResourceRequirementsGrid</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>MainGridFilter</Name>
								<Pattern>CustomAndQuickFilters</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl>
										<Name>QuickFilter</Name>
										<FormControlExtension>
											<Name>QuickFilterControl</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>targetControlName</Name>
													<Type>String</Type>
													<Value>MainGrid</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>defaultColumnName</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>placeholderText</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
								<FrameType>None</FrameType>
								<Style>CustomFilter</Style>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>MainGrid</Name>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ResResourceFulfillment_ResourceName1</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ResourceName</DataField>
										<DataSource>ResResourceFulfillment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ResResourceFulfillment_RoleId</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>RoleId</DataField>
										<DataSource>ResResourceFulfillment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ResResourceFulfillment_RequestId1</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>RequestId</DataField>
										<DataSource>ResResourceFulfillment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ResResourceFulfillment_ActivityType</Name>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ActivityType</DataField>
										<DataSource>ResResourceFulfillment</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ResResourceFulfillment_EngagementId</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>EngagementId</DataField>
										<DataSource>ResResourceFulfillment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ResResourceFulfillment_EngagementName1</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>EngagementName</DataField>
										<DataSource>ResResourceFulfillment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>ResResourceFulfillment_StartDateTime1</Name>
										<Type>DateTime</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>StartDateTime</DataField>
										<DataSource>ResResourceFulfillment</DataSource>
										<Label>@SYS2168</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>ResResourceFulfillment_EndDateTime</Name>
										<Type>DateTime</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>EndDateTime</DataField>
										<DataSource>ResResourceFulfillment</DataSource>
										<Label>@SYS22882</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ResResourceFulfillment_ProjectManager</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjectManager</DataField>
										<DataSource>ResResourceFulfillment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CustomerName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>getCustomerName</DataMethod>
										<DataSource>ResResourceFulfillment</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>ResResourceFulfillment</DataSource>
								<DefaultAction>MainGridDefaultAction</DefaultAction>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>MainGridDefaultAction</Name>
								<Type>CommandButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Command>DetailsView</Command>
								<NeedsRecord>Yes</NeedsRecord>
							</AxFormControl>
						</Controls>
						<PanelStyle>Grid</PanelStyle>
						<Style>DetailsFormGrid</Style>
					</AxFormControl>
				</Controls>
				<ShowTabs>No</ShowTabs>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>