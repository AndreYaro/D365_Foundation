<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailEventNotificationLog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class RetailEventNotificationLog extends FormRun
{
    str60                               searchTextValue;
    MCREMailSearchType                  mCREMailSearchType;
    QueryBuildRange                     queryBuildRange;
    boolean                             recordChanged, resendClick;
    TmpRetailEventNotificationLog       tmpRetailEventNotificationLog;
    str                                 receiverEmailAddressNew, receiverEmailAddressOrg;
    SortOrder                           sortOrder;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class.
    /// </summary>
    public void init()
    {
        super();

        element.updateDisplay();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDisplay</Name>
				<Source><![CDATA[
    void updateDisplay()
    {
        // Refresh the HTML preview of the message body.
        notificationPreview.parmHtml(RetailEventNotificationLog.EmailMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if form can be closed.
    /// </summary>
    /// <returns>True if the form can be closed; otherwise, false.</returns>
    public boolean canClose()
    {
        boolean       ret;

        ret = super();

        this.SendMailOrDiscardChanges();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTempData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear the TmpRetailEventNotificationLog table.
    /// </summary>
    private void clearTempData()
    {
        ttsBegin;

        // Clear all the records from tmpRetailEventNotificationLog table.
        delete_from tmpRetailEventNotificationLog;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesOrderSearchString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find sales order serach string.
    /// </summary>
    /// <param name="salesId">
    /// Sales id.
    /// </param>
    /// <param name="searchValue">
    /// The search value.
    /// </param>
    /// <param name="_forKeywordSearch">
    /// Whether, for keyword search.
    /// </param>
    /// <returns>
    /// Sales order search string.
    /// </returns>
    private str getSalesOrderSearchString(SalesId salesId, str1260 searchValue, boolean _forKeywordSearch = false )
    {
        str         searchString;
        SalesTable  salesTable, salesTableLocal;

        // Find the salestable record for specified sales id.
        salesTableLocal =  SalesTable::find(salesId);

        // Check the current sales order record against search string and
        // get the recids for that matches the specified search criteria.
        select RecId, SalesId from salesTable
        where salesTable.SalesId like searchValue && salesTable.RecId == salesTableLocal.RecId;

        if (salesTable.RecId)
        {
            if (_forKeywordSearch)
            {
                searchString = searchString + strFmt( ' || (%1.%2 == %3', tablestr(RetailEventNotificationLog),
                                                                fieldstr(RetailEventNotificationLog, SalesOrder),
                                                                queryValue(salesTable.RecId) +') ');
            }
            else
            {
                searchString = searchString + queryValue(salesTable.RecId);
            }
        }

        return searchString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrRunEmailSearch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filter the email records as per applied criteria.
    /// </summary>
    void mcrRunEmailSearch()
    {
        SalesTable                  salesTableLocal;
        str                         searchString, queryValue;

        salestablelocal =  element.args().record();

        RetailEventNotificationLog_ds.query().dataSourceNo(1).clearRanges();

        if (EmailSearchType.selection() == MCREMailSearchType::EmailDate)
        {
            searchTextValue = SearchDate.valueStr();
        }
        else
        {
            searchTextValue = searchtext.valueStr();
        }

        if (searchTextValue != '')
        {
            switch (EmailSearchType.selection())
            {
                case MCREMailSearchType::EmailDate:
					utcdatetime start = DateTimeUtil::newDateTime(SearchDate.dateValue(),0);
                    utcdatetime end = DateTimeUtil::addSeconds(DateTimeUtil::addDays(start, 1), -1);
                    queryBuildRange = RetailEventNotificationLog_ds.query().dataSourceNo(1).addRange(fieldNum(RetailEventNotificationLog, SentDateTime));
                    queryBuildRange.value(SysQuery::range(start, end));
                    break;

                case MCREMailSearchType::EmailAddress:
                    queryBuildRange = RetailEventNotificationLog_ds.query().dataSourceNo(1).addRange(fieldNum(RetailEventNotificationLog, ReceiverEmailAddress));
                    queryBuildRange.value(searchTextValue);
                    break;

                case MCREMailSearchType::SalesOrderNumber:

                    queryBuildRange = RetailEventNotificationLog_ds.query().dataSourceNo(1).addRange(fieldNum(RetailEventNotificationLog, SalesOrder));

                    searchString = this.getSalesOrderSearchString(salesTableLocal.SalesId, searchTextValue);

                    if (searchString != '')
                    {
                        queryBuildRange.value(searchString);
                    }
                    else
                    {
                        // If no matching RECID then search for 0, otherwise it will display all records.
                        queryBuildRange.value(int2str(0));
                    }
                    break;

                case MCREMailSearchType::DefaultEmailSearch:

                    searchString = this.getSalesOrderSearchString(salesTableLocal.SalesId, searchTextValue, true);

                    queryBuildRange =  RetailEventNotificationLog_ds.query().dataSourceNo(1).addRange((fieldNum(RetailEventNotificationLog,EmailMessage)),1, QueryRangeType::FullText);

                    queryValue =  '((RetailEventNotificationLog.EmailMessage freetext "' + searchTextValue + '")' + searchString + '|| (RetailEventNotificationLog.EmailSubject like "' + searchTextValue + '") || (RetailEventNotificationLog.ReceiverEmailAddress like  "' + searchTextValue + '"))';
                    queryBuildRange.value(queryValue);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resendMail</Name>
				<Source><![CDATA[
    /// <summary>
    /// For resending the mail.
    /// </summary>
    /// <param name="isModifiedEmailAddress">
    /// If receiever mail address has been modified.
    /// </param>
    public void resendMail(boolean isModifiedEmailAddress = false)
    {
        str                                 fromAddr, toAddr, subject, message;
        RetailEventNotificationLog          notificationLog;

        // If receiver email has been modified, then set the email fields from tmpRetailEventNotificationLog table.
        if (isModifiedEmailAddress)
        {
            toAddr = receiverEmailAddressNew;
            subject = tmpRetailEventNotificationLog.EmailSubject;
            message = tmpRetailEventNotificationLog.EmailMessage;
            fromAddr = tmpRetailEventNotificationLog.SenderEmailAddress;
        }
        else
        {
            // If the email has not been constructed successfully, and the customer didn't modify the receipent email address,
            // reconstruct the email automatically. Will not send the content that were failed to be constructed.
            if (RetailEventNotificationLog.EmailConstructedSuccessfully == NoYes::No)
            {
                this.reconstructMail();
                return;
            }

            // Set the email fields from current record.
            toAddr = retailEventNotificationLog.ReceiverEmailAddress;
            subject = retailEventNotificationLog.EmailSubject;
            message = retailEventNotificationLog.EmailMessage;
            fromAddr = retailEventNotificationLog.SenderEmailAddress;
        }

        // Checking if receiver mail address is valid or not.
        if (SysEmailDistributor::validateEmail(toAddr))
        {
            // sends the actual mail.
            RetailEventNotificationService eventNotificationService = new RetailEventNotificationService();
            RetailEventNotificationSendEmailResult resendResult = eventNotificationService.trySendEmail(
                RetailEventNotificationSendEmailParameters::construct(fromAddr, toAddr, subject, message));

            ttsbegin;

            notificationLog.clear();
            notificationLog.SenderEmailAddress = fromAddr;
            notificationLog.ReceiverEmailAddress = toAddr;
            notificationLog.EmailSubject = subject;
            notificationLog.EmailMessage = message;
            notificationLog.SentDateTime = DateTimeUtil::utcNow();
            notificationLog.SentSuccessfully = resendResult.emailSentSuccessfully;
            notificationLog.ErrorMessage = resendResult.error;

            // If receiver email has been modified, then set the  fields from tmpRetailEventNotificationLog table.
            if (isModifiedEmailAddress)
            {
                notificationLog.DefaultLanguage = tmpRetailEventNotificationLog.DefaultLanguage;
                notificationLog.RefRecId =  tmpRetailEventNotificationLog.RefRecId;
                notificationLog.EventNotificationType =  tmpRetailEventNotificationLog.EventNotificationType;
                notificationLog.SalesOrder =  tmpRetailEventNotificationLog.SalesOrder;
            }
            else
            {
                // set the  fields values from current record.
                notificationLog.DefaultLanguage = retailEventNotificationLog.DefaultLanguage;
                notificationLog.RefRecId =  retailEventNotificationLog.RefRecId;
                notificationLog.EventNotificationType =  retailEventNotificationLog.EventNotificationType;
                notificationLog.SalesOrder =  retailEventNotificationLog.SalesOrder;
            }

            notificationLog.insert();

            ttscommit;

            // If receiver email has been modified the update the current record to old value.
            if (recordchanged)
            {
                element.UpdateRecord();
            }

            recordchanged = false;
            element.mcrRunEmailSearch();
            info(strFmt("@SYS73254", "@SYP4860578"));
        }
        else
        {
            info("@SYS96644");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reconstructMail</Name>
				<Source><![CDATA[
    /// <summary>
    /// For reconstructing the mail by creating new email notification action.
    /// </summary>
    private void reconstructMail()
    {
        RetailEventNotificationAction notificationAction;

        ttsbegin;
        notificationAction.EventNotificationType = retailEventNotificationLog.EventNotificationType;
        notificationAction.Processed = NoYes::No;
        notificationAction.RefRecId = RetailEventNotificationLog.RefRecId;
        notificationAction.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SendMailOrDiscardChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Show a dialog button asking to send mail to modified receiver or discard the change in receiver email address.
    /// </summary>
    public void SendMailOrDiscardChanges()
    {
        DialogButton  dialogButton;

        // Check, if receiverEmailAddress has been changed and mail has not been sent.
        if (recordChanged && (!resendClick))
        {
            dialogButton= Box::okCancel
                        ("@Retail:ResendEmailConfirmationMessage"
                        , DialogButton::Yes);

            // If chosses Ok resend the mail to modified receiver.
            if (dialogButton == DialogButton::Ok)
            {
                element.resendMail(true);
                RetailEventNotificationLog_ds.research();
            }
            // Assume cancel for all other cases and update the receiver email with previous value to discard the modified changes in receiever mail address.
            else
            {
                recordChanged = false;
                element.UpdateRecord();
                RetailEventNotificationLog_ds.research();
                element.mcrRunEmailSearch();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the receiver email address to original email address.
    /// </summary>
    public void UpdateRecord()
    {
        // Check, if there is any record in tmpRetailEventNotificationLog table.
        if (tmpRetailEventNotificationLog.RecId)
        {
            while select ReceiverEmailAddress, RefRecId
                from tmpRetailEventNotificationLog
            {
                ttsBegin;

                // Check, whether retailEventNotificationLog table has any record that has matching recid for refrecid in tmpRetailEventNotificationLog tables
                select firstOnly forUpdate retailEventNotificationLog
                    where retailEventNotificationLog.RecId == tmpRetailEventNotificationLog.RefRecId;

                if (retailEventNotificationLog.RecId)
                {
                    // Update the modified receiver email address in retailEventNotificationLog table with
                    // receiver email address in tmpRetailEventNotificationLog table to discard the chnanges.
                    retailEventNotificationLog.ReceiverEmailAddress = tmpRetailEventNotificationLog.ReceiverEmailAddress;
                    retailEventNotificationLog.update();
                }

                ttsCommit;
            }
        }

        this.clearTempData();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>RetailEventNotificationLog</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        /// <summary>
        /// Determines the currently active row.
        /// </summary>
        /// <returns>The active row no</returns>
        public int active()
        {
            int ret;

            ret = super();
            element.updateDisplay();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes if different grid row is selected.
        /// </summary>
        public void selectionChanged()
        {
            super();

            element.SendMailOrDiscardChanges();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>ReceiverEmailAddress</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            /// <summary>
            /// Validate thge input value against valid mail format.
            /// </summary>
            /// <returns>True if validates successfully; otherwise, false.</returns>
            public boolean validate()
            {
                boolean ret;

                ret = super();

                if (!SysEmailDistributor::validateEmail(RetailEventNotificationLog_ReceiverEmailAddress.valueStr()))
                {
                    info("@SYS96644");
                    ret = false;
                }

                receiverEmailAddressNew = RetailEventNotificationLog_ReceiverEmailAddress.valueStr();

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>btnResend</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Esecutes when button control is clicked.
        /// </summary>
        public void clicked()
        {
            element.resendMail();
            RetailEventNotificationLog_ds.research();
            element.updateDisplay();

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>gotFocus</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes when control gets the focus.
        /// </summary>
        public void gotFocus()
        {
            super();

            resendClick = true;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lostFocus</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes when control leaves the focus.
        /// </summary>
        public void lostFocus()
        {
            super();

            resendClick = false;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>QuickFilterControl</Name>
				<Type>Custom</Type>
				<Methods>
					<Method>
						<Name>applyFilter</Name>
						<Source><![CDATA[
        public void applyFilter()
        {
            super();
            element.updateDisplay();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EmailSearchType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes when text is changed inside the control.
        /// </summary>
        /// <returns>True if control state is modified successfully; otherwise, false.</returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            SearchText.text('');

            // Check if the search criteria is email.Then visible date control.
            if (EmailSearchType.selection() == MCREMailSearchType::EmailDate)
            {
                SearchText.visible(false);
                SearchDate.visible(true);
            }
            else
            {
                SearchText.visible(true);
                SearchDate.visible(false);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SearchText</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes when text is changed inside the control.
        /// </summary>
        /// <returns>True if control state is modified successfully; otherwise, false.</returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.mcrRunEmailSearch();
            RetailEventNotificationLog_ds.executeQuery();
            element.updateDisplay();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EmailSearch</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.mcrRunEmailSearch();
            RetailEventNotificationLog_ds.executeQuery();
            element.updateDisplay();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RetailEventNotificationLog_ReceiverEmailAddress</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>leave</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes when control leaves.
        /// </summary>
        /// <returns>True if control leave completes successfully; otherwise, false.</returns>
        public boolean leave()
        {
            boolean     ret;

            ret = super();

            // If receiver email address has been modified then insert th original record into  tmpRetailEventNotificationLog table
            if (receiverEmailAddressOrg != receiverEmailAddressNew)
            {
                recordChanged = true;
                resendClick = false;
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>gotFocus</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes when Control get the focus.
        /// </summary>
        public void gotFocus()
        {
            receiverEmailAddressOrg = RetailEventNotificationLog_ReceiverEmailAddress.valueStr();

            ttsbegin;

            tmpRetailEventNotificationLog.SenderEmailAddress = retailEventNotificationLog.SenderEmailAddress;
            tmpRetailEventNotificationLog.DefaultLanguage = retailEventNotificationLog.DefaultLanguage;
            tmpRetailEventNotificationLog.EmailSubject = retailEventNotificationLog.EmailSubject;
            tmpRetailEventNotificationLog.EmailMessage = retailEventNotificationLog.EmailMessage;
            tmpRetailEventNotificationLog.EventNotificationType = retailEventNotificationLog.EventNotificationType;
            tmpRetailEventNotificationLog.SentDateTime = retailEventNotificationLog.SentDateTime;
            tmpRetailEventNotificationLog.SalesOrder = retailEventNotificationLog.SalesOrder;
            tmpRetailEventNotificationLog.RefRecId = retailEventNotificationLog.RecId;
            tmpRetailEventNotificationLog.ReceiverEmailAddress = receiverEmailAddressOrg;
            tmpRetailEventNotificationLog.insert();

            ttscommit;

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>lostFocus</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes When control lost the focus.
        /// </summary>
        public void lostFocus()
        {
            super();
            receiverEmailAddressNew = RetailEventNotificationLog_ReceiverEmailAddress.valueStr();
            if (receiverEmailAddressOrg == receiverEmailAddressNew)
            {
                recordChanged = false;
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>RetailEventNotificationLog</Name>
			<Table>RetailEventNotificationLog</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultLanguage</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>EmailMessage</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>EmailSubject</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EventNotificationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiverEmailAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesOrder</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SenderEmailAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SentDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@RET4160305</Caption>
		<DataSource xmlns="">RetailEventNotificationLog</DataSource>
		<Pattern xmlns="">Custom</Pattern>
		<Style xmlns="">SimpleListDetails</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>btnResend</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@Retail:RetailEventNotificationLog_ResendHelpText</HelpText>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<NeedsRecord>Yes</NeedsRecord>
								<Text>@GLS62537</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>btnCleanUp</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>RetailEventNotificationLogCleanUp</MenuItemName>
								<MenuItemType>Action</MenuItemType>
								<Text>@SYS4160</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<DataSource>RetailEventNotificationLog</DataSource>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>GridContainer</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>858993458</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>Grid</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Grid</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToContent</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>RetailEventNotificationLog_EventNotificationType</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>EventNotificationType</DataField>
								<DataSource>RetailEventNotificationLog</DataSource>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateTimeControl">
								<Name>RetailEventNotificationLog_SentDateTime</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>DateTime</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>SentDateTime</DataField>
								<DataSource>RetailEventNotificationLog</DataSource>
							</AxFormControl>
						</Controls>
						<AlternateRowShading>No</AlternateRowShading>
						<DataSource>RetailEventNotificationLog</DataSource>
						<GridLinesStyle>Vertical</GridLinesStyle>
						<MultiSelect>No</MultiSelect>
						<ShowRowLabels>No</ShowRowLabels>
						<Style>List</Style>
					</AxFormControl>
				</Controls>
				<RightMargin>0</RightMargin>
				<RightMarginMode>Fixed</RightMarginMode>
				<FrameType>None</FrameType>
				<Style>SidePanel</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>HeaderSearch</Name>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Header</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>CustomerSearch</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>TypeText</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>EmailSearchType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@SYS75928</HelpText>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<EnumType>MCREMailSearchType</EnumType>
										<Label>@MCR11899</Label>
										<ShowLabel>No</ShowLabel>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SearchText</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@MCR11913</HelpText>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>SearchDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Date</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>ValidToDate</ExtendedDataType>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
								</Controls>
								<Columns>2</Columns>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>CustSearchButtonGroup</Name>
								<Type>ButtonGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>EmailSearch</Name>
										<HelpText>@MCR28316</HelpText>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS60181</Text>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Columns>2</Columns>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<Columns>2</Columns>
				<FrameType>None</FrameType>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>EmailDetails</Name>
				<HeightMode>SizeToContent</HeightMode>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>HeaderPage</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>DetailsHeader</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailEventNotificationLog_SenderEmailAddress</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SenderEmailAddress</DataField>
										<DataSource>RetailEventNotificationLog</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailEventNotificationLog_ReceiverEmailAddress</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ReceiverEmailAddress</DataField>
										<DataSource>RetailEventNotificationLog</DataSource>
										<Label>@RET4160572</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailEventNotificationLog_EmailSubject</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>EmailSubject</DataField>
										<DataSource>RetailEventNotificationLog</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>RetailEventNotificationLog_EventNotificationType1</Name>
										<AllowEdit>No</AllowEdit>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>EventNotificationType</DataField>
										<DataSource>RetailEventNotificationLog</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>RetailEventNotificationLog_SentDateTime1</Name>
										<AllowEdit>No</AllowEdit>
										<Type>DateTime</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>SentDateTime</DataField>
										<DataSource>RetailEventNotificationLog</DataSource>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<LeftMargin>5</LeftMargin>
								<LeftMarginMode>Fixed</LeftMarginMode>
								<TopMargin>5</TopMargin>
								<TopMarginMode>Fixed</TopMarginMode>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@EPR4460226</Caption>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>DetailsTab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>PreveiwTabPage</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl>
								<Name>notificationPreview</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<FormControlExtension>
									<Name>HtmlViewerControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>htmlField</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
							</AxFormControl>
						</Controls>
						<Caption>@RET490394</Caption>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>
