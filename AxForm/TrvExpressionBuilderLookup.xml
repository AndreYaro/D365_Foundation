<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>TrvExpressionBuilderLookup</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class TrvExpressionBuilderLookup extends FormRun implements ISysExpressionBuilderLookup
{
    TableName tableName;
    FieldName fieldName;
    TableId relatedTableId;
    FieldId relatedFieldId;
    TrvExpType filterExpenseType;
    str extendedDataTypeName;
    str selectedValue;
    boolean isSurrogate;

    Microsoft.Dynamics.AX.Framework.Expression.Model.Field field;

}
]]></Source>
			</Method>
			<Method>
				<Name>setup</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will be called before init is called to the form. It is used
    /// to save the given field and EDT.
    /// </summary>
    /// <param name = "field">The field that the form is performing a lookup on</param>
    /// <param name = "extendedDataTypeName">The EDT of the field</param>
    public void setup(Microsoft.Dynamics.AX.Framework.Expression.Model.Field _field, str _extendedDataTypeName)
    {
        this.parmField(_field);
        this.parmExtendedDataType(_extendedDataTypeName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method must return the selected item from the lookup. It is called when
    /// the form closes.
    /// </summary>
    /// <returns>The text of the selected item from the lookup.</returns>
    public str selectedItem()
    {
        return element.parmSelectedValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGrid</Name>
				<Source><![CDATA[
    void buildGrid()
    {
        FormBuildDataSource     formBuildDataSource;
        FormBuildGridControl    gridControl;
        TableId                 tableId;
        FieldId                 fieldId;
        SysDictRelation            dictRelation;
        DictTable               dictTable;
        container               viewTableInfo;

        Microsoft.Dynamics.AX.Framework.Expression.Model.Datasource datasource;

        fieldName = field.get_Name();
        datasource = field.get_Parent();
        tableName = datasource.get_TableName();

        tableId = tableName2id(tableName);
        fieldId = fieldName2id(tableId, fieldName);

        dictRelation = new SysDictRelation(tableId);
        relatedTableId = dictRelation.loadFieldRelation(fieldId);

        if (relatedTableId > 0)
        {
            // check if table is a view
            dictTable = new DictTable(tableId);
            if (dictTable.isView())
            {
                // Get underlying table information for the view field
                viewTableInfo = ExpressionMetadataHelper::getTableInfoForViewField(tableName, fieldName);
                tableName = conPeek(viewTableInfo, 1);
                fieldName = conPeek(viewTableInfo, 2);
                tableId = tableName2id(tableName);
                fieldId = fieldName2id(tableId, fieldName);

                dictRelation = new SysDictRelation(tableId);
                relatedTableId = dictRelation.loadFieldRelation(fieldId);
            }

            // field has either a table relation or an EDT relation
            if (field.get_IsSurrogate() && extendedDataTypeName != extendedTypeStr(HcmPositionRecId))
            {
                // Foreign key table relation
                isSurrogate = true;
            }
            else
            {
                // Normal table relation or EDT
                relatedFieldId = ExpressionMetadataHelper::getRelatedFieldIdFromRelation(dictRelation, fieldId);
            }
        }

        formBuildDataSource = element.form().dataSource(1);
        formBuildDataSource.table(relatedTableId);
        formBuildDataSource.autoQuery(true);
        formBuildDataSource.linkType(0);
        formBuildDataSource.allowCreate(false);
        formBuildDataSource.allowDelete(false);
        formBuildDataSource.allowEdit(false);

        gridControl = element.form().design().control('LookupGrid');

        gridControl.dataSource(formBuildDataSource.name());
        this.showAllFields(gridControl, formBuildDataSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        DictTable               dictTable;
        FormDataSource          fDataSource;
        QueryBuildRange         qbr;
        QueryBuildDataSource    qbds;
        QueryBuildDataSource    qbdsTrvCostType;
        Query                   q;

        element.buildGrid();

        super();

        fDataSource = element.dataSource(1) as FormDataSource;
        q = fDataSource.query();
        qbds = q.dataSourceNo(1);

        switch (extendedDataTypeName)
        {
            case extendedTypeStr(TrvCostTypeEDT):
                if (filterExpenseType != TrvExpType::Empty)
                {
                    qbr = qbds.addRange(fieldNum(TrvCostType, ExpType));
                    qbr.value(queryValue(filterExpenseType));
                    qbr.status(RangeStatus::Hidden);
                }
                break;

            case extendedTypeStr(TrvExpSubCategoryEDT):
                qbdsTrvCostType = qbds.addDataSource(tableNum(TrvCostType));
                qbdsTrvCostType.addLink(fieldNum(TrvExpSubCategory, CostType), fieldNum(TrvCostType, CostType));
                if (filterExpenseType != TrvExpType::Empty)
                {
                    qbr = qbdsTrvCostType.addRange(fieldNum(TrvCostType, ExpType));
                    qbr.value(queryValue(filterExpenseType));
                    qbr.status(RangeStatus::Hidden);
                }
                break;
        }

        element.args().record(null);

        dictTable = new SysDictTable(relatedTableId);
        element.design().caption(dictTable.label());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExtendedDataType</Name>
				<Source><![CDATA[
    void parmExtendedDataType(str _extendedDataTypeName)
    {
        extendedDataTypeName = _extendedDataTypeName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmField</Name>
				<Source><![CDATA[
    void parmField(Microsoft.Dynamics.AX.Framework.Expression.Model.Field _field = field)
    {
        field = _field;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPolicyRuleTypeIndex</Name>
				<Source><![CDATA[
    void parmPolicyRuleTypeIndex(TrvExpType _filterExpenseType)
    {
        filterExpenseType = _filterExpenseType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedValue</Name>
				<Source><![CDATA[
    str parmSelectedValue(str _selectedValue = selectedValue)
    {
        selectedValue = _selectedValue;
        return selectedValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showAllFields</Name>
				<Source><![CDATA[
    public void showAllFields(FormBuildGridControl    formBuildGridControl,
                              FormBuildDataSource     formBuildDataSource)

    {
        FormBuildStringControl          formBuildStringControl;
        FormBuildInt64Control           formBuildInt64Control;
        FormBuildIntControl             formBuildIntControl;
        FormBuildDateControl            formBuildDateControl;
        FormBuildRealControl            formBuildRealControl;
        FormBuildDateTimeControl        formBuildDateTimeControl;
        FormBuildTimeControl            formBuildTimeControl;
        Object                          formBuildControl;
        SysDictTable                    dictTable;
        SysDictField                    dictField;
        SysDictFieldGroup               dictFieldGroup;
        SysDictType                     dictType;
        DictMethod                      dictMethod;
        FieldId                         fieldId;
        int                             i,j;
        int                             fieldCnt;
        int                             uniqueIndexFieldCnt;
        Set                             fieldList = new Set(Types::Integer);
        SetEnumerator                   listEnum;
        Types                           returnType;

        dictTable   = new SysDictTable(relatedTableId);

        if (isSurrogate)
        {
            dictFieldGroup = new SysDictFieldGroup(relatedTableId, 'AutoIdentification', true);

            if (dictFieldGroup != null && dictFieldGroup.numberOfFields() > 0)
            {
                fieldCnt = dictFieldGroup.numberOfFields();
                for (i=1; i<=fieldCnt; i++)
                {
                    fieldList.add(dictFieldGroup.field(i));
                }
            }
        }
        else
        {
            if (extendedDataTypeName == extendedTypeStr(HcmPositionRecId))
            {
                dictFieldGroup = new SysDictFieldGroup(relatedTableId, tableFieldgroupStr(HcmPosition, TrvExpressionBuilderPositionLookup));
            }
            else
            {
                dictFieldGroup = new SysDictFieldGroup(relatedTableId, 'AutoLookup');
            }
            if (dictFieldGroup != null && dictFieldGroup.numberOfFields() > 0)
            {
                fieldCnt = dictFieldGroup.numberOfFields();
                for (i=1; i<=fieldCnt; i++)
                {
                    fieldList.add(dictFieldGroup.field(i));
                }
            }
            else
            {
                if (dictTable.titleField1() > 0)
                    fieldList.add(dictTable.titleField1());

                if (dictTable.titleField2() > 0)
                    fieldList.add(dictTable.titleField2());
            }

            uniqueIndexFieldCnt = dictTable.firstUniqueIndex().numberOfFields();

            for (j=1; j<=uniqueIndexFieldCnt; j++)
            {
                if (!fieldList.in(dictTable.firstUniqueIndex().field(j)))
                {
                    fieldList.add(dictTable.firstUniqueIndex().field(j));
                }
            }
        }

        listEnum = fieldList.getEnumerator();

        while (listEnum.moveNext())
        {
            fieldId = listEnum.current();

            // field in group is a data field
            if ((!dictFieldGroup) || (!dictFieldGroup.methodName(fieldId)))
            {
                dictField = new SysDictField(dictTable.id(), fieldId);
                if (dictField.saveContents())
                {
                    for (j = 1;j <= dictField.arraySize(); j++)
                    {
                        if (dictField.baseType() == Types::String ||
                            dictField.baseType() == Types::RString ||
                            dictField.baseType() == Types::VarString)
                        {
                            formBuildStringControl = formBuildGridControl.addDataField(formBuildDataSource.id(), fieldId, j);
                            formBuildStringControl.displayHeightMode(0);
                            formBuildStringControl.displayHeightValue(1);
                            formBuildStringControl.label(dictField.label());
                            formBuildStringControl.helpText(dictField.help());
                            formBuildStringControl.allowEdit(true);
                        }
                        else
                        {
                            if (dictField.baseType() != Types::Container)
                            {
                                formBuildControl = formBuildGridControl.addDataField(formBuildDataSource.id(), fieldId, j);
                                formBuildControl.label(dictField.label());
                                formBuildControl.helpText(dictField.help());
                            }
                            else
                            {
                                formBuildControl = formBuildGridControl.addControl(FormControlType::String,'TableBrowserContainer');
                                formBuildControl.datasource(formBuildDataSource.id());
                                formBuildControl.dataField(fieldId2Ext(fieldId,j));
                                formBuildControl.label(dictField.label());
                                formBuildControl.helpText(dictField.help());
                                formBuildControl.displayLengthMode(0);
                                formBuildControl.displayLengthValue(5);
                                formBuildControl.lookupButton(2);
                            }
                        }
                    }
                }
            }
            // field in group is a display method
            else
            {
                // find the display method in the list object methods and load up a dictMethod class
                for (i=1; i<=dictTable.objectMethodCnt(); i++)
                {
                    if (dictTable.objectMethod(i) == dictFieldGroup.methodName(fieldId))
                    {
                        dictMethod = dictTable.objectMethodObject(i);
                        break;
                    }
                }

                // retrieve the base type for the return value and add the corresponding control to the grid
                if (dictMethod != null)
                {
                    returnType = dictMethod.returnType();

                    if (returnType == Types::UserType)
                    {
                        dictType = new SysDictType(dictMethod.returnId());
                        returnType = dictType.baseType();
                    }

                    switch (returnType)
                    {
                        case Types::String:
                        case Types::RString:
                        case Types::VarString:
                            formBuildStringControl = formBuildGridControl.addControl(FormControlType::String, dictFieldGroup.methodName(fieldId));
                            formBuildStringControl.dataSource(formBuildDataSource.id());
                            formBuildStringControl.dataMethod(dictFieldGroup.methodName(fieldId));
                            break;
                        case Types::Int64:
                            formBuildInt64Control = formBuildGridControl.addControl(FormControlType::Int64, dictFieldGroup.methodName(fieldId));
                            formBuildInt64Control.dataSource(formBuildDataSource.id());
                            formBuildInt64Control.dataMethod(dictFieldGroup.methodName(fieldId));
                            break;
                        case Types::Integer:
                            formBuildIntControl = formBuildGridControl.addControl(FormControlType::Integer, dictFieldGroup.methodName(fieldId));
                            formBuildIntControl.dataSource(formBuildDataSource.id());
                            formBuildIntControl.dataMethod(dictFieldGroup.methodName(fieldId));
                            break;
                        case Types::Date:
                            formBuildDateControl = formBuildGridControl.addControl(FormControlType::Date, dictFieldGroup.methodName(fieldId));
                            formBuildDateControl.dataSource(formBuildDataSource.id());
                            formBuildDateControl.dataMethod(dictFieldGroup.methodName(fieldId));
                            break;
                        case Types::UtcDateTime:
                            formBuildDateTimeControl = formBuildGridControl.addControl(FormControlType::DateTime, dictFieldGroup.methodName(fieldId));
                            formBuildDateTimeControl.dataSource(formBuildDataSource.id());
                            formBuildDateTimeControl.dataMethod(dictFieldGroup.methodName(fieldId));
                            break;
                        case Types::Real:
                            formBuildRealControl = formBuildGridControl.addControl(FormControlType::Real, dictFieldGroup.methodName(fieldId));
                            formBuildRealControl.dataSource(formBuildDataSource.id());
                            formBuildRealControl.dataMethod(dictFieldGroup.methodName(fieldId));
                            break;
                        case Types::Time:
                            formBuildTimeControl = formBuildGridControl.addControl(FormControlType::Time, dictFieldGroup.methodName(fieldId));
                            formBuildTimeControl.dataSource(formBuildDataSource.id());
                            formBuildTimeControl.dataMethod(dictFieldGroup.methodName(fieldId));
                            break;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>OKCommandButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Common record = Lookup_ds.cursor();

            if (isSurrogate || extendedDataTypeName == extendedTypeStr(HcmPositionRecId))
            {
                element.parmSelectedValue(SysExpression::getDisplayValuesFromRecID(tableName, fieldName, record.RecId) + '||' + int642str(record.RecId));
            }
            else
            {
                element.parmSelectedValue(record.(relatedFieldId));
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CancelCommandButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            element.parmSelectedValue('');
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>Lookup</Name>
			<Table>LogisticsPostalAddress</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Address</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Apartment_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Building_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BuildingCompliment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>City</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CityKana_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CityRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CountryRegionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>County</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>District</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DistrictName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FlatId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HouseId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsPrivate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Latitude</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Location</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Longitude</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostBox</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrivateForParty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>State</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Street</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StreetId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StreetKana_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StreetNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TimeZone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ZipCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ZipCodeRecId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoNotify>No</AutoNotify>
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<AlwaysOnTop xmlns="">Yes</AlwaysOnTop>
		<Caption xmlns="">@SYS71749</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<HeightMode xmlns="">SizeToContent</HeightMode>
		<Pattern xmlns="">LookupGridOnly</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<SaveSize xmlns="">No</SaveSize>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">Lookup</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<WidthMode xmlns="">SizeToAvailable</WidthMode>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>LookupGrid</Name>
				<AllowEdit>No</AllowEdit>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToContent</HeightMode>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<DataSource>Lookup</DataSource>
				<MultiSelect>No</MultiSelect>
				<ShowRowLabels>No</ShowRowLabels>
				<Style>Tabular</Style>
				<VisibleRows>10</VisibleRows>
				<VisibleRowsMode>Fixed</VisibleRowsMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CommitGroup</Name>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>CommitButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>OKCommandButton</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>CommandButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Command>OK</Command>
								<DefaultButton>Yes</DefaultButton>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>CancelCommandButton</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>CommandButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Command>Cancel</Command>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalRight</ArrangeMethod>
						<Style>DialogCommitContainer</Style>
					</AxFormControl>
				</Controls>
				<FrameType>None</FrameType>
				<Style>DialogCommit</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>