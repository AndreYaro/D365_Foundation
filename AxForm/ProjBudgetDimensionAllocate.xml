<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProjBudgetDimensionAllocate</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
    [Form]
    public class ProjBudgetDimensionAllocate extends FormRun
    {
        boolean                 checkAll;
        boolean                 checkHours;
        boolean                 checkExpense;
        boolean                 checkItems;
        boolean                 checkFees;
        boolean                 checkHourRevenues;
        boolean                 checkExpenseRevenues;
        boolean                 checkItemRevenues;
        TransDate               fromAllocationDate;
        TransDate               toAllocationDate;
        ProjAllocationMethod    projAllocationMethod;
        ProjBudget              projBudget;
        ProjBudgetRevision      projBudgetRevision;

        FiscalCalendarYear      fiscalCalendarYear;
        recId                   fiscalCalendarId;

        boolean                 budgetAllocation;
        boolean                 revisionAllocation;

        #define.CurrentVersion(1)
        #localmacro.CurrentList
            checkAll,
            checkHours,
            checkExpense,
            checkItems,
            checkFees,
            checkHourRevenues,
            checkExpenseRevenues,
            checkItemRevenues,
            fromAllocationDate,
            toAllocationDate,
            projAllocationMethod
        #endmacro
}
]]></Source>
			</Method>
			<Method>
				<Name>checkRevisionAllocationDate</Name>
				<Source><![CDATA[
    public boolean checkRevisionAllocationDate(TransDate _fromDate)
    {
        ProjBudgetAllocationLine    projBudgetAllocationLine;
        ProjBudgetLine              projBudgetLine;
        FiscalCalendarPeriod        fiscalCalendarPeriod;

        if (revisionAllocation)
        {
            select firstonly StartDate from fiscalCalendarPeriod
            order by StartDate asc
                exists join projBudgetAllocationLine
                where (projAllocationMethod == ProjAllocationMethod::Periods &&
                       projBudgetAllocationLine.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId) ||
                      (projAllocationMethod == ProjAllocationMethod::Quarter &&
                       projBudgetAllocationLine.FiscalCalendarYear == fiscalCalendarPeriod.FiscalCalendarYear &&
                       projBudgetAllocationLine.Quarter            == fiscalCalendarPeriod.Quarter) ||
                      (projAllocationMethod == ProjAllocationMethod::Yearly &&
                       projBudgetAllocationLine.FiscalCalendarYear == fiscalCalendarPeriod.FiscalCalendarYear)
                    exists join projBudgetLine
                    where projBudgetLine.RecId == projBudgetAllocationLine.ProjBudgetLine &&
                          projBudgetLine.ProjBudget == projBudgetRevision.ProjBudget;

            if (fiscalCalendarPeriod.StartDate > _fromDate)
            {
                return checkFailed(strFmt("@SYS328257",fiscalCalendarPeriod.StartDate));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        super();

        xSysLastValue::saveLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives the value of transaction types group controls and assign them in respective field.
    /// </summary>
    private void getControlValues()
    {
        ProjBudgetLine projBudgetLine;
        ProjBudgetAllocationLine projBudgetAllocationLine;
        StartDate revisionDate;

        allTypes.value(checkAll);
        hours.value(checkHours);
        expense.value(checkExpense);
        items.value(checkItems);
        fees.value(checkFees);
        hourRevenues.value(checkHourRevenues);
        expenseRevenues.value(checkExpenseRevenues);
        itemRevenues.value(checkItemRevenues);

        fiscalCalendarId = Ledger::fiscalCalendar(CompanyInfo::current());

        if (budgetAllocation)
        {
            fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(fiscalCalendarId,DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

            if (fromAllocationDate || toAllocationDate)
            {
                fromDate.dateValue(fromAllocationDate);
                toDate.dateValue(toAllocationDate);
            }
            else
            {
                fromDate.dateValue(fiscalCalendarYear.StartDate);
                toDate.dateValue(fiscalCalendarYear.EndDate);
            }
        }
        else
        {
            revisionDate = DateTimeUtil::date(projBudgetRevision.RevisionDate);
            fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(fiscalCalendarId,revisionDate);

            fromDate.dateValue(revisionDate);
            toDate.dateValue(fiscalCalendarYear.EndDate);

            select firstonly RecId, ProjAllocationMethod from projBudgetLine
            where projBudgetLine.ProjBudget == projBudgetRevision.ProjBudget
                exists join projBudgetAllocationLine
                where projBudgetAllocationLine.ProjBudgetLine == projBudgetLine.RecId;

            if (projBudgetLine.RecId)
            {
                projAllocationMethod = projBudgetLine.ProjAllocationMethod;
                allocationMethod.visible(false);
            }
        }

        allocationMethod.selection(projAllocationMethod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value form controls from the <c>xSysLastValue</c>.
    /// </summary>
    public void init()
    {
        super();

        switch (element.args().dataset())
        {
            case tableNum(ProjBudget) :
                budgetAllocation = true;
                projBudget = element.args().record();
                break;

            case tableNum(ProjBudgetRevision) :
                revisionAllocation = true;
                projBudgetRevision = element.args().record();
                break;
        }

        xSysLastValue::getLast(this);

        this.getControlValues();

        bottomText.text(strFmt("@SYS311157","@SYS132072"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    void initParmDefault()
    {
        allocationMethod.selection(ProjAllocationMethod::Periods);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the data area ID.
    /// </summary>
    /// <returns>
    /// An object of <c>DataAreaID</c> type that determines the data area ID.
    /// </returns>
    dataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the design name of the object.
    /// </summary>
    /// <returns>
    /// An object of <c>Identifiername</c> type that determines the design name of the object.
    /// </returns>
    private identifierName lastValueDesignName()
    {
        ProjId projId;

        if (budgetAllocation)
        {
            projId = projBudget.RootProjId;
        }
        else
        {
            projId = ProjBudget::find(projBudgetRevision.ProjBudget).RootProjId;
        }

        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the identifier name of the object.
    /// </summary>
    /// <returns>
    /// An object of <c>Identifiername</c> type that determines the name of the object.
    /// </returns>
    private identifierName lastValueElementName()
    {
        return this.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the type of element.
    /// </summary>
    /// <returns>
    /// An object <c>UtilElementType</c> type defining the type of object.
    /// </returns>
    private UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the current user ID.
    /// </summary>
    /// <returns>
    /// The user ID of the current user.
    /// </returns>
    private userId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markAllTypeCheckBox</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks or unchecks the All Types checkbox based on other transaction types checkboxes.
    /// </summary>
    public void markAllTypeCheckBox()
    {
        if (hours.checked() && expense.checked() && items.checked() && fees.checked() && hourRevenues.checked() && expenseRevenues.checked() && itemRevenues.checked())
        {
            allTypes.checked(true);
        }
        else
        {
            allTypes.checked(false);
        }

        if (hours.checked() || expense.checked() || items.checked() || fees.checked() || hourRevenues.checked() || expenseRevenues.checked() || itemRevenues.checked())
        {
            allocate.enabled(true);
        }
        else
        {
            allocate.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markTranactionTypeCheckBox</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks or uncheck the transaction type checks box.
    /// </summary>
    public void markTranactionTypeCheckBox()
    {
        hours.checked(alltypes.checked());
        expense.checked(alltypes.checked());
        items.checked(alltypes.checked());
        fees.checked(alltypes.checked());
        hourRevenues.checked(alltypes.checked());
        expenseRevenues.checked(alltypes.checked());
        itemRevenues.checked(alltypes.checked());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        this.setControlValues();

        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>runBudgetAllocation</Name>
				<Source><![CDATA[
    public void runBudgetAllocation()
    {
        ProjBudgetManager projBudgetManager;
        ProjBudgetLine    projBudgetLine;
        boolean           doAllocation = true;
        FormRun           run = element.args().caller();
        str               menuItemStr;
        MenuFunction      menuFunction;
        Args              argsProjBudget = new Args();

        projBudgetManager = new ProjBudgetManager();

        select firstonly RecId from projBudgetLine
        where projBudgetLine.ProjBudget == projBudget.RecId;

        if (!projBudgetLine.RecId)
        {
            doAllocation = checkFailed("@SYS310806");
        }

        if (doAllocation && projBudget.allowEditAllocationButton())
        {
            if (DialogButton::No == Box::yesNo("@SYS300485", DialogButton::No))
            {
                doAllocation = false;
            }
        }

        if (doAllocation)
        {
            projBudgetManager.createAllocationLine(checkHours, checkExpense, checkItems, checkFees,
                                                  checkHourRevenues, checkExpenseRevenues,
                                                  checkItemRevenues, fromAllocationDate, toAllocationDate,
                                                  projBudget, allocationMethod.selection());

           run.dataSource(2).init();
           argsProjBudget.record(element.args().record());

           menuItemStr = menuitemDisplayStr(ProjEditUncommittedAllocation);
           menuFunction = new MenuFunction(menuItemStr, MenuItemType::Display);
           menuFunction.run(argsProjBudget);

           element.closeOk();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runRevisionAllocation</Name>
				<Source><![CDATA[
    public void runRevisionAllocation()
    {
        ProjBudgetManager         projBudgetManager;
        ProjBudgetRevisionLine    projBudgetRevisionLine;
        MenuFunction              menuFunction;

        boolean                   doAllocation = true;
        Args                      argsProjBudgetRevision = new Args();

        projBudgetManager = new ProjBudgetManager();

        select firstonly RecId from projBudgetRevisionLine
        where projBudgetRevisionLine.ProjBudgetRevision == projBudgetRevision.RecId;

        if (!projBudgetRevisionLine.RecId)
        {
            doAllocation = checkFailed("@SYS328256");
        }

        if (doAllocation && projBudgetRevision.allowEditAllocationButton())
        {
            if (DialogButton::No == Box::yesNo("@SYS300485", DialogButton::No))
            {
                doAllocation = false;
            }
        }

        if (doAllocation)
        {
            projBudgetManager.createAllocationLine(checkHours, checkExpense, checkItems, checkFees,
                                                  checkHourRevenues, checkExpenseRevenues,
                                                  checkItemRevenues, fromAllocationDate, toAllocationDate,
                                                  projBudgetRevision, allocationMethod.selection());

           argsProjBudgetRevision.record(element.args().record());

           menuFunction = new MenuFunction(menuitemDisplayStr(ProjEditUncommittedRevisionAllocation), MenuItemType::Display);
           menuFunction.run(argsProjBudgetRevision);

           element.closeOK();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the value of transaction types group controls.
    /// </summary>
    public void setControlValues()
    {
        if (fromDate.dateValue() > toDate.dateValue())
        {
            throw error("@SYS16982");
        }

        checkAll = allTypes.checked();
        checkHours = hours.checked();
        checkExpense = expense.checked();
        checkItems = items.checked();
        checkFees = fees.checked();
        checkHourRevenues = hourRevenues.checked();
        checkExpenseRevenues = expenseRevenues.checked();
        checkItemRevenues = itemRevenues.checked();

        fromAllocationDate = fromDate.dateValue();
        toAllocationDate = toDate.dateValue();

        projAllocationMethod = allocationMethod.selection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>AllTypes</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Performs the operation on the selection of click on the control.
        /// </summary>
        public void clicked()
        {
            super();

            allocate.enabled(alltypes.checked());

            element.markTranactionTypeCheckBox();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Hours</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            element.markAllTypeCheckBox();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Expense</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            element.markAllTypeCheckBox();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Items</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            element.markAllTypeCheckBox();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Fees</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            element.markAllTypeCheckBox();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpenseRevenues</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            element.markAllTypeCheckBox();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HourRevenues</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            element.markAllTypeCheckBox();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ItemRevenues</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            element.markAllTypeCheckBox();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Allocate</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Calls methods from this class to create allocation lines.
        /// </summary>
        void clicked()
        {
            element.setControlValues();

            if (!( checkHours || checkExpense || checkItems||
                checkFees || checkHourRevenues ||
                checkExpenseRevenues ||  checkItemRevenues))
            {
                checkFailed("@SYS310805");
            }
            else
            {
                if (budgetAllocation)
                {
                    element.runBudgetAllocation();
                }
                else if (revisionAllocation)
                {
                    element.runRevisionAllocation();
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<BackgroundColor xmlns="">WindowBackground</BackgroundColor>
		<Caption xmlns="">@SYS310797</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<SaveSize xmlns="">No</SaveSize>
		<Style xmlns="">Dialog</Style>
		<WindowResize xmlns="">Fixed</WindowResize>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>StaticText2</Name>
				<ElementPosition>536870910</ElementPosition>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<FilterExpression>%1</FilterExpression>
				<Top>0</Top>
				<TopMode>TopEdge</TopMode>
				<Type>StaticText</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<BackgroundColorRGB>
					<Red>192</Red>
					<Green>192</Green>
					<Blue>192</Blue>
				</BackgroundColorRGB>
				<ColorScheme>RGB</ColorScheme>
				<FontSize>13</FontSize>
				<ForegroundColorRGB>
					<Red>0</Red>
					<Green>51</Green>
					<Blue>153</Blue>
				</ForegroundColorRGB>
				<Text>@Proj:ProjBudgetDimensionAllocateTopText</Text>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FormGroupControl2</Name>
				<Pattern>FillText</Pattern>
				<PatternVersion>UX7 1.0</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStaticTextControl">
						<Name>bottomText</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1717986916</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>StaticText</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DisplayLength>120</DisplayLength>
						<DisplayLengthMode>Fixed</DisplayLengthMode>
						<Text></Text>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>MainGroup</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>DateParams</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>fromDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741820</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>TransDate</ExtendedDataType>
								<Label>@SYS311252</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>toDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1342177275</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>TransDate</ExtendedDataType>
								<Label>@SYS311253</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>AllocationMethod</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612732</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<EnumType>ProjAllocationMethod</EnumType>
								<Label>@SYS311254</Label>
								<Items />
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>TransactionTypes</Name>
						<ElementPosition>1879048189</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>AllTypes</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS311251</Label>
							</AxFormControl>
						</Controls>
						<Caption>@SYS311255</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Costs</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>Hours</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS300573</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>Expense</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS300574</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>Items</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2013265918</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS300575</Label>
							</AxFormControl>
						</Controls>
						<Caption>@SYS40781</Caption>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Revenues</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>Fees</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1386916521</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS331508</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>ExpenseRevenues</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2013265918</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS300577</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>HourRevenues</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2080374782</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS300576</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>ItemRevenues</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2113929214</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS300578</Label>
							</AxFormControl>
						</Controls>
						<Caption>@SYS3583</Caption>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Left>0</Left>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>Allocate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Button</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<DefaultButton>Yes</DefaultButton>
						<Text>@SYS132072</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelCommandButton</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>