<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProjBudgetBalances</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ProjBudgetBalances extends FormRun
{
    #DEFINE.emptyString('')
    ProjTable                           projTable;
    ProjBudget                          projBudget;
    ProjBudgetBalanceInterval           projBudgetBalanceInterval;
    TransDate                           fromDate;
    TransDate                           toDate;
    ProjControlId                       projControlId;
    ProjBudgetBalancesGroupByOptions    ProjBudgetBalancesGroupByOption;
    boolean                             includeSubProjects = true;
    ProjTree                            projTree;
    ProjBudgetRevision                  projBudgetRevision;
    tmpProjBudgetBalances               tmpProjBudgetBalancesCost;
    tmpProjBudgetBalances               tmpProjBudgetBalancesRevenue;
    boolean                             useCache = false;
    ProjBudgetBalancesSessionContextDataContract sessionContextCost = ProjBudgetBalancesSessionContextDataContract::construct();
    ProjBudgetBalancesSessionContextDataContract sessionContextRevenue = ProjBudgetBalancesSessionContextDataContract::construct();

    private boolean enableProjMultipleContractLinesForProjectFeature = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

    // NetPerformance
    [FormObservable]
    AmountCur                           originalTargetProfit;
    [FormObservable]
    AmountCur                           revisedTargetProfit;
    [FormObservable]
    AmountCur                           currentPerformance;
    [FormObservable]
    AmountCur                           originalBudget;
    [FormObservable]
    AmountCur                           revisedBudget;
    [FormObservable]
    AmountCur                           currentCost;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        FormRun     callerForm = element.args().caller() as FormRun;
        IProjIdSelectable projIdSelectable;
        ProjId      selectedProjId,
                    rootProjId;

        fromDate = dateNull();
        toDate = dateMax();

        if (callerForm.name() == formStr(ProjBudget))
        {
            projBudget = element.args().record();
            rootProjId = ProjTable::getRootProjId(projBudget.RootProjId);
        }
        else if (callerForm.name() == formStr(ProjBudgetRevision) || callerForm.name() == formStr(ProjBudgetRevisionList))
        {
            projBudgetRevision = element.args().record();
            rootProjId = ProjTable::getRootProjId(ProjBudget::find(projBudgetRevision.ProjBudget).RootProjId);
        }
        else
        {
            projTable = element.args().record();
            rootProjId = ProjTable::getRootProjId(projTable.ProjId);
        }

        super();

        projIdSelectable = callerForm as IProjIdSelectable;
        if (projIdSelectable)
        {
            selectedProjId = projIdSelectable.projectId();
        }
        else
        {
            selectedProjId = rootProjId;
        }

        projTable = ProjTable::find(selectedProjId);
        this.setUpProjTree(selectedProjId, rootProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDateRange</Name>
				<Source><![CDATA[
    public boolean validateDateRange(FromDate _fromDate, toDate _toDate)
    {
        boolean valid = true;

        if (_toDate < _fromDate)
        {
            valid = checkFailed("@SYS343361");
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadProjBudgetBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the budget balances for the current <c>ProjTable</c>
    /// </summary>
    public void loadProjBudgetBalances()
    {
        this.setNetPerformanceTabVisiblility(projTable);
        HGridRevenue.visible(this.showRevenue());
        this.refreshProjBudgetBalances();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBalances</Name>
				<Source><![CDATA[
    protected tmpProjBudgetBalances getBalances(ProjBudgetLineType _projBudgetLineType)
    {
        tmpProjBudgetBalances balances = ProjBudgetManager::getProjBudgetBalancesDetailed(projTable.ProjId, includeSubProjects, projBudgetBalanceInterval, _projBudgetLineType, fromDate, toDate, projControlId);

        return balances;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showRevenue</Name>
				<Source><![CDATA[
    protected boolean showRevenue()
    {
        ProjBudgetLine budgetLine;
        str projIdFilter = projTable.ProjId;

        if (includeSubProjects)
        {
            projIdFilter = strFmt('*%1*', projTable.ProjId);
        }

        select firstonly RecId from budgetLine
            where budgetLine.ProjId like projIdFilter &&
                  budgetLine.ProjBudgetLineType == ProjBudgetLineType::Revenue;
            
        return budgetLine.RecId &&
                projTable &&
                (projTable.Type == ProjType::TimeMaterial ||
                 projTable.Type == ProjType::FixedPrice ||
                 (element.enableProjMultipleContractLinesForProjectFeature && projTable.ProjInvoiceProjId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBalances</Name>
				<Source><![CDATA[
    protected void calculateBalances()
    {
        if (useCache)
        {
            // Always recalculate totals
            delete_from tmpProjBudgetBalancesCost
                where !tmpProjBudgetBalancesCost.CategoryId;

            update_recordset tmpProjBudgetBalancesCost Setting Parent = 0;

            delete_from tmpProjBudgetBalancesRevenue
                where !tmpProjBudgetBalancesRevenue.CategoryId;

            update_recordset tmpProjBudgetBalancesRevenue Setting Parent = 0;
        }
        else
        {
            tmpProjBudgetBalancesCost = this.getBalances(projBudgetLineType::Cost);
            if (this.showRevenue())
            {
                tmpProjBudgetBalancesRevenue = this.getBalances(projBudgetLineType::Revenue);
            }
        }

        // Create and calculate groupings and totals
        this.applyGrouping(tmpProjBudgetBalancesCost, projBudgetLineType::Cost);
        if (this.showRevenue())
        {
            this.applyGrouping(tmpProjBudgetBalancesRevenue, projBudgetLineType::Revenue);
        }

        // Set cache flag
        useCache = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ApplyGrouping</Name>
				<Source><![CDATA[
    protected void ApplyGrouping(TmpProjBudgetBalances _tmpProjBudgetBalances, projBudgetLineType _projBudgetLineType)
    {
        ProjBudgetBalancesSummarizer    summarizer;
        summarizer = new ProjBudgetBalancesSummarizer();
        summarizer.applyGrouping(_tmpProjBudgetBalances, projBudgetBalancesGroupByOption, _projBudgetLineType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshHGrid</Name>
				<Source><![CDATA[
    public void refreshHGrid(HierarchicalGridCommonControl _hGrid, ProjBudgetBalancesSessionContextDataContract _sessionContext, TmpProjBudgetBalances _tmpProjBudgetBalances)
    {
        _sessionContext.parmProjBudgetBalanceInterval(projBudgetBalanceInterval);
        _sessionContext.parmFromDate(fromDate);
        _sessionContext.parmToDate(toDate);
        _sessionContext.parmProjId(projTable.ProjId);
        _sessionContext.parmIncludeSubProjects(includeSubProjects);
        _sessionContext.parmProjBudgetBalances(_tmpProjBudgetBalances);
        _sessionContext.parmGroupBy(projBudgetBalancesGroupByOption);

        _hGrid.parmSessionContext(_sessionContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshProjBudgetBalances</Name>
				<Source><![CDATA[
    public void refreshProjBudgetBalances()
    {
        TmpProjBudgetBalances   tmpProjBudgetBalances;

        this.calculateBalances();

        this.refreshHGrid(HGridCost, sessionContextCost, tmpProjBudgetBalancesCost);
        if (this.showRevenue())
        {
            this.refreshHGrid(HgridRevenue, sessionContextRevenue, tmpProjBudgetBalancesRevenue);
        }
        element.refreshSum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayOriginalTargetProfit</Name>
				<Source><![CDATA[
    public display AmountCur displayOriginalTargetProfit()
    {
        return originalTargetProfit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRevisedTargetProfit</Name>
				<Source><![CDATA[
    public display AmountCur displayRevisedTargetProfit()
    {
        return revisedTargetProfit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCurrentPerformance</Name>
				<Source><![CDATA[
    public display AmountCur displayCurrentPerformance()
    {
        return currentPerformance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVarianceFromRevisedTargets</Name>
				<Source><![CDATA[
    public display AmountCur displayVarianceFromRevisedTargets()
    {
        return currentPerformance - revisedTargetProfit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayOriginalTargetProfitPercent</Name>
				<Source><![CDATA[
    public display Percent displayOriginalTargetProfitPercent()
    {
        return originalBudget ? originalTargetProfit /  originalBudget * 100 : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRevisedTargetProfitPercent</Name>
				<Source><![CDATA[
    public display Percent displayRevisedTargetProfitPercent()
    {
        return revisedBudget ? revisedTargetProfit / revisedBudget * 100 : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCurrentPerformancePercent</Name>
				<Source><![CDATA[
    public display Percent displayCurrentPerformancePercent()
    {
        return currentCost ? currentPerformance / currentCost * 100 : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVarianceFromRevisedTargetsPercent</Name>
				<Source><![CDATA[
    public display Percent displayVarianceFromRevisedTargetsPercent()
    {
        return this.displayCurrentPerformancePercent() - this.displayRevisedTargetProfitPercent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshSum</Name>
				<Source><![CDATA[
    public void refreshSum()
    {
        select firstonly tmpProjBudgetBalancesRevenue where !tmpProjBudgetBalancesRevenue.Parent;
        select firstonly tmpProjBudgetBalancesCost where !tmpProjBudgetBalancesCost.Parent;

        originalTargetProfit = tmpProjBudgetBalancesRevenue.OrigBudget - tmpProjBudgetBalancesCost.OrigBudget;
        revisedTargetProfit = tmpProjBudgetBalancesRevenue.RevisedBudget - tmpProjBudgetBalancesCost.RevisedBudget;
        currentCost = (tmpProjBudgetBalancesCost.ActualRevAndCosts + tmpProjBudgetBalancesCost.CommittedCosts);
        currentPerformance = (tmpProjBudgetBalancesRevenue.ActualRevAndCosts + tmpProjBudgetBalancesRevenue.CommittedCosts) - currentCost;
        originalBudget = tmpProjBudgetBalancesRevenue.OrigBudget;
        revisedBudget = tmpProjBudgetBalancesRevenue.RevisedBudget;

        NetPerformanceAmounts.visible(netPerformance.selection() == NetPerformance::Amount);
        NetPerformancePercents.visible(netPerformance.selection() == NetPerformance::Percentage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        projControlId                   = costTemplate.valueStr();
        projBudgetBalanceInterval       = filter.selection();
        projBudgetBalancesGroupByOption = groupByOption.selection();

        element.loadProjBudgetBalances();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNetPerformanceTabVisiblility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the visibility of the Net performance tab based on
    /// the selected project.
    /// </summary>
    /// <param name="_projTable">
    /// The selected <c>ProjTable</c>.
    /// </param>
    public void setNetPerformanceTabVisiblility(ProjTable _projTable)
    {
        NetPerformanceGroup.visible(_projTable &&
            (_projTable.Type == ProjType::TimeMaterial ||
             (element.enableProjMultipleContractLinesForProjectFeature &&
            ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForBillingMethod(_projTable.ProjId, _projTable.ProjInvoiceProjId, ProjContractBillingMethod::TimeMaterial))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpProjTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProjTree</c> as well as the vertical splitter.
    /// </summary>
    /// <param name="_selectedProjId">
    /// The currently selected project id.
    /// </param>
    /// <param name="_rootProjId">
    /// The root project id.
    /// </param>
    /// <remarks>
    /// The <c>ProjTree</c> and the vertical splitter will only be initialized
    /// if the project associated with the root project id it has sub projects.
    /// </remarks>
    private void setUpProjTree(ProjId _selectedProjId, ProjId _rootProjId)
    {
        boolean     showProjTree;
        ProjTable   projTableLocal;

        select count(RecId) from projTableLocal
            where projTableLocal.ParentId == _rootProjId;

        showProjTree = projTableLocal.RecId > 0;

        vSplitter.visible(showProjTree);
        treeGroup.visible(showProjTree);
        CheckBoxIncludeSubProjects.visible(showProjTree);

        if (showProjTree)
        {
            //Initialize splitter
            projTree = ProjTree::construct(tree, ProjTreeType::ProjectHierarchy, _rootProjId);
            projTree.parmCreateMaster(true);
            projTree.setupChart();
            projTree.selectNode(_selectedProjId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCostTemplateCtrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the cost template field. Allow edit and set default value
    /// if the current <c>ProjBudgetBalancesGroupByOptions</c> is applicable.
    /// </summary>
    public void updateCostTemplateCtrl()
    {
        boolean     costTemplateApplicable;
        ProjControl projControl;

        projControlId = #emptystring;
        costTemplateApplicable = ProjBudgetBalancesGroupByOptions::CostTemplate == groupByOption.selection();
        costTemplate.allowEdit(costTemplateApplicable);

        if (costTemplateApplicable && costTemplate.text() == #emptyString)
        {
            select firstonly ControlId from projControl;
            if (projControl)
            {
                costTemplate.text(projControl.ControlId);
                projControlId = projControl.ControlId;
            }
        }
        else
        {
            costTemplate.text(#emptyString);
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>Tree</Name>
				<Type>Tree</Type>
				<Methods>
					<Method>
						<Name>expanding</Name>
						<Source><![CDATA[
        public boolean expanding(int _idx, FormTreeExpand _action, anytype _data)
        {
            return projTree.expanding(_idx, _action, _data);
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged(FormTreeItem _oldItem, FormTreeItem _newItem, FormTreeSelect _how)
        {
            ProjId selectedProjId;

            super(_oldItem, _newItem, _how);

            if (_how != FormTreeSelect::Unknown)
            {
                selectedProjId = projTree.getSelection();
                projTable = ProjTable::find(selectedProjId);
                useCache = false;
                element.loadProjBudgetBalances();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GroupByOption</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        public int selectionChange()
        {
            int ret;

            ret = super();

            element.updateCostTemplateCtrl();
            // If moving away from CostTemplate, cache needs to be invalidated
            if (projBudgetBalancesGroupByOption == ProjBudgetBalancesGroupByOptions::CostTemplate)
            {
                useCache = false;
            }
            projBudgetBalancesGroupByOption = groupByOption.selection();
            // If moving to CostTemplate, cache needs to be invalidated
            if (projBudgetBalancesGroupByOption == ProjBudgetBalancesGroupByOptions::CostTemplate)
            {
                useCache = false;
            }

            element.refreshProjBudgetBalances();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CostTemplate</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            projControlId = costTemplate.text();

            useCache = false;
            element.refreshProjBudgetBalances();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Filter</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            switch (filter.selection())
            {
                case ProjBudgetBalanceInterval::CustomRange:
                    DateFrom.visible(true);
                    DateTo.visible(true);
                    OK.visible(true);
                    break;

                default:
                    DateFrom.visible(false);
                    DateTo.visible(false);
                    OK.visible(false);
                    projBudgetBalanceInterval = filter.selection();
                    fromDate = dateNull();
                    toDate = dateMax();

                    useCache = false;
                    element.refreshProjBudgetBalances();
                    break;
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CheckBoxIncludeSubProjects</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            includeSubProjects = this.value();
            useCache = false;
            element.refreshProjBudgetBalances();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OK</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            if (element.validateDateRange(dateFrom.dateValue(), dateTo.dateValue()))
            {
                super();

                ProjBudgetBalanceInterval = filter.selection();
                fromDate = dateFrom.dateValue();
                toDate = dateTo.dateValue();

                useCache = false;
                element.refreshProjBudgetBalances();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>NetPerformance</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.refreshProjBudgetBalances();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<BackgroundColor xmlns="">DynBackgroundWhite</BackgroundColor>
		<Caption xmlns="">@SYS302863</Caption>
		<Height xmlns="">768</Height>
		<Pattern xmlns="">Custom</Pattern>
		<SaveSize xmlns="">No</SaveSize>
		<Scrollbars xmlns="">Yes</Scrollbars>
		<StatusBarStyle xmlns="">Simple</StatusBarStyle>
		<Style xmlns="">SimpleListDetails</Style>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Width xmlns="">980</Width>
		<WindowResize xmlns="">Dynamic</WindowResize>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>FormActionPaneControl1</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>TreeGroup</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>858993458</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>300</Width>
				<WidthMode>Manual</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTreeControl">
						<Name>Tree</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Tree</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
					</AxFormControl>
				</Controls>
				<LeftMargin>0</LeftMargin>
				<LeftMarginMode>Fixed</LeftMarginMode>
				<RightMargin>0</RightMargin>
				<RightMarginMode>Fixed</RightMarginMode>
				<FramePosition>Inside</FramePosition>
				<FrameType>None</FrameType>
				<Style>SidePanel</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>VSplitter</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1288490187</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>Auto</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<Style>SplitterVerticalContainer</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Header</Name>
				<ElementPosition>1288490187</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>GroupByOption</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>751619276</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<EnumType>ProjBudgetBalancesGroupByOptions</EnumType>
						<Label>@SYS99522</Label>
						<Selection>1</Selection>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CostTemplate</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>876889155</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>ProjControlId</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>Filter</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1127428914</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<EnumType>ProjBudgetBalanceInterval</EnumType>
						<Label>@SYS81048</Label>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>CheckBoxIncludeSubProjects</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS321414</Label>
						<Value>1</Value>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>DateFrom</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Date</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>TransDate</ExtendedDataType>
						<Label>@SYS118353</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>DateTo</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Date</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>TransDate</ExtendedDataType>
						<Label>@SYS101261</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>OK</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Button</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>ImageOnly</ButtonDisplay>
						<Text>@SYS2163</Text>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<BackStyle>Opaque</BackStyle>
				<BackgroundColor>DynBackgroundBlue</BackgroundColor>
				<FrameType>None</FrameType>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>FormTabControl1</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabPageCost</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl>
								<Name>HGridCost</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<FormControlExtension>
									<Name>HierarchicalGridCommonControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>serverInteractionClassName</Name>
											<Type>String</Type>
											<Value>ProjBudgetBalancesServerInteraction</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>interactionContextClassName</Name>
											<Type>String</Type>
											<Value>ProjBudgetBalancesInteractionContextDataContract</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>javaScriptFiles</Name>
											<Type>String</Type>
											<Value>ProjBudgetBalancesCostView.js</Value>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
							</AxFormControl>
						</Controls>
						<Caption>@SYS40781</Caption>
						<FastTabExpanded>Yes</FastTabExpanded>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabPageRevenue</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl>
								<Name>HGridRevenue</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<FormControlExtension>
									<Name>HierarchicalGridCommonControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>serverInteractionClassName</Name>
											<Type>String</Type>
											<Value>ProjBudgetBalancesServerInteraction</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>interactionContextClassName</Name>
											<Type>String</Type>
											<Value>ProjBudgetBalancesInteractionContextDataContract</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>javaScriptFiles</Name>
											<Type>String</Type>
											<Value>ProjBudgetBalancesRevenueView.js</Value>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
							</AxFormControl>
						</Controls>
						<Caption>@SYS3583</Caption>
						<FastTabExpanded>Yes</FastTabExpanded>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>NetPerformanceGroup</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ExtendedStyle>group_totalsContainer</ExtendedStyle>
				<Type>Group</Type>
				<Visible>No</Visible>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormRadioButtonControl">
						<Name>NetPerformance</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>RadioButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Columns>2</Columns>
						<EnumType>NetPerformance</EnumType>
						<FrameType>None</FrameType>
						<ViewEditMode>Edit</ViewEditMode>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>NetPerformanceAmounts</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>OriginalTargetProfit</Name>
								<HelpText>@FieldDescriptions_ProjectManagementAndAccounting:ProjBudgetBalances_OriginalTargetProfit</HelpText>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displayOriginalTargetProfit</DataMethod>
								<Label>@SYS339495</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>RevisedTargetProfit</Name>
								<HelpText>@FieldDescriptions_ProjectManagementAndAccounting:ProjBudgetBalances_RevisedTargetProfit</HelpText>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displayRevisedTargetProfit</DataMethod>
								<Label>@SYS339496</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>CurrentPerformance</Name>
								<HelpText>@FieldDescriptions_ProjectManagementAndAccounting:ProjBudgetBalances_CurrentPerformance</HelpText>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displayCurrentPerformance</DataMethod>
								<Label>@SYS339492</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>VarianceFromRevisedTargets</Name>
								<HelpText>@FieldDescriptions_ProjectManagementAndAccounting:ProjBudgetBalances_VarianceFromRevisedTargets</HelpText>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displayVarianceFromRevisedTargets</DataMethod>
								<Label>@SYS339493</Label>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<ColumnsMode>Fill</ColumnsMode>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>NetPerformancePercents</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>OriginalTargetProfitPct</Name>
								<HelpText>@FieldDescriptions_ProjectManagementAndAccounting:ProjBudgetBalances_OriginalTargetProfitPct</HelpText>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displayOriginalTargetProfitPercent</DataMethod>
								<Label>@SYS339495</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>RevisedTargetProfitPct</Name>
								<HelpText>@FieldDescriptions_ProjectManagementAndAccounting:ProjBudgetBalances_RevisedTargetProfitPct</HelpText>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displayRevisedTargetProfitPercent</DataMethod>
								<Label>@SYS339496</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>CurrentPerformancePct</Name>
								<HelpText>@FieldDescriptions_ProjectManagementAndAccounting:ProjBudgetBalances_CurrentPerformancePct</HelpText>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displayCurrentPerformancePercent</DataMethod>
								<Label>@SYS339492</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>VarianceFromRevisedTargetsPct</Name>
								<HelpText>@FieldDescriptions_ProjectManagementAndAccounting:ProjBudgetBalances_VarianceFromRevisedTargetsPct</HelpText>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displayVarianceFromRevisedTargetsPercent</DataMethod>
								<Label>@SYS339493</Label>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<ColumnsMode>Fill</ColumnsMode>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<ColumnsMode>Fill</ColumnsMode>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>