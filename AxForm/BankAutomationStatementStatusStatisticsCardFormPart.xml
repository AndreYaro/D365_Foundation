<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BankAutomationStatementStatusStatisticsCardFormPart</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BankAutomationStatementStatusStatisticsCardFormPart extends FormRun
{
    BankAutomationStatementFormViewMatchingStatusType matchingStatusType;
    BankStatementNetAmount statementStatusAmount;
    NumberOfRecords statementStatusLines;

}
]]></Source>
			</Method>
			<Method>
				<Name>refreshStatisticsContent</Name>
				<Source><![CDATA[
    internal void refreshStatisticsContent(boolean _resetFocus = false)
    {
        if (Amount && AmountLines)
        {
            BankStmtISOAccountStatement statementRecord;

            FormRun formRun = element.args().caller();

            if (formRun)
            {
                FormDataSource statmentDS = formRun.dataSource(formDataSourceStr(BankAutomationStatementForm, BankStmtISOAccountStatement));
                statementRecord = statmentDS.cursor();

                switch (element.args().menuItemName())
                {
                    case menuitemDisplayStr(BankAutomationStatementTotalCardFormPartMenuItem):
                        matchingStatusType = BankAutomationStatementFormViewMatchingStatusType::Total;
                        statementStatusAmount = statementRecord.calcNetAmount();
                        statementStatusLines = statementRecord.calcTotalLines();
                        AmountHeading.text("@Bank:Total");
                        AmountHeadingOnFocus.text("@Bank:Total");
                        ViewButton.text("@Bank:ViewTotal");
                        if (_resetFocus)
                        {
                            this.focusOnCard(true);
                        }
                        break;
                    case menuitemDisplayStr(BankAutomationStatementMatchedCardFormPartMenuItem):
                        matchingStatusType = BankAutomationStatementFormViewMatchingStatusType::Matched;
                        if (statementRecord.hasMatchedLine())
                        {
                            statementStatusAmount = statementRecord.calcMatchedAmount();
                            statementStatusLines = statementRecord.calcMatchedLines();
                        }
                        else
                        {
                            statementStatusAmount = 0;
                            statementStatusLines = 0;
                        }
                        AmountHeading.text("@Bank:Matched");
                        AmountHeadingOnFocus.text("@Bank:Matched");
                        ViewButton.text("@Bank:ViewMatched");
                        break;
                    case menuitemDisplayStr(BankAutomationStatementReconciledCardFormPartMenuItem):
                        matchingStatusType = BankAutomationStatementFormViewMatchingStatusType::Reconciled;
                        if (statementRecord.existReconciledBankStmtISOReportEntry())
                        {
                            statementStatusAmount = statementRecord.calcReconciledAmount();
                            statementStatusLines = statementRecord.calcReconciledLines();
                        }
                        else
                        {
                            statementStatusAmount = 0;
                            statementStatusLines = 0;
                        }
                        AmountHeading.text("@SYS68025");
                        AmountHeadingOnFocus.text("@SYS68025");
                        ViewButton.text("@Bank:ViewReconciled");
                        break;
                    default:
                        break;
                }

                Amount.text(strFmt("@Bank:SpaceConcatenateString", strFmt("%1", statementStatusAmount), statementRecord.AccountCurrency));
                AmountLines.text(strFmt("@Bank:SpaceConcatenateString", any2Str(statementStatusLines), statementStatusLines > 1 ? "@Bank:Lines": "@Bank:Line"));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
        this.refreshStatisticsContent(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>focusOnCard</Name>
				<Source><![CDATA[
    internal void focusOnCard(boolean _focus)
    {
        if (ViewButton && AmountHeading && AmountHeadingOnFocus)
        {
            ViewButton.enabled(!_focus);
            AmountHeading.visible(!_focus);
            AmountHeadingOnFocus.visible(_focus);
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>ViewButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            FormRun formRun = element.args().caller();
            if (formRun)
            {
                BankAutomationStatementFormView formView = formRun.getFormView();
                formView.switchMatchingStatusFormPart(matchingStatusType);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Pattern xmlns="">Custom</Pattern>
		<Style xmlns="">FormPart</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>StatusStatisticsCard</Name>
				<AllowEdit>No</AllowEdit>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ExtendedStyle>BusinessCard</ExtendedStyle>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStaticTextControl">
						<Name>AmountHeading</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Enabled>No</Enabled>
						<ExtendedStyle>staticText_defaultBoldFont</ExtendedStyle>
						<Type>StaticText</Type>
						<FormControlExtension
							i:nil="true" />
						<Text>@Bank:Total</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStaticTextControl">
						<Name>AmountHeadingOnFocus</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Enabled>No</Enabled>
						<ExtendedStyle>staticText_defaultBoldFont</ExtendedStyle>
						<Type>StaticText</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Text>@Bank:Total</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStaticTextControl">
						<Name>AmountLines</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Enabled>No</Enabled>
						<ExtendedStyle>Heading</ExtendedStyle>
						<Type>StaticText</Type>
						<FormControlExtension
							i:nil="true" />
						<Text>@Bank:ZeroLine</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStaticTextControl">
						<Name>Amount</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Enabled>No</Enabled>
						<Type>StaticText</Type>
						<FormControlExtension
							i:nil="true" />
						<Text></Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>ViewButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Button</Type>
						<FormControlExtension
							i:nil="true" />
						<Text>@SYS5252</Text>
					</AxFormControl>
				</Controls>
				<AllowUserSetup>No</AllowUserSetup>
				<ArrangeMethod>None</ArrangeMethod>
				<Style>Card</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>