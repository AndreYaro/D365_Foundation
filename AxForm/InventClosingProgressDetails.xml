<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>InventClosingProgressDetails</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class InventClosingProgressDetails extends FormRun
{
}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
        this.updateInventClosingProgressDetails();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventClosingProgressDetails</Name>
				<Source><![CDATA[
    public void updateInventClosingProgressDetails()
    {
        InventCostBundleList inventCostBundleList;
        InventClosingTmpProgressStatus calculationStatusTemp;
        InventClosing argRecord = element.args().record();
        InventClosing inventClosing = InventClosing::find(argRecord.Voucher, argRecord.TransDate);
        
        int bundleCount = 0;

        ClosingStatusCombo.selection(inventClosing.InventCostStatus);
        ClosingVoucher.text(inventClosing.Voucher);

        while select RecId, ProcessingState from inventCostBundleList
            order by RecId asc
            where inventCostBundleList.InventClosing == inventClosing.RecId
        {
            bundleCount++;

            InventCostList inventCostList;

            select firstonly BOMLevel from inventCostList
                where inventCostList.Voucher == inventClosing.Voucher
                    && inventCostList.Bundle == inventCostBundleList.RecId;

            calculationStatusTemp.Bundle = inventCostBundleList.RecId;
            calculationStatusTemp.Task = strFmt("@SCM:InventClosingProgressDetailsCalculationBundleTaskName", bundleCount);
            calculationStatusTemp.BOMLevel = inventCostList.BOMLevel;

            switch (inventCostBundleList.ProcessingState)
            {
                case InventCostBundleState::Ended:
                    calculationStatusTemp.Symbol = ImageReferenceSymbol::GreenCheck;
                    break;
                case InventCostBundleState::Processing:
                    calculationStatusTemp.Symbol = ImageReferenceSymbol::ProgressInnerLoop;
                    break;
                case InventCostBundleState::Waiting:
                    // Bundle not yet started - show nothing.
                    calculationStatusTemp.Symbol = null;      
            }
            calculationStatusTemp.insert();
        }

        if (bundleCount == 0)
        {
            // Force clear bundle detail because bundle selection grid 
            // will not be activated when there is no bundle.
            this.clearInventClosingProgressBungleDetails();
        }

        InventClosingTmpProgressStatusCalculation.setTmpData(calculationStatusTemp);
        InventClosingTmpProgressStatusCalculation_ds.executeQuery();

        if (inventClosing.InventCostStatus != InventCostStatus::Ended)
        {
            if (inventClosing.StopRunning)
            {
                if (inventClosing.StopOnError)
                {
                    CalculationStatusResult.text("@SCM:InventClosingProgressDetailsCalculationStatusFailed");
                }
                else
                {
                    CalculationStatusResult.text("@SCM:InventClosingProgressDetailsCalculationStatusPaused");
                }
            }
            else
            {
                CalculationStatusResult.text("@SCM:InventClosingProgressDetailsCalculationStatusProcessing");
            }
        }
        else
        {
            CalculationStatusResult.text("@SCM:InventClosingProgressDetailsCalculationStatusCompleted");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearInventClosingProgressBungleDetails</Name>
				<Source><![CDATA[
    public void clearInventClosingProgressBungleDetails()
    {
        CalculationBundleRecentlyProcessingItem.text('');
        CalculationBundleTotalItems.text('');
        CalculationBundleBOMLevel.text('');
        CalculationBundleBundleNumber.text('');
        CalculationBundleStartDateTime.dateTimeValue(Global::utcDateTimeNull());
        CalculationBundleEndDateTime.dateTimeValue(Global::utcDateTimeNull());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventClosingProgressBundleDetails</Name>
				<Source><![CDATA[
    public void updateInventClosingProgressBundleDetails()
    {
        InventCostList InventCostList;
        InventClosingTmpCostListItem inventCostListTemp;
        InventCostBundleList inventCostBundleList;

        var activeBundle = InventClosingTmpProgressStatusCalculation.Bundle;
        if (activeBundle)
        {
            int cnt = 0;
            select count(RecId) from InventCostList where InventCostList.Bundle == activeBundle;

            select StartTime, EndTime from inventCostBundleList where inventCostBundleList.RecId == activeBundle;

            CalculationBundleTotalItems.text(int642Str(InventCostList.RecId));
            CalculationBundleStartDateTime.dateTimeValue(inventCostBundleList.StartTime);
            CalculationBundleEndDateTime.dateTimeValue(inventCostBundleList.EndTime);

            select firstonly RecId, ItemId from InventCostList 
                order by StartDateTime desc
                where InventCostList.Bundle == activeBundle &&
                    InventCostList.InventCostListItemStatus != InventCostListItemStatus::Created;

            CalculationBundleRecentlyProcessingItem.text(InventCostList.RecId ? InventCostList.ItemId : '');

            CalculationBundleBOMLevel.text(int2Str(InventClosingTmpProgressStatusCalculation.BOMLevel));
            
            while select ItemId, StartDateTime, EndDateTime, InventCostListItemStatus
                    from InventCostList
                    where InventCostList.Bundle == activeBundle
            {
                cnt++;
                inventCostListTemp.ItemId = InventCostList.ItemId;
                inventCostListTemp.StartDateTime = InventCostList.StartDateTime;
                inventCostListTemp.EndDateTime = InventCostList.EndDateTime;
                inventCostListTemp.InventCostListItemStatus = InventCostList.InventCostListItemStatus;
                inventCostListTemp.insert();

            }
            CalculationBundleBundleNumber.text(InventClosingTmpProgressStatusCalculation.Task);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>activate</Name>
				<Source><![CDATA[
    public void activate(boolean _active)
    {
        // Selected InventClosing record is changed.
        if (_active)
        {
            this.updateInventClosingProgressDetails();
        }
        super(_active);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>InventClosingTmpProgressStatusCalculation</Name>
				<Methods>
					<Method>
						<Name>calculationStatusIcon</Name>
						<Source><![CDATA[
        display container calculationStatusIcon(InventClosingTmpProgressStatus _status)
        {
            return ImageReference::constructForSymbol(_status.Symbol).pack();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            // Selected calculation bundle is changed.
            var ret = super();
            element.updateInventClosingProgressBundleDetails();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>InventClosingTmpCostListItemSource</Name>
				<Methods>
					<Method>
						<Name>StatusIcon</Name>
						<Source><![CDATA[
        display container StatusIcon(InventClosingTmpCostListItem _list)
        {
            SymbolFontGlyphName symbol;
            if (_list.InventCostListItemStatus == InventCostListItemStatus::Finished)
            {
                symbol = ImageReferenceSymbol::GreenCheck;
            }
            return ImageReference::constructForSymbol(symbol).pack();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>RefreshButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        // Manually refreshing dialog.
        public void clicked()
        {
            element.updateInventClosingProgressDetails();
            element.updateInventClosingProgressBundleDetails();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>InventClosingTmpProgressStatusCalculation</Name>
			<Table>InventClosingTmpProgressStatus</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Result</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Step</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Symbol</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventClosingTmpCostListItemSource</Name>
			<Table>InventClosingTmpCostListItem</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BOMLevel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Bundle</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventCostListItemStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumOfIteration</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StartDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SCM:InventClosingProgressDetailsDialogCaption</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ClosingDetailsHeaderGroup</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>ClosingVoucher</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@SCM:InventClosingProgressDetailsClosingVoucherLabel</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>ClosingStatusCombo</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<EnumType>InventCostStatus</EnumType>
						<Label>@SCM:InventClosingProgressDetailsClosingStatusComboLabel</Label>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CalculationStatusResult</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<FastTabSummary>No</FastTabSummary>
						<Label>@SCM:InventClosingProgressDetailsClosingStatusResultLabel</Label>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CalculationStatusGroup</Name>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>CalculationStatusGrid</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Grid</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CalculationStep</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<Width>150</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>Task</DataField>
								<DataSource>InventClosingTmpProgressStatusCalculation</DataSource>
								<Label>@SCM:InventClosingProgressDetailsCalculationStatusGridCalculationStepLabel</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormImageControl">
								<Name>CalculationStatusIcon</Name>
								<Type>Image</Type>
								<Width>50</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>calculationStatusIcon</DataMethod>
								<DataSource>InventClosingTmpProgressStatusCalculation</DataSource>
								<Label>@SCM:InventClosingProgressDetailsCalculationStatusGridCalculationStatusIconLabel</Label>
							</AxFormControl>
						</Controls>
						<DataSource>InventClosingTmpProgressStatusCalculation</DataSource>
					</AxFormControl>
				</Controls>
				<Caption>@SCM:InventClosingProgressDetailsCalculationStatusGroupCaption</Caption>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CalculationBundleDetailsGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CalculationBundleBundleNumber</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@SCM:InventClosingProgressDetailsCalculationBundleBundleNumberLabel</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CalculationBundleBOMLevel</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@SCM:InventClosingProgressDetailsCalculationBundleBOMLevelLabel</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CalculationBundleTotalItems</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@SCM:InventClosingProgressDetailsCalculationBundleTotalItemsLabel</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CalculationBundleRecentlyProcessingItem</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@SCM:InventClosingProgressDetailsCalculationBundleProcessingItemLabel</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateTimeControl">
						<Name>CalculationBundleStartDateTime</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>DateTime</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@SCM:InventClosingProgressDetailsCalculationBundleStartDateTimeLabel</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateTimeControl">
						<Name>CalculationBundleEndDateTime</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>DateTime</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@SCM:InventClosingProgressDetailsCalculationBundleEndDateTimeLabel</Label>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Caption>@SCM:InventClosingProgressDetailsCalculationBundleStatusGroupCaption</Caption>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1879048190</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Top>0</Top>
				<TopMode>BottomEdge</TopMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CloseButton</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<SaveRecord>No</SaveRecord>
						<Text>@SYS15212</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>RefreshButton</Name>
						<Type>Button</Type>
						<FormControlExtension
							i:nil="true" />
						<Text>@SYS29018</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>