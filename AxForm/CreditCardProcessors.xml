<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>CreditCardProcessors</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

[Form]
public class CreditCardProcessors extends FormRun
{
    CreditCardConnectorSetup connectorSetup;
    CreditCardPreAuthorization custParameters_CreditCardPreAuthorization;

    int64 messageId = 0;

    private const boolean Encrypt = true;
    private const boolean Decrypt = false;

}
]]></Source>
			</Method>
			<Method>
				<Name>showHideDefaultProcessorWarning</Name>
				<Source><![CDATA[
    public void showHideDefaultProcessorWarning()
    {
        RecId activeProcessorRecId = (select RecId from CreditCardProcessors where CreditCardProcessors.Active).RecId;
        boolean haveActive = (activeProcessorRecId && activeProcessorRecId != CreditCardProcessors.RecId) || CreditCardProcessors.Active;

        if (!haveActive && !messageId)
        {
            messageId = Message::Add(MessageSeverity::Warning, "@AccountsReceivable:CheckDefaultProcessorSetup");
        }
        else if (messageId && haveActive)
        {
            Message::Remove(messageId);
            messageId = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayConnectorProperties</Name>
				<Source><![CDATA[
    public void displayConnectorProperties()
    {
        if (connectorSetup != null && connectorName.valueStr())
        {
            var propertyXML = creditCardAccountSetup.manageEncryptionForSecureMerchantProperties(Decrypt, '');
            connectorSetup.displayPropertyValuesFromXmlString(creditCardAccountSetup.ConnectorName, propertyXML);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableVerification</Name>
				<Source><![CDATA[
    public void enableVerification()
    {
        if (custParameters_CreditCardPreAuthorization == NoYes::Yes)
        {
            addressVerification.enabled(true);
            cardVerificationCheck.enabled(true);
        }
        else
        {
            addressVerification.enabled(false);
            cardVerificationCheck.enabled(false);
        }

        if (addressVerification.enabled() && creditCardAccountSetup.AddressVerification == NoYes::Yes)
        {
            addressVerificationVoidUnknown.enabled(true);
            addressVerificationLevel.enabled(true);
        }
        else
        {
            addressVerificationVoidUnknown.enabled(false);
            addressVerificationLevel.enabled(false);
        }

        if (cardVerificationCheck.enabled() && creditCardAccountSetup.CardVerificationCheck == NoYes::Yes)
        {
            cardVerificationCheckAllowBlank.enabled(true);
        }
        else
        {
            cardVerificationCheckAllowBlank.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        int n;
        int i;
        System.Exception[] les;
        CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

        super();

        PolicyHtmlViewer.parmHtml(strFmt(
            "<html><body>%1&nbsp;<a href='https://go.microsoft.com/fwlink/?linkid=2038552&clcid=0x409'>%2</a></body></html>",
            "@Retail:PaymentConnectorPolicyText",
            "@Retail:PaymentConnectorPolicyLinkText"));

        try
        {
            custParameters_CreditCardPreAuthorization = CustParameters::find().CreditCardPreAuthorization;

            connectorSetup = CreditCardConnectorSetup::construct();
            connectorSetup.setParentControl(AccountGroup, literalStr(propertyFieldModified));
            n = connectorSetup.getCount();

            // Add all connector names to the combobox
            for (i = 1; i <= n; i++)
            {
                connectorName.add(connectorSetup.getName(i));
            }

            // Default to the first connector if there is one
            if (n > 0)
            {
                connectorName.selection(0);
                connectorSetup.displayGroupByName(connectorSetup.getName(1));
            }
        }
        catch (Exception::CLRError)
        {
            System.Exception ex = CLRInterop::getLastException();
            ex = ex.get_InnerException();
            if (Debug::debugMode())
            {
                error(ex.Message);
            }
            eventSource.EventWritePaymentsCreditCardProcessorInitError(ex.Message);

            System.Reflection.ReflectionTypeLoadException e = ex as System.Reflection.ReflectionTypeLoadException;
            if (e != null)
            {
                les = e.LoaderExceptions;
                for (int k = 0; k < les.get_length(); k++)
                {
                    System.Exception le = les.get_item(k);
                    if (Debug::debugMode())
                    {
                        error(le.ToString());
                    }
                    eventSource.EventWritePaymentsCreditCardProcessorInitError(le.ToString());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>propertyFieldModified</Name>
				<Source><![CDATA[
    public boolean propertyFieldModified(FormControl _control)
    {
        creditCardAccountSetup_ds.forceWrite(true);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>task</Name>
				<Source><![CDATA[
    public int task(int _taskId)
    {
    #Task
        int ok;

        if (_taskId == #taskEsc) // Leaving the form without saving changes
        {
            creditCardAccountSetup_ds.forceWrite(false);
        }
        ok = super(_taskId);

        if (_taskId == 2839) // Control-F5, Restore
        {
            creditCardAccountSetup_ds.forceWrite(false);
            creditCardAccountSetup_ds.active();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        boolean isValid = element.validateProcessors();

        if (!element.validateAccount())
        {
            isValid = false;
        }

        if (!element.validatePaymentAccount())
        {
            var infoAction = SysInfoAction_FormRun::newFormName(formStr(CustParameters));

            infoAction.parmDescription("@AccountsReceivable:OpenCustParameters");
            isValid = checkFailed("@AccountsReceivable:DefaultProcessorMustHavePaymentAccount", '', infoAction);
        }

        if (isValid)
        {
            info("@SYS4040014");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccount</Name>
				<Source><![CDATA[
    public boolean validateAccount()
    {
        if (connectorSetup != null)
        {
            return !connectorSetup.validatePropertyValues(creditCardAccountSetup.ConnectorName).displayErrors(false);
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePaymentAccount</Name>
				<Source><![CDATA[
    protected boolean validatePaymentAccount()
    {
        return CustParameters::find().CreditCardPostingLedgerDimension != 0 ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProcessors</Name>
				<Source><![CDATA[
    public boolean validateProcessors()
    {
        boolean isValid = true;

        if (!creditCardProcessors.Name)
        {
            warning(strFmt("@SYS84753", fieldId2pname(tableNum(CreditCardProcessors), fieldNum(CreditCardProcessors, Name))));
            isValid = false;
        }

        if (!creditCardProcessors.isValid())
        {
            isValid = checkFailed("@SYS327098");
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>CreditCardProcessors</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            super();
            creditCardAccountSetup_ds.write();
            this.research(true);
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            int p = 0;
            CreditCardProcessorsName name;
            CreditCardProcessors localCreditCardProcessors;
            super();

            while (true)
            {
                p++;
                name = strFmt('P%1', p);
                select firstonly RecId from localCreditCardProcessors where localCreditCardProcessors.Name == name;

                if (!localCreditCardProcessors)
                {
                    break;
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            QueryBuildRange range;

            super();

            range = SysQuery::findOrCreateRange(this.query().dataSourceTable(tableNum(CreditCardProcessors)), fieldNum(CreditCardProcessors, NotUsed));
            range.status(RangeStatus::Hidden);
            range.value(queryValue(NoYes::No));
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean valid = super();

            if (!valid)
            {
                creditCardProcessors.Active = false;
            }

            return valid;
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            element.showHideDefaultProcessorWarning();
            return super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            super();

            if (!creditCardProcessors.RecId)
            {
                element.showHideDefaultProcessorWarning();
            }

            if (!creditCardAccountSetup.RecId)
            {
                creditCardAccountSetup.clear();
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>Active</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean valid = super();

                if (creditCardProcessors.Active)
                {
                    if (!element.validate())
                    {
                        valid = false;
                        warning("@SYS4040002");
                    }
                    else
                    {
                        creditCardAccountSetup_ds.write();
                    }
                }

                return valid;
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                element.showHideDefaultProcessorWarning();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>CreditCardAccountSetup</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            return true;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            if (!creditCardProcessors.Name)
            {
                processorsName.setFocus();
                return;
            }

            // Make sure parent is written since not all fields are databound and so this isn't
            // done automatically.
            if (!creditCardProcessors.RecId)
            {
                creditCardProcessors_ds.write();
            }

            creditCardAccountSetup.CreditCardProcessors = creditCardProcessors.RecId;

            // Save serialized properties
            if (connectorSetup != null)
            {
                creditCardAccountSetup.manageEncryptionForSecureMerchantProperties(Encrypt, connectorSetup.getPropertyValuesAsXmlString(creditCardAccountSetup.ConnectorName));
            }

            super();

            // Since changes might have been made to Merchant Account properties
            // in the ConnectorProperties field, we'll flush the cache.
            CreditCard::clearMerchantAccountPropertiesCache();

            CreditCardTypeSetup::createDefaultData(creditCardProcessors);
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            super();

            if (!connectorName.valueStr())
            {
                connectorName.selection(0);
            }

            if (connectorSetup != null)
            {
                var selection = connectorName.selection() + 1;
                creditCardAccountSetup.ConnectorName = connectorSetup.getName(selection);
                connectorSetup.initConnector(selection, creditCardAccountSetup.ConnectorName);
                creditCardAccountSetup.manageEncryptionForSecureMerchantProperties(Encrypt, connectorSetup.getPropertiesAsXmlString(creditCardAccountSetup.ConnectorName));
            }

            element.displayConnectorProperties();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int isActive = super();

            element.enableVerification();

            if (connectorSetup != null)
            {
                connectorName.selection(connectorSetup.getIndex(creditCardAccountSetup.ConnectorName) - 1);
            }

            element.displayConnectorProperties();
            return isActive;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Validate</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            element.validate();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ViewAvailablePaymentProviders</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            RetailUtilities::ViewAvailablePaymentProviders();

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ConnectorName</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isModified = super();

            if (isModified)
            {
                creditCardAccountSetup.ConnectorName = this.valueStr();

                if (connectorSetup != null)
                {
                    creditCardAccountSetup.manageEncryptionForSecureMerchantProperties(Encrypt, connectorSetup.getPropertiesAsXmlString(creditCardAccountSetup.ConnectorName));
                }

                element.displayConnectorProperties();
                creditCardAccountSetup_ds.forceWrite(true);
            }

            return isModified;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AddressVerification</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isModified = super();

            element.enableVerification();

            return isModified;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CardVerificationCheck</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isModified = super();

            element.enableVerification();

            return isModified;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>CreditCardProcessors</Name>
			<Table>CreditCardProcessors</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Active</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NotUsed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>CreditCardAccountSetup</Name>
			<Table>CreditCardAccountSetup</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AddressVerification</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AddressVerificationLevel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AddressVerificationVoidUnknown</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CardVerificationCheck</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CardVerificationCheckAllowBlank</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ConnectorName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ConnectorProperties</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditCardProcessors</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsTest</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>CreditCardProcessors</JoinSource>
			<LinkType>Active</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS116925</Caption>
		<DataSource xmlns="">CreditCardProcessors</DataSource>
		<Pattern xmlns="">Custom</Pattern>
		<Style xmlns="">SimpleListDetails</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup1</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>Validate</Name>
								<ElementPosition>1825361098</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Text>@SYS2076</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>CreditCardTypeSetup</Name>
								<ElementPosition>1503238550</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataSource>CreditCardProcessors</DataSource>
								<MenuItemName>CreditCardTypeSetup</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
								<Text>@Retail:RetailLabelElectronicPaymentTypes</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<DataSource>CreditCardProcessors</DataSource>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>GridContainer</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>858993458</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>ListGrid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>ListGrid</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Grid</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToContent</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Grid_Name</Name>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>Name</DataField>
								<DataSource>CreditCardProcessors</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>Grid_Active</Name>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@FieldDescriptions_AccountsReceivable:CreditCardProcessors_Grid_Active</HelpText>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<BackgroundColor>WindowBackground</BackgroundColor>
								<DataField>Active</DataField>
								<DataSource>CreditCardProcessors</DataSource>
							</AxFormControl>
						</Controls>
						<AlternateRowShading>No</AlternateRowShading>
						<DataGroup>Overview</DataGroup>
						<DataSource>CreditCardProcessors</DataSource>
						<GridLinesStyle>Vertical</GridLinesStyle>
						<MultiSelect>No</MultiSelect>
						<ShowRowLabels>No</ShowRowLabels>
						<Style>List</Style>
					</AxFormControl>
				</Controls>
				<RightMargin>0</RightMargin>
				<RightMarginMode>Fixed</RightMarginMode>
				<FrameType>None</FrameType>
				<Style>SidePanel</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DetailsHeader</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<Visible>No</Visible>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>SetupPage</Name>
						<Type>TabPage</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>SetupActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>SetupButtonGroup</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>ViewAvailablePaymentProviders</Name>
												<HelpText>@Retail:RetailViewAvailablePaymentProviderText</HelpText>
												<Type>Button</Type>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<NormalImage>BulletedList</NormalImage>
												<Text>@Retail:RetailViewAvailablePaymentProviders</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SetupGroup</Name>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProcessorsName</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Name</DataField>
										<DataSource>CreditCardProcessors</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ConnectorName</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655763</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_AccountsReceivable:CreditCardProcessors_ConnectorName</HelpText>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS4000740</Label>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>TestModeGroup_IsTest</Name>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_AccountsReceivable:CreditCardProcessors_TestModeGroup_IsTest</HelpText>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>IsTest</DataField>
										<DataSource>CreditCardAccountSetup</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>StatusGroup_Active</Name>
										<ElementPosition>1789569704</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_AccountsReceivable:CreditCardProcessors_StatusGroup_Active</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Active</DataField>
										<DataSource>CreditCardProcessors</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>DisallowZeroCharge</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>DisallowZeroAmount</DataField>
										<DataSource>CreditCardAccountSetup</DataSource>
										<Label>@AccountsReceivable:CreditCardDisallowZeroCharge</Label>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>PolicyGroup</Name>
								<Type>Group</Type>
								<Width>1200</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl>
										<Name>PolicyHtmlViewer</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Width>800</Width>
										<FormControlExtension>
											<Name>HtmlViewerControl</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>htmlField</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>@SYS2186</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>PaymentServiceAccountPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>AccountGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1342177275</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<HideIfEmpty>No</HideIfEmpty>
						<Caption>@SYS338943</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>AddressVerificationPage</Name>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>AddressVerification</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>AddressVerification</DataField>
								<DataSource>CreditCardAccountSetup</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>AddressVerificationVoidUnknown</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>AddressVerificationVoidUnknown</DataField>
								<DataSource>CreditCardAccountSetup</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>AddressVerificationLevel</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>AddressVerificationLevel</DataField>
								<DataSource>CreditCardAccountSetup</DataSource>
								<Items />
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS327074</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>CardVerificationValuePage</Name>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>CardVerificationCheck</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>CardVerificationCheck</DataField>
								<DataSource>CreditCardAccountSetup</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>CardVerificationCheckAllowBlank</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>CardVerificationCheckAllowBlank</DataField>
								<DataSource>CreditCardAccountSetup</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS327068</Caption>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Columns>-1</Columns>
				<ColumnsMode>Fill</ColumnsMode>
				<BackgroundColor>DynBackgroundWhite</BackgroundColor>
				<DataSource>CreditCardProcessors</DataSource>
				<ShowTabs>No</ShowTabs>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>