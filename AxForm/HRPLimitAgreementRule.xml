<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>HRPLimitAgreementRule</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class HRPLimitAgreementRule extends FormRun
{
    recId                       policyRuleTypeIndex, policyIndex;
    SysPolicyRule               sysPolicyRule;
    HRPAuthorityBasis           authorityBasis;
    boolean                     isNew, isRuleDetailModified, isRecordExpired;
    HRPTmpLimitAgreementRule    tmpSigningLimitAgreementRule;

    const str valueDelimiter = ';';

}
]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        try
        {
            if (!isRecordExpired)
            {
                element.saveRuleDetails();
            }
            super();
        }

        catch (Exception::Error)
        {
            ttsabort;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        HRPLimitAgreementRule       limitAgreementRule;
        HRPLimitAgreementDetail     limitAgreementDetail;
        HRPLimitParameters          limitParameters;
        QueryBuildRange             qbr;
        utcdatetime                 utcMaxValue = DateTimeUtil::maxValue();

        isRuleDetailModified = false;

        super();

        if (!element.args().caller())
        {
            throw error(Error::missingFormActiveBuffer(element.name()));
        }

        policyRuleTypeIndex = str2int64(element.args().parm());
        sysPolicyRule = element.args().record();
        policyIndex = element.args().caller().getPolicyIndex();

        if (sysPolicyRule)
        {
            SysPolicyUtil::filterPolicyRule(hrpLimitAgreementRule_ds, sysPolicyRule);

            qbr = hrpTmpLimitAgreementRule_ds.query().dataSourceTable(tablenum(HRPTmpLimitAgreementRule))
                .findRange(fieldnum(HRPTmpLimitAgreementRule, SigningLimitAgreementRule));

            if (qbr == null )
            {
                qbr = hrpTmpLimitAgreementRule_ds.query().dataSourceTable(tablenum(HRPTmpLimitAgreementRule))
                    .addRange(fieldnum(HRPTmpLimitAgreementRule,SigningLimitAgreementRule));
            }
            qbr.value(queryValue(hrpLimitAgreementRule.RecId));
            hrpTmpLimitAgreementRule_ds.executeQuery();
        }
        else
        {
            commandButton.clicked();
            isNew = true;
        }

        // enabling and disabling controls depend on the form open mode
        if ((sysPolicyRule.RecId > 0) && (sysPolicyRule.ValidTo < DateTimeUtil::utcNow() || sysPolicyRule.ValidFrom == sysPolicyRule.ValidTo))
        {
            limitAgreementRuleGroup.enabled(false);
            hrpTmpLimitAgreementRule_ds.allowCreate(false);
            hrpTmpLimitAgreementRule_ds.allowDelete(false);
            hrpTmpLimitAgreementRule_ds.allowEdit(false);

            limitAgreementNew.enabled(false);
            limitAgreementDelete.enabled(false);
            isRecordExpired = true;
        }
        else
        {
            limitAgreementRuleGroup.enabled(true);
            limitAgreementNew.enabled(true);
            limitAgreementDelete.enabled(false);
        }

        // logic to get the Limit authority basis information that is either job / compensation level
        select firstonly RecId from limitAgreementRule
            where limitAgreementRule.RecId == sysPolicyRule.RecId;

        //check for HRPLImitAgreementDetail record
        if (limitAgreementRule)
        {
            select firstonly Exception from limitAgreementDetail
                where limitAgreementDetail.SigningLimitAgreementRule == limitAgreementRule.RecId;
        }

        //if exists, then fetch the authority basis
        if (limitAgreementDetail)
        {
            authorityBasis = limitAgreementDetail.Exception;
        }
        else //else fetch authority basis from signing limit parameters
        {
            select firstonly SigningLimitBasedOn from limitParameters;
            authorityBasis = limitParameters.SigningLimitBasedOn;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJobOrCompensationDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method inserts a new record in <c>HRPTmpLimitAgreementRule</c> table.
    /// </summary>
    public void insertJobOrCompensationDetail()
    {
        HRPLimitAgreementDetail limitAgreementDetail;
        HRPLimitDocumentType signingLimitDocumentType;
        HRPLimitAgreement limitAgreement;
        HRPTmpLimitAgreementRule tmpLimitAgreementRule;

        // logic to insert a record into tmpSigningLimitAgreementRule
        while select SigningLimitAgreement, SigningLimitAgreementRule, SigningLimitDocument, AttestationPeriod, OpenAttestation from limitAgreementDetail
            where limitAgreementDetail.SigningLimitAgreementRule == sysPolicyRule.RecId
        {
            signingLimitDocumentType = HRPLimitDocument::getDocumentType(limitAgreementDetail.SigningLimitDocument);

            select firstonly RecId from tmpLimitAgreementRule
                where tmpLimitAgreementRule.SigningLimitDocument == signingLimitDocumentType
                    && tmpLimitAgreementRule.SigningLimitAgreementRule == limitAgreementDetail.SigningLimitAgreementRule
                    && tmpLimitAgreementRule.DetailRecId == limitAgreementDetail.RecId
                join RecId from limitAgreement
                    where limitAgreement.RecId == limitAgreementDetail.SigningLimitAgreement
                        && tmpLimitAgreementRule.AgreementName == limitAgreement.AgreementName;

            if (!tmpLimitAgreementRule)
            {
                hrpTmpLimitAgreementRule.SigningLimitAgreementRule = limitAgreementDetail.SigningLimitAgreementRule;

                hrpTmpLimitAgreementRule.SigningLimitDocument = signingLimitDocumentType;
                hrpTmpLimitAgreementRule.DetailRecId = limitAgreementDetail.RecId;
                hrpTmpLimitAgreementRule.AgreementName = HRPLimitAgreement::find(limitAgreementDetail.SigningLimitAgreement).AgreementName;
                hrpTmpLimitAgreementRule.url = HRPLimitAgreement::find(limitAgreementDetail.SigningLimitAgreement).url;
                hrpTmpLimitAgreementRule.AttestationPeriod = limitAgreementDetail.AttestationPeriod;
                hrpTmpLimitAgreementRule.OpenAttestation = limitAgreementDetail.OpenAttestation;

                HRPMultiSelectLookupValue selectedJobOrCompensation = this.getSelectedJobOrCompensation(limitAgreementDetail);

                hrpTmpLimitAgreementRule.SelectedElements = selectedJobOrCompensation;
                hrpTmpLimitAgreementRule.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedJobOrCompensation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the job or compensation values that are linked to the current limit agreement rule details.
    /// </summary>
    /// <param name = "_limitAgreementDetail">
    /// The <c>HRPLimitAgreementDetail</c> buffer.
    /// </param>
    /// <returns>
    /// A delimited string containing the selected job or compensation values.
    /// </returns>
    [Wrappable(true)]
    protected final HRPMultiSelectLookupValue getSelectedJobOrCompensation(HRPLimitAgreementDetail _limitAgreementDetail)
    {
        HRPLimitAgreementJobException limitAgreementJobException;
        HRPLimitAgreementCompException limitAgreementCompensationException;
        HRPMultiSelectLookupValue selectedJobOrCompensation = strMin();

        if (authorityBasis == HRPAuthorityBasis::Compensation)
        {
            while select CompensationLevel from limitAgreementCompensationException
                where limitAgreementCompensationException.LimitAgreementDetail == _limitAgreementDetail.RecId
            {
                if (selectedJobOrCompensation == '')
                {
                    selectedJobOrCompensation = HcmCompensationLevel::find(limitAgreementCompensationException.CompensationLevel).CompensationLevelId;
                }
                else
                {
                    selectedJobOrCompensation = selectedJobOrCompensation + valueDelimiter + HcmCompensationLevel::find(limitAgreementCompensationException.CompensationLevel).CompensationLevelId;
                }
            }
        }
        else if (authorityBasis == HRPAuthorityBasis::Job)
        {
            // logic to concatenate all jobs linked to the current limit agreement rule details
            while select Job from limitAgreementJobException
                where limitAgreementJobException.LimitAgreementDetail == _limitAgreementDetail.RecId
            {
                if (selectedJobOrCompensation == '')
                {
                    selectedJobOrCompensation = HcmJob::find(limitAgreementJobException.Job).JobId;
                }
                else
                {
                    selectedJobOrCompensation = selectedJobOrCompensation + valueDelimiter + HcmJob::find(limitAgreementJobException.Job).JobId;
                }
            }
        }

        return selectedJobOrCompensation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDetailGrid</Name>
				<Source><![CDATA[
    public void populateDetailGrid()
    {
        HRPLimitAgreementRule           limitAgreementRule;

        // logic to populate the details grid while in edit mode
        if (sysPolicyRule)
        {
            select firstonly RecId, ValidFrom, ValidTo from limitAgreementRule
                where limitAgreementRule.RecId == sysPolicyRule.RecId;

            validFromDate.dateTimeValue(limitAgreementRule.ValidFrom);
            validToDate.dateTimeValue(limitAgreementRule.ValidTo);

            element.insertJobOrCompensationDetail();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        element.populateDetailGrid();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveRuleDetails</Name>
				<Source><![CDATA[
    public void saveRuleDetails()
    {
        HRPLimitAgreementAttestation    limitAgreementAttestation;
        RefRecId                        limitAgreementDetailsRecId;
        NoYes                           updateLimitAgreementAttestration;
        utcdatetime                     dateFrom, dateTo, newValidFrom, newValidTo;
        Array                           validDates;
        str 30                          listItem;
        RefRecId                        jobOrCompensationRecId;
        List                            list;
        ListEnumerator                  listEnumerator;
        recId                           limitAgreementRuleRecIdCompare;
        HRPSigningLimitPolicyUtil       signingLimitPolicyUtility;
        HRPLimitAgreementRule           hrpLimitAgreementRuleLocal;

        dateFrom = DateTimeUtil::minValue();
        dateTo   = DateTimeUtil::maxValue();

        if (hrpLimitAgreementRule.RecId == 0)
        {
            return;
        }

        validDates = new Array(Types::UtcDateTime);

        ttsbegin;

        hrpTmpLimitAgreementRule.setTmpData(hrpTmpLimitAgreementRule);

        select firstonly RecId from hrpTmpLimitAgreementRule;

        if (hrpTmpLimitAgreementRule.RecId)
        {
            // logic to insert an new rule if the current rule has gone through the modifications
            if (!isNew && isRuleDetailModified)
            {
                // logic to retrieve the ValidFrom and ValidTo values before retiring the current rule.
                validDates = element.args().caller().getValidFromAndToDate(sysPolicyRule.RecId);
                if (validDates.lastIndex() >= 1)
                {
                    newValidFrom = validDates.value(1);
                    newValidTo   = validDates.value(2);

                    // logic to retire the current rule before creating the new rule with the new modifications
                    delete_from hrpLimitAgreementRuleLocal
                        where hrpLimitAgreementRuleLocal.RecId == sysPolicyRule.RecId;

                    hrpLimitAgreementRule.Policy =         policyIndex;
                    hrpLimitAgreementRule.PolicyRuleType = policyRuleTypeIndex;
                    hrpLimitAgreementRule.ValidFrom =      newValidFrom;
                    hrpLimitAgreementRule.ValidTo =        newValidTo;
                    hrpLimitAgreementRule.IsInherited =    isInherited.value();
                    hrpLimitAgreementRule.insert();
                }
            }
            limitAgreementRuleRecIdCompare = hrpLimitAgreementRule.RecId;
        }

        if (limitAgreementRuleRecIdCompare && (limitAgreementRuleRecIdCompare != hrpTmpLimitAgreementRule.SigningLimitAgreementRule))
        {
            update_recordset hrpTmpLimitAgreementRule
                setting SigningLimitAgreementRule = limitAgreementRuleRecIdCompare;

            updateLimitAgreementAttestration = true;
        }

        if (isRuleDetailModified)
        {
            while select hrpTmpLimitAgreementRule
            {
                signingLimitPolicyUtility =  new HRPSigningLimitPolicyUtil();
                limitAgreementDetailsRecId = signingLimitPolicyUtility.createLimitAgreementDetail(hrpTmpLimitAgreementRule, authorityBasis);

                if (strlen(hrpTmpLimitAgreementRule.SelectedElements) > 0)
                {
                    list = strSplit(hrpTmpLimitAgreementRule.SelectedElements, valueDelimiter);
                    listEnumerator = list.getEnumerator();
                    while (listEnumerator.moveNext())
                    {
                        listItem = listEnumerator.current();
                        jobOrCompensationRecId = str2int64(listItem);
                        signingLimitPolicyUtility.createJobOrCompensationDetail(limitAgreementDetailsRecId, listItem, authorityBasis);
                    }
                }

                if (updateLimitAgreementAttestration)
                {
                    // update the limit agreement attrestations with the newly created limit agreement rule details id
                    while select forupdate validtimestate(dateFrom, dateTo) LimitAgreementDetail from limitAgreementAttestation
                        where limitAgreementAttestation.LimitAgreementDetail == hrpTmpLimitAgreementRule.DetailRecId
                    {
                        limitAgreementAttestation.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                        limitAgreementAttestation.LimitAgreementDetail = limitAgreementDetailsRecId;
                        limitAgreementAttestation.update();
                    }
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedElements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset the selected elements if the slections were changed.
    /// This method is called by HRPLimitAgreementException through reflection.
    /// </summary>
    public void getSelectedElements(container _conSelected)
    {
        List list1, list2;

        list1 = con2List(_conSelected);
        list2 = strSplit(hrpTmpLimitAgreementRule.SelectedElements, valueDelimiter);

        isRuleDetailModified = (!List::equal(list1, list2));
        if (isRuleDetailModified)
        {
            hrpTmpLimitAgreementRule.SelectedElements = con2Str(_conSelected, valueDelimiter);
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>HRPTmpLimitAgreementRule</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;

            ret = super();

            if (hrpLimitAgreementRule.RecId == 0)
            {
                hrpLimitAgreementRule_ds.write();
            }
            hrpTmpLimitAgreementRule.SigningLimitAgreementRule = hrpLimitAgreementRule.RecId;

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;
            HRPTmpLimitAgreementRule tmpLimitAgreementRule;

            ret = super();

            if (isRecordExpired == false)
            {
                tmpLimitAgreementRule.setTmpData(hrpTmpLimitAgreementRule);
                select count(RecId) from tmpLimitAgreementRule;
                if (tmpLimitAgreementRule.RecId > 0)
                {
                    limitAgreementDelete.enabled(true);
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>HRPLimitAgreementRule</Name>
				<Methods>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            super();
            hrpLimitAgreementRule.PolicyRuleType = policyRuleTypeIndex;
            hrpLimitAgreementRule.Policy = policyIndex;
            hrpLimitAgreementRule.ValidFrom = element.args().caller().getDefaultStartDate(policyIndex, policyRuleTypeIndex);
            hrpLimitAgreementRule.ValidTo = DateTimeUtil::maxValue();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>LimitAgreementNew</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            hrpTmpLimitAgreementRule_ds.create(true);
            limitAgreementDelete.enabled(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LimitAgreementDelete</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            if (Box::okCancel("@SYS309825", DialogButton::Cancel) == DialogButton::Ok)
            {
                if (hrpTmpLimitAgreementRule.RecId == 0)
                {
                    hrpTmpLimitAgreementRule_ds.delete();
                }
                else
                {
                    tmpSigningLimitAgreementRule.setTmpData(hrpTmpLimitAgreementRule);

                    select count(RecId) from tmpSigningLimitAgreementRule;

                    if (tmpSigningLimitAgreementRule.RecId > 1)
                    {
                        delete_from tmpSigningLimitAgreementRule
                            where tmpSigningLimitAgreementRule.RecId == hrpTmpLimitAgreementRule.RecId;

                        RefRecId limitDocumentRecId = HRPLimitDocument::getLimitDocumentRecId(hrpTmpLimitAgreementRule.SigningLimitDocument);

                        HRPExpireWorkerLimits expireWorkerLimits = new HRPExpireWorkerLimits();
                        expireWorkerLimits.expireLimitAgreementRule(hrpTmpLimitAgreementRule.SigningLimitAgreementRule, limitDocumentRecId);

                        isRuleDetailModified = true;
                    }
                    else
                    {
                        infolog.add(Exception::Warning, "@SYS310821");
                    }
                }
            }

            hrpTmpLimitAgreementRule_ds.executeQuery();
            hrpTmpLimitAgreementRule_ds.refresh();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Exceptions</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args    args;
            FormRun formRun;

            try
            {
                args = new Args();
                args.name(formstr(HRPLimitAgreementException));
                args.caller(element);
                args.record(hrpTmpLimitAgreementRule_ds.cursor());
                args.parmEnum(authorityBasis);
                args.parm(isRecordExpired == false ? int2str(1) : int2str(0));
                formRun = classfactory.formRunClass(args);
                formRun.init();
                formRun.run();
                formRun.wait(true);
            }
            catch(Exception::Break)
            {
                error(strfmt("@SYS76877","@SYS89643"));
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SigningLimitDocument</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            HRPLimitDocumentType    documentType;

            documentType = hrpTmpLimitAgreementRule.SigningLimitDocument;
            ret = super();

            tmpSigningLimitAgreementRule.setTmpData(hrpTmpLimitAgreementRule);

            select firstonly RecId from tmpSigningLimitAgreementRule
                where tmpSigningLimitAgreementRule.SigningLimitAgreementRule  == hrpTmpLimitAgreementRule.SigningLimitAgreementRule
                    && tmpSigningLimitAgreementRule.SigningLimitDocument      == hrpTmpLimitAgreementRule.SigningLimitDocument
                    && tmpSigningLimitAgreementRule.DetailRecId               != hrpTmpLimitAgreementRule.DetailRecId;

            if (tmpSigningLimitAgreementRule.RecId)
            {
                isRuleDetailModified = checkFailed(strfmt("@SYS83138"));
            }
            else
            {
                isRuleDetailModified = true;
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AgreementName</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            SysTableLookup          sysTableLookup;

            sysTableLookup = SysTableLookup::newParameters(tablenum(HRPLimitAgreement), this);
            sysTableLookup.addLookupfield(fieldnum(HRPLimitAgreement, AgreementName), true);
            sysTableLookup.addLookupfield(fieldnum(HRPLimitAgreement, url));
            sysTableLookup.addLookupfield(fieldnum(HRPLimitAgreement, AttestationPeriod));

            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean             ret;
            HRPLimitAgreement   limitAgreement;

            ret = super();

            select firstonly url, AttestationPeriod from limitAgreement
                where limitAgreement.AgreementName == hrpTmpLimitAgreementRule.AgreementName;

            if (limitAgreement.RecId)
            {
                hrpTmpLimitAgreementRule.url = limitAgreement.url;
                hrpTmpLimitAgreementRule.AttestationPeriod = limitAgreement.AttestationPeriod;
            }
            else
            {
                if (isNew == true)
                {
                    hrpTmpLimitAgreementRule.AgreementName = hrpTmpLimitAgreementRule.orig().AgreementName;
                    hrpTmpLimitAgreementRule.url = hrpTmpLimitAgreementRule.orig().url;
                    hrpTmpLimitAgreementRule.AttestationPeriod = hrpTmpLimitAgreementRule.orig().AttestationPeriod;
                    hrpTmpLimitAgreementRule.OpenAttestation = hrpTmpLimitAgreementRule.orig().OpenAttestation;
                }
                else
                {
                    hrpTmpLimitAgreementRule.AgreementName = '';
                }
                isRuleDetailModified = false;
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AttestationPeriod</Name>
				<Type>Integer</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            HRPLimitAgreementDetail limitAgreementDetail;
            super();

            select AttestationPeriod from limitAgreementDetail
                where limitAgreementDetail.RecId == hrpTmpLimitAgreementRule.DetailRecId;

            isRuleDetailModified = (limitAgreementDetail.AttestationPeriod != hrpTmpLimitAgreementRule.AttestationPeriod);

            return isRuleDetailModified;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OpenAttestation</Name>
				<Type>Integer</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            HRPLimitAgreementDetail limitAgreementDetail;

            super();

            select OpenAttestation from limitAgreementDetail
                where limitAgreementDetail.RecId == hrpTmpLimitAgreementRule.DetailRecId;

            isRuleDetailModified = (limitAgreementDetail.OpenAttestation != hrpTmpLimitAgreementRule.OpenAttestation);

            return isRuleDetailModified;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>HRPTmpLimitAgreementRule</Name>
			<Table>HRPTmpLimitAgreementRule</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AgreementName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AttestationPeriod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DetailRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OpenAttestation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SelectedElements</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SigningLimitAgreementRule</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SigningLimitDocument</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>URL</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HRPLimitAgreementRule</Name>
			<Table>HRPLimitAgreementRule</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsInherited</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Policy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PolicyRuleType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>relationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidTo</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<ValidTimeStateUpdate>EffectiveBased</ValidTimeStateUpdate>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS303687</Caption>
		<DialogSize xmlns="">Large</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Custom</Pattern>
		<SetCompany xmlns="">No</SetCompany>
		<TitleDataSource xmlns="">HRPTmpLimitAgreementRule</TitleDataSource>
		<WindowType xmlns="">Slider</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Group_Group</Name>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Height>0</Height>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>Auto</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>LimitAgreementRuleGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormDateTimeControl">
								<Name>ValidFromDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>DateTime</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>ValidFrom</DataField>
								<DataSource>HRPLimitAgreementRule</DataSource>
								<Label>@SYS35161</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateTimeControl">
								<Name>ValidToDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>DateTime</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>ValidTo</DataField>
								<DataSource>HRPLimitAgreementRule</DataSource>
								<Label>@SYS102701</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>IsInherited</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>IsInherited</DataField>
								<DataSource>HRPLimitAgreementRule</DataSource>
								<Label>@SYS135083</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>CommandButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2013265918</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>CommandButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Command>New</Command>
							</AxFormControl>
						</Controls>
						<Columns>3</Columns>
						<LeftMargin>11</LeftMargin>
						<LeftMarginMode>Fixed</LeftMarginMode>
						<TopMargin>11</TopMargin>
						<TopMarginMode>Fixed</TopMarginMode>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>LimitAgreementRuleDetails</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>LimitAgreementActionPane</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneTabControl">
										<Name>LimtAgreementActionPaneTab</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPaneTab</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>LimitAgreementButtonGroup</Name>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Left>0</Left>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>LimitAgreementNew</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
														<Text>@SYS2055</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>LimitAgreementDelete</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
														<NormalImage>Delete</NormalImage>
														<SaveRecord>No</SaveRecord>
														<Text>@SYS21354</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>Exceptions</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1879048190</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
														<NormalImage>New</NormalImage>
														<Text>@SYS89643</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1811939326</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Height>0</Height>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SigningLimitDocument</Name>
										<ElementPosition>613566756</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>SigningLimitDocument</DataField>
										<DataSource>HRPTmpLimitAgreementRule</DataSource>
										<Label>@SYS317773</Label>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>AgreementName</Name>
										<ElementPosition>920350134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_OrganizationAdministration:HRPLimitAgreementRule_AgreementName</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AgreementName</DataField>
										<DataSource>HRPTmpLimitAgreementRule</DataSource>
										<Label>@SYS191662</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>URL</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1227133512</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_OrganizationAdministration:HRPLimitAgreementRule_URL</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>URL</DataField>
										<DataSource>HRPTmpLimitAgreementRule</DataSource>
										<Label>@SYS303688</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>AttestationPeriod</Name>
										<ElementPosition>1533916890</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AttestationPeriod</DataField>
										<DataSource>HRPTmpLimitAgreementRule</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>OpenAttestation</Name>
										<ElementPosition>1840700268</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_OrganizationAdministration:HRPLimitAgreementRule_OpenAttestation</HelpText>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>OpenAttestation</DataField>
										<DataSource>HRPTmpLimitAgreementRule</DataSource>
										<Label>@SYS302817</Label>
									</AxFormControl>
								</Controls>
								<DataSource>HRPTmpLimitAgreementRule</DataSource>
							</AxFormControl>
						</Controls>
						<LeftMargin>11</LeftMargin>
						<LeftMarginMode>Fixed</LeftMarginMode>
						<TopMargin>11</TopMargin>
						<TopMarginMode>Fixed</TopMarginMode>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<FrameType>None</FrameType>
				<Style>BorderlessGridContainer</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>2013265918</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<LeftMode>AutoRight</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>Auto</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CloseForm</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>CloseForm</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>