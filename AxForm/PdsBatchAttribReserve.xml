<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>PdsBatchAttribReserve</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class PdsBatchAttribReserve extends FormRun implements IFormRefreshable
{
    InventMovement                      movement;
    InventLocationId                    fromInventLocId;
    date                                ageDate;

    InventDimCtrl_Frm_ActiveRightClick  inventDimFormSetupRightClick;

    InventDimCtrl_Frm_BatchReserve      inventDimFormSetup;
    boolean                             parmActiveIsOk;
    InventDimParm                       inventDimParmActive;
    InventOnhandReserve                 inventOnhandReserve;

    [FormObservable]
    UnitOfMeasureSymbol                 unitIdInvent;
    [FormObservable]
    UnitOfMeasureSymbol                 unitIdSecondary;

    QueryBuildRange                     rangeRecId;
    ItemId                              currentItemId;

    date                                checkDate;

    PdsFormCtrl_PdsBatchAttribReserve   formCtrl;
    PdsBatchAttribReserveForm           pdsBatchAttribReserveForm;
    Set                                 cachedPackedSetOfRequiredAttributes;
    boolean                             cacheFilled = false;
    private boolean isInventAvailPhysicalByBatchIdWithoutDimEnabled = InventAvailPhysicalByBatchIdWithoutDimFlight::instance().isEnabled();

}
]]></Source>
			</Method>
			<Method>
				<Name>mustValidateExpiryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the expiry date must be validated.
    /// </summary>
    /// <param name = "_custAccount">A customer account id</param>
    /// <returns>true if the expiry date must be validated; otherwise, false.</returns>
    protected boolean mustValidateExpiryDate(CustAccount _custAccount)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerRefresh</Name>
				<Source><![CDATA[
    public void callerRefresh()
    {
        pdsBatchAttribReserveForm.callerRefresh(element.args().caller());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDefaultAttributes</Name>
				<Source><![CDATA[
    public void fillDefaultAttributes()
    {
        pdsBatchAttribReserveForm.fillDefaultAttributes(tmpPdsBatchAttribSelect, element.movement());
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        InventTransferLine      invTransferLn;
        InventTransferParmLine  invTransferParmLn;
        WMSOrderTrans           wmsOrderTrans;

        inventOnhandReserve = InventOnhandReserve::newFromFormRun(this);

        pdsBatchAttribReserveForm = PdsBatchAttribReserveForm::construct();

        if (element.args().record())
        {
            switch (element.args().record().TableId)
            {
                case tableNum(InventTransferLine):
                    invTransferLn = element.args().record();
                    fromInventLocId
                        = invTransferLn.inventTransferTable().InventLocationIdFrom;
                    break;
                case tableNum(InventTransferParmLine):
                    invTransferParmLn = element.args().record();
                    fromInventLocId
                        = InventDim::find(invTransferParmLn.InventDimId)
                            .InventLocationId;
                    break;
                case tableNum(WMSOrderTrans):
                    wmsOrderTrans = element.args().record();
                    fromInventLocId = wmsOrderTrans.inventDim().InventLocationId;
                    break;

                default :
                    fromInventLocId = '';
            }
        }

        formCtrl = PdsFormCtrl_PdsBatchAttribReserve::newFromForm(element);

        super();

        formCtrl.setDatasources(inventTransMovement);
        formCtrl.initPost();

        inventSum_ds.query()
                .dataSourceTable(tableNum(InventSum))
                .addDynalink(
                    fieldNum(InventSum, ItemId),
                    tmpPdsBatchSelect,
                    fieldNum(TmpPdsBatchSelect,ItemId));
        inventTrans_ds.query()
                .dataSourceTable(tableNum(InventTrans))
                .addDynalink(
                    fieldNum(InventTrans, ItemId),
                    tmpPdsBatchSelect,
                    fieldNum(TmpPdsBatchSelect,ItemId));

        element.updateDesign(InventDimFormDesignUpdate::Init);

        if (#PdsShelfEnabled)
        {
            element.pdsShow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimParmActive</Name>
				<Source><![CDATA[
    public InventDimParm inventDimParmActive()
    {
        if (!parmActiveIsOk && inventDimFormSetup.movement())
        {
            inventDimFormSetup.movement().inventDimGroupSetup().inventDimParmActive(inventDimParmActive);
            parmActiveIsOk = true;
        }

        return inventDimParmActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimSetupObject</Name>
				<Source><![CDATA[
    public InventDimCtrl_Frm_BatchReserve inventDimSetupObject()
    {
        if (!inventDimFormSetup)
        {
            inventDimFormSetup = InventDimCtrl_Frm_BatchReserve::newFromForm(element);
            inventDimFormSetup.parmLargeRightClickForm(NoYes::No);
            inventOnhandReserve.parmInventDimFormSetup(inventDimFormSetup);
        }
        return inventDimFormSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransMovement</Name>
				<Source><![CDATA[
    public InventTrans inventTransMovement()
    {
        return inventTransMovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>movement</Name>
				<Source><![CDATA[
    public InventMovement movement()
    {
        if (!movement)
        {
            movement = InventMovement::constructNoThrow(element.args().record());
        }
        return movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsShow</Name>
				<Source><![CDATA[
    public void pdsShow()
    {
        if (inventoryDimensionsGrid_inventBatchId.visible())
        {
            pdsBestBeforeDate.visible(true);
            pdsExpDate.visible(true);
        }
        else
        {
            pdsBestBeforeDate.visible(false);
            pdsExpDate.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshMovement</Name>
				<Source><![CDATA[
    public void refreshMovement()
    {
        inventOnhandReserve.parmTransSumBuffer().reset();
        InventTransMovementOrigin_DS.reread();
        InventTransMovementOrigin_DS.refresh();
        InventTransMovement_ds.reread();
        InventTransMovement_ds.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshSelection</Name>
				<Source><![CDATA[
    public void refreshSelection()
    {
        TmpPdsBatchSelect       batchSelect;
        ItemId                  itemId = movement.itemId();
        InventDim               sameLotDim;
        InventDimParm           sameLotDimParm;
        boolean                 cwItem = PdsGlobal::pdsIsCWItem(itemId);
        boolean                 sameLotRes = movement.pdsSameLotReservation();

        batchSelect.setTmpData(tmpPdsBatchSelect);
        delete_from batchSelect;

        InventBatchId sameLotBatchId = sameLotRes ? movement.pdsSameLotReservationBatch().InventBatchId : '';
        sameLotDim.data(movement.inventdim());
        sameLotDimParm.initFromInventDim(sameLotDim);

        // use TempDB table for better join performance
        TmpDBPdsBatchAttribSelect tmpDBPdsBatchAttribSelect;
        RecordInsertList insertList = new  RecordInsertList(tableNum(TmpDBPdsBatchAttribSelect), true, true, true, true, true, tmpDBPdsBatchAttribSelect);
        List batchAttributesIds = new List(Types::String);

        while select PdsBatchAttribId from tmpPdsBatchAttribSelect
        {
            tmpDBPdsBatchAttribSelect.PdsBatchAttribId = tmpPdsBatchAttribSelect.PdsBatchAttribId;
            insertList.add(tmpDBPdsBatchAttribSelect);
            batchAttributesIds.addEnd(tmpDBPdsBatchAttribSelect.PdsBatchAttribId);
        }

        insertList.insertDatabase();

        List reservationBatches;
        CostManagementInstrumentationLogger instrumentationLogger = CostManagementInstrumentationLogger::createLogger(formStr(PdsBatchAttribReserve));
        using (var activityContext = instrumentationLogger.batchAttributeReserveActivities().getReservationBatches())
        {
            reservationBatches = this.getReservationBatches(itemId, sameLotDim.inventBatchId, tmpDBPdsBatchAttribSelect);
        }

        ListEnumerator reservationBatchEnumerator = reservationBatches.getEnumerator();
        while (reservationBatchEnumerator.moveNext())
        {
            InventBatch inventBatch = reservationBatchEnumerator.current();
            boolean skipBatch = false;

            if (sameLotRes && inventBatch.inventBatchId != sameLotBatchId)
            {
                sameLotDim.data(movement.inventdim());
                sameLotDim.InventBatchId = inventBatch.inventBatchId;
                sameLotDimParm.clear();
                sameLotDimParm.initFromInventDim(sameLotDim);
                sameLotDimParm.ItemIdFlag = NoYes::Yes;

                InventSum sameLotSum = InventSum::findSumQty(itemId,sameLotDim,sameLotDimParm);
                if ((cwItem && sameLotSum.pdsCWAvailReservation() <= movement.pdsCWTransQty())
                    || (!cwItem && sameLotSum.availReservation() <= movement.transQty()))
                {
                    skipBatch = true;
                }
            }

            if (!skipBatch)
            {
                skipBatch = !this.validateBatchAttributesValues(inventBatch, batchAttributesIds, TmpPdsBatchAttribSelect);
            }

            if (!skipBatch)
            {
                batchSelect.clear();
                batchSelect.ItemId = itemId;
                batchSelect.InventBatchId = inventBatch.InventBatchId;
                batchSelect.insert();
            }
        }

        tmpPdsBatchSelect_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchHasAllMandatoryAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the specified item batch has all the necessary defined customer attributes.
    /// </summary>
    /// <param name = "_itemId">Item number.</param>
    /// <param name = "_inventBatchId">Inventory batch number.</param>
    /// <param name = "_attribSel">Attribute selection database cursor to query against.</param>
    /// <returns>True, if the batch has all necessary attributes; otherwise, false.</returns>
    private boolean batchHasAllMandatoryAttributes(ItemId _itemId, InventBatchId _inventBatchId, TmpDBPdsBatchAttribSelect _attribSel)
    {
        PdsBatchAttributes batchAttributes;

        select firstOnly RecId from _attribSel
            notExists join batchAttributes
                where batchAttributes.PdsBatchAttribId == _attribSel.PdsBatchAttribId
                    && batchAttributes.ItemId          == _itemId
                    && batchAttributes.InventBatchId   == _inventBatchId;

        return _attribSel.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReservationBatches</Name>
				<Source><![CDATA[
    /// <summary>
    ///  retrieves inventory batches for the given itemId and the selected batch attributes ids
    /// </summary>
    /// <param name = "_itemId"> The itemId used to retrieve the inventory batches </param>
    /// <param name = "_sameLotBatchId">Same lot inventory reservation batch id</param>
    /// <param name = "_attribSelect">user selected attributes used to filter the inventory batches </param>
    /// <returns>List of inventory batches ids for the given itemId and matches the selected batch attributes ids</returns>
    private List getReservationBatches(ItemId _itemId, InventBatchId _sameLotBatchId, TmpDBPdsBatchAttribSelect _attribSelect)
    {
        InventBatch inventBatchSelect;
        List reservationBatches = new List(Types::Record);

        if (_sameLotBatchId != '')
        {
            if (this.batchHasAllMandatoryAttributes(_itemId, _sameLotBatchId, _attribSelect))
            {
                reservationBatches.addEnd(InventBatch::find(_sameLotBatchId, _itemId));
            }
        }
        else
        {
            PdsBatchAttributes batchAttributes;
            InventAvailPhysicalByBatchId inventAvailPhysicalByBatchId;
            InventModelGroup modelGroup = InventTable::find(_itemId).modelGroup();
            InventTrans _inventTrans;
            InventDim _inventDim;
            InventSum _inventSum;

            if (modelGroup && modelGroup.NegativePhysical)
            {
                if (InventUseDimOfInventSumToggle::instance().isEnabled())
                {
                    while select * from inventBatchSelect
                       where inventBatchSelect.ItemId == _itemId
                    exists join _inventSum
                        where _inventSum.ItemId == _itemId
                        && _inventSum.InventBatchId == inventBatchSelect.InventBatchId
                        && _inventSum.AvailPhysical > 0
                    notexists join _attribSelect
                    notexists join batchAttributes
                        where batchAttributes.ItemId == _itemId
                        && batchAttributes.InventBatchId == inventBatchSelect.InventBatchId
                        && batchAttributes.PdsBatchAttribId == _attribSelect.PdsBatchAttribId
                    {
                        reservationBatches.addEnd(inventBatchSelect);
                    }
                }
                else
                {
                    while select * from inventBatchSelect
                       where inventBatchSelect.ItemId == _itemId
                    exists join _inventDim
                        where _inventDim.InventBatchId == inventBatchSelect.InventBatchId
                    exists join _inventSum
                        where _inventSum.ItemId == _itemId
                        && _inventSum.InventDimId == _inventDim.inventDimId
                        && _inventSum.AvailPhysical > 0
                    notexists join _attribSelect
                    notexists join batchAttributes
                        where batchAttributes.ItemId == _itemId
                        && batchAttributes.InventBatchId == inventBatchSelect.InventBatchId
                        && batchAttributes.PdsBatchAttribId == _attribSelect.PdsBatchAttribId
                    {
                        reservationBatches.addEnd(inventBatchSelect);
                    }
                }
            }
            else
            {
                // Add all batches with AvailPhysical > 0
                if (isInventAvailPhysicalByBatchIdWithoutDimEnabled)
                {
                    InventAvailPhysicalByBatchIdWithoutDim inventAvailPhysicalByBatchIdWithoutDim;

                    while select inventBatchSelect
                        where inventBatchSelect.ItemId == _itemId
                    exists join inventAvailPhysicalByBatchIdWithoutDim
                        where inventAvailPhysicalByBatchIdWithoutDim.ItemId == _itemId
                           && inventAvailPhysicalByBatchIdWithoutDim.InventBatchId == inventBatchSelect.InventBatchId
                           && inventAvailPhysicalByBatchIdWithoutDim.AvailPhysical > 0
                    notexists join _attribSelect
                    notexists join batchAttributes
                        where batchAttributes.ItemId == _itemId
                           && batchAttributes.InventBatchId    == inventBatchSelect.InventBatchId
                           && batchAttributes.PdsBatchAttribId == _attribSelect.PdsBatchAttribId
                    {
                        reservationBatches.addEnd(inventBatchSelect);
                    }
                }
                else
                {
                    while select inventBatchSelect
                        where inventBatchSelect.ItemId == _itemId
                    exists join inventAvailPhysicalByBatchId
                        where inventAvailPhysicalByBatchId.ItemId == _itemId
                           && inventAvailPhysicalByBatchId.InventBatchId == inventBatchSelect.InventBatchId
                           && inventAvailPhysicalByBatchId.AvailPhysical > 0
                    notexists join _attribSelect
                    notexists join batchAttributes
                        where batchAttributes.ItemId == _itemId
                           && batchAttributes.InventBatchId   == inventBatchSelect.InventBatchId
                           && batchAttributes.PdsBatchAttribId == _attribSelect.PdsBatchAttribId
                    {
                        reservationBatches.addEnd(inventBatchSelect);
                    }
                }
            }

            // Add all batches with AvailPhysical <= 0 given it was reserved for current movement
            if (isInventAvailPhysicalByBatchIdWithoutDimEnabled)
            {
                InventAvailPhysicalByBatchIdWithoutDim inventAvailPhysicalByBatchIdWithoutDim;

                while select inventBatchSelect
                    where inventBatchSelect.ItemId == _itemId
                exists join inventAvailPhysicalByBatchIdWithoutDim
                    where inventAvailPhysicalByBatchIdWithoutDim.ItemId == _itemId
                       && inventAvailPhysicalByBatchIdWithoutDim.InventBatchId == inventBatchSelect.InventBatchId
                       && inventAvailPhysicalByBatchIdWithoutDim.AvailPhysical <= 0
                exists join _inventTrans
                    where _inventTrans.StatusReceipt == StatusReceipt::None
                       && (_inventTrans.StatusIssue == StatusIssue::ReservPhysical || _inventTrans.StatusIssue == StatusIssue::ReservOrdered)
                       && _inventTrans.InventTransOrigin == movement.inventTransOriginId()
                exists join _inventDim
                    where _inventDim.InventDimId == _inventTrans.InventDimId
                    && _inventDim.InventBatchId == inventBatchSelect.InventBatchId
                notexists join _attribSelect
                notexists join batchAttributes
                    where batchAttributes.ItemId == _itemId
                       && batchAttributes.InventBatchId   == inventBatchSelect.InventBatchId
                       && batchAttributes.PdsBatchAttribId == _attribSelect.PdsBatchAttribId
                {
                    reservationBatches.addEnd(inventBatchSelect);
                }
            }
            else
            {
                while select inventBatchSelect
                    where inventBatchSelect.ItemId == _itemId
                exists join inventAvailPhysicalByBatchId
                    where inventAvailPhysicalByBatchId.ItemId == _itemId
                       && inventAvailPhysicalByBatchId.InventBatchId == inventBatchSelect.InventBatchId
                       && inventAvailPhysicalByBatchId.AvailPhysical <= 0
                exists join _inventTrans
                    where _inventTrans.StatusReceipt == StatusReceipt::None
                       && (_inventTrans.StatusIssue == StatusIssue::ReservPhysical || _inventTrans.StatusIssue == StatusIssue::ReservOrdered)
                       && _inventTrans.InventTransOrigin == movement.inventTransOriginId()
                exists join _inventDim
                    where _inventDim.InventDimId == _inventTrans.InventDimId
                    && _inventDim.InventBatchId == inventBatchSelect.InventBatchId
                notexists join _attribSelect
                notexists join batchAttributes
                    where batchAttributes.ItemId == _itemId
                       && batchAttributes.InventBatchId   == inventBatchSelect.InventBatchId
                       && batchAttributes.PdsBatchAttribId == _attribSelect.PdsBatchAttribId
                {
                    reservationBatches.addEnd(inventBatchSelect);
                }
            }
        }
        return reservationBatches;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReservationBatchAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// retrieve batch attributes id and values for the given itemId and batchId
    /// </summary>
    /// <param name = "_itemId"> itemId used to get the inventory batch attributes ids and values</param>
    /// <param name = "_inventBatchId"> inventory batchId used to get the inventory batch attributes ids and values</param>
    /// <returns> Map or batch attributes id and values</returns>
    private Map getReservationBatchAttributes(ItemId _itemId, InventBatchId _inventBatchId)
    {
        PdsBatchAttributes batchAttributes;
        Map attributes = new Map(Types::String, Types::String);

        while select PdsBatchAttribId, PdsBatchAttribValue from batchAttributes
                    where batchAttributes.InventBatchId == _inventBatchId
                    && batchAttributes.ItemId == _itemId
        {
            attributes.insert(batchAttributes.PdsBatchAttribId, batchAttributes.PdsBatchAttribValue);
        }

        return attributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBatchAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the specified batch matches attributes requirements.
    /// </summary>
    /// <param name = "_inventBatch">Batch to validate.</param>
    /// <param name = "_attributeIds">List of batch attribute IDs to check.</param>
    /// <param name = "_attributeSelect">Cursor into <c>TmpPdsBatchAttribSelect</c>.</param>
    /// <returns>True if the batch matches attributes requirements; otherwise, false.</returns>
    private boolean validateBatchAttributes(InventBatch _inventBatch, List _attributeIds, TmpPdsBatchAttribSelect _attributeSelect)
    {
        boolean result = this.validateBatchHasRequiredAttributes(_attributeIds);
        result = result && this.validateBatchAttributesValues(_inventBatch, _attributeIds, _attributeSelect);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBatchAttributesValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that attributes for the given batch match the requirements.
    /// </summary>
    /// <param name = "_inventBatch">Batch to check.</param>
    /// <param name = "_attributeIds">List of batch attribute IDs to check.</param>
    /// <param name = "_attributeSelect">Cursor into <c>TmpPdsBatchAttribSelect</c>.</param>
    /// <returns>True if attributes match the required values; otherwise, false.</returns>
    private boolean validateBatchAttributesValues(InventBatch _inventBatch, List _attributeIds, TmpPdsBatchAttribSelect _attributeSelect)
    {
        TmpPdsBatchAttribSelect attributeSelect;
        Map batchAttributes;
        ListEnumerator attributeIdsEnumerator = _attributeIds.getEnumerator();
        
        if (!_attributeIds.empty())
        {
            batchAttributes = this.getReservationBatchAttributes(_inventBatch.itemId,_inventBatch.inventBatchId);
        }
        boolean result = true;

        attributeSelect.setTmpData(_attributeSelect);
        while (attributeIdsEnumerator.moveNext())
        {
            PdsBatchAttribId attribId = attributeIdsEnumerator.current();

            // check if the batch has the current attributes id
            if(!batchAttributes.exists(attribId))
            {
                result = false;
                break;
            }
            
            select firstonly attributeSelect
                    where attributeSelect.PdsBatchAttribId == attribId;

            if (!PdsBatchAttributes::evalCond(attribId,
                                batchAttributes.lookup(attribId),
                                attributeSelect.PdsBatchAttribOpr1,
                                attributeSelect.PdsBatchAttribValue1 ))
            {
                result = false;
                break;
            }
            if (attributeSelect.PdsBatchAttribOpr2 != PdsBatchAttribOpr::empty
                        && !PdsBatchAttributes::evalCond(attribId,
                                    batchAttributes.lookup(attribId),
                                    attributeSelect.PdsBatchAttribOpr2,
                                    attributeSelect.PdsBatchAttribValue2))
            {
                result = false;
                break;
            }
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIdsOfRequiredBatchAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the IDs of batch attributes required.
    /// </summary>
    /// <returns>Set of batch attribute IDs.</returns>
    private Set getIdsOfRequiredBatchAttributes()
    {
        if (!cacheFilled)
        {
            cachedPackedSetOfRequiredAttributes = new Set(Types::String);
            while select PdsBatchAttribId from TmpPdsBatchAttribSelect
            {
                cachedPackedSetOfRequiredAttributes.add(TmpPdsBatchAttribSelect.PdsBatchAttribId);
            }
            cacheFilled = true;
        }
        return cachedPackedSetOfRequiredAttributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBatchHasRequiredAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the batch has all required attributes specified.
    /// </summary>
    /// <param name = "_attributeIds">List of batch attribute IDs.</param>
    /// <returns>True if batch has all required attributes specified; otherwise, false.</returns>
    private boolean validateBatchHasRequiredAttributes(List  _attributeIds)
    {
        Set missingAttributes = this.getIdsOfRequiredBatchAttributes();
        ListEnumerator attributeIdsEnumerator = _attributeIds.getEnumerator();
   
        while (attributeIdsEnumerator.moveNext() && missingAttributes.elements() > 0)
        {
            PdsBatchAttribId attribId = attributeIdsEnumerator.current();
            missingAttributes.remove(attribId);
        }
        return missingAttributes.elements() == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rightClickModifyQuery</Name>
				<Source><![CDATA[
    void rightClickModifyQuery()
    {
        tmpPdsBatchSelect_DS.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (inventDimFormSetup.movement().isItemWHSEnabled())
        {
            Args args = new Args();
            args.record(element.args().record());
            args.caller(element.args().caller());
            menuFunction menuFunction = new MenuFunction(menuitemDisplayStr(WHSBatchAttribReserve), MenuItemType::Display);

            var logger = InventInstrumentationLogger::createLogger(formStr(WHSBatchAttribReserve));
            using (var activityContext = logger.whsBatchAttribReserve().whsBatchReservationFormRun())
            {
                menuFunction.run(args);
            }

            element.closeCancel();
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectBatch</Name>
				<Source><![CDATA[
    public void selectBatch(InventBatchId _inventBatchId)
    {
        TmpPdsBatchSelect   tmpSel;

        tmpSel.setTmpData(tmpPdsBatchSelect);
        delete_from tmpSel;

        tmpSel.clear();
        tmpSel.InventBatchId = _inventBatchId;
        tmpSel.ItemId = this.movement().itemId();
        tmpSel.insert();

        tmpPdsBatchSelect_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCWDesign</Name>
				<Source><![CDATA[
    public void updateCWDesign()
    {
        if (PdsGlobal::pdsIsCWItem(movement.itemId()))
        {
            groupNonCatchWeightGrid.visible(false);
            groupCatchWeightGrid.visible(true);
            pdsCWReserveNow.visible(true);
            reserveNow.visible(false);
        }
        else
        {
            groupNonCatchWeightGrid.visible(true);
            groupCatchWeightGrid.visible(false);
            pdsCWReserveNow.visible(false);
            reserveNow.visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    public void updateDesign(InventDimFormDesignUpdate _mode)
    {
        switch (_mode)
        {
            case InventDimFormDesignUpdate::Init          :
                element.inventDimSetupObject().initFromCaller();
                element.inventDimSetupObject().parmCtrlItemId(inventSum_ItemId);

                if (element.inventDimSetupObject().movement()
                    && !element.inventDimSetupObject().movement()
                        .canReservationFormBeShown())
                {
                    element.close();
                }

                element.inventDimSetupObject().formActiveSetup();
                element.inventDimSetupObject().formSetControls(false,true);
                break;

            case InventDimFormDesignUpdate::LinkActive    :
                movement = element.inventDimSetupObject().movement();
                if (!movement || !movement.canReservationFormBeShown())
                {
                    element.close();
                    return;
                }

                element.inventDimSetupObject().formActiveSetup();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        if (!element.closedCancel())
        {
            element.callerRefresh();
        }

        super();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>InventTransMovement</Name>
				<Methods>
					<Method>
						<Name>movementReservPhysicalUnit</Name>
						<Source><![CDATA[
        public display InventQtyReservPhysical movementReservPhysicalUnit(InventTrans _inventTrans)
        {
            return -inventOnhandReserve.movementReservPhysicalUnit();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;
            SalesLine   salesLine;
            ProdTable   prodTable;
            ProdBOM     prodBOM;

            ret = super();

            if (#PdsShelfEnabled)
            {
                switch (inventTransMovementOrigin.ReferenceCategory)
                {
                    case InventTransType::Sales :
                        salesLine = inventTransMovementOrigin.originator();
                        checkDate = salesLine.ShippingDateRequested;
                        break;
                    case InventTransType::ProdLine :
                        prodBOM = inventtransmovementorigin.originator();
                        checkDate = prodTable.DlvDate;
                        break;
                    case InventTransType::Production :
                    //fallthrough;
                    case InventTransType::PmfProdCoBy :
                        prodTable = inventTransMovementOrigin.originator();
                        checkDate = prodTable.DlvDate;
                        break;
                }
            }

            formCtrl.dataSourceActivePost();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>movementReservOrderedUnit</Name>
						<Source><![CDATA[
        public display InventQtyReservOrdered movementReservOrderedUnit(InventTrans _inventTrans)
        {
            return -inventOnhandReserve.movementReservOrderedUnit();
        }

]]></Source>
					</Method>
					<Method>
						<Name>movementOnOrderUnit</Name>
						<Source><![CDATA[
        public display InventQtyOnOrder movementOnOrderUnit(InventTrans _inventTrans)
        {
            return -inventOnhandReserve.movementOnOrderUnit();
        }

]]></Source>
					</Method>
					<Method>
						<Name>pdsCWMovementReservPhysical</Name>
						<Source><![CDATA[
        public display PdsCWReservPhysical pdsCWMovementReservPhysical(
            InventTrans _inventTrans)
        {
            PdsCWReservPhysical cwReservePhysical = 0;

            if (PdsGlobal::pdsIsCWItem(_inventTrans.ItemId))
            {
                cwReservePhysical =
                    inventOnhandReserve.pdsCWMovementReservPhysical(movement);
            }
            return -cwReservePhysical;
        }

]]></Source>
					</Method>
					<Method>
						<Name>pdsCWMovementReservOrdered</Name>
						<Source><![CDATA[
        public display PdsCWReservOrdered pdsCWMovementReservOrdered(
            InventTrans _inventTrans)
        {
            PdsCWReservOrdered  cwReserveOrdered = 0;

            if (PdsGlobal::pdsIsCWItem(_inventTrans.ItemId))
            {
                cwReserveOrdered =
                    inventOnhandReserve.pdsCWMovementReservOrdered(movement);
            }

            return -cwReserveOrdered;
        }

]]></Source>
					</Method>
					<Method>
						<Name>pdsCWMovementOnOrder</Name>
						<Source><![CDATA[
        public display PdsCWOnOrder pdsCWMovementOnOrder(InventTrans _inventTrans)
        {
            PdsCWOnOrder    cwOnOrder = 0;

            if (PdsGlobal::pdsIsCWItem(_inventTrans.ItemId))
            {
                cwOnOrder = inventOnhandReserve.pdsCWMovementOnOrder(movement);
            }

            return -cwOnOrder;
        }

]]></Source>
					</Method>
					<Method>
						<Name>pdsCWUnitId</Name>
						<Source><![CDATA[
        public display PdsCWUnitId pdsCWUnitId(InventTrans _inventTrans)
        {
            if (PdsGlobal::pdsIsCWItem(_inventTrans.ItemId))
            {
                return PdsCatchWeightItem::pdsCWUnitId(_inventTrans.ItemId);
            }
            else
            {
                return '';
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>unitId</Name>
						<Source><![CDATA[
        public display UnitOfMeasureSymbol unitId()
        {
            InventMovement  lclMov;

            lclMov = element.movement();

            return lclMov ? lclMov.transUnitId() : '';
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TmpPdsBatchSelect</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            element.inventDimSetupObject().modifyQueryTmpBatchSel(inventSum_ds,inventDim_ds,fromInventLocId);
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            element.updateDesign(InventDimFormDesignUpdate::LinkActive);

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
            this.query().dataSourceTable(tableNum(TmpPdsBatchSelect))
                .addSortField(fieldNum(TmpPdsBatchSelect,InventBatchId));
        }

]]></Source>
					</Method>
					<Method>
						<Name>reserveNow</Name>
						<Source><![CDATA[
        public edit PdsQtyReservation reserveNow(
            boolean _set,
            TmpPdsBatchSelect _batchSelect,
            InventQty  _reserveNow)
        {
            boolean                     ret = true;
            PdsQtyReservation           reserveQty;
            PdsBatchDispCheck_Reserve   pdsCheckReserve;
            SalesLine                   salesLine;

            if (_set
                && PdsGlobal::pdsIsCWItem(_batchSelect.ItemId))
            {
                throw error("@PDS123");
            }

            if (inventTrans.inventTable().isItemBatchActivated())
            {
                if (_set
                    && _reserveNow != 0.00
                    && #PdsShelfEnabled)
                {
                    if (element.args().record().TableId == tableNum(SalesLine))
                    {
                        salesLine = element.args().record();
                        ret = InventBatch::pdsCheckExpiryDate(inventDim.InventBatchId,
                                                salesLine.ItemId,
                                                salesLine.ReceiptDateRequested,
                                                true,
                                                salesLine.CustAccount,
                                                false,
                                                inventDim);
                    }
                    else
                    {
                        ret = InventBatch::pdsCheckExpiryDate(
                            inventDim.InventBatchId,
                            inventTrans.ItemId,checkDate);
                    }

                    if (ret)
                    {
                        pdsCheckReserve = PdsBatchDispCheck_Reserve::construct();
                        ret = pdsCheckReserve.validateTransCheck(
                            inventTrans,element.args().record());
                    }
                }
            }

            if (ret)
            {
                reserveQty = inventOnhandReserve.reserveNow(
                    _set, _batchSelect.joinChild().joinChild(), _reserveNow, _batchSelect.joinChild());

                if (_set)
                {
                    element.refreshMovement();
                }
            }
            else if (_set)
            {
                reserveQty = _reserveNow;
            }

            return reserveQty;
        }

]]></Source>
					</Method>
					<Method>
						<Name>pdsCWReserveNow</Name>
						<Source><![CDATA[
        public edit PdsCWQtyReservation pdsCWReserveNow(
            boolean             _set,
            TmpPdsBatchSelect   _batchSelect,
            PdsCWQtyReservation _cwReserveNow)
        {
            InventQty                   qty;
            InventQty                   onOrder;
            InventQty                   preReserv;
            PdsCWInventQty              cwPreReserv;
            PdsCWInventQty              cwQty = _cwReserveNow;
            boolean                     reserveSerialNum = false;
            InventMovement              inventMov;
            PdsCWInventQty              ret;
            InventDimParm               lclInventDimParm;
            InventTransIdSum            inventTransIdSum;
            InventDim                   lclInventDim =  _batchSelect.joinChild();
            InventSum                   lclInventSum =  _batchSelect.joinChild().joinChild();
            boolean                     allow = true;
            SalesLine                   salesLine;
            PdsBatchDispCheck_Reserve   pdsCheckReserve;
            InventDim                   sameLotInventDim;
            PmfQtyDataCarrier           qtyDataCarrier;

            if (!_set)
            {
                return inventOnhandReserve.pdsCWReserveNowParent(false,lclInventSum,0,0);
            }

            if (#PdsShelfEnabled && inventTrans.inventTable().isItemBatchActivated())
            {
                if (element.args().record().TableId == tableNum(SalesLine))
                {
                    salesLine = element.args().record();
                    allow = InventBatch::pdsCheckExpiryDate(inventDim.InventBatchId,
                                            salesLine.ItemId,
                                            salesLine.ReceiptDateRequested,
                                            true,
                                            salesLine.CustAccount,
                                            false,
                                            inventDim);
                }
                else
                {
                    allow = InventBatch::pdsCheckExpiryDate(inventDim.InventBatchId,
                                                            inventTrans.ItemId,
                                                            checkDate);
                }
            }

            inventMov = InventMovement::construct(element.args().record());

            inventTransIdSum = InventTransIdSum::newTransOriginId(inventMov.inventTransOriginId());

            lclInventDimParm = inventDimFormSetup.parmDimParmVisibleGrid().data();
            lclInventDim.data(inventDim);

            preReserv = inventOnhandReserve.onhandReservedInvent(
                                inventMov,
                                lclInventDim,
                                lclInventDimParm);
            cwPreReserv = inventOnhandReserve.pdsCWOnhandReserved(
                                inventMov,
                                lclInventDim,
                                lclInventDimParm);

            //
            // determine, what we can allocate
            //
            cwQty = min(_cwReserveNow,lclInventSum.pdsCWAvailPhysicalCalculated() + cwPreReserv);
            //
            // determine, what we have to allocate
            //
            onOrder = -inventTransIdSum.onOrder();
            cwQty = min(cwQty,-inventTransIdSum.pdsCWOnOrder() + cwPreReserv);

            sameLotInventDim.data(inventDim);
            qtyDataCarrier = inventOnhandReserve.pdsCheckSameLotQuantities(sameLotInventDim, 0, cwQty);
            if (!qtyDataCarrier)
            {
                return _cwReserveNow;
            }
            cwQty = qtyDataCarrier.parmCwQty();

            //
            // if this is a single serial number, we allocate
            // all available inventory
            //
            if (lclInventDim.InventSerialId
                && (lclInventSum.PdsCWPhysicalInvent == 1)
                && cwQty)
            {
                qty = lclInventSum.availPhysicalCalculated();
                //
                // we need to increase the remainder on the movement,
                // if we want to reserve more than the original weight
                //
                if (qty > onOrder)
                {
                    ttsbegin;
                    inventMov.setRemainPhysical(
                        inventMov.remainPhysical() - qty + onOrder);
                    inventMov.setRemainPhysicalUnit(
                        EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                            inventMov.itemId(),
                            inventMov.inventDimId(),
                            inventMov.remainPhysical(),
                            InventTableModule::find(inventMov.itemId(), ModuleInventPurchSales::Invent).UnitId,
                            inventMov.transUnitId(),
                            NoYes::Yes));

                    inventMov.updateBuffer();
                    ttscommit;
                }
                reserveSerialNum = true;
            }
            else
            {
                qty = PdsCatchWeight::minInventQty(lclInventSum.ItemId,cwQty);
            }

            if (allow && lclInventSum.inventTable().isItemBatchActivated())
            {
                pdsCheckReserve = PdsBatchDispCheck_Reserve::construct();
                allow = pdsCheckReserve.validateTransCheck(inventTrans,
                                                           element.args().record());
            }

            if (allow)
            {
                ret = inventOnhandReserve.pdsCWReserveNowParent(_set,
                                                          lclInventSum,
                                                          qty,
                                                          cwQty,
                                                          reserveSerialNum);
            }
            else
            {
                ret = _cwReserveNow;
            }

            //
            // we eventually have to reset the remainder,
            // if we un-reserved a catch weight from a fully reserved order
            //

            if (!cwQty
                && cwPreReserv == 1
                && inventDim.InventSerialId
                && (lclInventSum.PdsCWPhysicalInvent == 1))
            {
                inventMov = InventMovement::construct(
                    inventMov.buffer(),inventMov.inventMovSubType(),
                    inventMov.childBuffer());
                if (inventMov.transIdSum(true).pdsCWOnOrder() == -1)
                {
                    if (inventMov.transQty() != inventMov.transIdSum().issue()
                        && preReserv == -inventMov.transIdSum().onOrder())
                    {
                        qty = inventMov.transQty() - inventMov.transIdSum().pdsSold()
                                - inventMov.transIdSum().physical();
                        if (qty > 0)
                        {
                            qty = 0;
                        }
                        ttsbegin;
                        inventMov = InventMovement::construct(element.args().record());
                        inventMov.setRemainPhysical(qty);
                        inventMov.setRemainPhysicalUnit(
                            EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                inventMov.itemId(),
                                inventMov.inventDimId(),
                                inventMov.remainPhysical(),
                                InventTableModule::find(inventMov.itemId(), ModuleInventPurchSales::Invent).UnitId,
                                inventMov.transUnitId(),
                                NoYes::Yes));

                        inventMov.updateBuffer();
                        ttscommit;
                    }
                }
            }
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>availPhysicalUnit</Name>
						<Source><![CDATA[
        public display InventQtyAvailPhysical availPhysicalUnit(InventSum _inventSum)
        {
            return inventOnhandReserve.convertQtyBetweenUnits(
                    _inventSum.availPhysicalCalculated(),
                    unitIdInvent, unitIdSecondary,
                    _inventSum.ItemId);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>InventDim</Name>
				<Methods>
					<Method>
						<Name>pdsBestBeforeDate</Name>
						<Source><![CDATA[
        public display PdsBestBeforeDate pdsBestBeforeDate(InventDim _inventDim)
        {
            PdsBestBeforeDate   bestBeforeDate = dateNull();

            if (hasFieldAccess(tableNum(InventBatch),
                    fieldNum(InventBatch,PdsBestBeforeDate),AccessType::View))
            {
                if (_inventDim.InventBatchId)
                {
                    bestBeforeDate = InventBatch::find(
                        _inventDim.InventBatchId,
                        tmpPdsBatchSelect.ItemId).PdsBestBeforeDate;
                }
            }

            return bestBeforeDate;
        }

]]></Source>
					</Method>
					<Method>
						<Name>pdsExpDate</Name>
						<Source><![CDATA[
        public display InventBatchExpDate pdsExpDate(InventDim _inventDim)
        {
            InventBatchExpDate   expDate = dateNull();

            if (hasFieldAccess(tableNum(InventBatch),
                    fieldNum(InventBatch,PdsBestBeforeDate),AccessType::View))
            {
                if (_inventDim.InventBatchId)
                {
                    expDate = InventBatch::find(
                    _inventDim.InventBatchId, tmpPdsBatchSelect.ItemId).ExpDate;
                }
            }

            return expDate;
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int                 ret;
            InventTable         inventTable;
            SalesLine           salesLine;
            boolean             allowEdit;

            inventTable = InventTable::find(inventSum.ItemId);

            if (#PdsShelfEnabled
                && inventTable.isItemBatchActivated())
            {
                if (inventTable.modelGroup().PdsCheck)
                {
                    if (element.args().record().TableId == tableNum(SalesLine))
                    {
                        salesLine = element.args().record();
                        allowEdit = InventBatch::pdsCheckExpiryDate(
                                        inventDim.InventBatchId,
                                        inventSum.ItemId,
                                        salesLine.ReceiptDateRequested,
                                        false,
                                        salesLine.CustAccount,
                                        false,
                                        inventDim);
                    }
                    else
                    {
                        allowEdit = InventBatch::pdsCheckExpiryDate(
                                        inventDim.InventBatchId,
                                        inventSum.ItemId);
                    }

                    if (reserveNow.visible())
                    {
                        reserveNow.enabled(allowEdit);
                    }
                    else if (pdsCWReserveNow.visible())
                    {
                        pdsCWReserveNow.enabled(allowEdit);
                    }
                }
            }

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            // Suppress the super() call
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>inventBatchId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                PdsBatchDispCheck_Reserve   pdsCheckReserve;
                Common                      refRecord;

                if (#PdsShelfEnabled)
                {
                    refRecord = inventTransOrigin.originator();
                    if (refRecord)
                    {
                        pdsCheckReserve = PdsBatchDispCheck_Reserve::construct();
                        if (pdsCheckReserve.validateTransCheck(inventTrans,refRecord))
                        {
                            super();
                        }
                    }
                }
                else
                {
                    super();
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>InventSum</Name>
				<Methods>
					<Method>
						<Name>pdsCWAvailOrdered</Name>
						<Source><![CDATA[
        public display PdsCWAvailReservation pdsCWAvailOrdered(InventSum _inventSum)
        {
            return _inventSum.pdsCWAvailOrderedCalculated();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
            element.inventDimSetupObject().initQueryInventSum(inventSum_DS);

            QueryBuildDataSource qbds = this.query().dataSourceName(this.name());
            QueryBuildRange qbr = qbds.addRange(fieldNum(InventSum, AvailPhysical));
            qbr.value(strFmt('(%1 > 0) || (%2 == 0)',
                fieldStr(InventSum, AvailPhysical),
                fieldStr(InventSum, AvailPhysical)));
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            //    super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>availReservationUnit</Name>
						<Source><![CDATA[
        public display InventQtyAvailReservation availReservationUnit(
            InventSum _inventSum)
        {
            return inventOnhandReserve.convertQtyBetweenUnits(
                _inventSum.availReservation(InventParameters::find().ReserveOnOrdered),
                    unitIdInvent, unitIdSecondary,
                    _inventSum.ItemId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>reservOrderedUnit</Name>
						<Source><![CDATA[
        public display InventQtyReservOrdered reservOrderedUnit(InventSum _inventSum)
        {
            return inventOnhandReserve.convertQtyBetweenUnits(
                    _inventSum.ReservOrdered,
                    unitIdInvent, unitIdSecondary,
                    _inventSum.ItemId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>orderedUnit</Name>
						<Source><![CDATA[
        public display InventQtyOrdered  orderedUnit(InventSum _inventSum)
        {
            return inventOnhandReserve.convertQtyBetweenUnits(
                    _inventSum.Ordered,
                    unitIdInvent,  unitIdSecondary,
                    _inventSum.ItemId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>physicalInventUnit</Name>
						<Source><![CDATA[
        public display InventQtyPhysicalOnhand physicalInventUnit(InventSum _inventSum)
        {
            return inventOnhandReserve.convertQtyBetweenUnits(
                    _inventSum.physicalInventCalculated(),
                    unitIdInvent, unitIdSecondary,
                    _inventSum.ItemId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>reservPhysicalUnit</Name>
						<Source><![CDATA[
        public display InventQtyReservPhysical reservPhysicalUnit(InventSum _inventSum)
        {
            return inventOnhandReserve.convertQtyBetweenUnits(
                    _inventSum.ReservPhysical,
                    unitIdInvent, unitIdSecondary,
                    _inventSum.ItemId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>availPhysicalUnit</Name>
						<Source><![CDATA[
        public display InventQtyAvailPhysical availPhysicalUnit(InventSum _inventSum)
        {
            return inventOnhandReserve.convertQtyBetweenUnits(
                    _inventSum.availPhysicalCalculated(),
                    unitIdInvent, unitIdSecondary,
                    _inventSum.ItemId);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>InventTrans</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            #DEFINE.LiteralsActive(0)
            #DEFINE.LiteralsNotActive(2)

            InventDimParm inventDimParmFilled;

            QueryBuildDataSource    qbsTrans;
            QueryBuildDataSource    qbsDim;

            this.query().literals(#LiteralsActive);

            qbsTrans = this.query().dataSourceTable(tableNum(InventTrans));
            qbsDim   = this.query().dataSourceTable(tableNum(InventDim));

            qbsTrans.sortClear();
            qbsDim.sortClear();

            inventDimParmFilled.initFromInventDim(inventDim);
            if (InventDimParm::isInventDimParmEqual(inventDimParmFilled,InventDimParm::andParms(
                            element.inventDimParmActive(),
                            inventDimFormSetup.parmDimParmVisibleGrid())))
            {
                InventDim::queryAddRangeFromDSSort(inventTrans_ds.query().dataSourceTable(tableNum(InventDim)),inventDim_DS);

                rangeRecId.value(SysQuery::valueUnlimited());

                if (InventTrackingDimension::queryAddIndexHint(qbsDim, inventDimParmFilled))
                {
                    this.query().literals(#LiteralsNotActive);

                    qbsTrans.addSortIndex(indexNum(InventTrans, DimIdIdx));
                    qbsTrans.indexIsHint(true);
                }
                else if (!inventDimParmFilled.isFlagSelective())
                {
                    this.query().literals(#LiteralsNotActive);

                    qbsTrans.addSortIndex(indexNum(InventTrans, ItemIdx));
                    qbsTrans.indexIsHint(true);

                    qbsDim.addSortIndex(indexNum(InventDim, DimIdIdx));
                    qbsDim.indexIsHint(true);
                }

                super();
            }
            else
            {
                rangeRecId.value(queryValue(-1));

                this.query().literals(#LiteralsNotActive);

                qbsTrans.addSortIndex(indexNum(InventTrans, RecId));
                qbsTrans.indexIsHint(true);

                qbsDim.addSortIndex(indexNum(InventDim, DimIdIdx));
                qbsDim.indexIsHint(true);

                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>qtyUnit</Name>
						<Source><![CDATA[
        public display InventQty  qtyUnit(InventTrans _inventTrans)
        {
            return inventOnhandReserve.convertQtyBetweenUnits(_inventTrans.Qty, unitIdInvent, unitIdSecondary, _inventTrans.ItemId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            this.query().dataSourceTable(tableNum(InventTrans),1).addRange(fieldNum(InventTrans,StatusIssue)).value('0');
            this.query().dataSourceTable(tableNum(InventTrans),1).addRange(fieldNum(InventTrans,StatusReceipt)).value(queryValue(StatusReceipt::Purchased)+'..'
                    +queryValue(StatusReceipt::QuotationReceipt));
            this.query().dataSourceTable(tableNum(InventTrans),1).addRange(fieldNum(InventTrans,PackingSlipReturned)).value(queryValue(NoYes::No));
            this.query().dataSourceTable(tableNum(InventTrans),1).addRange(fieldNum(InventTrans,InvoiceReturned)).value(queryValue(NoYes::No));
            rangeRecId = this.query().dataSourceTable(tableNum(InventTrans),1).addRange(fieldNum(InventTrans,RecId));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>InventTransMovementOrigin</Name>
				<Methods>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        public void linkActive()
        {
            super();

            movement = null;
            movement = element.movement();

            if (movement && movement.itemId() != currentItemId)
            {
                if (movement.itemId() && movement.isItemWHSEnabled())
                {
                    element.close();
                }

                this.initializeUnitOfMeasure();

                inventOnhandReserve.parmSourceUnitId(unitIdInvent);
                inventOnhandReserve.parmTargetUnitId(unitIdSecondary);

                element.fillDefaultAttributes();
                cacheFilled = false;

                CostManagementInstrumentationLogger instrumentationLogger = CostManagementInstrumentationLogger::createLogger(formStr(PdsBatchAttribReserve));
                using (var activityContext = instrumentationLogger.batchAttributeReserveActivities().refreshSelection())
                {
                    element.refreshSelection();
                }

                element.updateDesign(InventDimFormDesignUpdate::LinkActive);
                element.updateCWDesign();
            }
            currentItemId = movement.itemId();

            tmpPdsBatchSelect_ds.research();
        }

]]></Source>
					</Method>
					<Method>
						<Name>initializeUnitOfMeasure</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets the inventory and the secondary unit of measure.
        /// </summary>
        protected void initializeUnitOfMeasure()
        {
            unitIdInvent = InventTableModule::find(movement.itemId(), ModuleInventPurchSales::Invent).UnitId;
            unitIdSecondary = movement.transUnitId();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            InventTransFormHelper::formQueryAddDynalink(inventTransMovementOrigin_DS, null, element.args());
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Search</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            FormRun fr;
            Args    args;

            super();
            args = new Args(formStr(PdsBatchAttribReserveSelect));
            args.caller(element);
            args.record(tmpPdsBatchAttribSelect);
            args.parmEnumType(enumNum(ModuleAxapta));
            args.parmEnum(enum2int(ModuleAxapta::SalesOrder));
            fr = classfactory.formRunClass(args);
            fr.run();
            fr.wait();
            fr = null;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>History</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            Args args = new Args();
            args.caller(element);
            args.record(tmpPdsBatchAttribSelect);

            MenuFunction mf = new MenuFunction(menuItemDisplayStr(PdsBatchAttribReserveHistory), MenuItemType::Display);
            FormRun      fr = mf.create(Args);

            fr.run();
            fr.wait();

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReserveLot</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            inventOnhandReserve.updateReserveLot(tmpPdsBatchAttribSelect);

            element.refreshMovement();
            element.callerRefresh();
            reserveNow.setFocus();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReserveLine</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            PdsBatchDispCheck_Reserve   pdsDispCheck;
            CustAccount                 custId;
            Common                      common = element.args().record();

            super();

            switch (common.TableId)
            {
                case tableNum(SalesLine) :
                    custId = common.(fieldNum(SalesLine,CustAccount));
                    break;
                case tableNum(SalesParmLine) :
                    custId = common.(fieldNum(SalesParmLine,CustAccount));
                    break;
                default :
                    custId = '';
            }

            if (!PdsBatchAttributes::pdsCheckBatchAtribReserve(
                    inventTrans.ItemId,
                    custId,
                    inventDim.InventBatchId,
                    tmpPdsBatchAttribSelect))
            {
                throw error("@PDS1332");
            }

            if (#PdsShelfEnabled)
            {
                if (element.mustValidateExpiryDate(custId)
                    && !InventBatch::pdsCheckExpiryDate(
                        inventDim.InventBatchId,
                        inventTrans.ItemId,
                        checkDate,
                        true,
                        custId,
                        movement.pdsOverrideFEFO(),
                        inventDim))
                {
                    throw error("@PRO2139");
                }
            }
            if (#PdsEnabled)
            {
                pdsDispCheck = PdsBatchDispCheck_Reserve::construct();
                if (!pdsDispCheck.validateTransCheck(
                        inventTrans,
                        element.args().record()))
                {
                    throw error("@PRO2139");
                }
            }

            inventOnhandReserve.updateReserveLine(inventSum, inventDim);
            element.refreshMovement();
            element.callerRefresh();
            reserveNow.setFocus();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>InventTransMovement</Name>
			<Table>InventTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountAdjustment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountOperations</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountPosted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSecCurAdjustment_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSecCurPhysical_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSecCurPosted_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSettled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSettledSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountStd</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountStdSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateClosed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateClosedSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateExpected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateFinancial</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateInvent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DatePhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GroupRefId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GroupRefType_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyInventDimTransferred</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimFixed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventDimIdSales_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransOriginDelivery_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransOriginSales_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransOriginTransit_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceReturned</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkingRefInventTransOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackingSlipId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackingSlipReturned</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWSettled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PickingRouteID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjAdjustRefId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjCategoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Qty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QtySettled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QtySettledSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnInventTransOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RevenueAmountPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShippingDateConfirmed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShippingDateRequested</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StatusIssue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StatusReceipt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Storno_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StornoPhysical_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAmountPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TimeExpected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransChildRefId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransChildType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValueOpen</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValueOpenSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VoucherPhysical</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DelayActive>No</DelayActive>
			<JoinSource>InventTransMovementOrigin</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TmpPdsBatchSelect</Name>
			<Table>TmpPdsBatchSelect</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventBatchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventDim</Name>
			<Table>InventDim</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>configId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventBatchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventColorId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventVersionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventGtdId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventOwnerId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventProfileId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventSerialId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSiteId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSizeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStyleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LicensePlateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SHA1Hash</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSPalletId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DelayActive>No</DelayActive>
			<JoinSource>TmpPdsBatchSelect</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventSum</Name>
			<Table>InventSum</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Arrived</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AvailOrdered</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AvailPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Closed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ClosedQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Deducted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastUpdDateExpected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastUpdDatePhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OnOrder</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Ordered</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWArrived</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWAvailOrdered</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWAvailPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWDeducted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWOnOrder</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWOrdered</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWPhysicalInvent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWPicked</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWPostedQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWQuotationIssue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWQuotationReceipt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWReceived</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWRegistered</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWReservOrdered</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWReservPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PhysicalInvent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PhysicalValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PhysicalValueSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Picked</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostedQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostedValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostedValueSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QuotationIssue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QuotationReceipt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Received</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Registered</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReservOrdered</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReservPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DelayActive>No</DelayActive>
			<JoinSource>InventDim</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TmpPdsBatchAttribSelect</Name>
			<Table>TmpPdsBatchAttribSelect</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsBatchAttribId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsBatchAttribOpr1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsBatchAttribOpr2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsBatchAttribValue1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsBatchAttribValue2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventTrans</Name>
			<Table>InventTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountAdjustment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountOperations</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountPosted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSecCurAdjustment_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSecCurPhysical_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSecCurPosted_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSettled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSettledSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountStd</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountStdSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateClosed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateClosedSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateExpected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateFinancial</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateInvent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DatePhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GroupRefId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GroupRefType_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyInventDimTransferred</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimFixed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventDimIdSales_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransOriginDelivery_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransOriginSales_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransOriginTransit_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceReturned</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkingRefInventTransOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackingSlipId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackingSlipReturned</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWSettled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PickingRouteID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjAdjustRefId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjCategoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Qty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QtySettled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QtySettledSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnInventTransOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RevenueAmountPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShippingDateConfirmed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShippingDateRequested</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StatusIssue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StatusReceipt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Storno_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StornoPhysical_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAmountPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TimeExpected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransChildRefId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransChildType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValueOpen</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValueOpenSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VoucherPhysical</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TmpPdsBatchSelect</JoinSource>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventDimTrans</Name>
			<Table>InventDim</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>configId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventBatchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventColorId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventVersionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventGtdId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventOwnerId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventProfileId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventSerialId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSiteId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSizeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStyleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LicensePlateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SHA1Hash</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSPalletId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DelayActive>No</DelayActive>
			<JoinSource>InventTrans</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventTransMovementOrigin</Name>
			<Table>InventTransOrigin</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemInventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Party</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DelayActive>No</DelayActive>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventTransOrigin</Name>
			<Table>InventTransOrigin</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemInventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Party</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DelayActive>No</DelayActive>
			<JoinSource>InventTrans</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@PRO1848</Caption>
		<Pattern xmlns="">SimpleDetails-FastTabsContainer</Pattern>
		<PatternVersion xmlns="">1.4</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>536870911</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>Search</Name>
								<ElementPosition>805306365</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@PRO1850</HelpText>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@PRO1630</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>History</Name>
								<ElementPosition>1073741820</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@PRO1851</HelpText>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@PRO1844</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>PdsBatchAttributes</Name>
								<ElementPosition>1342177275</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@PRO1683</HelpText>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>TmpPdsBatchSelect</DataSource>
								<MenuItemName>PdsBatchAttributes</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ReserveLot</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612730</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@PDS1326</HelpText>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@PDS1327</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Lot</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>HeaderReference</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>613566756</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Skip>Yes</Skip>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>InventTransMovementOrigin_ReferenceCategory</Name>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>ReferenceCategory</DataField>
								<DataSource>InventTransMovementOrigin</DataSource>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>InventTransMovementOrigin_ReferenceId</Name>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>ReferenceId</DataField>
								<DataSource>InventTransMovementOrigin</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>InventTransMovementOrigin_ItemId</Name>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>ItemId</DataField>
								<DataSource>InventTransMovementOrigin</DataSource>
							</AxFormControl>
						</Controls>
						<DataSource>InventTransMovementOrigin</DataSource>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>HeaderUnits</Name>
						<ElementPosition>920350134</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>UnitId</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>unitId</DataMethod>
								<DataSource>InventTransMovement</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>PdsCWUnitId</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>pdsCWUnitId</DataMethod>
								<DataSource>InventTransMovement</DataSource>
							</AxFormControl>
						</Controls>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>HeaderReservedPhysical</Name>
						<ElementPosition>1227133512</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>ReservPhysicalLot</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>movementReservPhysicalUnit</DataMethod>
								<DataSource>InventTransMovement</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>PdsCWReservPhysicalLot</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>pdsCWMovementReservPhysical</DataMethod>
								<DataSource>InventTransMovement</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
						</Controls>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>HeaderReservOrdered</Name>
						<ElementPosition>1533916890</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>ReservOrderedLot</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>movementReservOrderedUnit</DataMethod>
								<DataSource>InventTransMovement</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>PdsCWReservOrderedLot</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>pdsCWMovementReservOrdered</DataMethod>
								<DataSource>InventTransMovement</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
						</Controls>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>HeaderOnOrder</Name>
						<ElementPosition>1840700268</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>OnOrderLot</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>movementOnOrderUnit</DataMethod>
								<DataSource>InventTransMovement</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>PdsCWOnOrderLot</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>pdsCWMovementOnOrder</DataMethod>
								<DataSource>InventTransMovement</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
						</Controls>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<DataSource>InventTransMovement</DataSource>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1610612733</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Overview</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>GridActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>GridButtonGroup</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>ReserveLine</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048188</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@PDS1328</HelpText>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<Text>@PDS1329</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>InventDimParmFixed</Name>
												<ElementPosition>536870910</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>MenuFunctionButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<MenuItemName>InventDimParmFixed</MenuItemName>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>OnHand</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InventSum_ItemId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ItemId</DataField>
										<DataSource>InventSum</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>InventoryDimensionsGrid</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_configId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>configId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_InventSizeId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventSizeId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_InventColorId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventColorId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_InventStyleId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventStyleId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_InventVersionId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventVersionId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_InventSiteId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventSiteId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_InventLocationId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventLocationId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_inventBatchId</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>2113929214</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>inventBatchId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_wMSLocationId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>wMSLocationId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_inventSerialId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>inventSerialId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_InventStatusId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventStatusId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_LicensePlateId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>LicensePlateId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_InventOwnerId_RU</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventOwnerId_RU</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_InventProfileId_RU</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventProfileId_RU</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_InventGtdId_RU</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventGtdId_RU</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
										</Controls>
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataGroup>InventoryDimensions</DataGroup>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>pdsBestBeforeDate</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>pdsBestBeforeDate</DataMethod>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>pdsExpDate</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>pdsExpDate</DataMethod>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>GroupNonCatchWeightGrid</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>PhisicalInvent</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>physicalInventUnit</DataMethod>
												<DataSource>InventSum</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>ReservPhysicalGrid</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>reservPhysicalUnit</DataMethod>
												<DataSource>InventSum</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>AvailPhysicalGrid</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>1879048190</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>availPhysicalUnit</DataMethod>
												<DataSource>InventSum</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>OrderedGrid</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>2013265918</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>orderedUnit</DataMethod>
												<DataSource>InventSum</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>ReservOrderedGrid</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>2080374782</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>reservOrderedUnit</DataMethod>
												<DataSource>InventSum</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>AvailReservationGrid</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>2113929214</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>availReservationUnit</DataMethod>
												<DataSource>InventSum</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
										</Controls>
										<BackgroundColor>WindowBackground</BackgroundColor>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>GroupCatchWeightGrid</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2113929214</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>PdsCWPhysicalInventGrid</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Skip>Yes</Skip>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<CacheDataMethod>No</CacheDataMethod>
												<DataMethod>pdsCWPhysicalInventCalculated</DataMethod>
												<DataSource>InventSum</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>PdsCWReservPhysicalGrid</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Skip>Yes</Skip>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>PdsCWReservPhysical</DataField>
												<DataSource>InventSum</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>PdsCWAvailPhysicalGrid</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>1811939326</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Skip>Yes</Skip>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<CacheDataMethod>No</CacheDataMethod>
												<DataMethod>pdsCWAvailPhysicalCalculated</DataMethod>
												<DataSource>InventSum</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>PdsCWOrderedGrid</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>2013265918</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Skip>Yes</Skip>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>PdsCWOrdered</DataField>
												<DataSource>InventSum</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>PdsCWReservOrderedGrid</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>2080374782</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Skip>Yes</Skip>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>PdsCWReservOrdered</DataField>
												<DataSource>InventSum</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>PdsCWAvailOrderedGrid</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>2113929214</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Skip>Yes</Skip>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<CacheDataMethod>No</CacheDataMethod>
												<DataMethod>pdsCWAvailOrderedCalculated</DataMethod>
												<DataSource>InventSum</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
										</Controls>
										<BackgroundColor>WindowBackground</BackgroundColor>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>PdsCWReserveNow</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2130706430</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>pdsCWReserveNow</DataMethod>
										<DataSource>TmpPdsBatchSelect</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ReserveNow</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2139095038</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_InventoryManagement:PdsBatchAttribReserve_ReserveNow</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>reserveNow</DataMethod>
										<DataSource>TmpPdsBatchSelect</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<DataSource>TmpPdsBatchSelect</DataSource>
								<ShowRowLabels>No</ShowRowLabels>
								<VisibleRows>8</VisibleRows>
								<VisibleRowsMode>Fixed</VisibleRowsMode>
							</AxFormControl>
						</Controls>
						<Caption>@SYS9039</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Reference</Name>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>InventTransOrigin_ReferenceCategory</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ReferenceCategory</DataField>
										<DataSource>InventTransOrigin</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InventTransOrigin_ReferenceId</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ReferenceId</DataField>
										<DataSource>InventTransOrigin</DataSource>
										<LookupButton>Never</LookupButton>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InventTrans_PackingSlipId</Name>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>PackingSlipId</DataField>
										<DataSource>InventTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InventTrans_InvoiceId</Name>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>InvoiceId</DataField>
										<DataSource>InventTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>InventTrans_StatusReceipt</Name>
										<ElementPosition>2063597566</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>StatusReceipt</DataField>
										<DataSource>InventTrans</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>InventTrans_DateStatus</Name>
										<ElementPosition>2113929214</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>DateStatus</DataField>
										<DataSource>InventTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>InventTrans_PdsCWQty</Name>
										<ElementPosition>2130706430</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>PdsCWQty</DataField>
										<DataSource>InventTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>InventTrans_Qty</Name>
										<ElementPosition>2139095038</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>qtyUnit</DataMethod>
										<DataSource>InventTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<DataSource>InventTrans</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@PRO1463</Caption>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>