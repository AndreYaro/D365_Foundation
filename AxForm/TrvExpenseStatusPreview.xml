<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>TrvExpenseStatusPreview</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class TrvExpenseStatusPreview extends FormRun
{
    int messageCount = 0;
    str errorIndicatorEnumSymbolName = enum2Symbol(enumnum(FormComboBoxControlExtendedStyle),
                                                   FormComboBoxControlExtendedStyle::expensePolicy_violationStatus);

    TrvExpTrans trvExpTrans;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build the error/warning messages in a preview for the given expense.
    /// </summary>
    public void init()
    {
        super();

        if (element.args() && element.args().record() && element.args().dataset() == tablenum(TrvExpTrans))
        {
            trvExpTrans = element.args().record();
            element.buildMessages();
        }
        // Else, do nothing, the preview shouldn't show up since the static form design is empty.
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMessages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build messages - policy violations, itemization errors, budget checks etc.
    /// </summary>
    private void buildMessages()
    {
        element.buildPolicyMessages();
        element.buildItemizeErrorMessages();
        element.buildProjBudgetMessages();
        element.buildBudgetMessage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPolicyMessages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build expense policy violations + project policy violations.
    /// </summary>
    /// <param name = "_trvExpTrans">The expense line to fetch the violations from.</param>
    private void buildPolicyMessages(TrvExpTrans _trvExpTrans = trvExpTrans)
    {
        List                violations = _trvExpTrans.policyViolationLevelMsg();
        ListEnumerator      listEnumerator;
        TrvPolicyViolation  violation;

        listEnumerator = violations.getEnumerator();

        while (listEnumerator.moveNext())
        {
            violation = listEnumerator.current();
            element.buildMessageControl(violation.parmViolationMessage(), violation.parmAdjustedViolationLevel());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemizeErrorMessages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build itemization related error messages. Includes policy violations on itemized lines.
    /// </summary>
    private void buildItemizeErrorMessages()
    {
        TrvExpTrans itemizedLine;

        if (!trvExpTrans.isItemizationComplete())
        {
            element.buildMessageControl("@Expense:ItemizationIncompleteError", TrvPolicyViolationLevel::Error);
        }

        if (trvExpTrans.LineType == TrvExpLineType::ItemizedHeader)
        {
            while select itemizedLine where itemizedLine.ParentRecId == trvExpTrans.RecId
            {
                element.buildPolicyMessages(itemizedLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProjBudgetMessages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build expense project budget violation messages.
    /// </summary>
    private void buildProjBudgetMessages()
    {
        List                    violations = trvExpTrans.projectBudgetViolationMsg();
        ListEnumerator          listEnumerator;
        ProjBudgetStatusDetail  projBudgetStatusDetail;

        listEnumerator = violations.getEnumerator();

        while (listEnumerator.moveNext())
        {
            projBudgetStatusDetail = listEnumerator.current();
            element.buildMessageControl(
                projBudgetStatusDetail.Message,
                projBudgetStatusDetail.ProjBudgetControlErrorWarning == ProjBudgetControlErrorWarning::OverBudgetError ? TrvPolicyViolationLevel::Error : TrvPolicyViolationLevel::Warning
                );
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildBudgetMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build expense budget violation message.
    /// </summary>
    private void buildBudgetMessage()
    {
        BudgetCheckResult budgetLevel = trvExpTrans.budgetViolationLevel();

        if (budgetLevel == BudgetCheckResult::PassedWithWarnings)
        {
            element.buildMessageControl("@Expense:GenericBudgetWarning", TrvPolicyViolationLevel::Warning);
        }
        else if (budgetLevel == BudgetCheckResult::Failed)
        {
            TrvParameters trvParameters = TrvParameters::find();
            boolean allowSubmit = trvParameters.IsAllowSubmitExpenseOnBudgetFail;
            boolean allowApprove = trvParameters.IsAllowApproveExpenseOnBudgetFail;

            switch (trvExpTrans.ApprovalStatus)
            {
                case TrvAppStatus::Create:
                    if (allowSubmit)
                    {
                        element.buildMessageControl("@Expense:GenericBudgetWarning", TrvPolicyViolationLevel::Warning);
                    }
                    else
                    {
                        element.buildMessageControl(strFmt("@SYS304364", trvExpTrans.ExpNumber), TrvPolicyViolationLevel::Error);
                    }
                    break;

                case TrvAppStatus::Pending:
                    if (allowApprove)
                    {
                        element.buildMessageControl("@Expense:GenericBudgetWarning", TrvPolicyViolationLevel::Warning);
                    }
                    else
                    {
                        element.buildMessageControl(strFmt("@SYS304365", trvExpTrans.ExpNumber), TrvPolicyViolationLevel::Error);
                    }
                    break;

                case TrvAppStatus::Approved:
                    if (TrvBudgetCheckHelper::getOverBudgetAction() == BudgetCheckOverbudgetOption::AllowProcessing)
                    {
                        element.buildMessageControl("@Expense:GenericBudgetWarning", TrvPolicyViolationLevel::Warning);
                    }
                    else
                    {
                        element.buildMessageControl(strFmt("@SYS304366", trvExpTrans.ExpNumber), TrvPolicyViolationLevel::Error);
                    }
                    break;

                default:
                    element.buildMessageControl("@Expense:GenericBudgetWarning", TrvPolicyViolationLevel::Error);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMessageControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build the actual form controls.
    /// </summary>
    /// <param name = "_text">The error message.</param>
    /// <param name = "_level">The error level.</param>
    private void buildMessageControl(str _text, TrvPolicyViolationLevel _level)
    {
        FormStaticTextControl message;
        FormComboBoxControl messageLevel;
        FormGroupControl messageGroup;

        messageGroup = Messages.addControl(FormControlType::Group, 'MessageGroup_' + int2str(messageCount));
        messageGroup.columns(2);

        messageLevel = messageGroup.addControl(FormControlType::ComboBox, 'Icon_' + int2str(messageCount));
        messageLevel.extendedStyle(errorIndicatorEnumSymbolName);
        messageLevel.selection(_level);

        message = messageGroup.addControl(FormControlType::StaticText, 'Message_' + int2str(messageCount));
        message.text(_text);

        messageCount++;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Pattern xmlns="">Custom</Pattern>
		<Style xmlns="">FormPart</Style>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Messages</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls />
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>