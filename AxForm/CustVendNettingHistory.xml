<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>CustVendNettingHistory</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class CustVendNettingHistory extends FormRun
{
    private const str GroupByField = 'CustVendNettingHistoryTmp_JournalNum';
    private CustVendNettingPair custVendNettingPair;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        Args args = element.args();
        if (args && args.record())
        {
            CustVendNettingBalanceTmp nettingBalance = args.record();
            custVendNettingPair = CustVendNettingPair::find(nettingBalance.NettingPairRecId);
        }

        this.reloadData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reloadData</Name>
				<Source><![CDATA[
    private void reloadData()
    {
        CustVendNettingHistoryTmp historyData = this.populateHistoryData(custVendNettingPair);
        CustVendNettingHistoryTmp.linkPhysicalTableInstance(historyData);

        Grid.groupBy(GroupByField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateHistoryData</Name>
				<Source><![CDATA[
    private CustVendNettingHistoryTmp populateHistoryData(CustVendNettingPair _custVendNettingPair)
    {
        CustVendNettingHistoryTmp nettingHistoryTmpTable;
        CustVendNettingExecution custVendNettingExecution;

        while select custVendNettingExecution
            where (_custVendNettingPair.RecId == 0 || custVendNettingExecution.NettingPair == _custVendNettingPair.RecId)
                && (custVendNettingExecution.ProcessingStatus == CustVendNettingProcessStatus::Posted
                    || custVendNettingExecution.ProcessingStatus == CustVendNettingProcessStatus::Reversed)
        {
            VendTrans nettingJournalVendTrans;
            changecompany(custVendNettingExecution.DebitCompany)
            {
                select firstonly AmountCur from nettingJournalVendTrans
                    where nettingJournalVendTrans.RecId == custVendNettingExecution.DebitTransId;
            }

            CustVendNettingAgreement custVendNettingAgreement;
            if (_custVendNettingPair)
            {
                select firstonly Name from custVendNettingAgreement
                    where custVendNettingAgreement.RecId == _custVendNettingPair.CustVendNettingAgreement
                        && custVendNettingExecution.NettingPair == _custVendNettingPair.RecId;
            }
            else
            {
                CustVendNettingPair custVendNettingPairLoc;
                select firstonly Name from custVendNettingAgreement
                    exists join custVendNettingPairLoc
                        where custVendNettingAgreement.RecId == custVendNettingPairLoc.CustVendNettingAgreement
                            && custVendNettingPairLoc.RecId == custVendNettingExecution.NettingPair;
            }

            CustVendTrans invoiceTrans;
            if (custVendNettingExecution.ProcessingStatus != CustVendNettingProcessStatus::Reversed)
            {
                invoiceTrans = custVendNettingExecution.getInvoiceSummary(true);
            }
            nettingHistoryTmpTable.JournalNum = custVendNettingExecution.JournalNum;
            nettingHistoryTmpTable.NettingAgreement = custVendNettingAgreement.Name;
            nettingHistoryTmpTable.NettingPostingDate = custVendNettingExecution.NettingDate;
            nettingHistoryTmpTable.NettingCurrency = custVendNettingExecution.CurrencyToProcess;
            nettingHistoryTmpTable.NettingAmountCur = -nettingJournalVendTrans.AmountCur;
            nettingHistoryTmpTable.AccountType = custVendNettingExecution.CreditAccountType;
            nettingHistoryTmpTable.Account = custVendNettingExecution.CreditAccountNum;
            nettingHistoryTmpTable.ContainedInvoices = int642int(invoiceTrans.RecId);
            nettingHistoryTmpTable.TotalInvoiceAmountCur = invoiceTrans.AmountCur;
            nettingHistoryTmpTable.Status = custVendNettingExecution.ProcessingStatus;
            nettingHistoryTmpTable.Created_By = custVendNettingExecution.CreatedBy;
            nettingHistoryTmpTable.CustVendNettingExecution = custVendNettingExecution.RecId;
            nettingHistoryTmpTable.insert();

            if (custVendNettingExecution.ProcessingStatus != CustVendNettingProcessStatus::Reversed)
            {
                invoiceTrans = custVendNettingExecution.getInvoiceSummary(false);
            }
            nettingHistoryTmpTable.NettingAmountCur = nettingJournalVendTrans.AmountCur;
            nettingHistoryTmpTable.AccountType = custVendNettingExecution.DebitAccountType;
            nettingHistoryTmpTable.Account = custVendNettingExecution.DebitAccountNum;
            nettingHistoryTmpTable.ContainedInvoices = int642int(invoiceTrans.RecId);
            nettingHistoryTmpTable.TotalInvoiceAmountCur = invoiceTrans.AmountCur;
            nettingHistoryTmpTable.insert();
        }

        return nettingHistoryTmpTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonStatus</Name>
				<Source><![CDATA[
    private void setButtonStatus(boolean _nettingPosted)
    {
        OpenDetails.enabled(_nettingPosted);
        ReverseNetting.enabled(_nettingPosted);
        NettingAdvice.enabled(_nettingPosted);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>CustVendNettingHistoryTmp</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret = super();

            element.setButtonStatus(custVendNettingHistoryTmp.Status == CustVendNettingProcessStatus::Posted);

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            element.reloadData();
            QueryBuildDataSource qbds = this.queryBuildDataSource();
            qbds.addSortField(fieldNum(CustVendNettingHistoryTmp, JournalNum));
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>OpenDetails</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            CustVendNettingExecution custVendNettingExecution;
            select firstonly custVendNettingExecution
                where custVendNettingExecution.RecId == custVendNettingHistoryTmp.CustVendNettingExecution;
            Args args = new Args(formstr(CustVendNettingInvoiceOverview));
            args.record(custVendNettingExecution);
            MenuFunction menuFunction = new MenuFunction(menuitemDisplayStr(CustVendNettingInvoiceOverview), MenuItemType::Display);
            menuFunction.run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>NettingAdvice</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            CustVendNettingExecution custVendNettingExecution = CustVendNettingExecution::find(custVendNettingHistoryTmp.CustVendNettingExecution);
            Args args = new Args(formStr(CustVendNettingHistory));
            args.record(custVendNettingExecution);
            CustVendNettingAdviceReportController::printNettingAdviceReport(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CustVendNettingHistoryTmp_Account</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            Args args = new Args();
            switch (custVendNettingHistoryTmp.AccountType)
            {
                case LedgerJournalACType::Cust:
                    CustTable::jumpRefCustomer(custVendNettingHistoryTmp.Account);
                    break;

                case LedgerJournalACType::Vend:
                    VendTable::jumpRefVendor(custVendNettingHistoryTmp.Account);
                    break;

                default:
                    break;
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>CustVendNettingHistoryTmp</Name>
			<Table>CustVendNettingHistoryTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Account</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContainedInvoices</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Created_By</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustVendNettingExecution</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JournalNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NettingAgreement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NettingAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NettingCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NettingPostingDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Status</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalInvoiceAmountCur</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@CashManagement:CustVendNettingHistory</Caption>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">SimpleList</Style>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormDropDialogButtonControl">
								<Name>ReverseNetting</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>DropDialogButton</Type>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
								<DataSource>CustVendNettingHistoryTmp</DataSource>
								<MenuItemName>CustVendNettingReversalDialog</MenuItemName>
								<MultiSelect>No</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
								<NormalImage>Undo</NormalImage>
								<Text>@CashManagement:ReverseNetting</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>OpenDetails</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>CustVendNettingInvoiceOverview</MenuItemName>
								<MultiSelect>No</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
								<Text>@AccountsPayable:OpenDetails</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>NettingAdvice</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>CustVendNettingAdviceReport</MenuItemName>
								<MenuItemType>Output</MenuItemType>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FilterGroup</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Type>Grid</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CustVendNettingHistoryTmp_JournalNum</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>String</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Alignment>Left</Alignment>
						<DataField>JournalNum</DataField>
						<DataSource>CustVendNettingHistoryTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CustVendNettingHistoryTmp_NettingAgreement</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>String</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Alignment>Left</Alignment>
						<DataField>NettingAgreement</DataField>
						<DataSource>CustVendNettingHistoryTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>CustVendNettingHistoryTmp_NettingPostingDate</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Date</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Alignment>Left</Alignment>
						<DataField>NettingPostingDate</DataField>
						<DataSource>CustVendNettingHistoryTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CustVendNettingHistoryTmp_NettingCurrency</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>String</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Alignment>Left</Alignment>
						<DataField>NettingCurrency</DataField>
						<DataSource>CustVendNettingHistoryTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>CustVendNettingHistoryTmp_NettingAmount</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Real</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Alignment>Left</Alignment>
						<DataField>NettingAmountCur</DataField>
						<DataSource>CustVendNettingHistoryTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>CustVendNettingHistoryTmp_AccountType</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>ComboBox</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>AccountType</DataField>
						<DataSource>CustVendNettingHistoryTmp</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CustVendNettingHistoryTmp_Account</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>String</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Alignment>Left</Alignment>
						<DataField>Account</DataField>
						<DataSource>CustVendNettingHistoryTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormIntegerControl">
						<Name>CustVendNettingHistoryTmp_ContainedInvoices</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Integer</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Alignment>Left</Alignment>
						<DataField>ContainedInvoices</DataField>
						<DataSource>CustVendNettingHistoryTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>CustVendNettingHistoryTmp_TotalInvoiceAmountCur</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Real</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Alignment>Left</Alignment>
						<DataField>TotalInvoiceAmountCur</DataField>
						<DataSource>CustVendNettingHistoryTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CustVendNettingHistoryTmp_Created_By</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>String</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Alignment>Left</Alignment>
						<DataField>Created_By</DataField>
						<DataSource>CustVendNettingHistoryTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>CustVendNettingHistoryTmp_Status</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>ComboBox</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>Status</DataField>
						<DataSource>CustVendNettingHistoryTmp</DataSource>
						<Items />
					</AxFormControl>
				</Controls>
				<DataSource>CustVendNettingHistoryTmp</DataSource>
				<GroupBy>JournalNum</GroupBy>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>