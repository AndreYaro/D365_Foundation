<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailOperatingUnitPicker</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class RetailOperatingUnitPicker extends FormRun
{
    #MACROLIB.resAppl
    RunBase  callerRunBase;
    int64    treeSelectedData;

    RetailInternalOrgTreeDatasource internalOrgTreeDS;

    RetailOperatingUnitPickerData    pickerInitParameters;
    RetailIOperatingUnitPickerCaller operatingUnitPickerCaller;

}
]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        if (operatingUnitPickerCaller)
        {
            RetailOperatingUnitPickerData selectedData = RetailOperatingUnitPickerData::createInstance(
                                                            pickerInitParameters.hierarchyPurpose,
                                                            element.oMHierarchyRecId(),
                                                            element.selectedOMInternalOrgRecIds());

            operatingUnitPickerCaller.processOperatingUnitPickerData(selectedData);
        }
        
        if (callerRunBase)
        {
            DialogRunbase dialog = element.args().caller();
            dialog.updateServer();
            if (callerRunBase.checkCloseDialog())
            {
                super();
            }
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButton</Name>
				<Source><![CDATA[
    public void enableButton()
    {
        // Enable the Add button if a node is selected that hasn't been added already
        if ( tree.getSelection() && tree.getItem(tree.getSelection()) && !tree.getItem(tree.getSelection()).stateCut())
        {
            add.enabled(NoYes::Yes);
        }
        else
        {
            add.enabled(NoYes::No);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOMHierarchyType</Name>
				<Source><![CDATA[
    public OMHierarchyType getOMHierarchyType()
    {
        OMHierarchyPurpose  omHierarchyPurpose;
        OMHierarchyType     omHierarchyType;

        select firstonly RecId from omHierarchyType
            where omHierarchyType.Name == comboBoxHierarchy.valueStr()
                join HierarchyType, HierarchyPurpose from omHierarchyPurpose
                where omHierarchyPurpose.HierarchyType == omHierarchyType.RecId
                    && omHierarchyPurpose.HierarchyPurpose == pickerInitParameters.hierarchyPurpose;
        return omHierarchyType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        policyOrganization.fastTabExpanded(FastTabExpanded::Always);

        Object callOriginator = element.args().caller();

        if (callOriginator is DialogRunbase)
        {
            callOriginator = element.args().caller().runBase();
        }
        else if (callOriginator is SysOperationDialog)
        {
            callOriginator = element.args().caller().caller();
        }


        if (element.args().caller() is DialogRunbase)
        {
            callerRunBase = element.args().caller().runBase();
            policyOrganization.caption("@SYS122403");//General
            bottomButtonGrp.visible(NoYes::Yes);
            tab.showTabs(true);
        }

        
        if (callOriginator is RetailIOperatingUnitPickerCaller)
        {
            operatingUnitPickerCaller = callOriginator as RetailIOperatingUnitPickerCaller;
            pickerInitParameters = operatingUnitPickerCaller.getPickerInitParameters();
            
            element.populateNormalOrg(pickerInitParameters.hierarchyPurpose, true, pickerInitParameters.omHierarchyTypeRecId);
            
            element.populateSelection(pickerInitParameters.omInternalOrganizationRecIds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>multiSelectLookup</Name>
				<Source><![CDATA[
    void multiSelectLookup()
    {
        //re-initializes the class to build the tree for selected hierarchy
        internalOrgTreeDS = RetailInternalOrgTreeDatasource::construct(tree, element.getOMHierarchyType());
        internalOrgTreeDS.buildTree();
        element.enableButton();
    }

]]></Source>
			</Method>
			<Method>
				<Name>oMHierarchyRecId</Name>
				<Source><![CDATA[
    public RecId oMHierarchyRecId()
    {
        OMHierarchyType omHierarchy;

        select firstonly RecId from omHierarchy
            where omHierarchy.Name == comboBoxHierarchy.valueStr();

        return omHierarchy.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateNormalOrg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the organization hierarchy combobox.
    /// </summary>
    /// <param name = "_hierarchyPurpose">The hierarchy purpose.</param>
    /// <param name = "_checked">A parameter that indicates if the hierarchy is selected.</param>
    /// <param name = "_hierarchyTypeRecId">The hierarchy type rec Id.</param>
    public void populateNormalOrg(HierarchyPurpose _hierarchyPurpose, boolean _checked = true, RefRecId _hierarchyTypeRecId = 0)
    {
        OMHierarchyPurpose  omHierarchyPurpose;
        OMHierarchyType     omHierarchyType;

        while select HierarchyType from omHierarchyPurpose
            where omHierarchyPurpose.HierarchyPurpose == _hierarchyPurpose
        {
            select firstonly Name from omHierarchyType
                where omHierarchyType.RecId == omHierarchyPurpose.HierarchyType;
            if (omHierarchyType && (_hierarchyTypeRecId != 0 ? _hierarchyTypeRecId == OMHierarchyType.RecId : true))
            {
                if (!_checked)
                {
                    comboBoxHierarchy.delete(omHierarchyType.Name);
                }
                else
                {
                    comboBoxHierarchy.add(omHierarchyType.Name);
                }
            }
        }

        internalOrgTreeDS = RetailInternalOrgTreeDatasource::construct(tree, element.getOMHierarchyType());
        internalOrgTreeDS.buildTree();

        element.enableButton();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runBase</Name>
				<Source><![CDATA[
    RunBase runBase()
    {
        return callerRunBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedOMInternalOrgRecIds</Name>
				<Source><![CDATA[
    // find all the selected OMInternal org recids.
    public Set selectedOMInternalOrgRecIds()
    {
        Set selectedOMInternalOrgRecIds = new Set(Types::Int64);

        int totalCount = orgListView.getCount();

        for (int i = 0; i < totalCount; i++) // traverse on all selected nodes in the grid.
        {
            RecId oMInternalOrgRecId = orgListView.getItem(i).data();

            if (!selectedOMInternalOrgRecIds.in(oMInternalOrgRecId))
            {
                selectedOMInternalOrgRecIds.add(oMInternalOrgRecId);
            }
        }

        return selectedOMInternalOrgRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSelection</Name>
				<Source><![CDATA[
    private void populateSelection(Set _selectedOMInternalOrgRecIds)
    {
        OMInternalOrganization  omInternalOrganization;
        FormListItem            listItem;
        SetEnumerator           orgRecIdsEnumerator;

        if (_selectedOMInternalOrgRecIds)
        {
            orgRecIdsEnumerator = _selectedOMInternalOrgRecIds.getEnumerator();
            while (orgRecIdsEnumerator.moveNext())
            {
                select firstOnly RecId, Name from omInternalOrganization
                    where omInternalOrganization.RecId == orgRecIdsEnumerator.current();

                listItem = new FormListItem(omInternalOrganization.Name, 1);
                listItem.data(omInternalOrganization.RecId);
                orgListView.addItem(listItem);
            }

            if (orgListView.getCount() > 0)
            {
                comboBoxHierarchy.enabled(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transmitSelectionToCaller</Name>
				<Source><![CDATA[
    [SysObsolete("This method is deprecated", true, 31\05\2017)]
    public void transmitSelectionToCaller()
    {
        RetailIOperatingUnitPicker  retailRunBaseBatch;

        if (callerRunBase)
        {
            Assortment.modified();
            retailRunBaseBatch = callerRunBase as RetailIOperatingUnitPicker;
            retailRunBaseBatch.parmOMHierarchyRecId(this.getOMHierarchyType().RecId);
            retailRunBaseBatch.parmSelectedOMInternalOrgRecIds(this.selectedOMInternalOrgRecIds());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    public boolean canClose()
    {
        boolean canClose = super();

        if (canClose && element.closedOk())
        {
            if (element.args())
            {
                SysOperationDialog dialog = element.args().caller() as SysOperationDialog;

                if (dialog)
                {
                    canClose = dialog.controller().checkCloseDialog();
                }
            }
        }

        return canClose;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>Assortment</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        [SysObsolete("This control is deprecated", false, 31\05\2017)]
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                if (assortment.checked())
                {
                    element.populateNormalOrg(pickerInitParameters.hierarchyPurpose);
                }
                else
                {
                    element.populateNormalOrg(pickerInitParameters.hierarchyPurpose, false);
                }
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ComboBoxHierarchy</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        public int selectionChange()
        {
            int ret;

            ret = super();

            if (ret)
            {
                element.multiSelectLookup();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Tree</Name>
				<Type>Tree</Type>
				<Methods>
					<Method>
						<Name>expanded</Name>
						<Source><![CDATA[
        public void expanded(int _idx, FormTreeExpand _action, anytype _data)
        {
            FormTreeItem    formTreeItem = this.getItem(_idx);
            int image = formTreeItem.image();
            boolean         children     = true;
            TreeItemIdx     treeItemIdx;
            int             i;
            if (_idx != this.getRoot())
            {
                treeItemIdx = _idx;
                for (i=1; i <= 2; i++)
                {
                    treeItemIdx = this.getParent(treeItemIdx);
                }

                if (treeItemIdx == this.getRoot())
                {
                    children = false;
                }
                if ( formTreeItem.stateCut() )
                {
                    formTreeItem.image(image);
                    formTreeItem.stateCut(true);
                }
                else
                {
                    formTreeItem.image(image);
                    formTreeItem.stateCut(false);
                }
            }
            return ;
        }

]]></Source>
					</Method>
					<Method>
						<Name>gotFocus</Name>
						<Source><![CDATA[
        public void gotFocus()
        {
            super();

            remove.enabled(false);

            if ( tree.getSelection() && tree.getItem(tree.getSelection()) && !tree.getItem(tree.getSelection()).stateCut())
            {
                add.enabled(true);
            }
            else
            {
                add.enabled(false);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged(FormTreeItem _oldItem, FormTreeItem _newItem, FormTreeSelect _how)
        {
            super(_oldItem, _newItem, _how);
            treeSelectedData = _newItem.data();

            element.enableButton();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Add</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            FormListItem item;
            FormListItem listItem;
            int i;
            RefRecId treeValue;
            RefRecId listValue;

            if (callerRunBase && callerRunBase.name() == classStr(RetailLabelChangeJournalGeneratorBatch) && orgListView.getCount())
            {
                // Allow single item to be selected for this caller
                return;
            }

            if (tree.getSelection() && tree.getItem(tree.getSelection()) && !tree.getItem(tree.getSelection()).stateCut())
            {
                i = orgListView.getNextItem(FormListNext::All);

                while (i != -1)
                {
                    item = orgListView.getItem(i);
                    listValue = item.data();
                    treeValue = tree.getItem(tree.getSelection()).data();

                    if (listValue == treeValue)
                    {
                        return;
                    }

                    i = orgListView.getNextItem(FormListNext::All,i);
                }

                listItem = new FormListItem(tree.getItem(tree.getSelection()).text(), 1);
                listItem.data( tree.getItem(tree.getSelection()).data() );
                orgListView.addItem(listItem);
                if (orgListView.getCount() > 0)
                {
                    comboBoxHierarchy.enabled(false);
                }
            }
            else
            {
                return;
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Remove</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            FormListItem item;
            int i;
            FormTreeItem treeItem;

            i = orgListView.getNextItem(FormListNext::Selected);

            if (i != -1)
            {
                item = orgListView.getItem(i);
                treeItem = tree.getItem(internalOrgTreeDS.treeRecIdIdx(false, item.data()));
                orgListView.delete(i);
                tree.setItem(treeItem);
                if (!orgListView.getCount())
                {
                    comboBoxHierarchy.enabled(true);
                    Remove.enabled(false);
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OrgListView</Name>
				<Type>ListView</Type>
				<Methods>
					<Method>
						<Name>doubleClick</Name>
						<Source><![CDATA[
        /// <summary>
        /// When remove button is visible, double click in the list save as click remove button
        /// </summary>
        public void doubleClick()
        {
            super();

            if (remove.visible())
            {
                remove.clicked();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged(int _Idx, anytype _Data)
        {
            super(_Idx, _Data);

            Remove.enabled(true);
            Add.enabled(false);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CommandButtonCancel</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// When click cancnel
        /// </summary>
        public void clicked()
        {
            OrgListView.deleteAll();

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@RET490389</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<LeftMargin xmlns="">0</LeftMargin>
		<LeftMarginMode xmlns="">Fixed</LeftMarginMode>
		<Pattern xmlns="">DialogTabs</Pattern>
		<PatternVersion xmlns="">1.3</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<TopMargin xmlns="">0</TopMargin>
		<TopMarginMode xmlns="">Fixed</TopMarginMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1342177277</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>GeneralTab</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>DialogStartGrp</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>Assortment</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Left>0</Left>
										<LeftMode>LeftEdge</LeftMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@RET5711</Label>
									</AxFormControl>
								</Controls>
								<Style>DetailTitleContainer</Style>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS2952</Caption>
						<PanelStyle>Details</PanelStyle>
						<Scrollbars>Auto</Scrollbars>
						<Style>DetailsFormDetails</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>PolicyOrganization</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>ListPanel</Pattern>
						<PatternVersion>1.3</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Filter</Name>
								<Pattern>CustomFilters</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ComboBoxHierarchy</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Left>0</Left>
										<LeftMode>LeftEdge</LeftMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ComboType>List</ComboType>
										<Label>@SYS332975</Label>
										<LabelPosition>Above</LabelPosition>
										<Items />
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
								<FrameType>None</FrameType>
								<Style>CustomFilter</Style>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>OrganizationGroup</Name>
								<ElementPosition>1610612733</ElementPosition>
								<ExtendedStyle>listPanel</ExtendedStyle>
								<FilterExpression>%1</FilterExpression>
								<Left>0</Left>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SelectGroup</Name>
										<ElementPosition>858993458</ElementPosition>
										<ExtendedStyle>listPanel_availPanel</ExtendedStyle>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormTreeControl">
												<Name>Tree</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>SizeToAvailable</HeightMode>
												<Left>0</Left>
												<LeftMode>LeftEdge</LeftMode>
												<Type>Tree</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
											</AxFormControl>
										</Controls>
										<Caption>@SYS135926</Caption>
										<ViewEditMode>View</ViewEditMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>AddRemoveGroup</Name>
										<ElementPosition>1288490187</ElementPosition>
										<ExtendedStyle>listPanel_buttonPanel</ExtendedStyle>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>Add</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<ExtendedStyle>button_imageOnly</ExtendedStyle>
												<FilterExpression>%1</FilterExpression>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>ImageOnly</ButtonDisplay>
												<NormalImage>MoveRight</NormalImage>
												<ShowShortCut>No</ShowShortCut>
												<Text>@SYS2318</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>Remove</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612733</ElementPosition>
												<Enabled>No</Enabled>
												<ExtendedStyle>button_imageOnly</ExtendedStyle>
												<FilterExpression>%1</FilterExpression>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>ImageOnly</ButtonDisplay>
												<NormalImage>MoveLeft</NormalImage>
												<ShowShortCut>No</ShowShortCut>
												<Text>@SYS311855</Text>
											</AxFormControl>
										</Controls>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SelectedGroup</Name>
										<ElementPosition>1717986916</ElementPosition>
										<ExtendedStyle>listPanel_selPanel</ExtendedStyle>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormListViewControl">
												<Name>OrgListView</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>SizeToAvailable</HeightMode>
												<Left>0</Left>
												<LeftMode>LeftEdge</LeftMode>
												<Type>ListView</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ColumnHeader>No</ColumnHeader>
												<RowSelect>Yes</RowSelect>
												<ViewType>List</ViewType>
											</AxFormControl>
										</Controls>
										<Caption>@SYS135927</Caption>
										<ViewEditMode>View</ViewEditMode>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
								<Columns>3</Columns>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@RET490389</Caption>
						<FastTabExpanded>No</FastTabExpanded>
						<Scrollbars>Auto</Scrollbars>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<ShowTabs>No</ShowTabs>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>BottomButtonGrp</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Top>0</Top>
				<TopMode>BottomEdge</TopMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CommandButtonOK</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CommandButtonCancel</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>