<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailMedia</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class RetailMedia extends FormRun
{
    TableId tableId;
    EcoResTextValue attributeValue;
    FormDataSource callingControlDataSource;
    FormRun caller;
    RetailMediaMasterEntity callerForm;
    RecId callerRecId;
    int previousImageId;
    RefRecId productRecId;
    RefRecId catalogRecId;
    RetailInternalOrgRefRecId internalOrgRecId;
    boolean isCalledFromTheEntityMediaPage = true;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the class variables.
    /// </summary>
    public void init()
    {
        super();

        str imageXml;
        boolean isTemplateXMLToBeAdded = false;
        var callerEntityRecId = '';
        tableId = element.args().dataset();
        caller = element.args().caller();
        callerRecId = element.args().record().RecId;
        str paramValue = element.args().parm();

        if (tableId == tableNum(EcoResTextValue) && (!paramValue))
        {
            isCalledFromTheEntityMediaPage = false;
        }

        if (isCalledFromTheEntityMediaPage)
        {
            GroupControlChannelProfiles.visible(true);
            GroupControlImagePreview.visible(true);

            this.populateChannelProfileCombo();

            if (paramValue)
            {
                var list = Global::strSplit(paramValue, ':');
                ListIterator iterator = new ListIterator(list);
                int counter = 1;

                while (iterator.more())
                {
                    if (counter == 1)
                    {
                        callerEntityRecId = iterator.value();
                    }
                    else if (counter == 2)
                    {
                        catalogRecId = str2Int64(iterator.value());
                    }
                    else if (counter == 3)
                    {
                        internalOrgRecId = str2Int64(iterator.value());
                    }
                    else if (counter == 4)
                    {
                        productRecId = str2Int64(iterator.value());
                        callerForm = RetailMediaMasterEntity::Product;
                    }

                    iterator.next();
                    counter++;
                }

                iterator.next();
                counter++;
            }
        }
        else
        {
            GroupControlChannelProfiles.visible(false);
            GroupControlImagePreview.visible(false);
        }

        if (!callerForm)
        {
            switch (tableId)
            {
                case tableNum(catalogTranslation):
                    callerForm = RetailMediaMasterEntity::Catalog;
                    break;
                case tableNum(CustTable):
                    callerForm = RetailMediaMasterEntity::Customer;
                    break;
                case tableNum(HcmWorker):
                    callerForm = RetailMediaMasterEntity::Worker;
                    break;
                case tableNum(EcoResCategory):
                    callerForm = RetailMediaMasterEntity::Category;
                    break;
            }
        }

        if (callerEntityRecId)
        {
            callerRecId = str2Int64(callerEntityRecId); //if caller Form has sent the EntityId explicitly.
        }

        //Resetting the record, so the title will not include the attribute's value
        element.args().record(null);

        if (element.args().callerFormControl())
        {
            callingControlDataSource = element.args().callerFormControl().dataSourceObject();
        }

        RetailMediaHelper::populateMediaAssociationFromMediaRelationTable(
                callerRecId,
                callerForm,
                RetailRichMediaTmpForGallery,
                catalogRecId,
                internalOrgRecId);

        RetailMediaHelper::populateMediaAssociationFromMediaTemplateTable(callerForm, RetailRichMediaTmpForGallery);

        // Disabling editing if opened in View mode
        boolean isEditMode = true;
        if (element.args().openMode() == OpenMode::View)
        {
            isEditMode = false;
        }

        MaintainImageButtonGroup.enabled(isEditMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMassterEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine sets the description and RetailMediaMasterEntity.
    /// </summary>
    /// <param name = "callerName">caller Form name.</param>
    private void setMassterEntity(str callerName)
    {
        if (!isCalledFromTheEntityMediaPage)
        {
            return;
        }

        if (callerName == "RetailCategory")
        {
            callerForm = RetailMediaMasterEntity::Category;
        }
        else
        {
            callerForm = RetailMediaMasterEntity::Product;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openUploadImageDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Open the image viewer.
    /// </summary>
    private void openUploadImageDialog()
    {
        Args args;
        FormRun formRun;
        args = new Args();
        args.name(formStr(RetailMediaUploadDialog));
        args.record(retailRichMediaTmpForGallery);
        args.parmEnum(callerForm);
        str paramValue = int642Str(callerRecId) + ':' + int642Str(catalogRecId) + ':' + int642Str(internalOrgRecId) +  ':' + int642Str(productRecId);
        args.parm(paramValue);

        formRun = classfactory.formRunClass(args);

        if (formRun)
        {
            formRun.run();
            formRun.wait();
        }

        retailRichMediaTmpForGallery_ds.research(true);
        element.previewImage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateChannelProfileCombo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the channel profile dropdown.
    /// </summary>
    private void populateChannelProfileCombo()
    {
        RETAILCHANNELPROFILE channelProfile;
        RETAILCHANNELPROFILEPROPERTY channelProfileProperty;
        RetailChannelTableExt channelTableExt;
        RetailChannelTable channelTable;
        DirPartyTable partyTable;

        while select * from channelProfileProperty
            join  channelProfile
            where channelProfileProperty.ChannelProfile == channelProfile.RecId &&
            channelProfile.ChannelProfileType == RetailChannelProfileType::RetailServer &&
            channelProfileProperty.Key == RetailServerProfilePropertyKey::MediaBaseUrl
            join channelTableExt
            where channelTableExt.ChannelProfile == channelProfile.RecId
            join channelTable
            where channelTableExt.Channel == channelTable.RecId
            join partyTable
            where partyTable.RecId == channelTable.OMOperatingUnitID
        {
            str comboVal = partyTable.Name;
            ComboChannelProfile.add(comboVal);
        }

        ComboChannelProfile.selection(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addANewRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds new record.
    /// </summary>
    public void addANewRecord()
    {
        this.insertNewRecord('', 0);
        retailRichMediaTmpForGallery_ds.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCurrentRecordByMediaGalleryRec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate based on user selected image.
    /// </summary>
    /// <param name = "selectedRecord">the selected record.</param>
    public void populateCurrentRecordByMediaGalleryRec(RetailImageResource selectedRecord)
    {
        if (selectedRecord)
        {
            ttsbegin;
            retailRichMediaTmpForGallery.Url = selectedRecord.ResourceUrl;
            retailRichMediaTmpForGallery.IsDefault = 0;

            if (previousImageId > 0)
            {
                RetailMediaHelper::deleteFromMediaRelationTable(
                    callerForm,
                    callerRecId,
                    previousImageId,
                    productRecId,
                    catalogRecId,
                    internalOrgRecId);

                previousImageId = 0;
            }

            RetailMediaHelper::updateMediaRelationTable(
                callerForm,
                callerRecId,
                selectedRecord.ResourceId,
                catalogRecId,
                internalOrgRecId,
                productRecId);

            retailRichMediaTmpForGallery_ds.research(true);
            ttscommit;

            this.previewImage();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNewRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert a new record in the TempTable.
    /// </summary>
    /// <param name = "url">The Image URL.</param>
    /// <param name = "imageId">The Media gallery image Identifier.</param>
    private void insertNewRecord(str url, int imageId)
    {
        RetailRichMediaTmp table = retailRichMediaTmpForGallery;
        table.clear();
        table.initValue();
        table.AltText =  '';
        table.Url = url;
        table.ImageId = imageId;
        table.IsDefault = 0;

        table.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the image based on the currently selected record.
    /// </summary>
    private void previewImage()
    {
        str url = retailRichMediaTmpForGallery.Url;

        if (!RetailMediaHelper::isAbsoluteURL(url))
        {
            //Partial url.
            str fileNameTokenValue = '';
            switch (callerForm)
            {
                case RetailMediaMasterEntity::Catalog:
                    CatalogTranslation catalogTranslationTable = CatalogTranslation::find(callerRecId);

                    if (catalogTranslationTable)
                    {
                        fileNameTokenValue = catalogTranslationTable.FriendlyName;
                    }

                    break;
                case RetailMediaMasterEntity::Customer:
                    CustTable customerTable;
                    select firstonly customerTable
                        where customerTable.RecId == callerRecId;

                    if (customerTable)
                    {
                        fileNameTokenValue = customerTable.AccountNum;
                    }

                    break;
                case RetailMediaMasterEntity::Worker:
                    HcmWorker workerTable = HcmWorker::find(callerRecId);

                    if (workerTable)
                    {
                        fileNameTokenValue = workerTable.PersonnelNumber;
                    }

                    break;
                case RetailMediaMasterEntity::Category:
                    EcoResCategory categoryTable = EcoResCategory::find(callerRecId);
                    fileNameTokenValue  = categoryTable.Name;

                    break;
                case RetailMediaMasterEntity::Product:
                    EcoResProduct productTable = EcoResProduct::find(productRecId);
                    fileNameTokenValue  = productTable.DisplayProductNumber;

                    break;
            }

            str expandedFileName = RetailMediaHelper::getExpandedMediaUrl(url, fileNameTokenValue);
            str baseUrl = this.getMediaBaseUrl();

            if (baseUrl && expandedFileName)
            {
                if (!strEndsWith(baseUrl, '/') && (!strStartsWith(expandedFileName, '/')))
                {
                    baseUrl = baseUrl + '/';
                }

                url = baseUrl + expandedFileName;
            }
        }

        if (url != null)
        {
            ImageControl.imageLocation(SysImageLocation::URL);
            ImageControl.normalImage(url);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMediaBaseUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the media base url based on the selected store.
    /// </summary>
    /// <returns>The media base url.</returns>
    private str getMediaBaseUrl()
    {
        RETAILCHANNELPROFILE channelProfile;
        RETAILCHANNELPROFILEPROPERTY channelProfileProperty;
        RetailChannelTableExt channelTableExt;
        RetailChannelTable channelTable;
        DirPartyTable partyTable;
        str storeName = ComboChannelProfile.getText(ComboChannelProfile.selection());;
        str baseUrl = '';

        if (storeName)
        {
            select firstonly * from channelProfileProperty
            join  channelProfile
            where channelProfileProperty.ChannelProfile == channelProfile.RecId &&
            channelProfile.ChannelProfileType == RetailChannelProfileType::RetailServer &&
            channelProfileProperty.Key == RetailServerProfilePropertyKey::MediaBaseUrl
            join channelTableExt
            where channelTableExt.ChannelProfile == channelProfile.RecId
            join channelTable
            where channelTableExt.Channel == channelTable.RecId
            join partyTable
            where partyTable.RecId == channelTable.OMOperatingUnitID && partyTable.Name == storeName;

            if (channelProfileProperty)
            {
                baseUrl = channelProfileProperty.Value;
            }
            else
            {
                Global::warning("@RetailMediaGalleryLabels:NoBaseMediaUrlFound" + storeName);
            }
        }
        else
        {
            Global::info("@RetailMediaGalleryLabels:NoStoreSelected");
        }

        return baseUrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearImages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear the image.
    /// </summary>
    private void clearImages()
    {
        ImageControl.imageLocation(SysImageLocation::URL);
        ImageControl.normalImage(null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyRecordExistsInImageGrid</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine validates whether the image grid has any record.
    /// </summary>
    /// <returns>true if the image grid has any record; otherwise, false.</returns>
    private boolean isAnyRecordExistsInImageGrid()
    {
        boolean isExist = false;
        RetailRichMediaTmp retailTmpGallery;
        retailTmpGallery.linkPhysicalTableInstance(retailRichMediaTmpForGallery_ds.cursor());

        select firstonly retailTmpGallery;
        if (retailTmpGallery)
        {
            isExist = true;
        }

        return isExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteExt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the record from the media association table.
    /// </summary>
    /// <param name = "isGalleryResource">if the reource is the part of Media gallery.</param>
    private void deleteExt(boolean isGalleryResource)
    {
        if (retailRichMediaTmpForGallery.IsTemplateUrl)
        {
            Global::warning("@RetailMediaGalleryLabels:DeleteTemplateUrlNotAllowed");
        }
        else
        {
            RetailMediaHelper::deleteFromMediaRelationTable(
            callerForm,
            callerRecId,
            retailRichMediaTmpForGallery.ImageId,
            productRecId,
            catalogRecId,
            internalOrgRecId);

            retailRichMediaTmpForGallery.delete();

            retailRichMediaTmpForGallery_ds.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh the Controls on the page.
    /// </summary>
    private void refreshControls()
    {
        var url = retailRichMediaTmpForGallery.Url;
        if ( url != null)
        {
            element.previewImage();
        }
        else
        {
            element.clearImages();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupImage</Name>
				<Source><![CDATA[
    /// <summary>
   ///  LookUp image.
   /// </summary>
   /// <param name = "callerFormControl">Caller form control reference.</param>
    public void lookupImage(FormControl callerFormControl)
    {
        RetailImageResource     selectedRecord;
        Args                    args;
        FormRun                 formRun;
        Form                    imageGalleryLookupForm = new Form(formStr(RetailBrowseGallery));
        FormReferenceControl    referenceControl    = callerFormControl as FormReferenceControl;
        FormStringControl       stringControl       = callerFormControl as FormStringControl;
        FormIntControl          intControl        = callerFormControl as FormIntControl;

        args = new Args();
        args.name(formStr(RetailBrowseGallery));
        args.caller(this);
        args.parmEnum(enum2int(callerForm));

        previousImageId = RetailRichMediaTmpForGallery.ImageId;
        if (referenceControl)
        {
            // a reference control supposed to contain a key RecId value
            selectedRecord = RetailImageResource::find(referenceControl.value());
        }
        else if (stringControl)
        {
            // a string control supposed to contain a personnel number value
            selectedRecord = RetailImageResource::findByName(stringControl.text());
        }
        else if (intControl)
        {
            // a string control supposed to contain a personnel number value
            selectedRecord = RetailImageResource::findByResourceId(intControl.value());
        }

        if (selectedRecord.RecId != 0)
        {
            args.lookupRecord(selectedRecord);
        }

        // perform form lookup on the caller form control
        if (referenceControl)
        {
            formRun = FormAutoLookupFactory::buildReferenceLookupFromCustomForm(referenceControl, imageGalleryLookupForm, args);
            referenceControl.performFormLookup(formRun);
        }
        else if (stringControl)
        {
            formRun = FormAutoLookupFactory::buildLookupFromCustomForm(stringControl, imageGalleryLookupForm, AbsoluteFieldBinding::construct(fieldStr(RetailImageResource, RecId), tableStr(RetailImageResource)), args);
            stringControl.performFormLookup(formRun);
        }
        else if (intControl)
        {
            formRun = FormAutoLookupFactory::buildLookupFromCustomForm(intControl, imageGalleryLookupForm, AbsoluteFieldBinding::construct(fieldStr(RetailImageResource, RecId), tableStr(RetailImageResource)), args);
            intControl.performFormLookup(formRun);
        }

        selectedRecord = formRun.selectRecordModeSelectedRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesImageExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether the Image already exists in the media gallery.
    /// </summary>
    /// <param name = "imageId">The Media gallery image Identifier.</param>
    /// <returns>true/false indicates whether the image already exists.</returns>
    private boolean doesImageExist(int imageId)
    {
        int recCount = 0;
        RetailRichMediaTmp retailRichMediaTmpGallery;

        retailRichMediaTmpGallery.linkPhysicalTableInstance(retailRichMediaTmpForGallery_ds.cursor());
        select firstonly retailRichMediaTmpGallery
           where retailRichMediaTmpGallery.ImageId == imageId;

        if (retailRichMediaTmpGallery)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMediaRelationTable</Name>
				<Source><![CDATA[
    private void updateMediaRelationTable(RetailMediaMasterEntity _callerForm, RecId _callerRecId,  int _resourceId, str _imageUrl,
                        RefRecId _catalogRecId = 0, RetailInternalOrgRefRecId _internalOrgRecId = 0, RefRecId _productRecId = 0, NoYes _isDefault = NoYes::No)
    {
        RetailMediaHelper::updateDefaultRecordInMediaRelationTable(
                            _callerForm,
                            _callerRecId,
                            _resourceId,
                            _imageUrl,
                            _catalogRecId,
                            _internalOrgRecId,
                            _productRecId,
                            _isDefault);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>RetailRichMediaTmpForGallery</Name>
				<Methods>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged()
        {
            super();
            element.refreshControls();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            // The below code ensure the default image shown at the top of the grid.
            this.query().dataSourceNo(1).sortClear();
            this.query().dataSourceNo(1).addSortField(fieldNum(RetailRichMediaTmp, IsDefault), SortOrder::Descending);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>ImageId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if (element.doesImageExist(retailRichMediaTmpForGallery.ImageId))
                {
                    retailRichMediaTmpForGallery.delete();
                    retailRichMediaTmpForGallery_ds.research();
                    info('The selected image already exist');
                }
                else
                {
                    RetailImageResource selectedRecord = RetailImageResource::findByResourceId(retailRichMediaTmpForGallery.ImageId);
                    element.populateCurrentRecordByMediaGalleryRec(selectedRecord);
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>IsDefault</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                ttsbegin;

                var selectRecId = retailRichMediaTmpForGallery.RecId;
                var resourceId = retailRichMediaTmpForGallery.ImageId;
                var url = retailRichMediaTmpForGallery.Url;

                if (retailRichMediaTmpForGallery.IsDefault)
                {
                    RetailRichMediaTmp updateRetailRichMediaTmp = retailRichMediaTmpForGallery_ds.cursor();

                    while select forupdate updateRetailRichMediaTmp
                        where updateRetailRichMediaTmp.RecId != selectRecId
                    {
                        updateRetailRichMediaTmp.IsDefault = ZeroOrOne::Zero;
                        updateRetailRichMediaTmp.update();

                        element.updateMediaRelationTable(
                            callerForm,
                            callerRecId,
                            updateRetailRichMediaTmp.ImageId,
                            url,
                            catalogRecId,
                            internalOrgRecId,
                            productRecId,
                            NoYes::No);
                    }

                    while select forupdate updateRetailRichMediaTmp
                        where updateRetailRichMediaTmp.RecId == selectRecId
                    {
                        updateRetailRichMediaTmp.IsDefault = ZeroOrOne::One;
                        updateRetailRichMediaTmp.update();
                    }

                    element.updateMediaRelationTable(
                        callerForm,
                        callerRecId,
                        resourceId,
                        url,
                        catalogRecId,
                        internalOrgRecId,
                        productRecId,
                        NoYes::Yes);
                }
                else
                {
                    element.updateMediaRelationTable(
                        callerForm,
                        callerRecId,
                        resourceId,
                        url,
                        catalogRecId,
                        internalOrgRecId,
                        productRecId,
                        NoYes::No);
                }

                retailRichMediaTmpForGallery_ds.research(true);
                ttscommit;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>ComboChannelProfile</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            ret = super();
            // User has chosen a different store hence refresh the image based on the new media base url as associated with this store.
            element.previewImage();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CommandButtonAdd</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.clearImages();
            element.addANewRecord();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CommandButtonUpload</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.openUploadImageDialog();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CommandButtonRemove</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            ttsbegin;
            element.deleteExt(true);
            ttscommit;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RetailRichMediaTmp_Url</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            ret = super();

            element.previewImage();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>RetailRichMediaTmpForGallery</Name>
			<Table>RetailRichMediaTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AltText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ImageId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsDefault</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsTemplateUrl</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Url</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@RetailMediaGalleryLabels:Images</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Pattern xmlns="">DialogTabs</Pattern>
		<PatternVersion xmlns="">1.3</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>GroupControlChannelProfiles</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>ComboChannelProfile</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@RetailMediaGalleryLabels:Channel</Label>
						<Selection>1</Selection>
						<Items />
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Caption>@RetailMediaGalleryLabels:ImagePreview</Caption>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>GroupControlImagePreview</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Pattern>ImagePreview</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormImageControl">
						<Name>ImageControl</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ExtendedStyle>card_imageSquare</ExtendedStyle>
						<Type>Image</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@RetailMediaGalleryLabels:Preview</Label>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>TabContent</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>GalleryTabPage</Name>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ImageActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>MaintainImageButtonGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>CommandButtonAdd</Name>
												<Type>CommandButton</Type>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
												<Command>Add</Command>
												<NormalImage>Add</NormalImage>
												<Text>@RetailMediaGalleryLabels:Add</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>CommandButtonUpload</Name>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
												<NormalImage>Add</NormalImage>
												<Text>@RetailMediaGalleryLabels:Add</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>CommandButtonRemove</Name>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
												<Command>Remove</Command>
												<NormalImage>Remove</NormalImage>
												<Text>@RetailMediaGalleryLabels:Remove</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>GridImage</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>RetailRichMediaTmp_ImageId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Integer</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>ImageId</DataField>
										<DataSource>RetailRichMediaTmpForGallery</DataSource>
										<Label>@RetailMediaGalleryLabels:ResourceId</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailRichMediaTmp_Url</Name>
										<AllowEdit>No</AllowEdit>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Url</DataField>
										<DataSource>RetailRichMediaTmpForGallery</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>DefaultCheckBoxControl</Name>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IsDefault</DataField>
										<DataSource>RetailRichMediaTmpForGallery</DataSource>
										<Label>@SYS40133</Label>
									</AxFormControl>
								</Controls>
								<DataSource>RetailRichMediaTmpForGallery</DataSource>
								<MultiSelect>No</MultiSelect>
							</AxFormControl>
						</Controls>
						<Caption>@RetailMediaGalleryLabels:Images</Caption>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>CommitButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>ButtonOk</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>ButtonCancel</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>