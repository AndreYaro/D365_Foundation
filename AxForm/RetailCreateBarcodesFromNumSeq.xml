<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailCreateBarcodesFromNumSeq</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

[Form]
public class RetailCreateBarcodesFromNumSeq extends FormRun
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    FormRun             callerForm;
    IInventItemBarcode  formInventItemBarcode;
    QueryRun            queryInventItem;
    InventTable         inventTable;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        RetailInventTable      tRBOInventTable;

        if (element.args().caller() && (element.args().record() || element.args().parm()))
        {
            callerForm = element.args().caller();
            if (callerForm.name() == formstr(InventItemBarcode))
            {
                formInventItemBarcode = callerForm as IInventItemBarcode;
                super();

                if (element.args().record())
                {
                    InventItemBarcode1.data(element.args().record());
                    fieldItemId.text(InventItemBarcode1.itemId);
                    fieldBarcodeSetupId.text(InventItemBarcode1.barcodeSetupId);
                    fieldUseItemId.text(InventItemBarcode1.itemId);
                    fieldUnitId.text(InventItemBarcode1.UnitID);
                    fieldVendAccount.text(InventTable::find(InventItemBarcode1.itemId).PrimaryVendorId);
                }
                else if (element.args().parm())
                {
                    inventTable = InventTable::find(element.args().parm());
                    if (!inventTable)
                        throw error(strfmt("@RET4168",InventItemBarcode1.itemId));
                    else
                    {
                        tRBOInventTable = RetailInventTable::find(inventTable.ItemId);
                        fieldItemId.text(inventTable.ItemId);
                        fieldBarcodeSetupId.text(tRBOInventTable.BarcodeSetupId);
                        fieldUseItemId.text(InventTable.ItemId);
                        fieldUnitId.text(inventTable.salesUnitId());
                        fieldVendAccount.text(InventTable.PrimaryVendorId);
                    }
                }
            }
            else
                throw error("@RET4169");
        }
        else
            throw error("@SYS22539");
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    display itemName itemName()
    {
        return InventTable::find(fieldItemId.text()).itemName();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>fieldBarcodeSetupId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Performs the lookup for barcode setup id.
        /// </summary>
        public void lookup()
        {
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(BarcodeSetup), this);
            Query query = new Query();
            QueryBuildDataSource qbdsBarcodeSetup, qbdsBarcodeMaskSetup, qbdsBarcodeMaskSegment;

            qbdsBarcodeSetup = query.addDataSource(tableNum(BarcodeSetup));

            if (RetailMerchandisingDisallowEmptyBarcodeMaskFlight::instance().isEnabled())
            {
                qbdsBarcodeSetup.addRange(fieldNum(BarcodeSetup, RetailBarcodeMask)).value(SysQuery::valueNotEmptyString());
            }

            qbdsBarcodeMaskSetup = qbdsBarcodeSetup.addDataSource(tableNum(RetailBarcodeMaskTable));
            qbdsBarcodeMaskSetup.relations(true);

            qbdsBarcodeMaskSetup.joinMode(JoinMode::NoExistsJoin);
            qbdsBarcodeMaskSegment = qbdsBarcodeMaskSetup.addDataSource(tableNum(RetailBarcodeMaskSegment));
            qbdsBarcodeMaskSegment.relations(true);

            qbdsBarcodeMaskSegment.addRange(fieldNum(RetailBarcodeMaskSegment, Type)).value(SysQuery::value(RetailBarcodeMaskCharacterTypeBase::AnyNumber));
            qbdsBarcodeMaskSegment.addRange(fieldNum(RetailBarcodeMaskSegment, Type)).value(SysQuery::value(RetailBarcodeMaskCharacterTypeBase::DiscountCode));
            qbdsBarcodeMaskSegment.addRange(fieldNum(RetailBarcodeMaskSegment, Type)).value(SysQuery::value(RetailBarcodeMaskCharacterTypeBase::Employee));
            qbdsBarcodeMaskSegment.addRange(fieldNum(RetailBarcodeMaskSegment, Type)).value(SysQuery::value(RetailBarcodeMaskCharacterTypeBase::DataEntry));
            qbdsBarcodeMaskSegment.addRange(fieldNum(RetailBarcodeMaskSegment, Type)).value(SysQuery::value(RetailBarcodeMaskCharacterTypeBase::GiftCard));
            qbdsBarcodeMaskSegment.addRange(fieldNum(RetailBarcodeMaskSegment, Type)).value(SysQuery::value(RetailBarcodeMaskCharacterTypeBase::CouponCode));

            sysTableLookup.addLookupfield(fieldNum(BarcodeSetup, BarcodeSetupId));
            sysTableLookup.addLookupfield(fieldNum(BarcodeSetup, Description));
            sysTableLookup.addLookupfield(fieldNum(BarcodeSetup, BarcodeType));
            sysTableLookup.addLookupfield(fieldNum(BarcodeSetup, FontSize));
            sysTableLookup.addLookupfield(fieldNum(BarcodeSetup, RetailBarcodeMask));

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Validates barcode setup.
        /// </summary>
        /// <returns>True if validation is successful, otherwise false.</returns>
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && BarcodeSetup::isUnsupportedMaskSegmentExists(fieldBarcodeSetupId.valueStr()))
            {
                ret = false;

                error("@Retail:RetailBarcodeMaskSegmentNotSupportedError");
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OKButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            InventDimCombination        combination;
            InventItemBarcode           barcodeTable;
            InventDim                   inventDimTable;
            int                         NoOfRecordsRead = 0, NoOfRecordsInserted = 0;
            RetailVendTable             tVendTable;
            RetailBarcodeMask           mask;
            RetailBarcodeManagement     rboBarcodeManagement = new RetailBarcodeManagement();
            ItemBarCode                 wrkBarCode;
            Str                     numberSeq;
            BarcodeSetup            barcodeSetup;

            if (fieldVendAccount.text() == "")
                throw error("@RET4903");

            if (fieldBarcodeSetupId.text() == "")
                throw error("@RET4170");

            if (fieldUseItemId.text() == "")
                throw error("@RET4184");

            if (box::yesNo("@RET4172",DialogButton::Yes,"@RET3776","@RET4173") == DialogButton::No)
                return;

            //check vendor and number sequence for barcode
            tVendTable = RetailVendTable::find( fieldVendAccount.text() );
            if (!tVendTable)
            {
                eventSource.EventWriteProductsGenericError('RetailCreateBarcodesFromNumSeq.VendTable', funcName(), "@RET4902");
                throw error("@RET4902");
            }

            if (!tVendTable.barcodeNumberSeq)
            {
                eventSource.EventWriteProductsGenericError('RetailCreateBarcodesFromNumSeq.VendTable.barcodeNumberSeq', funcName(), "@RET4902");
                throw error(strfmt("@RET4901",tVendTable.AccountNum));
            }

            barcodeSetup = BarcodeSetup::find(fieldBarcodeSetupId.text());
            rboBarcodeManagement.parmBarcodeSetup(barcodeSetup);
            // Get the barcode mask for the barcode setup
            mask = barcodeSetup.RetailBarcodeMask;

            if (rboBarcodeManagement.hasCheckDigit(barcodeSetup)) // true when check-digit is required for barcode setup.
            {
                // Note that the last check digit needs to be removed from the mask here
                mask = substr(mask,1,strlen(mask) - 1);
            }

            super();

            ttsbegin;

            // First, try to create barcode for items with dimensions
            // If the item uses standard dimension, then create barcode for the item itself.
            while select combination
            where combination.ItemId == fieldItemId.text()
            {
                NoOfRecordsRead++;

                select firstonly barcodeTable
                    where barcodeTable.itemId          == fieldItemId.text()
                    &&    barcodeTable.RetailVariantId    == combination.RetailVariantId
                    &&    barcodeTable.UnitID          == fieldUnitId.text();

                if (barcodeTable)
                {
                    //throw error(strfmt("@RET4180",barcodeTable.itemBarCode,barcodeTable.itemId,fieldItemName.text(),barcodeTable.RetailVariantId,fieldItemId.text(),fieldItemName.text(),combination.RetailVariantId));
                    continue;
                }
                else
                {
                    // Get the number sequence based on vendor's number sequence setup
                    numberSeq = NumberSeq::newGetNumFromCode(tVendTable.barcodeNumberSeq).num();

                    using (var context = RetailCreateBarcodesWithPrefixContext::construct())
                    {
                        context.initializeBarcodeMaskPrefixValue(mask, RetailBarcodeMaskTypeBase::Item);
                        wrkBarCode = rboBarcodeManagement.createBarcodeForItemVariant(mask, combination, fieldUnitId.text(), numberSeq);
                    }

                    if (!wrkBarCode)
                    {
                        throw error(strfmt("@RET5019", WrkBarcode));
                    }

                    barcodeTable.clear();
                    barcodeTable.itemBarCode = wrkBarCode;
                    barcodeTable.itemId = combination.ItemId;
                    barcodeTable.description = combination.defaultProductName();
                    barcodeTable.RetailVariantId = combination.RetailVariantId;
                    EcoResProductDimGroupSetup::copyProductDimensionsForItem(combination.ItemId, combination.inventDim(), inventDimTable);
                    barcodeTable.inventDimId = InventDim::findOrCreate(inventDimTable).inventDimId;
                    barcodeTable.UnitID = fieldUnitId.text();
                    barcodeTable.barcodeSetupId = fieldBarcodeSetupId.text();

                    if (barcodeTable.validateWrite())
                    {
                        barcodeTable.insert();
                        NoOfRecordsInserted++;
                    }
                    else
                    {
                        eventSource.EventWriteProductsRetailCreateBarcodeFromNumSeqInvalidVendor('RetailCreateBarcodesFromNumSeq', funcName(), tVendTable.RecId);
                        throw error(strFmt('Check barcode numbersequence for vendor %1 and barcode setup %2',tVendTable.AccountNum, fieldBarcodeSetupId.text()) );
                    }
                }
            }

            // If the item dimension combination is not found, then proceed to create barcode for the item
            if (NoOfRecordsRead == 0)
            {
                if (!inventTable)
                {
                    inventTable = InventTable::find(fieldItemId.text());
                }

                // Find the item first
                if (inventTable)
                {
                    NoOfRecordsRead++;

                    // Then find the barcode for the item
                    select firstonly barcodeTable
                        where barcodeTable.itemId          == fieldItemId.text()
                        &&    barcodeTable.UnitID          == fieldUnitId.text();

                    // Only create barcode if none exists
                    if (!barcodeTable)
                    {                        
                        // Get the number sequence based on vendor's number sequence setup
                        numberSeq = NumberSeq::newGetNumFromCode(tVendTable.barcodeNumberSeq).num();

                        using (var context = RetailCreateBarcodesWithPrefixContext::construct())
                        {
                            context.initializeBarcodeMaskPrefixValue(mask, RetailBarcodeMaskTypeBase::Item);
                            wrkBarCode = rboBarcodeManagement.createBarcodeNoDim(mask, numberSeq, fieldItemId.text(), numberSeq);
                        }

                        if (!wrkBarCode)
                        {
                            throw error(strfmt("@RET5019", WrkBarcode));
                        }

                        barcodeTable.clear();
                        barcodeTable.itemBarCode = wrkBarCode;
                        barcodeTable.itemId = inventTable.ItemId;
                        barcodeTable.description = inventTable.defaultProductName();
                        barcodeTable.RetailVariantId = '';
                        inventDimTable.initFromInventTable(inventTable);
                        barcodeTable.inventDimId = InventDim::findOrCreate(inventDimTable).inventDimId;
                        barcodeTable.UnitID = fieldUnitId.text();
                        barcodeTable.barcodeSetupId = fieldBarcodeSetupId.text();

                        // Check barcode length and check digit
                        if (barcodeTable.validateWrite(true))
                        {
                            barcodeTable.insert();
                            NoOfRecordsInserted++;
                            eventSource.EventWriteProductsGenericMessageTypeRecId('RetailCreateBarcodesFromNumSeq', funcName(), 'Successfully created barcode', 'InventItemBarcode', barcodeTable.RecId);
                        }
                        else
                        {
                            eventSource.EventWriteProductsRetailCreateBarcodeFromNumSeqInvalidVendor('RetailCreateBarcodesFromNumSeq', funcName(), tVendTable.RecId);
                            throw error(strFmt('Check barcode numbersequence for vendor %1 and barcode setup %2',tVendTable.AccountNum, fieldBarcodeSetupId.text()) );
                        }
                    }
                }
            }

            ttscommit;

            if (NoOfRecordsRead > 0)
            {
                eventSource.EventWriteProductsNumberTypeReadInserted('RetailCreateBarcodesFromNumSeq', funcName(), 'barcodes', NoOfRecordsRead, NoOfRecordsInserted);
                info(strfmt("@RET4182",NoOfRecordsRead,NoOfRecordsInserted));
            }
            else
            {
                eventSource.EventWriteProductsRetailCreateBarcodesFromNumSeqNoComboFound('RetailCreateBarcodesFromNumSeq', funcName(), fieldItemId.text(),fieldItemName.text());
                info(strfmt("@RET4183",fieldItemId.text(),fieldItemName.text()));
            }

            formInventItemBarcode.bookrefresh();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>InventItemBarcode1</Name>
			<Table>InventItemBarcode</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>barcodeSetupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Blocked</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>itemBarCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>itemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>qty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailShowForItem</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailVariantId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UnitID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>useForInput</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>useForPrinting</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@RET4898</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>fieldItemId</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>536870910</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>ItemId</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>fieldItemName</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>805306365</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>itemName</DataMethod>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>fieldUseItemId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741820</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>ItemId</ExtendedDataType>
						<Label>@RET3777</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>fieldVendAccount</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1342177275</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>VendAccount</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>fieldUnitId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612730</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>fieldBarcodeSetupId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1879048185</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>BarcodeSetupId</ExtendedDataType>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>