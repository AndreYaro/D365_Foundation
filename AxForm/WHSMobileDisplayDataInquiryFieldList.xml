<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>WHSMobileDisplayDataInquiryFieldList</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class WHSMobileDisplayDataInquiryFieldList extends FormRun
{
    WHSRFMenuItemTable  menuItem;
    TableName           baseTableName;
    TableId             baseTableId;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        if (!element.args().dataset())
        {
            throw error(Error::missingFormActiveBuffer(element.name()));
        }

        menuItem = element.args().record();
        baseTableName = menuItem.DataInquiryQueryTableName;
        baseTableId = tableName2Id(baseTableName);

        super();

        if (conLen(menuItem.DataInquiryFieldList) > 0)
        {
            this.displayFields();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        this.fillContainer();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareLookup</Name>
				<Source><![CDATA[
    private FormRun prepareLookup()
    {
        Args args = new Args(formStr(WHSMobileDisplayDataInquiryFieldLookup));
        args.caller(element);
        args.parm(menuItem.DataInquiryQueryTableName);

        var formRun = ClassFactory::formRunClassOnClient(args);
        formRun.init();

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addControlToContainer</Name>
				<Source><![CDATA[
    private container addControlToContainer(FormStringControl _control, container _con, int _containerPosition)
    {
        if (_control.text())
        {
            _containerPosition++;
            container controlCon = this.createControlContainer(_control.text());
            _con = conIns(_con, _containerPosition, controlCon);
        }

        return [_con, _containerPosition];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createControlContainer</Name>
				<Source><![CDATA[
    private container createControlContainer(FieldName _fieldOrMethodName)
    {
        return [_fieldOrMethodName, baseTableName];
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFields</Name>
				<Source><![CDATA[
    void displayFields()
    {
        IdentifierName  name;
        int             length = conLen(menuItem.DataInquiryFieldList);

        for (int i = 1; i <= length; i++)
        {
            name = conPeek(conPeek(menuItem.DataInquiryFieldList, i), 1);

            switch (i)
            {
                case 1:
                    Control1.text(name);
                    break;

                case 2:
                    Control2.text(name);
                    break;

                case 3:
                    Control3.text(name);
                    break;

                case 4:
                    Control4.text(name);
                    break;

                case 5:
                    Control5.text(name);
                    break;

                case 6:
                    Control6.text(name);
                    break;

                case 7:
                    Control7.text(name);
                    break;

                case 8:
                    Control8.text(name);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillContainer</Name>
				<Source><![CDATA[
    private void fillContainer()
    {
        container   con;
        int         i = 1;

        [con, i] = this.addControlToContainer(control1, con, i);
        [con, i] = this.addControlToContainer(control2, con, i);
        [con, i] = this.addControlToContainer(control3, con, i);
        [con, i] = this.addControlToContainer(control4, con, i);
        [con, i] = this.addControlToContainer(control5, con, i);
        [con, i] = this.addControlToContainer(control6, con, i);
        [con, i] = this.addControlToContainer(control7, con, i);
        [con, i] = this.addControlToContainer(control8, con, i);

        this.tryUpdateMenuItemDataInquiryFieldList(con);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryUpdateMenuItemDataInquiryFieldList</Name>
				<Source><![CDATA[
    private void tryUpdateMenuItemDataInquiryFieldList(container _dataInquiryFieldList)
    {
        if (menuItem.DataInquiryFieldList != _dataInquiryFieldList && menuItem.checkCanUpdate())
        {
            menuItem.DataInquiryFieldList = _dataInquiryFieldList;
            menuItem.update();

            menuItem.dataSource().reread();
            menuItem.dataSource().refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldNameControl</Name>
				<Source><![CDATA[
    private boolean validateFieldNameControl(FieldName _name)
    {
        return fieldName2id(baseTableId, _name)
            || new SysDictTable(baseTableId).doesMethodExist(subStr(_name, 1, strLen(_name) - 2));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateControl</Name>
				<Source><![CDATA[
    private boolean validateControl(FieldName _fieldOrMethodName)
    {
        if (! _fieldOrMethodName
            || this.validateFieldNameControl(_fieldOrMethodName))
        {
            return true;
        }

        return checkFailed(strFmt("@SYS33954", _fieldOrMethodName, baseTableName));
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>Control1</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            this.performFormLookup(element.prepareLookup());
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;
        
            ret = element.validateControl(this.text());
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Control2</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            this.performFormLookup(element.prepareLookup());
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = element.validateControl(this.text());

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Control3</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            this.performFormLookup(element.prepareLookup());
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = element.validateControl(this.text());

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Control4</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            this.performFormLookup(element.prepareLookup());
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            return element.validateControl(this.text());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Control5</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            this.performFormLookup(element.prepareLookup());
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            return element.validateControl(this.text());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Control6</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            this.performFormLookup(element.prepareLookup());
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            return element.validateControl(this.text());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Control7</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            this.performFormLookup(element.prepareLookup());
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            return element.validateControl(this.text());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Control8</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            this.performFormLookup(element.prepareLookup());
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            return element.validateControl(this.text());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>WHSTmpFieldName</Name>
			<Table>WHSTmpFieldName</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FieldName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SysFieldID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SysTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DelayActive>No</DelayActive>
			<InsertAtEnd>No</InsertAtEnd>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">SimpleList</Style>
		<UseCaptionFromMenuItem xmlns="">Yes</UseCaptionFromMenuItem>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>GroupControls</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilter</Name>
						<Visible>No</Visible>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Control1</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@WAX:DisplayField1</Label>
						<LabelPosition>Above</LabelPosition>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Control2</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@WAX:DisplayField2</Label>
						<LabelPosition>Above</LabelPosition>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Control3</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@WAX:DisplayField3</Label>
						<LabelPosition>Above</LabelPosition>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Control4</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@WAX:DisplayField4</Label>
						<LabelPosition>Above</LabelPosition>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Control5</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@WAX:DisplayField5</Label>
						<LabelPosition>Above</LabelPosition>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Control6</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@WAX:DisplayField6</Label>
						<LabelPosition>Above</LabelPosition>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Control7</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@WAX:DisplayField7</Label>
						<LabelPosition>Above</LabelPosition>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Control8</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@WAX:DisplayField8</Label>
						<LabelPosition>Above</LabelPosition>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<Breakable>No</Breakable>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>GridControl</Name>
				<Type>Grid</Type>
				<Visible>No</Visible>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>