<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProjPosting</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ProjPosting extends FormRun
{
    boolean                 called;
    boolean                 codeProject;

    TableGroupAll           projCode;
    TableGroupAll           categoryCode;

    Integer                 lastSel;

    ProjId                  projId;
    ProjGroupId             projGroupId;
    ProjCategoryId          projCategoryId;
    ProjCategoryGroupId     projCategoryGroupId;
    TaxGroup                taxGroupId;

}
]]></Source>
			</Method>
			<Method>
				<Name>categoryCodeRange</Name>
				<Source><![CDATA[
    private str categoryCodeRange()
    {
        str                     range;
        ProjCategoryId          categoryId;
        ProjCategoryGroupId     categoryGroupId;

        if (projCategoryId)
        {
            categoryId = projCategoryId;
            categoryGroupId = ProjCategory::find(categoryId).CategoryGroupId;
        }

        if (projCategoryGroupId)
        {
            categoryGroupId = projCategoryGroupId;
        }

        switch (categoryCode)
        {
            case TableGroupAll::Table:
                range += strFmt('((%3 == "%4") && (%1 == %2)) || ',
                    fieldStr(ProjPosting, CategoryCode),
                    enum2int(TableGroupAll::Table),
                    fieldStr(ProjPosting, ProjCategoryRelation),
                    categoryId ? queryValue(categoryId) : '');
                // Fall through

            case TableGroupAll::GroupId:
                range += strFmt('((%1 == %2) && (%3 == "%4")) || ',
                    fieldStr(ProjPosting, CategoryCode),
                    enum2int(TableGroupAll::GroupId),
                    fieldStr(ProjPosting, ProjCategoryRelation),
                    categoryGroupId ? queryValue(categoryGroupId) : '');

                // If filtering records for a specific buffer then also include the records that match through
                // the 'All' code. (This range part is included here instead of the next case since that
                // is only used when the range in this method does not apply).
                range = strFmt('(%1 (%2 == %3))',
                    range,
                    fieldStr(ProjPosting, CategoryCode),
                    enum2int(TableGroupAll::All));
                // Fall through

            case TableGroupAll::All:
                // If code is 'All' then this range does not apply.
                break;
        }

        return range;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        // Initialize query ranges for the datasource
        element.updateDatasourceRanges();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFields</Name>
				<Source><![CDATA[
    void initFields(ProjPosting _projLedger, LedgerTransType _ledgerTransType)
    {
        if (called)
        {
            if (codeProject)
            {
                switch (projCode)
                {
                    case TableGroupAll::Table   :
                        _projLedger.ProjRelation = projId;
                        break;

                    case TableGroupAll::GroupId:
                        _projLedger.ProjRelation = projGroupId;
                        break;
                }
                _projLedger.ProjCode = projCode;
            }
            else
            {
                switch (categoryCode)
                {
                    case TableGroupAll::Table   :
                        _projLedger.ProjCategoryRelation = projCategoryId;
                        break;

                    case TableGroupAll::GroupId:
                        _projLedger.ProjCategoryRelation = projCategoryGroupId;
                        break;
                }
                _projLedger.CategoryCode = categoryCode;
            }

            if (_ledgerTransType == LedgerTransType::Sales)
            {
                _projLedger.TaxGroupId = taxGroupId;
            }
            else
            {
                _projLedger.TaxGroupId = '';
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCodeRange</Name>
				<Source><![CDATA[
    private str projCodeRange()
    {
        str             range;
        ProjId          criteriaProjId;
        ProjGroupId     criteriaProjGroupId;

        if (projId)
        {
            criteriaProjId = projId;
        }

        if (projGroupId)
        {
            criteriaProjGroupId = projGroupId;
        }

        switch (projCode)
        {
            case TableGroupAll::Table:
                range += strFmt('((%1 == %2) && (%3 == "%4")) || ',
                    fieldStr(ProjPosting, ProjCode),
                    enum2int(TableGroupAll::Table),
                    fieldStr(ProjPosting, ProjRelation),
                    criteriaProjId ? queryValue(criteriaProjId) : '');
                // Fall through

            case TableGroupAll::GroupId:
                range += strFmt('((%1 == %2) && (%3 == "%4")) || ',
                    fieldStr(ProjPosting, ProjCode),
                    enum2int(TableGroupAll::GroupId),
                    fieldStr(ProjPosting, ProjRelation),
                    criteriaProjGroupId ? queryValue(criteriaProjGroupId) : '');

                // If filtering records for a specific buffer then also include the records that match through
                // the 'All' code. (This range part is included here instead of the next case since that
                // is only used when the range in this method does not apply).
                range = strFmt('(%1 (%2 == %3))',
                    range,
                    fieldStr(ProjPosting, ProjCode),
                    enum2int(TableGroupAll::All));
                // Fall through

            case TableGroupAll::All:
                // If code is 'All' then this range does not apply.
                break;
        }

        return range;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        element.updateNow();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeFromProjAccountTypeCost</Name>
				<Source><![CDATA[
    public ProjAccountType typeFromProjAccountTypeCost(ProjAccountTypeCost _type)
    {
        switch (_type)
        {
            case ProjAccountTypeCost::Cost:
                return ProjAccountType::CostAccount;

            case ProjAccountTypeCost::PayrollAllocation:
                return ProjAccountType::PayrollAllocation;

            case ProjAccountTypeCost::WIPCostvalue:
                return ProjAccountType::StatusAccount;

            case ProjAccountTypeCost::OffsetAccountItem:
                return ProjAccountType::OffsetAccountItem;

            case ProjAccountTypeCost::StatusAccountItem:
                return ProjAccountType::StatusAccountItem;

            case ProjAccountTypeCost::AccruedCost:
                return ProjAccountType::AccruedCost;

            case ProjAccountTypeCost::WIPCostAccruals:
                return ProjAccountType::WIPCostAccruals;

            case ProjAccountTypeCost::IntercompanyCost:
                return ProjAccountType::IntercompanyCost;
            default:
                break;
        }

        var eventHandlerResult = new EventHandlerResult();
        this.typeFromProjAccountTypeCostConverting(_type, eventHandlerResult);

        if (eventHandlerResult.hasResult())
        {
            return eventHandlerResult.result();
        }

        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeFromProjAccountTypeCostConverting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for conversion of <c>ProjAccountTypeCost</c> enumeration value to <c>ProjAccountType</c> enumeration value.
    /// </summary>
    /// <param name = "_type">The <c>ProjAccountTypeCost</c> enumeration value to convert.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> instance, where subscribers can provide the conversion result.</param>
    delegate void typeFromProjAccountTypeCostConverting(ProjAccountTypeCost _type, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeFromProjAccountTypeSales</Name>
				<Source><![CDATA[
    public ProjAccountType typeFromProjAccountTypeSales(ProjAccountTypeSales _type)
    {
        switch (_type)
        {
            case ProjAccountTypeSales::Turnover:
                return ProjAccountType::RevenueAccount;

            case ProjAccountTypeSales::OnAccount:
                return ProjAccountType::OnAccountAccount;

            case ProjAccountTypeSales::Salesvalue:
                return ProjAccountType::SalesValue;

            case ProjAccountTypeSales::SalesvalueOffset:
                return ProjAccountType::SalesOffsetAccount;

            case ProjAccountTypeSales::AccruedTurnoverProd:
                return ProjAccountType::AccruedTurnoverProd;

            case ProjAccountTypeSales::WIPProduction:
                return ProjAccountType::WIPProduction;

            case ProjAccountTypeSales::AccruedTurnoverProfit:
                return ProjAccountType::AccruedTurnoverProfit;

            case ProjAccountTypeSales::WIPProfit:
                return ProjAccountType::WIPProfit;

            case ProjAccountTypeSales::AccruedRevenueOnAccount:
                return ProjAccountType::AccruedRevenueOnAccount;

            case ProjAccountTypeSales::WIPInvoicedOnAccount:
                return ProjAccountType::WIPInvoicedOnAccount;

            case ProjAccountTypeSales::AccruedRevenueSubscription:
                return ProjAccountType::AccruedRevenueSubscription;

            case ProjAccountTypeSales::WIPSubscription:
                return ProjAccountType::WIPSubscription;

            case ProjAccountTypeSales::IntercompanyRevenue:
                return ProjAccountType::IntercompanyRevenue;

            // <GBR>
            case ProjAccountTypeSales::DebitNote_BR:
                return ProjAccountType::DebitNote_BR;

            case ProjAccountTypeSales::InvoiceCancelRevenueAccount:
                return ProjAccountType::InvoiceCancelRevenueAccount;

            // </GBR>

            default:
                break;
        }

        var eventHandlerResult = new EventHandlerResult();
        this.typeFromProjAccountTypeSalesConverting(_type, eventHandlerResult);

        if (eventHandlerResult.hasResult())
        {
            return eventHandlerResult.result();
        }

        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeFromProjAccountTypeSalesConverting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for conversion of <c>ProjAccountTypeSales</c> enumeration value to <c>ProjAccountType</c> enumeration value.
    /// </summary>
    /// <param name = "_type">The <c>ProjAccountTypeSales</c> enumeration value to convert.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> instance, where subscribers can provide the conversion result.</param>
    delegate void typeFromProjAccountTypeSalesConverting(ProjAccountTypeSales _type, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccountTypeLabel</Name>
				<Source><![CDATA[
    public void updateAccountTypeLabel(ProjAccountType _type)
    {
        switch (_type)
        {
            case ProjAccountType::CostAccount:
                ctrlAccountTypeCost.helpText("@SYS60417");
                break;

            case ProjAccountType::PayrollAllocation:
                ctrlAccountTypeCost.helpText("@SYS60418");
                break;

            case ProjAccountType::StatusAccount:
                ctrlAccountTypeCost.helpText("@SYS60419");
                break;

            case ProjAccountType::OffsetAccountItem:
                ctrlAccountTypeCost.helpText("@SYS60421");
                break;

            case ProjAccountType::StatusAccountItem:
                ctrlAccountTypeCost.helpText("@SYS60420");
                break;

            case ProjAccountType::AccruedCost:
                ctrlAccountTypeCost.helpText("@SYS339250");
                break;

            case ProjAccountType::WIPCostAccruals:
                ctrlAccountTypeCost.helpText("@SYS339243");
                break;

            case ProjAccountType::RevenueAccount:
                ctrlAccountTypeSales.helpText("@SYS60422");
                break;

            case ProjAccountType::OnAccountAccount:
                ctrlAccountTypeSales.helpText("@SYS343545");
                break;

            case ProjAccountType::SalesValue:
                ctrlAccountTypeSales.helpText("@SYS60424");
                break;

            case ProjAccountType::SalesOffsetAccount:
                ctrlAccountTypeSales.helpText("@SYS60425");
                break;

            case ProjAccountType::AccruedTurnoverProd:
                ctrlAccountTypeSales.helpText("@SYS339244");
                break;

            case ProjAccountType::WIPProduction:
                ctrlAccountTypeSales.helpText("@SYS339245");
                break;

            case ProjAccountType::AccruedTurnoverProfit:
                ctrlAccountTypeSales.helpText("@SYS339246");
                break;

            case ProjAccountType::WIPProfit:
                ctrlAccountTypeSales.helpText("@SYS339247");
                break;

            case ProjAccountType::AccruedRevenueOnAccount:
                ctrlAccountTypeSales.helpText("@SYS343546");
                break;

            case ProjAccountType::WIPInvoicedOnAccount:
                ctrlAccountTypeSales.helpText("@SYS343547");
                break;

            case ProjAccountType::AccruedRevenueSubscription:
                ctrlAccountTypeSales.helpText("@SYS339248");
                break;

            case ProjAccountType::WIPSubscription:
                ctrlAccountTypeSales.helpText("@SYS339249");
                break;

            case ProjAccountType::IntercompanyCost:
                ctrlAccountTypeCost.helpText("@FPK270081");
                break;

            case ProjAccountType::IntercompanyRevenue:
                ctrlAccountTypeSales.helpText("@FPK270080");
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDatasourceRanges</Name>
				<Source><![CDATA[
	/// <summary>
    /// Updates the datasource ranges.
    /// </summary>
    protected void updateDatasourceRanges()
    {
        ProjAccountType type;

        type = element.typeFromProjAccountTypeCost(any2Enum(ctrlAccountTypeCost.selection()));
        element.updateQuery(cost_ds.query().dataSourceTable(tableNum(ProjPosting)), type);

        type = element.typeFromProjAccountTypeSales(any2Enum(ctrlAccountTypeSales.selection()));
        element.updateQuery(sales_ds.query().dataSourceTable(tableNum(ProjPosting)), type);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    void updateDesign(LedgerTransType _ledgerTransType)
    {
        ProjAccountType type;

        switch (_ledgerTransType)
        {
            case LedgerTransType::Cost:

                type = element.typeFromProjAccountTypeCost(any2Enum(ctrlAccountTypeCost.selection()));

                if (type == ProjAccountType::IntercompanyCost)
                {
                    Cost_LendingLegalEntity.visible(true);
                    ctrlCostProjFundingSource.allowEdit(false);
                }
                else
                {
                    Cost_LendingLegalEntity.visible(false);

                    ctrlCostProjFundingSource.skip(cost.ProjCode != TableGroupAll::Table || !cost.ProjRelation);
                    if (cost.ProjCode != TableGroupAll::Table && !cost.ProjRelation)
                    {
                        ctrlCostProjFundingSource.value(0);
                    }

                    Cost_ProjCode.allowEdit(true);
                    ctrlCostCategoryCode.allowEdit(true);
                    if (ctrlCostCategoryCode.valueStr() == enum2str(TableGroupAll::All))
                    {
                        ctrlCostCategoryRel.allowEdit(false);
                    }
                    else
                    {
                        ctrlCostCategoryRel.allowEdit(true);
                    }

                    if (cost.ProjCode == TableGroupAll::All)
                    {
                        ctrlCostProjRel.allowEdit(false);
                        ctrlCostProjFundingSource.allowEdit(false);
                    }
                    else if (cost.ProjCode == TableGroupAll::GroupId)
                    {
                        ctrlCostProjRel.allowEdit(true);
                        ctrlCostProjFundingSource.allowEdit(false);
                    }
                    else
                    {
                        ctrlCostProjRel.allowEdit(true);
                        ctrlCostProjFundingSource.allowEdit(true && cost.ProjRelation);
                    }
                }
                break;

            case LedgerTransType::Sales:

                type = element.typeFromProjAccountTypeSales(any2Enum(ctrlAccountTypeSales.selection()));

                if (type == ProjAccountType::IntercompanyRevenue)
                {
                    Sales_BorrowingLegalEntity.visible(true);
                    ctrlSalesProjFundingSource.allowEdit(false);
                }
                else
                {
                    Sales_BorrowingLegalEntity.visible(false);
                    ctrlSalesProjFundingSource.skip(sales.ProjCode != TableGroupAll::Table || !sales.ProjRelation);
                    if (sales.ProjCode != TableGroupAll::Table && !sales.ProjRelation)
                    {
                        ctrlSalesProjFundingSource.value(0);
                    }

                    Sales_ProjCode.enabled(true);
                    ctrlSalesCategoryCode.allowEdit(true);
                    ctrlSalesCategoryRel.allowEdit(true);
                    if (sales.ProjCode == TableGroupAll::All)
                    {
                        ctrlSalesProjRel.allowEdit(false);
                        ctrlSalesProjFundingSource.allowEdit(false);
                    }
                    else if (sales.ProjCode == TableGroupAll::GroupId)
                    {
                        ctrlSalesProjRel.allowEdit(true);
                        ctrlSalesProjFundingSource.allowEdit(false);
                    }
                    else
                    {
                        ctrlSalesProjRel.allowEdit(true);
                        ctrlSalesProjFundingSource.allowEdit(true && sales.ProjRelation);
                    }
                }

                break;
        }
        element.updateAccountTypeLabel(type);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    void updateNow()
    {
        ProjGroup            projGroup;
        ProjCategory         projCategory;
        ProjCategoryGroup    projCategoryGroup;
        ProjTable            projTable;

        if (element.args().caller() && element.args().dataset())
        {
            called      = true;

            switch (element.args().dataset())
            {
                case tableNum(ProjTable):
                    codeProject             = true;
                    projTable               = element.args().record();
                    projId                  = projTable.ProjId;
                    projGroupId             = projTable.ProjGroupId;
                    projCode                = TableGroupAll::Table;
                    taxGroupId              = projTable.TaxGroupId;
                    break;

                case tableNum(ProjGroup):
                    codeProject             = true;
                    projGroup               = element.args().record();
                    projGroupId             = projGroup.ProjGroupId;
                    projCode                = TableGroupAll::GroupId;
                    break;

                case tableNum(ProjCategory):
                    codeProject             = false;
                    projCategory            = element.args().record();
                    projCategoryId          = projCategory.CategoryId;
                    categoryCode            = TableGroupAll::Table;
                    break;

                case tableNum(ProjCategoryGroup):
                    codeProject             = false;
                    projCategoryGroup       = element.args().record();
                    projCategoryGroupId     = projCategoryGroup.CategoryGroupId;
                    categoryCode            = TableGroupAll::GroupId;
                    break;
            }

            // Initialize query ranges for the datasource
            element.updateDatasourceRanges();
        }
        else
        {
            called= false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    void updateQuery(
        QueryBuildDataSource    _qbds,
        ProjAccountType         _accountType
        )
    {
        // Clear existing sorting and ranging
        _qbds.clearDynalinks();
        _qbds.clearSortIndex();
        _qbds.clearRanges();

        // Range by account type
        _qbds.addRange(fieldNum(ProjPosting, ProjAccountType)).value(queryValue(_accountType));

        if (called)
        {
            if (codeProject)
            {
                // Set sorting by ProjCodeIdx
                _qbds.addSortIndex(indexNum(ProjPosting, ProjCodeIdx));

                // Also range by proj code
                _qbds.addRange(fieldNum(ProjPosting, ProjCode)).value(element.projCodeRange());
            }
            else
            {
                // Set sorting by AccountIdx
                _qbds.addSortIndex(indexNum(ProjPosting, AccountIdx));

                // Also range by category code
                _qbds.addRange(fieldNum(ProjPosting, CategoryCode)).value(element.categoryCodeRange());
            }
        }
        else
        {
            // Set sorting by AccountIdx
            _qbds.addSortIndex(indexNum(ProjPosting, AccountIdx));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performCompanyLookup</Name>
				<Source><![CDATA[
    private void performCompanyLookup(FormControl _formControl)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(CompanyInfo), _formControl);

        sysTableLookup.addLookupfield(fieldNum(CompanyInfo, DataArea));
        sysTableLookup.setLabel("@SYS318577");
        sysTableLookup.addLookupfield(fieldNum(CompanyInfo, Name));

        Query query = TSTimesheetLine::buildQueryCompanyLookup();

        sysTableLookup.addSelectionField(fieldNum(CompanyInfo, DataArea));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>Cost</Name>
				<Methods>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        void linkActive()
        {
            element.updateNow();

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        void initValue()
        {
            super();

            element.initFields(cost, LedgerTransType::Cost);
            cost.ProjAccountType = element.typeFromProjAccountTypeCost(any2Enum(ctrlAccountTypeCost.selection()));
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        int active()
        {
            int         ret;
            boolean     show;

            show    = ! cost.mayOnlyCategoryCodeAllBeSet();

            ctrlCostProjRel.allowEdit(cost.ProjCode != TableGroupAll::All);
            ctrlCostProjRel.skip(cost.ProjCode == TableGroupAll::All);

            ctrlCostCategoryCode.allowEdit(show);
            ctrlCostCategoryCode.skip(!ctrlCostCategoryCode.allowEdit());
            ctrlCostCategoryRel.allowEdit(show && cost.CategoryCode != TableGroupAll::All);
            ctrlCostCategoryRel.skip(!ctrlCostCategoryRel.allowEdit());

            element.updateDesign(LedgerTransType::Cost);

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>CategoryCode</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            void modified()
            {
                super();

                ctrlCostCategoryRel.allowEdit(cost.CategoryCode != TableGroupAll::All);
                ctrlCostCategoryRel.skip(cost.CategoryCode == TableGroupAll::All);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjCategoryRelation</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                changecompany (cost.LendingLegalEntity)
                {
                    if (cost.CategoryCode == TableGroupAll::Table)
                    {
                        ProjCategory::lookupProjCategoryByCategory(_formControl);
                    }
                    else
                    {
                        ProjCategoryGroup::lookupByProjCategoryGroup(_formControl);
                    }
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjCode</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            void modified()
            {
                super();

                ctrlCostProjRel.allowEdit(cost.ProjCode != TableGroupAll::All);
                ctrlCostProjRel.skip(cost.ProjCode == TableGroupAll::All);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjFundingSource</DataField>
						<Methods>
							<Method>
								<Name>resolveReference</Name>
								<Source><![CDATA[
            public Common resolveReference(FormReferenceControl _formReferenceControl)
            {
                return ProjFundingSource::resolveReferenceByContractFSName(_formReferenceControl, ProjTable::find(cost.ProjRelation).ProjInvoiceProjId);
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                Common  ret;

                if (cost.ProjCode == TableGroupAll::Table && cost.ProjRelation)
                {
                    ProjInvoiceProjId projInvoiceProjId = ProjTable::find(cost.ProjRelation).ProjInvoiceProjId;
                    ret = ProjFundingSource::lookupFundingSourceByContract(_formReferenceControl, projInvoiceProjId);
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>Sales</Name>
				<Methods>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        void linkActive()
        {
            element.updateNow();

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        void initValue()
        {
            super();

            element.initFields(sales, LedgerTransType::Sales);
            sales.ProjAccountType = element.typeFromProjAccountTypeSales(any2Enum(ctrlAccountTypeSales.selection()));
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        int active()
        {
            int         ret;
            boolean     show;

            show        = ! sales.mayOnlyCategoryCodeAllBeSet();

            ctrlsalesProjRel.allowEdit          (sales.ProjCode != TableGroupAll::All);
            ctrlSalesProjRel.skip               (sales.ProjCode == TableGroupAll::All);
            ctrlsalesCategoryCode.allowEdit     (show);
            ctrlsalesCategoryCode.skip          (!ctrlsalesCategoryCode.allowEdit());
            ctrlsalesCategoryRel.allowEdit      (show && sales.CategoryCode != TableGroupAll::All);
            ctrlSalesCategoryRel.skip           (!ctrlSalesCategoryRel.allowEdit());

            element.updateDesign( LedgerTransType::Sales );

            if ((sales.ProjAccountType   == ProjAccountType::OnAccountAccount)     ||
                (sales.ProjAccountType   == ProjAccountType::WIPInvoicedOnAccount) ||
                (sales.ProjAccountType   == ProjAccountType::AccruedRevenueOnAccount))
            {
                ctrlsalesCategoryCode.allowEdit(false);
                ctrlsalesCategoryCode.skip(true);
                ctrlsalesCategoryRel.allowEdit(false);
                ctrlSalesCategoryRel.skip(true);
            }
            else if (sales.ProjAccountType == ProjAccountType::IntercompanyRevenue)
            {
                ctrlsalesCategoryCode.allowEdit(true);
                ctrlsalesCategoryCode.skip(false);
                ctrlsalesCategoryRel.allowEdit(true);
                ctrlsalesCategoryRel.skip(false);
            }
            else
            {
                ctrlsalesCategoryCode.allowEdit(true);
                ctrlsalesCategoryCode.skip(false);
                ctrlsalesCategoryRel.allowEdit(sales.CategoryCode != TableGroupAll::All);
                ctrlSalesCategoryRel.skip(sales.CategoryCode == TableGroupAll::All);
            }

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>CategoryCode</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            void modified()
            {
                super();

                ctrlSalesCategoryRel.allowEdit(sales.CategoryCode != TableGroupAll::All);
                ctrlSalesCategoryRel.skip(sales.CategoryCode == TableGroupAll::All);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjCategoryRelation</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                changecompany(sales.BorrowingLegalEntity)
                {
                    if (sales.CategoryCode == TableGroupAll::Table)
                    {
                        ProjCategory::lookupProjCategoryByCategory(_formControl);
                    }
                    else
                    {
                        ProjCategoryGroup::lookupByProjCategoryGroup(_formControl);
                    }
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjCode</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            void modified()
            {
                super();

                ctrlSalesProjRel.allowEdit(sales.ProjCode != TableGroupAll::All);
                ctrlSalesProjRel.skip(sales.ProjCode == TableGroupAll::All);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjFundingSource</DataField>
						<Methods>
							<Method>
								<Name>resolveReference</Name>
								<Source><![CDATA[
            public Common resolveReference(FormReferenceControl _formReferenceControl)
            {
                return ProjFundingSource::resolveReferenceByContractFSName(_formReferenceControl, ProjTable::find(sales.ProjRelation).ProjInvoiceProjId);
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                Common              ret;
                ProjInvoiceProjId   projInvoiceProjId;

                if (sales.ProjCode == TableGroupAll::Table && sales.ProjRelation)
                {
                    projInvoiceProjId = ProjTable::find(sales.ProjRelation).ProjInvoiceProjId;
                    ret = ProjFundingSource::lookupFundingSourceByContract(_formReferenceControl, projInvoiceProjId);
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>TaxGroupId</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                changecompany(sales.BorrowingLegalEntity)
                {
                    super(_formControl, _filterStr);
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Cost</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();

            element.defaultDataSource(cost_ds);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CtrlAccountTypeCost</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>enter</Name>
						<Source><![CDATA[
        void enter()
        {
            super();

            lastSel = this.selection();
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        int selectionChange()
        {
            int             ret;
            ProjAccountType projAccountType;

            if (!cost_ds.leaveRecord())
            {
                this.selection(lastSel);
                return 0;
            }

            ret = super();

            projAccountType = element.typeFromProjAccountTypeCost(any2Enum(ctrlAccountTypeCost.selection()));
            element.updateQuery(cost_ds.query().dataSourceTable(tableNum(ProjPosting)), projAccountType);
            cost_ds.executeQuery();
            element.updateAccountTypeLabel(projAccountType);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Cost_LendingLegalEntity</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            element.performCompanyLookup(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Cost_ProjCode</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.updateDesign(LedgerTransType::Cost);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CtrlCostProjRel</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.updateDesign(LedgerTransType::Cost);

            cost_ds.rereadReferenceDataSources();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            SysTableLookup sysTableLookup = ProjPosting::lookupProjectRelation(this, cost.ProjCode, cost.BorrowingLegalEntity);

            if (sysTableLookup != null)
            {
                sysTableLookup.performFormLookup();
            }
            else
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CtrlCostProjFundingSource</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            ProjPosting::jumpRefProjContract(ProjTable::find(cost.ProjRelation).ProjInvoiceProjId, element);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CtrlCostCategoryRel</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            SysTableLookup sysTableLookup = ProjPosting::lookupCategoryRelation(this, cost.CategoryCode,cost.LendingLegalEntity) ;

            if (sysTableLookup != null)
            {
                sysTableLookup.performFormLookup();
            }
            else
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Sales</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();

            element.defaultDataSource(sales_ds);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CtrlAccountTypeSales</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>gotFocus</Name>
						<Source><![CDATA[
        public void gotFocus()
        {
            super();

            lastSel = this.selection();
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        int selectionChange()
        {
            int             ret;
            ProjAccountType projAccountType;

            //<GBR>
            SysInfoAction sysInfoAction;
            sysInfoAction = SysInfoAction_Formrun::newFormnameControlname(formStr(ProjParameters),identifierStr(InvoiceTab));
            if (any2Enum(this.selection()) == ProjAccountTypeSales::InvoiceCancelRevenueAccount
                && !ProjParameters::find().EnableCancelPostingProfiles)
            {
                this.selection(lastSel);
                return checkFailed("@Brazil:ProjectSalesCancellingAlternativeAccount",'',sysInfoAction);
            }
            //</GBR>

            if (! sales_ds.leaveRecord())
            {
                this.selection(lastSel);
                return 0;
            }

            ret = super();

            projAccountType = element.typeFromProjAccountTypeSales(any2Enum(ctrlAccountTypeSales.selection()));
            element.updateQuery(sales_ds.query().dataSourceTable(tableNum(ProjPosting)), projAccountType);
            sales_ds.executeQuery();
            element.updateAccountTypeLabel(projAccountType);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Sales_BorrowingLegalEntity</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            element.performCompanyLookup(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Sales_ProjCode</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.updateDesign(LedgerTransType::Sales);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ctrlSalesProjRel</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.updateDesign(LedgerTransType::Sales);

            sales_ds.rereadReferenceDataSources();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            SysTableLookup sysTableLookup = ProjPosting::lookupProjectRelation(this, sales.ProjCode,sales.BorrowingLegalEntity) ;

            if (sysTableLookup != null)
            {
                sysTableLookup.performFormLookup();
            }
            else
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CtrlSalesProjFundingSource</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            ProjPosting::jumpRefProjContract(ProjTable::find( sales.ProjRelation ).ProjInvoiceProjId, element);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CtrlSalesCategoryRel</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            SysTableLookup sysTableLookup = ProjPosting::lookupCategoryRelation(this, sales.CategoryCode,sales.BorrowingLegalEntity) ;

            if (sysTableLookup != null)
            {
                sysTableLookup.performFormLookup();
            }
            else
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>Cost</Name>
			<Table>ProjPosting</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CategoryCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjAccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BorrowingLegalEntity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjCategoryRelation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjFundingSource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LendingLegalEntity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjRelation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroupId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>Sales</Name>
			<Table>ProjPosting</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CategoryCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjAccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BorrowingLegalEntity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjCategoryRelation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjFundingSource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LendingLegalEntity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjRelation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroupId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS18008</Caption>
		<Pattern xmlns="">Task</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<StatusBarStyle xmlns="">Simple</StatusBarStyle>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>FormActionPaneControl1</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Cost</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CostCustomFilter</Name>
								<Pattern>CustomFilters</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>CtrlAccountTypeCost</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<EnumType>ProjAccountTypeCost</EnumType>
										<Items />
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
								<FrameType>None</FrameType>
								<Style>CustomFilter</Style>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>GridCost</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Cost_LendingLegalEntity</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>LendingLegalEntity</DataField>
										<DataSource>Cost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>Cost_ProjCode</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>536870910</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjCode</DataField>
										<DataSource>Cost</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CtrlCostProjRel</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>805306365</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjRelation</DataField>
										<DataSource>Cost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>CtrlCostProjFundingSource</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741820</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>CtrlCostProjFundingSource_FundingSourceId</Name>
												<DataRelationPath>ProjFundingSource</DataRelationPath>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
											</AxFormControl>
										</Controls>
										<DataSource>Cost</DataSource>
										<ReferenceField>ProjFundingSource</ReferenceField>
										<ReplacementFieldGroup>FundingSourceName</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>CtrlCostCategoryCode</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1342177275</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CategoryCode</DataField>
										<DataSource>Cost</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CtrlCostCategoryRel</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612730</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjCategoryRelation</DataField>
										<DataSource>Cost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormSegmentedEntryControl">
										<Name>Cost_AccountNum</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1879048185</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_ProjectManagementAndAccounting:ProjPosting_Cost_AccountNum</HelpText>
										<Type>SegmentedEntry</Type>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension>
											<Name>SegmentedEntryControl</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>parmControllerClassName</Name>
													<Type>String</Type>
													<Value>LedgerDimensionDefaultAccountController</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmAccountTypeEnumName</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIsDefaultAccount</Name>
													<Type>Enum</Type>
													<TypeName>boolean</TypeName>
													<Value>False</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmValidateBlockedForManualEntry</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmLockMainAccountSegment</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmPostingType</Name>
													<Type>Enum</Type>
													<TypeName>LedgerPostingType</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeTotalAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeFinancialAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
										<DataSource>Cost</DataSource>
										<ReferenceField>LedgerDimension</ReferenceField>
									</AxFormControl>
								</Controls>
								<DataSource>Cost</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS77784</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Sales</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SalesCustomFilter</Name>
								<Pattern>CustomFilters</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>CtrlAccountTypeSales</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<EnumType>ProjAccountTypeSales</EnumType>
										<Items />
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
								<FrameType>None</FrameType>
								<Style>CustomFilter</Style>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>GridSales</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Sales_BorrowingLegalEntity</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>BorrowingLegalEntity</DataField>
										<DataSource>Sales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>Sales_ProjCode</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>536870910</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjCode</DataField>
										<DataSource>Sales</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ctrlSalesProjRel</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>805306365</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjRelation</DataField>
										<DataSource>Sales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>CtrlSalesProjFundingSource</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741820</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<NeededPermission>Update</NeededPermission>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>CtrlSalesProjFundingSource_FundingSourceId</Name>
												<DataRelationPath>ProjFundingSource</DataRelationPath>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
											</AxFormControl>
										</Controls>
										<DataSource>Sales</DataSource>
										<ReferenceField>ProjFundingSource</ReferenceField>
										<ReplacementFieldGroup>FundingSourceName</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>CtrlSalesCategoryCode</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1342177275</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CategoryCode</DataField>
										<DataSource>Sales</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CtrlSalesCategoryRel</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612730</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjCategoryRelation</DataField>
										<DataSource>Sales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ctrlSales_TaxGroup</Name>
										<ElementPosition>1744830457</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxGroupId</DataField>
										<DataSource>Sales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormSegmentedEntryControl">
										<Name>Sales_AccountNum</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1879048185</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_ProjectManagementAndAccounting:ProjPosting_Sales_AccountNum</HelpText>
										<Type>SegmentedEntry</Type>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension>
											<Name>SegmentedEntryControl</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>parmControllerClassName</Name>
													<Type>String</Type>
													<Value>LedgerDimensionDefaultAccountController</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmAccountTypeEnumName</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIsDefaultAccount</Name>
													<Type>Enum</Type>
													<TypeName>boolean</TypeName>
													<Value>False</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmValidateBlockedForManualEntry</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmLockMainAccountSegment</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmPostingType</Name>
													<Type>Enum</Type>
													<TypeName>LedgerPostingType</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeTotalAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeFinancialAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
										<DataSource>Sales</DataSource>
										<ReferenceField>LedgerDimension</ReferenceField>
									</AxFormControl>
								</Controls>
								<DataSource>Sales</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS77785</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>