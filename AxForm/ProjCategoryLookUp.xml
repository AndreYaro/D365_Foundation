<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProjCategoryLookUp</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
    [Form]
    public class ProjCategoryLookUp extends FormRun
    {
        tableId             tmpTableId;
        Common              relRecord;

        formName            formName;

        ResourceRecId       resourceRecId;
        ProjId              projId;

        ProjCategoryType    categoryType;

        NoYes               subscription;
        boolean             filterEstimate;
        boolean             filterSubscription;
        boolean             showActiveOrSubscription;
        boolean             serviceItem;
        boolean             production;
        boolean             excludeRevenue;
        ProjValCheckTrans   projValTrans;
}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        
        FormStringControl   caller          = element.args().parmObject();
        FormRun             formRun;

        if (element.args().caller().name())
        {
            formName = element.args().caller().name();
        }

        if (element.args() && element.args().dataset())
        {
            tmpTableId = element.args().dataset();
        }

        if (element.args().caller() && element.args().caller() is FormRun)
        {
            formRun = element.args().caller();
            switch (formRun.name())
            {
                case formStr(PurchTable):
                    relRecord = formRun.dataSource(tableStr(PurchLine)).cursor();
                    break;

                case formStr(PurchReqTable):
                    relRecord = formRun.dataSource(tableStr(PurchReqLine)).cursor();
                    break;

                case formStr(PurchRFQCaseTable):
                    relRecord = formRun.dataSource(tableStr(PurchRFQCaseLine)).cursor();
                    break;
            }
        }

        if (tmpTableId != tablenum(ProjGroup))
        {
            if (! projValTrans)
            {
                projValTrans    = new ProjValCheckTrans();
                if (projValTrans.checkBuffer(element.args()))
                {
                    projValTrans.setVariablesFromBuffer(element.args());
                }
            }

            projId                      = projValTrans.parmProjId();
            resourceRecId               = projValTrans.parmResource();
            categoryType                = projValTrans.parmCategoryType();
            excludeRevenue              = projValTrans.parmExcludeRevenue();

            filterEstimate              = projValTrans.parmFilterEstimate();
            filterSubscription          = projValTrans.parmFilterSubscription();
            showActiveOrSubscription    = projValTrans.parmShowActiveOrSubscription();

            subscription                = projValTrans.parmSubscription();
            serviceItem                 = projValTrans.parmServiceItem();

            production                  = projValTrans.parmProduction();
        }
        else
        {
            if (caller.extendedDataType() == extendedtypenum(ProjCategoryCostId))
            {
                categoryType    = ProjCategoryType::Cost;
            }
            else
            {
                categoryType    = ProjCategoryType::Revenue;
            }
        }

        super();

        element.selectMode(projCategory_CategoryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        FormStringControl   callerControl   = SysTableLookup::getCallerStringControl(element.args());
        boolean             filterLookup    = false;

        filterLookup = SysTableLookup::filterLookupPreRun(callerControl, projCategory_CategoryId, projCategory_DS);

        super();

        SysTableLookup::filterLookupPostRun(filterLookup, callerControl.text(), projCategory_CategoryId, projCategory_DS);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>ProjCategory</Name>
				<Methods>
					<Method>
						<Name>showInactive</Name>
						<Source><![CDATA[
        boolean showInactive()
        {
            return ProjParameters::find().ShowInactiveCategories;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        void init()
        {
            Query q;
            ProjCategoryLookup pcLookup = new ProjCategoryLookup();

            super();

            pcLookup.parmCategoryType(categoryType);
            pcLookup.parmFilterEstimate(filterEstimate);
            pcLookup.parmFilterSubscription(filterSubscription);
            pcLookup.parmShowActiveOrSubscription(showActiveOrSubscription);
            pcLookup.parmShowInactiveCategories(this.showInactive());
            pcLookup.parmSubscription(subscription);
            pcLookup.parmProduction(production);
            // If it's from expense line distribution, pass Expense parameter as true to filter out non-expense project categories.
            if (tmpTableId == tableNum(ProjectAccountingDistribution))
            {
                ProjectAccountingDistribution projectAccountingDistribution = element.args().record();
                SourceDocumentLineItem sourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(
                    projectAccountingDistribution.getAccountingDistribution().SourceDocumentLine);
                if (sourceDocumentLineItem is TrvExpTransSourceDocLineItem)
                {
                    pcLookup.parmExpense(true);
                }
            }
            pcLookup.parmFormName(formName);
            pcLookup.parmExcludeRevenue(excludeRevenue);

            // in case of service Item line the employeeId should be ignored
            ResourceRecId = (serviceItem) ? 0 : resourceRecId;

            pcLookup.parmProjValCheckTrans(projValTrans);

            // Build query used for the Category lookup
            q = pcLookup.buildQuery(tmpTableId, projId, resourceRecId, null, relRecord);
            this.query(q);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="" />
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>ProjCategory</Name>
			<Table>ProjCategory</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Active</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CategoryGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CategoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CategoryType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DAXIntegrationKey</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjCategoryEmplOption</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSACustPaymentRetention</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAIndirectComponent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SetupEstimate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SetupSubscription</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxServiceCodeId_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdItemGroupHeading_TH</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TsAbsence</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoNotify>No</AutoNotify>
			<LinkType>Active</LinkType>
			<OnlyFetchActive>Yes</OnlyFetchActive>
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<AlwaysOnTop xmlns="">Yes</AlwaysOnTop>
		<Frame xmlns="">Border</Frame>
		<HeightMode xmlns="">SizeToContent</HeightMode>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Left xmlns="">709</Left>
		<LeftMode xmlns="">Manual</LeftMode>
		<Pattern xmlns="">LookupGridOnly</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<Style xmlns="">Lookup</Style>
		<Top xmlns="">148</Top>
		<TopMode xmlns="">Manual</TopMode>
		<WidthMode xmlns="">SizeToAvailable</WidthMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<AllowEdit>No</AllowEdit>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToContent</HeightMode>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>ProjCategory_CategoryId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>858993458</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>CategoryId</DataField>
						<DataSource>ProjCategory</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>ProjCategory_Name</Name>
						<ElementPosition>1288490187</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>Name</DataField>
						<DataSource>ProjCategory</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>ProjCategory_CategoryType</Name>
						<ElementPosition>1717986916</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>CategoryType</DataField>
						<DataSource>ProjCategory</DataSource>
						<Items />
					</AxFormControl>
				</Controls>
				<DataSource>ProjCategory</DataSource>
				<MultiSelect>No</MultiSelect>
				<ShowRowLabels>No</ShowRowLabels>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>