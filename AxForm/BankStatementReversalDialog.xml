<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BankStatementReversalDialog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BankStatementReversalDialog extends FormRun
{
    private FormRun callerForm;
    private Map voucherReversalDateMap;
    private boolean isStatementVoucher;
    private BankStmtISOAccountStatement statement;
    private boolean isInit;
    private List selectedLineRecIdList;
    private List statementLineToReverseRecIdList;
    private Set statementHeaderToReverseRecIdSet;
    private Set allReverseLineToDisplayRecIdSet;
    private boolean isCrossStatementLineSelectedToReverse;
    private TransDate activeWorksheetCutOffDate;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        voucherReversalDateMap = new Map(Types::String, Types::Date);
        statementLineToReverseRecIdList = new List(Types::Int64);
        statementHeaderToReverseRecIdSet = new Set(Types::Int64);

        super();

        callerForm = element.args().caller();
        if (callerForm)
        {
            isInit = true;
            if (callerForm.name() == formStr(BankAutomationReconciliationWorksheet))
            {
                // When initializing the dialog by BankAutomationReconciliationWorksheet, need to traverse all cross-statement lines to ensure the compatibility
                // for the records of: posted by header, posted by line, and posted by line post table.
                isInit = true;
                isCrossStatementLineSelectedToReverse = true;
                this.initGridFieldsVisibility();
                selectedLineRecIdList = element.args().parmObject();

                this.traverseAllNeedToReverseStatementLines(selectedLineRecIdList);
                SetEnumerator enumerator = allReverseLineToDisplayRecIdSet.getEnumerator();
                boolean isCutOffDateSet = false;
                while (enumerator.moveNext())
                {
                    RecId selectedRecId = enumerator.current();
                    QueryBuildRange range = BankStmtISOReportEntry_ds.queryBuildDataSource().addRange(fieldNum(BankStmtISOReportEntry, RecId));
                    range.value(queryValue(selectedRecId));
                    if (!isCutOffDateSet)
                    {
                        BankStmtISOReportEntry statementLine = BankStmtISOReportEntry::find(selectedRecId);
                        if (statementLine)
                        {
                            BankStmtISOAccountStatement statementLoc = statementLine.getStatement();
                            if (statementLoc)
                            {
                                activeWorksheetCutOffDate =  BankReconciliationHeader::findActiveHeaderByAccountId(statementLoc.BankAccountTable).CutOffDate;
                                isCutOffDateSet = true;
                            }
                        }
                    }
                }
            }
            else
            {
                statement = element.args().record();
                statementHeaderToReverseRecIdSet.add(statement.RecId);
                isStatementVoucher = statement.Voucher != '';

                if (isStatementVoucher)
                {
                    // When initializing the dialog by BankStatementTable and the posted statement header has header level voucher.
                    // e.g. Dialog is called from BankStatementTable, reverse statement header.
                    this.initGridFieldsVisibility();
                    BankStmtISOReportEntry_ds.queryBuildDataSource().enabled(false);
                }
                else
                {
                    // When initializing the dialog by BankStatementTable and the posted statement line has isolated line level voucher.
                    // e.g. Dialog is called from BankStatementTable, reverse statement header.
                    this.initGridFieldsVisibility();
                    QueryBuildRange range = BankStmtISOReportEntry_ds.queryBuildDataSource().addRange(fieldNum(BankStmtISOReportEntry, IsNewBankDocument));
                    range.value(queryValue(NoYes::Yes));

                    // When initializing the dialog by BankStatementTable and the posted statement line has line post table posted voucher.
                    // e.g. Posted the lines by BankStatementLinePostTable, then disabled the feature and init the dialog from BankStatementTable.
                    BankStmtISOReportEntry statementLine = BankStmtISOReportEntry_ds.getFirst();
                    if (statementLine.BankStatementLinePostTable)
                    {
                        statementHeaderToReverseRecIdSet.remove(statement.RecId);
                        while (statementLine)
                        {
                            statementLineToReverseRecIdList.addEnd(statementLine.RecId);
                            statementLine = BankStmtISOReportEntry_ds.getNext();
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initGridFieldsVisibility</Name>
				<Source><![CDATA[
    private void initGridFieldsVisibility()
    {
        BankStatementLineAmount.visible(isCrossStatementLineSelectedToReverse);
        BankStatementIdentification.visible(isCrossStatementLineSelectedToReverse);

        BankStatementLineVoucher.visible(!isStatementVoucher);
        BankStatementLineVoucherAccountingDate.visible(!isStatementVoucher);
        BankStatementLineVoucherReversalDate.visible(!isStatementVoucher);

        BankStatementVoucher.visible(!isCrossStatementLineSelectedToReverse && isStatementVoucher);
        BankStatementVoucherAccountingDate.visible(!isCrossStatementLineSelectedToReverse && isStatementVoucher);
        BankStatementVoucherReversalDate.visible(!isCrossStatementLineSelectedToReverse && isStatementVoucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>traverseAllNeedToReverseStatementLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Traverses all need to reverse statement lines, records the statement posted by header, by line and posted lines by statement header.
    /// </summary>
    /// <param name = "_statementLineRecIdList">The statement lines selected to reverse.</param>
    private Set traverseAllNeedToReverseStatementLines(List _statementLineRecIdList)
    {
        allReverseLineToDisplayRecIdSet = new Set(Types::Int64);

        ListEnumerator enumerator = _statementLineRecIdList.getEnumerator();
        while (enumerator.moveNext())
        {
            RecId statementLineRecId = enumerator.current();
            if (!allReverseLineToDisplayRecIdSet.in(statementLineRecId))
            {
                allReverseLineToDisplayRecIdSet.add(statementLineRecId);
                BankStmtISOReportEntry statementLine = BankStmtISOReportEntry::find(statementLineRecId);
                SourceDocumentLine sourceDocumentLine = SourceDocumentLine::find(statementLine.SourceDocumentLine);
                if (sourceDocumentLine.RecId)
                {
                    SourceDocumentHeader sourceDocumentHeader = SourceDocumentHeader::find(sourceDocumentLine.SourceDocumentHeader);

                    // If the source document header is a statement header, then all posted lines of the statement header should be displayed
                    // and only the statement header should be reversed.
                    if (sourceDocumentHeader.RecId
                        && sourceDocumentHeader.TypeEnumName == enumStr(SourceDocument_BankStatement)
                        && sourceDocumentHeader.TypeEnumValue == SourceDocument_BankStatement::BankStatement)
                    {
                        BankStmtISOAccountStatement statementLoc = statementLine.getStatement();
                        statementHeaderToReverseRecIdSet.add(statementLoc.RecId);

                        BankStmtISOReportEntry statementLineSameStatementPosted;
                        SourceDocumentLine sourceDocumentLineSameStatementPosted;
                        while select statementLineSameStatementPosted
                            where statementLineSameStatementPosted.BankStmtISOAccountStatement == statementLoc.RecId
                                && statementLineSameStatementPosted.RecId != statementLine.RecId
                            join sourceDocumentLineSameStatementPosted
                            where statementLineSameStatementPosted.SourceDocumentLine == sourceDocumentLineSameStatementPosted.RecId
                                && sourceDocumentLineSameStatementPosted.SourceDocumentHeader == sourceDocumentLine.SourceDocumentHeader
                        {
                            if (statementLineSameStatementPosted.Voucher != '' || statementLoc.Voucher != '')
                            {
                                allReverseLineToDisplayRecIdSet.add(statementLineSameStatementPosted.RecId);
                            }
                        }
                    }
                    // If the source document header is a statement line post table, then the statement line post table should be displayed and reversed.
                    else if (sourceDocumentHeader.RecId
                        && sourceDocumentHeader.TypeEnumName == enumStr(SourceDocument_BankStatement)
                        && sourceDocumentHeader.TypeEnumValue == SourceDocument_BankStatement::BankStatementLinePost)
                    {
                        statementLineToReverseRecIdList.addEnd(statementLineRecId);
                    }
                }
            }
        }
        return allReverseLineToDisplayRecIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addReversalDate</Name>
				<Source><![CDATA[
    private void addReversalDate(Voucher _voucher, TransDate _reversalDate)
    {
        voucherReversalDateMap.insert(_voucher, _reversalDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReversalDate</Name>
				<Source><![CDATA[
    private TransDate getReversalDate(Voucher _voucher)
    {
        return voucherReversalDateMap.exists(_voucher) ? voucherReversalDateMap.lookup(_voucher) : dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReversalDateForSelectedRecords</Name>
				<Source><![CDATA[
    private void updateReversalDateForSelectedRecords(TransDate _reversalDate = dateNull())
    {
        if (isStatementVoucher)
        {
            element.addReversalDate(statement.Voucher, _reversalDate ? _reversalDate : statement.AccountingDate);
        }
        else
        {
            BankStmtISOReportEntry statementLine;
            if (isCrossStatementLineSelectedToReverse)
            {
                if (BankStmtISOReportEntry_ds.anyMarked())
                {
                    statementLine = BankStmtISOReportEntry_ds.getFirst(1, false);
                }
                else
                {
                    statementLine = BankStmtISOReportEntry_ds.cursor();
                }
            }
            else
            {
                statementLine = BankStmtISOReportEntry_ds.getFirst(1, false);
            }
            while (statementLine)
            {
                element.addReversalDate(statementLine.Voucher, _reversalDate ? _reversalDate : statementLine.AccountingDate);
                statementLine = BankStmtISOReportEntry_ds.getNext();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>BankStmtISOAccountStatement</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            if (statement)
            {
                QueryBuildRange range = this.queryBuildDataSource().addRange(fieldNum(BankStmtISOAccountStatement, RecId));
                range.value(queryValue(statement.RecId));
            }

            super();

            if (isInit)
            {
                TransDate today = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
                if (isStatementVoucher)
                {
                    element.addReversalDate(statement.Voucher, today);
                }
                else
                {
                    BankStmtISOReportEntry statementLine = BankStmtISOReportEntry_ds.getFirst();
                    while (statementLine)
                    {
                        if (isCrossStatementLineSelectedToReverse)
                        {
                            TransDate reversalDate = max(statementLine.AccountingDate, today);
                            // For not reconciled generate voucher, the reversal date should not later than the cut off date. Otherwise, the header information is incorrect.
                            if (statementLine.Reconciled == NoYes::No && activeWorksheetCutOffDate != dateNull())
                            {
                                reversalDate = min(reversalDate, activeWorksheetCutOffDate);
                            }
                            element.addReversalDate(statementLine.Voucher, reversalDate);
                        }
                        else
                        {
                            element.addReversalDate(statementLine.Voucher, today);
                        }
                        statementLine = BankStmtISOReportEntry_ds.getNext();
                    }
                }

                VoucherToReverseInfo.text(strFmt("@CashManagement:NumberOfVouchersToBeReversed", voucherReversalDateMap.elements()));

                isInit = false;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>editReversalDate</Name>
						<Source><![CDATA[
        public edit TransDate editReversalDate(boolean _set, BankStmtISOAccountStatement _statement, TransDate _reversalDate)
        {
            TransDate reversalDate = _reversalDate;
            if (_set)
            {
                element.addReversalDate(_statement.Voucher, reversalDate);
            }
            else
            {
                reversalDate = element.getReversalDate(_statement.Voucher);
            }

            BankStatementReversePost::checkReversalDate(reversalDate, _statement.AccountingDate);

            return reversalDate;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>BankStmtISOReportEntry</Name>
				<Methods>
					<Method>
						<Name>editReversalDate</Name>
						<Source><![CDATA[
        public edit TransDate editReversalDate(boolean _set, BankStmtISOReportEntry _line, TransDate _reversalDate)
        {
            TransDate reversalDate = _reversalDate;

            if (isCrossStatementLineSelectedToReverse)
            {
                if (_set)
                {
                    // Cross statement line selected to reverse, need to display the update of reversal date of all lines with the same statement header posted voucher.
                    SetEnumerator enumerator = allReverseLineToDisplayRecIdSet.getEnumerator();
                    while (enumerator.moveNext())
                    {
                        RecId selectedRecId = enumerator.current();
                        BankStmtISOReportEntry statementLine = BankStmtISOReportEntry::find(selectedRecId);
                        if (statementLine.BankStmtISOAccountStatement == _line.BankStmtISOAccountStatement && statementLine.Voucher == _line.Voucher)
                        {
                            BankStmtISOReportEntry_DS.editReversalDate(false, statementLine, reversalDate);
                        }
                    }
                    // Calls statement data source research method to force refresh all lines edit method
                    BankStmtISOAccountStatement_DS.research(true);
                }
                else
                {
                    if (reversalDate == dateNull())
                    {
                        reversalDate = element.getReversalDate(_line.Voucher);
                    }
                    BankStmtISOAccountStatement statementLoc = _line.getStatement();
                    if (reversalDate < _line.AccountingDate)
                    {
                        reversalDate = _line.AccountingDate;
                        element.addReversalDate(_line.Voucher, reversalDate);
                        warning("@CashManagement:CannotUseDateEarlierThanAccountingDate");
                    }
                    else if (statementLoc.Voucher && reversalDate < statementLoc.AccountingDate)
                    {
                        reversalDate = statementLoc.AccountingDate;
                        element.addReversalDate(statementLoc.Voucher, reversalDate);
                        warning("@CashManagement:CannotUseDateEarlierThanAccountingDate");
                    }
                    // For not reconciled generate voucher, the reversal date should not later than the cut off date. Otherwise, the header information is incorrect.
                    else if (_line.Reconciled == NoYes::No && activeWorksheetCutOffDate != dateNull() && reversalDate > activeWorksheetCutOffDate)
                    {
                        reversalDate = activeWorksheetCutOffDate;
                        element.addReversalDate(_line.Voucher, reversalDate);
                        warning("@Bank:CannotUseDateEarlierThanCutOffDate");
                    }
                    else
                    {
                        element.addReversalDate(_line.Voucher, reversalDate);
                    }
                }
            }
            else
            {
                if (_set)
                {
                    element.addReversalDate(_line.Voucher, reversalDate);
                }
                else
                {
                    reversalDate = element.getReversalDate(_line.Voucher);
                }

                BankStatementReversePost::checkReversalDate(reversalDate, _line.AccountingDate);
            }

            return reversalDate;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>UseToday</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.updateReversalDateForSelectedRecords(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UseOriginalPostingDate</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.updateReversalDateForSelectedRecords();

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Reason</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Query query = new Query();

            // Create an instance of SysTableLookup with the form control passed in
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tablenum(ReasonTable), this, true);

            // Add the fields to be shown in the lookup form
            sysTableLookup.addLookupfield(fieldnum(ReasonTable, Reason));
            sysTableLookup.addLookupfield(fieldnum(ReasonTable, Description));

            // Create the query datasource
            QueryBuildDataSource queryBuildDataSource = query.addDataSource(tablenum(ReasonTable));

            // Restrict the Reason code to those set up for Bank and Cust\Vend.
            QueryBuildRange queryBuildRangeBank = queryBuildDataSource.addRange(fieldnum(ReasonTable, Bank));
            queryBuildRangeBank.value(enum2str(NoYes::Yes));

            // Add the query to the lookup form
            sysTableLookup.parmQuery(query);

            // Perform lookup
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                ReasonComment.text(ReasonTable::find(Reason.text()).Description);
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret = super();

            if (ret && reason.valueStr())
            {
                ReasonCode reasonCode = Reason.valueStr();
                ReasonTable reasonTable = ReasonTable::find(reasonCode);
                if (!reasonTable)
                {
                    // The value '%1' in field '%2' is not found in relating table '%3'.
                    ret = checkFailed(strfmt("@SYS112224", reasonCode, fieldPName(ReasonTable, Reason), tablePName(ReasonTable)));
                }
                else if (reasonTable.Bank == NoYes::No)
                {
                    ret = checkFailed("@SYS115522");
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OkButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            if (!statementLineToReverseRecIdList.empty())
            {
                // Save matching id list before reversal as the matching id will be cleared after reversal.
                List matchingIdList = BankReconciliationMatching::getMatchingIdListByStatementLineList(statementLineToReverseRecIdList);
                // Statement line post table reversal
                BankStatementLineListReversePost::reverseLineListOnSpecifiedDate(statementLineToReverseRecIdList, voucherReversalDateMap, Reason.valueStr(), ReasonComment.valueStr());
                if (callerForm && callerForm.name() == formStr(BankAutomationReconciliationWorksheet))
                {
                    BankAutomationReconciliationWorksheetFormView worksheetFormView = callerForm.getFormView();
                    worksheetFormView.unmarkByMatchingIdList(matchingIdList);
                    worksheetFormView.performFormRefresh();
                }
            }
            if (!statementHeaderToReverseRecIdSet.empty())
            {
                // Statement header reversal
                SetEnumerator enumerator = statementHeaderToReverseRecIdSet.getEnumerator();
                while (enumerator.moveNext())
                {
                    RecId statementHeaderRecId = enumerator.current();
                    BankStmtISOAccountStatement statementToReverse = BankStmtISOAccountStatement::find(statementHeaderRecId);
                    BankStatementReversePost::reverseBankStatementOnSpecifiedDate(statementToReverse, voucherReversalDateMap, Reason.valueStr(), ReasonComment.valueStr());
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>BankStmtISOAccountStatement</Name>
			<Table>BankStmtISOAccountStatement</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountIdOtherId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountingDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountingDistributionTemplate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AdditionalStatementInfo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AsOfDateModifier</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankAccountTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankStatementType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankStmtISODocument</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FromDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GroupControlTotal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GroupStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IBAN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Identification</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Manual</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginatorId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Posted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegistrationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SequenceNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentHeader</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Status</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SwiftNo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ToDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalAccountsInGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalEntriesNumberOfEntries</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalRecordsInGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UltimateReceiverId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidatedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>BankStmtISOReportEntry</Name>
			<Table>BankStmtISOReportEntry</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountServicerReference</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AdditionalEntryInformation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Amount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCreditDebitIndicator</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankDocumentNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankStatementCounterCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankStatementCounterCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankStatementCounterExchangeRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankStatementInstructedCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankStatementInstructedCurrencyAmt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankStatementInstructedExchangeRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankStatementLineStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankStmtISOAccountStatement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BookingDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChargeRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditorReferenceInformation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EntryReference</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterestRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsNewBankDocument</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginSourceDocumentLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentBankStmtISOReportEntry</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProprietaryBankTransactionCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Reconciled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RelatedBankAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RelatedBankName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReversalIndicator</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TradingParty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>BankStmtISOAccountStatement</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<AllowUserSetup xmlns="">No</AllowUserSetup>
		<Caption xmlns="">@CashManagement:VouchersToBeReversed</Caption>
		<DialogSize xmlns="">Large</DialogSize>
		<Pattern xmlns="">DialogFastTabs</Pattern>
		<PatternVersion xmlns="">1.0</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>VoucherToReverseInfo</Name>
				<AllowEdit>No</AllowEdit>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<Type>StaticText</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>ReversalDateTab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ReversalTabPage</Name>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>SetReversalDateActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>SetReversalDateButtons</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>UseToday</Name>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<AutoRefreshData>Yes</AutoRefreshData>
												<MultiSelect>Yes</MultiSelect>
												<Text>@CashManagement:UseTodayAsReversalDate</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>UseOriginalPostingDate</Name>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<AutoRefreshData>Yes</AutoRefreshData>
												<MultiSelect>Yes</MultiSelect>
												<Text>@CashManagement:UseOriginalPostingDateAsReversalDate</Text>
											</AxFormControl>
										</Controls>
										<Columns>2</Columns>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>VoucherGrid</Name>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BankStatementVoucher</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Voucher</DataField>
										<DataSource>BankStmtISOAccountStatement</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BankStatementLineVoucher</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>dispLineVoucherOrStatementVoucher</DataMethod>
										<DataSource>BankStmtISOReportEntry</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>BankStatementLineAmount</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Real</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editAmount</DataMethod>
										<DataSource>BankStmtISOReportEntry</DataSource>
										<Label>@SYS53072</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>BankStatementVoucherReversalDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Date</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editReversalDate</DataMethod>
										<DataSource>BankStmtISOAccountStatement</DataSource>
										<Label>@GeneralLedger:TransactionReversalStatusDate</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>BankStatementLineVoucherReversalDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Date</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editReversalDate</DataMethod>
										<DataSource>BankStmtISOReportEntry</DataSource>
										<Label>@GeneralLedger:TransactionReversalStatusDate</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>BankStatementVoucherAccountingDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Date</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AccountingDate</DataField>
										<DataSource>BankStmtISOAccountStatement</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>BankStatementLineVoucherAccountingDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Date</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>dispLineAccountingDateOrStatementAccountingDate</DataMethod>
										<DataSource>BankStmtISOReportEntry</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BankStatementIdentification</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<Visible>No</Visible>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Identification</DataField>
										<DataSource>BankStmtISOAccountStatement</DataSource>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>@CashManagement:VoucherList</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ReversalReasonTabPage</Name>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Reason</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>ReasonCode</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ReasonComment</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>ReasonComment</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<HideIfEmpty>No</HideIfEmpty>
						<Caption>@CashManagement:ReverseReason</Caption>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OkButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<Text>@CashManagement:Reverse</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>