<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BudgetControlRuleUserGroupOption</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BudgetControlRuleUserGroupOption extends FormRun implements OfficeIGeneratedWorkbookCustomExporter
{
    boolean allowEdit;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        if (element.args().dataset() != tableNum(BudgetControlRule))
        {
            throw error(strfmt("@SYS19096", this.name(), tablestr(BudgetControlRule)));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAllowEdit</Name>
				<Source><![CDATA[
    public void resetAllowEdit()
    {
        if (allowEdit &&
            !BudgetControlConfigurationManager::isConfigurationEditPermitted(budgetControlRule.BudgetControlConfiguration))
        {
            // The allow edit state has changed since it was last checked.
            // Update the state of the current data source record,
            // otherwise the calling data source validate method will be executed again.
            if (budgetControlRuleUserGroupOption.RecId)
            {
                // Read the current state of the record attempted to be updated.
                budgetControlRuleUserGroupOption_ds.reread();
            }
            else
            {
                // Remove the uncommitted record.
                budgetControlRuleUserGroupOption_ds.delete();
            }

            this.setAllowEdit();
            budgetControlRuleUserGroupOption_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowEdit</Name>
				<Source><![CDATA[
    public void setAllowEdit()
    {
        allowEdit = BudgetControlConfigurationManager::isConfigurationEditPermitted(budgetControlRule.BudgetControlConfiguration);

        budgetControlRuleUserGroupOption_ds.allowEdit(allowEdit);
        budgetControlRuleUserGroupOption_ds.allowCreate(allowEdit);
        budgetControlRuleUserGroupOption_ds.allowDelete(allowEdit);
        budgetControlRuleUserGroupOption_ds.insertIfEmpty(allowEdit);

        copyButton.enabled(allowEdit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowEditOverrideOverbudgetOption</Name>
				<Source><![CDATA[
    public void setAllowEditOverrideOverbudgetOption()
    {
        if (budgetControlRuleUserGroupOption.OverrideOverbudgetOption == BudgetCheckOverbudgetOption::AllowProcessing)
        {
            // The budget group check option is not editable.
            ruleSettingsOptionGroup_OverbudgetBudgetGroupCheckOption.allowEdit(false);
        }
        else
        {
            // The budget group check option is editable.
            ruleSettingsOptionGroup_OverbudgetBudgetGroupCheckOption.allowEdit(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataEntityContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ExportToExcelDataEntityContext</c> that specifies what should be exported for the specifed menu item.
    /// </summary>
    /// <param name="_menuItem">The menu item.</param>
    /// <returns>
    /// Returns the <c>ExportToExcelDataEntityContext</c> that specifies what should be exported for the specifed menu item;
    /// otherwise, null.
    /// </returns>
    public ExportToExcelDataEntityContext getDataEntityContext(OfficeGeneratedExportMenuItem _menuItem)
    {
        ExportToExcelDataEntityContext context = ExportToExcelDataEntityContext::construct();

        ExportToExcelDataEntityInfo entity = new ExportToExcelDataEntityInfo();
        entity.entityName(tablestr(BudgetControlRuleOverBudgetPermissionsEntity));

        LegalEntityDataAreaId legalEntityId = curExt();

        BudgetControlConfiguration configuration = BudgetControlConfiguration::find(budgetControlRule.BudgetControlConfiguration);
        BudgetControlConfigurationStatus status;

        if (configuration.IsActive)
        {
            status = BudgetControlConfigurationStatus::Active;
        }
        else
        {
            status = BudgetControlConfigurationStatus::Draft;
        }

        ExportToExcelFilterTreeBuilder filterBuilder = new ExportToExcelFilterTreeBuilder(entity.entityName());

        var filter = filterBuilder.and(
            filterBuilder.areEqual(fieldStr(BudgetControlRuleOverBudgetPermissionsEntity, legalEntityId), legalEntityId),
            filterBuilder.areEqual(fieldStr(BudgetControlRuleOverBudgetPermissionsEntity, status), status));

        entity.filter(filter);

        context.entities().addEnd(entity);

        ExportToExcelDataEntityBindingInfo binding = new ExportToExcelDataEntityBindingInfo();
        binding.entityName(entity.entityName());

        binding.useFieldGroup(false);
        BudgetControlConfigurationEntityHelper::addGroupFieldsToFieldList(
            tableStr(BudgetControlRuleOverBudgetPermissionsEntity),
            tableFieldGroupStr(BudgetControlRuleOverBudgetPermissionsEntity, AutoReport),
            binding.fieldList());

        binding.fieldList().addEnd(fieldStr(BudgetControlRuleOverBudgetPermissionsEntity, DataAreaId));

        context.bindings().addEnd(binding);

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customizeMenuOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Customizes the options used to populate the Office Menu.
    /// </summary>
    /// <param name = "_menuOptions">The menu options to be customized.</param>
    public void customizeMenuOptions(OfficeMenuOptions _menuOptions)
    {
        ListIterator dataEntityOptionsIterator = new ListIterator(_menuOptions.dataEntityOptions());

        // Remove auto-added data entities from the menu.
        while (dataEntityOptionsIterator.more())
        {
            dataEntityOptionsIterator.delete();
        }

        // Add a custom export option for BudgetControlRuleOverBudgetPermissionsEntity so a custom filter can be added later.
        OfficeGeneratedExportMenuItem menuItem = OfficeGeneratedExportMenuItem::construct(tableStr(BudgetControlRuleOverBudgetPermissionsEntity), tableStr(BudgetControlRuleOverBudgetPermissionsEntity));
        menuItem.displayName("@Budget:ControlRuleOverBudgetPermissionsEntityOfficeExportDisplayValue");
        _menuOptions.customMenuItems().addEnd(menuItem);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>BudgetControlRuleUserGroupOption</Name>
				<Methods>
					<Method>
						<Name>leaveRecord</Name>
						<Source><![CDATA[
        public boolean leaveRecord(boolean _forceUpdate = false)
        {
            boolean ret;

            // Do not allow edit of the budget group check option by default.
            // This is done to ensure the control is displayed correctly if the next record selected
            // does not allow for the edit of the budget group check option.
            ruleSettingsOptionGroup_OverbudgetBudgetGroupCheckOption.allowEdit(false);

            ret = super(_forceUpdate);

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateDelete</Name>
						<Source><![CDATA[
        public boolean validateDelete()
        {
            boolean isValid;

            isValid = super();

            if (!isValid)
            {
                // The validation may have failed due to the user no longer having the edit lock.
                element.resetAllowEdit();
            }

            return isValid;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean isValid;

            isValid = super();

            if (!isValid)
            {
                // The validation may have failed due to the user no longer having the edit lock.
                element.resetAllowEdit();
            }

            return isValid;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>OverrideOverbudgetOption</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if (budgetControlRuleUserGroupOption.OverrideOverbudgetOption == BudgetCheckOverbudgetOption::AllowProcessing)
                {
                    // Set the budget group check option to the default value.
                    budgetControlRuleUserGroupOption.OverbudgetBudgetGroupCheckOption = BudgetGroupCheckOverbudgetOption::PerformBudgetGroupCheck;
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>BudgetControlRule</Name>
				<Methods>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        public void linkActive()
        {
            super();

            // Set the allowEdit state of the controls.
            element.setAllowEdit();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            // Link to the caller's budget control rule.
            this.query().dataSourceTable(tablenum(BudgetControlRule)).clearDynalinks();

            this.query().dataSourceTable(tablenum(BudgetControlRule)).addDynalink(
                fieldnum(BudgetControlRule, RecId),
                element.args().record(),
                fieldnum(BudgetControlRule, RecId));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>CopyButton</Name>
				<Type>DropDialogButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (BudgetControlConfigurationManager::validateConfigurationEditPermitted(budgetControlRule.BudgetControlConfiguration))
            {
                super();
            }
            else
            {
                element.resetAllowEdit();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>dialogClosed</Name>
						<Source><![CDATA[
        public void dialogClosed(xFormRun _formRun)
        {
            super(_formRun);

            if (_formRun.closedOk())
            {
                budgetControlRuleUserGroupOption_ds.research();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Rule_UserGroupId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            BudgetOverrideUserGroupOption::jumpRefUserGroupInfo(budgetControlRuleUserGroupOption.BudgetOverrideUserGroupOption, this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RuleSettingsOptionGroup_OverbudgetBudgetGroupCheckOption</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>enter</Name>
						<Source><![CDATA[
        public void enter()
        {
            // Set whether the budget group check option is editable upon entering the control
            // to ensure the control is displayed correct if the current record selected
            // allows for the edit of the budget group check option.
            element.setAllowEditOverrideOverbudgetOption();

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>BudgetControlRuleUserGroupOption</Name>
			<Table>BudgetControlRuleUserGroupOption</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BudgetControlRule</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetOverrideUserGroupOption</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OverbudgetBudgetGroupCheckOption</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OverrideOverbudgetOption</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>BudgetControlRule</JoinSource>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>BudgetControlRule</Name>
			<Table>BudgetControlRule</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BudgetControlConfiguration</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetCycleTimeSpan</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Interval</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OverrideResponsibleUser</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TemporaryBudgetControlRule</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ThresholdPercent</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS320381</Caption>
		<DataSource xmlns="">BudgetControlRuleUserGroupOption</DataSource>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<Scrollbars xmlns="">No</Scrollbars>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">SimpleList</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>536870911</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>CopyButtonGroup</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormDropDialogButtonControl">
								<Name>CopyButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>DropDialogButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataSource>BudgetControlRule</DataSource>
								<MenuItemName>BudgetControlCopyUserGroupOption</MenuItemName>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CustomFilterGroup</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>RuleSettingsGrid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>RuleSettingsGrid</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>RuleSettingsUserGroup</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Rule_UserGroupId</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>50</Width>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>editUserGroupId</DataMethod>
								<DataSource>BudgetControlRuleUserGroupOption</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Rule_UserGroupName</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displayUserGroupName</DataMethod>
								<DataSource>BudgetControlRuleUserGroupOption</DataSource>
							</AxFormControl>
						</Controls>
						<BackgroundColor>WindowBackground</BackgroundColor>
						<DataGroup>UserGroup</DataGroup>
						<DataSource>BudgetControlRuleUserGroupOption</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>RuleSettingsOptionGroup</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>RuleSettingsOptionGroup_OverrideOverbudgetOption</Name>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>OverrideOverbudgetOption</DataField>
								<DataSource>BudgetControlRuleUserGroupOption</DataSource>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>RuleSettingsOptionGroup_OverbudgetBudgetGroupCheckOption</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>OverbudgetBudgetGroupCheckOption</DataField>
								<DataSource>BudgetControlRuleUserGroupOption</DataSource>
								<Items />
							</AxFormControl>
						</Controls>
						<BackgroundColor>WindowBackground</BackgroundColor>
						<DataGroup>OverbudgetOption</DataGroup>
						<DataSource>BudgetControlRuleUserGroupOption</DataSource>
					</AxFormControl>
				</Controls>
				<AlternateRowShading>No</AlternateRowShading>
				<DataSource>BudgetControlRuleUserGroupOption</DataSource>
				<MultiSelect>No</MultiSelect>
				<ShowRowLabels>No</ShowRowLabels>
				<Style>Tabular</Style>
				<VisibleRows>15</VisibleRows>
				<VisibleRowsMode>Fixed</VisibleRowsMode>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>