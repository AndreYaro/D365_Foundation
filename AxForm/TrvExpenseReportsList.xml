<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>TrvExpenseReportsList</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class TrvExpenseReportsList extends FormRun implements TrvIWorkflowEnabledForm, TrvIFormRefreshWorker, TrvIUpdateEnabled, TrvIAsyncEnabled
{
    NumberSeqFormHandler                numberSeqFormHandler;
    TrvWorkerParameter                  trvWorkerParameter;
    TrvExpenseReportPageFilters         trvExpenseReportsCurrFilter;
    str                                 formCaption;
    FormDataSource                      activeExpenseReportDS;
    FormControl                         workflowButton;
    boolean                             isSelfServiceView = true;
    boolean cancelFormInitialization = false;
    boolean asyncEnabled = true;

    const str personalizedViewKey = 'TrvExpenseReportsListLastView';

}
]]></Source>
			</Method>
			<Method>
				<Name>parmAsyncEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if async actions are allowed for submit; otherwise, false.
    /// </summary>
    /// <param name = "_asyncEnabled">Set true if async actions are allowed during submit; otherwise, false.</param>
    public boolean parmAsyncEnabled(boolean _asyncEnabled = asyncEnabled)
    {
        asyncEnabled = _asyncEnabled;
        return asyncEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAsyncAction</Name>
				<Source><![CDATA[
    void doAsyncAction(RefRecId recId)
    {
        // The form doesn't have any async logic to perform.
    }

]]></Source>
			</Method>
			<Method>
				<Name>asyncActionCallback</Name>
				<Source><![CDATA[
    void asyncActionCallback(AsyncTaskResult taskResult)
    {
        // The form doesn't have any async logic to perform.
    }

]]></Source>
			</Method>
			<Method>
				<Name>waitForAllAsyncTasks</Name>
				<Source><![CDATA[
    void waitForAllAsyncTasks()
    {
        // The form doesn't have any async logic to perform.
    }

]]></Source>
			</Method>
			<Method>
				<Name>docCursor</Name>
				<Source><![CDATA[
    public Common docCursor()
    {
        // Document handling should show header receipts
        return TrvExpTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and returns an instance of the number sequence form handler.
    /// </summary>
    /// <returns>
    /// An instance of the number sequence handler for the form.
    /// </returns>
    public NumberSeqFormHandler numberSeqFormHandler()
    {
        if (!numberSeqFormHandler)
        {
            numberSeqFormHandler = NumberSeqFormHandler::newForm(TrvParameters::numRefExpNumber().NumberSequenceId,
                                                             element,
                                                             TrvExpTableView_DS,
                                                             fieldNum(trvExpTableView, ExpNumber));
        }
        return numberSeqFormHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSelfServiceView</Name>
				<Source><![CDATA[
    private void initializeSelfServiceView()
    {
        TrvVisibilityManager trvVisibilityManager = TrvVisibilityManagerFactory::construct(TrvExpTableView, this, TrvExpTableView_DS.name());
        trvVisibilityManager.setFieldVisibilities();

        this.setSelfServiceView(element.configurationHelper().getConfigurationValue(personalizedViewKey));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSelfServiceView</Name>
				<Source><![CDATA[
    private void setSelfServiceView(str _button)
    {
        RecId selectedExpenseReport = TrvExpTableView.RecId;

        // Set personalization setting
        element.configurationHelper().saveConfigurationValue(personalizedViewKey, _button);

        switch (_button)
        {
            case formControlStr(TrvExpenseReportsList, GroupByStatus):

                // Update sort
                ExpenseReportList.groupBy(identifierStr(TrvExpTableView_ApprovalStatus));
                activeExpenseReportDS.queryBuildDataSource().sortClear();
                activeExpenseReportDS.query().dataSourceTable(tablenum(TrvExpTableView)).addSortField(fieldNum(TrvExpTableView, ReorderedApprovalStatus), SortOrder::Ascending);
                activeExpenseReportDS.query().dataSourceTable(tablenum(TrvExpTableView)).addSortField(fieldNum(TrvExpTableView, CreatedDateTime1), SortOrder::Descending);
                activeExpenseReportDS.executeQuery();

                // Toggle controls
                ExpenseReportList.visible(true);
                ExpenseReportGrid.visible(false);
                ExpenseReportList.setFocus();

                break;

            case formControlStr(TrvExpenseReportsList, GridViewButton):
            default:

                // Update sort
                ExpenseReportList.groupBy("");
                activeExpenseReportDS.queryBuildDataSource().sortClear();
                activeExpenseReportDS.query().dataSourceTable(tablenum(TrvExpTableView)).addSortField(fieldNum(TrvExpTableView, ExpNumber), SortOrder::Descending);
                activeExpenseReportDS.executeQuery();

                // Toggle controls
                ExpenseReportList.visible(false);
                ExpenseReportGrid.visible(true);
                ExpenseReportGrid.setFocus();

                break;
        }

        // Move cursor to the expense report which was selected before the sort.
        TrvExpTableView_DS.positionToRecordByValue(fieldNum(TrvExpTableView, RecId), int642Str(selectedExpenseReport));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTrvWorkerParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>TrvWorkerParameter</c> parameter.
    /// </summary>
    /// <param name="_trvWorkerParameter">
    /// The value to set.
    /// </param>
    /// <returns>
    /// The value of the <c>TrvWorkerParameter</c> parameter.
    /// </returns>
    public TrvWorkerParameter parmTrvWorkerParameter(TrvWorkerParameter _trvWorkerParameter = trvWorkerParameter)
    {
        trvWorkerParameter = _trvWorkerParameter;
        return trvWorkerParameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowActionDone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Workflow event handler. Updates the UI to reflect the status after workflow action is taken.
    /// </summary>
    void workflowActionDone(TrvWorkflowAction actionType)
    {
        if (element.configurationHelper().getConfigurationValue(personalizedViewKey) == formControlStr(TrvExpenseReportsList, GridViewButton) 
            || !isSelfServiceView)
        {
            // If there is no grouping (i.e. form is in a grid view), reread is enough.
            activeExpenseReportDS.reread();

            if (actionType == TrvWorkflowAction::Approve)
                activeExpenseReportDS.research();
        }
        else
        {
            // If there is grouping, the workflow action might have caused the report to switch
            // to a new group. Reread is not enough as it doesn't trigger a relayout.
            activeExpenseReportDS.research();
        }


        // If TrvExpTable_DS wasn't updated, do it now to guarantee that both datasources
        // remain in sync after workflow processing.
        if (activeExpenseReportDS != TrvExpTable_DS)
        {
            TrvExpTable_DS.reread();
        }

        this.updateWorkflowControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowActionFailed</Name>
				<Source><![CDATA[
    void workflowActionFailed(TrvWorkflowAction actionType)
    {
        // No op. We can consider opening the report so that user can take action on the failure.
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the worker parameter object to current worker and current legal entity,
    /// Set the page filter for the list page and change the caption based one the menu item.
    /// </summary>
    public void init()
    {
        if (!element.args())
        {
            throw error("@SYS22996");
        }

        TrvHcmWorkerRecId currentWorkerRecId = HcmWorkerLookup::currentWorker();

        if (!currentWorkerRecId)
        {
            // The user is not a worker; prevent the form from initializing and running.
            cancelFormInitialization = true;
        }
        else
        {
            // Set the worker parameter object to current worker and current legal entity.
            this.parmTrvWorkerParameter(TrvWorkerParameter::newStandard(currentWorkerRecId, CompanyInfo::current()));

            if (element.args().parmEnumType() == enumnum(TrvExpenseReportPageFilters))
            {
                // Set the page filter for the list page
                trvExpenseReportsCurrFilter = element.args().parmEnum();
                isSelfServiceView = trvExpenseReportsCurrFilter == TrvExpenseReportPageFilters::AllMyExpenseReports;
            }

            if (element.args().menuItemName() == menuItemDisplayStr(TrvBIAdminDashboardExpenseReportsList))
            {
                isSelfServiceView = false;
            }

            if (!isSelfServiceView)
            {
                // If the form is used to display "my expense reports" as cards, do not fetch any data from HcmWorker, DirPerson and DirPersonName tables.
                // This is needed only to display first name and last names in the ap clerk view.
                // At this point, HcmWorker_DS is not initialized, so we need to fetch it dynamically as datasource(name).
                this.form().dataSource(tableStr(HcmWorker)).linkType(FormLinkType::InnerJoin);
            }
        }

        super();

        if (cancelFormInitialization)
        {
            // The form must close because the user is not a worker.
            this.lifecycleHelper().cancelFormInitialization(Exception::Error, TrvListPageHelper::getCurrentUserNotWorkerErrorMessage(TrvExpTable_DS.table()));
        }
        else
        {
            if (isSelfServiceView)
            {
                // For cards view, the DS used is TrvExpTableViewDS.
                activeExpenseReportDS = TrvExpTableView_DS;

                this.initializeSelfServiceView();
            }
            else
            {
                activeExpenseReportDS = TrvExpTable_DS;
            }

            MenuFunction menuItem = new MenuFunction(element.args().menuItemName(), MenuItemType::Display);

            if (menuItem != null)
            {
                formCaption = menuItem.label();
                element.design().caption(formCaption);
            }
            else
            {
                formCaption = element.design().caption();
            }

            // Get reference to the dynamically added workflow button.
            workflowButton = element.control(element.controlId(identifierStr(WorkflowActionBarButtonGroup)));

            element.initSystemAttachmentButton();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSystemAttachmentButton</Name>
				<Source><![CDATA[
    private void initSystemAttachmentButton()
    {
        #SysSystemDefinedButtons

        FormCommandButtonControl attachmentButton = this.control(this.controlId(#SystemDefinedAttachButton)) as FormCommandButtonControl;

        if (attachmentButton)
        {
            attachmentButton.registerOverrideMethod(methodStr(FormButtonControl, clicked), formmethodstr(TrvExpenseReportsList, attachButtonClicked), this);
            attachmentButton.multiSelect(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>navigateToTrvExpenses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Will navigate to expense details form for the current expense report record.
    /// </summary>
    private void navigateToTrvExpenses()
    {
        Args    args = new Args();
        args.caller(element);
        args.record(trvExpTable);
        args.parmObject(element.parmTrvWorkerParameter());
        if (element.args() && element.args().parmEnumType() == enumnum(TrvExpenseReportPageFilters))
        {
            args.parmEnumType(enumnum(TrvExpenseReportPageFilters));
            args.parmEnum(trvExpenseReportsCurrFilter);
        }
        new MenuFunction(menuitemdisplaystr(TrvExpenses), MenuItemType::Display).run(Args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableAppBarExpenseActionsForWorker</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enable or disable expense actions in the AppBar for the worker.
    /// </summary>
    /// <param name = "_allow">
    ///     A boolean parameter to indicate if the desired action is to allow or disallow.
    /// </param>
    private void enableAppBarExpenseActionsForWorker(boolean _enable)
    {
        boolean userHasAccess = false;
        boolean userIsDelegate = false;

        if (_enable)
        {
            // Check if worker has employment in current company or has delegate access.
            userHasAccess = TrvAccessHelper::canCreateNewTransactions(this.parmTrvWorkerParameter().parmHcmWorkerRecId());
            // Check if worker has any delegates
            userIsDelegate = TrvAccessHelper::userHasCurrentDelegateAccessFor(this.parmTrvWorkerParameter().parmHcmWorkerRecId());
        }

        boolean createExpenseReportAllowed = _enable && userHasAccess;
        boolean deleteExpenseReportAllowed = _enable && (userHasAccess || userIsDelegate);

        // If expense reports can't be created, disallow new action through button as well as keyboard shortcuts.
        activeExpenseReportDS.allowCreate(createExpenseReportAllowed);
        activeExpenseReportDS.allowDelete(deleteExpenseReportAllowed);
        ExpenseCreateDelete.visible(deleteExpenseReportAllowed);
        CreateCommandButton.enabled(createExpenseReportAllowed);
        DeleteCommandButton.enabled(deleteExpenseReportAllowed);
        TrvExpenseReportDuplicateDialog.visible(createExpenseReportAllowed);

        boolean enableViewMode = _enable && (trvExpenseReportsCurrFilter != TrvExpenseReportPageFilters::DelegatedToMe);
        ViewModesGroup.visible(enableViewMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlsVisibilityAsPerPageFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Update the app bar controls and tab controls visibility according to the current page filter on the List page.
    /// </summary>
    private void setControlsVisibilityAsPerPageFilter()
    {
        if (element.args().parmEnumType() == enumnum(TrvBIAdminExpenseGraphs))
        {
            this.enableAppBarExpenseActionsForWorker(false);
            ApClerkTabControlView.visible(true);
            ExpenseReportsTabControl.visible(false);
            PostSelectedExpReports.visible(true);
            TrvExpense.visible(true);
            TrvExpenseReportEmail.visible(true);
        }
        else
        {
            switch (trvExpenseReportsCurrFilter)
            {
                case TrvExpenseReportPageFilters::AllMyExpenseReports:
                    // Show the Expense reports for worker only if the current user is a delegate
                    ExpenseReportFor.visible(TrvAppEmplSub::existForCurrentUser());
                    // Allow employee app bar actions if worker has permission.
                    this.enableAppBarExpenseActionsForWorker(true);
                    TrvExpenseEmployee.visible(true);
                    TrvExpReportsBarcodeCoverPage.visible(true);
                    TrvEmployeeBarcodeCoverPage.visible(true);
                    TrvExpenseEmployeeReportEmail.visible(true);
                    break;
                case TrvExpenseReportPageFilters::DelegatedToMe:
                    ExpenseReportFor.visible(TrvAppEmplSub::existForCurrentUser());
                    CurrUserExpenseReport.visible(true);
                case TrvExpenseReportPageFilters::AssignedToMe:
                case TrvExpenseReportPageFilters::AssignedToMyQueues:
                    // Disallow employee app bar actions if not called from delegate context.
                    this.enableAppBarExpenseActionsForWorker(trvExpenseReportsCurrFilter == TrvExpenseReportPageFilters::DelegatedToMe);
                    // Show columns 'Queue name' and 'Queue assigned date' in 'Expense reports assigned to my queues'
                    // and 'Expense reports assigned to me' list pages.
                    ExpenseReportsTabControl.visible(false);
                    ApClerkTabControlView.visible(true);
                    queueName.visible(true);
                    queueAssignedDate.visible(true);
                    TrvExpense.visible(true);
                    TrvExpenseReportEmail.visible(true);
                    break;

                case TrvExpenseReportPageFilters::Approved:
                case TrvExpenseReportPageFilters::InReview:
                case TrvExpenseReportPageFilters::Active:
                    // Disallow employee app bar actions.
                    this.enableAppBarExpenseActionsForWorker(false);
                    ApClerkTabControlView.visible(true);
                    ExpenseReportsTabControl.visible(false);
                    PostSelectedExpReports.visible(true);
                    TrvExpense.visible(true);
                    TrvExpenseReportEmail.visible(true);
                    break;

                default :
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableActionsBasedOnSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable or disable post and delete buttons according with the status of the selected expense reports.
    /// If at least one expense report is not approved or ready the post button will be disabled.
    /// If at least one expense report is not in create or none status the delete button will be disabled.
    /// </summary>
    private void enableActionsBasedOnSelection()
    {
        boolean enablePost = PostSelectedExpReports.isVisible();
        boolean enableDeleteExpenseReport = DeleteCommandButton.isVisible();
        TrvExpTable selectedExpenseReport;
        TrvExpTableView selectedExpenseReportView;

        // Iterate over TrvExpTableViewDS or TrvExpTableDS whichever is the active one.
        if (isSelfServiceView)
        {
            selectedExpenseReportView = activeExpenseReportDS.getFirst(true);

            if (selectedExpenseReportView == null)
            {
                selectedExpenseReportView = activeExpenseReportDS.cursor();
            }

            // Disable the View history button on the Action pane for draft expense reports, otherwise enable.
            if (selectedExpenseReportView)
            {
                TrvExpWorkflowHistory.enabled(selectedExpenseReportView.ApprovalStatus != TrvAppStatus::Create);
            }
        }
        else
        {
            selectedExpenseReport = activeExpenseReportDS.getFirst(true);

            if (selectedExpenseReport == null)
            {
                selectedExpenseReport = activeExpenseReportDS.cursor();
            }
        }

        // There is no need to iterate through all expense reports if there are selected records that will make
        // post and delete buttons to be disabled.
        while ((selectedExpenseReport || selectedExpenseReportView) && (enablePost || enableDeleteExpenseReport))
        {
            TrvAppStatus appStatus = selectedExpenseReport ? selectedExpenseReport.ApprovalStatus : selectedExpenseReportView.ApprovalStatus;

            if (appStatus != TrvAppStatus::Approved &&
                appStatus != TrvAppStatus::Ready)
            {
                enablePost = false;
            }

            if (appStatus != TrvAppStatus::Create &&
                appStatus != TrvAppStatus::None)
            {
                enableDeleteExpenseReport = false;
            }

            if (selectedExpenseReport)
            {
                selectedExpenseReport = activeExpenseReportDS.getNext();
            }
            else
            {
                selectedExpenseReportView = activeExpenseReportDS.getNext();
            }
        }

        PostSelectedExpReports.enabled(enablePost);

        // Disallow deleting from this form.
        DeleteCommandButton.enabled(enableDeleteExpenseReport);
        activeExpenseReportDS.allowDelete(enableDeleteExpenseReport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFormCaption</Name>
				<Source><![CDATA[
    private void refreshFormCaption()
    {
        TrvFormHelper::refreshFormCaption(element, element.parmTrvWorkerParameter(), formCaption, "@Expense:ExpensesFor");
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExpenseWorkerContext</Name>
				<Source><![CDATA[
    /// <summary>
    ///    When an user acts as a delegate, update the worker context to work on expense reports belonging
    ///    to the delegating user.
    /// </summary>
    /// <param name = "_workerParameter">
    ///     An instance of a <c>TrvWorkerParameter</c>
    /// </param>
    public void updateExpenseWorkerContext(TrvWorkerParameter _workerParameter)
    {
        if (_workerParameter != null)
        {
            // Update the current company if it has changed as per worker
            TrvFormHelper::setCompanyContext(CompanyInfo::findRecId(_workerParameter.parmLegalEntity()).DataArea);

            if ( _workerParameter.parmHcmWorkerRecId())
            {
                // Keep the worker parameter object upto date
                this.parmTrvWorkerParameter(_workerParameter);

                // Add ranges to the TrvExpTableView for the worker and related legal entity.
                TrvExpTableView_DS.initQuery(_workerParameter.parmLegalEntity(), _workerParameter.parmHcmWorkerRecId());
                TrvExpTableView_DS.executeQuery();

                // Refresh the TrvExpTable_DS query with the new worker and legal entity values.
                TrvExpTable_DS.initQuery(_workerParameter.parmLegalEntity(), _workerParameter.parmHcmWorkerRecId());
                TrvExpTable_DS.executeQuery();
            }
        }

        this.refreshFormCaption();
        this.enableAppBarExpenseActionsForWorker(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the AppBar controls.
    /// </summary>
    public void run()
    {
        super();

        if (!cancelFormInitialization)
        {
            // Form is not being cancelled; set the control visibility.
            this.setControlsVisibilityAsPerPageFilter();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the form and possibly bubble up the call.
    /// </summary>
    public void updateForm()
    {
        activeExpenseReportDS.research(true);
        element.updateWorkflowControls();

        this.updateCallerForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCallerForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the caller form, if any.
    /// </summary>
    private void updateCallerForm()
    {
        if (element.args())
        {
            TrvIUpdateEnabled updateEnabledCaller = element.args().caller() as TrvIUpdateEnabled;
            if (updateEnabledCaller)
            {
                updateEnabledCaller.updateForm();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSelectedReports</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete selected expense reports.
    /// </summary>
    private void deleteSelectedReports()
    {
        if (Box::confirm('@Expense:DeleteConfirmation'))
        {
            MultiSelectionHelper    selectionHelper;
            TrvExpTableView         selectedRecord;

            element.numberSeqFormHandler().formMethodDataSourceDelete();
            selectionHelper = MultiSelectionHelper::construct();
            selectionHelper.parmDatasource(TrvExpTableView_DS);
            selectedRecord = selectionHelper.getFirst();

            ttsbegin;
            while (selectedRecord)
            {
                TrvExpTable::find(selectedRecord.ExpNumber, true).delete();
                selectedRecord = selectionHelper.getNext();
            }
            ttscommit;

            TrvExpTableView_DS.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonsOnMultiSelect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable or disable appbar buttons based on multiSelect.
    /// </summary>
    private void enableButtonsOnMultiSelect()
    {
        boolean areMultipleRecordsSelected = TrvExpTableView_DS.recordsMarked().lastIndex() > 1;

        // Enable these button groups if and only if a single record is selected.
        // Disable on multi select or when no records are selected.
        ExpenseActions.enabled(!areMultipleRecordsSelected && TrvExpTableView.RecId);
        Distribution.enabled(!areMultipleRecordsSelected && TrvExpTableView.RecId);
        PrintActionsGroup.enabled(!areMultipleRecordsSelected && TrvExpTableView.RecId);
        workflowButton.enabled(!areMultipleRecordsSelected && TrvExpTableView.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the caller form is <c>TrvIUpdateEnabled</c>, call updateForm() before closing.
    /// </summary>
    public void close()
    {
        this.updateCallerForm();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeExpenseReportDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// When in cards mode (employee) both <c>TrvExpTable</c> and <c>TrvExpTableView</c> datasources are
    /// used and so need to be kept in sync. In grid (AP clerk) mode, only <c>TrvExpTable</c> is necessary.
    /// For the first case, if both datasources are referencing different records update <c>TrvExpTable</c>
    /// to match the same record as <c>TrvExpTableView</c>.
    /// </summary>
    private void synchronizeExpenseReportDatasources()
    {
        if (isSelfServiceView && TrvExpTableView.RecId && TrvExpTable.RecId != TrvExpTableView.RecId)
        {
            TrvExpTable.data(TrvExpTable::findRecId(activeExpenseReportDS.cursor().RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachButtonClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Redirect the system attach button (the paperclip) to the expense header attachment dialog.
    /// This executes all expense specific logic associated with receipts.
    /// </summary>
    public void attachButtonClicked(FormCommandButtonControl  _attachButton)
    {
        boolean canEdit;
        Object caller = element.args().caller();

        if (caller && TrvExpenseHelper::isCalledFromExpense(caller) 
            && (TrvExpenseHelper::isCalledFromApClerkContext(caller) 
             || TrvExpenseHelper::isCalledFromAuditorsContext(caller)))
        {
            canEdit = true;
        }

        TrvReceiptsHelper::launchHeaderReceiptDialog(TrvExpTable, null, canEdit);
        TrvReceiptsHelper::openHeaderReceiptDialog(TrvExpTable, null, canEdit, caller);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>TrvExpTable</Name>
				<Methods>
					<Method>
						<Name>initQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// Update the worker context, related filters and legal entity on expenses.
        /// </summary>
        public void initQuery(LegalEntity _legalEntity = CompanyInfo::current(), HcmWorkerRecId _worker = HcmWorkerLookup::currentWorker())
        {
            // Reset the Expense Reports query
            Query q = new Query(querystr(TrvExpTable_MyListPage));

            // Add ranges to the TrvExpTable for the worker and related legal entity
            TrvListPageHelper::addCompanyRange(q, _legalEntity);
            TrvListPageHelper::addWorkerRange(q, _worker);

            this.query(q);
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        /// <summary>
        /// Check the status of the expense reports to enable/disable buttons when selection changes.
        /// </summary>
        public void selectionChanged()
        {
            super();
            element.enableActionsBasedOnSelection();
        }

]]></Source>
					</Method>
					<Method>
						<Name>reread</Name>
						<Source><![CDATA[
        /// <summary>
        /// Reread DS. Pass this action on to TrvExpTableView DS since child forms may have
        /// triggered the reread only on TrvExpTable DS.
        /// </summary>
        public void reread()
        {
            super();
            TrvExpTableView_DS.reread();
        }

]]></Source>
					</Method>
					<Method>
						<Name>research</Name>
						<Source><![CDATA[
        /// <summary>
        /// Research DS. Pass this action on to TrvExpTableView DS since child forms may have
        /// triggered the research only on TrvExpTable DS.
        /// </summary>
        public void research(boolean _retainPosition = false)
        {
            super(_retainPosition);
            TrvExpTableView_DS.research(_retainPosition);
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// Construct the expense report queries if Power BI Expense dashboards are the entry point
        /// </summary>
        public void executeQuery()
        {
            if (element.args().menuItemName() == menuItemDisplayStr(TrvBIAdminDashboardExpenseReportsList))
            {
                TrvBIExpenseDashboardHandler::buildQueryForAdminExpenses(TrvExpTable_ds.query(), element.args().parmEnum(), element.args().parmObject() as PBIReportSelectedData);
            }
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TrvExpTableView</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// Skip fetching records in ap clerk view when the DS is not used.
        /// </summary>
        public void executeQuery()
        {
            if (isSelfServiceView)
            {
                if (element.args().menuItemName() == menuItemDisplayStr(TrvBIPersonalDashboardExpenseReportsList))
                {
                    TrvBIExpenseDashboardHandler::buildQueryForPersonalExpenses(TrvExpTableView_ds.query(), element.args().parmEnum(), element.args().parmObject() as PBIReportSelectedData);
                }
                super();
            }

        }

]]></Source>
					</Method>
					<Method>
						<Name>initQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// Set the ranges and set the default layout to group by approval status on init.
        /// </summary>
        public void initQuery(LegalEntity _legalEntity = CompanyInfo::current(), HcmWorkerRecId _worker = HcmWorkerLookup::currentWorker())
        {
            Query                q = new Query();
            QueryBuildDataSource qbds = q.addDataSource(tablenum(TrvExpTableView));

            if (isSelfServiceView)
            {
                qbds.sortClear();
                qbds.addSortField(fieldNum(TrvExpTableView, ReorderedApprovalStatus), SortOrder::Ascending);
                qbds.addSortField(fieldNum(TrvExpTableView, CreatedDateTime1), SortOrder::Descending);

                TrvListPageHelper::addCompanyRange(q, _legalEntity);
                TrvListPageHelper::addWorkerRange(q, _worker);

                this.query(q);
            }
            else if (trvExpenseReportsCurrFilter == TrvExpenseReportPageFilters::DelegatedToMe)
            {
                TrvListPageHelper::addDelegateRangeForCurrentUser(q);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        /// Set the default layout to group by approval status on init.
        /// </summary>
        public void init()
        {
            this.initQuery();
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        /// <summary>
        /// When selection changes, set the buttons and set the TrvExpTable DS record since workflow depends on it.
        /// </summary>
        public void selectionChanged()
        {
            super();
            
            // Workflow and edit commands are tied to TrvExpTable, so update the TrvExpTableDS 
            // record even if the form uses only TrvExpTableView.
            element.synchronizeExpenseReportDatasources();

            element.enableActionsBasedOnSelection();
            element.enableButtonsOnMultiSelect();

            element.updateWorkflowControls();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>GridViewButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Switch to view expense reports in grid view
        /// </summary>
        public void clicked()
        {
            element.setSelfServiceView(formControlStr(TrvExpenseReportsList, GridViewButton));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GroupByStatus</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Switch to view expense report in tiles grouped by approval status
        /// </summary>
        public void clicked()
        {
            element.setSelfServiceView(formControlStr(TrvExpenseReportsList, GroupByStatus));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CreateCommandButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Opens the new expense report slider.
        /// </summary>
        public void clicked()
        {
            Args                            args = new Args();
            FormRun                         formRun;
            TrvNewExpenseReportParameter    newExpenseReportParameter = new TrvNewExpenseReportParameter();

            args.caller(element);
            args.openMode(OpenMode::New);

            if (trvExpenseReportsCurrFilter == TrvExpenseReportPageFilters::DelegatedToMe && 
                FeatureStateProvider::isFeatureEnabled(TrvExpReportListPageDelegateFeature::instance()))
            {
                HcmWorkerRecId workerContext = TrvExpTable.CreatingWorker? TrvExpTable.CreatingWorker : HcmWorkerLookup::currentWorker();
                TrvWorkerParameter callerTrvWorkerParameter = TrvWorkerParameter::newStandard(workerContext, TrvExpTable.LegalEntity);
                callerTrvWorkerParameter.parmCreatingWorkerVisible(true);
                newExpenseReportParameter.parmTrvWorkerParameter(callerTrvWorkerParameter);
            }
            else
            {
                newExpenseReportParameter.parmTrvWorkerParameter(element.parmTrvWorkerParameter());
            }

            args.parmObject(newExpenseReportParameter);

            // Call the form to create a new expense report.
            new MenuFunction(MenuItemDisplayStr(TrvExpenseReportDetails), MenuItemType::Display).run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DeleteCommandButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Delete selected expense reports.
        /// </summary>
        public void clicked()
        {
            super();
            element.deleteSelectedReports();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpenseLines</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Opens the expense lines form.
        /// </summary>
        public void clicked()
        {
            element.navigateToTrvExpenses();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EditCommandButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Opens the expense report slider to edit contents.
        /// </summary>
        public void clicked()
        {
            Args    args = new Args();
            args.caller(element);
            args.record(trvExpTable);
            args.openMode(OpenMode::Edit);
            new MenuFunction(MenuItemDisplayStr(TrvExpenseReportDetails), MenuItemType::Display).run(Args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTableView_ExpNumber</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        /// Opens the expense lines form on clicking the expense report number.
        /// </summary>
        public void jumpRef()
        {
            // When a user clicks on TrvExpTableView_ExpNumber two interactions are sent by the browser to
            // the server: ExecuteHyperlink and SelectionChanged. The latter is a deferred event so no guarantees
            // can be made about its synchronousness. The side effect is that this method may execute before the override
            // of TrvExpTableView_DS.selectionChanged() and consequently the user would open a different expense report
            // than the one clicked. On the other hand, TrvExpTableView is already pointing to the correct record so
            // we manually synchronize both datasources before opening TrvExpenses.
            element.synchronizeExpenseReportDatasources();
            element.navigateToTrvExpenses();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>TrvExpTable</Name>
			<Table>TrvExpTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AntiCorruptionApproverFlag</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AntiCorruptionSubmitterFlag</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApprovalStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatingWorker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Destination</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FinalApprover</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyLE</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LegalEntity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreApprovalNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentHeader</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendAccount</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HcmWorker</Name>
			<Table>HcmWorker</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Person</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PersonnelNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TrvExpTable</JoinSource>
			<LinkType>Passive</LinkType>
			<OnlyFetchActive>Yes</OnlyFetchActive>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>DirPerson</Name>
			<Table>DirPerson</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AnniversaryDay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AnniversaryMonth</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AnniversaryYear</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BirthDay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BirthMonth</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BirthYear</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChildrenNames</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommunicatorSignIn</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_AnniversaryDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_BirthDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_DirPerson_Shadow_DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_EntityType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_FirstName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_FirstNameKana_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_GenerationalSuffix</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_INN__RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_InstanceRelationTypeName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_LastName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_LastNameKana_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_Memo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_MiddleName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_NameSequence</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_PartyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_PersonNameKana_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_PersonNameOrder</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_PhoneticName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_Prefix</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_ProfessionalSuffix</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_RelationTypeName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_Salutation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_SIPElectronicAddressType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_Type</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Gender</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Hobbies</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Initials</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>KnownAs</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LanguageId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MaritalStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NameAlias</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NameSequence</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PartyNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PersonalSuffix</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PersonalTitle</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PhoneticFirstName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PhoneticLastName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PhoneticMiddleName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryAddressLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryContactEmail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryContactFax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryContactPhone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryContactTelex</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryContactURL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProfessionalSuffix</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProfessionalTitle</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>HcmWorker</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<OnlyFetchActive>Yes</OnlyFetchActive>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>DirPersonName</Name>
			<Table>DirPersonName</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_Shadow_DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FirstName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MiddleName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Person</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidTo</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>DirPerson</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<OnlyFetchActive>Yes</OnlyFetchActive>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TrvExpTableView</Name>
			<Table>TrvExpTableView</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ApprovalStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedTransactionId1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatingWorker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Destination</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LegalEntity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedTransactionId1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreApprovalNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecVersion1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReorderedApprovalStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentHeader</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendAccount</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoQuery>No</AutoQuery>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@Expense:ExpenseReports</Caption>
		<DataSource xmlns="">TrvExpTable</DataSource>
		<NewRecordAction xmlns="">CreateCommandButton</NewRecordAction>
		<Pattern xmlns="">Custom</Pattern>
		<SetCompany xmlns="">No</SetCompany>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">SimpleList</Style>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<WorkflowDataSource xmlns="">TrvExpTable</WorkflowDataSource>
		<WorkflowEnabled xmlns="">Yes</WorkflowEnabled>
		<WorkflowType xmlns="">TrvDocumentTemplate</WorkflowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ExpenseReportActions</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ViewModesGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>ViewModesButton</Name>
								<Type>MenuButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>GridViewButton</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@Expense:GridView</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>GroupByStatus</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS101302</Text>
									</AxFormControl>
								</Controls>
								<NormalImage>View</NormalImage>
								<Text>@SYS28196</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ExpenseCreateDelete</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>CreateCommandButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<MultiSelect>No</MultiSelect>
								<NormalImage>New</NormalImage>
								<Text>@Expense:NewExpenseReport</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>DeleteCommandButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<MultiSelect>Yes</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
								<NormalImage>Delete</NormalImage>
								<Text>@SYS332993</Text>
							</AxFormControl>
						</Controls>
						<DataSource>TrvExpTableView</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ExpenseActions</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ExpenseLines</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>TrvExpenses</MenuItemName>
								<MultiSelect>No</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
								<NormalImage>Related</NormalImage>
								<Text>@SYS105283</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>PostSelectedExpReports</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<AutoRefreshData>Yes</AutoRefreshData>
								<MenuItemName>TrvPostExpense</MenuItemName>
								<MenuItemType>Action</MenuItemType>
								<MultiSelect>Yes</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
								<Text>@SYS41360</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>EditCommandButton</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@Expense:HeaderHelpText</HelpText>
								<Type>CommandButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MultiSelect>No</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
								<Text>@SYS314510</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TrvExpenseReportDuplicateDialog</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@Expense:DuplicateExpenseReportDetailed</HelpText>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<AutoRefreshData>Yes</AutoRefreshData>
								<CopyCallerQuery>Yes</CopyCallerQuery>
								<MenuItemName>TrvExpenseReportDuplicateDialog</MenuItemName>
								<MultiSelect>No</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
								<NormalImage>Copy</NormalImage>
							</AxFormControl>
						</Controls>
						<DataSource>TrvExpTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ExpenseReportWorker</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>CurrUserExpenseReport</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>TrvExpRptListPage_MyListPage</MenuItemName>
								<Text>@SYS4007741</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ExpenseReportFor</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@Expense:ExpenseReportsForHelpText</HelpText>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>TrvWorkerPickerExpenseReports</MenuItemName>
								<MultiSelect>No</MultiSelect>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>Distribution</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>AccountingDistributionsDocumentView</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>AccountingDistributionsDocumentView</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
							</AxFormControl>
						</Controls>
						<DataSource>TrvExpTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>PrintActionsGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>PrintActions</Name>
								<Type>MenuButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>TrvExpense</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>MenuFunctionButton</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataSource>TrvExpTable</DataSource>
										<MenuItemName>TrvExpense</MenuItemName>
										<MenuItemType>Output</MenuItemType>
										<NeedsRecord>Yes</NeedsRecord>
										<Text>@SYS101289</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>TrvExpenseEmployee</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>MenuFunctionButton</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataSource>TrvExpTable</DataSource>
										<MenuItemName>TrvExpenseEmployee</MenuItemName>
										<MenuItemType>Output</MenuItemType>
										<NeedsRecord>Yes</NeedsRecord>
										<Text>@SYS101289</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>TrvExpTableDistributionReport</Name>
										<Type>MenuFunctionButton</Type>
										<FormControlExtension
											i:nil="true" />
										<DataSource>TrvExpTable</DataSource>
										<MenuItemName>TrvExpTableDistributionReport</MenuItemName>
										<MenuItemType>Output</MenuItemType>
										<NeedsRecord>Yes</NeedsRecord>
										<Text>@Expense:Distributions</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>TrvExpReportsBarcodeCoverPage</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@Expense:PrintExpenseReportBarcodeHelpText</HelpText>
										<Type>MenuFunctionButton</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataSource>TrvExpTable</DataSource>
										<MenuItemName>TrvExpReportsBarcodeCoverPage</MenuItemName>
										<MenuItemType>Output</MenuItemType>
										<NeedsRecord>Yes</NeedsRecord>
										<Text>@Expense:ExpenseReportCoverPage</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>TrvEmployeeBarcodeCoverPage</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@Expense:PrintEmployeeBarcodeHelpText</HelpText>
										<Type>MenuFunctionButton</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataSource>TrvExpTable</DataSource>
										<MenuItemName>TrvEmployeeBarcodeCoverPage</MenuItemName>
										<MenuItemType>Output</MenuItemType>
										<NeedsRecord>Yes</NeedsRecord>
										<Text>@Expense:EmployeeCoverPage</Text>
									</AxFormControl>
								</Controls>
								<NeedsRecord>Yes</NeedsRecord>
								<NormalImage>Print</NormalImage>
								<Text>@SYS101620</Text>
							</AxFormControl>
						</Controls>
						<DataSource>TrvExpTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>EmailExpenseReport</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TrvExpenseReportEmail</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<DataSource>TrvExpTable</DataSource>
								<MenuItemName>TrvExpenseReportEmail</MenuItemName>
								<MenuItemType>Action</MenuItemType>
								<MultiSelect>No</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
								<Text>@Expense:EmailReport</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TrvExpenseEmployeeReportEmail</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<DataSource>TrvExpTable</DataSource>
								<MenuItemName>TrvExpenseEmployeeReportEmail</MenuItemName>
								<MenuItemType>Action</MenuItemType>
								<MultiSelect>No</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
								<Text>@Expense:EmailReport</Text>
							</AxFormControl>
						</Controls>
						<DataSource>TrvExpTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>History</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TrvExpWorkflowHistory</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@Expense:WorkflowHistoryForExpense</HelpText>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>TrvExpWorkflowHistory</MenuItemName>
								<MultiSelect>No</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
								<OpenMode>View</OpenMode>
							</AxFormControl>
						</Controls>
						<DataSource>TrvExpTable</DataSource>
					</AxFormControl>
				</Controls>
				<DataSource>TrvExpTable</DataSource>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>ExpenseReportsTabControl</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ExpenseReportsTab</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FilterAndGroupBy</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl>
										<Name>MyExpenseReportFilter</Name>
										<FormControlExtension>
											<Name>QuickFilterControl</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>targetControlName</Name>
													<Type>String</Type>
													<Value>ExpenseReportList</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>defaultColumnName</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>placeholderText</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
								<FrameType>None</FrameType>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>ExpenseReportList</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ExtendedStyle>cardList</ExtendedStyle>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ExpenseCard</Name>
										<AllowEdit>No</AllowEdit>
										<ExtendedStyle>BusinessCard</ExtendedStyle>
										<Pattern>BusinessCardStatus</Pattern>
										<PatternVersion>1.1</PatternVersion>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormImageControl">
												<Name>Status</Name>
												<PreviewPartRef>TrvStatusPreview</PreviewPartRef>
												<Type>Image</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>errorStatusIndicator</DataMethod>
												<DataSource>TrvExpTableView</DataSource>
												<Label>@SYS121619</Label>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>TrvExpTableView_AmountMST</Name>
												<ExtendedStyle>Heading</ExtendedStyle>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<Alignment>Left</Alignment>
												<DataMethod>totalWithCurrencyCode</DataMethod>
												<DataSource>TrvExpTableView</DataSource>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>TrvExpTableView_Txt2</Name>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>Txt2</DataField>
												<DataSource>TrvExpTableView</DataSource>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>TrvExpTableView_ExpNumber</Name>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>ExpNumber</DataField>
												<DataSource>TrvExpTableView</DataSource>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>TrvExpTableView_DummyPlaceholder</Name>
												<ExtendedStyle>ImageCaption</ExtendedStyle>
												<Type>String</Type>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<ChangeCase>UpperCase</ChangeCase>
												<Label>@SYS4004564</Label>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>TrvExpTableView_ApprovalStatus</Name>
												<ExtendedStyle>Footer1</ExtendedStyle>
												<Type>ComboBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>ApprovalStatus</DataField>
												<DataSource>TrvExpTableView</DataSource>
												<ShowLabel>No</ShowLabel>
												<Items />
											</AxFormControl>
										</Controls>
										<ArrangeMethod>None</ArrangeMethod>
										<DataSource>TrvExpTableView</DataSource>
										<Style>Card</Style>
									</AxFormControl>
								</Controls>
								<DataSource>TrvExpTableView</DataSource>
								<MultiSelect>No</MultiSelect>
								<ShowRowLabels>No</ShowRowLabels>
								<Style>List</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>ExpenseReportGrid</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Grid</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormImageControl">
										<Name>Status_Grid</Name>
										<PreviewPartRef>TrvStatusPreview</PreviewPartRef>
										<Type>Image</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>errorStatusIndicator</DataMethod>
										<DataSource>TrvExpTableView</DataSource>
										<Label>@SYS121619</Label>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ExpNumber_Grid</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ExpNumber</DataField>
										<DataSource>TrvExpTableView</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ApprovalStatus_Grid</Name>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ApprovalStatus</DataField>
										<DataSource>TrvExpTableView</DataSource>
										<Label>@SYS101302</Label>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>HasReceiptsAttached_Grid</Name>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>hasReceiptsAttached</DataMethod>
										<DataSource>TrvExpTableView</DataSource>
										<Label>@SYS130494</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Purpose_Grid</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Txt2</DataField>
										<DataSource>TrvExpTableView</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Destination_Grid</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Destination</DataField>
										<DataSource>TrvExpTableView</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>AmountMST_Grid</Name>
										<AllowEdit>No</AllowEdit>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>totalWithCurrencyCode</DataMethod>
										<DataSource>TrvExpTableView</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>CreatedDateTime_Grid</Name>
										<Type>DateTime</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>CreatedDateTime1</DataField>
										<DataSource>TrvExpTableView</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>PaymentDate_Grid</Name>
										<Type>Date</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>PaymentDate</DataField>
										<DataSource>TrvExpTableView</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PaymentVoucher_Grid</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>PaymentVoucher</DataField>
										<DataSource>TrvExpTableView</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InvoiceId_Grid</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>InvoiceId</DataField>
										<DataSource>TrvExpTableView</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>TrvExpTableView</DataSource>
								<DefaultAction>ExpenseLines</DefaultAction>
							</AxFormControl>
						</Controls>
						<Caption>@Expense:ExpenseReports</Caption>
						<DataSource>TrvExpTableView</DataSource>
						<ViewEditMode>View</ViewEditMode>
					</AxFormControl>
				</Controls>
				<DataSource>TrvExpTableView</DataSource>
				<ShowTabs>No</ShowTabs>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>ApClerkTabControlView</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Type>Tab</Type>
				<Visible>No</Visible>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ReportViewExpenseReports</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ExpenseReportTabularFilterContainer</Name>
								<Pattern>CustomFilters</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl>
										<Name>ExpenseReportTabularFilter</Name>
										<FormControlExtension>
											<Name>QuickFilterControl</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>targetControlName</Name>
													<Type>String</Type>
													<Value>ExpenseReportTabularList</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>defaultColumnName</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>placeholderText</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
								<FrameType>None</FrameType>
								<Style>CustomFilter</Style>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>ExpenseReportTabularList</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ExpNumber</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ExpNumber</DataField>
										<DataSource>TrvExpTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Txt2</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Txt2</DataField>
										<DataSource>TrvExpTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Name</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>FirstName</DataField>
										<DataSource>DirPersonName</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LastName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>LastName</DataField>
										<DataSource>DirPersonName</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>CreatedDateTime</Name>
										<Type>DateTime</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>CreatedDateTime</DataField>
										<DataSource>TrvExpTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>AmountMST</Name>
										<AllowEdit>No</AllowEdit>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>totalWithCurrencyCode</DataMethod>
										<DataSource>TrvExpTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ApprovalStatus</Name>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ApprovalStatus</DataField>
										<DataSource>TrvExpTable</DataSource>
										<Label>@SYS101302</Label>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>queueName</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>queueName</DataMethod>
										<DataSource>TrvExpTable</DataSource>
										<Label>@SYS72062</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>queueAssignedDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Date</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>queueAssignedDate</DataMethod>
										<DataSource>TrvExpTable</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>TrvExpTable</DataSource>
								<DefaultAction>ExpenseLines</DefaultAction>
							</AxFormControl>
						</Controls>
						<Caption>@Expense:ExpenseReports</Caption>
						<Style>DetailsFormGrid</Style>
						<ViewEditMode>View</ViewEditMode>
					</AxFormControl>
				</Controls>
				<DataSource>TrvExpTable</DataSource>
				<ShowTabs>No</ShowTabs>
				<ViewEditMode>View</ViewEditMode>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>