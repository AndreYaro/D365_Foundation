<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>GeneralLedgerAdjustmentProposedAdjustmentListPage</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class GeneralLedgerAdjustmentProposedAdjustmentListPage extends FormRun implements GeneralLedgerAdjustmentIProposedAdjustmentListPage, 
                                                                                      GeneralLedgerAdjustmentIOpenJournalCreationDialog
{
    private GeneralLedgerAdjustmentDisplayFormContext context;

    private GeneralLedgerAdjustmentListPageFormControlManager formControlManager;
    private GeneralLedgerAdjustmentListPageFormLookupBuilder formLookupBuilder;
    private GeneralLedgerAdjustmentDisplayFormFilterManager formFilterManager;
    private GeneralLedgerAdjustmentDisplayFormMarkingManager formMarkingManager;
    private GeneralLedgerAdjustmentDisplayAdjustmentDataSourceManager formDataSourceManager;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void init()
    {
        context = GeneralLedgerAdjustmentDisplayFormContext::contructDefaultContext();

        formControlManager = GeneralLedgerAdjustmentListPageFormControlManager::newForAdjustmentListPage(this);
        formLookupBuilder = GeneralLedgerAdjustmentListPageFormLookupBuilder::newForAdjustmentListPage(this);
        formFilterManager = GeneralLedgerAdjustmentDisplayFormFilterManager::newForAdjustmentDisplay(this);
        formMarkingManager = GeneralLedgerAdjustmentDisplayFormMarkingManager::newForAdjustmentDisplay(this);
        formDataSourceManager = GeneralLedgerAdjustmentDisplayAdjustmentDataSourceManager::newForAdjustmentDisplay(this);

        super();

        formFilterManager.applyDefaultFilteringOnAdjustmentsDataSource();
        formControlManager.initializeFilters();
        formControlManager.initializeControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalCreationContract</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public GeneralLedgerAdjustmentJournalCreationDialogContract getJournalCreationContract()
    {
        return GeneralLedgerAdjustmentJournalCreationDialogContract::newForJournalCreation(
            context.parmCompany(),
            formMarkingManager.getAdjustmentRecordsMarkedForJournalCreation());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustmentDisplayFormContext</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public GeneralLedgerAdjustmentDisplayFormContext getAdjustmentDisplayFormContext()
    {
        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustmentImportInfoFilterControl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FormStringControl getAdjustmentImportInfoFilterControl()
    {
        return AdjustmentImportInfoFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustmentCompanyFilterControl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FormStringControl getAdjustmentCompanyFilterControl()
    {
        return AdjustmentDataAreaFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustmentStatusFilterControl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FormComboBoxControl getAdjustmentStatusFilterControl()
    {
        return AdjustmentStatusFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustmentJournalCreationMenuItem</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FormFunctionButtonControl getAdjustmentJournalCreationMenuItem()
    {
        return AdjustmentJournalCreationButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustmentCopyButton</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FormButtonControl getAdjustmentCopyButton()
    {
        return AdjustmentCopyButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustmentDeleteAllButton</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FormButtonControl getAdjustmentDeleteAllButton()
    {
        return AdjustmentDeleteAllButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustmentsDataSource</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FormDataSource getAdjustmentsDataSource()
    {
        return GeneralLedgerAdjustmentProposedAdjustment_ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGridLedgerAccountField</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SegmentedEntryControl getGridLedgerAccountField()
    {
        return GeneralLedgerAdjustmentProposedAdjustment_LedgerAccount;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>GeneralLedgerAdjustmentProposedAdjustment</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void init()
        {
            super();

            formDataSourceManager.initializeAdjustmentDataSource();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean validateWrite()
        {
            return super() && formDataSourceManager.validateAdjustmentWrittenToDataSource();
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void write()
        {
            super();

            formDataSourceManager.handleAdjustmentWrittenToDataSource();
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void executeQuery()
        {
            formDataSourceManager.refreshAdjustmentDataSource();

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public int active()
        {
            int ret = super();

            // Update form filters and buttons each time a new adjustment record is selected
            formControlManager.updateFormControlsOnSelectedAdjustmentChanged(GeneralLedgerAdjustmentProposedAdjustment);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>AdjustmentImportInfoFilter</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void lookup()
        {
            // Construct the execution filter lookup as a custom lookup form
            FormRun importInfoFormLookup = formLookupBuilder.buildAdjustmentImportInfoFormLookup();
            
            // Open the lookup and wait for the user to select an option
            this.performFormLookup(importInfoFormLookup);
            importInfoFormLookup.wait();

            if (importInfoFormLookup.closedOk())
            {
                GeneralLedgerAdjustmentImportInfo selectedImport = importInfoFormLookup.docCursor();

                // After an option has been selected, filter adjustment records to the selected execution
                // and update necessary form controls
                context.parmImportInfo(selectedImport);

                formFilterManager.filterForSelectedImportContext(selectedImport);
                formControlManager.updateFormControlsOnImportInfoFilterChanged(selectedImport);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AdjustmentDataAreaFilter</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void lookup()
        {
            // Construct the DataArea filter lookup as a standard table lookup
            SysTableLookup dataAreaLookup = formLookupBuilder.buildAdjustmentDataAreaLookup(this);
            dataAreaLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                DataAreaId selectedDataArea = this.valueStr();

                // Whenever a new DataAreaId has been selected, update the form context and filter the displayed adjustments
                // for the selected legal entity
                context.parmCompany(selectedDataArea);
                formFilterManager.filterForSelectedCompanyContext(selectedDataArea);
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AdjustmentStatusFilter</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                GeneralLedgerAdjustmentResultFilter selectedStatus = any2Enum(this.selection());

                // Whenever a new adjustment status is selected in the adjustment status filter, update the
                // form context, filter adjustment data, and update any relevant form controls
                context.parmAdjustmentStatus(selectedStatus);

                formFilterManager.filterForSelectedAdjustmentStatus(selectedStatus);
                formControlManager.updateFormControlsOnAdjustmentStatusFilterChanged(selectedStatus);
            }
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AdjustmentCopyButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            // Create a copy of the selected adjustment record
            GeneralLedgerAdjustmentProposedAdjustment adjustmentCopy =
                GeneralLedgerAdjustmentProposedAdjustment::createCopyOfAdjustment(GeneralLedgerAdjustmentProposedAdjustment);

            // Clear any data from the copy that the user will need to input, then insert the adjustment copy
            adjustmentCopy.LedgerDimension = 0;
            adjustmentCopy.TransactionCurrencyRecommendedAdjustment = 0;
            adjustmentCopy.insert();

            // Research the data source to ensure the newly created adjustment copy is displayed
            GeneralLedgerAdjustmentProposedAdjustment_ds.research(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AdjustmentDeleteAllButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            GeneralLedgerAdjustmentImportInfo currentImport = context.parmImportInfo();
            GeneralLedgerAdjustmentProposedAdjustment adjustments;
            GeneralLedgerAdjustmentImportInfo importInfo;
            
            if(adjustments.canDeleteAllAdjustmentsForCurrentImport(currentImport))
            {
                boolean shouldContinueWithDeletion = true;

                if (Box::yesNo("@GeneralLedgerAdjustment:AdjustmentsDeletionContinueAction", DialogButton::Yes) == DialogButton::No)
                {
                    // If they click 'No' on the modal box, the user no longer wishes to continue with deletion
                    shouldContinueWithDeletion = false;
                }

                if(shouldContinueWithDeletion)
                {
                    ttsbegin;

                    delete_from adjustments
                    where  adjustments.ImportInfoRecId == currentImport.RecId;

                    delete_from importInfo
                    where importInfo.RecId == currentImport.RecId;

                    ttscommit;

                    context = GeneralLedgerAdjustmentDisplayFormContext::contructDefaultContext();
                    formFilterManager.filterForSelectedImportContext(context.parmImportInfo());
                    formControlManager.updateFormControlsOnImportInfoFilterChanged(context.parmImportInfo());
                }
            }
            else
            {
                formControlManager.enableDisableAdjustmentDeleteAllButton(currentImport);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GeneralLedgerAdjustmentProposedAdjustment_Voucher</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void jumpRef()
        {
            super();

            // Open the voucher inquiry window for that GeneralJournalAccountEntry
            GeneralLedgerAdjustmentFormInteractionHelper::openVoucherInquiryFormForRecommendedAdjustment(
                GeneralLedgerAdjustmentProposedAdjustment);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GeneralLedgerAdjustmentProposedAdjustment_AdjustmentJournalNum</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void jumpRef()
        {
            super();

            LedgerJournalTable selectedJournal = this.getSelectedJournal();

            // Open that journal in the General Journal list page
            GeneralLedgerAdjustmentFormInteractionHelper::openGeneralJournalInJournalListPage(selectedJournal);
        }

]]></Source>
					</Method>
					<Method>
						<Name>getSelectedJournal</Name>
						<Source><![CDATA[
        private LedgerJournalTable getSelectedJournal()
        {
            // Find the Journal Number and Data area of the selected journal
            JournalId journalNumber = this.valueStr();
            DataAreaId journalDataAreaId = GeneralLedgerAdjustmentProposedAdjustment.VoucherDataAreaId;

            LedgerJournalTable selectedJournal;

            // Change to the company to which the journal belongs
            changecompany (journalDataAreaId)
            {
                // Find the selected journal
                selectedJournal = LedgerJournalTable::find(journalNumber);
            }

            return selectedJournal;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>GeneralLedgerAdjustmentProposedAdjustment</Name>
			<Table>GeneralLedgerAdjustmentProposedAdjustment</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyAmountPosted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyAmountRecommended</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyExchangeRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountingDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AdjustmentJournalNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ImportInfoRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsCorrection</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsExcluded</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsModified</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyAmountPosted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyAmountRecommended</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyExchangeRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Side</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubledgerJournalEntry</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionCurrencyAmountPosted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionCurrencyAmountRecommended</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionCurrencyRecommendedAdjustment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VoucherDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VoucherDescription</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@GeneralLedgerAdjustment:GeneralLedgerAdjustmentProposedAdjustmentListPageFormCaption</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">SimpleList</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>GeneralLedgerAdjustmentStagingActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>GeneralLedgerAdjustmentActionPaneButtons</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls />
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>AdjustmentGridFilterGroup</Name>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>AdjustmentGridFilter</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>AdjustmentGrid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>AdjustmentImportInfoFilter</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DisplayLength>80</DisplayLength>
						<DisplayLengthMode>Fixed</DisplayLengthMode>
						<Label>@GeneralLedgerAdjustment:GeneralLedgerAdjustmentProposedAdjustmentListPageImportInfoFilterText</Label>
						<LookupOnly>Yes</LookupOnly>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>AdjustmentDataAreaFilter</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@GeneralLedgerAdjustment:GeneralLedgerAdjustmentProposedAdjustmentListPageCompanyFilter</Label>
						<LookupOnly>Yes</LookupOnly>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>AdjustmentStatusFilter</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<EnumType>GeneralLedgerAdjustmentResultFilter</EnumType>
						<Label>@GeneralLedgerAdjustment:GeneralLedgerAdjustmentProposedAdjustmentListPageStatusFilterText</Label>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneControl">
						<Name>AdjustmentGridActionPane</Name>
						<Type>ActionPane</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>AdjustmentJournalActionGroup</Name>
								<Type>ButtonGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>AdjustmentCopyButton</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<MultiSelect>No</MultiSelect>
										<NeedsRecord>Yes</NeedsRecord>
										<NormalImage>Copy</NormalImage>
										<Text>@GeneralLedgerAdjustment:GeneralLedgerAdjustmentProposedAdjustmentListPageCopyButtonText</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>AdjustmentJournalCreationButton</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>MenuFunctionButton</Type>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>GeneralLedgerAdjustmentJournalCreationDialog</MenuItemName>
										<MultiSelect>Yes</MultiSelect>
										<NeedsRecord>Yes</NeedsRecord>
										<NormalImage>Add</NormalImage>
										<Text>@GeneralLedgerAdjustment:GeneralLedgerAdjustmentProposedAdjustmentListPageJournalCreationButtonText</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>AdjustmentDeleteAllButton</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Enabled>No</Enabled>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<NormalImage>Delete</NormalImage>
										<Text>@GeneralLedgerAdjustment:GeneralLedgerAdjustmentProposedAdjustmentListPageDeleteAllText</Text>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Style>Strip</Style>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>AdjustmentGrid</Name>
				<Type>Grid</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>GeneralLedgerAdjustmentProposedAdjustment_IsExcluded</Name>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>IsExcluded</DataField>
						<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
						<Label>@GeneralLedgerAdjustment:ExcludeFromJournalCreation</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>GeneralLedgerAdjustmentProposedAdjustment_Voucher</Name>
						<AllowEdit>No</AllowEdit>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>Voucher</DataField>
						<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
						<Label>@GeneralLedgerAdjustment:AdjustmentVoucher</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>GeneralLedgerAdjustmentProposedAdjustment_AccountingDate</Name>
						<AllowEdit>No</AllowEdit>
						<Type>Date</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>AccountingDate</DataField>
						<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
						<Label>@GeneralLedgerAdjustment:AdjustmentAccountingDate</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>GeneralLedgerAdjustmentProposedAdjustment_VoucherDataAreaId</Name>
						<AllowEdit>No</AllowEdit>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>VoucherDataAreaId</DataField>
						<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
						<Label>@GeneralLedgerAdjustment:AdjustmentVoucherDataAreaId</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>GeneralLedgerAdjustmentProposedAdjustment_DocumentType</Name>
						<AllowEdit>No</AllowEdit>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>DocumentType</DataField>
						<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
						<Label>@GeneralLedgerAdjustment:AdjustmentDocumentType</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>GeneralLedgerAdjustmentProposedAdjustment_VoucherDescription</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>VoucherDescription</DataField>
						<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
						<Label>@GeneralLedgerAdjustment:AdjustmentVoucherDescription</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormSegmentedEntryControl">
						<Name>GeneralLedgerAdjustmentProposedAdjustment_LedgerAccount</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>SegmentedEntry</Type>
						<FormControlExtension>
							<Name>SegmentedEntryControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>parmControllerClassName</Name>
									<Type>String</Type>
									<Value>DimensionDynamicAccountController</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmAccountTypeEnumName</Name>
									<Type>String</Type>
									<Value>AccountType</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmIsDefaultAccount</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>False</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmValidateBlockedForManualEntry</Name>
									<Type>Enum</Type>
									<TypeName>NoYes</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmLockMainAccountSegment</Name>
									<Type>Enum</Type>
									<TypeName>NoYes</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmPostingType</Name>
									<Type>Enum</Type>
									<TypeName>LedgerPostingType</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmIncludeTotalAccounts</Name>
									<Type>Enum</Type>
									<TypeName>NoYes</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmIncludeFinancialAccounts</Name>
									<Type>Enum</Type>
									<TypeName>NoYes</TypeName>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
						<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
						<Label>@GeneralLedgerAdjustment:AdjustmentLedgerAccount</Label>
						<ReferenceField>LedgerDimension</ReferenceField>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>GeneralLedgerAdjustmentProposedAdjustment_PostingType</Name>
						<AllowEdit>No</AllowEdit>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>PostingType</DataField>
						<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
						<Label>@GeneralLedgerAdjustment:AdjustmentPostingType</Label>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>GeneralLedgerAdjustmentProposedAdjustment_TransactionCurrency</Name>
						<AllowEdit>No</AllowEdit>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>TransactionCurrency</DataField>
						<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
						<Label>@GeneralLedgerAdjustment:AdjustmentTransactionCurrency</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>GeneralLedgerAdjustmentProposedAdjustment_TransactionCurrencyAmountPosted</Name>
						<AllowEdit>No</AllowEdit>
						<Type>Real</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>TransactionCurrencyAmountPosted</DataField>
						<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
						<Label>@GeneralLedgerAdjustment:AdjustmentTransactionCurrencyAmountPosted</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>GeneralLedgerAdjustmentProposedAdjustment_TransactionCurrencyAmountRecommended</Name>
						<AllowEdit>No</AllowEdit>
						<Type>Real</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>TransactionCurrencyAmountRecommended</DataField>
						<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
						<Label>@GeneralLedgerAdjustment:AdjustmentTransactionCurrencyAmountRecommended</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>GeneralLedgerAdjustmentProposedAdjustment_TransactionCurrencyRecommendedAdjustment</Name>
						<Type>Real</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>TransactionCurrencyRecommendedAdjustment</DataField>
						<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
						<Label>@GeneralLedgerAdjustment:AdjustmentTransactionCurrencyRecommendedAdjustment</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>GeneralLedgerAdjustmentProposedAdjustment_AccountingCurrencyExchangeRate</Name>
						<AllowEdit>No</AllowEdit>
						<Type>Real</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>AccountingCurrencyExchangeRate</DataField>
						<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
						<Label>@GeneralLedgerAdjustment:AdjustmentAccountingCurrencyExchangeRate</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>GeneralLedgerAdjustmentProposedAdjustment_AdjustmentJournalNum</Name>
						<AllowEdit>No</AllowEdit>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>AdjustmentJournalNumber</DataField>
						<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
						<Label>@GeneralLedgerAdjustment:AdjustmentJournalNumber</Label>
					</AxFormControl>
				</Controls>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>