<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProjWorkBreakdownStructureV2</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ProjWorkBreakdownStructureV2 extends FormRun implements OfficeIMenuCustomizer, OfficeITemplateCustomExporter
{
    private ProjTable               projTable;
    private SalesQuotationTable     salesQuotationTable;
    private ProjPlanVersionDetail   projPlanVersionDetail;
    private Hierarchy               hierarchy;
    private FormRun                 parentFormRun;
    [FormObservable]
    private HierarchyIdBase         currentHierarchyId;
    [FormObservable]
    private HierarchyIdBase			diffHierarchyId;
    [FormObservable]
    private ProjWBSType             typeOfWBS;
    private CalendarId				calendarId;
    [FormObservable]
    private Hours                   calendarStandardWorkDayHours;
    private boolean                 isPublished;
    private boolean                 hasPublished;
    private boolean                 isEnabled;
    [FormObservable]
    private boolean                 showDifference;
    private boolean                 switchTab;
    private boolean                 filterHasValue;
    private int                     currentMaxLevel;
    private int						nextSelectionGroup;
    private Map                     assignedResourceNamesPerTaskMap;
    private Map                     assignedActivityResourcesPerTaskMap;
    private Map						predecessorStringCache;
    private Map						totalPricesCache;
    private ProjectWbsLockCheck     wbsLockInfo;
    private boolean                 publishingByBatch;
    private boolean                 usePositionToRecordFlight;
    private boolean                 projWBSFormEliminateQueryWithNoConditionFlight;
    
}
]]></Source>
			</Method>
			<Method>
				<Name>getPredecessorListString</Name>
				<Source><![CDATA[
    private str getPredecessorListString(ProjPlanVersion _task)
    {
        str result;
        if (predecessorStringCache.exists(_task.RecId))
        {
            result = predecessorStringCache.lookup(_task.RecId);
        }
        else
        {
            result = ProjWorkBreakdownStructureV2FormHelper::getPredecessorListStr(_task.HierarchyId, _task.HierarchyTaskId);
            predecessorStringCache.insert(_task.RecId, result);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidatePredecessorListStringCache</Name>
				<Source><![CDATA[
    private void invalidatePredecessorListStringCache()
    {
        predecessorStringCache = new Map(Types::Int64, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidatePredecessorListStringCacheForTask</Name>
				<Source><![CDATA[
    private void invalidatePredecessorListStringCacheForTask(RefRecId _recId)
    {
        predecessorStringCache.remove(_recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAllowModifications</Name>
				<Source><![CDATA[
    protected boolean shouldAllowModifications()
    {
        if (salesQuotationTable)
        {
            return salesQuotationTable.isWBSEditable();
        }
        else
        {
            return !isPublished && !showDifference;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidateTotalPricesCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Completely clears the TotalCostPrice/TotalSalesPrice cache.
    /// </summary>
    private void invalidateTotalPricesCache()
    {
        totalPricesCache = new Map(Types::Int64, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidateTotalPricesRecursive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recursively invalidates TotalCostPrice/TotalSalesPrice entries in the cache for the given record and its parents.
    /// </summary>
    /// <param name = "_task">Task to invalidate.</param>
    public void invalidateTotalPricesRecursive(ProjPlanVersion _task)
    {
        totalPricesCache.remove(_task.RecId);
  
        if (_task.ParentHierarchyTaskId)
        {
            ProjPlanVersion parentTask = ProjPlanVersion::findByHierarchyAndTaskId(_task.HierarchyId, _task.ParentHierarchyTaskId);
            this.invalidateTotalPricesRecursive(parentTask);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidateTotalPricesRecursiveLazy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recursively invalidates TotalCostPrice/TotalSalesPrice entires in the cache for the given record and its parents, but terminates
    /// if the given record does not exist in the cache.
    /// This optimizes some uses of <c>invalidateTotalPricesRecursive</c> (where related tasks may be invalidated subsequently).
    /// </summary>
    /// <param name = "_task">Task to invalidate.</param>
    private void invalidateTotalPricesRecursiveLazy(ProjPlanVersion _task)
    {
        if (!totalPricesCache.exists(_task.RecId))
        {
            return;
        }

        totalPricesCache.remove(_task.RecId);

        if (_task.ParentHierarchyTaskId)
        {
            ProjPlanVersion parentTask = ProjPlanVersion::findByHierarchyAndTaskId(_task.HierarchyId, _task.ParentHierarchyTaskId);
            this.invalidateTotalPricesRecursiveLazy(parentTask);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>customizeMenuOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Customizes the options used to populate the Office Menu.
    /// </summary>
    /// <param name = "_menuOptions">The menu options to be customized.</param>
    public void customizeMenuOptions(OfficeMenuOptions _menuOptions)
    {
        // Clear the menu options which are driven by the root datasource of an entity, as some
        // of the of the options are valid for only certain journal types.
        ListIterator dataEntityIterator = new ListIterator(_menuOptions.dataEntityOptions());

        while (dataEntityIterator.more())
        {
            dataEntityIterator.delete();
        }

        DocuTemplate docuTemplate;
        switch (typeOfWBS)
        {
            case ProjWBSType::Project:
                docuTemplate = DocuTemplate::findTemplate(OfficeAppApplicationType::Excel, resourceStr(ProjProjectWBSDraftExcelTemplate));
                break;
            case ProjWBSType::ProjectQuotation:
                docuTemplate = DocuTemplate::findTemplate(OfficeAppApplicationType::Excel, resourceStr(ProjQuotationWbsExcelTemplate));
                break;
            case ProjWBSType::Template:
                docuTemplate = DocuTemplate::findTemplate(OfficeAppApplicationType::Excel, resourceStr(ProjWBSTemplateTasksExcelTemplate));
                break;
        }
        
        if (docuTemplate)
        {
            OfficeTemplateExportMenuItem menuItem = OfficeTemplateExportMenuItem::constructWithDocuTemplate(docuTemplate, docuTemplate.TemplateID);

            _menuOptions.customMenuItems().addEnd(menuItem);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitialTemplateFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the set of initial filters to be applied to the template.
    /// </summary>
    /// <returns>
    /// The Map of filters to apply.
    /// Keyed by AOT entity name.
    /// Values are all Microsoft.Dynamics.Platform.Integration.Office.FilterNode intances.
    /// </returns>
    /// <remarks>
    /// The filters supplied here will override any filters currently in the template.
    /// If no filter is suppled for a given entity, any filters currently in the template are retained.
    /// </remarks>
    public Map getInitialTemplateFilters(OfficeTemplateExportMenuItem _menuItem)
    {
        str templateName;
        str wbsEntity;
        switch (typeOfWBS)
        {
            case ProjWBSType::Project:
                templateName = resourceStr(ProjProjectWBSDraftExcelTemplate);
                wbsEntity = tableStr(ProjProjectWBSDraftEntity);
                break;
            case ProjWBSType::ProjectQuotation:
                templateName = resourceStr(ProjQuotationWbsExcelTemplate);
                wbsEntity = tableStr(ProjQuotationWbsEntity);
                break;
            case ProjWBSType::Template:
                templateName = resourceStr(ProjWBSTemplateTasksExcelTemplate);
                wbsEntity = tableStr(ProjWBSTemplateTasksEntity);
                break;
        }
        
        DocuTemplate template = DocuTemplate::findTemplate(OfficeAppApplicationType::Excel, templateName);
        Map filtersToApply = new Map(Types::String, Types::Class);

        // Ensure the template was present
        if (template && template.TemplateID == templateName)
        {
            ExportToExcelFilterTreeBuilder filterBuilder;
            Microsoft.Dynamics.Platform.Integration.Office.FilterBinaryNode filter;
            
            switch (typeOfWBS)
            {
                case ProjWBSType::Project:
                    str wbsTypeEntity = tableStr(ProjectEntity);
                    filterBuilder = new ExportToExcelFilterTreeBuilder(wbsTypeEntity);
                    filter = filterBuilder.areEqual(fieldStr(ProjectEntity, ProjectID), projTable.ProjId);
                    filtersToApply.insert(wbsTypeEntity, filter);
                    filterBuilder = new ExportToExcelFilterTreeBuilder(wbsEntity);
                    filter = filterBuilder.areEqual(fieldStr(ProjProjectWBSDraftEntity, ProjectID), projTable.ProjId);
                    break;
                case ProjWBSType::ProjectQuotation:
                    filterBuilder = new ExportToExcelFilterTreeBuilder(wbsEntity);
                    filter = filterBuilder.areEqual(fieldStr(ProjQuotationWbsEntity, QuotationId), salesQuotationTable.QuotationId);
                    break;
                case ProjWBSType::Template:
                    filterBuilder = new ExportToExcelFilterTreeBuilder(wbsEntity);
                    filter = filterBuilder.areEqual(fieldStr(ProjWBSTemplateTasksEntity, HierarchyId), hierarchy.HierarchyId);
                    break;
            }

            if (wbsEntity)
            {
                filtersToApply.insert(wbsEntity, filter);
            }

        }

        return filtersToApply;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTemplateSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies any updates to the settings contained within the template for the specified menu item.
    /// </summary>
    /// <param name="_menuItem">The menu item.</param>
    /// <param name="_settingsManager">The <see cref="SettingsManager"/> to use when performing the updates.</param>
    void updateTemplateSettings(OfficeTemplateExportMenuItem _menuItem, Microsoft.Dynamics.Platform.Integration.Office.SettingsManager _settingsManager)
    {
        // No implementation details for this since we don't need to update the template settings
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        usePositionToRecordFlight = ProjWBSFormUsePositionToRecordFlight::instance().isEnabled();
        projWBSFormEliminateQueryWithNoConditionFlight = ProjWBSFormEliminateQueryWithNoConditionFlight::instance().isEnabled();
        isEnabled = true;
        parentFormRun = element.args().caller();
        nextSelectionGroup = 1;
        assignedResourceNamesPerTaskMap = new Map(Types::Int64, Types::Container);
        assignedActivityResourcesPerTaskMap = new Map(Types::Int64, Types::Container);
        predecessorStringCache = new Map(Types::Int64, Types::String);
        totalPricesCache = new Map(Types::Int64, Types::Container);
        filterHasValue = false;

        if (element.args().menuItemName() == menuItemDisplayStr(PSAABSTemplate))
        {
            typeOfWBS = ProjWBSType::Template;
            hierarchy = element.args().record();
            currentHierarchyId = hierarchy.HierarchyId;
        }
        else if (parentFormRun && parentFormRun.name() == formstr(DMFDataVizualization))
        {
            ProjProjectWBSDraftStaging  projectWBSDraft;
            ProjWBSTemplateTasksStaging templateWBS;
            ProjQuotationWbsStaging     quoteWBS;

            switch (element.args().dataset())
            {
                case tableNum(ProjWBSTemplateTasksStaging):
                    typeOfWBS = ProjWBSType::Template;
                    templateWBS = element.args().record();
                    currentHierarchyId = templateWBS.HierarchyId;
                    this.checkIfWbsIsLocked();
                    break;

                case tableNum(ProjProjectWBSDraftStaging):
                    typeOfWBS = ProjWBSType::Project;
                    projectWBSDraft = element.args().record();
                    projTable = ProjTable::find(projectWBSDraft.ProjectId);
                    calendarId = projTable.PSASchedCalendarId;
                    this.selectProjectVersion(false, false);
                    this.checkIfWbsIsLocked();
                    break;

                case tableNum(ProjQuotationWbsStaging):
                    typeOfWBS = ProjWBSType::ProjectQuotation;
                    quoteWBS = element.args().record();
                    salesQuotationTable = SalesQuotationTable::find(quoteWBS.QuotationId);
                    calendarId = salesQuotationTable.PSASchedCalendarId;
                    currentHierarchyId = HierarchyLinkTable::findRefTableRecId(tableNum(SalesQuotationTable), salesQuotationTable.RecId).HierarchyId;
                    this.checkIfWbsIsLocked();
                    break;
            }
        }
        else
        {
            projTable = this.getProjTableRecordFromCaller();
            if (projTable)
            {
                if (projTable.Status == ProjStatus::Completed)
                {
                    isEnabled = false;
                }
                typeOfWBS = ProjWBSType::Project;
                calendarId = projTable.PSASchedCalendarId;
                
                this.selectProjectVersion(false, false);
            }
            else
            {
                hierarchy = element.args().record();
                currentHierarchyId = hierarchy.HierarchyId;
                HierarchyLinkTable hierarchyLinkTable = HierarchyLinkTable::findByHierarchyId(currentHierarchyId);
                if (hierarchyLinkTable.refTableId == tableNum(SalesQuotationTable))
                {
                    typeOfWBS = ProjWBSType::ProjectQuotation;
                    salesQuotationTable = SalesQuotationTable::findRec(hierarchyLinkTable.RefRecId);
                    calendarId = salesQuotationTable.PSASchedCalendarId;
                }
                this.checkIfWbsIsLocked();
            }
        }

        if (calendarId)
        {
            calendarStandardWorkDayHours = ProjWorkBreakdownStructureV2FormHelper::getCalendarStandardWorkDayHours(calendarId);
        }

        if (projTable)
        {
            // Perform data migration for project if necessary.
            ProjPlanVersionDataMigration::performMigrationForProject(projTable.DataAreaId, projTable.ProjId);
        }
        else
        {
            // Perform data migration for quotation and template if necessary.
            ProjPlanVersionDataMigration::performMigrationForHierarchy(currentHierarchyId);
        }

        super();
  
        // Display warning if this project has proposed fulfillment.
        element.updateFulfillmentNotificationControl();
        
        ProjPlanVersionDetail = ProjPlanVersionDetail::findByHierarchyId(currentHierarchyId);

        currentMaxLevel = ProjPlanVersion::getMaxHierarchyLevel(currentHierarchyId);

        // Start out in scheduling view
        ViewMode.selection(enum2Int(ProjWorkBreakdownStructureViewMode::Scheduling));
        this.updateControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasExtendedFulfillment</Name>
				<Source><![CDATA[
    private boolean hasExtendedFulfillment()
    {
        ActivityRecId rootActivity = ActivityFacade::findActivityByProjectId(projTable.ProjId);
        
        ResExtendFulfillmentTable extendFulfillment;
        select firstonly extendFulfillment
            where extendFulfillment.RootActivity == rootActivity;

        return extendFulfillment != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDataSources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update data sources of this form.
    /// If the caller wishes to maintain the current cursor position, they may use the 'updateDataSourcesKeepCursor()' method.
    /// </summary>
    public void updateDataSources()
    {
        if (usePositionToRecordFlight)
        {
            ProjHierarchyTemp_ds.research(true);
        }
        else
        {
            ProjHierarchyTemp_ds.research(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDataSourcesKeepCursor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Helper method for refreshing form data sources while maintaining the current cursor position.
    /// </summary>
    public void updateDataSourcesKeepCursor()
    {
        Common cursor;
        RefTableId table;

        // Figure out if a task or estimate record is currently highlighted
        if (ProjPlanVersion)
        {
            table = tableNum(ProjPlanVersion);
            cursor.RecId = ProjPlanVersion.RecId;
        }
        else if (PSAActivityEstimates)
        {
            table = tableNum(PSAActivityEstimates);
            cursor.RecId = PSAActivityEstimates.RecId;
        }

        this.updateDataSources();

        // Restore the highlighted record from the correct datasource
        switch (table)
        {
            case tableNum(ProjPlanVersion):
                if (usePositionToRecordFlight)
                {
                    ProjPlanVersion_ds.positionToRecord(cursor);
                }
                else
                {
                    ProjPlanVersion_ds.findRecord(cursor);
                }
                break;

            case tableNum(PSAActivityEstimates):
                if (usePositionToRecordFlight)
                {
                    PSAActivityEstimates_ds.positionToRecord(cursor);
                }
                else
                {
                    PSAActivityEstimates_ds.findRecord(cursor);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveCurrentCursor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Helper method which saves the value of the current cursor. Useful if the user enters an action after making changes to a column but without losing focus first.
    /// </summary>
    private void saveCurrentCursor()
    {
        ttsbegin;
        if (ProjPlanVersion)
        {
            ProjPlanVersion.update();
        }
        else if (PSAActivityEstimates)
        {
            PSAActivityEstimates.validateWrite();
            PSAActivityEstimates.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfWbsIsLocked</Name>
				<Source><![CDATA[
    private void checkIfWbsIsLocked()
    {
        wbsLockInfo = ProjectWbsLockBox::wbsCheckOutInfoByHierarchy(currentHierarchyId);

        // if checked out and not published
        if (wbsLockInfo.isLocked() && !wbsLockInfo.isPublished())
        {
            isEnabled = false;
            info(strfmt("@ProjPlan:WbsCheckedOutMessage", wbsLockInfo.userName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFulfillmentNotificationControl</Name>
				<Source><![CDATA[
    private void updateFulfillmentNotificationControl(boolean _showWarningMessage = true)
    {
        if (projTable)
        {
            FulfillmentNotificationMenuItemButton.visible(true);

            // Display warning if this project has outstanding extended fulfillment to be managed.
            boolean hasExtendedFulfillment = element.hasExtendedFulfillment();
            FulfillmentNotificationMenuItemButton.enabled(hasExtendedFulfillment);

            if (hasExtendedFulfillment && _showWarningMessage)
            {
                warning("@Res:FulfillmentNotificationWBSAlert");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the control visibility and editability.
    /// </summary>
    protected void updateControls()
    {
        if (typeOfWBS == ProjWBSType::Project)
        {
            if (isPublished)
            {
                FormButtonControlCheckInCheckOut.text("@ProjPlan:CheckOut");
                FormButtonControlCheckInCheckOut.enabled(!publishingByBatch);
            }
            else
            {
                FormButtonControlCheckInCheckOut.text("@ProjPlan:CheckIn");
            }

            if (showDifference)
            {
                StatusString.text("@ProjPlan:ShowingDifference");
            }
            else
            {
                StatusString.text(enum2str(projPlanVersionDetail.VersionType));
            }

            FormButtonControlCheckInCheckOut.visible(projTable.Status != ProjStatus::Completed);
            FormButtonControlViewPublished.visible(!isPublished && hasPublished);
            FormButtonControlDiscardDraft.visible(!isPublished && hasPublished);
            FormButtonControlShowDifference.visible(!isPublished && hasPublished);
            FormButtonControlShowDifference.toggleValue(showDifference ? 1 : 0);
            Scheduling_DiffState.visible(showDifference);

            TrackingViewsButton.visible(true);
            TrackingViewsButton.enabled(isPublished && !publishingByBatch|| hasPublished || projTable.Status == ProjStatus::Completed);
        }
        else
        {
            FormButtonControlCheckInCheckOut.visible(false);
            FormButtonControlViewPublished.visible(false);
            FormButtonControlDiscardDraft.visible(false);
            FormButtonControlShowDifference.visible(false);
            Scheduling_DiffState.visible(false);
            TrackingViewsButton.visible(false);
        }

        boolean allowModifications = this.shouldAllowModifications();
        boolean schedulingMode = ViewMode.selection() == enum2int(ProjWorkBreakdownStructureViewMode::Scheduling);
        boolean costEstimatesMode = ViewMode.selection() == enum2int(ProjWorkBreakdownStructureViewMode::CostEstimates);

        ProjHierarchyTemp_ds.allowDelete(allowModifications);
        ProjHierarchyTemp_ds.allowCreate(allowModifications);
        
        // Toggle visibility of scheduling-specific columns
        Scheduling_Error.visible(schedulingMode && typeOfWBS != ProjWBSType::Template && ShowScheduleErrors.checked());
        Scheduling_Note.visible(schedulingMode);
        Scheduling_Predecessors.visible(schedulingMode);
        Scheduling_Category.visible(schedulingMode);
        Scheduling_Effort.visible(schedulingMode);
        Scheduling_StartDate.visible(schedulingMode && typeOfWBS != ProjWBSType::Template);
        Scheduling_FinishDate.visible(schedulingMode && typeOfWBS != ProjWBSType::Template);
        Scheduling_Duration.visible(schedulingMode && typeOfWBS != ProjWBSType::Template);
        Scheduling_NumberOfResources.visible(schedulingMode);
        Scheduling_ResourceRole.visible(schedulingMode);
        Scheduling_Resource.visible(schedulingMode && typeOfWBS != ProjWBSType::Template);
        Scheduling_Resource.enabled(!publishingByBatch);
        Scheduling_SchedulingStatus.visible(schedulingMode && typeOfWBS != ProjWBSType::Template);
        Scheduling_UnstaffedHours.visible(schedulingMode && typeOfWBS != ProjWBSType::Template);

        // Toggle visibility of cost-estimates specific columns
        Estimate_ProjTransType.visible(costEstimatesMode);
        Estimate_Description.visible(costEstimatesMode);
        Estimate_ProjCategoryId.visible(costEstimatesMode);
        Estimate_ResourceCategory.visible(costEstimatesMode);
        Estimate_Quantity.visible(costEstimatesMode);
        Estimate_UnitCostPrice.visible(costEstimatesMode);
        Estimate_UnitSalesPrice.visible(costEstimatesMode);
        Estimate_TotalCostPrice.visible(costEstimatesMode);
        Estimate_TotalSalesPrice.visible(costEstimatesMode);
        Estimate_ItemId.visible(costEstimatesMode);
        Estimate_SalesCategory.visible(costEstimatesMode);
        Estimate_LinePropertyId.visible(costEstimatesMode);

        // Toggle action pane buttons
        Outdent.enabled(schedulingMode);
        Indent.enabled(schedulingMode);
        MoveUp.enabled(schedulingMode);
        MoveDown.enabled(schedulingMode);
        NonTemplateButtonsGroupControl.enabled(schedulingMode);
        NonTemplateButtonsGroupControl.visible(typeOfWBS != ProjWBSType::Template);
        Import.enabled(allowModifications && schedulingMode);
        Export.enabled(!filterHasValue);
        SchedulingButtonsGroupControl.enabled(allowModifications && !filterHasValue);
        ResourceSchedulingGroupControl.visible(typeOfWBS != ProjWBSType::Template);
        ResourceSchedulingGroupControl.enabled(!publishingByBatch && schedulingMode && (isPublished || typeOfWBS == ProjWBSType::ProjectQuotation));
        GenerateTeam.visible(typeOfWBS == ProjWBSType::Project);
        AutoSchedulingGroupControl.visible(typeOfWBS != ProjWBSType::Template);
        AutoSchedulingGroupControl.enabled(allowModifications && schedulingMode);
        AutoScheduling.visible(typeOfWBS != ProjWBSType::Template);
        AutoScheduling.enabled(schedulingMode);
        ShowScheduleErrors.visible(typeOfWBS != ProjWBSType::Template);
        ShowScheduleErrors.enabled(schedulingMode);

        this.updateEditabilityByRow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerText</Name>
				<Source><![CDATA[
    public display str headerText()
    {
        str headerStr;

        if (typeOfWBS == ProjWBSType::Template)
        {
            headerStr = strFmt("@SYS191501", currentHierarchyId, hierarchy.Name);
        }
        else if (typeOfWBS == ProjWBSType::ProjectQuotation)
        {
            headerStr = strFmt("@SYS191501", salesQuotationTable.QuotationId,
                salesQuotationTable.QuotationName);
        }
        else
        {
            headerStr = projTable.projIdAndNameColumn();
        }

        return headerStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchyIdFromFormCaller</Name>
				<Source><![CDATA[
    private HierarchyIdBase getHierarchyIdFromFormCaller()
    {
        Args formArgs = element.args();
        HierarchyIdBase hierarchyId = '';

        if (formArgs)
        {
            hierarchyId = formArgs.parm();
        }
        return hierarchyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjTableRecordFromCaller</Name>
				<Source><![CDATA[
    private ProjTable getProjTableRecordFromCaller()
    {
        Args                formArgs = element.args();
        ProjTable           fromCaller;

        if (formArgs)
        {
            fromCaller = formArgs.record() as ProjTable;
            if (fromCaller)
            {
                return fromCaller;
            }
        }

        fromCaller = ProjPlanVersionDetail::getProjTableByHierarchyId(this.getHierarchyIdFromFormCaller());

        return fromCaller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectProjectVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates selected version record buffer.
    /// </summary>
    /// <param name = "_selectPublished">A Boolean value that determines whether to lookup the latest record by publish version type.</param>
    /// <param name = "_updateControls">A Boolean value that determines whether to update the form controls.</param>
    public void selectProjectVersion(boolean _selectPublished = false, boolean _updateControls = true)
    {
        projPlanVersionDetail = ProjPlanVersionDetail::findLatestByProjId(
            projTable.ProjId,
            false, /* forUpdate */
            !_selectPublished, /* anyVersionType */
            ProjPlanVersionType::PublishedCurrent);
            
        HierarchyIdBase oldHierarchyId = currentHierarchyId;
        currentHierarchyId = projPlanVersionDetail.HierarchyId;

        // Clear predecessor cache, since most values will most likely go unused
        this.invalidatePredecessorListStringCache();
        this.invalidateTotalPricesCache();

        this.checkIfWbsIsLocked();

        // For the case of publishing by batch, it should disable all controls which could cause data changes in any table. Hence setting isPublished to true.
        if (publishingByBatch)
        {
            isPublished = true;
        }
        else
        {
            isPublished = projPlanVersionDetail.VersionType == ProjPlanVersionType::PublishedCurrent;
        }
        hasPublished = ProjPlanVersionDetail::checkProjectHasPublishedHierarchy(projPlanVersionDetail.ProjId);

        // If we were previously looking at a hierarchy, update the temp table to reference the tasks in the new hierarchy
        if (oldHierarchyId && oldHierarchyId != currentHierarchyId)
        {
            ProjWorkBreakdownStructureV2FormHelper::switchTempHierarchy(currentHierarchyId, ProjHierarchyTemp);
            element.updateDataSources();
        }

        if (_updateControls)
        {
            this.updateControls();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toggleDifference</Name>
				<Source><![CDATA[
    [SysObsoleteAttribute('This method is replaced by toggleDifference()', false, 16\04\2018)]
    public void toggleDifference()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShowDifference</Name>
				<Source><![CDATA[
    private void setShowDifference(boolean _showDifference)
    {
        if (_showDifference)
        {
            ProjPlanVersionDetail diffHierarchy = ProjPlanVersionDetail::findLatestByProjId(
                ProjPlanVersionDetail.ProjId,
                false, // forUpdate
                false, // anyVersionType
                ProjPlanVersionType::PublishedCurrent);

            diffHierarchyId = diffHierarchy.HierarchyId;
            showDifference = true;
            ProjWorkBreakdownStructureV2FormHelper::createTempRecordsForDeletedTasks(diffHierarchyId, currentHierarchyId, ProjHierarchyTemp);

            if (ViewMode.selection() == enum2int(ProjWorkBreakdownStructureViewMode::CostEstimates))
            {
                // Force ViewMode to scheduling
                ViewMode.selection(enum2int(ProjWorkBreakdownStructureViewMode::Scheduling));
                this.setViewMode(ProjWorkBreakdownStructureViewMode::Scheduling);
            }
            else
            {
                this.updateDataSourcesKeepCursor();
                this.updateControls();
            }
        }
        else
        {
            ProjWorkBreakdownStructureV2FormHelper::deleteTempRecordsForDeletedTasks(currentHierarchyId, ProjHierarchyTemp);
            showDifference = false;
            diffHierarchyId = '';

            ProjWorkBreakdownStructureV2FormHelper::collapseEndNodes(ProjHierarchyTemp.getPhysicalTableName());
            this.updateDataSourcesKeepCursor();
            this.updateControls();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchTab</Name>
				<Source><![CDATA[
    public void switchTab()
    {
        switchTab = !switchTab;
        this.updateControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishWorkflowUponTaskDateChangeValidation</Name>
				<Source><![CDATA[
    private void publishWorkflowUponTaskDateChangeValidation()
    {
        // In the case of resource workflow is enabled, detect if user has made any date changes in any task upon publishes.
        // If so, publishing process will only be carry out if user confirms on resource request submission.
        List leafNodeTaskChangeList = new List(Types::Class);
        boolean taskDateIsChanged = ResRequestHelper::isProjectWBSTaskDateChanged(leafNodeTaskChangeList, projPlanVersionDetail.ProjId, projPlanVersionDetail.VersionId);
        boolean hasDraftAssignment = ProjPlanVersionAssignment::hasReservationByHierarchyId(leafNodeTaskChangeList, projPlanVersionDetail.HierarchyId);
        
        if (taskDateIsChanged || hasDraftAssignment)
        {
            ResWBSValidateAssignmentDateContext validateAssignmentContext = ResWBSValidateAssignmentDateContext::construct();
            validateAssignmentContext.leafNodeTaskChangesListParam(leafNodeTaskChangeList);
            validateAssignmentContext.selectionsReady += eventhandler(element.validateAssignmentDataReady);
            validateAssignmentContext.showForm();
        }
        else
        {
            element.processPublishVersion();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAssignmentDataReady</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logic will execute upon user commit to publish from the <c>ResWBSValidateAssignmentDate</c> form.
    /// </summary>
    /// <param name = "_context"><c>ResWBSValidateAssignmentDateContext</c> class.</param>
    private void validateAssignmentDataReady(ResWBSValidateAssignmentDateContext _context)
    {
        element.processPublishVersion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publishes current version.
    /// </summary>
    public void publishVersion()
    {
        HierarchyIdBase previousHierarchyId;

        // If the WBS is currently a draft, then attempt to publish it
        if (!isPublished)
        {
            if (ProjPlanVersionsManager::checkHasDeletedTasksWithActuals(currentHierarchyId))
            {
                warning("@ProjPlan:TasksWithActualsDeleted");
                this.setShowDifference(true);
            }
            else
            {
                if (ResRequestHelper::isWorkflowEnabled())
                {
                    element.publishWorkflowUponTaskDateChangeValidation();
                }
                else
                {
                    element.processPublishVersion();
                }
            }
        }
        else if (projPlanVersionDetail.VersionType == ProjPlanVersionType::PublishedCurrent)
        {
            previousHierarchyId = currentHierarchyId;
            if (!ProjPlanVersionDetail::findProjectDraftVersion(projPlanVersionDetail.ProjId))
            {
                ProjPlanVersionsManager::createDraftFromPublishedVersion(projPlanVersionDetail.ProjId, projPlanVersionDetail.VersionId);
            }

            element.selectProjectVersion();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjPlanVersionDetail</Name>
				<Source><![CDATA[
    protected ProjPlanVersionDetail getProjPlanVersionDetail()
    {
        return projPlanVersionDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaskOnClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a task's validation should be completed on close of the form.
    /// </summary>
    /// /// <param name = "_task">
    /// /// The <c>ProjPlanVersion</c> record which is being validated.
    /// /// </param>
    /// <returns>
    /// True if the task should be validated on close of the form; Otherwise false.
    /// </returns>
    protected boolean validateTaskOnClose(ProjPlanVersion _task)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPSAActivityEstimatesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialization for query object for <c>PSAActivityEstimates</c> table buffer.
    /// </summary>
    /// <param name = "_currentHierarchyId">
    /// Id of the currnet WBS hierarchy.
    /// </param>
    /// <returns>
    /// An initialized query object.
    /// </returns>
    protected Query initPSAActivityEstimatesQuery(HierarchyIdBase _currentHierarchyId)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsPSAActivityEstimates = query.addDataSource(tableNum(PSAActivityEstimates));

        qbdsPSAActivityEstimates.addRange(fieldNum(PSAActivityEstimates, ProjPlanHierarchyId)).value(queryValue(_currentHierarchyId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDraft</Name>
				<Source><![CDATA[
    private boolean validateDraft()
    {
        ProjPlanVersion task;
        while select task where
            task.HierarchyId == currentHierarchyId
        {
            if (this.validateTaskOnClose(task))
            {
                if (!task.validateWrite())
                {
                    return false;
                }
            }
        }

        PSAActivityEstimates estimate;
        Query query = this.initPSAActivityEstimatesQuery(currentHierarchyId);
        QueryRun queryRun = new queryRun(query);

        while (queryRun.next())
        {
            estimate = queryRun.get(tableNum(PSAActivityEstimates));

            if (!estimate.validateWrite())
            {
                return false;
            }
        }
       
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPublishVersion</Name>
				<Source><![CDATA[
    private void processPublishVersion()
    {
        if (this.validateDraft())
        {
            ProjWBSPublishExecutionOption executionOption;
            if (ProjParameters::find().AllowWBSBatchPublishing == NoYes::Yes)
            {
                executionOption = element.executePublishVersionDialog(projPlanVersionDetail);
            }
            else
            {
                ProjPlanVersionsManager::publishVersion(projPlanVersionDetail.ProjId, projPlanVersionDetail.VersionId);
                executionOption = ProjWBSPublishExecutionOption::Synchronous;
            }

            if (executionOption != ProjWBSPublishExecutionOption::NotSpecified
                && executionOption != ProjWBSPublishExecutionOption::Cancel)
            {
                ProjectWbsUpdateEventHandler::removeLockForPublishedWbs(currentHierarchyId);

                isPublished = true;
                showDifference = false;

                if (executionOption == ProjWBSPublishExecutionOption::ScheduledBatch
                    || executionOption == ProjWBSPublishExecutionOption::ReliableAsynchronous)
                {
                    Info(strFmt("@ProjPlan:PublishingByBatch", strLwr(enum2Str(executionOption))));
                    publishingByBatch = true;
                }

                // Only look for the latest published version if it WBS is published is not processed by batch.
                element.selectProjectVersion(
                    executionOption == ProjWBSPublishExecutionOption::Synchronous
                    || executionOption == ProjWBSPublishExecutionOption::Asynchronous);
            }
        }
        else
        {
            error("@ProjPlan:WBSDraftPublishBlockedForErrors");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executePublishVersionDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launch dialog to allow project work breakdown structure to be exectued by batch.
    /// </summary>
    /// <param name = "_planVersionDetail">The <c>ProjPlanVersionDetail</c> table buffer which reference the project WBS to be published.</param>
    /// <returns><c>ProjWBSPublishExecutionOption</c> enum which shows the execution option.</returns>
    private ProjWBSPublishExecutionOption executePublishVersionDialog(ProjPlanVersionDetail _planVersionDetail)
    {
        ProjWBSPublishExecutionOption executionOption;
        str processId;

        MenuFunction menuFunction = new MenuFunction(menuItemActionStr(ProjWorkBreakdownStructurePublish), MenuItemType::Action);

        if (menuFunction && menuFunction.checkAccessRights())
        {
            processId = guid2Str(newGuid());

            Args menuArgs = new Args();
            menuArgs.parm(processId);
            menuArgs.record(_planVersionDetail);
            menuFunction.run(menuArgs);
        }

        if (processId)
        {
            SysGlobalCache cache = ClassFactory.globalCache();
            if (!cache.isSet(classStr(ProjWorkBreakdownStructurePublishController), processId))
            {
                executionOption = ProjWBSPublishExecutionOption::Cancel;
            }
            else
            {
                executionOption = cache.get(classStr(ProjWorkBreakdownStructurePublishController), processId);
                cache.clear(classStr(ProjWorkBreakdownStructurePublishController));
            }
        }

        return executionOption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        FormRun callerForm = element.args().caller();

        super();

        // If the caller is a form, refresh
        if (callerForm)
        {
            // Project
            if (strCmp(callerForm.name(), formStr(ProjTable)) == 0)
            {
                if (formHasMethod(callerForm, identifierStr(refreshDataSource)))
                {
                    callerForm.refreshDataSource();
                }
            }

            // Project Quotation
            if (strCmp(callerForm.name(), formStr(SalesQuotationProjTable)) == 0)
            {
                if (formHasMethod(callerForm, identifierStr(doRefresh)))
                {
                    callerForm.doRefresh();
                }
            }
        }

        // Save expand/collapse state of tasks
        HierarchyIdBase saveHierarchyId;
        switch (typeOfWBS)
        {
            case ProjWBSType::Project:
                saveHierarchyId = ProjPlanVersionDetail::findOldestByProjId(projTable.ProjId).HierarchyId;
                break;

            case ProjWBSType::ProjectQuotation:
            case ProjWBSType::Template:
                saveHierarchyId = currentHierarchyId;
                break;
        }

        if (saveHierarchyId)
        {
            ProjWBSUserExpand::saveExpandState(curUserId(), currentHierarchyId, ProjHierarchyTemp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRecords</Name>
				<Source><![CDATA[
    private void addRecords()
    {
        if (this.inViewMode())
        {
            // Modifications are not allowed in view mode
            return;
        }

        this.saveCurrentCursor();

        // When in CostEstimates view, 'Add' should create new Estimate records
        if (ViewMode.selection() == enum2Int(ProjWorkBreakdownStructureViewMode::CostEstimates))
        {
            ProjPlanVersion parentTask = ProjPlanVersion::findByHierarchyAndTaskId(currentHierarchyId, TaskEstimateUnion.HierarchyTaskId);
            PSAActivityEstimates newEstimate = ProjWorkBreakdownStructureV2FormHelper::addEstimateV2(parentTask);

            // Invalidate total prices for the parent task
            element.invalidateTotalPricesRecursive(parentTask);
            
            boolean isExpanded = ProjHierarchyTemp.Expand;
            this.updateDataSources();

            if (isExpanded)
            {
                if (usePositionToRecordFlight)
                {
                    PSAActivityEstimates_ds.positionToRecord(newEstimate);
                }
                else
                {
                    PSAActivityEstimates_ds.findRecord(newEstimate);
                }
            }
            else
            {
                if (usePositionToRecordFlight)
                {
                    ProjPlanVersion_ds.positionToRecord(parentTask);
                }
                else
                {
                    ProjPlanVersion_ds.findRecord(parentTask);
                }
            }
        }
        // When in Scheduling view, 'Add' should create new Task records
        else
        {
            ProjPlanVersion newRecord;
            
            if (ProjPlanVersion.isRoot())
            {
                // Use the pop up only when there is an estimate on the root.
                if (PSAActivityEstimates::estimateWithHierarchyIdAndTaskIdExists(ProjPlanVersion.HierarchyId, ProjPlanVersion.HierarchyTaskId)
                     && Box::yesNo("@Res:ProjWBSNewTaskOnRootWarning", DialogButton::No) == DialogButton::No)
                {
                    return;
                }
                else
                {
                    // Invalidate total prices for the root
                    element.invalidateTotalPricesRecursive(ProjPlanVersion);

                    newRecord = this.addNewTask(
                    newRecord,
                    currentHierarchyId,
                    calendarId,
                    typeOfWBS,
                    null,
                    null,
                    ProjHierarchyTemp,
                    AutoScheduling.checked(),
                    calendarStandardWorkDayHours);
                   
                    currentMaxLevel = max(currentMaxLevel, 1);
     
                    ProjPlanVersion.reread();
                    ProjWorkBreakdownStructureV2FormHelper::expandTaskV2(
                    ProjPlanVersion,
                    ProjHierarchyTemp.getPhysicalTableName());
                }
            }
            else
            {
                // Invalidate total prices for parent task
                ProjPlanVersion parent = ProjPlanVersion::findByHierarchyAndTaskId(ProjPlanVersion.HierarchyId, ProjPlanVersion.HierarchyTaskId);
                element.invalidateTotalPricesRecursive(parent);

                newRecord = this.addNewTask(
                        newRecord,
                        currentHierarchyId,
                        calendarId,
                        typeOfWBS,
                        ProjPlanVersion,
                        ProjHierarchySorting,
                        ProjHierarchyTemp,
                        AutoScheduling.checked(),
                        calendarStandardWorkDayHours);
            }

            this.invalidatePredecessorListStringCache();
            this.updateDataSources();

            if (usePositionToRecordFlight)
            {
                ProjPlanVersion_ds.positionToRecord(newRecord);
            }
            else
            {
                ProjPlanVersion_ds.findRecord(newRecord);
            }

            Scheduling_TaskName.setFocus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNewTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>ProjPlanVersion</c> record and adds it as the next sibling of the given task (or a child of the root, if the given task is null).
    /// </summary>
    /// <param name = "_newRecord"><c>ProjPlanVerion</c> buffer.</param>
    /// <param name = "_hierarchyId">HierarchyId of this hierarchy.</param>
    /// <param name = "_calendarId">Id of the calendar for this hierarchy.</param>
    /// <param name = "_wbsType">Type of WBS.</param>
    /// <param name = "_upperSibling">The task to use as the upper sibling. This may be null, in which case the upper sibling will be the last child of the root.</param>
    /// <param name = "_upperSiblingSortingRecord">The sorting record for the upper sibling task. This may be null, in the case that the upper sibling record is null.</param>
    /// <param name = "_tempTable">Temp table buffer.</param>
    /// <param name = "_autoScheduling">Whether auto scheduling should be enabled.</param>
    /// <param name = "_calendarStandardWorkDayHours">Calendar standard work day Hours.</param>
    /// <returns>The newly created <c>ProjPlanVersion</c> record.</returns>
    public ProjPlanVersion addNewTask(ProjPlanVersion _newRecord,
                                      HierarchyIdBase _hierarchyId,
                                      CalendarId _calendarId,
                                      ProjWBSType _wbsType,
                                      ProjPlanVersion _upperSibling,
                                      ProjHierarchySorting _upperSiblingSortingRecord,
                                      ProjHierarchyTemp _tempTable,
                                      boolean _autoScheduling,
                                      Hours _calendarStandardWorkDayHours)
    {
        return ProjWorkBreakdownStructureV2FormHelper::addTaskV2(_newRecord,
                                                                _hierarchyId,
                                                                _calendarId,
                                                                _wbsType,
                                                                _upperSibling,
                                                                _upperSiblingSortingRecord,
                                                                _tempTable,
                                                                _autoScheduling,
                                                                _calendarStandardWorkDayHours);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecords</Name>
				<Source><![CDATA[
    private void deleteRecords()
    {
        if (isPublished)
        {
            // Modifications are not allowed in published mode
            return;
        }

        List selectedEstimates = new List(Types::Int64);
        List selectedTasks = new List(Types::Int64);

        ProjWBSTaskEstimateUnionView currentElement = TaskEstimateUnion_ds.getFirst(1);
        if (!currentElement)
        {
            currentElement = TaskEstimateUnion;
        }

        ProjPlanVersion taskForEstimate;
        ProjHierarchyLevel currentMinLevel = ProjHierarchySorting::getSchemaMaxHierarchyLevel();
        ProjHierarchyTaskId parentHierarchyTaskId;
        HierarchyIdBase parentHierarchyId;
        
        // Construct lists of selected tasks and estimates
        boolean hasPromptedParentDelete = false;
        while (currentElement)
        {
            if (currentElement.SourceTableId == tableNum(ProjPlanVersion))
            {
                if (!hasPromptedParentDelete)
                {
                    // If the selected task is a summary task
                    ProjPlanVersion selectedTask = ProjPlanVersion::findByRecId(currentElement.SourceRecId);
                    if (!selectedTask.EndNode)
                    {
                        // Run the confirmation dialog
                        if (!Box::confirm("@ProjPlan:DeleteSummaryTaskWarning"))
                        {
                            return;
                        }

                        hasPromptedParentDelete = true;
                    }

                    element.invalidateTotalPricesRecursiveLazy(selectedTask);

                    // Get the highest level deleting tasks and get that task parent hierarchy task ID.
                    if (usePositionToRecordFlight && selectedTask.HierarchyLevel < currentMinLevel)
                    {
                        currentMinLevel = selectedTask.HierarchyLevel;
                        parentHierarchyId = selectedTask.HierarchyId;
                        parentHierarchyTaskId = selectedTask.ParentHierarchyTaskId;
                    }
                }

                selectedTasks.addEnd(currentElement.SourceRecId);
            }
            else if (currentElement.SourceTableId == tableNum(PSAActivityEstimates))
            {
                selectedEstimates.addEnd(currentElement.SourceRecId);

                // Get the task for this estimate
                taskForEstimate = ProjPlanVersion::findByHierarchyAndTaskId(currentElement.HierarchyId, currentElement.HierarchyTaskId);
                element.invalidateTotalPricesRecursiveLazy(taskForEstimate);
            }

            currentElement = TaskEstimateUnion_ds.getNext();
        }

        ProjWorkBreakdownStructureV2FormHelper::deleteEstimatesV2(currentHierarchyId, selectedEstimates.getEnumerator());
        nextSelectionGroup = ProjWorkBreakdownStructureV2FormHelper::deleteTasksV2(
            currentHierarchyId,
            calendarId,
            typeOfWBS,
            selectedTasks.getEnumerator(),
            ProjHierarchyTemp,
            nextSelectionGroup,
            calendarStandardWorkDayHours);

        this.invalidatePredecessorListStringCache();
        this.updateDataSources();

        if (usePositionToRecordFlight)
        {
            if (ViewMode.selection() == enum2Int(ProjWorkBreakdownStructureViewMode::CostEstimates))
            {
                ProjPlanVersion_ds.positionToRecord(taskForEstimate);
            }
            else if (ViewMode.selection() == enum2Int(ProjWorkBreakdownStructureViewMode::Scheduling))
            {
                // Position to the highest level deleting task parent's task after deletion.
                ProjPlanVersion parentTask = ProjPlanVersion::findByHierarchyAndTaskId(parentHierarchyId, parentHierarchyTaskId);
                if (parentTask)
                {
                    ProjPlanVersion_ds.positionToRecord(parentTask);
                }
            }
        }
        else
        {
            ProjPlanVersion_ds.findRecord(taskForEstimate);
        }

        currentMaxLevel = ProjPlanVersion::getMaxHierarchyLevel(currentHierarchyId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandTo</Name>
				<Source><![CDATA[
    private void expandTo(ProjHierarchyLevel _level)
    {
        ProjWorkBreakdownStructureV2FormHelper::expandToV2(
                currentHierarchyId,
                _level,
                ProjHierarchyTemp.getPhysicalTableName(),
                showDifference || ViewMode.selection() == enum2Int(ProjWorkBreakdownStructureViewMode::CostEstimates));

        this.updateDataSourcesKeepCursor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEditabilityByRow</Name>
				<Source><![CDATA[
    protected void updateEditabilityByRow()
    {
        boolean allowModifications = this.shouldAllowModifications();
        boolean schedulingMode = ViewMode.selection() == enum2int(ProjWorkBreakdownStructureViewMode::Scheduling);
        boolean costEstimatesMode = ViewMode.selection() == enum2int(ProjWorkBreakdownStructureViewMode::CostEstimates);
        boolean isRoot = ProjPlanVersion.isRoot();

        SchedulingButtonsGroupControl.enabled(!filterHasValue && allowModifications);
        AutoScheduling.enabled(allowModifications);

        // TaskName is not specific to any viewmode, but should only be editable in scheduling mode
        Scheduling_TaskName.allowEdit(schedulingMode && allowModifications && !isRoot);

        // Update editability of scheduling specific columns
        if (schedulingMode)
        {
            Scheduling_Predecessors.allowEdit(allowModifications && ProjPlanVersion.EndNode);
            Scheduling_Category.allowEdit(allowModifications && ProjPlanVersion.EndNode);
            Scheduling_Effort.allowEdit(allowModifications && ProjPlanVersion.EndNode);
            Scheduling_StartDate.allowEdit(allowModifications && ProjPlanVersion.EndNode);
            Scheduling_FinishDate.allowEdit(allowModifications && ProjPlanVersion.EndNode);
            Scheduling_Duration.allowEdit(allowModifications && ProjPlanVersion.EndNode);
            Scheduling_NumberOfResources.allowEdit(allowModifications && ProjPlanVersion.EndNode);
            Scheduling_ResourceRole.allowEdit(allowModifications && ProjPlanVersion.EndNode && !isRoot);

            // Resource controls should still be enabled even while published
            Scheduling_Resource.allowEdit(!showDifference && ProjPlanVersion.EndNode && !isRoot);
            AssignResource.enabled(!showDifference && ProjPlanVersion.EndNode);
            AssignmentDetails.enabled(!showDifference && ProjPlanVersion.EndNode);
            Details.enabled(!showDifference && ProjPlanVersion.EndNode);
            ProductDimension.enabled(false);
        }
        // Update editability of cost-estimates specific columns
        else if (costEstimatesMode)
        {
            boolean selectedEstimate = PSAActivityEstimates != null;
            Estimate_ProjTransType.allowEdit(selectedEstimate && allowModifications);
            Estimate_Description.allowEdit(selectedEstimate && allowModifications);
            Estimate_ProjCategoryId.allowEdit(selectedEstimate && allowModifications);
            Estimate_ResourceCategory.allowEdit(selectedEstimate && allowModifications && PSAActivityEstimates.ProjTransType == QuotationProjTransType::Hour);
            Estimate_Quantity.allowEdit(selectedEstimate && allowModifications && PSAActivityEstimates.ProjTransType != QuotationProjTransType::Fee);
            Estimate_UnitCostPrice.allowEdit(selectedEstimate && allowModifications && PSAActivityEstimates.ProjTransType != QuotationProjTransType::Fee);
            Estimate_UnitSalesPrice.allowEdit(selectedEstimate && allowModifications);
            Estimate_TotalCostPrice.allowEdit(selectedEstimate && allowModifications);
            Estimate_TotalSalesPrice.allowEdit(selectedEstimate && allowModifications);
            Estimate_LinePropertyId.allowEdit(selectedEstimate && allowModifications);
   
            if (selectedEstimate && PSAActivityEstimates.ProjTransType == QuotationProjTransType::Item)
            {
                Estimate_ItemId.allowEdit(allowModifications && PSAActivityEstimates.SalesCategory == 0);
                Estimate_SalesCategory.allowEdit(allowModifications && PSAActivityEstimates.ItemId == '');
                ProductDimension.enabled(PSAActivityEstimates.ItemId != '');
            }
            else
            {
                Estimate_ItemId.allowEdit(false);
                Estimate_SalesCategory.allowEdit(false);
                ProductDimension.enabled(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>task</Name>
				<Source><![CDATA[
    public int task(int _p1)
    {
        int ret;
    
        ret = super(_p1);
    
        this.updateEditabilityByRow();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();
        this.updateEditabilityByRow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setViewMode</Name>
				<Source><![CDATA[
    private void setViewMode(ProjWorkBreakdownStructureViewMode _viewMode)
    {
        // Expand current task
        if (_viewMode == ProjWorkBreakdownStructureViewMode::CostEstimates)
        {
            if (showDifference)
            {
                this.setShowDifference(false);
            }

            if (ProjPlanVersion.EndNode)
            {
                ProjWorkBreakdownStructureV2FormHelper::expandTaskV2(ProjPlanVersion, ProjHierarchyTemp.getPhysicalTableName(), true);
            }
        }
        else
        {
            ProjWorkBreakdownStructureV2FormHelper::collapseEndNodes(ProjHierarchyTemp.getPhysicalTableName());
        }

        // Backup cursor based on ProjHierarchySorting (since that's guaranteed to appear for both tasks and estimates)
        ProjHierarchySorting cursor;
        cursor.RecId = ProjHierarchySorting.RecId;

        this.updateDataSources();
        this.updateControls();

        // Restore cursor
        if (usePositionToRecordFlight)
        {
            ProjHierarchySorting_ds.positionToRecord(cursor);
        }
        else
        {
            ProjHierarchySorting_ds.findRecord(cursor);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssignedResourceNamesPerTask</Name>
				<Source><![CDATA[
    private ResAssignedResources getAssignedResourceNamesPerTask(ProjPlanVersion _record)
    {
        ResAssignedResources resourceNamesStr;
        this.getAssignedResourcesPerTask(_record, false);

        if (assignedResourceNamesPerTaskMap.exists(_record.RecId))
        {
            resourceNamesStr = con2Str(assignedResourceNamesPerTaskMap.lookup(_record.RecId), "@Res:AssignmentDetailsFormatComma");
        }

        return resourceNamesStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAllAssignedActivityResourcesMap</Name>
				<Source><![CDATA[
    private void removeAllAssignedActivityResourcesMap()
    {
        //Remove all elements in the assignedActivityResourcesPerTaskMap.
        Map nullAssignedActivityResourcesPerTaskMap = new Map(Types::Int64, Types::Container);
        assignedActivityResourcesPerTaskMap = nullAssignedActivityResourcesPerTaskMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssignedResourcesPerTask</Name>
				<Source><![CDATA[
    private void getAssignedResourcesPerTask(ProjPlanVersion _record, boolean _forceUpdate)
    {
        if (_forceUpdate || _record.EndNode == FalseTrue::False)
        {
            assignedActivityResourcesPerTaskMap.remove(_record.RecId);
            assignedActivityResourcesPerTaskMap.remove(_record.RecId);
        }

        if (_record.EndNode == FalseTrue::True
            && (!assignedResourceNamesPerTaskMap.exists(_record.RecId) || !assignedActivityResourcesPerTaskMap.exists(_record.RecId)))
        {
            Container resourceNamesCon;
            Container activityResourcesCon;
            [resourceNamesCon, activityResourcesCon] = ProjWorkBreakdownStructureV2FormHelper::getAssignedResourcesListPerTask(_record, isPublished);

            assignedResourceNamesPerTaskMap.insert(_record.RecId, resourceNamesCon);
            assignedActivityResourcesPerTaskMap.insert(_record.RecId, activityResourcesCon);
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityResourceLookupReady</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logic will execute upon user has done selection on the <c>ProjWBSActivityResourceLookup</c> form..
    /// </summary>
    /// <param name = "_context"><c>ProjWBSActivityResourceLookupContext</c> class instance.</param>
    private void activityResourceLookupReady(ProjWBSActivityResourceLookupContext _context)
    {
        if (_context.parmRefreshWBSFormDataSource())
        {
            this.getAssignedResourcesPerTask(ProjPlanVersion, true);
            this.updateDataSourcesKeepCursor();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceCategoryLookup</Name>
				<Source><![CDATA[
    public void resourceCategoryLookup(FormControl _formControl)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(PSASchedRole), _formControl);

        sysTableLookup.addLookupField(fieldNum(PSASchedRole, RoleId));
        sysTableLookup.addLookupField(fieldNum(PSASchedRole, Description));
        
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(PSASchedRole));
        
        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to confirm if form can be closed depending on the validations of the records
    /// </summary>
    /// <returns></returns>
    public boolean canClose()
    {
        boolean ret = super();
    
        return ret && this.validateDraft();
    }

]]></Source>
			</Method>
			<Method>
				<Name>docCursor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record for which the Document Handling should be attached.
    /// </summary>
    /// <returns>
    /// The <c>ProjPlanVersion</c> table buffer.
    /// </returns>
    public Common docCursor()
    {
        Common docCursor = super();
        
        if (ProjWBSDocuAttachByHierarchyTreeTableFlight::instance().isEnabled())
        {
            // Return the form HierarchyTreeTable datasource buffer for docu attachment.
            // If HierarchyTreeTable does not exists, it should return no data buffer 
            // which no document can be attached.
            // The design is that document can only be attached to WBS tasks which 
            // have been published.
            if (HierarchyTreeTable && projPlanVersion && ProjPlanVersion.HierarchyTreeTableRefRecId)
            {
                docCursor = HierarchyTreeTable;
            }
            else
            {
                //Setting it to null so that user cannot attach document to any record.
                docCursor = null;
            }
        }
        
        return docCursor;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>ProjHierarchyTemp</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            ProjWorkBreakdownStructureV2FormHelper::initializeProjHierarchyTemp(currentHierarchyId, ProjHierarchyTemp.getPhysicalTableName());
            ProjHierarchyTemp.reread();
            
            HierarchyIdBase restoreHierarchyId;
            switch (typeOfWBS)
            {
                case ProjWBSType::Project:
                    restoreHierarchyId = ProjPlanVersionDetail::findOldestByProjId(ProjTable.ProjId).HierarchyId;
                    break;

                case ProjWBSType::ProjectQuotation:
                case ProjWBSType::Template:
                    restoreHierarchyId = currentHierarchyId;
                    break;
            }

            if (restoreHierarchyId)
            {
                ProjWBSUserExpand::restoreExpandState(curUserId(), currentHierarchyId, ProjHierarchyTemp);

                ProjWorkBreakdownStructureV2FormHelper::resolveVisibleAndExpand(ProjHierarchyTemp);
            }

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            element.addRecords();
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            element.deleteRecords();
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayoption</Name>
						<Source><![CDATA[
        public void displayoption(Common _record, FormRowDisplayOption _options)
        {
            ProjWBSTaskEstimateUnionView unionView = _record.joinChild() as ProjWBSTaskEstimateUnionView;

            // Only tasks may be bolded
            if (unionView.SourceTableId != tableNum(ProjPlanVersion))
            {
                return;
            }
            ProjPlanVersion task = TaskEstimateUnion_ds.joinedProjPlanVersion(unionView);

            // If this task is from a different hierarchy, don't bold it
            if (task.HierarchyId != currentHierarchyId)
            {
                return;
            }

            // If we're in estimates view and the task is an end node
            if (task.EndNode == FalseTrue::True && ViewMode.selection() == enum2int(ProjWorkBreakdownStructureViewMode::CostEstimates))
            {
                PSAActivityEstimates estimate;
                select firstonly RecId from estimate where
                    estimate.ProjPlanHierarchyId == currentHierarchyId
                    && estimate.ProjPlanHierarchyTaskId == task.HierarchyTaskId;
    
                // Make it bold if it has estimates
                _options.fontBold(estimate != null);
            }
            else
            {
                // In all other views, only summary tasks are bold
                _options.fontBold(task.EndNode == FalseTrue::False);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>getHierarchyStateImage</Name>
						<Source><![CDATA[
        display container getHierarchyStateImage(ProjHierarchyTemp _record)
        {
            container imageContainer;

            // If this record is not a task, don't show an image
            ProjWBSTaskEstimateUnionView taskEst = _record.joinChild();
            if (taskEst.SourceTableId != tableNum(ProjPlanVersion))
            {
                return imageContainer;
            }
            ProjPlanVersion taskRecord = TaskEstimateUnion_ds.joinedProjPlanVersion(taskEst);

            // If this record is from a difference hierarchy (as might be the case when viewing difference) don't show an image
            if (taskRecord.HierarchyId != currentHierarchyId)
            {
                return imageContainer;
            }

            // If this task is an end node, don't display collapse/expand unless we're in CostEstimates mode AND this task has estimates OR we're in diff view AND this task has deleted children
            if (taskRecord.EndNode == FalseTrue::True)
            {
                // In ShowDifference mode, an EndNode may still be expandable if it has a deleted child
                if (showDifference)
                {
                    // Search for a deleted child of this record
                    ProjPlanVersion childTask;
                    select firstonly RecId from childTask where
                        childTask.HierarchyId == diffHierarchyId
                        && childTask.ParentHierarchyTaskId == taskRecord.HierarchyTaskId;

                    // If this EndNode has no deleted children, it shouldn't be expandable
                    if (!childTask)
                    {
                        return imageContainer;
                    }
                }
                // In CostEstimates view, and EndNode may still be expandable if it has estimates
                else if (ViewMode.selection() == enum2Int(ProjWorkBreakdownStructureViewMode::CostEstimates))
                {
                    // Search for an estimate on this EndNode
                    PSAActivityEstimates estimate;
                    select firstonly RecId from estimate where
                        estimate.ProjPlanHierarchyId == taskRecord.HierarchyId
                        && estimate.ProjPlanHierarchyTaskId == taskRecord.HierarchyTaskId;

                    // If this EndNode has no Estimates, it shouldn't be expandable
                    if (!estimate)
                    {
                        return imageContainer;
                    }
                }
                // Under all other conditions, EndNodes are not expandable
                else
                {
                    return imageContainer;
                }
            }
            
            // Otherwise, just make image based on expand/collapse state of temp table record
            if (_record.Expand)
            {
                imageContainer = ImageReference::constructForSymbol(ImageReferenceSymbol::ChevronDown, "@ProjPlan:Expanded").pack();
            }
            else
            {
                imageContainer = ImageReference::constructForSymbol(ImageReferenceSymbol::ChevronUp, "@ProjPlan:Collapsed").pack();
            }
            
            return imageContainer;
        }

]]></Source>
					</Method>
					<Method>
						<Name>getTotalCostPrice</Name>
						<Source><![CDATA[
        display NonNegativeTotal getTotalCostPrice(ProjHierarchyTemp _record)
        {
            // If this record is an estimate, just return the field value
            ProjWBSTaskEstimateUnionView taskEst = _record.joinChild();
            if (taskEst.SourceTableId == tableNum(PSAActivityEstimates))
            {
                PSAActivityEstimates estimateRecord = TaskEstimateUnion_ds.joinedPSAActivityEstimates(taskEst);
                return estimateRecord.TotalCostPrice;
            }
            else if (taskEst.SourceTableId == tableNum(ProjPlanVersion))
            {
                ProjPlanVersion taskRecord = TaskEstimateUnion_ds.joinedProjPlanVersion(taskEst);
                container totals = ProjWorkBreakdownStructureV2FormHelper::getTotalPrices(taskRecord, totalPricesCache);
                return conPeek(totals, 1);
            }
            else
            {
                return 0;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>getTotalSalesPrice</Name>
						<Source><![CDATA[
        display NonNegativeTotal getTotalSalesPrice(ProjHierarchyTemp _record)
        {
            // If this record is an estimate, just return the field value
            ProjWBSTaskEstimateUnionView taskEst = _record.joinChild();
            if (taskEst.SourceTableId == tableNum(PSAActivityEstimates))
            {
                PSAActivityEstimates estimateRecord = TaskEstimateUnion_ds.joinedPSAActivityEstimates(taskEst);
                return estimateRecord.TotalSalesPrice;
            }
            else if (taskEst.SourceTableId == tableNum(ProjPlanVersion))
            {
                ProjPlanVersion taskRecord = TaskEstimateUnion_ds.joinedProjPlanVersion(taskEst);
                container totals = ProjWorkBreakdownStructureV2FormHelper::getTotalPrices(taskRecord, totalPricesCache);
                return conPeek(totals, 2);
            }
            else
            {
                return 0;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged()
        {
            super();
            element.updateEditabilityByRow();
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            boolean doneQuery = false;

            if (projWBSFormEliminateQueryWithNoConditionFlight)
            {
                str filterValue = QuickFilterControl.parmFilterValue();

                if (filterValue)
                {
                    // Execute super to query records by the quick filter values
                    super();

                    // Set filterValue again, as it is cleared by super
                    QuickFilterControl.parmFilterValue(filterValue);

                    doneQuery = true;
                }
            }
            else
            {
                // Execute super to query records by the quick filter values, even if there is no filter value.
                // This is the original code which has been identified as a bug and should only execute
                // when projWBSFormEliminateQueryWithNoConditionFlight is not enabled.
                // Executing this will cause filterHasValue to become true if the quick filter contains value.
                super();
            }

            // Determine if the query needs to be performed with the proper links and ranges.
            // If projWBSFormEliminateQueryWithNoConditionFlight is enabled,
            // rely on the doneQuery boolean, which is true only when the Flight is enabled and filterValue exists.
            // If projWBSFormEliminateQueryWithNoConditionFlight is not enabled,
            // rely on the filterHasValue boolean from the original code identified as a bug.
            if ((projWBSFormEliminateQueryWithNoConditionFlight && !doneQuery)
                || (!projWBSFormEliminateQueryWithNoConditionFlight && !filterHasValue))
            {
                Query query = this.query();

                // Set up temp table datasource
                QueryBuildDataSource hierarchyTempDS = SysQuery::findOrCreateDataSource(query, tableNum(ProjHierarchyTemp));
                SysQuery::findOrCreateRange(hierarchyTempDS, fieldnum(ProjHierarchyTemp, Visible)).value(SysQuery::value(FalseTrue::True));

                // Set up sorting table datasource
                QueryBuildDataSource sortDS = SysQuery::findOrCreateDataSource(query, tableNum(ProjHierarchySorting));

                // Set up relation: ProjHierarchySorting.RecId == ProjHierarchyTemp.RefSortRecId
                sortDS.clearLinks();
                sortDS.addLink(fieldNum(ProjHierarchyTemp, RefSortRecId), fieldNum(ProjHierarchySorting, RecId), hierarchyTempDS.name());

                // Set up ordering with ProjHierarchySorting
                query.clearOrderBy();
                {
                    int maxSortingLevel = currentMaxLevel;
                    for (int i = 1; i <= maxSortingLevel; i++)
                    {
                        sortDS.addOrderByField(fieldName2Id(tableNum(ProjHierarchySorting), 'HierarchyLevel' + int2Str(i)), SortOrder::Ascending);
                    }
                }

                // Set up union datasource
                QueryBuildDataSource taskEstDS = SysQuery::findOrCreateDataSource(query, tableNum(ProjWBSTaskEstimateUnionView));
                taskEstDS.addOrderByField(fieldNum(ProjWBSTaskEstimateUnionView, HierarchyId), SortOrder::Descending);
                taskEstDS.addOrderByField(fieldNum(ProjWBSTaskEstimateUnionView, UnionAllBranchId), SortOrder::Ascending);

                // Set up relation: TaskEstimateUnion.HierarchyTaskId == ProjHierarchyTemp.RefNodeId
                taskEstDS.clearLinks();
                taskEstDS.addLink(fieldNum(ProjHierarchyTemp, RefNodeId), fieldNum(ProjWBSTaskEstimateUnionView, HierarchyTaskId), hierarchyTempDS.name());
            
                // Filter TaskEstimateUnion to only elements in the current hierarchy (or diff hierarchy)
                taskEstDS.clearRanges();
                if (showDifference)
                {
                    taskEstDS.addLink(fieldNum(ProjHierarchyTemp, RefRecId), fieldNum(ProjWBSTaskEstimateUnionView, SourceRecId), hierarchyTempDS.name());
                }
                else
                {
                    taskEstDS.addRange(fieldNum(ProjWBSTaskEstimateUnionView, HierarchyId)).value(SysQuery::value(currentHierarchyId));
                }

                // If estimates are hidden, hide them
                if (ViewMode.selection() != enum2int(ProjWorkBreakdownStructureViewMode::CostEstimates))
                {
                    taskEstDS.addRange(fieldNum(ProjWBSTaskEstimateUnionView, SourceTableId)).value(SysQuery::valueNot(tableNum(PSAActivityEstimates)));
                }
                else
                {
                    // Construct range such that: if the record is an estimate, only show it if the corresponding temp record is expanded
                    taskEstDS.addRange(fieldNum(ProjWBSTaskEstimateUnionView, SourceTableId)).value(strFmt('(%1.%2 != %3) || (%4.%5 = %6)',
                            taskEstDS.name(),
                            fieldStr(ProjWBSTaskEstimateUnionView, SourceTableId),
                            tableNum(PSAActivityEstimates),
                            hierarchyTempDS.name(),
                            fieldStr(ProjHierarchyTemp, Expand),
                            enum2int(FalseTrue::True)));
                }

                QueryRun queryRun = new QueryRun(query);
                this.queryRun(queryRun);

                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TaskEstimateUnion</Name>
				<Methods>
					<Method>
						<Name>joinedProjPlanVersion</Name>
						<Source><![CDATA[
        /// <summary>
        /// Returns the joined ProjPlanVersion record.
        /// NOTE: If data sources on the form are added/removed/reordered, this may have to be updated.
        /// </summary>
        /// <returns>The ProjPlanVersion record that was joined to this.</returns>
        public ProjPlanVersion joinedProjPlanVersion(ProjWBSTaskEstimateUnionView union)
        {
            return union.joinChild().joinChild() as ProjPlanVersion;
        }

]]></Source>
					</Method>
					<Method>
						<Name>joinedPSAActivityEstimates</Name>
						<Source><![CDATA[
        /// <summary>
        /// Returns the joined PSAActivityEstimates record.
        /// NOTE: If data sources on the form are added/removed/reordered, this may have to be updated.
        /// </summary>
        /// <returns>The PSAActivityEstimates record that was joined to this.</returns>
        public PSAActivityEstimates joinedPSAActivityEstimates(ProjWBSTaskEstimateUnionView union)
        {
            return union.joinChild().joinChild().joinChild() as PSAActivityEstimates;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>ProjPlanVersion</Name>
				<Methods>
					<Method>
						<Name>getHierarchyPathId</Name>
						<Source><![CDATA[
        display ProjHierarchyPathID getHierarchyPathId(ProjPlanVersion _record)
        {
            const str doubleSpaceCharacter = '   ';
            str leadingSpace;

            // Estimates don't have a PathId, don't waste cycles computing one
            if (!_record)
            {
                return '';
            }

            for (int i = 1; i < _record.HierarchyLevel; i++)
            {
                leadingSpace += doubleSpaceCharacter;
            }
        
            if (_record.HierarchyId == currentHierarchyId)
            {
                return leadingSpace + _record.PathID;
            }
            else
            {
                ProjHierarchyTemp tempRecord = ProjHierarchyTemp.findByNodeId(_record.HierarchyTaskId);
                if (tempRecord.DiffNumDeletedChildren == 0)
                {
                    return leadingSpace + "@ProjPlan:DiffDeletedTask";
                }
                else if (tempRecord.DiffNumDeletedChildren == 1)
                {
                    return leadingSpace + "@ProjPlan:DiffDeletedParent";
                }
                else
                {
                    return leadingSpace + strFmt("@ProjPlan:DiffDeletedParentMultiple", tempRecord.DiffNumDeletedChildren);
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>getWarningIcon</Name>
						<Source><![CDATA[
        display container getWarningIcon(ProjPlanVersion _record)
        {
            container imageContainer;

            if (Scheduling_Error.visible() && _record.EndNode == FalseTrue::True
                && !ProjPlanVersion::validateTaskDurationDays(_record, calendarStandardWorkDayHours))
            {
                imageContainer = ImageReference::constructForSymbol(ImageReferenceSymbol::Warning).pack();
            }
            
            return imageContainer;
        }

]]></Source>
					</Method>
					<Method>
						<Name>getDiffState</Name>
						<Source><![CDATA[
        display container getDiffState(ProjPlanVersion _record)
        {
            container imageContainer;

            if (_record.HierarchyId == diffHierarchyId)
            {
                imageContainer = ImageReference::constructForSymbol(ImageReferenceSymbol::Delete).pack();
            }
            else
            {
                ProjPlanVersion oldTask = ProjPlanVersion::findByHierarchyAndTaskId(diffHierarchyId, _record.HierarchyTaskId);
    
                if (!oldTask)
                {
                    imageContainer = ImageReference::constructForSymbol(ImageReferenceSymbol::NewSymbol).pack();
                }
                else if (_record.ParentHierarchyTaskId != oldTask.ParentHierarchyTaskId)
                {
                    imageContainer = ImageReference::constructForSymbol(ImageReferenceSymbol::SwitchSymbol).pack();
                }
                else if (_record.TaskSiblingNumber > oldTask.TaskSiblingNumber)
                {
                    imageContainer = ImageReference::constructForSymbol(ImageReferenceSymbol::SortDown).pack();
                }
                else if (_record.TaskSiblingNumber < oldTask.TaskSiblingNumber)
                {
                    imageContainer = ImageReference::constructForSymbol(ImageReferenceSymbol::SortUp).pack();
                }
            }
            
            return imageContainer;
        }

]]></Source>
					</Method>
					<Method>
						<Name>getNoteIcon</Name>
						<Source><![CDATA[
        display container getNoteIcon(ProjPlanVersion _record)
        {
            container imageContainer;

            if (strLen(_record.UserMemo) != 0)
            {
                imageContainer = ImageReference::constructForSymbol(ImageReferenceSymbol::Note).pack();
            }
            
            return imageContainer;
        }

]]></Source>
					</Method>
					<Method>
						<Name>getPredecessorList</Name>
						<Source><![CDATA[
        edit ProjPredecessor getPredecessorList(boolean _set, ProjPlanVersion _record, str _value)
        {
            return element.getPredecessorListString(_record);
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            // Don't attempt to write if we're not looking at a task record
            if (ProjPlanVersion.RecId == 0)
            {
                return;
            }
   
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            // Don't attempt to validate if we're not looking at a task record
            if (ProjPlanVersion.RecId == 0)
            {
                return true;
            }

            return super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>getAssignedResources</Name>
						<Source><![CDATA[
        edit ResAssignedResources getAssignedResources(boolean _set, ProjPlanVersion _record, str _value)
        {
            return element.getAssignedResourceNamesPerTask(_record);
        }

]]></Source>
					</Method>
					<Method>
						<Name>getUnstaffedHours</Name>
						<Source><![CDATA[
        display ResUnstaffedHours getUnstaffedHours(ProjPlanVersion _record)
        {
            return _record.getRemainingEffortHours();
        }

]]></Source>
					</Method>
					<Method>
						<Name>getResourceRole</Name>
						<Source><![CDATA[
        edit ResourceCategoryId getResourceRole(boolean _set, ProjPlanVersion _record, str _value)
        {
            ResourceCategoryId roleId;

            if (_record.ResourceCategory)
            {
                roleId = ResourceCategoryFacade::getId(_record.ResourceCategory);
            }

            return roleId;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>PSAActivityEstimates</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            // Don't attempt to write if we're not looking at an estimate record
            if (PSAActivityEstimates.RecId == 0)
            {
                return;
            }
   
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            // Don't attempt to validate if we're not looking at an estimate record
            if (!PSAActivityEstimates)
            {
                return true;
            }
    
            return super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>getResourceRole</Name>
						<Source><![CDATA[
        edit ResourceCategoryId getResourceRole(boolean _set, PSAActivityEstimates _record, str _value)
        {
            ResourceCategoryId roleId;

            if (_record.ResourceCategory)
            {
                roleId = ResourceCategoryFacade::getId(_record.ResourceCategory);
            }
            return roleId;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>SalesCategory</DataField>
						<Methods>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                return EcoResCategory::lookupCategoryHierarchyRole(
                    _formReferenceControl,
                    EcoResCategoryNamedHierarchyRole::Sales);
            }

]]></Source>
							</Method>
							<Method>
								<Name>resolveReference</Name>
								<Source><![CDATA[
            public Common resolveReference(FormReferenceControl _formReferenceControl)
            {
                return EcoResCategory::resolveCategoryHierarchyRole(
                    _formReferenceControl,
                    EcoResCategoryNamedHierarchyRole::Sales);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>HierarchyTreeTable</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            // No HierarchyTreeTable record will be written for project WBS.
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            //No HierarchyTreeTable record will be written for project WBS.
            return true;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>TrackingViewsButton</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            //We do not want super to be called as we are running custom code here
            //super();
            element.close();
        
            Args args = new Args();
            args.menuItemName("ProjTrackingViews");
            args.parm(ProjPlanVersionDetail::getOldDataModelPublishedHierarchyId(currentHierarchyId));
            args.name(formstr(ProjTrackingViews));
            args.openMode(OpenMode::View);
    
            FormRun projTrackingViews = classFactory.formRunClass(args);
            projTrackingViews.init();
            projTrackingViews.run();
            projTrackingViews.wait();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FormButtonControlCheckInCheckOut</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.publishVersion();
            element.updateDataSources();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FormButtonControlViewPublished</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            showDifference = false;
            element.selectProjectVersion(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FormButtonControlDiscardDraft</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            boolean confirmed = Box::confirm("@ProjPlan:ConfirmDiscardDraft");
            if (confirmed)
            {
                showDifference = false;
                element.selectProjectVersion(true);
                ProjPlanVersionsManager::discardDraft(projPlanVersionDetail.ProjId);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FormButtonControlShowDifference</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.setShowDifference(!showDifference);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FulfillmentNotificationMenuItemButton</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (projTable)
            {
                Args args = new Args();
                args.record(projTable);
                args.caller(element);
                args.menuItemName(menuItemDisplayStr(ResExtendFulfillmentDetailsDialog));
                args.name(formStr(ResExtendFulfillmentDetailsDialog));
                args.openMode(OpenMode::View);
                FormRun formExtendFulfillmentDetailsDialog = classfactory.formRunClass(args);
                formExtendFulfillmentDetailsDialog.init();
                formExtendFulfillmentDetailsDialog.run();
                formExtendFulfillmentDetailsDialog.wait();
    
                element.removeAllAssignedActivityResourcesMap();
                element.updateFulfillmentNotificationControl(false);
                element.updateDataSourcesKeepCursor();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Add</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.addRecords();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Delete</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.deleteRecords();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Outdent</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            // Modifications are disallowed in published mode
            if (isPublished)
            {
                return;
            }

            // Save pending changes
            element.saveCurrentCursor();

            // Backup cursor
            ProjPlanVersion taskCursor;
            taskCursor.RecId = ProjPlanVersion.RecId;

            // Construct a list of all selected tasks
            List selectedTasks = new List(Types::Int64);
            Set invalidatedTotalTasks = new Set(Types::Int64);
            ProjWBSTaskEstimateUnionView currentHierarchyTable = TaskEstimateUnion_ds.getFirst(1) ? TaskEstimateUnion_ds.getFirst(1) : TaskEstimateUnion;
            while (currentHierarchyTable)
            {
                if (currentHierarchyTable.SourceTableId == tableNum(ProjPlanVersion))
                {
                    ProjPlanVersion task = TaskEstimateUnion_ds.joinedProjPlanVersion(currentHierarchyTable);

                    selectedTasks.addEnd(task.RecId);
                    invalidatedTotalTasks.add(task.ParentHierarchyTaskId);
                }
                currentHierarchyTable = TaskEstimateUnion_ds.getNext();
            }
               
            // Outdent the records
            nextSelectionGroup = ProjWorkBreakdownStructureV2FormHelper::outdentTasksV2(
                currentHierarchyId,
                calendarId,
                typeOfWBS,
                ProjHierarchyTemp,
                selectedTasks.getEnumerator(),
                nextSelectionGroup,
                currentMaxLevel,
                calendarStandardWorkDayHours);

            // Invalidate total prices for old parent tasks
            for (SetEnumerator e = invalidatedTotalTasks.getEnumerator(); e.moveNext(); e = e)
            {
                ProjPlanVersion task = ProjPlanVersion::findByHierarchyAndTaskId(currentHierarchyId, e.current());
                element.invalidateTotalPricesRecursiveLazy(task);
            }

            // Refresh view and restore cursor
            element.invalidatePredecessorListStringCache();
            element.updateDataSources();
            
            if (usePositionToRecordFlight)
            {
                ProjPlanVersion_ds.positionToRecord(taskCursor);
            }
            else
            {
                ProjPlanVersion_ds.findRecord(taskCursor);
            }
            
            currentMaxLevel = ProjPlanVersion::getMaxHierarchyLevel(currentHierarchyId);
            
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Indent</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            // Modifications are disallowed in published mode
            if (isPublished)
            {
                return;
            }

            // Save pending changes
            element.saveCurrentCursor();

            // Back up cursor
            ProjPlanVersion taskCursor;
            taskCursor.RecId = ProjPlanVersion.RecId;

            // Construct a list of all selected tasks
            List selectedTasks = new List(Types::Int64);
            ProjWBSTaskEstimateUnionView currentHierarchyTable = TaskEstimateUnion_ds.getFirst(true) ? TaskEstimateUnion_ds.getFirst(true) : TaskEstimateUnion;
            while (currentHierarchyTable)
            {
                if (currentHierarchyTable.SourceTableId == tableNum(ProjPlanVersion))
                {
                    selectedTasks.addEnd(currentHierarchyTable.SourceRecId);
                }
                currentHierarchyTable = TaskEstimateUnion_ds.getNext();
            }
               
            // Indent the records
            nextSelectionGroup = ProjWorkBreakdownStructureV2FormHelper::indentTasksV2(
                currentHierarchyId,
                calendarId,
                typeOfWBS,
                ProjHierarchyTemp,
                selectedTasks.getEnumerator(),
                nextSelectionGroup,
                currentMaxLevel,
                calendarStandardWorkDayHours);

            // Invalidate parent task total prices
            for (ListEnumerator e = selectedTasks.getEnumerator(); e.moveNext(); e = e)
            {
                ProjPlanVersion task = ProjPlanVersion::findByRecId(e.current());
                task = ProjPlanVersion::findByHierarchyAndTaskId(task.HierarchyId, task.ParentHierarchyTaskId);
                element.invalidateTotalPricesRecursiveLazy(task);
            }

            // Refresh view and restore cursor
            element.invalidatePredecessorListStringCache();
            element.updateDataSources();

            if (usePositionToRecordFlight)
            {
                ProjPlanVersion_ds.positionToRecord(taskCursor);
            }
            else
            {
                ProjPlanVersion_ds.findRecord(taskCursor);
            }
            
            currentMaxLevel = ProjPlanVersion::getMaxHierarchyLevel(currentHierarchyId);
            
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MoveUp</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            // Modifications are disallowed in published mode
            if (isPublished)
            {
                return;
            }

            // Save pending changes
            element.saveCurrentCursor();

            ProjWorkBreakdownStructureV2FormHelper::swapTasksV2(
                currentHierarchyId,
                TaskEstimateUnion.HierarchyTaskId,
                -1,
                ProjHierarchyTemp.getPhysicalTableName());

            element.invalidatePredecessorListStringCache();
            element.updateDataSourcesKeepCursor();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MoveDown</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            // Modifications are disallowed in published mode
            if (isPublished)
            {
                return;
            }

            // Save pending changes
            element.saveCurrentCursor();

            ProjWorkBreakdownStructureV2FormHelper::swapTasksV2(
                currentHierarchyId,
                TaskEstimateUnion.HierarchyTaskId,
                1,
                ProjHierarchyTemp.getPhysicalTableName());

            element.invalidatePredecessorListStringCache();
            element.updateDataSourcesKeepCursor();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CollapseAll</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            ProjWorkBreakdownStructureV2FormHelper::collapseAll(ProjHierarchyTemp.getPhysicalTableName());
            element.updateDataSources();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpandAll</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            ProjWorkBreakdownStructureV2FormHelper::expandAllV2(
                ProjHierarchyTemp.getPhysicalTableName(),
                showDifference || ViewMode.selection() == enum2Int(ProjWorkBreakdownStructureViewMode::CostEstimates));
            element.updateDataSourcesKeepCursor();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpandToLevel1</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.expandTo(1);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpandToLevel2</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.expandTo(2);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpandToLevel3</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.expandTo(3);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpandToLevel4</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.expandTo(4);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpandToLevel5</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.expandTo(5);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpandToLevel6</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.expandTo(6);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpandToLevel7</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.expandTo(7);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpandToLevel8</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.expandTo(8);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpandToLevel9</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.expandTo(9);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Details</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.saveCurrentCursor();
   
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Import</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
     
            element.saveCurrentCursor();

            // Check if the selected task has assigned resources
            if (ProjWorkBreakdownStructureV2FormHelper::taskHasResourcesAssigned(ProjPlanVersion))
            {
                error(strFmt("@ProjPlan:ResourcesAssignedForSummaryTaskError", ProjPlanVersion.TaskName));
                return;
            }

            // Perform the import
            Args args = new Args(element);
            args.parmEnumeration(NoYes::Yes);
            args.record(ProjPlanVersion);
            if (!HierarchyTemplateCopyingDialog_Proj::main(args))
            {
                return;
            }

            ProjPlanVersion.reread();

            // Create temp table records for all new tasks
            ProjWorkBreakdownStructureV2FormHelper::createMissingTempRecords(currentHierarchyId, ProjHierarchyTemp.getPhysicalTableName());
   
            // Expand the temp table, if it's already been expanded
            if (ProjHierarchyTemp.Expand)
            {
                ProjWorkBreakdownStructureV2FormHelper::expandTaskV2(ProjPlanVersion, ProjHierarchyTemp.getPhysicalTableName());
            }
            currentMaxLevel = ProjPlanVersion::getMaxHierarchyLevel(currentHierarchyId);

            element.invalidatePredecessorListStringCache();
            element.invalidateTotalPricesRecursive(ProjPlanVersion);
            element.updateDataSourcesKeepCursor();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Export</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.saveCurrentCursor();
            Args args = new Args(element);
            args.parmEnumeration(NoYes::No);
            args.record(ProjPlanVersion);
            HierarchyTemplateCopyingDialog_Proj::main(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Attachments</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.saveCurrentCursor();

            Args args = new Args();
            HierarchyTreeTable htt = HierarchyTreeTable::findRecId(ProjPlanVersion.HierarchyTreeTableRefRecId);
            
            args.name(formStr(DocuAttachment));
            args.record(htt);
            args.record().company(curExt());

            FormRun formRun = classfactory.formRunClass(args);
            formRun.init();
            formRun.run();
            formRun.wait();

            element.updateDataSourcesKeepCursor();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FixAllScheduleErrors</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.saveCurrentCursor();

            super();

            if (ProjWorkBreakdownStructureV2FormHelper::verifyAndFixWorkBreakdownStructureSchedule(
                ProjPlanVersion,
                ProjHierarchyTemp,
                calendarId,
                typeOfWBS,
                AutoScheduling.checked(),
                calendarStandardWorkDayHours))
            {
                element.updateDataSourcesKeepCursor();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FixSelectedTasks</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.saveCurrentCursor();

            super();

            if (ProjWorkBreakdownStructureV2FormHelper::verifyAndFixTaskSchedule(
                ProjPlanVersion,
                ProjHierarchyTemp,
                calendarId,
                typeOfWBS,
                AutoScheduling.checked(),
                calendarStandardWorkDayHours))
            {
                element.updateDataSourcesKeepCursor();
            }

        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AssignResource</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (ProjPlanVersion.EndNode == FalseTrue::True
                && (typeOfWBS == ProjWBSType::Project && isPublished) || (typeOfWBS == ProjWBSType::ProjectQuotation))
            {
                element.saveCurrentCursor();
                ProjWorkBreakdownStructureV2FormHelper::launchWBSResourceAssignmentForm(ProjPlanVersion);
                element.getAssignedResourcesPerTask(ProjPlanVersion, true);
                element.updateDataSourcesKeepCursor();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AssignmentDetails</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (ProjPlanVersion.EndNode == FalseTrue::True
                && (typeOfWBS == ProjWBSType::Project && isPublished) || (typeOfWBS == ProjWBSType::ProjectQuotation))
            {
                element.saveCurrentCursor();
                ActivityRecId activity = ProjTask::getActivityRecId(ProjPlanVersion.HierarchyId, ProjPlanVersion.HierarchyTaskId);
                Args args = new Args();
                args.parm(int642Str(activity));
                args.menuitemname(menuItemDisplayStr(ResResourceAssignmentDetailsMenuItem));
                args.name(formStr(ResResourceAssignmentDetailsForm));
                FormRun formRun =  ClassFactory.formRunClass(args);
                formRun.init();
                formRun.run();
                formRun.wait();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GenerateTeam</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            if (typeOfWBS == ProjWBSType::Project && isPublished)
            {
                ProjWorkBreakdownStructureV2FormHelper::proposePlannedResource(ProjPlanVersion.HierarchyId);
                element.removeAllAssignedActivityResourcesMap();
                element.updateDataSourcesKeepCursor();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProductDimension</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            OpenMode openMode = OpenMode::View;

            // Allow edit if this it is not a proejct or if this project is in draft mode
            if (typeOfWBS != ProjWBSType::Project || !isPublished)
            {
                openMode = OpenMode::Edit;
            }
                
            this.openMode(openMode);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>QuickFilterControl</Name>
				<Type>Custom</Type>
				<Methods>
					<Method>
						<Name>quickFilterUpdated</Name>
						<Source><![CDATA[
        public void quickFilterUpdated(str _value, int _controlId)
        {
            filterHasValue = (_value != '');
            element.updateControls();
            super(_value, _controlId);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ViewMode</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        public int selectionChange()
        {
            if (this.selection() == enum2Int(ProjWorkBreakdownStructureViewMode::Scheduling))
            {
                element.setViewMode(ProjWorkBreakdownStructureViewMode::Scheduling);
            }
            else if (this.selection() == enum2Int(ProjWorkBreakdownStructureViewMode::CostEstimates))
            {
                element.setViewMode(ProjWorkBreakdownStructureViewMode::CostEstimates);
            }

            return super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ShowScheduleErrors</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
    
            if (ret)
            {
                Scheduling_Error.visible(ShowScheduleErrors.checked());
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>State</Name>
				<Type>Image</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            // Only allowed to expand task records
            if (!ProjPlanVersion)
            {
                return;
            }

            // Only allowed to expand records for the current hierarchy (required because of difference view)
            if (ProjPlanVersion.HierarchyId != currentHierarchyId)
            {
                return;
            }

            if (ProjHierarchyTemp.Expand == FalseTrue::False)
            {
                ProjWorkBreakdownStructureV2FormHelper::expandTaskV2(
                    ProjPlanVersion,
                    ProjHierarchyTemp.getPhysicalTableName(),
                    showDifference || ViewMode.selection() == enum2Int(ProjWorkBreakdownStructureViewMode::CostEstimates));
            }
            else if (ProjHierarchyTemp.Expand == FalseTrue::True)
            {
                ProjWorkBreakdownStructureV2FormHelper::collapseTaskV2(
                    ProjPlanVersion,
                    ProjHierarchySorting,
                    ProjHierarchyTemp.getPhysicalTableName());
            }
    
            element.updateDataSourcesKeepCursor();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Scheduling_TaskName</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
    
            if (ret)
            {
                //Update corresponding task record for WBS of type quotation.
                ProjWorkBreakdownStructureV2FormHelper::updateCorrespondingTaskRecord(ProjPlanVersion, typeOfWBS);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Scheduling_Predecessors</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            super();

            ProjPlanVersion currentRecord = ProjPlanVersion;

            Args args = new Args(formStr(ProjWBSPredecessorsSelectionPageV2));
            args.parm(currentHierarchyId);
            args.record(currentRecord);
            args.caller(element);

            FormRun lookupForm = classfactory.formRunClass(args);
            lookupForm.init();
            this.performFormLookup(lookupForm);
            lookupForm.wait();
   
            ProjPlanVersion::updateStartDateFromPredecessors(calendarId, currentRecord);

            // Invalidate the predecessor string cache just for this record
            element.invalidatePredecessorListStringCacheForTask(currentRecord.RecId);
            element.updateDataSourcesKeepCursor();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Scheduling_Category</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            ProjPlanVersion currentTask = ProjPlanVersion;
            boolean ret = super();

            if (ret)
            {
                ProjPlanVersion::updateTaskCategory(calendarId, currentTask, typeOfWBS);
                element.invalidateTotalPricesRecursive(currentTask);
                element.updateDataSourcesKeepCursor();
            }
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Scheduling_Effort</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            ProjPlanVersion currentTask = ProjPlanVersion;
            boolean ret = super();

            if (ret)
            {
                ProjPlanVersion::postUserChangeEffortV2(calendarId, currentTask, AutoScheduling.checked(), calendarStandardWorkDayHours);
                element.invalidateTotalPricesRecursive(currentTask);
                element.updateDataSourcesKeepCursor();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Scheduling_StartDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = false;

            if (this.validate())
            {
                ProjPlanVersion currentTask = ProjPlanVersion;

                ret = super();

                if (ProjPlanVersion::postUserChangeStartDate(calendarId, currentTask))
                {
                    element.invalidateTotalPricesRecursive(currentTask);
                    element.updateDataSourcesKeepCursor();
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Scheduling_FinishDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = false;

            if (this.validate())
            {
                ProjPlanVersion currentTask = ProjPlanVersion;

                ret = super();

                // Invalidate total prices for the task
                ProjPlanVersion::postUserChangeFinishDateV2(calendarId, currentTask, AutoScheduling.checked(), calendarStandardWorkDayHours);
                element.invalidateTotalPricesRecursive(currentTask);

                element.updateDataSourcesKeepCursor();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Scheduling_Duration</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            ProjPlanVersion currentTask = ProjPlanVersion;

            // Value cannot be smaller than 1.
            if (this.realValue() < 1.0)
            {
                this.realValue(1.0);
            }

            boolean ret = super();

            if (ret)
            {
                // Invalidate total prices for the task
                ProjPlanVersion::postUserChangeDurationV2(calendarId, currentTask, AutoScheduling.checked(), calendarStandardWorkDayHours);
                element.invalidateTotalPricesRecursive(currentTask);

                element.updateDataSourcesKeepCursor();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Scheduling_NumberOfResources</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            ProjPlanVersion currentTask = ProjPlanVersion;

            // Value cannot be smaller than 1.
            if (this.realValue() < 1.0)
            {
                this.realValue(1.0);
            }

            boolean ret = super();

            if (ret)
            {
                ProjPlanVersion::postUserChangeNumberOfResourcesV2(calendarId, currentTask, AutoScheduling.checked(), calendarStandardWorkDayHours);
                element.invalidateTotalPricesRecursive(currentTask);
                element.updateDataSourcesKeepCursor();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Scheduling_ResourceRole</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            element.resourceCategoryLookup(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            ProjPlanVersion currentTask = ProjPlanVersion;
            PSASchedRoleId roleId = this.text();
            
            ProjPlanVersion::updateResourceCategory(calendarId, currentTask, roleId, typeOfWBS);
            element.invalidateTotalPricesRecursive(currentTask);
            element.updateDataSourcesKeepCursor();

            return true;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Scheduling_Resource</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            ProjPlanVersion.update();
            ProjWBSActivityResourceLookupContext activityResourceLookupContext = ProjWBSActivityResourceLookupContext::construct();
            activityResourceLookupContext.parmPlanVersion(ProjPlanVersion);
            if (assignedActivityResourcesPerTaskMap.exists(ProjPlanVersion.RecId))
            {
                activityResourceLookupContext.parmTaskAssignedActivityResource(assignedActivityResourcesPerTaskMap.lookup(ProjPlanVersion.RecId));
            }
            activityResourceLookupContext.selectionsReady += eventhandler(element.activityResourceLookupReady);
            
            Args args = new Args(formStr(ProjWBSActivityResourceLookup));
            args.caller(activityResourceLookupContext);
            FormRun lookupForm = classfactory.formRunClass(args);
            lookupForm.init();
            this.performFormLookup(lookupForm);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Estimate_ProjTransType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            PSAActivityEstimates.updateProjTransTypeFromTaskV2(this.selection(), AutoScheduling.checked());

            // Invalidate total prices for the parent task
            ProjPlanVersion parentTask = ProjPlanVersion::findByHierarchyAndTaskId(PSAActivityEstimates.ProjPlanHierarchyId, PSAActivityEstimates.ProjPlanHierarchyTaskId);
            element.invalidateTotalPricesRecursive(parentTask);

            element.updateDataSourcesKeepCursor();
            
            Estimate_ResourceCategory.allowEdit(PSAActivityEstimates.ProjTransType == QuotationProjTransType::Hour);
            Estimate_Quantity.allowEdit(PSAActivityEstimates.ProjTransType != QuotationProjTransType::Fee);
            Estimate_UnitCostPrice.allowEdit(PSAActivityEstimates.ProjTransType != QuotationProjTransType::Fee);

            if (PSAActivityEstimates.ProjTransType == QuotationProjTransType::Item)
            {
                Estimate_ItemId.allowEdit(PSAActivityEstimates.SalesCategory == 0);
                Estimate_SalesCategory.allowEdit(PSAActivityEstimates.ItemId == '');
            }

            return true;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Estimate_ProjCategoryId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            PSAActivityEstimates.updateProjCategoryIdFromTaskV2(this.text(), AutoScheduling.checked());

            // Invalidate total prices for the parent task
            ProjPlanVersion parentTask = ProjPlanVersion::findByHierarchyAndTaskId(PSAActivityEstimates.ProjPlanHierarchyId, PSAActivityEstimates.ProjPlanHierarchyTaskId);
            element.invalidateTotalPricesRecursive(parentTask);

            element.updateDataSourcesKeepCursor();
            return true;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Estimate_ResourceCategory</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            element.resourceCategoryLookup(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            PSAActivityEstimates.updateResourceCategoryFromTaskV2(PSASchedRole::findById(this.text()).RecId, AutoScheduling.checked());
            element.updateDataSourcesKeepCursor();
            return true;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Estimate_Quantity</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            PSAActivityEstimates.updateQuantityFromTaskV2(this.realValue(), AutoScheduling.checked());

            // Invalidate total prices for the parent task
            ProjPlanVersion parentTask = ProjPlanVersion::findByHierarchyAndTaskId(PSAActivityEstimates.ProjPlanHierarchyId, PSAActivityEstimates.ProjPlanHierarchyTaskId);
            element.invalidateTotalPricesRecursive(parentTask);
            
            element.updateDataSourcesKeepCursor();
            return true;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Estimate_UnitCostPrice</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            PSAActivityEstimates.updateUnitCostPriceFromTaskV2(this.realValue(), AutoScheduling.checked());

            // Invalidate total prices for the parent task
            ProjPlanVersion parentTask = ProjPlanVersion::findByHierarchyAndTaskId(PSAActivityEstimates.ProjPlanHierarchyId, PSAActivityEstimates.ProjPlanHierarchyTaskId);
            element.invalidateTotalPricesRecursive(parentTask);

            element.updateDataSourcesKeepCursor();
            return true;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Estimate_UnitSalesPrice</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            // Invalidate total prices for the parent task
            ProjPlanVersion parentTask = ProjPlanVersion::findByHierarchyAndTaskId(PSAActivityEstimates.ProjPlanHierarchyId, PSAActivityEstimates.ProjPlanHierarchyTaskId);
            element.invalidateTotalPricesRecursive(parentTask);
    
            element.updateDataSourcesKeepCursor();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Estimate_ItemId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            Estimate_SalesCategory.allowEdit(!this.valueStr());
            ProductDimension.enabled(this.valueStr() != '');

            // Invalidate total prices for the parent task
            ProjPlanVersion parentTask = ProjPlanVersion::findByHierarchyAndTaskId(PSAActivityEstimates.ProjPlanHierarchyId, PSAActivityEstimates.ProjPlanHierarchyTaskId);
            element.invalidateTotalPricesRecursive(parentTask);

            element.updateDataSourcesKeepCursor();

            PSAActivityEstimates.updateUnitCostPriceFromTaskV2(PSAActivityEstimates.UnitCostPrice, AutoScheduling.checked());

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Estimate_SalesCategory</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            Estimate_ItemId.allowEdit(!this.value());

            // Invalidate total prices for the parent task
            ProjPlanVersion parentTask = ProjPlanVersion::findByHierarchyAndTaskId(PSAActivityEstimates.ProjPlanHierarchyId, PSAActivityEstimates.ProjPlanHierarchyTaskId);
            element.invalidateTotalPricesRecursive(parentTask);

            element.updateDataSourcesKeepCursor();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>ProjHierarchyTemp</Name>
			<Table>ProjHierarchyTemp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DiffNumDeletedChildren</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Expand</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefNodeId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefSortRecId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefTableId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SelectionGroup</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Visible</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TaskEstimateUnion</Name>
			<Table>ProjWBSTaskEstimateUnionView</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyTaskId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceRecId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceTableId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>ProjHierarchyTemp</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ProjPlanVersion</Name>
			<Table>ProjPlanVersion</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityTaskTimeType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndNode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyTaskId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyTreeTableRefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsCategoryMandatory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsTaskClosed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsTaskMandatory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MSPID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumberOfResources</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentHierarchyTaskId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PathId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaskAssignedHours</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaskCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaskCostAtComplete</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaskDuration</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaskEffort</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaskEffortAtComplete</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaskEffortToComplete</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaskFinishDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaskName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaskPriority</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaskProjectedCost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaskProjectedEndDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaskProjectedRevenue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaskSchedulingStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaskSiblingNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaskStartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaskStatus</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UserMemo</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TaskEstimateUnion</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>PSAActivityEstimates</Name>
			<Table>PSAActivityEstimates</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EstimateNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LinePropertyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjCategoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjPlanHierarchyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjPlanHierarchyTaskId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjTransType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Quantity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Resource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesLineRefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalCostPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalSalesPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UnitCostPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UnitSalesPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Worker</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TaskEstimateUnion</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ProjHierarchySorting</Name>
			<Table>ProjHierarchySorting</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel1</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel10</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel11</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel12</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel13</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel14</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel15</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel16</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel17</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel18</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel19</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel2</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel20</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel21</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel22</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel23</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel24</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel25</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel26</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel27</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel28</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel29</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel3</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel30</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel4</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel5</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel6</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel7</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel8</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel9</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefNodeId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefTableId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Type</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>ProjHierarchyTemp</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HierarchyTreeTable</Name>
			<Table>HierarchyTreeTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ElementNodeType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ElementNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsNodeExpanded</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsRequired</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Level</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MSPID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentElementNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Path</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAElementNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAHierarchyLevelType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSALevelDescription</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSALevelName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSANameLink</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAQuotationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSARefRecID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASubproject</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSATask</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceElementNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SiblingNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TemplateRecId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>ProjPlanVersion</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS338946</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">SimpleList</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>NavButtons</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TrackingViewsButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@Proj:TrackingViews</Text>
							</AxFormControl>
						</Controls>
						<Caption>@ProjPlan:Navigation</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>PublishButtons</Name>
						<NeededPermission>Create</NeededPermission>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>FormButtonControlCheckInCheckOut</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@ProjPlan:CheckIn</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>FormButtonControlViewPublished</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@ProjPlan:ShowPublished</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>FormButtonControlDiscardDraft</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@ProjPlan:DiscardDraft</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>FormButtonControlShowDifference</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@ProjPlan:ShowDifference</Text>
								<ToggleButton>Check</ToggleButton>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@ProjPlan:CheckIn</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ResourceFulfillment</Name>
						<NeededPermission>Create</NeededPermission>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>FulfillmentNotificationMenuItemButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Enabled>No</Enabled>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>ResExtendFulfillmentDetailsDialog</MenuItemName>
								<NormalImage>Warning</NormalImage>
								<OpenMode>View</OpenMode>
								<Text>@Res:FulfillmentNotification</Text>
							</AxFormControl>
						</Controls>
						<Caption>@Res:ResourceFulfillment</Caption>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>HeaderGroup</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Header</Name>
						<Skip>Yes</Skip>
						<Type>String</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>headerText</DataMethod>
						<Label>@SYS318380</Label>
						<Style>TitleField</Style>
						<ViewEditMode>View</ViewEditMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>EntityStatus</Name>
						<ExtendedStyle>entityStatus</ExtendedStyle>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>StatusString</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Skip>Yes</Skip>
								<Type>String</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Alignment>Left</Alignment>
								<Label>@Proj:Status</Label>
								<ShowLabel>No</ShowLabel>
								<ViewEditMode>View</ViewEditMode>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalRight</ArrangeMethod>
						<Breakable>No</Breakable>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<Style>DetailTitleContainer</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>WBSFormGroupControl</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>ToolbarList</Pattern>
				<PatternVersion>1.2</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneControl">
						<Name>ExecuteGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ActionPane</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>SchedulingButtonsGroupControl</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>SizeToAvailable</HeightMode>
								<NeededPermission>Create</NeededPermission>
								<Type>ButtonGroup</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>Add</Name>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
										<MultiSelect>No</MultiSelect>
										<NeedsRecord>Yes</NeedsRecord>
										<NormalImage>Add</NormalImage>
										<Text>@ProjPlan:New</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>Delete</Name>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
										<MultiSelect>Yes</MultiSelect>
										<NeedsRecord>Yes</NeedsRecord>
										<NormalImage>Delete</NormalImage>
										<Text>@ProjPlan:Delete</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>Outdent</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
										<MultiSelect>Yes</MultiSelect>
										<NeedsRecord>Yes</NeedsRecord>
										<NormalImage>DecreaseIndent</NormalImage>
										<Text>@ProjPlan:Outdent</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>Indent</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
										<MultiSelect>Yes</MultiSelect>
										<NeedsRecord>Yes</NeedsRecord>
										<NormalImage>IncreaseIndent</NormalImage>
										<Text>@ProjPlan:Indent</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>MoveUp</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
										<MultiSelect>No</MultiSelect>
										<NeedsRecord>Yes</NeedsRecord>
										<NormalImage>SortUp</NormalImage>
										<Text>@ProjPlan:MoveUp</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>MoveDown</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
										<MultiSelect>No</MultiSelect>
										<NeedsRecord>Yes</NeedsRecord>
										<NormalImage>SortDown</NormalImage>
										<Text>@ProjPlan:MoveDown</Text>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalRight</ArrangeMethod>
								<ColumnsMode>Fill</ColumnsMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>AlwaysEnableButtonsGroup</Name>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>ButtonGroup</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuButtonControl">
										<Name>ExpandTo</Name>
										<Type>MenuButton</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>CollapseAll</Name>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@ProjPlan:CollapseAll</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>ExpandAll</Name>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@ProjPlan:ExpandAll</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>ExpandToLevel1</Name>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@ProjPlan:HierarchyLevel1</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>ExpandToLevel2</Name>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@ProjPlan:HierarchyLevel2</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>ExpandToLevel3</Name>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@ProjPlan:HierarchyLevel3</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>ExpandToLevel4</Name>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@ProjPlan:HierarchyLevel4</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>ExpandToLevel5</Name>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@ProjPlan:HierarchyLevel5</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>ExpandToLevel6</Name>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@ProjPlan:HierarchyLevel6</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>ExpandToLevel7</Name>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@ProjPlan:HierarchyLevel7</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>ExpandToLevel8</Name>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@ProjPlan:HierarchyLevel8</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>ExpandToLevel9</Name>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@ProjPlan:HierarchyLevel9</Text>
											</AxFormControl>
										</Controls>
										<Text>@ProjPlan:ExpandTo</Text>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalRight</ArrangeMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>NonTemplateButtonsGroupControl</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>ButtonGroup</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>Details</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>MenuFunctionButton</Type>
										<FormControlExtension
											i:nil="true" />
										<DataSource>ProjPlanVersion</DataSource>
										<MenuItemName>ProjWBSActivityDetails</MenuItemName>
										<MultiSelect>No</MultiSelect>
										<Text>@ProjPlan:Details</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>Import</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<NeededPermission>Create</NeededPermission>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
										<MultiSelect>No</MultiSelect>
										<NormalImage>Import</NormalImage>
										<Text>@ProjPlan:Import</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>Export</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<NeededPermission>Create</NeededPermission>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
										<MultiSelect>No</MultiSelect>
										<NormalImage>Export</NormalImage>
										<Text>@ProjPlan:Export</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>Attachments</Name>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@ProjPlan:Attachments</Text>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalRight</ArrangeMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>AutoSchedulingGroupControl</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<NeededPermission>Create</NeededPermission>
								<Type>ButtonGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuButtonControl">
										<Name>AutoSchedulingMenuButtonControl</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>MenuButton</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>FixAllScheduleErrors</Name>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@ProjPlan:FixAllScheduleErrors</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>FixSelectedTasks</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@ProjPlan:FixSelectedTasks</Text>
											</AxFormControl>
										</Controls>
										<Text>@ProjPlan:AutoScheduling</Text>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalRight</ArrangeMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>ResourceSchedulingGroupControl</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<NeededPermission>Create</NeededPermission>
								<Type>ButtonGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuButtonControl">
										<Name>ResourceMenuButtonControl</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>MenuButton</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>AssignResource</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>MenuFunctionButton</Type>
												<FormControlExtension
													i:nil="true" />
												<MenuItemName>ResWBSResourceAssignment</MenuItemName>
												<MultiSelect>No</MultiSelect>
												<Text>@ProjPlan:LaunchAssignmentForm</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>AssignmentDetails</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>MenuFunctionButton</Type>
												<FormControlExtension
													i:nil="true" />
												<MenuItemName>ResResourceAssignmentDetailsMenuItem</MenuItemName>
												<MultiSelect>No</MultiSelect>
												<Text>@Res:AssignmentDetails</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>GenerateTeam</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@ProjPlan:AutoGenerateTeam</Text>
											</AxFormControl>
										</Controls>
										<Text>@Res:Resource</Text>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalRight</ArrangeMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>ItemButtonsGroupControl</Name>
								<Type>ButtonGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>ProductDimension</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>MenuFunctionButton</Type>
										<FormControlExtension
											i:nil="true" />
										<DataSource>PSAActivityEstimates</DataSource>
										<MenuItemName>ProjProductDimensions</MenuItemName>
										<MultiSelect>No</MultiSelect>
										<Text>@ProjPlan:ProductDimension</Text>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalRight</ArrangeMethod>
							</AxFormControl>
						</Controls>
						<Style>Strip</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Filter</Name>
						<Pattern>CustomFilters</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>Group</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl>
								<Name>QuickFilterControl</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<FormControlExtension>
									<Name>QuickFilterControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>targetControlName</Name>
											<Type>String</Type>
											<Value>WBSGrid</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>placeholderText</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>defaultColumnName</Name>
											<Type>String</Type>
											<Value>ProjPlanVersion_TaskName</Value>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>ViewMode</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ComboBox</Type>
								<FormControlExtension
									i:nil="true" />
								<EnumType>ProjWorkBreakdownStructureViewMode</EnumType>
								<Label>View</Label>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>AutoScheduling</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ExtendedStyle>checkbox_asRadio</ExtendedStyle>
								<Type>CheckBox</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@ProjPlan:AutoScheduling</Label>
								<Value>1</Value>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>ShowScheduleErrors</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ExtendedStyle>checkbox_asRadio</ExtendedStyle>
								<Type>CheckBox</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@ProjPlan:ShowScheduleErrors</Label>
								<Value>1</Value>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<FrameType>None</FrameType>
						<Style>CustomFilter</Style>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>WBSGrid</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Grid</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormImageControl">
								<Name>State</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Image</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>getHierarchyStateImage</DataMethod>
								<DataSource>ProjHierarchyTemp</DataSource>
								<Label>@Proj:HierarchyState</Label>
								<NormalImage>Tag</NormalImage>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>PathId</Name>
								<AllowEdit>No</AllowEdit>
								<Type>String</Type>
								<Width>100</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>getHierarchyPathId</DataMethod>
								<DataSource>ProjPlanVersion</DataSource>
								<ViewEditMode>View</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormImageControl">
								<Name>Scheduling_DiffState</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Image</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>getDiffState</DataMethod>
								<DataSource>ProjPlanVersion</DataSource>
								<Label>@ProjPlan:DiffType</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormImageControl">
								<Name>Scheduling_Error</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Image</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>getWarningIcon</DataMethod>
								<DataSource>ProjPlanVersion</DataSource>
								<Label>@ProjPlan:SchedulingError</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormImageControl">
								<Name>Scheduling_Note</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Image</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>getNoteIcon</DataMethod>
								<DataSource>ProjPlanVersion</DataSource>
								<Label>@ProjPlan:Note</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Scheduling_TaskName</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<Width>200</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>TaskName</DataField>
								<DataSource>ProjPlanVersion</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Scheduling_Predecessors</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<Width>100</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>getPredecessorList</DataMethod>
								<DataSource>ProjPlanVersion</DataSource>
								<LookupButton>Always</LookupButton>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Scheduling_Category</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<Width>150</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>TaskCategory</DataField>
								<DataSource>ProjPlanVersion</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>Scheduling_Effort</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<Width>100</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>TaskEffort</DataField>
								<DataSource>ProjPlanVersion</DataSource>
								<ShowZero>Yes</ShowZero>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>Scheduling_StartDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Date</Type>
								<Width>100</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>TaskStartDate</DataField>
								<DataSource>ProjPlanVersion</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>Scheduling_FinishDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Date</Type>
								<Width>100</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>TaskFinishDate</DataField>
								<DataSource>ProjPlanVersion</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>Scheduling_Duration</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<Width>50</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>TaskDuration</DataField>
								<DataSource>ProjPlanVersion</DataSource>
								<ShowZero>No</ShowZero>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>Scheduling_NumberOfResources</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<Width>50</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>NumberOfResources</DataField>
								<DataSource>ProjPlanVersion</DataSource>
								<ShowZero>No</ShowZero>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Scheduling_ResourceRole</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<Width>150</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>getResourceRole</DataMethod>
								<DataSource>ProjPlanVersion</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Scheduling_Resource</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<Width>200</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>getAssignedResources</DataMethod>
								<DataSource>ProjPlanVersion</DataSource>
								<LookupButton>Always</LookupButton>
								<LookupOnly>Yes</LookupOnly>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>Scheduling_SchedulingStatus</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ComboBox</Type>
								<Width>100</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>TaskSchedulingStatus</DataField>
								<DataSource>ProjPlanVersion</DataSource>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>Scheduling_UnstaffedHours</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<Width>80</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>getUnstaffedHours</DataMethod>
								<DataSource>ProjPlanVersion</DataSource>
								<ShowZero>Yes</ShowZero>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>Estimate_ProjTransType</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ComboBox</Type>
								<Width>100</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>ProjTransType</DataField>
								<DataSource>PSAActivityEstimates</DataSource>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Estimate_Description</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<Width>100</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>Description</DataField>
								<DataSource>PSAActivityEstimates</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Estimate_ProjCategoryId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<Width>150</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>ProjCategoryId</DataField>
								<DataSource>PSAActivityEstimates</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Estimate_ResourceCategory</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<Width>150</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>getResourceRole</DataMethod>
								<DataSource>PSAActivityEstimates</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>Estimate_Quantity</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<Width>100</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>Quantity</DataField>
								<DataSource>PSAActivityEstimates</DataSource>
								<ShowZero>No</ShowZero>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>Estimate_UnitCostPrice</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<Width>100</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>UnitCostPrice</DataField>
								<DataSource>PSAActivityEstimates</DataSource>
								<ShowZero>No</ShowZero>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>Estimate_UnitSalesPrice</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<Width>100</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>UnitSalesPrice</DataField>
								<DataSource>PSAActivityEstimates</DataSource>
								<ShowZero>No</ShowZero>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>Estimate_TotalCostPrice</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<NeededPermission>Manual</NeededPermission>
								<Type>Real</Type>
								<Width>100</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>getTotalCostPrice</DataMethod>
								<DataSource>ProjHierarchyTemp</DataSource>
								<Label>@PSA11068</Label>
								<ShowZero>No</ShowZero>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>Estimate_TotalSalesPrice</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<NeededPermission>Manual</NeededPermission>
								<Type>Real</Type>
								<Width>100</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>getTotalSalesPrice</DataMethod>
								<DataSource>ProjHierarchyTemp</DataSource>
								<Label>@PSA11067</Label>
								<ShowZero>No</ShowZero>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Estimate_ItemId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<Width>100</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>ItemId</DataField>
								<DataSource>PSAActivityEstimates</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>Estimate_SalesCategory</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ReferenceGroup</Type>
								<Width>100</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<DataSource>PSAActivityEstimates</DataSource>
								<ReferenceField>SalesCategory</ReferenceField>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Estimate_LinePropertyId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<Width>100</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>LinePropertyId</DataField>
								<DataSource>PSAActivityEstimates</DataSource>
							</AxFormControl>
						</Controls>
						<DataSource>ProjHierarchyTemp</DataSource>
						<Style>Tabular</Style>
					</AxFormControl>
				</Controls>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>