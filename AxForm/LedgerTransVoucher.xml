<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>LedgerTransVoucher</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
using Microsoft.Dynamics.AX.Framework.Utilities.UrlHelper;

[Form]
public final class LedgerTransVoucher extends FormRun implements FinTagIShowInactiveTags
{
    QueryRun                            queryRun;

    GeneralJournalAccountEntryZakat_SA  generalJournalAccountEntryZakat;
    boolean                             fromZakatMenu;
    boolean                             isZakatEnabled;
    NoYes                               showAllRelated;

    boolean                             correspondenceEnabled;
    boolean                             countryRegion_RU;

    boolean                          isShow;
    LedgerShowDebCredController_CN   showDRsCRsController;
    LedgerChineseVoucherEnabled_CN   chineseVoucher_CN;
    LedgerIgnoreAccountsEnabled_CN   ignoreAccounts_CN;
    LedgerInquireEnabled_CN          ledgerInquiryEnabled_CN;
    boolean                          enableShowDRsCRs;
    boolean                          isReverseTrace;

    boolean countryRegion_BR;
    boolean countryRegion_IN;

    private Array reversalProviders;

    private Map ledgerTransTypeMap;
    private Map voucherCacheMap;

    #ISOCountryRegionCodes

    private const int MaxNumberOfSelectedRecordsForReversal = 100;

    private FinTagGridController finTagGridController;

    [FormObservable]
    private boolean isCustVendQueryFlightEnabled = LedgerTransVoucherCustVendQueryFlight::instance().isEnabled();

    boolean isFinTagConfigurationSetForCurrent = FinTagConfiguration::isFinTagConfigurationSet(curExt());

}
]]></Source>
			</Method>
			<Method>
				<Name>addDynaLink</Name>
				<Source><![CDATA[
    public void addDynaLink(Common _common, FieldId _voucherId, FieldId _accountingDateId)
    {
        QueryBuildDataSource ds;

        ds = element.getSubledgerVoucherLinkDataSource();
        ds.addDynalink(
            fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher),
            _common,
            _voucherId);

        if (_accountingDateId)
        {
            ds.addDynalink(
                fieldNum(SubledgerVoucherGeneralJournalEntry, AccountingDate),
                _common,
                _accountingDateId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReverse</Name>
				<Source><![CDATA[
    private boolean canReverse(GeneralJournalEntry _markedGeneralJournalEntry)
    {
        boolean hasAccess;

        if (voucherCacheMap == null)
        {
            voucherCacheMap = new Map(Types::String, Types::Integer);
        }

        if (voucherCacheMap.exists(_markedGeneralJournalEntry.SubledgerVoucher))
        {
            hasAccess = voucherCacheMap.lookup(_markedGeneralJournalEntry.SubledgerVoucher);
        }
        else
        {
            if (!ledgerTransTypeMap.exists(_markedGeneralJournalEntry.JournalCategory))
            {
                // Check security
                int currentProviderIndex = 1;
                while (currentProviderIndex <= reversalProviders.lastIndex())
                {
                    TransactionReversalBase provider = reversalProviders.value(currentProviderIndex) as TransactionReversalBase;

                    if (provider)
                    {
                        TransactionReversalExecutionDetail detail;
                        detail.JournalCategory = _markedGeneralJournalEntry.JournalCategory;
                        detail.SubledgerVoucher = _markedGeneralJournalEntry.SubledgerVoucher;
                        detail.TransactionDate = _markedGeneralJournalEntry.AccountingDate;

                        // When any provider grants access then we can stop - they have access
                        hasAccess = provider.hasAccessToReverse(detail, false);

                        if (hasAccess)
                        {
                            break;
                        }
                    }

                    currentProviderIndex++;
                }

                // multiple modules handle payment or general journal so without knowing 
                // more we can't cache this.
                if (_markedGeneralJournalEntry.JournalCategory != LedgerTransType::Payment
                    || _markedGeneralJournalEntry.JournalCategory != LedgerTransType::GeneralJournal)
                {
                    ledgerTransTypeMap.insert(_markedGeneralJournalEntry.JournalCategory, hasAccess);
                }
            }
            else
            {
                hasAccess = ledgerTransTypeMap.lookup(_markedGeneralJournalEntry.JournalCategory);
            }

            voucherCacheMap.insert(_markedGeneralJournalEntry.SubledgerVoucher, hasAccess);
        }

        return hasAccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAccessToAllMarkedRecords</Name>
				<Source><![CDATA[
    private boolean hasAccessToAllMarkedRecords()
    {
        MultiSelectionHelper multiHelperLine = MultiSelectionHelper::construct();
        multiHelperLine.parmDatasource(this.datasource(identifierStr(GeneralJournalAccountEntry)));

        MultiSelectionHelper multiHelperHeader = MultiSelectionHelper::construct();
        multiHelperHeader.parmDatasource(this.datasource(identifierStr(GeneralJournalEntry)));

        if (reversalProviders == null)
        {
            reversalProviders = TransactionReversalProviderFactory::constructReversalProviders();
        }

        if (ledgerTransTypeMap == null)
        {
            ledgerTransTypeMap = new Map(Types::Enum, Types::AnyType);
        }

        GeneralJournalAccountEntry markedGeneralJournalAccountEntry = multiHelperLine.getFirst();
        GeneralJournalEntry markedGeneralJournalEntry = multiHelperHeader.getFirst();

        boolean hasAccess;
        int recordCount;

        while (markedGeneralJournalAccountEntry.RecId != 0)
        {
            recordCount++;

            hasAccess = this.canReverse(markedGeneralJournalEntry);

            // There is a limit on how many records can be selected for reversal
            // from this form.
            if (recordCount >= MaxNumberOfSelectedRecordsForReversal)
            {
                hasAccess = false;
                break;
            }
            
            // if they don't have access then return false because that implies they
            // don't have access to all of them.
            if (!hasAccess)
            {
                break;
            }

            markedGeneralJournalAccountEntry = multiHelperLine.getNext();
            markedGeneralJournalEntry = multiHelperHeader.getNext();
        }

        return hasAccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDynaLinkForCreatedTransactionId</Name>
				<Source><![CDATA[
    public void addDynaLinkForCreatedTransactionId(Query _query, Common _recordContainingCreatedTransactionId)
    {
        QueryBuildDataSource ds;
        SysDictField tableField;

        tableField = SysDictField::newName(
            tableId2name(_recordContainingCreatedTransactionId.TableId),
            fieldStr(Common, CreatedTransactionId));
        if (tableField == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        Debug::assert(_recordContainingCreatedTransactionId.CreatedTransactionId != 0);

        ds = _query.dataSourceTable(tableNum(GeneralJournalEntry));
        Debug::assert(ds != null);

        ds.addDynalink(
            fieldNum(GeneralJournalEntry, CreatedTransactionId),
            _recordContainingCreatedTransactionId,
            tableField.id());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDynaLinkVoucher</Name>
				<Source><![CDATA[
    public void addDynaLinkVoucher(Common _common, FieldId _voucherId)
    {
        QueryBuildDataSource ds;

        ds = element.getSubledgerVoucherLinkDataSource();
        ds.addDynalink(
            fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher),
            _common,
            _voucherId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAssetGroup_SA</Name>
				<Source><![CDATA[
    display AssetGroupNameZakat_SA displayAssetGroup_SA()
    {
        return AssetGroupZakat_SA::find(generalJournalAccountEntryZakat.AssetGroup).GroupName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAssetId_RU</Name>
				<Source><![CDATA[
    public display RAssetId displayAssetId_RU()
    {
        RAssetTrans rAssetTrans;
        RAssetTransUnionView rAssetTransUnionView;

        select firstonly AccountNum from rAssetTrans
            exists join rAssetTransUnionView
            where rAssetTransUnionView.RefRecId   == rAssetTrans.RecId &&
                  rAssetTransUnionView.Voucher    == generalJournalEntry.SubledgerVoucher &&
                  rAssetTransUnionView.TransDate  == generalJournalEntry.AccountingDate &&
                  rAssetTransUnionView.DataAreaId == generalJournalEntry.SubledgerVoucherDataAreaId;

        return rAssetTrans.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAssetName_RU</Name>
				<Source><![CDATA[
    public display RAssetName displayAssetName_RU()
    {
        RAssetTable rAssetTable;
        RAssetTrans rAssetTrans;
        RAssetTransUnionView rAssetTransUnionView;

        select firstonly Name from rAssetTable
        exists join rAssetTrans
            where rAssetTrans.AccountNum == rassetTable.AccountNum
        exists join rAssetTransUnionView
            where rAssetTransUnionView.RefRecId   == rAssetTrans.RecId &&
                  rAssetTransUnionView.Voucher    == generalJournalEntry.SubledgerVoucher &&
                  rAssetTransUnionView.TransDate  == generalJournalEntry.AccountingDate &&
                  rAssetTransUnionView.DataAreaId == generalJournalEntry.SubledgerVoucherDataAreaId;

        return rAssetTable.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAssetStandardId_RU</Name>
				<Source><![CDATA[
    public display RAssetStandardId displayAssetStandardId_RU()
    {
        RAssetTrans rAssetTrans;
        RAssetTransUnionView rAssetTransUnionView;

        select firstonly AssetStandardId from rAssetTrans
            exists join rAssetTransUnionView
            where rAssetTransUnionView.RefRecId   == rAssetTrans.RecId &&
                  rAssetTransUnionView.Voucher    == generalJournalEntry.SubledgerVoucher &&
                  rAssetTransUnionView.TransDate  == generalJournalEntry.AccountingDate &&
                  rAssetTransUnionView.DataAreaId == generalJournalEntry.SubledgerVoucherDataAreaId;

        return rAssetTrans.AssetStandardId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAssetStandardName_RU</Name>
				<Source><![CDATA[
    public display RAssetStandardName displayAssetStandardName_RU()
    {
        RAssetStandardTable  rAssetStandardTable;
        RAssetTrans          rAssetTrans;
        RAssetTransUnionView rAssetTransUnionView;

        select firstonly AssetStandardName from rAssetStandardTable
            exists join rAssetTrans
                where rAssetTrans.AssetStandardId == rAssetStandardTable.AssetStandardId
            exists join rAssetTransUnionView
                where rAssetTransUnionView.RefRecId   == rAssetTrans.RecId &&
                      rAssetTransUnionView.Voucher    == generalJournalEntry.SubledgerVoucher &&
                      rAssetTransUnionView.TransDate  == generalJournalEntry.AccountingDate &&
                      rAssetTransUnionView.DataAreaId == generalJournalEntry.SubledgerVoucherDataAreaId;

        return rAssetStandardTable.AssetStandardName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayContractNum_SA</Name>
				<Source><![CDATA[
    display VendContractNumZakat_SA displayContractNum_SA()
    {
        return generalJournalAccountEntryZakat.ContractNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayItemCode_SA</Name>
				<Source><![CDATA[
    display LedgerItemNumZakat_SA displayItemCode_SA()
    {
        return generalJournalAccountEntryZakat.ItemCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySalesProjId_SA</Name>
				<Source><![CDATA[
    display Num displaySalesProjId_SA()
    {
        if (generalJournalAccountEntryZakat.ProjId)
        {
            return generalJournalAccountEntryZakat.ProjId;
        }
        else if (generalJournalAccountEntryZakat.SalesId)
        {
            return generalJournalAccountEntryZakat.SalesId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySalesType_SA</Name>
				<Source><![CDATA[
    display SalesTypeZakat_SA displaySalesType_SA()
    {
        return generalJournalAccountEntryZakat.SalesType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySubContractor_SA</Name>
				<Source><![CDATA[
    display VendAccount displaySubContractor_SA()
    {
        return VendInfoZakat_SA::find(generalJournalAccountEntryZakat.Subcontractor).VendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVoucherUser</Name>
				<Source><![CDATA[
    display UserName displayVoucherUser()
    {
        SubledgerVoucherGeneralJournalEntry svgje;
        SubledgerJournalEntry sje;
        AccountingEvent ae;

        if (generalJournalEntry.TransferId)
        {
            select firstonly svgje
                where svgje.GeneralJournalEntry == generalJournalEntry.RecId
            join sje
                where sje.Voucher == svgje.Voucher &&
                    sje.VoucherDataAreaId == svgje.VoucherDataAreaId &&
                    sje.TransferId == generalJournalEntry.TransferId
            join ae
                where ae.AccountingDate == svgje.AccountingDate &&
                    ae.RecId == sje.AccountingEvent;

            if (sje.CreatedTransactionId)
            {
                return TransactionLog::find(sje.CreatedTransactionId).CreatedBy;
            }
        }

        return TransactionLog::find(generalJournalEntry.CreatedTransactionId).CreatedBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeQueryForVATDeferment_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Joining base query to <c> VATPeriodicVouchers_IN </c> table.
    /// </summary>
    /// <param name="_query">
    /// Query to add <c> VATPeriodicVouchers_IN </c> ranges
    /// </param>
    public void executeQueryForVATDeferment_IN(Query _query)
    {
        QueryBuildDataSource        vatQueryBuildDataSource;
        QueryBuildDataSource        vATPeriodicVouchersQueryBuildDataSource;
        QueryBuildRange             vatQueryBuildRange;
        TmpVATDefermentBalLine_IN   vatDeferment;

        vatDeferment            = element.args().record();
        vatQueryBuildDataSource = this.getSubledgerVoucherLinkDataSource(_query);

        vATPeriodicVouchersQueryBuildDataSource = vatQueryBuildDataSource.addDataSource(tableNum(VATPeriodicVouchers_IN));
        vATPeriodicVouchersQueryBuildDataSource.addLink(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher), fieldNum(VATPeriodicVouchers_IN, Voucher));

        vatQueryBuildRange = vATPeriodicVouchersQueryBuildDataSource.addRange(fieldNum(VATPeriodicVouchers_IN, FromDate));
        vatQueryBuildRange.value(queryValue(vatDeferment.From));

        vatQueryBuildRange = vATPeriodicVouchersQueryBuildDataSource.addRange(fieldNum(VATPeriodicVouchers_IN, ToDate));
        vatQueryBuildRange.value(queryValue(vatDeferment.To));

        vatQueryBuildRange = vATPeriodicVouchersQueryBuildDataSource.addRange(fieldNum(VATPeriodicVouchers_IN, TaxIdentificationNumber));
        vatQueryBuildRange.value(queryValue(vatDeferment.TaxIdentificationNumber));

        vatQueryBuildRange = vATPeriodicVouchersQueryBuildDataSource.addRange(fieldNum(VATPeriodicVouchers_IN, TaxPeriod));
        vatQueryBuildRange.value(queryValue(vatDeferment.TaxPeriod));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingDateFieldName</Name>
				<Source><![CDATA[
    private FieldName getAccountingDateFieldName()
    {
        return fieldStr(SubledgerVoucherGeneralJournalEntry, AccountingDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingDateRangeExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a query range expression for the accounting date.
    /// </summary>
    /// <param name="_accountingDate">
    /// The accounting date.
    /// </param>
    /// <returns>
    /// A query range expression for the accounting date.
    /// </returns>
    private str getAccountingDateRangeExpression(TransDate _accountingDate)
    {
        return '(' + this.getAccountingDateFieldName() + ' == [' + queryValue(_accountingDate) + '])';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInputForProject</Name>
				<Source><![CDATA[
    public container getInputForProject()
    {
        ProjCostTrans           projCostTrans;
        ProjItemTrans           projItemTrans;
        ProjRevenueTrans        projRevenueTrans;
        ProjEmplTrans           projEmplTrans;
        ProjControlPeriodTrans  projControlPeriodTrans;
        ProjOnAccTrans          projOnAccTrans;
        ProjControlPeriodTable  projControlPeriodTable;
        ProjTransPosting        projTransPosting;
        ProjInvoiceJour         projInvoiceJour;
        ProjTransIdBase projTransId;
        Voucher projVoucher;

        switch (element.args().dataset())
        {
            case tableNum(ProjCostTrans):
                projCostTrans       = element.args().record() as ProjCostTrans;
                projTransId         = projCostTrans.TransId;
                break;

            case tableNum(ProjRevenueTrans):
                projRevenueTrans    = element.args().record() as ProjRevenueTrans;
                projTransId         = projRevenueTrans.TransId;
                break;

            case tableNum(ProjEmplTrans):
                projEmplTrans       = element.args().record() as ProjEmplTrans;
                projTransId         = projEmplTrans.TransId;
                break;

            case tableNum(ProjItemTrans):
                projItemTrans       = element.args().record() as ProjItemTrans;
                projTransId         = projItemTrans.ProjTransId;
                break;

            case tableNum(ProjControlPeriodTrans):
                projControlPeriodTrans = element.args().record() as ProjControlPeriodTrans;
                projTransId         = projControlPeriodTrans.TransId;
                break;

            case tableNum(ProjOnAccTrans):
                projOnAccTrans      = element.args().record() as ProjOnAccTrans;
                projTransId         = projOnAccTrans.TransId;
                break;

            case tableNum(ProjControlPeriodTable):
                projControlPeriodTable = element.args().record() as ProjControlPeriodTable;
                if (element.args().parmEnum() == NoYes::No)
                {
                    projVoucher     = projControlPeriodTable.VoucherPosted;
                }
                else
                {
                    projVoucher     = projControlPeriodTable.VoucherReverse;
                }
                break;

            case tableNum(ProjTransPosting):
                projTransPosting    = element.args().record() as ProjTransPosting;
                projVoucher         = projTransPosting.Voucher;
                break;

            case tableNum(ProjInvoiceJour):
                projInvoiceJour     = element.args().record() as ProjInvoiceJour;
                projVoucher         = projInvoiceJour.LedgerVoucher;
                break;
        }

        return [projTransId, projVoucher];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubledgerVoucherLinkDataSource</Name>
				<Source><![CDATA[
    protected QueryBuildDataSource getSubledgerVoucherLinkDataSource(Query _query = generalJournalEntry_ds.query())
    {
        QueryBuildDataSource ds;

        ds = _query.dataSourceTable(tableNum(SubledgerVoucherGeneralJournalEntry));
        if (ds == null)
        {
            ds = _query.dataSourceTable(tableNum(GeneralJournalEntry));
            ds = SubledgerVoucherGeneralJournalEntry::addDataSource(ds);
            ds.joinMode(JoinMode::ExistsJoin);
        }

        return ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucherDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a range expression containing voucher and accounting date.
    /// </summary>
    /// <param name="_subledgerVoucher">
    /// The voucher number.
    /// </param>
    /// <param name="_accountingDate">
    /// The accounting date.
    /// </param>
    /// <returns>
    /// A range expression containing voucher and accounting date.
    /// </returns>
    protected str getVoucherDateRange(Voucher _subledgerVoucher, TransDate _accountingDate)
    {
        return '(' + this.getVoucherRangeExpression(_subledgerVoucher) +
            ' && ' + this.getAccountingDateRangeExpression(_accountingDate) + ')';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucherFieldName</Name>
				<Source><![CDATA[
    private FieldName getVoucherFieldName()
    {
        return fieldStr(SubledgerVoucherGeneralJournalEntry, Voucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucherRangeExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a query range expression for the voucher number.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher number.
    /// </param>
    /// <returns>
    /// A query range expression for the voucher number.
    /// </returns>
    private str getVoucherRangeExpression(Voucher _voucher)
    {
        return '(' + this.getVoucherFieldName() + ' == ' + '\"' + any2str(_voucher) + '\")';
    }

]]></Source>
			</Method>
			<Method>
				<Name>hideNegativeDRCRController_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hide the DR and CR fields in form <c>LedgerTransVoucher</c>
    /// </summary>
    private void hideNegativeDRCRController_CN()
    {
        generalJournalLine_AmountCurCredit_CN.visible(false);
        generalJournalLine_AmountMstCredit_CN.visible(false);
        generalJournalLine_AmountCurDebit_CN.visible(false);
        generalJournalLine_AmountMstDebit_CN.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        Query                   query;
        QueryBuildDataSource    ds;
        boolean                 isFromMenu;
        boolean                 showLedgerPostingJournalId;
        TableId                 sourceTable;

        #ISOCountryRegionCodes

        countryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        countryRegion_BR = BrazilParameters::isEnabled();

        LedgerJournalTrans              ledgerJournalTrans;
        QueryBuildRange                 range;
        TaxWithholdParameters_IN        taxWithholdParametersLoc = TaxWithholdParameters_IN::find();

        enableShowDRsCRs = LedgerShowDebCredController_CN::isShowDRsCRsFeatureEnabled();
        if (enableShowDRsCRs)
        {
            showDRsCRsController = LedgerShowDebCredController_CN::construct(tableNum(GeneralJournalAccountEntry));
        }
        chineseVoucher_CN       = LedgerParameters::isChineseVoucher_CN();
        ignoreAccounts_CN       = LedgerParameters::isExcludeUnusedAccounts_CN();
        ledgerInquiryEnabled_CN = LedgerParameters::isLedgerInquiry_CN();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            countryRegion_RU      = true;
            correspondenceEnabled = LedgerParameters::find().Correspondence_RU;

            isReverseTrace = element.args().menuItemName() == menuitemDisplayStr(LedgerTransVoucher_ReverseTrace_RU) &&
                             element.args().dataset()      == tableNum(GeneralJournalAccountEntry);

            if (isReverseTrace)
            {
                Form buildForm = element.form();
                buildForm.dataSource(buildForm.dataSourceCount()).linkType(FormLinkType::InnerJoin); //TransLink_RU must be the last data source
            }
        }

        super();

        if (isReverseTrace)
        {
            transLink_RU_ds.object(fieldNum(TransLink_RU, TransLinkType)).visible(true);
            transLink_RU_ds.object(fieldNum(TransLink_RU, Reversed)).visible(true);
        }

        // Set the LedgerDimension reference on controls displaying LedgerAccount in order for the preview to work off a string field
        LedgerTrans_AccountNum.userDataItem(fieldNum(GeneralJournalAccountEntry, LedgerDimension));

        if (countryRegion_BR)
        {
            consolidation_BR.visible(CompanyInfo::isConsolidationCompany());
        }

        if (!enableShowDRsCRs)
        {
            this.hideNegativeDRCRController_CN();
        }

        if (!correspondenceEnabled)
        {
            ledgerTrans_TxtCorr_RU.visible(false);
            accountNameCorr_RU.visible(false);
            ledgerTrans_PostingCorr_RU.visible(false);
            accountNum_Corr_RU.visible(false);
            correspondence_RU.visible(false);
        }

        isZakatEnabled = LedgerParameters::find().IsZakatEnabled_SA;

        if (!isZakatEnabled
            && element.args().menuItemName() == menuitemDisplayStr(LedgerTransactionAdjustment_SA))
        {
            throw error(strFmt("@SYS322414", fieldPName(LedgerParameters, IsZakatEnabled_SA), "@SYS322514"));
        }

        this.showZakatFields_SA();

        if (fromZakatMenu)
        {
            fromDate.setFocus();
        }
        else
        {
            overviewGrid.setFocus();
        }

        // Show/hide these controls so users are not confused by the row-by-row enabling/disabling
        // of the client because of the global table. Row-by-row is not necessary because we
        // restrict to the current company via the Ledger.
        showLedgerPostingJournalId = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBE]);
        ledgerTrans_LedgerPostingJournalId.visible(showLedgerPostingJournalId);
        identification_LedgerPostingJournalId.visible(showLedgerPostingJournalId);

        if (element.args().lookupRecord())
        {
            // When called from report drill throughs the record is set in lookupRecord() and not
            // in record(), so get the value from lookuprecord() and set it in record().
            element.args().record(element.args().lookupRecord());
        }

        // Since the args.lookupRecord is not needed past this point, we have to clear
        // the record so that the subledgervoucherlink record is not looked up again when the request
        // comes from the ledger transfer voucher dialog.
        element.args().lookupRecord(null);

        // When there is no caller and no record passed in the args then isFromMenu will be true.
        isFromMenu = ((element.args().caller() == null) && (element.args().record() == null)) ||
            element.args().menuItemName() == menuItemDisplayStr(LedgerTransVoucherShowSysQuery);

        if (element.args().parm() == formStr(VendTrans) && isConfigurationkeyEnabled(configurationKeyNum(LedgerBasicWithholdingTax)))
        {
            isFromMenu = NoYes::Yes;
            this.design().titleDatasource(tableStr(GeneralJournalEntry));
        }

        projTransPostingButton.visible(false);

        relatedVouchers.enabled(false);
        allRelatedVouchers.enabled(false);

        query = generalJournalEntry_ds.query();

        ds = query.dataSourceTable(tableNum(MainAccount));

        // set the DimensionAttributeValueCombination--> MainAccount relation because the wrong one is the default
        ds.clearLinks();
        ds.addLink(fieldNum(DimensionAttributeValueCombination, MainAccount), fieldNum(MainAccount, RecId));

        // manually add the natural key query field
        ds.addRange(fieldNum(MainAccount, MainAccountId));

        // sort by accounting date because it is the preferred user sort
        // additionally sort by journal and voucher to provide a consistent order within duplicate dates
        ds = query.dataSourceTable(tableNum(GeneralJournalEntry));
        ds.addSortField(fieldNum(GeneralJournalEntry, AccountingDate));
        ds.addSortField(fieldNum(GeneralJournalEntry, JournalNumber));
        ds.addSortField(fieldNum(GeneralJournalEntry, SubledgerVoucher));

        if (countryRegion_IN)
        {
            if (isFromMenu == NoYes::No
                && element.args().caller()
                && (element.args().caller().name()    == formStr(LedgerJournalTransDaily)
                    || element.args().caller().name() == formStr(LedgerJournalTransCustPaym)
                    || element.args().caller().name() == formStr(LedgerJournalTransVendPaym)))
            {
                if (element.args().record()
                    && element.args().dataset() == tableNum(LedgerJournalTrans))
                {
                    ledgerJournalTrans = element.args().record();

                    if (ledgerJournalTrans.RecId
                        && ledgerJournalTrans.isServiceTax_IN())
                    {
                        ds = query.dataSourceTable(tableNum(GeneralJournalAccountEntry));
                        range = SysQuery::findOrCreateRange(ds, fieldNum(GeneralJournalAccountEntry, PostingType));
                        range.value(SysQuery::valueNot(LedgerPostingType::ServiceTax_IN));
                    }
                }
            }
            if (element.args().caller())
            {
                if ((isFromMenu == NoYes::No) &&
                    (element.args().caller().name() == formStr(LedgerJournalTransVendPromissoryNote)))
                {
                    taxWithholdTransactions_IN.visible(taxWithholdParametersLoc.tdsPayment);
                }
                else if ((isFromMenu == NoYes::No) &&
                         (element.args().caller().name() == formStr(LedgerJournalTransCustBillOfExchange)))
                {
                    taxWithholdTransactions_IN.visible(taxWithholdParametersLoc.tcsPayment);
                }
                else
                {
                    taxWithholdTransactions_IN.visible(TaxWithholdParameters_IN::checkTaxParameters());
                }
            }
        }
        if (isFromMenu)
        {
            if (!fromZakatMenu)
            {
                if (countryRegion_RU              &&
                    element.args().menuItemName() &&
                    element.args().menuItemName() == menuitemDisplayStr(RAssetLedgerTransVoucher))
                {
                    this.updateQueryForRAsset_RU(query);
                    asset_RU.visible(true);
                }
                element.updateQueryForMenu(query);
            }
        }
        else
        {
            sourceTable = element.args().dataset();
            this.performInitForDataset(sourceTable, query);
        }

        if (isReverseTrace)
        {
            element.updateQueryForReverseTrans(query);
            element.design().caption("@SYS78553");
            showTransMode.visible(false);
            reportingDate_RU.visible(false);
            reportingDateGrid_RU.visible(true);
        }
        else if (countryRegion_RU)
        {
            ledgerReverseTransactions_RU.visible(true);
            ledgerReverseTrace_RU.visible(true);
            reportingDate_RU.visible(true);
        }

        if (correspondenceEnabled && ! isReverseTrace)
        {
            showTransMode.selection(LedgerBondShowTransMode_RU::ShowDebitOnly);
        }
        if (ledgerInquiryEnabled_CN)
        {
            ledgerTrans_TransDate.visible(false);
        }
        else
        {
            transDateYear_CN.visible(false);
            transDateMth_CN.visible(false);
            transDateDay_CN.visible(false);
            generalLedger_CN.visible(false);
            detailLedger_CN.visible(false);
            dailyLedger_CN.visible(false);
            hideForeignCurrency_CN.visible(false);
            printOut_CN.visible(false);
        }

        if (!chineseVoucher_CN)
        {
            generalJournalEntry_W_ds.object(fieldNum(GeneralJournalEntry_W, Voucher_CN)).visible(false);
            generalJournalEntry_W_ds.object(fieldNum(GeneralJournalEntry_W, LedgerVoucherType_CN)).visible(false);
            LedgerVoucherReport_CN.visible(false);
        }

        if (TaxThaiGovCertificationFeatureChecker::isTaxBranchEnabled())
        {
            this.initTaxBranchControls();
        }

        if (element.args().menuItemName() == menuitemDisplayStr(LedgerTransVoucher_TaxReconciliation))
        {
            this.updateQueryForTaxReconciliation();
        }

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            if (!this.isProjectVoucher())
            {
                TaxDocumentLauncher.visible(true);
            }
        }
        // </GTE>
        // Currency revaluation generates vouchers with accounting and reporting currencies values
        // regardless of the setting for the currencies setting for the ledger.
        if (element.args().parm() == formStr(LedgerExchAdjHist) 
            || element.args().parm() == formStr(VendExchRateAdjustment)
            || element.args().parm() == formStr(CustExchRateAdjustment)
            || element.args().parm() == formStr(BankCurrencyRevalHistory)
            || element.args().menuItemName() == menuItemDisplayStr(LedgerTransVoucherQuery))
        {
            LedgerTrans_AmountMSTSecond.visible(true);
        }
        else if (!Ledger::reportingCurrency() || Ledger::reportingCurrency() == Ledger::accountingCurrency())
        {
            LedgerTrans_AmountMSTSecond.visible(false);
        }

        boolean vendCustFeatureEnabled = FeatureStateProvider::isFeatureEnabled(LedgerTransVoucherCustVendFeature::instance());

        VendorAccount.visible(vendCustFeatureEnabled);
        VendorName.visible(vendCustFeatureEnabled);
        CustomerAccount.visible(vendCustFeatureEnabled);
        CustomerName.visible(vendCustFeatureEnabled);

        if (isFinTagConfigurationSetForCurrent)
        {
            this.initializeFinTagGridController();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFinTagGridController</Name>
				<Source><![CDATA[
    private void initializeFinTagGridController()
    {
        finTagGridController = FinTagGridController::construct(this, OverviewGrid, FinTag_ds);

        finTagGridController.populateFinTags();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinTagGridController</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FinTagGridController getFinTagGridController()
    {
        return this.finTagGridController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performInitForDataset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the form initialization for the specified source table.
    /// </summary>
    /// <param name = "_sourceTable">
    /// The table identifier of the source table.
    /// </param>
    /// <param name = "_query">
    /// A <c>Query</c> instance.
    /// </param>
    /// <remarks>
    /// Add a post-method handler for handling a source table that is not handled by the switch statement.
    /// </remarks>
    public void performInitForDataset(TableId _sourceTable, Query _query)
    {
        Common common;

        switch (_sourceTable)
        {
            case tableNum(CustInterestJour):
                element.updateQueryForCustInterestJour(_query);
                break;

            case tableNum(GeneralJournalEntry):
                if ((element.args().parm() == formStr(LedgerTransVoucher))
                        && (element.args().caller().name() == formStr(LedgerTransVoucher)))
                {
                    showAllRelated = NoYes::Yes;
                }

                element.updateQueryForGeneralJournalEntry(_query);
                break;

            case tableNum(InventTrans):
            case tableNum(InventTransArchive):
                element.updateQueryForInventTrans(_query);
                this.informUserNoVoucherWhenTransferWithinSameSite(_sourceTable);
                break;

            case tableNum(ProdTableJour):
                element.updateQueryForProdTableJour(_query);
                break;

            case tableNum(ProjControlPeriodTable),
                tableNum(ProjControlPeriodTrans),
                    tableNum(ProjCostTrans),
                    tableNum(ProjEmplTrans),
                    tableNum(ProjInvoiceJour),
                    tableNum(ProjItemTrans),
                    tableNum(ProjOnAccTrans),
                    tableNum(ProjRevenueTrans),
                    tableNum(ProjTransPosting):
                    element.updateQueryForProject(_query);
                break;

            case tableNum(ProjAdvancedJournalLine):
                element.updateQueryForProjAdvancedJournalLine(_query);
                break;

            case tableNum(ProjAdvancedJournal):
                 element.updateQueryForProjAdvancedJournal(_query);
                 break;

            case tableNum(BudgetTransactionLine):
                element.updateQueryForBudgetTransaction(_query);
                break;

            case tableNum(InflationAdjJournal_MX) :
                element.updateQueryForInflationAdj_MX(_query);
                break;

            case tableNum(VendPackingSlipJour):
                element.updateQueryForVendPackingSlipJour(_query);
                break;

            case tableNum(VendPackingSlipVersion):
                element.updateQueryForVendPackingSlipVersion(_query);
                break;

            case tableNum(VendInvoiceJour):
                element.updateQueryForVendInvoiceJour(_query);
                break;

            case tableNum(PlSADTable):
                element.updateQueryForSADTable(_query);
                break;

            case tableNum(CustTrans):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(CustTrans, Voucher), fieldNum(CustTrans, TransDate));
                break;

            case tableNum(BankDeposit):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(BankDeposit, Voucher), fieldNum(BankDeposit, TransDate));
                break;

            case tableNum(BankTransSummarizationLine):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(BankTransSummarizationLine, Voucher), fieldNum(BankTransSummarizationLine, TransDate));
                break;

            case tableNum(BankChequeTable):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(BankChequeTable, Voucher), fieldNum(BankChequeTable, TransDate));
                break;

            case tableNum(BankAccountTrans):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(BankAccountTrans, Voucher), fieldNum(BankAccountTrans, TransDate));
                break;

            case tableNum(BankStmtISOReportEntry):
                common = element.args().record();
                BankStmtISOReportEntry bankStmtISOReportEntry = common as BankStmtISOReportEntry;
                if (bankStmtISOReportEntry.isPosted())
                {
                    this.addDynaLink(common, fieldNum(BankStmtISOReportEntry, Voucher), fieldNum(BankStmtISOReportEntry, AccountingDate));
                }
                else
                {
                    common = BankStmtISOAccountStatement::find(bankStmtISOReportEntry.BankStmtISOAccountStatement);
                    this.addDynaLink(common, fieldNum(BankStmtISOAccountStatement, Voucher), fieldNum(BankStmtISOAccountStatement, AccountingDate));
                }
                break;

            case tableNum(AssetTrans):
                element.updateQueryForAssetTrans(_query);
                break;

            case tableNum(CustBillOfExchangeJour):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
                {
                    this.updateQueryForCustBillOfExchangeJour(_query);
                }
                break;

            case tableNum(CustBillOfExchangeTrans):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(CustBillOfExchangeTrans, Voucher), fieldNum(CustBillOfExchangeTrans, TransDate));
                break;

            case tableNum(CustCollectionLetterJour):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(CustCollectionLetterJour, LedgerVoucher), fieldNum(CustCollectionLetterJour, Updated));
                break;

            case tableNum(CustExchRateAdjustment):
                common = element.args().record();
                CustExchRateAdjustment custExchRateAdjustment = common as CustExchRateAdjustment;
                if (!custExchRateAdjustment.ExecutionId)
                {
                    this.addDynaLinkForCreatedTransactionId(_query, custExchRateAdjustment);
                }
                else
                {
                    QueryBuildDataSource qbds = _query.dataSourceTable(tableNum(GeneralJournalEntry));
                    qbds.clearDynalinks();

                    if (CustVendExchAdjVoucherLookupFlight::instance().isEnabled())
                    {
                        QueryBuildDataSource exchRateAdjustment = qbds.addDataSource(tableNum(CustExchRateAdjustment));
                        exchRateAdjustment.addRange(fieldNum(CustExchRateAdjustment, ExecutionId))
                            .value(queryValue(custExchRateAdjustment.ExecutionId));
                        exchRateAdjustment.addLink(
                            fieldNum(GeneralJournalEntry, CreatedTransactionId),
                            fieldNum(CustExchRateAdjustment, CreatedTransactionId));
                        exchRateAdjustment.joinMode(JoinMode::ExistsJoin);
                    }
                    else
                    {
                        CustExchRateAdjustment hiddenCustExchRateAdjustment;
                        while select CreatedTransactionId from hiddenCustExchRateAdjustment
                            where hiddenCustExchRateAdjustment.ExecutionId == custExchRateAdjustment.ExecutionId
                        {
                            qbds.addRange(fieldNum(GeneralJournalEntry, CreatedTransactionId)).value(queryValue(hiddenCustExchRateAdjustment.CreatedTransactionId));
                        }
                    }
                }
                break;

            case tableNum(VendExchRateAdjustment):
                common = element.args().record();

                VendExchRateAdjustment vendExchRateAdjustment = common as VendExchRateAdjustment;
                if (vendExchRateAdjustment.ExecutionId)
                {
                    QueryBuildDataSource qbds = _query.dataSourceTable(tableNum(GeneralJournalEntry));
                    qbds.clearDynalinks();

                    if (CustVendExchAdjVoucherLookupFlight::instance().isEnabled())
                    {
                        QueryBuildDataSource exchRateAdjustment = qbds.addDataSource(tableNum(VendExchRateAdjustment));
                        exchRateAdjustment.addRange(fieldNum(VendExchRateAdjustment, ExecutionId))
                            .value(queryValue(vendExchRateAdjustment.ExecutionId));
                        exchRateAdjustment.addLink(
                            fieldNum(GeneralJournalEntry, CreatedTransactionId),
                            fieldNum(VendExchRateAdjustment, CreatedTransactionId));
                        exchRateAdjustment.joinMode(JoinMode::ExistsJoin);
                    }
                    else
                    {
                        VendExchRateAdjustment hiddenVendExchRateAdjustment;
                        while select CreatedTransactionId from hiddenVendExchRateAdjustment
                            where hiddenVendExchRateAdjustment.ExecutionId == vendExchRateAdjustment.ExecutionId
                        {
                            qbds.addRange(fieldNum(GeneralJournalEntry, CreatedTransactionId)).value(queryValue(hiddenVendExchRateAdjustment.CreatedTransactionId));
                        }
                    }
                }
                break;

            case tableNum(CustPackingSlipJour):
                this.updateQueryForCustPackingSlipJour(_query);
                break;

            case tableNum(CustPackingSlipVersion):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(CustPackingSlipVersion, LedgerVoucher), fieldNum(CustPackingSlipVersion, AccountingDate));

                break;

            case tableNum(CustInvoiceJour):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(CustInvoiceJour, LedgerVoucher), fieldNum(CustInvoiceJour, InvoiceDate));
   
                if (CustPrepaymentInvoiceFeature::instance().isEnabled())
                {
                    CustInvoiceJour custInvoiceJour = common as CustInvoiceJour;
                    
                    if (custInvoiceJour.SalesId && custInvoiceJour.SalesType == SalesType::Sales)
                    {
                        element.updateQueryCustInvoiceJourWithPrepayment(_query, custInvoiceJour);
                    }

                }
                break;

            case tableNum(InventClosing):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(InventClosing, Voucher), fieldNum(InventClosing, TransDate));
                break;

            case tableNum(InventItemPrice):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(InventItemPrice, StdCostVoucher), fieldNum(InventItemPrice, StdCostTransDate));
                break;

            case tableNum(InventCostTrans):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(InventCostTrans, Voucher), fieldNum(InventCostTrans, TransDate));
                this.informUserNoVoucherWhenTransferWithinSameSite(_sourceTable);
                break;

            case tableNum(InventSettlement):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(InventSettlement, Voucher), fieldNum(InventSettlement, TransDate));
                break;

            case tableNum(RetailStatementVoucher):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(RetailStatementVoucher, Voucher), fieldNum(RetailStatementVoucher, voucherDate));
                break;

            case tableNum(LedgerClosingSheet):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(LedgerClosingSheet, Voucher), fieldNum(LedgerClosingSheet, PostDate));
                break;

			case tableNum(LedgerFiscalCloseHistory):
				common = element.args().record();
                this.addDynaLinkVoucher(common, fieldNum(LedgerFiscalCloseHistory, Voucher));
				break;

            case tableNum(LedgerJournalLine):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(LedgerJournalLine, Voucher), fieldNum(LedgerJournalLine, AccountingDate));
                break;

            case tableNum(LedgerJournalTrans):
                LedgerJournalTrans ledgerJournalTrans;
                QueryBuildDataSource dsSubledgerVoucher;

                common = element.args().record();

                // All is used to trigger a voucher only link and Chosen is used for voucher + date.
                AllChosen allChosen = element.args().parmEnum();

                if (TaxParameters::isCustomsEnable_IN())
                {
                    ledgerJournalTrans = LedgerJournalTrans::findRecId(common.RecId, true);
                    dsSubledgerVoucher = element.getSubledgerVoucherLinkDataSource();
                }

                if (allChosen == AllChosen::All)
                {
                    this.addDynaLinkVoucher(common, fieldNum(LedgerJournalTrans, Voucher));
                }
                else
                {
                    this.addDynaLink(common, fieldNum(LedgerJournalTrans, Voucher), fieldNum(LedgerJournalTrans, TransDate));
                }
                if (TaxParameters::isCustomsEnable_IN())
                {
                    Voucher taxSetOffVoucher = LedgerJournalTrans_IN_Extension::getTaxSetOffVoucher_IN(ledgerJournalTrans);
                    if (taxSetOffVoucher != '')
                    {
                        dsSubledgerVoucher.clearDynalinks();
                        dsSubledgerVoucher.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher)).value(ledgerJournalTrans.Voucher);
                        dsSubledgerVoucher.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher)).value(taxSetOffVoucher);
                        dsSubledgerVoucher.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, AccountingDate)).value(date2StrUsr(ledgerJournalTrans.TransDate, DateFlags::FormatAll));
                    }
                }

                break;

            case tableNum(AdvancedLedgerEntryHeader):
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                {
                    common = element.args().record();
                    this.addDynaLink(common, fieldNum(AdvancedLedgerEntryHeader, LedgerVoucher), fieldNum(AdvancedLedgerEntryHeader, AccountingDate));
                }
                break;

            case tableNum(LedgerOpeningSheet_ES):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(LedgerOpeningSheet_ES, Voucher), fieldNum(LedgerOpeningSheet_ES, PostDate));
                break;

            case tableNum(MarkupTrans):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(MarkupTrans, Voucher), fieldNum(MarkupTrans, TransDate));
                break;

            case tableNum(ProdIndirectTrans):
                common = element.args().record();
                if (element.args().menuItemName() == menuItemDisplayStr(LedgerTransVoucherCosting))
                {
                    this.addDynaLink(common, fieldNum(ProdIndirectTrans, VoucherCalc), fieldNum(ProdIndirectTrans, DateCalc));
                }
                else
                {
                    this.addDynaLink(common, fieldNum(ProdIndirectTrans, VoucherEstimation), fieldNum(ProdIndirectTrans, DateEstimation));
                }
                break;

            case tableNum(ProdRouteTrans):
                common = element.args().record();
                if (element.args().menuItemName() == menuItemDisplayStr(LedgerTransVoucherCosting))
                {
                    this.addDynaLink(common, fieldNum(ProdRouteTrans, VoucherCalc), fieldNum(ProdRouteTrans, DateCalc));
                }
                else
                {
                    this.addDynaLink(common, fieldNum(ProdRouteTrans, VoucherWIP), fieldNum(ProdRouteTrans, DateWIP));
                }
                break;

            case tableNum(TmpRegisterVAT):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(TmpRegisterVAT, Voucher), fieldNum(TmpRegisterVAT, TransDate));
                break;

            case tableNum(TaxPurchaseTaxTrans):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(TaxPurchaseTaxTrans, Voucher), fieldNum(TaxPurchaseTaxTrans, TransDate));
                break;

            case tableNum(TaxReportVoucher):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(TaxReportVoucher, Voucher), fieldNum(TaxReportVoucher, TransDate));
                break;

            case tableNum(TaxPurchaseTaxTrans):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(TaxPurchaseTaxTrans, Voucher), fieldNum(TaxPurchaseTaxTrans, TransDate));
                break;

            case tableNum(TaxTrans):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(TaxTrans, Voucher), fieldNum(TaxTrans, TransDate));
                break;

            case tableNum(TaxTransHistory):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(TaxTransHistory, Voucher), fieldNum(TaxTransHistory, TransDate));
                break;

            case tableNum(VendPromissoryNoteTrans):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(VendPromissoryNoteTrans, Voucher), fieldNum(VendPromissoryNoteTrans, TransDate));
                break;

            case tableNum(VendTrans):
                common = element.args().record();
                VendTrans localVendTrans = element.args().record();
                localVendTrans = common;

                if (localVendTrans.TransType == LedgerTransType::Vend || LedgerJournalTable::find(localVendTrans.JournalNum).JournalType == LedgerJournalType::Approval)
                {
                    // Invoice Register and Approval Journal do not necessarily post using one date but do share the same voucher.
                    this.updateQueryToGetVendInvReg(_query, localVendTrans.Voucher, localVendTrans.TransDate);
                }
                else
                {
                    VendInvoiceJour localVendInvoiceJour;

                    // Only check for related documents when the transaction type is Purchase order
                    if (localVendTrans.TransType == LedgerTransType::Purch)
                    {
                        // When related documents exist, modify the query to include the related documents
                        localVendInvoiceJour = VendInvoiceJour::findFromVendTransVoucher(localVendTrans.Invoice, localVendTrans.Voucher, localVendTrans.TransDate, localVendTrans.AccountNum, false);
                    }

                    if (localVendInvoiceJour)
                    {
                        element.updateQueryForVendInvoiceJour(_query, localVendInvoiceJour);
                    }
                    else
                    {
                        this.addDynaLink(common, fieldNum(VendTrans, Voucher), fieldNum(VendTrans, TransDate));
                    }
                }
                break;

            case tableNum(InventTransPosting):
                this.updateQueryForInventTransPosting(_query);
                this.informUserNoVoucherWhenTransferWithinSameSite(_sourceTable);
                break;

            case tableNum(InventValueTransModelTable):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(InventValueTransModelTable, Voucher), fieldNum(InventValueTransModelTable, TransDate));
                break;

            case tableNum(InventTransferJour):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(InventTransferJour, VoucherId), fieldNum(InventTransferJour, TransDate));
                this.informUserNoVoucherWhenTransferWithinSameSite(_sourceTable);
                break;

            case tableNum(LeanProductionFlowCosting):
                // In case of back flush costing we posting transaction for this voucher
                // only with the end date, so it is not required to filter on date in this case.
                common = element.args().record();
                this.addDynaLinkVoucher(common, fieldNum(LeanProductionFlowCosting, Voucher));
                break;

            case tableNum(BankPromissoryNoteTable):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(BankPromissoryNoteTable, Voucher), fieldNum(BankPromissoryNoteTable, TransDate));
                break;

            case tableNum(VendPurchOrderJour):
                this.updateQueryForVendPurchOrderJour(_query);
                break;

            case tableNum(PurchTable):
                this.updateQueryForPurchTable(_query);
                break;

            case tableNum(CustSettlement):
                if (countryRegion_RU)
                {
                    common = element.args().record();
                    this.addDynaLink(common, fieldNum(CustSettlement, TaxVoucher_RU), fieldNum(CustSettlement, TransDate));
                }

                if (element.args().menuItemName() == menuItemDisplayStr(LedgerTransVoucherCustVendSettlement))
                {
                    this.updateQueryForCustVendSettlement(_query);
                }
                break;

            case tableNum(VendSettlement):
                if (countryRegion_RU)
                {
                    common = element.args().record();
                    this.addDynaLink(common, fieldNum(VendSettlement, TaxVoucher_RU), fieldNum(VendSettlement, TransDate));
                }

                if (element.args().menuItemName() == menuItemDisplayStr(LedgerTransVoucherCustVendSettlement))
                {
                    this.updateQueryForCustVendSettlement(_query);
                }
                break;

            case tableNum(VendInvoiceTrans):
                if (countryRegion_RU)
                {
                    this.updateQueryForVendInvoiceTrans_RU();
                }
                break;

            case tableNum(InventJournalTrans):
                if (countryRegion_RU)
                {
                    common = element.args().record();
                    this.addDynaLink(common, fieldNum(InventJournalTrans, Voucher), fieldNum(InventJournalTrans, TransDate));
                }
                break;

            case tableNum(RCashTrans):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(RCashTrans, Voucher), fieldNum(RCashTrans, TransDate));
                break;

            case tableNum(RDeferralsTrans):
                this.updateQueryForRDeferrals_RU(_query);
                break;

            case tableNum(RAssetTrans):
                this.updateQueryForRAsset_RU(_query, false);
                break;

            case tableNum(EmplTrans_RU):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(EmplTrans_RU, Voucher), fieldNum(EmplTrans_RU, TransDate));
                break;

            case tableNum(TmpRTSLLedgerTrans):
                if (countryRegion_RU)
                {
                    this.updateQueryForTmpRTSLLedgerTrans_RU(_query);
                }
                break;

            case tableNum(BankPaymentOrderJour_RU):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(BankPaymentOrderJour_RU, Voucher), fieldNum(BankPaymentOrderJour_RU, PaymentTransDate));
                break;

            case tableNum(FactureJour_RU):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(FactureJour_RU, Voucher), fieldNum(FactureJour_RU, FactureDate));
                break;

            case tableNum(CustVendTransPostingLog_RU):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(CustVendTransPostingLog_RU, Voucher), fieldNum(CustVendTransPostingLog_RU, TransDate));
                break;

            case tableNum(PurchBookVATProcessLogTable_RU):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(PurchBookVATProcessLogTable_RU, Voucher), fieldNum(PurchBookVATProcessLogTable_RU, TransDate));
                break;

            case tableNum(SalesBookVATProcessLogTable_RU):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(SalesBookVATProcessLogTable_RU, Voucher), fieldNum(SalesBookVATProcessLogTable_RU, TransDate));
                break;

            case tableNum(EmplExchRateAdjustment_RU):
                common = element.args().record();
                this.addDynaLinkForCreatedTransactionId(_query, common as EmplExchRateAdjustment_RU);
                break;

            case tableNum(CustomJournalTable_RU):
                this.addDynaLink(element.args().record(), fieldNum(CustomJournalTable_RU, LedgerVoucher), fieldNum(CustomJournalTable_RU, PlanArrivalDate));
                break;

            case tableNum(CustomCorrectionTable_RU):
                this.addDynaLink(element.args().record(), fieldNum(CustomCorrectionTable_RU, LedgerVoucher), fieldNum(CustomCorrectionTable_RU, CorrectionDate));
                break;

            case tableNum(GoodsInRouteJour_RU):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(GoodsInRouteJour_RU, Voucher), fieldNum(GoodsInRouteJour_RU, GoodsInRouteDate));
                break;
            case tableNum(TaxWithholdTrans_IN):
                if (countryRegion_IN)
                {
                    common = element.args().record();
                    element.updateQueryForTaxInquiry_IN(_query, common);
                }
                break;
            case tableNum(CustomsShippingBillJour_IN):
                if (TaxParameters::isCustomsEnable_IN())
                {
                    common = element.args().record();
                    this.addDynaLink(common, fieldNum(CustomsShippingBillJour_IN, LedgerVoucher), fieldNum(CustomsShippingBillJour_IN, ShippingBillDate));
                }
                break;
            case tableNum(EximDBKTrans_IN):
                if (TaxParameters::isCustomsEnable_IN())
                {
                    common = element.args().record();
                    this.addDynaLink(common, fieldNum(EximDBKTrans_IN, Voucher), fieldNum(EximDBKTrans_IN, TransDate));
                }
                break;
            case tableNum(EximTaxDetails_IN):
                if (TaxParameters::isCustomsEnable_IN())
                {
                    common = element.args().record();
                    this.addDynaLink(common, fieldNum(EximTaxDetails_IN, Voucher), fieldNum(EximTaxDetails_IN, TransDate));
                }
                break;
            case tableNum(EximEPCGExportTrans_IN):
                if (TaxParameters::isCustomsEnable_IN())
                {
                    common = element.args().record();
                    this.addDynaLink(common, fieldNum(EximEPCGExportTrans_IN, LedgerVoucher), fieldNum(EximEPCGExportTrans_IN, ShippingBillDate));
                }
                break;
            case tableNum(UpdatePLAEnquiry_IN):
                if (TaxParameters::isExciseEnable_IN())
                {
                    common = element.args().record();
                    this.addDynaLink(common, fieldNum(UpdatePLAEnquiry_IN, LedgerVoucher), fieldNum(UpdatePLAEnquiry_IN, TransDate));
                }
                break;
            case tableNum(TmpSalesTaxInquiryTable_IN):
                if (TaxParameters::isSalesTaxEnable_IN())
                {
                    common = element.args().record();
                    element.updateQueryForTaxInquiry_IN(_query, common);
                }
                break;
            case tableNum(TmpCustomsInquiryTable_IN):
                if (TaxParameters::isCustomsEnable_IN())
                {
                    common = element.args().record();
                    element.updateQueryForTaxInquiry_IN(_query, common);
                }
                break;
            case tableNum(TmpIndirectTaxInquiryTable_IN):
                if (TaxParameters::checkTaxParameters_IN())
                {
                    common = element.args().record();
                    element.updateQueryForTaxInquiry_IN(_query, common);
                }
                break;
            case tableNum(TmpExciseInquiryTable_IN):
                if (TaxParameters::isExciseEnable_IN())
                {
                    common = element.args().record();
                    element.updateQueryForTaxInquiry_IN(_query, common);
                }
                break;
            case tableNum(TmpServiceTaxInquiryTable_IN):
                if (TaxParameters::isServiceTaxEnable_IN())
                {
                    common = element.args().record();
                    element.updateQueryForTaxInquiry_IN(_query, common);
                }
                break;
            case tableNum(TmpVATInquiryTable_IN):
                if (TaxParameters::isVATEnable_IN())
                {
                    common = element.args().record();
                    element.updateQueryForTaxInquiry_IN(_query, common);
                }
                break;
            case tableNum(VATDefermentTransaction_IN):
                if (TaxParameters::isVATEnable_IN())
                {
                    common = element.args().record();
                    this.addDynaLink(common, fieldNum(VATDefermentTransaction_IN, Voucher), fieldNum(VATDefermentTransaction_IN, Date));
                }
                break;
            case tableNum(TmpVATDefermentBalLine_IN):
                if (TaxParameters::isVATEnable_IN())
                {
                    element.executeQueryForVATDeferment_IN(_query);
                }
                break;
            case tableNum(TmpDirectTaxInquiryTable_IN):
                if (TaxWithholdParameters_IN::checkTaxParameters())
                {
                    common = element.args().record();
                    element.updateQueryForTaxInquiry_IN(_query, common);
                }
                break;
            case tableNum(TaxWithholdReportVoucher_IN):
                if (TaxWithholdParameters_IN::checkTaxParameters())
                {
                    common = element.args().record();
                    this.addDynaLink(common, fieldNum(TaxWithholdReportVoucher_IN, Voucher), fieldNum(TaxWithholdReportVoucher_IN, TransDate));
                }
                break;
            case tableNum(TaxWithholdReportVoucher):
                if (countryRegion_BR)
                {
                    common = element.args().record();
                    this.addDynaLink(common, fieldNum(TaxWithholdReportVoucher, Voucher), fieldNum(TaxWithholdReportVoucher, TransDate));
                }
                break;
            case tableNum(CzCustAdvanceInvoiceTable):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(CzCustAdvanceInvoiceTable, Voucher), fieldNum(CzCustAdvanceInvoiceTable, InvoiceDate));
                break;
            case tableNum(CustPrepaymentInvoiceTable):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(CustPrepaymentInvoiceTable, Voucher), fieldNum(CustPrepaymentInvoiceTable, InvoiceDate));
                break;
            case tableNum(ACOProdCostTable_BR):
                if (countryRegion_BR)
                {
                    common = element.args().record();
                    this.addDynaLink(common, fieldNum(ACOProdCostTable_BR, Voucher), fieldNum(ACOProdCostTable_BR, TransDate));
                }
                break;
            case tableNum(TaxFiscalDocument_BR):
                if (countryRegion_BR)
                {
                    common = element.args().record();
                    this.addDynaLink(common, fieldNum(TaxFiscalDocument_BR, Voucher), fieldNum(TaxFiscalDocument_BR, InvoiceDate));
                    element.control(element.controlId(formControlStr(LedgerTransVoucher, Originaldocuments))).enabled(false);
                }
                break;
            case tableNum(FiscalDocument_BR):
                if (BrazilParameters::isEnabled())
                {
                    common = element.args().record();
                    element.updateQueryForFiscalDocument(_query);
                    element.control(element.controlId(formControlStr(LedgerTransVoucher, Originaldocuments))).enabled(false);
                }
                break;
            case tableNum(SalesComplementaryInvoiceHeader):
                if (BrazilParameters::isEnabled())
                {
                    common = element.args().record();
                    this.addDynaLink(common, fieldNum(SalesComplementaryInvoiceHeader, LedgerVoucher), fieldNum(SalesComplementaryInvoiceHeader, DocumentDate));
                    element.control(element.controlId(formControlStr(LedgerTransVoucher, Originaldocuments))).enabled(false);
                }
                break;
            case tableNum(PurchComplementaryInvoiceHeader):
                if (BrazilParameters::isEnabled())
                {
                    element.updateQueryForPurchComplementaryInvoice(_query);
                }
                break;
            case tableNum(CustOverdueVATJournalTable_W):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(CustOverdueVATJournalTable_W, LedgerVoucher), fieldNum(CustOverdueVATJournalTable_W, TransDate));
                element.control(element.controlId(formControlStr(LedgerTransVoucher, Originaldocuments))).enabled(false);
                break;
            case tableNum(VendOverdueVATJournalTable_W):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(VendOverdueVATJournalTable_W, LedgerVoucher), fieldNum(VendOverdueVATJournalTable_W, TransDate));
                element.control(element.controlId(formControlStr(LedgerTransVoucher, Originaldocuments))).enabled(false);
                break;
            case tableNum(VendOverdueCITPITJournalTable_W):
                common = element.args().record();
                this.updateQueryForVendOverdueCITPIT(_query);
                break;
            case tableNum(RPayDepositTable) :
                this.updateDynaLinkForRPayDepositTable();
                break;
            case tableNum(RPayTaxTransSettlement) :
                common = element.args().record();
                this.addDynaLink(common, fieldNum(RPayTaxTransSettlement, SettleVoucher), fieldNum(RPayTaxTransSettlement, SettleDate));
                break;
            case tableNum(RPayTaxSettlement) :
                common = element.args().record();
                this.addDynaLink(common, fieldNum(RPayTaxSettlement, Voucher), fieldNum(RPayTaxSettlement, TransDate));
                break;
            case tableNum(TSTimesheetTable):
                this.updateQueryForTimesheet(_query);
                break;
            case tableNum(PlInventPackageTrans):
                common = element.args().record();
                this.addDynaLink(common, fieldNum(PlInventPackageTrans, Voucher), fieldNum(PlInventPackageTrans, TransDate));
                break;
            case tableNum(TaxWithholdTrans):
                this.updateQueryForTaxWithholdTrans(_query);
                break;
            case tableNum(TaxWithholdReportVoucher_TH):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoGB, #isoSA, #isoTH, #isoIE])
                    || TaxWithholdingGlobalFeature::isFeatureAndParamEnabled())
                {
                    common = element.args().record();
                    this.addDynaLinkVoucher(common, fieldNum(TaxWithholdReportVoucher_TH, Voucher));
                }
                break;
            
            case tableNum(BudgetReservationHeader_PSN):
                this.updateQueryForBudgetReservation(_query);
                break;                

            case tableNum(FBNonFiscalOperation_BR):
                if (countryRegion_BR)
                {
                    common = element.args().record();
                    this.addDynaLinkVoucher(common, fieldNum(FBNonFiscalOperation_BR, Voucher));
                }
                break;

            case tableNum(LedgerVoucherTransAuditLogDetail):
                common = element.args().record();
                this.addDynaLinkVoucher(common, fieldNum(LedgerVoucherTransAuditLogDetail, Voucher));
                break;

            case tableNum(LedgerVoucherTransAuditLogDetailTmp):
                common = element.args().record();
                this.addDynaLinkVoucher(common, fieldNum(LedgerVoucherTransAuditLogDetailTmp, Voucher));
                break;

            default:
                break;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxBranchControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits the status of controls that for Thailand Multiple Tax branches feature.
    /// </summary>
    public void initTaxBranchControls()
    {
        // For Thailand MTB controls based on sys fields, they are set as invisiable by default.
        // Needs to init their status here.
        displayTaxBranchDimension_TH.visible(true);
        displayTaxBranchDimension_general_TH.visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectVoucher</Name>
				<Source><![CDATA[
    public boolean isProjectVoucher()
    {
        Args            callerArgs = element.args();
        FormRun         callerFormRun;
        str             callerFormName;
        boolean         isProjectVoucher = false;
        TaxTrans        taxTrans;

        if (callerArgs)
        {
            callerFormRun = callerArgs.caller() as FormRun;

            if (callerFormRun)
            {
                callerFormName = callerFormRun.name();
            }

            taxTrans = callerArgs.record() as TaxTrans;
        }

        if (callerFormName == formStr(ProjInvoiceJournal) || (taxTrans && taxTrans.Source == TaxModuleType::Project))
        {
            isProjectVoucher = true;
        }

        return isProjectVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrExecuteRebatePayments</Name>
				<Source><![CDATA[
    public void mcrExecuteRebatePayments(Query _query)
    {
        QueryBuildDataSource    queryBuildDataSource, queryBuildDataSourceCustTrans;

        CustTrans               custTrans;
        VendTrans               vendTrans;

        queryBuildDataSource = _query.dataSourceTable(tableNum(GeneralJournalEntry));
        queryBuildDataSource.clearDynalinks();

        switch (element.args().record().TableId)
        {
            case tableNum(custTrans):
                custTrans = element.args().record();

                queryBuildDataSourceCustTrans = queryBuildDataSource.addDataSource(tableNum(CustTrans));
                queryBuildDataSourceCustTrans.addRange(fieldNum(CustTrans, Voucher)).value(custTrans.Voucher);
                queryBuildDataSourceCustTrans.addRange(fieldNum(CustTrans, transDate)).value(date2str(custTrans.TransDate, -1, -1, -1, -1, -1, -1, DateFlags::FormatAll));

                queryBuildDataSourceCustTrans.joinMode(JoinMode::InnerJoin);

                queryBuildDataSourceCustTrans.addLink(fieldNum(GeneralJournalEntry, JournalNumber), fieldNum(CustTrans, Voucher));
                queryBuildDataSourceCustTrans.addLink(fieldNum(GeneralJournalEntry, AccountingDate), fieldNum(CustTrans, TransDate));
                break;

            case tableNum(vendTrans):
                vendTrans = element.args().record();

                queryBuildDataSourceCustTrans = queryBuildDataSource.addDataSource(tableNum(VendTrans));
                queryBuildDataSourceCustTrans.addRange(fieldNum(VendTrans, Voucher)).value(vendTrans.Voucher);
                queryBuildDataSourceCustTrans.addRange(fieldNum(VendTrans, transDate)).value(date2str(vendTrans.TransDate, -1, -1, -1, -1, -1, -1, DateFlags::FormatAll));

                queryBuildDataSourceCustTrans.joinMode(JoinMode::InnerJoin);

                queryBuildDataSourceCustTrans.addLink(fieldNum(GeneralJournalEntry, JournalNumber), fieldNum(VendTrans, Voucher));
                queryBuildDataSourceCustTrans.addLink(fieldNum(GeneralJournalEntry, AccountingDate), fieldNum(VendTrans, TransDate));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptUser</Name>
				<Source><![CDATA[
    private void promptUser(Query _query)
    {
        QueryBuildDataSource ds;
        QueryBuildRange      qbr;
        QueryBuildDataSource dsVoucherType;

        // manually add the natural key query fields
        ds = _query.dataSourceTable(tableNum(GeneralJournalEntry));
        ds.addRange(fieldNum(GeneralJournalEntry, JournalNumber));
        ds.addRange(fieldNum(GeneralJournalEntry, SubledgerVoucher));
        ds.addRange(fieldNum(GeneralJournalEntry, AccountingDate));

        if (chineseVoucher_CN)
        {
            dsVoucherType = _query.dataSourceTable(tableNum(LedgerVoucherType_CN));
            _query.addQueryFilter(dsVoucherType, fieldStr(LedgerVoucherType_CN,Id));

            ds = _query.dataSourceTable(tableNum(GeneralJournalEntry_W));
            ds.addRange(fieldNum(GeneralJournalEntry_W, Voucher_CN));
        }

        if (ignoreAccounts_CN)
        {
            ds  = SysQuery::findOrCreateDataSource(_query, tableNum(MainAccount));
            qbr = ds.addRange(fieldNum(MainAccount, LedgerChartOfAccounts));
            qbr.value(queryValue(LedgerChartOfAccounts::current()));
            qbr.status(RangeStatus::Hidden);
            SysQuery::findOrCreateRange(ds, fieldNum(MainAccount, MainAccountId)).status(RangeStatus::Hidden);
            SysQuery::findOrCreateRange(SysQuery::findOrCreateDataSource(_query, tableNum(TransactionLog)), fieldNum(TransactionLog, RecId)).status(RangeStatus::Hidden);
        }
        queryRun = new QueryRun(_query);

        if (!queryRun.prompt())
        {
            element.close();
        }
        else if (chineseVoucher_CN
            && SysQuery::findOrCreateRange(SysQuery::findOrCreateDataSource(queryRun.query(), tableNum(GeneralJournalEntry)), fieldNum(GeneralJournalEntry, AccountingDate)).value() == '')
        {
            warning("@SYS24455");
            element.close();
        }

        generalJournalEntry_ds.query(queryRun.query());
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRunLedgerTransVoucher_CN</Name>
				<Source><![CDATA[
    public QueryRun queryRunLedgerTransVoucher_CN()
    {
        return generalJournalAccountEntry_ds.queryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsVisibled_CN</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Set fields visible according to the chinese functionality hide foreign currency
    /// </summary>
    /// <param name="_visibled">
    ///     Visible parameter which is used for showing fields or not
    /// </param>
    public void setFieldsVisibled_CN(boolean _visibled = false)
    {
        generalJournalLine_AmountCurDebit_CN.visible(_visibled);
        generalJournalLine_AmountCurCredit_CN.visible(_visibled);
        ledgerTrans_AmountMSTSecond.visible(_visibled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showZakatFields_SA</Name>
				<Source><![CDATA[
    private void showZakatFields_SA()
    {
        if (isZakatEnabled
            && element.args().menuItemName() == menuitemDisplayStr(LedgerTransactionAdjustment_SA))
        {
            fromZakatMenu = true;
            actionPane.visible(false);
            zakatAdjustment.enabled(generalJournalAccountEntry.RecId);
            element.design().caption("@SYS322514");
        }
        else
        {
            zakat.visible(false);
            dateGroup.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDynaLinkForRPayDepositTable</Name>
				<Source><![CDATA[
    public void updateDynaLinkForRPayDepositTable()
    {
        Common common = element.args().record();

        switch (element.args().menuItemName())
        {
            case menuitemDisplayStr(RPayLedgerVoucherCloseDeposit):
                this.addDynaLink(common, fieldNum(RPayDepositTable, ProfitVoucher), fieldNum(RPayDepositTable, ClosedDate));
                break;
            default:
                this.addDynaLink(common, fieldNum(RPayDepositTable, Voucher), fieldNum(RPayDepositTable, VoucherDate));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForAssetTrans</Name>
				<Source><![CDATA[
    private void updateQueryForAssetTrans(Query _query)
    {
        AssetTrans              assetTrans;
        VendInvoiceJour         vendInvoiceJour;
        QueryBuildDataSource    qbd;
        QueryBuildRange         qbr;
        str                     s;
        Voucher                 vendorVoucher;       

        assetTrans   = element.args().record();    

        if (assetTrans.Voucher)
        {
            qbd = this.getSubledgerVoucherLinkDataSource(_query);

            qbd.clearDynalinks();

            qbr = qbd.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));

            s = '(';
            s += this.getVoucherDateRange(assetTrans.Voucher, assetTrans.TransDate);

            // For acquisitions transactions that originated from AP
            // we need to retrieve ledger transactions that might have different
            // voucher number than the one specified on the assetTrans record.
            // Inventory module is used to determine the costing voucher and
            // they might have different voucher series used than AP.
            if (assetTrans.TransType == AssetTransType::Acquisition
                || assetTrans.TransType == AssetTransType::AcquisitionAdj)
            {
                if (AssetParameters::find().DeductCashDisc)
                {
                    select firstOnly CostLedgerVoucher, InvoiceDate
                        from vendInvoiceJour
                        where vendInvoiceJour.LedgerVoucher == assetTrans.Voucher;
                    if (vendInvoiceJour.CostLedgerVoucher)
                    {
                        vendorVoucher = vendInvoiceJour.CostLedgerVoucher;
                    }
                }
                else
                {
                    select firstOnly LedgerVoucher, InvoiceDate
                        from vendInvoiceJour
                        where vendInvoiceJour.CostLedgerVoucher == assetTrans.Voucher;
                    if (vendInvoiceJour.LedgerVoucher)
                    {
                        vendorVoucher = vendInvoiceJour.LedgerVoucher;
                    }
                }

                if (vendorVoucher)
                {
                    s += ' || ' + this.getVoucherDateRange(vendorVoucher, vendInvoiceJour.InvoiceDate);
                }
            }
            s +=')';

            qbr.value(s);
            qbr.status(RangeStatus::Hidden);
        }
        else
        {
           Common common = element.args().record();
           this.addDynaLink(common, fieldNum(AssetTrans, Voucher), fieldNum(AssetTrans, TransDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForBudgetTransaction</Name>
				<Source><![CDATA[
    private void updateQueryForBudgetTransaction(Query _query)
    {
        GeneralJournalEntry    inputGeneralJournalEntry;
        BudgetTransactionLine   budgetTransactionLine;
        AllChosen               allChosen;
        QueryBuildDataSource    ds;

        allChosen = element.args().parmEnum();

        budgetTransactionLine = element.args().record() as BudgetTransactionLine;

        inputGeneralJournalEntry = GeneralJournalEntry::find(budgetTransactionLine.GeneralJournalEntry);

        ds = _query.dataSourceTable(tableNum(GeneralJournalEntry));

        ds.addDynalink(
            fieldNum(GeneralJournalEntry, RecId),
            inputGeneralJournalEntry,
            fieldNum(GeneralJournalEntry, RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForCustBillOfExchangeJour</Name>
				<Source><![CDATA[
    private void updateQueryForCustBillOfExchangeJour(Query _query)
    {
        CustBillOfExchangeJour  custBillOfExchangeJour;
        QueryBuildDataSource    qbdsCustBillOfExchangeTrans;
        QueryBuildDataSource    qbdsGeneralJournalEntry;

        custBillOfExchangeJour = element.args().record();

        qbdsGeneralJournalEntry = this.getSubledgerVoucherLinkDataSource(_query);
        qbdsCustBillOfExchangeTrans = qbdsGeneralJournalEntry.addDataSource(tableNum(CustBillOfExchangeTrans));

        qbdsGeneralJournalEntry.clearDynalinks();

        qbdsCustBillOfExchangeTrans.joinMode(JoinMode::InnerJoin);

        qbdsCustBillOfExchangeTrans.addLink(fieldNum(SubledgerVoucherGeneralJournalEntry, AccountingDate), fieldNum(CustBillOfExchangeTrans, TransDate));
        qbdsCustBillOfExchangeTrans.addLink(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher), fieldNum(CustBillOfExchangeTrans, Voucher));
        qbdsCustBillOfExchangeTrans.addRange(fieldNum(CustBillOfExchangeTrans, BillOfExchangeId)).value(queryValue(custBillOfExchangeJour.BillOfExchangeId));
        qbdsCustBillOfExchangeTrans.addRange(fieldNum(CustBillOfExchangeTrans, SeqNum)).value(queryValue(custBillOfExchangeJour.BillOfExchangeSeqNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForCustInterestJour</Name>
				<Source><![CDATA[
    private void updateQueryForCustInterestJour(Query _query)
    {
        CustInterestJour        custInterestJour = element.args().record();
        CustInterestTrans       custInterestTrans;
        SubledgerVoucherGeneralJournalEntry    subLedgerVoucher;
        QueryBuildDataSource    ds;
        QueryBuildRange         voucherRange;
        str                     rangeExpression = '';

        ds = this.getSubledgerVoucherLinkDataSource(_query);

        // the dynalinks have to be cleared because they do not include all the possible tables
        // and the tables can be optional
        ds.clearDynalinks();

        // build the range expression for the CustInterestJour.FeeVoucher record
        rangeExpression = this.getVoucherDateRange(custInterestJour.FeeVoucher, custInterestJour.Updated);

        if (element.args().parmEnum() == AllChosen::All)
        {
            // build the range expression for the related CustInterestTrans.GeneralJournalEntry records
            while select Voucher, AccountingDate, GeneralJournalEntry from subLedgerVoucher
                exists join custInterestTrans
                    where
                        custInterestTrans.GeneralJournalEntry == subLedgerVoucher.GeneralJournalEntry &&
                        custInterestTrans.InterestNote == custInterestJour.InterestNote
            {
                if (strLen(rangeExpression) > 0)
                {
                    rangeExpression += ' || ';
                }

                rangeExpression += this.getVoucherDateRange(subLedgerVoucher.Voucher, subLedgerVoucher.AccountingDate);
            }
        }

        // create the query range for the range expression created above
        voucherRange = ds.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));
        voucherRange.value('(' + rangeExpression + ')');
        voucherRange.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForCustPackingSlipJour</Name>
				<Source><![CDATA[
    private void updateQueryForCustPackingSlipJour(Query _query)
    {
        CustPackingSlipJour     custPackingSlipJour;
        QueryBuildRange         qbr;
        QueryBuildDataSource    qbdsGeneralJournalEntry;
        QueryBuildDataSource    qbdsCustPackingSlipVersion;

        qbdsGeneralJournalEntry = this.getSubledgerVoucherLinkDataSource(_query);
        qbdsCustPackingSlipVersion = qbdsGeneralJournalEntry.addDataSource(tableNum(CustPackingSlipVersion));

        custPackingSlipJour = element.args().record() as CustPackingSlipJour;

        qbdsGeneralJournalEntry.clearDynalinks();

        qbdsCustPackingSlipVersion.joinMode(JoinMode::InnerJoin);

        qbdsCustPackingSlipVersion.addLink(fieldNum(SubledgerVoucherGeneralJournalEntry, AccountingDate), fieldNum(CustPackingSlipVersion, AccountingDate));
        qbdsCustPackingSlipVersion.addRange(fieldNum(CustPackingSlipVersion, CustPackingSlipJour)).value(queryValue(custPackingSlipJour.RecId));

        qbr  = qbdsGeneralJournalEntry.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));
        qbr.value(strFmt('(%1.%2 == %3.%4)',
            qbdsGeneralJournalEntry.name(),
            this.getVoucherFieldName(),
            qbdsCustPackingSlipVersion.name(),
            fieldStr(CustPackingSlipVersion, LedgerVoucher)));
        qbr.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForFiscalDocument</Name>
				<Source><![CDATA[
    private void updateQueryForFiscalDocument(Query _query)
    {
        FiscalDocument_BR fiscalDocument;
        QueryBuildDataSource    qbd;
        QueryBuildRange         qbr;
        str                     s;

        fiscalDocument = element.args().record();

        qbd = this.getSubledgerVoucherLinkDataSource(_query);
        qbd.clearDynalinks();

        qbr = qbd.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));
        s = '(';
        s += this.getVoucherDateRange(fiscalDocument.Voucher, fiscalDocument.AccountingDate);

        if (fiscalDocument.InventoryVoucher)
        {
            s += ' || ';
            s += this.getVoucherDateRange(fiscalDocument.InventoryVoucher, fiscalDocument.AccountingDate);
        }

        if (fiscalDocument.CancelVoucherId)
        {
            s += ' || ';
            s += this.getVoucherDateRange(fiscalDocument.CancelVoucherId, fiscalDocument.CancelAccountingDate);
        }

        if (fiscalDocument.CancelInventoryVoucherId)
        {
            s += ' || ';
            s += this.getVoucherDateRange(fiscalDocument.CancelInventoryVoucherId, fiscalDocument.CancelAccountingDate);
        }

        s +=')';

        qbr.value(s);
        qbr.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForGeneralJournalEntry</Name>
				<Source><![CDATA[
    private void updateQueryForGeneralJournalEntry(Query _query)
    {
        GeneralJournalEntry inputGeneralJournalEntry;
        AllChosen allChosen;
        QueryBuildDataSource ds;
        QueryBuildDataSource qbd1, qbd2;
        QueryBuildRange qbrVoucher, qbrTransDate;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherLink;

        allChosen = element.args().parmEnum();

        inputGeneralJournalEntry = element.args().record() as GeneralJournalEntry;

        if (showAllRelated)
        {
            subledgerVoucherLink = SubledgerVoucherGeneralJournalEntry::findByGeneralJournalEntry(inputGeneralJournalEntry);

            _query.allowCrossCompany(true);

            ds = this.getSubledgerVoucherLinkDataSource(_query);

            qbd1 = ds.addDataSource(tableNum(LedgerTransVoucherLink), 'LTVL1');
            qbd1.joinMode(JoinMode::InnerJoin);
            qbd1.addLink(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher), fieldNum(LedgerTransVoucherLink, Voucher));
            qbd1.addLink(fieldNum(SubledgerVoucherGeneralJournalEntry, AccountingDate), fieldNum(LedgerTransVoucherLink, TransDate));
            qbd1.addLink(fieldNum(SubledgerVoucherGeneralJournalEntry, VoucherDataAreaId), fieldNum(LedgerTransVoucherLink, DataAreaId));

            qbd2 = qbd1.addDataSource(tableNum(LedgerTransVoucherLink), 'LTVL2');
            qbd2.joinMode(JoinMode::InnerJoin);
            qbd2.addLink(fieldNum(LedgerTransVoucherLink, VoucherGroupId), fieldNum(LedgerTransVoucherLink, VoucherGroupId), 'LTVL1');

            qbrVoucher = qbd2.addRange(fieldNum(LedgerTransVoucherLink, Voucher));
            qbrVoucher.value(subledgerVoucherLink.Voucher);
            qbrTransDate = qbd2.addRange(fieldNum(LedgerTransVoucherLink, TransDate));
            qbrTransDate.value(queryValue(subledgerVoucherLink.AccountingDate));
        }
        else
        {
            ds = _query.dataSourceTable(tableNum(GeneralJournalEntry));

            if (inputGeneralJournalEntry)
            {
                ds.addDynalink(
                    fieldNum(GeneralJournalEntry, SubledgerVoucher),
                    inputGeneralJournalEntry,
                    fieldNum(GeneralJournalEntry, SubledgerVoucher));

                ds.addDynalink(
                    fieldNum(GeneralJournalEntry, AccountingDate),
                    inputGeneralJournalEntry,
                    fieldNum(GeneralJournalEntry, AccountingDate));
            }
            else
            {
                ds.addDynalink(
                fieldNum(GeneralJournalEntry, RecId),
                inputGeneralJournalEntry,
                fieldNum(GeneralJournalEntry, RecId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForInflationAdj_MX</Name>
				<Source><![CDATA[
    private void updateQueryForInflationAdj_MX(Query _query)
    {
        QueryBuildDataSource    qbd;
        QueryBuildRange         qbr;
        InflationAdjJournal_MX  inflationAdjJournal;
        SubledgerVoucherGeneralJournalEntry voucherLink;
        Voucher                 voucher, reversedVoucher;
        str                     s;

        inflationAdjJournal = element.args().record();

        // get voucher numbers. There should only be one row in SubledgerVoucherGeneralJournalEntry associated with GeneralJournalEntry
        voucherLink = SubledgerVoucherGeneralJournalEntry::findByGeneralJournalEntry(GeneralJournalEntry::find(inflationAdjJournal.Voucher));
        voucher = voucherLink.Voucher;

        if (inflationAdjJournal.ReversedVoucher)
        {
            voucherLink = SubledgerVoucherGeneralJournalEntry::findByGeneralJournalEntry(GeneralJournalEntry::find(inflationAdjJournal.ReversedVoucher));
            reversedVoucher = voucherLink.Voucher;
        }

        if (inflationAdjJournal)
        {
            qbd = _query.dataSourceTable(tableNum(GeneralJournalEntry));
            qbd.clearDynalinks();

            qbd = this.getSubledgerVoucherLinkDataSource(_query);
            qbd.clearDynalinks();

            qbr = qbd.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));

            s = '(';
            if (inflationAdjJournal.Voucher && inflationAdjJournal.ReversedVoucher)
            {
                s += '(' + this.getVoucherRangeExpression(voucher) + ')' + '||' +
                    '(' + this.getVoucherRangeExpression(reversedVoucher) + ')';
            }
            else if (inflationAdjJournal.Voucher && !inflationAdjJournal.ReversedVoucher)
            {
                s += '(' + this.getVoucherRangeExpression(voucher) + ')';
            }
            s +=')';

            qbr.value(s);
            qbr.status(RangeStatus::Hidden);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForInventTrans</Name>
				<Source><![CDATA[
    private void updateQueryForInventTrans(Query _query)
    {
        InventTrans             inventTrans;
        QueryBuildDataSource    qbd;
        QueryBuildRange         qbr;
        str                     s;
        boolean                 financial;
        boolean                 physical;
        boolean                 isStandardCostBasedProduct;
        VendInvoiceJour         vendInvoiceJour;

        if (element.args().dataset() == tableNum(InventTransArchive))
        {
            InventTransArchive inventTransArchive = element.args().record();
            inventTrans.initFromInventTransArchive(inventTransArchive);
        }
        else
        {
            inventTrans = element.args().record();
        }

        isStandardCostBasedProduct  = inventTrans.inventTable().modelGroup().inventModelType().stdCostBased();

        qbd = this.getSubledgerVoucherLinkDataSource(_query);
        qbr = qbd.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));

        financial   = element.args().parmEnumType() == enumNum(FinancialPhysical);
        physical    = financial;

        if (financial)
        {
            financial = element.args().parmEnum() == FinancialPhysical::Financial;
        }
        else
        {
            financial = true;
        }

        financial = financial && inventTrans.DateFinancial;

        if (physical)
        {
            physical = element.args().parmEnum() == FinancialPhysical::Physical;
        }
        else
        {
            physical = true;
        }

        physical = physical && inventTrans.DatePhysical;

        s = '(';

        if (financial)
        {
            s += '(' + this.getVoucherRangeExpression(inventTrans.Voucher) + ')';

            if (isStandardCostBasedProduct)
            {
                s += ')';
            }
            else
            {
                s += ' && ' + this.getAccountingDateRangeExpression(inventTrans.DateFinancial) + ')';
            }

            if (inventTrans.Voucher)
            {
                select firstOnly vendInvoiceJour
                    where vendInvoiceJour.CostLedgerVoucher == inventTrans.Voucher &&
                          vendInvoiceJour.InvoiceDate == inventTrans.DateFinancial;
                if (vendInvoiceJour)
                {
                    s += '|| ('+ this.getVoucherDateRange(vendInvoiceJour.LedgerVoucher,vendInvoiceJour.InvoiceDate) + ')';
                }
            }
        }

        if (physical)
        {
            if (financial)
            {
                s += ' || ';
            }

            s += '(' + this.getVoucherRangeExpression(inventTrans.VoucherPhysical) + ')';

            if (isStandardCostBasedProduct)
            {
                s += ')';
            }
            else
            {
                s +=' && ' + this.getAccountingDateRangeExpression(inventTrans.DatePhysical) + ')';
            }

            if (inventTrans.VoucherPhysical)
            {
                select firstOnly vendInvoiceJour
                    where vendInvoiceJour.CostLedgerVoucher == inventTrans.VoucherPhysical &&
                          vendInvoiceJour.InvoiceDate == inventTrans.DatePhysical;
                if (vendInvoiceJour)
                {
                    s += '|| ('+ this.getVoucherDateRange(vendInvoiceJour.LedgerVoucher,vendInvoiceJour.InvoiceDate) + ')';
                }
            }
        }

        s += ')';

        if (physical || financial)
        {
            qbr.value(s);
        }
        else
        {
            qbr.value('(' + this.getAccountingDateRangeExpression(dateNull()) + ')');
        }

        qbr.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForInventTransPosting</Name>
				<Source><![CDATA[
    private void updateQueryForInventTransPosting(Query _query)
    {
        InventTransPosting      inventTransPosting;
        QueryBuildDataSource    qbd;
        QueryBuildRange         qbr;
        str                     s;
        boolean                 isStandardCostBasedProduct;

        inventTransPosting          = element.args().record();
        isStandardCostBasedProduct  = InventTable::find(inventTransPosting.itemId).modelGroup().inventModelType().stdCostBased();

        qbd = this.getSubledgerVoucherLinkDataSource(_query);
        qbr = qbd.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));

        s = '(';

        s += '(' + this.getVoucherRangeExpression(inventTransPosting.Voucher) + ')';

        if (isStandardCostBasedProduct)
        {
            s += ')';
        }
        else
        {
            s +=' && ' + this.getAccountingDateRangeExpression(inventTransPosting.TransDate) + ')';
        }

        qbr.value(s);

        qbr.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForMenu</Name>
				<Source><![CDATA[
    private void updateQueryForMenu(Query _query)
    {
        QueryBuildDataSource ds;
        TableId sourceTable;

        if (element.args().parm() == formStr(VendTrans) && isConfigurationkeyEnabled(configurationKeyNum(LedgerBasicWithholdingTax)))
        {
            ds = _query.dataSourceTable(tableNum(GeneralJournalAccountEntry));

            ds.addRange(fieldNum(GeneralJournalAccountEntry, Text));
        }

        // verify a GeneralJournalEntry buffer is not passed in the
        // menu case because if the assert fails, we should add a
        // ReferenceNumber range instead of prompting the user
        sourceTable = element.args().dataset();
        Debug::assert(sourceTable != tableNum(GeneralJournalEntry));

        element.promptUser(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForProdTableJour</Name>
				<Source><![CDATA[
    private void updateQueryForProdTableJour(Query _query)
    {
        ProdTableJour           prodTableJour;
        QueryBuildDataSource    ds;
        QueryBuildRange         range;
        str                     s;
        ProdWIPHistoricalCostTable_RU prodWIPHistoricalCostTable, cancelledProdWIPHistoricalCostTable;
        InventSettlement              inventSettlement, cancelledInventSettlement;

        ds = this.getSubledgerVoucherLinkDataSource(_query);

        prodTableJour = element.args().record() as ProdTableJour;

        if (prodTableJour.Voucher != '')
        {
            s = '(';
            s += '(' + this.getVoucherDateRange(prodTableJour.Voucher, prodTableJour.TransDate) + ')';
        }

        if (prodTableJour.ScrapVoucher == '')
        {
            s += ')';
        }
        else
        {
            if (prodTableJour.Voucher == '')
            {
                s = '(';
            }
            else
            {
                s += ' || ';
            }

            s += '(' + this.getVoucherDateRange(prodTableJour.ScrapVoucher, prodTableJour.TransDate) + ')';
            s += ')';
        }
        if (countryRegion_RU)
        {
            while select TableId from prodWIPHistoricalCostTable
                where prodWIPHistoricalCostTable.ProdId    == prodTableJour.ProdId
                   && prodWIPHistoricalCostTable.Voucher   == prodTableJour.Voucher
                   && prodWIPHistoricalCostTable.TransDate == prodTableJour.TransDate
                   && prodWIPHistoricalCostTable.Voucher   != prodWIPHistoricalCostTable.VoucherFinancial
                join TableId from cancelledProdWIPHistoricalCostTable
                    where cancelledProdWIPHistoricalCostTable.ProdId    == prodWIPHistoricalCostTable.ProdId
                       && cancelledProdWIPHistoricalCostTable.Voucher   == prodWIPHistoricalCostTable.VoucherFinancial
                       && cancelledProdWIPHistoricalCostTable.Cancelled == NoYes::Yes
                join TableId from cancelledInventSettlement
                    where cancelledInventSettlement.ItemId     == prodTableJour.ItemId
                       && cancelledInventSettlement.Voucher    == cancelledProdWIPHistoricalCostTable.Voucher
                       && cancelledInventSettlement.TransDate  == cancelledProdWIPHistoricalCostTable.TransDate
                       && cancelledInventSettlement.TransRecId != 0
                       && cancelledInventSettlement.Cancelled  == NoYes::Yes
                join Voucher, TransDate from inventSettlement
                    group by Voucher, TransDate
                    where inventSettlement.SettleTransId == cancelledInventSettlement.SettleTransId
                       && inventSettlement.TransRecId    == cancelledInventSettlement.TransRecId
                       && inventSettlement.RecId         != cancelledInventSettlement.RecId
                       && inventSettlement.Cancelled     == NoYes::Yes
            {
                s += ' || ';
                s += '(' + this.getVoucherDateRange(inventSettlement.Voucher, inventSettlement.TransDate) + ')';
                s += ')';
            }
        }

        if (s != '')
        {
            range = ds.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));
            range.value(s);
            range.status(RangeStatus::Hidden);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForProjAdvancedJournalLine</Name>
				<Source><![CDATA[
    private void updateQueryForProjAdvancedJournalLine(Query _query)
    {
        QueryBuildDataSource qbd = this.getSubledgerVoucherLinkDataSource(_query);
        QueryBuildRange qbr = qbd.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));

        ProjAdvancedJournalLine projAdvancedJournalLine = element.args().record() as ProjAdvancedJournalLine;

        if (projAdvancedJournalLine.ProjDataAreaId == curExt())
        {
            // If not intercompany, show ledger updates button
            projTransPostingButton.visible(true);
        }

        if (projAdvancedJournalLine.Voucher)
        {
            qbr.value(ProjAdvancedJournalLine.Voucher);
        }
        else
        {
            qbr.value(SysQuery::valueEmptyString());
        }

        qbr.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForProjAdvancedJournal</Name>
				<Source><![CDATA[
    private void updateQueryForProjAdvancedJournal(Query _query)
    {
        projTransPostingButton.visible(true);

        QueryBuildDataSource qbd = this.getSubledgerVoucherLinkDataSource(_query);

        QueryBuildRange qbr = qbd.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));

        boolean firstVoucher    = true; 

        str s = '(';

        ProjAdvancedJournal projAdvancedJournal = element.args().record() as ProjAdvancedJournal;
        ProjadvancedJournalLine projAdvancedJournalLine;

        // Each line has its own voucher.  When showing whole document, ensure all vouchers are shown.
        while select projAdvancedJournalLine
            where projAdvancedJournalLine.ProjAdvancedJournal == projAdvancedJournal.RecId
        {
            if (firstVoucher)
            {
                firstVoucher = false;
            }
            else
            {
                s += '||';
            }
            s += this.getVoucherRangeExpression(projAdvancedJournalLine.Voucher);
        }

        s +=')';

        if (firstVoucher)
        {
            s = SysQuery::valueEmptyString();
        }

        qbr.value(s);
        qbr.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the specified <c>Query</c> instance for project.
    /// </summary>
    /// <param name = "_query">
    /// A <c>Query</c> instance.
    /// </param>
    protected void updateQueryForProject(Query _query)
    {
        projTransPostingButton.visible(true);

        QueryBuildDataSource qbd = this.getSubledgerVoucherLinkDataSource(_query);
        QueryBuildRange qbr = qbd.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));

        ProjTransIdBase projTransId;
        Voucher projVoucher;
        [projTransId, projVoucher] = this.getInputForProject();

        if (projTransId != '')
        {
            str rangeValue = this.getRangeValueForProjTransactionID(_query, projTransId);
            qbr.value(rangeValue);
            qbr.status(RangeStatus::Hidden);
        }
        else if (projVoucher != '')
        {
            str rangeValue = this.getRangeValueForProjVoucher(_query, projVoucher);
            qbr.value(rangeValue);
            qbr.status(RangeStatus::Hidden);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRangeValueForProjTransactionID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query range value given the specified project transaction ID.
    /// </summary>
    /// <param name = "_query">
    /// A <c>Query</c> instance.
    /// </param>
    /// <param name = "_projTransId">
    /// A project transaction ID.
    /// </param>
    /// <returns>
    /// A string that is the query range value given the specified project transaction ID.
    /// </returns>
    protected str getRangeValueForProjTransactionID(Query _query, ProjTransIdBase _projTransId)
    {
        str rangeValue;
        boolean firstVoucher = true;
        ProjTransPosting projTransPosting, projTransPostingCheck;

        select firstonly projTransPostingCheck
            where projTransPostingCheck.TransId == _projTransId;

        if (projTransPostingCheck)
        {
            rangeValue = '(';
            while select Voucher, LedgerTransDate from projTransPosting
                    group by Voucher, LedgerTransDate
                    where projTransPosting.TransId == _projTransId
            {
                if (firstVoucher)
                {
                    rangeValue += '('+ this.getVoucherDateRange(projTransPosting.Voucher, projTransPosting.LedgerTransDate) + ')';
                }
                else
                {
                    rangeValue += '|| ('+ this.getVoucherDateRange(projTransPosting.Voucher, projTransPosting.LedgerTransDate) + ')';
                }

                firstVoucher = false;
            }
            rangeValue +=')';

            if (projTransPostingCheck.Voucher)
            {
                VendInvoiceJour vendInvoiceJour;
                select firstOnly vendInvoiceJour
                        where vendInvoiceJour.CostLedgerVoucher == projTransPostingCheck.Voucher &&
                              vendInvoiceJour.InvoiceDate == projTransPostingCheck.LedgerTransDate;
                if (vendInvoiceJour)
                {
                    rangeValue += '|| ('+ this.getVoucherDateRange(vendInvoiceJour.LedgerVoucher, vendInvoiceJour.InvoiceDate) + ')';
                }
            }
        }
        else
        {
            rangeValue = SysQuery::valueEmptyString();
        }

        return rangeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRangeValueForProjVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query range value given the specified voucher.
    /// </summary>
    /// <param name = "_query">
    /// A <c>Query</c> instance.
    /// </param>
    /// <param name = "_projVoucher">
    /// A project transaction ID.
    /// </param>
    /// <returns>
    /// A string that is the query range value given the specified voucher.
    /// </returns>
    protected str getRangeValueForProjVoucher(Query _query, Voucher _projVoucher)
    {
        str rangeValue;
        boolean firstVoucher = true;
        ProjTransPosting projTransPosting, projTransPostingCheck;

        select firstonly projTransPostingCheck
            where projTransPostingCheck.Voucher == _projVoucher;

        if (projTransPostingCheck)
        {
            rangeValue = '(';

            while select Voucher, LedgerTransDate from projTransPosting
                    group by Voucher, LedgerTransDate
                    where projTransPosting.Voucher == _projVoucher
            {
                if (firstVoucher)
                {
                    rangeValue += '('+ this.getVoucherDateRange(projTransPosting.Voucher, projTransPosting.LedgerTransDate) + ')';
                }
                else
                {
                    rangeValue += '|| ('+ this.getVoucherDateRange(projTransPosting.Voucher, projTransPosting.LedgerTransDate) + ')';
                }
                firstVoucher = false;
            }
            rangeValue += ')';
        }
        else
        {
            rangeValue = SysQuery::valueEmptyString();
        }

        return rangeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForPurchComplementaryInvoice</Name>
				<Source><![CDATA[
    private void updateQueryForPurchComplementaryInvoice(Query _query)
    {
        PurchComplementaryInvoiceHeader complementaryInvoice;
        QueryBuildDataSource    qbd;
        QueryBuildRange         qbr;
        str                     s;

        complementaryInvoice = element.args().record();

        if (complementaryInvoice.LedgerVoucher || complementaryInvoice.CostLedgerVoucher)
        {
            qbd = this.getSubledgerVoucherLinkDataSource(_query);

            qbd.clearDynalinks();

            qbr = qbd.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));

            s = '(';
            s += '('+ this.getVoucherDateRange(complementaryInvoice.LedgerVoucher, complementaryInvoice.TransDate) + ')';
            s += ' || ';
            s += '('+ this.getVoucherDateRange(complementaryInvoice.CostLedgerVoucher, complementaryInvoice.TransDate) + ')';
            s +=')';

            qbr.value(s);
            qbr.status(RangeStatus::Hidden);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForPurchTable</Name>
				<Source><![CDATA[
    private void updateQueryForPurchTable(Query _query)
    {
        QueryBuildDataSource    ds;
        QueryBuildRange         voucherRange;
        PurchTable              purchTableArg;
        SubledgerJournalEntry   subLedgerEntry;
        AccountingEvent         accountingEvent;
        str                     rangeExpression = '';

        purchTableArg = element.args().record() as PurchTable;

        // build the range expression for the related PurchTable Vouchers
        while select AccountingDate from accountingEvent
            where accountingEvent.SourceDocumentHeader == purchTableArg.SourceDocumentHeader
        join Voucher from subLedgerEntry
            where subLedgerEntry.AccountingEvent == accountingEvent.RecId
        {
            if (strLen(rangeExpression) > 0)
            {
                rangeExpression += ' || ';
            }

            rangeExpression += this.getVoucherDateRange(subLedgerEntry.Voucher, accountingEvent.AccountingDate);
        }

        //if there are no vouchers present against the PurchTable then no data be selected
        if (strLen(rangeExpression) == 0)
        {
            rangeExpression = this.getVoucherDateRange('', dateNull());
        }

        ds = this.getSubledgerVoucherLinkDataSource(_query);

        // the dynalinks have to be cleared because they do not include all the possible tables
        // and the tables can be optional
        ds.clearDynalinks();

        // create the query range for the range expression created above
        voucherRange = ds.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));
        voucherRange.value('(' + rangeExpression + ')');
        voucherRange.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForRAsset_RU</Name>
				<Source><![CDATA[
    public void updateQueryForRAsset_RU(Query _query, boolean _isFromMenu = true)
    {
        QueryBuildDataSource    qbdsRAssetTrans;
        QueryBuildDataSource    qbdsRAssetTransLedgerView;
        QueryBuildDataSource    qbdsGeneralJournalEntry = this.getSubledgerVoucherLinkDataSource(_query);
        RAssetTrans             rAssetTrans;
        QueryBuildRange         voucherRange;
        QueryBuildRange         transDateRange;

        qbdsGeneralJournalEntry.clearDynalinks();

        if (_isFromMenu)
        {
            qbdsRAssetTransLedgerView = qbdsGeneralJournalEntry.addDataSource(tableNum(RAssetTransUnionView));
            qbdsRAssetTransLedgerView.joinMode(JoinMode::InnerJoin);

            qbdsRAssetTransLedgerView.addLink(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher), fieldNum(RAssetTransUnionView, Voucher));
            qbdsRAssetTransLedgerView.addLink(fieldNum(SubledgerVoucherGeneralJournalEntry, AccountingDate), fieldNum(RAssetTransUnionView, TransDate));
            qbdsRAssetTransLedgerView.addLink(fieldNum(SubledgerVoucherGeneralJournalEntry, VoucherDataAreaId), fieldNum(RAssetTransUnionView, DataAreaId));

            qbdsRAssetTrans = qbdsRAssetTransLedgerView.addDataSource(tableNum(RAssetTrans));
            qbdsRAssetTrans.joinMode(JoinMode::InnerJoin);

            qbdsRAssetTrans.addRange(fieldNum(RAssetTrans, AccountNum));
            qbdsRAssetTrans.addRange(fieldNum(RAssetTrans, AssetStandardId));

            qbdsRAssetTrans.addLink(fieldNum(RAssetTransUnionView, RefRecId), fieldNum(RAssetTrans, RecId));
        }
        else
        {
            rAssetTrans = element.args().record();

            voucherRange = qbdsGeneralJournalEntry.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));
            voucherRange.value(rAssetTrans.Voucher);
            voucherRange.status(RangeStatus::Hidden);

            transDateRange = qbdsGeneralJournalEntry.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, AccountingDate));
            transDateRange.value(queryValue(rAssetTrans.getAccountingDate()));
            transDateRange.status(RangeStatus::Hidden);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForSADTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update query to ledger posting related to SAD
    /// </summary>
    /// <param name="_query">
    /// Query to add SAD-specific ranges
    /// </param>
    private void updateQueryForSADTable(Query _query)
    {
        VendInvoiceJour         callerVendinvoiceJour;
        VendInvoiceJour         vendinvoiceJour;
        VendInvoiceTrans        vendInvoiceTrans;
        PlSADTable              sadTable;
        PlSADInvoice            sadInvoice;
        QueryBuildDataSource    qbd;
        QueryBuildRange         qbr;
        str                     s;

        switch (element.args().dataset())
        {
            case tableNum(VendTrans) :
                VendTrans localVendTrans = element.args().record();
                callerVendinvoiceJour = VendInvoiceJour::findFromVendTransVoucher(localVendTrans.Invoice, localVendTrans.Voucher, localVendTrans.TransDate, localVendTrans.AccountNum, false);
                sadInvoice            = PlSADInvoice::findPurchInvoice(callerVendinvoiceJour.PurchId, callerVendinvoiceJour.InvoiceId);
                sadTable              = PlSADTable::find(sadInvoice.SADNumberCode);
                break;
            
            case tableNum(VendInvoiceJour) :
                callerVendinvoiceJour = element.args().record();
                sadInvoice            = PlSADInvoice::findPurchInvoice(callerVendinvoiceJour.PurchId, callerVendinvoiceJour.InvoiceId);
                sadTable              = PlSADTable::find(sadInvoice.SADNumberCode);
                break;

            case tableNum(PlSADTable)      :
                sadTable              = element.args().record();
                break;
        }

        qbd = this.getSubledgerVoucherLinkDataSource(_query);
        qbd.clearDynalinks();

        qbr = qbd.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));

        s = '(';

        while select * from vendinvoiceJour
        exists join sadInvoice
            where sadInvoice.PurchId       == vendinvoiceJour.PurchId   &&
                  sadInvoice.InvoiceId     == vendinvoiceJour.InvoiceId &&
                  sadInvoice.SADNumberCode == sadTable.SADNumberCode
        {
            select firstonly RecId, InternalInvoiceId from vendInvoiceTrans
                where vendInvoiceTrans.PurchID              == vendInvoiceJour.PurchId     &&
                      vendInvoiceTrans.InvoiceId            == vendInvoiceJour.InvoiceId   &&
                      vendInvoiceTrans.InvoiceDate          == vendInvoiceJour.InvoiceDate &&
                      vendInvoiceTrans.NumberSequenceGroup  == vendInvoiceJour.NumberSequenceGroup;

            if (strLen(s) > 1)
            {
                s += ' || ';
            }

            s += '('+ this.getVoucherDateRange(vendInvoiceJour.LedgerVoucher, vendInvoiceJour.InvoiceDate) + ')';

            if (vendInvoiceJour.CostLedgerVoucher)
            {
                s += ' || ('+ this.getVoucherDateRange(vendInvoiceJour.CostLedgerVoucher, vendInvoiceJour.InvoiceDate) + ')';
            }

            if (vendInvoiceTrans)
            {
                s += ' || ('+ this.getVoucherDateRange(vendInvoiceJour.InternalInvoiceId, vendInvoiceJour.InvoiceDate) + ')';
            }
        }

        s +=')';

        qbr.value(s);
        qbr.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForTaxInquiry_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update query for Indirect tax inquiry forms to include both ledger and cost voucher entries
    /// </summary>
    /// <param name="_query">
    /// The query
    /// </param>
    /// <param name="_taxInquiryMap">
    /// The taxInquiry Map
    /// </param>
    /// <remarks>
    /// This method update the query to get both ledger voucher and cost voucher (if it has).
    /// </remarks>
    private void updateQueryForTaxInquiry_IN(Query _query, TaxInquiryMap_IN _taxInquiryMap)
    {
        QueryBuildDataSource        qbd;
        QueryBuildRange             qbr;
        str                         s;

        if (_taxInquiryMap.Voucher || _taxInquiryMap.CostLedgerVoucher)
        {
            qbd     = this.getSubledgerVoucherLinkDataSource(_query);
            qbd.clearDynalinks();
            qbr     = qbd.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));

            s = '(';
            s += '('+ this.getVoucherDateRange(_taxInquiryMap.Voucher, _taxInquiryMap.TransDate) + ')';
            s += ' || ('+ this.getVoucherDateRange(_taxInquiryMap.CostLedgerVoucher, _taxInquiryMap.TransDate) + ')';
            s +=')';

            qbr.value(s);
            qbr.status(RangeStatus::Hidden);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForTaxWithholdTrans</Name>
				<Source><![CDATA[
    private void updateQueryForTaxWithholdTrans(Query _query)
    {
        QueryBuildDataSource                qbd;
        LedgerTransVoucherLink              ledgerTransVoucherLink;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        GeneralJournalEntry                 generalJournalEntryLoc;
        GeneralJournalAccountEntry          generalJournalAccountEntryLoc;
        RecId                               voucherGroupId;
        str                                 rangeExpression = '';
        QueryBuildRange                     voucherRange;
        TaxWithholdTrans                    taxWithholdTrans;

        taxWithholdTrans = element.args().record();

        if (taxWithholdTrans.Voucher)

        {
            qbd = this.getSubledgerVoucherLinkDataSource(_query);
            qbd.clearDynalinks();
            voucherRange = qbd.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));

            voucherGroupId = LedgerTransVoucherLink::findVoucherGroupId(taxWithholdTrans.Voucher, taxWithholdTrans.TransDate);

            while select Voucher, TransDate from ledgerTransVoucherLink
                where ((ledgerTransVoucherLink.VoucherGroupId == voucherGroupId) &&
                    ((ledgerTransVoucherLink.Voucher != taxWithholdTrans.Voucher) || (ledgerTransVoucherLink.TransDate != taxWithholdTrans.TransDate)))
                EXISTS JOIN subledgerVoucherGeneralJournalEntry
                    where ledgerTransVoucherLink.Voucher == SubledgerVoucherGeneralJournalEntry.Voucher &&
                        ledgerTransVoucherLink.TransDate == SubledgerVoucherGeneralJournalEntry.AccountingDate &&
                        ledgerTransVoucherLink.dataAreaId == SubledgerVoucherGeneralJournalEntry.VoucherDataAreaId
                EXISTS JOIN generalJournalEntryLoc
                    where SubledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntryLoc.RecId
                EXISTS JOIN generalJournalAccountEntryLoc
                    where generalJournalEntryLoc.RecId == generalJournalAccountEntryLoc.GeneralJournalEntry &&
                        generalJournalAccountEntryLoc.PostingType == LedgerPostingType::TaxWithhold
            {
                if (strLen(rangeExpression) > 0)
                {
                    rangeExpression += ' || ';
                }
                rangeExpression += this.getVoucherDateRange(ledgerTransVoucherLink.Voucher, ledgerTransVoucherLink.TransDate);
            }
            //if there are no vouchers present against the PurchTable then no data be selected
            if (strLen(rangeExpression) == 0)
            {
                rangeExpression = this.getVoucherDateRange('', dateNull());
            }
            voucherRange.value('(' + rangeExpression + ')');
            voucherRange.status(RangeStatus::Hidden);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForTimesheet</Name>
				<Source><![CDATA[
    private void updateQueryForTimesheet(Query _query)
    {
        TSTimesheetTable        timesheetTable;
        TSTimesheetTrans        timesheetTrans;
        QueryBuildDataSource    qbd;
        QueryBuildRange         qbr;
        str                     s;
        boolean                 firstVoucher;

        timesheetTable = element.args().record();

        qbd = this.getSubledgerVoucherLinkDataSource(_query);
        qbd.clearDynalinks();

        qbr = qbd.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));

        firstVoucher = true;
        s = '(';
        while select Voucher from timesheetTrans
            group by timesheetTrans.Voucher
            where timesheetTrans.TimesheetNbr == timesheetTable.TimesheetNbr
        {
            if (firstVoucher)
            {
                firstVoucher = false;
            }
            else
            {
                s += '||';
            }
            s += this.getVoucherRangeExpression(timesheetTrans.Voucher);
        }
        s +=')';

        qbr.value(s);
        qbr.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForTmpRTSLLedgerTrans_RU</Name>
				<Source><![CDATA[
    public void updateQueryForTmpRTSLLedgerTrans_RU(Query _query)
    {
        TmpRTSLLedgerTrans      tmpRTSLLedgerTrans;
        QueryBuildDataSource    qbd;
        QueryBuildRange         qbr;

        tmpRTSLLedgerTrans = element.args().record();

        qbd = _query.dataSourceTable(tableNum(GeneralJournalAccountEntry));
        qbr = qbd.addRange(fieldNum(GeneralJournalAccountEntry, RecId));
        qbr.value(int642str(tmpRTSLLedgerTrans.RefRecId));
        qbr.status(RangeStatus::Hidden);

        correspondenceEnabled = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryCustInvoiceJourWithPrepayment</Name>
				<Source><![CDATA[
    private void updateQueryCustInvoiceJourWithPrepayment(Query _query, CustInvoiceJour _custInvoiceJour)
    {
        CustPrepaymentInvoiceTable custPrepaymentInvoice;
        boolean parentUpdate = false;
        QueryBuildDataSource qbd = this.getSubledgerVoucherLinkDataSource(_query);
        QueryBuildRange qbr;
        str rangeCondition = '(';
        
        while select custPrepaymentInvoice where custPrepaymentInvoice.CustInvoiceJour == _custInvoiceJour.RecId &&
                            custPrepaymentInvoice.Type == PrepaymentInvoiceType::Reversal
        {
            if (!parentUpdate)
            {
                qbd.clearDynalinks();
                qbr = qbd.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));
                parentUpdate = true;
                rangeCondition += '(' + this.getVoucherDateRange(_custInvoiceJour.LedgerVoucher, _custInvoiceJour.InvoiceDate) + ')';
              
            }
            
            rangeCondition += ' || ';
            rangeCondition += '(' + this.getVoucherDateRange(custPrepaymentInvoice.Voucher, custPrepaymentInvoice.InvoiceDate ) + ')';
        }

        if (parentUpdate)
        { 
            rangeCondition += ')';
            qbr.value(rangeCondition);
        }

        CustPrepaymentAutoSettlementPostingEvent custPrepaymentAutoSettlementPostingEvent;

        select firstonly RecId, Status from custPrepaymentAutoSettlementPostingEvent
            where custPrepaymentAutoSettlementPostingEvent.CustInvoiceJour == _custInvoiceJour.RecId;

        if (custPrepaymentAutoSettlementPostingEvent.RecId && custPrepaymentAutoSettlementPostingEvent.Status != CustPrepaymentHandlingStatus::Processed)
        {
            info('@AccountsReceivable:PrepaymentSettlementInfoTxt');
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForVendInvoiceJour</Name>
				<Source><![CDATA[
    private void updateQueryForVendInvoiceJour(Query _query, VendInvoiceJour _vendInvoiceJour = null)
    {
        VendInvoiceJour vendInvoiceJour = _vendInvoiceJour ? _vendInvoiceJour : element.args().record();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]) 
            && PlSADInvoice::existsPurchInvoice(vendInvoiceJour.PurchId, vendInvoiceJour.InvoiceId))
        {
            element.updateQueryForSADTable(_query);
            return;
        }

        if (vendInvoiceJour.LedgerVoucher || vendInvoiceJour.CostLedgerVoucher)
        {
            QueryBuildDataSource qbd = this.getSubledgerVoucherLinkDataSource(_query);

            qbd.clearDynalinks();

            QueryBuildRange qbr = qbd.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));

            LedgerJournalVoucherChanged ledgerJournalVoucherChanged;
            select firstOnly FromVoucher, FromDate from ledgerJournalVoucherChanged
                where ledgerJournalVoucherChanged.ToVoucher == vendInvoiceJour.LedgerVoucher
                    && ledgerJournalVoucherChanged.ToDate == vendInvoiceJour.InvoiceDate;

            str rangeCondition = '(';
            rangeCondition += '('+ this.getVoucherDateRange(vendInvoiceJour.LedgerVoucher, vendInvoiceJour.InvoiceDate) + ')';
            rangeCondition += ' || ('+ this.getVoucherDateRange(vendInvoiceJour.CostLedgerVoucher, vendInvoiceJour.InvoiceDate) + ')';

            // Invoice Register and Approval Journal do not necessarily post using one date, hence we add the range for that voucher and date
            if (ledgerJournalVoucherChanged)            
            {
                rangeCondition += ' || ('+ this.getVoucherDateRange(ledgerJournalVoucherChanged.FromVoucher, ledgerJournalVoucherChanged.FromDate) + ')';
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
                && TaxParameters::isCustomsEnable_IN()
                && VendInvoiceJour_IN::findByVendInvoiceJour(vendInvoiceJour.RecId).ChargeAsExpenseDocumentVoucher_IN)
            {
                rangeCondition += ' || ';
                rangeCondition += '('+ this.getVoucherDateRange(
                    VendInvoiceJour_IN::findByVendInvoiceJour(vendInvoiceJour.RecId).ChargeAsExpenseDocumentVoucher_IN,
                    vendInvoiceJour.InvoiceDate) + ')';
            }

            // If prepayment was applied / reversed, include application / reversing entries
            if (!vendInvoiceJour.isNonPO())
            {
                VendInvoiceTrans vendInvoiceTrans;

                while select InternalInvoiceId from vendInvoiceTrans
                    group by vendInvoiceTrans.InternalInvoiceId
                    where vendInvoiceTrans.PurchID == vendInvoiceJour.PurchId
                        && vendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId
                        && vendInvoiceTrans.InvoiceDate == vendInvoiceJour.InvoiceDate
                        && vendInvoiceTrans.NumberSequenceGroup == vendInvoiceJour.NumberSequenceGroup
                        && (vendInvoiceTrans.LineType == PurchInvoiceLineType::AdvanceApplication || vendInvoiceTrans.LineType == PurchInvoiceLineType::ReverseAdvanceApplication)
                {
                    rangeCondition += ' || ('+ this.getVoucherDateRange(vendInvoiceTrans.InternalInvoiceId, vendInvoiceJour.InvoiceDate) + ')';
                }
            }

            // If prepayment invoice was reversed, include reversing entries
            if (vendInvoiceJour.InvoiceType == PurchInvoiceType::VendorAdvance)
            {
                VendInvoiceJour vendInvoiceJour_Reversal;

                select firstOnly LedgerVoucher, InvoiceDate from vendInvoiceJour_Reversal
                    where vendInvoiceJour_Reversal.PurchId == vendInvoiceJour.PurchId
                        && vendInvoiceJour_Reversal.InvoiceType == PurchInvoiceType::VendorAdvance
                        && vendInvoiceJour_Reversal.CostLedgerVoucher == vendInvoiceJour.LedgerVoucher
                        && vendInvoiceJour_Reversal.RecId != vendInvoiceJour.RecId;

                if (vendInvoiceJour_Reversal)
                {
                    rangeCondition += ' || ('+ this.getVoucherDateRange(vendInvoiceJour_Reversal.LedgerVoucher, vendInvoiceJour_Reversal.InvoiceDate) + ')';
                }
            }

            rangeCondition +=')';

            qbr.value(rangeCondition);
            qbr.status(RangeStatus::Hidden);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryToGetVendInvReg</Name>
				<Source><![CDATA[
    private void updateQueryToGetVendInvReg(Query _query, Voucher _voucher, TransDate _transDate)
    {
        QueryBuildDataSource qbd;
        QueryBuildRange qbr;
        str s;
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;
        
        select ToVoucher, ToDate from ledgerJournalVoucherChanged
            where ledgerJournalVoucherChanged.FromVoucher == _voucher &&
               ledgerJournalVoucherChanged.FromDate == _transDate;
        
        qbd = this.getSubledgerVoucherLinkDataSource(_query);
        qbd.clearDynalinks();
        
        qbr = qbd.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));
        
        s = '(';
        s += '('+ this.getVoucherDateRange(_voucher, _transDate) + ')';
        
        if (ledgerJournalVoucherChanged)
        {
            qbr = qbd.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));
            s += ' || ('+ this.getVoucherDateRange(ledgerJournalVoucherChanged.ToVoucher, ledgerJournalVoucherChanged.ToDate) + ')';
            
            //check for different voucher than above voucher (Pending vendor invoice related entry)
            if (ledgerJournalVoucherChanged.ToVoucher && VendInvoicePostingDateAutoAdjustmentV2Flight::instance().isEnabled())
            {
                LedgerJournalVoucherChanged ledgerJournalVoucherChanged2;
                select ToVoucher, ToDate from ledgerJournalVoucherChanged2
                    where ledgerJournalVoucherChanged2.FromVoucher == _voucher
                    && ledgerJournalVoucherChanged2.ToVoucher != ledgerJournalVoucherChanged.ToVoucher;

                if (ledgerJournalVoucherChanged2.ToVoucher)
                {
                    s += ' || ('+ this.getVoucherDateRange(ledgerJournalVoucherChanged2.ToVoucher, ledgerJournalVoucherChanged2.ToDate) + ')';
                }
            }
        }

        s += ')';

        qbr.value(s);
        qbr.status(RangeStatus::Hidden);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForVendInvoiceTrans_RU</Name>
				<Source><![CDATA[
    public void updateQueryForVendInvoiceTrans_RU()
    {
        VendInvoiceTrans            vendInvoiceTrans;
        CostAllocationHistory_RU    costAllocationHistory;
        QueryBuildDataSource        qbd;
        QueryBuildRange             qbr;
        str                         s;

        void addRange(Voucher _voucher, TransDate _transDate)
        {
            if (_voucher && _transDate)
            {
                if (s)
                {
                    s += '|| (' + this.getVoucherDateRange(_voucher, _transDate) + ')';
                }
                else
                {
                    s += '(' + this.getVoucherDateRange(_voucher, _transDate) + ')';
                }
            }
        }

        if (element.args().caller().name() == formStr(CostAllocation_RU))
        {
            vendInvoiceTrans = element.args().record() as VendInvoiceTrans;

            while select costAllocationHistory
                group by VoucherCreditNote, VoucherInvoice, VoucherIndebtness, TransDate
                where costAllocationHistory.AllocatedInvoiceTransRecId == vendInvoiceTrans.RecId
                  && (costAllocationHistory.VoucherCreditNote
                  ||  costAllocationHistory.VoucherInvoice
                  ||  costAllocationHistory.VoucherIndebtness)
            {
                addRange(costAllocationHistory.VoucherCreditNote,   vendInvoiceTrans.InvoiceDate);
                addRange(costAllocationHistory.VoucherIndebtness,   costAllocationHistory.TransDate);
                addRange(costAllocationHistory.VoucherInvoice,      costAllocationHistory.TransDate);
            }

            if (s)
            {
                qbd = element.getSubledgerVoucherLinkDataSource();
                qbd.clearDynalinks();

                qbr = qbd.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));
                qbr.value(s);
                qbr.status(RangeStatus::Hidden);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForVendPackingSlipJour</Name>
				<Source><![CDATA[
    private void updateQueryForVendPackingSlipJour(Query _query)
    {
        VendPackingSlipJour     vendPackingSlipJour;
        QueryBuildRange         qbr;
        QueryBuildDataSource    qbdsGeneralJournalEntry;
        QueryBuildDataSource    qbdsVendPackingSlipVersion;

        qbdsGeneralJournalEntry = this.getSubledgerVoucherLinkDataSource(_query);
        qbdsVendPackingSlipVersion = qbdsGeneralJournalEntry.addDataSource(tableNum(VendPackingSlipVersion));

        vendPackingSlipJour = element.args().record();

        qbdsGeneralJournalEntry.clearDynalinks();

        qbdsVendPackingSlipVersion.joinMode(JoinMode::InnerJoin);

        qbdsVendPackingSlipVersion.addLink(fieldNum(SubledgerVoucherGeneralJournalEntry, AccountingDate), fieldNum(VendPackingSlipVersion, AccountingDate));
        qbdsVendPackingSlipVersion.addRange(fieldNum(VendPackingSlipVersion, VendPackingSlipJour)).value(queryValue(vendPackingSlipJour.RecId));

        qbr  = qbdsGeneralJournalEntry.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));
        qbr.value(strFmt('((%1.%2 == %3.%4) || (%1.%2 == %3.%5))',
            qbdsGeneralJournalEntry.name(),
            this.getVoucherFieldName(),
            qbdsVendPackingSlipVersion.name(),
            fieldStr(VendPackingSlipVersion, LedgerVoucher),
            fieldStr(VendPackingSlipVersion, CostLedgerVoucher)));
        qbr.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForVendPackingSlipVersion</Name>
				<Source><![CDATA[
    private void updateQueryForVendPackingSlipVersion(Query _query)
    {
        VendPackingSlipVersion  vendPackingSlipVersion;
        QueryBuildDataSource    qbd;
        QueryBuildRange         qbr;
        str                     s;

        vendPackingSlipVersion = element.args().record();
        if (vendPackingSlipVersion.LedgerVoucher && vendPackingSlipVersion.CostLedgerVoucher)
        {
            qbd     = this.getSubledgerVoucherLinkDataSource(_query);

            qbd.clearDynalinks();

            qbr     = qbd.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));

            s = '(';
            s += '('+ this.getVoucherDateRange(vendPackingSlipVersion.LedgerVoucher, vendPackingSlipVersion.AccountingDate) + ')';
            s += ' || ('+ this.getVoucherDateRange(vendPackingSlipVersion.CostLedgerVoucher, vendPackingSlipVersion.AccountingDate) + ')';
            s +=')';

            qbr.value(s);
            qbr.status(RangeStatus::Hidden);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForVendPurchOrderJour</Name>
				<Source><![CDATA[
    private void updateQueryForVendPurchOrderJour(Query _query)
    {
        VendPurchOrderJour  vendPurchOrderJour;
        PurchTableVersion   purchTableVersion;
        AccountingEvent     accountingEvent;
        PurchTable          purchTable;

        vendPurchOrderJour = element.args().record();
        purchTable = vendPurchOrderJour.purchTable();
        purchTableVersion = PurchTableVersion::find(vendPurchOrderJour.PurchTableVersion);

        if (purchTableVersion && purchTable)
        {
            accountingEvent = AccountingEvent::findBySourceDocumentHeaderEventDateTime(purchTable.SourceDocumentHeader, purchTableVersion.VersionDateTime);

            if (accountingEvent)
            {
                this.updateQueryForVoucherAndAccountingDate(_query,vendPurchOrderJour.PurchaseOrderVoucher, accountingEvent.AccountingDate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForVoucherAndAccountingDate</Name>
				<Source><![CDATA[
    private void updateQueryForVoucherAndAccountingDate(Query _query, Voucher _voucher, AccountingDate _accountingDate)
    {
        QueryBuildDataSource    ds;
        QueryBuildRange         voucherRange;
        str                     rangeExpression = '';

        rangeExpression = '(' + this.getVoucherDateRange(_voucher, _accountingDate) + ')';

        ds = this.getSubledgerVoucherLinkDataSource(_query);

        voucherRange = ds.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));
        voucherRange.value('(' + rangeExpression + ')');
        voucherRange.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForRDeferrals_RU</Name>
				<Source><![CDATA[
    public void updateQueryForRDeferrals_RU(Query _query)
    {
        QueryBuildDataSource    qbdsGeneralJournalEntry = this.getSubledgerVoucherLinkDataSource(_query);
        RDeferralsTrans         rDeferralsTrans;
        QueryBuildRange         voucherRange;
        QueryBuildRange         transDateRange;

        qbdsGeneralJournalEntry.clearDynalinks();

        rDeferralsTrans = element.args().record();

        voucherRange = qbdsGeneralJournalEntry.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));
        voucherRange.value(rDeferralsTrans.Voucher);
        voucherRange.status(RangeStatus::Hidden);

        transDateRange = qbdsGeneralJournalEntry.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, AccountingDate));
        transDateRange.value(queryValue(rDeferralsTrans.getAccountingDate()));
        transDateRange.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForReverseTrans</Name>
				<Source><![CDATA[
    private void updateQueryForReverseTrans(Query _query)
    {
        GeneralJournalAccountEntry  ledgerTransParent;
        QueryBuildDataSource        qbd;
        QueryBuildRange             qbr;

        ledgerTransParent = element.args().record();

        qbd = _query.dataSourceTable(tableNum(GeneralJournalEntry));
        qbd.clearDynalinks();

        qbd = _query.dataSourceTable(tableNum(TransLink_RU));
        qbd.clearLinks();
        qbd.addLink(fieldNum(GeneralJournalAccountEntry, TableId), fieldNum(TransLink_RU, RefTableId));
        qbd.addLink(fieldNum(GeneralJournalAccountEntry, RecId),   fieldNum(TransLink_RU, RefSec));
        qbd.joinMode(JoinMode::InnerJoin);

        qbr = qbd.addRange(fieldNum(TransLink_RU, RefTableId));
        qbr.value(queryValue(tableNum(GeneralJournalAccountEntry)));
        qbr.status(RangeStatus::Hidden);

        qbr = qbd.addRange(fieldNum(TransLink_RU, ReversalGroup));
        qbr.value(queryValue(TransLink_RU::findSec(ledgerTransParent.TableId,
                                                   ledgerTransParent.RecId).ReversalGroup));
        qbr.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForTaxReconciliation</Name>
				<Source><![CDATA[
    private void updateQueryForTaxReconciliation()
    {
        QueryBuildDataSource                qbdsTaxLink;
        QueryBuildDataSource                qbdsGeneralJournalEntry;
        Query                               query;

        query = generalJournalEntry_ds.query();

        qbdsGeneralJournalEntry = query.dataSourceTable(tableNum(GeneralJournalEntry));

        qbdsTaxLink = qbdsGeneralJournalEntry.addDataSource(tableNum(TaxTrans));

        qbdsTaxLink.joinMode(JoinMode::NoExistsJoin);

        qbdsTaxLink.addLink(fieldNum(GeneralJournalEntry, SubledgerVoucher), fieldNum(TaxTrans, Voucher));
        qbdsTaxLink.addLink(fieldNum(GeneralJournalEntry, AccountingDate), fieldNum(TaxTrans, TransDate));

        generalJournalEntry_ds.query(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForBudgetReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query for the budget reservation document.
    /// </summary>
    /// <param name="_query">
    /// A <c>Query</c> to add budget reservation specific ranges.
    /// </param>
    private void updateQueryForBudgetReservation(Query _query)
    {
        QueryBuildDataSource            qbds;
        QueryBuildRange                 voucherRange, accountingDateRange;
        BudgetReservationHeader_PSN     budgetReservationHeader;
        SubledgerJournalEntry           subledgerJournalEntry;
        AccountingEvent                 accountingEvent;

        budgetReservationHeader = element.args().record() as BudgetReservationHeader_PSN;

        qbds = this.getSubledgerVoucherLinkDataSource(_query);

        // The dynalinks have to be cleared because they do not include all the possible tables
        // and the tables can be optional.
        qbds.clearDynalinks();

        // Build the range expression for the related budget reservation vouchers.
        while select AccountingDate from accountingEvent
            where accountingEvent.SourceDocumentHeader == budgetReservationHeader.SourceDocumentHeader
            join Voucher from subledgerJournalEntry
                where subledgerJournalEntry.AccountingEvent == accountingEvent.RecId
        {
            voucherRange        = qbds.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));
            accountingDateRange = qbds.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, AccountingDate));
            voucherRange.value(subledgerJournalEntry.Voucher);
            accountingDateRange.value(queryValue(accountingEvent.AccountingDate));
        }

        // If no voucher posted, add empty range to return an empty result set.
        if (voucherRange == null || accountingDateRange == null)
        {
            voucherRange        = qbds.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));
            accountingDateRange = qbds.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, AccountingDate));
            voucherRange.value('');
            accountingDateRange.value(queryValue(dateNull()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForVendOverdueCITPIT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query for the Vendor overdue CIT and PIT journal.
    /// </summary>
    /// <param name="_query">
    /// A <c>Query</c> to add CIT and PIT overdue specific ranges.
    /// </param>
    private void updateQueryForVendOverdueCITPIT(Query _query)
    {
        VendOverdueCITPITJournalTable_W vendOverdueCITPIT = element.args().record();

        QueryBuildDataSource qbdsGeneralJournalEntry = this.getSubledgerVoucherLinkDataSource(_query); 
        qbdsGeneralJournalEntry.clearDynalinks();

        QueryBuildDataSource qbdsVendTrans = qbdsGeneralJournalEntry.addDataSource(tableNum(VendTrans));
        qbdsVendTrans.joinMode(JoinMode::InnerJoin);
        qbdsVendTrans.addLink(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher), fieldNum(VendTrans, Voucher));
        qbdsVendTrans.addLink(fieldNum(SubledgerVoucherGeneralJournalEntry, AccountingDate), fieldNum(VendTrans, TransDate));
        qbdsVendTrans.addLink(fieldNum(SubledgerVoucherGeneralJournalEntry, VoucherDataAreaId), fieldNum(VendTrans, DataAreaId));

        QueryBuildDataSource qbdsVendOverdueCITPITJourLines = qbdsVendTrans.addDataSource(tableNum(VendOverdueCITPITDebtJournalLine_W));
        qbdsVendOverdueCITPITJourLines.relations(true); 
        qbdsVendOverdueCITPITJourLines.joinMode(JoinMode::InnerJoin);

        QueryBuildDataSource qbdsVendOverdueCITPITJour = qbdsVendOverdueCITPITJourLines.addDataSource(tableNum(VendOverdueCITPITJournalTable_W));
        qbdsVendOverdueCITPITJour.relations(true);
        qbdsVendOverdueCITPITJour.joinMode(JoinMode::InnerJoin);
        qbdsVendOverdueCITPITJour.addRange(fieldNum(VendOverdueCITPITJournalTable_W, JournalId)).value(queryValue(vendOverdueCITPIT.JournalId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForCustVendSettlement</Name>
				<Source><![CDATA[
    private void updateQueryForCustVendSettlement(Query _query)
    {
        CustVendSettlement custVendSettlement = element.args().record() as CustVendSettlement;

        _query.dataSourceTable(tableNum(GeneralJournalEntry)).addRange(fieldNum(GeneralJournalEntry, SubledgerVoucher)).value(queryValue(custVendSettlement.SettlementVoucher));
    }

]]></Source>
			</Method>
			<Method>
				<Name>informUserNoVoucherWhenTransferWithinSameSite</Name>
				<Source><![CDATA[
    private void informUserNoVoucherWhenTransferWithinSameSite(TableId _sourceTable)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            return;
        }

        Voucher voucher;

        Common callerRecord = element.args().record();
        switch (_sourceTable)
        {
            case tableNum(InventTrans):
                InventTrans inventTransRecord = callerRecord as InventTrans;
                if (inventTransRecord.StatusReceipt != StatusReceipt::Purchased && inventTransRecord.StatusIssue != StatusIssue::Sold) 
                {
                    return;
                }    

                voucher = inventTransRecord.Voucher;
                break;

            case tableNum(InventCostTrans):
                InventCostTrans inventCostTransRecord = callerRecord as InventCostTrans;
                voucher = inventCostTransRecord.Voucher;
                break;

            case tableNum(InventTransPosting):
                InventTransPosting inventTransPostingRecord = callerRecord as InventTransPosting;
                if (!inventTransPostingRecord.RecId || inventTransPostingRecord.IsPosted == NoYes::Yes)
                {
                    return;
                }

                voucher = inventTransPostingRecord.Voucher;
                break;

            case tableNum(InventTransferJour):
                InventTransferJour inventTransferJourRecord = callerRecord as InventTransferJour;
                if (inventTransferJourRecord.UpdateType == InventTransferUpdateType::PickingList)
                {
                    return;
                }

                voucher = inventTransferJourRecord.VoucherId;
                break;
        }

        if (voucher == '')
        {
            return;
        }

        GeneralJournalEntry generalJournalEntryRecord;
        select firstonly SubledgerVoucher from generalJournalEntryRecord
            where generalJournalEntryRecord.SubledgerVoucher == voucher;
        
        if (generalJournalEntryRecord.SubledgerVoucher)
        {
            return;
        }

        InventTransferJour inventTransferJour;
        select firstonly UpdateType, InventLocationIdTransit, InventLocationIdFrom, InventLocationIdTo from inventTransferJour
            where inventTransferJour.VoucherId == voucher;

        InventLocation inventLocation;
        select firstonly InventSiteId, InventLocationId, InventLocationIdTransit, InventLocationType from inventLocation
            where inventLocation.InventLocationId == inventTransferJour.InventLocationIdTransit
               && inventLocation.InventLocationType == InventLocationType::Transit;
        InventSiteId TransitInventSiteId = inventLocation.InventSiteId;

        if (inventTransferJour && inventTransferJour.UpdateType == InventTransferUpdateType::Shipment)
        {
            select firstonly InventSiteId from inventLocation
                where inventLocation.InventLocationId == inventTransferJour.InventLocationIdFrom
                   && inventLocation.InventLocationIdTransit == inventTransferJour.InventLocationIdTransit
                   && inventLocation.InventLocationType == InventLocationType::Standard;

            if (inventLocation.InventSiteId == TransitInventSiteId)
            {
                info(strFmt("@SCM:InventTransferOrderSourceWarehouseSameSiteWithTransitWarehouseNoVoucher"));
            }
        }
        else if (inventTransferJour && inventTransferJour.UpdateType == InventTransferUpdateType::Receive)
        {
            select firstonly InventSiteId from inventLocation
                where inventLocation.InventLocationId == inventTransferJour.InventLocationIdTo
                   && inventLocation.InventLocationType == InventLocationType::Standard;

            if (inventLocation.InventSiteId == TransitInventSiteId)
            {
                info(strFmt("@SCM:InventTransferOrderDestinationWarehouseSameSiteWithTransitWarehouseNoVoucher"));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refresh</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void refresh()
    {
        GeneralJournalAccountEntry_ds.research(true);
        GeneralJournalEntry_ds.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runAuditLogMenuItemDisplayStr</Name>
				<Source><![CDATA[
    private void runAuditLogMenuItemDisplayStr(str _menuItemDisplayStr)
    {
        LedgerVoucherTransAuditLogContract contract = element.getAuditLogEditContractForSelected();

        Args args = new Args();
        args.parmObject(contract);
        args.caller(element);

        new MenuFunction(_menuItemDisplayStr, MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAuditLogEditContractForSelected</Name>
				<Source><![CDATA[
    private LedgerVoucherTransAuditLogContract getAuditLogEditContractForSelected()
    {
        GeneralJournalAccountEntryRecIdTmp accountEntryTmp = this.getGeneralJournalAccountEntryRecIdTmp();

        return LedgerVoucherTransAuditLogContract::construct(accountEntryTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGeneralJournalAccountEntryRecIdTmp</Name>
				<Source><![CDATA[
    private GeneralJournalAccountEntryRecIdTmp getGeneralJournalAccountEntryRecIdTmp()
    {
        GeneralJournalAccountEntryRecIdTmp generalJournalAccountEntryTmp;

        MultiSelectionHelper multiHelperLine = MultiSelectionHelper::construct();
        multiHelperLine.parmDatasource(element.datasource(identifierStr(GeneralJournalAccountEntry)));

        GeneralJournalAccountEntry markedGeneralJournalAccountEntry = multiHelperLine.getFirst();
        while (markedGeneralJournalAccountEntry.RecId != 0)
        {
            generalJournalAccountEntryTmp.clear();
            generalJournalAccountEntryTmp.GeneralJournalAccountEntry = markedGeneralJournalAccountEntry.RecId;
            generalJournalAccountEntryTmp.insert();

            markedGeneralJournalAccountEntry = multiHelperLine.getNext();
        }

        return generalJournalAccountEntryTmp;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>GeneralJournalAccountEntry</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            if (enableShowDRsCRs)
            {
                showDRsCRsController.addAmountControl(ledgerTrans_AmountCur);
                showDRsCRsController.addAmountControl(ledgerTrans_AmountMST);
                showDRsCRsController.addAmountCreditControl(generalJournalLine_AmountCurCredit_CN);
                showDRsCRsController.addAmountCreditControl(generalJournalLine_AmountMstCredit_CN);
                showDRsCRsController.addAmountDebitControl(generalJournalLine_AmountCurDebit_CN);
                showDRsCRsController.addAmountDebitControl(generalJournalLine_AmountMstDebit_CN);

                showDRsCRsController.initControls();
            }

            generalJournalAccountEntry_ds.cacheAddMethod(tablemethodstr(GeneralJournalAccountEntry, displayAccountingExchangeRate));
            generalJournalAccountEntry_ds.cacheAddMethod(tablemethodstr(GeneralJournalAccountEntry, displaySecondaryExchangeRate));
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            subledgerJournal.enabled(GeneralJournalAccountEntry::existForSubledgerJournalAccountEntry(generalJournalAccountEntry.RecId));

            if (fromZakatMenu)
            {
                generalJournalAccountEntryZakat = GeneralJournalAccountEntryZakat_SA::findByGeneralJournalAccountEntry(generalJournalAccountEntry.RecId);
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayVendAccount</Name>
						<Source><![CDATA[
        public display VendAccount displayVendAccount(GeneralJournalAccountEntry _entry)
        {
            NoYes multipleTransWithinOneVoucher = LedgerParameters::find().AllowMultipleTransactionsWithinOneVoucher;
            VendTable vendorTable = this.findVendTable(_entry);
            VendAccount vendAccounts = vendorTable.AccountNum;

            if (multipleTransWithinOneVoucher == NoYes::Yes && vendorTable)
            {
                vendorTable = this.findVendTableWithGeneralJournalEntry(vendAccounts, _entry);

                if (vendorTable)
                {
                    vendAccounts += "@GeneralLedger:LedgerTransVoucherCustVendMultiple";
                }
            }

            return vendAccounts;
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayVendName</Name>
						<Source><![CDATA[
        public display VendName displayVendName(GeneralJournalAccountEntry _entry)
        {
            NoYes multipleTransWithinOneVoucher = LedgerParameters::find().AllowMultipleTransactionsWithinOneVoucher;
            VendTable vendorTable = this.findVendTable(_entry);
            VendAccount vendAccounts = vendorTable.AccountNum;
            VendName vendName = vendorTable.displayVendName(vendorTable);

            if (multipleTransWithinOneVoucher == NoYes::Yes && vendorTable)
            {
                vendorTable = this.findVendTableWithGeneralJournalEntry(vendAccounts, _entry);

                if (vendorTable)
                {
                    vendName = '';
                }
            }

            return vendName;
        }

]]></Source>
					</Method>
					<Method>
						<Name>findVendTable</Name>
						<Source><![CDATA[
        private VendTable findVendTable(GeneralJournalAccountEntry _entry)
        {
            VendTable vendorTable;
            VendTrans vendTrans;
            GeneralJournalEntry vendGeneralJournalEntry;
            LedgerJournalVoucherChanged ledgerJournalVoucherChanged;
            LedgerJournalVoucherChanged ledgerJournalAndApprovalVoucherChanged;

            if (isCustVendQueryFlightEnabled)
            {
                select firstonly AccountNum from vendorTable
                    exists join vendGeneralJournalEntry
                        where vendGeneralJournalEntry.RecId == _entry.GeneralJournalEntry
                    exists join vendTrans
                        where vendTrans.AccountNum == vendorTable.AccountNum
                            && vendGeneralJournalEntry.SubledgerVoucher == vendTrans.Voucher
                            && vendGeneralJournalEntry.SubledgerVoucherDataAreaId == vendTrans.DataAreaId
                            && vendGeneralJournalEntry.AccountingDate == vendTrans.TransDate;
            }
            else
            {
                select firstonly AccountNum from vendorTable
                    exists join vendGeneralJournalEntry
                        where vendGeneralJournalEntry.RecId == _entry.GeneralJournalEntry
                    exists join vendTrans
                        where vendTrans.AccountNum == vendorTable.AccountNum
                            && vendGeneralJournalEntry.SubledgerVoucher == vendTrans.Voucher
                            && vendGeneralJournalEntry.SubledgerVoucherDataAreaId == vendTrans.DataAreaId;
            }

            if (!vendorTable.AccountNum)
            {
                select firstonly AccountNum from vendorTable
                    exists join vendGeneralJournalEntry
                        where vendGeneralJournalEntry.RecId == _entry.GeneralJournalEntry
                    exists join ledgerJournalVoucherChanged
                        where ledgerJournalVoucherChanged.ToVoucher == vendGeneralJournalEntry.SubledgerVoucher
                            && ledgerJournalVoucherChanged.Todate == vendGeneralJournalEntry.AccountingDate
                    exists join vendTrans
                        where vendTrans.AccountNum == vendorTable.AccountNum
                            && ledgerJournalVoucherChanged.FromVoucher == vendTrans.Voucher
                            && ledgerJournalVoucherChanged.FromDate == vendTrans.TransDate
                            && vendGeneralJournalEntry.SubledgerVoucherDataAreaId == vendTrans.DataAreaId;
            }

            if (!vendorTable.AccountNum)
            {
                select firstonly AccountNum from vendorTable
                    exists join vendGeneralJournalEntry
                        where vendGeneralJournalEntry.RecId == _entry.GeneralJournalEntry
                    exists join ledgerJournalVoucherChanged
                        where ledgerJournalVoucherChanged.ToVoucher == vendGeneralJournalEntry.SubledgerVoucher
                            && ledgerJournalVoucherChanged.Todate == vendGeneralJournalEntry.AccountingDate
                    exists join ledgerJournalAndApprovalVoucherChanged
                        where ledgerJournalAndApprovalVoucherChanged.ToVoucher == ledgerJournalVoucherChanged.FromVoucher
                            && ledgerJournalAndApprovalVoucherChanged.Todate == ledgerJournalVoucherChanged.FromDate
                    exists join vendTrans
                        where vendTrans.AccountNum == vendorTable.AccountNum
                            && ledgerJournalAndApprovalVoucherChanged.FromVoucher == vendTrans.Voucher
                            && ledgerJournalAndApprovalVoucherChanged.FromDate == vendTrans.TransDate
                            && vendGeneralJournalEntry.SubledgerVoucherDataAreaId == vendTrans.DataAreaId;
            }

            return vendorTable;
        }

]]></Source>
					</Method>
					<Method>
						<Name>findVendTableWithGeneralJournalEntry</Name>
						<Source><![CDATA[
        private VendTable findVendTableWithGeneralJournalEntry(VendAccount _vendAccounts, GeneralJournalAccountEntry _entry)
        {
            VendTable vendorTable;
            VendTrans vendTrans;
            GeneralJournalEntry vendGeneralJournalEntry;

            if (isCustVendQueryFlightEnabled)
            {
                select firstonly AccountNum from vendorTable
                    exists join vendGeneralJournalEntry
                        where vendGeneralJournalEntry.RecId == _entry.GeneralJournalEntry
                    exists join vendTrans
                        where vendTrans.AccountNum == vendorTable.AccountNum
                            && vendGeneralJournalEntry.SubledgerVoucher == vendTrans.Voucher
                            && vendGeneralJournalEntry.SubledgerVoucherDataAreaId == vendTrans.DataAreaId
                            && vendGeneralJournalEntry.AccountingDate == vendTrans.TransDate
                            && vendorTable.AccountNum != _vendAccounts;
            }
            else
            {
                select firstonly AccountNum from vendorTable
                    exists join vendGeneralJournalEntry
                        where vendGeneralJournalEntry.RecId == _entry.GeneralJournalEntry
                    exists join vendTrans
                        where vendTrans.AccountNum == vendorTable.AccountNum
                            && vendGeneralJournalEntry.SubledgerVoucher == vendTrans.Voucher
                            && vendGeneralJournalEntry.SubledgerVoucherDataAreaId == vendTrans.DataAreaId
                            && vendorTable.AccountNum != _vendAccounts;
            }

            return vendorTable;
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayCustAccount</Name>
						<Source><![CDATA[
        public display CustAccount displayCustAccount(GeneralJournalAccountEntry _entry)
        {
            CustTable customerTable;
            CustTrans custTrans;
            GeneralJournalEntry custGeneralJournalEntry;
            CustAccount custAccounts;
            NoYes multipleTransWithinOneVoucher = LedgerParameters::find().AllowMultipleTransactionsWithinOneVoucher;
            
            if (isCustVendQueryFlightEnabled)
            {
                select firstonly AccountNum from customerTable
                    exists join custGeneralJournalEntry
                        where custGeneralJournalEntry.RecId == _entry.GeneralJournalEntry
                    exists join custTrans
                        where custTrans.AccountNum == customerTable.AccountNum
                            && custGeneralJournalEntry.SubledgerVoucher == custTrans.Voucher
                            && custGeneralJournalEntry.SubledgerVoucherDataAreaId == custTrans.DataAreaId
                            && custGeneralJournalEntry.AccountingDate == custTrans.TransDate;
            }
            else
            {
                select firstonly AccountNum from customerTable
                    exists join custGeneralJournalEntry
                        where custGeneralJournalEntry.RecId == _entry.GeneralJournalEntry
                    exists join custTrans
                        where custTrans.AccountNum == customerTable.AccountNum
                            && custGeneralJournalEntry.SubledgerVoucher == custTrans.Voucher
                            && custGeneralJournalEntry.SubledgerVoucherDataAreaId == custTrans.DataAreaId;

            }

            custAccounts = customerTable.AccountNum;

            if (multipleTransWithinOneVoucher == NoYes::Yes && customerTable)
            {
                if (isCustVendQueryFlightEnabled)
                {
                    select firstonly AccountNum from customerTable
                        exists join custGeneralJournalEntry
                            where custGeneralJournalEntry.RecId == _entry.GeneralJournalEntry
                        exists join custTrans
                            where custTrans.AccountNum == customerTable.AccountNum
                                && custGeneralJournalEntry.SubledgerVoucher == custTrans.Voucher
                                && custGeneralJournalEntry.SubledgerVoucherDataAreaId == custTrans.DataAreaId
                                && custGeneralJournalEntry.AccountingDate == custTrans.TransDate
                                && customerTable.AccountNum != custAccounts;
                }
                else
                {
                    select firstonly AccountNum from customerTable
                        exists join custGeneralJournalEntry
                            where custGeneralJournalEntry.RecId == _entry.GeneralJournalEntry
                        exists join custTrans
                            where custTrans.AccountNum == customerTable.AccountNum
                                && custGeneralJournalEntry.SubledgerVoucher == custTrans.Voucher
                                && custGeneralJournalEntry.SubledgerVoucherDataAreaId == custTrans.DataAreaId
                                && customerTable.AccountNum != custAccounts;
                }

                if (customerTable)
                {
                    custAccounts += "@GeneralLedger:LedgerTransVoucherCustVendMultiple";
                }
            }

            return custAccounts;
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayCustName</Name>
						<Source><![CDATA[
        public display CustName displayCustName(GeneralJournalAccountEntry _entry)
        {
            CustTable customerTable;
            DirPartyTable dirPartyTable;
            CustTrans custTrans;
            GeneralJournalEntry custGeneralJournalEntry;
            CustName custName;
            NoYes multipleTransWithinOneVoucher = LedgerParameters::find().AllowMultipleTransactionsWithinOneVoucher;
            
            if (isCustVendQueryFlightEnabled)
            {
                select firstonly AccountNum from customerTable
                    join Name from dirPartyTable
                        where dirPartyTable.RecId == customerTable.Party
                    exists join custGeneralJournalEntry
                        where custGeneralJournalEntry.RecId == _entry.GeneralJournalEntry
                    exists join custTrans
                        where custTrans.AccountNum == customerTable.AccountNum
                            && custGeneralJournalEntry.SubledgerVoucher == custTrans.Voucher
                            && custGeneralJournalEntry.SubledgerVoucherDataAreaId == custTrans.DataAreaId
                            && custGeneralJournalEntry.AccountingDate == custTrans.TransDate;
            }
            else
            {
                select firstonly AccountNum from customerTable
                    join Name from dirPartyTable
                        where dirPartyTable.RecId == customerTable.Party
                    exists join custGeneralJournalEntry
                        where custGeneralJournalEntry.RecId == _entry.GeneralJournalEntry
                    exists join custTrans
                        where custTrans.AccountNum == customerTable.AccountNum
                            && custGeneralJournalEntry.SubledgerVoucher == custTrans.Voucher
                            && custGeneralJournalEntry.SubledgerVoucherDataAreaId == custTrans.DataAreaId;
            }

            CustAccount custAccounts = customerTable.AccountNum;
            custName = dirPartyTable.Name;

            if (multipleTransWithinOneVoucher == NoYes::Yes && customerTable)
            {
                if (isCustVendQueryFlightEnabled)
                {
                    select firstonly AccountNum from customerTable
                        exists join custGeneralJournalEntry
                            where custGeneralJournalEntry.RecId == _entry.GeneralJournalEntry
                        exists join custTrans
                            where custTrans.AccountNum == customerTable.AccountNum
                                && custGeneralJournalEntry.SubledgerVoucher == custTrans.Voucher
                                && custGeneralJournalEntry.SubledgerVoucherDataAreaId == custTrans.DataAreaId
                                && custGeneralJournalEntry.AccountingDate == custTrans.TransDate
                                && customerTable.AccountNum != custAccounts;
                }
                else
                {
                    select firstonly AccountNum from customerTable
                        exists join custGeneralJournalEntry
                            where custGeneralJournalEntry.RecId == _entry.GeneralJournalEntry
                        exists join custTrans
                            where custTrans.AccountNum == customerTable.AccountNum
                                && custGeneralJournalEntry.SubledgerVoucher == custTrans.Voucher
                                && custGeneralJournalEntry.SubledgerVoucherDataAreaId == custTrans.DataAreaId
                                && customerTable.AccountNum != custAccounts;
                }

                if (customerTable)
                {
                    custName = '';
                }
            }

            return custName;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>GeneralJournalEntry</Name>
				<Methods>
					<Method>
						<Name>purgeDynalink_RU</Name>
						<Source><![CDATA[
        private void purgeDynalink_RU(QueryBuildDataSource _queryBuildDataSource)
        {
            Counter            dynaLinkCnt      = _queryBuildDataSource.dynalinkCount();
            Set                dynaLinkFieldSet = new Set(Types::Container);
            boolean            alienField       = false;
            SetEnumerator      setEnumerator;
            QueryBuildDynalink queryBuildDynalink;
            FieldId            fieldId, dynamicFieldId;
            Common             dynamicFile;
            int                j;

            if (dynaLinkCnt)
            {
                for (j = 1; j <= dynaLinkCnt; j++)
                {
                    queryBuildDynalink = _queryBuildDataSource.dynalink(j);

                    if (SysQueryForm::hasValidCountryCode(queryBuildDynalink.cursor().TableId, queryBuildDynalink.dynamicField()) &&
                        SysQueryForm::hasValidCountryCode(_queryBuildDataSource.table(), queryBuildDynalink.field()))
                    {
                        dynaLinkFieldSet.add([queryBuildDynalink.field(), queryBuildDynalink.cursor(), queryBuildDynalink.dynamicField()]);
                    }
                    else
                    {
                        alienField = true;
                    }
                }

                if (alienField)
                {
                    _queryBuildDataSource.clearDynalinks();

                    if (!dynaLinkFieldSet.empty())
                    {
                        setEnumerator = dynaLinkFieldSet.getEnumerator();
                        while (setEnumerator.moveNext())
                        {
                            [fieldId, dynamicFile, dynamicFieldId] = setEnumerator.current();
                            _queryBuildDataSource.addDynalink(fieldId, dynamicFile, dynamicFieldId);
                        }
                    }
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>processChildDatasource_RU</Name>
						<Source><![CDATA[
        private void processChildDatasource_RU(QueryBuildDataSource _queryBuildDataSource, Counter _dataSourceCnt)
        {
            int j;

            if (_dataSourceCnt)
            {
                for (j = 1; j <= _dataSourceCnt; j++)
                {
                    this.purgeDynalink_RU(_queryBuildDataSource.childDataSourceNo(j));
                    this.processChildDatasource_RU(_queryBuildDataSource.childDataSourceNo(j), _queryBuildDataSource.childDataSourceCount());
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>deleteAlienDynaLink_RU</Name>
						<Source><![CDATA[
        private void deleteAlienDynaLink_RU()
        {
            Query                query = this.query();
            QueryBuildDataSource queryBuildDataSource;
            int                  dataSourceCnt = query.dataSourceCount();
            int                  i;

            for (i = 1; i <= dataSourceCnt; i++)
            {
                queryBuildDataSource = query.dataSourceNo(i);

                this.purgeDynalink_RU(queryBuildDataSource);
                this.processChildDatasource_RU(queryBuildDataSource, queryBuildDataSource.childDataSourceCount());
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayOption</Name>
						<Source><![CDATA[
        public void displayOption(Common _ledgerEntryReference, FormRowDisplayOption _options)
        {
            boolean hasBondedTransactions_RU = false;
            GeneralJournalEntry generalJournalEntryForBond;
            SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

            #define.Grey(196)

            if (correspondenceEnabled)
            {
                generalJournalEntryForBond = _ledgerEntryReference as GeneralJournalEntry;
                if (generalJournalEntryForBond)
                {
                    hasBondedTransactions_RU = generalJournalEntryForBond.hasBondedTransactions_RU();
                }
                else
                {
                    subledgerVoucherGeneralJournalEntry = _ledgerEntryReference as SubledgerVoucherGeneralJournalEntry;

                    if (subledgerVoucherGeneralJournalEntry)
                    {
                        hasBondedTransactions_RU = SubledgerVoucherGeneralJournalAccountEntry_RU::hasBondedTransactions_RU(subledgerVoucherGeneralJournalEntry.GeneralJournalEntry);
                    }
                }

                if (!hasBondedTransactions_RU)
                {
                    _options.backColor(hex2Int(rgb2Hex(#Grey, #Grey, #Grey)));
                }
            }

            super(_ledgerEntryReference, _options);

            if (LedgerShowDebCredController_CN::isNegativeAmountsInRedFeatureEnabled())
            {
                showDRsCRsController.showNegativeAmountsInRed(_ledgerEntryReference, _options);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayTransDateDay_CN</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Display method for the transDate day.
        /// </summary>
        /// <param name="_ledgerEntryReference">
        ///     LedgerEntryReference which is used to get accountingDate for day
        /// </param>
        /// <returns>
        ///     Day of the transDate
        /// </returns>
        display Days displayTransDateDay_CN(GeneralJournalEntry _ledgerEntryReference)
        {
            return dayOfMth(_ledgerEntryReference.AccountingDate);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayTransDateMth_CN</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Display method for the transDate month.
        /// </summary>
        /// <param name="_ledgerEntryReference">
        ///     LedgerEntryReference which is used to get accountingDate for month
        /// </param>
        /// <returns>
        ///     Month of the transDate
        /// </returns>
        public display Months displayTransDateMth_CN(GeneralJournalEntry _ledgerEntryReference)
        {
            return mthOfYr(_ledgerEntryReference.AccountingDate);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayTransDateYear_CN</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Display method for the transDate year.
        /// </summary>
        /// <param name="_ledgerEntryReference">
        ///     LedgerEntryReference which is used to get accountingDate for year
        /// </param>
        /// <returns>
        ///     Year of the transDate
        /// </returns>
        display Yr displayTransDateYear_CN(GeneralJournalEntry _ledgerEntryReference)
        {
            return year(_ledgerEntryReference.AccountingDate);
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            QueryBuildDataSource    dataSourceGeneralJournalEntry;
            QueryBuildRange         rangeAccountingDate;

            QueryBuildRange                 showTransRange;
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                showTransRange = SysQuery::findOrCreateRange(this.query().dataSourceTable(tableNum(GeneralJournalAccountEntry)), fieldNum(GeneralJournalAccountEntry, IsCredit));

                switch (showTransMode.selection())
                {
                    case LedgerBondShowTransMode_RU::ShowDebitOnly :
                        showTransRange.value(enum2str(NoYes::No));
                        break;

                    case LedgerBondShowTransMode_RU::ShowCreditOnly :
                        showTransRange.value(enum2str(NoYes::Yes));
                        break;

                    default :
                        showTransRange.value(SysQuery::valueUnlimited());
                }
            }
            dataSourceGeneralJournalEntry = this.query().dataSourceTable(tableNum(GeneralJournalEntry));
            if (fromZakatMenu)
            {
                dataSourceGeneralJournalEntry.clearRanges();
            }

            GeneralJournalEntry::addSecureRangeForLedger(dataSourceGeneralJournalEntry);

            if (fromZakatMenu)
            {
                rangeAccountingDate = dataSourceGeneralJournalEntry.addRange(fieldNum(GeneralJournalEntry, AccountingDate));
                rangeAccountingDate.value(strFmt('"%1".."%2"', fromDate.dateValue(), toDate.dateValue()));
            }

            this.applyReportDrilldownRange();

            super();

            
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            SubledgerVoucherGeneralJournalEntry subledgerVoucherLink;

            subledgerVoucherLink = SubledgerVoucherGeneralJournalEntry::findByGeneralJournalEntry(generalJournalEntry);

            relatedVouchers.enabled(LedgerTransVoucherLink::existForRelatedVoucher(subledgerVoucherLink.Voucher, subledgerVoucherLink.AccountingDate));

            //Restrict the current company since all related vouchers only works for current company
            allRelatedVouchers.enabled(LedgerTransVoucherLink::existForRelatedVoucher(subledgerVoucherLink.Voucher, subledgerVoucherLink.AccountingDate, curExt(), true));

            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                taxWithholdTransactions_IN.enabled(LedgerJournalTrans_IN_Extension::isTaxWithholdGroupOnLJT_IN(ledgerEntryJournal.JournalNumber,
                                                        subledgerVoucherLink.AccountingDate,
                                                        subledgerVoucherLink.Voucher));
            }

            if (showAllRelated)
            {
                // Do not enable button when already in that state
                allRelatedVouchers.enabled(false);
            }

            // <GTE>
            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                TaxDocumentLauncher.visible(
                    TaxDocumentGeneralJournalEntryLink::findByGeneralJorunalEntry(generalJournalEntry.RecId) != null
                    && generalJournalEntry.JournalCategory != LedgerTransType::Project);
            }
            // </GTE>

            LedgerReverseTransBase.enabled(TransactionReversalTrans::findTransactionReversalTrans(tableNum(GeneralJournalAccountEntry), generalJournalAccountEntry.RecId).RecId != 0);

            TransactionReversalDialog.enabled(element.hasAccessToAllMarkedRecords());

            return super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            generalJournalEntry_ds.cacheAddMethod(tableMethodStr(GeneralJournalEntry, displayIsFiscalYearClosed));

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                generalJournalEntry_ds.deleteAlienDynaLink_RU();
                generalJournalEntry_ds.cacheAddMethod(staticMethodStr(GeneralJournalEntry_Extension, reportingDate_RU));
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>applyReportDrilldownRange</Name>
						<Source><![CDATA[
        // <remarks>
        // Report drill downs were taking a while to load the form because to load the form executeQuery is ran
        // twice. The first executeQuery retrieves all viewable records and then the second executeQuery filters
        // down to the drill down value. The double executeQuery is a security measure to prevent drill downs
        // from getting access to invalid records. This method is used to speed up the form load time by
        // restricting the first load of all viewable records by applying only verified ranges.
        // </remarks>
        private void applyReportDrilldownRange()
        {
            if (this.formRun().args() && this.formRun().args().getRequestContextQuery())
            {
                UrlGenerator generator = new UrlGenerator();
                generator.ParseRequestQueryParameter(this.formRun().args().getRequestContextQuery());

                RequestQueryParameterCollection parameterCollection = generator.RequestQueryParameterCollection;

                while (parameterCollection.moveNext())
                {
                    RequestQueryParameter parameter = parameterCollection.current();

                    if (tableStr(GeneralJournalEntry) == parameter.DataSource)
                    {
                        int fieldCount = parameter.getFieldValueCount();

                        for (int i = 0; i < fieldCount; i++)
                        {
                            var fieldName = parameter.getField(i);
                            var fieldValue = parameter.getValue(i);

                            if (fieldName && fieldValue)
                            {
                                QueryBuildRange drillDownFilter;

                                switch (fieldName)
                                {
                                    case fieldStr(GeneralJournalEntry, RecId):
                                        drillDownFilter = SysQuery::findOrCreateRange(this.queryBuildDataSource(), fieldNum(GeneralJournalEntry, RecId));
                                        drillDownFilter.value(fieldValue);

                                        break;

                                    case fieldStr(GeneralJournalEntry, SubledgerVoucher):
                                        drillDownFilter = SysQuery::findOrCreateRange(this.queryBuildDataSource(), fieldNum(GeneralJournalEntry, SubledgerVoucher));
                                        drillDownFilter.value(fieldValue);

                                        break;

                                    case fieldStr(GeneralJournalEntry, SubledgerVoucherDataAreaId):
                                        drillDownFilter = SysQuery::findOrCreateRange(this.queryBuildDataSource(), fieldNum(GeneralJournalEntry, SubledgerVoucherDataAreaId));
                                        drillDownFilter.value(fieldValue);

                                        break;

                                    case fieldStr(GeneralJournalEntry, JournalNumber):
                                        drillDownFilter = SysQuery::findOrCreateRange(this.queryBuildDataSource(), fieldNum(GeneralJournalEntry, JournalNumber));
                                        drillDownFilter.value(fieldValue);

                                        break;
                                }
                            }
                        }

                        break;
                    }
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>markChanged</Name>
						<Source><![CDATA[
        public void markChanged()
        {
            super();

            TransactionReversalDialog.enabled(element.hasAccessToAllMarkedRecords());
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TransactionLog1</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            if (ignoreAccounts_CN)
            {
                TransactionLog1_ds.linkType(FormLinkType::InnerJoin);
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>GeneralJournalAccountEntry_W</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            DictRelation dictRelation;
            QueryBuildDataSource ds;
            boolean inContext;

            inContext = GeneralJournalAccountEntry_W::isLegalEntityInCountryRegion();

            if (inContext)
            {
                // has to be done before super to ensure it is properly initialized
                this.linkType(FormLinkType::OuterJoin);
            }

            super();

            if (inContext)
            {
                // change the relation because there are 2 GJAE relations and the wrong one is the default
                ds = this.queryBuildDataSource();
                ds.clearLinks();
                ds.addLink(fieldNum(GeneralJournalAccountEntry, RecId), fieldNum(GeneralJournalAccountEntry_W, GeneralJournalAccountEntry));
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                generalJournalAccountEntry_W_ds.cacheAddMethod(tableMethodStr(GeneralJournalAccountEntry_W, mainAccountNameCorr_RU));
                generalJournalAccountEntry_W_ds.cacheAddMethod(tableMethodStr(GeneralJournalAccountEntry_W, txtCorr_RU));
                generalJournalAccountEntry_W_ds.cacheAddMethod(tableMethodStr(GeneralJournalAccountEntry_W, ledgerDimensionCorrDisplay_RU));
                generalJournalAccountEntry_W_ds.cacheAddMethod(tableMethodStr(GeneralJournalAccountEntry_W, postingTypeCorr_RU));
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>GeneralJournalEntry_W</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            if (chineseVoucher_CN)
            {
                // has to be done before super to ensure it is properly initialized
                this.linkType(FormLinkType::InnerJoin);
            }
            else if (GeneralJournalEntry_W::isLegalEntityInCountryRegion())
            {
                // has to be done before super to ensure it is properly initialized
                this.linkType(FormLinkType::OuterJoin);
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>LedgerVoucherTransAuditLogDetailEdit</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.runAuditLogMenuItemDisplayStr(menuItemDisplayStr(LedgerVoucherTransAuditLogDetailEdit));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LedgerVoucherTransAuditLog</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.runAuditLogMenuItemDisplayStr(menuItemDisplayStr(LedgerVoucherTransAuditLog));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TaxDocumentLauncher</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            TaxDocumentLauncher::launchFromGeneralJournalEntry(GeneralJournalEntry, element.args().record());  
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GeneralLedger_CN</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args                            args = new Args();
            FiscalCalendarPeriod            fiscalCalendarPeriodLocal;
            FiscalCalendarYear              fiscalCalendarYear;
            TempStr                         accValue;
            LedgerInquiryGeneral_CN         ledgerInquiryGeneral_CN;
            Query                           query;
            QueryRun                        queryRunGeneralLedger;
            QueryBuildDataSource            ds;
            QueryBuildRange                 range;

            super();

            if (LedgerParameters::isLedgerInquiry_CN())
            {
                accValue    = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(generalJournalAccountEntry.LedgerDimension);
                if (accValue == '')
                {
                    // Account number must be filled in.
                    warning("@GLS54968");
                }
                else
                {
                    query   = new Query();
                    if (query)
                    {
                        ds      = query.addDataSource(tableNum(MainAccount));
                        ds.addRange(fieldNum(MainAccount, LedgerChartOfAccounts)).value(queryValue(LedgerChartOfAccounts::current()));
                        ds.addRange(fieldNum(MainAccount, MainAccountId)).value(accValue);

                        queryRunGeneralLedger = new QueryRun(query);

                        fiscalCalendarPeriodLocal = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(
                            CompanyInfoHelper::fiscalCalendarRecId(),
                            generalJournalEntry.AccountingDate);
                        fiscalCalendarYear = FiscalCalendarYear::find(fiscalCalendarPeriodLocal.FiscalCalendarYear);

                        ledgerInquiryGeneral_CN = new LedgerInquiryGeneral_CN(queryRunGeneralLedger);
                        ledgerInquiryGeneral_CN.parmFiscalPeriodNameAndYearName(fiscalCalendarPeriodLocal.Name, fiscalCalendarYear.Name);
                        if (ledgerInquiryGeneral_CN)
                        {
                            args.parmObject(ledgerInquiryGeneral_CN);
                            args.caller(this);
                            new MenuFunction(menuitemDisplayStr(LedgerGeneralLedger_CN), MenuItemType::Display).run(args);
                        }
                    }
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DetailLedger_CN</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args                        args = new Args();
            LedgerInquiryDaily_CN       ledgerInquiryDailyCopy;
            TempStr                     accValue;
            TempStr                     initPerDate;
            FiscalCalendarPeriod        fiscalCalendarPeriodLocal;
            FiscalCalendarYear          fiscalCalendarYear;

            super();

            if (LedgerParameters::isLedgerInquiry_CN())
            {
                accValue    = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(generalJournalAccountEntry.LedgerDimension);
                fiscalCalendarPeriodLocal   = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(
                    CompanyInfoHelper::fiscalCalendarRecId(),
                    generalJournalEntry.AccountingDate);
                fiscalCalendarYear          = FiscalCalendarYear::find(fiscalCalendarPeriodLocal.FiscalCalendarYear);
                initPerDate                 = fiscalCalendarPeriodLocal.Name;

                ledgerInquiryDailyCopy      = new LedgerInquiryDaily_CN(
                    accValue,
                    accValue,
                    initPerDate,
                    fiscalCalendarYear.Name,
                    true);

                if (ledgerInquiryDailyCopy)
                {
                    ledgerInquiryDailyCopy.setDailySummary(false);
                    ledgerInquiryDailyCopy.initTmpDailyLedger();
                    args.parmObject(ledgerInquiryDailyCopy);
                    args.caller(element);
                    new MenuFunction(menuitemDisplayStr(LedgerDetailLedger_CN), MenuItemType::Display).run(args);
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DailyLedger_CN</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args                        args = new Args();
            LedgerInquiryDaily_CN       ledgerInquiryDailyCopy;
            TempStr                     accValue;
            TempStr                     initPerDate;

            FiscalCalendarPeriod        fiscalCalendarPeriodLocal;
            FiscalCalendarYear          fiscalCalendarYear;

            super();

            if (LedgerParameters::isLedgerInquiry_CN())
            {
                accValue    = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(generalJournalAccountEntry.LedgerDimension);
                fiscalCalendarPeriodLocal   = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(
                    CompanyInfoHelper::fiscalCalendarRecId(),
                    generalJournalEntry.AccountingDate);
                fiscalCalendarYear          = FiscalCalendarYear::find(fiscalCalendarPeriodLocal.FiscalCalendarYear);
                initPerDate                 = fiscalCalendarPeriodLocal.Name;

                ledgerInquiryDailyCopy      = new LedgerInquiryDaily_CN(
                    accValue,
                    accValue,
                    initPerDate,
                    fiscalCalendarYear.Name,
                    true);

                if (ledgerInquiryDailyCopy)
                {
                    ledgerInquiryDailyCopy.setDailySummary(true);
                    ledgerInquiryDailyCopy.initTmpDailyLedger();
                    args.parmObject(ledgerInquiryDailyCopy);
                    args.caller(element);
                    new MenuFunction(menuitemDisplayStr(LedgerDailyLedger_CN), MenuItemType::Display).run(args);
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HideForeignCurrency_CN</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            if (LedgerParameters::isLedgerInquiry_CN())
            {
                if (isShow)
                {
                    element.setFieldsVisibled_CN(true);
                    isShow = false;
                    // Hide foreign currency information
                    this.text(literalStr("@GLS54613"));
                    // Hide the columns that display foreign currency amounts.
                    this.helpText(literalStr("@GLS54614"));
                }
                else
                {
                    element.setFieldsVisibled_CN(false);
                    isShow = true;
                    // Show foreign currency amounts
                    this.text(literalStr("@GLS54640"));
                    // Show foreign currency amounts
                    this.helpText(literalStr("@GLS54640"));
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LedgerReverseTransactions_RU</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            if (generalJournalAccountEntry.canReverse())
            {
                super();
                generalJournalAccountEntry_ds.research();
            }
            else
            {
                throw error(strFmt("@SYS78555", generalJournalAccountEntry.PostingType, generalJournalAccountEntry.LedgerAccount));
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ShowTransMode</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        public int selectionChange()
        {
            int ret;

            ret = super();
            if (ret)
            {
                generalJournalEntry_ds.executeQuery();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ZakatAdjustment</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            Args        args;
            FormRun     formRun;

            args = new Args();
            args.record(generalJournalAccountEntry);
            formRun = new MenuFunction(menuitemDisplayStr(GeneralJournalAccountEntryZakat_SA), MenuItemType::Display).create(args);
            formRun.run();
            formRun.wait();

            if (formRun.closedOk())
            {
                generalJournalAccountEntryZakat.reread();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>View</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            if (!fromDate.dateValue() || !toDate.dateValue())
            {
                throw error ("@SYS71110");
            }
            if (fromDate.dateValue() > toDate.dateValue())
            {
                throw error ("@SYS120590");
            }

            generalJournalEntry_ds.executeQuery();
            zakatAdjustment.enabled(generalJournalAccountEntry.RecId);
            generalJournalAccountEntryZakat = GeneralJournalAccountEntryZakat_SA::findByGeneralJournalAccountEntry(generalJournalAccountEntry.RecId);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>ReasonTableRef</Name>
			<Table>ReasonTableRef</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Reason</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonComment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>GeneralJournalAccountEntry</JoinSource>
			<LinkType>Active</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>GeneralJournalAccountEntry</Name>
			<Table>GeneralJournalAccountEntry</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AllocationLevel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GeneralJournalEntry</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HistoricalExchangeRateDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsCorrection</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsCredit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentReference</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId_SA</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjTableDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Quantity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SkipCreditCalculation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubledgerJournalEntry</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Text</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionCurrencyCode</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>GeneralJournalEntry</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>GeneralJournalEntry</Name>
			<Table>GeneralJournalEntry</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AcknowledgementDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetSourceLedgerEntryPosted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FiscalCalendarPeriod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FiscalCalendarYear</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JournalCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JournalNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Ledger</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerEntryJournal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerPostingJournal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerPostingJournalDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingLayer</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubledgerJournalEntry</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubledgerVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubledgerVoucherDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransferId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<StartPosition>Last</StartPosition>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>LedgerEntryJournal</Name>
			<Table>LedgerEntryJournal</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JournalNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerJournalTableDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>GeneralJournalEntry</JoinSource>
			<LinkType>Active</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TransactionLog1</Name>
			<Table>TransactionLog</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Type</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>GeneralJournalAccountEntry</JoinSource>
			<LinkType>Active</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>DimensionAttributeValueCombination</Name>
			<Table>DimensionAttributeValueCombination</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountStructure</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DisplayValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Hash</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimensionType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MainAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>GeneralJournalAccountEntry</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>MainAccount</Name>
			<Table>MainAccount</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountCategoryRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AdjustmentMethod_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CloseType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Closing</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ConsolidationMainAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DebitCreditBalanceDemand</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DebitCreditCheck</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DebitCreditProposal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeAdjusted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FinancialReportingExchangeRateType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FinancialReportingTranslationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InflationAdjustment_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerChartOfAccounts</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MainAccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MainAccountTemplate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MandatoryPaymentReference</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Monetary</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OpeningAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentMainAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RepomoType_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingAccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SRUCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransferYearEndAccount_ES</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Type</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UnitOfMeasure</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UserInfoId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidateCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidatePosting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidateUser</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>DimensionAttributeValueCombination</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>FiscalCalendarPeriod</Name>
			<Table>FiscalCalendarPeriod</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FiscalCalendar</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FiscalCalendarYear</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Month</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Quarter</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShortName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Type</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>GeneralJournalEntry</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<MaxAccessRight>View</MaxAccessRight>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>LedgerEntry</Name>
			<Table>LedgerEntry</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BankDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompanyBankAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ConsolidatedCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRateDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GeneralJournalAccountEntry</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsBridgingPosting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsExchangeAdjustment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ThirdPartyBankAccount</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>GeneralJournalAccountEntry</JoinSource>
			<LinkType>Active</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>GeneralJournalAccountEntry_W</Name>
			<Table>GeneralJournalAccountEntry_W</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BondBatchTrans_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ConsolidatedRefRecId_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ConsolidatedVoucher_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GeneralJournalAccountEntry</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GeneralJournalEntry</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsAccountingClosing_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>GeneralJournalAccountEntry</JoinSource>
			<LinkType>Passive</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>GeneralJournalEntry_W</Name>
			<Table>GeneralJournalEntry_W</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GeneralJournalEntry</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerVoucherType_CN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Reversed_CN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher_CN</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>GeneralJournalEntry</JoinSource>
			<LinkType>Passive</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>LedgerVoucherType_CN</Name>
			<Table>LedgerVoucherType_CN</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultApprover</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultJournal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultPreparedByWorker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Id</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerPrintLayoutGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Num</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumberSequenceTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Priority</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RestrictionType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>GeneralJournalEntry_W</JoinSource>
			<LinkType>Passive</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TransLink_RU</Name>
			<Table>TransLink_RU</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Del_CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Del_ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Last</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrigData</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefPri</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefSec</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReversalGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Reversed</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransLinkType</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>GeneralJournalAccountEntry</JoinSource>
			<LinkType>Passive</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>FinTag</Name>
			<Table>FinTag</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DisplayValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Hash</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tag01</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tag02</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tag03</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tag04</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tag05</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tag06</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tag07</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tag08</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tag09</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tag10</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tag11</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tag12</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tag13</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tag14</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tag15</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tag16</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tag17</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tag18</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tag19</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tag20</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>GeneralJournalAccountEntry</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS17628</Caption>
		<DataSource xmlns="">GeneralJournalAccountEntry</DataSource>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Pattern xmlns="">Task</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<TitleDataSource xmlns="">GeneralJournalEntry</TitleDataSource>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>536870911</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SubledgerJournal</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>599186284</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>GeneralJournalEntry</DataSource>
								<MenuItemName>SubledgerJournalOverview</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>Base</Name>
								<ElementPosition>898779426</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>GeneralJournalEntry</DataSource>
								<MenuItemName>LedgerTransBase</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
								<SaveRecord>No</SaveRecord>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>LedgerTransAccount</Name>
								<ElementPosition>1198372568</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>GeneralJournalAccountEntry</DataSource>
								<MenuItemName>LedgerTransAccount</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
								<SaveRecord>No</SaveRecord>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TransactionLog</Name>
								<ElementPosition>1497965710</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>TransactionLog</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>EditVoucher</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<EnableFormRef>No</EnableFormRef>
								<Type>MenuButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>LedgerVoucherTransAuditLogDetailEdit</Name>
										<Type>MenuFunctionButton</Type>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>LedgerVoucherTransAuditLogDetailEdit</MenuItemName>
										<MultiSelect>Yes</MultiSelect>
										<Text>@GeneralLedger:LedgerUpdateVoucherPropertiesEdit</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>LedgerVoucherTransAuditLog</Name>
										<Type>MenuFunctionButton</Type>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>LedgerVoucherTransAuditLog</MenuItemName>
										<MultiSelect>Yes</MultiSelect>
									</AxFormControl>
								</Controls>
								<MultiSelect>Yes</MultiSelect>
								<SaveRecord>No</SaveRecord>
								<Text>@GeneralLedger:LedgerUpdateVoucherDescription</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TaxTransactions</Name>
								<ElementPosition>1797558852</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>GeneralJournalAccountEntry</DataSource>
								<MenuItemName>TaxTrans</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
								<SaveRecord>No</SaveRecord>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TaxDocumentLauncher</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>TaxDocumentLauncher</MenuItemName>
								<MenuItemType>Action</MenuItemType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TaxWithholdTransactions_IN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2097151998</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>TaxWithholdTrans_IN</MenuItemName>
								<SaveRecord>No</SaveRecord>
								<Text>@SYS81790</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>Originaldocuments</Name>
								<ElementPosition>2107987283</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>Originaldocuments</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
								<SaveRecord>No</SaveRecord>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>AccountingSourceExplorer</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>AccountingSourceExplorer</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDropDialogButtonControl">
								<Name>TransactionReversalDialog</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>DropDialogButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>LedgerTransactionReversalDialog</MenuItemName>
								<MultiSelect>Yes</MultiSelect>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>LedgerReverseTransBase</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2143289342</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>GeneralJournalAccountEntry</DataSource>
								<MenuItemName>TransactionReversalTransBase_Ledger</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ProjTransPostingButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2118822568</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>GeneralJournalAccountEntry</DataSource>
								<MenuItemName>ProjTransPosting</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>RelatedVouchers</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2129657853</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>GeneralJournalEntry</DataSource>
								<MenuItemName>LedgerTransRelatedVouchers</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>GeneralLedger_CN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>CN</CountryRegionCodes>
								<ElementPosition>2140493139</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS24097</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>DetailLedger_CN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>CN</CountryRegionCodes>
								<ElementPosition>2141891240</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@GLS54605</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>DailyLedger_CN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>CN</CountryRegionCodes>
								<ElementPosition>2143289341</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@GLS54604</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>AllRelatedVouchers</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2143988391</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>GeneralJournalEntry</DataSource>
								<MenuItemName>LedgerTransVoucher1</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
								<Parameters>LedgerTransVoucher</Parameters>
								<Text>@SYS61116</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>HideForeignCurrency_CN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>CN</CountryRegionCodes>
								<ElementPosition>2144687442</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>CommandButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@GLS54613</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>PrintOut_CN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>CN</CountryRegionCodes>
								<ElementPosition>2146085543</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>LedgerVoucherReport_CN</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>954437176</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<DataSource>GeneralJournalEntry</DataSource>
										<MenuItemName>ledgerVoucher_CN</MenuItemName>
										<MenuItemType>Output</MenuItemType>
										<Text>@SYS86923</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>LedgerTransactionList_CN</Name>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>LedgerTransactionList_CN</MenuItemName>
										<MenuItemType>Output</MenuItemType>
										<Text>@SYS15191</Text>
									</AxFormControl>
								</Controls>
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS55777</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>LedgerReverseTransactions_RU</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>RU</CountryRegionCodes>
								<ElementPosition>2146551577</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>GeneralJournalAccountEntry</DataSource>
								<MenuItemName>TransactionReversal_Ledger</MenuItemName>
								<MenuItemType>Action</MenuItemType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>LedgerReverseTrace_RU</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2147017611</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>GeneralJournalAccountEntry</DataSource>
								<MenuItemName>LedgerTransVoucher_ReverseTrace_RU</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TransactionReversalFailures</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<DataSource>GeneralJournalAccountEntry</DataSource>
								<MenuItemName>TransactionReversalFailures</MenuItemName>
								<MultiSelect>No</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDropDialogButtonControl">
								<Name>ShowInactiveTags</Name>
								<Type>DropDialogButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>FinTagShowInactiveTags</MenuItemName>
								<Text>@FinTag:FinTagShowInactiveTags_Caption</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CustomFilterGroup</Name>
				<Pattern>CustomFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>CreditingFilterGrp_RU</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<CountryRegionCodes>RU</CountryRegionCodes>
						<ElementPosition>8947848</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>ShowTransMode</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<EnumType>LedgerBondShowTransMode_RU</EnumType>
								<Items />
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<FrameType>None</FrameType>
						<Style>CustomFilter</Style>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>DateGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<CountryRegionCodes>SA</CountryRegionCodes>
						<ElementPosition>805306366</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>FromDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>715827882</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>FromDate</ExtendedDataType>
								<Label>@SYS95981</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>ToDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>ToDate</ExtendedDataType>
								<Label>@SYS95982</Label>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1207959550</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabOverview</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>GridActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>GridActionButtonGroup</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>ZakatAdjustment</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<CountryRegionCodes>SA</CountryRegionCodes>
												<ElementPosition>1789569705</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>MenuFunctionButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<MenuItemName>GeneralJournalAccountEntryZakat_SA</MenuItemName>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>View</Name>
												<CountryRegionCodes>SA</CountryRegionCodes>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>CommandButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS5252</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>OverviewGrid</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>TransDateYear_CN</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<CountryRegionCodes>CN</CountryRegionCodes>
										<ElementPosition>204322522</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayTransDateYear_CN</DataMethod>
										<DataSource>GeneralJournalEntry</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>TransDateMth_CN</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<CountryRegionCodes>CN</CountryRegionCodes>
										<ElementPosition>306483783</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayTransDateMth_CN</DataMethod>
										<DataSource>GeneralJournalEntry</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>TransDateDay_CN</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<CountryRegionCodes>CN</CountryRegionCodes>
										<ElementPosition>408645044</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayTransDateDay_CN</DataMethod>
										<DataSource>GeneralJournalEntry</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerVoucher</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>510806305</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>JournalNumber</DataField>
										<DataSource>GeneralJournalEntry</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Voucher</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>561886935</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>SubledgerVoucher</DataField>
										<DataSource>GeneralJournalEntry</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>LedgerEntryReference_LedgerVoucherType_CN</Name>
										<ElementPosition>612967566</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>LedgerEntryReference_LedgerVoucherType_CN_Id</Name>
												<DataRelationPath>LedgerVoucherType_CN</DataRelationPath>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
											</AxFormControl>
										</Controls>
										<DataSource>GeneralJournalEntry_W</DataSource>
										<ReferenceField>LedgerVoucherType_CN</ReferenceField>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerEntryReference_Voucher_CN</Name>
										<ElementPosition>715128827</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Voucher_CN</DataField>
										<DataSource>GeneralJournalEntry_W</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>LedgerTrans_TransDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>817290088</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AccountingDate</DataField>
										<DataSource>GeneralJournalEntry</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>YearClosed</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>919451349</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataMethod>displayIsFiscalYearClosed</DataMethod>
										<DataSource>GeneralJournalEntry</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerTrans_AccountNum</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1021612610</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<PreviewPartRef>DimensionCombinationPreviewPart</PreviewPartRef>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LedgerAccount</DataField>
										<DataSource>GeneralJournalAccountEntry</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>AccountNum_Corr_RU</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<CountryRegionCodes>RU</CountryRegionCodes>
										<ElementPosition>1123773871</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>ledgerDimensionCorrDisplay_RU</DataMethod>
										<DataSource>GeneralJournalAccountEntry_W</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>AccountName</Name>
										<ElementPosition>429496728</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>localizedName</DataMethod>
										<DataSource>MainAccount</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>AccountNameCorr_RU</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>mainAccountNameCorr_RU</DataMethod>
										<DataSource>GeneralJournalAccountEntry_W</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerTrans_Txt</Name>
										<ElementPosition>286331152</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Text</DataField>
										<DataSource>GeneralJournalAccountEntry</DataSource>
										<DisplayLength>60</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerTrans_TxtCorr_RU</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>572662304</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>txtCorr_RU</DataMethod>
										<DataSource>GeneralJournalAccountEntry_W</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerTrans_LedgerPostingJournalId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1328096393</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LedgerPostingJournal</DataField>
										<DataSource>GeneralJournalEntry</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerTrans_CurrencyCode</Name>
										<ElementPosition>1430257654</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransactionCurrencyCode</DataField>
										<DataSource>GeneralJournalAccountEntry</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>LedgerTrans_AmountCur</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1519779831</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_GeneralLedger:LedgerTransVoucher_Amount</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransactionCurrencyAmount</DataField>
										<DataSource>GeneralJournalAccountEntry</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>GeneralJournalLine_AmountCurDebit_CN</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<CountryRegionCodes>CN,JP</CountryRegionCodes>
										<ElementPosition>1609302008</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>Yes</CacheDataMethod>
										<DataMethod>displayTransactionCurAmountDebit_CN</DataMethod>
										<DataSource>GeneralJournalAccountEntry</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>GeneralJournalLine_AmountCurCredit_CN</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<CountryRegionCodes>CN,JP</CountryRegionCodes>
										<ElementPosition>1698824185</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>Yes</CacheDataMethod>
										<DataMethod>displayTransactionCurAmountCredit_CN</DataMethod>
										<DataSource>GeneralJournalAccountEntry</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>displayTaxBranchDimension_TH</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1744830462</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayTaxBranchDimension_TH</DataMethod>
										<DataSource>GeneralJournalAccountEntry</DataSource>
										<Label>@SYS4082535</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>LedgerTrans_AmountMST</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1788346362</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AccountingCurrencyAmount</DataField>
										<DataSource>GeneralJournalAccountEntry</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>GeneralJournalLine_AmountMSTDebit_CN</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<CountryRegionCodes>CN,JP</CountryRegionCodes>
										<ElementPosition>1877868539</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>Yes</CacheDataMethod>
										<DataMethod>displayAccountingCurAmountDebit_CN</DataMethod>
										<DataSource>GeneralJournalAccountEntry</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>GeneralJournalLine_AmountMSTCredit_CN</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<CountryRegionCodes>CN,JP</CountryRegionCodes>
										<ElementPosition>1967390716</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>Yes</CacheDataMethod>
										<DataMethod>displayAccountingCurAmountCredit_CN</DataMethod>
										<DataSource>GeneralJournalAccountEntry</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>LedgerTrans_AmountMSTSecond</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2056912893</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ReportingCurrencyAmount</DataField>
										<DataSource>GeneralJournalAccountEntry</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>LedgerTrans_Posting</Name>
										<ElementPosition>572662304</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>PostingType</DataField>
										<DataSource>GeneralJournalAccountEntry</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>LedgerTrans_PostingCorr_RU</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1503238552</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>postingTypeCorr_RU</DataMethod>
										<DataSource>GeneralJournalAccountEntry_W</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>GeneralJournalHeader_LedgerCategory</Name>
										<ElementPosition>2146435070</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>PostingLayer</DataField>
										<DataSource>GeneralJournalEntry</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ReportingDateGrid_RU</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<CountryRegionCodes>RU</CountryRegionCodes>
										<ElementPosition>842830403</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>GeneralJournalEntry_Extension::reportingDate_RU</DataMethod>
										<DataSource>GeneralJournalEntry</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>TransLink_RU_TransLinkType</Name>
										<ElementPosition>868370718</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransLinkType</DataField>
										<DataSource>TransLink_RU</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>TransLink_RU_Reversed</Name>
										<ElementPosition>893911033</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>Reversed</DataField>
										<DataSource>TransLink_RU</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>VendorAccount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayVendAccount</DataMethod>
										<DataSource>GeneralJournalAccountEntry</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>VendorName</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayVendName</DataMethod>
										<DataSource>GeneralJournalAccountEntry</DataSource>
										<Label>@SYS303622</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CustomerAccount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayCustAccount</DataMethod>
										<DataSource>GeneralJournalAccountEntry</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CustomerName</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayCustName</DataMethod>
										<DataSource>GeneralJournalAccountEntry</DataSource>
										<Label>@SYS27874</Label>
									</AxFormControl>
								</Controls>
								<DataSource>GeneralJournalEntry</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS9039</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabGeneral</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Identification</Name>
								<ElementPosition>238609294</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_LedgerPostingJournalId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>779741083</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>LedgerPostingJournal</DataField>
										<DataSource>GeneralJournalEntry</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>LedgerEntryReference_LedgerVoucherType_CN1</Name>
										<ElementPosition>1099307102</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>LedgerEntryReference_LedgerVoucherType_CN1_Id</Name>
												<DataRelationPath>LedgerVoucherType_CN</DataRelationPath>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
											</AxFormControl>
										</Controls>
										<DataSource>GeneralJournalEntry_W</DataSource>
										<ReferenceField>LedgerVoucherType_CN</ReferenceField>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerEntryReference_Voucher_CN1</Name>
										<ElementPosition>1623395374</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Voucher_CN</DataField>
										<DataSource>GeneralJournalEntry_W</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>displayTaxBranchDimension_general_TH</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>GeneralJournalAccountEntry_Extension::displayTaxBranchDimension</DataMethod>
										<DataSource>GeneralJournalAccountEntry</DataSource>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<Caption>@SYS5711</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Origin</Name>
								<ElementPosition>477218588</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Origin_DocumentNum</Name>
										<ElementPosition>905969662</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>DocumentNumber</DataField>
										<DataSource>GeneralJournalEntry</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Origin_DocumentDate</Name>
										<ElementPosition>1358954493</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>DocumentDate</DataField>
										<DataSource>GeneralJournalEntry</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Origin_JournalNum</Name>
										<ElementPosition>1811939326</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>JournalNumber</DataField>
										<DataSource>LedgerEntryJournal</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>Origin_AllocateLevel</Name>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_GeneralLedger:LedgerTransVoucher_AllocationLevel</HelpText>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>AllocationLevel</DataField>
										<DataSource>GeneralJournalAccountEntry</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CreatedBy</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayVoucherUser</DataMethod>
										<Label>@SYS328585</Label>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<Caption>@SYS101765</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Amount</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ExchRate</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_GeneralLedger:LedgerTransVoucher_ExchangeRate</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayAccountingExchangeRate</DataMethod>
										<DataSource>GeneralJournalAccountEntry</DataSource>
										<MinNoOfDecimals>4</MinNoOfDecimals>
										<MinNoOfDecimalsMode>Fixed</MinNoOfDecimalsMode>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Amount_Qty</Name>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Quantity</DataField>
										<DataSource>GeneralJournalAccountEntry</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<Caption>@SYS6928</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Period</Name>
								<ElementPosition>1193046470</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>Period_PeriodCode</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_GeneralLedger:LedgerTransVoucher_PeriodType</HelpText>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Type</DataField>
										<DataSource>FiscalCalendarPeriod</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ReportingDate_RU</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<CountryRegionCodes>RU</CountryRegionCodes>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>GeneralJournalEntry_Extension::reportingDate_RU</DataMethod>
										<DataSource>GeneralJournalEntry</DataSource>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<Caption>@SYS40</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Consolidation_BR</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>BR</CountryRegionCodes>
								<ElementPosition>1934972243</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerEntry_ConsolidatedCompany</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ConsolidatedCompany</DataField>
										<DataSource>LedgerEntry</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Consolidation_BR_ConsolidatedVoucher_BR</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ConsolidatedVoucher_BR</DataField>
										<DataSource>GeneralJournalAccountEntry_W</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@SYS106495</Caption>
								<DataSource>GeneralJournalAccountEntry</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Correspondence_RU</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1961070135</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormInt64Control">
										<Name>Correspondence_RU_BondBatchTrans_RU</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Int64</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>BondBatchTrans_RU</DataField>
										<DataSource>GeneralJournalAccountEntry_W</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>Correspondence_RU</DataGroup>
								<DataSource>GeneralJournalAccountEntry_W</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Type</Name>
								<ElementPosition>2013265918</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>Type_TransType</Name>
										<ElementPosition>1476395006</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>JournalCategory</DataField>
										<DataSource>GeneralJournalEntry</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>Type_Posting</Name>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>PostingType</DataField>
										<DataSource>GeneralJournalAccountEntry</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>Type_Crediting</Name>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>IsCredit</DataField>
										<DataSource>GeneralJournalAccountEntry</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>Type_Correct</Name>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>IsCorrection</DataField>
										<DataSource>GeneralJournalAccountEntry</DataSource>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<Caption>@SYS1201</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Reason</Name>
								<ElementPosition>1908874352</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Reason_Reason</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Reason</DataField>
										<DataSource>ReasonTableRef</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Reason_ReasonComment</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ReasonComment</DataField>
										<DataSource>ReasonTableRef</DataSource>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<DataGroup>Reason</DataGroup>
								<DataSource>ReasonTableRef</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS2952</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Zakat</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<CountryRegionCodes>SA</CountryRegionCodes>
						<ElementPosition>2013265918</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ZakatItem</Name>
								<ElementPosition>715827882</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ItemCode</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayItemCode_SA</DataMethod>
									</AxFormControl>
								</Controls>
								<Caption>@SYS322146</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>MaintenanceExpense</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>AssetGroup</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayAssetGroup_SA</DataMethod>
									</AxFormControl>
								</Controls>
								<Caption>@SYS73307</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Subcontractor</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SubContractorNum</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displaySubContractor_SA</DataMethod>
										<Label>@SYS321589</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ContractNum</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayContractNum_SA</DataMethod>
									</AxFormControl>
								</Controls>
								<Caption>@SYS22167</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Revenue</Name>
								<ElementPosition>1789569705</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SalesType</Name>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displaySalesType_SA</DataMethod>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SalesProjId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1503238552</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displaySalesProjId_SA</DataMethod>
										<Label>@SYS321601</Label>
									</AxFormControl>
								</Controls>
								<Caption>@SYS10074</Caption>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS321586</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Asset_RU</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ConfigurationKey>RAsset</ConfigurationKey>
						<CountryRegionCodes>RU</CountryRegionCodes>
						<ElementPosition>2080374782</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>AccountNum</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>AssetId</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayAssetId_RU</DataMethod>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>AssetName</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayAssetName_RU</DataMethod>
									</AxFormControl>
								</Controls>
								<Caption>@SYS12578</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ValueModel</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>StandardId</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayAssetStandardId_RU</DataMethod>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>StandardName</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayAssetStandardName_RU</DataMethod>
									</AxFormControl>
								</Controls>
								<Caption>@FixedAssets:FA_EntityField_Book</Caption>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@GLS106645</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<DataSource>GeneralJournalAccountEntry</DataSource>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>