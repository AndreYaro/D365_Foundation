<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>CreditCardPaymentBreakDownInfologSlider</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class CreditCardPaymentBreakDownInfologSlider extends FormRun
{
    private CreditCardPaymentBreakDownTmpStatusTable creditCardPaymentBreakDownTmpStatus;
    private CreditCardPaymentBreakDownTmpLogTable creditCardPaymentBreakDownTmpLog;
    private CreditCardPaymentBreakDownTable creditCardPaymentBreakDownTable;
    private Map stateMap;
    private ICreditCardSalesOrderInvoiceToPaymentRecordAccess creditCardSalesOrderInvoiceToPaymentRecordAccessor;
    private List logList;
    private List historyLogList;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
        creditCardPaymentBreakDownTable = element.args().record();
        if (!creditCardPaymentBreakDownTable)
        {
            throw error(Error::missingRecord(funcName()));
        }

        stateMap = new Map(Types::Enum, Types::Container);
        creditCardSalesOrderInvoiceToPaymentRecordAccessor = CreditCardSalesOrderInvoiceToPaymentRecordAccessorFactory::getCreditCardSalesOrderInvoiceToPaymentRecordAccess();
        this.generateStateMap();
        this.renderProgress(creditCardPaymentBreakDownTable.CreditCardPaymentProcessingStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateStateMap</Name>
				<Source><![CDATA[
    private void generateStateMap()
    {
        // append header
        stateMap.insert(CreditCardPaymentStatus::Calculated, [CreditCardInfoLogHelper::generateDummyCalculationInfoLog(), creditCardPaymentBreakDownTable.CreatedDateTime]);
        
        logList = creditCardSalesOrderInvoiceToPaymentRecordAccessor.getLastExecutionLogList(creditCardPaymentBreakDownTable.CreditCardPaymentExecutionId);
        ListEnumerator enumerator = logList.getEnumerator();
        while (enumerator.moveNext())
        {
            container executionLogPack = enumerator.current();
            container executionLog = conPeek(executionLogPack, 1);
            utcdatetime startTime = conPeek(executionLogPack, 2);
            CreditCardPaymentStatus paymentStatus = conPeek(executionLogPack, 3);
            stateMap.insert(paymentStatus, [executionLog, startTime]);
        }

        historyLogList = creditCardSalesOrderInvoiceToPaymentRecordAccessor.getPreviousFinishedExecutionLogList(creditCardPaymentBreakDownTable.RecId, creditCardPaymentBreakDownTable.CreditCardPaymentExecutionId);
        ListEnumerator historyListEnumerator = historyLogList.getEnumerator();
        while (historyListEnumerator.moveNext())
        {
            container executionLogPack = historyListEnumerator.current();
            container executionLog = conPeek(executionLogPack, 1);
            utcdatetime startTime = conPeek(executionLogPack, 2);
            CreditCardPaymentStatus paymentStatus = conPeek(executionLogPack, 3);
            stateMap.insert(paymentStatus, [executionLog, startTime]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStateDetail</Name>
				<Source><![CDATA[
    private container getStateDetail(CreditCardPaymentStatus _creditCardPaymentStatus)
    {
        if (stateMap.exists(_creditCardPaymentStatus))
        {
            return stateMap.lookup(_creditCardPaymentStatus);
        }
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderLogPerStatus</Name>
				<Source><![CDATA[
    private void renderLogPerStatus(CreditCardPaymentStatus _creditCardPaymentStatus)
    {

        container executionLogPack = this.getStateDetail(_creditCardPaymentStatus);
        if (executionLogPack != conNull())
        {
            container executionLog = conPeek(executionLogPack, 1);
            SysInfologEnumerator sysInfologEnumerator = SysInfologEnumerator::newData(executionLog);
            while (sysInfologEnumerator.moveNext())
            {
                creditCardPaymentBreakDownTmpLog.clear();
                creditCardPaymentBreakDownTmpLog.Logs = sysInfologEnumerator.currentMessage();
                creditCardPaymentBreakDownTmpLog.Symbol = this.getSymbolFromExceptionType(sysInfologEnumerator.currentException());
                creditCardPaymentBreakDownTmpLog.insert();
            }
                
            creditCardPaymentBreakDownTmpLogTable.setTmpData(creditCardPaymentBreakDownTmpLog);
            creditCardPaymentBreakDownTmpLogTable_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSymbolFromExceptionType</Name>
				<Source><![CDATA[
    private SymbolFontGlyphName getSymbolFromExceptionType(Exception _exception)
    {
        SymbolFontGlyphName symbol;
        switch (_exception)
        {
            case Exception::Info:
                symbol = ImageReferenceSymbol::Info;
                break;
            case Exception::Error:
                symbol = ImageReferenceSymbol::Error;
                break;
            case Exception::Warning:
                symbol = ImageReferenceSymbol::Warning;
                break;
            default:
                break;
        }
        return symbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderProgress</Name>
				<Source><![CDATA[
    private void renderProgress(CreditCardPaymentProcessingState _creditCardPaymentProcessingState)
    {
        // header
        creditCardPaymentBreakDownTmpStatus.clear();
        creditCardPaymentBreakDownTmpStatus.Symbol = ImageReferenceSymbol::FieldCorrect;
        creditCardPaymentBreakDownTmpStatus.PaymentStatus = CreditCardPaymentStatus::Calculated;
        container stateInfo = this.getStateDetail(CreditCardPaymentStatus::Calculated);
        if (stateInfo)
        {
            creditCardPaymentBreakDownTmpStatus.StartTime = conPeek(stateInfo, 2);
        }
        creditCardPaymentBreakDownTmpStatus.insert();

        // history
        ListEnumerator historyListEnumerator = historyLogList.getEnumerator();
        while (historyListEnumerator.moveNext())
        {
            container executionLogPack = historyListEnumerator.current();
            container executionLog = conPeek(executionLogPack, 1);
            utcdatetime startTime = conPeek(executionLogPack, 2);
            CreditCardPaymentStatus paymentStatus = conPeek(executionLogPack, 3);

            creditCardPaymentBreakDownTmpStatus.clear();
            creditCardPaymentBreakDownTmpStatus.Symbol = ImageReferenceSymbol::FieldCorrect;
            creditCardPaymentBreakDownTmpStatus.PaymentStatus = paymentStatus; 
            stateInfo = this.getStateDetail(paymentStatus);
            if (stateInfo)
            {
                creditCardPaymentBreakDownTmpStatus.StartTime = conPeek(stateInfo, 2);
            }
            creditCardPaymentBreakDownTmpStatus.insert();
        }

        // current execution
        ListEnumerator enumerator = logList.getEnumerator();
        int offset = 0;
        while (enumerator.moveNext())
        {
            container executionLogPack = enumerator.current();
            container executionLog = conPeek(executionLogPack, 1);
            utcdatetime startTime = conPeek(executionLogPack, 2);
            CreditCardPaymentStatus paymentStatus = conPeek(executionLogPack, 3);

            creditCardPaymentBreakDownTmpStatus.clear();
            offset += 1;
            if (offset == logList.elements() 
                && (_creditCardPaymentProcessingState == CreditCardPaymentProcessingState::StopOnError || _creditCardPaymentProcessingState == CreditCardPaymentProcessingState::StopOnException) )
            {
                creditCardPaymentBreakDownTmpStatus.Symbol = ImageReferenceSymbol::Error;
            }
            else
            {
                creditCardPaymentBreakDownTmpStatus.Symbol = ImageReferenceSymbol::FieldCorrect;
            }
            creditCardPaymentBreakDownTmpStatus.PaymentStatus = paymentStatus;
            stateInfo = this.getStateDetail(paymentStatus);
            if (stateInfo)
            {
                creditCardPaymentBreakDownTmpStatus.StartTime = conPeek(stateInfo, 2);
            }
            creditCardPaymentBreakDownTmpStatus.insert();
        }
        
        creditCardPaymentBreakDownTmpStatusTable.setTmpData(creditCardPaymentBreakDownTmpStatus);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>CreditCardPaymentBreakDownTmpStatusTable</Name>
				<Methods>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged()
        {
            delete_from creditCardPaymentBreakDownTmpLogTable;
            creditCardPaymentBreakDownTmpLogTable_ds.executeQuery();
            creditCardPaymentBreakDownTmpLogTable_ds.refresh();
            super();
            CreditCardPaymentBreakDownTmpStatusTable curLine = CreditCardPaymentBreakDownTmpStatusTable_ds.cursor();
            element.renderLogPerStatus(curLine.PaymentStatus);
        }

]]></Source>
					</Method>
					<Method>
						<Name>getIcon</Name>
						<Source><![CDATA[
        display container getIcon(CreditCardPaymentBreakDownTmpStatusTable _creditCardPaymentBreakDownTmpStatusTable)
        {
            SymbolFontGlyphName symbol = _creditCardPaymentBreakDownTmpStatusTable.Symbol;

            return ImageReference::constructForSymbol(symbol).pack();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>CreditCardPaymentBreakDownTmpLogTable</Name>
				<Methods>
					<Method>
						<Name>getIcon</Name>
						<Source><![CDATA[
        display container getIcon(CreditCardPaymentBreakDownTmpLogTable _creditCardPaymentBreakDownTmpLogTable)
        {
            SymbolFontGlyphName symbol = _creditCardPaymentBreakDownTmpLogTable.Symbol;

            return ImageReference::constructForSymbol(symbol).pack();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Close</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.close();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>CreditCardPaymentBreakDownTmpStatusTable</Name>
			<Table>CreditCardPaymentBreakDownTmpStatusTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Symbol</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>CreditCardPaymentBreakDownTmpLogTable</Name>
			<Table>CreditCardPaymentBreakDownTmpLogTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Infolog</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS22176</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Pattern xmlns="">DialogFastTabs</Pattern>
		<PatternVersion xmlns="">1.0</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<WindowType xmlns="">Slider</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>FormTabControl1</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>FormTabPageControl1</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>FormGridControl1</Name>
								<AllowEdit>No</AllowEdit>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormImageControl">
										<Name>Severity</Name>
										<Type>Image</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>getIcon</DataMethod>
										<DataSource>CreditCardPaymentBreakDownTmpStatusTable</DataSource>
										<Label>@SYS76264</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>PaymentStage</Name>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>PaymentStatus</DataField>
										<DataSource>CreditCardPaymentBreakDownTmpStatusTable</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>LastUpdateDateTime</Name>
										<Type>DateTime</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>StartTime</DataField>
										<DataSource>CreditCardPaymentBreakDownTmpStatusTable</DataSource>
										<Label>@CashManagement:CreditCardPaymentBreakDownInfologSliderLastUpdate</Label>
									</AxFormControl>
								</Controls>
								<DataSource>CreditCardPaymentBreakDownTmpStatusTable</DataSource>
								<MultiSelect>No</MultiSelect>
								<ShowRowLabels>No</ShowRowLabels>
							</AxFormControl>
						</Controls>
						<Caption>@CashManagement:CreditCardPaymentBreakDownInfologSliderPaymentProgress</Caption>
						<DataSource>CreditCardPaymentBreakDownTmpStatusTable</DataSource>
						<FastTabExpanded>Always</FastTabExpanded>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>FormTabPageControl2</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>FormGridControl2</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormImageControl">
										<Name>Type</Name>
										<Type>Image</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>getIcon</DataMethod>
										<DataSource>CreditCardPaymentBreakDownTmpLogTable</DataSource>
										<Label>@SYS26386</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Logs</Name>
										<AllowEdit>No</AllowEdit>
										<Type>String</Type>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Logs</DataField>
										<DataSource>CreditCardPaymentBreakDownTmpLogTable</DataSource>
										<MultiLine>Yes</MultiLine>
										<Text>@WAX3769</Text>
										<ViewEditMode>View</ViewEditMode>
									</AxFormControl>
								</Controls>
								<DataSource>CreditCardPaymentBreakDownTmpLogTable</DataSource>
								<MultiSelect>No</MultiSelect>
							</AxFormControl>
						</Controls>
						<Caption>@CashManagement:CreditCardPaymentBreakDownInfologSliderExecutionLogs</Caption>
						<DataSource>CreditCardPaymentBreakDownTmpLogTable</DataSource>
						<FastTabExpanded>Always</FastTabExpanded>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>FormButtonGroupControl1</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>Close</Name>
						<Type>Button</Type>
						<FormControlExtension
							i:nil="true" />
						<DefaultButton>Yes</DefaultButton>
						<Text>@SYS15212</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>FormButtonControl1</Name>
						<Type>Button</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>