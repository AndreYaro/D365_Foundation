<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>CustCollectionsAgingPart</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class CustCollectionsAgingPart extends FormRun
{
    FormRun caller;
    boolean callerHasSendEmailToContactWithStatementMethod;
    boolean callerHasParmAgingPeriodDefMethod;
    boolean callerHasParmCurrencyToShowMethod;
    boolean callerHasparmSelectedCompaniesMethod;

    container selectedCompanies;

    CurrencyCode currency;

    int agingBuckets;
    CustVendReportName selectedAgingPeriodDef;
    FormPartControl agingFactbox;

    QueryBuildRange agingPeriodRange;

    // PeriodTotal is an array in descending StatRepIntervalLine.LineNum order.
    // Each element of the array is a container with 4 members:
    // [StatRepIntervalLine.IntervalType, StatRepIntervalLine.Qty, sum(CustAgingLine.OpenBalanceMst), StatRepIntervalLine.AgingIndicator]
    Array periodTotal;
    Array agingLineIndicatorControls;
    Array agingLineAmountControls;

    CustLeftLabelFieldsHelper leftLabelHelper = new CustLeftLabelFieldsHelper();

}
]]></Source>
			</Method>
			<Method>
				<Name>displayAgingBuckets</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays aging snapshots for the current customer and a select aging period definition.
    /// </summary>
    public void displayAgingBuckets()
    {
        void setAgingIndicator(FormWindowControl _ctl, CustAgingIndicator _indicator)
        {
            _ctl.normalImage(StatRepIntervalLine::getResourceIdForAgingIndicator(_indicator));
            _ctl.helpText(enum2Str(_indicator));
        }

        if (agingFactbox)
        {
            agingFactbox.formCaption(strFmt("%1 - %2", "@SYS190116", custAging.displayAgingDate()));
        }

        sendStatementByEmail.enabled(custAging.AgingDate != dateNull());

        var bucketsUsed = this.adjustVisibleBuckets();

        AmountMST totalMst = 0;
        if (bucketsUsed > 0) // Optimization, skip if not needed
        {
            element.totalAgingByCompany();

            // Display the bucket age indicators and totals
            for (var i = 1; i <= bucketsUsed; i++)
            {
                CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), dateMax());
                AmountMST amountMST = currencyExchangeHelper.calculateAccountingToTransaction(currency, conPeek(periodTotal.value(i), 3), true);
                totalMst += amountMST;

                FormRealControl agingLineCtl = agingLineAmountControls.value(i);
                agingLineCtl.realValue(amountMST);

                setAgingIndicator(agingLineIndicatorControls.value(i), conPeek(periodTotal.value(i), 4));
            }
        }

        // Display the total of all buckets
        agingTotal_Value.realValue(totalMst);
        leftLabelHelper.getLabelControl(agingTotal_Value).text(strFmt("@SYS305171", currency));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSendStatementByEmailTransactionDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the transaction due date when sending the statement by email.
    /// </summary>
    /// <returns>
    ///     The transaction due date used for sending the statement by email.
    /// </returns>
    [Wrappable(true)]
    protected final DateTransactionDuedate getSendStatementByEmailTransactionDueDate()
    {
        return DateTransactionDuedate::DueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustVisibleBuckets</Name>
				<Source><![CDATA[
    protected int adjustVisibleBuckets()
    {
        periodTotal = new Array(Types::Container);
        var bucketsUsed = 0;
        StatRepIntervalLine statRepIntervalLine;

        while select Heading, IntervalType, Qty, AgingIndicator
            from statRepIntervalLine
            order by statRepIntervalLine.LineNum desc
            where statRepIntervalLine.Name == selectedAgingPeriodDef
        {
            bucketsUsed++;
            var agingLineAmountControl = agingLineAmountControls.value(bucketsUsed);
            leftLabelHelper.getFieldGroupControl(agingLineAmountControl).visible(true);
            leftLabelHelper.getLabelControl(agingLineAmountControl).text(statRepIntervalLine.Heading);
            periodTotal.value(bucketsUsed, [statRepIntervalLine.IntervalType, statRepIntervalLine.Qty, 0.0, statRepIntervalLine.AgingIndicator]);
        }

        // Hide unused aging buckets
        for (var i = bucketsUsed + 1; i <= agingBuckets; i++)
        {
            leftLabelHelper.getFieldGroupControl(agingLineIndicatorControls.value(i)).visible(false);
        }

        return bucketsUsed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        Object callerObj;
        agingBuckets = CustVendBalanceList::getMaximumAgingBuckets();

        // we modeled 6 aging buckets, so if this changes this will need to be updated.
        Debug::assert(agingBuckets == 6);

        super();

        agingLineAmountControls = new Array(Types::Class);
        agingLineAmountControls.value(1, custAgingLine1_Value);
        agingLineAmountControls.value(2, custAgingLine2_Value);
        agingLineAmountControls.value(3, custAgingLine3_Value);
        agingLineAmountControls.value(4, custAgingLine4_Value);
        agingLineAmountControls.value(5, custAgingLine5_Value);
        agingLineAmountControls.value(6, custAgingLine6_Value);

        agingLineIndicatorControls = new Array(Types::Class);
        agingLineIndicatorControls.value(1, custAgingLine1_Indicator);
        agingLineIndicatorControls.value(2, custAgingLine2_Indicator);
        agingLineIndicatorControls.value(3, custAgingLine3_Indicator);
        agingLineIndicatorControls.value(4, custAgingLine4_Indicator);
        agingLineIndicatorControls.value(5, custAgingLine5_Indicator);
        agingLineIndicatorControls.value(6, custAgingLine6_Indicator);

        leftLabelHelper.init(bucketGroup);

        caller = element.args().caller();

        if (caller)
        {
            callerHasParmAgingPeriodDefMethod = formHasMethod(caller, 'parmSelectedAgingPeriodDef');
            callerHasSendEmailToContactWithStatementMethod = formHasMethod(caller, 'sendEmailToContactWithStatement');
            callerHasParmCurrencyToShowMethod = formHasMethod(caller, 'parmCurrencyToShow');
            callerHasparmSelectedCompaniesMethod = formHasMethod(caller, 'parmSelectedCompanies');
            if (formHasMethod(caller, 'partByFormName'))
            {
                callerObj = caller;
                agingFactbox = callerObj.partByFormName(formStr(CustCollectionsAgingPart));
            }
        }

        currency = CompanyInfoHelper::standardCurrency();

        sendStatementByEmail.visible(callerHasSendEmailToContactWithStatementMethod);
        selectedAgingPeriodDef = CustCollectionsListPageHelper::getDefaultAgingPeriodByPool('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAgingByCompany</Name>
				<Source><![CDATA[
    public void totalAgingByCompany()
    {
        StatRepIntervalLine statRepIntervalLine;
        CustAgingLegalEntity custAgingLegalEntity;
        CustAgingLine custAgingLine;
        LineNum lastLineNum = maxInt();

        AmountMST openBalance;
        int currentPeriod = 1;

        while select LineNum
            from statRepIntervalLine
            order by statRepIntervalLine.LineNum desc, custAgingLegalEntity.SourceLegalEntity
            group by statRepIntervalLine.LineNum, custAgingLegalEntity.SourceLegalEntity
            where
                statRepIntervalLine.Name == custAging.StatRepInterval
            outer join SourceLegalEntity
                from custAgingLegalEntity
                where
                    custAgingLegalEntity.CustAging == custAging.RecId
            outer join sum(OpenBalanceMst)
                from custAgingLine
                where
                    custAgingLine.CustAgingLegalEntity == custAgingLegalEntity.RecId &&
                    custAgingLine.StatRepIntervalLineName == statRepIntervalLine.Name &&
                    custAgingLine.StatRepIntervalLineNum == statRepIntervalLine.LineNum
        {
            if (lastLineNum != statRepIntervalLine.LineNum)
            {
                if (lastLineNum != maxInt())
                {
                    periodTotal.value(currentPeriod, conPoke(periodTotal.value(currentPeriod), 3, openBalance));
                    currentPeriod++;
                }
                lastLineNum = statRepIntervalLine.LineNum;
                openBalance = 0;
            }

            if (!selectedCompanies ||
                (custAgingLegalEntity.SourceLegalEntity && conFind(selectedCompanies, CompanyInfo::findRecId(custAgingLegalEntity.SourceLegalEntity).DataArea)))
            {
                // include the company if *no* companies are selected or this company is selected
                openBalance += custAgingLine.OpenBalanceMst;
            }
        }

        if (lastLineNum != maxInt())
        {
            periodTotal.value(currentPeriod, conPoke(periodTotal.value(currentPeriod), 3, openBalance));
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>CustAging</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            agingPeriodRange = SysQuery::findOrCreateRange(custAging_q.dataSourceTable(tableNum(CustAging)), fieldNum(CustAging, StatRepInterval));
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            Object callerObj = caller;

            if (callerHasParmAgingPeriodDefMethod)
            {
                selectedAgingPeriodDef = callerObj.parmSelectedAgingPeriodDef();
            }

            if (callerHasParmCurrencyToShowMethod)
            {
                currency = callerObj.parmCurrencyToShow();
            }

            if (callerHasparmSelectedCompaniesMethod)
            {
                selectedCompanies = callerObj.parmSelectedCompanies();
            }

            agingPeriodRange.value(selectedAgingPeriodDef);

            super();

            element.displayAgingBuckets();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>SendStatementByEmail</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Object callerObj = caller;

            if (callerHasSendEmailToContactWithStatementMethod)
            {
                callerObj.sendEmailToContactWithStatement(element.getSendStatementByEmailTransactionDueDate(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), false, dateNull());
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>CustAging</Name>
			<Table>CustAging</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AgedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AgingDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AgingPeriod1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AgingPeriod2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AgingPeriod3</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AgingPeriod4</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AgingPeriod5</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AgingPeriod6</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FirstNonzeroBalancePeriod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StatRepInterval</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS190116</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<Scrollbars xmlns="">No</Scrollbars>
		<Style xmlns="">FormPart</Style>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Width xmlns="">0</Width>
		<WidthMode xmlns="">Column</WidthMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>BucketGroup</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>CustAgingLine1</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormImageControl">
								<Name>CustAgingLine1_Indicator</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ExtendedStyle>image_gridIcon</ExtendedStyle>
								<Type>Image</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS153518</Label>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>CustAgingLine1_Value</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>AmountMST</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>CustAgingLine2</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormImageControl">
								<Name>CustAgingLine2_Indicator</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ExtendedStyle>image_gridIcon</ExtendedStyle>
								<Type>Image</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS153518</Label>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>CustAgingLine2_Value</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>AmountMST</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>CustAgingLine3</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormImageControl">
								<Name>CustAgingLine3_Indicator</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ExtendedStyle>image_gridIcon</ExtendedStyle>
								<Type>Image</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS153518</Label>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>CustAgingLine3_Value</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>AmountMST</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>CustAgingLine4</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormImageControl">
								<Name>CustAgingLine4_Indicator</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ExtendedStyle>image_gridIcon</ExtendedStyle>
								<Type>Image</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS153518</Label>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>CustAgingLine4_Value</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>AmountMST</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>CustAgingLine5</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormImageControl">
								<Name>CustAgingLine5_Indicator</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ExtendedStyle>image_gridIcon</ExtendedStyle>
								<Type>Image</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS153518</Label>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>CustAgingLine5_Value</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>AmountMST</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>CustAgingLine6</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormImageControl">
								<Name>CustAgingLine6_Indicator</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ExtendedStyle>image_gridIcon</ExtendedStyle>
								<Type>Image</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS153518</Label>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>CustAgingLine6_Value</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>AmountMST</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>TotalDetails</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>AgingTotal_Blank</Name>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@ApplicationPlatform:SingleSpace</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>AgingTotal_Value</Name>
								<AlignControl>No</AlignControl>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<FormControlExtension
									i:nil="true" />
								<BackgroundColor>Highlight3D</BackgroundColor>
								<ExtendedDataType>AmountMST</ExtendedDataType>
								<Label>@SYS95</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<BackgroundColor>WindowBackground</BackgroundColor>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>MoreLinkGroup</Name>
				<Type>ButtonGroup</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>SendStatementByEmail</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@SYS135890</HelpText>
						<Type>Button</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Style>Link</Style>
						<Text>@AccountsReceivable:CollectionsSendStatementToContact</Text>
					</AxFormControl>
				</Controls>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>