<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailMediaAssociation</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class RetailMediaAssociation extends FormRun
{
    private str externalMediaBaseUrl = RetailChannelProfile::getRetailServerMediaBaseURL(RetailChannelProfileType::RetailServer);
    private str currentCompanyCode = curExt();
    private RefRecId catalogRecId;
    private RefRecId internalOrgRecId;
    private RetailMediaProductTemplate callerProductForm;
    private RetailMediaMasterEntity lastSelctedEntity;
    private str previousFilePath;
    private str previousFileName;
    private str previousFileExtension;
    private RetailMediaNumbers previousNumberOfProductImages;
    private RetailMediaNumbers previousProductDefaultImageIndex;
    private boolean hasImageURLClicked = true;
    private RetailMediaNumbers previousNumberOfSwatchImages;
    private RetailMediaNumbers previousSwatchDefaultImageIndex;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
        var selectedEntity = element.args().parmEnum();

        if (selectedEntity)
        {
            ComboEntityType.selection(selectedEntity);
            ComboEntityType.enabled(false);
            this.showHideControls(selectedEntity);
            this.populateFileTemplateControls(selectedEntity);
            lastSelctedEntity = selectedEntity;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showHideControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Show or hide controls based on the selected entity.
    /// </summary>
    /// <param name = "entity">The selected entity.</param>
    public void showHideControls(RetailMediaMasterEntity entity)
    {
        TabCustomer.visible(false);
        TabWorker.visible(false);
        TabCatalog.visible(false);
        TabCategory.visible(false);
        TabProduct.visible(false);
        TabCatalogProduct.visible(false);
        TabChannelProduct.visible(false);
        TabColor.visible(false);
        TabSize.visible(false);
        TabStyle.visible(false);

        if (entity == RetailMediaMasterEntity::Product)
        {
            GroupProductTemplateControls.visible(true);
            GroupProducts.visible(true);
            ComboBoxNumberOfImages.visible(true);
            ComboBoxDefaultImage.visible(true);
            ComboBoxNumberOfImages.selection(RetailMediaNumbers::Two);
            ComboBoxDefaultImage.selection(RetailMediaNumbers::One);
        }
        else
        {
            GroupProductTemplateControls.visible(false);
            GroupProducts.visible(false);
        }

        if (entity == RetailMediaMasterEntity::Customer)
        {
            ButtonCustomerExportToExcel.enabled(this.isExcelRecordGenerated());
            TabCustomer.visible(true);
        }
        else if (entity == RetailMediaMasterEntity::Worker)
        {
            ButtonWorkerExportToExcel.enabled(this.isExcelRecordGenerated());
            TabWorker.visible(true);
        }
        else if (entity == RetailMediaMasterEntity::Catalog)
        {
            ButtonCatalogExportToExcel.enabled(this.isExcelRecordGenerated());
            TabCatalog.visible(true);
        }
        else if (entity == RetailMediaMasterEntity::Category)
        {
            ButtonCategoryExportToExcel.enabled(this.isExcelRecordGenerated());
            TabCategory.visible(true);
        }
        else if (entity == RetailMediaMasterEntity::Product)
        {
            GroupProductTemplateControls.visible(true);
            GroupProducts.visible(true);
            ComboBoxNumberOfImages.visible(true);
            ComboBoxDefaultImage.visible(true);
            ComboBoxNumberOfImages.selection(RetailMediaNumbers::Two);
            ComboBoxDefaultImage.selection(RetailMediaNumbers::One);
            ButtonProductExportToExcel.enabled(this.isExcelRecordGenerated());
            TabProduct.visible(true);
        }
        else if (entity == RetailMediaMasterEntity::Color)
        {
            ButtonProductExportToExcel.enabled(this.isExcelRecordGenerated());
            TabColor.visible(true);
            GroupProducts.visible(true);
            ComboBoxNumberOfImages.visible(false);
            ComboBoxDefaultImage.visible(false);
            
        }
        else if (entity == RetailMediaMasterEntity::Size)
        {
            ButtonSizeExportToExcel.enabled(this.isExcelRecordGenerated());
            TabSize.visible(true);
            GroupProducts.visible(true);
            ComboBoxNumberOfImages.visible(false);
            ComboBoxDefaultImage.visible(false);
        }
        else if (entity == RetailMediaMasterEntity::Style)
        {
            ButtonStyleExportToExcel.enabled(this.isExcelRecordGenerated());
            TabStyle.visible(true);
            GroupProducts.visible(true);
            ComboBoxNumberOfImages.visible(false);
            ComboBoxDefaultImage.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFileTemplateControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the file template controls based on the Default attribute group value.
    /// </summary>
    /// <param name = "selectedEntity">Currently selected entity.</param>
    private void populateFileTemplateControls(int selectedEntity)
    {
        str templateImageUrl = RetailMediaTemplate::getPrimaryImageUrl(selectedEntity);
        container fileTemplate = RetailMediaHelper::getFileDetailsFromTetmplateUrl(templateImageUrl);

        str filePath = this.getFilePath(conPeek(fileTemplate, 1), selectedEntity);
        str fileName = this.getFileName(conPeek(fileTemplate, 2), selectedEntity);
        str fileExtenstion = conPeek(fileTemplate, 3);
        if (!fileExtenstion)
        {
            fileExtenstion = enum2Str(RetailMediaFileExtensionTypes::jpeg);
        }

        StrFilePath.text(filePath);
        previousFilePath = filePath;

        StrFileName.text(fileName);
        previousFileName = fileName;

        RetailMediaFileExtensionTypes extension;
        extension = str2Enum(extension, fileExtenstion);
        ComboFileExtension.selection(extension);
        previousFileExtension = fileExtenstion;

        if (selectedEntity == RetailMediaMasterEntity::Product)
        {
            RetailMediaTemplate retailMediaTemplate;
            select count(RecId) from retailMediaTemplate where retailMediaTemplate.MasterEntityType == RetailMediaMasterEntity::Product;

            int recCount = int642int(retailMediaTemplate.RecId);
            RetailMediaNumbers selectedNumberOfProducts = recCount;
            ComboBoxNumberOfImages.selection(selectedNumberOfProducts);

            RetailMediaNumbers defaultIndex = RetailMediaTemplate::getDefaultIndex(selectedEntity);
            ComboBoxDefaultImage.selection(defaultIndex);

            previousNumberOfProductImages = ComboBoxNumberOfImages.selection();
            previousProductDefaultImageIndex = ComboBoxDefaultImage.selection();
        }
        else if (selectedEntity == RetailMediaMasterEntity::Color)
        {
            if (filePath == '\\')
            {

                filePath = "Colors/";
                StrFilePath.text(filePath);
                previousFilePath = filePath;
            }
            
            RetailMediaTemplate retailMediaTemplate;
            select count(RecId) from retailMediaTemplate where retailMediaTemplate.MasterEntityType == RetailMediaMasterEntity::Color;

            int recCount = int642int(retailMediaTemplate.RecId);
            RetailMediaNumbers selectedNumberOfColors = recCount;
            ComboBoxNumberOfImages.selection(selectedNumberOfColors);

            RetailMediaNumbers defaultIndex = RetailMediaTemplate::getDefaultIndex(selectedEntity);
            ComboBoxDefaultImage.selection(defaultIndex);

            previousNumberOfSwatchImages = ComboBoxNumberOfImages.selection();
            previousSwatchDefaultImageIndex = ComboBoxDefaultImage.selection();
        }
        else if (selectedEntity == RetailMediaMasterEntity::Size)
        {
            if (filePath == '\\')
            {

                filePath = "Sizes/";
                StrFilePath.text(filePath);
                previousFilePath = filePath;
            }
            RetailMediaTemplate retailMediaTemplate;
            select count(RecId) from retailMediaTemplate where retailMediaTemplate.MasterEntityType == RetailMediaMasterEntity::Size;

            int recCount = int642int(retailMediaTemplate.RecId);
            RetailMediaNumbers selectedNumberOfSize = recCount;
            ComboBoxNumberOfImages.selection(selectedNumberOfSize);

            RetailMediaNumbers defaultIndex = RetailMediaTemplate::getDefaultIndex(selectedEntity);
            ComboBoxDefaultImage.selection(defaultIndex);

            previousNumberOfSwatchImages = ComboBoxNumberOfImages.selection();
            previousSwatchDefaultImageIndex = ComboBoxDefaultImage.selection();
        }
        else if (selectedEntity == RetailMediaMasterEntity::Style)
        {
            if (filePath == '\\')
            {

                filePath = "Style/";
                StrFilePath.text(filePath);
                previousFilePath = filePath;
            }
            RetailMediaTemplate retailMediaTemplate;
            select count(RecId) from retailMediaTemplate where retailMediaTemplate.MasterEntityType == RetailMediaMasterEntity::Style;

            int recCount = int642int(retailMediaTemplate.RecId);
            RetailMediaNumbers selectedNumberOfStyle = recCount;
            ComboBoxNumberOfImages.selection(selectedNumberOfStyle);

            RetailMediaNumbers defaultIndex = RetailMediaTemplate::getDefaultIndex(selectedEntity);
            ComboBoxDefaultImage.selection(defaultIndex);

            previousNumberOfSwatchImages = ComboBoxNumberOfImages.selection();
            previousSwatchDefaultImageIndex = ComboBoxDefaultImage.selection();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCatalogMediaTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the catalog media table.
    /// </summary>
    private void populateCatalogMediaTable()
    {
        str mediaFilePath = StrFilePath.text();
        str fileExtension = ComboFileExtension.getText(ComboFileExtension.selection());

        RetailMediaAssociationHelper::populateCatalogMediaTable(mediaFilePath, fileExtension);
        RetailTmpCatalogMedia_ds.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustomerMediaTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the customer media table.
    /// </summary>
    private void populateCustomerMediaTable()
    {
        str mediaFilePath = StrFilePath.text();
        str fileExtension = ComboFileExtension.getText(ComboFileExtension.selection());

        RetailMediaAssociationHelper::populateCustomerMediaTable(mediaFilePath, fileExtension);
        RetailTmpCustomerMedia_DS.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateWorkerMediaTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the worker media table.
    /// </summary>
    private void populateWorkerMediaTable()
    {
        str mediaFilePath = StrFilePath.text();
        str fileExtension = ComboFileExtension.getText(ComboFileExtension.selection());

        RetailMediaAssociationHelper::populateWorkerMediaTable(mediaFilePath, fileExtension);
        RetailTmpWorkerMedia_DS.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCategoryMediaTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the category media table.
    /// </summary>
    private void populateCategoryMediaTable()
    {
        str mediaFilePath = StrFilePath.text();
        str fileExtension = ComboFileExtension.getText(ComboFileExtension.selection());

        RetailMediaAssociationHelper::populateCategoryMediaTable(mediaFilePath, fileExtension);
        RetailTmpCategoryMedia_DS.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProductMediaTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the product media table.
    /// </summary>
    private void populateProductMediaTable()
    {
        str mediaFilePath = StrFilePath.text();
        str fileExtension = ComboFileExtension.getText(ComboFileExtension.selection());
        int numberOfImagesPerProduct = ComboBoxNumberOfImages.selection();
        RetailMediaAssociationHelper::populateProductMediaTable(mediaFilePath, fileExtension, numberOfImagesPerProduct);
        RetailTmpProductMedia_DS.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFilePath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retruns the path of the image file based on the currently selected entity.
    /// </summary>
    /// <param name = "filePath">The image file path as persisted in the attribute group value.</param>
    /// <param name = "selectedEntity">Currently selected entity.</param>
    /// <returns>The image file path.</returns>
    private str getFilePath(str filePath, RetailMediaMasterEntity selectedEntity)
    {
        if (selectedEntity == RetailMediaMasterEntity::Catalog)
        {
            if (!filePath)
            {
                filePath = RetailMediaHelper::CatalogImageFilePath;
            }
        }
        else if (selectedEntity == RetailMediaMasterEntity::Customer)
        {
            if (!filePath)
            {
                filePath = RetailMediaHelper::CustomerImageFilePath;
            }
        }
        else if (selectedEntity == RetailMediaMasterEntity::Category)
        {
            if (!filePath)
            {
                filePath = RetailMediaHelper::CategoryImageFilePath;
            }
        }
        else if (selectedEntity == RetailMediaMasterEntity::Worker)
        {
            if (!filePath)
            {
                filePath = RetailMediaHelper::WorkerImageFilePath;
            }
        }
        else if (selectedEntity == RetailMediaMasterEntity::Product)
        {
            if (!filePath)
            {
                filePath = RetailMediaHelper::ProductImageFilePath;
            }
        }
        else if (selectedEntity == RetailMediaMasterEntity::Color)
        {
            if (!filePath)
            {
                filePath = RetailMediaHelper::ColorImageFilePath;
            }
        }
        else if (selectedEntity == RetailMediaMasterEntity::Size)
        {
            if (!filePath)
            {
                filePath = RetailMediaHelper::SizeImageFilePath;
            }
        }
        else if (selectedEntity == RetailMediaMasterEntity::Style)
        {
            if (!filePath)
            {
                filePath = RetailMediaHelper::StyleImageFilePath;
            }
        }

        return filePath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retruns the name of the image file based on the currently selected entity.
    /// </summary>
    /// <param name = "fileName">The image file name token as persisted in the attribute group value.</param>
    /// <param name = "selectedEntity">Currently selected entity.</param>
    /// <returns>The image file name token.</returns>
    private str getFileName(str fileName, RetailMediaMasterEntity selectedEntity)
    {
        if (selectedEntity == RetailMediaMasterEntity::Catalog)
        {
            if (!fileName)
            {
                fileName = RetailMediaHelper::CatalogImageFileName;
            }
        }
        else if (selectedEntity == RetailMediaMasterEntity::Customer)
        {
            if (!fileName)
            {
                fileName = RetailMediaHelper::CustomerImageFileName;
            }
        }
        else if (selectedEntity == RetailMediaMasterEntity::Category)
        {
            if (!fileName)
            {
                fileName = RetailMediaHelper::CategoryImageFileName;
            }
        }
        else if (selectedEntity == RetailMediaMasterEntity::Worker)
        {
            if (!fileName)
            {
                fileName = RetailMediaHelper::WorkerImageFileName;
            }
        }
        else if (selectedEntity == RetailMediaMasterEntity::Product)
        {
            if (!fileName)
            {
                fileName = RetailMediaHelper::ProductImageFileName + RetailMediaHelper::ProductImageFileNameSuffix;
            }
        }
        else if (selectedEntity == RetailMediaMasterEntity::Color)
        {
            if (!fileName)
            {
                fileName = RetailMediaHelper::ColorImageFileName;
            }
        }
        else if (selectedEntity == RetailMediaMasterEntity::Size)
        {
            if (!fileName)
            {
                fileName = RetailMediaHelper::SizeImageFileName;
            }
        }
        else if (selectedEntity == RetailMediaMasterEntity::Style)
        {
            if (!fileName)
            {
                fileName = RetailMediaHelper::StyleImageFileName;
            }
        }

        return fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveTemplateValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the file template values as the Default Attribute values.
    /// </summary>
    /// <param name = "selectedEntity">Currently selected entity.</param>
    /// <returns>Whether or not saving the template succeeded.</returns>
    private boolean saveTemplateValues(RetailMediaMasterEntity selectedEntity)
    {
        boolean templateValueChanged = false;

        //if user accidently set the file path as empty then revert back to the previous value.
        if (StrFilePath.text() == '')
        {
            StrFilePath.text(previousFilePath);
        }

        if (strCmp(StrFilePath.text(), previousFilePath) != 0 ||
            strCmp(StrFileName.text(), previousFileName) != 0 ||
            ComboFileExtension.getText(ComboFileExtension.selection()) != previousFileExtension)
        {
            templateValueChanged = true;
        }

        if (!templateValueChanged && selectedEntity == RetailMediaMasterEntity::Product)
        {
            if ((previousNumberOfProductImages != ComboBoxNumberOfImages.selection()) ||
                (previousProductDefaultImageIndex != ComboBoxDefaultImage.selection()))
            {
                templateValueChanged = true;
            }
        }

        if (!templateValueChanged)
        {
            //User hasn't made any changes to File path, name, extension and number of images, hence we don't have to save anything.
            return true;
        }

        //Constructs the url from the file path, file name, and file extension. The file path has whitespace removed
        //from the ends and a frontslash added to the end if necessary.
        str filePath = Global::strLRTrim(StrFilePath.text());
        if (!strEndsWith(filePath, RetailMediaHelper::Forwardslash) && !strEndsWith(filePath, RetailMediaHelper::Backslash))
        {
            filePath = filePath + RetailMediaHelper::Forwardslash;
        }
        str fileName = StrFileName.text() + '.' + ComboFileExtension.getText(ComboFileExtension.selection());
        str filePathAndName =  filePath + fileName;
        int selectedDefaultIndex = 1;

        RetailRichMediaTmp richMediaTable;
        if (selectedEntity == RetailMediaMasterEntity::Product)
        {
            selectedDefaultIndex = ComboBoxDefaultImage.selection();
            for (int i = 1; i <= ComboBoxNumberOfImages.selection(); i++)
            {
                str mediaFileName = '{ProductNumber}_000';

                richMediaTable.clear();
                richMediaTable.initValue();

                str currentIndexValue = strRFix(int2Str(i), 3, '0'); //format the index value 1 as 001.
                mediaFileName = mediaFileName + RetailMediaHelper::ProductFileNameSeperator + currentIndexValue;
                mediaFileName = mediaFileName + '.' + ComboFileExtension.getText(ComboFileExtension.selection());;
                filePathAndName = filePath + mediaFileName;

                if (i == selectedDefaultIndex)
                {
                    richMediaTable.IsDefault = ZeroOrOne::One;
                }
                else
                {
                    richMediaTable.IsDefault = ZeroOrOne::Zero;
                }

                richMediaTable.Url = filePathAndName;
                richMediaTable.insert();
            }
        }
        else
        {
            richMediaTable.clear();
            richMediaTable.initValue();

            richMediaTable.Url = filePathAndName;
            richMediaTable.IsDefault = ZeroOrOne::One;
            richMediaTable.insert();
        }

        //Compares the length of the url before and after storing it into the media
        //table because it may get truncated due to the tables max string length.
        if (strlen(richMediaTable.Url) < strlen(filePathAndName))
        {
            error("@Retail:MediaPathToLong");
            return false;
        }

        //File path must be set again so that logic reading the value gets the processed path
        StrFilePath.text(filePath);

        ttsbegin;
        this.saveIntoMediaTemplateTable(richMediaTable, selectedEntity);
        ttscommit;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveIntoMediaTemplateTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persist the template information into the template table.
    /// </summary>
    /// <param name = "richMediaTable">RetailRichMediaTmp table records.</param>
    /// <param name = "masterEntity">Selected master entity.</param>
    private void saveIntoMediaTemplateTable(RetailRichMediaTmp richMediaTable, RetailMediaMasterEntity masterEntity)
    {
        int currentIndex = 1;
        RetailMediaTemplate retailMediaTemplate;

        //Remove the existing template.
        while select forupdate retailMediaTemplate where retailMediaTemplate.MasterEntityType == masterEntity
        {
            retailMediaTemplate.delete();
        }

        //Create the template records, create as many records as set as 'number of images'.
        while select * from richMediaTable
        {
            retailMediaTemplate.clear();
            retailMediaTemplate.initValue();

            retailMediaTemplate.MasterEntityType = masterEntity;
            retailMediaTemplate.ImageIndex = currentIndex;
            retailMediaTemplate.ImageUrl = richMediaTable.Url;

            if (richMediaTable.IsDefault == ZeroOrOne::One)
            {
                retailMediaTemplate.IsDefault = NoYes::Yes;
            }
            else
            {
                retailMediaTemplate.IsDefault = NoYes::No;
            }

            retailMediaTemplate.insert();
            currentIndex++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PopulateEntityTableByMediaTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the media entity table based on the media template choosen.
    /// </summary>
    private void PopulateEntityTableByMediaTemplate()
    {
        hasImageURLClicked = true;
        str filePathnew = StrFilePath.text();
        int selectedValue = ComboEntityType.selection();
        if (!this.saveTemplateValues(selectedValue))
        {
            return;
        }

        if (selectedValue == RetailMediaMasterEntity::Catalog)
        {
            this.populateCatalogMediaTable();
            ButtonCatalogExportToExcel.enabled(this.isExcelRecordGenerated());
        }
        else if (selectedValue == RetailMediaMasterEntity::Worker)
        {
            this.populateWorkerMediaTable();
            ButtonWorkerExportToExcel.enabled(this.isExcelRecordGenerated());
        }
        else if (selectedValue == RetailMediaMasterEntity::Customer)
        {
            this.populateCustomerMediaTable();
            ButtonCustomerExportToExcel.enabled(this.isExcelRecordGenerated());
        }
        else if (selectedValue == RetailMediaMasterEntity::Category)
        {
            this.populateCategoryMediaTable();
            ButtonCategoryExportToExcel.enabled(this.isExcelRecordGenerated());
        }
        else if (selectedValue == RetailMediaMasterEntity::Product)
        {
            this.populateProductMediaTable();
            ButtonProductExportToExcel.enabled(this.isExcelRecordGenerated());
        }
        else if (selectedValue == RetailMediaMasterEntity::Color)
        {
            this.populateColorMediaTable();
            ButtonProductExportToExcel.enabled(this.isExcelRecordGenerated());
        }
        else if (selectedValue == RetailMediaMasterEntity::Size)
        {
            this.populateSizeMediaTable();
            ButtonProductExportToExcel.enabled(this.isExcelRecordGenerated());
        }
        else if (selectedValue == RetailMediaMasterEntity::Style)
        {
            this.populateStyleMediaTable();
            ButtonProductExportToExcel.enabled(this.isExcelRecordGenerated());
        }

        str filePath = StrFilePath.text(); 

        if (!strEndsWith(filePathnew, RetailMediaHelper::Forwardslash) && (strEndsWith(filePath, RetailMediaHelper::Forwardslash) || strEndsWith(filePath, RetailMediaHelper::Backslash)))
        {
            filePath = strDel(filePath, strLen(filePath), 1);
            StrFilePath.text(filePath);
        }

        StrFilePath.text(filePathnew);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExcelRecordGenerated</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine validates whether the temp table which will feed data into the Excel has already populated.
    /// </summary>
    /// <returns>true if the temp table is already populated; otherwise, false.</returns>
    private boolean isExcelRecordGenerated()
    {
        int selectedValue = ComboEntityType.selection();
        boolean recordGenerated = false;

        Switch(selectedValue)
        {
            case RetailMediaMasterEntity::Catalog:
                RetailTmpCatalogMedia catalogMedia;
                select firstonly catalogMedia;
                if (catalogMedia)
                {
                    recordGenerated = true;
                }
                break;

            case RetailMediaMasterEntity::Worker:
                RetailTmpWorkerMedia workerMedia;
                select firstonly workerMedia;
                if (workerMedia)
                {
                    recordGenerated = true;
                }
                break;

            case RetailMediaMasterEntity::Customer:
                RetailTmpCustomerMedia customerMedia;
                select firstonly customerMedia;
                if (customerMedia)
                {
                    recordGenerated = true;
                }
                break;

            case RetailMediaMasterEntity::Category:
                RetailTmpCategoryMedia categoryMedia;
                select firstonly categoryMedia;
                if (categoryMedia)
                {
                    recordGenerated = true;
                }
                break;

            case RetailMediaMasterEntity::Product:
                RetailTmpProductMedia productMedia;
                select firstonly productMedia;
                if (productMedia)
                {
                    recordGenerated = true;
                }
                break;
            case RetailMediaMasterEntity::Color:
                RetailTmpColorMedia colorMedia;
                select firstonly colorMedia;
                if (colorMedia)
                {
                    recordGenerated = true;
                }
                break;

            case RetailMediaMasterEntity::Size:
                RetailTmpSizeMedia sizeMedia;
                select firstonly sizeMedia;
                if (sizeMedia)
                {
                    recordGenerated = true;
                }
                break;

            case RetailMediaMasterEntity::Style:
                RetailTmpStyleMedia styleMedia;
                select firstonly styleMedia;
                if (styleMedia)
                {
                    recordGenerated = true;
                }
                break;

            default:
                break;
        }

        return recordGenerated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDefaultImageIndexSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the selected default image index.
    /// </summary>
    private void validateDefaultImageIndexSelection()
    {
        int numberOfImagesPerProduct = ComboBoxNumberOfImages.selection();
        int selectedDefaultIndex = ComboBoxDefaultImage.selection();
        if (selectedDefaultIndex > numberOfImagesPerProduct)
        {
            ComboBoxDefaultImage.selectText(int2Str(previousProductDefaultImageIndex));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportToExcel</Name>
				<Source><![CDATA[
    private void exportToExcel()
    {
        if (!hasImageURLClicked)
        {
            info::addMessage(Exception::Error, "@RetailMediaGalleryLabels:EditInExcelWarning");
            return;
        }

        if (!element.isExcelRecordGenerated())
        {
            info::addMessage(Exception::Error, "@RetailMediaGalleryLabels:EditInExcelRecordCountWarning");
            return;
        }

        str templateName;
        int selectedValue = ComboEntityType.selection();
        Map filtersToApply;

        if (selectedValue == RetailMediaMasterEntity::Catalog)
        {
            templateName = resourcestr(RetailCatalogMediaTemplate);
        }
        else if (selectedValue == RetailMediaMasterEntity::Customer)
        {
            templateName = resourcestr(RetailCustomerMediaTemplate);

            // for customer we need to apply the current company code as filter.
            filtersToApply = new Map(Types::String, Types::Class);
            ExportToExcelFilterTreeBuilder exportToExcelFilterBuilder = new ExportToExcelFilterTreeBuilder(tableStr(RETAILTMPCUSTOMERMEDIAENTITY));
            var filter = exportToExcelFilterBuilder.areEqual(fieldStr(RETAILTMPCUSTOMERMEDIAENTITY, CompanyCode), currentCompanyCode);
            filtersToApply.insert(tablestr(RETAILTMPCUSTOMERMEDIAENTITY), filter);
        }
        else if (selectedValue == RetailMediaMasterEntity::Worker)
        {
            templateName = resourcestr(RetailWorkerMediaTemplate);
        }
        else if (selectedValue == RetailMediaMasterEntity::Category)
        {
            templateName = resourcestr(RetailCategoryMediaTemplate);
        }
        else if (selectedValue == RetailMediaMasterEntity::Product)
        {
            templateName = resourcestr(RetailProductMediaTemplate);
        }

        //The below codebase commented as this feature was developed however we will hide it for now and we will uncomment as part of the Deliverable/Task #3687509.
        //    if (callerProductForm == RetailMediaProductTemplate::CatalogProductTemplate)
        //    {
        //        templateName = resourcestr(RetailCatalogProductMediaTemplate);
        //    }
        //    else if (callerProductForm == RetailMediaProductTemplate::ChannelProductTemplate)
        //    {
        //        templateName = resourcestr(RetailStoreProductMediaTemplate);
        //    }
        //    else
        //    {
        //        templateName = resourcestr(RetailProductMediaTemplate);
        //    }
        //}

        if (templateName)
        {
            RetailUtilities::openInExcel(templateName, filtersToApply);
        }
        else
        {
            error("@RetailMediaGalleryLabels:InvokingMediaExcelWithoutSelectingEntity");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateColorMediaTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the color media table.
    /// </summary>
    private void populateColorMediaTable()
    {
        str mediaFilePath = StrFilePath.text();
        str fileExtension = ComboFileExtension.getText(ComboFileExtension.selection());
        int numberOfImagesPerProduct = ComboBoxNumberOfImages.selection();
        RetailMediaAssociationHelper::populateColorMediaTable(mediaFilePath, fileExtension, numberOfImagesPerProduct);
        RetailTmpColorMedia_DS.research(true);
        element.updateColorMedia();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateColorMedia</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update Color media table.
    /// </summary>
    public void updateColorMedia()
    {
        RetailTmpColorMedia colorMedia;
        EcoResColor  ecoResColor;
        RetailColorGroupTrans colorGroupTrans;

        ttsbegin;
        while select colorMedia
        {
            ecoResColor = EcoResColor::findByName(colorMedia.Color, true);
            ecoResColor.Url = colorMedia.MediaUrl;
            ecoResColor.update();

            update_recordset colorGroupTrans
                setting Url = colorMedia.MediaUrl
                where colorGroupTrans.color == colorMedia.Color;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSizeMediaTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the size media table.
    /// </summary>
    private void populateSizeMediaTable()
    {
        str mediaFilePath = StrFilePath.text();
        str fileExtension = ComboFileExtension.getText(ComboFileExtension.selection());
        int numberOfImagesPerProduct = ComboBoxNumberOfImages.selection();
        RetailMediaAssociationHelper::populateSizeMediaTable(mediaFilePath, fileExtension, numberOfImagesPerProduct);
        RetailTmpSizeMedia_DS.research(true);
        element.updateSizeMedia();

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSizeMedia</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the size media table.
    /// </summary>
    public void updateSizeMedia()
    {
        RetailTmpSizeMedia sizeMedia;
        EcoResSize  ecoResSize;
        RetailSizeGroupTrans sizeGroupTrans;

        ttsbegin;
        while select sizeMedia
        {
            ecoResSize = EcoResSize::findByName(sizeMedia.Size, true);
            ecoResSize.Url = sizeMedia.MediaUrl;
            ecoResSize.update();

            update_recordset sizeGroupTrans
                setting Url = sizeMedia.MediaUrl
                where sizeGroupTrans.size == sizeMedia.size;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateStyleMediaTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the style media table.
    /// </summary>
    private void populateStyleMediaTable()
    {
        str mediaFilePath = StrFilePath.text();
        str fileExtension = ComboFileExtension.getText(ComboFileExtension.selection());
        int numberOfImagesPerProduct = ComboBoxNumberOfImages.selection();
        RetailMediaAssociationHelper::populateStyleMediaTable(mediaFilePath, fileExtension, numberOfImagesPerProduct);
        RetailTmpStyleMedia_ds.research(true);
        element.updateStyleMedia();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStyleMedia</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the size media table.
    /// </summary>
    public void updateStyleMedia()
    {
        RetailTmpStyleMedia styleMedia;
        EcoResStyle  ecoResStyle;
        RetailStyleGroupTrans styleGroupTrans;

        ttsbegin;
        while select styleMedia
        {
            ecoResStyle = EcoResStyle::findByName(styleMedia.Style, true);
            ecoResStyle.Url = styleMedia.MediaUrl;
            ecoResStyle.update();

            update_recordset styleGroupTrans
                setting Url = styleMedia.MediaUrl
                where styleGroupTrans.style == styleMedia.Style;
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>RetailTmpCatalogProductMedia</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            retailTmpCatalogProductMedia_ds.query().dataSourceTable(tableNum(RetailTmpCatalogProductMedia)).clearRange(fieldNum(RetailTmpCatalogProductMedia, Catalog));
            retailTmpCatalogProductMedia_ds.query().dataSourceTable(tableNum(RetailTmpCatalogProductMedia)).addRange(fieldNum(RetailTmpCatalogProductMedia, Catalog)).value(queryValue(catalogRecId));
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>RetailTmpChannelProductMedia</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            var internalOrgId = RetailInternalOrganization::find(internalOrgRecId).InternalOrganization;
            retailTmpChannelProductMedia_ds.query().dataSourceTable(tableNum(RetailTmpChannelProductMedia)).clearRange(fieldNum(RetailTmpChannelProductMedia, InternalOrganization));
            retailTmpChannelProductMedia_ds.query().dataSourceTable(tableNum(RetailTmpChannelProductMedia)).addRange(fieldNum(RetailTmpChannelProductMedia, InternalOrganization)).value(queryValue(internalOrgId));

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>ComboEntityType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        /// <summary>
        /// The user has selected a new entity.
        /// </summary>
        /// <returns></returns>
        public int selectionChange()
        {
            int ret;
            ret = super();

            //Reset the image url clicked since the user has selected a new entity type.
            hasImageURLClicked = true;

            //Save the template changes made by user for the previous entity.
            if (element.saveTemplateValues(lastSelctedEntity))
            {
                int selectedValue = ComboEntityType.selection();
                lastSelctedEntity = selectedValue;
                element.showHideControls(selectedValue);
                element.populateFileTemplateControls(selectedValue);
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ComboBoxNumberOfImages</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        public int selectionChange()
        {
            int ret;
            ret = super();

            hasImageURLClicked = false;
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ComboBoxDefaultImage</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        public int selectionChange()
        {
            int ret;
            ret = super();

            hasImageURLClicked = false;
            element.validateDefaultImageIndexSelection();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ComboBoxProductTemplate</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        public int selectionChange()
        {
            int ret;

            ret = super();
            hasImageURLClicked = false;

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>StrFilePath</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            hasImageURLClicked = false;

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>StrFileName</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            hasImageURLClicked = false;

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ComboFileExtension</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        public int selectionChange()
        {
            int ret;

            ret = super();
            hasImageURLClicked = false;

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonCustomerPreview</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.PopulateEntityTableByMediaTemplate();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonCustomerExportToExcel</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.exportToExcel();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonWorkerPreview</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.PopulateEntityTableByMediaTemplate();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonWorkerExportToExcel</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.exportToExcel();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonCatalogPreview</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.PopulateEntityTableByMediaTemplate();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonCatalogExportToExcel</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.exportToExcel();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonCategoryPreview</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.PopulateEntityTableByMediaTemplate();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonCategoryExportToExcel</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.exportToExcel();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonProductPreview</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.PopulateEntityTableByMediaTemplate();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonProductExportToExcel</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.exportToExcel();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonCatalogProductPreview</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.PopulateEntityTableByMediaTemplate();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonChannelProductPreview</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.PopulateEntityTableByMediaTemplate();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonColorPreview</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.PopulateEntityTableByMediaTemplate();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonColorExportToExcel</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.exportToExcel();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonSizePreview</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.PopulateEntityTableByMediaTemplate();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonSizeExportToExcel</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.exportToExcel();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonStylePreview</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.PopulateEntityTableByMediaTemplate();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonStyleExportToExcel</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.exportToExcel();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CommandButtonOkay</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            // save changes
            if (element.saveTemplateValues(lastSelctedEntity))
            {
                element.close();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>RetailTmpCatalogMedia</Name>
			<Table>RetailTmpCatalogMedia</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Catalog</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CatalogName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaFileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaUrl</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>RetailTmpCategoryMedia</Name>
			<Table>RetailTmpCategoryMedia</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CategoryHierarchy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CategoryName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaFileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaUrl</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>RetailTmpCustomerMedia</Name>
			<Table>RetailTmpCustomerMedia</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Customer</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustomerName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaFileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaUrl</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>RetailTmpWorkerMedia</Name>
			<Table>RetailTmpWorkerMedia</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaFileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaUrl</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Worker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkerName</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>RetailTmpProductMedia</Name>
			<Table>RetailTmpProductMedia</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaFileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaUrl</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Product</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>RetailMediaAssociation</Name>
			<Table>RetailMediaAssociation</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Entity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileExtension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaFileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaFilePath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>RetailTmpCatalogProductMedia</Name>
			<Table>RetailTmpCatalogProductMedia</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AssociatedOn</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssociationError</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssociationStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Catalog</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaFileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaIndex</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaUrl</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Product</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>RetailTmpChannelProductMedia</Name>
			<Table>RetailTmpChannelProductMedia</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AssociatedOn</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssociationError</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssociationStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InternalOrganization</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaFileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaIndex</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaUrl</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Product</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>RetailRichMediaTmp</Name>
			<Table>RetailRichMediaTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AltText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ImageId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsDefault</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Url</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>RetailTmpStyleMedia</Name>
			<Table>RetailTmpStyleMedia</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AssociatedOn</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssociationError</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssociationStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaFileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaIndex</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaUrl</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Style</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCheck>No</AllowCheck>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>RetailTmpSizeMedia</Name>
			<Table>RetailTmpSizeMedia</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AssociatedOn</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssociationError</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssociationStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaFileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaIndex</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaUrl</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Size</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCheck>No</AllowCheck>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>RetailTmpColorMedia</Name>
			<Table>RetailTmpColorMedia</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AssociatedOn</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssociationError</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssociationStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Color</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaFileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaIndex</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediaUrl</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCheck>No</AllowCheck>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@RetailMediaGalleryLabels:DefineMediaTemplate</Caption>
		<DialogSize xmlns="">Large</DialogSize>
		<Pattern xmlns="">DialogFastTabs</Pattern>
		<PatternVersion xmlns="">1.0</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>GroupHeader</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>ComboEntityType</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<EnumType>RetailMediaMasterEntity</EnumType>
						<Label>@RetailMediaGalleryLabels:Entity</Label>
						<Selection>-1</Selection>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>GroupProducts</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>ComboBoxNumberOfImages</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ComboBox</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<EnumType>RetailMediaNumbers</EnumType>
								<Label>@RetailMediaGalleryLabels:ProductImages</Label>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>ComboBoxDefaultImage</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ComboBox</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<EnumType>RetailMediaNumbers</EnumType>
								<Label>@RetailMediaGalleryLabels:IsDefault</Label>
								<Items />
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Caption>@RetailMediaGalleryLabels:TemplateDetails</Caption>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>GroupDummyForSpacing</Name>
				<Pattern>FillText</Pattern>
				<PatternVersion>UX7 1.0</PatternVersion>
				<Type>Group</Type>
				<Visible>No</Visible>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStaticTextControl">
						<Name>DummyStaticTextForSpacing</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>StaticText</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Text>       </Text>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>FormTab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabGeneral</Name>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>GroupProductTemplateControls</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Group</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ComboBoxProductTemplate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<EnumType>RetailMediaProductTemplate</EnumType>
										<Label>Define the template for </Label>
										<Selection>-1</Selection>
										<Items />
									</AxFormControl>
								</Controls>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>GroupControlFileTemplate</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>StrFilePath</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@RetailMediaGalleryLabels:FilePath</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>StrFileName</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DisplayLength>50</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
										<Label>@RetailMediaGalleryLabels:FileName</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ComboFileExtension</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<EnumType>RetailMediaFileExtensionTypes</EnumType>
										<Label>@RetailMediaGalleryLabels:FileExtension</Label>
										<Selection>2</Selection>
										<Items />
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@RetailMediaGalleryLabels:MediaTemplate</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabPageForSpace</Name>
						<Pattern>FillText</Pattern>
						<PatternVersion>UX7 1.0</PatternVersion>
						<Type>TabPage</Type>
						<Visible>No</Visible>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>DummyTextForSpacing</Name>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>StaticText</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Text>       </Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabCustomer</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPaneCustomer</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>ButtonGroupCustomer</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>ButtonCustomerPreview</Name>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<NormalImage>Generate</NormalImage>
												<Text>@RetailMediaGalleryLabels:GeneratePreview</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>ButtonCustomerExportToExcel</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<NormalImage>MicrosoftOffice</NormalImage>
												<Text>@RetailMediaGalleryLabels:EditInExcel</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>GridCustomerMediaDetails</Name>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpCustomerMedia_Customer</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Customer</DataField>
										<DataSource>RetailTmpCustomerMedia</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpCustomerMedia_CustomerName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>CustomerName</DataField>
										<DataSource>RetailTmpCustomerMedia</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpCustomerMedia_MediaFileName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>MediaFileName</DataField>
										<DataSource>RetailTmpCustomerMedia</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpCustomerMedia_MediaUrl</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>MediaUrl</DataField>
										<DataSource>RetailTmpCustomerMedia</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>RetailTmpCustomerMedia</DataSource>
								<Style>Tabular</Style>
							</AxFormControl>
						</Controls>
						<Caption>@RetailMediaGalleryLabels:TemplatePreview</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabWorker</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPaneWorker</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>ButtonGroupWorker</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>ButtonWorkerPreview</Name>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<NormalImage>Generate</NormalImage>
												<Text>@RetailMediaGalleryLabels:GeneratePreview</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>ButtonWorkerExportToExcel</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<NormalImage>MicrosoftOffice</NormalImage>
												<Text>@RetailMediaGalleryLabels:EditInExcel</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>GridWorkerMediaDetails</Name>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpWorkerMedia_Worker</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Worker</DataField>
										<DataSource>RetailTmpWorkerMedia</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpWorkerMedia_WorkerName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>WorkerName</DataField>
										<DataSource>RetailTmpWorkerMedia</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpWorkerMedia_MediaFileName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>MediaFileName</DataField>
										<DataSource>RetailTmpWorkerMedia</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpWorkerMedia_MediaUrl</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>MediaUrl</DataField>
										<DataSource>RetailTmpWorkerMedia</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>RetailTmpWorkerMedia</DataSource>
								<Style>Tabular</Style>
							</AxFormControl>
						</Controls>
						<Caption>@RetailMediaGalleryLabels:TemplatePreview</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabCatalog</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPaneCatalog</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>ButtonGroupCatalog</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>ButtonCatalogPreview</Name>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<NormalImage>Generate</NormalImage>
												<Text>@RetailMediaGalleryLabels:GeneratePreview</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>ButtonCatalogExportToExcel</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<NormalImage>MicrosoftOffice</NormalImage>
												<Text>@RetailMediaGalleryLabels:EditInExcel</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>GridCatalogMediaDetails</Name>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpCatalogMedia_CatalogName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>CatalogName</DataField>
										<DataSource>RetailTmpCatalogMedia</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpCatalogMedia_MediaFileName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>MediaFileName</DataField>
										<DataSource>RetailTmpCatalogMedia</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpCatalogMedia_MediaUrl</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>MediaUrl</DataField>
										<DataSource>RetailTmpCatalogMedia</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>RetailTmpCatalogMedia</DataSource>
								<Style>Tabular</Style>
							</AxFormControl>
						</Controls>
						<Caption>@RetailMediaGalleryLabels:TemplatePreview</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabCategory</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPaneCategory</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>ButtonGroupCategory</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>ButtonCategoryPreview</Name>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<NormalImage>Generate</NormalImage>
												<Text>@RetailMediaGalleryLabels:GeneratePreview</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>ButtonCategoryExportToExcel</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<NormalImage>MicrosoftOffice</NormalImage>
												<Text>@RetailMediaGalleryLabels:EditInExcel</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>GridCategoryMediaDetails</Name>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpCategoryMedia_CategoryName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>CategoryName</DataField>
										<DataSource>RetailTmpCategoryMedia</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpCategoryMedia_MediaFileName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>MediaFileName</DataField>
										<DataSource>RetailTmpCategoryMedia</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpCategoryMedia_MediaUrl</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>MediaUrl</DataField>
										<DataSource>RetailTmpCategoryMedia</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>RetailTmpCategoryMedia</DataSource>
								<Style>Tabular</Style>
							</AxFormControl>
						</Controls>
						<Caption>@RetailMediaGalleryLabels:TemplatePreview</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabProduct</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPaneProduct</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>ButtonGroupProduct</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>ButtonProductPreview</Name>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<NormalImage>Generate</NormalImage>
												<Text>@RetailMediaGalleryLabels:GeneratePreview</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>ButtonProductExportToExcel</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<NormalImage>MicrosoftOffice</NormalImage>
												<Text>@RetailMediaGalleryLabels:EditInExcel</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>GridProductMediaDetails</Name>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpProductMedia_Product</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Product</DataField>
										<DataSource>RetailTmpProductMedia</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpProductMedia_MediaFileName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>MediaFileName</DataField>
										<DataSource>RetailTmpProductMedia</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpProductMedia_MediaUrl</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>MediaUrl</DataField>
										<DataSource>RetailTmpProductMedia</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>RetailTmpProductMedia</DataSource>
								<Style>Tabular</Style>
							</AxFormControl>
						</Controls>
						<Caption>@RetailMediaGalleryLabels:TemplatePreview</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabCatalogProduct</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPaneCatalogProduct</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>ButtonGroupCatalogProduct</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>ButtonCatalogProductPreview</Name>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<NormalImage>Generate</NormalImage>
												<Text>@RetailMediaGalleryLabels:GeneratePreview</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>GridCatalogProductMediaDetails</Name>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpCatalogProductMedia_Product</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Product</DataField>
										<DataSource>RetailTmpCatalogProductMedia</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpCatalogProductMedia_MediaFileName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>MediaFileName</DataField>
										<DataSource>RetailTmpCatalogProductMedia</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpCatalogProductMedia_MediaUrl</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>MediaUrl</DataField>
										<DataSource>RetailTmpCatalogProductMedia</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>RetailTmpCatalogProductMedia</DataSource>
								<Style>Tabular</Style>
							</AxFormControl>
						</Controls>
						<Caption>@RetailMediaGalleryLabels:TemplatePreview</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabChannelProduct</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPaneChannelProduct</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>ButtonGroupChannelProduct</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>ButtonChannelProductPreview</Name>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<NormalImage>Generate</NormalImage>
												<Text>@RetailMediaGalleryLabels:GeneratePreview</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>GridChannelProductMediaDetails</Name>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpChannelProductMedia_Product</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Product</DataField>
										<DataSource>RetailTmpChannelProductMedia</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpChannelProductMedia_MediaFileName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>MediaFileName</DataField>
										<DataSource>RetailTmpChannelProductMedia</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpChannelProductMedia_MediaUrl</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>MediaUrl</DataField>
										<DataSource>RetailTmpChannelProductMedia</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>RetailTmpChannelProductMedia</DataSource>
								<Style>Tabular</Style>
							</AxFormControl>
						</Controls>
						<Caption>@RetailMediaGalleryLabels:TemplatePreview</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabColor</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPaneColor</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>ButtonGroupColor</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>ButtonColorPreview</Name>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<NormalImage>Generate</NormalImage>
												<Text>@RetailMediaGalleryLabels:GeneratePreview</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>ButtonColorExportToExcel</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>CommandButton</Type>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<NormalImage>MicrosoftOffice</NormalImage>
												<Text>@RetailMediaGalleryLabels:EditInExcel</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>GridColorMediaDetails</Name>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpColorMedia_Color</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Color</DataField>
										<DataSource>RetailTmpColorMedia</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpColorMedia_MediaFileName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>MediaFileName</DataField>
										<DataSource>RetailTmpColorMedia</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpColorMedia_MediaUrl</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>MediaUrl</DataField>
										<DataSource>RetailTmpColorMedia</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>RetailTmpColorMedia</DataSource>
								<Style>Tabular</Style>
							</AxFormControl>
						</Controls>
						<Caption>@RetailMediaGalleryLabels:TemplatePreview</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabSize</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPaneSize</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>ButtonGroupSize</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>ButtonSizePreview</Name>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<NormalImage>Generate</NormalImage>
												<Text>@RetailMediaGalleryLabels:GeneratePreview</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>ButtonSizeExportToExcel</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>CommandButton</Type>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<NormalImage>MicrosoftOffice</NormalImage>
												<Text>@RetailMediaGalleryLabels:EditInExcel</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>GridSizeMediaDetails</Name>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpSizeMedia_Size</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Size</DataField>
										<DataSource>RetailTmpSizeMedia</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpSizeMedia_MediaFileName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>MediaFileName</DataField>
										<DataSource>RetailTmpSizeMedia</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpSizeMedia_MediaUrl</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>MediaUrl</DataField>
										<DataSource>RetailTmpSizeMedia</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>RetailTmpSizeMedia</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@RetailMediaGalleryLabels:TemplatePreview</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabStyle</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPaneStyle</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>ButtonGroupStyle</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>ButtonStylePreview</Name>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<NormalImage>Generate</NormalImage>
												<Text>@RetailMediaGalleryLabels:GeneratePreview</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>ButtonStyleExportToExcel</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>CommandButton</Type>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<NormalImage>MicrosoftOffice</NormalImage>
												<Text>@RetailMediaGalleryLabels:EditInExcel</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>GridStyleMediaDetails</Name>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpStyleMedia_Style</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Style</DataField>
										<DataSource>RetailTmpStyleMedia</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpStyleMedia_MediaFileName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>MediaFileName</DataField>
										<DataSource>RetailTmpStyleMedia</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailTmpStyleMedia_MediaUrl</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>MediaUrl</DataField>
										<DataSource>RetailTmpStyleMedia</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>RetailTmpStyleMedia</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@RetailMediaGalleryLabels:TemplatePreview</Caption>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormMenuFunctionButtonControl">
						<Name>ButtonPublishTemplate</Name>
						<Type>MenuFunctionButton</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<MenuItemName>RetailMediaAssociation</MenuItemName>
						<MenuItemType>Action</MenuItemType>
						<Text>@RetailMediaGalleryLabels:PublishTemplate</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CommandButtonOkay</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
						<Text>@RetailMediaGalleryLabels:Close</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>