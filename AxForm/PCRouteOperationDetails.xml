<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>PCRouteOperationDetails</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class PCRouteOperationDetails extends FormRun
{
    PCClass             component;
    PCTemplateComponent templateComponent;
    DataAreaId          currentCompany;

    PCTemplateFind  templateFind;

}
]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    public boolean canClose()
    {
        boolean ret;

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        element.writeAllocations();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateFieldReferenceTemplateAttribute</Name>
				<Source><![CDATA[
    private PCTemplateAttribute findOrCreateFieldReferenceTemplateAttribute(TableId _tableId, FieldId _fieldId)
    {
        PCTemplateAttribute fieldReference;
        
        fieldReference = templateFind.findOrCreateTemplateAttributeByTableIdAndFieldId(_tableId, _fieldId);

        return fieldReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        boolean allowEdit;

        Args args = element.args();
        if ((args == null) || (args.record() == null) || !args.caller())
        {
            throw error(Error::missingRecord(funcName()));
        }

        // The form does not support dyna linking, so we make sure the buffer is not updated by caller
        templateComponent = args.record().data();
        args.record(templateComponent);

        currentCompany = templateComponent.dataArea();

        if (templateComponent.Requirement != PCRequirement::ActivityRequirement)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        super();

        allowEdit = SecurityRights::construct().menuItemAccessRight(
            SecurableType::MenuItemDisplay,
            menuitemDisplayStr(PCRouteOperationDetails)) > AccessRight::View;

        OperationGroup.allowEdit(allowEdit);
        Tab.allowEdit(allowEdit);

        templateFind = PCTemplateFind::construct();

        component = PCClass::find(templateComponent.ComponentClass);
        element.loadAllocations();
        element.loadActivityBinding();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initActivityDataSource</Name>
				<Source><![CDATA[
    public void initActivityDataSource(FormDataSource _formDataSource)
    {
        SysDictTable sysDictTable = new SysDictTable(_formDataSource.table());

        if (!isConfigurationkeyEnabled(sysDictTable.configurationKeyId()))
        {
            _formDataSource.linkType(FormLinkType::Passive);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadActivityBinding</Name>
				<Source><![CDATA[
    public void loadActivityBinding()
    {
        WrkCtrPCRouteOperationActivity  pcActivityLink;

        select firstonly pcActivityLink where pcActivityLink.TemplateComponent == templateComponent.RecId;
        if (!pcActivityLink)
        {
            wrkCtrActivity.EntityType = WrkCtrActivityType::PCRouteOperation;
            wrkCtrActivity_DS.write();
            wrkCtrActivityRequirementSet_DS.initValue();
            wrkCtrActivityRequirementSet_DS.write();
            ttsbegin;
            pcActivityLink.TemplateComponent = templateComponent.RecId;
            pcActivityLink.Activity = wrkCtrActivity.RecId;
            pcActivityLink.write();
            ttscommit;
            wrkCtrPCRouteOperationActivity_DS.executeQuery();
            wrkCtrActivityRequirementSet_DS.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadAllocations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all value allocations from the templates to the controls on this form.
    /// </summary>
    public void loadAllocations()
    {
        PCTemplateAttributeBinding  templateAttributeBinding;

        //populate the value fields, fill the right radio selections and enable the groups:
        templateAttributeBinding = templateFind.findBindingByTemplateComponent(templateComponent, tableNum(RouteOpr), fieldNum(RouteOpr, OprId));

        PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, operation, allocateOperation, operation_Allocation, allocationGroup_Operation);
        PCModelingLibrary::templateSetEnabledStatus(true,allocationGroup_Operation, operation_Allocation);

        templateAttributeBinding = templateFind.findBindingByTemplateComponent(templateComponent, tableNum(Route), fieldNum(Route, OprNum));
        PCModelingLibrary::templateLoadIntAllocation( component, templateAttributeBinding, operationNumber_value, operationNumber_attribute, allocateOperationNumber, operationNumber_Allocation, allocationGroup_OperationNumber);

        templateAttributeBinding = templateFind.findBindingByTemplateComponent(templateComponent, tableNum(Route), fieldNum(Route, OprNumNext));
        PCModelingLibrary::templateLoadIntAllocation( component, templateAttributeBinding, nextOperationNumber_value, nextOperationNumber_attribute, allocateNextOperationNumber, nextOperationNumber_Allocation, allocationGroup_NextOperationNumber);

        templateAttributeBinding = templateFind.findBindingByTemplateComponent(templateComponent, tableNum(Route), fieldNum(Route, OprPriority));
        PCModelingLibrary::templateLoadEnumAllocation( component, templateAttributeBinding, priority_value, priority_attribute, allocatePriority, priority_Allocation, allocationGroup_Priority);

        templateAttributeBinding = templateFind.findBindingByTemplateComponent(templateComponent, tableNum(Route), fieldNum(Route, LinkType));
        PCModelingLibrary::templateLoadEnumAllocation( component, templateAttributeBinding, linkType_value, linkType_attribute, allocateLinkType, linkType_Allocation, allocationGroup_LinkType);

        templateAttributeBinding = templateFind.findBindingByTemplateComponent(templateComponent, tableNum(RouteOpr), fieldNum(RouteOpr, PropertyId));
        PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, property, allocateProperty, property_Allocation, allocationGroup_Property);

        templateAttributeBinding = templateFind.findBindingByTemplateComponent(templateComponent, tableNum(RouteOpr), fieldNum(RouteOpr, RouteGroupId));
        PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, routeGroup, allocateRouteGroup, routeGroup_Allocation, allocationGroup_RouteGroup);

        templateAttributeBinding = templateFind.findBindingByTemplateComponent(templateComponent, tableNum(RouteOpr), fieldNum(RouteOpr, RouteType));
        PCModelingLibrary::templateLoadEnumAllocation( component, templateAttributeBinding, routeType_value, routeType_attribute, allocateRouteType, routeType_Allocation, allocationGroup_RouteType);

        templateAttributeBinding = templateFind.findBindingByTemplateComponent(templateComponent, tableNum(RouteOpr), fieldNum(RouteOpr, Formula));
        PCModelingLibrary::templateLoadEnumAllocation( component, templateAttributeBinding, formula_value, formula_attribute, allocateFormula, formula_Allocation, allocationGroup_Formula);

        templateAttributeBinding = templateFind.findBindingByTemplateComponent(templateComponent, tableNum(RouteOpr), fieldNum(RouteOpr, FormulaFactor1));
        PCModelingLibrary::templateLoadFloatAllocation( component, templateAttributeBinding, factor_value, factor_attribute, allocateFactor, factor_Allocation, allocationGroup_Factor);

        templateAttributeBinding = templateFind.findBindingByTemplateComponent(templateComponent, tableNum(RouteOpr), fieldNum(RouteOpr, WrkCtrIdCost));
        PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, costingResource, allocateCostingResource, costingResource_Allocation, allocationGroup_CostingResource);

        templateAttributeBinding = templateFind.findBindingByTemplateComponent(templateComponent, tableNum(RouteOpr), fieldNum(RouteOpr, SetUpCategoryId));
        PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, setUpCategory, allocateSetUpCategory, setUpCategory_Allocation, allocationGroup_SetUpCategory);

        templateAttributeBinding = templateFind.findBindingByTemplateComponent(templateComponent, tableNum(RouteOpr), fieldNum(RouteOpr, ProcessCategoryId));
        PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, runTimeCategory, allocateRunTimeCategory, runTimeCategory_Allocation, allocationGroup_RunTimeCategory);

        templateAttributeBinding = templateFind.findBindingByTemplateComponent(templateComponent, tableNum(RouteOpr), fieldNum(RouteOpr, QtyCategoryId));
        PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, quantityCategory, allocateQuantityCategory, quantityCategory_Allocation, allocationGroup_QuantityCategory);

        templateAttributeBinding = templateFind.findBindingByTemplateComponent(templateComponent, tableNum(RouteOpr), fieldNum(RouteOpr, QueueTimeBefore));
        PCModelingLibrary::templateLoadFloatAllocation( component, templateAttributeBinding, queueBefore_value, queueBefore_attribute, allocateQueueBefore, queueBefore_Allocation, allocationGroup_QueueBefore);

        templateAttributeBinding = templateFind.findBindingByTemplateComponent(templateComponent, tableNum(RouteOpr), fieldNum(RouteOpr, SetupTime));
        PCModelingLibrary::templateLoadFloatAllocation( component, templateAttributeBinding, setupTime_value, setupTime_attribute, allocateSetupTime, setupTime_Allocation, allocationGroup_SetupTime);

        templateAttributeBinding = templateFind.findBindingByTemplateComponent(templateComponent, tableNum(RouteOpr), fieldNum(RouteOpr, ProcessTime));
        PCModelingLibrary::templateLoadFloatAllocation( component, templateAttributeBinding, runTime_value, runTime_attribute, allocateRunTime, runTime_Allocation, allocationGroup_RunTime);

        templateAttributeBinding = templateFind.findBindingByTemplateComponent(templateComponent, tableNum(RouteOpr), fieldNum(RouteOpr, ProcessPerQty));
        PCModelingLibrary::templateLoadFloatAllocation( component, templateAttributeBinding, processQty_value, processQty_attribute, allocateProcessQty, processQty_Allocation, allocationGroup_ProcessQty);

        templateAttributeBinding = templateFind.findBindingByTemplateComponent(templateComponent, tableNum(RouteOpr), fieldNum(RouteOpr, TranspTime));
        PCModelingLibrary::templateLoadFloatAllocation( component, templateAttributeBinding, transitTime_value, transitTime_attribute, allocateTransitTime, transitTime_Allocation, allocationGroup_TransitTime);

        templateAttributeBinding = templateFind.findBindingByTemplateComponent(templateComponent, tableNum(RouteOpr), fieldNum(RouteOpr, QueueTimeAfter));
        PCModelingLibrary::templateLoadFloatAllocation( component, templateAttributeBinding, queueAfter_value, queueAfter_attribute, allocateQueueAfter, queueAfter_Allocation, allocationGroup_QueueAfter);

        templateAttributeBinding = templateFind.findBindingByTemplateComponent(templateComponent, tableNum(RouteOpr), fieldNum(RouteOpr, ToHours));
        PCModelingLibrary::templateLoadFloatAllocation( component, templateAttributeBinding, hoursPerTime_value, hoursPerTime_attribute, allocateHoursPerTime, hoursPerTime_Allocation, allocationGroup_HoursPerTime);

        templateAttributeBinding = templateFind.findBindingByTemplateComponent(templateComponent, tableNum(RouteOpr), fieldNum(RouteOpr, ToHours));
        PCModelingLibrary::templateLoadFloatAllocation( component, templateAttributeBinding, hoursPerTime_value, hoursPerTime_attribute, allocateHoursPerTime, hoursPerTime_Allocation, allocationGroup_HoursPerTime);

        templateAttributeBinding = templateFind.findBindingByTemplateComponent(templateComponent, tableNum(RouteOpr), fieldNum(RouteOpr, TransferBatch));
        PCModelingLibrary::templateLoadFloatAllocation( component, templateAttributeBinding, transferBatch_value, transferBatch_attribute, allocateTransferBatch, transferBatch_Allocation, allocationGroup_TransferBatch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();
        element.updateRadioControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCostingResource</Name>
				<Source><![CDATA[
    public void setCostingResource(WrkCtrId _wrkCtrId)
    {
        allocateCostingResource.checked(true);
        allocateCostingResource.clicked();
        costingResource_Allocation.selection(PCAllocation::Value);
        costingResource_Allocation.modified();
        costingResource.text(_wrkCtrId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRadioControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the enabled status of the radio button controls on the form, based on the allocations.
    /// </summary>
    public void updateRadioControls()
    {
        //
        //controls that change status post initialization need to be rendered,
        //so this is called after Run()
        //

        PCModelingLibrary::templateSetEnabledStatus(true, allocationGroup_Operation, operation_allocation);
        PCModelingLibrary::templateSetEnabledStatus(true, allocationGroup_OperationNumber, operationNumber_allocation);
        PCModelingLibrary::templateSetEnabledStatus(true, allocationGroup_NextOperationNumber, nextOperationNumber_allocation);
        PCModelingLibrary::templateSetEnabledStatus(allocatePriority.value() == NoYes::Yes, allocationGroup_Priority, priority_allocation);
        PCModelingLibrary::templateSetEnabledStatus(allocateLinkType.value() == NoYes::Yes, allocationGroup_LinkType, linkType_allocation);
        PCModelingLibrary::templateSetEnabledStatus(allocateProperty.value() == NoYes::Yes, allocationGroup_Property, property_allocation);
        PCModelingLibrary::templateSetEnabledStatus(true, allocationGroup_RouteGroup, routeGroup_allocation);
        PCModelingLibrary::templateSetEnabledStatus(allocateRouteType.value() == NoYes::Yes, allocationGroup_RouteType, routeType_allocation);
        PCModelingLibrary::templateSetEnabledStatus(allocateFormula.value() == NoYes::Yes, allocationGroup_Formula, formula_allocation);
        PCModelingLibrary::templateSetEnabledStatus(allocateCostingResource.value() == NoYes::Yes, allocationGroup_CostingResource, costingResource_allocation);
        PCModelingLibrary::templateSetEnabledStatus(allocateFactor.value() == NoYes::Yes, allocationGroup_Factor, factor_allocation);
        PCModelingLibrary::templateSetEnabledStatus(allocateSetupCategory.value() == NoYes::Yes, allocationGroup_SetupCategory, setupCategory_allocation);
        PCModelingLibrary::templateSetEnabledStatus(allocateRuntimeCategory.value() == NoYes::Yes, allocationGroup_RuntimeCategory, runtimeCategory_allocation);
        PCModelingLibrary::templateSetEnabledStatus(allocateQuantityCategory.value() == NoYes::Yes, allocationGroup_QuantityCategory, quantityCategory_allocation);
        PCModelingLibrary::templateSetEnabledStatus(allocateQueueBefore.value() == NoYes::Yes, allocationGroup_QueueBefore, queueBefore_allocation);
        PCModelingLibrary::templateSetEnabledStatus(allocateSetupTime.value() == NoYes::Yes, allocationGroup_SetupTime, setupTime_allocation);
        PCModelingLibrary::templateSetEnabledStatus(allocateRunTime.value() == NoYes::Yes, allocationGroup_RunTime, runTime_allocation);
        PCModelingLibrary::templateSetEnabledStatus(true, allocationGroup_ProcessQty, processQty_allocation);
        PCModelingLibrary::templateSetEnabledStatus(allocateTransitTime.value() == NoYes::Yes, allocationGroup_TransitTime, transitTime_allocation);
        PCModelingLibrary::templateSetEnabledStatus(allocateQueueAfter.value() == NoYes::Yes, allocationGroup_QueueAfter, queueAfter_allocation);
        PCModelingLibrary::templateSetEnabledStatus(true, allocationGroup_HoursPerTime, hoursPerTime_allocation );
        PCModelingLibrary::templateSetEnabledStatus(allocateTransferBatch.value() == NoYes::Yes, allocationGroup_TransferBatch, transferBatch_Allocation );
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Category</Name>
				<Source><![CDATA[
    public boolean validate_Category(PCAllocation _allocation, FormStringControl _stringControl)
    {
        RouteCostCategory   categoryRecord;
        RouteCostCategoryId categoryId;
        Name                name;
        boolean ret = true;

        if (_allocation == PCAllocation::Value)
        {
            categoryId = _stringControl.text();
            changecompany(currentCompany)
            {
                select firstonly RecId from categoryRecord
                where categoryRecord.CostCategoryId == categoryId;

                if (!categoryRecord)
                {
                    ret = false;
                }
            }
        }
        else
        {
            name = _stringControl.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", _stringControl.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_CategoryAttribute</Name>
				<Source><![CDATA[
    public boolean validate_CategoryAttribute(Name _name)
    {
        EcoResAttribute         attribute;
        EcoResCategoryAttribute categoryAttribute;

        select  firstonly   RecId from attribute
        where   attribute.Name      ==  _name
        join    firstonly   RecId from categoryAttribute
        where   categoryAttribute.Attribute  == attribute.RecId
        &&      categoryAttribute.Category   == component.RecId;

        return (attribute.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_CostingResource</Name>
				<Source><![CDATA[
    public boolean validate_CostingResource()
    {
        WrkCtrTable             wrkCtrTable;
        WrkCtrIdCost            wrkCtrIdCost;
        Name                    name;
        boolean                 ret = true;

        if (costingResource_Allocation.selection() == PCAllocation::Value)
        {
            wrkCtrIdCost = costingResource.text();
            changecompany(currentCompany)
            {
                select firstonly RecId from wrkCtrTable
                where wrkCtrTable.WrkCtrId == wrkCtrIdCost;

                if (!wrkCtrTable)
                {
                    ret = false;
                }
            }
        }
        else
        {
            name = costingResource.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", costingResource.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Factor</Name>
				<Source><![CDATA[
    public boolean validate_Factor()
    {
        Name                    name;
        boolean                 ret = true;

        if (factor_Allocation.selection() == PCAllocation::Attribute)
        {
            name = factor_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", factor_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Formula</Name>
				<Source><![CDATA[
    public boolean validate_Formula()
    {
        Name                    name;
        boolean                 ret = true;

        if (formula_Allocation.selection() == PCAllocation::Attribute)
        {
            name = formula_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", formula_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_HoursPerTime</Name>
				<Source><![CDATA[
    public boolean validate_HoursPerTime()
    {
        Name                    name;
        boolean                 ret = true;

        if (hoursPerTime_Allocation.selection() == PCAllocation::Attribute)
        {
            name = hoursPerTime_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", hoursPerTime_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_LinkType</Name>
				<Source><![CDATA[
    public boolean validate_LinkType()
    {
        Name                    name;
        boolean                 ret = true;

        if (linkType_Allocation.selection() == PCAllocation::Attribute)
        {
            name = linkType_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", linkType_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_NextOperationNumber</Name>
				<Source><![CDATA[
    public boolean validate_NextOperationNumber()
    {
        Name                    name;
        boolean                 ret = true;

        if (nextOperationNumber_Allocation.selection() == PCAllocation::Attribute)
        {
            name = nextOperationNumber_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", nextOperationNumber_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Operation</Name>
				<Source><![CDATA[
    public boolean validate_Operation()
    {
        RouteOprTable   operationTable;
        RouteOprId      oprId;
        Name            name;
        boolean ret = true;

        if (operation_Allocation.selection() == PCAllocation::Value)
        {
            oprId = operation.text();
            changecompany(currentCompany)
            {
                select firstonly RecId from operationTable
                where operationTable.OprId == oprId;

                if (!operationTable)
                {
                    ret = false;
                }
            }
        }
        else
        {
            name = operation.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", operation.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_OperationNumber</Name>
				<Source><![CDATA[
    public boolean validate_OperationNumber()
    {
        Name                    name;
        boolean                 ret = true;

        if (operationNumber_Allocation.selection() == PCAllocation::Attribute)
        {
            name = operationNumber_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", operationNumber_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Priority</Name>
				<Source><![CDATA[
    public boolean validate_Priority()
    {
        Name                    name;
        boolean                 ret = true;

        if (priority_Allocation.selection() == PCAllocation::Attribute)
        {
            name = priority_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", priority_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_ProcessQty</Name>
				<Source><![CDATA[
    public boolean validate_ProcessQty()
    {
        Name                    name;
        boolean                 ret = true;

        if (processQty_Allocation.selection() == PCAllocation::Attribute)
        {
            name = processQty_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", processQty_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Property</Name>
				<Source><![CDATA[
    public boolean validate_Property()
    {
        WrkCtrProperty  propertyRecord;
        PropertyId      propertyId;
        Name            name;
        boolean ret = true;

        if (operation_Allocation.selection() == PCAllocation::Value)
        {
            propertyId = property.text();
            changecompany(currentCompany)
            {
                select firstonly RecId from propertyRecord
                where propertyRecord.PropertyId == propertyId;

                if (!propertyRecord)
                {
                    ret = false;
                }
            }
        }
        else
        {
            name = property.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", property.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_QuantityCategory</Name>
				<Source><![CDATA[
    public boolean validate_QuantityCategory()
    {
        return element.validate_Category(quantityCategory_allocation.selection(), quantityCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_QueueAfter</Name>
				<Source><![CDATA[
    public boolean validate_QueueAfter()
    {
        Name                    name;
        boolean                 ret = true;

        if (queueAfter_Allocation.selection() == PCAllocation::Attribute)
        {
            name = queueAfter_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", queueAfter_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_QueueBefore</Name>
				<Source><![CDATA[
    public boolean validate_QueueBefore()
    {
        Name                    name;
        boolean                 ret = true;

        if (queueBefore_Allocation.selection() == PCAllocation::Attribute)
        {
            name = queueBefore_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", queueBefore_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_RouteGroup</Name>
				<Source><![CDATA[
    public boolean validate_RouteGroup()
    {
        RouteGroup      groupRecord;
        PropertyId      routeGroupId;
        Name            name;
        boolean ret = true;

        if (routeGroup_Allocation.selection() == PCAllocation::Value)
        {
            routeGroupId = routeGroup.text();
            changecompany(currentCompany)
            {
                select firstonly RecId from groupRecord
                where groupRecord.RouteGroupId == routeGroupId;

                if (!groupRecord)
                {
                    ret = false;
                }
            }
        }
        else
        {
            name = routeGroup.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", routeGroup.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_RouteType</Name>
				<Source><![CDATA[
    public boolean validate_RouteType()
    {
        Name                    name;
        boolean                 ret = true;

        if (routeType_Allocation.selection() == PCAllocation::Attribute)
        {
            name = routeType_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", routeType_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_RunTime</Name>
				<Source><![CDATA[
    public boolean validate_RunTime()
    {
        Name                    name;
        boolean                 ret = true;

        if (runTime_Allocation.selection() == PCAllocation::Attribute)
        {
            name = runTime_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", runTime_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_RunTimeCategory</Name>
				<Source><![CDATA[
    public boolean validate_RunTimeCategory()
    {
        return element.validate_Category(runTimeCategory_allocation.selection(), runTimeCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_SetupCategory</Name>
				<Source><![CDATA[
    public boolean validate_SetupCategory()
    {
        return element.validate_Category(setupCategory_allocation.selection(), setupCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_SetupTime</Name>
				<Source><![CDATA[
    public boolean validate_SetupTime()
    {
        Name                    name;
        boolean                 ret = true;

        if (setupTime_Allocation.selection() == PCAllocation::Attribute)
        {
            name = setupTime_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", setupTime_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_TransferBatch</Name>
				<Source><![CDATA[
    public boolean validate_TransferBatch()
    {
        Name                    name;
        boolean                 ret = true;

        if (transferBatch_Allocation.selection() == PCAllocation::Attribute)
        {
            name = transferBatch_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", transferBatch_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_TransitTime</Name>
				<Source><![CDATA[
    public boolean validate_TransitTime()
    {
        Name                    name;
        boolean                 ret = true;

        if (transitTime_Allocation.selection() == PCAllocation::Attribute)
        {
            name = transitTime_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", transitTime_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeAllocations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes all allocations specified on the controls on this form to template records.
    /// </summary>
    public void writeAllocations()
    {
        PCTemplateAttributeBinding      templateAttributeBinding;
        PCTemplateAttribute             fieldReference;

        //delete previous allocations first
        ttsbegin;
        delete_from templateAttributeBinding
        where       templateAttributeBinding.TemplateComponent == templateComponent.RecId;

        if ((allocateOperation.value() == NoYes::Yes) && element.validate_Operation())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(RouteOpr), fieldNum(RouteOpr, OprId));
            PCModelingLibrary::templateSaveStringAllocation( component, templateComponent, fieldReference, operation, operation_Allocation);
        }

        if ((allocateOperationNumber.value() == NoYes::Yes) && element.validate_OperationNumber())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(Route), fieldNum(Route, OprNum));
            PCModelingLibrary::templateSaveIntAllocation( component, templateComponent, fieldReference, operationNumber_value, operationNumber_attribute, operationNumber_Allocation);
        }

        if ((allocateNextOperationNumber.value() == NoYes::Yes) && element.validate_NextOperationNumber())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(Route), fieldNum(Route, OprNumNext));
            PCModelingLibrary::templateSaveIntAllocation( component, templateComponent, fieldReference, nextOperationNumber_value, nextOperationNumber_attribute, nextOperationNumber_Allocation);
        }

        if ((allocatePriority.value() == NoYes::Yes) && element.validate_Priority())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(Route), fieldNum(Route, OprPriority));
            PCModelingLibrary::templateSaveEnumAllocation( component, templateComponent, fieldReference, priority_value, priority_attribute, priority_Allocation);
        }

        if ((allocateLinkType.value() == NoYes::Yes) && element.validate_LinkType())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(Route), fieldNum(Route, LinkType));
            PCModelingLibrary::templateSaveEnumAllocation( component, templateComponent, fieldReference, linkType_value, linkType_attribute, linkType_Allocation);
        }

        if ((allocateProperty.value() == NoYes::Yes) && element.validate_Property())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(RouteOpr), fieldNum(RouteOpr, PropertyId));
            PCModelingLibrary::templateSaveStringAllocation( component, templateComponent, fieldReference, property, property_Allocation);
        }

        if ((allocateRouteGroup.value() == NoYes::Yes) && element.validate_RouteGroup())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(RouteOpr), fieldNum(RouteOpr, RouteGroupId));
            PCModelingLibrary::templateSaveStringAllocation( component, templateComponent, fieldReference, routeGroup, routeGroup_Allocation);
        }

        if ((allocateRouteType.value() == NoYes::Yes) && element.validate_RouteType())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(RouteOpr), fieldNum(RouteOpr, RouteType));
            PCModelingLibrary::templateSaveEnumAllocation( component, templateComponent, fieldReference, routeType_value, routeType_attribute, routeType_Allocation);
        }

        if ((allocateFormula.value() == NoYes::Yes) && element.validate_Formula())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(RouteOpr), fieldNum(RouteOpr, Formula));
            PCModelingLibrary::templateSaveEnumAllocation( component, templateComponent, fieldReference, formula_value, formula_attribute, formula_Allocation);
        }

        if ((allocateFactor.value() == NoYes::Yes) && element.validate_Factor())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(RouteOpr), fieldNum(RouteOpr, FormulaFactor1));
            PCModelingLibrary::templateSaveFloatAllocation( component, templateComponent, fieldReference, factor_Value, factor_Attribute, factor_Allocation);
        }

        if ((allocateCostingResource.value() == NoYes::Yes) && element.validate_CostingResource())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(RouteOpr), fieldNum(RouteOpr, WrkCtrIdCost));
            PCModelingLibrary::templateSaveStringAllocation( component, templateComponent, fieldReference, costingResource, costingResource_Allocation);
        }

        if ((allocateSetupCategory.value() == NoYes::Yes) && element.validate_SetupCategory())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(RouteOpr), fieldNum(RouteOpr, SetUpCategoryId));
            PCModelingLibrary::templateSaveStringAllocation( component, templateComponent, fieldReference, setupCategory, setupCategory_Allocation);
        }

        if ((allocateRunTimeCategory.value() == NoYes::Yes) && element.validate_RunTimeCategory())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(RouteOpr), fieldNum(RouteOpr, ProcessCategoryId));
            PCModelingLibrary::templateSaveStringAllocation( component, templateComponent, fieldReference, runTimeCategory, runTimeCategory_Allocation);
        }

        if ((allocateQuantityCategory.value() == NoYes::Yes) && element.validate_QuantityCategory())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(RouteOpr), fieldNum(RouteOpr, QtyCategoryId));
            PCModelingLibrary::templateSaveStringAllocation( component, templateComponent, fieldReference, quantityCategory, quantityCategory_Allocation);
        }

        if ((allocateQueueBefore.value() == NoYes::Yes) && element.validate_QueueBefore())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(RouteOpr), fieldNum(RouteOpr, QueueTimeBefore));
            PCModelingLibrary::templateSaveFloatAllocation( component, templateComponent, fieldReference, queueBefore_Value, queueBefore_Attribute, queueBefore_Allocation);
        }

        if ((allocateSetupTime.value() == NoYes::Yes) && element.validate_SetupTime())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(RouteOpr), fieldNum(RouteOpr, SetupTime));
            PCModelingLibrary::templateSaveFloatAllocation( component, templateComponent, fieldReference, setupTime_Value, setupTime_Attribute, setupTime_Allocation);
        }

        if ((allocateRunTime.value() == NoYes::Yes) && element.validate_RunTime())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(RouteOpr), fieldNum(RouteOpr, ProcessTime));
            PCModelingLibrary::templateSaveFloatAllocation( component, templateComponent, fieldReference, runTime_Value, runTime_Attribute, runTime_Allocation);
        }

        if ((allocateProcessQty.value() == NoYes::Yes) && element.validate_ProcessQty())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(RouteOpr), fieldNum(RouteOpr, ProcessPerQty));
            PCModelingLibrary::templateSaveFloatAllocation( component, templateComponent, fieldReference, processQty_Value, processQty_Attribute, processQty_Allocation);
        }

        if ((allocateTransitTime.value() == NoYes::Yes) && element.validate_TransitTime())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(RouteOpr), fieldNum(RouteOpr, TranspTime));
            PCModelingLibrary::templateSaveFloatAllocation( component, templateComponent, fieldReference, transitTime_Value, transitTime_Attribute, transitTime_Allocation);
        }

        if ((allocateQueueAfter.value() == NoYes::Yes) && element.validate_QueueAfter())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(RouteOpr), fieldNum(RouteOpr, QueueTimeAfter));
            PCModelingLibrary::templateSaveFloatAllocation( component, templateComponent, fieldReference, queueAfter_Value, queueAfter_Attribute, queueAfter_Allocation);
        }

        if ((allocateHoursPerTime.value() == NoYes::Yes) && element.validate_HoursPerTime())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(RouteOpr), fieldNum(RouteOpr, ToHours));
            PCModelingLibrary::templateSaveFloatAllocation( component, templateComponent, fieldReference, hoursPerTime_Value, hoursPerTime_Attribute, hoursPerTime_Allocation);
        }

        if ((allocateTransferBatch.value() == NoYes::Yes) && element.validate_TransferBatch())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(RouteOpr), fieldNum(RouteOpr, TransferBatch));
            PCModelingLibrary::templateSaveFloatAllocation( component, templateComponent, fieldReference, transferBatch_Value, transferBatch_Attribute, transferBatch_Allocation);
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>WrkCtrActivityRequirement</Name>
				<Methods>
					<Method>
						<Name>requirementEdit</Name>
						<Source><![CDATA[
        edit WrkCtrActivityRequirementEdit requirementEdit(
            boolean                                 _set,
            WrkCtrActivityRequirement               _wrkCtrActivityRequirement,
            WrkCtrActivityRequirementEdit           _wrkCtrActivityRequirementEdit
            )
        {
            WrkCtrActivityRequirementEdit   wrkCtrActivityRequirementEdit;

            wrkCtrActivityRequirementEdit = _wrkCtrActivityRequirement.requirementEdit(
                                                            _set,
                                                             (_wrkCtrActivityRequirement.RecId != 0 && _wrkCtrActivityRequirement.RecId != wrkCtrActivityRequirement.RecId),
                                                             this.activeSubtype(),
                                                             _wrkCtrActivityRequirementEdit);
            //initialization of the requirement on the RouteOpr record is performed during generation
            return wrkCtrActivityRequirementEdit;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            Common          activeSubtype = this.activeSubtype();
            FormDataSource  fds;

            ttsbegin;

            super();

            if (activeSubtype.RecId == 0)
            {
                activeSubtype.setActivityRequirement(wrkCtrActivityRequirement.RecId);
                activeSubtype.write();

                fds = FormDataUtil::getFormDataSource(activeSubtype);
                fds.reread();
            }

            ttscommit;
        }

]]></Source>
					</Method>
					<Method>
						<Name>changeDisplay</Name>
						<Source><![CDATA[
        public void changeDisplay()
        {
            capabilityOptions.visible(wrkCtrActivityRequirement.RelationshipType == WrkCtrActivityRequirementType::Capability);
            skillOptions.visible(wrkCtrActivityRequirement.RelationshipType == WrkCtrActivityRequirementType::Skill);

            wrkCtrActivityRequirement_ds.object(fieldNum(WrkCtrActivityRequirement, UsedForOperationScheduling)).allowEdit(wrkCtrActivityRequirement.allowEditSchedulingFlags());
            wrkCtrActivityRequirement_ds.object(fieldNum(WrkCtrActivityRequirement, UsedForJobScheduling)).allowEdit(wrkCtrActivityRequirement.allowEditSchedulingFlags());
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            this.changeDisplay();

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;
            Common  activeSubtype = this.activeSubtype();

            if (!wrkCtrActivityRequirement.ActivityRequirementSet && wrkCtrActivityRequirementSet)
            {
                wrkCtrActivityRequirement.ActivityRequirementSet = wrkCtrActivityRequirementSet.RecId;
            }

            ret = super();

            if (ret && requirementEditGrid.text() == "")
            {
                // Field Requirement must be filled in
                ret = checkFailed(strFmt("@SYS312088", "@SYS8498", "@SYS11370"));
            }

            if (ret && activeSubtype.RecId == 0)
            {
                //Set a temporary link to ActivityRequirement to not fail the validateWrite because of this
                activeSubtype.setActivityRequirement(-1);

                ret = activeSubtype.validateWrite();
                ret = ret && activeSubtype.validateWriteRequirementSet(wrkCtrActivityRequirementSet.RecId);

                activeSubtype.setActivityRequirement(0);
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>activeSubtype</Name>
						<Source><![CDATA[
        public Common activeSubtype()
        {
            return wrkCtrActivityRequirement.determineSubtype( wrkCtrActivityCapabilityRequirement,
                                                        wrkCtrActivityCertificateRequirement,
                                                        wrkCtrActivityCourseRequirement,
                                                        wrkCtrActivityResourceRequirement,
                                                        wrkCtrActivityResourceGroupRequirement,
                                                        wrkCtrActivitySkillRequirement,
                                                        wrkCtrActivityResourceTypeRequirement,
                                                        wrkCtrActivityPersonTitleRequirement);
        }

]]></Source>
					</Method>
					<Method>
						<Name>requirementDescription</Name>
						<Source><![CDATA[
        display Description requirementDescription()
        {
            return this.activeSubtype().requirementDescription();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            element.initActivityDataSource(this);

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>RelationshipType</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                wrkCtrActivityRequirement_ds.activeSubtype().initFromRequirementSet(wrkCtrActivityRequirement.ActivityRequirementSet);
                wrkCtrActivityRequirement_ds.changeDisplay();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>WrkCtrActivityRequirementSet</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;

            ret = wrkCtrActivity_DS.validateWrite();

            if (ret && !wrkCtrActivityRequirementSet.Activity)
            {
                wrkCtrActivity_DS.write();
                wrkCtrPCRouteOperationActivity.Activity = wrkCtrActivity.RecId;
                wrkCtrPCRouteOperationActivity.write();
                wrkCtrActivityRequirementSet.Activity = wrkCtrActivity.RecId;
            }

            ret = ret && super();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            element.initActivityDataSource(this);

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>WrkCtrActivity</Name>
				<Methods>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            wrkCtrActivity.EntityType = WrkCtrActivityType::PCRouteOperation;
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            element.initActivityDataSource(this);
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>WrkCtrActivityResourceGroupRequirement</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret = true;

            //Only call super when updating. Inserting is handled in the write method of wrkCtrActivityRequirement.
            if (wrkCtrActivityResourceGroupRequirement.RecId != 0)
            {
                ret = super();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            //Only call super when updating. Inserting is handled in the write method of wrkCtrActivityRequirement.
            if (wrkCtrActivityResourceGroupRequirement.RecId != 0)
            {
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            element.initActivityDataSource(this);

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>WrkCtrActivitySkillRequirement</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret = true;

            //Only call super when updating. Inserting is handled in the write method of wrkCtrActivityRequirement.
            if (wrkCtrActivitySkillRequirement.RecId != 0)
            {
                ret = super();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            //Only call super when updating. Inserting is handled in the write method of wrkCtrActivityRequirement.
            if (wrkCtrActivitySkillRequirement.RecId != 0)
            {
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            element.initActivityDataSource(this);

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>WrkCtrActivityCourseRequirement</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret = true;

            //Only call super when updating. Inserting is handled in the write method of wrkCtrActivityRequirement.
            if (wrkCtrActivityCourseRequirement.RecId != 0)
            {
                ret = super();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            //Only call super when updating. Inserting is handled in the write method of wrkCtrActivityRequirement.
            if (wrkCtrActivityCourseRequirement.RecId != 0)
            {
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            element.initActivityDataSource(this);

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>WrkCtrActivityCertificateRequirement</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            //Only call super when updating. Inserting is handled in the write method of wrkCtrActivityRequirement.
            if (wrkCtrActivityCertificateRequirement.RecId != 0)
            {
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret = true;

            //Only call super when updating. Inserting is handled in the write method of wrkCtrActivityRequirement.
            if (wrkCtrActivityCertificateRequirement.RecId != 0)
            {
                ret = super();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            element.initActivityDataSource(this);

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>WrkCtrActivityResourceRequirement</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            //Only call super when updating. Inserting is handled in the write method of wrkCtrActivityRequirement.
            if (wrkCtrActivityResourceRequirement.RecId != 0)
            {
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret = true;

            //Only call super when updating. Inserting is handled in the write method of wrkCtrActivityRequirement.
            if (wrkCtrActivityResourceRequirement.RecId != 0)
            {
                ret = super();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            element.initActivityDataSource(this);

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>WrkCtrActivityCapabilityRequirement</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret = true;

            //Only call super when updating. Inserting is handled in the write method of wrkCtrActivityRequirement.
            if (wrkCtrActivityCapabilityRequirement.RecId != 0)
            {
                ret = super();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            //Only call super when updating. Inserting is handled in the write method of wrkCtrActivityRequirement.
            if (wrkCtrActivityCapabilityRequirement.RecId != 0)
            {
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            element.initActivityDataSource(this);

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>WrkCtrActivityResourceTypeRequirement</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret = true;

            //Only call super when updating. Inserting is handled in the write method of wrkCtrActivityRequirement.
            if (wrkCtrActivityResourceTypeRequirement.RecId != 0)
            {
                ret = super();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            //Only call super when updating. Inserting is handled in the write method of wrkCtrActivityRequirement.
            if (wrkCtrActivityResourceTypeRequirement.RecId != 0)
            {
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            element.initActivityDataSource(this);

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>WrkCtrActivityPersonTitleRequirement</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret = true;

            //Only call super when updating. Inserting is handled in the write method of wrkCtrActivityRequirement.
            if (wrkCtrActivityPersonTitleRequirement.RecId != 0)
            {
                ret = super();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            //Only call super when updating. Inserting is handled in the write method of wrkCtrActivityRequirement.
            if (wrkCtrActivityPersonTitleRequirement.RecId != 0)
            {
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            element.initActivityDataSource(this);

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>WrkCtrPCRouteOperationActivity</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            QueryBuildDataSource qbds;
            super();
            qbds = this.query().dataSourceTable(tableNum(WrkCtrPCRouteOperationActivity));
            qbds.clearDynalinks();
            qbds.clearRanges();
            qbds.addRange(fieldNum(WrkCtrPCRouteOperationActivity, TemplateComponent)).value(queryValue(templateComponent.RecId));
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            wrkCtrPCRouteOperationActivity.TemplateComponent = templateComponent.RecId;
            wrkCtrPCRouteOperationActivity.Activity = wrkCtrActivity.RecId;
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            wrkCtrPCRouteOperationActivity.TemplateComponent = templateComponent.RecId;
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>AllocateOperation</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus(this.value() == NoYes::Yes, allocationGroup_Operation, operation_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Operation</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (operation_Allocation.selection() == PCAllocation::Value)
            {
                super();
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateOperation.value() == NoYes::Yes))
            {
                ret = element.validate_Operation();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Operation_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = operation.labelText();

            ret = super();
            operation.text('');

            if (this.selection() == PCAllocation::Value)
            {
                operation.extendedDataType(extendedTypeNum(RouteOprId));
            }
            else
            {
                operation.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                operation.label(label);
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateOperationNumber</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus(this.value() == NoYes::Yes, allocationGroup_OperationNumber, operationNumber_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OperationNumber_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateOperationNumber.value() == NoYes::Yes))
            {
                ret = element.validate_OperationNumber();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OperationNumber_Value</Name>
				<Type>Integer</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateOperationNumber.value() == NoYes::Yes))
            {
                ret = element.validate_OperationNumber();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OperationNumber_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            operationNumber_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                operationNumber_attribute.visible(true);
                operationNumber_value.visible(false);
            }
            else
            {
                operationNumber_attribute.visible(false);
                operationNumber_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateNextOperationNumber</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus(this.value() == NoYes::Yes, allocationGroup_NextOperationNumber, nextOperationNumber_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>NextOperationNumber_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateNextOperationNumber.value() == NoYes::Yes))
            {
                ret = element.validate_NextOperationNumber();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>NextOperationNumber_Value</Name>
				<Type>Integer</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateNextOperationNumber.value() == NoYes::Yes))
            {
                ret = element.validate_NextOperationNumber();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>NextOperationNumber_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            nextOperationNumber_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                nextOperationNumber_attribute.visible(true);
                nextOperationNumber_value.visible(false);
            }
            else
            {
                nextOperationNumber_attribute.visible(false);
                nextOperationNumber_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocatePriority</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus(this.value() == NoYes::Yes, allocationGroup_Priority, priority_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Priority_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocatePriority.value() == NoYes::Yes))
            {
                ret = element.validate_Priority();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Priority_Value</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocatePriority.value() == NoYes::Yes))
            {
                ret = element.validate_Priority();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Priority_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            priority_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                priority_attribute.visible(true);
                priority_value.visible(false);
            }
            else
            {
                priority_attribute.visible(false);
                priority_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateLinkType</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus(this.value() == NoYes::Yes, allocationGroup_LinkType, linkType_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LinkType_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateLinkType.value() == NoYes::Yes))
            {
                ret = element.validate_LinkType();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LinkType_Value</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateLinkType.value() == NoYes::Yes))
            {
                ret = element.validate_LinkType();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LinkType_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            linkType_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                linkType_attribute.visible(true);
                linkType_value.visible(false);
            }
            else
            {
                linkType_attribute.visible(false);
                linkType_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateProperty</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus(this.value() == NoYes::Yes, allocationGroup_Property, property_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Property</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (property_Allocation.selection() == PCAllocation::Value)
            {
                super();
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateProperty.value() == NoYes::Yes))
            {
                ret = element.validate_Property();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Property_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = property.labelText();

            ret = super();
            property.text('');

            if (this.selection() == PCAllocation::Value)
            {
                property.extendedDataType(extendedTypeNum(PropertyId));
            }
            else
            {
                property.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                property.label(label);
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateRouteGroup</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus(this.value() == NoYes::Yes, allocationGroup_RouteGroup, routeGroup_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RouteGroup</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (routeGroup_Allocation.selection() == PCAllocation::Value)
            {
                super();
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateRouteGroup.value() == NoYes::Yes))
            {
                ret = element.validate_RouteGroup();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RouteGroup_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = routeGroup.labelText();

            ret = super();
            routeGroup.text('');

            if (this.selection() == PCAllocation::Value)
            {
                routeGroup.extendedDataType(extendedTypeNum(RouteGroupId));
            }
            else
            {
                routeGroup.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                routeGroup.label(label);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateRouteType</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus(this.value() == NoYes::Yes, allocationGroup_RouteType, routeType_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RouteType_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateRouteType.value() == NoYes::Yes))
            {
                ret = element.validate_RouteType();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RouteType_Value</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateRouteType.value() == NoYes::Yes))
            {
                ret = element.validate_RouteType();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RouteType_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            routeType_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                routeType_attribute.visible(true);
                routeType_value.visible(false);
            }
            else
            {
                routeType_attribute.visible(false);
                routeType_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateFormula</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus(this.value() == NoYes::Yes, allocationGroup_Formula, formula_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Formula_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateFormula.value() == NoYes::Yes))
            {
                ret = element.validate_Formula();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Formula_Value</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateFormula.value() == NoYes::Yes))
            {
                ret = element.validate_Formula();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Formula_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            formula_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                formula_attribute.visible(true);
                formula_value.visible(false);
            }
            else
            {
                formula_attribute.visible(false);
                formula_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateFactor</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus(this.value() == NoYes::Yes, allocationGroup_Factor, factor_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Factor_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateFactor.value() == NoYes::Yes))
            {
                ret = element.validate_Factor();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Factor_Value</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateFactor.value() == NoYes::Yes))
            {
                ret = element.validate_Factor();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Factor_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            factor_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                factor_attribute.visible(true);
                factor_value.visible(false);
            }
            else
            {
                factor_attribute.visible(false);
                factor_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateCostingResource</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus(this.value() == NoYes::Yes, allocationGroup_CostingResource, costingResource_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CostingResource</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (costingResource_Allocation.selection() == PCAllocation::Value)
            {
                WrkCtrTable::lookupWrkCtrIdCost(this);
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            if (allocateCostingResource.value() == NoYes::Yes)
            {
                ret = element.validate_CostingResource();
            }
            else
            {
                ret = super();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CostingResource_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = costingResource.labelText();

            ret = super();
            costingResource.text('');

            if (this.selection() == PCAllocation::Value)
            {
                costingResource.extendedDataType(extendedTypeNum(WrkCtrIdCost));
            }
            else
            {
                costingResource.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                costingResource.label(label);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateSetupCategory</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus(this.value() == NoYes::Yes, allocationGroup_SetupCategory, setupCategory_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SetupCategory</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (setupCategory_Allocation.selection() == PCAllocation::Value)
            {
                super();
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateSetupCategory.value() == NoYes::Yes))
            {
                ret = element.validate_SetupCategory();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SetupCategory_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = setupCategory.labelText();

            ret = super();
            setupCategory.text('');

            if (this.selection() == PCAllocation::Value)
            {
                setupCategory.extendedDataType(extendedTypeNum(RouteCostCategoryIdSetup));
            }
            else
            {
                setupCategory.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                setupCategory.label(label);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateRuntimeCategory</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus(this.value() == NoYes::Yes, allocationGroup_RuntimeCategory, runtimeCategory_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RuntimeCategory</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (runtimeCategory_Allocation.selection() == PCAllocation::Value)
            {
                super();
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateRuntimeCategory.value() == NoYes::Yes))
            {
                ret = element.validate_RuntimeCategory();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RuntimeCategory_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = runtimeCategory.labelText();

            ret = super();
            runtimeCategory.text('');

            if (this.selection() == PCAllocation::Value)
            {
                runtimeCategory.extendedDataType(extendedTypeNum(RouteCostCategoryIdProcess));
            }
            else
            {
                runtimeCategory.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                runtimeCategory.label(label);
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateQuantityCategory</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus(this.value() == NoYes::Yes, allocationGroup_QuantityCategory, quantityCategory_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>QuantityCategory</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (quantityCategory_Allocation.selection() == PCAllocation::Value)
            {
                super();
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateQuantityCategory.value() == NoYes::Yes))
            {
                ret = element.validate_QuantityCategory();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>QuantityCategory_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = quantityCategory.labelText();

            ret = super();
            quantityCategory.text('');

            if (this.selection() == PCAllocation::Value)
            {
                quantityCategory.extendedDataType(extendedTypeNum(RouteCostCategoryIdQty));
            }
            else
            {
                quantityCategory.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                quantityCategory.label(label);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateQueueBefore</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus(this.value() == NoYes::Yes, allocationGroup_QueueBefore, queueBefore_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>QueueBefore_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateQueueBefore.value() == NoYes::Yes))
            {
                ret = element.validate_QueueBefore();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>QueueBefore_Value</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateQueueBefore.value() == NoYes::Yes))
            {
                ret = element.validate_QueueBefore();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>QueueBefore_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            queueBefore_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                queueBefore_attribute.visible(true);
                queueBefore_value.visible(false);
            }
            else
            {
                queueBefore_attribute.visible(false);
                queueBefore_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateSetupTime</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus(this.value() == NoYes::Yes, allocationGroup_SetupTime, setupTime_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SetupTime_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateSetupTime.value() == NoYes::Yes))
            {
                ret = element.validate_SetupTime();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SetupTime_Value</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateSetupTime.value() == NoYes::Yes))
            {
                ret = element.validate_SetupTime();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SetupTime_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            setupTime_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                setupTime_attribute.visible(true);
                setupTime_value.visible(false);
            }
            else
            {
                setupTime_attribute.visible(false);
                setupTime_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateRunTime</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus(this.value() == NoYes::Yes, allocationGroup_RunTime, runTime_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RunTime_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateRunTime.value() == NoYes::Yes))
            {
                ret = element.validate_RunTime();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RunTime_Value</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateRunTime.value() == NoYes::Yes))
            {
                ret = element.validate_RunTime();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RunTime_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            runTime_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                runTime_attribute.visible(true);
                runTime_value.visible(false);
            }
            else
            {
                runTime_attribute.visible(false);
                runTime_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateProcessQty</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus(this.value() == NoYes::Yes, allocationGroup_ProcessQty, processQty_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProcessQty_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateProcessQty.value() == NoYes::Yes))
            {
                ret = element.validate_ProcessQty();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProcessQty_Value</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateProcessQty.value() == NoYes::Yes))
            {
                ret = element.validate_ProcessQty();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProcessQty_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            processQty_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                processQty_attribute.visible(true);
                processQty_value.visible(false);
            }
            else
            {
                processQty_attribute.visible(false);
                processQty_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateTransitTime</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus(this.value() == NoYes::Yes, allocationGroup_TransitTime, transitTime_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TransitTime_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateTransitTime.value() == NoYes::Yes))
            {
                ret = element.validate_TransitTime();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TransitTime_Value</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateTransitTime.value() == NoYes::Yes))
            {
                ret = element.validate_TransitTime();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TransitTime_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            transitTime_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                transitTime_attribute.visible(true);
                transitTime_value.visible(false);
            }
            else
            {
                transitTime_attribute.visible(false);
                transitTime_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateQueueAfter</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus(this.value() == NoYes::Yes, allocationGroup_QueueAfter, queueAfter_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>QueueAfter_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateQueueAfter.value() == NoYes::Yes))
            {
                ret = element.validate_QueueAfter();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>QueueAfter_Value</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateQueueAfter.value() == NoYes::Yes))
            {
                ret = element.validate_QueueAfter();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>QueueAfter_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            queueAfter_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                queueAfter_attribute.visible(true);
                queueAfter_value.visible(false);
            }
            else
            {
                queueAfter_attribute.visible(false);
                queueAfter_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateHoursPerTime</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus(this.value() == NoYes::Yes, allocationGroup_HoursPerTime, hoursPerTime_allocation );
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HoursPerTime_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateHoursPerTime.value() == NoYes::Yes))
            {
                ret = element.validate_HoursPerTime();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HoursPerTime_Value</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateHoursPerTime.value() == NoYes::Yes))
            {
                ret = element.validate_HoursPerTime();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HoursPerTime_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            hoursPerTime_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                hoursPerTime_attribute.visible(true);
                hoursPerTime_value.visible(false);
            }
            else
            {
                hoursPerTime_attribute.visible(false);
                hoursPerTime_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateTransferBatch</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus(this.value() == NoYes::Yes, allocationGroup_TransferBatch, transferBatch_Allocation );
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TransferBatch_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateTransferBatch.value() == NoYes::Yes))
            {
                ret = element.validate_TransferBatch();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TransferBatch_Value</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateTransferBatch.value() == NoYes::Yes))
            {
                ret = element.validate_TransferBatch();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TransferBatch_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            transferBatch_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                transferBatch_attribute.visible(true);
                transferBatch_value.visible(false);
            }
            else
            {
                transferBatch_attribute.visible(false);
                transferBatch_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RequirementEditGrid</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            wrkCtrActivityRequirement.requirementJumpRef(wrkCtrActivityRequirement_ds.activeSubtype());
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            wrkCtrActivityRequirement.requirementLookup(requirementEditGrid, '', wrkCtrActivityRequirement_ds.activeSubtype());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RequirementEditDetails</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            wrkCtrActivityRequirement.requirementJumpRef(wrkCtrActivityRequirement_ds.activeSubtype());
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            wrkCtrActivityRequirement.requirementLookup(requirementEditDetails, '', wrkCtrActivityRequirement_ds.activeSubtype());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>WrkCtrActivityRequirement</Name>
			<Table>WrkCtrActivityRequirement</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityRequirementSet</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RelationshipType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UsedForJobScheduling</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UsedForOperationScheduling</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>WrkCtrActivityRequirementSet</JoinSource>
			<LinkType>Active</LinkType>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>WrkCtrActivityRequirementSet</Name>
			<Table>WrkCtrActivityRequirementSet</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Activity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LoadPercent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Quantity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>WrkCtrActivity</JoinSource>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>WrkCtrActivity</Name>
			<Table>WrkCtrActivity</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EntityType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>WrkCtrPCRouteOperationActivity</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>WrkCtrActivityResourceGroupRequirement</Name>
			<Table>WrkCtrActivityResourceGroupRequirement</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityRequirement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>WrkCtrActivityRequirement</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>WrkCtrActivitySkillRequirement</Name>
			<Table>WrkCtrActivitySkillRequirement</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityRequirement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RatingLevel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Skill</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>WrkCtrActivityRequirement</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<AllowCheck>No</AllowCheck>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>WrkCtrActivityCourseRequirement</Name>
			<Table>WrkCtrActivityCourseRequirement</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityRequirement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CourseDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HRMCourseId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>WrkCtrActivityRequirement</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>WrkCtrActivityCertificateRequirement</Name>
			<Table>WrkCtrActivityCertificateRequirement</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityRequirement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CertificateType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>WrkCtrActivityRequirement</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>WrkCtrActivityResourceRequirement</Name>
			<Table>WrkCtrActivityResourceRequirement</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityRequirement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WrkCtrId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>WrkCtrActivityRequirement</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>WrkCtrActivityCapabilityRequirement</Name>
			<Table>WrkCtrActivityCapabilityRequirement</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityRequirement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Capability</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MinimumLevelNeeded</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>WrkCtrActivityRequirement</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<AllowCheck>No</AllowCheck>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>WrkCtrActivityResourceTypeRequirement</Name>
			<Table>WrkCtrActivityResourceTypeRequirement</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityRequirement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>WrkCtrActivityRequirement</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>WrkCtrActivityPersonTitleRequirement</Name>
			<Table>WrkCtrActivityPersonTitleRequirement</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityRequirement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Title</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>WrkCtrActivityRequirement</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>WrkCtrPCRouteOperationActivity</Name>
			<Table>WrkCtrPCRouteOperationActivity</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Activity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TemplateComponent</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<AllowFormCompanyChange xmlns="">Yes</AllowFormCompanyChange>
		<Caption xmlns="">@SYS309534</Caption>
		<DialogSize xmlns="">Large</DialogSize>
		<Pattern xmlns="">DialogTabs</Pattern>
		<PatternVersion xmlns="">1.3</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<StatusBarStyle xmlns="">SimpleWithoutClose</StatusBarStyle>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>429496729</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneTabControl">
						<Name>ActionPaneTabTop</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ActionPaneTab</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>ButtonGroup</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Left>0</Left>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>ApplicableResources</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataSource>WrkCtrActivityRequirementSet</DataSource>
										<MenuItemName>WrkCtrApplicableResources</MenuItemName>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>Vertical</ArrangeMethod>
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
						<AlignChildren>No</AlignChildren>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Style>Strip</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>OperationGroup</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>858993458</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>AllocateOperation</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS95004</Label>
						<Value>1</Value>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>AllocationGroup_Operation</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Operation</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>RouteOprId</ExtendedDataType>
								<LookupButton>Always</LookupButton>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
						</Controls>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRadioButtonControl">
						<Name>Operation_Allocation</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Left>0</Left>
						<LeftMode>RightEdge</LeftMode>
						<Type>RadioButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Caption>@SYS101237</Caption>
						<Columns>3</Columns>
						<EnumType>PCAllocation</EnumType>
						<FrameType>None</FrameType>
						<Selection>1</Selection>
						<Items />
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1288490187</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>GeneralTabPage</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>OperationTopGroup</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>OperationNumberGroup</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateOperationNumber</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
												<Value>1</Value>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_OperationNumber</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>OperationNumber_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS27903</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS5793</Label>
														<LookupButton>Always</LookupButton>
														<Mandatory>Yes</Mandatory>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormIntegerControl">
														<Name>OperationNumber_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Integer</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>OprNum</ExtendedDataType>
														<Mandatory>Yes</Mandatory>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>OperationNumber_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS5793</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>NextOperationNumberGroup</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateNextOperationNumber</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
												<Value>1</Value>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_NextOperationNumber</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>NextOperationNumber_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS27953</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS6441</Label>
														<LookupButton>Always</LookupButton>
														<Mandatory>Yes</Mandatory>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormIntegerControl">
														<Name>NextOperationNumber_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Integer</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>OprNumNext</ExtendedDataType>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>NextOperationNumber_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS6441</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>PriorityGroup</Name>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocatePriority</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Priority</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Priority_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS16878</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS15156</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>Priority_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>ComboBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<EnumType>RouteOprPriority</EnumType>
														<Items />
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Priority_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS15156</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>LinkTypeGroup</Name>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateLinkType</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_LinkType</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>LinkType_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS8899</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS26289</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>LinkType_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>ComboBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<EnumType>SchedJobLinkType</EnumType>
														<Items />
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>LinkType_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS26289</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<HideIfEmpty>No</HideIfEmpty>
								<Caption>@SYS4528</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>RouteTopGroup</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>PropertyGroup</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateProperty</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Property</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Property</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>PropertyId</ExtendedDataType>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Property_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS682</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>RouteGroupGroup</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateRouteGroup</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
												<Value>1</Value>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_RouteGroup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>RouteGroup</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>RouteGroupId</ExtendedDataType>
														<LookupButton>Always</LookupButton>
														<Mandatory>Yes</Mandatory>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>RouteGroup_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS6864</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>RouteTypeGroup</Name>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateRouteType</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_RouteType</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>RouteType_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS11360</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS24660</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>RouteType_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>ComboBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<EnumType>RouteOprType</EnumType>
														<Items />
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>RouteType_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS24660</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<HideIfEmpty>No</HideIfEmpty>
								<Caption>@SYS4190</Caption>
							</AxFormControl>
						</Controls>
						<BackgroundColor>WindowBackground</BackgroundColor>
						<Caption>@SYS80118</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>SetupTabPage</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ConsumptionCalculationTopGroup</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>FormulaGroup</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateFormula</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Formula</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Formula_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS672</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>Formula_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>ComboBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<EnumType>RouteFormula</EnumType>
														<Items />
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Formula_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@SYS27591</HelpText>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS672</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>FactorGroup</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateFactor</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Factor</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Factor_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS4899</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS1187</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>Factor_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>RouteFormulaFactor</ExtendedDataType>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Factor_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS1187</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>CostingResourceGroup</Name>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateCostingResource</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_CostingResource</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>CostingResource</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>WrkCtrIdCost</ExtendedDataType>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>CostingResource_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS300995</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<Caption>@SYS22165</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CostCategoryTopGroup</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SetupCategoryGroup</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateSetupCategory</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_SetupCategory</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>SetupCategory</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>RouteCostCategoryIdSetup</ExtendedDataType>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>SetupCategory_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS22181</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>RuntimeCategoryGroup</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateRuntimeCategory</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_RuntimeCategory</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>RuntimeCategory</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>RouteCostCategoryIdProcess</ExtendedDataType>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>RuntimeCategory_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS22182</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>QuantityCategoryGroup</Name>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateQuantityCategory</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_QuantityCategory</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>QuantityCategory</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>RouteCostCategoryIdQty</ExtendedDataType>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>QuantityCategory_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS22892</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<Caption>@SYS34984</Caption>
							</AxFormControl>
						</Controls>
						<BackgroundColor>WindowBackground</BackgroundColor>
						<Caption>@SYS12687</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TimesTabPage</Name>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>TimesTopGroup</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>QueueBeforeGroup</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateQueueBefore</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_QueueBefore</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>QueueBefore_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS9320</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS15393</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>QueueBefore_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>RouteOprTimeQueueBefore</ExtendedDataType>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>QueueBefore_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS15393</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SetupTimeGroup</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateSetupTime</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_SetupTime</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>SetupTime_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS28048</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS1782</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>SetupTime_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>RouteOprTimeSetup</ExtendedDataType>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>SetupTime_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS1782</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>RunTimeGroup</Name>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateRunTime</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_RunTime</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>RunTime_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS12012</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS16393</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>RunTime_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>RouteOprTimeProcess</ExtendedDataType>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>RunTime_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS16393</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ProcessQtyGroup</Name>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateProcessQty</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
												<Value>1</Value>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_ProcessQty</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ProcessQty_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS11231</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS21713</Label>
														<LookupButton>Always</LookupButton>
														<Mandatory>Yes</Mandatory>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>ProcessQty_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>RouteOprQtyProcessNumOf</ExtendedDataType>
														<Mandatory>Yes</Mandatory>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>ProcessQty_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS21713</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>TransitTimeGroup</Name>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateTransitTime</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_TransitTime</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>TransitTime_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS14527</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS16311</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>TransitTime_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>RouteOprTimeTransport</ExtendedDataType>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>TransitTime_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS16311</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>QueueAfterGroup</Name>
										<ElementPosition>2113929214</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateQueueAfter</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_QueueAfter</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>QueueAfter_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS14484</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS12576</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>QueueAfter_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>RouteOprTimeQueueAfter</ExtendedDataType>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>QueueAfter_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS12576</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>HoursPerTimeGroup</Name>
										<ElementPosition>2130706430</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateHoursPerTime</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
												<Value>1</Value>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_HoursPerTime</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>HoursPerTime_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS14446</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS10526</Label>
														<LookupButton>Always</LookupButton>
														<Mandatory>Yes</Mandatory>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>HoursPerTime_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>RouteHourFactor</ExtendedDataType>
														<Mandatory>Yes</Mandatory>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>HoursPerTime_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS10526</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<Caption>@SYS22171</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>OverlapTopGroup</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>TransferBatchGroup</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateTransferBatch</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_TransferBatch</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Height>0</Height>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>TransferBatch_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Height>0</Height>
														<HelpText>@SYS88319</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS88318</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>TransferBatch_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Height>0</Height>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>RouteOprQtyTransferBatch</ExtendedDataType>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>TransferBatch_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS88318</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<Caption>@SYS6473</Caption>
							</AxFormControl>
						</Controls>
						<BackgroundColor>WindowBackground</BackgroundColor>
						<Caption>@SYS22171</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ResourceRequirements</Name>
						<ElementPosition>2013265918</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>RequirementSet</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>RequirementSet_Quantity</Name>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_ProductInformationManagement:PCRouteOperationDetails_RequirementSet_Quantity</HelpText>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Quantity</DataField>
										<DataSource>WrkCtrActivityRequirementSet</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>RequirementSet_LoadPercent</Name>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_ProductInformationManagement:PCRouteOperationDetails_RequirementSet_LoadPercent</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>LoadPercent</DataField>
										<DataSource>WrkCtrActivityRequirementSet</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormInt64Control">
										<Name>RequirementSet_Activity</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Int64</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Activity</DataField>
										<DataSource>WrkCtrActivityRequirementSet</DataSource>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<DataGroup>Resources</DataGroup>
								<DataSource>WrkCtrActivityRequirementSet</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Requirements</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Height>0</Height>
								<Pattern>ToolbarList</Pattern>
								<PatternVersion>1.2</PatternVersion>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneControl">
										<Name>ActionPaneRequirements</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ActionPane</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormActionPaneTabControl">
												<Name>ActionPaneTab</Name>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ActionPaneTab</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonGroupControl">
														<Name>ButtonGroup2</Name>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Left>0</Left>
														<Type>ButtonGroup</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormCommandButtonControl">
																<Name>NewRequirement</Name>
																<ElementPosition>1073741822</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>CommandButton</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
																<Command>New</Command>
																<NormalImage>New</NormalImage>
																<Text>@SYS2318</Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormCommandButtonControl">
																<Name>DeleteRequirement</Name>
																<ElementPosition>1610612734</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>CommandButton</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
																<Command>DeleteRecord</Command>
																<MultiSelect>No</MultiSelect>
																<NeedsRecord>Yes</NeedsRecord>
																<NormalImage>Delete</NormalImage>
																<SaveRecord>No</SaveRecord>
																<Text>@SYS311855</Text>
															</AxFormControl>
														</Controls>
														<ArrangeMethod>Vertical</ArrangeMethod>
													</AxFormControl>
												</Controls>
												<AlignChild>No</AlignChild>
												<AlignChildren>No</AlignChildren>
												<ArrangeMethod>Vertical</ArrangeMethod>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
										<HideIfEmpty>No</HideIfEmpty>
										<DataSource>WrkCtrActivityRequirement</DataSource>
										<Style>Strip</Style>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>GridRequirements</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Grid</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>WrkCtrActivityRequirement_RelationshipTypeGrid</Name>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>ComboBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>RelationshipType</DataField>
												<DataSource>WrkCtrActivityRequirement</DataSource>
												<Items />
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>RequirementEditGrid</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_ProductInformationManagement:PCRouteOperationDetails_RequirementEditGrid</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>requirementEdit</DataMethod>
												<DataSource>WrkCtrActivityRequirement</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>WrkCtrActivityRequirement_UsedForOperationScheduling</Name>
												<ElementPosition>1879048190</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_ProductionControl:WrkCtrResourceRequirementPart_WrkCtrActivityRequirement_UsedForOperationScheduling</HelpText>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<BackgroundColor>WindowBackground</BackgroundColor>
												<DataField>UsedForOperationScheduling</DataField>
												<DataSource>WrkCtrActivityRequirement</DataSource>
												<Label>@SYS10062</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>WrkCtrActivityRequirement_UsedForJobScheduling</Name>
												<ElementPosition>2013265918</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_ProductionControl:WrkCtrResourceRequirementPart_WrkCtrActivityRequirement_UsedForJobScheduling</HelpText>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<BackgroundColor>WindowBackground</BackgroundColor>
												<DataField>UsedForJobScheduling</DataField>
												<DataSource>WrkCtrActivityRequirement</DataSource>
												<Label>@SYS16375</Label>
											</AxFormControl>
										</Controls>
										<DataSource>WrkCtrActivityRequirement</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>RequirementDetails</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Pattern>FieldsFieldGroups</Pattern>
										<PatternVersion>1.1</PatternVersion>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>IdentificationDetails</Name>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>WrkCtrActivityRequirement_RelationshipTypeDetails</Name>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>ComboBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>RelationshipType</DataField>
														<DataSource>WrkCtrActivityRequirement</DataSource>
														<Items />
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>RequirementEditDetails</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@FieldDescriptions_ProductInformationManagement:PCRouteOperationDetails_RequirementEditDetails</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>requirementEdit</DataMethod>
														<DataSource>WrkCtrActivityRequirement</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>RequirementDescription</Name>
														<ElementPosition>1879048190</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>requirementDescription</DataMethod>
														<DataSource>WrkCtrActivityRequirement</DataSource>
													</AxFormControl>
												</Controls>
												<Caption>@SYS5711</Caption>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>SchedulingUsage</Name>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>SchedulingUsage_UsedForOperationScheduling</Name>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@FieldDescriptions_ProductionControl:WrkCtrResourceRequirementPart_WrkCtrActivityRequirement_UsedForOperationScheduling</HelpText>
														<Type>CheckBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>UsedForOperationScheduling</DataField>
														<DataSource>WrkCtrActivityRequirement</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>SchedulingUsage_UsedForJobScheduling</Name>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@FieldDescriptions_ProductionControl:WrkCtrResourceRequirementPart_WrkCtrActivityRequirement_UsedForJobScheduling</HelpText>
														<Type>CheckBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>UsedForJobScheduling</DataField>
														<DataSource>WrkCtrActivityRequirement</DataSource>
													</AxFormControl>
												</Controls>
												<DataGroup>SchedulingUsage</DataGroup>
												<DataSource>WrkCtrActivityRequirement</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>CapabilityOptions</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>CapabilityOptions_MinimumLevelNeeded</Name>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>MinimumLevelNeeded</DataField>
														<DataSource>WrkCtrActivityCapabilityRequirement</DataSource>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
												</Controls>
												<DataGroup>Options</DataGroup>
												<DataSource>WrkCtrActivityCapabilityRequirement</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>SkillOptions</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>2013265918</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormReferenceGroupControl">
														<Name>SkillOptions_RatingLevel</Name>
														<FilterExpression>%1</FilterExpression>
														<Type>ReferenceGroup</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>SkillOptions_RatingLevel_RatingLevelId</Name>
																<DataRelationPath>HcmRatingLevel</DataRelationPath>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>String</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>SkillOptions_RatingLevel_HcmRatingModel_RatingModelId</Name>
																<DataRelationPath>HcmRatingLevel.HcmRatingModel</DataRelationPath>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>String</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
															</AxFormControl>
														</Controls>
														<DataSource>WrkCtrActivitySkillRequirement</DataSource>
														<ReferenceField>RatingLevel</ReferenceField>
													</AxFormControl>
												</Controls>
												<DataGroup>Options</DataGroup>
												<DataSource>WrkCtrActivitySkillRequirement</DataSource>
											</AxFormControl>
										</Controls>
										<ColumnsMode>Fill</ColumnsMode>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<Caption>@SYS134222</Caption>
							</AxFormControl>
						</Controls>
						<BackgroundColor>WindowBackground</BackgroundColor>
						<Caption>@SYS134222</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>CommitGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<LeftMode>AutoRight</LeftMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Left>0</Left>
						<LeftMode>RightEdge</LeftMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>