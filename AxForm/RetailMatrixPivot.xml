<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailMatrixPivot</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class RetailMatrixPivot extends FormRun
{
    private RetailIAddChannelItems RetailIAddItemsCallerForm;
    private EcoResProductRecId ProductMasterRecId;
    private CatalogRefRecId CatalogRecId;
    private boolean SelectMode;

    private Array Dimensions;
    private int DimensionsCount = 0;

    private Array DimensionsGroups;

    private int DimensionsOrder[];

    TmpRetailMatrixPivotVariants Variants;

    Decimals copyData;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        Dimensions = new Array(Types::Class);
        DimensionsGroups = new Array(Types::Class);

        RetailIAddItemsCallerForm = element.args().caller() as RetailIAddChannelItems;

        if (!RetailIAddItemsCallerForm || !element.args().record())
        {
            throw error("@RET9001");
        }

        EcoResProductMaster master = element.args().record();
        ProductMasterRecId = master.RecId;

        if (element.args().parm())
        {
            CatalogRecId = Catalog::FindByCatalogId(element.args().parm()).RecId;
        }

        SelectMode = !RetailIAddItemsCallerForm.showHideQtyColumn();
        boolean global = RetailIAddItemsCallerForm.showGlobalVariants();

        element.design().caption(strFmt("@RET260555", master.productName()));

        ListEnumerator dimensionsEnumerator = this.GetVariantsAndProductDimensionsByCatalog(ProductMasterRecId, global, CatalogRecId);
        while (dimensionsEnumerator.moveNext())
        {
            DimensionsCount++;
            RetailMatrixPivotDimension dimension = dimensionsEnumerator.current();
            Dimensions.value(DimensionsCount, dimension);
            DimensionsOrder[DimensionsCount] = DimensionsCount;
        }

        if (SelectMode)
        {
            SelectValueButtonGroup.visible(true);
            VariantMatrix.setInputType(RetailMatrixInputType::Checkbox);
        }
        else
        {
            CopyPasteValueButtonGroup.visible(true);
            VariantMatrix.setInputType(RetailMatrixInputType::Text);
        }

        this.InitDimensionsGroupControls();
        this.GenerateVariantsTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetVariantsAndProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the product dimensions list enumerator for product.
    /// </summary>
    /// <param name = "_ecoResProductRecId">The product's <c>RecId</c>.</param>
    /// <param name = "_global">Show global product variants.</param>
    /// <returns>Dimension list enumerator.</returns>
    [Wrappable(true)]
    protected final ListEnumerator GetVariantsAndProductDimensions(EcoResProductRecId _ecoResProductRecId, boolean _global)
    {
        return this.GetVariantsAndProductDimensionsByCatalog(_ecoResProductRecId, _global, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetVariantsAndProductDimensionsByCatalog</Name>
				<Source><![CDATA[
    private final ListEnumerator GetVariantsAndProductDimensionsByCatalog(EcoResProductRecId _ecoResProductRecId, boolean _global, CatalogRefRecId _catalogRecId)
    {
        Variants = RetailMatrixPivotDimensionFactory::GetVariantsByCatalog(_ecoResProductRecId, _global, _catalogRecId);

        ListEnumerator dimensionsEnumerator = RetailMatrixPivotDimensionFactory::GetProductDimensions(_ecoResProductRecId, _global);

        return dimensionsEnumerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InitDimensionsGroupControls</Name>
				<Source><![CDATA[
    private void InitDimensionsGroupControls()
    {
        for (int dimensionIndex = 1; dimensionIndex <= DimensionsCount; ++dimensionIndex)
        {
            this.InitDimensionGroup(dimensionIndex);

            if (DimensionsCount > 1)
            {
                this.InitDimensionComboBox(dimensionIndex);
            }

            this.InitDimensionValuesGroup(dimensionIndex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InitDimensionGroup</Name>
				<Source><![CDATA[
    private void InitDimensionGroup(int _dimensionIndex)
    {
        FormGroupControl dimensionGroup = DimensionsGroup.addControl(FormControlType::Group, strfmt("DimensionGroup_%1", _dimensionIndex));
        dimensionGroup.breakable(false);
        DimensionsGroups.value(_dimensionIndex, dimensionGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>InitDimensionComboBox</Name>
				<Source><![CDATA[
    private void InitDimensionComboBox(int _dimensionIndex)
    {
        FormGroupControl dimensionGroup = DimensionsGroups.value(_dimensionIndex);
        dimensionGroup.height(200);
        FormComboBoxControl dimensionComboBox = dimensionGroup.addControl(FormControlType::ComboBox, strfmt("DimensionComboBox_%1", _dimensionIndex));

        for (int currentDimension = 1; currentDimension <= DimensionsCount; ++currentDimension)
        {
            RetailMatrixPivotDimension dimension = this.GetDimension(currentDimension);
            dimensionComboBox.add(dimension.GetName());
        }

        int selectedValueIndex = _dimensionIndex - 1;

        RetailMatrixPivotDimensionComboBoxViewModel dimensionComboBoxViewModel = new RetailMatrixPivotDimensionComboBoxViewModel(selectedValueIndex);
        dimensionComboBox.registerOverrideMethod(methodstr(FormComboBoxControl, Modified), methodstr(RetailMatrixPivotDimensionComboBoxViewModel, SelectionChanged), dimensionComboBoxViewModel);
        dimensionComboBoxViewModel.SwapDimensions += eventhandler(this.SwapDimensions);
        dimensionComboBox.selection(selectedValueIndex);
    }

]]></Source>
			</Method>
			<Method>
				<Name>InitDimensionValuesGroup</Name>
				<Source><![CDATA[
    private void InitDimensionValuesGroup(int _dimensionIndex)
    {
        FormGroupControl dimensionGroup = DimensionsGroups.value(_dimensionIndex);
        dimensionGroup.height(200);
        RetailMatrixPivotDimension dimension = this.GetDimension(_dimensionIndex);
        int dimensionValuesCount = dimension.GetValuesCount();

        FormCheckBoxControl selectAllValuesComboBox = dimensionGroup.addControl(FormControlType::CheckBox, strfmt("DimensionValueSelectAllCheckBox_%1", _dimensionIndex));
        selectAllValuesComboBox.label("@SYS28958");
        selectAllValuesComboBox.checked(true);
        selectAllValuesComboBox.style(1);

        List dimensionValuesCheckBoxes = new List(Types::Class);
        for (int dimensionValueIndex = 1; dimensionValueIndex <= dimensionValuesCount; ++dimensionValueIndex)
        {
            FormCheckBoxControl dimensionValueCheckBox = dimensionGroup.addControl(FormControlType::CheckBox, strfmt("DimensionValueCheckBox_%1_%2", _dimensionIndex, dimensionValueIndex));
            dimensionValuesCheckBoxes.addEnd(dimensionValueCheckBox);

            str dimensionValue = dimension.GetValue(dimensionValueIndex);
            dimensionValueCheckBox.label(dimensionValue);
            dimensionValueCheckBox.checked(true);
            dimensionValueCheckBox.style(1);
        }

        RetailMatrixPivotDimensionValuesGroupViewModel dimensionValuesGroupViewModel = new RetailMatrixPivotDimensionValuesGroupViewModel(selectAllValuesComboBox, dimensionValuesCheckBoxes);
        dimensionValuesGroupViewModel.EnableDimensionValue += eventhandler(dimension.EnableValue);
        dimensionValuesGroupViewModel.DisableDimensionValue += eventhandler(dimension.DisableValue);
        dimensionValuesGroupViewModel.GenerateVariantsTable += eventhandler(this.GenerateVariantsTable);
        dimensionValuesGroupViewModel.UpdateForDimensions += eventhandler(this.UpdateForDimensions);
        dimensionValuesGroupViewModel.UpdateAllforDimension += eventhandler(this.UpdateAllforDimension);

        selectAllValuesComboBox.registerOverrideMethod(methodstr(FormCheckBoxControl, modified), methodstr(RetailMatrixPivotDimensionValuesGroupViewModel, OnSelectAllChanged), dimensionValuesGroupViewModel);
        ListEnumerator dimensionValuesCheckBoxesEnumerator = dimensionValuesCheckBoxes.getEnumerator();
        while (dimensionValuesCheckBoxesEnumerator.moveNext())
        {
            FormCheckBoxControl dimensionValueCheckBox = dimensionValuesCheckBoxesEnumerator.current();
            dimensionValueCheckBox.registerOverrideMethod(methodstr(FormCheckBoxControl, modified), methodstr(RetailMatrixPivotDimensionValuesGroupViewModel, OnDimensionValueCheckBoxChanged), dimensionValuesGroupViewModel);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GenerateVariantsTable</Name>
				<Source><![CDATA[
    private void GenerateVariantsTable()
    {
        VariantMatrix.clear();

        if (this.IsMultidimensional())
        {
            this.GenerateMultidimensionalVariantsTable();
        }
        else
        {
            this.GenerateSingleDimensionalVariantsTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GenerateSingleDimensionalVariantsTable</Name>
				<Source><![CDATA[
    private void GenerateSingleDimensionalVariantsTable()
    {
        RetailMatrixPivotDimension dimension = this.GetDimension(1);

        VariantMatrix.parmRowLabelColumnHeading(1, dimension.GetName());
        VariantMatrix.parmDataColumnHeading(1, selectMode ? "@SYS24159" : "@SYS323968");

        int dimensionValuesCount = dimension.GetValuesCount();
        for (int dimensionValueIndex = 1; dimensionValueIndex <= dimensionValuesCount; ++dimensionValueIndex)
        {
            int rowIndex = dimensionValueIndex;

            str dimensionValue = dimension.GetValue(dimensionValueIndex);
            VariantMatrix.parmRowLabel(rowIndex, 1, dimensionValue);

            int variantValue = this.GetVariantValue(1, dimensionValueIndex);
            VariantMatrix.setDataCellValue(rowIndex, 1, variantValue);

            if (!this.VariantExists(1, rowIndex))
            {
                VariantMatrix.setDataCellDisabled(rowIndex, 1, true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GenerateMultidimensionalVariantsTable</Name>
				<Source><![CDATA[
    protected void GenerateMultidimensionalVariantsTable()
    {
        int rowsCount = 1;
        int totalColumnValue = 0;
        int totalRowValue = 0;
        int grandTotal = 0; // appears in first dimension name followed by a parenthesis.

        for (int dimensionIndex = 1; dimensionIndex < DimensionsCount; ++dimensionIndex)
        {
            // Set all of the dimension column headers (excluding the last dimension) and compute total number of rows...
            RetailMatrixPivotDimension dimension = this.GetDimension(dimensionIndex);

            // Set column name on first row with the dimension name
            var dimensionName = dimension.GetName();
            VariantMatrix.parmRowLabelColumnHeading(dimensionIndex, dimensionName);

            // Compute rowsCount (excluding last column)
            rowsCount = rowsCount * dimension.GetValuesCount();
        }

        // Information for the last dimension - columns expanded for each value
        RetailMatrixPivotDimension lastDimension = this.GetDimension(DimensionsCount);
        int lastDimensionValuesCount = lastDimension.GetValuesCount();
        for (int dimensionValueIndex = 1; dimensionValueIndex <= lastDimensionValuesCount; ++dimensionValueIndex)
        {
            // Caculates the total value for the column.
            for (int rowIndex = 1; rowIndex <= rowsCount; ++rowIndex)
            {
                if (element.VariantExists(dimensionValueIndex, rowIndex))
                {
                    int variantValue = this.GetVariantValue(dimensionValueIndex, rowIndex);
                    totalColumnValue += variantValue;
                }
            }
            // Set column name on first row with the expanded name for each item in the dimension
            str dimensionValue = lastDimension.GetValue(dimensionValueIndex);
            VariantMatrix.parmDataColumnHeading(dimensionValueIndex, strFmt('%1 (%2)', dimensionValue, totalColumnValue));
            totalColumnValue = 0;
        }

        for (int rowIndex = 1; rowIndex <= rowsCount; ++rowIndex)
        {
            for (int dimensionValueIndex = 1; dimensionValueIndex <= lastDimensionValuesCount; ++dimensionValueIndex)
            {
                if (this.VariantExists(dimensionValueIndex, rowIndex))
                {
                    int variantValue = this.GetVariantValue(dimensionValueIndex, rowIndex);
                    totalRowValue += variantValue;
                    VariantMatrix.setDataCellValue(rowIndex, dimensionValueIndex, variantValue);
                }
                else
                {
                    VariantMatrix.setDataCellValue(rowIndex, dimensionValueIndex, 0);
                    // Mark the field as disabled.
                    VariantMatrix.setDataCellDisabled(rowIndex, dimensionValueIndex, true);
                }
            }

            for (int dimensionIndex = 1; dimensionIndex < DimensionsCount; ++dimensionIndex)
            {
                if (dimensionIndex == 1)
                {
                    // First dimension column should display the total values.
                    VariantMatrix.parmRowLabel(rowIndex, dimensionIndex, strFmt('%1 (%2)', this.getDimensionValue(dimensionIndex, rowIndex), totalRowValue));
                }
                else
                {
                    VariantMatrix.parmRowLabel(rowIndex, dimensionIndex, this.getDimensionValue(dimensionIndex, rowIndex));
                }
            }
            grandTotal += totalRowValue;
            totalRowValue = 0;
        }

        // First row label column heading should have grand total enclosed in parenthesis.
        VariantMatrix.parmRowLabelColumnHeading(1, strFmt('%1 (%2)', this.getFirstDimensionName(), grandTotal));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstDimensionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first dimension name in variant matrix.
    /// </summary>
    /// <returns>
    /// The first dimension name in variant matrix.
    /// </returns>
    private Name getFirstDimensionName()
    {
        RetailMatrixPivotDimension dimension = this.GetDimension(1);
        // Set column name on first row with the dimension name
        var dimensionName = dimension.GetName();

        return dimensionName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetDimension</Name>
				<Source><![CDATA[
    private RetailMatrixPivotDimension GetDimension(int _index)
    {
        if (_index < 1 || _index > DimensionsCount)
        {
            throw error("@RET9000");
        }

        return Dimensions.value(DimensionsOrder[_index]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetVariantValue</Name>
				<Source><![CDATA[
    protected int GetVariantValue(int _column, int _row)
    {
        str dimensionsCombination = this.GetVariantDimensionsCombination(_column, _row);

        select firstonly Value from Variants where Variants.DimensionsCombination == dimensionsCombination;

        if (!Variants)
        {
            throw error("@RET9003");
        }

        return Variants.Value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetVariantValue</Name>
				<Source><![CDATA[
    private void SetVariantValue(int _column, int _row, int _value)
    {
        str dimensionsCombination = this.GetVariantDimensionsCombination(_column, _row);

        update_recordset Variants
        setting Value = _value
        where Variants.DimensionsCombination == dimensionsCombination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>VariantExists</Name>
				<Source><![CDATA[
    private boolean VariantExists(int _column, int _row)
    {
        str dimensionsCombination = this.GetVariantDimensionsCombination(_column, _row);

        select firstonly RecId from Variants
            where Variants.DimensionsCombination == dimensionsCombination && Variants.IsAvailable == NoYes::Yes;

        return Variants.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets dimension value corresponding to the _rowIndex.
    /// </summary>
    /// <param name = "_dimensionIndex">The index of dimension.</param>
    /// <param name = "_rowIndex">The index of row.</param>
    /// <returns>Dimension value corresponding to the _rowIndex.</returns>
    private str getDimensionValue(int _dimensionIndex, int _rowIndex)
    {
        RetailMatrixPivotDimension dimension = this.GetDimension(_dimensionIndex);
        return dimension.GetValue(this.getDimensionValueIndex(_dimensionIndex, _rowIndex));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionValueRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets dimension value recid corresponding to the _rowIndex.
    /// </summary>
    /// <param name = "_dimensionIndex">The index of dimension.</param>
    /// <param name = "_rowIndex">The index of row.</param>
    /// <returns>Dimension value recid corresponding to the _rowIndex.</returns>
    private RecId getDimensionValueRecId(int _dimensionIndex, int _rowIndex)
    {
        RetailMatrixPivotDimension dimension = this.GetDimension(_dimensionIndex);
        return dimension.GetValueRecId(this.getDimensionValueIndex(_dimensionIndex, _rowIndex));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionValueIndex</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the index of the dimension value, which should be shown in the row specified by the row index.
    /// </summary>
    /// <param name = "_dimensionIndex">The index of the dimension in the current dimension order.</param>
    /// <param name = "_rowIndex">The index of the row.</param>
    /// <returns>The index of dimension value. 0 in the case where no value should be shown.</returns>
    private int getDimensionValueIndex(int _dimensionIndex, int _rowIndex)
    {
        if (_rowIndex <= 0)
        {
            return 0;
        }
        else
        {
            RetailMatrixPivotDimension dimension = this.GetDimension(_dimensionIndex);
            int rowsPerValue;

            if (_dimensionIndex + 1 == DimensionsCount)
            {
                // Reached last dimension whose values needs to be shown vertically.
                rowsPerValue = 1;
            }
            else
            {
                // Example:
                // A0 B0
                // A0 B1
                // Rows per value for dimension A is equal
                // to the combination of dimension values that come after i.e (B).getValueCount().
                rowsPerValue = this.calculateCombinationsCount(_dimensionIndex + 1, DimensionsCount - 1);
            }

            int zeroBasedRowIndex = _rowIndex - 1;
            int zeroBasedValueIndex = (zeroBasedRowIndex div rowsPerValue) mod dimension.GetValuesCount();
            int oneBasedValueIndex = zeroBasedValueIndex + 1;
            return oneBasedValueIndex;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCombinationsCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates all the combinations that can be generated from the sequence of dimensions
    /// starting from the _dimensionIndexFrom dimension and ending at _dimensionIndexTo dimension.
    /// </summary>
    /// <param name = "_dimensionIndexFrom">The dimension index to start from.</param>
    /// <param name = "_dimensionIndexTo">The dimension index to end on.</param>
    /// <returns></returns>
    private int calculateCombinationsCount(int _dimensionIndexFrom, int _dimensionIndexTo)
    {
        if (_dimensionIndexFrom <= 0 ||
            _dimensionIndexTo < _dimensionIndexFrom ||
            _dimensionIndexFrom > _dimensionIndexTo ||
            _dimensionIndexTo > DimensionsCount)
        {
            return 0;
        }

        int combinations = 1;

        for (int dimensionIndex = _dimensionIndexFrom; dimensionIndex <= _dimensionIndexTo; ++dimensionIndex)
        {
            RetailMatrixPivotDimension dimension = this.GetDimension(dimensionIndex);
            combinations = combinations * dimension.GetValuesCount();
        }

        return combinations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetVariantDimensionsCombination</Name>
				<Source><![CDATA[
    private str GetVariantDimensionsCombination(int _column, int _row)
    {
        str dimensionsCombination = '';

        if (_column <= 0 || _row <= 0)
        {
            return dimensionsCombination;
        }

        RecId dimensionCombinationRecIds[DimensionsCount];

        if (this.IsMultidimensional())
        {
            for (int dimensionIndex = 1; dimensionIndex < DimensionsCount; ++dimensionIndex)
            {
                dimensionCombinationRecIds[DimensionsOrder[dimensionIndex]] = this.getDimensionValueRecId(dimensionIndex, _row);
            }
        }

        RetailMatrixPivotDimension lastDimension = this.GetDimension(DimensionsCount);
        RecId dimensionValueRecId = lastDimension.GetValueRecId(this.IsMultidimensional() ? _column : _row);
        dimensionCombinationRecIds[DimensionsOrder[DimensionsCount]] = dimensionValueRecId;

        for (int dimensionIndex = 1; dimensionIndex <= DimensionsCount; ++dimensionIndex)
        {
            dimensionsCombination += strfmt('%1;', dimensionCombinationRecIds[dimensionIndex]);
        }

        return dimensionsCombination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SwapDimensions</Name>
				<Source><![CDATA[
    private void SwapDimensions(int _firstDimensionIndex, int _secondDimensionIndex)
    {
        int firstDimensionOrderedIndex = -1;
        for (int dimensionIndex = 1; dimensionIndex <= DimensionsCount; ++dimensionIndex)
        {
            if (DimensionsOrder[dimensionIndex] == _firstDimensionIndex)
            {
                firstDimensionOrderedIndex = dimensionIndex;
                break;
            }
        }

        int secondDimensionOrderedIndex = -1;
        for (int dimensionIndex = 1; dimensionIndex <= DimensionsCount; ++dimensionIndex)
        {
            if (DimensionsOrder[dimensionIndex] == _secondDimensionIndex)
            {
                secondDimensionOrderedIndex = dimensionIndex;
                break;
            }
        }

        if (firstDimensionOrderedIndex == -1 || secondDimensionOrderedIndex == -1)
        {
            throw error("@RET9001");
        }

        DimensionsOrder[firstDimensionOrderedIndex] = _secondDimensionIndex;
        DimensionsOrder[secondDimensionOrderedIndex] = _firstDimensionIndex;

        this.ReorderDimensionGroups();
        this.GenerateVariantsTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReorderDimensionGroups</Name>
				<Source><![CDATA[
    private void ReorderDimensionGroups()
    {
        FormGroupControl afterGroup = DimensionsGroups.value(DimensionsOrder[1]);
        DimensionsGroup.moveControl(afterGroup.id());

        for (int currentGroupIndex = 2; currentGroupIndex <= DimensionsCount; ++currentGroupIndex)
        {
            FormGroupControl currentGroup = DimensionsGroups.value(DimensionsOrder[currentGroupIndex]);

            DimensionsGroup.moveControl(currentGroup.id(), afterGroup.id());
            afterGroup = currentGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsMultidimensional</Name>
				<Source><![CDATA[
    private boolean IsMultidimensional()
    {
        return DimensionsCount > 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateForDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update dimension attibute values
    /// There are following scenarios:
    /// 1. Swaping the dimensions and then unselecting the dimension value checboxes
    /// 2. Whether the product is multi or single dimensional
    /// 3. In multidimensional product whether rows/columns have to be checked /unchecked
    /// 4. For select all in all dimension groups
    /// 5. For select all in single dimension group
    /// </summary>
    /// <param name="dimensionIndex">DimensionIndex For Variant</param>
    /// <param name="_dimensionValue">Dimension Variant Label</param>
    private void UpdateForDimensions(int dimensionIndex, str _dimensionValue)
    {
        // get current index for selected dimension attribute
        // This loop will calculate the new dimension index for the scenario when we swap the dimensions
        for (int dimensionIndexCounter = 1; dimensionIndexCounter <= DimensionsCount; dimensionIndexCounter++)
        {
            // get dimensionIndex of current dimension
            if (DimensionsOrder[dimensionIndexCounter] == dimensionIndex)
            {
                dimensionIndex = dimensionIndexCounter;
                break;
            }
        }

        // check dimensionIndex & DimensionsCount value to set attribute values for current attribute value
        if (dimensionIndex == DimensionsCount)
        {
            // check for Multidimensional
            if (this.IsMultidimensional())
            {
                this.columnUpdateForDimensions(_dimensionValue);
            }
            else
            {
                this.rowUpdateForDimensions(dimensionIndex, _dimensionValue);
            }
        }
        else
        {
            this.rowUpdateForDimensions(dimensionIndex, _dimensionValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateAllforDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset all dimension attribute values on SelectAll option
    /// </summary>
    /// <param name="setvalue">Dimension attribute value</param>
    private void UpdateAllforDimension(int setvalue)
    {
        for (int rowCounter = 1; rowCounter <= VariantMatrix.getDataRowCount(); rowCounter++)
        {
            for (int columnCounter = 1; columnCounter <= VariantMatrix.getDataColumnCount(); columnCounter++)
            {
                this.SetVariantValue(columnCounter, rowCounter, setValue);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnUpdateForDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update dimension attibute values for columns
    /// </summary>
    /// <param name="_dimensionValue">Dimension value.</param>
    private void columnUpdateForDimensions(str _dimensionValue)
    {
        for (int columnCounter = 1; columnCounter <= VariantMatrix.getDataColumnCount(); columnCounter++)
        {
            // the dimension value at the current data column.
            str dimensionValue = VariantMatrix.parmDataColumnHeading(columnCounter);
            dimensionValue = subStr(dimensionValue, 0, strFind(dimensionValue, '(', 0, strLen(dimensionValue)) - 2); // fetches the dimension value as the column heading is concatenated with total values enclosed in ().

            if (dimensionValue == _dimensionValue)
            {
                for (int rowCounter = 1; rowCounter <= VariantMatrix.getDataRowCount(); rowCounter++)
                {
                    // Set the quantity to 0 for the current variant combination
                    // in order to exclude it from the list of products.
                    this.SetVariantValue(columnCounter, rowCounter, 0);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rowUpdateForDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update dimension attibute values for rows
    /// </summary>
    /// <param name="dimensionIndex">Dimension Index For Attribute</param>
    /// <param name="_dimensionValue">Dimension Attribute Label</param>
    private void rowUpdateForDimensions(int dimensionIndex, str _dimensionValue)
    {
        for (int rowCounter = 1; rowCounter <= VariantMatrix.getDataRowCount(); rowCounter++)
        {
            // the dimension value at the current row and column (dimensionIndex)
            str dimensionValue = VariantMatrix.parmRowLabel(rowCounter, dimensionIndex);

            if (strFind(dimensionValue, '(', 0, strLen(dimensionValue)))
            {
                dimensionValue = subStr(dimensionValue, 0, strFind(dimensionValue, '(', 0, strLen(dimensionValue)) - 2); // fetches the dimension value as the column heading is concatenated with total values enclosed in ().
            }

            if (dimensionValue == _dimensionValue)
            {
                for (int columnCounter = 1; columnCounter <= VariantMatrix.getDataColumnCount(); columnCounter++)
                {
                    // Set the quantity to 0 for the current variant combination
                    // in order to exclude it from the list of products.
                    this.SetVariantValue(columnCounter, rowCounter, 0);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update all cells in a given row.
    /// </summary>
    /// <param name="setValue"></param>
    private void updateRow(int _rowIndex, Decimals _setValue)
    {
        for (int column = 1; column <= VariantMatrix.getDataColumnCount(); ++column)
        {
            if (!VariantMatrix.getDataCellDisabled(_rowIndex, column))
            {
                VariantMatrix.setDataCellValue(_rowIndex, column, _setValue);
                this.SetVariantValue(column, _rowIndex, _setValue);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateColumn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update all cells in a given column.
    /// </summary>
    /// <param name="setValue"></param>
    private void updateColumn(int _columnIndex, Decimals _setValue)
    {
        for (int row = 1; row <= VariantMatrix.getDataRowCount(); ++row)
        {
            if (!VariantMatrix.getDataCellDisabled(row, _columnIndex))
            {
                VariantMatrix.setDataCellValue(row, _columnIndex, _setValue);
                element.SetVariantValue(_columnIndex, row, _setValue);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update all visible cells.
    /// </summary>
    /// <param name="_setValue"></param>
    private void updateAll(Decimals _setValue)
    {
        for (int row = 1; row <= VariantMatrix.getDataRowCount(); ++row)
        {
            for (int column = 1; column <= VariantMatrix.getDataColumnCount(); ++column)
            {
                if (!VariantMatrix.getDataCellDisabled(row, column))
                {
                    VariantMatrix.setDataCellValue(row, column, _setValue);
                    element.SetVariantValue(column, row, _setValue);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRowColumnTotalOnCellModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates row and column total of the modified cell.
    /// </summary>
    /// <param name = "_row">The row index.</param>
    /// <param name = "_column">The column index.</param>
    private void calculateRowColumnTotalOnCellModified(int _row, int _column)
    {
        int rowsCount = 1;
        int totalColumnValue = 0;
        int totalRowValue = 0;
        int grandTotal = 0; // appears in first dimension name followed by a parenthesis.

        if (element.IsMultidimensional())
        {
            for (int dimensionIndex = 1; dimensionIndex < DimensionsCount; ++dimensionIndex)
            {
                RetailMatrixPivotDimension dimension = element.GetDimension(dimensionIndex);
                rowsCount = rowsCount * dimension.GetValuesCount();
            }

            RetailMatrixPivotDimension lastDimension = element.GetDimension(DimensionsCount);
            int lastDimensionValuesCount = lastDimension.GetValuesCount();
            for (int dimensionValueIndex = 1; dimensionValueIndex <= lastDimensionValuesCount; ++dimensionValueIndex)
            {
                if (element.VariantExists(dimensionValueIndex, _row))
                {
                    totalRowValue += VariantMatrix.getDataCellValue(_row, dimensionValueIndex);
                }
            }
            VariantMatrix.parmRowLabel(_row, 1, strFmt('%1 (%2)', element.getDimensionValue(1, _row), totalRowValue));

            for (int rowIndex = 1; rowIndex <= rowsCount; ++rowIndex)
            {
                if (element.VariantExists(_column, rowIndex))
                {
                    int variantValue = element.GetVariantValue(_column, rowIndex);
                    totalColumnValue += variantValue;
                }
            }
            str dimensionValue = lastDimension.GetValue(_column);
            VariantMatrix.parmDataColumnHeading(_column, strFmt('%1 (%2)', dimensionValue, totalColumnValue));

            // Calculates total variant value for entire matrix.
            for (int rowIndex = 1; rowIndex <= rowsCount; ++rowIndex)
            {
                totalRowValue = 0;
                for (int dimensionValueIndex = 1; dimensionValueIndex <= lastDimensionValuesCount; ++dimensionValueIndex)
                {
                    if (this.VariantExists(dimensionValueIndex, rowIndex))
                    {
                        int variantValue = this.GetVariantValue(dimensionValueIndex, rowIndex);
                        totalRowValue += variantValue;
                    }
                }
                grandTotal += totalRowValue;
            }

            // First row label column heading should have grand total enclosed in parenthesis.
            VariantMatrix.parmRowLabelColumnHeading(1, strFmt('%1 (%2)', element.getFirstDimensionName(), grandTotal));
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>Copy</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            int row, column;
            [row, column, copydata] = VariantMatrix.getActiveCell();
            PasteValueMenuButton.enabled(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PasteValueMenuButton</Name>
				<Type>MenuButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when the drop down menu is clicked.
        /// </summary>
        public void clicked()
        {
            super();

            if (VariantMatrix.getActiveColumnIndex())
            {
                PasteToRows.enabled(true);
            }
            else
            {
                PasteToRows.enabled(false);
            }

            if (VariantMatrix.getActiveRowIndex())
            {
                PasteToColumns.enabled(true);
            }
            else
            {
                PasteToColumns.enabled(false);
            }

            int rowIndex, columnIndex;
            [rowIndex, columnIndex] = VariantMatrix.getActiveCell();
            if (rowIndex <= 0 || columnIndex <= 0)
            {
                Paste.enabled(false);
            }
            else
            {
                Paste.enabled(true);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Paste</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            int row, column, value;
            [row, column, value] = VariantMatrix.getActiveCell();

            VariantMatrix.setDataCellValue(row, column, copyData);
            element.SetVariantValue(column, row, copyData);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PasteToAll</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            element.updateAll(copyData);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PasteToColumns</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            int rowIndex = VariantMatrix.getActiveRowIndex();

            if (rowIndex <= 0)
            {
                throw Global::error("@Retail:RowNotSelected");
            }

            element.updateRow(rowIndex, copyData);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PasteToRows</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            int columnIndex = VariantMatrix.getActiveColumnIndex();

            if (columnIndex <= 0)
            {
                throw Global::error("@Retail:ColumnNotSelected");
            }

            element.updateColumn(columnIndex, copyData);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SelectValueMenuButton</Name>
				<Type>MenuButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            boolean anySelected = false;
            boolean anySelectedCurrentRow = false;
            boolean anySelectedCurrentColumn = false;
            boolean anyDeselected = false;
            boolean anyDeselectedCurrentRow = false;
            boolean anyDeselectedCurrentColumn = false;

            int currentRow = VariantMatrix.getActiveRowIndex();
            int currentColumn = VariantMatrix.getActiveColumnIndex();

            for (int row = 1; row <= VariantMatrix.getDataRowCount(); ++row)
            {
                for (int column = 1; column <= VariantMatrix.getDataColumnCount(); ++column)
                {
                    int value = VariantMatrix.getDataCellValue(row, column);

                    if (value == 1)
                    {
                        anySelected = true;

                        if (row == currentRow)
                        {
                            anySelectedCurrentRow = true;
                        }

                        if (column == currentColumn)
                        {
                            anySelectedCurrentColumn = true;
                        }
                    }
                    else
                    {
                        anyDeselected = true;

                        if (row == currentRow)
                        {
                            anyDeselectedCurrentRow = true;
                        }

                        if (column == currentColumn)
                        {
                            anyDeselectedCurrentColumn = true;
                        }
                    }
                }
            }

            SelectAll.enabled(anyDeselected);
            SelectColumn.enabled(anyDeselectedCurrentColumn);
            SelectRow.enabled(anyDeselectedCurrentRow);

            DeselectAll.enabled(anySelected);
            DeselectColumn.enabled(anySelectedCurrentColumn);
            DeselectRow.enabled(anySelectedCurrentRow);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SelectAll</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.updateAll(1);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SelectRow</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            int row = VariantMatrix.getActiveRowIndex();
            element.updateRow(row, 1);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SelectColumn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            int column = VariantMatrix.getActiveColumnIndex();
            element.updateColumn(column, 1);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DeselectAll</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.updateAll(0);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DeselectRow</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            int row = VariantMatrix.getActiveRowIndex();
            element.updateRow(row, 0);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DeselectColumn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            int column = VariantMatrix.getActiveColumnIndex();
            element.updateColumn(column, 0);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>VariantMatrix</Name>
				<Type>Custom</Type>
				<Methods>
					<Method>
						<Name>cellModified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when cell is modified.
        /// </summary>
        /// <param name = "_row">The row index.</param>
        /// <param name = "_column">The column index.</param>
        /// <param name = "_value">The value of the cell.</param>
        public void cellModified(int _row, int _column, int _value)
        {
            super(_row, _column, _value);
            element.SetVariantValue(_column, _row, _value);
            element.calculateRowColumnTotalOnCellModified(_row, _column);
        }

]]></Source>
					</Method>
					<Method>
						<Name>cellActivated</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when cell is made active.
        /// </summary>
        /// <param name = "_row">The row index.</param>
        /// <param name = "_column">The column index.</param>
        public void cellActivated(int _row, int _column)
        {
            super(_row, _column);

            if (_row <= 0 || _column <= 0)
            {
                Copy.enabled(false);
            }
            else
            {
                Copy.enabled(true);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OKCommandButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            while select Variants
                where Variants.Value != 0
            {
                RetailIAddItemsCallerForm.insertIntoTmpProductsToAdd(ProductMasterRecId, Variants.Variant, Variants.Value);
            }

            RetailIAddItemsCallerForm.refreshDS();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@RET260564</Caption>
		<DialogSize xmlns="">Full</DialogSize>
		<Height xmlns="">400</Height>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Width xmlns="">500</Width>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>StaticTextMsg</Name>
				<ElementPosition>477218588</ElementPosition>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<FilterExpression>%1</FilterExpression>
				<Type>StaticText</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Text>@Retail:RetailMatrixPivotStaticText</Text>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ContentGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>DimensionsGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>CustomFilters</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>Group</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<Breakable>No</Breakable>
						<FrameType>None</FrameType>
						<Style>CustomFilter</Style>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneControl">
						<Name>FormActionPaneControl</Name>
						<Type>ActionPane</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>CopyPasteValueButtonGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ButtonGroup</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>Copy</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Enabled>No</Enabled>
										<HelpText>@FieldDescriptions_RetailMain:RetailMatrixPivot_Copy</HelpText>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@RET490481</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonSeparatorControl">
										<Name>FormButtonSeparatorControl</Name>
										<Type>ButtonSeparator</Type>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuButtonControl">
										<Name>PasteValueMenuButton</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Enabled>No</Enabled>
										<Type>MenuButton</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>Paste</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HelpText>@FieldDescriptions_RetailMain:RetailMatrixPivot_Paste</HelpText>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@RET490482</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>PasteToAll</Name>
												<HelpText>@FieldDescriptions_RetailMain:RetailMatrixPivot_PasteToAll</HelpText>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@RET490483</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>PasteToColumns</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HelpText>@FieldDescriptions_RetailMain:RetailMatrixPivot_PasteToColumns</HelpText>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@RET490484</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>PasteToRows</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HelpText>@FieldDescriptions_RetailMain:RetailMatrixPivot_PasteToRows</HelpText>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@RET490485</Text>
											</AxFormControl>
										</Controls>
										<Text>@Retail:MatrixPivotPasteValue</Text>
									</AxFormControl>
								</Controls>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>SelectValueButtonGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ButtonGroup</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuButtonControl">
										<Name>SelectValueMenuButton</Name>
										<Type>MenuButton</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>SelectAll</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS28958</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>SelectRow</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@RET490479</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>SelectColumn</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@RET490480</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>DeselectAll</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Enabled>No</Enabled>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS57284</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>DeselectRow</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Enabled>No</Enabled>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@RET4160428</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>DeselectColumn</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Enabled>No</Enabled>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@RET4160429</Text>
											</AxFormControl>
										</Controls>
										<Text>@Retail:MatrixPivotSelectValue</Text>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Style>Strip</Style>
					</AxFormControl>
					<AxFormControl>
						<Name>VariantMatrix</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<HeightMode>SizeToAvailable</HeightMode>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension>
							<Name>RetailMatrix</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>matrixInputType</Name>
									<Type>Enum</Type>
									<TypeName>RetailMatrixInputType</TypeName>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>CommitContainer</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKCommandButton</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Alignment>Center</Alignment>
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelCommandButton</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>