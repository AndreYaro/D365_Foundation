<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>NettingAutomationPreviewInvoiceDetailDialog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class NettingAutomationPreviewInvoiceDetailDialog extends FormRun
{
    private NettingAutomationPreviewTmp previewTmp;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        Args args = element.args();
        if (args && args.record())
        {
            previewTmp = args.record();
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        super();

        boolean isVend = previewTmp.AccountType == LedgerJournalACType::Vend;
        element.design().caption(strFmt('%1 - %2', previewTmp.NettingPair, isVend ? "@CashManagement:VendorInvoiceDetails" : "@CashManagement:CustomerInvoiceDetails"));
        QueryBuildDataSource transMarkedQbds = CustVendNettingTransMarked_ds.queryBuildDataSource();
        transMarkedQbds.addRange(fieldNum(CustVendNettingTransMarked, CustVendNettingExecution)).value(queryValue(previewTmp.ExecutionRecId));
        str refTableRange = isVend ? queryValue(tableNum(VendTransOpen)) : SysQuery::valueNot(tableNum(VendTransOpen));
        transMarkedQbds.addRange(fieldNum(CustVendNettingTransMarked, RefTableId)).value(refTableRange);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>CustVendNettingTransMarked</Name>
				<Methods>
					<Method>
						<Name>diplayInvoiceCurrency</Name>
						<Source><![CDATA[
        internal display CurrencyCode diplayInvoiceCurrency(CustVendNettingTransMarked _custVendNettingTransMarked)
        {
            return previewTmp.NettingCurrency;
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayInvoiceId</Name>
						<Source><![CDATA[
        internal display InvoiceId displayInvoiceId(CustVendNettingTransMarked _custVendNettingTransMarked)
        {
            str invoiceIdStr;
            changecompany(previewTmp.InvoiceCompany)
            {
                CustTrans custTrans;
                CustTransOpen custTransOpen;
                switch (_custVendNettingTransMarked.RefTableId)
                {
                    case tableNum(VendTransOpen):
                        VendTrans vendTrans;
                        VendTransOpen vendTransOpen;
                        select firstonly Invoice from vendTrans
                            join RecId from vendTransOpen
                            where vendTrans.RecId == vendTransOpen.RefRecId
                                && vendTransOpen.RecId == _custVendNettingTransMarked.RefRecId;
                        invoiceIdStr = vendTrans.Invoice;
                        break;

                    case tableNum(CustTransOpen):
                        select firstonly Invoice from custTrans
                            join RecId from custTransOpen
                            where custTrans.RecId == custTransOpen.RefRecId
                                && custTransOpen.RecId == _custVendNettingTransMarked.RefRecId;
                        invoiceIdStr = custTrans.Invoice;
                        break;

                    case tableNum(CustTransOpenLine):
                        CustTransOpenLine custTransOpenLine;
                        select firstonly Invoice from custTrans
                            join RecId from custTransOpen
                                where custTrans.RecId == custTransOpen.RefRecId
                            join RecId from custTransOpenLine
                                where custTransOpen.RecId == custTransOpenLine.CustTransOpen
                                    && custTransOpenLine.RecId == _custVendNettingTransMarked.RefRecId;
                        invoiceIdStr = custTrans.Invoice;

                    default:
                        break;
                }
            }
            return invoiceIdStr;
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayInvoiceAmount</Name>
						<Source><![CDATA[
        internal display real displayInvoiceAmount(CustVendNettingTransMarked _custVendNettingTransMarked)
        {
            real invoiceAmount;

            changecompany(previewTmp.InvoiceCompany)
            {
                CustTrans custTrans;
                CustTransOpen custTransOpen;
                switch (_custVendNettingTransMarked.RefTableId)
                {
                    case tableNum(VendTransOpen):
                        VendTrans vendTrans;
                        VendTransOpen vendTransOpen;
                        select firstonly AmountCur from vendTrans
                            join RecId from vendTransOpen
                            where vendTrans.RecId == vendTransOpen.RefRecId
                                && vendTransOpen.RecId == _custVendNettingTransMarked.RefRecId;
                        invoiceAmount = vendTrans.AmountCur;
                        break;

                    case tableNum(CustTransOpen):
                        select firstonly AmountCur from custTrans
                            join RecId from custTransOpen
                            where custTrans.RecId == custTransOpen.RefRecId
                                && custTransOpen.RecId == _custVendNettingTransMarked.RefRecId;
                            invoiceAmount = custTrans.AmountCur;
                        break;

                    case tableNum(CustTransOpenLine):
                        CustTransOpenLine custTransOpenLine;
                        select firstonly AmountCur from custTrans
                            join RecId from custTransOpen
                                where custTrans.RecId == custTransOpen.RefRecId
                            join RecId from custTransOpenLine
                                where custTransOpen.RecId == custTransOpenLine.CustTransOpen
                                    && custTransOpenLine.RecId == _custVendNettingTransMarked.RefRecId;
                        invoiceAmount = custTrans.AmountCur;

                    default:
                        break;
                }
            }

            return invoiceAmount;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="" />
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>CustVendNettingTransMarked</Name>
			<Table>CustVendNettingTransMarked</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustVendNettingExecution</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS4004564</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Pattern xmlns="">DialogReadOnly</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<WindowType xmlns="">Slider</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>InvoiceDetailGroup</Name>
				<AllowEdit>No</AllowEdit>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>InvoiceDetailGrid</Name>
						<HeightMode>SizeToContent</HeightMode>
						<Type>Grid</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>InvoiceId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displayInvoiceId</DataMethod>
								<DataSource>CustVendNettingTransMarked</DataSource>
								<Label>@SYS14204</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>InvoiceCurrency</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>diplayInvoiceCurrency</DataMethod>
								<DataSource>CustVendNettingTransMarked</DataSource>
								<Label>@SYS129076</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>InvoiceAmount</Name>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displayInvoiceAmount</DataMethod>
								<DataSource>CustVendNettingTransMarked</DataSource>
								<Label>@CashManagement:InvoiceAmount</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>NettingAmount</Name>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>AmountCur</DataField>
								<DataSource>CustVendNettingTransMarked</DataSource>
								<Label>@CashManagement:EstimatedNettingAmount</Label>
							</AxFormControl>
						</Controls>
						<DataSource>CustVendNettingTransMarked</DataSource>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>BackButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
						<Text>@SYS15212</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>