<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ResWorkflowLineDropDialogForm</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
[SysObsolete('Resource Request Workflow is deprecated', false, 5\6\2023)]
public class ResWorkflowLineDropDialogForm extends FormRun implements ResRequestLineIWorkflowContext
{
    private Common                      record;
    private boolean                     instructionSet;
    private boolean                     isOriginator;
    private Map                         selectedRequestLinesMap;
    private WorkflowWorkItemQueueName   workflowQueue;
    private WorkflowUser                workflowUser;
    private WorkflowComment             workflowComment;
    private WorkflowWorkItemActionType  workflowItemActionType;
    private common                      activeWorkflowWorkItem;
    private boolean                     findWorkflowForAnyUser;
    private boolean                     closeActionDialog;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        str workflowType = workflowtypestr(ResRequest);

        if (!ResRequestHelper::isWorkflowEnabled())
        {
            throw error(strFmt("@Res:WorkflowNotEnabled", workflowType));
        }

        ResRequestHelper::validateWorkflowConfiguration();

        record = element.args().record();
        isOriginator = (record.CreatedBy == curUserId());

        // Set default value for ResRequestLineWorkflowContext parameters.
        findWorkflowForAnyUser = false;
        closeActionDialog = true;

        super();

        element.setFormCaption();

        // Set WorkflowWorkItemTable table record.
        element.setActiveWorkflowWorkItem();

        // Show the possible user options according to workflow status.
        this.updateControls();

        // Set user resource schedule selections.
        FormRun caller = element.args().caller();
        if (caller.name() == formStr(ResResourceFulfillment)
            || caller.name() == formStr(ResActivityResourceBooking)
            || caller.name() == formStr(ResProjAddResourceBooking)
            || caller.name() == formStr(ResWBSResourceAssignment))
        {
            selectedRequestLinesMap = caller.getUserSelectedRequestLines();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormCaption</Name>
				<Source><![CDATA[
    private void setFormCaption()
    {
        const str captionFormat = '%1 %2';
        ResRequestLine requestLine = record as ResRequestLine;
        str requestId = ResRequest::find(requestLine.Request).RequestId;
        this.design().caption(strfmt(captionFormat, "@Res:ResourceRequestLineDropDialogCaption", requestId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActiveWorkflowWorkItem</Name>
				<Source><![CDATA[
    private void setActiveWorkflowWorkItem()
    {
        container                   workItemsContainer;
        WorkflowTrackingStatusTable trackingStatusTable;

        [workItemsContainer, trackingStatusTable] = SysWorkflowFormControls::findWorkItemsAndTrackingData(record);

        element.setActiveWorkflowWorkItemProcess(workItemsContainer);

        // If the workflow is not assigned to the current user as approver, then validate if the current user is the originator.
        if (!activeWorkflowWorkItem)
        {
            [workItemsContainer] = element.findWorkItemsForOriginator(record);
            element.setActiveWorkflowWorkItemProcess(workItemsContainer);
        }

        // If trackingStatusTable is found, display tracking information as form instruction.
        if (trackingStatusTable.RecId != 0)
        {
            str messageText;
            if (trackingStatusTable.Originator == curUserId())
            {
                container   menuItemsContainer;

                [menuItemsContainer, messageText] = SysWorkflowFormControls::getActionBarContentForOriginator(trackingStatusTable);
            }
            else
            {
                messageText = SysWorkflowFormControls::getActionBarContentForNonOriginator(trackingStatusTable);
            }

            InstructionText.text(messageText);
            instructionSet = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActiveWorkflowWorkItemProcess</Name>
				<Source><![CDATA[
    private void setActiveWorkflowWorkItemProcess(container _workItemsContainer)
    {
        List                    workItems = new List(Types::Guid);
        ListEnumerator          workItemEnumerator;
        WorkflowWorkItemTable   workItemTable;

        workItems = List::create(_workItemsContainer);
        workItemEnumerator = workItems.getEnumerator();

        while (workItemEnumerator.moveNext())
        {
            workItemTable = WorkflowWorkItemTable::find(workItemEnumerator.current());
            activeWorkflowWorkItem = workItemTable;
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkItemsForOriginator</Name>
				<Source><![CDATA[
    private container findWorkItemsForOriginator(Common workflowEnabledRecord)
    {
        WorkflowWorkItemTable   workflowWorkItemTable;
        List                    workItems = new List(Types::Guid);
        WorkflowWorkItemTable   sourceWorkItemTable;
        ResRequestLine          resRequestLineTable;

        if (workflowEnabledRecord.TableId == tableNum(WorkflowWorkItemTable))
        {
            sourceWorkItemTable = WorkflowWorkItemTable::findRecId(workflowEnabledRecord.RecId);
            workItems.addEnd(sourceWorkItemTable.Id);
        }

        workflowWorkItemTable.disableCache(true);

        // Work items originated by the current user.
        while select Id from workflowWorkItemTable where
            workflowWorkItemTable.Status == WorkflowWorkItemStatus::Pending &&
            workflowWorkItemTable.RefRecId == workflowEnabledRecord.RecId &&
            workflowWorkItemTable.RefTableId == workflowEnabledRecord.TableId
        exists join resRequestLineTable where
            resRequestLineTable.RecId == workflowWorkItemTable.RefRecId
                && resRequestLineTable.CreatedBy == curUserId()
        {
            workItems.addEnd(workflowWorkItemTable.Id);
        }

        return [workItems.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateControls</Name>
				<Source><![CDATA[
    private void updateControls()
    {
        const str approveMenuItem = menuitemActionstr(ResReqLineApprovalApprove);
        const str rejectMenuItem  = menuitemActionstr(ResReqLineApprovalReject);
        const str delegateMenuItem = menuitemActionstr(ResReqLineApprovalDelegateMenuItem);
        const str recallMenuItem = menuitemActionstr(WorkflowLineItemRecall);
        const str resubmitMenuItem = menuitemActionstr(ResReqLineApprovalResubmitMenuItem);
        const str resubmitLineMenuItem = menuitemActionstr(WorkflowLineItemResubmit);

        container                   menuItemsContainer;
        List                        menuItems = new List(Types::String);
        ListEnumerator              menuItemEnum;
        str                         messageText;
        str                         instruction;
        SysWorkflowElement          sysWorkflowElement;
        WorkflowOutcomeName         workflowOutcomeName;
        LabelString                 menuItemCaption;
        boolean                     enableCancel = false;

        WorkflowWorkItemTable workItem = activeWorkflowWorkItem as WorkflowWorkItemTable;

        if (workItem)
        {
            [menuItemsContainer, messageText, instruction] = SysWorkflowFormControls::getActionBarContentForWorkItem(workItem);
            menuItems = List::create(menuItemsContainer);

            sysWorkflowElement = SysWorkflowElement::newElement(workItem.ElementId);

            menuItemEnum = menuItems.getEnumerator();

            // Selectively display buttons according to the work item status.
            while (menuItemEnum.moveNext())
            {
                switch (menuItemEnum.current())
                {
                    case approveMenuItem:
                        Approve.visible(true);
                        enableCancel = true;
                        break;
                    case rejectMenuItem:
                        Reject.visible(true);
                        enableCancel = true;
                        break;
                    case delegateMenuItem:
                        ApproverDelegate.visible(true);
                        break;
                    case recallMenuItem:
                        Recall.visible(true);
                        enableCancel = true;
                        break;
                    case resubmitMenuItem:
                    case resubmitLineMenuItem:
                        Resubmit.visible(true);
                        enableCancel = true;
                        break;
                }
            }

            if (enableCancel && isOriginator)
            {
                Cancel.visible(true);
            }

            if (!instructionSet)
            {
                InstructionText.text(instruction);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRequestLineDateWithinTaskDateRange</Name>
				<Source><![CDATA[
    private boolean isRequestLineDateWithinTaskDateRange(str _action)
    {
        boolean dateWithinRange = true;
        date    verifyDate = dateNull();

        // Validate if all assignment request line dates in this request are valid compare to the current task's date.
        ResRequestLine requestLineTable;
        ResRequest     requestTable;

        select Request, RequestId from requestLineTable
            where requestLineTable.RecId == record.RecId;

        ResRequestLine      requestLineDateVerifier;
        smmActivities       activityTable;
        PSAActivitySetup    activitySetup;

        while select minof(Day), Activity from requestLineDateVerifier
        group by requestLineDateVerifier.Activity
            where requestLineDateVerifier.Request == requestLineTable.Request
                && requestLineDateVerifier.ReservationType == ResReservationType::Assignment
        {
            verifyDate = DateTimeUtil::date(requestLineDateVerifier.Day);
            dateWithinRange = ActivityFacade::isDateWithinActivitySchedulingDateRage(
                requestLineDateVerifier.Activity, verifyDate);

            if (!dateWithinRange)
            {
                break;
            }
        }

        if (dateWithinRange)
        {
            while select maxof(Day), Activity from requestLineDateVerifier
            group by requestLineDateVerifier.Activity
                where requestLineDateVerifier.Request == requestLineTable.Request
                    && requestLineDateVerifier.ReservationType == ResReservationType::Assignment
                {
                    verifyDate = DateTimeUtil::date(requestLineDateVerifier.Day);
                    dateWithinRange = ActivityFacade::isDateWithinActivitySchedulingDateRage(
                        requestLineDateVerifier.Activity, verifyDate);

                    if (!dateWithinRange)
                    {
                        break;
                    }
                }
        }

        if (!dateWithinRange)
        {
            HierarchyTreeTable hierarchyTable = HierarchyTreeTable::findByActivityNumber(
                smmActivities::findWithRecId(requestLineDateVerifier.Activity).ActivityNumber);

            str activityName = hierarchyTable.Name;

            Box::stop(strFmt("@Res:RequestTaskDateNotValid", _action, activityName, date2StrUsr(verifyDate), DateFlags::FormatAll));
        }

        return dateWithinRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesRequestLineTaskExists</Name>
				<Source><![CDATA[
    private boolean doesRequestLineTaskExists(str _action)
    {
        boolean taskExists = true;

        // Validate if all assignment request line referenced WBS task exists.
        ResRequestLine requestLineTable;
        ResRequest     requestTable;

        select firstonly Request, RequestId from requestLineTable
            where requestLineTable.RecId == record.RecId;

        ResRequestLine      requestLineActivityVerifier;
        smmActivities       activityTable;
        PSAActivitySetup    activitySetup;

        select firstonly Activity from requestLineActivityVerifier
            where requestLineActivityVerifier.Request == requestLineTable.Request
        notexists join activityTable
            where activityTable.RecId == requestLineActivityVerifier.Activity;

        if (requestLineActivityVerifier)
        {
            taskExists = false;
            HierarchyTreeTable hierarchyTable = HierarchyTreeTable::findByActivityNumber(
                smmActivities::findWithRecId(requestLineActivityVerifier.Activity).ActivityNumber);

            str activityName = hierarchyTable.Name;

            if (hierarchyTable.Level == 0)
            {
                Box::stop(strFmt("@Res:RequestEngagementNotExists", _action, activityName));
            }
            else
            {
                Box::stop(strFmt("@Res:RequestTaskNotExists", _action, activityName));
            }
        }

        return taskExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonClickAction</Name>
				<Source><![CDATA[
    private void buttonClickAction(str _menuItemName, str _transitionTo)
    {
        Args args = new Args();

        args.record(record);
        args.caller(element);
        args.stateMachineTransitionTo(_transitionTo);
        args.menuItemName(_menuItemName);
        args.menuItemType(MenuItemType::Action);
        ResRequestLineDocumentLifecycle::main(args);
        element.close();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveWorkflowWorkItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// The workflow action menu items (Approve, Reject, etc.) call this FormRun method to retrieve the active workflow work item that was loaded onto the form.
    /// Since the calling form is now the drop dialog form (not the main form), this method is overridden to ensure we are passing the correct work item.
    /// </summary>
    /// <returns>WorkflowWorkItemTable record</returns>
    public Common getActiveWorkflowWorkItem()
    {
        return activeWorkflowWorkItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetQueue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set workflow user.
    /// </summary>
    /// <param name = "_workflowQueue">Workflow work item queue name.</param>
    /// <returns>Workflow work item queue name.</returns>
    public WorkflowWorkItemQueueName parmTargetQueue(WorkflowWorkItemQueueName _workflowQueue = workflowQueue)
    {
        workflowQueue = _workflowQueue;
        return workflowQueue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set target user.
    /// </summary>
    /// <param name = "_workflowUser">Workflow user.</param>
    /// <returns>Workflow user.</returns>
    public WorkflowUser parmTargetUser(WorkflowUser _workflowUser = workflowUser)
    {
        workflowUser = _workflowUser;
        return workflowUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set workflow comment.
    /// </summary>
    /// <param name = "_workflowComment">Workflow comment.</param>
    /// <returns>Workflow comment.</returns>
    public WorkflowComment parmWorkflowComment(WorkflowComment _workflowComment = workflowComment)
    {
        workflowComment = _workflowComment;
        return workflowComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowWorkItemActionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set workflow work item action type.
    /// </summary>
    /// <param name = "_workflowItemActionType">Workflow work item action type.</param>
    /// <returns>Workflow work item action type.</returns>
    public WorkflowWorkItemActionType parmWorkflowWorkItemActionType(WorkflowWorkItemActionType _workflowItemActionType = workflowItemActionType)
    {
        workflowItemActionType = _workflowItemActionType;
        return workflowItemActionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFindWorkflowForAnyUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or set boolean to find workflow for any user setting.
    /// </summary>
    /// <param name="_findWorkflowForAnyUser">Boolean value of find workflow for any user.</param>
    /// <returns>Boolean value of find workflow for any user.</returns>
    public boolean parmFindWorkflowForAnyUser(boolean _findWorkflowForAnyUser = findWorkflowForAnyUser)
    {
        findWorkflowForAnyUser = _findWorkflowForAnyUser;
        return findWorkflowForAnyUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsActionDialogClosedOK</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or set boolean to close action dialog.
    /// </summary>
    /// <param name="_closeActionDialog">Boolean value of closing action dialog.</param>
    /// <returns>Boolean value of closing action dialog.</returns>
    public boolean parmIsActionDialogClosedOK(boolean _closeActionDialog = closeActionDialog)
    {
        closeActionDialog = _closeActionDialog;
        return closeActionDialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserSelectedRequestLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set user selected <c>ResRequestLine</c> map with ResRequestLine.Hour as key,
    /// and container as value which has [ResRequestLine.RecId, resource rec ID, activity resource rec ID].
    /// </summary>
    /// <param name = "_selectedRequestLineMap">User selected <c>ResRequestLine</c> map.</param>
    /// <returns>User selected <c>ResRequestLine</c> map.</returns>
    public Map getUserSelectedRequestLines(Map _selectedRequestLinesMap = selectedRequestLinesMap)
    {
        selectedRequestLinesMap = _selectedRequestLinesMap;
        return selectedRequestLinesMap;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>ResRequestLine</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            QueryBuildDataSource dataSource = this.query().dataSourceTable(tableNum(ResRequestLine));
            dataSource.clearRanges();
            SysQuery::findOrCreateRange(dataSource, fieldnum(ResRequestLine, RecId)).value(queryValue(record.RecId));
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Resubmit</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (element.doesRequestLineTaskExists("@Res:Resubmit") && element.isRequestLineDateWithinTaskDateRange("@Res:Resubmit"))
            {
                element.buttonClickAction(menuitemActionstr(ResReqLineApprovalResubmitMenuItem), 'InReview');
            }
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Approve</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (element.doesRequestLineTaskExists("@Res:Approve") && element.isRequestLineDateWithinTaskDateRange("@Res:Approve"))
            {
                element.buttonClickAction(menuitemActionstr(ResReqLineApprovalApprove), 'Approved');
            }
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Reject</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.buttonClickAction(menuitemActionstr(ResReqLineApprovalReject), 'Returned');
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Recall</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.buttonClickAction(menuitemActionstr(ResRequestLineRecallMenuItem), 'Draft');
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Cancel</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.buttonClickAction(menuitemActionstr(ResRequestLineCancelMenuItem), 'Canceled');
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ApproverDelegate</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (element.doesRequestLineTaskExists("@Res:Delegate") && element.isRequestLineDateWithinTaskDateRange("@Res:Delegate"))
            {
                element.buttonClickAction(menuitemActionstr(ResReqLineApprovalDelegateMenuItem), 'InReview');
            }
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>ResRequestLine</Name>
			<Table>ResRequestLine</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Activity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActivityResource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApprovalStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssignedResource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Day</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>End</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HalfYear</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Hour</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Month</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalRequestedResource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Quarter</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Request</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReservationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Start</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Week</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ResRequest</Name>
			<Table>ResRequest</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ApprovalStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequestId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>ResRequestLine</JoinSource>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@Res:ResourceRequestLineWorkflow</Caption>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Pattern xmlns="">Custom</Pattern>
		<Style xmlns="">DropDialog</Style>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>InstructionText</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>StaticText</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Text>@Res:SubmitRequestLineInstruction</Text>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ContentGroup</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<ColumnsMode>Fill</ColumnsMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>Resubmit</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Button</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Text>@Res:Resubmit</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>Approve</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Button</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Text>@Res:Approve</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>Reject</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Button</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Text>@Res:Reject</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>Recall</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Button</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Text>@Res:Recall</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>Cancel</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Button</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Text>@Res:Cancel</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>ApproverDelegate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Button</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Text>@Res:Delegate</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormMenuFunctionButtonControl">
						<Name>ViewLineHistory</Name>
						<Type>MenuFunctionButton</Type>
						<FormControlExtension
							i:nil="true" />
						<DataSource>ResRequestLine</DataSource>
						<MenuItemName>WorkflowViewHistory</MenuItemName>
						<MenuItemType>Action</MenuItemType>
						<Text>@Res:ViewRequestLineHistory</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormMenuFunctionButtonControl">
						<Name>ViewHeaderHistory</Name>
						<Type>MenuFunctionButton</Type>
						<FormControlExtension
							i:nil="true" />
						<DataSource>ResRequest</DataSource>
						<MenuItemName>WorkflowViewHistory</MenuItemName>
						<MenuItemType>Action</MenuItemType>
						<Text>@Res:ViewRequestHistory</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>