<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>MCRFullTextIndexField</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class MCRFullTextIndexField extends FormRun
{
    QueryBuildRange         queryBuildRangeView;
    MCRFullTextSearchType   searchType = MCRFullTextSearchType::Customer;
    #AOT
    #define.DoubleBackslash('\\')
    #define.Fields('\\Fields\\')

}
]]></Source>
			</Method>
			<Method>
				<Name>parmViewType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parm method for setting or retriving the search type.
    /// </summary>
    /// <param name = "_searchType">An enum value indicating the search field type.</param>
    /// <returns></returns>
    public MCRFullTextSearchType parmViewType(MCRFullTextSearchType _searchType = searchType)
    {
        searchType = _searchType;
        return searchType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateGridForType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the related buttons and the grid based on the search field type enum that is selected.
    /// </summary>
    /// <param name = "_searchType">An enum value indicating the search field type.</param>
    public void updateGridForType(MCRFullTextSearchType _searchType = MCRFullTextSearchType::Customer)
    {
        SearchTypeButtonMenu.text(enum2str(_searchType));
        element.parmViewType(_searchType);
        mcrFullTextIndexField_ds.executeQuery();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>MCRFullTextIndexField</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            SearchTypeButtonMenu.text(enum2str(MCRFullTextSearchType::Customer));
            element.parmViewType(MCRFullTextSearchType::Customer);
            queryBuildRangeView = this.queryBuildDataSource().addRange(fieldNum(MCRFullTextIndexField,Source));
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            queryBuildRangeView.value(MCRFullTextIndexField::viewFromEnum(element.parmViewType()));
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>Field</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            /// <summary>
            /// Validates that the full text search field entered exists.
            /// </summary>
            /// <returns>
            /// true if field exists; otherwise, false.
            /// </returns>
            public boolean validate()
            {
                boolean ret;
                str     treeNodeStr;

                ret = super();

                if (ret)
                {
                    //Validate the field exists on the view.  Using AOT to simplify.
                    treeNodeStr = #ViewsPath + #DoubleBackslash + mcrFullTextIndexField.Source;
                    treeNodeStr += #Fields + mcrFullTextIndexField.Field;

                    if (!TreeNode::findNode(treeNodeStr))
                    {
                        ret = false;
                        error(strFmt("@MCR11505",mcrFullTextIndexField.Field));
                    }
                }

                return ret;
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr = "")
            {
                SysMetaTableMemberNameLookup::lookupFieldsInTable(mcrFullTextIndexField.Source, _formControl);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>TypeCustomer</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Overrides the clicked method on the button.
        /// </summary>
        public void clicked()
        {
            super();
            element.updateGridForType(MCRFullTextSearchType::Customer);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TypeItem</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Overrides the clicked method on the button.
        /// </summary>
        public void clicked()
        {
            super();
            element.updateGridForType(MCRFullTextSearchType::Item);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TypeBusRel</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Overrides the clicked method on the button.
        /// </summary>
        public void clicked()
        {
            super();
            element.updateGridForType(MCRFullTextSearchType::BusRel);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Refresh</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            DialogButton            dialogButton;
            MCRFullTextIndexField   localMCRFullTextIndexField;
            MenuFunction            menuFunction;
            Args                    args;

            //check if this type is setup
            if (!mcrFullTextIndexField.Source || mcrFullTextIndexField.Field)
            {
                //double check, row could just not be selected
                select firstonly RecId from localMCRFullTextIndexField
                    where localMCRFullTextIndexField.Source == MCRFullTextIndexField::viewFromEnum(element.parmViewType());

                if (!localMCRFullTextIndexField)
                {
                    throw error("@MCR35741");
                }
            }

            dialogButton = Box::yesNo(strFmt("@MCR26413" + '\n' + "@MCR23886", mcrFullTextIndexField.Source),
                    DialogButton::Yes, strFmt("@MCR26414", mcrFullTextIndexField.Source));

            if (dialogButton == DialogButton::Yes)
            {
                menuFunction = new MenuFunction(menuitemActionStr(MCRFullTextSearchRefresh), MenuItemType::Action);
                args = new Args();
                args.parmEnumeration(element.parmViewType());
                menuFunction.run(args);
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>MCRFullTextIndexField</Name>
			<Table>MCRFullTextIndexField</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Field</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Source</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SCM:SearchCriteria</Caption>
		<DataSource xmlns="">MCRFullTextIndexField</DataSource>
		<HeightMode xmlns="">SizeToContent</HeightMode>
		<LeftMargin xmlns="">10</LeftMargin>
		<LeftMarginMode xmlns="">Fixed</LeftMarginMode>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<Style xmlns="">SimpleList</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<WidthMode xmlns="">SizeToAvailable</WidthMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>GridActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>SearchTypeButtonGroup</Name>
						<HeightMode>Auto</HeightMode>
						<Type>ButtonGroup</Type>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>SearchTypeButtonMenu</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>TypeCustomer</Name>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS302</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonSeparatorControl">
										<Name>FormButtonSeparatorControl1</Name>
										<Type>ButtonSeparator</Type>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>TypeItem</Name>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS312888</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonSeparatorControl">
										<Name>FormButtonSeparatorControl2</Name>
										<Type>ButtonSeparator</Type>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>TypeBusRel</Name>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS80138</Text>
									</AxFormControl>
								</Controls>
								<Text>@SYS302</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>Refresh</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@MCR25167</HelpText>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
								<NormalImage>Sync</NormalImage>
								<Text>@SCM:UpdateSearchData</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
						<DataSource>MCRFullTextIndexField</DataSource>
					</AxFormControl>
				</Controls>
				<DataSource>MCRFullTextIndexField</DataSource>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CustomFilterGroup</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilter</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Grid_Source</Name>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>Source</DataField>
						<DataSource>MCRFullTextIndexField</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Grid_Field</Name>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>Field</DataField>
						<DataSource>MCRFullTextIndexField</DataSource>
					</AxFormControl>
				</Controls>
				<AlternateRowShading>No</AlternateRowShading>
				<DataGroup>Overview</DataGroup>
				<DataSource>MCRFullTextIndexField</DataSource>
				<MultiSelect>No</MultiSelect>
				<ShowRowLabels>No</ShowRowLabels>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>
