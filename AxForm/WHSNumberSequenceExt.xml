<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>WHSNumberSequenceExt</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public final class WHSNumberSequenceExt extends FormRun
{
    boolean                 formatTruncated;
    WHSNumberSequenceExtId  lastNumberSequenceExtId;

}
]]></Source>
			</Method>
			<Method>
				<Name>changeEnabledStateForTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Change the enabled state of the rows in the table.
    /// </summary>
    /// <param name = "_enabled">The enabled state expected.</param>
    public void changeEnabledStateForTable(boolean _enabled)
    {
        whsTmpNumberSequenceExtSegment_ds.allowCreate(_enabled);
        whsTmpNumberSequenceExtSegment_ds.allowEdit(_enabled);
        whsTmpNumberSequenceExtSegment_ds.allowDelete(_enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
 
        formatTruncated = false;
        
        whsNumberSequenceExt_ds.forceWrite(true);

        WHSSequenceNumberMoverForm::newFromDataSource(
                WHSTmpNumberSequenceExtSegment_ds,
                fieldStr(WHSTmpNumberSequenceExtSegment, LineNum),
                conNull())
            .initNewButtons(SegmentsButtonGroup, DeleteSegment);

        MoveUpSegment.visible(false);
        MoveDownSegment.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>task</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handler method that is invoked when a task is executed.
    /// </summary>
    /// <param name="_taskId">
    /// The id of the task.
    /// </param>
    /// <returns>
    /// 1 if the task was handled; otherwise, 0.
    /// </returns>
    public int task(int _taskId)
    {
        #Task

        int ret = super(_taskId);

        if (_taskId == #taskEditRecord || _taskId == #taskDoneEditRecord)
        {
            element.updateSegmentControlEditability();
        }
        else if (_taskId == #taskSave)
        {
            if (!whsNumberSequenceExt_ds.validateWrite())
            {
                throw error(strFmt("@WAX:WHSCannotWriteRecordInTable", tablePName(WHSNumberSequenceExt)));
            }
            else
            {
                whsNumberSequenceExt_ds.write();

                super(_taskId);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSegmentControlEditability</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the enabled state of unbound controls.
    /// </summary>
    /// <param name="_ignoreFormViewEditMode">
    /// A Boolean value indicating whether or not to check the form's inViewMode property when updating the controls.
    /// </param>
    public void updateSegmentControlEditability(boolean _ignoreFormViewEditMode = false)
    {
        SecurityRights  sr = SecurityRights::construct();
        boolean         hasAccess = sr.fieldAccessRight(tableStr(WHSNumberSequenceExt), fieldStr(WHSNumberSequenceExt, Format)) >= AccessRight::Edit;
        boolean         enabled = (_ignoreFormViewEditMode || !element.inViewMode()) && hasAccess;

        segmentsActionPane.enabled(enabled);
        element.changeEnabledStateForTable(enabled);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>WHSNumberSequenceExt</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret = true;

            if (ret)
            {
                if (formatTruncated)
                {
                    ret = checkFailed(strFmt("@WAX:NumberSequenceExtensionLongerThanMaximumLengthWarning", new DictType(extendedTypeNum(WHSNumExt)).stringLen()));
                }
            }

            if (ret)
            {
                ret = super();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            super(_append);

            element.updateSegmentControlEditability(true);
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret = super();

            if (lastNumberSequenceExtId != whsNumberSequenceExt.NumberSequenceExtId)
            {
                whsTmpNumberSequenceExtSegment_ds.populate(WHSNumberSeqExt::parseAnnotatedFormat(whsNumberSequenceExt.AnnotatedFormat));
                whsTmpNumberSequenceExtSegment_ds.research();
                element.updateSegmentControlEditability();

                lastNumberSequenceExtId = whsNumberSequenceExt.NumberSequenceExtId;
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>leave</Name>
						<Source><![CDATA[
        public boolean leave()
        {
            boolean ret;
        
            ret = super();

            whsTmpNumberSequenceExtSegment_ds.write();
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>WHSTmpNumberSequenceExtSegment</Name>
				<Methods>
					<Method>
						<Name>getTmpTableCopy</Name>
						<Source><![CDATA[
        /// <summary>
        /// Creates a copy of the temporary table.
        /// </summary>
        /// <returns>
        /// A copy of the temporary table.
        /// </returns>
        public WHSTmpNumberSequenceExtSegment getTmpTableCopy()
        {
            WHSTmpNumberSequenceExtSegment tmpNumberSequenceExtSegmentLocal;

            tmpNumberSequenceExtSegmentLocal.setTmpData(whsTmpNumberSequenceExtSegment);

            return tmpNumberSequenceExtSegmentLocal;
        }

]]></Source>
					</Method>
					<Method>
						<Name>populate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Populates the table based on the specified segments.
        /// </summary>
        /// <param name="_segments">
        /// The segments to use for populating the table.
        /// </param>
        public void populate(container _segments)
        {
            int                             i;
            container                       segment;
            int                             numSegments = conLen(_segments);
            int                             segmentType;
            str                             segmentValue;
            WHSTmpNumberSequenceExtSegment  tmpNumberSequenceExtSegmentLocal = whsTmpNumberSequenceExtSegment_ds.getTmpTableCopy();

            delete_from tmpNumberSequenceExtSegmentLocal;

            for (i = 1; i <= numSegments; i++)
            {
                segment = conPeek(_segments, i);
                [segmentType, segmentValue] = segment;

                tmpNumberSequenceExtSegmentLocal.clear();
                tmpNumberSequenceExtSegmentLocal.initValue();
                tmpNumberSequenceExtSegmentLocal.SegmentType = segmentType;
                tmpNumberSequenceExtSegmentLocal.DisplayValue = segmentValue;
                tmpNumberSequenceExtSegmentLocal.LineNum = i;
                tmpNumberSequenceExtSegmentLocal.insert();
            }

            this.updateFormat(_segments);
        }

]]></Source>
					</Method>
					<Method>
						<Name>updateFormat</Name>
						<Source><![CDATA[
        /// <summary>
        /// Updates the Format and AnnotatedFormat based on the
        /// specified scope segments.
        /// </summary>
        /// <param name="_segments">
        /// The scope segments to use for updating the format.
        /// </param>
        public void updateFormat(container _segments = this.createSegmentsFromTable())
        {
            str         annotatedFormat = WHSNumberSeqExt::createAnnotatedFormatFromSegments(_segments);
            str         format = WHSNumberSeqExt::createFormatFromSegments(_segments);
            str         displayFormat = WHSNumberSeqExt::createAnnotatedFormatFromSegments(_segments, false);

            formatTruncated = strLen(displayFormat) > new DictType(extendedTypeNum(WHSNumExt)).stringLen();

            whsNumberSequenceExt.AnnotatedFormat = annotatedFormat;
            whsNumberSequenceExt.Format = format;
            whsNumberSequenceExt_DisplayFormat.text(displayFormat);
        }

]]></Source>
					</Method>
					<Method>
						<Name>createSegmentsFromTable</Name>
						<Source><![CDATA[
        /// <summary>
        /// Creates a container of scope segments based on the contents of the table.
        /// </summary>
        /// <returns>
        /// A container of scope segments based on the contents of the table.
        /// </returns>
        private container createSegmentsFromTable()
        {
            container                       scopeSegments;
            WHSTmpNumberSequenceExtSegment  tmpNumberSequenceExtSegmentLocal = whsTmpNumberSequenceExtSegment_ds.getTmpTableCopy();

            while select tmpNumberSequenceExtSegmentLocal
                order by LineNum asc
            {
                scopeSegments += [[tmpNumberSequenceExtSegmentLocal.SegmentType, tmpNumberSequenceExtSegmentLocal.DisplayValue]];
            }

            return scopeSegments;
        }

]]></Source>
					</Method>
					<Method>
						<Name>updateActionPane</Name>
						<Source><![CDATA[
        /// <summary>
        /// Updates the action pane associated with the table based on the contents of the table.
        /// </summary>
        public void updateActionPane()
        {
            WHSTmpNumberSequenceExtSegment whsTmpNumberSequenceExtSegmentLocal = whsTmpNumberSequenceExtSegment_ds.getTmpTableCopy();

            select firstonly forupdate TableId from whsTmpNumberSequenceExtSegmentLocal
                where whsTmpNumberSequenceExtSegmentLocal.LineNum > whsTmpNumberSequenceExtSegment.LineNum;

            moveDownSegment.enabled(whsTmpNumberSequenceExtSegmentLocal ? true : false);

            select firstonly forupdate TableId from whsTmpNumberSequenceExtSegmentLocal
                where whsTmpNumberSequenceExtSegmentLocal.LineNum < whsTmpNumberSequenceExtSegment.LineNum;

            moveUpSegment.enabled(whsTmpNumberSequenceExtSegmentLocal ? true : false);
        }

]]></Source>
					</Method>
					<Method>
						<Name>updateControls</Name>
						<Source><![CDATA[
        /// <summary>
        /// Updates segment controls based on the contents of the table.
        /// </summary>
        public void updateControls()
        {
            WHSNumberSeqExtSegmentTypeHandler segmentTypeHandler = WHSNumberSeqExtSegmentTypeHandler::singletonFromType(whsTmpNumberSequenceExtSegment.SegmentType);

            whsTmpNumberSequenceExtSegment_ds.object(fieldNum(WHSTmpNumberSequenceExtSegment, DisplayValue)).AllowEdit(!segmentTypeHandler.isDisplayValueReadOnly());
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = true)
        {
            super(true);

            this.updateActionPane();
            this.updateFormat();
            this.updateControls();

            this.forceWrite(true);
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            super();

            this.updateActionPane();
            this.updateFormat();
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            boolean isNewRecord = whsTmpNumberSequenceExtSegment.isNewRecord();

            super();

            this.updateFormat();
            this.forceWrite(false);

            if (isNewRecord)
            {
                RecId recId = whsTmpNumberSequenceExtSegment.RecId;

                whsTmpNumberSequenceExtSegment_ds.research();
                whsTmpNumberSequenceExtSegment_ds.positionToRecordByValue(fieldNum(Common, RecId), int642Str(recId));
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;
        
            ret = super();

            this.updateActionPane();
            this.updateControls();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>DisplayValue</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                whsTmpNumberSequenceExtSegment_ds.updateControls();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SegmentType</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                whsTmpNumberSequenceExtSegment_ds.updateControls();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>CreateDefaultButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            WHSNumberSeqExt::generateDefaultExtensions();

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MoveUpSegment</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            WHSTmpNumberSequenceExtSegment whsTmpNumberSequenceExtSegmentLocal = whsTmpNumberSequenceExtSegment_ds.getTmpTableCopy();

            select firstonly forupdate whsTmpNumberSequenceExtSegmentLocal
                order by LineNum desc
                where whsTmpNumberSequenceExtSegmentLocal.LineNum < whsTmpNumberSequenceExtSegment.LineNum;

            if (whsTmpNumberSequenceExtSegmentLocal)
            {
                Integer lineNumLocal = whsTmpNumberSequenceExtSegmentLocal.LineNum;
                Integer lineNum = whsTmpNumberSequenceExtSegment.LineNum;

                whsTmpNumberSequenceExtSegment.LineNum = 0;
                whsTmpNumberSequenceExtSegment.update();

                whsTmpNumberSequenceExtSegmentLocal.LineNum = lineNum;
                whsTmpNumberSequenceExtSegmentLocal.update();

                whsTmpNumberSequenceExtSegment.LineNum = lineNumLocal;
                whsTmpNumberSequenceExtSegment.update();
            }

            RecId recId = whsTmpNumberSequenceExtSegment.RecId;

            whsTmpNumberSequenceExtSegment_ds.research();
            whsTmpNumberSequenceExtSegment_ds.positionToRecordByValue(fieldNum(Common, RecId), int642Str(recId));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MoveDownSegment</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            WHSTmpNumberSequenceExtSegment whsTmpNumberSequenceExtSegmentLocal = whsTmpNumberSequenceExtSegment_ds.getTmpTableCopy();

            select firstonly forupdate whsTmpNumberSequenceExtSegmentLocal
                order by LineNum asc
                where whsTmpNumberSequenceExtSegmentLocal.LineNum > whsTmpNumberSequenceExtSegment.LineNum;

            if (whsTmpNumberSequenceExtSegmentLocal)
            {
                Integer lineNumLocal = whsTmpNumberSequenceExtSegmentLocal.LineNum;
                Integer lineNum = whsTmpNumberSequenceExtSegment.LineNum;

                whsTmpNumberSequenceExtSegment.LineNum = 0;
                whsTmpNumberSequenceExtSegment.update();

                whsTmpNumberSequenceExtSegmentLocal.LineNum = lineNum;
                whsTmpNumberSequenceExtSegmentLocal.update();

                whsTmpNumberSequenceExtSegment.LineNum = lineNumLocal;
                whsTmpNumberSequenceExtSegment.update();
            }

            RecId recId = whsTmpNumberSequenceExtSegment.RecId;

            whsTmpNumberSequenceExtSegment_ds.research();
            whsTmpNumberSequenceExtSegment_ds.positionToRecordByValue(fieldNum(Common, RecId), int642Str(recId));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>WHSNumberSequenceExt</Name>
			<Table>WHSNumberSequenceExt</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AnnotatedFormat</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Format</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumberSequenceExtId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>WHSTmpNumberSequenceExtSegment</Name>
			<Table>WHSTmpNumberSequenceExtSegment</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DisplayValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SegmentType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<LinkType>Passive</LinkType>
			<Index>LineNumIdx</Index>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@WAX:NumberSequenceExtensions</Caption>
		<DataSource xmlns="">WHSNumberSequenceExt</DataSource>
		<Pattern xmlns="">SimpleListDetails</Pattern>
		<PatternVersion xmlns="">1.3</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">SimpleListDetails</Style>
		<TitleDataSource xmlns="">WHSNumberSequenceExt</TitleDataSource>
		<Width xmlns="">810</Width>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>CreateDefaultButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>CreateDefaultButton</Name>
								<HelpText>@WAX:CreateDefaultSetupNumSeqExtHelpText</HelpText>
								<NeededPermission>Create</NeededPermission>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<AutoRefreshData>Yes</AutoRefreshData>
								<Text>@SCM:GenerateDefaultSetup</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<DataSource>WHSNumberSequenceExt</DataSource>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>NavigationList</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>NavigationListQuickFilterControl</Name>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>ListStyleGrid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>ListStyleGrid</Name>
						<AllowEdit>No</AllowEdit>
						<Type>Grid</Type>
						<WidthMode>SizeToContent</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ListStyleGrid_Description</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>Description</DataField>
								<DataSource>WHSNumberSequenceExt</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ListStyleGrid_NumberSequenceExtId</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>NumberSequenceExtId</DataField>
								<DataSource>WHSNumberSequenceExt</DataSource>
							</AxFormControl>
						</Controls>
						<DataSource>WHSNumberSequenceExt</DataSource>
						<MultiSelect>No</MultiSelect>
						<ShowRowLabels>No</ShowRowLabels>
						<Style>List</Style>
					</AxFormControl>
				</Controls>
				<FrameType>None</FrameType>
				<Style>SidePanel</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DetailsHeader</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>WHSNumberSequenceExt_NumberSequenceExtId</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>NumberSequenceExtId</DataField>
						<DataSource>WHSNumberSequenceExt</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>WHSNumberSequenceExt_Description</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>Description</DataField>
						<DataSource>WHSNumberSequenceExt</DataSource>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>DetailsTab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Segments</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>954437176</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>SegmentsActionPane</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneTabControl">
										<Name>SegmentsActionPaneTab</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPaneTab</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>SegmentsButtonGroup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Left>0</Left>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormCommandButtonControl">
														<Name>AddSegment</Name>
														<HeightMode>Auto</HeightMode>
														<Type>CommandButton</Type>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
														<Command>New</Command>
														<MultiSelect>No</MultiSelect>
														<NormalImage>New</NormalImage>
														<Text>@SYS321054</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCommandButtonControl">
														<Name>DeleteSegment</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>CommandButton</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
														<Command>DeleteRecord</Command>
														<MultiSelect>No</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<NormalImage>Delete</NormalImage>
														<SaveRecord>No</SaveRecord>
														<Text>@SYS321055</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>MoveUpSegment</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1431655764</ElementPosition>
														<Enabled>No</Enabled>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
														<MultiSelect>No</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<NormalImage>Up</NormalImage>
														<Text>@SYS321052</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>MoveDownSegment</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1789569705</ElementPosition>
														<Enabled>No</Enabled>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
														<MultiSelect>No</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<NormalImage>Down</NormalImage>
														<Text>@SYS321053</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<DataSource>WHSTmpNumberSequenceExtSegment</DataSource>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>SegmentsTableGrid</Name>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>WHSTmpNumberSequenceExtSegment_LineNum</Name>
										<Type>Integer</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>LineNum</DataField>
										<DataSource>WHSTmpNumberSequenceExtSegment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>WHSTmpNumberSequenceExtSegment_SegmentType</Name>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>SegmentType</DataField>
										<DataSource>WHSTmpNumberSequenceExtSegment</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>WHSTmpNumberSequenceExtSegment_DisplayValue</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>DisplayValue</DataField>
										<DataSource>WHSTmpNumberSequenceExtSegment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>WHSTmpNumberSequenceExtSegment_DisplayLength</Name>
										<AllowEdit>No</AllowEdit>
										<Type>Integer</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayLength</DataMethod>
										<DataSource>WHSTmpNumberSequenceExtSegment</DataSource>
										<Label>@SYS321062</Label>
									</AxFormControl>
								</Controls>
								<DataSource>WHSTmpNumberSequenceExtSegment</DataSource>
								<MultiSelect>No</MultiSelect>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FooterGroup</Name>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>WHSNumberSequenceExt_DisplayFormat</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>WHSNumberSequenceDisplayFormat</ExtendedDataType>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<BackgroundColor>WindowBackground</BackgroundColor>
						<Caption>@SYS319210</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<DataSource>WHSNumberSequenceExt</DataSource>
				<ShowTabs>No</ShowTabs>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>