<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProjInvoiceControl</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ProjInvoiceControl extends FormRun
{
    QueryBuildRange     criteriaCurGeneral;
    QueryBuildRange     criteriaCurQuotation;

    ProjInvoiceControl  projInvoiceControl;

    ProjCategoryId      projCategoryId;
    ProjCategoryGroupId projCategoryGroupId;
    ProjId              projId;
    ProjGroupId         projGroupId;
    ProjInvoiceProjId   projInvoiceProjId;
    ProjSort            projSorting1;
    ProjSort            projSorting2;
    ProjSort            projSorting3;
    ProjWipId           projWipId;

    CustAccount         custAccount;
    ResourceRecId           resource;
    ResourceCategoryRecId   resourceCategory;
    ItemId              itemId;
    SMASubscriptionId   subscriptionId;
    ProjTable           projTable;
    ProjInvoiceTable    projInvoiceTable;

    const int           qtyColor = 14803455;   // RGB(255, 225, 225)
    const int           totalColor = 14811008; // RGB(128, 255, 225);

    Map                 currencyIds;

    CurrencyCode        currencyCode;
    CurrencyCode        invoiceCurrency;
    CurrencyCode        localCurrency;
    CurrencyCode        topCurrency;

    boolean             showSubProjects;

    private boolean enableProjMultipleContractLinesForProjectFeature = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

}
]]></Source>
			</Method>
			<Method>
				<Name>buildCurrencyCombobox</Name>
				<Source><![CDATA[
    void buildCurrencyCombobox()
    {
        TmpProjInvoiceControl   tmpProjInvoiceControlForm;
        TmpProjInvoiceControl   tmpProjInvoiceControlFormCur;
        Counter                 idx;
        Counter                 noOfRec;
        Counter                 selectIdx;
        Counter                 topIdx;

        currencyCode = '';
        comboBoxFieldIds.allowEdit(false);
        comboBoxFieldIds.clear();
        currencyIds = new Map(Types::Integer, Types::String);

        tmpProjInvoiceControlForm.setTmpData(projInvoiceControl.tmpProjInvoiceControlGeneral());
        tmpProjInvoiceControlFormCur.setTmpData(projInvoiceControl.tmpProjInvoiceControlGeneral());

        while select tmpProjInvoiceControlForm group by CurrencyCode
        {
            idx++;

            if (! currencyCode &&
                (tmpProjInvoiceControlForm.CurrencyCode == localCurrency))
            {
                currencyCode    = localCurrency;
                selectIdx       = idx;
            }

            if (tmpProjInvoiceControlForm.CurrencyCode == invoiceCurrency)
            {
                currencyCode    = invoiceCurrency;
                selectIdx       = idx;
            }

            select count(NoOfRec) from tmpProjInvoiceControlFormCur
                where tmpProjInvoiceControlFormCur.CurrencyCode == tmpProjInvoiceControlForm.CurrencyCode;

            if ((tmpProjInvoiceControlFormCur.NoOfRec > noOfRec) && ! currencyCode)
            {
                noOfRec         = tmpProjInvoiceControlFormCur.NoOfRec;
                topCurrency     = tmpProjInvoiceControlForm.CurrencyCode;
                topIdx          = idx;
            }

            comboBoxFieldIds.add(tmpProjInvoiceControlForm.CurrencyCode);
            currencyIds.insert(idx,tmpProjInvoiceControlForm.CurrencyCode);
        }

        if (! currencyCode && idx)
        {
            currencyCode    = topCurrency;
            selectIdx       = topIdx;
        }

        if (idx >= 1)
        {
            // %1 currencies found
            if (idx > 1)
            {
                comboBoxFieldIds.allowEdit(true);
            }

            comboBoxFieldIds.text(currencyCode);
            comboBoxFieldIds.selection(selectIdx-1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDate</Name>
				<Source><![CDATA[
    FromDate fromDate()
    {
        return editProjTransDateFrom.dateValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        localCurrency   = Ledger::accountingCurrency(CompanyInfo::current());

        super();

        switch(element.args().dataset())
        {
            case tableNum(ProjTable):
                projTable = element.args().record();
                break;
            case tableNum(SMASubscriptionTable):
                var smaSubTable = element.args().record() as SMASubscriptionTable;
                projTable = ProjTable::find(smaSubTable.ProjId);
                break;
            default:
        }

        if (projTable && ProjTable::child(projTable.ProjId))
        {
            showSubProjects = true;
        }

        data.visible(showSubProjects);
        element.setButtonVisibility();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceControl</Name>
				<Source><![CDATA[
    void invoiceControl()
    {
        element.projInvoiceControl();

        general.setTmpData(projInvoiceControl.tmpProjInvoiceControlGeneral());
        quotation.setTmpData(projInvoiceControl.tmpProjInvoiceControlQuotation());
        element.buildCurrencyCombobox();

        general_ds.executeQuery();
        quotation_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    ProjId projId()
    {
        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>ProjInvoiceControl</c> with parameters and executes the operation.
    /// </summary>
    /// <returns>
    /// <c>ProjInvoiceControl</c> instance.
    /// </returns>
    ProjInvoiceControl projInvoiceControl()
    {
        projInvoiceControl = element.initProjInvoiceControl();

        projInvoiceControl.runOperation();

        return projInvoiceControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjInvoiceControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>ProjInvoiceControl</c> class instance.
    /// </summary>
    protected ProjInvoiceControl initProjInvoiceControl()
    {
        container parms;

        projInvoiceControl   = new ProjInvoiceControl();

        // projInvoiceControl runs on Server. Avoid multiple client-server calls by
        // sending all form data in one call, instead of calling individual parm* methods.
        parms = [   editExpenses.value(),
                    editHour.value(),
                    editRevenue.value(),
                    editSubscription.value(),
                    editItem.value(),
                    editOnAccount.value(),
                    editSalesOrder.value(),
                    editProjTransDateFrom.dateValue() ? editProjTransDateFrom.dateValue() : dateNull(),
                    editProjTransDateto.dateValue() ? editProjTransDateto.dateValue() : dateMax(),
                    projId,
                    projCategoryId,
                    projInvoiceProjId,
                    projWipId,
                    resource,
                    resourceCategory,
                    fixedPrice.value(),
                    timeMaterial.value(),
                    internalCost.value(),
                    investment.value(),
                    timeProject.value(),
                    comboBoxFieldIds.valueStr(),
                    projGroupId,
                    projSorting1,
                    projSorting2,
                    projSorting3,
                    custAccount,
                    itemId,
                    subscriptionId,
                    projCategoryGroupId,
                    psaEditRetain.value(),
                    includeSubprojects.value()];

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            projInvoiceControl.parmRetain(psaEditRetain.value());
        }

        projInvoiceControl.initFromForm(parms);

        return projInvoiceControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonAccess</Name>
				<Source><![CDATA[
    void setButtonAccess()
    {
        boolean isRecordExternallyManaged;
        boolean lockFieldsForAdjustments;

        switch (element.args().dataset())
        {
            case tableNum(ProjTable):
                isRecordExternallyManaged = Project::isProjectExternallyManaged(projTable.ProjId);
                lockFieldsForAdjustments = ProjCDSLockingOptionTable::get(ProjCDSLockingOption::Adjustments) && isRecordExternallyManaged;
                invoice.enabled(true);
                adjustment.enabled(!lockFieldsForAdjustments);
                break;

            case tableNum(ProjInvoiceTable):
                isRecordExternallyManaged = Project::isContractExternallyManaged(projInvoiceTable.ProjInvoiceProjId);
                lockFieldsForAdjustments = ProjCDSLockingOptionTable::get(ProjCDSLockingOption::Adjustments) && isRecordExternallyManaged;
                invoice.enabled(true);
                adjustment.enabled(!lockFieldsForAdjustments);
                break;

            case tableNum(ProjCategory):
            case tableNum(HcmWorker):
                invoice.enabled(false);
                adjustment.enabled(false);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the visibility of transaction, forecast, adjustment, invoice proposal, invoice and on account buttons.
    /// </summary>
    private void setButtonVisibility()
    {
        AccessRight     menuItemAccessRight;
        SecurityRights  securityRights;

        securityRights = SecurityRights::construct();

        // Hour button
        menuItemAccessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(projTransEmpl));

        if (menuItemAccessRight == AccessRight::NoAccess)
        {
            hoursButton.visible(false);
        }

        // Expense button
        menuItemAccessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(projTransCost));

        if (menuItemAccessRight == AccessRight::NoAccess)
        {
            expensesButton.visible(false);
        }

        // Item button
        menuItemAccessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(projTransItem));

        if (menuItemAccessRight == AccessRight::NoAccess)
        {
            itemButton.visible(false);
        }

        // Revenue button
        menuItemAccessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(projTransRevenue));

        if (menuItemAccessRight == AccessRight::NoAccess)
        {
            revenueButton.visible(false);
        }

        // On-Account button
        menuItemAccessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(projTransOnAcc));

        if (menuItemAccessRight == AccessRight::NoAccess)
        {
            onAccButton.visible(false);
        }

        // OrderLines button
        menuItemAccessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(salesLine));

        if (menuItemAccessRight == AccessRight::NoAccess)
        {
            orderLines.visible(false);
        }

        // Adjustment button
        menuItemAccessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(ProjAdjustment));

        if (menuItemAccessRight == AccessRight::NoAccess)
        {
            adjustment.visible(false);
        }

        // Invoice proposal button
        menuItemAccessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(ProjInvoiceProposal));

        if (menuItemAccessRight == AccessRight::NoAccess)
        {
            ctrlProposal.visible(false);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            psaCtrlProposal.visible(true);
            ctrlProposal.visible(false);
        }

        // Invoice button
        menuItemAccessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(ProjInvoiceJournal));

        if (menuItemAccessRight == AccessRight::NoAccess)
        {
            ctrlInvoice.visible(false);
        }

        // On-account button
        menuItemAccessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(projTransOnAcc));

        if (menuItemAccessRight == AccessRight::NoAccess)
        {
            ctrlInvoice.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDate</Name>
				<Source><![CDATA[
    ToDate toDate()
    {
        return editProjTransDateTo.dateValue();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>General</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            criteriaCurGeneral.value(queryValue(currencyCode));

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayOption</Name>
						<Source><![CDATA[
        public void displayOption(Common _tmpProjInvoiceControl, FormRowDisplayOption _options)
        {
            TmpProjInvoiceControl tmpProjInvoiceControl = _tmpProjInvoiceControl;
            if (tmpProjInvoiceControl.LineNum <= 2)
            {
                _options.backColor(qtyColor);
            }

            if (tmpProjInvoiceControl.Total)
            {
                _options.backColor(totalColor);
            }

            super(_tmpProjInvoiceControl, _options);
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            this.query().dataSourceName('general').addRange(fieldNum(TmpProjInvoiceControl, Quotation)).value(queryValue(NoYes::No));

            criteriaCurGeneral = this.query().dataSourceName('general').addRange(fieldNum(TmpProjInvoiceControl, CurrencyCode));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>LinkSource</Name>
				<Methods>
					<Method>
						<Name>linkFromCategoryGroup</Name>
						<Source><![CDATA[
        void linkFromCategoryGroup(ProjCategoryGroup _projCategoryGroup)
        {
            projCategoryGroupId = _projCategoryGroup.CategoryGroupId;

            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                this.fixedPrice(true);
                this.timeMaterial(true);
                this.investment(true);
                this.internalCost(true);
                this.timeProject(false,false);
            }

            this.editRevenue(false,false);
            this.editSubscription(false,false);
            this.editHour(false,false);
            this.editExpenses(false,false);
            this.editItem(false,false);
            this.editOnAccount(false,false);
            this.editSalesOrder(false,false);

            hoursButton.enabled(false);
            expensesButton.enabled(false);
            revenueButton.enabled(false);
            onAccButton.enabled(false);
            itemButton.enabled(false);
            orderLines.enabled(false);

            switch (_projCategoryGroup.CategoryType)
            {
                case ProjCategoryType::Revenue:
                    revenueButton.enabled(true);

                    if (!element.enableProjMultipleContractLinesForProjectFeature)
                    {
                        this.timeMaterial(true,false);
                        this.fixedPrice(false,false);
                        this.internalCost(false,false);
                        this.investment(false,false);
                    }
                    this.editSubscription(true,true);
                    this.editRevenue(true,true);
                    break;

                case ProjCategoryType::Hour:
                    hoursButton.enabled(true);
                    
                    if (!element.enableProjMultipleContractLinesForProjectFeature)
                    {
                        this.timeProject(true);
                    }

                    this.editHour(true,true);
                    break;

                case ProjCategoryType::Cost:
                    expensesButton.enabled(true);
                    this.editExpenses(true,true);
                    break;

                case ProjCategoryType::Item:
                    itemButton.enabled(true);
                    orderLines.enabled(true);
                    this.editItem(true,true);
                    this.editSalesOrder(true,true);
                    break;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>timeProject</Name>
						<Source><![CDATA[
        void timeProject(boolean value, boolean enabled = true)
        {
            timeProject.value(value);
            timeProject.enabled(enabled);
        }

]]></Source>
					</Method>
					<Method>
						<Name>fixedPrice</Name>
						<Source><![CDATA[
        void fixedPrice(boolean value, boolean enabled = true)
        {
            fixedPrice.value(value);
            fixedPrice.enabled(enabled);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editOnAccount</Name>
						<Source><![CDATA[
        void editOnAccount(boolean value, boolean enabled = true)
        {
            editOnAccount.enabled(enabled);
            editOnAccount.value(value);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editSalesOrder</Name>
						<Source><![CDATA[
        void editSalesOrder(boolean value, boolean enabled = true)
        {
            editSalesOrder.enabled(enabled);
            editSalesOrder.value(value);
        }

]]></Source>
					</Method>
					<Method>
						<Name>internalCost</Name>
						<Source><![CDATA[
        void internalCost(boolean value, boolean enabled = true)
        {
            internalCost.value(value);
            internalCost.enabled(enabled);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editRevenue</Name>
						<Source><![CDATA[
        void editRevenue(boolean value, boolean enabled = true)
        {
            editRevenue.enabled(enabled);
            editRevenue.value(value);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editSubscription</Name>
						<Source><![CDATA[
        void editSubscription(boolean value, boolean enabled = true)
        {
            editSubscription.enabled(enabled);
            editSubscription.value(value);
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkFromProjSorting</Name>
						<Source><![CDATA[
        void linkFromProjSorting()
        {
            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                this.fixedPrice(true,true);
                this.timeMaterial(true,true);
                this.internalCost(true,true);
                this.investment(true,true);
                this.timeProject(true,true);
            }

            this.editRevenue(true,true);
            this.editSubscription(true,true);
            this.editHour(true,true);
            this.editExpenses(true,true);
            this.editItem(true,true);
            this.editOnAccount(true,true);
            this.editSalesOrder(true,true);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editHour</Name>
						<Source><![CDATA[
        void editHour(boolean value, boolean enabled = true)
        {
            editHour.enabled(enabled);
            editHour.value(value);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editExpenses</Name>
						<Source><![CDATA[
        void editExpenses(boolean value, boolean enabled = true)
        {
            editExpenses.enabled(enabled);
            editExpenses.value(value);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editItem</Name>
						<Source><![CDATA[
        void editItem(boolean value, boolean enabled = true)
        {
            editItem.enabled(enabled);
            editItem.value(value);
        }

]]></Source>
					</Method>
					<Method>
						<Name>investment</Name>
						<Source><![CDATA[
        void investment(boolean value, boolean enabled = true)
        {
            investment.value(value);
            investment.enabled(enabled);
        }

]]></Source>
					</Method>
					<Method>
						<Name>timeMaterial</Name>
						<Source><![CDATA[
        void timeMaterial(boolean value, boolean enabled = true)
        {
            timeMaterial.value(value);
            timeMaterial.enabled(enabled);
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkFromInvoiceProject</Name>
						<Source><![CDATA[
        void linkFromInvoiceProject(ProjInvoiceTable _projInvoiceTable)
        {
            this.editRevenue(false,false);
            this.editSubscription(false,false);
            this.editHour(false,false);
            this.editExpenses(false,false);
            this.editItem(false,false);
            this.editOnAccount(false,false);
            this.editSalesOrder(false,false);

            projInvoiceProjId = _projInvoiceTable.ProjInvoiceProjId;
            invoiceCurrency = _projInvoiceTable.CurrencyId;

            if (element.enableProjMultipleContractLinesForProjectFeature)
            {
                this.editHour(true);
                this.editExpenses(true);
                this.editItem(true);

                if (projInvoiceProjId)
                {
                    if (ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForHourExpenseItemTransType(projInvoiceProjId))
                    {
                        this.editOnAccount(true);
                    }

                    if (ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForTransTypeBillingMethod(projInvoiceProjId, ProjTransType::Item, ProjContractBillingMethod::TimeMaterial))
                    {
                        this.editSalesOrder(true);
                    }

                    if (ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForTransTypeBillingMethod(projInvoiceProjId, ProjTransType::Revenue, ProjContractBillingMethod::TimeMaterial))
                    {
                        this.editRevenue(true);
                        this.editSubscription(true);
                        this.editOnAccount(true);
                    }
                    else if (ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForTransTypeBillingMethod(projInvoiceProjId, ProjTransType::Revenue, ProjContractBillingMethod::FixedPrice))
                    {
                        this.editRevenue(true);
                        this.editOnAccount(true);
                    }
                }
            }
            else
            {
                this.fixedPrice(true);
                this.timeMaterial(true);
                this.investment(true);
                this.internalCost(true);
                this.timeProject(true);

                ProjTable projTableCheck;
                select firstonly projTableCheck
                   where projTableCheck.ProjInvoiceProjId == projInvoiceProjId
                      && projTableCheck.Type    == ProjType::TimeMaterial;

                if (projTableCheck)
                {
                    this.editRevenue(true);
                    this.editSubscription(true);
                    this.editHour(true);
                    this.editExpenses(true);
                    this.editItem(true);
                    this.editOnAccount(true);
                    this.editSalesOrder(true);
                }

                select firstonly projTableCheck
                   where projTableCheck.ProjInvoiceProjId == projInvoiceProjId
                      && projTableCheck.Type              == ProjType::FixedPrice;

                if (projTableCheck)
                {
                    this.editRevenue(true);
                    this.editHour(true);
                    this.editExpenses(true);
                    this.editItem(true);
                    this.editOnAccount(true);
                }

                select firstonly projTableCheck
                   where projTableCheck.ProjInvoiceProjId == projInvoiceProjId
                      && projTableCheck.Type              == ProjType::Investment;

                if (projTableCheck)
                {
                    this.editHour(true);
                    this.editExpenses(true);
                    this.editItem(true);
                }

                select firstonly projTableCheck
                   where projTableCheck.ProjInvoiceProjId == projInvoiceProjId
                      && (projTableCheck.Type             == ProjType::Internal
                      ||  projTableCheck.Type             == ProjType::Cost);

                if (projTableCheck)
                {
                    this.editHour(true);
                    this.editExpenses(true);
                    this.editItem(true);
                }

                select firstonly projTableCheck
                   where projTableCheck.ProjInvoiceProjId == projInvoiceProjId
                      && projTableCheck.Type              == ProjType::Time;

                if (projTableCheck)
                {
                    this.timeProject(true);
                    this.editHour(true);
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkFromWIPProject</Name>
						<Source><![CDATA[
        void linkFromWIPProject(ProjWIPTable _projWIPTable)
        {
            ProjTable projTableLocal = _projWIPTable.projTable();
            
            if (element.enableProjMultipleContractLinesForProjectFeature)
            {
                if (projTableLocal.ProjInvoiceProjId)
                {
                    if (ProjMultipleContractLinesForProjectFeatureHelper::findBillingMethodContractLineForHourExpenseItemTransType(projTableLocal.ProjId, projTableLocal.ProjInvoiceProjId, ProjContractBillingMethod::FixedPrice))
                    {
                        this.editOnAccount(true, true);
                    }
                    else
                    {
                        this.editOnAccount(false, false);
                    }
                }
            }
            else
            {
                if (projTableLocal.Type == ProjType::FixedPrice)
                {
                    this.fixedPrice(true,false);
                    this.investment(false,false);
                    this.editOnAccount(true,true);
                }
                else if (projTableLocal.Type == ProjType::Investment)
                {
                    this.fixedPrice(false,false);
                    this.investment(true,false);
                    this.editOnAccount(false, false);
                }
            }

            this.editRevenue(false,false);
            this.editSubscription(false,false);
            this.editHour(true,true);
            this.editExpenses(true,true);
            this.editItem(true,true);
            this.editSalesOrder(false,false);

            revenueButton.enabled(false);
            orderLines.enabled(false);

            projWipId   = _projWIPTable.ProjId;
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkFromResource</Name>
						<Source><![CDATA[
        void linkFromResource(ResourceRecId _resource)
        {
            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                this.fixedPrice(true);
                this.timeMaterial(true);
                this.investment(true);
                this.internalCost(true);
                this.timeProject(true);
            }

            this.editRevenue(true);
            this.editSubscription(false,false);
            this.editHour(true);
            this.editExpenses(true);
            this.editItem(false,false);
            this.editOnAccount(false,false);
            this.editSalesOrder(false,false);

            onAccButton.enabled(false);
            itemButton.enabled(false);
            orderLines.enabled(false);

            resource         = _resource;
            resourceCategory = ResourceFacade::getResourceCategory(resource);
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkFromProject</Name>
						<Source><![CDATA[
        void linkFromProject(ProjTable _projTable)
        {
            ProjTable projTableCheck;
            boolean showChild;

            if (element.args().dataset() != tableNum(ProjGrantView))
            {
                showChild = includeSubprojects.value();
            }
            
            invoiceCurrency = ProjInvoiceTable::find(_projTable.ProjInvoiceProjId).CurrencyId;
            projId = _projTable.ProjId;

            this.fixedPrice(false,false);
            this.timeMaterial(false,false);
            this.investment(false,false);
            this.internalCost(false,false);
            this.timeProject(false,false);

            this.editRevenue(false,false);
            this.editSubscription(false,false);
            this.editHour(false,false);
            this.editExpenses(false,false);
            this.editItem(false,false);
            this.editOnAccount(false,false);
            this.editSalesOrder(false,false);
            this.psaEditRetain(false,false);

            if (element.enableProjMultipleContractLinesForProjectFeature)
            {
                this.editHour(true);
                this.editExpenses(true);
                this.editItem(true);

                if (showChild)
                {
                    PSAContractLineItems contractLine;
                    ProjId projIdFilter = projId + '*';
            
                    select firstonly projTableCheck
                        where projTableCheck.ProjId like projIdFilter
                            exists join contractLine
                                where contractLine.ProjInvoiceProjId == projTableCheck.ProjInvoiceProjId &&
                                        (contractLine.IncludeHourTrans == NoYes::Yes ||
                                         contractLine.IncludeExpenseTrans == NoYes::Yes ||
                                         contractLine.IncludeItemTrans == NoYes::Yes);
                    if (projTableCheck)
                    {
                        this.editOnAccount(true);
                        this.psaEditRetain(true);
                    }

                    select firstonly projTableCheck
                        where projTableCheck.ProjId like projIdFilter
                            exists join contractLine
                                where contractLine.ProjInvoiceProjId == projTableCheck.ProjInvoiceProjId &&
                                        contractLine.BillingMethod == ProjContractBillingMethod::TimeMaterial &&
                                        contractLine.IncludeItemTrans == NoYes::Yes;
                    if (projTableCheck)
                    {
                        this.editSalesOrder(true);
                    }

                    select firstonly projTableCheck
                        where projTableCheck.ProjId like projIdFilter
                            exists join contractLine
                                where contractLine.ProjInvoiceProjId == projTableCheck.ProjInvoiceProjId &&
                                        contractLine.BillingMethod == ProjContractBillingMethod::TimeMaterial &&
                                        contractLine.IncludeFeeTrans == NoYes::Yes;
                    if (projTableCheck)
                    {
                        this.editRevenue(true);
                        this.editSubscription(true);
                        this.editOnAccount(true);
                    }
                    else
                    {
                        select firstonly projTableCheck
                            where projTableCheck.ProjId like projIdFilter
                                exists join contractLine
                                    where contractLine.ProjInvoiceProjId == projTableCheck.ProjInvoiceProjId &&
                                            contractLine.BillingMethod == ProjContractBillingMethod::FixedPrice &&
                                            contractLine.IncludeFeeTrans == NoYes::Yes;
                        if (projTableCheck)
                        {
                            this.editRevenue(true);
                            this.editOnAccount(true);
                        }
                    }
                }
                else if (_projTable.ProjInvoiceProjId)
                {
                    if (ProjMultipleContractLinesForProjectFeatureHelper::getProjContractLineByContractIdTransType(_projTable.ProjId, _projTable.ProjInvoiceProjId, ProjTransType::Cost) ||
                        ProjMultipleContractLinesForProjectFeatureHelper::getProjContractLineByContractIdTransType(_projTable.ProjId, _projTable.ProjInvoiceProjId, ProjTransType::Hour) ||
                        ProjMultipleContractLinesForProjectFeatureHelper::getProjContractLineByContractIdTransType(_projTable.ProjId, _projTable.ProjInvoiceProjId, ProjTransType::Item))
                    {
                        this.editOnAccount(true);
                        this.psaEditRetain(true);
                    }

                    PSAContractLineItems contractLine = ProjMultipleContractLinesForProjectFeatureHelper::getProjContractLineByContractIdTransType(_projTable.ProjId, _projTable.ProjInvoiceProjId, ProjTransType::Item);
                    if (contractLine && contractLine.BillingMethod == ProjContractBillingMethod::TimeMaterial)
                    {
                        this.editSalesOrder(true);
                    }

                    contractLine = ProjMultipleContractLinesForProjectFeatureHelper::getProjContractLineByContractIdTransType(_projTable.ProjId, _projTable.ProjInvoiceProjId, ProjTransType::Revenue);
                    if (contractLine && contractLine.BillingMethod == ProjContractBillingMethod::TimeMaterial)
                    {
                        this.editRevenue(true);
                        this.editSubscription(true);
                        this.editOnAccount(true);
                    }
                    else if (contractLine && contractLine.BillingMethod == ProjContractBillingMethod::FixedPrice)
                    {
                        this.editRevenue(true);
                        this.editOnAccount(true);
                    }
                }
            }
            else
            {
                if (showChild)
                {
                    ProjId projIdFilter = projId + '*';
           
                    select firstonly projTableCheck
                       where projTableCheck.ProjId like projIdFilter
                          && projTableCheck.Type    == ProjType::TimeMaterial;

                    if (projTableCheck)
                    {
                        this.timeMaterial(true);

                        this.editRevenue(true);
                        this.editSubscription(true);
                        this.editHour(true);
                        this.editExpenses(true);
                        this.editItem(true);
                        this.editOnAccount(true);
                        this.editSalesOrder(true);
                        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                        {
                            this.psaEditRetain(true);
                        }
                    }
                    else
                    {
                        this.timeMaterial(false, false);
                    }

                    select firstonly projTableCheck
                       where projTableCheck.ProjId like projIdFilter
                          && projTableCheck.Type    == ProjType::FixedPrice;

                    if (projTableCheck)
                    {
                        this.fixedPrice(true);

                        this.editRevenue(true);
                        this.editHour(true);
                        this.editExpenses(true);
                        this.editItem(true);
                        this.editOnAccount(true);
                        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                        {
                            this.psaEditRetain(true);
                        }
                    }
                    else
                    {
                        this.fixedPrice(false, false);
                    }

                    select firstonly projTableCheck
                       where projTableCheck.ProjId like projIdFilter
                          && projTableCheck.Type    == ProjType::Investment;

                    if (projTableCheck)
                    {
                        this.investment(true);

                        this.editHour(true);
                        this.editExpenses(true);
                        this.editItem(true);
                    }
                    else
                    {
                        this.investment(false, false);
                    }

                    select firstonly projTableCheck
                       where  projTableCheck.ProjId like projIdFilter
                          && (projTableCheck.Type    == ProjType::Internal
                          ||  projTableCheck.Type    == ProjType::Cost);

                    if (projTableCheck)
                    {
                        this.internalCost(true);

                        this.editHour(true);
                        this.editExpenses(true);
                        this.editItem(true);
                    }
                    else
                    {
                        this.internalCost(false, false);
                    }

                    select firstonly projTableCheck
                       where projTableCheck.ProjId like projIdFilter
                          && projTableCheck.Type    == ProjType::Time;

                    if (projTableCheck)
                    {
                        this.timeProject(true);
                        this.editHour(true);
                    }
                    else
                    {
                        this.timeProject(false, false);
                    }
                }
                else
                {
                    switch (_projTable.Type)
                    {
                        case ProjType::TimeMaterial:
                            this.timeMaterial(true,false);

                            this.editRevenue(true);
                            this.editSubscription(true);
                            this.editHour(true);
                            this.editExpenses(true);
                            this.editItem(true);
                            this.editOnAccount(true);
                            this.editSalesOrder(true);
                            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                            {
                                this.psaEditRetain(true);
                            }
                            break;

                        case ProjType::FixedPrice:
                            this.fixedPrice(true,false);
                            this.editRevenue(true);
                            this.editHour(true);
                            this.editExpenses(true);
                            this.editItem(true);
                            this.editOnAccount(true);
                            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                            {
                                this.psaEditRetain(true);
                            }
                            break;

                        case ProjType::Investment:
                            this.investment(true,false);
                            this.editHour(true);
                            this.editExpenses(true);
                            this.editItem(true);
                            break;

                        case ProjType::Cost:
                            this.internalCost(true,false);
                            this.editHour(true);
                            this.editExpenses(true);
                            this.editItem(true);
                            break;

                        case ProjType::Internal:
                            this.internalCost(true,false);
                            this.editHour(true);
                            this.editExpenses(true);
                            this.editItem(true);
                            break;

                        case ProjType::Time:
                            this.timeProject(true,false);
                            this.editHour(true,false);
                            break;
                    }
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        public void linkActive()
        {
            /*
            ProjInvoiceTable        projInvoiceTable;
            */

            ProjCategory            projCategory;
            ProjCategoryGroup       projCategoryGroup;
            ProjGroup               projGroup;
            ProjSorting             projSorting;
            ProjWIPTable            projWIPTable;

            SMASubscriptionTable    smaSubscriptionTable;
            CustTable               custTable;
            HcmWorker               hcmWorker;
            ResourceRecId           resResource;
            InventTable             inventTable;
            TmpProjInvoiceControl   emptyControl;
            ProjGrantView           projGrantView;
            ProjGrant               projGrant;

            this.fixedPrice(false,false);
            this.timeMaterial(false,false);
            this.internalCost(false,false);
            this.investment(false,false);
            this.timeProject(false,false);

            if (element.enableProjMultipleContractLinesForProjectFeature)
            {
                FixedPrice.visible(false);
                TimeMaterial.visible(false);
                InternalCost.visible(false);
                Investment.visible(false);
                TimeProject.visible(false);
            }

            switch (element.args().dataset())
            {
                case(tableNum(CustTable)):
                    custTable           = element.args().record();
                    custAccount         = custTable.AccountNum;
                    this.linkFromCustTable();
                    break;

                case(tableNum(InventTable)):
                    inventTable         = element.args().record();
                    itemId              = inventTable.ItemId;
                    this.linkFromInventTable();
                    break;

                case tableNum(ProjTable):
                    projTable           = element.args().record();
                    this.linkFromProject(projTable);
                    break;

                case(tableNum(ProjGrantView)):
                    projGrantView           = element.args().record();
                    projTable               = ProjTable::find(projGrantView.ProjId);
                    this.linkFromProject(projTable);
                    break;

                case(tableNum(ProjGrant)):
                    projGrant               = element.args().record();
                    select firstonly ProjId from projGrantView
                    where projGrantView.GrantId == projGrant.GrantId;
                    projTable               = ProjTable::find(projGrantView.ProjId);
                    this.linkFromProject(projTable);
                    break;

                case tableNum(ProjInvoiceTable):
                    projInvoiceTable    = element.args().record();
                    this.linkFromInvoiceProject(projInvoiceTable);
                    break;

                case tableNum(ProjCategory):
                    projCategory        = element.args().record();
                    this.linkFromCategory(projCategory);
                    break;

                case tableNum(ProjCategoryGroup):
                    projCategoryGroup        = element.args().record();
                    this.linkFromCategoryGroup(projCategoryGroup);
                    break;

                case(tableNum(ProjGroup)):
                    projGroup           = element.args().record();
                    projGroupId         = projGroup.ProjGroupId;
                    this.linkFromProjGroup(projGroup);
                    break;

                case(tableNum(ProjSorting)):
                    projSorting1 = '';
                    projSorting2 = '';
                    projSorting3 = '';

                    projSorting         = element.args().record();
                    switch (projSorting.SortCode)
                    {
                        case ProjSortValue::Sorting1:
                            projSorting1 = projSorting.SortingId;
                            break;

                        case ProjSortValue::Sorting2:
                            projSorting2 = projSorting.SortingId;
                            break;

                        case ProjSortValue::Sorting3:
                            projSorting3 = projSorting.SortingId;
                            break;
                    }

                    this.linkFromProjSorting();
                    break;

                case tableNum(HcmWorker):
                    hcmWorker           = element.args().record();
                    resResource         = ResourceFacade::findByWorker(hcmWorker.RecId);
                    this.linkFromResource(resResource);
                    break;

                case tableNum(ResourceView):
                    resResource           = element.args().record().RecId;
                    this.linkFromResource(resResource);
                    break;

                case tableNum(ProjWIPTable):
                    projWIPTable        = element.args().record();
                    this.linkFromWIPProject(projWIPTable);
                    break;

                case(tableNum(SMASubscriptionTable)):
                    smaSubscriptionTable    = element.args().record();
                    subscriptionId          = smaSubscriptionTable.SubscriptionId;
                    this.linkFromSMASubscriptionTable();
                    break;
            }

            super();

            general.setTmpData(emptyControl);
            general_ds.research();

            quotation.setTmpData(emptyControl);
            quotation_ds.research();

            element.setButtonAccess();
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkFromCategory</Name>
						<Source><![CDATA[
        void linkFromCategory(ProjCategory _projCategory)
        {
            projCategoryId = _projCategory.CategoryId;

            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                this.fixedPrice(true);
                this.timeMaterial(true);
                this.investment(true);
                this.internalCost(true);
                this.timeProject(false,false);
            }

            this.editRevenue(false,false);
            this.editSubscription(false,false);
            this.editHour(false,false);
            this.editExpenses(false,false);
            this.editItem(false,false);
            this.editOnAccount(false,false);
            this.editSalesOrder(false,false);

            hoursButton.enabled(false);
            expensesButton.enabled(false);
            revenueButton.enabled(false);
            onAccButton.enabled(false);
            itemButton.enabled(false);
            orderLines.enabled(false);

            switch (_projCategory.CategoryType)
            {
                case ProjCategoryType::Revenue:
                    revenueButton.enabled(true);

                    if (!element.enableProjMultipleContractLinesForProjectFeature)
                    {                
                        this.timeMaterial(true,false);
                        this.fixedPrice(false,false);
                        this.internalCost(false,false);
                        this.investment(false,false);
                    }
                    if (_projCategory.SetupSubscription)
                    {
                        this.editSubscription(true,true);
                    }
                    else
                    {
                        this.editRevenue(true,true);
                    }
                    break;

                case ProjCategoryType::Hour:
                    hoursButton.enabled(true);

                    if (!element.enableProjMultipleContractLinesForProjectFeature)
                    {
                        this.timeProject(true);
                    }

                    this.editHour(true,true);
                    break;

                case ProjCategoryType::Cost:
                    expensesButton.enabled(true);
                    this.editExpenses(true,true);
                    break;

                case ProjCategoryType::Item:
                    itemButton.enabled(true);
                    orderLines.enabled(true);
                    this.editItem(true);
                    this.editSalesOrder(true);
                    break;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkFromSMASubscriptionTable</Name>
						<Source><![CDATA[
        void linkFromSMASubscriptionTable()
        {
            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                this.timeMaterial(true,false);
            }

            this.editRevenue(false,false);
            this.editSubscription(true,true);
            this.editHour(false,false);
            this.editExpenses(false,false);
            this.editItem(false,false);
            this.editOnAccount(false,false);
            this.editSalesOrder(false,false);
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkFromCustTable</Name>
						<Source><![CDATA[
        void linkFromCustTable()
        {
            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                this.fixedPrice(true,true);
                this.timeMaterial(true,true);
                this.internalCost(true,true);
                this.investment(true,true);
                this.timeProject(true,true);
            }

            this.editRevenue(true,true);
            this.editSubscription(true,true);
            this.editHour(true,true);
            this.editExpenses(true,true);
            this.editItem(true,true);
            this.editOnAccount(true,true);
            this.editSalesOrder(true,true);
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkFromInventTable</Name>
						<Source><![CDATA[
        void linkFromInventTable()
        {
            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                this.fixedPrice(true,true);
                this.timeMaterial(true,true);
                this.internalCost(true,true);
                this.investment(true,true);
                this.timeProject(false,false);
            }

            this.editRevenue(false,false);
            this.editSubscription(false,false);
            this.editHour(false,false);
            this.editExpenses(false,false);
            this.editItem(true,true);
            this.editOnAccount(false,false);
            this.editSalesOrder(false,false);
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkFromProjGroup</Name>
						<Source><![CDATA[
        void linkFromProjGroup(ProjGroup    _projGroup)
        {
            this.editRevenue(false,false);
            this.editSubscription(false,false);
            this.editHour(false,false);
            this.editExpenses(false,false);
            this.editItem(false,false);
            this.editOnAccount(false,false);
            this.editSalesOrder(false,false);

            // The switch to set the UI elements as per the project type
            switch (_projGroup.ProjType)
            {
                case ProjType::TimeMaterial:
                    this.timeMaterial(true,false);
                    this.editRevenue(true,true);
                    this.editSubscription(false,false);
                    this.editHour(true,true);
                    this.editExpenses(true,true);
                    this.editItem(true,true);
                    this.editOnAccount(true,true);
                    this.editSalesOrder(true,true);
                    break;

                case ProjType::FixedPrice:
                    this.fixedPrice(true,false);
                    this.editRevenue(true,true);
                    this.editSubscription(false,false);
                    this.editHour(true,true);
                    this.editExpenses(true,true);
                    this.editItem(true,true);
                    this.editOnAccount(true,true);
                    this.editSalesOrder(true,true);
                    break;

                case ProjType::Investment:
                    this.investment(true,false);
                    this.editRevenue(false,false);
                    this.editSubscription(false,false);
                    this.editHour(true,true);
                    this.editExpenses(true,true);
                    this.editItem(true,true);
                    this.editOnAccount(false,false);
                    this.editSalesOrder(true,true);
                    break;

                case ProjType::Cost:
                    this.internalCost(true,false);
                    this.editRevenue(false,false);
                    this.editSubscription(false,false);
                    this.editHour(true,true);
                    this.editExpenses(true,true);
                    this.editItem(true,true);
                    this.editOnAccount(false,false);
                    this.editSalesOrder(true,true);
                    break;

                case ProjType::Internal:
                    this.internalCost(true,false);
                    this.editRevenue(false,false);
                    this.editSubscription(false,false);
                    this.editHour(true,true);
                    this.editExpenses(true,true);
                    this.editItem(true,true);
                    this.editOnAccount(false,false);
                    this.editSalesOrder(true,true);
                    break;

                case ProjType::Time:
                    this.timeProject(true,false);
                    this.editRevenue(false,false);
                    this.editSubscription(false,false);
                    this.editHour(true,true);
                    this.editExpenses(false,false);
                    this.editItem(false,false);
                    this.editOnAccount(false,false);
                    this.editSalesOrder(false,false);
                    break;

                case ProjType::None:                
                    this.editRevenue(true,true);
                    this.editSubscription(false,false);
                    this.editHour(true,true);
                    this.editExpenses(true,true);
                    this.editItem(true,true);
                    this.editOnAccount(true,true);
                    this.editSalesOrder(true,true);
                    break;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>PSAEditRetain</Name>
						<Source><![CDATA[
        void PSAEditRetain(
            boolean     value,
            boolean     enabled = true)
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                psaEditRetain.enabled(enabled);
                psaEditRetain.value(value);
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>Quotation</Name>
				<Methods>
					<Method>
						<Name>displayOption</Name>
						<Source><![CDATA[
        public void displayOption(Common _tmpProjInvoiceControl, FormRowDisplayOption _options)
        {
            TmpProjInvoiceControl tmpProjInvoiceControl = _tmpProjInvoiceControl;
            if (tmpProjInvoiceControl.LineNum <= 2)
            {
                _options.backColor(qtyColor);
            }

            if (tmpProjInvoiceControl.Total)
            {
                _options.backColor(totalColor);
            }

            super(_tmpProjInvoiceControl, _options);
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            this.query().dataSourceName('quotation').addRange(fieldNum(TmpProjInvoiceControl, Quotation)).value(queryValue(NoYes::Yes));

            criteriaCurQuotation = this.query().dataSourceName('quotation').addRange(fieldNum(TmpProjInvoiceControl, CurrencyCode));
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            criteriaCurQuotation.value(queryValue(currencyCode));

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Calculate</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.invoiceControl();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HoursButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args            args;

            args = new Args();
            args.record(general);
            args.parmObject(element.projInvoiceControl());

            new MenuFunction(menuitemDisplayStr(projTransEmpl), MenuItemType::Display).run(args);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpensesButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args            args;

            args = new Args();
            args.record(general);
            args.parmObject(element.projInvoiceControl());

            new MenuFunction(menuitemDisplayStr(projTransCost), MenuItemType::Display).run(args);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ItemButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args            args;

            args = new Args();
            args.record(general);
            args.parmObject(element.projInvoiceControl());

            new MenuFunction(menuitemDisplayStr(projTransItem), MenuItemType::Display).run(args);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RevenueButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args            args;

            args = new Args();
            args.record(general);
            args.parmObject(element.projInvoiceControl());

            new MenuFunction(menuitemDisplayStr(projTransRevenue), MenuItemType::Display).run(args);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OnAccButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args            args;

            args = new Args();
            args.record(general);
            args.parmObject(element.projInvoiceControl());

            new MenuFunction(menuitemDisplayStr(projTransOnAcc), MenuItemType::Display).run(args);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OrderLines</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args            args;

            args = new Args();
            args.record(general);
            args.parmObject(element.projInvoiceControl());

            new MenuFunction(menuitemDisplayStr(salesLine), MenuItemType::Display).run(args);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Adjustment</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args            args;

            args = new Args();
            args.record(general);
            args.parmObject(element.projInvoiceControl());

            new MenuFunction(menuitemDisplayStr(ProjAdjustment), MenuItemType::Display).run(args);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PSACtrlProposal</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            MenuFunction                menuFunction;
            Args                        args = new Args();
            ProjInvoiceTable            localProjInvoiceTable;

            localProjInvoiceTable = ProjInvoiceTable::find(projTable.ProjInvoiceProjId);

            boolean hasBillingRules;

            if (localProjInvoiceTable)
            {
                if (FeatureStateProvider::isFeatureEnabled(ProjCreationOfInvoiceProposalBasedOnBillingRuleAvailabilityFeature::instance()))
                {
                    hasBillingRules = ProjInvoiceTable::hasBillingRulesForSelectedProject(localProjInvoiceTable.ProjInvoiceProjId, projTable.ProjId);
                }
                else
                {
                    hasBillingRules = PSAContractLineItems::hasBillingRules(localProjInvoiceTable.ProjInvoiceProjId);
                }
            }

            if (hasBillingRules)
            {
                args.record(localProjInvoiceTable);
                menuFunction = new MenuFunction(menuitemDisplayStr(PSAProjProposalSelectionCLIN), MenuItemType::Display);
            }
            else
            {
                args.record(projTable);
                menuFunction = new MenuFunction(menuitemDisplayStr(PSAProjProposalSelection), MenuItemType::Display);
            }

            menuFunction.run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProjInvoiceProposalListPage</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args    args = new Args();

            if (projInvoiceTable)
            {
                args.record(projInvoiceTable);
            }
            else if (projTable)
            {
                args.record(projTable);
            }

            new MenuFunction(menuitemDisplayStr(ProjInvoiceProposalListPage), MenuItemType::Display).run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CtrlProposal</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args            args;

            args = new Args();
            args.record(general);
            args.parmObject(element.projInvoiceControl());
            args.caller(element);

            new MenuFunction(menuitemDisplayStr(ProjInvoiceProposal), MenuItemType::Display).run(args);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CtrlInvoice</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args            args;

            args = new Args();
            args.record(general);
            args.parmObject(element.projInvoiceControl());

            new MenuFunction(menuitemDisplayStr(ProjInvoiceJournal), MenuItemType::Display).run(args);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CtrlOnAcc</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args            args;

            args = new Args();
            args.record(general);
            args.parmObject(element.projInvoiceControl());

            new MenuFunction(menuitemDisplayStr(projTransOnAcc), MenuItemType::Display).run(args);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>editHour</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            if (editHour.value())
            {
                hoursButton.enabled(true);
            }
            else
            {
                hoursButton.enabled(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>editExpenses</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            if (editExpenses.value())
            {
                expensesButton.enabled(true);
            }
            else
            {
                expensesButton.enabled(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>editItem</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            if (editItem.value())
            {
                itemButton.enabled(true);
            }
            else
            {
                itemButton.enabled(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>editRevenue</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            if (editSubscription.value() || editRevenue.value())
            {
                revenueButton.enabled(true);
            }
            else
            {
                revenueButton.enabled(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>editSubscription</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            if (editSubscription.value() || editRevenue.value())
            {
                revenueButton.enabled(true);
            }
            else
            {
                revenueButton.enabled(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>editOnAccount</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            if (editOnAccount.value())
            {
                onAccButton.enabled(true);
            }
            else
            {
                onAccButton.enabled(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>editSalesOrder</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            if (editSalesOrder.value())
            {
                orderLines.enabled(true);
            }
            else
            {
                orderLines.enabled(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>IncludeSubprojects</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            if (projTable)
            {
                linkSource_ds.linkFromProject(projTable);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ComboBoxFieldIds</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            currencyCode = currencyIds.lookup(comboBoxFieldIds.selection() + 1);

            general_ds.executeQuery();
            quotation_ds.executeQuery();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        public int selectionChange()
        {
            int ret;

            ret = super();

            currencyCode = currencyIds.lookup(comboBoxFieldIds.selection() + 1);

            general_ds.executeQuery();
            quotation_ds.executeQuery();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>General</Name>
			<Table>TmpProjInvoiceControl</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>All</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Invoiced</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NoOfRec</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NotChargeable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSACapExempt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAIndirectChargeable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAIndirectInvoiced</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAProposalAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSARetainLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSATotalChargeable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSATotalInvoiced</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Quotation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>quotationAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QuotationInvoiceRemain</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QuotationRemain</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMASubscription</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ToBeInvoiced</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Total</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalInvoicing</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Type</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<Index>CurLineIdx</Index>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>LinkSource</Name>
			<Table>LogisticsPostalAddress</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Address</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Apartment_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Building_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BuildingCompliment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>City</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CityKana_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CityRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CountryRegionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>County</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>District</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DistrictName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FlatId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HouseId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsPrivate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Latitude</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Location</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Longitude</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostBox</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrivateForParty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>State</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Street</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StreetId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StreetKana_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StreetNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TimeZone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ZipCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ZipCodeRecId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>Quotation</Name>
			<Table>TmpProjInvoiceControl</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>All</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Invoiced</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NoOfRec</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NotChargeable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSACapExempt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAIndirectChargeable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAIndirectInvoiced</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAProposalAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSARetainLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSATotalChargeable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSATotalInvoiced</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Quotation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>quotationAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QuotationInvoiceRemain</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QuotationRemain</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMASubscription</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ToBeInvoiced</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Total</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalInvoicing</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Type</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<Index>CurLineIdx</Index>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS86447</Caption>
		<Height xmlns="">0</Height>
		<HeightMode xmlns="">Column</HeightMode>
		<Pattern xmlns="">SimpleDetails-StandardTabsContainer</Pattern>
		<PatternVersion xmlns="">1.5</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Width xmlns="">0</Width>
		<WidthMode xmlns="">Column</WidthMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>536870911</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>Calculate</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS1085</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>Transaction</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>HoursButton</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS5269</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>ExpensesButton</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS78349</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>ItemButton</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>LogisticsBasic</ConfigurationKey>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS14428</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>RevenueButton</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS9154</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>OnAccButton</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS50040</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonSeparatorControl">
										<Name>Separator1</Name>
										<ElementPosition>2113929214</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ButtonSeparator</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>OrderLines</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>LogisticsBasic</ConfigurationKey>
										<ElementPosition>2130706430</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS508</Text>
									</AxFormControl>
								</Controls>
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS1084</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>Adjustment</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS596</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>Invoice</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1979711486</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>PSACtrlProposal</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS114916</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>ProjInvoiceProposalListPage</Name>
										<ElementPosition>805306366</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<KeyTip>Review all invoice proposals for the selected project</KeyTip>
										<MenuItemName>ProjInvoiceProposalListPage</MenuItemName>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>CtrlProposal</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1207959550</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS16904</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>CtrlInvoice</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS12128</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonSeparatorControl">
										<Name>Separator</Name>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ButtonSeparator</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>CtrlOnAcc</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS50040</Text>
									</AxFormControl>
								</Controls>
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS12128</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>TopGroup</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>Auto</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ProjTypes</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>TimeMaterial</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>613566756</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS53874</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>FixedPrice</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>920350134</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS3237</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>Investment</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1227133512</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS78353</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>InternalCost</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1533916890</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS78366</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>TimeProject</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1840700268</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS25816</Label>
							</AxFormControl>
						</Controls>
						<Caption>@SYS78367</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>CategoryTypes</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>editHour</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>477218588</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS5269</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>editExpenses</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>715827882</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS78349</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>editItem</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ConfigurationKey>LogisticsBasic</ConfigurationKey>
								<ElementPosition>954437176</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS7407</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>editRevenue</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1193046470</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS9154</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>editSubscription</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ConfigurationKey>SMASubscription</ConfigurationKey>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS84335</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>editOnAccount</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1670265058</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS50040</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>editSalesOrder</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ConfigurationKey>LogisticsBasic</ConfigurationKey>
								<ElementPosition>1908874352</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS90573</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>PSAEditRetain</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2028178999</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@PSA11244</Label>
							</AxFormControl>
						</Controls>
						<Caption>@SYS78373</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ProjectDate</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>editprojTransDateFrom</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>TransDate</ExtendedDataType>
								<Label>@SYS24050</Label>
								<LookupButton>Always</LookupButton>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>editProjTransDateTo</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>TransDate</ExtendedDataType>
								<Label>@SYS80934</Label>
								<LookupButton>Always</LookupButton>
							</AxFormControl>
						</Controls>
						<Caption>@SYS54242</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Data</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1744830462</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>IncludeSubprojects</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS321414</Label>
							</AxFormControl>
						</Controls>
						<Caption>@SYS7403</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>SalesCurrency</Name>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>ComboBoxFieldIds</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS86348</Label>
								<Items />
							</AxFormControl>
						</Controls>
						<Caption>@SYS56480</Caption>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1610612733</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabPageGeneral</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>GridGeneral</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>General_LineNum</Name>
										<Type>Integer</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>LineNum</DataField>
										<DataSource>General</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>OverviewGeneral</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>OverviewGeneral_M_transType</Name>
												<AllowEdit>No</AllowEdit>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>transType</DataMethod>
												<DataSource>General</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>OverviewGeneral_Invoiced</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>Invoiced</DataField>
												<DataSource>General</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>OverviewGeneral_ToBeInvoiced</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>ToBeInvoiced</DataField>
												<DataSource>General</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>OverviewGeneral_TotalInvoicing</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>TotalInvoicing</DataField>
												<DataSource>General</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>OverviewGeneral_NotChargeable</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>NotChargeable</DataField>
												<DataSource>General</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>OverviewGeneral_All</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@FieldDescriptions_AccountsReceivable:ProjInvoiceControl_OverviewGeneral_All</HelpText>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>All</DataField>
												<DataSource>General</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormIntegerControl">
												<Name>OverviewGeneral_NoOfRec</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Integer</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>NoOfRec</DataField>
												<DataSource>General</DataSource>
											</AxFormControl>
										</Controls>
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataGroup>OverviewGeneral</DataGroup>
										<DataSource>General</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>General</DataSource>
								<ShowRowLabels>No</ShowRowLabels>
							</AxFormControl>
						</Controls>
						<Caption>@SYS2952</Caption>
						<DataSource>General</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabPageQuote</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@FieldDescriptions_AccountsReceivable:ProjInvoiceControl_TabPageQuote</HelpText>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>OverviewQuotation</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Group4_M_TransType</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>TransType</DataMethod>
												<DataSource>Quotation</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>Group4_quotationAmount</Name>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@FieldDescriptions_AccountsReceivable:ProjInvoiceControl_Group4_quotationAmount</HelpText>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>quotationAmount</DataField>
												<DataSource>Quotation</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>Group4_Invoiced</Name>
												<ElementPosition>1879048190</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>Invoiced</DataField>
												<DataSource>Quotation</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>Group4_QuotationInvoiceRemain</Name>
												<ElementPosition>2013265918</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>QuotationInvoiceRemain</DataField>
												<DataSource>Quotation</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>Group4_ToBeInvoiced</Name>
												<ElementPosition>2080374782</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>ToBeInvoiced</DataField>
												<DataSource>Quotation</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>Group4_QuotationRemain</Name>
												<ElementPosition>2113929214</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>QuotationRemain</DataField>
												<DataSource>Quotation</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormIntegerControl">
												<Name>Group4_NoOfRec</Name>
												<ElementPosition>2130706430</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Integer</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>NoOfRec</DataField>
												<DataSource>Quotation</DataSource>
											</AxFormControl>
										</Controls>
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataGroup>OverviewQuotation</DataGroup>
										<DataSource>Quotation</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>Quotation</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS5864</Caption>
						<DataSource>Quotation</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>