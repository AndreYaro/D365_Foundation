<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailDeviceActivationValidation</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class RetailDeviceActivationValidation extends FormRun
{
    List devices = new List(Types::String);
    TableId tableId;
}
]]></Source>
			</Method>
			<Method>
				<Name>getSelectedDeviceCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the count of the selected rows.
    /// </summary>
    public str getSelectedDeviceCount()
    {
        int64 deviceCount = devices.elements();
        return int642Str(deviceCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedDevices</Name>
				<Source><![CDATA[
    private void getSelectedDevices()
    {
        FormRun f;
        Object caller;
        FormDataSource deviceTable_ds;

        //Get the selected worker ids
        caller = this.args().caller();
        if (!caller || !(caller is FormRun))
        {
            // not called from a form
            return;
        }

        // Was this called with a backing RetailDevice datasource?
        if (tableId == tableNum(RetailDevice) || tableId == tableNum(RetailDeviceView))
        {
            deviceTable_ds = FormDataUtil::getFormDataSource(this.args().record());
            Common row;
            //If there were any selected rows from the datasource, then add their RecIds to the list.
            if (deviceTable_ds.anyMarked())
            {
                row = deviceTable_ds.getFirst(1, false);
                while (row)
                {
                    this.addSelectedDeviceId(row);
                    row = deviceTable_ds.getNext();
                }
            }
            else
            {
                //Add the single current record.
                row = this.args().record();
                if (row)
                {
                    this.addSelectedDeviceId(row);
                }
            }
        }
        else
        {
            // not called from a supported form.
            warning(strfmt('Device activation validation is not supported from form %1.', caller.name()));
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSelectedDeviceId</Name>
				<Source><![CDATA[
    private void addSelectedDeviceId(Common selectedRow)
    {
        if (tableid == tableNum(RetailDeviceView))
        {
            RetailDeviceView deviceview = selectedRow;
            devices.addEnd(deviceview.DeviceId);
        }
        else
        {
            RetailDevice device = selectedRow;
            devices.addEnd(device.DeviceId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateDevices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configure and run the batch job to create the external identities for the selected Workers.
    /// </summary>
    private void ValidateDevices()
    {
        RetailStaffId staffId = SelectedStaffId.valueStr();
        if (devices.elements() > 0)
        {
            //Configure the job
            RetailDeviceActivationValidationJob job = new RetailDeviceActivationValidationJob();
            job.parmPackedDeviceIdList(devices.pack());
            job.parmPackedStaffId(staffId);

            //Run the job.
            job.runOperation();
        }
        else
        {
            warning('@Retail:RetailExternalIdentityCreate_NoRecordsError'); //'No external identities were created because there are no selected records.');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RefreshCallerForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the calling form with the updated records.
    /// </summary>
    private void RefreshCallerForm()
    {
        FormRun f = this.args().Caller() as FormRun;

        if (f)
        {
            f.dataSource().research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create external identities for the selected workers.
    /// </summary>
    public void closeOk()
    {
        super();
        this.ValidateDevices();
        this.RefreshCallerForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the form.
    /// </summary>
    public void init()
    {
        super();
        tableId = this.args().record().TableId;
        this.getSelectedDevices();
        SelectedDeviceCount.text(this.getSelectedDeviceCount());
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>SelectedStaffId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Lookup a Staff/Worker
        /// </summary>
        public void lookup()
        {
            Query                   query = new Query();
            SysTableLookup          lookup;

            query.addDataSource(tableNum(RetailStaffTable));

            lookup = SysTableLookup::newParameters(tableNum(RetailStaffTable), this);
            lookup.addLookupfield(fieldNum(RetailStaffTable, StaffId));
            lookup.parmQuery(query);
            lookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">Device activation validation</Caption>
		<DefaultAction xmlns="">OkCommandButton</DefaultAction>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<UseCaptionFromMenuItem xmlns="">Yes</UseCaptionFromMenuItem>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ContentSection</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SelectedDeviceCount</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>Total selected devices</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SelectedStaffId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS305602</Label>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>DialogCommitContainer</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OkCommandButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelCommandButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>
