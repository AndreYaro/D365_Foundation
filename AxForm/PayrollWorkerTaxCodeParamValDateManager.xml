<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>PayrollWorkerTaxCodeParamValDateManager</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class PayrollWorkerTaxCodeParamValDateManager extends FormRun
{
    RefRecId                           selectedDataAreaRecId;
    QueryBuildRange                    qbr;
    PayrollWorkerTaxCodeParameterValue workerTaxCodeParamValBuffer;
    PayrollWorkerTaxCode               workerTaxCode;
    PayrollPositionDetails             positionDetails;
    HcmPositionWorkerAssignment        positionWorkerAssignment;

    date                               dateMin;
    date                               dateMax;
    date                               validFrom;
    date                               validTo;
    utcdatetime                        dateTimeMin;
    utcdatetime                        dateTimeMax;

}
]]></Source>
			</Method>
			<Method>
				<Name>getWorkerRecId</Name>
				<Source><![CDATA[
    public HcmWorkerRecId getWorkerRecId()
    {
        return (workerTaxCode.Worker);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        Common                              common;
        FormDataSource                      fds;
        PayrollWorkerTaxCodeParameterValue  paramValBuf;
        PayrollTaxCodeParameter             taxcodeParameter;
        QueryBuildDataSource                qbds;
        dateMin = dateNull();
        dateMax = dateMax();
        dateTimeMin = DateTimeUtil::minValue();
        dateTimeMax = DateTimeUtil::maxValue();

        super();

        if (element.args().dataset())
        {
            common = element.args().record();

            if (common.TableId == tableNum(PayrollWorkerTaxCodeParameterValue))
            {
                workerTaxCodeParamValBuffer = common as PayrollWorkerTaxCodeParameterValue;
            }
        }
        else if (element.args().lookupTable() == tableNum(PayrollWorkerTaxCodeParameterValue))
        {
            if (element.args().lookupField() == fieldNum(PayrollWorkerTaxCodeParameterValue, RecId))
            {
                workerTaxCodeParamValBuffer = PayrollWorkerTaxCodeParameterValue::find(str2int64(element.args().lookupValue()));

                select firstOnly * from paramValBuf join taxcodeParameter
                    where paramValBuf.RecId == str2int64(element.args().lookupValue())
                    && taxcodeParameter.RecId == paramValBuf.TaxCodeParameter;

                element.args().lookupRecord(paramValBuf);
                element.args().lookupTable(0);
                element.args().lookupField(0);
                element.args().lookupValue('');
            }
        }
        else
        {
            throw error(strFmt("@SYS22678",element.name()));
        }

        LegalEntityComboBox.text(CompanyInfo::getDataArea(workerTaxCodeParamValBuffer.LegalEntity));
        selectedDataAreaRecId = workerTaxCodeParamValBuffer.LegalEntity;

        qbds = payrollWorkerTaxCodeParameterValue_ds.query().dataSourceTable(tableNum(PayrollWorkerTaxCodeParameterValue));
        payrollWorkerTaxCodeParameterValue_ds.query().validTimeStateDateRange(dateMin, dateMax);

        fds = TaxCodeParamValueGrid_TaxCodeParameter.referenceDataSource();
        qbds.clearSortIndex();
        qbds.sortClear();
        fds.queryBuildDataSource().addOrderByField(fieldNum(PayrollTaxCodeParameter, Name));

        qbds.addOrderByField(fieldNum(PayrollWorkerTaxCodeParameterValue, validFrom));
        qbr = qbds.addRange(fieldNum(PayrollWorkerTaxCodeParameterValue, WorkerTaxCode));
        qbr.status(RangeStatus::Hidden);
        qbr.value(int642str(workerTaxCodeParamValBuffer.WorkerTaxCode));

        qbr = qbds.addRange(fieldNum(PayrollWorkerTaxCodeParameterValue, LegalEntity));

        workerTaxCode = PayrollWorkerTaxCode::find(workerTaxCodeParamValBuffer.WorkerTaxCode);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>PayrollWorkerTaxCodeParameterValue</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;

            ret = super();

            if (payrollWorkerTaxCodeParameterValue.ValidTo < payrollWorkerTaxCodeParameterValue.ValidFrom)
            {
                ret = ret && checkFailed("@SYS116175");
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            PayrollWorkerTaxCodeParameterValue.WorkerTaxCode = workerTaxCodeParamValBuffer.WorkerTaxCode;
            PayrollWorkerTaxCodeParameterValue.LegalEntity   = selectedDataAreaRecId;

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            qbr.value(queryValue(selectedDataAreaRecId));

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            PayrollTaxCodeParameter taxCodeParam;

            int ret;

            ret = super();

            select firstOnly ControlType from taxCodeParam where taxCodeParam.RecId == PayrollWorkerTaxCodeParameterValue.TaxCodeParameter;

            if (taxCodeParam.ControlType == PayrollControlType::Freetext)
            {
                ret = Group_Value.lookupButton(FormLookupButton::Never);
            }
            else
            {
                ret = Group_Value.lookupButton(FormLookupButton::Always);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>TaxCodeParameter</DataField>
						<Methods>
							<Method>
								<Name>resolveReference</Name>
								<Source><![CDATA[
            public Common resolveReference(FormReferenceControl _formReferenceControl)
            {
                Str60    paramName;
                PayrollTaxEngineTaxCode taxEngineTaxCode;
                PayrollTaxCodeParameter resolvedRecord;

                paramName = _formReferenceControl.filterValue(AbsoluteFieldBinding::construct(fieldStr(PayrollTaxCodeParameter, Name), tableStr(PayrollTaxCodeParameter))).value();

                taxEngineTaxCode = PayrollTaxEngineTaxCode::findByPayrollTaxCode(workerTaxCode.PayrollTaxCode);

                select firstonly resolvedRecord
                    where resolvedRecord.Name == paramName &&
                    resolvedRecord.TaxEngineTaxCode == taxEngineTaxCode.RecId;

                return resolvedRecord;
            }

]]></Source>
							</Method>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            public void jumpRef()
            {
                // Suppressing super() call to remove the jumpref functionality as the
                // there is no form corresponding to TaxCodeParameter table
                //super();
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                PayrollTaxEngineTaxCode taxEngineTaxCode;
                PayrollTaxCodeParameter selectedRecord;
                Query                   query          = new Query();
                SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tableNum(PayrollTaxCodeParameter), _formReferenceControl, true);
                ;

                taxEngineTaxCode = PayrollTaxEngineTaxCode::findByPayrollTaxCode(workerTaxCode.PayrollTaxCode);

                sysTableLookup.addLookupField(fieldNum(PayrollTaxCodeParameter, Name));
                sysTableLookup.addLookupField(fieldNum(PayrollTaxCodeParameter, Description));
                query.addDataSource(tableNum(PayrollTaxCodeParameter)).addRange(fieldNum(PayrollTaxCodeParameter, TaxEngineTaxCode)).value(queryValue(taxEngineTaxCode.RecId));
                sysTableLookup.parmQuery(query);
                selectedRecord = sysTableLookup.performFormLookup();

                return selectedRecord;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Value</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;
                PayrollTaxCodeParameter         taxCodeParam;
                PayrollTaxCodeParameterDuration taxCodeParamDuration;
                PayrollTaxCodeParameterValue    taxCodeParamValue;

                validFrom = payrollWorkerTaxCodeParameterValue.ValidFrom;
                validTo = payrollWorkerTaxCodeParameterValue.ValidTo;

                ret = super();

                if (validTo < validFrom)
                {
                    ret = ret && checkFailed("@SYS116175");
                }

                if (ret && this.getValue())
                {
                    select firstOnly ControlType from taxCodeParam where taxCodeParam.RecId == payrollWorkerTaxCodeParameterValue.TaxCodeParameter;

                    select firstOnly ValidTimeState(dateMin, dateMax) RecId from taxCodeParamDuration where taxCodeParamDuration.TaxCodeParameter == taxCodeParam.RecId;

                    select firstOnly ValidTimeState(validFrom, validTo) Value, RecId from taxCodeParamValue where taxCodeParamValue.TaxCodeParameterDuration == taxCodeParamDuration.RecId
                        && taxCodeParamValue.Value == this.getValue();

                    if (!taxCodeParamValue.RecId && taxCodeParam.ControlType == PayrollControlType::List)
                    {
                        ret = ret && checkFailed("@Payroll:TheValueEnteredIsNotValidForTheCurrentVersionOfThisWorkerTax");
                    }
                }

                return ret;
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                PayrollTaxCodeParameterDuration    taxCodeParamDuration;
                validFrom = payrollWorkerTaxCodeParameterValue.ValidFrom;
                validTo = payrollWorkerTaxCodeParameterValue.ValidTo;

                if (validTo < validFrom)
                {
                    checkFailed("@SYS116175");
                }
                else
                {
                    select firstOnly ValidTimeState(dateMin, dateMax) RecId from taxCodeParamDuration where taxCodeParamDuration.TaxCodeParameter == PayrollWorkerTaxCodeParameterValue.TaxCodeParameter;
                    PayrollWorkerTaxCodeParameterValue::lookupTaxCodeParameterValues(_formControl, taxCodeParamDuration.RecId, true, validFrom, validTo);
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>LegalEntityComboBox</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                selectedDataAreaRecId = CompanyInfo::findDataArea(LegalEntityComboBox.text()).RecId;
                payrollWorkerTaxCodeParameterValue_ds.executeQuery();
                PayrollWorkerTaxCodeParameterValue.LegalEntity = selectedDataAreaRecId;
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret = true;

            select ValidTimeState(dateTimeMin, dateTimeMax) PaidByLegalEntity from positionDetails
                group by PaidByLegalEntity
                    join Position, Worker from positionWorkerAssignment
                    where positionWorkerAssignment.Position == positionDetails.Position
                    && positionWorkerAssignment.Worker == workerTaxCode.Worker
                    && positionDetails.PaidByLegalEntity == CompanyInfo::findDataArea(LegalEntityComboBox.text()).RecId;

            if (!positionDetails.PaidByLegalEntity)
            {
                ret = checkFailed(strFmt("@SYS342222", LegalEntityComboBox.text()));
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Group_Value</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean                         ret;
            int                             lookupValue;

            ret = super();

            lookupValue = this.lookupButton();

            if (lookupValue == 1) // No lookup, free-text field
            {
                if (!str2numOK(this.text()) || str2num(this.text()) < 0)
                {
                    ret = ret && checkFailed("@Payroll:ValidValuesForTheSelectedParameterMustBeZeroOrGreaterEnterAV");
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>PayrollWorkerTaxCodeParameterValue</Name>
			<Table>PayrollWorkerTaxCodeParameterValue</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LegalEntity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxCodeParameter</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Value</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkerTaxCode</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources>
				<AxFormReferencedDataSource>
					<Name>PayrollTaxCodeParameter</Name>
					<Table>PayrollTaxCodeParameter</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>ControlType</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>createdBy</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>createdDateTime</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>dataAreaId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Description</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>modifiedBy</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>modifiedDateTime</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Name</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TaxEngineTaxCode</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<JoinSource>PayrollWorkerTaxCodeParameterValue</JoinSource>
					<LinkType>OuterJoin</LinkType>
					<JoinRelation>TaxCodeParameter_FK</JoinRelation>
				</AxFormReferencedDataSource>
			</ReferencedDataSources>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<ValidTimeStateAutoQuery>DateRange</ValidTimeStateAutoQuery>
			<ValidTimeStateUpdate>Correction</ValidTimeStateUpdate>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@Payroll:WorkerTaxCodeParameterDateManager</Caption>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">SimpleList</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CustomFilterGroup</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>TaxCodeParamValueGrid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
									<Value>TaxCodeParamValueGrid_TaxCodeParameter_Name</Value>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>LegalEntityComboBox</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>PayrollPositionWorkerAssignmentLE</ExtendedDataType>
						<Label>@Payroll:LegalEntity</Label>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>TaxCodeParamValueGrid</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormReferenceGroupControl">
						<Name>TaxCodeParamValueGrid_TaxCodeParameter</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>858993458</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ReferenceGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>TaxCodeParamValueGrid_TaxCodeParameter_Name</Name>
								<DataRelationPath>TaxCodeParameter_FK</DataRelationPath>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
							</AxFormControl>
						</Controls>
						<DataSource>PayrollWorkerTaxCodeParameterValue</DataSource>
						<ReferenceField>TaxCodeParameter</ReferenceField>
						<ReplacementFieldGroup>Overview</ReplacementFieldGroup>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>ParameterDescription</Name>
						<ElementPosition>1181116005</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>Description</DataField>
						<DataSource>PayrollTaxCodeParameter</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>TaxCodeParamValueGrid_ValidFrom</Name>
						<ElementPosition>1503238552</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Date</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>ValidFrom</DataField>
						<DataSource>PayrollWorkerTaxCodeParameterValue</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>TaxCodeParamValueGrid_ValidTo</Name>
						<ElementPosition>1825361099</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Date</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>ValidTo</DataField>
						<DataSource>PayrollWorkerTaxCodeParameterValue</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Group_Value</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>Value</DataField>
						<DataSource>PayrollWorkerTaxCodeParameterValue</DataSource>
					</AxFormControl>
				</Controls>
				<AlternateRowShading>No</AlternateRowShading>
				<DataSource>PayrollWorkerTaxCodeParameterValue</DataSource>
				<GridLinesStyle>Vertical</GridLinesStyle>
				<MultiSelect>No</MultiSelect>
				<ShowRowLabels>No</ShowRowLabels>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>