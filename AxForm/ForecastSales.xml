<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ForecastSales</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
using Microsoft.Dynamics.Platform.Integration.Office;

[Form]
public final class ForecastSales extends FormRun implements OfficeIGeneratedWorkbookCustomExporter, OfficeITemplateCustomExporter, KittingIFormHandlerProvider
{
    NoYes                lockmodel;
    BudgetModelHeadId    modelId;

    NoYes                lockItem;
    ItemId               itemId;

    NoYes                lockItemGroup;
    ItemGroupId          itemGroupId;

    NoYes                lockCustAccount;
    CustAccount          custAccountId;

    NoYes                lockCustGroup;
    CustGroupId          custGroupId;

    QueryBuildRange      criteriaReport;
    QueryBuildRange      criteriaExpand_1;
    QueryBuildRange      criteriaExpand_2;

    QueryBuildRange      criteriaModelId;

    QueryBuildRange      criteriaCostGroupId;
    QueryBuildRange      criteriaControlId;

    QueryBuildRange      criteriaCustAccountId;
    QueryBuildRange      criteriaCustGroupId;
    QueryBuildRange      criteriaItemId;
    QueryBuildRange      criteriaItemGroupId;

    QueryBuildRange      criteriaBudgetedField;

    QueryBuildDataSource qB;
    QueryBuildDataSource qb2;
    QueryBuildDataSource qb3;
    boolean              calledFromProject;
    ProjId               projId;

    boolean              showChild;

    QueryBuildRange      criteriaRecId;
    QueryBuildRange      criteriaProjId;
    QueryBuildRange      criteriaWIPProjId;

    QueryBuildRange      criteriaProjInvoiceProjId;
    QueryBuildRange      criteriaFixedPrice;
    QueryBuildRange      criteriaTimeMaterial;
    QueryBuildRange      criteriaInternal;
    QueryBuildRange      criteriaCost;
    QueryBuildRange      criteriaInvestment;
    QueryBuildRange      criteriaTime;
    QueryBuildRange      criteriaSorting1;
    QueryBuildRange      criteriaSorting2;
    QueryBuildRange      criteriaSorting3;
    QueryBuildRange      criteriaGroupId;
    QueryBuildRange      criteriaCustAccount;

    QueryBuildRange      criteriaCategoryGroupId;

    QueryBuildRange      criteriaTransDate;
    QueryBuildRange      criteriaCategoryId;

    QueryBuildRange      criteriaActivityId;

    ProjStatistic        projStatistic;
    TransDate            ledgerFromDate;
    TransDate            ledgerToDate;

    InventDimCtrl_Frm_Forecast     inventDimFormSetup;
    EcoResShowDisplayProductNumber showDisplayProductNumber;

    CurrencyCode         oldCurrency;
    ProjCashFlow         projCashFlow;
    ProjCostControl      projCostControl;

    PdsCWFormCtrl        cwFormCtrl;

    InventDim            inventDimFromInventDimCombination;

    boolean              refreshCallerOnClose;
    boolean              calledFromBudgetPlanning;
    boolean              cdsLockingOptionForecasts;
    [FormObservable]
    private boolean isProjForecastListPageV2FeatureEnabled;

    // Map for WBS Id and Task Id cache for project and activity combination
    Map                  wbsDataCacheMap = new Map(Types::String, Types::Container);

    private const TableId ExportEntityTableNumber = tableNum(ForecastDemandForecastEntryEntity);
    private const TableName ExportEntityTableName = tableStr(ForecastDemandForecastEntryEntity);
    private const FieldName ExportEntityDataAreaIdFieldName = fieldStr(ForecastDemandForecastEntryEntity, dataAreaId);
    private const str ExportEntityTableFieldGroupName = tablefieldgroupstr(ForecastDemandForecastEntryEntity, ExportToExcel);

    private boolean enableProjMultipleContractLinesForProjectFeature = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

    private KittingIFormHandler_Sales kittingFormHandler;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
            lockModel,
            modelId,
            lockItem,
            itemId,
            lockItemGroup,
            itemGroupId,
            lockCustAccount,
            custAccountId,
            lockCustGroup,
            custGroupId
        #endmacro

}
]]></Source>
			</Method>
			<Method>
				<Name>customizeMenuOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Customizes the options used to populate the Office Menu.
    /// </summary>
    /// <param name = "_menuOptions">The menu options to be customized.</param>
    public void customizeMenuOptions(OfficeMenuOptions _menuOptions)
    {
        var entityMenuOption = _menuOptions.getOptionsForEntity(tableStr(ProjForecastSalesEntity));

        if (entityMenuOption)
        {
            entityMenuOption.includeDefault(false);
        }

        DocuTemplate docuTemplate = DocuTemplate::findTemplate(OfficeAppApplicationType::Excel, resourceStr(ProjForecastSalesExcelTemplateV3));
        
        if (docuTemplate)
        {
            OfficeTemplateExportMenuItem menuItem = OfficeTemplateExportMenuItem::constructWithDocuTemplate(docuTemplate, docuTemplate.TemplateID);

            _menuOptions.customMenuItems().addEnd(menuItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveProjIdFromCaller</Name>
				<Source><![CDATA[
    private void retrieveProjIdFromCaller()
    {
        Object caller = element.args().caller();
        switch (element.args().dataset())
        {
            case tableNum(ProjBudget):
                ProjBudget projBudget = element.args().record();
                projId = projBudget.RootProjId;
                if (caller && formHasMethod(caller, 'selectedProjId'))
                {
                    projId = caller.selectedProjId();
                }
                break;

            case tableNum(ProjBudgetRevision):
                ProjBudgetRevision projBudgetRevision = element.args().record();
                projId = projBudgetRevision.rootProjId();
                if (caller && formHasMethod(caller, 'selectedProjId'))
                {
                    projId = caller.selectedProjId();
                }
                break;

            case tableNum(ProjTable):
                ProjTable projTable = element.args().record();
                projId = projTable.ProjId;
                break;

            case tableNum(ProjInvoiceTable):
                ProjInvoiceTable projInvoiceTable = element.args().record();
                projId = projInvoiceTable.ProjInvoiceProjId;
                break;

            case tableNum(ProjWIPTable)     :
                ProjWIPTable projWIPTable = element.args().record();
                projId = projWIPTable.ProjId;
                break;

            case tableNum(ProjControlPeriodCostGroup):
                ProjControlPeriodCostGroup projControlPeriodCostGroup = element.args().record();
                projId = projControlPeriodCostGroup.ProjId;
                break;

            case(tableNum(TmpProjStatistic)):
                ProjStatistic tmpProjStatistic = element.args().parmObject();
                projId = tmpProjStatistic.parmProjId();
                break;

            case(tableNum(TmpProjCashFlow)):
                ProjCashFlow tmpProjCashFlow = element.args().parmObject();
                projId = tmpProjCashFlow.parmProjId();
                break;

            case(tableNum(TmpProjCostControl)):
                ProjCostControl tmpProjCostControl = element.args().parmObject();
                projId = tmpProjCostControl.parmProjId();
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitialTemplateFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the set of initial filters to be applied to the template.
    /// </summary>
    /// <param name="_menuItem">The export template menu item.</param>
    /// <returns>
    /// The Map of filters to apply.
    /// Keyed by AOT entity name.
    /// Values are all Microsoft.Dynamics.Platform.Integration.Office.FilterNode intances.
    /// </returns>
    /// <remarks>
    /// The filters supplied here will override any filters currently in the template.
    /// If no filter is suppled for a given entity, any filters currently in the template are retained.
    /// </remarks>
    public Map getInitialTemplateFilters(OfficeTemplateExportMenuItem _menuItem)
    {
        str templateName = resourceStr(ProjForecastSalesExcelTemplateV3);
                 
        DocuTemplate template = DocuTemplate::findTemplate(OfficeAppApplicationType::Excel, templateName);
        Map filtersToApply = new Map(Types::String, Types::Class);

        // Ensure the template was present
        if (template && template.TemplateID == templateName)
        {
            #define.star("*")

            str projforecastSalesEntity = tableStr(ProjForecastSalesEntity);
            ExportToExcelFilterTreeBuilder filterBuilder = new ExportToExcelFilterTreeBuilder(projforecastSalesEntity);
            if(ProjForecastFormsCallerIdentiferFlight::instance().isEnabled() && element.args().dataset())
            {
                this.retrieveProjIdFromCaller();
            }
            else
            {
                if(element.args().dataset() == tableNum(ProjTable))
                {
                    ProjTable projTable= element.args().record();
                    projId = projTable.ProjId;
                }
            }
        
            Microsoft.Dynamics.Platform.Integration.Office.FilterBinaryNode filter = filterBuilder.areEqual(fieldStr(ProjForecastSalesEntity, ProjectID), projId + #star);
            filtersToApply.insert(projforecastSalesEntity, filter);
        }
        return filtersToApply;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTemplateSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies any updates to the settings contained within the template for the specified menu item.
    /// </summary>
    /// <param name="_menuItem">The menu item.</param>
    /// <param name="_settingsManager">The <see cref="SettingsManager"/> to use when performing the updates.</param>
    void updateTemplateSettings(OfficeTemplateExportMenuItem _menuItem, Microsoft.Dynamics.Platform.Integration.Office.SettingsManager _settingsManager)
    {
        // No implementation details for this since we don't need to update the template settings
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityFieldIdForMappedDatasourceField</Name>
				<Source><![CDATA[
    private FieldId getEntityFieldIdForMappedDatasourceField(int _dataEntityId, int _datasourceId, int _datasourceFieldId)
    {
        DictDataEntity dictDE = new DictDataEntity(_dataEntityId);

        int fldCnt = 1;

        while (fldCnt <= dictDE.fieldCnt())
        {
            DictDataEntityField deFld = new DictDataEntityField(dictDE.id(), dictDE.fieldCnt2Id(fldCnt));

            if (deFld && !deFld.isSystem())
            {
                TableId mappedTableId = tableName2Id(deFld.dataSource());

                if (mappedTableId == _datasourceId && deFld.dataField())
                {
                    FieldId mappedFieldId = fieldName2Id(mappedTableId, deFld.dataField());

                    if (mappedFieldId && mappedFieldid == _datasourceFieldId)
                    {
                        return deFld.id();
                    }
                }
            }

            fldCnt++;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataEntityContext</Name>
				<Source><![CDATA[
    public ExportToExcelDataEntityContext getDataEntityContext(OfficeGeneratedExportMenuItem _menuItem)
    {
        ExportToExcelDataEntityContext context = null;

        if (_menuItem.id() == OfficeExportMenuItem::DefaultId)
        {
            context = ExportToExcelDataEntityContext::construct(ExportEntityTableName, ExportEntityTableFieldGroupName);

            ListEnumerator enumerator = context.entities().getEnumerator();
            while (enumerator.moveNext())
            {
                ExportToExcelDataEntityInfo entity = enumerator.current();

                if (entity.entityName() == ExportEntityTableName)
                {
                    ExportToExcelFilterTreeBuilder filterBuilder = new ExportToExcelFilterTreeBuilder(ExportEntityTableName);
                    FilterNode filterExpression = filterBuilder.areEqual(ExportEntityDataAreaIdFieldName, curExt());

                    // Apply existing filter from the grid, if any:
                    QueryBuildDataSource qbds = ForecastSales_DS.queryRunQueryBuildDataSource();
                    QueryBuildRange range;

                    for (int rangeIndex = 1; rangeIndex <= qbds.rangeCount(); rangeIndex++)
                    {
                        range = qbds.range(rangeIndex);

                        if (range.value()
                            && strFind(range.value(), '!=<>.,', 1, strLen(range.value())) == 0)
                        {
                            int entityFieldId = this.getEntityFieldIdForMappedDatasourceField(ExportEntityTableNumber, range.table(), range.field());

                            if (entityFieldId)
                            {
                                DictDataEntityField dictField = new DictDataEntityField(ExportEntityTableNumber, entityFieldId);

                                if (dictField.baseType() == Types::String)
                                {
                                    filterExpression = filterBuilder.and(filterExpression,filterBuilder.areEqual(fieldId2Name(ExportEntityTableNumber, entityFieldId), range.value()));
                                }
                            }
                        }
                    }

                    entity.filter(filterExpression);
                }
            }
        }

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonCoverage</Name>
				<Source><![CDATA[
    public void buttonCoverage()
    {
        ctrlLedgerCoverage.enabled(forecastSales.mustBeCovPlanned() || forecastSalesExpand.mustBeCovPlanned());
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryTable</Name>
				<Source><![CDATA[
    public boolean categoryTable(ProjStatistic _projStatistic = projStatistic)
    {
        return (_projStatistic && _projStatistic.parmCategoryGroupId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryTableCashFlow</Name>
				<Source><![CDATA[
    public boolean categoryTableCashFlow(ProjCashFlow _projCashFlow = projCashFlow)
    {
        return (_projCashFlow && _projCashFlow.parmCategoryGroupId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryTableCostControl</Name>
				<Source><![CDATA[
    public boolean categoryTableCostControl(ProjCostControl _projCostControl = projCostControl)
    {
        return (_projCostControl && _projCostControl.parmCategoryGroupId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>costTypeItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks transaction type.
    /// </summary>
    /// <param name = "_projControlPeriodCostGroup">
    ///     A <c>ProjControlPeriodCostGroup</c> table buffer.
    /// </param>
    /// <returns>
    ///     true if transaction type is not of type item; otherwise, false.
    /// </returns>
    public boolean costTypeItem(ProjControlPeriodCostGroup  _projControlPeriodCostGroup)
    {
        return (_projControlPeriodCostGroup.costType() != ProjCostType::Item);
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        FormRun caller;
        FormDataSource fds;

        if ( refreshCallerOnClose )
        {
            caller = element.args().caller();

            if ( caller )
            {
                fds = caller.dataSource(1);

                if ( fds )
                {
                    fds.research(true);
                }
            }
        }
        xSysLastValue::saveLast(this);
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doReFreshDatasource</Name>
				<Source><![CDATA[
    public void doReFreshDatasource()
    {
        forecastSales_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        this.setRefreshOnClose();
        this.initFromProject();
        this.initFromBudgetPlanning();
        isProjForecastListPageV2FeatureEnabled = FeatureStateProvider::IsFeatureEnabled(ProjForecastListPageV2Feature::instance());

        if (ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
        {
            this.form().design().showNewButton(AutoNoYes::No);
            this.form().design().showDeleteButton(AutoNoYes::No);
            this.form().design().viewEditMode(ViewEditMode::View);

        }

        if (#PdsCatchWeightEnabled)
        {
            cwFormCtrl = PdsCWFormCtrl::constructFromForm(element);
            cwFormCtrl.parmFieldIds(PdsCWValidation::fieldMapFromContainers(
                [[fieldNum(ForecastSales, InventQty),
                  fieldNum(ForecastSales, PdsCWQty),
                  false]] ));
            cwFormCtrl.parmItemFieldId(fieldNum(ForecastSales, ItemId));
            cwFormCtrl.parmUnitFieldId(fieldNum(ForecastSales, PdsCWUnitId));
        }

        super();

        if (!this.validateCaller())
        {
            throw(error(Error::missingFormActiveBuffer(element.design().caption())));
        }

        if (calledFromProject)
        {
            element.design().caption("@SYS342500");
        }

        element.updateDesign(InventDimFormDesignUpdate::Init);

        xSysLastValue::getLast(this);

        cdsLockingOptionForecasts = ProjCDSLockingOptionTable::get(ProjCDSLockingOption::Forecasts);

        element.updateFields();

        if (ScpDemandPlanningWhatsNewNotificationFlight::instance().isEnabled())
        {
            SystemNotificationsWhatsNewManager::AddWhatsNewWithActionLink(
                    '{2949aeca-fceb-4659-bf03-b43f9391f285}',
                    "@ParallelizedForecastImport:WhatsNewTitle",
                    "@ParallelizedForecastImport:WhatsNewDesc",
                    ActionPane.name(),
                    'https://go.microsoft.com/fwlink/?linkid=2247703');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBudgetPlanning</Name>
				<Source><![CDATA[
    public void initFromBudgetPlanning()
    {
        if (element.args().parmObject() is BudgetPlanDemandForecastDrillThroughHelper)
        {
            calledFromBudgetPlanning = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProject</Name>
				<Source><![CDATA[
    public void initFromProject()
    {
        ProjTable                   localProjTable;
        ProjControlPeriodCostGroup  localProjControlPeriodCostGroup;
        ProjSelected                projSelected;
        DictConfigurationKey        dictConfigKey = new DictConfigurationKey(configurationKeyNum(Project));

        if (element.args().parmEnumType() == enumNum(ProjSelected))
        {
            projSelected = element.args().parmEnum();
        }

        if (element.args().dataset()    == tableNum(ProjTable)  ||
            element.args().dataset()    == tableNum(ProjControlPeriodCostGroup) ||
            element.args().dataset()    == tableNum(TmpProjStatistic) ||
            element.args().dataset()    == tableNum(ProjInvoiceTable) ||
            element.args().dataset()    == tableNum(ProjWIPTable) ||
            element.args().dataset()    == tableNum(TmpProjCashFlow) ||
            projSelected                == ProjSelected::Project
           )
        {
            calledFromProject = true;

            if (!dictConfigKey.enabled())
            {
                throw error (strFmt("@SYS75398", dictConfigKey.name()));
            }

            if (element.args().dataset()    == tableNum(ProjTable))
            {
                localProjTable = element.args().record();
                projId = localProjTable.ProjId;
            }

            if (element.args().dataset() == tableNum(ProjControlPeriodCostGroup))
            {
                localProjControlPeriodCostGroup = element.args().record();
                projId = localProjControlPeriodCostGroup.ProjId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /*
    This method is called when no SysLastValue record can be found in xSysLastValue.GetLast()
    */
    public void initParmDefault()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds or creates an <c>InventDim</c> record with the current data of the <c>InventDim</c> datasource.
    /// </summary>
    /// <returns>
    ///    An <c>InventDim</c> record.
    /// </returns>
    public InventDim inventDim()
    {
        InventDim   inventDimLocal;

        if (!inventDim.RecId)
        {
            inventDimLocal = InventDim::findOrCreate(inventDim);
        }
        else
        {
            inventDimLocal = inventDim;
        }

        return inventDimLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimSetupObject</Name>
				<Source><![CDATA[
    public Object inventDimSetupObject()
    {
        return inventDimFormSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    public IdentifierName lastValueDesignName()
    {
        if (element.args() && element.args().caller())
        {
            return element.args().caller().name();
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    public IdentifierName lastValueElementName()
    {
        return this.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    public UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    public UserId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkProjStatistic</Name>
				<Source><![CDATA[
    void linkProjStatistic()
    {
        #define.star('*')

        if (projStatistic.parmItem())
        {
            ledgerFromDate  = projStatistic.parmLedgerFromDate();
            ledgerToDate    = projStatistic.parmLedgerToDate();

            if (projStatistic.parmProjFromDate() || projStatistic.parmProjToDate())
            {
                criteriaTransDate.value(strFmt('%1..%2',queryValue(projStatistic.parmProjFromDate()),queryValue(projStatistic.parmProjToDate())));
            }

            modelId = projStatistic.parmForecastModelId();
            projId  = projStatistic.parmProjId();

            if (projStatistic.parmProjCategoryId())
            {
                criteriaCategoryId.value(projStatistic.parmProjCategoryId());
            }

            if (element.categoryTable(element.args().parmObject()))
            {
                criteriaCategoryGroupId.value(projStatistic.parmCategoryGroupId());
            }

            if (!enableProjMultipleContractLinesForProjectFeature)
            {
                if (projStatistic.parmFixedPrice())
                {
                    criteriaFixedPrice.value(queryValue(ProjType::FixedPrice));
                }
                if (projStatistic.parmTimeMaterial())
                {
                    criteriaTimeMaterial.value(queryValue(ProjType::TimeMaterial));
                }
                if (projStatistic.parmInternalCost())
                {
                    criteriaInternal.value(queryValue(ProjType::Cost));
                }
                if (projStatistic.parmInternalCost())
                {
                    criteriaCost.value(queryValue(ProjType::Internal));
                }
                if (projStatistic.parmInvestment())
                {
                    criteriaInvestment.value(queryValue(ProjType::Investment));
                }
                if (projStatistic.parmTime())
                {
                    criteriaTime.value(queryValue(ProjType::Time));
                }
            }

            if (projStatistic.parmSorting1())
            {
                criteriaSorting1.value(queryValue(projStatistic.parmSorting1()));
            }
            if (projStatistic.parmSorting2())
            {
                criteriaSorting2.value(queryValue(projStatistic.parmSorting2()));
            }
            if (projStatistic.parmSorting3())
            {
                criteriaSorting3.value(queryValue(projStatistic.parmSorting3()));
            }
            if (projStatistic.parmCustAccount())
            {
                criteriaCustAccount.value(queryValue(projStatistic.parmCustAccount()));
            }
            if (projStatistic.parmProjGroupId())
            {
                criteriaGroupId.value(queryValue(projStatistic.parmProjGroupId()));
            }

            if (projStatistic.parmProjTree())
            {
                criteriaProjId.value(projStatistic.parmProjId()+ #star);
            }
            else
                if (projStatistic.parmProjId())
            {
                criteriaProjId.value(queryValue(projStatistic.parmProjId()));
            }

            if (projStatistic.parmProjWIPId())
            {
                criteriaWIPProjId.value(queryValue(projStatistic.parmProjWIPId()));
            }

            if (projStatistic.parmProjInvoiceProjId())
            {
                criteriaProjInvoiceProjId.value(queryValue(projStatistic.parmProjInvoiceProjId()));
            }
        }
        else
        {
            criteriaProjId.value(queryValue(SysQuery::valueEmptyString()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        lockmodel       = lockModelId.value();
        modelId         = critModelId.text();

        lockItem        = lockItemId.value();
        itemId          = critItemId.text();

        lockItemGroup   = lockItemGroupId.value();
        itemGroupId     = critItemGroupId.text();

        lockCustAccount = lockCustAccountId.value();
        custAccountId   = critCustAccountId.text();

        lockCustGroup   = lockCustGroupId.value();
        custGroupId     = critCustGroupId.text();

        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setModifiedPriceAgreement</Name>
				<Source><![CDATA[
    public void setModifiedPriceAgreement(FieldId _fieldId)
    {
        if (forecastSales.modifiedProductDim(this.inventDim(),
                                          _fieldId,
                                          InventDimGroupSetup::newItemId(forecastSales.ItemId)))
        {
            forecastSales_ds.updateAmount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRefreshOnClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets refreshOnClose flag to true only if the caller's name
    /// is: ProjForecastListPage
    /// </summary>
    private void setRefreshOnClose()
    {
        FormRun         caller;

        refreshCallerOnClose = false;

        if (element.args() && element.args().caller())
        {
            caller = element.args().caller();
            refreshCallerOnClose = strCmp(caller.name(), formStr(ProjForecastListPage)) == 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version     = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;

                lockModelId.value(lockmodel);
                lockItemId.value(lockItem);
                lockItemGroupId.value(lockItemGroup);
                lockCustAccountId.value(lockCustAccount);
                lockCustGroupId.value(lockCustGroup);

                critModelId.text(modelId);
                critItemId.text(itemId);
                critItemGroupId.text(itemGroupId);
                critCustAccountId.text(custAccountId);
                critCustGroupId.text(custGroupId);

                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCaption</Name>
				<Source><![CDATA[
    public void updateCaption()
    {
        str             captionText;

        captionText= calledFromProject ? "@SYS342500" : tableId2pname(tableNum(ForecastSales));

        if (lockModelId.value())
        {
            captionText +=', ' +  fieldPName(ForecastSales,ModelId) + ': ' + critModelId.text();
        }

        if (lockCustGroupId.value())
        {
            captionText +=', ' + fieldPName(ForecastSales,CustGroupId) + ': ' + critCustGroupId.text();
        }

        if (lockCustAccountId.value())
        {
            captionText +=', ' + fieldPName(ForecastSales,CustAccountId) + ': ' + critCustAccountId.text();
        }

        if (lockItemGroupId.value())
        {
            captionText +=', ' + fieldPName(ForecastSales,ItemGroupId) + ': ' + critItemGroupId.text();
        }

        if (lockItemId.value())
        {
            captionText +=', ' + fieldPName(ForecastSales,ItemId) + ': ' + critItemId.text();
        }

        element.design().caption(captionText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCostPrice</Name>
				<Source><![CDATA[
    public void updateCostPrice()
    {
        InventDim   inventDimLocal = this.inventDim();
        if (forecastSales.ItemId)
        {
            if (foreCastSales.ItemAllocateId)
            {
                forecastSales.CostPrice = InventTable::find(forecastSales.ItemId).costPcsPrice('',null,null,forecastSales.StartDate);
            }
            else
            {
                forecastSales.CostPrice = InventTable::find(forecastSales.ItemId).costPcsPrice(inventDimLocal.InventDimId,
                                                                                               inventDimLocal,
                                                                                               null,
                                                                                               forecastSales.StartDate);
            }
        }
        else
        {
            forecastSales.CostPrice = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    public void updateDesign(InventDimFormDesignUpdate _mode)
    {
        InventDimParm   inventDimParmShow;
        NoYes           useItemAllocationKey;

        switch (_mode)
        {
            case InventDimFormDesignUpdate::Init:
                if (!inventDimFormSetup)
                {
                    inventDimFormSetup  = InventDimCtrl_Frm_Forecast::newFromForm(element);
                }
                inventDimFormSetup.parmSkipOnHandLookUp(true);
                inventDimParmShow.InventSiteIdFlag = true;
                inventDimParmShow.InventLocationIdFlag = true;
                inventDimFormSetup.parmDimParmVisibleGrid(inventDimParmShow);
            //fall through
            case InventDimFormDesignUpdate::Active,
                InventDimFormDesignUpdate::FieldChange:
                useItemAllocationKey = forecastSales.ItemAllocateId ? NoYes::Yes : NoYes::No;
                inventDimFormSetup.parmUseItemAllocationKey(useItemAllocationKey);
                inventDimFormSetup.formActiveSetup(InventDimGroupSetup::newItemId(forecastSales.ItemId));
                inventDimFormSetup.formSetControls(true);
                break;
            default:
                throw error(strFmt("@SYS54195",funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFields</Name>
				<Source><![CDATA[
    public void updateFields()
    {
        overview_modelId.visible(! lockModelId.value());
        overview_ProjId.visible(calledFromProject);

        overview_CustGroupId.visible(! (calledFromProject || lockCustGroupId.value() || (lockCustAccountId.value() && critCustAccountId.text())));
        overview_CustAccountId.visible(! (calledFromProject || lockCustAccountId.value()));

        overview_ItemGroupId.visible(! (calledFromProject || lockItemGroupId.value() || (lockItemId.value() && critItemId.text())));

        overview_amount.visible( ! calledFromProject);
        overview_CostPrice.visible(calledFromProject);

        forecastSales_ProjForecastBudgetType.visible(calledFromProject);

        if (ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
        {
            WBSID.visible(false);
            TaskName.visible(false);
            Overview_ItemAllocateId.visible(false);
            General_Allocation.visible(false);
            ForecastSales_ItemBOMId.visible(false);
            ForecastSales_ItemRouteId.visible(false);
            AllocationTab.visible(false);

            WBSID.enabled(false);
            TaskName.enabled(false);
            Overview_ItemAllocateId.enabled(false);
            General_Allocation.enabled(false);
            ForecastSales_ItemBOMId.enabled(false);
            ForecastSales_ItemRouteId.enabled(false);
            AllocationTab.enabled(false);

            TabPageItemSpecification.allowEdit(false);
            ProjectTab.allowEdit(false);

            Overview_ContractLineId.visible(true);
            ProjectIdentification_ContractLineId.visible(true);
        }

        element.updateCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProductNumber</Name>
				<Source><![CDATA[
    public void findProductNumber()
    {
        if (showDisplayProductNumber)
        {
            inventDistinctProductExpanded.data(inventDistinctProductExpanded::findByInventDim(forecastSales.ItemId, inventDim));
            inventDistinctProductExpanded_ds.setCurrent();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataFromItemModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the demand forecast item specific data.
    /// </summary>
    public void initDataFromItemModified()
    {
        ForecastSales.InventDimId = InventDim::inventDimIdBlank();
        forecastSales.initDataFromItemModified();
        this.updateInventDim(forecastSales.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataFromInventDimModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes demand forecasting dimension specific data.
    /// </summary>
    /// <param name = "_isProductDimModified">A paraemeter indicating whether a product dimension was modified.</param>
    public void initDataFromInventDimModified(boolean _isProductDimModified = true)
    {
        var origInventSiteId = InventDim.InventSiteId;
        var origInventLocationId = InventDim.InventLocationId;
        InventDim localInventDim;
        localInventDim.data(InventDim);

        if (_isProductDimModified)
        {
            localInventDim.clearStorageDimensions();
        }

        forecastSales.InventDimId = InventDim::findOrCreate(localInventDim).inventDimId;

        forecastSales.initDataFromInventDimModified();

        localInventDim.data(forecastSales.inventDim());

        if (!localInventDim.InventSiteId)
        {
            localInventDim.InventSiteId = origInventSiteId;
        }
        else if (localInventDim.InventSiteId == origInventSiteId
            && origInventLocationId != ''
            && localInventDim.InventLocationId == '')
        {
            localInventDim.InventLocationId = origInventLocationId;
        }

        this.updateInventDim(localInventDim);

        element.updateDesign(InventDimFormDesignUpdate::FieldChange);

        this.findProductNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventDim</Name>
				<Source><![CDATA[
    public void updateInventDim(InventDim _inventDim)
    {
        inventDim.data(InventDim::findOrCreate(_inventDim));
        inventDim_ds.setCurrent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCaller</Name>
				<Source><![CDATA[
    public boolean validateCaller()
    {
        InventTable inventTable;

        switch (element.args().dataset())
        {
            case tableNum(InventTable):
                inventTable = element.args().record();
                if (!inventTable.RecId)
                {
                    return checkFailed(strFmt("@SYS84897", tablePName(InventTable)));
                }
                if (!InventTable::exist(inventTable.ItemId))
                {
                    return checkFailed(strFmt("@SYS5307", inventTable.ItemId));
                }
                break;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProject</Name>
				<Source><![CDATA[
    public boolean validateProject()
    {
        boolean  ret    = true;

        if (! forecastSales.ProjId)
        {
            ret  = checkFailed("@SYS81107");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatedForecastSalesFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for setting the allow edit property of ForecastSales data source controls.
    /// </summary>
    /// <param name = "_forecastSalesForm">The <c>FormRun</c> of the form calling this delegate.</param>
    /// <param name = "_forecastSalesDataSource">The form data source that the allow edit property is set for its controls.</param>
    /// <param name = "_forecastSales">A record of the <c>ForecastSales</c> table.</param>
    delegate void updatedForecastSalesFields(
        FormRun         _forecastSalesForm,
        FormDataSource  _forecastSalesDataSource,
        ForecastSales   _forecastSales)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjectExternallyManaged</Name>
				<Source><![CDATA[
    private boolean validateProjectExternallyManaged(ProjId _projId)
    {
        boolean ret = true;

        if (cdsLockingOptionForecasts)
        {
            if (Project::isProjectExternallyManaged(_projId))
            {
                ret = checkFailed(strfmt("@Proj:ProjCDSValueInvalidDueToExternal", "@Proj:ProjCDSForecasts"));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingFormHandler</Name>
				<Source><![CDATA[
    public KittingIFormHandler kittingFormHandler()
    {
        return kittingFormHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingSetFormHandler</Name>
				<Source><![CDATA[
    public void kittingSetFormHandler(KittingIFormHandler _formHandler)
    {
        kittingFormHandler = FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()) ? _formHandler : null;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>ForecastSales</Name>
				<Methods>
					<Method>
						<Name>initializeFromForecastSales</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets up the query for datasource based on
        /// a forecast sales record. Will exclude all forecast sales that
        /// does not have matching recId.
        /// </summary>
        /// <param name="_forecastSales">
        /// The base forecast sales record.
        /// </param>

        private void initializeFromForecastSales(ForecastSales _forecastSales)
        {
            ForecastSales   forecastSalesArg;
            Query           query;
            query   =   new Query();
            qB      =   query.addDataSource(tableNum(ForecastSales));
            projId = forecastSalesArg.ProjId;
            criteriaRecId = qB.addRange(fieldNum(ForecastSales,RecId));
            criteriaRecId.value(queryValue(_forecastSales.RecId));
            this.query(query);
        }

]]></Source>
					</Method>
					<Method>
						<Name>dataSourceActivePost</Name>
						<Source><![CDATA[
        public void dataSourceActivePost()
        {
            boolean  isCWItem;

            if (cwFormCtrl)
            {
                cwFormCtrl.dataSourceActivePost();
            }

            isCWItem = PdsGlobal::pdsIsCWItem(forecastSales.ItemId);
            forecastSales_ds.object(fieldNum(ForecastSales, SalesQty)).allowEdit(!isCWItem);
            forecastSales_ds.object(fieldNum(ForecastSales, SalesUnitId)).allowEdit(!isCWItem);
            forecastSales_ds.object(fieldNum(ForecastSales, PdsCWUnitId)).skip(!isCWItem);
        }

]]></Source>
					</Method>
					<Method>
						<Name>changeCurrency</Name>
						<Source><![CDATA[
        public void changeCurrency(
            CurrencyCode _oldCurrency,
            CurrencyCode _newCurrency)
        {
            forecastSales.CostPrice = ExchangeRateHelper::curPrice2CurPrice(forecastSales.CostPrice, _oldCurrency, _newCurrency, forecastSales.StartDate);
        }

]]></Source>
					</Method>
					<Method>
						<Name>initFromBudgetPlanning</Name>
						<Source><![CDATA[
        public void initFromBudgetPlanning()
        {
            BudgetPlanDemandForecastDrillThroughHelper demandForecastDrillThroughHelper = element.args().parmObject() as BudgetPlanDemandForecastDrillThroughHelper;

            demandForecastDrillThroughHelper.updateQueryForInventoryDrillThrough(this.query(), InventAccountType::SalesConsump, InventAccountType::SalesDisc, InventAccountType::SalesRevenue);
        }

]]></Source>
					</Method>
					<Method>
						<Name>initFromProject</Name>
						<Source><![CDATA[
        public void initFromProject()
        {
            qB.clearDynalinks();
            criteriaProjId      = qB.addRange(fieldNum(ForecastSales, ProjId));
            criteriaCategoryId  = qB.addRange(fieldNum(ForecastSales, ProjCategoryId));
            criteriaTransDate   = qB.addRange(fieldNum(ForecastSales, StartDate));

            if (element.args().dataset() == tableNum(TmpProjStatistic) && (element.categoryTable(element.args().parmObject())))
            {
                qb2                = qB.addDataSource(tableNum(ProjCategory));
                qb2.addLink(fieldNum(ForecastSales, ProjCategoryId), fieldNum(ProjCategory, CategoryId));
                qb2.fetchMode(0);
                qb2.joinMode(JoinMode::ExistsJoin);

                criteriaCategoryGroupId        = qb2.addRange(fieldNum(ProjCategory, CategoryGroupId));
            }
            else if (element.args().dataset() == tableNum(TmpProjCashFlow) && (element.categoryTableCashFlow(element.args().parmObject())))
            {
                qb2                = qB.addDataSource(tableNum(ProjCategory));
                qb2.addLink(fieldNum(ForecastSales, ProjCategoryId), fieldNum(ProjCategory, CategoryId));
                qb2.fetchMode(0);
                qb2.joinMode(JoinMode::ExistsJoin);

                criteriaCategoryGroupId        = qb2.addRange(fieldNum(ProjCategory, CategoryGroupId));
            }
            else if (element.args().dataset() == tableNum(TmpProjCostControl) && (element.categoryTableCostControl(element.args().parmObject())))
            {
                qb2                = qB.addDataSource(tableNum(ProjCategory));
                qb2.addLink(fieldNum(ForecastSales, ProjCategoryId), fieldNum(ProjCategory, CategoryId));
                qb2.fetchMode(0);
                qb2.joinMode(JoinMode::ExistsJoin);

                criteriaCategoryGroupId        = qb2.addRange(fieldNum(ProjCategory, CategoryGroupId));
            }

            else if (element.args().dataset()    == tableNum(ProjControlPeriodCostGroup))
            {
                qb2 = qB.addDataSource(tableNum(ProjTable));

                qb2.addLink(fieldNum(ForecastSales,ProjId),
                            fieldNum(ProjTable,ProjId));

                criteriaWIPProjId   = qb2.addRange(fieldNum(ProjTable,wipProject));

                qb2.fetchMode(0);

                qb3 = qB.addDataSource(tableNum(ProjControlCategory));

                qb3.addLink(fieldNum(ForecastSales,ProjCategoryId),
                            fieldNum(ProjControlCategory,CategoryId));

                criteriaControlId   = qb3.addRange(fieldNum(ProjControlCategory,ControlId));
                criteriaCostGroupId = qb3.addRange(fieldNum(ProjControlCategory,CostGroupId));

                qb3.fetchMode(0);
            }

            qb2                = qB.addDataSource(tableNum(ProjTable));
            qb2.addLink(fieldNum(ForecastSales,ProjId),
                        fieldNum(ProjTable,ProjId));
            qb2.fetchMode(0);

            criteriaProjInvoiceProjId   = qb2.addRange(fieldNum(ProjTable, ProjInvoiceProjId));
            criteriaWIPProjId           = qb2.addRange(fieldNum(ProjTable, wipProject));

            if (!enableProjMultipleContractLinesForProjectFeature)
            {
                criteriaFixedPrice          = qb2.addRange(fieldNum(ProjTable, Type));
                criteriaTimeMaterial        = qb2.addRange(fieldNum(ProjTable, Type));
                criteriaInternal            = qb2.addRange(fieldNum(ProjTable, Type));
                criteriaCost                = qb2.addRange(fieldNum(ProjTable, Type));
                criteriaInvestment          = qb2.addRange(fieldNum(ProjTable, Type));
                criteriaTime                = qb2.addRange(fieldNum(ProjTable, Type));
            }

            criteriaSorting1            = qb2.addRange(fieldNum(ProjTable, SortingId), 1);
            criteriaSorting2            = qb2.addRange(fieldNum(ProjTable, SortingId), 2);
            criteriaSorting3            = qb2.addRange(fieldNum(ProjTable, SortingId), 3);
            criteriaGroupId             = qb2.addRange(fieldNum(ProjTable, ProjGroupId));
            criteriaCustAccount         = qb2.addRange(fieldNum(ProjTable, CustAccount));
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            super();
            if (! forecastSales.RecId)
            {
                forecastSalesExpand_ds.executeQuery();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            super();

            if (forecastSales.InventDimId != inventDim.InventDimId)
            {
                element.updateInventDim(forecastSales.inventDim());
            }

            forecastSalesExpand_ds.executeQuery();
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        public void linkActive()
        {
            InventDimCombination    callerInventDimCombination;

            CustAccount             callerCustAccount;
            CustGroupId             callerCustGroupId;

            ItemId                  callerItemId;
            ItemGroupId             callerItemGroupId;

            ForecastInvent          callerForecastInvent;
            ForecastSales           bufferForecastSales;

            HierarchyTreeTable      hierarchyTreeTable;
            smmActivities           smmActivities;
            ProjTable               projTable;

            QueryBuildDataSource    qbs,qbsInventDim;

            if (element.args().caller() && element.args().dataset())
            {
                switch (element.args().dataset())
                {
                    case tableNum(ProjTable),
                    tableNum(ProjControlPeriodCostGroup),
                    tableNum(ProjInvoiceTable),
                    tableNum(ProjWIPTable),
                    tableNum(TmpProjStatistic),
                    tableNum(ProjBudget),
                    tableNum(ProjBudgetRevision),
                    tableNum(TmpProjCashFlow):
                        this.linkActiveProject();
                        break;

                    case tableNum(CustTable):
                        callerCustAccount = element.args().record().(fieldName2id(tableNum(CustTable), fieldStr(CustTable,AccountNum)));
                        if (callerCustAccount)
                        {
                            lockCustAccountId.value(true);
                            lockCustAccountId.allowEdit(false);

                            critCustAccountId.text(callerCustAccount);
                            critCustAccountId.allowEdit(false);
                        }
                        break;

                    case tableNum(CustGroup):
                        callerCustGroupId = element.args().record().(fieldName2id(tableNum(CustGroup), fieldStr(CustGroup,CustGroup)));
                        if (callerCustGroupId)
                        {
                            lockCustGroupId.value(true);
                            lockCustGroupId.allowEdit(false);

                            critCustGroupId.text(callerCustGroupId);
                            critCustGroupId.allowEdit(false);
                        }
                        break;

                    case tableNum(InventTable):
                        callerItemId = element.args().record().(fieldName2id(tableNum(InventTable), fieldStr(InventTable,ItemId)));
                        if (callerItemId)
                        {
                            lockItemId.value(true);
                            lockItemId.allowEdit(false);

                            critItemId.text(callerItemId);
                            critItemId.allowEdit(false);
                        }
                        break;

                    case tableNum(InventItemGroup):
                        callerItemGroupId = element.args().record().(fieldName2id(tableNum(InventItemGroup), fieldStr(InventItemGroup,ItemGroupId)));
                        if (callerItemGroupId)
                        {
                            lockItemGroupId.value(true);
                            lockItemGroupId.allowEdit(false);

                            critItemGroupId.text(callerItemGroupId);
                            critItemGroupId.allowEdit(false);
                        }
                        break;

                    case tableNum(ForecastInvent):        // if forecastInvent record is created from an expanded record then use the expandId instead of dynalink
                        callerForecastInvent = element.args().record();
                        select firstonly ExpandId,ModelId,ItemId from bufferForecastSales where bufferForecastSales.RecId == callerForecastInvent.TransRecId;
                        if (bufferForecastSales.ModelId)
                        {
                            lockModelId.value(true);
                            lockModelId.allowEdit(false);
                            critModelId.text(bufferForecastSales.ModelId);
                            critModelId.allowEdit(false);
                        }
                        if (bufferForecastSales.ItemId)
                        {
                            lockItemId.value(true);
                            lockItemId.allowEdit(false);
                            critItemId.text(bufferForecastSales.ItemId);
                            critItemId.allowEdit(false);
                        }

                        if ( bufferForecastSales.ExpandId)
                        {
                            qbs = forecastSales_ds.query().dataSourceTable(tableNum(ForecastSales));
                            qbs.clearDynalinks();
                            forecastSalesExpand_ds.query().dataSourceTable(tableNum(ForecastSales)).clearDynalinks();
                            criteriaRecId = qbs.findRange(fieldName2id(tableNum(ForecastSales), fieldStr(ForecastSales,RecId)));
                            if (!criteriaRecId)
                            {
                                criteriaRecId = qbs.addRange(fieldName2id(tableNum(ForecastSales), fieldStr(ForecastSales,RecId)));
                            }
                            criteriaRecId.value(queryValue(bufferForecastSales.ExpandId));
                        }
                        break;

                    case tableNum(InventDimCombination):
                        callerInventDimCombination = element.args().record();

                        if (callerInventDimCombination)
                        {
                            inventDimFromInventDimCombination = callerInventDimCombination.inventDim();

                            lockItemId.value(true);
                            lockItemId.allowEdit(false);

                            critItemId.text(callerInventDimCombination.ItemId);
                            critItemId.allowEdit(false);

                            qbs = forecastSales_ds.query().dataSourceTable(tableNum(ForecastSales));
                            qbs.clearDynalinks();
                            qbsInventDim = inventDim_ds.query().dataSourceTable(tableNum(InventDim));

                            InventDim::queryAddRangeAndValueProductDim(qbsInventDim, inventDimFromInventDimCombination, EcoResProductDimGroupSetup::newItemId(callerInventDimCombination.ItemId), false);
                        }
                        break;

                    case (tableNum(HierarchyTreeTable)):
                        hierarchyTreeTable = element.args().record();

                        smmActivities = smmActivities::findWithRecId(hierarchyTreeTable.RefRecId);
                        criteriaActivityId.value(queryValue(smmActivities.ActivityNumber));

                        projTable = HierarchyTreeTable_Extension::findAssociation(smmActivities, tableNum(ProjTable));

                        criteriaProjId.value(projTable.ProjId);

                        break;
                }
            }
            else if (element.args().dataset()   == tableNum(TmpProjStatistic))
            {
                this.linkActiveProject();
            }
            else if (element.args().dataset()   == tableNum(TmpProjCostControl))
            {
                this.linkActiveProject();
            }
            else if (element.args().dataset()   == tableNum(TmpProjCashFlow))
            {
                this.linkActiveProject();
            }

            super();

            element.updateFields();
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            forecastSales.ItemId = critItemId.text();
            forecastSales.CustAccountId = critCustAccountId.text();

            if (inventDimFromInventDimCombination)
            {
                forecastSales.InventDimId = inventDimFromInventDimCombination.inventDimId;
            }

            if (kittingFormHandler && kittingFormHandler.isDynKit(ForecastSales))
            {
                return;
            }

            super();

            forecastSales.ModelId = modelId;

            boolean isProjectExternal;
            if (projId && cdsLockingOptionForecasts)
            {
                if(Project::isProjectExternallyManaged(projId))
                {
                    isProjectExternal = true;
                }
            }
            if (!isProjectExternal)
            {
                forecastSales.initFromProjTable(ProjTable::find(projId));
            }

            if (calledFromProject)
            {
                forecastSales.SalesQty  = 1;
                forecastSales.InventQty = 1;
            }

            if (lockModelId.value() && forecastSales.ModelId != critModelId.text())  // if initFromProjTable finds a modelId and the modelId is locked
            {
                forecastSales.ModelId = critModelId.text();
            }

            forecastSales.PdsCWUnitId = PdsCatchWeightItem::pdsCWUnitId(forecastSales.ItemId);

            element.updateDesign(InventDimFormDesignUpdate::FieldChange);

            inventDim.data(InventDim::find(forecastSales.InventDimId));
            inventDim.clearNotSelectedDim(inventDimFormSetup.parmDimParmEnabled());
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;

            inventDim.clearNotSelectedDim(inventDimFormSetup.parmDimParmEnabled());
            forecastSales.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;

            ret = super();

            if (!element.validateCaller())
            {
                ret = false;
            }

            if (ret && calledFromProject)
            {
                ret = element.validateProject();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            qB = this.query().dataSourceNo(1);

            //To handle the case of entry points which doesn't cause link active
            if (element.args() && element.args().dataset() == tableNum(ForecastSales))
            {
                //Does not play nicely when the arg record is type of ForecastSales.
                //the self reference of expandForecastSales causes the default query
                //to generate an extra where clause: expandForecastSales == RecId.
                //So we replace the original query with a new query
                this.initializeFromForecastSales(element.args().record());
            }

            if (calledFromProject)
            {
                this.initFromProject();
                if (!ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
                {
                    WBSID.visible(true);
                    WBSID.enabled(true);
                }
            }

            if (calledFromBudgetPlanning)
            {
                this.initFromBudgetPlanning();
            }

            criteriaBudgetedField = qB.addRange(fieldNum(ForecastSales, ProjForecastBudgetType));
            criteriaBudgetedField.value(queryValue(ProjForecastBudgetType::None));

            criteriaExpand_1      = qB.addRange(fieldNum(ForecastSales,ExpandId));

            criteriaModelId       = qB.addRange(fieldNum(ForecastSales,ModelId));
            criteriaCustGroupId   = qB.addRange(fieldNum(ForecastSales,CustGroupId));
            criteriaCustAccountId = qB.addRange(fieldNum(ForecastSales,CustAccountId));
            criteriaItemGroupId   = qB.addRange(fieldNum(ForecastSales,ItemGroupId));
            criteriaItemId        = qB.addRange(fieldNum(ForecastSales,ItemId));
            criteriaActivityId    = qB.addRange(fieldNum(ForecastSales, ActivityNumber));

            if (cwFormCtrl)
            {
                cwFormCtrl.dataSourceInitPost(forecastSales);
            }

            qB.addOrderByField(fieldnum(ForecastSales, StartDate), SortOrder::Descending);
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            criteriaExpand_1.value('0');

            criteriaModelId.value(       lockModelId.value()       ? queryValue(critModelId.text())       : SysQuery::valueUnlimited() );
            criteriaCustGroupId.value(   lockCustGroupId.value()   ? queryValue(critCustGroupId.text())   : SysQuery::valueUnlimited() );
            criteriaCustAccountId.value( lockCustAccountId.value() ? queryValue(critCustAccountId.text()) : SysQuery::valueUnlimited() );
            criteriaItemGroupId.value(   lockItemGroupId.value()   ? queryValue(critItemGroupId.text())   : SysQuery::valueUnlimited() );
            criteriaItemId.value(        lockItemId.value()        ? queryValue(critItemId.text())        : SysQuery::valueUnlimited() );

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int             ret;
            boolean         canEdit = !forecastSales.derived();
            ForecastModel   forecastModel;
            boolean         isBudgetForecast;

            ret = super();

            if (kittingFormHandler)
            {
                kittingFormHandler.DS_PreActive(forecastSales_ds);
            }

            if (canEdit && forecastSales.ModelId)
            {
                forecastModel = ForecastModel::find(HeadingSub::Heading, forecastSales.ModelId);
                if (forecastModel && forecastModel.Blocked)
                {
                    canEdit = false;
                }
            }

            boolean isExternallyManaged = Project::isProjectExternallyManaged(forecastSales.ProjId);
            boolean lockFieldsForForecasts = cdsLockingOptionForecasts && isExternallyManaged;

            this.allowEdit(canEdit && !lockFieldsForForecasts);
            this.allowDelete(canEdit && !lockFieldsForForecasts);
            ProjForecastTransferFromQuotationItem.enabled(!lockFieldsForForecasts);
            CreateLines.enabled(!lockFieldsForForecasts);
            Manipulation.enabled(!lockFieldsForForecasts);

            element.buttonCoverage();

            this.updateForecastSalesFields();

            element.updateDesign(InventDimFormDesignUpdate::Active);

            forecastSalesExpand_ds.executeQuery();

            oldCurrency = forecastSales.Currency;

            if (forecastSales.ProjForecastBudgetType == ProjForecastBudgetType::None)
            {
                isBudgetForecast = true;
            }

            forecastSales_ds.allowEdit(isBudgetForecast && !lockFieldsForForecasts);
            forecastSales_ds.allowDelete(isBudgetForecast && !lockFieldsForForecasts);

            this.dataSourceActivePost();

            if (kittingFormHandler)
            {
                kittingFormHandler.DS_Active(forecastSales_ds, InventDim_ds);
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActiveProject</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Links active project.
        /// </summary>
        void linkActiveProject()
        {
            Object caller;

            ProjInvoiceTable            projInvoiceTable;
            ProjWIPTable                projWIPTable;
            QueryBuildRange             rangeProjId;
            ProjBudget                  projBudget;
            ProjBudgetRevision          projBudgetRevision;
            ProjId                      localprojId;

            ProjTable                   projTable;
            ProjControlPeriodCostGroup  projControlPeriodCostGroup;

            #define.star('*')

            caller = element.args().caller();

            if (calledFromProject)
            {
                switch (element.args().dataset())
                {
                    case tableNum(ProjBudget):
                        projBudget = element.args().record();
                        projId = projBudget.RootProjId;
                        if (caller && formHasMethod(caller, 'selectedProjId'))
                        {
                            projId = caller.selectedProjId();
                        }
                        criteriaProjId.value(queryValue(projId) + #star);
                        break;

                    case tableNum(ProjBudgetRevision):
                        projBudgetRevision = element.args().record();
                        projId = projBudgetRevision.rootProjId();
                        if (caller && formHasMethod(caller, 'selectedProjId'))
                        {
                            projId = caller.selectedProjId();
                        }
                        criteriaProjId.value(queryValue(projId) + #star);
                        break;

                    case tableNum(ProjTable):

                        projTable       = element.args().record();
                        localprojId     = projTable.ProjId;
                        projId          = projTable.ProjId;
                        criteriaProjId.value(projTable.ProjId+'*');
                        break;

                    case tableNum(ProjInvoiceTable):
                        rangeProjId    = forecastSales_ds.query().dataSourceTable(tableNum(ForecastSales)).findRange(fieldNum(ForecastSales,ProjId));

                        while (rangeProjId)
                        {
                            forecastSales_ds.query().dataSourceTable(tableNum(ForecastSales)).clearRange(fieldNum(ForecastSales,ProjId));
                            rangeProjId    = forecastSales_ds.query().dataSourceTable(tableNum(ForecastSales)).findRange(fieldNum(ForecastSales,ProjId));
                        }

                        projInvoiceTable   = element.args().record();

                        while select ProjId from projTable
                            where projTable.ProjInvoiceProjId   == projInvoiceTable.ProjInvoiceProjId
                        {
                            forecastSales_ds.query().dataSourceTable(tableNum(ForecastSales)).addRange(fieldNum(ForecastSales,ProjId)).value(projTable.ProjId);
                        }
                        modelId = ProjParameters::find().ModelId;
                        break;

                    case tableNum(ProjWIPTable)     :
                        rangeProjId    = forecastSales_ds.query().dataSourceTable(tableNum(ForecastSales)).findRange(fieldNum(ForecastSales,ProjId));

                        while (rangeProjId)
                        {
                            forecastSales_ds.query().dataSourceTable(tableNum(ForecastSales)).clearRange(fieldNum(ForecastSales,ProjId));
                            rangeProjId    = forecastSales_ds.query().dataSourceTable(tableNum(ForecastSales)).findRange(fieldNum(ForecastSales,ProjId));
                        }

                        projWIPTable   =   element.args().record();

                        while select ProjId from projTable
                            where projTable.wipProject  == projWIPTable.ProjId
                        {
                            forecastSales_ds.query().dataSourceTable(tableNum(ForecastSales)).addRange(fieldNum(ForecastSales,ProjId)).value(projTable.ProjId);
                        }
                        modelId = ProjParameters::find().ModelId;
                        break;

                    case tableNum(ProjControlPeriodCostGroup):

                        projControlPeriodCostGroup  = element.args().record();

                        if (element.costTypeItem(projControlPeriodCostGroup))
                        {
                            element.close();
                        }

                        critModelId.text(projControlPeriodCostGroup.projControlPeriod().ModelId);
                        lockModelId.value(critModelId.text() ? true : false );

                        localprojId                  = projControlPeriodCostGroup.ProjId;
                        projId                      = projControlPeriodCostGroup.ProjId;

                        criteriaControlId.value(projControlPeriodCostGroup.ControlId);
                        criteriaWIPProjId.value(localprojId);

                        qb2.joinMode(JoinMode::ExistsJoin);
                        criteriaCostGroupId.value(projControlPeriodCostGroup.CostGroupId);

                        break;

                    case tableNum(TmpProjStatistic):

                        if (projStatistic)   //          linkActive called again .criteria changed... close form
                            element.close();

                        projStatistic   = element.args().parmObject();
                        projId          = projStatistic.parmProjId();

                        if (projStatistic.parmItem())
                        {
                            critModelId.text(projStatistic.parmForecastModelId());
                            lockModelId.value(projStatistic.parmForecastModelId() ? true : false );

                            ledgerFromDate  = projStatistic.parmLedgerFromDate();
                            ledgerToDate    = projStatistic.parmLedgerToDate();
                            if (projStatistic.parmProjFromDate() || projStatistic.parmProjToDate())
                                criteriaTransDate.value(strFmt('%1..%2',queryValue(projStatistic.parmProjFromDate()),queryValue(projStatistic.parmProjToDate())));

                            if (projStatistic.parmProjCategoryId())
                            {
                                criteriaCategoryId.value(projStatistic.parmProjCategoryId());
                            }
                            if (element.categoryTable(element.args().parmObject()))
                            {
                                criteriaCategoryGroupId.value(projStatistic.parmCategoryGroupId());
                            }

                            if (!enableProjMultipleContractLinesForProjectFeature)
                            {
                                if (projStatistic.parmFixedPrice())
                                {
                                    criteriaFixedPrice.value(queryValue(ProjType::FixedPrice));
                                }
                                if (projStatistic.parmTimeMaterial())
                                {
                                    criteriaTimeMaterial.value(queryValue(ProjType::TimeMaterial));
                                }
                                if (projStatistic.parmInternalCost())
                                {
                                    criteriaInternal.value(queryValue(ProjType::Cost));
                                }
                                if (projStatistic.parmInternalCost())
                                {
                                    criteriaCost.value(queryValue(ProjType::Internal));
                                }
                                if (projStatistic.parmInvestment())
                                {
                                    criteriaInvestment.value(queryValue(ProjType::Investment));
                                }
                                if (projStatistic.parmTime())
                                {
                                    criteriaTime.value(queryValue(ProjType::Time));
                                }
                            }

                            if (projStatistic.parmSorting1())
                            {
                                criteriaSorting1.value(queryValue(projStatistic.parmSorting1()));
                            }
                            if (projStatistic.parmSorting2())
                            {
                                criteriaSorting2.value(queryValue(projStatistic.parmSorting2()));
                            }
                            if (projStatistic.parmSorting3())
                            {
                                criteriaSorting3.value(queryValue(projStatistic.parmSorting3()));
                            }
                            if (projStatistic.parmCustAccount())
                            {
                                criteriaCustAccount.value(queryValue(projStatistic.parmCustAccount()));
                            }
                            if (projStatistic.parmProjGroupId())
                            {
                                criteriaGroupId.value(queryValue(projStatistic.parmProjGroupId()));
                            }

                            if (projStatistic.parmProjTree())
                            {
                                criteriaProjId.value(projStatistic.parmProjId()+ #star);
                            }
                            else
                            if (projStatistic.parmProjId())
                            {
                                criteriaProjId.value(queryValue(projStatistic.parmProjId()));
                            }

                            if (projStatistic.parmProjWIPId())
                            {
                                criteriaWIPProjId.value(queryValue(projStatistic.parmProjWIPId()));
                            }

                            if (projStatistic.parmProjInvoiceProjId())
                            {
                                criteriaProjInvoiceProjId.value(queryValue(projStatistic.parmProjInvoiceProjId()));
                            }
                        }
                        else
                        {
                            criteriaProjId.value(queryValue(SysQuery::valueEmptyString()));
                        }

                        break;

                    case tableNum(TmpProjCashFlow):

                        if (projCashFlow)   //          linkActive called again .criteria changed... close form
                            element.close();

                        projCashFlow   = element.args().parmObject();
                        projId          = projCashFlow.parmProjId();

                        if (projCashFlow.parmItem())
                        {
                            critModelId.text(projCashFlow.parmForecastModelId());
                            lockModelId.value(projCashFlow.parmForecastModelId() ? true : false );

                            if (projCashFlow.parmProjectFromDate() || projCashFlow.parmProjectToDate())
                                criteriaTransDate.value(strFmt('%1..%2',queryValue(projCashFlow.parmProjectFromDate()),queryValue(projCashFlow.parmProjectToDate())));

                            if (projCashFlow.parmCategoryId())
                                criteriaCategoryId.value(projCashFlow.parmCategoryId());

                            if (element.categoryTableCashFlow(element.args().parmObject()))
                                criteriaCategoryGroupId.value(projCashFlow.parmCategoryGroupId());

                            if (!enableProjMultipleContractLinesForProjectFeature)
                            {
                                if (projCashFlow.parmFixedPrice())
                                    criteriaFixedPrice.value(queryValue(ProjType::FixedPrice));
                                if (projCashFlow.parmTimeMaterial())
                                    criteriaTimeMaterial.value(queryValue(ProjType::TimeMaterial));
                                if (projCashFlow.parmInternalCost())
                                    criteriaInternal.value(queryValue(ProjType::Cost));
                                if (projCashFlow.parmInternalCost())
                                    criteriaCost.value(queryValue(ProjType::Internal));
                                if (projCashFlow.parmInvestment())
                                    criteriaInvestment.value(queryValue(ProjType::Investment));
                                if (projCashFlow.parmTimeProject())
                                    criteriaTime.value(queryValue(ProjType::Time));
                            }

                            if (projCashFlow.parmSorting1())
                                criteriaSorting1.value(queryValue(projCashFlow.parmSorting1()));
                            if (projCashFlow.parmSorting2())
                                criteriaSorting2.value(queryValue(projCashFlow.parmSorting2()));
                            if (projCashFlow.parmSorting3())
                                criteriaSorting3.value(queryValue(projCashFlow.parmSorting3()));

                            if (projCashFlow.parmCustAccount())
                                criteriaCustAccount.value(queryValue(projCashFlow.parmCustAccount()));
                            if (projCashFlow.parmProjGroupId())
                                criteriaGroupId.value(queryValue(projCashFlow.parmProjGroupId()));

                            if (projCashFlow.parmProjTree())
                                criteriaProjId.value(projCashFlow.parmProjId()+ #star);
                            else
                            {
                                if (projCashFlow.parmProjId())
                                {
                                    criteriaProjId.value(queryValue(projCashFlow.parmProjId()));
                                }
                            }
                            if (projCashFlow.parmProjWIPId())
                                criteriaWIPProjId.value(queryValue(projCashFlow.parmProjWIPId()));

                            if (projCashFlow.parmProjInvoiceProjId())
                                criteriaProjInvoiceProjId.value(queryValue(projCashFlow.parmProjInvoiceProjId()));
                        }
                        else
                            criteriaProjId.value(queryValue(SysQuery::valueEmptyString()));

                        break;

                    case tableNum(TmpProjCostControl):

                        if (projCostControl)   //          linkActive called again .criteria changed... close form
                            element.close();

                        projCostControl = element.args().parmObject();
                        projId          = projCostControl.parmProjId();

                        if (projCostControl.parmItem())
                        {
                            switch (projCostControl.parmModelType())
                            {
                                case ProjForecastModelType::Original:
                                    critModelId.text(projCostControl.parmOriginalForecastModelId());
                                    lockModelId.value(projCostControl.parmOriginalForecastModelId() ? true : false );
                                    break;
                                case ProjForecastModelType::Remaining:
                                    critModelId.text(projCostControl.parmRemainingForecastModelId());
                                    lockModelId.value(projCostControl.parmRemainingForecastModelId() ? true : false );
                                    break;
                                case ProjForecastModelType::Total:
                                    critModelId.text(projCostControl.parmTotalForecastModelId());
                                    lockModelId.value(projCostControl.parmTotalForecastModelId() ? true : false );
                                    break;
                            }

                            ledgerFromDate  = projCostControl.parmLedgerTransDateFrom();
                            ledgerToDate    = projCostControl.parmLedgerTransDateTo();

                            if (projCostControl.parmProjTransDateFrom() || projCostControl.parmProjTransDateTo())
                            {
                                criteriaTransDate.value(strFmt('%1..%2',queryValue(projCostControl.parmProjTransDateFrom()),queryValue(projCostControl.parmProjTransDateTo())));
                            }

                            if (projCostControl.parmProjCategoryId())
                            {
                                criteriaCategoryId.value(projCostControl.parmProjCategoryId());
                            }

                            if (projCostControl.parmCategoryGroupId())
                            {
                                criteriaCategoryGroupId.value(projCostControl.parmCategoryGroupId());
                            }

                            if (!enableProjMultipleContractLinesForProjectFeature)
                            {
                                if (projCostControl.parmFixedPrice())
                                {
                                    criteriaFixedPrice.value(queryValue(ProjType::FixedPrice));
                                }
                                if (projCostControl.parmTimeMaterial())
                                {
                                    criteriaTimeMaterial.value(queryValue(ProjType::TimeMaterial));
                                }
                                if (projCostControl.parmInternalCost())
                                {
                                    criteriaInternal.value(queryValue(ProjType::Cost));
                                }
                                if (projCostControl.parmInternalCost())
                                {
                                    criteriaCost.value(queryValue(ProjType::Internal));
                                }
                                if (projCostControl.parmInvestment())
                                {
                                    criteriaInvestment.value(queryValue(ProjType::Investment));
                                }
                                if (projCostControl.parmTime())
                                {
                                    criteriaTime.value(queryValue(ProjType::Time));
                                }
                            }

                            if (projCostControl.parmProjSorting1())
                            {
                                criteriaSorting1.value(queryValue(projCostControl.parmProjSorting1()));
                            }
                            if (projCostControl.parmProjSorting2())
                            {
                                criteriaSorting2.value(queryValue(projCostControl.parmProjSorting2()));
                            }
                            if (projCostControl.parmProjSorting3())
                            {
                                criteriaSorting3.value(queryValue(projCostControl.parmProjSorting3()));
                            }

                            if (projCostControl.parmCustomerAccount())
                            {
                                criteriaCustAccount.value(queryValue(projCostControl.parmCustomerAccount()));
                            }

                            if (projCostControl.parmProjGroupId())
                            {
                                criteriaGroupId.value(queryValue(projCostControl.parmProjGroupId()));
                            }

                            if (projCostControl.parmProjTree())
                            {
                                criteriaProjId.value(projCostControl.parmProjId()+ #star);
                            }
                            else
                            {
                                if (projCostControl.parmProjId())
                                {
                                    criteriaProjId.value(queryValue(projCostControl.parmProjId()));
                                }
                            }

                            if (projCostControl.parmProjWIPId())
                            {
                                criteriaWIPProjId.value(queryValue(projCostControl.parmProjWIPId()));
                            }

                            if (projCostControl.parmProjInvoiceProjId())
                            {
                                criteriaProjInvoiceProjId.value(queryValue(projCostControl.parmProjInvoiceProjId()));
                            }
                        }
                        else
                        {
                            criteriaProjId.value(queryValue(SysQuery::valueEmptyString()));
                        }

                        break;
                }
                this.executeQuery();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>updateAmount</Name>
						<Source><![CDATA[
        public void updateAmount()
        {
            forecastSales.updateAmount();
            ctrlGrossAmount.update();
        }

]]></Source>
					</Method>
					<Method>
						<Name>updateForecastSalesFields</Name>
						<Source><![CDATA[
        public void updateForecastSalesFields()
        {
            forecastSales_ds.object(fieldNum(ForecastSales,Freq)).allowEdit(    forecastSales.BudgetMap::mustEnableFreq());
            forecastSales_ds.object(fieldNum(ForecastSales,FreqCode)).allowEdit(forecastSales.BudgetMap::mustEnableFreqCode());
            forecastSales_ds.object(fieldNum(ForecastSales,KeyId)).allowEdit(   forecastSales.BudgetMap::mustEnableKeyId());
            forecastSales_ds.object(fieldNum(ForecastSales,EndDate)).allowEdit( forecastSales.BudgetMap::mustEnableEndDate());

            forecastSales_ds.object(fieldNum(ForecastSales,CustAccountId)).allowEdit(!lockCustAccountId.allowEdit() || forecastSales.ProjId ? false : true);
            forecastSales_ds.object(fieldNum(ForecastSales,CustGroupId)).allowEdit(!lockCustGroupId.allowEdit() || forecastSales.CustAccountId ? false : true);

            forecastSales_ds.object(fieldNum(ForecastSales,ItemGroupId)).allowEdit(!lockItemGroupId.allowEdit() || forecastSales.ItemId ? false : true);

            if (forecastSales.isProjLumpSum())
            {
                forecastSales_ds.object(fieldNum(ForecastSales,ItemId)).allowEdit(false);
                forecastSales_ds.object(fieldNum(ForecastSales,SalesQty)).allowEdit(false);
                forecastSales_ds.object(fieldNum(ForecastSales,PdsCWQty)).allowEdit(false);
            }
            else
            {
                boolean isCWItem = PdsGlobal::pdsIsCWItem(forecastSales.ItemId);
                forecastSales_ds.object(fieldNum(ForecastSales,ItemId)).allowEdit(lockItemId.allowEdit());
                forecastSales_ds.object(fieldNum(ForecastSales,SalesQty)).allowEdit(!isCWItem);
                forecastSales_ds.object(fieldNum(ForecastSales,PdsCWQty)).allowEdit(isCWItem);
            }

            element.updatedForecastSalesFields(element, forecastSales_ds, forecastSales);
        }

]]></Source>
					</Method>
					<Method>
						<Name>wbsId</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Displays associated WBS ID for selected project activity number.
        /// </summary>
        /// <param name = "_forecastSales">
        ///     The <c>ForecastSales</c> table buffer.
        /// </param>
        /// <return>
        ///     WBS ID.
        /// </return>
        public display ProjHierarchyPathId wbsId(ForecastSales _forecastSales)
        {
            if (_forecastSales.ProjId && _forecastSales.ActivityNumber)
            {
                str wbsKey = _forecastSales.ProjId + '-' + _forecastSales.ActivityNumber;

                if (wbsDataCacheMap.exists(wbsKey))
                {
                    container wbsData = wbsDataCacheMap.lookup(wbsKey);
                    return conPeek(wbsData, 1);
                }
                else
                {
                    if(isProjForecastListPageV2FeatureEnabled)
                    {
                        ProjWBSActivityNumberView wbsActivityNumberView;

                        select firstonly WBSID, TaskName from wbsActivityNumberView
                            where wbsActivityNumberView.ProjId == _forecastSales.ProjId && wbsActivityNumberView.ActivityNumber == _forecastSales.ActivityNumber;

                        wbsDataCacheMap.insert(wbsKey, [wbsActivityNumberView.WBSID, wbsActivityNumberView.TaskName]);
                    
                        return wbsActivityNumberView.WBSID;
                    }
                    else
                    {
                        ProjWBSEstimatesView wbsEstimatesView;

                        select firstonly WBSID, TaskName from wbsEstimatesView
                            where wbsEstimatesView.ProjId == _forecastSales.ProjId && wbsEstimatesView.ActivityNumber == _forecastSales.ActivityNumber;

                        wbsDataCacheMap.insert(wbsKey, [wbsEstimatesView.WBSID, wbsEstimatesView.TaskName]);
                    
                        return wbsEstimatesView.WBSID;
                    }
                }
            }

            return '';
        }

]]></Source>
					</Method>
					<Method>
						<Name>wbsTaskName</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Displays associated WBS task name for selected project activity number.
        /// </summary>
        /// <param name = "_forecastSales">
        ///     The <c>ForecastSales</c> table buffer.
        /// </param>
        /// <return>
        ///     WBS task name.
        /// </return>
        public display ProjTaskName wbsTaskName(ForecastSales _forecastSales)
        {
            if (_forecastSales.ProjId && _forecastSales.ActivityNumber)
            {
                str wbsKey = _forecastSales.ProjId + '-' + _forecastSales.ActivityNumber;

                if (wbsDataCacheMap.exists(wbsKey))
                {
                    container wbsData = wbsDataCacheMap.lookup(wbsKey);
                    return conPeek(wbsData, 2);
                }
                else
                {
                    if(isProjForecastListPageV2FeatureEnabled)
                    {
                        ProjWBSActivityNumberView wbsActivityNumberView;

                        select firstonly WBSID, TaskName from wbsActivityNumberView
                            where wbsActivityNumberView.ProjId == _forecastSales.ProjId && wbsActivityNumberView.ActivityNumber == _forecastSales.ActivityNumber;

                        wbsDataCacheMap.insert(wbsKey, [wbsActivityNumberView.WBSID, wbsActivityNumberView.TaskName]);
                    
                        return wbsActivityNumberView.TaskName;
                    }
                    else
                    {
                        ProjWBSEstimatesView wbsEstimatesView;

                        select firstonly WBSID, TaskName from wbsEstimatesView
                            where wbsEstimatesView.ProjId == _forecastSales.ProjId && wbsEstimatesView.ActivityNumber == _forecastSales.ActivityNumber;

                        wbsDataCacheMap.insert(wbsKey, [wbsEstimatesView.WBSID, wbsEstimatesView.TaskName]);

                        return wbsEstimatesView.TaskName;
                    }
                }
            }

            return '';
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayOption</Name>
						<Source><![CDATA[
        public void displayOption(Common _record, FormRowDisplayOption _options)
        {
            if (kittingFormHandler)
            {
                _options = kittingFormHandler.setDisplayOption(_record, _options);
            }

            super(_record, _options);
        }

]]></Source>
					</Method>
					<Method>
						<Name>deleteMarked</Name>
						<Source><![CDATA[
        public void deleteMarked()
        {
            if (kittingFormHandler)
            {
                kittingFormHandler.startMultiSelectDeletion();
            }
        
            super();
        
            if (kittingFormHandler)
            {
                kittingFormHandler.endMultiSelectDeletion(this);
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>ActivityNumber</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(
                FormControl _formControl,
                str         _filterStr)
            {
                HierarchyTreeTable::lookupHierarchyTree(_formControl, ProjTable::find(forecastSales.ProjId));
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>AllocateMethod</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                forecastSales_ds.active();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ContractLineId</DataField>
						<Methods>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            public void jumpRef()
            {
                if (ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
                {
                    PSAContractLineItems contractLineItems = PSAContractLineItems::find(forecastSales.ContractLineId);
                    if (contractLineItems)
                    {
                        ProjectOperationsDWHelper dw = ProjectOperationsDWHelper::construct();
                        dw.openProjectContractLineDetailsInCE(contractLineItems.ContractLineNum, contractLineItems.DataAreaId);
                    }
                }
                else
                {
                    super();
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Currency</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                oldCurrency = forecastSales.Currency;
                forecastSales.salesPurchLineInterface().setPriceAgreement(element.inventDim(),true);
                forecastSales_ds.updateAmount();
                forecastSales_ds.updateForecastSalesFields();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>CustAccountId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                forecastSales.salesPurchLineInterface().setPriceAgreement(element.inventDim(),true);
                forecastSales_ds.updateAmount();
                forecastSales_ds.updateForecastSalesFields();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>DiscAmount</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                forecastSales_ds.updateAmount();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>DiscPercent</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                forecastSales_ds.updateAmount();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ItemAllocateId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.updateCostPrice();

                if (forecastSales.isProjLumpSum())
                {
                    forecastSales.CostPrice=(forecastSales.costAmount());
                    forecastSales.SalesQty=1.00;
                    forecastSales.InventQty=1.00;
                    forecastSales.ItemId = '';
                    forecastSales_ds.object(fieldNum(ForecastSales,ItemId)).allowEdit(false);
                    forecastSales_ds.object(fieldNum(ForecastSales,SalesQty)).allowEdit(false);
                    forecastSales_ds.object(fieldNum(ForecastSales,PdsCWQty)).allowEdit(false);
                }
                else
                {
                    boolean isCWItem = PdsGlobal::pdsIsCWItem(forecastSales.ItemId);
                    forecastSales_ds.object(fieldNum(ForecastSales,ItemId)).allowEdit(true);
                    forecastSales_ds.object(fieldNum(ForecastSales,SalesQty)).allowEdit(!isCWItem);
                    forecastSales_ds.object(fieldNum(ForecastSales,PdsCWQty)).allowEdit(isCWItem);
                }

                element.updateDesign(InventDimFormDesignUpdate::FieldChange);

                // disable all unenabled fields
                inventDim.clearNotSelectedDim(inventDimFormSetup.parmDimParmEnabled());
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ItemBOMId</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(
                FormControl _formControl,
                str         _filterStr)
            {
                InventTable::lookupBOMId(_formControl, forecastSales.ItemId, inventDim);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ItemId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if (kittingFormHandler && kittingFormHandler.isDynKit(forecastSales))
                {
                    return;
                }

                element.initDataFromItemModified();
                element.initDataFromInventDimModified();

                // disable all unenabled fields
                inventDim.clearNotSelectedDim(inventDimFormSetup.parmDimParmEnabled());

                forecastSales.salesPurchLineInterface().setPriceAgreement(inventDim, true);
                forecastSales_ds.updateAmount();
                forecastSales_ds.updateForecastSalesFields();

                if (forecastSales.ProjId)
                {
                    forecastSales.ProjLinePropertyId = ProjLinePropertySetup::findLinePropertyId(forecastSales.ProjId,forecastSales.ProjCategoryId);
                }

                forecastSales.PdsCWUnitId = PdsCatchWeightItem::pdsCWUnitId(forecastSales.ItemId);
                forecastSales_ds.dataSourceActivePost();

                if (kittingFormHandler && kittingFormHandler.isKit())
                {
                    kittingFormHandler.setLineAccess(ForecastSales_DS, InventDim_DS);
                }
            }

]]></Source>
							</Method>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            public void jumpRef()
            {
                if (kittingFormHandler && kittingFormHandler.isKit() && kittingFormHandler.fieldJumpRef(ForecastSales_ds, fieldnum(ForecastSales, ItemId), this))
                {
                    return;
                }

                super();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ItemRouteId</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(
                FormControl _formControl,
                str         _filterStr)
            {
                InventTable::lookupRouteId(_formControl, forecastSales.ItemId, inventDim);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ModelId</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                ForecastModel::lookupOpenModels(_formControl);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>PdsCWQty</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                if (cwFormCtrl)
                {
                    forecastSales.InventQty = 0;
                    cwFormCtrl.fieldModified(fieldNum(ForecastSales, PdsCWQty));
                    forecastSales.SalesQty = forecastSales.salesPurchLineInterface().calcSalesPurchQty(forecastSales.InventQty);
                    forecastSales.salesPurchLineInterface().setPriceAgreement(inventDim);
                    forecastSales_ds.updateAmount();
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>PriceUnit</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                forecastSales_ds.updateAmount();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjFundingSource</DataField>
						<Methods>
							<Method>
								<Name>resolveReference</Name>
								<Source><![CDATA[
            public Common resolveReference(FormReferenceControl _formReferenceControl)
            {
                return ProjFundingSource::resolveReferenceByContractFSName(_formReferenceControl, ProjTable::find(forecastSales.ProjId).ProjInvoiceProjId);
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                return ProjFundingSource::lookupFundingSourceByContract(_formReferenceControl, ProjTable::find(forecastSales.ProjId).ProjInvoiceProjId);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if (lockModelId.value() && forecastSales.ModelId != critModelId.text())  // if initFromProjTable finds a modelId and the modelId is locked
                {
                    forecastSales.ModelId = critModelId.text();
                }

                forecastSales_ds.updateAmount();
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                if (cdsLockingOptionForecasts)
                {
                    ProjTable::lookupProjIdRestrictingExternal(_formControl, forecastSales, NoYes::No, cdsLockingOptionForecasts);
                    return;
                }

                if (element.args().dataset() == tableNum(ProjTable))
                {
                    ProjTable projTableLocal = element.args().record();

                    if (projTableLocal.RecId)
                    {
                        if (projTableLocal.WIPProject)
                        {
                            ProjTable::lookupProjWIPProj(_formControl, projTableLocal.ProjId, cdsLockingOptionForecasts);
                        }
                        else
                        {
                            ProjTable::lookupSelectedProjId(_formControl, _filterStr, projTableLocal.ProjId);
                        }

                        return;
                    }
                }

                ProjTable::lookupProjId(_formControl, forecastSales);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SalesMarkup</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                forecastSales_ds.updateAmount();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SalesPrice</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                forecastSales_ds.updateAmount();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SalesQty</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                forecastSales.salesPurchLineInterface().setPriceAgreement(element.inventDim(),true);
                forecastSales_ds.updateAmount();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SalesUnitId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                forecastSales.salesPurchLineInterface().setPriceAgreement(element.inventDim(),true);
                forecastSales_ds.updateAmount();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>StartDate</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                forecastSales.salesPurchLineInterface().setPriceAgreement(element.inventDim(),true);
                forecastSales_ds.updateAmount();
                forecastSales_ds.updateForecastSalesFields();
                element.updateCostPrice();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>InventDim</Name>
				<Methods />
				<Fields>
					<Field>
						<DataField>configId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                element.setModifiedPriceAgreement(fieldNum(InventDim,ConfigId));
                element.updateCostPrice();
                element.initDataFromInventDimModified();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>inventBatchId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                element.setModifiedPriceAgreement(fieldNum(InventDim,InventBatchId));
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>InventColorId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                element.setModifiedPriceAgreement(fieldNum(InventDim,InventColorId));
                element.updateCostPrice();
                element.initDataFromInventDimModified();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>InventLocationId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                element.setModifiedPriceAgreement(fieldNum(InventDim,InventLocationId));
                element.updateCostPrice();
                element.initDataFromInventDimModified(false);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>inventSerialId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                element.setModifiedPriceAgreement(fieldNum(InventDim,InventSerialId));
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>InventSiteId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                element.initDataFromInventDimModified(false);
                element.setModifiedPriceAgreement(fieldNum(InventDim,InventSiteId));
                element.updateCostPrice();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>InventSizeId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                element.setModifiedPriceAgreement(fieldNum(InventDim,InventSizeId));
                element.updateCostPrice();
                element.initDataFromInventDimModified();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>InventStatusId</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean result;

                result =    super()
                         && WHSInventStatus::allowCreateForecast(inventDim.InventStatusId);

                return result;
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                element.setModifiedPriceAgreement(fieldNum(InventDim,InventStatusId));
                element.updateCostPrice();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>InventStyleId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                element.setModifiedPriceAgreement(fieldNum(InventDim,InventStyleId));
                element.updateCostPrice();
                element.initDataFromInventDimModified();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>InventVersionId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                element.setModifiedPriceAgreement(fieldNum(InventDim, InventVersionId));
                element.updateCostPrice();
                element.initDataFromInventDimModified();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>LicensePlateId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                element.setModifiedPriceAgreement(fieldNum(InventDim,LicensePlateId));
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>wMSLocationId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                element.setModifiedPriceAgreement(fieldNum(InventDim,wmsLocationId));
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>ForecastSalesExpand</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            element.buttonCoverage();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            QueryBuildDataSource    qbsForecastSalesExpand;

            super();

            qbsForecastSalesExpand = this.query().dataSourceTable(tableNum(ForecastSales));

            qbsForecastSalesExpand.clearDynalinks();

            criteriaReport    = qbsForecastSalesExpand.addRange(fieldNum(ForecastSales,Report));
            criteriaExpand_2  = qbsForecastSalesExpand.addRange(fieldNum(ForecastSales,ExpandId));

            qbsForecastSalesExpand.addSortField(fieldName2id(tableNum(ForecastSales),fieldStr(ForecastSales,StartDate)));
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            if ( ! forecastSales.RecId)                     // then query must not find any records
            {
                criteriaExpand_2.value(queryValue('! 0 '));
                criteriaReport.value(queryValue(NoYes::No));
            }
            else
            {
                criteriaExpand_2.value(queryValue(forecastSales.RecId));
                criteriaReport.value(SysQuery::valueUnlimited());
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>InventDistinctProductExpanded</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            showDisplayProductNumber =  InventDistinctProductExpanded::prepareInventDistinctProductDatasource(InventDistinctProductExpanded_DisplayProductNumber,
                                                                                                              this.queryBuildDataSource(),
                                                                                                              ForecastSales_DS.name(),
                                                                                                              fieldNum(ForecastSales, ItemId),
                                                                                                              InventDim_DS.name());
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>ProjWBSEstimatesView</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
 
            Query query = this.query();
            QueryBuildDataSource projWBSEstimateView = query.dataSourceTable(tableNum(ProjWBSEstimatesView));
            projWBSEstimateView.addRange(fieldNum(ProjWBSEstimatesView, ActivityNumber)).value(SysQuery::valueNotEmptyString());

            this.disableProjWBSEstimatesViewDataSource(projWBSEstimateView);
        }

]]></Source>
					</Method>
					<Method>
						<Name>disableProjWBSEstimatesViewDataSource</Name>
						<Source><![CDATA[
        /// <summary>
        /// ProjWBSEstimatesView datasource is deprecated, and WBS data is now rendered via display methods.
        /// </summary>
        protected void disableProjWBSEstimatesViewDataSource(QueryBuildDataSource _projWBSEstimateView)
        {
            _projWBSEstimateView.enabled(false);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>ctrlLedgerCoverage</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (forecastSales.AllocateMethod != BudgetAllocateMethod::None)
            {
                overview_GridForecastSalesExploded.setFocus();
                ctrlLedgerCoverage.dataSource(FormDataUtil::getFormDataSource(forecastSalesExpand).name());

                if (forecastSalesExpand.CovStatus == 0)
                {
                    ttsbegin;
                    forecastSalesExpand.updateLedgerCov(LedgerCoverage::construct(forecastSalesExpand));
                    ttscommit;
                }
            }
            else
            {
                ctrlLedgerCoverage.dataSource(FormDataUtil::getFormDataSource(forecastSales).name());

                if (forecastSales.CovStatus == 0)
                {
                    ttsbegin;
                    forecastSales.updateLedgerCov(LedgerCoverage::construct(forecastSales));
                    ttscommit;
                }
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Manipulation</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            forecastSales_ds.research();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Overview_ProjId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;
    
            ret = super();
    
            if (ret)
            {
                ret = element.validateProjectExternallyManaged(this.text());
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Group_ProjId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;
    
            ret = super();
    
            if (ret)
            {
                ret = element.validateProjectExternallyManaged(this.text());
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LockModelId</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            forecastSales_ds.executeQuery();
            element.updateFields();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>critModelId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (lockModelId.value())
            {
                forecastSales_ds.executeQuery();
                element.updateFields();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LockCustGroupId</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            forecastSales_ds.executeQuery();
            element.updateFields();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CritCustGroupId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (lockCustGroupId.value())
            {
                forecastSales_ds.executeQuery();
                element.updateFields();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LockCustAccountId</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            forecastSales_ds.executeQuery();
            element.updateFields();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CritCustAccountId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (lockCustAccountId.value())
            {
                forecastSales_ds.executeQuery();
                element.updateFields();
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LockItemGroupId</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            forecastSales_ds.executeQuery();
            element.updateFields();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CritItemGroupId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (lockItemGroupId.value())
            {
                forecastSales_ds.executeQuery();
                element.updateFields();
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LockItemId</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            forecastSales_ds.executeQuery();
            element.updateFields();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CritItemId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (lockItemId.value())
            {
                forecastSales_ds.executeQuery();
                element.updateFields();
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>ForecastSales</Name>
			<Table>ForecastSales</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Active</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AllocateMethod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Amount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Comment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContractLineId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Cov</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CovStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Currency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DiscAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DiscPercent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpandId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ForecastEntryNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Freq</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FreqCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemAllocateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemBOMId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemDescription</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemRouteId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>KeyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModelId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>PdsCWUnitId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PlanningPriority</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriceUnit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjCategoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjForecastBudgetType</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjForecastCostPaymDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjForecastEliminationDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjForecastInvoiceDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjForecastSalesPaymDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjFundingSource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjLinePropertyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSARefPurchLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Report</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesMarkup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesUnitId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroupId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventDim</Name>
			<Table>InventDim</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>configId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventBatchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventColorId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventGtdId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventOwnerId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventProfileId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventSerialId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSiteId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSizeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStyleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventVersionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LicensePlateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SHA1Hash</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSPalletId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DelayActive>No</DelayActive>
			<JoinSource>ForecastSales</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ForecastSalesExpand</Name>
			<Table>ForecastSales</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Active</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AllocateMethod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Amount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Comment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Cov</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CovStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Currency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DiscAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DiscPercent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpandId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Freq</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FreqCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemAllocateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemBOMId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemRouteId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>KeyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModelId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWUnitId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriceUnit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjCategoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjForecastBudgetType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjForecastCostPaymDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjForecastEliminationDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjForecastInvoiceDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjForecastSalesPaymDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjFundingSource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjLinePropertyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSARefPurchLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Report</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesMarkup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesUnitId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroupId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoSearch>No</AutoSearch>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<Index>ExpandIdx</Index>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventDistinctProductExpanded</Name>
			<Table>InventDistinctProductExpanded</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>configId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DisplayProductNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EcoResProduct</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventColorId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSizeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStyleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventVersionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Level</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PmfPlanningItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PmfProductType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SearchName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>InventDim</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ProjWBSEstimatesView</Name>
			<Table>ProjWBSEstimatesView</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyTaskId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaskName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WBSID</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>ForecastSales</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SCM:ForecastLines</Caption>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Pattern xmlns="">TaskParentChild</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SalesBalances</Name>
								<ElementPosition>644245092</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>ForecastSalesBalance</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ctrlLedgerCoverage</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741820</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>LedgerCoverage</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>InventDimParmFixed</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>InventDimParmFixed</MenuItemName>
								<SaveRecord>No</SaveRecord>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ProjTransBudget</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>ProjTransBudget</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ProjForecastTransferFromQuotationItem</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1932735276</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>ProjForecastTransferFromQuotationItem</MenuItemName>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabPageOverview</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>OverviewActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>OverviewActions</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>CreateLines</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>MenuFunctionButton</Type>
												<FormControlExtension
													i:nil="true" />
												<DataSource>ForecastSales</DataSource>
												<MenuItemName>ForecastCreateLines</MenuItemName>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>Manipulation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>429496728</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>MenuFunctionButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
												<DataSource>ForecastSales</DataSource>
												<MenuItemName>ForecastManipulation</MenuItemName>
												<MenuItemType>Action</MenuItemType>
												<NormalImage>Edit</NormalImage>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>CtrlInvent</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>858993456</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>MenuFunctionButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataSource>ForecastSales</DataSource>
												<MenuItemName>ForecastInvent</MenuItemName>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>ProjForecastItemCopy</Name>
												<ElementPosition>1717986912</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>MenuFunctionButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataSource>ForecastSales</DataSource>
												<MenuItemName>ProjForecastItemCopy</MenuItemName>
												<MultiSelect>Yes</MultiSelect>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Overview_GridForecastSales</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>WBSID</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<Visible>No</Visible>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>wbsId</DataMethod>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TaskName</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>wbsTaskName</DataMethod>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Overview_ModelId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>252645134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ModelId</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Overview_StartDate</Name>
										<ElementPosition>378967701</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>StartDate</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Overview_ProjId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>505290268</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjId</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Overview_ContractLineId</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>ContractLineId</DataField>
										<DataSource>ForecastSales</DataSource>
										<Label>@Proj:ContractLineId</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Overview_CustAccountId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>631612835</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CustAccountId</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Overview_CustGroupId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>757935402</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CustGroupId</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Overview_ItemGroupId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1010580536</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ItemGroupId</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InventDistinctProductExpanded_DisplayProductNumber</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>DisplayProductNumber</DataField>
										<DataSource>InventDistinctProductExpanded</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Overview_ItemId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>884257969</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ItemId</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Overview_ItemName</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1908874352</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>itemName</DataMethod>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Overview_Inventorydimensions</Name>
										<ElementPosition>1136903103</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Overview_Inventorydimensions_configId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>configId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Overview_Inventorydimensions_InventSizeId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventSizeId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Overview_Inventorydimensions_InventColorId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventColorId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Overview_Inventorydimensions_InventStyleId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventStyleId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Overview_Inventorydimensions_InventVersionId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventVersionId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Overview_Inventorydimensions_InventSiteId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventSiteId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Overview_Inventorydimensions_InventLocationId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventLocationId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Overview_Inventorydimensions_inventBatchId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_Overview_Inventorydimensions_inventBatchId</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>inventBatchId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Overview_Inventorydimensions_wMSLocationId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_Overview_Inventorydimensions_wMSLocationId</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>wMSLocationId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Overview_Inventorydimensions_inventSerialId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_Overview_Inventorydimensions_inventSerialId</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>inventSerialId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Overview_Inventorydimensions_InventStatusId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventStatusId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Overview_Inventorydimensions_LicensePlateId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>LicensePlateId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Overview_Inventorydimensions_InventOwnerId_RU</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventOwnerId_RU</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Overview_Inventorydimensions_InventProfileId_RU</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventProfileId_RU</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Overview_Inventorydimensions_InventGtdId_RU</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventGtdId_RU</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
										</Controls>
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataGroup>InventoryDimensions</DataGroup>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Overview_ItemAllocateId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1263225670</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ItemAllocateId</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Overview_SalesQty</Name>
										<ElementPosition>1389548237</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>SalesQty</DataField>
										<DataSource>ForecastSales</DataSource>
										<DisplaceNegative>0</DisplaceNegative>
										<DisplaceNegativeMode>Fixed</DisplaceNegativeMode>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Overview_SalesUnitId</Name>
										<ElementPosition>1515870804</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>SalesUnitId</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Overview_Amount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1642193371</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_Overview_Amount</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Amount</DataField>
										<DataSource>ForecastSales</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Overview_CostPrice</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1768515938</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_Overview_CostPrice</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CostPrice</DataField>
										<DataSource>ForecastSales</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Overview_SalesPrice</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1831677221</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>SalesPrice</DataField>
										<DataSource>ForecastSales</DataSource>
										<Label>@SYS5755</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ForecastSales_Currency</Name>
										<ElementPosition>1894838505</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Currency</DataField>
										<DataSource>ForecastSales</DataSource>
										<Label>@SYS56480</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ForecastSales_ProjForecastBudgetType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2021161072</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_ForecastSales_ProjForecastBudgetType</HelpText>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjForecastBudgetType</DataField>
										<DataSource>ForecastSales</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>PdsCatchWeight</Name>
										<ElementPosition>2084322359</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>PdsCatchWeight_PdsCWQty</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>PdsCWQty</DataField>
												<DataSource>ForecastSales</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>PdsCatchWeight_PdsCWUnitId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>PdsCWUnitId</DataField>
												<DataSource>ForecastSales</DataSource>
											</AxFormControl>
										</Controls>
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataGroup>PdsCatchWeight</DataGroup>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>ForecastSales</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS9039</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabPageGeneral</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>General_Identification</Name>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ForecastSales_ForecastEntryNumber</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ForecastEntryNumber</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>General_Identification_ItemGroupId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ItemGroupId</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>General_Identification_Report</Name>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_General_Identification_Report</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Report</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>ForecastSales</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>General_Budget</Name>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>General_Budget_Comment</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Comment</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>General_Budget_Active</Name>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_General_Budget_Active</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Active</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>General_Budget_Cov</Name>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_General_Budget_Cov</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Cov</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@SYS15436</Caption>
								<DataGroup>SalesForecast</DataGroup>
								<DataSource>ForecastSales</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>General_Salestax</Name>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>General_Salestax_TaxGroupId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxGroupId</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>General_Salestax_TaxItemGroupId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxItemGroupId</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>SalesTax</DataGroup>
								<DataSource>ForecastSales</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>General_Allocation</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>Allocation_AllocateMethod</Name>
										<ElementPosition>613566756</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_Allocation_AllocateMethod</HelpText>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>AllocateMethod</DataField>
										<DataSource>ForecastSales</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>Allocation_CtrlFreq</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>920350134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_Allocation_CtrlFreq</HelpText>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Freq</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>Allocation_FreqCode</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1227133512</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>FreqCode</DataField>
										<DataSource>ForecastSales</DataSource>
										<Selection>255</Selection>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Allocation_KeyId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1533916890</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>KeyId</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Allocation_EndDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1840700268</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_Allocation_EndDate</HelpText>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>EndDate</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<Caption>@SYS26697</Caption>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS2952</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabPageItemSpecification</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Prices</Name>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ForecastSales_PriceUnit</Name>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_ForecastSales_PriceUnit</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>PriceUnit</DataField>
										<DataSource>ForecastSales</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ForecastSales_SalesMarkup</Name>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_ForecastSales_SalesMarkup</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SalesMarkup</DataField>
										<DataSource>ForecastSales</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ForecastSales_CostPrice</Name>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_ForecastSales_CostPrice</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CostPrice</DataField>
										<DataSource>ForecastSales</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Caption>@SYS12983</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Price_Discount</Name>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ForecastSales_DiscPercent</Name>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>DiscPercent</DataField>
										<DataSource>ForecastSales</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ForecastSales_DiscAmount</Name>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_ForecastSales_DiscAmount</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>DiscAmount</DataField>
										<DataSource>ForecastSales</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ctrlGrossAmount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@SYS26695</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>GrossAmount</DataMethod>
										<DataSource>ForecastSales</DataSource>
										<DisplaceNegative>0</DisplaceNegative>
										<DisplaceNegativeMode>Fixed</DisplaceNegativeMode>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Caption>@SYS19789</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Inventory</Name>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ForecastSales_InventQty</Name>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_ForecastSales_InventQty</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>InventQty</DataField>
										<DataSource>ForecastSales</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ForecastSales_ItemBOMId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ItemBOMId</DataField>
										<DataSource>ForecastSales</DataSource>
										<Label>@SCM:ForecastItemBom</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ForecastSales_ItemRouteId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ItemRouteId</DataField>
										<DataSource>ForecastSales</DataSource>
										<Label>@SCM:ForecastItemRoute</Label>
									</AxFormControl>
								</Controls>
								<Caption>@SYS981</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>PdsCatchWeight3</Name>
								<ElementPosition>2013265918</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>PdsCatchWeight3_PdsCWQty</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>PdsCWQty</DataField>
										<DataSource>ForecastSales</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PdsCatchWeight3_PdsCWUnitId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>PdsCWUnitId</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>PdsCatchWeight</DataGroup>
								<DataSource>ForecastSales</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Planning</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ForecastSales_PlanningPriority</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>PlanningPriority</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@SCMPlanning:ReqPlanningPriorityLabel</Caption>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS7407</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ProjectTab</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ConfigurationKey>Project</ConfigurationKey>
						<ElementPosition>2013265918</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ProjectIdentification</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Group_StartDate</Name>
										<ElementPosition>477218588</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>StartDate</DataField>
										<DataSource>ForecastSales</DataSource>
										<Label>@SYS54242</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Group_ProjId</Name>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjId</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjectIdentification_ContractLineId</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>ContractLineId</DataField>
										<DataSource>ForecastSales</DataSource>
										<Label>@Proj:ContractLineId</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>ProjectIdentification_ProjFundingSource</Name>
										<ConfigurationKey>Project</ConfigurationKey>
										<ElementPosition>954437176</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>ProjectIdentification_ProjFundingSource_FundingSourceId</Name>
												<DataRelationPath>ProjFundingSource</DataRelationPath>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
											</AxFormControl>
										</Controls>
										<DataSource>ForecastSales</DataSource>
										<ReferenceField>ProjFundingSource</ReferenceField>
										<ReplacementFieldGroup>FundingSourceName</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Group_ActivityNumber</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1193046470</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ActivityNumber</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Group_ProjCategoryId</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjCategoryId</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Group_ItemId</Name>
										<ElementPosition>1670265058</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ItemId</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Group_ProjLinePropertyId</Name>
										<ElementPosition>1908874352</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_Group_ProjLinePropertyId</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjLinePropertyId</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>ProjectIdentification</DataGroup>
								<DataSource>ForecastSales</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ProjectTransaction</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjectTransaction_ProjTransId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjTransId</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>ProjectTransaction</DataGroup>
								<DataSource>ForecastSales</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ProjectCostPrice</Name>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Group1_SalesQty</Name>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SalesQty</DataField>
										<DataSource>ForecastSales</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Group1_CostPrice</Name>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_Group1_CostPrice</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CostPrice</DataField>
										<DataSource>ForecastSales</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CostAmount</Name>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>costAmount</DataMethod>
										<DataSource>ForecastSales</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<DataGroup>ProjectCostPrice</DataGroup>
								<DataSource>ForecastSales</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ProjectSalesPrice</Name>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjectSalesPrice_Currency</Name>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_ProjectSalesPrice_Currency</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Currency</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjectSalesPrice_SalesUnitId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SalesUnitId</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ProjectSalesPrice_SalesPrice</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SalesPrice</DataField>
										<DataSource>ForecastSales</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<DataGroup>ProjectSalesPrice</DataGroup>
								<DataSource>ForecastSales</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ProjectAdministration</Name>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>Group_Active</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_Group_Active</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Active</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Group_modifiedBy</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>modifiedBy</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>ProjectAdministration</DataGroup>
								<DataSource>ForecastSales</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Dates</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Dates_StartDate</Name>
										<ElementPosition>613566756</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>StartDate</DataField>
										<DataSource>ForecastSales</DataSource>
										<Label>@SYS54242</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Dates_ProjForecastInvoiceDate</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjForecastInvoiceDate</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Dates_ProjForecastEliminationDate</Name>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_Dates_ProjForecastEliminationDate</HelpText>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjForecastEliminationDate</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Dates_ProjForecastCostPaymDate</Name>
										<ConfigurationKey>Project</ConfigurationKey>
										<ElementPosition>1533916890</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_Dates_ProjForecastCostPaymDate</HelpText>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjForecastCostPaymDate</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Dates_ProjForecastSalesPaymDate</Name>
										<ConfigurationKey>Project</ConfigurationKey>
										<ElementPosition>1840700268</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjForecastSalesPaymDate</DataField>
										<DataSource>ForecastSales</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>Dates</DataGroup>
								<DataSource>ForecastSales</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS4534</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabFinancialDimensions</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2080374782</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<NeededPermission>Manual</NeededPermission>
						<Pattern>DimensionEntryControl</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormContainerControl">
								<Name>DimensionEntryControl</Name>
								<Type>Container</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension>
									<Name>DimensionEntryControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>parmControllerClassName</Name>
											<Type>ExtendedDataType</Type>
											<TypeName>ClassName</TypeName>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmControlLabelText</Name>
											<Type>String</Type>
											<Value>@SYS101181</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmEnumerationName</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmDataSourceName</Name>
											<Type>String</Type>
											<Value>ForecastSales</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmValueSetReferenceField</Name>
											<Type>String</Type>
											<Value>DefaultDimension</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmEnumValueSetReferenceField</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<Controls />
							</AxFormControl>
						</Controls>
						<HideIfEmpty>No</HideIfEmpty>
						<Caption>@SYS101181</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabPageDimensionTab</Name>
						<ElementPosition>2113929214</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Inventorydimensions1</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Inventorydimensions1_configId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>configId</DataField>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Inventorydimensions1_InventSizeId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>InventSizeId</DataField>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Inventorydimensions1_InventColorId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>InventColorId</DataField>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Inventorydimensions1_InventStyleId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>InventStyleId</DataField>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Inventorydimensions1_InventVersionId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>InventVersionId</DataField>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Inventorydimensions1_InventSiteId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>InventSiteId</DataField>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Inventorydimensions1_InventLocationId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>InventLocationId</DataField>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Inventorydimensions1_inventBatchId</Name>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_Inventorydimensions1_inventBatchId</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>inventBatchId</DataField>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Inventorydimensions1_wMSLocationId</Name>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_Inventorydimensions1_wMSLocationId</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>wMSLocationId</DataField>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Inventorydimensions1_inventSerialId</Name>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_Inventorydimensions1_inventSerialId</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>inventSerialId</DataField>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Inventorydimensions1_InventStatusId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>InventStatusId</DataField>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Inventorydimensions1_LicensePlateId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>LicensePlateId</DataField>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Inventorydimensions1_InventOwnerId_RU</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>InventOwnerId_RU</DataField>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Inventorydimensions1_InventProfileId_RU</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>InventProfileId_RU</DataField>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Inventorydimensions1_InventGtdId_RU</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>InventGtdId_RU</DataField>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>InventoryDimensions</DataGroup>
								<DataSource>InventDim</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS53630</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabPageFilter</Name>
						<ElementPosition>2130706430</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Model</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>LockModelId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS9923</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>critModelId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>ForecastModelHeadId</ExtendedDataType>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
								</Controls>
								<LeftMargin>0</LeftMargin>
								<LeftMarginMode>Fixed</LeftMarginMode>
								<RightMargin>0</RightMargin>
								<RightMarginMode>Fixed</RightMarginMode>
								<Breakable>No</Breakable>
								<FrameType>None</FrameType>
								<Style>CustomFilter</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CustGroup</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>LockCustGroupId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS11904</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CritCustGroupId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>CustGroupId</ExtendedDataType>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
								</Controls>
								<LeftMargin>0</LeftMargin>
								<LeftMarginMode>Fixed</LeftMarginMode>
								<RightMargin>0</RightMargin>
								<RightMarginMode>Fixed</RightMarginMode>
								<Breakable>No</Breakable>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CustAccount</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>LockCustAccountId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS24704</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CritCustAccountId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>CustAccount</ExtendedDataType>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
								</Controls>
								<LeftMargin>0</LeftMargin>
								<LeftMarginMode>Fixed</LeftMarginMode>
								<RightMargin>0</RightMargin>
								<RightMarginMode>Fixed</RightMarginMode>
								<Breakable>No</Breakable>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ItemGroup</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>LockItemGroupId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS4922</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CritItemGroupId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>ItemGroupId</ExtendedDataType>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
								</Controls>
								<LeftMargin>0</LeftMargin>
								<LeftMarginMode>Fixed</LeftMarginMode>
								<RightMargin>0</RightMargin>
								<RightMarginMode>Fixed</RightMarginMode>
								<Breakable>No</Breakable>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ItemId</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>LockItemId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS7407</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CritItemId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>ItemId</ExtendedDataType>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
								</Controls>
								<LeftMargin>0</LeftMargin>
								<LeftMarginMode>Fixed</LeftMarginMode>
								<RightMargin>0</RightMargin>
								<RightMarginMode>Fixed</RightMarginMode>
								<Breakable>No</Breakable>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS2163</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Splitter</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<FrameType>None</FrameType>
				<Style>SplitterHorizontalContainer</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>AllocationTab</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>AllocationOverview</Name>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Overview_GridForecastSalesExploded</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ForecastSalesExpand_StartDate</Name>
										<ElementPosition>613566756</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>StartDate</DataField>
										<DataSource>ForecastSalesExpand</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ForecastSalesExpand_SalesQty</Name>
										<ElementPosition>920350134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>SalesQty</DataField>
										<DataSource>ForecastSalesExpand</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ForecastSalesExpand_SalesUnitId</Name>
										<ElementPosition>1227133512</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>SalesUnitId</DataField>
										<DataSource>ForecastSalesExpand</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>PdsCatchWeight1</Name>
										<ElementPosition>1342177278</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>PdsCatchWeight1_PdsCWQty</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>PdsCWQty</DataField>
												<DataSource>ForecastSalesExpand</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>PdsCatchWeight1_PdsCWUnitId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>PdsCWUnitId</DataField>
												<DataSource>ForecastSalesExpand</DataSource>
											</AxFormControl>
										</Controls>
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataGroup>PdsCatchWeight</DataGroup>
										<DataSource>ForecastSalesExpand</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ForecastSalesExpand_Amount</Name>
										<ElementPosition>1533916890</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_ForecastSalesExpand_Amount</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Amount</DataField>
										<DataSource>ForecastSalesExpand</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ForecastSalesExpand_Currency</Name>
										<ElementPosition>1840700268</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_InventoryManagement:ForecastSales_ForecastSalesExpand_Currency</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Currency</DataField>
										<DataSource>ForecastSalesExpand</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>ForecastSalesExpand</DataSource>
								<VisibleRows>6</VisibleRows>
								<VisibleRowsMode>Fixed</VisibleRowsMode>
							</AxFormControl>
						</Controls>
						<Caption>@SYS40906</Caption>
					</AxFormControl>
				</Controls>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>
