<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RequisitionReplenishCatAccessPolicyRule</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
    [Form]
    public class RequisitionReplenishCatAccessPolicyRule extends FormRun
    {
        RefRecId                        policyRuleTypeIndex;
        RefRecId                        policyIndex;
        EcoResCategoryTreeDatasource    hierarchyTree;
        SysPolicyRule                   sysPolicyRule;
        RecId                           replenishAccessPolicyRuleRecId;
        boolean                         formOpenedForNew;
        EcoResCategoryHierarchy         selectedCategoryHierarchy;
}
]]></Source>
			</Method>
			<Method>
				<Name>addSelectedCategoryAndAncestors</Name>
				<Source><![CDATA[
    void addSelectedCategoryAndAncestors()
    {
        ProcCategoryTmpAllowedCategory tmpProcCategoryTmpAllowedCategory;
        int idxSelection = ctrlFormTree.getFirstSelected();

        tmpProcCategoryTmpAllowedCategory.setTmp();

        while (idxSelection)
        {
            FormTreeItem formTreeItem = ctrlFormTree.getItem(idxSelection);
            EcoResCategoryId ecoResSelectedCategoryId = formTreeItem.data();
            var ecoResCategorySelected = EcoResCategory::find(ecoResSelectedCategoryId);

            tmpProcCategoryTmpAllowedCategory.setTmpData( procCategoryTmpAllowedCategory );

            EcoResCategory selectedCategoryAndAncestors;
            while select RecId, Name from selectedCategoryAndAncestors
                where selectedCategoryAndAncestors.NestedSetLeft <= ecoResCategorySelected.NestedSetLeft
                    && selectedCategoryAndAncestors.NestedSetRight >= ecoResCategorySelected.NestedSetRight
                    && selectedCategoryAndAncestors.CategoryHierarchy == ecoResCategorySelected.CategoryHierarchy
            {
                select firstonly RecId from tmpProcCategoryTmpAllowedCategory
                    where tmpProcCategoryTmpAllowedCategory.Category == selectedCategoryAndAncestors.RecId;

                if (tmpProcCategoryTmpAllowedCategory.RecId == 0)
                {
                    tmpProcCategoryTmpAllowedCategory.initValue();
                    tmpProcCategoryTmpAllowedCategory.Category = selectedCategoryAndAncestors.RecId;
                    tmpProcCategoryTmpAllowedCategory.CategoryName = selectedCategoryAndAncestors.Name;
                    tmpProcCategoryTmpAllowedCategory.AccessPolicyRule = replenishCatAccessPolicyRule.RecId;
                    tmpProcCategoryTmpAllowedCategory.insert();
                }
            }

            if (addSubtree.checked())
            {
                EcoResCategory selectedCategoryDescendants;
                while select RecId, Name from selectedCategoryDescendants
                    where selectedCategoryDescendants.NestedSetLeft > ecoResCategorySelected.NestedSetLeft
                        && selectedCategoryDescendants.NestedSetRight < ecoResCategorySelected.NestedSetRight
                        && selectedCategoryDescendants.CategoryHierarchy == ecoResCategorySelected.CategoryHierarchy
                {
                    select firstonly RecId from tmpProcCategoryTmpAllowedCategory
                        where tmpProcCategoryTmpAllowedCategory.Category == selectedCategoryDescendants.RecId;

                    if (tmpProcCategoryTmpAllowedCategory.RecId ==0)
                    {
                        tmpProcCategoryTmpAllowedCategory.initValue();
                        tmpProcCategoryTmpAllowedCategory.Category          = selectedCategoryDescendants.RecId;
                        tmpProcCategoryTmpAllowedCategory.CategoryName      = selectedCategoryDescendants.Name;
                        tmpProcCategoryTmpAllowedCategory.AccessPolicyRule  = replenishCatAccessPolicyRule.RecId;
                        tmpProcCategoryTmpAllowedCategory.insert();
                    }
                }
            }

            idxSelection = ctrlFormTree.getNextSelected(idxSelection);
        }

        procCategoryTmpAllowedCategory_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord</Name>
				<Source><![CDATA[
    public void createRecord(str _formDataSourceName, boolean _append = false)
    {
        if ((_formDataSourceName != ecoResCategory_ds.name()) &&
            (_formDataSourceName != ecoResCategoryHierarchy_ds.name()))
        {
            super(_formDataSourceName, _append);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasRuleChanged</Name>
				<Source><![CDATA[
    private boolean hasRuleChanged()
    {
        RequisitionRepCatAccessPolicyRuleData existingCategories;
        ProcCategoryTmpAllowedCategory tempCategories;

        // The rule has not been created yet, so it cannot have changed
        if (replenishCatAccessPolicyRule.RecId == 0)
        {
            return false;
        }

        tempCategories.setTmp();
        tempCategories.setTmpData(procCategoryTmpAllowedCategory);

        // Check to see if categories have been added...
        select firstonly RecId from tempCategories
            where tempCategories.AccessPolicyRule == replenishCatAccessPolicyRule.RecId
            notexists join existingCategories
                where tempCategories.Category == existingCategories.Category
                    && existingCategories.RequisitionReplenishCatAccessPolicyRule == tempCategories.AccessPolicyRule;

        if (tempCategories.RecId)
        {
            return true; // categories added
        }

        // ...or removed.  We would do the same thing here as above to make one nice join, except for this AX limitation:
        // "InMemory temporary tables must be the outer tables when they are joined to a TempDB table or permanent table."
        while select RecId from existingCategories
            where existingCategories.RequisitionReplenishCatAccessPolicyRule == replenishCatAccessPolicyRule.RecId
        {
            select firstonly RecId from tempCategories
                where tempCategories.Category == existingCategories.Category
                    && tempCategories.AccessPolicyRule == replenishCatAccessPolicyRule.RecId;

            if (!tempCategories.RecId)
            {
                return true; // categories removed
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        if (!element.args().caller())
        {
            throw error(Error::missingFormActiveBuffer(element.name()));
        }

        formOpenedForNew = (element.args().parmEnum() == OpenMode::New);
        super();

        sysPolicyRule       = element.args().record();
        policyRuleTypeIndex = str2int64(element.args().parm());
        policyIndex         = element.args().caller().getPolicyIndex();

        if (sysPolicyRule.RecId == 0) // This is a new rule
        {
            replenishCatAccessPolicyRule_ds.initValue();

            replenishCatAccessPolicyRule_ds.write();
            replenishAccessPolicyRuleRecId  = replenishCatAccessPolicyRule.RecId;
            sysPolicyRule = RequisitionReplenishCatAccessPolicyRule::find(replenishCatAccessPolicyRule.RecId);
        }
        else // This is an existing rule
        {
            // Populate the exiting category list
            element.initializeSelectedCategories(sysPolicyRule.RecId);

            // If the record is PAST (expired) or PRESENT (active), neither of the dates are editable.
            //   Why?  If PAST, changing is never allowed, period.
            //   If PRESENT, ValidFrom changes are handled by creating a new rule and ValidTo changes
            //   are handled by the shorten/lengthen rule duration button in correction mode
            //   If FUTURE, we can safely update (correct) the dates on the current rule

            // If the policy rule has expired (PAST), then disable ALL editing & hide the save button

            ctrlFormTree.enabled(false);
            categoryTreeButtonGroup.enabled(false);
            selectedCategoriesGrid.allowEdit(false);
            selectedCategoriesGrid.enabled(false);

            saveAccessPolicyRule.visible(NoYes::No);
            addSubtree.enabled(NoYes::No);
        }

        // Initialize control values with the new or existing rule values now that we have them
        // Initialize category tree
        SysPolicyUtil::filterPolicyRule(replenishCatAccessPolicyRule_ds,sysPolicyRule);
        selectedCategoryHierarchy = EcoResCategoryHierarchy::find(replenishCatAccessPolicyRule.EcoResCategoryHierarchy);
        ecoResCategoryHierarchy_ds.query().dataSourceTable(tableNum(EcoResCategoryHierarchy)).addRange(fieldNum(EcoResCategoryHierarchy, RecId)).value(queryValue(selectedCategoryHierarchy.RecId));
        element.initializeCategoryTree();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCategoryTree</Name>
				<Source><![CDATA[
    public void initializeCategoryTree()
    {
        EcoResCategory root = EcoResCategory::getRoot(selectedCategoryHierarchy.RecId);

        //tree view
        hierarchyTree = new EcoResCategoryTreeDatasource(ecoResCategory_ds,
                                                         ctrlFormTree,
                                                         fieldNum(EcoResCategory, RecId),
                                                         fieldNum(EcoResCategory, ParentCategory),
                                                         fieldNum(EcoResCategory, Name),
                                                         false,
                                                         true,
                                                         0,
                                                         selectedCategoryHierarchy,
                                                         ecoResCategoryHierarchy_ds);

        hierarchyTree.initRoot(root.Name, root.RecId, hierarchyTree.image());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSelectedCategories</Name>
				<Source><![CDATA[
    private void initializeSelectedCategories(RefRecId _sysPolicyRuleRecId)
    {
        RequisitionRepCatAccessPolicyRuleData policyRuledata;
        EcoResCategory selectedCategories;

        insert_recordset procCategoryTmpAllowedCategory (Category, CategoryName, AccessPolicyRule)
            select RecId, Name from selectedCategories
                join RequisitionReplenishCatAccessPolicyRule from policyRuledata
                    where policyRuledata.RequisitionReplenishCatAccessPolicyRule == _sysPolicyRuleRecId
                        && policyRuledata.Category == selectedCategories.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeSelectedCategoryAndDescendants</Name>
				<Source><![CDATA[
    public void removeSelectedCategoryAndDescendants()
    {
        ProcCategoryTmpAllowedCategory tmpProcCategoryTmpAllowedCategory;
        ProcCategoryTmpAllowedCategory selectedCategory;

        tmpProcCategoryTmpAllowedCategory.setTmp();
        tmpProcCategoryTmpAllowedCategory.setTmpData(procCategoryTmpAllowedCategory);

        ttsbegin;

        selectedCategory = getFirstSelection(procCategoryTmpAllowedCategory_ds);

        while (selectedCategory)
        {
            var ecoResCategorySelected = EcoResCategory::find(selectedCategory.Category);
            EcoResCategory selectedCategoryAndDescendants;

            delete_from tmpProcCategoryTmpAllowedCategory
                    exists join RecId from selectedCategoryAndDescendants
                        where selectedCategoryAndDescendants.RecId == tmpProcCategoryTmpAllowedCategory.Category
                            && selectedCategoryAndDescendants.NestedSetLeft >= ecoResCategorySelected.NestedSetLeft
                            && selectedCategoryAndDescendants.NestedSetRight <= ecoResCategorySelected.NestedSetRight
                            && selectedCategoryAndDescendants.CategoryHierarchy == ecoResCategorySelected.CategoryHierarchy;

            selectedCategory = procCategoryTmpAllowedCategory_ds.getNext();
        }

        ttscommit;

        procCategoryTmpAllowedCategory_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAccessPolicyParameter</Name>
				<Source><![CDATA[
    void saveAccessPolicyParameter()
    {
        RefRecId accessPolicyRuleId = replenishCatAccessPolicyRule.RecId;
        RequisitionRepCatAccessPolicyRuleData categoryAccessPolicyRuleData, categoryAccessPolicyRuleDataNew;
        ProcCategoryTmpAllowedCategory tmpProcCategoryTmpAllowedCategory;

        if (replenishCatAccessPolicyRule.RecId != 0)
        {
            ttsbegin;

            // Update the temp table with the new policy rule ID
            update_recordset procCategoryTmpAllowedCategory
                    setting AccessPolicyRule = accessPolicyRuleId;

            // Delete the categories that are deleted from the temp table (or disallowed in this session)
            while select forupdate categoryAccessPolicyRuleData
                    where categoryAccessPolicyRuleData.RequisitionReplenishCatAccessPolicyRule == accessPolicyRuleId
            {
                select firstonly RecId from tmpProcCategoryTmpAllowedCategory
                        where tmpProcCategoryTmpAllowedCategory.Category          == categoryAccessPolicyRuleData.Category
                            && tmpProcCategoryTmpAllowedCategory.AccessPolicyRule == categoryAccessPolicyRuleData.RequisitionReplenishCatAccessPolicyRule;

                if (tmpProcCategoryTmpAllowedCategory.RecId == 0)
                {
                    categoryAccessPolicyRuleData.delete();
                }
            }

            // Add the categories that are added from the temp table (or allowed in this session)
            insert_recordset categoryAccessPolicyRuleDataNew (Category, RequisitionReplenishCatAccessPolicyRule)
                    select Category, accessPolicyRuleId from procCategoryTmpAllowedCategory
                        notexists join categoryAccessPolicyRuleData
                            where categoryAccessPolicyRuleData.Category == procCategoryTmpAllowedCategory.Category
                                && categoryAccessPolicyRuleData.RequisitionReplenishCatAccessPolicyRule == procCategoryTmpAllowedCategory.AccessPolicyRule;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAccessPolicyRuleAndParameter</Name>
				<Source><![CDATA[
    void saveAccessPolicyRuleAndParameter()
    {
        ttsbegin;
        // Save categories allowed for the rule
        if (replenishCatAccessPolicyRule.RecId != 0)
        {
            element.saveAccessPolicyParameter();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccess</Name>
				<Source><![CDATA[
    public void setAccess()
    {
        boolean canEditDataSource;

        canEditDataSource = replenishCatAccessPolicyRule_ds.canEdit();

        if (!formOpenedForNew || replenishCatAccessPolicyRule.RecId) // This is a existing rule
        {
            if (replenishCatAccessPolicyRule.ValidTo <= DateTimeUtil::utcNow())
            {
                canEditDataSource = false;
            }
        }

        replenishCatAccessPolicyRule_ds.allowEdit(canEditDataSource);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>ReplenishCatAccessPolicyRule</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            super();

            sysPolicyRule = RequisitionReplenishCatAccessPolicyRule::find(replenishCatAccessPolicyRule.RecId);
            SysPolicyUtil::filterPolicyRule(replenishCatAccessPolicyRule_ds, sysPolicyRule);

            this.executeQuery();
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            super();
            element.setAccess();
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            super();

            replenishCatAccessPolicyRule.initValues(
                policyIndex,
                policyRuleTypeIndex,
                element.args().caller().getDefaultStartDate(policyIndex, policyRuleTypeIndex));
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            if (formOpenedForNew)
            {
                replenishCatAccessPolicyRule.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>RequisitionReplenishCatAccessPolicyRule_EcoResCategoryHierarchy</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            selectedCategoryHierarchy = EcoResCategoryHierarchy::find(replenishCatAccessPolicyRule.EcoResCategoryHierarchy);
            ecoResCategoryHierarchy_ds.query().dataSourceTable(tableNum(EcoResCategoryHierarchy)).addRange(fieldNum(EcoResCategoryHierarchy, RecId)).value(queryValue(selectedCategoryHierarchy.RecId));
            element.initializeCategoryTree();
            delete_from procCategoryTmpAllowedCategory;
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ctrlFormTree</Name>
				<Type>Tree</Type>
				<Methods>
					<Method>
						<Name>expanding</Name>
						<Source><![CDATA[
        public boolean expanding(int _idx, FormTreeExpand _action, anytype _data)
        {
            boolean ret;

            ret = super(_idx, _action, _data);
            hierarchyTree.expanding(_idx, _action, _data);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Add</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            element.addSelectedCategoryAndAncestors();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Remove</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            element.removeSelectedCategoryAndDescendants();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SaveAccessPolicyRule</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            element.saveAccessPolicyRuleAndParameter();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>EcoResCategory</Name>
			<Table>EcoResCategory</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CategoryHierarchy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChangeStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Code</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultProjectGlobalCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultThreshold_PSN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsActive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsCategoryAttributesInherited</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsTangible</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Level</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NestedSetLeft</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NestedSetRight</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PKWiUCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>relationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>EcoResCategoryHierarchy</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources>
				<AxFormDataSourceDerived>
					<Name>EcoResCategory_PCClass</Name>
					<Table>PCClass</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ReuseEnabled</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
			</DerivedDataSources>
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>EcoResCategoryHierarchy</Name>
			<Table>EcoResCategoryHierarchy</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyModifier</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>ReplenishCatAccessPolicyRule</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ProcCategoryTmpAllowedCategory</Name>
			<Table>ProcCategoryTmpAllowedCategory</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccessPolicyRule</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Category</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CategoryName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreateDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FriendlyName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastModifiedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LegalEntityName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Status</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ReplenishCatAccessPolicyRule</Name>
			<Table>RequisitionReplenishCatAccessPolicyRule</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EcoResCategoryHierarchy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsInherited</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Policy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PolicyRuleType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>relationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidTo</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS4050031</Caption>
		<DialogSize xmlns="">Full</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<Height xmlns="">0</Height>
		<HeightMode xmlns="">Column</HeightMode>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<StatusBarStyle xmlns="">SimpleWithoutClose</StatusBarStyle>
		<Style xmlns="">Dialog</Style>
		<Width xmlns="">700</Width>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>SysPolicyRule</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormDateTimeControl">
						<Name>RequisitionReplenishCatAccessPolicyRule_ValidTo</Name>
						<ElementPosition>858993458</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>DateTime</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>ValidTo</DataField>
						<DataSource>ReplenishCatAccessPolicyRule</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateTimeControl">
						<Name>RequisitionReplenishCatAccessPolicyRule_ValidFrom</Name>
						<ElementPosition>1288490187</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>DateTime</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>ValidFrom</DataField>
						<DataSource>ReplenishCatAccessPolicyRule</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormReferenceGroupControl">
						<Name>RequisitionReplenishCatAccessPolicyRule_EcoResCategoryHierarchy</Name>
						<ElementPosition>1717986916</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@FieldDescriptions_ProcurementAndSourcing:RequisitionReplenishCatAccessPolicyRule_RequisitionReplenishCatAccessPolicyRule_EcoResCategoryHierarchy</HelpText>
						<Type>ReferenceGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>RequisitionReplenishCatAccessPolicyRule_EcoResCategoryHierarchy_Name</Name>
								<DataRelationPath>EcoResCategoryHierarchy</DataRelationPath>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
							</AxFormControl>
						</Controls>
						<DataSource>ReplenishCatAccessPolicyRule</DataSource>
						<ReferenceField>EcoResCategoryHierarchy</ReferenceField>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Caption>@SYS304921</Caption>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CategoryPolicy</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>AddChildCategoryGroup</Name>
						<ElementPosition>2040109463</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>AddSubtree</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@SYS328707</HelpText>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS328706</Label>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>PickList</Name>
						<ElementPosition>1717986916</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>AvailableCategories</Name>
								<ElementPosition>429496729</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Height>0</Height>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>AvailableStaticText</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_ProcurementAndSourcing:RequisitionReplenishCatAccessPolicyRule_AvailableStaticText</HelpText>
										<Type>StaticText</Type>
										<VerticalSpacingMode>Fixed</VerticalSpacingMode>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS304923</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormTreeControl">
										<Name>ctrlFormTree</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Height>0</Height>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Tree</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>275</Width>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<SingleSelection>No</SingleSelection>
									</AxFormControl>
								</Controls>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SelectRemoveButtonGroup</Name>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Height>0</Height>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>CategoryTreeButtonGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Height>0</Height>
										<HeightMode>SizeToAvailable</HeightMode>
										<LeftMode>AutoLeft</LeftMode>
										<Type>ButtonGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>Add</Name>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@SYS304925</HelpText>
												<NeededPermission>Create</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<Text>@SYS304924</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>Remove</Name>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@SYS304926</HelpText>
												<NeededPermission>Delete</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<Text>@SYS301867</Text>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SelectedCategoriesGroup</Name>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Height>0</Height>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>SelectedCategoriesText</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>StaticText</Type>
										<VerticalSpacingMode>Fixed</VerticalSpacingMode>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS304927</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>SelectedCategoriesGrid</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1342177278</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Height>0</Height>
										<Type>Grid</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>ProcCategoryTmpAllowedCategory_CategoryName</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>CategoryName</DataField>
												<DataSource>ProcCategoryTmpAllowedCategory</DataSource>
											</AxFormControl>
										</Controls>
										<DataSource>ProcCategoryTmpAllowedCategory</DataSource>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Auto</ArrangeMethod>
						<Columns>3</Columns>
					</AxFormControl>
				</Controls>
				<Caption>@SYS304922</Caption>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>DialogCommitContainer</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>SaveAccessPolicyRule</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Close</Name>
						<ElementPosition>2013265918</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>
