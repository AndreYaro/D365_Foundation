<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProjInvoiceCancel_BR</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ProjInvoiceCancel_BR extends FormRun
{
    RefRecId                              custInvoiceTableRecId;
    ReasonRefRecID                        reasonCode;
    QueryBuildRange                       criteriaInvoiceProjId;
    QueryBuildRange                       criteriaProjInvoiceId;
    ProjTransType                         parmProjTransType;
    SysAnyType                            parmSysAnyTypeTransId;
    ProjTransIdBase                       parmTransId;
    TmpFrmVirtual                         tmpFrmVirtual;
    ReasonTable                           reasonTable;
    ReasonCode                            reasoncomment;
    ProjInvoiceEmplDetail                 projInvoiceEmplDetailTmp;
    ProjInvoiceCostDetail                 projInvoiceCostDetailTmp;
    ProjInvoiceItemDetail                 projInvoiceItemDetailTmp;
    ProjInvoiceOnAccDetail                projInvoiceOnAccDetailTmp;
    ProjInvoiceRevenueDetail              projInvoiceRevenueDetailTmp;
    ProjInvoiceRevenueDetail              projInvoiceSubscriptionTmp;
    TmpProjTransId                        tmpProjTransIdEmpl;
    TmpProjTransId                        tmpProjTransIdCost;
    TmpProjTransId                        tmpProjTransIdItem;
    TmpProjTransId                        tmpProjTransIdOnAcc;
    TmpProjTransId                        tmpProjTransIdRevenue;
    TmpProjTransId                        tmpProjTransIdSubscription;

}
]]></Source>
			</Method>
			<Method>
				<Name>checkCancelDate</Name>
				<Source><![CDATA[
    public boolean checkCancelDate(ProjInvoiceJour _projInvoiceJour)
    {
        boolean ret = true;

        if (adjustInvoiceDate.dateValue() == dateNull())
        {
            ret = checkFailed("@GLS510001");
        }
        if (adjustInvoiceDate.dateValue() < _projInvoiceJour.InvoiceDate)
        {
            if (_projInvoiceJour.ProjInvoiceType == ProjInvoiceType::DebitNote_BR)
            {
                ret = checkFailed("@GLS510121");
            }
            else
            {
                ret = checkFailed("@SYS300083");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCancelReason</Name>
				<Source><![CDATA[
    public boolean checkCancelReason()
    {
        boolean ret = true;

        if (editReasonCode.valueStr() == '')
        {
            ret = checkFailed(strFmt("@SYS26332",editReasonCode.label()));
        }
        else if (editReasonComment.valueStr() == '')
        {
            ret = checkFailed(strFmt("@SYS26332",editReasonComment.label()));
        }
        else if (strLen(editReasonComment.text()) < 15)
        {
            ret = checkFailed("@SYS4002144");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDebitNoteCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays debit note lables.
    /// </summary>
    public void enableDebitNoteCancel()
    {
        if (element.args().menuItemName() == menuitemDisplayStr(ProjDebitNoteCancel_BR))
        {
            element.design().caption("");
            element.design().caption("@GLS510061");
            mainInctruction_CancelProjectInvoice.text("@GLS510123");
            adjustInvoiceDate.label("@GLS510120");
            OkButton.text("@GLS510123");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        #define.one("One")
        SysGlobalCache globalCache;

        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00092, funcName());

        globalCache   = classfactory.globalCache();
        globalCache.set(curUserId(), 1, #one);
        element.enableDebitNoteCancel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCost</Name>
				<Source><![CDATA[
    public void initFromCost(ProjInvoiceCostDetail _projInvoiceCostDetail)
    {
        projInvoiceCostDetailTmp.data(_projInvoiceCostDetail);
        tmpProjTransIdCost.initFromProjInvoiceCostDetail(_projInvoiceCostDetail);
        tmpProjTransIdCost.insert();

        tmpFrmVirtual.TableNum     = tmpProjTransIdCost.RefTableId;
        tmpFrmVirtual.RecordNo     = tmpProjTransIdCost.RefRecId;
        tmpFrmVirtual.RefRecId     = tmpProjTransIdCost.SaleRefRecId;
        tmpFrmVirtual.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEmpl</Name>
				<Source><![CDATA[
    public void initFromEmpl(ProjInvoiceEmplDetail _projInvoiceEmplDetail)
    {
        projInvoiceEmplDetailTmp.data(_projInvoiceEmplDetail);

        tmpProjTransIdEmpl.initFromProjInvoiceEmplDetail(_projInvoiceEmplDetail);
        tmpProjTransIdEmpl.insert();

        tmpFrmVirtual.TableNum     = tmpProjTransIdEmpl.RefTableId;
        tmpFrmVirtual.RecordNo     = tmpProjTransIdEmpl.RefRecId;
        tmpFrmVirtual.RefRecId     = tmpProjTransIdEmpl.SaleRefRecId;
        tmpFrmVirtual.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromItem</Name>
				<Source><![CDATA[
    public void initFromItem(ProjInvoiceItemDetail _projInvoiceItemDetail)
    {
        projInvoiceItemDetailTmp.data(_projInvoiceItemDetail);

        tmpProjTransIdItem.initFromProjInvoiceItemDetail(_projInvoiceItemDetail);
        tmpProjTransIdItem.insert();

        tmpFrmVirtual.TableNum     = tmpProjTransIdItem.RefTableId;
        tmpFrmVirtual.RecordNo     = tmpProjTransIdItem.RefRecId;
        tmpFrmVirtual.RefRecId     = tmpProjTransIdItem.SaleRefRecId;
        tmpFrmVirtual.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromOnAcc</Name>
				<Source><![CDATA[
    public void initFromOnAcc(ProjInvoiceOnAccDetail   _projInvoiceOnAccDetail)
    {
        projInvoiceOnAccDetailTmp.data(_projInvoiceOnAccDetail);

        tmpProjTransIdOnAcc.initFromProjInvoiceOnAccDetail(_projInvoiceOnAccDetail);
        tmpProjTransIdOnAcc.insert();

        tmpFrmVirtual.TableNum     = tmpProjTransIdOnAcc.RefTableId;
        tmpFrmVirtual.RecordNo     = tmpProjTransIdOnAcc.RefRecId;
        tmpFrmVirtual.RefRecId     = tmpProjTransIdOnAcc.SaleRefRecId;
        tmpFrmVirtual.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRevenue</Name>
				<Source><![CDATA[
    public void initFromRevenue(ProjInvoiceRevenueDetail _projInvoiceRevenueDetail)
    {
        projInvoiceRevenueDetailTmp.data(_projInvoiceRevenueDetail);
        tmpProjTransIdRevenue.initFromProjInvoiceRevenueDetail(_projInvoiceRevenueDetail);
        tmpProjTransIdRevenue.insert();
        tmpFrmVirtual.TableNum     =     tmpProjTransIdRevenue.RefTableId;
        tmpFrmVirtual.RecordNo     =     tmpProjTransIdRevenue.RefRecId;
        tmpFrmVirtual.RefRecId     =     tmpProjTransIdRevenue.SaleRefRecId;
        tmpFrmVirtual.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSubscription</Name>
				<Source><![CDATA[
    public void initFromSubscription(ProjInvoiceRevenueDetail _projInvoiceRevenueDetail)
    {
        projInvoiceSubscriptionTmp.data(_projInvoiceRevenueDetail);

        tmpProjTransIdSubscription.initFromProjInvoiceRevenueDetail(_projInvoiceRevenueDetail);
        tmpProjTransIdSubscription.insert();

        tmpFrmVirtual.TableNum     =    tmpProjTransIdSubscription.RefTableId;
        tmpFrmVirtual.RecordNo     =    tmpProjTransIdSubscription.RefRecId;
        tmpFrmVirtual.RefRecId     =    tmpProjTransIdSubscription.SaleRefRecId;
        tmpFrmVirtual.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoicePost</Name>
				<Source><![CDATA[
    public void projInvoicePost(Args _args,ProjProposalJour _projProposalJour)
    {
        MenuFunction        menuFunction;

        _args.record(_projProposalJour);
        menuFunction  = new MenuFunction(menuitemActionStr(ProjFormLetter_Invoice),MenuItemType::Action);
        menuFunction.run(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projProposalSelection</Name>
				<Source><![CDATA[
    public ProjProposalId projProposalSelection(
        ProjInvoiceJour _projInvoiceJour,
        ProjIdBase _projId,
        boolean _forempl,
        boolean _forcost,
        boolean _foritem,
        boolean _forRev,
        boolean _reversemarking,
        boolean _forSalesLine,
        boolean _forOnAcc = false,
        boolean _forSubscription = false)
    {
        const str IncludeSubProjects = "*";

        ProjInvoiceProposalCreateLinesParams   proposalCreateLinesParams;
        ProjInvoiceProposalCreateLines         proposalCreateLines;
        List                                   proposalIdList = new List(Types::String);
        ListEnumerator                         li;
        ProjProposalId                         projProposalId;
        ProjInvoiceProposalInsertLines         projInvoiceProposalInsertLines;

        proposalCreateLinesParams = ProjInvoiceProposalCreateLinesParams::construct();
        proposalCreateLinesParams.parmEndDate(dateNull());
        proposalCreateLinesParams.parmInvoiceDate(dateNull());
        proposalCreateLinesParams.parmInvoiceTypeSelection(ProjInvoiceTypeSelection::Both);
        proposalCreateLinesParams.parmIsQueryCostTrans(_forcost);
        proposalCreateLinesParams.parmIsQueryEmplTrans(_forempl);
        proposalCreateLinesParams.parmIsQueryItemTrans(_foritem);
        proposalCreateLinesParams.parmIsQueryOnAccTrans(_forOnAcc);
        proposalCreateLinesParams.parmIsQueryRevenueTrans(_forRev);
        proposalCreateLinesParams.parmIsQuerySalesLine(_forSalesLine);
        proposalCreateLinesParams.parmIsQuerySubscriptionTrans(_forSubscription);
        proposalCreateLinesParams.parmFundingSource('');

        if (ProjBrazilPartialSalesOrderQuantityInvoiceCancellationFlight::instance().isEnabled())
        {
            proposalCreateLinesParams.parmSalesUpdate(SalesUpdate::DeliverNow);
        }
        else
        {
            proposalCreateLinesParams.parmSalesUpdate(SalesUpdate::All);
        }

        proposalCreateLinesParams.parmServiceOrderTable(null);
        proposalCreateLinesParams.parmStartDate(dateNull());
        proposalCreateLinesParams.parmReverseMarking_BR(_reversemarking);
        proposalCreateLinesParams.parmProjInvoiceProjId(_projInvoiceJour.ProjInvoiceProjId);
        proposalCreateLinesParams.parmProjId(ProjTable::getRootProjId(_projId) + IncludeSubProjects);
        proposalCreateLinesParams.parmIsDebitNote(_projInvoiceJour.ProjInvoiceType == ProjInvoiceType::DebitNote_BR);
        proposalCreateLinesParams.parmInvoiceToBeCanceledId_BR(_projInvoiceJour.RecId);

        proposalCreateLines       = ProjInvoiceProposalCreateLines::newStandard(proposalCreateLinesParams.pack());
        proposalCreateLines.run();

        projInvoiceProposalInsertLines = new ProjInvoiceProposalInsertLines(proposalCreateLines, false);

        if (_projInvoiceJour.ProjInvoiceType == ProjInvoiceType::DebitNote_BR)
        {
            projInvoiceProposalInsertLines.parmInvoiceType(ProjInvoiceType::DebitNote_BR);
        }

        projInvoiceProposalInsertLines.runOperation();
        proposalIdList = projInvoiceProposalInsertLines.getProposalIdList();
        if (proposalIdList)
        {
            li = proposalIdList.getEnumerator();
            while (li.moveNext())
            {
                projProposalId = li.current();
            }
        }
        return projProposalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projProposalSelectionV2</Name>
				<Source><![CDATA[
    public ProjProposalId projProposalSelectionV2(
        ProjInvoiceJour _projInvoiceJour,
        container _containerProjIds,
        boolean _forempl,
        boolean _forcost,
        boolean _foritem,
        boolean _forRev,
        boolean _reversemarking,
        boolean _forSalesLine,
        boolean _forOnAcc = false,
        boolean _forSubscription = false)
    {
        ProjInvoiceProposalCreateLinesParams proposalCreateLinesParams = ProjInvoiceProposalCreateLinesParams::construct();
        proposalCreateLinesParams.parmEndDate(dateNull());
        proposalCreateLinesParams.parmInvoiceDate(dateNull());
        proposalCreateLinesParams.parmInvoiceTypeSelection(ProjInvoiceTypeSelection::Both);
        proposalCreateLinesParams.parmIsQueryCostTrans(_forcost);
        proposalCreateLinesParams.parmIsQueryEmplTrans(_forempl);
        proposalCreateLinesParams.parmIsQueryItemTrans(_foritem);
        proposalCreateLinesParams.parmIsQueryOnAccTrans(_forOnAcc);
        proposalCreateLinesParams.parmIsQueryRevenueTrans(_forRev);
        proposalCreateLinesParams.parmIsQuerySalesLine(_forSalesLine);
        proposalCreateLinesParams.parmIsQuerySubscriptionTrans(_forSubscription);
        proposalCreateLinesParams.parmFundingSource('');

        if (ProjBrazilPartialSalesOrderQuantityInvoiceCancellationFlight::instance().isEnabled())
        {
            proposalCreateLinesParams.parmSalesUpdate(SalesUpdate::DeliverNow);
        }
        else
        {
            proposalCreateLinesParams.parmSalesUpdate(SalesUpdate::All);
        }

        proposalCreateLinesParams.parmServiceOrderTable(null);
        proposalCreateLinesParams.parmStartDate(dateNull());
        proposalCreateLinesParams.parmReverseMarking_BR(_reversemarking);
        proposalCreateLinesParams.parmProjInvoiceProjId(_projInvoiceJour.ProjInvoiceProjId);
        proposalCreateLinesParams.parmIsDebitNote(_projInvoiceJour.ProjInvoiceType == ProjInvoiceType::DebitNote_BR);
        proposalCreateLinesParams.parmInvoiceToBeCanceledId_BR(_projInvoiceJour.RecId);
        
        if (conLen(_containerProjIds) == 1)
        {
            proposalCreateLinesParams.parmProjId(conPeek(_containerProjIds, 1));
        }
        else
        {
            proposalCreateLinesParams.parmContainerProjIds(_containerProjIds);
        }

        ProjInvoiceProposalCreateLines proposalCreateLines = ProjInvoiceProposalCreateLines::newStandard(proposalCreateLinesParams.pack());
        proposalCreateLines.run();

        ProjInvoiceProposalInsertLines projInvoiceProposalInsertLines = new ProjInvoiceProposalInsertLines(proposalCreateLines, false);

        if (_projInvoiceJour.ProjInvoiceType == ProjInvoiceType::DebitNote_BR)
        {
            projInvoiceProposalInsertLines.parmInvoiceType(ProjInvoiceType::DebitNote_BR);
        }

        projInvoiceProposalInsertLines.runOperation();

        List proposalIdList = new List(Types::String);
        ProjProposalId projProposalId;

        proposalIdList = projInvoiceProposalInsertLines.getProposalIdList();
        
        if (proposalIdList)
        {
            ListEnumerator li = proposalIdList.getEnumerator();
            while (li.moveNext())
            {
                projProposalId = li.current();
            }
        }
        return projProposalId;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>ProjInvoiceJour</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            element.enableDebitNoteCancel();

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        void linkActive()
        {
            #define.star("*")

            ProjTable           projTable;
            ProjCostTrans       projCostTrans;
            ProjInvoiceControl  projInvoiceControl;
            ProjId              projId;

            switch (element.args().dataset())
            {
                case(tableNum(ProjTable)):
                    projTable = element.args().record();
                    projId = queryValue(projTable.ProjId);
                    projId += #star;

                    break;

                // Project transactions - Cost
                case(tableNum(ProjCostTrans)):
                    criteriaProjInvoiceId.value(SysQuery::valueEmptyString());

                    projCostTrans = element.args().record();
                    if (projCostTrans.invoiceId())
                    {
                        criteriaProjInvoiceId.value(queryValue(projCostTrans.invoiceId()));
                    }
                    break;

                case(tableNum(TmpProjInvoiceControl)):
                    if (projInvoiceControl)
                    {
                        element.close();
                    }
                    projInvoiceControl  = element.args().parmObject();
                    if (projInvoiceControl.parmProjId())
                    {
                        criteriaInvoiceProjId.value(ProjTable::find(projInvoiceControl.parmProjId()).ProjInvoiceProjId);
                    }
                    else
                    {
                        criteriaInvoiceProjId.value(projInvoiceControl.parmProjInvoiceProjId());
                    }
                    break;
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>editReasonCode</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            ReasonTable::jumpRef(ReasonCodeAccountTypeAll::AllValues);
        }

]]></Source>
					</Method>
					<Method>
						<Name>leave</Name>
						<Source><![CDATA[
        public boolean leave()
        {
            boolean ret = super();

            reasoncomment   = editReasonCode.valueStr();
            select firstonly Reason from reasonTable where reasonTable.Reason == reasoncomment;
            if (reasonTable.Reason != reasoncomment)
            {
                projInvoiceJour.editReasonCode(true,'');
                info(strFmt("@GLS510004", reasoncomment));
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            ReasonFormTable::reasonCodeLookup(
                                        this,
                                        LedgerJournalACType::Cust,
                                        LedgerJournalACType::Cust,
                                        true,
                                        false);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>adjustInvoiceDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isEnabled;

            ContainerClass                  conClass_Obj;
            container                       conRec;
            Args                            args;
            ProjInvoiceJour                 projInvoiceJourLocal;
            isEnabled = super();

            args                 =  new Args();
            conClass_Obj         =  element.args().parmObject();
            conRec               =  conClass_Obj.value();
            projInvoiceJourLocal =  conPeek(conRec,1);

            if (adjustInvoiceDate.dateValue() <  projInvoiceJourLocal.InvoiceDate)
            {
                throw error("@GLS510007");
            }
            return isEnabled;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OkButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            ContainerClass                                conClass_Obj;
            container                                     conRec;
            Args                                          args;
            ProjInvoiceJour                               projInvoiceJourLocal;
            Set                                           set;
            Set                                           transSet;
            SetEnumerator                                 se;
            Common                                        trans;
            ProjInvoiceRevenueDetail                      projInvoiceRevenueDetailInit;
            ProjInvoiceEmpl                               projInvoiceEmpl;
            ProjInvoiceCost                               projInvoiceCost;
            ProjInvoiceItem                               projInvoiceItem;
            SalesLine                                     salesLine;
            SalesTable                                    salesTable;
            SalesTable_BR                                 salesTable_BR;
            ProjTable                                     ProjTable;
            ProjInvoiceOnAcc                              projInvoiceOnAcc;
            ProjInvoiceRevenue                            projInvoiceRevenue;
            ProjProposalJour                              projProposalJour,projProposalJourlocal,projProposalJourlocal1;
            FiscalCalendarPeriod                          fiscalCalendarPeriod;
            LedgerFiscalCalendarPeriod                    ledgerFiscalCalendarPeriod;
            date                                          cancelInvoiceDate;
            ProjProposalId                                projProposalId;
            boolean                                       forempl,forcost,forItem,forRev,forSales,forOnAcc,forSubscription;
            boolean                                       reversemarking;
            ProjReverseMarking                            projReverseMarking;
            List                                          list;

            super();

            args                 =      new Args();
            conClass_Obj         =      element.args().parmObject();
            conRec               =      conClass_Obj.value();
            projInvoiceJourLocal =      conPeek(conRec,1);
            cancelInvoiceDate    =      adjustInvoiceDate.dateValue();

            if (!element.checkCancelReason() || !element.checkCancelDate(projInvoiceJourLocal))
            {
                return;
            }

            ttsBegin;

            if (adjustInvoiceDate.dateValue() == dateNull())
            {
                throw error("@GLS510001");
            }
            if (cancelInvoiceDate < projInvoiceJourLocal.InvoiceDate)
            {
                if (projInvoiceJourLocal.ProjInvoiceType == ProjInvoiceType::DebitNote_BR)
                {
                    throw  error("@GLS510121");
                }
                else
                {
                    throw  error("@SYS300083");
                }
            }
            select StartDate,EndDate,RecId from fiscalCalendarPeriod
                join FiscalCalendarPeriod,Status from ledgerFiscalCalendarPeriod
                    where fiscalCalendarPeriod.StartDate <= cancelInvoiceDate  &&
                          fiscalCalendarPeriod.EndDate >= cancelInvoiceDate &&
                           ledgerFiscalCalendarPeriod.FiscalCalendarPeriod== fiscalCalendarPeriod.RecId;

            if (ledgerFiscalCalendarPeriod.Status==FiscalPeriodStatus::Closed ||
               ledgerFiscalCalendarPeriod.Status==FiscalPeriodStatus::OnHold)
            {
                if (projInvoiceJourLocal.ProjInvoiceType == ProjInvoiceType::DebitNote_BR)
                {
                    throw  error("@GLS510122");
                }
                else
                {
                    throw error("@GLS510002");
                }
            }
            set = new Set(Types::Record);

            set.add(projInvoiceJourLocal);

            transSet = Set::create(ProjReverseMarking::getTransFromJournals(set.pack()));

            se = transSet.getEnumerator();

            ProjIdBase projId;
            container containerProjIds;
            boolean cancelMultiProjects_BR_FlightEnabled = ProjInvoiceCancelMultiProjects_BR_Flight::instance().isEnabled();

            if (se)
            {
                while (se.moveNext())
                {
                    trans = se.current();

                    switch (trans.TableId)
                    {
                        case tableNum(ProjInvoiceEmplDetail):
                            element.initFromEmpl(trans);

                            if (cancelMultiProjects_BR_FlightEnabled)
                            {
                                ProjInvoiceEmplDetail projInvoiceEmplDetail = trans;
                                select firstonly ProjId from projInvoiceEmpl
                                    where projInvoiceEmpl.RecId == projInvoiceEmplDetail.InvoiceRefRecId;

                                if (projInvoiceEmpl.ProjId && !conFind(containerProjIds, projInvoiceEmpl.ProjId))
                                {
                                    containerProjIds = conIns(containerProjIds, 1, projInvoiceEmpl.ProjId);
                                }
                            }
                            else
                            {
                                select firstonly ProjId from projInvoiceEmpl
                                    where projInvoiceEmpl.ProjInvoiceId == projInvoiceJourLocal.ProjInvoiceId
                                        && projInvoiceEmpl.InvoiceDate == projInvoiceJourLocal.InvoiceDate;
                                
                                projId = projInvoiceEmpl.ProjId;
                            }

                            forempl = true;
                            break;

                        case tableNum(ProjInvoiceCostDetail):
                            element.initFromCost(trans);

                            if (cancelMultiProjects_BR_FlightEnabled)
                            {
                                ProjInvoiceCostDetail projInvoiceCostDetail = trans;
                                select firstonly ProjId from projInvoiceCost
                                    where projInvoiceCost.RecId == projInvoiceCostDetail.InvoiceRefRecId;

                                if (projInvoiceCost.ProjId && !conFind(containerProjIds, projInvoiceCost.ProjId))
                                {
                                    containerProjIds = conIns(containerProjIds, 1, projInvoiceCost.ProjId);
                                }
                            }
                            else
                            {
                                select firstonly ProjId from projInvoiceCost
                                    where projInvoiceCost.ProjInvoiceId == projInvoiceJourLocal.ProjInvoiceId
                                        && projInvoiceCost.InvoiceDate == projInvoiceJourLocal.InvoiceDate;
                                
                                projId = projInvoiceCost.ProjId;
                            }

                            forcost = true;
                            break;

                        case tableNum(ProjInvoiceItemDetail):
                            element.initFromItem(trans);

                            if (cancelMultiProjects_BR_FlightEnabled)
                            {
                                ProjInvoiceItemDetail projInvoiceItemDetail = trans;
                                select firstonly ProjId from projInvoiceItem
                                    where projInvoiceItem.RecId == projInvoiceItemDetail.InvoiceRefRecId;

                                if (projInvoiceItem.ProjId && !conFind(containerProjIds, projInvoiceItem.ProjId))
                                {
                                    containerProjIds = conIns(containerProjIds, 1, projInvoiceItem.ProjId);
                                }
                            }
                            else
                            {
                                select firstonly ProjId from projInvoiceItem
                                    where projInvoiceItem.ProjInvoiceId == projInvoiceJourLocal.ProjInvoiceId
                                        && projInvoiceItem.InvoiceDate == projInvoiceJourLocal.InvoiceDate;

                                projId = projInvoiceItem.ProjId;
                            }

                            forItem = true;
                            break;

                        case tableNum(ProjInvoiceOnAccDetail):
                            element.initFromOnAcc(trans);

                            if (cancelMultiProjects_BR_FlightEnabled)
                            {
                                ProjInvoiceOnAccDetail projInvoiceOnAccDetail = trans;
                                select firstonly ProjId from projInvoiceOnAcc
                                    where projInvoiceOnAcc.RecId == projInvoiceOnAccDetail.InvoiceRefRecId;
                            
                                if (projInvoiceOnAcc.ProjId && !conFind(containerProjIds, projInvoiceOnAcc.ProjId))
                                {
                                    containerProjIds = conIns(containerProjIds, conLen(containerProjIds) + 1, projInvoiceOnAcc.ProjId);
                                }
                            }
                            else
                            {
                                select firstonly ProjId from projInvoiceOnAcc
                                    where projInvoiceOnAcc.ProjInvoiceId == projInvoiceJourLocal.ProjInvoiceId
                                        && projInvoiceOnAcc.InvoiceDate == projInvoiceJourLocal.InvoiceDate;
                                
                                projId = projInvoiceOnAcc.ProjId;
                            }

                            forOnAcc = true;
                            break;

                        case tableNum(ProjInvoiceRevenueDetail):
                            projInvoiceRevenueDetailInit = trans;

                            if (projInvoiceRevenueDetailInit.projInvoiceRevenue().smaSubscriptionId)
                            {
                                element.initFromSubscription(projInvoiceRevenueDetailInit);
                            }
                            else
                            {
                                element.initFromRevenue(projInvoiceRevenueDetailInit);
                            }

                            if (cancelMultiProjects_BR_FlightEnabled)
                            {
                                select firstonly ProjId from projInvoiceRevenue
                                    where projInvoiceRevenue.RecId == projInvoiceRevenueDetailInit.InvoiceRefRecId;

                                if (projInvoiceRevenue.ProjId && !conFind(containerProjIds, projInvoiceRevenue.ProjId))
                                {
                                    containerProjIds = conIns(containerProjIds, conLen(containerProjIds) + 1, projInvoiceRevenue.ProjId);
                                }
                            }
                            else
                            {
                                select firstonly ProjId from projInvoiceRevenue
                                    where projInvoiceRevenue.ProjInvoiceId == projInvoiceJourLocal.ProjInvoiceId
                                        && projInvoiceRevenue.InvoiceDate == projInvoiceJourLocal.InvoiceDate;

                                projId = projInvoiceRevenue.ProjId;
                            }

                            forRev = true;
                            forSubscription = true;
                            break;
                    }
                    list = new List(Types::Record);
                    while select tmpFrmVirtual
                    {
                        list.addEnd(tmpFrmVirtual);
                    }
                }
            }

            if (list)
            {
                projReverseMarking = new ProjReverseMarking(list.pack());
                projReverseMarking.run();

                reversemarking = true;
            }

            // <GBR>
            select RecId from salesLine
                where salesLine.SalesQty < 0
                    && salesLine.SalesStatus == SalesStatus::Backorder
                exists join salesTable
                    where salesTable.SalesId == salesLine.SalesId
                        // Select only orders that was marked to cancel
                        exists join salesTable_BR
                            where salesTable_BR.SalesTable == salesTable.RecId
                                && salesTable_BR.InvoiceRefRecID_BR == projInvoiceJourLocal.RecId
                exists join ProjTable
                    where ProjTable.ProjId == salesLine.ProjId
                        && ProjTable.ProjInvoiceProjId == projInvoiceJourLocal.ProjInvoiceProjId;
            if (salesLine)
            {
                forSales = true;
            }
            // </GBR>

            if (cancelMultiProjects_BR_FlightEnabled && conLen(containerProjIds) >= 1)
            {
                projProposalId = element.projProposalSelectionV2(projInvoiceJourLocal, containerProjIds, forempl, forcost, forItem, forRev, reversemarking, forSales, forOnAcc, forSubscription);
            }
            else
            {
                projProposalId = element.projProposalSelection(projInvoiceJourLocal, projId, forempl, forcost, forItem, forRev, reversemarking, forSales, forOnAcc, forSubscription);
            }

            Debug::assert(projproposalId != '');

            select firstOnly * from ProjProposalJour
                where  ProjProposalJour.ProposalId == projproposalId;

            select firstonly * from projProposalJourlocal
                                    where   projProposalJourlocal.ProjInvoiceId == projInvoiceJourLocal.ProjInvoiceId &&
                                            projProposalJourlocal.InvoiceDate == projInvoiceJourLocal.InvoiceDate;

            tmpInvoiceCancel.RefProposalId      = projProposalJourlocal.ProposalId;
            tmpInvoiceCancel.ProposalId         = projProposalId;
            tmpInvoiceCancel.insert();

            ttsCommit;

            if ((ProjParameters::find().EnableInvoiceProposalWorkflow == NoYes::Yes))
            {
                projProposalJour.editReasonCode(true,reasoncomment);
                ttsbegin;
                projProposalJour.selectForUpdate(true);
                if (projProposalJour)
                {
                    projProposalJour.update();
                }
                ttscommit;
            }
            else
            {
                element.projInvoicePost(args,projProposalJour);
                select ProposalId,LineProperty from projProposalJourlocal1
                    where projProposalJourlocal1.ProposalId == projProposalJour.ProposalId;

                if (projProposalJourlocal1.LineProperty == ProjLinePropertyCode::Open)
                {
                    select firstonly * from projProposalJourlocal
                        where   projProposalJourlocal.ProjInvoiceId == projInvoiceJourLocal.ProjInvoiceId &&
                                projProposalJourlocal.InvoiceDate == projInvoiceJourLocal.InvoiceDate;

                    if (projProposalJour.ProposalId)
                    {
                        tmpInvoiceCancel.RefProposalId      =   projProposalJourlocal.ProposalId;
                        tmpInvoiceCancel.ProposalId         =   projProposalJour.ProposalId;
                        tmpInvoiceCancel.update();
                    }
                }
                if (projProposalJourlocal1.LineProperty == ProjLinePropertyCode::Invoiced ||
                   projProposalJourlocal1.LineProperty == ProjLinePropertyCode::DebitNote_BR)
                {
                    select firstonly * from projProposalJourlocal
                        where  projProposalJourlocal.ProjInvoiceId    == projInvoiceJourLocal.ProjInvoiceId &&
                               projProposalJourlocal.InvoiceDate      == projInvoiceJourLocal.InvoiceDate;

                    projProposalJourlocal.editReasonCode(true,reasoncomment);

                    ttsbegin;

                    projProposalJourlocal.selectForUpdate(true);

                    if (projProposalJourlocal)
                    {
                        projProposalJourlocal.update();
                    }

                    ttscommit;
                }
            }
            if (ProjParameters::find().EnableInvoiceProposalWorkflow == NoYes::Yes)
            {
                select firstonly * from projProposalJourlocal
                    where   projProposalJourlocal.ProjInvoiceId == projInvoiceJourLocal.ProjInvoiceId &&
                            projProposalJourlocal.InvoiceDate == projInvoiceJourLocal.InvoiceDate;

                if (projProposalJour.ProposalId)
                {
                    tmpInvoiceCancel.RefProposalId      =   projProposalJourlocal.ProposalId;
                    tmpInvoiceCancel.ProposalId         =   projProposalJour.ProposalId;
                    tmpInvoiceCancel.update();
                }
            }
            element.close();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>ProjInvoiceJour</Name>
			<Table>ProjInvoiceJour</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CashDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscPercent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeliveryName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DirectDebitMandate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DlvMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DlvTerm</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentDate_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DueDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EInvoiceAccountCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EInvoiceLineSpecific</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EnterpriseNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EUSalesList</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchrateSecondary</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GiroType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyPosted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntrastatAddValue_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntrastatDispatchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceNumberingCode_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceRegister_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceRoundOff</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceStatus_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LanguageId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ListCodeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Narration_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumberSequenceGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OnAccountAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrderAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParmId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymDayId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Payment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentSched</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Port</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingJournalId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingProfile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrintedOriginals</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjInvoiceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjInvoiceType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProposalId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAEndDateMaxInvoiceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAInvoiceFormats</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>qty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonTableRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesDate_CZ</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesOrderbalance</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMASpecIndexCalc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentHeader</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SumLineDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SumMarkup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SumTax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxInformation_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxPrintOnInvoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxSpecifyByLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxSpecifyTotal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransportationDocument</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Triangulation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Volume</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VoucherNumberSequenceTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Weight</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WhoIsAuthor_LT</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TmpInvoiceCancel</Name>
			<Table>TmpInvoiceCancel_BR</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProposalId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefProposalId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@gls510015</Caption>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>MainInctruction_CancelProjectInvoice</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>715827882</ElementPosition>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<FilterExpression>%1</FilterExpression>
				<Type>StaticText</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Text>@gls510005</Text>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>editReasonCode</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>editReasonCode</DataMethod>
						<DataSource>ProjInvoiceJour</DataSource>
						<Label>@SYS300079</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>editReasonComment</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>editReasonComment</DataMethod>
						<DataSource>ProjInvoiceJour</DataSource>
						<Label>@SYS71295</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>adjustInvoiceDate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1789569705</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Date</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>TransDate</ExtendedDataType>
						<Label>@SYS300077</Label>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OkButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<Text>@GLS510005</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Cancel</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>