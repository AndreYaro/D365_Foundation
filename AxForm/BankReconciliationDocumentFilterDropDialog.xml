<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BankReconciliationDocumentFilterDropDialog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BankReconciliationDocumentFilterDropDialog extends FormRun
{
    private date dateFrom;
    private date dateTo;
    private AmountCurDebit debitAmountFrom;
    private AmountCurDebit debitAmountTo;
    private AmountCurCredit creditAmountFrom;
    private AmountCurCredit creditAmountTo;
    private container transTypes;
    private container transTypeIds;
    private BankDocumentBookType documentType;
    private str partyName;
    private str paymentReference;

    private FormRun bankReconWorksheetFormRun;
    private SysLookupMultiSelectCtrl multiSelectTransTypeControl;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        dateFrom,
        dateTo,
        debitAmountFrom,
        debitAmountTo,
        creditAmountFrom,
        creditAmountTo,
        transTypes,
        transTypeIds,
        documentType,
        partyName,
        paymentReference
    #endmacro

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        if (!element.args() || !element.args().caller())
        {
            throw error("@SYS22539");
        }

        bankReconWorksheetFormRun = element.args().caller() as FormRun;
        this.initFiltersFromCache();
        this.initMultiSelectTransTypeControl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
     public dataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    public identifierName lastValueDesignName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    public identifierName lastValueElementName()
    {
        return this.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    public UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    public userId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conpeek(packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFiltersFromCache</Name>
				<Source><![CDATA[
    private void initFiltersFromCache()
    {
        xSysLastValue::getLast(this);

        DocumentOpenDateFromFilter.dateValue(dateFrom);
        DocumentOpenDateToFilter.dateValue(dateTo);
        DocumentOpenDebitAmountFromFilter.realValue(debitAmountFrom);
        DocumentOpenDebitAmountToFilter.realValue(debitAmountTo);
        DocumentOpenCreditAmountFromFilter.realValue(creditAmountFrom);
        DocumentOpenCreditAmountToFilter.realValue(creditAmountTo);
        DocumentOpenDocumentTypeFilter.selection(documentType);
        DocumentOpenPartyNameFilter.text(partyName);
        DocumentOpenPaymentReferenceFilter.text(paymentReference);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMultiSelectTransTypeControl</Name>
				<Source><![CDATA[
    private void initMultiSelectTransTypeControl()
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(BankTransType));
        qbds.addSelectionField(fieldNum(BankTransType, BankTransType));
        qbds.addSelectionField(fieldNum(BankTransType, Name));

        multiSelectTransTypeControl = SysLookupMultiSelectCtrl::constructWithQuery(element, DocumentOpenTransTypeFilter, query);
        multiSelectTransTypeControl.set([transTypeIds, transTypes]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearSelections</Name>
				<Source><![CDATA[
    private void clearSelections()
    {
        transTypes = conNull();
        transTypeIds = conNull();
        multiSelectTransTypeControl.set([transTypeIds, transTypes]);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>DocumentOpenDateFromFilter</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            if (ret)
            {
                BankReconciliationWorksheetFilterHelper::validateDateRange(this.dateValue(), DocumentOpenDateToFilter.dateValue());
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DocumentOpenDateToFilter</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            if (ret)
            {
                BankReconciliationWorksheetFilterHelper::validateDateRange(DocumentOpenDateFromFilter.dateValue(), this.dateValue());
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DocumentOpenDebitAmountFromFilter</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            if (ret)
            {
                BankReconciliationWorksheetFilterHelper::validateAmountPositive(this.realValue());
                BankReconciliationWorksheetFilterHelper::validateAmountRange(this.realValue(), DocumentOpenDebitAmountToFilter.realValue());
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DocumentOpenDebitAmountToFilter</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            if (ret)
            {
                BankReconciliationWorksheetFilterHelper::validateAmountPositive(this.realValue());
                BankReconciliationWorksheetFilterHelper::validateAmountRange(DocumentOpenDebitAmountFromFilter.realValue(), this.realValue());
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DocumentOpenCreditAmountFromFilter</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            if (ret)
            {
                BankReconciliationWorksheetFilterHelper::validateAmountPositive(this.realValue());
                BankReconciliationWorksheetFilterHelper::validateAmountRange(this.realValue(), DocumentOpenCreditAmountToFilter.realValue());
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DocumentOpenCreditAmountToFilter</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            if (ret)
            {
                BankReconciliationWorksheetFilterHelper::validateAmountPositive(this.realValue());
                BankReconciliationWorksheetFilterHelper::validateAmountRange(DocumentOpenCreditAmountFromFilter.realValue(), this.realValue());
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ResetButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            DocumentOpenDateFromFilter.dateValue(dateNull());
            DocumentOpenDateToFilter.dateValue(dateNull());
            DocumentOpenDebitAmountFromFilter.realValue(0);
            DocumentOpenDebitAmountToFilter.realValue(0);
            DocumentOpenCreditAmountFromFilter.realValue(0);
            DocumentOpenCreditAmountToFilter.realValue(0);
            DocumentOpenTransTypeFilter.text(null);
            DocumentOpenDocumentTypeFilter.selection(0);
            DocumentOpenPartyNameFilter.text(null);
            DocumentOpenPaymentReferenceFilter.text(null);

            element.clearSelections();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ApplyButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            
            dateFrom = DocumentOpenDateFromFilter.dateValue();
            dateTo = DocumentOpenDateToFilter.dateValue();
            debitAmountFrom = DocumentOpenDebitAmountFromFilter.realValue();
            debitAmountTo = DocumentOpenDebitAmountToFilter.realValue();
            creditAmountFrom = DocumentOpenCreditAmountFromFilter.realValue();
            creditAmountTo = DocumentOpenCreditAmountToFilter.realValue();
            transTypeIds = multiSelectTransTypeControl.get();
            transTypes = element.multiSelectTransTypeControl.getSelectedFieldValues();
            documentType = DocumentOpenDocumentTypeFilter.selection();
            partyName = DocumentOpenPartyNameFilter.text();
            paymentReference = DocumentOpenPaymentReferenceFilter.text();

            xSysLastValue::saveLast(element);

            str summary = BankReconciliationWorksheetFilterHelper::generateDocumentFilterSummaryInfo(
                dateFrom,
                dateTo,
                debitAmountFrom,
                debitAmountTo,
                creditAmountFrom,
                creditAmountTo,
                con2Str(transTypes),
                documentType,
                partyName,
                paymentReference);

            if (formHasMethod(bankReconWorksheetFormRun, identifierStr(applyDocumentOpenFilters)))
            {
                bankReconWorksheetFormRun.applyDocumentOpenFilters(
                    dateFrom,
                    dateTo,
                    debitAmountFrom,
                    debitAmountTo,
                    creditAmountFrom,
                    creditAmountTo,
                    transTypes,
                    documentType,
                    partyName,
                    paymentReference,
                    summary);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<ArrangeMethod xmlns="">Auto</ArrangeMethod>
		<Caption xmlns="">@SYS190436</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<Style xmlns="">DropDialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DocumentOpenFilterGroup</Name>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>StatementOpenBookingDateFilterGroup</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>DocumentOpenDateFromFilter</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Date</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@CashManagement:BankReconWorksheetFilterDocumentDateFromLabel</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>DocumentOpenDateToFilter</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Date</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS53942</Label>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>StatementOpenDebitAmountFilterGroup</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>DocumentOpenDebitAmountFromFilter</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@CashManagement:BankReconWorksheetFilterDebitAmountFromLabel</Label>
								<ShowZero>No</ShowZero>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>DocumentOpenDebitAmountToFilter</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS53942</Label>
								<ShowZero>No</ShowZero>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>StatementOpenCreditAmountFilterGroup</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>DocumentOpenCreditAmountFromFilter</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@CashManagement:BankReconWorksheetFilterCreditAmountFromLabel</Label>
								<ShowZero>No</ShowZero>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>DocumentOpenCreditAmountToFilter</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS53942</Label>
								<ShowZero>No</ShowZero>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocumentOpenTransTypeFilter</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS71565</Label>
						<LookupOnly>Yes</LookupOnly>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>DocumentOpenDocumentTypeFilter</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<EnumType>BankDocumentBookType</EnumType>
						<HideFirstEntry>Yes</HideFirstEntry>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocumentOpenPartyNameFilter</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@GLS221727</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocumentOpenPaymentReferenceFilter</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS22514</Label>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>StatementOpenButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>ResetButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Text>@SYS3073</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>ApplyButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<Text>@SYS24973</Text>
					</AxFormControl>
				</Controls>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>