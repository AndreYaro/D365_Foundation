<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProjInvoiceProposalCreateLines</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ProjInvoiceProposalCreateLines extends FormRun implements ProjInvoiceITransSelectionParams
{
    SMAServiceOrderTable        serviceOrderTable;

    ProjProposalJour            projProposalJour;

    RecId                       projFundingSourceRecIdLocked;
    ProjInvoiceProjId           projInvoiceProjIdLocked;

    ProjTmpInvoiceFundingSource invoiceFundingSource;

    ProjInvoiceProposalCreateLines
                                proposalCreateLines;

    boolean                     isAddLines;

    //totals
    Amount                      invoiceAmount;
    Amount                      deductionAmount;
    Amount                      netAmount;

    //Transaction filters
    TransDate                   endDate;
    boolean                     isQueryCostTrans;
    boolean                     isQueryEmplTrans;
    boolean                     isQueryItemTrans;
    boolean                     isQueryOnAccTrans;
    boolean                     isQueryRevenueTrans;
    boolean                     isQuerySalesLine;
    boolean                     isQuerySubscriptionTrans;
    boolean                     cdsLockingOptionCreateInvoiceProposals;
    SalesUpdate                 salesUpdate;
    TransDate                   startDate;

    ProjInvoiceProposalCreateLinesParams
                                proposalParams;

    TransDate                   userTimeZoneDate;
    ProjDimensionValuesControl  projDimensionValuesControl;
    DimensionHierarchy          dimHier;

    private boolean skipRecalculateProposalTotals;

    protected boolean delaySearchOption; // Used to indicate user preference on suppressing initial search
    protected boolean searchNow; // Flag allowing to suppress the function of the delay search option. This is used in search button press where searching must happen regardless of that setting.

    private boolean enableProjMultipleContractLinesForProjectFeature = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

    protected boolean enableInvoiceProposalCreationgPerfEnhanced = FeatureStateProvider::IsFeatureEnabled(ProjInvoiceProposalPerformanceEnhancementFeature::instance());

    #define.CurrentVersion(2)
    #localMacro.CurrentList
    endDate,
    isQueryCostTrans,
    isQueryEmplTrans,
    isQueryItemTrans,
    isQueryOnAccTrans,
    isQueryRevenueTrans,
    isQuerySalesLine,
    isQuerySubscriptionTrans,
    salesUpdate,
    startDate,
    delaySearchOption
    #endMacro

}
]]></Source>
			</Method>
			<Method>
				<Name>isProjInvoiceProposalSearchFundingSourceFunctionalityEnabled</Name>
				<Source><![CDATA[
    private boolean isProjInvoiceProposalSearchFundingSourceFunctionalityEnabled()
    {
        ProjParameters projParameters = ProjParameters::find();

        return projParameters.SelectProjectInvoiceProposalByFundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransTypeSelectionControl</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Update transaction type Value.
    /// </summary>
    protected void updateTransTypeSelectionControl()
    {
        str controlText;

        container transTypes = this.getSelectedTransTypeNames();
        int numOfSelectedTypes = conLen(transTypes);

        if (numOfSelectedTypes == 1)
        {
            controlText = conPeek(transTypes, 1);
        }
        else
        {
            controlText = strFmt("@Proj:NumOfTransTypesSelected", int2Str(numOfSelectedTypes));
        }
        TransTypeSelectionCtrl.text(controlText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedTransTypeNames</Name>
				<Source><![CDATA[
    public container getSelectedTransTypeNames()
    {
        container transTypeNames;
        var transTypeEnum = new sysdictenum(enumnum(ProjInvoiceProposalTransSelectionTypes));

        if (isQueryCostTrans)
        {
            transTypeNames += transTypeEnum.value2Label(enum2int(ProjInvoiceProposalTransSelectionTypes::Cost));
        }
        if (isQueryEmplTrans)
        {
            transTypeNames += transTypeEnum.value2Label(enum2int(ProjInvoiceProposalTransSelectionTypes::Hour));
        }
        if (isQueryItemTrans)
        {
            transTypeNames += transTypeEnum.value2Label(enum2int(ProjInvoiceProposalTransSelectionTypes::Item));
        }
        if (isQueryOnAccTrans)
        {
            transTypeNames += transTypeEnum.value2Label(enum2int(ProjInvoiceProposalTransSelectionTypes::OnAccount));
        }
        if (isQueryRevenueTrans)
        {
            transTypeNames += transTypeEnum.value2Label(enum2int(ProjInvoiceProposalTransSelectionTypes::Revenue));
        }
        if (isQuerySalesLine)
        {
            transTypeNames += transTypeEnum.value2Label(enum2int(ProjInvoiceProposalTransSelectionTypes::SalesOrderLine));
        }
        if (isQuerySubscriptionTrans)
        {
            transTypeNames += transTypeEnum.value2Label(enum2int(ProjInvoiceProposalTransSelectionTypes::Subscription));
        }

        return transTypeNames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQueryCostTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves whether expense transactions should be queries.
    /// </summary>
    /// <returns>true to query the transactions, false otherwise</returns>
    public boolean isQueryCostTrans()
    {
        return isQueryCostTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQueryEmplTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves whether hour transactions should be queries.
    /// </summary>
    /// <returns>true to query the transactions, false otherwise</returns>
    public boolean isQueryEmplTrans()
    {
        return isQueryEmplTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQueryItemTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves whether item transactions should be queries.
    /// </summary>
    /// <returns>true to query the transactions, false otherwise</returns>
    public boolean isQueryItemTrans()
    {
        return isQueryItemTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQueryOnAccTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves whether on account transactions should be queries.
    /// </summary>
    /// <returns>true to query the transactions, false otherwise</returns>
    public boolean isQueryOnAccTrans()
    {
        return isQueryOnAccTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQueryRevenueTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves whether fee transactions should be queries.
    /// </summary>
    /// <returns>true to query the transactions, false otherwise</returns>
    public boolean isQueryRevenueTrans()
    {
        return isQueryRevenueTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQuerySalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves whether sales line transactions should be queries.
    /// </summary>
    /// <returns>true to query the transactions, false otherwise</returns>
    public boolean isQuerySalesLine()
    {
        return isQuerySalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQuerySubscriptionTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves whether subscription transactions should be queries.
    /// </summary>
    /// <returns>true to query the transactions, false otherwise</returns>
    public boolean isQuerySubscriptionTrans()
    {
        return isQuerySubscriptionTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales update type to query for sales order lines.
    /// </summary>
    /// <returns>The <c>SalesUpdate</c> value to be used for sales order lines.</returns>
    public SalesUpdate getSalesUpdate()
    {
        return salesUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustomerBlockedForProjInvoiceProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the current customer blocked status for project invoice proposal.
    /// </summary>
    protected void validateCustomerBlockedForProjInvoiceProposal()
    {
        CustVendorBlocked blockedLevel = CustTable::blocked(PSATmpProjProposalTrans.CustAccount);
        switch (blockedLevel)
        {
            case CustVendorBlocked::All:
                throw warning(strFmt("@SYS18389", PSATmpProjProposalTrans.CustAccount, enum2Str(blockedLevel)));

            case CustVendorBlocked::Invoice:
                throw warning(strFmt("@SYS18389", PSATmpProjProposalTrans.CustAccount, enum2Str(blockedLevel)));

            case CustVendorBlocked::Never:
            case CustVendorBlocked::No:
            case CustVendorBlocked::Payment:
            case CustVendorBlocked::Requisition:
            case CustVendorBlocked::PurchOrder:
                throw warning("@PSA10213");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjInvoiceProposalInsertLines</Name>
				<Source><![CDATA[
    protected ProjInvoiceProposalInsertLines createProjInvoiceProposalInsertLines()
    {
        return(new ProjInvoiceProposalInsertLines(proposalCreateLines, false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        ProjInvoiceProposalInsertLines  projInvoiceProposalInsertLines;
        // <GIN>
        ProjInvoiceProposalCreateLinesParams   proposalCreateLinesParams;
        // </GIN>

        Args                    args = new Args();
        MenuFunction            menuFunction;
        List                    proposalIdList;
        ListEnumerator          proposalIdEnumerator;
        ProjProposalId          proposalId;
        Query                   detailsFormQuery;
        QueryBuildDataSource    projProposalDataSource;
        QueryBuildRange         proposalIdRange;

        void updateCallerDisplay()
        {
            if (projProposalJour)
            {
                element.args().caller().updateDisplay(false);
                FormDataUtil::getFormDataSource(projProposalJour).active();
            }
        }

        if (!proposalCreateLines)
        {
            throw warning("@PSA10213");
        }

        xSysLastValue::saveLast(this);

        // This date is not set during modifiedTransFilter. Set it here
        proposalCreateLines.parmProposalCreateLinesParams().parmInvoiceDate(selectInvoiceDate.dateValue());

        projInvoiceProposalInsertLines = this.createprojInvoiceProposalInsertLines();
        // <GIN>
        proposalCreateLinesParams = ProjInvoiceProposalCreateLinesParams::construct();
        // </GIN>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            if (element.args().menuItemName() == menuitemDisplayStr(ProjDebitNoteProposalSelection_BR))
            {
                projInvoiceProposalInsertLines.parmInvoiceType(ProjInvoiceType::DebitNote_BR);
            }
        }
        // </GBR>
        if (projProposalJour)
        {
            projInvoiceProposalInsertLines.parmProjProposalJourExtern(projProposalJour);
            projInvoiceProposalInsertLines.parmShowMessages(false);
        }
        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            projInvoiceProposalInsertLines.parmInvoiceDate(selectInvoiceDate.dateValue());
        }
        // </GIN>

        if (skipRecalculateProposalTotals)
        {
            projProposalJour.reread();
            if (projProposalJour.RecalculateTotalsStatus == ProjProposalRecalculateTotalsStatus::InProcess)
            {
                throw error("@Proj:InvoiceLineWriteErrorDueToRecalculatesTotalStatusInProcess");
            }

            projInvoiceProposalInsertLines.parmSkipRecalculateProposalTotals(true);
            projProposalJour.setRecalculateTotalsStatus(ProjProposalRecalculateTotalsStatus::Required);
        }

        projInvoiceProposalInsertLines.runOperation();

        proposalIdList = projInvoiceProposalInsertLines.getProposalIdList();

        if (proposalIdList.elements() && !isAddLines)
        {
            detailsFormQuery       = new Query();

            projProposalDataSource = detailsFormQuery.addDataSource(tableNum(ProjProposalJour));

            proposalIdEnumerator   = proposalIdList.getEnumerator();

            while (proposalIdEnumerator.moveNext())
            {
                proposalId = proposalIdEnumerator.current();
                proposalIdRange = projProposalDataSource.addRange(fieldNum(ProjProposalJour, ProposalId));
                proposalIdRange.value(queryValue(proposalId));
            }
            // <GBR>
            if ((BrazilParameters::isEnabled()) &&
                (element.args().menuItemName() == menuitemDisplayStr(ProjDebitNoteProposalSelection_BR)))
            {
                menuFunction = new MenuFunction(menuitemDisplayStr(ProjDebitNoteProposal_BR), MenuItemType::Display);
            }
            else
            {
                // </GBR>
                menuFunction = new MenuFunction(menuitemDisplayStr(ProjInvoiceProposal), MenuItemType::Display);
                // <GBR>
            }
            // </GBR>

            args.caller(element);
            args.copyCallerQuery(CopyCallerQuery::No);
            args.initialQuery(InitialQueryParameter::createByQuery(detailsFormQuery));

            if (proposalIdList.elements() > 1)
            {
                args.formViewOption(FormViewOption::Grid);
            }

            menuFunction.run(args);

            super();

            updateCallerDisplay();
        }
        else if (isAddLines)
        {
            updateCallerDisplay();

            element.close();
        }
        else
        {
            this.validateCustomerBlockedForProjInvoiceProposal();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonCode</Name>
				<Source><![CDATA[
    public edit ReasonCode editReasonCode(
        boolean     _set,
        ReasonCode  _reasonCode = '')
    {
        ReasonCode                              reasonCode;
        ProjInvoiceProposalCreateLinesParams    params;

        if (!proposalCreateLines)
        {
            return '';
        }

        params = proposalCreateLines.parmProposalCreateLinesParams();

        if (_set)
        {
            reasonCode = _reasonCode;

            if (params.parmReasonRefRecID())
            {
                params.parmReasonRefRecID(ReasonTableRef::updateCode(reasonCode, params.parmReasonRefRecID()));
            }
            else
            {
                params.parmReasonRefRecID(ReasonTableRef::createFromCode(reasonCode));
            }

            element.editReasonComment(true, ReasonTable::find(reasonCode).Description);
        }
        else
        {
            reasonCode = ReasonTableRef::find(params.parmReasonRefRecID()).Reason;
        }

        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonComment</Name>
				<Source><![CDATA[
    public edit ReasonComment editReasonComment(
        boolean         _set,
        ReasonComment   _reasonComment = '')
    {
        ReasonComment                           reasonComment;
        ProjInvoiceProposalCreateLinesParams    params;

        if (!proposalCreateLines)
        {
            return '';
        }

        params = proposalCreateLines.parmProposalCreateLinesParams();

        if (_set)
        {
            reasonComment = _reasonComment;

            if (params.parmReasonRefRecID())
            {
                params.parmReasonRefRecID(ReasonTableRef::updateComment(reasonComment, params.parmReasonRefRecID()));
            }
            else
            {
                params.parmReasonRefRecID(ReasonTableRef::createFromComment(reasonComment));
            }
        }

        if (params.parmReasonRefRecID())
        {
            reasonComment = ReasonTableRef::find(params.parmReasonRefRecID()).ReasonComment;
        }

        return reasonComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDisplayAutomatically</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edit method that controls whether matching transactions should be displayed automatically or search should be suspended on initial load.
    /// </summary>
    /// <param name = "_set">A boolean determining whether the value should be persisted.</param>
    /// <param name = "_displayAutomatically">The value to be set.</param>
    /// <returns>The current value</returns>
    /// <remarks>This method is opposite to the delaySearchOption value to provide the desired user experience.</remarks>
    public edit boolean editDisplayAutomatically(boolean _set, boolean _displayAutomatically = !delaySearchOption)
    {
        if (enableInvoiceProposalCreationgPerfEnhanced)
        {
            delaySearchOption = true;
            ProjParameters projParameters = ProjParameters::find();
            if (projParameters && projParameters.CreateInvoiceProposalDisplayAutomatically == NoYes::Yes)
            {
                delaySearchOption = false;
            }
        }
        else
        {
            if (_set)
            {
                delaySearchOption = !_displayAutomatically;
            }
        }

        return !delaySearchOption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDebitNoteControls_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display debit note labels.
    /// </summary>
    public void enableDebitNoteControls_BR()
    {
        if (BrazilParameters::isEnabled())
        {
            if (element.args().menuItemName() == menuitemDisplayStr(ProjDebitNoteProposalSelection_BR))
            {
                element.design().caption("@GLS3800162");
                selectInvoiceDate.helpText("@GLS510078");
                selectStartDate.helpText("@GLS510079");
                selectEndDate.helpText("@GLS510081");
                selectProjInvoiceProjId.helpText("@GLS510125");
                selectProjId.helpText("@GLS510126");
                psaTmpProjProposalTrans_Selected.helpText("@GLS510127");
                psaTmpProjProposalTrans_Qty.helpText("@GLS510128");
                psaTmpProjProposalTransBill_Selected.helpText("@GLS510127");
                totalInvoiceValue.label("@GLS510129");
                netInvoiceValue.label("@GLS510130");
                selectInvoiceDate.label("@GLS3800153");
                selectInvoiceDate.helpText("@GLS510078");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableProjectFilters</Name>
				<Source><![CDATA[
    public void enableProjectFilters()
    {
        if (selectProjId.text())
        {
            selectProjInvoiceProjId.enabled(false);
        }
        else
        {
            selectProjInvoiceProjId.enabled(true);
        }

        if (selectProjInvoiceProjId.text())
        {
            selectFundingSource.enabled(true);
        }
        else
        {
            selectFundingSource.enabled(false);
        }

        if (projInvoiceProjIdLocked)
        {
            selectProjInvoiceProjId.enabled(false);
        }

        if (projFundingSourceRecIdLocked)
        {
            selectFundingSource.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        this.loadLastValue();

        DisplayAutomatically.enabled(!enableInvoiceProposalCreationgPerfEnhanced);
        if (enableInvoiceProposalCreationgPerfEnhanced)
        {
            this.editDisplayAutomatically(false);
        }

        projDimensionValuesControl = ProjDimensionValuesControl::construct(this, DimensionAttributeValueSet_ds, InvoiceTransactions);

        //To make default user timezone date as end date.
        userTimeZoneDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        SelectEndDate.dateValue(userTimeZoneDate);

        str callerName;
        if (element.args())
        {
            callerName = element.args().callerName();
        }

        if (callerName == formStr(ProjInvoiceProposalDetailV2)
            && ProjProposalTranSummariesRefresh::isInvoiceProposalLineEditPerfEnabled())
        {
            skipRecalculateProposalTotals = true;
        }

        if (element.args().dataset())
        {
            switch (element.args().dataset())
            {
                case tableNum(ProjInvoiceTable):
                    this.initFromProjInvoiceTable(element.args().record());
                    break;

                case tableNum(ProjTable):
                    this.initFromProjTable(element.args().record());
                    break;

                case tableNum(ProjProposalJour):
                    if (element.args().menuItemName() == menuitemDisplayStr(PSAProjProposalSelectionAddLines))
                    {
                        isAddLines = true;
                        projProposalJour = element.args().record();
                        this.initFromProjProposalJour();
                    }
                    else
                    {
                        element.args().record(null);
                    }
                    break;

                case tableNum(SMAServiceOrderTable):
                    serviceOrderTable = element.args().record();
                    this.initFromSMAServiceOrderTable(serviceOrderTable);
                    break;

                case tableNum(ProjPostTransView) :
                    ProjPostTransView projPostTransView = element.args().record() as ProjPostTransView;
                    this.initFromProjTable(ProjTable::find(projPostTransView.ProjId));
            }
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            psaTmpProjProposalTrans_IndirectAmount.visible(true);
        }
        
        RadioSearchSelection.visible(this.isProjInvoiceProposalSearchFundingSourceFunctionalityEnabled());

        boolean allowSortableResourceFields = true;
        PSATmpProjProposalTrans_Resource.visible(!allowSortableResourceFields);
        PSATmpProjProposalTrans_ResourceId.visible(allowSortableResourceFields);
        PSATmpProjProposalTrans_ResourceName.visible(allowSortableResourceFields);
        
        //To make default user timezone date as Invoice date.
        SelectInvoiceDate.dateValue(userTimeZoneDate);
        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            element.enableDebitNoteControls_BR();
        }
        // </GBR>
        // <GIN>
        event_IN.visible(TaxParameters::checkTaxParameters_IN());
        // </GIN>

        this.updateTransTypeSelectionControl();
        cdsLockingOptionCreateInvoiceProposals = ProjCDSLockingOptionTable::get(ProjCDSLockingOption::CreateInvoiceProposals);

        this.showWhatsNew();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showWhatsNew</Name>
				<Source><![CDATA[
    private void showWhatsNew()
    {
        if (enableInvoiceProposalCreationgPerfEnhanced && delaySearchOption)
        {
            // Define a unique key for the what's new rule instance to ensure there are no conflicts with other rules.
            str whatsNewKey = '{5F9AB172-4E09-4D3A-8F11-AB7B47B724CA}';
            str whatsNewLeanMoreUrl = 'https://go.microsoft.com/fwlink/?linkid=2133403';

            SystemNotificationsWhatsNewManager::AddWhatsNewWithActionLink(
                whatsNewKey,
                "@Proj:ProjInvoiceProposalPerformanceWhatsNewTitle",
                "@Proj:ProjInvoiceProposalPerformanceWhatsNewText",
                DisplayAutomatically.name(),
                whatsNewLeanMoreUrl);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unselectAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unselect all transactions in the <c>psaTmpProjProposalTrans</c> datasource.
    /// </summary>
    private void unselectAll()
    {
        proposalCreateLines.selectionChanged('', NoYes::No, false);

        invoiceAmount = 0;

        element.updateTotalsDisplay();

        psaTmpProjProposalTrans_ds.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deselectAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deselect all transactions in the filter of the <c>psaTmpProjProposalTrans</c> datasource.
    /// </summary>
    protected void deselectAll()
    {
        QueryRun localQueryRun;
        PSATmpProjProposalTrans localPSATmpProjProposalTrans;
        PSATmpProjProposalTrans refTransIdsBuffer;

        ttsbegin;
        localQueryRun = psaTmpProjProposalTrans_ds.queryRun();
        localQueryRun.reset();
        while (localQueryRun.next())
        {
            localPSATmpProjProposalTrans = localQueryRun.get(tableNum(PSATmpProjProposalTrans));
            if (localPSATmpProjProposalTrans.RefTransId)
            {
                refTransIdsBuffer.clear();
                refTransIdsBuffer.RefTransId = localPSATmpProjProposalTrans.RefTransId;
                refTransIdsBuffer.insert();
            }
        }
        ttscommit;
        
        if (refTransIdsBuffer && proposalCreateLines)
        {
            proposalCreateLines.selectionChangedByTable(refTransIdsBuffer, NoYes::No, false);
            invoiceAmount = proposalCreateLines.transactionAmount(invoiceCurrency.text());
            element.updateTotalsDisplay();
            psaTmpProjProposalTrans_ds.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjInvoiceTable</Name>
				<Source><![CDATA[
    void initFromProjInvoiceTable(ProjInvoiceTable _projInvoiceTable)
    {
        if (selectProjInvoiceProjId.text() != _projInvoiceTable.ProjInvoiceProjId)
        {
            selectProjInvoiceProjId.text(_projInvoiceTable.ProjInvoiceProjId);

            if (RadioSearchSelection.selection() != ProjInvoiceSearchSelectionFilter::FundingSource
                || !this.isProjInvoiceProposalSearchFundingSourceFunctionalityEnabled())
            {
                element.initFundingSourceLookup();
            }
        }

        element.enableProjectFilters();

        element.modifiedTransFilter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjProposalJour</Name>
				<Source><![CDATA[
    void initFromProjProposalJour()
    {
        projFundingSourceRecIdLocked = projProposalJour.FundingSource;
        projInvoiceProjIdLocked      = projProposalJour.ProjInvoiceProjId;

        element.initFromProjTable(ProjTable::find(projProposalJour.projId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable</Name>
				<Source><![CDATA[
    void initFromProjTable(ProjTable _projTable)
    {
        if (serviceOrderTable || ProjEnableInvoiceProposalCreationForSelectedProjectFeature::isEnabled())
        {
            selectProjId.text(_projTable.ProjId);
        }
        else
        {
            selectProjId.text(_projTable.psaFindRootProjId(_projTable.ProjId));
        }

        this.initFromProjInvoiceTable(ProjInvoiceTable::find(_projTable.ProjInvoiceProjId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSMAServiceOrderTable</Name>
				<Source><![CDATA[
    private void initFromSMAServiceOrderTable(SMAServiceOrderTable _serviceOrderTable)
    {
        ProjTable   projTableLocal = ProjTable::find(_serviceOrderTable.ProjId);

        projInvoiceProjIdLocked = projTableLocal.ProjInvoiceProjId;

        this.initFromProjTable(projTableLocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFundingSourceLookup</Name>
				<Source><![CDATA[
    void initFundingSourceLookup()
    {
        ProjFundingSource fundingSource;
        int recordCount;

        delete_from invoiceFundingSource;

        if (projFundingSourceRecIdLocked)
        {
            fundingSource   = ProjFundingSource::find(projFundingSourceRecIdLocked);

            invoiceFundingSource.clear();
            invoiceFundingSource.Name            = fundingSource.name();
            invoiceFundingSource.FundingSourceId = fundingSource.FundingSourceId;
            invoiceFundingSource.insert();

            selectFundingSource.text(invoiceFundingSource.FundingSourceId);
        }
        else
        {
            selectFundingSource.text('');

            if (this.isProjInvoiceProposalSearchFundingSourceFunctionalityEnabled()
                && RadioSearchSelection.selection() == ProjInvoiceSearchSelectionFilter::FundingSource)
            {
                while select FundingSourceId, ProjGrant, FundingType, CustAccount, Party from fundingSource
                    where  (selectProjInvoiceProjId.text() == ''
                        || fundingSource.ContractId == selectProjInvoiceProjId.text())
                        && fundingSource.FundingType != ProjFundingType::OnHoldFundingSource
                {
                    select firstonly RecId from invoiceFundingSource
                        where invoiceFundingSource.Party == fundingSource.Party
                            && invoiceFundingSource.FundingType == fundingSource.FundingType;

                    if (!invoiceFundingSource)
                    {
                        invoiceFundingSource.clear();
                        invoiceFundingSource.FundingSourceId = fundingSource.FundingSourceId;
                        invoiceFundingSource.Party = fundingSource.Party;

                        switch (fundingSource.FundingType)
                        {
                            case ProjFundingType::Grant :
                                invoiceFundingSource.AccountNum = ProjGrant::find(fundingSource.ProjGrant).CustAccount;
                                invoiceFundingSource.FundingType = ProjFundingType::Grant;
                                invoiceFundingSource.Name  = CustTable::find(invoiceFundingSource.AccountNum).name();
                                break;

                            case ProjFundingType::Customer :
                                invoiceFundingSource.AccountNum = fundingSource.CustAccount;
                                invoiceFundingSource.FundingType = ProjFundingType::Customer;
                                invoiceFundingSource.Name = CustTable::findByPartyRecId(invoiceFundingSource.Party).name();
                                break;

                            case ProjFundingType::Organization :
                                invoiceFundingSource.AccountNum = invoiceFundingSource.FundingSourceId;
                                invoiceFundingSource.FundingType = ProjFundingType::Organization;
                                invoiceFundingSource.Name = DirPartyTable::findRec(invoiceFundingSource.Party).Name;
                                break;
                        }

                        invoiceFundingSource.insert();
                        recordCount++;
                    }
                }
            }
            else
            {

                while select FundingSourceId, Party, ProjGrant, FundingType from fundingSource
                where fundingSource.ContractId == selectProjInvoiceProjId.text() &&
                        fundingSource.FundingType != ProjFundingType::OnHoldFundingSource &&
                        fundingSource.FundingType != ProjFundingType::Organization
                {
                    invoiceFundingSource.clear();
                    invoiceFundingSource.Name  = fundingSource.name();
                    invoiceFundingSource.FundingSourceId = fundingSource.FundingSourceId;
                    invoiceFundingSource.insert();

                    if (!selectFundingSource.text())
                    {
                        selectFundingSource.text(invoiceFundingSource.FundingSourceId);
                    }
                    recordCount++;
                }
            }

            if (recordCount > 1)
            {
                invoiceFundingSource.clear();
                invoiceFundingSource.Name = '';
                invoiceFundingSource.FundingSourceId = "@SYS14437";

                if (this.isProjInvoiceProposalSearchFundingSourceFunctionalityEnabled()
                    && RadioSearchSelection.selection() == ProjInvoiceSearchSelectionFilter::FundingSource)
                {
                    invoiceFundingSource.AccountNum = "@SYS14437";
                }

                invoiceFundingSource.insert();

                selectFundingSource.text(invoiceFundingSource.FundingSourceId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    void initParmDefault()
    {
        boolean isProject3Enabled = isConfigurationkeyEnabled(configurationKeyNum(Project));

        isQueryEmplTrans         = true;
        isQueryRevenueTrans      = true;
        isQueryCostTrans         = true;
        isQuerySubscriptionTrans = true;
        isQueryItemTrans         = true;
        isQueryOnAccTrans        = true;
        isQuerySalesLine         = false;
        salesUpdate              = SalesUpdate::DeliverNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    DataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    IdentifierName lastValueDesignName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    IdentifierName lastValueElementName()
    {
        return this.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    UserId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadLastValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Loads the last values for the form.
    /// </summary>
    protected void loadLastValue()
    {
        xSysLastValue::getLast(this);

        if (startDate)
        {
            selectStartDate.dateValue(startDate);
        }

        if (endDate)
        {
            selectEndDate.dateValue(endDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectContractSpecified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if project contract is specified for the invoice proposal.
    /// </summary>
    /// <returns>
    /// true, if the project contract is specified for the invoice proposal; otherwise, false.
    /// </returns>
    protected boolean isProjectContractSpecified()
    {
        return selectProjInvoiceProjId.text() != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedTransFilter</Name>
				<Source><![CDATA[
    #Define.IncludeSubProjects("*")
    void modifiedTransFilter()
    {
        boolean validateProjInvoiceCheck = true;

        if (this.isProjInvoiceProposalSearchFundingSourceFunctionalityEnabled()
            && RadioSearchSelection.selection() == ProjInvoiceSearchSelectionFilter::FundingSource
            && RefFundingSource.value())
        {
            validateProjInvoiceCheck = false;
        }

        psaTmpProjProposalTrans.clear();

        psaTmpProjProposalTransPreBill.clear();

        if (validateProjInvoiceCheck
            && !this.isProjectContractSpecified())
        {
            return;
        }

        // delaySearchOption allows the user to suppress searching except when the search button is clicked
        // searchNow is set to true when the search button is pressed
        if (delaySearchOption && !searchNow)
        {
            return;
        }

        startDate                = selectStartDate.dateValue();
        endDate                  = selectEndDate.dateValue();

        this.initProjInvoiceProposalCreateLinesParams();

        proposalCreateLines.run();

        psaTmpProjProposalTrans.setTmpData(proposalCreateLines.getProposalTransDisplay());
        psaTmpProjProposalTrans_ds.executeQuery();

        psaTmpProjProposalTransPreBill.setTmpData(proposalCreateLines.getProposalTransDisplayDeduction());
        psaTmpProjProposalTransPreBill_ds.executeQuery();

        this.updateDisplayInvoiceCurrency();

        invoiceAmount = proposalCreateLines.transactionAmount(invoiceCurrency.text());

        deductionAmount = proposalCreateLines.deductionAmount(invoiceCurrency.text());

        element.updateTotalsDisplay();

        this.updateDimensionControls();

        this.unselectAll();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDimensionControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the appropriate Financial Dimension values to the grid to allow for better sorting and filtering.  The Dimension values to add are determined
    ///  by the Financial dimension set selected.
    /// </summary>
    protected void updateDimensionControls()
    {
        projDimensionValuesControl.displayFinancialDimensionsByHierarchy(dimHier, PSATmpProjProposalTrans_SalesUnit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjInvoiceProposalCreateLinesParams</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class <c>ProjInvoiceProposalCreateLinesParams</c> values.
    /// </summary>
    protected void initProjInvoiceProposalCreateLinesParams()
    {
        ProjInvoiceProposalCreateLinesParams proposalCreateLinesParams = ProjInvoiceProposalCreateLinesParams::construct();

        proposalCreateLinesParams.parmEndDate(selectEndDate.dateValue());

        if (RadioSearchSelection.selection() == ProjInvoiceSearchSelectionFilter::FundingSource)
        {
            select firstonly AccountNum, Party, FundingType from invoiceFundingSource where invoiceFundingSource.RecId == RefFundingSource.value();

            if (invoiceFundingSource.AccountNum != "@SYS14437")
            {
                List listFundingSources = new List(Types::Int64);

                ProjFundingSource projFundingSource;

                while select projFundingSource
                    where projFundingSource.Party == invoiceFundingSource.Party
                        && projFundingSource.FundingType == invoiceFundingSource.FundingType
                {
                    listFundingSources.addEnd(projFundingSource.RecId);
                }

                proposalCreateLinesParams.parmContainerFundingSources(listFundingSources.pack());
            
            }
        }
        else
        {
            proposalCreateLinesParams.parmFundingSource(selectFundingSource.valueStr() == "@SYS14437" ? "" : selectFundingSource.valueStr());
        }
        proposalCreateLinesParams.parmInvoiceDate(selectInvoiceDate.dateValue());
        proposalCreateLinesParams.parmInvoiceTypeSelection(projInvoiceTypeSelection.selection());
        // <GBR>
        proposalCreateLinesParams.parmIsDebitNote(BrazilParameters::isEnabled() && element.args().menuItemName() == menuitemDisplayStr(ProjDebitNoteProposalSelection_BR));
        //</GBR>
        proposalCreateLinesParams.parmIsQueryCostTrans(isQueryCostTrans);
        proposalCreateLinesParams.parmIsQueryEmplTrans(isQueryEmplTrans);
        proposalCreateLinesParams.parmIsQueryItemTrans(isQueryItemTrans);
        proposalCreateLinesParams.parmIsQueryOnAccTrans(isQueryOnAccTrans);
        proposalCreateLinesParams.parmIsQueryRevenueTrans(isQueryRevenueTrans);
        proposalCreateLinesParams.parmIsQuerySalesLine(isQuerySalesLine);
        proposalCreateLinesParams.parmIsQuerySubscriptionTrans(isQuerySubscriptionTrans);
        proposalCreateLinesParams.parmProjId(ProjInvoiceProposalCreateLines::prepareProjIdForQuery(selectProjId.text()) + (checkBoxIncludeSubProjects.value() ? #IncludeSubProjects : ""));
        proposalCreateLinesParams.parmProjInvoiceProjId(selectProjInvoiceProjId.text());
        proposalCreateLinesParams.parmSalesUpdate(salesUpdate);
        proposalCreateLinesParams.parmServiceOrderTable(serviceOrderTable);
        proposalCreateLinesParams.parmStartDate(selectStartDate.dateValue());
        // Setting the proposal parm for view other transaction
        element.parmProposalParams(proposalCreateLinesParams);
        if (projProposalJour)
        {
            proposalCreateLinesParams.parmCurrencyCodeFixed(projProposalJour.CurrencyId);
        }

        proposalCreateLines = ProjInvoiceProposalCreateLines::newStandard(proposalCreateLinesParams.pack());

    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    public str parmProjId()
    {
        return selectProjId.valueStr();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjInvoiceProjId</Name>
				<Source><![CDATA[
    public str parmProjInvoiceProjId()
    {
        return selectProjInvoiceProjId.valueStr();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        element.enableProjectFilters();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _pack)
    {
        boolean ret = false;

        int version = conPeek(_pack, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList ] = _pack;
                ret = true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDisplayInvoiceCurrency</Name>
				<Source><![CDATA[
    private void updateDisplayInvoiceCurrency()
    {
        if (!invoiceCurrency.text())
        {
            if (psaTmpProjProposalTrans && ProjInvoiceTable::find(psaTmpProjProposalTrans.ProjInvoiceProjId).CurrencyId)
            {
                invoiceCurrency.text(ProjInvoiceTable::find(psaTmpProjProposalTrans.ProjInvoiceProjId).CurrencyId);
            }
            else
            {
                invoiceCurrency.text(psaTmpProjProposalTransPreBill.CurrencyCode);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotalsDisplay</Name>
				<Source><![CDATA[
    void updateTotalsDisplay()
    {
        this.updateDisplayInvoiceCurrency();

        totalInvoiceValue.realValue(invoiceAmount);
        totalDeductions.realValue(-deductionAmount);
        netInvoiceValue.realValue(invoiceAmount + deductionAmount);

        invoiceSummary.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProposalParams</Name>
				<Source><![CDATA[
    public ProjInvoiceProposalCreateLinesParams parmProposalParams(ProjInvoiceProposalCreateLinesParams _proposalPendingLinesParams = proposalParams)
    {
        proposalParams = _proposalPendingLinesParams;

        return proposalParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performTransTypeSelectionCtrlLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for transaction types and sets local variables based on the selection.
    /// </summary>
    /// <param name = "_formStringControl">
    /// A form string control.
    /// </param>
    protected void performTransTypeSelectionCtrlLookup(FormStringControl _formStringControl)
    {
        var args = new Args(formStr(ProjInvoiceProposalTransTypeLookup));

        args.caller(element);
        args.callerFormControl(_formStringControl);

        FormRun formRun = classfactory.formRunClass(args);

        formRun.init();
        _formStringControl.performFormLookup(formRun);
        formRun.detach();
        formRun.wait();

        this.determineTypeSelectionFromLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineTypeSelectionFromLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the type selections from the given lookup form.
    /// </summary>
    /// <param name = "_formRun">The <c>FormRun</c> instance that is determines the type selections.</param>
    /// <remarks>
    /// The FormRun parameter is passes as a generic FormRun instead of the interface type as extensions will need to
    /// potentially interact with the form directly and not via the interface as the interface is not extensible.
    /// </remarks>
    protected void determineTypeSelectionFromLookup(FormRun _formRun)
    {
        var params = _formRun as ProjInvoiceITransSelectionParams;

        if (params != null)
        {
            isQueryCostTrans = params.isQueryCostTrans();
            isQueryEmplTrans = params.isQueryEmplTrans();
            isQueryItemTrans = params.isQueryItemTrans();
            isQueryOnAccTrans = params.isQueryOnAccTrans();
            isQueryRevenueTrans = params.isQueryRevenueTrans();
            isQuerySalesLine =  params.isQuerySalesLine();
            isQuerySubscriptionTrans = params.isQuerySubscriptionTrans();
            salesUpdate = params.getSalesUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjectExternallyManaged</Name>
				<Source><![CDATA[
    private boolean validateProjectExternallyManaged(ProjId _projId)
    {
        boolean ret = true;

        if (cdsLockingOptionCreateInvoiceProposals)
        {
            if (Project::isProjectExternallyManaged(_projId))
            {
                ret = checkFailed(strfmt("@Proj:ProjCDSValueInvalidDueToExternal", "@Proj:ProjCDSCreateInvoiceProposals"));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateContractExternallyManaged</Name>
				<Source><![CDATA[
    private boolean validateContractExternallyManaged(ProjInvoiceProjId _projInvoiceProjId)
    {
        boolean ret = true;

        if (cdsLockingOptionCreateInvoiceProposals)
        {
            if (Project::isContractExternallyManaged(_projInvoiceProjId))
            {
                ret = checkFailed(strfmt("@Proj:ProjCDSValueInvalidDueToExternal", "@Proj:ProjCDSCreateInvoiceProposals"));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyProjInvSearchSelectionFilter</Name>
				<Source><![CDATA[
    private void modifyProjInvSearchSelectionFilter(ProjInvoiceSearchSelectionFilter _projInvoiceSearchSelectionFilter)
    {
        SelectProjInvoiceProjId.text('');
        SelectProjId.text('');
        SelectFundingSource.text('');
        RefFundingSource.value(0);
    
        switch (_projInvoiceSearchSelectionFilter)
        {
            case ProjInvoiceSearchSelectionFilter::ProjectContract :
                SelectProjInvoiceProjId.enabled(true);
                SelectProjId.enabled(true);
                RefFundingSource.visible(false);
                SelectFundingSource.enabled(false);
                SelectFundingSource.visible(true);
                break;

            case ProjInvoiceSearchSelectionFilter::FundingSource :
                SelectProjInvoiceProjId.enabled(false);
                SelectProjId.enabled(false);
                RefFundingSource.visible(true);
                SelectFundingSource.visible(false);
                this.initFundingSourceLookup();
                break;
    
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>PSATmpProjProposalTrans</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            this.query().dataSourceTable(tableNum(PSATmpProjProposalTrans)).clearDynalinks();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                psaIndirectComponentTrans.enabled(psaTmpProjProposalTrans.canShowIndirectComponentTrans());
            }

            // <GBR>
            if (BrazilParameters::isEnabled())
            {
                element.enableDebitNoteControls_BR();
            }
            // </GBR>

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>Selected</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                proposalCreateLines.selectionChanged(psaTmpProjProposalTrans.RefTransId, psaTmpProjProposalTrans.Selected, false);

                invoiceAmount = proposalCreateLines.transactionAmount(invoiceCurrency.text());

                element.updateTotalsDisplay();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>PSATmpProjProposalTransPreBill</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            this.query().dataSourceTable(tableNum(PSATmpProjProposalTrans)).clearDynalinks();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>Selected</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                proposalCreateLines.selectionChanged(psaTmpProjProposalTransPreBill.RefTransId, psaTmpProjProposalTransPreBill.Selected, true);

                deductionAmount = proposalCreateLines.deductionAmount(invoiceCurrency.text());

                element.updateTotalsDisplay();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>DimensionAttributeValueSet</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            // Commenting out super() on purpose to workaround issue where the kernel is trying to write new records.  This is
            //  resulting in "Cannot create record in Dimension code set (DimensionAttributeValueSet) ... The record already exists."
            //  exceptions.  The kernel should never be attempting to perform CUD operations for this datasource on this form.
            //super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>RadioSearchSelection</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                element.modifyProjInvSearchSelectionFilter(this.selection());
                element.modifiedTransFilter();
            }
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SelectInvoiceDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (!proposalCreateLines)
            {
                proposalCreateLines = ProjInvoiceProposalCreateLines::construct();
                proposalCreateLines.parmProposalCreateLinesParams(ProjInvoiceProposalCreateLinesParams::construct());
            }

            proposalCreateLines.parmProposalCreateLinesParams().parmInvoiceDate(this.dateValue());

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Check if invoice date is less than end date.
        /// </summary>
        /// <returns>
        /// Return boolean value ,warning if the invoice date is less than end date.
        /// </returns>
        /// <exception cref="Exception::Error">
        /// throws exception "Invoice date is lesser than the end date"
        /// </exception>
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (SelectInvoiceDate.dateValue() < SelectEndDate.dateValue()))
            {
                ret = checkfailed("@SYP4861265");
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RefFundingSource</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                SelectProjInvoiceProjId.enabled(true);
                SelectProjId.enabled(true);
                SelectProjInvoiceProjId.text('');
                SelectProjId.text('');

                element.modifiedTransFilter();
            }
        
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void lookup()
        {
            ProjTmpInvoiceFundingSource::LookupAllFundingSourcesByCustomer(this, invoiceFundingSource);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SelectFundingSource</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(ProjTmpInvoiceFundingSource), this);
            Query          lookupQuery    = new Query();

            lookupQuery.addDataSource(tableNum(ProjTmpInvoiceFundingSource));
            sysTableLookup.addLookupfield(fieldNum(ProjTmpInvoiceFundingSource, FundingSourceId), true);
            sysTableLookup.addLookupfield(fieldNum(ProjTmpInvoiceFundingSource, Name));
            sysTableLookup.parmCallingControl(this);
            sysTableLookup.parmQuery(lookupQuery);

            select invoiceFundingSource;

            sysTableLookup.parmTmpBuffer(invoiceFundingSource);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.modifiedTransFilter();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean validate()
        {
            boolean ret = super();

            if (this.text())
            {
                ProjFundingSource projFundingSourceLocal = ProjFundingSource::findContractFundingSource(SelectProjInvoiceProjId.text(), this.text());

                if (!projFundingSourceLocal && this.text() != "@SYS14437")
                {
                    ret = checkFailed("@Proj:ProjFundingSourceError");
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Event_IN</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(ServiceEvents_IN), this);
            Query                   query = new Query();
            QueryBuildRange         queryBuildRange;
            QueryBuildDataSource    serviceEvent;
            ServiceEventGroups_IN   serviceEventGroup;

            sysTableLookup.addLookupfield(fieldNum(ServiceEvents_IN, Event));
            sysTableLookup.addLookupfield(fieldNum(ServiceEvents_IN, EventDescription));

            serviceEventGroup = ServiceEventGroups_IN::find(psaTmpProjProposalTrans.ServiceEventGroup_IN);

            serviceEvent  = query.addDataSource(tableNum(ServiceEvents_IN));

            serviceEvent.relations(true);

            queryBuildRange = serviceEvent.addRange(fieldNum(ServiceEvents_IN, ServiceEventGrpRecId));
            queryBuildRange.value(queryValue(serviceEventGroup.RecId));

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            if (ret)
            {
                selectInvoiceDate.dateValue(ServiceEvents_IN::findByServiceEvent(this.text()).DueDate);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReasonCode</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            ReasonFormTable::reasonCodeLookup(
                this,
                LedgerJournalACType::Cust,
                LedgerJournalACType::Cust,
                true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SelectProjInvoiceProjId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            select firstonly AccountNum, FundingType, Party from invoiceFundingSource where invoiceFundingSource.RecId == RefFundingSource.value();

            if (element.isProjInvoiceProposalSearchFundingSourceFunctionalityEnabled()
                && RadioSearchSelection.selection() == ProjInvoiceSearchSelectionFilter::FundingSource
                && invoiceFundingSource.AccountNum != "@SYS14437")
            {
                Query query = new Query();

                SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(ProjFundingSource), this);
                sysTableLookup.addLookupfield(fieldNum(ProjFundingSource, ContractId), true);
                QueryBuildDataSource fundingSourceDataSource = query.addDataSource(tableNum(ProjFundingSource));


                switch (invoiceFundingSource.FundingType)
                {
                    case ProjFundingType::Grant :
                        ProjGrant projGrant;

                        while select RecId from projGrant where projGrant.CustAccount == invoiceFundingSource.AccountNum
                        {
                            QueryBuildRange queryBuildRangeGrant = fundingSourceDataSource.addRange(fieldNum(ProjFundingSource, ProjGrant));
                            queryBuildRangeGrant.value(int642Str(projGrant.RecId));
                        }
                        break;

                    case ProjFundingType::Customer :
                        QueryBuildRange queryBuildRangeCustomer =  fundingSourceDataSource.addRange(fieldNum(ProjFundingSource, CustAccount));
                        QueryBuildRangeCustomer.value(invoiceFundingSource.AccountNum);
                        break;

                    case ProjFundingType::Organization :
                        QueryBuildRange queryBuildRangeOrganization =  fundingSourceDataSource.addRange(fieldNum(ProjFundingSource, Party));
                        QueryBuildRangeOrganization.value(queryValue(invoiceFundingSource.Party));
                        break;
                }

                sysTableLookup.parmQuery(query);
                sysTableLookup.performFormLookup();

            }
            else
            {
                ProjInvoiceTable::psaLookupProjInvoiceProjId(this, "", UnknownNoYes::Unknown, false, curext(), true);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                if (this.text())
                {
                    element.initFromProjInvoiceTable(ProjInvoiceTable::find(this.text()));

                    if (RadioSearchSelection.selection() != ProjInvoiceSearchSelectionFilter::FundingSource
                        || !element.isProjInvoiceProposalSearchFundingSourceFunctionalityEnabled())
                    {
                        element.initFundingSourceLookup();
                    }

                    if (selectProjId.text() && ProjTable::find(selectProjId.text()).ProjInvoiceProjId != this.text())
                    {
                        selectProjId.text('');
                    }
                }
                else
                {
                    if (RadioSearchSelection.selection() != ProjInvoiceSearchSelectionFilter::FundingSource
                        || !element.isProjInvoiceProposalSearchFundingSourceFunctionalityEnabled())
                    {
                        selectFundingSource.text("");
                    }
                }

            }

            element.enableProjectFilters();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret = super();

            ProjInvoiceTable projInvoiceTableLocal;

            if (this.text())
            {
                select firstonly AccountNum, Party, FundingType from invoiceFundingSource where invoiceFundingSource.RecId == RefFundingSource.value();

                if (element.isProjInvoiceProposalSearchFundingSourceFunctionalityEnabled()
                    && RadioSearchSelection.selection() == ProjInvoiceSearchSelectionFilter::FundingSource
                    && invoiceFundingSource.AccountNum != "@SYS14437")
                {
                    ProjFundingSource projFundingSource;

                    switch (invoiceFundingSource.FundingType)
                    {
                        case ProjFundingType::Grant :
                            ProjGrant projGrant;

                            select firstonly ContractId from projFundingSource
                                exists join projGrant
                                where projGrant.CustAccount == invoiceFundingSource.AccountNum
                                    && projFundingSource.ProjGrant == projGrant.RecId
                                    && projFundingSource.ContractId == this.text();
                            break;

                        case ProjFundingType::Customer :
                            select firstonly ContractId from projFundingSource
                                where projFundingSource.CustAccount == invoiceFundingSource.AccountNum
                                    && projFundingSource.ContractId == this.text();
                            break;

                        case ProjFundingType::Organization :
                            select firstonly ContractId from projFundingSource
                                where invoiceFundingSource.Party == projFundingSource.Party
                                    && projFundingSource.ContractId == this.text();
                            break;
                    }
                    
                    ret = ret && projFundingSource;

                    if (!ret)
                    {
                        ret = checkFailed(strfmt("@Proj:ProjInvoiceProposalSearchFundingSourceContractErrorMessage", this.text()));
                    }
                }
                projInvoiceTableLocal = ProjInvoiceTable::find(selectProjInvoiceProjId.text());

                if (!projInvoiceTableLocal)
                {
                    ret = checkFailed("@GLS360138");
                }
            }

            if (projInvoiceTableLocal && projInvoiceTableLocal.psaContractLines == NoYes::Yes)
            {
                ret = checkFailed("@PSA3120");
            }

            ret = ret && element.validateContractExternallyManaged(this.text());

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SelectProjId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            select firstonly FundingType, Party, AccountNum from invoiceFundingSource where invoiceFundingSource.RecId == RefFundingSource.value();

            if (element.isProjInvoiceProposalSearchFundingSourceFunctionalityEnabled()
                && RadioSearchSelection.selection() == ProjInvoiceSearchSelectionFilter::FundingSource
                && !SelectProjInvoiceProjId.text()
                && invoiceFundingSource.AccountNum != "@SYS14437")
            {
                Query query = new Query();

                SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(ProjTable), this);
                sysTableLookup.addLookupfield(fieldNum(Projtable, ProjId), true);

                QueryBuildDataSource projectDataSource = query.addDataSource(tableNum(ProjTable));

                switch (invoiceFundingSource.FundingType)
                {
                    case ProjFundingType::Grant :

                        QueryBuildDataSource grantFundingSourceDataSource = projectDataSource.addDataSource(tableNum(ProjFundingSource));
                        grantFundingSourceDataSource.joinMode(JoinMode::ExistsJoin);
                        grantFundingSourceDataSource.relations(false);
                        grantFundingSourceDataSource.addLink(fieldNum(ProjTable, ProjInvoiceProjId), fieldNum(ProjFundingSource, ContractId));

                        QueryBuildDataSource grantDataSource = grantFundingSourceDataSource.addDataSource(tableNum(ProjGrant));
                        grantDataSource.joinMode(JoinMode::ExistsJoin);
                        grantDataSource.relations(false);
                        grantDataSource.addLink(fieldNum(ProjFundingSource, ProjGrant), fieldNum(ProjGrant, RecId));

                        QueryBuildRange queryBuildRangeGrant = grantDataSource.addRange(fieldNum(ProjGrant, CustAccount));
                        queryBuildRangeGrant.value(invoiceFundingSource.AccountNum);
                        break;

                    case ProjFundingType::Customer :
                        QueryBuildDataSource customerFundingSourceDataSource = projectDataSource.addDataSource(tableNum(ProjFundingSource));
                        customerFundingSourceDataSource.joinMode(JoinMode::ExistsJoin);
                        customerFundingSourceDataSource.relations(false);
                        customerFundingSourceDataSource.addLink(fieldNum(ProjTable, ProjInvoiceProjId), fieldNum(ProjFundingSource, ContractId));

                        QueryBuildRange queryBuildRangeCustomer = customerFundingSourceDataSource.addRange(fieldNum(ProjFundingSource, CustAccount));
                        queryBuildRangeCustomer.value(invoiceFundingSource.AccountNum);
                        break;

                    case ProjFundingType::Organization :
                        QueryBuildDataSource organizationFundingSourceDataSource = projectDataSource.addDataSource(tableNum(ProjFundingSource));
                        organizationFundingSourceDataSource.joinMode(JoinMode::ExistsJoin);
                        organizationFundingSourceDataSource.relations(false);
                        organizationFundingSourceDataSource.addLink(fieldNum(ProjTable, ProjInvoiceProjId), fieldNum(ProjFundingSource, ContractId));

                        QueryBuildDataSource partyDataSource = organizationFundingSourceDataSource.addDataSource(tableNum(DirPartyTable));
                        partyDataSource.joinMode(JoinMode::ExistsJoin);
                        partyDataSource.relations(false);
                        partyDataSource.addLink(fieldNum(ProjFundingSource, Party), fieldNum(DirPartyTable, RecId));

                        QueryBuildRange queryBuildRangeOrganization = organizationFundingSourceDataSource.addRange(fieldNum(ProjFundingSource, Party));
                        queryBuildRangeOrganization.value(queryValue(invoiceFundingSource.Party));

                        QueryBuildRange queryBuildRangeOrganizationName = partyDataSource.addRange(fieldNum(DirPartyTable, Name));
                        queryBuildRangeOrganizationName.value(invoiceFundingSource.AccountNum);
                        break;
                }
                SysTableLookup.parmQuery(query);
                sysTableLookup.performFormLookup();
            }
            else
            {
                ProjOpsManagementLogger logger = ProjOpsManagementLogger::createLogger(formStr(ProjInvoiceProposalCreateLines));
                using (var activityContext = logger.projOpsManagementActivity().projTableLookupContext())
                {
                    Query query;
                    if (element.enableProjMultipleContractLinesForProjectFeature)
                    {
                        query = ProjTableLookup::buildQueryWithRanges([ProjType::None], selectProjInvoiceProjId.text());
                    }
                    else
                    {
                        query = ProjTableLookup::buildQueryWithRanges([ProjType::Time, ProjType::TimeMaterial, ProjType::FixedPrice], selectProjInvoiceProjId.text());
                    }

                    if (cdsLockingOptionCreateInvoiceProposals)
                    {
                        QueryBuildDataSource qbds1 = query.dataSourceNo(1);
                        QueryBuildDataSource qbds2 = qbds1.addDataSource(tableNum(ProjTable));
                        qbds2.addLink(fieldNum(ProjProjectLookup, ProjId), fieldNum(ProjTable, ProjId));
                        qbds2.joinMode(JoinMode::InnerJoin);
                        qbds2.addRange(fieldNum(ProjTable, ProjDataSource)).value(SysQuery::value(0));
                    }

                    SysTableLookup sysTableLookup = ProjTableLookup::createLookup(this, query);

                    sysTableLookup.performFormLookup();
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean     ret;
            ProjTable   projTableLocal;
        
            ret = super();

            if (ret)
            {
                if (selectProjId.text())
                {
                    projTableLocal = ProjTable::find(selectProjId.text());

                    element.initFromProjInvoiceTable(ProjInvoiceTable::find(projTableLocal.ProjInvoiceProjId));
                }
                else
                {
                    element.modifiedTransFilter();
                }

                element.enableProjectFilters();
            }
        
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            ProjTable projTableLocal;
            ProjFundingSource projFundingSource;
    
            boolean ret = super();
    
            if (this.text())
            {
                ProjId projIdLocal = selectProjId.text();

                select firstonly AccountNum, FundingType, Party from invoiceFundingSource where invoiceFundingSource.RecId == RefFundingSource.value();

                if (element.isProjInvoiceProposalSearchFundingSourceFunctionalityEnabled()
                    && RadioSearchSelection.selection() == ProjInvoiceSearchSelectionFilter::FundingSource
                    && invoiceFundingSource.AccountNum != "@SYS14437")
                {

                    switch (invoiceFundingSource.FundingType)
                    {
                        case ProjFundingType::Grant :
                            ProjGrant projGrant;

                            select firstonly ProjId from projTableLocal
                                where projTableLocal.ProjId == this.text()
                                exists join projFundingSource
                                where ProjTableLocal.ProjInvoiceProjId == projFundingSource.ContractId
                                exists join projGrant
                                where projGrant.CustAccount == invoiceFundingSource.AccountNum
                                    && projGrant.RecId == projFundingSource.ProjGrant;
                            break;

                        case ProjFundingType::Customer :
                            select firstonly ProjId from projTableLocal
                                where projTableLocal.ProjId == this.text()
                                exists join projFundingSource
                                where projFundingSource.ContractId == projTableLocal.ProjInvoiceProjId
                                    && projFundingSource.CustAccount == invoiceFundingSource.AccountNum;
                            break;

                        case ProjFundingType::Organization :
                            select firstonly ProjId from projTableLocal
                                where projTableLocal.ProjId == this.text()
                                exists join projFundingSource
                                where projFundingSource.Party == invoiceFundingSource.Party;
                            break;
                    }

                    if (!projTableLocal)
                    {
                        ret = checkFailed(strfmt("@Proj:ProjInvoiceProposalSearchFundingSourceProjectErrorMessage", this.text()));
                    }
                }

                projTableLocal = projTable::find(ProjIdLocal);

                if (!projTableLocal
                    || (projTableLocal.Type != ProjType::FixedPrice
                        && projTableLocal.Type != ProjType::Time
                        && projTableLocal.Type != ProjType::TimeMaterial
                        && !(element.enableProjMultipleContractLinesForProjectFeature && projTableLocal.ProjInvoiceProjId)))
                {
                    ret = checkFailed("@GLS360137");
                }

                ret = ret && element.validateProjectExternallyManaged(this.text());
            }
            
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TransTypeSelectionCtrl</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            element.performTransTypeSelectionCtrlLookup(this);
            element.updateTransTypeSelectionControl();
        }

]]></Source>
					</Method>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            super();
            this.lookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SelectStartDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Check if end date is less than start date.
        /// </summary>
        /// <returns>
        /// Return boolean value ,warning if the end date is less than start date.
        /// </returns>
        /// <exception cref="Exception::Error">
        /// Throws exception "Start data cannot be greater than end date".
        /// </exception>
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (SelectStartDate.dateValue() > SelectEndDate.dateValue()))
            {
                SelectStartDate.dateValue(dateNull());
                ret = checkfailed("@SYP4861264");
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SelectEndDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Validates end date is greater than current legal entity and greter than start date.
        /// </summary>
        /// <returns>
        /// Returns boolean value;True if end date is less than current legal entitydate; otherwise false.
        /// </returns>
        public boolean validate()
        {
            boolean     ret;

            ret = super();

            if (ret && (SelectEndDate.dateValue() > userTimeZoneDate))
            {
                SelectEndDate.dateValue(userTimeZoneDate);
                ret = checkFailed("@Proj:EndDateGreaterThanUserTimeZoneDate");
            }

            if (ret && (SelectEndDate.dateValue() < SelectStartDate.dateValue()))
            {
                SelectStartDate.dateValue(dateNull());
                ret = checkFailed("@SYP4861264");
            }

            if (SelectInvoiceDate.dateValue() < SelectEndDate.dateValue())
            {
                ret = checkFailed("@SYP4861265");
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DimensionSetName</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            DimensionHierarchySupportProvider::lookupDimensionSet(dimensionSetName, true, DimensionFocusBalanceInitializationState::Initialized);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean isValid;

            isValid = super();

            dimHier = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, dimensionSetName.text());
            
            if (dimHier == null && dimensionSetName.text() != '') // Blank dimension set name is valid
            {
                isValid = checkFailed(strFmt("@SYS333565", dimensionSetName.text()));
            }

            return isValid;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BtnDisplay</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            searchNow = true; // If the delay search option is on, this will force it to proceed despite the setting
            element.modifiedTransFilter();
            searchNow = false;// Return to standard behavior, suppressing searches on form load and field modified.
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SelectAll</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Select all transactions in the filter of the <c>psaTmpProjProposalTrans</c> datasource.
        /// </summary>
        void clicked()
        {
            super();

            invoiceAmount = 0;

            QueryRun localQueryRun;
            PSATmpProjProposalTrans localPSATmpProjProposalTrans;
            PSATmpProjProposalTrans refTransIdsBuffer;

            ttsbegin;
            localQueryRun = psaTmpProjProposalTrans_ds.queryRun();
            localQueryRun.reset();
            while (localQueryRun.next())
            {
                localPSATmpProjProposalTrans = localQueryRun.get(tableNum(PSATmpProjProposalTrans));
                if (localPSATmpProjProposalTrans.RefTransId)
                {
                    refTransIdsBuffer.clear();
                    refTransIdsBuffer.RefTransId = localPSATmpProjProposalTrans.RefTransId;
                    refTransIdsBuffer.insert();
                }
            }
            ttscommit;
            
            if (refTransIdsBuffer && proposalCreateLines)
            {
                proposalCreateLines.selectionChangedByTable(refTransIdsBuffer, NoYes::Yes, false);
                invoiceAmount = proposalCreateLines.transactionAmount(invoiceCurrency.text());
                element.updateTotalsDisplay();
                psaTmpProjProposalTrans_ds.research(true);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DeselectAll</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.deselectAll();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SelectAllPreBill</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Select all transactions in the filter of the <c>psaTmpProjProposalTransPreBill</c> datasource.
        /// </summary>
        void clicked()
        {
            super();

            QueryRun localQueryRun;
            PSATmpProjProposalTrans localPSATmpProjProposalTrans;
            PSATmpProjProposalTrans refTransIdsBuffer;

            ttsbegin;
            localQueryRun = psaTmpProjProposalTransPreBill_ds.queryRun();
            localQueryRun.reset();
            while (localQueryRun.next())
            {
                localPSATmpProjProposalTrans = localQueryRun.get(tableNum(PSATmpProjProposalTrans));
                if (localPSATmpProjProposalTrans.RefTransId)
                {
                    refTransIdsBuffer.clear();
                    refTransIdsBuffer.RefTransId = localPSATmpProjProposalTrans.RefTransId;
                    refTransIdsBuffer.insert();
                }
            }
            ttscommit;

            if (refTransIdsBuffer && proposalCreateLines)
            {
                proposalCreateLines.selectionChangedByTable(refTransIdsBuffer, NoYes::Yes, true);
                deductionAmount = proposalCreateLines.deductionAmount(invoiceCurrency.text());
                element.updateTotalsDisplay();
                psaTmpProjProposalTransPreBill_ds.executeQuery();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DeselectAllPreBill</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Deselect all transactions in the filter of the <c>psaTmpProjProposalTransPreBill</c> datasource.
        /// </summary>
        void clicked()
        {
            super();

            QueryRun localQueryRun;
            PSATmpProjProposalTrans localPSATmpProjProposalTrans;
            PSATmpProjProposalTrans refTransIdsBuffer;

            ttsbegin;
            localQueryRun = psaTmpProjProposalTransPreBill_ds.queryRun();
            localQueryRun.reset();
            while (localQueryRun.next())
            {
                localPSATmpProjProposalTrans = localQueryRun.get(tableNum(PSATmpProjProposalTrans));
                if (localPSATmpProjProposalTrans.RefTransId)
                {
                    refTransIdsBuffer.clear();
                    refTransIdsBuffer.RefTransId = localPSATmpProjProposalTrans.RefTransId;
                    refTransIdsBuffer.insert();
                }
            }
            ttscommit;

            if (refTransIdsBuffer && proposalCreateLines)
            {
                proposalCreateLines.selectionChangedByTable(refTransIdsBuffer, NoYes::No, true);
                deductionAmount = proposalCreateLines.deductionAmount(invoiceCurrency.text());
                element.updateTotalsDisplay();
                psaTmpProjProposalTransPreBill_ds.research();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitOnAccountOffset</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            ProjFundingSource   projFundingSource;

            PSAProjOnAccOffsetSplit splitTask = new PSAProjOnAccOffsetSplit();

            splitTask.parmTmpProjProposal(psaTmpProjProposalTransPreBill);

            if (selectFundingSource.valueStr() != "@SYS14437")
            {
                projFundingSource = ProjFundingSource::findContractFundingSource(selectProjInvoiceProjId.valueStr(), selectFundingSource.valueStr());
                splitTask.parmProjFundingSource(projFundingSource.RecId);
            }

            splitTask.runOperation();

            super();

            if (splitTask.hasSplitHappened())
            {
                if (proposalCreateLines)
                {
                    //Deduction transactions that are selected should be re-created with the current values.
                    proposalCreateLines.runDeductions();
                    psaTmpProjProposalTransPreBill.clear();
                    psaTmpProjProposalTransPreBill.setTmpData(proposalCreateLines.getProposalTransDisplayDeduction());
                    psaTmpProjProposalTransPreBill_ds.executeQuery();

                    deductionAmount = proposalCreateLines.deductionAmount(invoiceCurrency.text());
                    element.updateTotalsDisplay();
                }
                else
                {
                    element.modifiedTransFilter();
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>PSATmpProjProposalTrans</Name>
			<Table>PSATmpProjProposalTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>ActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>CapExempt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CapInvoiceAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>CategoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContractLineNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContractLineType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContractLineValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_EmplId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FixedExchRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>ForecastModelId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FundingSourceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FundingSourceRefId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FundingType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>IndirectAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>IndirectComponent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>IndirectComponentGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Interdependences</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceNow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsReleased</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsRetained</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>LineAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LinePropertyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalBudget</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Package</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PartOfInterdependences</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PercentInvoiceNow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreBilledAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjIdCapRoot</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>ProjInvoiceProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Purpose</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Qty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>RefRecIdCat</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>RefRecIdTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>RefTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Resource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RevisedBudget</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>SalesPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesUnit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Selected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ServiceEventGroup_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Task</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxInformation_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalBudget</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>TransactionOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>TransType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Txt</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<Index>SortIdx</Index>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>PSATmpProjProposalTransPreBill</Name>
			<Table>PSATmpProjProposalTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CapExempt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CapInvoiceAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CategoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContractLineNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContractLineType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContractLineValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_EmplId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FixedExchRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ForecastModelId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FundingSourceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FundingSourceRefId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FundingType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IndirectAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IndirectComponent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IndirectComponentGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Interdependences</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceNow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsReleased</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsRetained</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LinePropertyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalBudget</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Package</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PartOfInterdependences</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PercentInvoiceNow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreBilledAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjIdCapRoot</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Qty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecIdCat</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecIdTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Resource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RevisedBudget</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesUnit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Selected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ServiceEventGroup_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Task</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxInformation_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalBudget</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>DimensionAttributeValueSet</Name>
			<Table>DimensionAttributeValueSet</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_ValueSetHash1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_ValueSetHash2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_ValueSetHash3</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_ValueSetHash4</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_ValueSetHash5</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Hash</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MainAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MainAccountValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>PSATmpProjProposalTrans</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@GLS360216</Caption>
		<DialogSize xmlns="">Full</DialogSize>
		<Height xmlns="">0</Height>
		<HeightMode xmlns="">Column</HeightMode>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">DialogTabs</Pattern>
		<PatternVersion xmlns="">1.3</PatternVersion>
		<StatusBarStyle xmlns="">SimpleWithoutClose</StatusBarStyle>
		<Style xmlns="">Dialog</Style>
		<Width xmlns="">0</Width>
		<WidthMode xmlns="">Column</WidthMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>TopLevelActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<Style>Strip</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ProjectFilters</Name>
				<ElementPosition>536870910</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>DisplayAvailableGroup</Name>
						<Type>Group</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>DisplayAutomatically</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>CheckBox</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>editDisplayAutomatically</DataMethod>
								<Label>@Proj:ProjInvoiceCreate_DisplayAvailableTrans</Label>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalRight</ArrangeMethod>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>GroupProjInvoiceSearchSelectionFilter</Name>
						<Type>Group</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRadioButtonControl">
								<Name>RadioSearchSelection</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>RadioButton</Type>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Caption>@Proj:ProjInvoiceProposalSearchFundingSourceSearchCaption</Caption>
								<Columns>2</Columns>
								<EnumType>ProjInvoiceSearchSelectionFilter</EnumType>
								<Items />
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>TransFilters</Name>
						<ElementPosition>1288490187</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>ProjInvoiceTypeSelection</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<EnumType>ProjInvoiceTypeSelection</EnumType>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>SelectInvoiceDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>ProjInvoicePorposalInvoiceDateSelection</ExtendedDataType>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>RefFundingSource</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<EnableFormRef>No</EnableFormRef>
								<Type>ReferenceGroup</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<HideIfEmpty>No</HideIfEmpty>
								<ExtendedDataType>ProjInvoiceFundingSourceRecId</ExtendedDataType>
								<Label>@GLS360119</Label>
								<ReplacementFieldGroup>AutoLookup</ReplacementFieldGroup>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SelectFundingSource</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>ProjFundingSourceId</ExtendedDataType>
								<Label>@GLS360119</Label>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Event_IN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>IN</CountryRegionCodes>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>Events_IN</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ReasonCode</Name>
								<CountryRegionCodes>CZ,EE,HU,PL,LT,LV</CountryRegionCodes>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>editReasonCode</DataMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ReasonComment</Name>
								<CountryRegionCodes>CZ,EE,HU,PL,LT,LV</CountryRegionCodes>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>editReasonComment</DataMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SelectProjInvoiceProjId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@PSA143</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SelectProjId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS35246</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>CheckBoxIncludeSubProjects</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS321414</Label>
								<Value>1</Value>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>TransTypeSelectionCtrl</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@Proj:TransactionTypes</Label>
								<LookupButton>Always</LookupButton>
								<LookupOnly>Yes</LookupOnly>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>SelectStartDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>ProjInvoiceProposalStartDateSelection</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>SelectEndDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>ProjInvoiceProposalEndDateSelection</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>DimensionSetName</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>DimensionSetName</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@Proj:SelectTransactions</Caption>
						<Style>BorderedGroup</Style>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>SearchButtonGroup</Name>
						<HeightMode>Auto</HeightMode>
						<Type>ButtonGroup</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ProjInvoiceProposalPendingTrans</Name>
								<ElementPosition>2040109463</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>ProjInvoiceProposalPendingTrans</MenuItemName>
								<OpenMode>View</OpenMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>BtnDisplay</Name>
								<ElementPosition>1073741820</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MultiSelect>Yes</MultiSelect>
								<Text>@SYS116636</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalRight</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<FrameType>GroupedFieldsLabel</FrameType>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>TransactionsTab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TransactionsTabPage</Name>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>InvoiceTransactionsActionPane</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneTabControl">
										<Name>InvoiceTransactionsActionPaneTab</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPaneTab</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>ButtonGroupTrans</Name>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Left>0</Left>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>SelectAll</Name>
														<ElementPosition>1288490187</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<Text>@SYS28958</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>DeselectAll</Name>
														<ElementPosition>1717986916</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<Text>@SYS152646</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>PSAIndirectComponentTrans</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1932735281</ElementPosition>
														<Enabled>No</Enabled>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>MenuFunctionButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataSource>PSATmpProjProposalTrans</DataSource>
														<MenuItemName>PSAIndirectComponentTrans</MenuItemName>
														<MultiSelect>No</MultiSelect>
														<Text>@PSA11466</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>InvoiceTransactions</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>PSATmpProjProposalTrans_Selected</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>239556156</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_ProjectManagementAndAccounting:ProjInvoiceProposalCreateLines_PSATmpProjProposalTrans_Selected</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>Selected</DataField>
										<DataSource>PSATmpProjProposalTrans</DataSource>
										<Label>@SYS4110542</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>PSATmpProjProposalTrans_TransType</Name>
										<ElementPosition>359334234</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransType</DataField>
										<DataSource>PSATmpProjProposalTrans</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>PSATmpProjProposalTrans_TransactionOrigin</Name>
										<ElementPosition>437450372</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransactionOrigin</DataField>
										<DataSource>PSATmpProjProposalTrans</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PSATmpProjProposalTrans_ProjId</Name>
										<ElementPosition>515566510</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjId</DataField>
										<DataSource>PSATmpProjProposalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PSATmpProjProposalTrans_ActivityNumber</Name>
										<ElementPosition>539001351</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ActivityNumber</DataField>
										<DataSource>PSATmpProjProposalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>PSATmpProjProposalTrans_TransDate</Name>
										<ElementPosition>562436193</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransDate</DataField>
										<DataSource>PSATmpProjProposalTrans</DataSource>
										<Label>@SYS2282</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PSATmpProjProposalTrans_Txt</Name>
										<ElementPosition>664697319</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>150</Width>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Txt</DataField>
										<DataSource>PSATmpProjProposalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>PSATmpProjProposalTrans_Resource</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<FilterExpression>%1</FilterExpression>
										<Type>ReferenceGroup</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataSource>PSATmpProjProposalTrans</DataSource>
										<ReferenceField>Resource</ReferenceField>
										<ReplacementFieldGroup>ResourceId</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PSATmpProjProposalTrans_ResourceId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>ResourceId</DataField>
										<DataSource>PSATmpProjProposalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PSATmpProjProposalTrans_ResourceName</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>ResourceName</DataField>
										<DataSource>PSATmpProjProposalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PSATmpProjProposalTrans_CurrencyCode</Name>
										<ElementPosition>766958445</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyCode</DataField>
										<DataSource>PSATmpProjProposalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PSATmpProjProposalTrans_Category</Name>
										<ElementPosition>920350134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CategoryId</DataField>
										<DataSource>PSATmpProjProposalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>PSATmpProjProposalTrans_Qty</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1124872386</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Qty</DataField>
										<DataSource>PSATmpProjProposalTrans</DataSource>
										<Label>@SYS102891</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>PSATmpProjProposalTrans_SalesPrice</Name>
										<ElementPosition>1329394638</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>SalesPrice</DataField>
										<DataSource>PSATmpProjProposalTrans</DataSource>
										<Label>@SYS23884</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>PSATmpProjProposalTrans_IndirectAmount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1508351608</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>IndirectAmount</DataField>
										<DataSource>PSATmpProjProposalTrans</DataSource>
										<Label>@PSA11598</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>PSATmpProjProposalTrans_LineAmount</Name>
										<ElementPosition>1687308579</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LineAmount</DataField>
										<DataSource>PSATmpProjProposalTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PSATmpProjProposalTrans_SalesUnit</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>SalesUnit</DataField>
										<DataSource>PSATmpProjProposalTrans</DataSource>
										<Label>@SYS79797</Label>
									</AxFormControl>
								</Controls>
								<DataSource>PSATmpProjProposalTrans</DataSource>
								<ShowRowLabels>No</ShowRowLabels>
								<VisibleRows>10</VisibleRows>
								<VisibleRowsMode>Fixed</VisibleRowsMode>
							</AxFormControl>
						</Controls>
						<Caption>@SYS59212</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>AdvancesTabPage</Name>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>AdvancesActionPane</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneTabControl">
										<Name>ActionPaneTab</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPaneTab</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>ButtonGroup</Name>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Left>0</Left>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>SelectAllPreBill</Name>
														<ElementPosition>858993458</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<Text>@SYS28958</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>DeselectAllPreBill</Name>
														<ElementPosition>1288490187</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<Text>@SYS152646</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>SplitOnAccountOffset</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1717986916</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<NeedsRecord>Yes</NeedsRecord>
														<Text>@GLS360140</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<DataSource>PSATmpProjProposalTransPreBill</DataSource>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Caption>@PSA11596</Caption>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>AdvancesGrid</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>PSATmpProjProposalTransBill_Selected</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>536870910</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_ProjectManagementAndAccounting:ProjInvoiceProposalCreateLines_PSATmpProjProposalTransBill_Selected</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>Selected</DataField>
										<DataSource>PSATmpProjProposalTransPreBill</DataSource>
										<Label>@SYS4110542</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>PSATmpProjProposalTransPreBill_TransDate</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>805306365</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransDate</DataField>
										<DataSource>PSATmpProjProposalTransPreBill</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PSATmpProjProposalTransPreBill_ActivityNumber</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1073741820</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ActivityNumber</DataField>
										<DataSource>PSATmpProjProposalTransPreBill</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>PSATmpProjProposalTransPreBill_TransactionOrigin</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1342177275</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransactionOrigin</DataField>
										<DataSource>PSATmpProjProposalTransPreBill</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PSATmpProjProposalTransPreBill_Txt</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1610612730</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Txt</DataField>
										<DataSource>PSATmpProjProposalTransPreBill</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>PSATmpProjProposalTransPreBill_LineAmount</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1879048185</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LineAmount</DataField>
										<DataSource>PSATmpProjProposalTransPreBill</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<DataSource>PSATmpProjProposalTransPreBill</DataSource>
								<ShowRowLabels>No</ShowRowLabels>
								<VisibleCols>6</VisibleCols>
								<VisibleColsMode>Fixed</VisibleColsMode>
								<VisibleRows>5</VisibleRows>
								<VisibleRowsMode>Fixed</VisibleRowsMode>
							</AxFormControl>
						</Controls>
						<Caption>@Proj:AdvancesAndDeductions</Caption>
						<Style>DetailsFormLinesPanel</Style>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>InvoiceSummary</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1879048185</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>TotalInvoiceValue</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>715827882</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>Amount</ExtendedDataType>
						<Label>@PSA11030</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>TotalDeductions</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>Amount</ExtendedDataType>
						<Label>@PSA11031</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>NetInvoiceValue</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>Amount</ExtendedDataType>
						<Label>@PSA11032</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>InvoiceCurrency</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1789569705</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS7572</Label>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>CommitButtonGroup</Name>
				<ElementPosition>1908874352</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CreateProposal</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>