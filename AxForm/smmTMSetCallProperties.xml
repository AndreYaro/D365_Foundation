<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>smmTMSetCallProperties</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
    [Form]
    public class smmTMSetCallProperties extends FormRun
    {
        smmTMCallListTable      smmTMCallListTable;
        smmParameters           smmParameters;
        smmTMCallStatus         status;
        smmTMCallPlannedDateTime planDateTime;
        smmActivityPurpose      activityPurpose;
        smmActivityUserMemo     activityUserMemo;
        smmTMCallListTable      smmTMCallListTableUpdate;
        FormDataSource          formDataSource;
        smmActivityStartTime    startTime;
        smmActivityStartTime    durationTime;
        smmPhone                numberCalled;
        smmTMReasonId           reasonId;
        boolean                 clickedOk;
        boolean                 opendedByMenuFunction;
        boolean                 changeStatusClosed;
        caseYesNoPrompt         createActivity;

        #localmacro.PackedList
            status,
            planDateTime,
            activityPurpose,
            activityUserMemo,
            clickedOk
        #endmacro
}
]]></Source>
			</Method>
			<Method>
				<Name>createActivity</Name>
				<Source><![CDATA[
    smmActivityId createActivity(smmActivityNumber _smmActivityNumber = '')
    {
        date dt = DateTimeUtil::date(plannedDateTime.dateTimeValue());

        // Create activity and return the activity id
        return smmPhoneUtilities::createActivity(smmTMCallListTable.ContactPersonId,            // Contactperson id
                                                 smmTMCallListTable.Party,              // The latter contacts business relation account
                                                 phonePurpose.text(),                           // Set subject
                                                 memo.text(),                                   // Set memo text
                                                 smmActivitiesCategory.selection(),             // Set category
                                                 DateTimeUtil::newDateTime(dt,plannedTime.value()),         // Sets start date of the activity
                                                 DateTimeUtil::newDateTime(dt,smmActivitiesEndTime.value()),                  // Sets the end time (start time + 1 hour) of the appointment
                                                 smmTMCallListTable.CallListId,                 // Set call list id on the activity
                                                 smmPhoneCallType::OutboundCall,                // Set call type to outbound call
                                                 smmTMCallListTable.CallRespWorker,             // Set responsible worker
                                                 createActivity,                                // Set whether activity is created by advanced prompt
                                                 smmActivitiesTypeId.text(),                    // Set type
                                                 smmActivitiesPhaseId.text(),                   // Set phase
                                                 smmActivitiesTaskPriority.selection(),         // Set priority
                                                 smmActivitiesPlanId.text(),                    // Set plan
                                                 smmActivitiesLocation.text(),                  // Set location
                                                 smmActivitiesReminderActive.value(),           // Set reminder active checkbox
                                                 smmActivitiesReminderMinutes.value(),          // Set reminder minutes
                                                 _smmActivityNumber)                            // Set activity if need to be updated
                                                 .ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPhoneLog</Name>
				<Source><![CDATA[
    void createPhoneLog(smmActivityId _activityId = '')
    {
        // Create a entry in the phone log
        smmPhoneUtilities::createPhoneLog(startTime,                              // Starttime if the call
                                          durationTime,                           // Endtime of the call
                                          smmPhoneCallType::OutboundCall,         // Type of call; inbound or outbound
                                          numberCalled,                           // Phonenumber
                                          smmTMCallListTable.ContactPersonId,     // Contactperson id
                                          smmTMCallListTable.Party,       // The contacts business relation account
                                          _activityId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        smmActivities           smmActivities;
        smmParametersTable      smmParametersTable;
        smmTMActivityVariables  tmActivityVariables;
        HcmWorker               hcmWorker;
        OutlookUserSetup        outlookUserSetup;

        super();

        // Set default planned date and time to todays date and current time
        plannedDateTime.dateTimeValue(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone()));
        plannedTime.value(DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()));
        smmActivitiesEndTime.value(DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()));

        // Get default call back activity type from CRM parameters
        phonePurpose.text(smmParameters::getTMCallBackActivityPurpose());

        element.toggleActivityFields();

        if (element.args().parmObject())
        {
            tmActivityVariables   = element.args().parmObject();
            opendedByMenuFunction = tmActivityVariables.getOpenedByMenuFunction();
            startTime             = tmActivityVariables.getStartTime();
            durationTime          = tmActivityVariables.getDurationTime();
            numberCalled          = tmActivityVariables.getPhone();
            changeStatusClosed    = tmActivityVariables.getChangeClosed();
        }

        if (element.args().record())
        {
            if (element.args().record().TableId == smmTMCallListTable.TableId)
            {
                formDataSource      = FormDataUtil::getFormDataSource(element.args().record());
                smmTMCallListTable  = element.args().record();

                // Set default planned date as Call lists planned date
                plannedDateTime.dateTimeValue(DateTimeUtil::applyTimeZoneOffset(smmTMCallListTable.CallPlannedDateTime, DateTimeUtil::getUserPreferredTimeZone()));

                if (changeStatusClosed)
                {
                    tmStatus.selection(smmTMCallStatus::Closed);
                }
                else
                {
                    tmStatus.selection(smmTMCallStatus::CallBack);
                    if (smmTMCallListTable.CallbackActivityId)
                    {
                        smmActivities = smmActivities::find(smmTMCallListTable.CallbackActivityId);
                        phonePurpose.text(smmActivities.Purpose);
                        smmActivitiesCategory.selection(smmActivities.Category);
                        smmActivitiesTypeId.text(smmActivities.TypeId);
                        smmActivitiesPhaseId.text(smmActivities.PhaseId);
                        smmActivitiesReminderActive.value(smmActivities.ReminderActive);
                        smmActivitiesReminderMinutes.value(smmActivities.ReminderMinutes);
                        smmActivitiesTaskPriority.selection(smmActivities.TaskPriority);
                    }
                    else
                    {
                        smmParametersTable = smmParametersTable::find();
                        hcmWorker          = hcmWorker::find(smmTMCallListTable.CallRespWorker);
                        outlookUserSetup   = outlookUserSetup::findByWorker(hcmWorker.RecId);

                        phonePurpose.text(smmParametersTable.tmCallBackActivityPurpose);
                        smmActivitiesCategory.selection(smmParametersTable.tmCallBackActivityCategory);
                        smmActivitiesTypeId.text(smmParametersTable.tmCallbackActivityType);
                        smmActivitiesPhaseId.text(smmParametersTable.tmCallBackActivityPhase);
                        plannedTime.value(outlookUserSetup.ActivityStartTime);
                        smmActivitiesEndTime.value(outlookUserSetup.ActivityEndTime);
                        smmActivitiesReminderMinutes.value(outlookUserSetup.ActivityReminderMinutes);
                        if (smmActivitiesReminderMinutes.value() > 0)
                        {
                            smmActivitiesReminderActive.value(true);
                        }
                        else
                        {
                            smmActivitiesReminderActive.value(false);
                        }
                        smmActivitiesTaskPriority.selection(smmActivityPriority::Normal);
                    }
                }

                tmStatus.enabled(false);

                if (opendedByMenuFunction)
                {
                    tmStatus.enabled(true);
                    tmStatus.selection(smmTMCallListTable.CallStatus);
                }

                element.toggleActivityFields();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnTMStatus</Name>
				<Source><![CDATA[
    public container returnTMStatus()
    {
        return [#PackedList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecord</Name>
				<Source><![CDATA[
    void setRecord(Common _common, boolean _enableCallStatus = true)
    {
        if (_common)
        {
            if (_common.TableId == smmTMCallListTable.TableId)
            {
                smmTMCallListTable = _common;

                if (smmTMCallListTable.CallStatus == smmTMCallStatus::CallBack)
                {
                    tmStatus.selection(smmTMCallStatus::CallBack);
                }

                if (!_enableCallStatus)
                {
                    tmStatus.enabled(false);
                }

                element.toggleActivityFields();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toggleActivityFields</Name>
				<Source><![CDATA[
    void toggleActivityFields()
    {
        if (tmStatus.selection() == smmTMCallStatus::CallBack)
        {
            callBackActivityCtrl.visible(true);

            plannedDateTime.enabled(true);
            activityData.visible(true &&  smmParametersTable::find().CallBackCreateActivity == smmCreateActivity::AdvancedPrompt);
        }
        else
        {
            callBackActivityCtrl.visible(false);

            plannedDateTime.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCallListTable</Name>
				<Source><![CDATA[
    boolean updateCallListTable()
    {
        smmActivityId   activityId;
        date            dt;
        date            dtPlan = DateTimeUtil::date(plannedDateTime.dateTimeValue());

        ttsbegin;

        smmTMCallListTableUpdate = smmTMCallListTable::findCallListContact(smmTMCallListTable.CallListId, smmTMCallListTable.ContactPersonId, true);

        smmTMCallListTableUpdate.CallStatus = tmStatus.selection();

        // Clear reason cancelled on the call
        smmTMCallListTableUpdate.ReasonId = '';

        createActivity = caseYesNoPrompt::No;

        if (smmTMCallListTableUpdate.CallStatus == smmTMCallStatus::Closed || smmTMCallListTableUpdate.CallStatus == smmTMCallStatus::Cancelled)
        {
            smmTMCallListTableUpdate.CallActualDateTime     = DateTimeUtil::getSystemDateTime();
            smmTMCallListTableUpdate.CallActualWorker       = smmUtility::getCurrentContactWorker();

            if (smmTMCallListTable.CallStatus == smmTMCallStatus::Closed && opendedByMenuFunction)
            {
                dt = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(smmTMCallListTable.CallActualDateTime, DateTimeUtil::getUserPreferredTimeZone()));
                smmTMCallListTable.CallActualDateTime = DateTimeUtil::newDateTime(dt, startTime, DateTimeUtil::getUserPreferredTimeZone());
                smmTMCallListTable.CallActualDuration = durationTime;
            }
        }
        else
        if (smmTMCallListTableUpdate.CallStatus == smmTMCallStatus::CallBack)
        {
            smmTMCallListTableUpdate.CallPlannedDateTime = DateTimeUtil::newDateTime(dtPlan, plannedTime.value(), DateTimeUtil::getUserPreferredTimeZone());

            createActivity = smmActivities::shouldActivityBeCreated(smmTMCallListTableUpdate);
        }

        if (smmTMCallListTableUpdate.validateWrite())
        {
            // Should an activity be created to reminder the used of the call back
            if (createActivity == CaseYesNoPrompt::Yes || createActivity == CaseYesNoPrompt::Prompt)
            {
                // Check if call list target activity exists
                if (smmTMCallListTableUpdate.CallbackActivityId)
                {
                    // Call list target activity already exists.Update the call list target activity ?
                    if (Box::yesNo("@SYS90540", DialogButton::Yes, "@SYS90541") == DialogButton::No)
                    {
                        smmTMCallListTableUpdate.closeCallListTargetActivity();
                        smmTMCallListTableUpdate.CallbackActivityId = '';
                    }
                }
                // Create the activity and save the activity id on the call
                activityId                                  = element.createActivity(smmTMCallListTableUpdate.CallbackActivityId);
                smmTMCallListTableUpdate.CallbackActivityId = activityId;
            }
            smmTMCallListTableUpdate.update();
        }

        ttscommit;

        if (opendedByMenuFunction)
        {
            // Create entry in the phone log
            element.createPhoneLog(activityId);
        }

        // Refresh caller form data source
        formDataSource.reread();

        return true;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>TMStatus</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        boolean modified()
        {
            boolean ret;

            ret = super();

            element.toggleActivityFields();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PlannedDateTime</Name>
				<Type>DateTime</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean                  ret;
            smmTMCallListGroup       smmTMCallListGroup;
            smmTMCallPlannedDateTime planDT = DateTimeUtil::removeTimeZoneOffset(this.dateTimeValue(), DateTimeUtil::getUserPreferredTimeZone());

            ret = super();
            smmTMCallListGroup = smmTMCallListGroup::find(smmTMCallListTable.CallListId);
            // Is planned date before call list start date or after call list end date
            if (ret && planDT < smmTMCallListGroup.FromDateTime || planDT > smmTMCallListGroup.ToDateTime)
            {
                // Planned date must be in the call list period
                ret = checkFailed("@SYS89031");
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>smmActivitiesCategory</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && tmStatus.selection() == smmTMCallStatus::CallBack && this.selection() == smmActivityCategory::Appointment)
            {
                ret = checkFailed("@SYS90483");
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OK</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            smmTMCallListGroup       smmTMCallListGroup;
            smmTMCallPlannedDateTime planDT = DateTimeUtil::removeTimeZoneOffset(plannedDateTime.dateTimeValue(), DateTimeUtil::getUserPreferredTimeZone());
            smmTMCallListGroup = smmTMCallListGroup::find(smmTMCallListTable.CallListId);
            // Is planned date before call list start date or after call list end date
            if (tmStatus.selection() == smmTMCallStatus::CallBack &&
                planDT < smmTMCallListGroup.FromDateTime ||
                planDT > smmTMCallListGroup.ToDateTime)
            {
                // Planned date must be in the call list period
                throw error("@SYS89031");
            }
            if (element.updateCallListTable())
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@SYS81261</Caption>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<StatusBarStyle xmlns="">SimpleWithoutClose</StatusBarStyle>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CallStatus</Name>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>TMStatus</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<EnumType>smmTMCallStatus</EnumType>
						<Items />
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Caption>@SYS37380</Caption>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CallBackActivityCtrl</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormDateTimeControl">
						<Name>PlannedDateTime</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<Enabled>No</Enabled>
						<FilterExpression>%1</FilterExpression>
						<Type>DateTime</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DisplayOption>Date</DisplayOption>
						<ExtendedDataType>smmTMCallPlannedDateTime</ExtendedDataType>
						<Label>@SYS79979</Label>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Caption>@SYS80520</Caption>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ActivityData</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Identification</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>PhonePurpose</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>smmActivityPurpose</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>smmActivitiesCategory</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<EnumType>smmActivityCategory</EnumType>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>smmActivitiesTypeId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>smmActivityTypeId</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>smmActivitiesPhaseId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2013265918</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>smmActivityPhaseId</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>smmActivitiesTaskPriority</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2080374782</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<EnumType>smmActivityPriority</EnumType>
								<Items />
							</AxFormControl>
						</Controls>
						<Caption>@SYS80392</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>MemberOf</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>smmActivitiesPlanId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>smmActivityPlanId</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS81044</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Location</Name>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>smmActivitiesLocation</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>smmActivityLocation</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS80395</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>AppointmentTime</Name>
						<ElementPosition>2013265918</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormTimeControl">
								<Name>PlannedTime</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Time</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>smmActivityStartTime</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormTimeControl">
								<Name>smmActivitiesEndTime</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Time</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>smmActivityEndTime</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS25816</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>TaskReminder</Name>
						<ElementPosition>2080374782</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>smmActivitiesReminderActive</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@SYS81310</HelpText>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS80397</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormIntegerControl">
								<Name>smmActivitiesReminderMinutes</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Integer</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>smmActivityReminderMinutes</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS80397</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Description</Name>
						<ElementPosition>2113929214</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Memo</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>smmActivityUserMemo</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS25589</Caption>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Top>0</Top>
				<TopMode>BottomEdge</TopMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OK</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Cancel</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>
