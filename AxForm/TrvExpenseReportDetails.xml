<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>TrvExpenseReportDetails</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class TrvExpenseReportDetails extends FormRun implements TrvIDimensionEnabled, TrvIUpdateEnabled, TrvIWorkflowEnabledForm
{
    NumberSeqFormHandler            numberSeqFormHandler;
    TrvVisibilityManager            trvVisibilityManager;
    TrvJustificationManager         trvJustificationManager;
    TrvNewExpenseReportParameter    newExpenseReportParameter;
    boolean                         ignoreSaveOperations = false;
    boolean                         recordImplicitlyCreated = false;
    TrvRequisitionNumber            trvReqNumber;
    TrvRequisitionTable             selectedTrvRequisitionTable;
    private const int               ShortcutSkippingResponse = 0;

}
]]></Source>
			</Method>
			<Method>
				<Name>numberSeqFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and returns an instance of the number sequence form handler.
    /// </summary>
    /// <returns>
    /// An instance of the number sequence handler for the form.
    /// </returns>
    public NumberSeqFormHandler numberSeqFormHandler()
    {
        if (!numberSeqFormHandler)
        {
            numberSeqFormHandler = NumberSeqFormHandler::newForm(TrvParameters::numRefExpNumber().NumberSequenceId,
                                                             element,
                                                             TrvExpTable_DS,
                                                             fieldNum(TrvExpTable,ExpNumber));
        }
        return numberSeqFormHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values with relevant data and visibilities for fields on the form.
    /// </summary>
    public void run()
    {
        super();

        if (element.args().record() && element.args().OpenMode() == OpenMode::Edit)
        {
            TrvExpTable.data(TrvExpTable::findRecId(element.args().record().RecId));
            TrvExpTable_DS.query().dataSourceName(tablestr(TrvExpTable)).addRange(fieldnum(TrvExpTable, RecId)).value(queryValue(element.args().record().RecId));
            if (TrvExpTable.isEditable())
            {
                element.design().caption("@SYS109451");
            }
            else
            {
                element.design().caption("@SYS112546");
            }
        }
        else if (element.args().openMode() == OpenMode::New)
        {
            TrvWorkerParameter trvWorkerParameter = newExpenseReportParameter.parmTrvWorkerParameter();
            if (newExpenseReportParameter 
                && trvWorkerParameter && trvWorkerParameter.parmHcmWorkerRecId())
            {
                TrvExpTable_DS.object(fieldNum(TrvExpTable, CreatingWorker)).setValue(trvWorkerParameter.parmHcmWorkerRecId());
                TrvExpTable_DS.object(fieldNum(TrvExpTable, FinalApprover)).setValue(TrvInterimFinalApproverHelper::getDefaultFinalApprover(trvWorkerParameter.parmHcmWorkerRecId()));
                TrvExpTable_CreatingWorker.visible(trvWorkerParameter.parmCreatingWorkerVisible());
                TrvExpTable_CreatingWorker.enabled(trvWorkerParameter.parmCreatingWorkerVisible());
            }
            else
            {
                throw error("@SYS22996");
            }

            TrvExpTable_DS.object(fieldNum(TrvExpTable, ApprovalStatus)).setValue(TrvAppStatus::Create);
            element.design().caption("@SYS109449");
        }

        if (newExpenseReportParameter && newExpenseReportParameter.parmCanSubmitImmediately())
        {
            OkButton.text("@SYS18701");
            OkButton.helpText("@Expense:CreateAndContinueHelpText");

            SubmitButton.visible(true);
        }

        if (newExpenseReportParameter && newExpenseReportParameter.parmExpenseLines() && !newExpenseReportParameter.parmExpenseLines().empty())
        {
            // Show warnings for expense lines that have already been submitted and won't be moved to new report
            newExpenseReportParameter.parmExpenseLines(TrvExpenseLineHelper::removeSubmittedExpenses(newExpenseReportParameter.parmExpenseLines()));
        }

        trvVisibilityManager = TrvVisibilityManagerFactory::construct(TrvExpTable, this, TrvExpTable_DS.name());
        trvVisibilityManager.setFieldVisibilities();
        element.setInterimFinalApproverFieldVisiblity();
        this.setTextAndVisibilityForAttestation();

        // Set the dialog size/width based on whether the dimensions control is visible, since the control needs more width.
        // If dimension fields are not visible, then we use the dialog size set in metadata.
        if (TrvExpTable_DefaultDimension.isVisible())
        {
            this.design().dialogSize(1);
            element.updateDefaultDimensionCurrentCompany();
        }

        // Visibility manager sets 'all' datasources to read only, not just expense report datasource.
        // Re-enable justification datasource.
        HeaderJustification_DS.allowEdit(true);

        trvJustificationManager = new TrvJustificationManager(TrvExpTable, MyJustification, SubmitterJustification, OtherJustifications, HeaderJustification_DS);
        trvJustificationManager.initJustifications(element.inViewMode()); // Initialize header justification datasource query.

        // Intercompany legal entity is only enabled when admin custom fields is set as Display and parameter is on.
        FormDataObject interCompanyFormDataObject = TrvExpTable_DS.object(fieldnum(TrvExpTable, InterCompanyLE));
        interCompanyFormDataObject.visible(interCompanyFormDataObject.visible() && TrvParameters::find().UseInterCompanyExpense);

        // Reset the the form focus to the first visible and editable field after the visibility and justification managers
        // set some fields as hidden.
        ExpenseReportFieldsGroup.setFocus();


        TrvExpTableTrvRequisitionTable  trvExpTableTrvRequisitionTable;
        TrvRequisitionTable trvRequisitionTable;

        select firstonly trvExpTableTrvRequisitionTable
            where trvExpTableTrvRequisitionTable.TrvExpTable == TrvExpTable.RecId;

        trvRequisitionTable = TrvRequisitionTable::find(trvExpTableTrvRequisitionTable.TrvRequisitionTable, false);
        if (trvRequisitionTable)
        {
            trvReqNumber = trvRequisitionTable.RequisitionNumber;
            MapTravelRequisition.text(trvReqNumber);
            TravelRequisitionAmount.text(TrvExpenseHelper::amountWithCurrencyCode(trvRequisitionTable.totalEstimate(), trvRequisitionTable.LegalEntity));
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>TrvNewExpenseReportParameter</c> passed to his form by the calling form.
    /// </summary>
    public void init()
    {
        super();
        newExpenseReportParameter = element.args().parmObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensionControlVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set dimension control's visibility as the visible and enabled method on data source field does not work for reference group.
    /// </summary>
    public void setDimensionControlVisibility()
    {
        FormDataObject formDataObject = TrvExpTable_DS.object(fieldnum(TrvExpTable, DefaultDimension));

        TrvExpTable_DefaultDimension.visible(formDataObject.visible());
        // Check allowEdit property on the data source instead of data field,
        // as it will be set to false when the expense report is not editable in visibility manager.
        TrvExpTable_DefaultDimension.allowEdit(TrvExpTable_DS.allowEdit() && formDataObject.allowEdit());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTextAndVisibilityForAttestation</Name>
				<Source><![CDATA[
    public void setTextAndVisibilityForAttestation()
    {
        TrvParameters trvParameters = TrvParameters::find();

        if (trvParameters.UseAntiCorruption)
        {
            TrvAntiCorruptionLanguageText translationText;

            if (TrvAccessHelper::isUserSubmitterOrDelegate(TrvExpTable))
            {
                select AttestationMessage from translationText where translationText.TrvParameter == trvParameters.RecId
                && translationText.LanguageId == xUserInfo::find().Language;

                if (translationText.AttestationMessage)
                {
                    SubmitterAttestation.visible(true);
                    SubmitterAttestationText.text(translationText.AttestationMessage);
                }
            }

            if (TrvExpTable.AntiCorruptionSubmitterFlag && TrvAccessHelper::isUserApprover(TrvExpTable))
            {
                select ApproverMessage from translationText where translationText.TrvParameter == trvParameters.RecId
                && translationText.LanguageId == xUserInfo::find().Language;

                if (translationText.ApproverMessage)
                {
                    ApproverAttestation.visible(true);
                    ApproverAttestationText.text(translationText.ApproverMessage);
                }
            }
        }
        else
        {
            SubmitterAttestation.visible(false);
            ApproverAttestation.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDefaultDimensionCurrentCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the Dimension Entry Control current company if it does not match with the expense line's legal entity name.
    /// </summary>
    private void updateDefaultDimensionCurrentCompany()
    {
        if (TrvExpTable_DefaultDimension.visible()
            && TrvExpTable_DefaultDimension.parmCompany() != TrvExpTable.defaultDimensionLegalEntityName())
        {
            TrvExpTable_DefaultDimension.parmCompany(TrvExpTable.defaultDimensionLegalEntityName());

            // Due to a limitation on the framework, executing TrvExpTable_DefaultDimension.reactivate() triggers a spurious
            // TrvExpTable save. The undesirable side effect is that a new record could be created if the user starts creating
            // a new expense report but then cancels. The ignoreSaveOperations flag is a workaround to this, allowing the
            // Dimension Entry Control to remain in this form.
            try
            {
                ignoreSaveOperations = true;
                TrvExpTable_DefaultDimension.reactivate();
            }
            finally
            {
                ignoreSaveOperations = false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCallerDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh the caller data source to reflect the recent changes made by the user in the form.
    /// </summary>
    private void refreshCallerDataSource()
    {
        FormDataSource callerEntityDataSource;

        if (element.args().record())
        {
            callerEntityDataSource = FormDataUtil::getFormDataSource(element.args().record());

            if (callerEntityDataSource)
            {
                // Update the caller form's entity.
                callerEntityDataSource.reread();
                callerEntityDataSource.refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the form and possibly bubble up the call.
    /// </summary>
    public void updateForm()
    {
        TrvIUpdateEnabled updateEnabledCaller;

        // There is nothing to refresh here, bubbling up the call.

        if (element.args())
        {
            updateEnabledCaller = element.args().caller() as TrvIUpdateEnabled;
            if (updateEnabledCaller)
            {
                updateEnabledCaller.updateForm();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInterimFinalApproverFieldVisiblity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visibility of the interim and final approver fields and buttons
    /// </summary>
    private void setInterimFinalApproverFieldVisiblity()
    {
        switch (TrvParameters::find().ApproverHierarchyDisplay)
        {
            case TrvApproverHierarchyFields::FinalApproverOnly:
                SetAsDefaultFinalApprover.visible(TrvExpTable.isEditable());
                FinalApprover.visible(true);
                break;

            case TrvApproverHierarchyFields::InterimAndFinalApprover:
                SelectInterimApprovers.visible(TrvExpTable.isEditable());
                SetAsDefaultFinalApprover.visible(TrvExpTable.isEditable());
                InterimApprovers.visible(true);
                FinalApprover.visible(true);
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachExpensesToReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attaches the expenses to the expense report
    /// </summary>
    /// <returns>
    /// True if expenses were successfully added to the report; otherwise, false
    /// </returns>
    public boolean attachExpensesToReport()
    {
        boolean areExpensesAttached;

        // If this is a new expense report, take care of attaching selected unreconciled items.
        if (element.args().openMode() == OpenMode::New && newExpenseReportParameter)
        {
            // Attach expense lines.
            if (newExpenseReportParameter.parmExpenseLines() && !newExpenseReportParameter.parmExpenseLines().empty())
            {
                // Set boolean to keep from new mode being set; which triggers an empty record
                areExpensesAttached = TrvExpenseLineHelper::attachToExpenseReport(trvExpTable.ExpNumber, newExpenseReportParameter.parmExpenseLines());
            }

            // Attach unreconciled expenses.
            if (newExpenseReportParameter.parmUnreconciledExpenses() && !newExpenseReportParameter.parmUnreconciledExpenses().empty())
            {
                // In case of exchange rate exception thrown, ensure that it is caught and process is not halted.
                try
                {
                    // If there are unattached unreconciled expenses, notify user.
                    areExpensesAttached = TrvUnreconciledExpenseHelper::attachToExpenseReport(trvExpTable.ExpNumber, newExpenseReportParameter.parmUnreconciledExpenses());

                    if (!areExpensesAttached)
                    {
                        checkFailed("@SYS4007663");
                    }
                }
                catch (Exception::Error)
                {
                    checkFailed("@SYS4007663");
                }
            }

            // Attach unreconciled receipts.
            if (newExpenseReportParameter.parmUnreconciledReceipts() && !newExpenseReportParameter.parmUnreconciledReceipts().empty())
            {
                TrvReceiptsHelper::transferReceipts(newExpenseReportParameter.parmUnreconciledReceipts(), trvExpTable);
            }
        }

        // Since records are auto-saved when focus is lost, we do not bind the justification field to the datasource.
        // Instead we want to save the justification on clicking ok in the slider.
        trvJustificationManager.saveJustification();

        return areExpensesAttached;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openDetailsPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Open the details for the expense report
    /// </summary>
    /// <param name = "_isNewOpenMode">
    /// Whether details page should be opened in new mode witn an empty record inserted
    /// </param>
    public void openDetailsPage(boolean _isNewOpenMode)
    {
        Args args = new Args();
        args.caller(element);
        args.record(trvExpTable);

        if (_isNewOpenMode)
        {
            args.openMode(OpenMode::New);
        }

        new MenuFunction(MenuItemDisplayStr(TrvExpenses), MenuItemType::Display).run(Args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowActionDone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Workflow event handler. Close the form when the expense report level workflow was executed.
    /// </summary>
    void workflowActionDone(TrvWorkflowAction actionType)
    {
        element.close();
        info(strFmt("@Expense:SuccessfulSubmitOfExpenseReport", TrvExpTable.ExpNumber));
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowActionFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Workflow event handler. Called when the workflow action fails.
    /// </summary>
    void workflowActionFailed(TrvWorkflowAction actionType)
    {
        error("@Expense:SubmissionFailedNavigateInstructions");
        SubmitButton.enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the record if it was implicitly created when cancelling the form.
    /// </summary>
    public void closeCancel()
    {
        if (recordImplicitlyCreated)
        {
            TrvExpTable.delete();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>task</Name>
				<Source><![CDATA[
    public int task(int _taskId)
    {
        if(TrvExpenseHelper::isTrvExpenseDisableCtrlUpCtrlDownShortCutsFlightEnabled())
        {
            #task
            switch(_taskId)
            {
                case #taskPrevRecord :
                case #taskPageDown :
                    return ShortcutSkippingResponse;
            }
        }
        return super(_taskId);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>TrvExpTable</Name>
				<Methods>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets the number sequence on create.
        /// </summary>
        /// <param name = "_append">
        /// The parameter determines insert relative to current cursor position.
        /// </param>
        public void create(boolean _append = false)
        {
            if (!ignoreSaveOperations)
            {
                super(_append);
                element.numberSeqFormHandler().formMethodDataSourceCreatePre();
                element.numberSeqFormHandler().formMethodDataSourceCreate();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        /// <summary>
        /// Handles the number sequence on delete.
        /// </summary>
        public void delete()
        {
            element.numberSeqFormHandler().formMethodDataSourceDelete();
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Handles the number sequence on write.
        /// </summary>
        public void write()
        {
            if (!ignoreSaveOperations)
            {
                element.numberSeqFormHandler().formMethodDataSourceWrite();

                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>interimApprovers</Name>
						<Source><![CDATA[
        /// <summary>
        /// Edit method for the interim approvers field
        /// </summary>
        /// <param name = "_set">If the value in the control changed</param>
        /// <param name = "_trvExpTable">Associated header record</param>
        /// <param name = "_approvers">Value in the field</param>
        /// <returns>Formatted list of approvers to display</returns>
        public display str interimApprovers(TrvExpTable _trvExpTable)
        {
            if (_trvExpTable.RecId)
            {
                return TrvInterimFinalApproverHelper::getInterimApproverList(TrvExpTable.RecId);
            }
            else
            {
                UserId userId = DirPersonUser::findParty(HcmWorker::find(_trvExpTable.CreatingWorker).DirPerson().RecId).User;
                return TrvInterimFinalApproverHelper::getDefaultInterimApproverList(userId);
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>CreatingWorker</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            /// <summary>
            /// Validates if current user has delegate access for the delegating worker.
            /// </summary>
            /// <returns>True, if current user has delegate access for the delegating worker; otherwise false.</returns>
            public boolean validate()
            {
                boolean ret;
        
                ret = super();

                if (TrvExpTable.CreatingWorker != HcmWorkerLookup::currentWorker())
                {
                    ret = TrvAppEmplSub::isDelegatingWorkerValidForUser(TrvExpTable.CreatingWorker, curUserId())? ret : checkFailed("@SYS4007720");
                }
        
                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>SelectInterimApprovers</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Clicking this button will trigger creation of the expense report and the the record is needed for the next form.
        /// If the record already exists, we supress the implicit save.
        /// </summary>
        public void clicked()
        {
            recordImplicitlyCreated = element.args().openMode() == OpenMode::New;

            if (!recordImplicitlyCreated)
            {
                ignoreSaveOperations = true;
            }

            super();

            ignoreSaveOperations = false;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTable_Txt2</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open expense report purposes lookup.
        /// </summary>
        public void lookup()
        {
            TrvExpenseLookupHelper::createExpenseReportPurposeLookup(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTable_Destination</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open lookup with expense report location.
        /// </summary>
        public void lookup()
        {
            TrvExpenseLookupHelper::createExpenseReportLocationLookup(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTable_InterCompanyLE</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Trigger a refresh on the current company of the Dimension Entry control after
        /// the user modifies the intercompany legal entity.
        /// </summary>
        /// <returns>The same value returned by super().</returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                element.updateDefaultDimensionCurrentCompany();
            }
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Lookup for the inter companies.
        /// </summary>
        public void lookup()
        {
            TrvExpenseLookupHelper::createInterCompanyLegalEntityLookup(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTable_ProjId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Trigger a refresh on the current company of the Dimension Entry control after
        /// the user modifies the project ID to account for the intercompany with project
        /// special case.
        /// </summary>
        /// <returns>The same value returned by super().</returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                element.updateDefaultDimensionCurrentCompany();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Lookup for project id, resticting the query to currently running projects.
        /// </summary>
        public void lookup()
        {
            TrvExpenseProjectHelper::createProjectLookup(TrvExpTable.CreatingWorker, this, '', TrvExpTable.intercompanyLegalEntityName(), TrvExpTable.LegalEntity);
        }

]]></Source>
					</Method>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        /// Opens the project details form based on the company context.
        /// </summary>
        public void jumpRef()
        {
            Args        args;
            FormRun     projTableForm;
            ProjTable   projTable;

            // We remove the call to super and handle the logic to open the project with the relevant company context.
            // super();

            // Change company to the legal entity of the expense.
            changecompany(TrvExpTable.intercompanyLegalEntityName())
            {
                projTable = ProjTable::find(TrvExpTable.ProjId);

                args = new Args();
                args.menuItemName(menuitemdisplaystr(ProjTable));
                args.record(projTable);
                args.name(formstr(ProjTable));
                args.openMode(OpenMode::View);

                projTableForm = classFactory.formRunClass(args);
                projTableForm.init();
                projTableForm.run();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SetAsDefaultFinalApprover</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets the current final approver as the default.
        /// </summary>
        public void clicked()
        {
            recordImplicitlyCreated = element.args().openMode() == OpenMode::New;

            if (!recordImplicitlyCreated)
            {
                ignoreSaveOperations = true;
            }

            TrvInterimFinalApproverHelper::setDefaultFinalApprover(TrvExpTable);

            super();

            ignoreSaveOperations = false;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MapTravelRequisition</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Lookup for travel requisitions with approval status 'Approved' and reconciliation status 'Open'.
        /// </summary>
        public void lookup()
        {
            HcmWorkerRecId hcmWorkerRecId;

            hcmWorkerRecId = newExpenseReportParameter != null ? newExpenseReportParameter.parmTrvWorkerParameter().parmHcmWorkerRecId() : TrvExpTable.CreatingWorker;

            TrvRequisitionLookupHelper::createRequisitionLookup(this, CompanyInfo::findDataArea(TrvExpTable.intercompanyLegalEntityName()).RecId, hcmWorkerRecId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Based on the field selection, Updates the field TravelRequisitionAmount with amount and currency code.
        /// </summary>
        /// <returns>The same value returned by super().</returns>
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
            
            if (ret)
            {
                
                if (trvReqNumber != MapTravelRequisition.text())
                {
                    trvReqNumber = MapTravelRequisition.text();

                    select firstonly selectedTrvRequisitionTable
                        where selectedTrvRequisitionTable.RequisitionNumber == trvReqNumber
                            && selectedTrvRequisitionTable.LegalEntity == CompanyInfo::findDataArea(trvExpTable.InterCompanyLE).RecId
                            && selectedTrvRequisitionTable.ReconciliationStatus == 0
                            && (selectedTrvRequisitionTable.CreatingWorker != HcmWorkerLookup::currentWorker()
                                || selectedTrvRequisitionTable.CreatingWorker == trvExpTable.CreatingWorker);

                    if (selectedTrvRequisitionTable)
                    {
                        ExpenseInstrumentationLogger logger = ExpenseInstrumentationLogger::createLogger(classStr(TrvSubmitExpenseReportToWorkflow));
                        ExpenseInstrumentationSubmitActivities submitActivities = ExpenseInstrumentationSubmitActivities::construct(logger);
                        ExpenseInstrumentationLoggerProperties properties = logger.properties();

                        using (var submitExpenseReportContext = submitActivities.expenseReportHeaderContext())
                        {
                            ret = TrvExpTable_DS.object(fieldNum(TrvExpTable, CreatingWorker)).validate();

                            ret = (ret && selectedTrvRequisitionTable.CreatingWorker == TrvExpTable.CreatingWorker) ? ret : checkFailed("@SYS4007720");

                            if (ret)
                            {
                                //set travel requisition amount
                                TravelRequisitionAmount.text(TrvExpenseHelper::amountWithCurrencyCode(selectedTrvRequisitionTable.totalEstimate(), selectedTrvRequisitionTable.LegalEntity));
                                TrvExpTable.setDefaultDimension(trvReqNumber);
                            }
                            else
                            {
                                TrvRequisitionLine trvRequisitionLine;
                                select firstonly trvRequisitionLine
                                    where trvRequisitionLine.TrvRequisitionTable == selectedTrvRequisitionTable.RecId;

                                logger.logInformation(strFmt('%1:%2, %3:%4', ExpenseInstrumentationLoggerProperties::ExpenseNum, trvExpTable.ExpNumber, "@SYS101461", ret));
                                submitActivities.addCustomProperty(submitExpenseReportContext, properties.propertyByTableRecord(trvRequisitionLine));
                            }
                        }
                    }
                    else
                    {
                        ret = checkFailed("@Expense:TravelRequisitionIsInvalid");
                    }
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SubmitButton</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            //Create expense report and attach expenses
            boolean areExpensesAttached = element.attachExpensesToReport();

            if (areExpensesAttached)
            {
                //Submit to workflow
                super();
            }
            else
            {
                error("@Expense:CannotSubmitEmptyExpenseReport");
                SubmitButton.enabled(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OkButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Redirects the user to expense lines page after creating a new expense report.
        /// </summary>
        public void clicked()
        {
            
            super();
            
            // Performs insert, update and delete on the linked table TrvExpTableTrvRequisitionTable
            TrvExpTable.changeRequisition(MapTravelRequisition.text(), selectedTrvRequisitionTable);
            
            boolean areExpensesAttached = element.attachExpensesToReport();

            if (element.args().openMode() == OpenMode::Edit)
            {
                element.refreshCallerDataSource();
            }

            // If this is a new record and save succeeded, navigate to the expense details page.
            if (element.args().openMode() == OpenMode::New && trvExpTable.RecId != 0)
            {
                element.openDetailsPage(element.args().openMode() == OpenMode::New && !areExpensesAttached);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>TrvExpTable</Name>
			<Table>TrvExpTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AntiCorruptionApproverFlag</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AntiCorruptionSubmitterFlag</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApprovalStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatingWorker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Destination</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FinalApprover</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyLE</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LegalEntity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreApprovalNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentHeader</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendAccount</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HeaderJustification</Name>
			<Table>TrvPolicyViolationJustification</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Action</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Justification</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JustifyingWorker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ViolatingRecord</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ViolationJustificationType</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TrvExpTable</JoinSource>
			<LinkType>Active</LinkType>
			<InsertAtEnd>No</InsertAtEnd>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS114728</Caption>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ExpenseReportFieldsGroup</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneControl">
						<Name>Toolbar</Name>
						<Type>ActionPane</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>ButtonGroup</Name>
								<Type>ButtonGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>SelectInterimApprovers</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>MenuFunctionButton</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<AutoRefreshData>Yes</AutoRefreshData>
										<DataSource>TrvExpTable</DataSource>
										<MenuItemName>TrvInterimApproversDialog</MenuItemName>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Style>Strip</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Content</Name>
						<Type>Group</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>MyJustification</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>TrvSubmitterJustification</ExtendedDataType>
								<Label>@SYS330348</Label>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SubmitterJustification</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>submitterJustification</DataMethod>
								<DataSource>TrvExpTable</DataSource>
								<Label>@SYS302375</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>OtherJustifications</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>approverJustification</DataMethod>
								<DataSource>TrvExpTable</DataSource>
								<Label>@SYS302370</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>TrvExpTable_CreatingWorker</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ReferenceGroup</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<DataSource>TrvExpTable</DataSource>
								<ReferenceField>CreatingWorker</ReferenceField>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>TrvExpTable_Txt2</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>Txt2</DataField>
								<DataSource>TrvExpTable</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>TrvExpTable_Destination</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>Destination</DataField>
								<DataSource>TrvExpTable</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>TrvExpTable_InterCompanyLE</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>InterCompanyLE</DataField>
								<DataSource>TrvExpTable</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>TrvExpTable_ProjId</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>ProjId</DataField>
								<DataSource>TrvExpTable</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>TrvExpTable_Txt1</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>Txt1</DataField>
								<DataSource>TrvExpTable</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>TrvExpTable_CustAccount</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>CustAccount</DataField>
								<DataSource>TrvExpTable</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>TrvExpTable_VendAccount</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>VendAccount</DataField>
								<DataSource>TrvExpTable</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>TrvExpTable_PreApprovalNumber</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>PreApprovalNumber</DataField>
								<DataSource>TrvExpTable</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>InterimApprovers</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>interimApprovers</DataMethod>
								<DataSource>TrvExpTable</DataSource>
								<Label>@Expense:InterimApprover</Label>
								<ReplaceOnLookup>No</ReplaceOnLookup>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FinalApproverGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>FinalApprover</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ReferenceGroup</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataSource>TrvExpTable</DataSource>
										<Label>@Expense:FinalApprover</Label>
										<ReferenceField>FinalApprover</ReferenceField>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>SetAsDefaultFinalApprover</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Button</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<Text>@Expense:SetAsDefaultFinalApprover</Text>
									</AxFormControl>
								</Controls>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SubmitterAttestation</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Group</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>SubmitterAttestationText</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>StaticText</Type>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>TrvExpTable_AntiCorruptionSubmitterFlag</Name>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>AntiCorruptionSubmitterFlag</DataField>
										<DataSource>TrvExpTable</DataSource>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ApproverAttestation</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Group</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>ApproverAttestationText</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>StaticText</Type>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>TrvExpTable_AntiCorruptionApproverFlag</Name>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>AntiCorruptionApproverFlag</DataField>
										<DataSource>TrvExpTable</DataSource>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
							</AxFormControl>
						</Controls>
						<Columns>2</Columns>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>MapTravelRequisitionGroup</Name>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>MapTravelRequisition</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataSource>TrvExpTable</DataSource>
						<Label>@SYS335111</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>TravelRequisitionAmount</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS335109</Label>
					</AxFormControl>
				</Controls>
				<Columns>2</Columns>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ExpenseReportContentGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>DimensionEntryControl</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>EmptyGroup</Name>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<ColumnsMode>Fill</ColumnsMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>DimensionFieldsGroup</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormContainerControl">
								<Name>TrvExpTable_DefaultDimension</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Container</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension>
									<Name>DimensionEntryControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>parmControllerClassName</Name>
											<Type>ExtendedDataType</Type>
											<TypeName>ClassName</TypeName>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmControlLabelText</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmEnumerationName</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmDataSourceName</Name>
											<Type>String</Type>
											<Value>TrvExpTable</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmValueSetReferenceField</Name>
											<Type>String</Type>
											<Value>DefaultDimension</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmEnumValueSetReferenceField</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<Controls />
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<HideIfEmpty>No</HideIfEmpty>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ExpenseReportsAction</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormMenuFunctionButtonControl">
						<Name>SubmitButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<HelpText>@Expense:CreateAndSubmitHelpText</HelpText>
						<Type>MenuFunctionButton</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<MenuItemName>TrvSubmit</MenuItemName>
						<MenuItemType>Action</MenuItemType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OkButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>