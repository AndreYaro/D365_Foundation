<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>LedgerJournalTransSimulation_IT</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class LedgerJournalTransSimulation_IT extends FormRun implements TaxIFormCorrectableTaxAmount, TaxIFormShowTax, IFormRefreshable, LedgerILedgerJournalEngineProvider, LedgerIJournalFormRefreshable, LedgerIJournalFormCache, LedgerIJournalCashDiscount, OfficeIMenuCustomizer, OfficeITemplateCustomExporter, LedgerIJournalForm
{
    public QueryBuildRange ledgerJournalTransRange;
    public LedgerJournalEngine ledgerJournalEngine;

    public LedgerJournalFormTrans journalFormTrans;

    public ImageListAppl_LedgerJournal imageListAppl;

    public DebCredProposal debCredProposal;
    public DebCredProposal debCredProposalOld;
    public LedgerJournalTable ledgerJournalTable;
    public LedgerBalanceMainAccountAmounts ledgerBalance;

    [FormObservable]
    public AmountMST balanceAmountMST;
    [FormObservable]
    public AmountCur balanceAmountCur;
    [FormObservable]
    public boolean bankSingleCurrency;

    [FormObservable]
    public TaxAmount correctedTaxAmountCur;
    public boolean correctedTaxAmountCurEdited;

    public LedgerJournalId journalNum;
    public TransDate virtualCashDiscDate;
    public VendCashDiscAmount virtualCashDiscAmount;

    public boolean cashDiscChanged;

    public LedgerJournalACType priorAccountType;

    public LedgerJournalTransEntityManager ledgerJournalTransEntityManager; // Used to manage entity-related tasks like in-memory rollbacks for aborted transactions.

    public MainAccountRecId currentMainAccountId;
    public MainAccountRecId previousMainAccountId;
    public MainAccountRecId currentOffsetMainAccountId;
    public DimensionAttributeRecId mainAccountDimAttr;

    public boolean bankLCEnabled;
    public boolean bankLCChargeEnabled;
    public BankLCLineNumController bankLCLineNumController;
    public BankLCImportNumberController bankLCImportNumberController;

    public BankLCImportMarkupLookupController_SA bankLCImportMarkupLookupController;
    public HcmWorkerLookup hcmWorkerLookupActiveCurrentCompany;

    public DueDate priorDueDate;
    public boolean keepSalesPriceOnWrite;

    public ReverseCharge_W reverseCharge;

}
]]></Source>
			</Method>
			<Method>
				<Name>activate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event that fires when focus is given to the form.
    /// </summary>
    /// <param name="_active">
    /// true if active; otherwise, false.
    /// </param>
    public void activate(boolean _active)
    {
        super(_active);

        journalFormTrans.manageEditingModeForApprovedWFApproval();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookRefresh</Name>
				<Source><![CDATA[
    public void bookRefresh(boolean _isClosing = false)
    {
        LedgerIJournalFormRefreshable callingForm = element.args().caller() as LedgerIJournalFormRefreshable;

        if (callingForm != null)
        {
            callingForm.refresh();
        }

        if (!_isClosing)
        {
            ledgerJournalTrans_ds.reread();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerRefresh</Name>
				<Source><![CDATA[
    public void callerRefresh()
    {
        ledgerJournalEngine.clearCorrectedTaxAmount(ledgerJournalTrans);
        ledgerJournalTrans_ds.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    public boolean canClose()
    {
        boolean canClose;

        try
        {
            // Signal that the close event is beginning.
            ledgerJournalTransEntityManager.getFormDataEventManager().beginFormCloseEvent();

            canClose = super();

            // Signal that the close event is finished.
            ledgerJournalTransEntityManager.getFormDataEventManager().endFormCloseEvent();
        }
        catch (Exception::UpdateConflict)
        {
            // This exception should not be handled by the generic handling logic below.

            // Signal that the close event is finished.
            ledgerJournalTransEntityManager.getFormDataEventManager().endFormCloseEvent();

            // Chain the exception forward.
            throw Exception::UpdateConflict;
        }
        catch
        {
            // Signal that the close event is finished.
            ledgerJournalTransEntityManager.getFormDataEventManager().endFormCloseEvent();

            // Chain the exception forward.
            throw Exception::Error;
        }

        return canClose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        this.updateJournalBalance();

        ledgerJournalEngine.close();
        ledgerJournalEngine.formMethodClosePre();
        journalFormTrans.formClosePre();
        element.bookRefresh(true);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonsActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables and disables various buttons.
    /// </summary>
    public void enableButtonsActive()
    {

        boolean enabled = journalFormTrans.isJournalEnabled();
        boolean changeBLWICodeEnabled = enabled 
            && (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust
                || ledgerJournalTrans.AccountType == LedgerJournalACType::Vend 
                || ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust 
                || ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend);

        if (journalFormTrans.parmIsActiveWFApprovalDocument())
        {
            boolean isUIElementWorkFlowApprovalEnabled = journalFormTrans.parmIsUIElementWFApprovalEnabled();
            enabled = enabled && isUIElementWorkFlowApprovalEnabled;
            changeBLWICodeEnabled = changeBLWICodeEnabled && isUIElementWorkFlowApprovalEnabled;
        }
        else
        {
            boolean aprovalEnabled = !ledgerJournalEngine.approved() || !ledgerJournalEngine.approveActive();
            enabled = enabled && aprovalEnabled;
            changeBLWICodeEnabled = changeBLWICodeEnabled && aprovalEnabled;
        }

        displayJournalLines.allowEdit(enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableFieldsActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the editable property of various datasource fields for the form.
    /// </summary>
    public void enableFieldsActive()
    {
        ledgerJournalTrans_ds.object(fieldNum(LedgerJournalTrans, ReverseDate)).allowEdit(ledgerJournalTrans.ReverseEntry ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterJournalLineErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs journal lines error links filtering.
    /// </summary>
    public void filterJournalLineErrors()
    {
        if (journalFormTrans.parmCheckPostResults())
        {
            LedgerPostingMessageLog ledgerPostingMessageCollection = journalFormTrans.parmCheckPostResults().parmLedgerPostingMessageLog();

            if (journalFormTrans.parmCheckPostResults().errorInJournalLine())
            {
                LedgerJournalTrans_Error::createJournalErrorLinks(ledgerJournalTrans.JournalNum, ledgerPostingMessageCollection);
            }

            QueryBuildDataSource qbds = ledgerjournaltrans_ds.query().dataSourceTable(tableNum(LedgerJournalTrans_Error));

            if (displayJournalLines.selection() == LedgerJournalLinesDisplayOption::ErrorsOnly)
            {
                if (qbds == null)
                {
                    QueryBuildDataSource ds = LedgerJournalTrans_Error::addDataSource(ledgerjournaltrans_ds.query().dataSourceTable(tableNum(LedgerJournalTrans)));
                }
                else
                {
                    qbds.enabled(true);
                }
            }
            else if (qbds)
            {
                    qbds.enabled(false);
            }

            ledgerJournalTrans_DS.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShowTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a tax object to use for displaying the temporary tax transactions for a single journal line.
    /// </summary>
    /// <returns>A tax object.</returns>
    public Tax getShowTax()
    {
        return ledgerJournalEngine.getShowTax(ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the basic initialization of the form.
    /// </summary>
    public void init()
    {
        journalFormTrans = new LedgerJournalFormTrans(element);

        mainAccountDimAttr = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

        super();

        LedgerJournalTrans_AccountNum.parmDimensionAutocompleteFilter(
            new DimensionAutocompleteVendDefaultFilter(ledgerJournalTrans_ds, fieldStr(LedgerJournalTrans, OffsetLedgerDimension), fieldStr(LedgerJournalTrans, OffsetAccountType)));

        LedgerJournalTrans_OffsetAccount.parmDimensionAutocompleteFilter(
            new DimensionAutocompleteVendDefaultFilter(ledgerJournalTrans_ds, fieldStr(LedgerJournalTrans, LedgerDimension), fieldStr(LedgerJournalTrans, AccountType)));

        LedgerJournalTrans_AccountNum.parmPostingType(LedgerPostingType::LedgerJournal);

        LedgerJournalTrans_OffsetAccount.parmPostingType(LedgerPostingType::LedgerJournal);

        LedgerJournalTrans_AccountNum.parmValidateBlockedForManualEntry(true);

        LedgerJournalTrans_OffsetAccount.parmValidateBlockedForManualEntry(true);

        // Construct the entity manager to help manage entity-related tasks like in-memory rollbacks for aborted transactions.
        ledgerJournalTransEntityManager = LedgerJournalTransEntityManager::construct(ledgerJournalTrans_DS, null, null, null);

        if (!LedgerParameters::find().AcknowledgementDate_IT)
        {
            ledgerJournalTrans_AcknowledgementDate.visible(false);
        }

        journalFormTrans.parmCtrlVoucherGrid(ledgerJournalTrans_Voucher);
        journalFormTrans.parmCtrlVoucherTab(ledgerJournalTrans_Voucher1);
        journalFormTrans.parmCtrlTransDateGrid(ledgerJournalTrans_TransDate);
        journalFormTrans.parmCtrlTransDateTab(ledgerJournalTrans_TransDate);
        journalFormTrans.parmCtrlExchRate(fieldExchRate);
        journalFormTrans.parmCtrlExchRateSecond(fieldExchRateSecond);
        journalFormTrans.parmCtrlCourseButton(buttonCourse);
        journalFormTrans.parmCtrlReportAsReadyButton(buttonReportAsReady);
        journalFormTrans.parmCtrlApproveButton(buttonApprove);
        journalFormTrans.parmCtrlRejectButton(buttonReject);
        journalFormTrans.parmCtrlPostJournalButton(postJournal);
        journalFormTrans.parmCtrlCheckJournalMenu(buttonCheckJournal);
        journalFormTrans.parmCtrlVoucherTransButton(buttonVoucherTrans);
        journalFormTrans.parmCtrlBalanceControButton(buttonBalanceControl);
        journalFormTrans.parmCalculatedTaxAmount(taxAmountJournal1);

        journalFormTrans.formInitPost();

        this.initLedger();

        cashDiscChanged = false;
        imageListAppl = new ImageListAppl_LedgerJournal();
        errorExist.imageList(imageListAppl.imageList());

        if (TaxParameters::find().CashDiscOnInvoice)
        {
            ledgerJournalTrans_ds.object(fieldNum(LedgerJournalTrans, DateCashDisc)).visible(false);
        }
        else
        {
            ledgerJournalTrans_ds.object(fieldNum(LedgerJournalTrans, CashDiscPercent)).allowEdit(false);
        }

        // Disable the company accounts field on the general tab if Intercompany transactions are disabled
        if (!isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)))
        {
            ledgerJournalTrans_Company.allowEdit(false);
            TabCompany.allowEdit(false);
        }

        hcmWorkerLookupActiveCurrentCompany = HcmWorkerLookup::newOnlyActiveWorkersWithinCompany();

        keepSalesPriceOnWrite = false;

        displayJournalLines.selection(LedgerJournalLinesDisplayOption::All);

        reverseCharge = ReverseCharge_W::newParameters(ledgerJournalTrans, ledgerJournalTrans);
        ButtonVoucherTransSimulation1.enabled(!ledgerJournalTable.Posted);
        overviewGrid.setFocus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntracomVATDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>IntraComVATDueDate_W</c> field activity state.
    /// </summary>
    public void initIntracomVATDueDate()
    {
        ledgerJournalTrans_DS.object(fieldNum(LedgerJournalTrans, IntraComVATDueDate_W)).enabled(VendParameters::find().DocumentDateForIntracomVAT_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes ledger-related fields visibility, activity and values.
    /// </summary>
    public void initLedger()
    {
        TransDate dateFrom;
        TransDate dateTo = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (element.args().dataset() == tableNum(LedgerJournalTable))
        {
            ledgerJournalTable = element.args().record();

            journalNum = ledgerJournalTable.JournalNum;

            LedgerJournalTrans_AccountNum.parmJournalName(ledgerJournalTable.JournalName);

            LedgerJournalTrans_OffsetAccount.parmJournalName(ledgerJournalTable.JournalName);

            if (ledgerJournalTable.FixedOffsetAccount)
            {
                if (ledgerJournalTable.parmOffsetLedgerDimension() != 0)
                {
                    switch (ledgerJournalTable.OffsetAccountType)
                    {
                        case LedgerJournalACType::Ledger:
                            if (DimensionFocusBalanceUpdateByLedgerFlight::instance().isEnabled())
                            {
                                MainAccountEventArgs args = MainAccountEventArgs::construct();
                                args.parmBalanceLedgerRecId(Ledger::current());

                                MainAccount::updateBalancesWithArgs(args);
                            }
                            else
                            {
                                MainAccount::updateBalances();
                            }

                            ledgerBalance = LedgerBalanceMainAccountAmounts::construct();
                            ledgerBalance.parmIncludeRegularPeriod(true);
                            ledgerBalance.parmIncludeClosingPeriod(true);
                            ledgerBalance.parmAccountingDateRange(dateFrom, dateTo);
                            ledgerBalance.calculateBalance(LedgerDimensionFacade::getMainAccountFromLedgerDimension(ledgerJournalTable.OffsetLedgerDimension));
                            balanceAmountMST = ledgerBalance.getAccountingCurrencyBalance();
                            break;

                        case LedgerJournalACType::Bank:
                            bankSingleCurrency = BankAccountTable::isSingleCurrency(ledgerJournalTable.parmOffsetAccount(), ledgerJournalTable.JournalNum);

                            balanceAmountCur = BankAccountTrans::sumTransCur(ledgerJournalTable.parmOffsetAccount());
                            balanceAmountMST = BankAccountTrans::sumTransMST(ledgerJournalTable.parmOffsetAccount());

                            if (LedgerJournalName::find(ledgerJournalTable.JournalName).EndBalanceControl)
                            {
                                FixedOffsetBalanceEndControl.visible(true);
                            }

                            break;

                        case LedgerJournalACType::Cust:
                            balanceAmountMST = CustTrans::balanceMST(ledgerJournalTable.parmOffsetAccount());
                            break;

                        case LedgerJournalACType::Vend:
                            balanceAmountMST = VendTrans::balanceMST(ledgerJournalTable.parmOffsetAccount());
                            break;
                    }

                    OffsetBalance.visible(true);

                    ledgerJournalTrans_OffsetCompany.allowEdit(false);
                    TabOffsetCompany.allowEdit(false);
                }
                else
                {
                    OffsetBalance.visible(false);

                    ledgerJournalTrans_OffsetCompany.allowEdit(true);
                    TabOffsetCompany.allowEdit(true);
                }

                ledgerJournalTrans_OffsetType.allowEdit(false);
            }
            else
            {
                OffsetBalance.visible(false);

                ledgerJournalTrans_OffsetCompany.allowEdit(true);
                TabOffsetCompany.allowEdit(true);

                ledgerJournalTrans_OffsetType.allowEdit(true);
            }

            if (ledgerJournalTable.Posted)
            {
                ButtonPostJournal.enabled(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalForm</Name>
				<Source><![CDATA[
    public JournalForm journalForm()
    {
        return journalFormTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalEngine</Name>
				<Source><![CDATA[
    public LedgerJournalEngine ledgerJournalEngine()
    {
        return ledgerJournalEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTable</Name>
				<Source><![CDATA[
    public LedgerJournalTable ledgerJournalTable()
    {
        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostalAddressLocation</Name>
				<Source><![CDATA[
    public LogisticsLocationRecId parmPostalAddressLocation(LogisticsLocationRecId _postalAddressLocation = ledgerJournalTrans.RemittanceLocation)
    {
        ledgerJournalTrans.RemittanceLocation = _postalAddressLocation;
        return ledgerJournalTrans.RemittanceLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>research</Name>
				<Source><![CDATA[
    public void research()
    {
        ledgerJournalEngine.newJournalActive(ledgerJournalTable, true);

        ledgerJournalTrans_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refresh</Name>
				<Source><![CDATA[
    public void refresh()
    {
        element.research();
        ButtonVoucherTransSimulation1.enabled(!ledgerJournalTable.Posted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    public void clearCache(Voucher _voucher)
    {
        ledgerJournalEngine.clearTaxAmountCacheVoucher(_voucher, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCashDiscount</Name>
				<Source><![CDATA[
    public void updateCashDiscount(Voucher _voucher)
    {
        if (_voucher == ledgerJournalTrans.Voucher)
        {
            ledgerJournalEngine.updateCashDisc(ledgerJournalTrans);
        }
        else
        {
            LedgerJournalTrans journalTrans = LedgerJournalTrans::find(ledgerJournalTable.JournalNum, _voucher, false);
            ledgerJournalEngine.updateCashDisc(journalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCorrectedTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Set the value of the corrected tax amount within caller form
    /// </summary>
    /// <param name="_correctedTaxAmountCur">
    ///     corrected tax amount from sales tax form.
    /// </param>
    /// <remarks>
    ///     Method is used to set the corrected tax amount to caller form
    /// </remarks>
    public void setCorrectedTaxAmount(TaxAmount _correctedTaxAmountCur)
    {
        ledgerJournalEngine.correctTaxAmount(ledgerJournalTrans, _correctedTaxAmountCur, true, false);
        ledgerJournalTrans_ds.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDebCredProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets skip property for amount fields according to current <c>DebCredProposal</c> value.
    /// </summary>
    /// <param name = "_init">Determines if the value is initializing during method call.</param>
    public void setDebCredProposal(boolean _init)
    {
        if (_init)
        {
            debCredProposal = DebCredProposal::None;
        }

        if (debCredProposal != debCredProposalOld)
        {
            switch (debCredProposal)
            {
                case DebCredProposal::Credit :
                    ledgerJournalTrans_AmountCurDebit.skip(true);
                    break;

                case DebCredProposal::Debit :
                    ledgerJournalTrans_AmountCurCredit.skip(true);
                    break;

                case DebCredProposal::None :
                    ledgerJournalTrans_AmountCurCredit.skip(false);
                    ledgerJournalTrans_AmountCurDebit.skip(false);
                    break;
            }
            debCredProposalOld = debCredProposal;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisible</Name>
				<Source><![CDATA[
    public void setVisible()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates journal balance values.
    /// </summary>
    public void updateJournalBalance()
    {
        ledgerJournalTable.reread();
        ledgerJournalTable.setJournalBalance(ledgerjournaltrans_ds.ledgerJournalBalance());
        element.bookRefresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>customizeMenuOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Customizes the options used to populate the Office Menu.
    /// </summary>
    /// <param name = "_menuOptions">The menu options to be customized.</param>
    public void customizeMenuOptions(OfficeMenuOptions _menuOptions)
    {
        journalFormTrans.customizeOfficeMenuOptions(_menuOptions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitialTemplateFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the set of initial filters to be applied to the template.
    /// </summary>
    /// <param name = "_menuItem">
    /// The menu item for the template to apply the filters to.
    /// </param>
    /// <returns>
    /// The Map of filters to apply keyed by AOT entity name.
    /// </returns>
    public Map getInitialTemplateFilters(OfficeTemplateExportMenuItem _menuItem)
    {
        LedgerIJournalExcelTemplate template = LedgerJournalExcelTemplate::constructForTemplateName(_menuItem.templateId());

        Map filtersToApply = LedgerJournalExcelTemplate::getFilterMapForTemplate(template, journalFormTrans.journalTable());

        return filtersToApply;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTemplateSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies any updates to the settings contained within the template for the specified menu item.
    /// </summary>
    /// <param name="_menuItem">The menu item.</param>
    /// <param name="_settingsManager">The <see cref="SettingsManager"/> to use when performing the updates.</param>
    public void updateTemplateSettings(OfficeTemplateExportMenuItem _menuItem, Microsoft.Dynamics.Platform.Integration.Office.SettingsManager _settingsManager)
    {
        journalFormTrans.initializeOpenExcelTemplate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditSimulations</Name>
				<Source><![CDATA[
    public void allowEditSimulations()
    {
        ledgerJournalTrans_ds.allowCreate(!ledgerJournalTable.SimulationPosted_IT);
        ledgerJournalTrans_ds.allowEdit(!ledgerJournalTable.SimulationPosted_IT);
        ledgerJournalTrans_ds.allowDelete(!ledgerJournalTable.SimulationPosted_IT);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>LedgerJournalTrans</Name>
				<Methods>
					<Method>
						<Name>allowPostButtons</Name>
						<Source><![CDATA[
        void allowPostButtons()
        {
            if (ledgerJournalTable.JournalType == LedgerJournalType::Daily && ledgerJournalTable.IsSimulation_IT())
            {
                if (ledgerJournalTable.Posted == NoYes::Yes)
                {
                    ButtonPostJournal.enabled(false);
                    SimulationJournalReOpen.enabled(false);
                    postSimulation.enabled(false);
                    PostJournal.enabled(false);
                    ButtonVoucherTransSimulation1.enabled(false);
                }
                else if (ledgerJournalTable.SimulationPosted_IT == NoYes::Yes)
                {
                    SimulationJournalReOpen.enabled(true);
                    postSimulation.enabled(false);
                    PostJournal.enabled(true);
                    ButtonVoucherTransSimulation1.enabled(true);
                }
                else
                {
                    SimulationJournalReOpen.enabled(false);
                    postSimulation.enabled(true);
                    PostJournal.enabled(false);
                    ButtonVoucherTransSimulation1.enabled(true);
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>deleteMarked</Name>
						<Source><![CDATA[
        public void deleteMarked()
        {
            // The journal lines can safely be deleted in batch mode if all records are marked and
            // other requirements are met - if these requirements are not met, revert to row by row.
            if (LedgerJournalDeleteTransaction::deleteInBatch(this.formRun(), ledgerJournalTrans))
            {
                LedgerJournalTrans_DS.research();
            }
            else
            {
                super();
            }

            ledgerJournalEngine.newJournalActive(ledgerJournalTable, true);
        }

]]></Source>
					</Method>
					<Method>
						<Name>refreshBudgetControls</Name>
						<Source><![CDATA[
        public void refreshBudgetControls()
        {
            if (budgetCheckResult.visible())
            {
                ledgerJournalEngine.resetBudgetCheckResultsCache();

                budgetCheckResult.update();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateDelete</Name>
						<Source><![CDATA[
        public boolean validateDelete()
        {
            if (!super())
            {
                // The LedgerJournalTrans' delete method requires an exception to be thrown
                // so that the transaction is aborted.
                throw Exception::Error;
            }

            return true;
        }

]]></Source>
					</Method>
					<Method>
						<Name>beginBalance</Name>
						<Source><![CDATA[
        [SysClientCacheDataMethodAttribute(true)]
        public display AmountCur beginBalance()
        {
            return bankSingleCurrency ? balanceAmountCur : balanceAmountMST;
        }

]]></Source>
					</Method>
					<Method>
						<Name>endBalance</Name>
						<Source><![CDATA[
        public edit LedgerJournalEndBalance endBalance(boolean _set, AmountMST _endBalance)
        {
            if (_set)
            {
                ledgerJournalTable.setEndBalance(_endBalance);
                element.bookRefresh();
            }

            return ledgerJournalTable.EndBalance;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean isValid = super();
            ReasonRefRecID reasonRef = ledgerJournalTrans_ds.object(fieldNum(LedgerJournalTrans, ReasonRefRecID)).getValue();
            ReasonCode reasonCode = ReasonTableRef::find(reasonRef).Reason;

            LedgerJournalACType ledgerJournalACType = ledgerJournalTrans_ds.object(fieldNum(LedgerJournalTrans, AccountType)).getValue();

            LedgerJournalACType offsetACType = ledgerJournalTrans_ds.object(fieldNum(LedgerJournalTrans, OffsetAccountType)).getValue();

            boolean useOtherAccount = ledgerJournalTrans.parmOffsetLedgerDimension() ? true : false;

            if (isValid && !ledgerJournalEngine.formMethodDataSourceValidateWritePost())
            {
                isValid = false;
            }

            if (isValid
                && reasonRef
                && reasonCode)
            {
                //Check that the reason code is valid for the main account type
                if (ReasonFormTable::checkReasonCodeForAccountType(reasonRef, ledgerJournalACType))
                {
                    //If a offset account is specified check that the reason code is valid for the offset account type
                    if (useOtherAccount && !ReasonFormTable::checkReasonCodeForAccountType(reasonRef, offsetACType))
                    {
                        // The Reason code is not active for account type
                        isValid = checkFailed("@SYS115522");
                    }
                }
                else
                {
                    // The Reason code is not active for account type
                    isValid = checkFailed("@SYS115522");
                }
            }

            // Check account type across all lines for a voucher so single sided entries of types Vend or Cust
            // Are found even if Prepayment was checked for a line with a type other than Vend or Cust
            if (isValid
                && ledgerJournalTrans.Prepayment
                && !ledgerJournalTrans.ledgerJournalTable().LedgerJournalInclTax
                && (( ledgerJournalTable.mainAccountType(ledgerJournalTrans.Voucher) == LedgerJournalACType::Cust
                    && CustParameters::find().TaxOnPrepayment)
                    || (ledgerJournalTable.mainAccountType(ledgerJournalTrans.Voucher) == LedgerJournalACType::Vend
                    && VendParameters::find().TaxOnPrepayment)))
            {
                isValid = checkFailed("@SYS98399");
            }

            return isValid;
        }

]]></Source>
					</Method>
					<Method>
						<Name>reread</Name>
						<Source><![CDATA[
        public void reread()
        {
            if (ledgerJournalTrans.RecId != 0)
            {
                // Clear the tax cache so the restored values display.
                // Do this before super() so the record is not dirtied if it is updated.
                ledgerJournalEngine.clearTaxAmountCache(ledgerJournalTrans, false);

                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>exchRateTxt</Name>
						<Source><![CDATA[
        [SysClientCacheDataMethodAttribute(true)]
        public display ExchRateSecondTxt exchRateTxt()
        {
            return ledgerJournalEngine.exchRateTxt(ledgerJournalTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            if (ledgerJournalEngine.numberSeqFormHandlerJournal())
            {
                ledgerJournalEngine.numberSeqFormHandlerJournal().formMethodDataSourceCreatePre();
            }

            super();

            ledgerJournalEngine.formMethodDataSourceCreatePost();

            ledgerJournalEngine.initValue(ledgerJournalTrans);

            correctedTaxAmountCur = 0;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Handles the write event for the entire <c>LedgerJournalTrans</c> entity.
        /// </summary>
        /// <remarks>
        /// This method performs the write for the entire entity, which includes <c>LedgerJournalTrans</c>, <c>LedgerJournalTrans_Asset</c> and <c>LedgerJournalTrans_Project</c>.
        /// </remarks>
        /// <exception>Throws exception if update conflict or another unexpected error.</exception>
        public void write()
        {
            boolean isNewRecord = !ledgerJournalTrans.RecId; // Flag that indicates whether or not this is a new record.

            if (ledgerJournalTransEntityManager.getFormDataEventManager().isInEntityDeleteEvent()
                || ledgerJournalTransEntityManager.getFormDataEventManager().isInEntityWriteEvent())
            {
                // The kernel calls leaveRecord during the delete event which will cause this method to
                // be called if the user had made changes. This causes issues and must be special cased
                // until the behavior is changed.

                // The entity is already being written. The extra call to write is unnecessary.
                return;
            }

            //sets the release date comment blank if the release date is blank
            if (ledgerJournalTrans.InvoiceReleaseDate == utcDateTimeNull())
            {
                ledgerJournalTrans.ReleaseDateComment = '';
            }

            reverseCharge.lineDSPreWrite();

            try
            {
                ttsbegin;

                // Signal the start of the write event.
                ledgerJournalTransEntityManager.getFormDataEventManager().beginEntityWriteEvent();

                // Clear out any old snapshots for the write event.
                ledgerJournalTransEntityManager.getInMemoryRollbackManager().clearSnapShots();

                ledgerJournalEngine.preWrite(ledgerJournalTrans, null);
                ledgerJournalEngine.preWriteUpdateDefaultDimension(ledgerJournalTrans, null);
                ledgerJournalEngine.formMethodDataSourceWritePre();

                // Validate and write the entire entity. This must be done because to maintain data integrity
                // as we require an "all or nothing" behavior.

                // A snapshot of the current buffer is taken to support in-memory rollback of the buffer in
                // the case the transaction is aborted.
                ledgerJournalTransEntityManager.getInMemoryRollbackManager().takeSnapshotOfLedgerJournalTrans();

                // If super() is called directly, the client currently refreshes all of the linked datasources,
                // which causes the LedgerJournalTrans_Project datasource to be corrupted. The result is the
                // changes to the LedgerJournalTrans_Project table are not saved.
                ledgerJournalTrans.write();

                if (isNewRecord && correctedTaxAmountCurEdited)
                {
                    ledgerJournalEngine.correctTaxAmount(ledgerJournalTrans, correctedTaxAmountCur, true, false);
                }

                correctedTaxAmountCurEdited = false;

                ledgerJournalEngine.write(ledgerJournalTrans, false);

                if (ledgerJournalTable.FixedOffsetAccount 
                    && ledgerJournalTable.parmOffsetLedgerDimension() 
                    && ledgerJournalTable.OffsetAccountType == LedgerJournalACType::Bank)
                {
                    bankSingleCurrency = BankAccountTable::isSingleCurrency(ledgerJournalTable.parmOffsetAccount(), ledgerJournalTable.JournalNum);
                }


                // Signal that the write event is finished.
                ledgerJournalTransEntityManager.getFormDataEventManager().endEntityWriteEvent();

                ttscommit;

                this.refresh();

                reverseCharge.lineDSPostWrite();
            }
            catch (Exception::UpdateConflict)
            {
                // This exception should not be handled by the generic handling logic below, as it assumes
                // that a rollback needs to be performed.
                // A rollback should not be performed for an update conflict, as the record will never
                // be capable of being saved.

                // Signal that the write event is finished with a failure by calling endEntityWriteEvent
                // and passing in 'true' for the failure parameter.
                ledgerJournalTransEntityManager.getFormDataEventManager().endEntityWriteEvent(true);

                // Chain the exception forward.
                throw Exception::UpdateConflict;
            }
            catch
            {
                // Handle any exception and then chain another generic one forward to force the form event to fail. Also, in-memory roll-backs
                // of the transaction buffers must be handled as the kernel does not perform this automatically.
                ledgerJournalTransEntityManager.getInMemoryRollbackManager().performRollbackForAbortedWrite();

                // We need to figure out if the current voucher is used and generate one if it is used.
                ledgerJournalEngine.forceNewVoucher(ledgerJournalTrans.Voucher);

                // Signal that the write event is finished with a failure by calling endEntityWriteEvent
                // and passing in 'true' for the failure parameter.
                ledgerJournalTransEntityManager.getFormDataEventManager().endEntityWriteEvent(true);

                throw Exception::Error;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        public void linkActive()
        {
            ledgerJournalEngine.newJournalActive(ledgerJournalTable);
            ledgerJournalEngine.formMethodDataSourceLinkActivePre();
            journalFormTrans.datasourceLinkActivePre();

            super();

            if (ledgerJournalTable.JournalNum != journalNum)
            {
                // If the stored journalNum has become out of sync with the reference
                // to ledgerJournalTable, then we need to rerun initLedger. This
                // will occur when the user has switched journals on the parent form.
                element.initLedger();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            ledgerJournalTransRange = this.query().dataSourceTable(tableNum(LedgerJournalTrans)).addRange(fieldNum(LedgerJournalTrans, Invisible));
            ledgerJournalTransRange.value('0');

            ledgerJournalEngine = LedgerJournalEngine::construct(LedgerJournalType::Daily, element);
            ledgerJournalEngine.ledgerJournalTable(element.args().record());

            journalFormTrans.datasourceInitPost(ledgerJournalTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            LedgerJournalTrans ledgerJournalTransCopy;

            try
            {
                ttsbegin;

                // The kernel calls leaveRecord during the super call, which will cause write to be called
                // on the datasource if there are changes to the buffer. We don't want this to happen,
                // so special case around this until the behavior is changed.

                // Signal that the entity delete event has started.
                ledgerJournalTransEntityManager.getFormDataEventManager().beginEntityDeleteEvent();

                // Clear out any old snapshots for the write event.
                ledgerJournalTransEntityManager.getInMemoryRollbackManager().clearSnapShots();

                ledgerJournalTransCopy = ledgerJournalTrans.data();
                ledgerJournalEngine.rereadWhenDirty(ledgerJournalTrans, true);

                ledgerJournalEngine.preDelete(ledgerJournalTrans);
                ledgerJournalEngine.formMethodDataSourceDeletePre();

                // A snapshot of the current buffer is taken to support in-memory rollback of the buffer in
                // the case the transaction is aborted.
                ledgerJournalTransEntityManager.getInMemoryRollbackManager().takeSnapshotOfLedgerJournalTrans();
                super();

                ledgerJournalEngine.delete(ledgerJournalTransCopy);

                if (ledgerJournalTrans)
                {
                    element.setDebCredProposal(true);
                }

                ledgerJournalTrans_DS.refresh();

                // Signal that the entity delete event has finished.
                ledgerJournalTransEntityManager.getFormDataEventManager().endEntityDeleteEvent();

                // Do not commit if the TTS level is 0 because that would generate a stack trace error
                // The TTS level becomes 0 if a display method threw an exception
                if (appl.ttsLevel() > 0)
                {
                    ttscommit;
                }

            }
            catch
            {
                // Handle any exception and then chain another generic one forward to force the form event to fail. Also, in-memory roll-backs
                // of the transaction buffers must be handled as the kernel does not perform this automatically.
                ledgerJournalTransEntityManager.getInMemoryRollbackManager().performRollbackForAbortedDelete();

                // Signal that the entity delete event is finished with a failure by calling endEntityDeleteEvent
                // and passing in 'true' for the failure parameter.
                ledgerJournalTransEntityManager.getFormDataEventManager().endEntityDeleteEvent(true);

                throw Exception::Error;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            // Ensure the record is written before any pre creation methods are called
            // We explictly call leaveRecord to account for scenarios where New is clicked or Ctrl-N is hit on an unsaved record
            // In manual voucher entry scenarios the preCreate method clears form values if the record is not saved
            // An errror is thrown in the line below journalFormTrans.dataSourceCreatePre() if auto assigning of voucher number
            this.leaveRecord();

            try
            {
                ledgerJournalTransEntityManager.getFormDataEventManager().beginEntityCreateEvent();

                journalFormTrans.datasourceCreatePre();

                element.setDebCredProposal(true);

                ledgerJournalEngine.preCreate(ledgerJournalTrans);
                super(_append);

                virtualCashDiscDate = dateNull();
                virtualCashDiscAmount = 0;
                cashDiscChanged = false;
                correctedTaxAmountCurEdited = false;

                // Signal that the create event is finished.
                ledgerJournalTransEntityManager.getFormDataEventManager().endEntityCreateEvent();
                keepSalesPriceOnWrite = false;
            }
            catch (Exception::UpdateConflict)
            {
                // This exception should not be handled by the generic handling logic below.

                // Signal that the create event is finished.
                ledgerJournalTransEntityManager.getFormDataEventManager().endEntityCreateEvent();

                // Chain the exception forward.
                throw Exception::UpdateConflict;
            }
            catch
            {
                // Signal that the create event is finished.
                ledgerJournalTransEntityManager.getFormDataEventManager().endEntityCreateEvent();

                throw Exception::Error;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        /// <summary>
        /// Standard event handler that is called each time a record is read by the data source.
        /// </summary>
        /// <returns>
        /// An integer return code.
        /// </returns>
        public int active()
        {
            int ret;
            ledgerJournalTrans_DS.setFurtherPostingProtection();

            ret = super();
            if (ret)
            {
                ledgerJournalEngine.active(ledgerJournalTrans);
                priorAccountType = ledgerJournalTrans.AccountType;

                if (ledgerJournalTrans.CashDiscCode)
                {
                    [virtualCashDiscDate, virtualCashDiscAmount] =
                        ledgerJournalEngine.custVendCashDiscCache(false, ledgerJournalTrans);
                    ledgerJournalTrans_ds.refresh();
                }

                ledgerJournalEngine.setChildDataSourceAccess(ledgerJournalTrans, null);

                if (ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger)
                {
                    currentMainAccountId = MainAccount::getMainAccountRecIdFromLedgerDimension(ledgerJournalTrans.LedgerDimension);
                    previousMainAccountId = currentMainAccountId;
                }
                else
                {
                    currentMainAccountId = 0;
                    previousMainAccountId = 0;
                }

                if (ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger)
                {
                    currentOffsetMainAccountId = MainAccount::getMainAccountRecIdFromLedgerDimension(ledgerJournalTrans.OffsetLedgerDimension);
                }
                else
                {
                    currentOffsetMainAccountId = 0;
                }

                LedgerJournalTrans_OffsetType.allowEdit(!LedgerJournalTable.FixedOffsetAccount);

                ledgerJournalEngine::updateSegmentedEntryContext(LedgerJournalTrans_AccountNum, ledgerJournalTrans);
                ledgerJournalEngine::updateSegmentedEntryContextForOffset(LedgerJournalTrans_OffsetAccount, ledgerJournalTrans);

                LedgerJournalEngine::updateSegmentedEntryForFixedOffsetAccount(LedgerJournalTrans_OffsetAccount, ledgerJournalTable, ledgerJournalTrans);

                journalFormTrans.datasourceActivePost();

                element.setVisible();
            }

            if (ledgerJournalTrans.RecId != 0)
            {
                keepSalesPriceOnWrite = true;
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>taxAmountJournal</Name>
						<Source><![CDATA[
        [SysClientCacheDataMethodAttribute(true)]
        public display TaxAmountJournal taxAmountJournal(LedgerJournalTrans _ledgerJournalTrans)
        {
            TaxAmountJournal taxAmountJournal = ledgerJournalEngine.taxAmountJournal(_ledgerJournalTrans);

            return taxAmountJournal;
        }

]]></Source>
					</Method>
					<Method>
						<Name>errorExist</Name>
						<Source><![CDATA[
        [SysClientCacheDataMethodAttribute(true)]
        public display ImageRes errorExist(LedgerJournalTrans _ledgerJournalTrans)
        {
            ImageRes res;

            #resAppl

            if (journalFormTrans.parmCheckPostResults().errorExistsInJournalLine(tableNum(LedgerJournalTrans), _ledgerJournalTrans.RecId))
            {
                res = imageListAppl.image(#ImageError);
            }
            else
            {
                res = -1;
            }

            return res;
        }

]]></Source>
					</Method>
					<Method>
						<Name>errorLog</Name>
						<Source><![CDATA[
        [SysClientCacheDataMethodAttribute(true)]
        public display LedgerPostingMessage errorLog()
        {
            return journalFormTrans.parmCheckPostResults().errorLogJournalLine(tableNum(LedgerJournalTrans), ledgerJournalTrans.RecId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>postedDateTime</Name>
						<Source><![CDATA[
        [SysClientCacheDataMethodAttribute(true)]
        public display JournalPostedDateTime postedDateTime()
        {
            return ledgerJournalEngine.postedDateTime();
        }

]]></Source>
					</Method>
					<Method>
						<Name>approvedBy</Name>
						<Source><![CDATA[
        [SysClientCacheDataMethodAttribute(true)]
        public display ApprovedByPersonnelNumber approvedBy()
        {
            return ledgerJournalEngine.approvedBy();
        }

]]></Source>
					</Method>
					<Method>
						<Name>rejectedBy</Name>
						<Source><![CDATA[
        [SysClientCacheDataMethodAttribute(true)]
        public display UserId rejectedBy()
        {
            return ledgerJournalEngine.rejectedBy();
        }

]]></Source>
					</Method>
					<Method>
						<Name>reportedAsReadyBy</Name>
						<Source><![CDATA[
        [SysClientCacheDataMethodAttribute(true)]
        public display UserId reportedAsReadyBy()
        {
            return ledgerJournalEngine.reportedAsReadyBy();
        }

]]></Source>
					</Method>
					<Method>
						<Name>journalBalance</Name>
						<Source><![CDATA[
        [SysClientCacheDataMethodAttribute(true)]
        public display AmountMST journalBalance()
        {
            return ledgerJournalEngine.journalDebit() - ledgerJournalEngine.journalCredit();
        }

]]></Source>
					</Method>
					<Method>
						<Name>journalCredit</Name>
						<Source><![CDATA[
        [SysClientCacheDataMethodAttribute(true)]
        public display AmountMST journalCredit()
        {
            return ledgerJournalEngine.journalCredit();
        }

]]></Source>
					</Method>
					<Method>
						<Name>journalDebit</Name>
						<Source><![CDATA[
        [SysClientCacheDataMethodAttribute(true)]
        public display AmountMST journalDebit()
        {
            return ledgerJournalEngine.journalDebit();
        }

]]></Source>
					</Method>
					<Method>
						<Name>voucherTotal</Name>
						<Source><![CDATA[
        [SysClientCacheDataMethodAttribute(true)]
        public display AmountMST voucherTotal()
        {

            return ledgerJournalEngine.voucherDebit(ledgerJournalTrans) - ledgerJournalEngine.voucherCredit(ledgerJournalTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>voucherCredit</Name>
						<Source><![CDATA[
        [SysClientCacheDataMethodAttribute(true)]
        public display AmountMST voucherCredit()
        {

            return ledgerJournalEngine.voucherCredit(ledgerJournalTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>voucherDebit</Name>
						<Source><![CDATA[
        [SysClientCacheDataMethodAttribute(true)]
        public display AmountMST voucherDebit()
        {

            return ledgerJournalEngine.voucherDebit(ledgerJournalTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>ledgerJournalBalance</Name>
						<Source><![CDATA[
        [SysClientCacheDataMethodAttribute(true)]
        public display AmountCur ledgerJournalBalance()
        {
            return this.beginBalance() + ledgerJournalEngine.journalOffsetBalance();
        }

]]></Source>
					</Method>
					<Method>
						<Name>setFurtherPostingProtection</Name>
						<Source><![CDATA[
        public void setFurtherPostingProtection()
        {
            int i;
            DictTable dictTable = new DictTable(ledgerJournalTrans.TableId);
            FormDataObject objectLedgerJournalTrans;
            boolean preventEdit;

            preventEdit = ledgerJournalTrans.FurtherPostingType && ledgerJournalTrans.FurtherPostingRecId;

            for (i = 1; i <= dictTable.fieldCnt(); i++)
            {
                objectLedgerJournalTrans = ledgerJournalTrans_ds.object(dictTable.fieldCnt2Id(i));
                if (objectLedgerJournalTrans)
                {
                    if (preventEdit)
                    {
                        switch (dictTable.fieldCnt2Id(i))
                        {
                            case fieldNum(LedgerJournalTrans, AccountType),
                                 fieldNum(LedgerJournalTrans, LedgerDimension),
                                 fieldNum(LedgerJournalTrans, OffsetAccountType),
                                 fieldNum(LedgerJournalTrans, OffsetLedgerDimension),
                                 fieldNum(LedgerJournalTrans, AmountCurDebit),
                                 fieldNum(LedgerJournalTrans, AmountCurCredit),
                                 fieldNum(LedgerJournalTrans, CurrencyCode) :
                                objectLedgerJournalTrans.allowEdit(false);
                                break;
                            default :
                                objectLedgerJournalTrans.allowEdit(true);
                        }
                    }
                    else
                    {
                        objectLedgerJournalTrans.allowEdit(true);
                    }
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>amountCurDebitForCashDiscInfo</Name>
						<Source><![CDATA[
        public void amountCurDebitForCashDiscInfo()
        {
            if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
                && ledgerJournalTrans.AmountCurDebit > 0
                && ledgerJournalTrans.CashDiscAmount
                && ledgerJournalTrans.Invoice)
            {
                info("@SYS99050");
            }

            if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust
                && ledgerJournalTrans.AmountCurDebit < 0
                && ledgerJournalTrans.CashDiscAmount
                && ledgerJournalTrans.Invoice)
            {
                info("@SYS99051");
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>amountCurCreditForCashDiscInfo</Name>
						<Source><![CDATA[
        public void amountCurCreditForCashDiscInfo()
        {
            if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend && ledgerJournalTrans.AmountCurCredit < 0)
            {
                if (ledgerJournalTrans.CashDiscAmount && ledgerJournalTrans.Invoice)
                {
                    info("@SYS99050");
                }
            }

            if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust && ledgerJournalTrans.AmountCurCredit > 0)
            {
                if (ledgerJournalTrans.CashDiscAmount && ledgerJournalTrans.Invoice)
                {
                    info("@SYS99051");
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>leaveRecord</Name>
						<Source><![CDATA[
        public boolean leaveRecord(boolean _forceUpdate = false)
        {
            boolean ret;

            ret = super(_forceUpdate);

            if (ledgerJournalTransEntityManager.getFormDataEventManager().isSiblingWriteRequested())
            {
                // A write was requested on the sibling and the client did not write the entity. This happens
                // when focus is removed from a sibling data source (such as LedgerJournalTrans_Asset) as the
                // client only calls write on that specific sibling and not on the entire entity.

                // Write the entire entity.
                ledgerJournalTrans_DS.write();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayRemittanceAddress</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets the vendor remittance address associated with the vendor <c>RemittanceLocation</c> or <c>RemittanceAddress</c> record id field on the <c>LedgerJournalTrans</c> table.
        /// </summary>
        /// <returns>
        /// The remittance address.
        /// </returns>
        /// <remarks>
        /// The remittance address on the trans date is returned if the journal is posted.
        /// The current date effective remittance address is returned for an unposted journal.
        /// </remarks>
        public display RemittanceAddressing displayRemittanceAddress()
        {
            if (!hasFieldAccess(tableNum(LogisticsPostalAddress), fieldNum(LogisticsPostalAddress, Address), AccessType::View))
            {
                error("@SYS57330");
            }

            return ledgerJournalEngine.displayRemittanceAddress(ledgerJournalTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayBudgetCheckResult</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets the budget check result for the current <c>LedgerJournalTrans</c> record.
        /// </summary>
        /// <returns>
        /// The budget check result for the current <c>LedgerJournalTrans</c> record.
        /// </returns>
        public display BudgetCheckResult displayBudgetCheckResult()
        {
            return ledgerJournalEngine.getBudgetCheckResult(ledgerJournalTrans);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>AccountType</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                #ISOCountryRegionCodes
                LedgerJournalACType ledgerJournalACType = this.getValue();

                //  The call to super() was replaced with the following lines because the defaulting logic was determined to be
                //  form-specific, and defaulting for project was moved to the LedgerJournalEngine class and requires multiple table buffers and
                //  thus cannot be called from the super()
                if (priorAccountType != ledgerJournalACType)
                {
                    priorAccountType = ledgerJournalACType;
                    ledgerJournalEngine.accountTypeModified(ledgerJournalTrans, null, null);
                }
                // end super

                LedgerJournalEngine::updateSegmentedEntryForFixedOffsetAccount(LedgerJournalTrans_OffsetAccount, ledgerJournalTable, ledgerJournalTrans);

                journalFormTrans.enableButtonsActive();
                ButtonVoucherTransSimulation1.enabled(!ledgerJournalTable.Posted);
                element.setVisible();

                if (ledgerJournalTrans_ds.object(fieldNum(LedgerJournalTrans, LedgerDimension)).getValue() != 0
                    && !ReasonFormTable::checkReasonCodeForAccountType(ledgerJournalTrans.ReasonRefRecID, ledgerJournalACType))
                {
                    ttsbegin;
                    ReasonTableRef::deleteByReference(ledgerJournalTrans.ReasonRefRecID);
                    ledgerJournalTrans.ReasonRefRecID = 0;
                    ttscommit;
                }

                ledgerJournalTrans_ds.cacheCalculateMethod(tableMethodStr(LedgerJournalTrans, accountName));
                ledgerJournalTrans_ds.rereadReferenceDataSources();

                // Clearing Remittance location when the account type is not vendor.
                if (ledgerJournalTrans.AccountType != LedgerJournalACType::Vend)
                {
                    ledgerJournalTrans.RemittanceLocation = 0;
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>AmountCurCredit</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                //  The call to super() was replaced with the following lines from super() because the defaulting logic was determined to be
                //  form-specific, and defaulting for project was moved to the LedgerJournalEngine class and requires multiple table buffers and
                //  thus cannot be called from the super()
                //
                ledgerJournalEngine.amountCurCreditModified(ledgerJournalTrans, null);

                ledgerJournalTrans_ds.refresh();
            }

]]></Source>
							</Method>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret = super();

                if (TaxParameters::find().CashDiscOnInvoice)
                {
                    ledgerJournalTrans_ds.amountCurCreditForCashDiscInfo();
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>AmountCurDebit</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                //  The call to super() was replaced with the following lines from super() because the defaulting logic was determined to be
                //  form-specific, and defaulting for project was moved to the LedgerJournalEngine class and requires multiple table buffers and
                //  thus cannot be called from the super()
                ledgerJournalEngine.amountCurDebitModified(ledgerJournalTrans, null);

                ledgerJournalTrans_ds.refresh();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Approver</DataField>
						<Methods>
							<Method>
								<Name>resolveReference</Name>
								<Source><![CDATA[
            public Common resolveReference(FormReferenceControl _formReferenceControl)
            {
                HcmWorker hcmWorker = super(_formReferenceControl);

                if (hcmWorker != null && !hcmWorkerLookupActiveCurrentCompany.validateWorker(hcmWorker.RecId))
                {
                    hcmWorker = null;
                }

                return hcmWorker;
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                HcmWorker hcmWorker = hcmWorkerLookupActiveCurrentCompany.lookupWorker(_formReferenceControl);

                return hcmWorker;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>BankAccountId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                ledgerJournalTrans_ds.refresh();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>BankDepositVoucher</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                //  The call to super() was replaced with the following lines from super() because the defaulting logic was determined to be
                //  form-specific, and defaulting for project was moved to the LedgerJournalEngine class and requires multiple table buffers so
                //  can't be called from the table.modified() method
                ledgerJournalEngine.bankDepositVoucherModified(ledgerJournalTrans, null);
                ledgerJournalTrans_ds.rereadReferenceDataSources();

                if (ledgerJournalTrans.OffsetLedgerDimension == 0)
                {
                    // clear the current main account because the offset ledger dimension was cleared
                    currentOffsetMainAccountId = 0;
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>CashDiscAmount</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                LedgerJournalCashDiscService ledgerJournalCashDiscService;

                super();

                ledgerJournalEngine.clearTaxAmountCache(ledgerJournalTrans);

                if (ledgerJournalTrans.CashDiscAmount)
                {
                    ledgerJournalCashDiscService = new LedgerJournalCashDiscService(
                        ledgerJournalTrans.JournalNum,
                        ledgerJournalTrans.Voucher,
                        ledgerJournalTrans);

                    if (ledgerJournalCashDiscService.cashDiscBaseAmount(ledgerJournalTrans))
                    {
                        ledgerJournalTrans.CashDiscPercent = (ledgerJournalTrans.CashDiscAmount * 100) / ledgerJournalCashDiscService.cashDiscBaseAmount(ledgerJournalTrans);
                    }
                    else
                    {
                        ledgerJournalTrans.CashDiscPercent = 0;
                    }
                }
                ledgerJournalEngine.updateCashDiscDetail(ledgerJournalTrans);
                cashDiscChanged = true;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Company</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                ledgerJournalEngine.companyModified(ledgerJournalTrans, null);

                LedgerJournalTrans_AccountNum.setDataAreaId(ledgerJournalTrans.Company, true);

                ledgerJournalTrans_ds.refresh();
                ledgerJournalTrans_ds.rereadReferenceDataSources();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>CurrencyCode</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                ledgerJournalEngine.clearTaxAmountCache(ledgerJournalTrans);

                try
                {
                    ledgerJournalEngine.currencyModified(ledgerJournalTrans);

                    LedgerJournalTrans_AccountNum.parmCurrency(ledgerJournalTrans.CurrencyCode);

                    LedgerJournalTrans_OffsetAccount.parmCurrency(ledgerJournalTrans.CurrencyCode);

                    journalFormTrans.enableFieldsActive();

                    super();
                }
                catch
                {
                    // If a currency code is selected without a valid exchange rate, the
                    // exchange rate values should be set to default/invalid values to prevent
                    // saving/posting of the record
                    ledgerJournalTrans.ExchRate = 0.0;
                    ledgerJournalTrans.ExchRateSecond = 0.0;
                    ledgerJournalTrans.Triangulation = NoYes::No;

                    super();
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>DateCashDisc</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                ledgerJournalEngine.updateCashDiscDetail(ledgerJournalTrans);
                cashDiscChanged = true;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>DocumentDate</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {

                super();

                ledgerJournalEngine.documentDateModified(ledgerJournalTrans);
                ledgerJournalEngine.cashDiscCodeModified(ledgerJournalTrans, null);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Due</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar)) && ledgerJournalTrans.Due)
                {
                    PaymCalendarAdjustedDate paymCalendarAdjustedDate = PaymCalendarSourceLedgerJournalTrans::getAdjustedDate(ledgerJournalTrans);

                    ledgerJournalTrans.Due = PaymCalendarProcessor::getAdjustedDueDate(ledgerJournalTrans.Due, priorDueDate, paymCalendarAdjustedDate);
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ExchRate</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {

                super();
                ledgerJournalEngine.clearTaxAmountCache(ledgerJournalTrans);

            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>LedgerDimension</DataField>
						<Methods>
							<Method>
								<Name>setTaxDirectionControl</Name>
								<Source><![CDATA[
            /// <summary>
            /// This method will assign a value for the <c>TaxDirectionControl</c> field based on the value of TaxDirection of
            /// the GL account number.
            /// </summary>
            /// <exception>Throws error if company does not exist.</exception>
            private void setTaxDirectionControl()
            {
                NoYes setTaxDirection = ledgerJournalTrans.TaxDirectionControl;

                if (ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger &&
                    TaxParameters::find().MandatoryTaxDirection)
                {
                    // Determine if the compnay info is provided.
                    SelectableDataArea companyId = ledgerJournalTrans.Company;
                    if (!companyId)
                    {
                        companyId = curext();
                    }
                    else
                    {
                        if (! xDataArea::exist(companyId))
                        {
                            throw error(strFmt("@SYS10666",companyId));
                        }
                    }

                    changecompany(companyId)
                    {
                        // If the tax direction is set for the ledger account, set the TaxDirectionControl field.
                        if (MainAccountLegalEntity::findByMainAccountLegalEntity(
                            ledgerJournalTrans.findMainAccount().RecId,
                            CompanyInfo::findDataArea(companyId).RecId).TaxDirection)
                        {
                            setTaxDirection = NoYes::Yes;
                        }
                    }
                }

                ledgerJournalTrans.TaxDirectionControl = setTaxDirection;
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Runs required logic on modification of main account field.
            /// </summary>
            /// <remarks>
            /// Validates whether the current reason code is appropriate for the new main account
            /// selected. If not, the reason code and comment fields are cleared.
            /// </remarks>
            public void modified()
            {
                boolean hasAccountChanged;

                if (LedgerJournalTrans.AccountType == LedgerJournalACType::Ledger)
                {
                    hasAccountChanged = currentMainAccountId != previousMainAccountId;

                    previousMainAccountId = currentMainAccountId;
                }
                else
                {
                    // force a non-ledger account change because there are no dimensions
                    hasAccountChanged = true;
                }

                if (hasAccountChanged)
                {
                    //  The call to super() was replaced with the following lines from super() because the defaulting logic was determined to be
                    //  form-specific, and defaulting for project was moved to the LedgerJournalEngine class and requires multiple table buffers so
                    //  can't be called from the table.modified() method

                    ledgerJournalEngine.accountNumModified(ledgerJournalTrans, null);

                    //This call needs to be made to update the RemittanceLocation reference group field which is modified in the ledgerJournalEngine.accountNumModified() method.
                    ledgerJournalTrans_ds.rereadReferenceDataSources();

                    debCredProposal = ledgerJournalEngine.accountModified(ledgerJournalTrans, null, null, null);

                    element.setDebCredProposal(false);
                }

                if (ledgerJournalTrans.listCodeAllowed())
                {
                    ledgerJournalTrans.setListCode();
                }
                else
                {
                    ledgerJournalTrans.Listcode = Listcode::IncludeNot;
                }

                element.setVisible();

                ledgerJournalEngine.clearTaxAmountCache(ledgerJournalTrans);

                // Determine the tax direction based on the account number.
                this.setTaxDirectionControl();

                ledgerJournalTrans_ds.refresh();

                if (this.getValue())
                {
                    LedgerJournalACType ledgerJournalACType = ledgerJournalTrans_ds.object(fieldNum(LedgerJournalTrans, AccountType)).getValue();

                    if (!ReasonFormTable::checkReasonCodeForAccountType(ledgerJournalTrans.ReasonRefRecID, ledgerJournalACType))
                    {
                        ReasonTableRef::deleteByReference(ledgerJournalTrans.ReasonRefRecID);
                        ledgerJournalTrans.ReasonRefRecID = 0;
                    }
                }

                journalFormTrans.enableButtonsActive();
                ButtonVoucherTransSimulation1.enabled(!ledgerJournalTable.Posted);
                journalFormTrans.enableFieldsActive();

                ledgerJournalTrans_ds.cacheCalculateMethod(tableMethodStr(LedgerJournalTrans, accountName));
                ledgerJournalTrans_ds.rereadReferenceDataSources();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>OffsetAccountType</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Runs required logic on modification of offset account type field.
            /// </summary>
            /// <remarks>
            /// Validates whether the current reason code is appropriate for the new offset account type
            /// selected. If not, the reason code and comment fields are cleared.
            /// </remarks>
            public void modified()
            {
                LedgerJournalACType offsetACType = this.getValue();

                //  The call to super() was replaced with the following lines from super() because the defaulting logic was determined to be
                //  form-specific, and defaulting for project was moved to the LedgerJournalEngine class and requires multiple table buffers and
                //  thus cannot be called from the super()
                //
                ledgerJournalEngine.offsetAccountTypeModified(ledgerJournalTrans, null, null);
                //    super();

                journalFormTrans.enableButtonsActive();
                ButtonVoucherTransSimulation1.enabled(!ledgerJournalTable.Posted);
                element.setVisible();

                if (ledgerJournalTrans_ds.object(fieldNum(LedgerJournalTrans, OffsetLedgerDimension)).getValue()
                    && !ReasonFormTable::checkReasonCodeForAccountType(ledgerJournalTrans.ReasonRefRecID, offsetACType))
                {
                    ttsbegin;
                    ReasonTableRef::deleteByReference(ledgerJournalTrans.ReasonRefRecID);
                    ledgerJournalTrans.ReasonRefRecID = 0;
                    ttscommit;
                }

                ledgerJournalTrans_ds.cacheCalculateMethod(tableMethodStr(LedgerJournalTrans, offsetAccountName));
                ledgerJournalTrans_ds.rereadReferenceDataSources();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>OffsetCompany</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                ledgerJournalEngine.offsetCompanyModified(ledgerJournalTrans, null);

                LedgerJournalTrans_OffsetAccount.setDataAreaId(ledgerJournalTrans.getOffsetCompany());

                journalFormTrans.enableFieldsActive();
                ledgerJournalTrans_ds.refresh();
                ledgerJournalTrans_ds.rereadReferenceDataSources();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>OffsetLedgerDimension</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Runs required logic on modification of offset account field.
            /// </summary>
            /// <remarks>
            /// Validates whether the current reason code is appropriate for the new offset account
            /// selected. If not, the reason code and comment fields are cleared.
            /// </remarks>
            public void modified()
            {
                //  The call to super() was replaced with the following lines from super() because the defaulting logic was determined to be
                //  form-specific, and defaulting for project was moved to the LedgerJournalEngine class and requires multiple table buffers so
                //  can't be called from the table.modified() method
                //
                ledgerJournalEngine.offsetAccountModified(ledgerJournalTrans, null, null);

                ledgerJournalEngine.clearTaxAmountCache(ledgerJournalTrans);
                ledgerJournalEngine.initFromOffsetAccount(ledgerJournalTrans, null, null);

                if (ledgerJournalTrans.listCodeAllowed())
                {
                    ledgerJournalTrans.setListCode();
                }

                if (this.getValue())
                {
                    LedgerJournalACType offsetACType = ledgerJournalTrans_ds.object(fieldNum(LedgerJournalTrans, OffsetAccountType)).getValue();

                    if (!ReasonFormTable::checkReasonCodeForAccountType(ledgerJournalTrans.ReasonRefRecID, offsetACType))
                    {
                        ttsbegin;
                        ReasonTableRef::deleteByReference(ledgerJournalTrans.ReasonRefRecID);
                        ledgerJournalTrans.ReasonRefRecID = 0;
                        ttscommit;
                    }
                }

                ledgerJournalTrans_ds.cacheCalculateMethod(tableMethodStr(LedgerJournalTrans, offsetAccountName));
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Payment</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {

                super();

                ledgerJournalEngine.paymentModified(ledgerJournalTrans);

            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>PaymMode</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                boolean isValid = true;

                if (!ledgerJournalTrans)
                {
                    isValid = LedgerJournalTrans_ds.validateWrite();

                    if (isValid)
                    {
                        LedgerJournalTrans_DS.write();
                    }
                    else
                    {
                        // Revert to original value as the required business logic will not execute for the changed value
                        LedgerJournalTrans.PaymMode = LedgerJournalTrans.orig().PaymMode;
                    }
                }

                if (isValid)
                {
                    if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar)) && ledgerJournalTrans.Payment)
                    {
                        ledgerJournalEngine.adjustDueDateOnPaymentMethodChange(ledgerJournalTrans, PaymCalendarModuleType::Vendor);
                    }

                    ledgerJournalEngine.calcPaymentFee(ledgerJournalTrans);

                    ledgerJournalTrans_ds.refresh();
                    ledgerJournalTrans_ds.rereadReferenceDataSources();
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>PaymSpec</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                boolean isValid = true;

                if (!ledgerJournalTrans)
                {
                    isValid = LedgerJournalTrans_ds.validateWrite();

                    if (isValid)
                    {
                        LedgerJournalTrans_ds.write();
                    }
                    else
                    {
                        // Revert to original value as the required business logic will not execute for the changed value
                        LedgerJournalTrans.PaymSpec = LedgerJournalTrans.orig().PaymSpec;
                    }
                }

                if (isValid)
                {
                    ledgerJournalEngine.calcPaymentFee(ledgerJournalTrans);
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>PostingProfile</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                LedgerJournalEngine::lookupPostingProfileForAccountType(_formControl, _filterStr, ledgerJournalTrans);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ReleaseDate</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Modifies the ReleaseDate field value of the <c>ledgerJournalTrans</c> table buffer.
            /// </summary>
            public void modified()
            {
                super();
                ledgerJournalEngine.releaseDateModified(ledgerJournalTrans);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>RemittanceAddress</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar)) && ledgerJournalTrans.Payment)
                {
                    ledgerJournalEngine.adjustDueDateAddressChange(ledgerJournalTrans, PaymCalendarModuleType::Vendor);
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>RemittanceLocation</DataField>
						<Methods>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                return LogisticsLocationAppUtil::lookupRemittanceLocation(
                    _formReferenceControl,
                    ledgerJournalTrans.parmAccount(),
                    ledgerJournalTrans.Company);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ReverseEntry</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Sets the editable property of the <c>LedgerJournalTrans</c> table <c>ReverseDate</c> field.
            /// </summary>
            public void modified()
            {
                super();

                ledgerJournalTrans_ds.object(fieldNum(LedgerJournalTrans, ReverseDate)).allowEdit(ledgerJournalTrans.ReverseEntry);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>TaxBase_W</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                ledgerJournalTrans.TaxBase_W = sign(ledgerJournalEngine.taxAmountJournal(ledgerJournalTrans)) * abs(ledgerJournalTrans.TaxBase_W);
                super();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>TaxCode</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                TaxTable::taxTableLookup(_formControl, ledgerJournalTrans.Company);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>TransDate</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                ledgerJournalEngine.transDateModified(ledgerJournalTrans);

                LedgerJournalTrans_AccountNum.parmControlDate(ledgerJournalTrans.TransDate);

                LedgerJournalTrans_OffsetAccount.parmControlDate(ledgerJournalTrans.TransDate);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Voucher</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                ledgerJournalEngine.formMethodDataSourceVoucherModified();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>ButtonPostJournal</Name>
				<Type>MenuButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            LedgerJournalTrans_DS.allowPostButtons();

            element.updateJournalBalance();

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PostSimulation</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            ledgerJournalTable.reread();
            element.allowEditSimulations();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PostJournal</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            ledgerJournalEngine.clearVoucher();

            try
            {
                super();
            }
            finally
            {
                journalFormTrans.parmCheckPostResults(ledgerJournalEngine.getPostingResults());

                errorExist.visible(journalFormTrans.parmCheckPostResults().errorInJournalLine());

                ledgerJournalEngine.refreshWhenPosted();
                journalFormTrans.enableButtonsActive();
                ButtonVoucherTransSimulation1.enabled(!ledgerJournalTable.Posted);
                element.bookRefresh();
            }

        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonCheckJournal</Name>
				<Type>MenuButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.updateJournalBalance();

            super();

            infolog.infoActionObject(journalFormTrans);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CheckJournal</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            ledgerJournalEngine.clearVoucher();

            try
            {
                super();
            }
            finally
            {
                journalFormTrans.validateJournalPost();
            }

        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CheckVoucher</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            ledgerJournalEngine.clearVoucher();

            try
            {
                super();
            }
            finally
            {
                journalFormTrans.validateJournalPost();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonReportAsReady</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {

            ledgerJournalEngine.clearVoucher();

            ledgerJournalEngine.markReportAsReady();

            ledgerJournalEngine.refreshWhenPosted();
            journalFormTrans.enableButtonsActive();
            ButtonVoucherTransSimulation1.enabled(!ledgerJournalTable.Posted);
            element.bookRefresh();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ShowSpecification</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            FormRun formRun;
            Args args = new Args();
            boolean end;

            super();

            if (!ledgerJournalTrans.parmLedgerDimension())
            {
                throw error("@SYS25989");
            }

            args.record(ledgerJournalTrans);

            switch (ledgerJournalTrans.AccountType)
            {
                case LedgerJournalACType::Cust :
                    formRun = new MenuFunction(menuitemDisplayStr(LedgerShowSpecLdgrJourTrnDaily),MenuItemType::Display).create(args);
                    break;

                case LedgerJournalACType::Vend :
                    formRun = new MenuFunction(menuitemDisplayStr(VendShowSpecifikation),MenuItemType::Display).create(args);
                    break;

                default:
                    end = true;
            }
            if (!end && formRun)
            {
                 formRun.run();
                formRun.wait();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DisplayJournalLines</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        public int selectionChange()
        {
            int ret;

            element.filterJournalLineErrors();

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ErrorExist</Name>
				<Type>Image</Type>
				<Methods>
					<Method>
						<Name>toolTip</Name>
						<Source><![CDATA[
        public str toolTip()
        {
            LedgerPostingMessage ret;

            if (ledgerJournalTrans_DS.errorExist(ledgerJournalTrans))
            {
                ret = ledgerJournalTrans_DS.errorLog();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LedgerJournalTrans_Company</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            // Update the related segmented entry controls to ensure they are set to the correct company
            LedgerJournalTrans_AccountNum.setDataAreaId(this.text(), true);
            boolean ret = super();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LedgerJournalTrans_AccountNum</Name>
				<Type>SegmentedEntry</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (!ledgerJournalEngine.accountNumLookup(
                    ledgerJournalTrans_AccountNum,
                    ledgerJournalTrans,
                    ledgerJournalTrans.OffsetAccountType,
                    ledgerJournalTrans.parmOffsetAccount(),
                    null))
            {
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>onSegmentChanged</Name>
						<Source><![CDATA[
        public void onSegmentChanged(DimensionControlSegment _segment)
        {
            if (_segment.parmDimensionAttribute().RecId == mainAccountDimAttr)
            {
                previousMainAccountId = currentMainAccountId;
            }

            super(_segment);

            currentMainAccountId = ledgerJournalEngine.onSegmentChangedForPrimaryAccount(
                ledgerJournalTrans_AccountNum,
                _segment,
                currentMainAccountId,
                ledgerJournalTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>checkUseCustomLookup</Name>
						<Source><![CDATA[
        public boolean checkUseCustomLookup(int _accountTypeEnumValue, int _secondaryAccountTypeEnumValue)
        {
            return ledgerJournalEngine.accountNumCheckUseCustomLookup(ledgerJournalTrans);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LedgerJournalTrans_AmountCurDebit</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>gotFocus</Name>
						<Source><![CDATA[
        public void gotFocus()
        {
            super();

            element.setDebCredProposal(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LedgerJournalTrans_AmountCurCredit</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>gotFocus</Name>
						<Source><![CDATA[
        public void gotFocus()
        {
            super();

            element.setDebCredProposal(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LedgerJournalTrans_OffsetCompany</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            LedgerJournalTrans_OffsetAccount.setDataAreaId(this.text(), true);

            boolean ret = super();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LedgerJournalTrans_OffsetAccount</Name>
				<Type>SegmentedEntry</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            int currentSegmentIndex = LedgerJournalTrans_OffsetAccount.getCurrentSegmentIndex();

            if ((ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger &&
                LedgerJournalTrans_OffsetAccount.getDimensionAttributeByControlIndex(currentSegmentIndex) != DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)) ||
                !ledgerJournalEngine.offsetAccountNumLookUp(LedgerJournalTrans_OffsetAccount, ledgerJournalTrans))
            {
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>onSegmentChanged</Name>
						<Source><![CDATA[
        public void onSegmentChanged(DimensionControlSegment _segment)
        {
            super(_segment);

            currentOffsetMainAccountId = ledgerJournalEngine.onSegmentChangedForOffsetAccount(LedgerJournalTrans_OffsetAccount, _segment, currentOffsetMainAccountId, ledgerJournalTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>checkUseCustomLookup</Name>
						<Source><![CDATA[
        public boolean checkUseCustomLookup(int _accountTypeEnumValue, int _secondaryAccountTypeEnumValue)
        {
            return ledgerJournalEngine.offsetAccountNumCheckUseCustomLookup(ledgerJournalTrans);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>editReasonCode</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Displays a filtered version of the Reasons lookup form to the user based on the <c>AccountType</c> and the <c>OffsetAccountType</c>.
        /// </summary>
        /// <remarks>
        /// This method will be called when the user open the reason code lookup form.
        /// </remarks>
        public void lookup()
        {
            LedgerJournalACType offsetAccountType;
            LedgerJournalACType accountType;
            boolean useOffsetAccount;

            useOffsetAccount = ledgerJournalTrans.parmOffsetLedgerDimension() ? true : false;

            offsetAccountType = ledgerJournalTrans_ds.object(fieldNum(LedgerJournalTrans,OffsetAccountType)).getValue();
            accountType = ledgerJournalTrans_ds.object(fieldNum(LedgerJournalTrans,AccountType)).getValue();
            ReasonFormTable::reasonCodeLookup(
                this,
                offsetAccountType,
                accountType,
                true,
                useOffsetAccount);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TabCompany</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            LedgerJournalTrans_AccountNum.setDataAreaId(this.text(), true);
            boolean ret = super();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TabOffsetCompany</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            LedgerJournalTrans_OffsetAccount.setDataAreaId(this.text(), true);
            boolean ret = super();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>LedgerJournalTrans</Name>
			<Table>LedgerJournalTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountAgreementId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AcknowledgementDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Addressing_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AgreementCompany_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCurCredit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCurDebit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AnnouncementNum_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Approved</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Approver</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Attachments_CN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankAccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankAgreementExt_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankBillOfExchangeNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCentralBankPurposeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCentralBankPurposeText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCentralBankTransTypeCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankChequeDepositTransRefRecID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankChequeNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankClientDocumentTypeId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCommAccountId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCurrencyDealCourse_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCurrencyTransferLog_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankDepositNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankDepositVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankNegInstRecipientName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPaymentRegistrationNum_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPrintAccountNum_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPromissoryNoteNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankReconcileAccountAtPost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankRemittanceFileId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankRemittanceType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankRespWorkerId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankSpecAccountId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTransType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankVendAccountId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetSourceLedgerEntryUnposted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Cancel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscBaseDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscBaseDays</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscPercent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashReceiptNum_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CFDIUUID_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Company</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrectedInvoiceDate_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrectedInvoiceId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrectionType_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Correct_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustBankAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustEinvoicePaymDeliveryNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustEinvoicePaymSectionNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustEinvoicePaymTransNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustFactureAutoCreate_RU</DataField>
					<Enabled>No</Enabled>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustVendAccount_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustVendBankAccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustVendName_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustVendNegInstProtestReason</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateCashDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DebitCurrencyCode_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DelayTaxCalculation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_AssessableValue_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_CompanyLocation_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_ConsignmentNoteNum_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEl_CustomsDuty_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_CustomsTariffCodeTable_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_CustomsTariffDirection_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_ExciseRecordType_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_ExciseTariffCodes_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_ExciseType_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_GTAServiceCategory_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_MaximumRetailPrice_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_NatureOfAssessee_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_NonRecoverablePercent_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_SalesTaxFormTypes_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_ServiceCodeTable_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_SoftwareDeclReceived_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_TaxSetoffVoucher_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_TaxWithholdCode_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEl_TCSGroup_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_TDSGroup_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_VATGoodsType_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Due</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EnterpriseNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ErrorCodePayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EUSalesList</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchRateSecond</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileCreated</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ForeignBankFee_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ForeignCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ForeignVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FreqCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FreqValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FurtherPostingRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FurtherPostingType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GSTHSTTaxType_CA</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ImportDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InformByPhone_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InformByTelex_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntBank_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntraComVATDueDate_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Invisible</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Invoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceReleaseDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceSeries_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JournalNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastTransferred</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerJournalDlvDate_ES</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerVoucherType_CN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Listcode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LoadingDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MainAccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkedInvoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkedInvoiceCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkedInvoiceRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkupCode_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRCCGeneralLedgerId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRPaymOrderID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRPrintTxtOnCheck</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRRefPaymID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NegInstId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NoEdit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffSessionId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetAccountAgreementId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetAccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetAgreementCompany_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetDefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetPostingProfile_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetTxt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OperationType_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackedExtensions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Payment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentNotes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentPriority_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentSequenceNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymInstruction1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymInstruction2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymInstruction3</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymInstruction4</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymPurpose_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymReference</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymSpec</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PoolRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingProfile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Prepayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Price</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchIdRange</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchLedgerPosting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Qty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RCashDocRepresPersonId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RCashDocRepresType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RCashPayTransType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonRefRecID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiptDate_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefCopyReverse_CN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReleaseDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReleaseDateComment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemainAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemittanceAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemittanceLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemitteeCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RepresPersonCard_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RepresPersonName_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReverseDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReverseEntry</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RevRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettleVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SkipBlockedForManualEntryCheck</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tax1099Amount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tax1099Fields</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tax1099RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tax1099State</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tax1099StateAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxBase_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxDirectionControl</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxPeriodPaymentCode_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdAlternateVendorAcct_TH</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdCalculate_TH</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdItemGroupHeading_TH</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Transfer</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransferCurrency_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Transferred</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransferredBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransferredOn</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransferredTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Triangulation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VatDueDate_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATNumJournal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATOnPayment_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATOperationCode_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATPaymRefRecId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATTaxAgentVendAccount_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendBankAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendInvoiceDeclaration_IS</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendPaymFeeGroup_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher_CN</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCheck>No</AllowCheck>
			<CounterField>LineNum</CounterField>
			<Index>NumVoucherIdx</Index>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS3096</Caption>
		<DataSource xmlns="">LedgerJournalTrans</DataSource>
		<Mode xmlns="">Edit</Mode>
		<Pattern xmlns="">Task</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>536870911</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>ButtonPostJournal</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>SimulationJournalReOpen</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>MenuFunctionButton</Type>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>SimulationJournalReOpen_IT</MenuItemName>
										<MenuItemType>Action</MenuItemType>
										<Text>@ExtendedItallianLocalization:Reopen</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonSeparatorControl">
										<Name>Separator2</Name>
										<Type>ButtonSeparator</Type>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>PostSimulation</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>MenuFunctionButton</Type>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>LedgerSimulationJournalPost_IT</MenuItemName>
										<MenuItemType>Action</MenuItemType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>PostJournal</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<DataSource>LedgerJournalTrans</DataSource>
										<MenuItemName>LedgerJourPostLJTransDaily</MenuItemName>
										<MenuItemType>Action</MenuItemType>
									</AxFormControl>
								</Controls>
								<Text>@SYS6098</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>ButtonCheckJournal</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>92035011</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>CheckJournal</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<DataSource>LedgerJournalTrans</DataSource>
										<MenuItemName>LedgerJourChkLedgerJourTransDaily</MenuItemName>
										<MenuItemType>Action</MenuItemType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>CheckVoucher</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<DataSource>LedgerJournalTrans</DataSource>
										<MenuItemName>LedgerJourChk1LedgerJourTransDaily</MenuItemName>
										<MenuItemType>Action</MenuItemType>
									</AxFormControl>
								</Controls>
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS53323</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>LedgerJournalTableSimulation</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>LedgerJournalTableSimulation_IT</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>ButtonCourse</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>153391685</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>ButtonReportAsReady</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS22220</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>ButtonApprove</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS16449</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>ButtonReject</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS22331</Text>
									</AxFormControl>
								</Controls>
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<SaveRecord>No</SaveRecord>
								<Text>@SYS2453</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>Inquiries</Name>
								<ElementPosition>337461707</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>ButtonInqVoucherTrans</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>MenuFunctionButton</Type>
										<FormControlExtension
											i:nil="true" />
										<DataSource>LedgerJournalTrans</DataSource>
										<MenuItemName>LedgerTransVoucher1</MenuItemName>
										<SaveRecord>No</SaveRecord>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>ButtonVoucherTransSimulation</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>MenuFunctionButton</Type>
										<FormControlExtension
											i:nil="true" />
										<DataSource>LedgerJournalTrans</DataSource>
										<MenuItemName>LedgerTransVoucherSimulation_IT</MenuItemName>
										<SaveRecord>No</SaveRecord>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>ShowSpecification</Name>
										<ConfigurationKey>LedgerBasic</ConfigurationKey>
										<ElementPosition>495573147</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@sys53650</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>ButtonBalanceControl</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>660764196</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>LedgerBalanceControl</MenuItemName>
									</AxFormControl>
								</Controls>
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS3850</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>Print_MenuButton</Name>
								<ElementPosition>368140044</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>JounalDetails</Name>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>LedgerJournal</MenuItemName>
										<MenuItemType>Output</MenuItemType>
										<ShowShortCut>No</ShowShortCut>
										<Text>@SYS24010</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>LedgerVoucherReport</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>894784852</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<DataSource>LedgerJournalTrans</DataSource>
										<MenuItemName>LedgerVoucher_CN</MenuItemName>
										<MenuItemType>Output</MenuItemType>
										<Text>@SYS86923</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>Movements</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>LedgerJournalAccountMovement</MenuItemName>
										<MenuItemType>Output</MenuItemType>
										<ShowShortCut>No</ShowShortCut>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>LedgerTransPerJournal</Name>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>LedgerTransPerJournal</MenuItemName>
										<MenuItemType>Output</MenuItemType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>CompensationLetter</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1934972243</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<DataSource>LedgerJournalTrans</DataSource>
										<MenuItemName>CustVendCompensationReport</MenuItemName>
										<MenuItemType>Output</MenuItemType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>LedgerJournalPreview</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2102744403</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>LedgerJournalPreview</MenuItemName>
										<MenuItemType>Output</MenuItemType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>LedgerJournalVoucherPreview</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2125114024</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>LedgerJournalVoucherPreview</MenuItemName>
										<MenuItemType>Output</MenuItemType>
									</AxFormControl>
								</Controls>
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS920</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
						<Caption>Click here</Caption>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>SelectorGroup</Name>
				<ElementPosition>1204124758</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>CustomFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>DisplayJournalLines</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<EnumType>LedgerJournalLinesDisplayOption</EnumType>
						<Selection>255</Selection>
						<ViewEditMode>Edit</ViewEditMode>
						<Items />
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<LeftMargin>10</LeftMargin>
				<LeftMarginMode>Fixed</LeftMarginMode>
				<TopMargin>10</TopMargin>
				<TopMarginMode>Fixed</TopMarginMode>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1610612733</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>OverViewTab</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>OverviewActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>OverviewButtonGroup</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>NewLine</Name>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<Command>New</Command>
												<Text>@SYS2055</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>DeleteLine</Name>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<Command>DeleteRecord</Command>
												<Text>@SYS10308</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>ButtonVoucherTrans</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>330382098</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>MenuFunctionButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Visible>No</Visible>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<DataSource>LedgerJournalTrans</DataSource>
												<MenuItemName>LedgerTransVoucherSimulation_IT</MenuItemName>
												<SaveRecord>No</SaveRecord>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>ButtonVoucherTransSimulation1</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HeightMode>Auto</HeightMode>
												<Type>MenuFunctionButton</Type>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataSource>LedgerJournalTrans</DataSource>
												<MenuItemName>LedgerTransVoucherSimulation_IT</MenuItemName>
												<SaveRecord>No</SaveRecord>
											</AxFormControl>
										</Controls>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>LedgerJournalTrans</DataSource>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>overviewGrid</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormImageControl">
										<Name>ErrorExist</Name>
										<AlignControl>No</AlignControl>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>44739242</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<Height>14</Height>
										<HeightMode>Auto</HeightMode>
										<Skip>Yes</Skip>
										<Type>Image</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<Width>14</Width>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>ErrorExist</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
										<Imagemode>SizeToFit</Imagemode>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>LedgerJournalTrans_TransDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>67108863</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransDate</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>LedgerJournalTrans_AcknowledgementDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>89478484</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AcknowledgementDate</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerJournalTrans_Voucher</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>111848105</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Voucher</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerJournalTrans_Company</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>153391688</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Company</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>LedgerJournalTrans_AccountType</Name>
										<ElementPosition>805306362</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AccountType</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormSegmentedEntryControl">
										<Name>LedgerJournalTrans_AccountNum</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>939524089</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>SegmentedEntry</Type>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension>
											<Name>SegmentedEntryControl</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>parmControllerClassName</Name>
													<Type>String</Type>
													<Value>DimensionDynamicAccountController</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmAccountTypeEnumName</Name>
													<Type>String</Type>
													<Value>AccountType</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIsDefaultAccount</Name>
													<Type>Enum</Type>
													<TypeName>boolean</TypeName>
													<Value>False</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmValidateBlockedForManualEntry</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmLockMainAccountSegment</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmPostingType</Name>
													<Type>Enum</Type>
													<TypeName>LedgerPostingType</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeTotalAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeFinancialAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
										<DataSource>LedgerJournalTrans</DataSource>
										<ReferenceField>LedgerDimension</ReferenceField>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerJournalTrans_Txt</Name>
										<ElementPosition>1073741816</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Txt</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>LedgerJournalTrans_AmountCurDebit</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1207959543</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AmountCurDebit</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>LedgerJournalTrans_AmountCurCredit</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1342177270</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AmountCurCredit</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerJournalTrans_OffsetCompany</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>89478484</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>OffsetCompany</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>LedgerJournalTrans_OffsetType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1476394997</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>OffsetAccountType</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormSegmentedEntryControl">
										<Name>LedgerJournalTrans_OffsetAccount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612724</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>SegmentedEntry</Type>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension>
											<Name>SegmentedEntryControl</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>parmControllerClassName</Name>
													<Type>String</Type>
													<Value>DimensionDynamicAccountController</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmAccountTypeEnumName</Name>
													<Type>String</Type>
													<Value>OffsetAccountType</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIsDefaultAccount</Name>
													<Type>Enum</Type>
													<TypeName>boolean</TypeName>
													<Value>False</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmValidateBlockedForManualEntry</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmLockMainAccountSegment</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmPostingType</Name>
													<Type>Enum</Type>
													<TypeName>LedgerPostingType</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeTotalAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeFinancialAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
										<DataSource>LedgerJournalTrans</DataSource>
										<ReferenceField>OffsetLedgerDimension</ReferenceField>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerJournalTrans_OffsetTxt</Name>
										<ElementPosition>223696210</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>OffsetTxt</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerJournalTrans_CurrencyCode</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyCode</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerJournalTrans_Grid_TaxItemGroup</Name>
										<ElementPosition>920350134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxItemGroup</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerJournalTrans_Grid_TaxGroup</Name>
										<ElementPosition>613566756</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxGroup</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>WithHoldingTax_TaxWithholdGroup</Name>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxWithholdGroup</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>LedgerJournalTrans_Grid_ReleaseDate</Name>
										<Type>DateTime</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ReleaseDate</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>LedgerJournalTrans_ReverseEntry</Name>
										<ElementPosition>1879048178</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>ReverseEntry</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>LedgerJournalTrans_ReverseDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2013265905</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ReverseDate</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>LedgerJournalTrans</DataSource>
								<VisibleRows>8</VisibleRows>
								<VisibleRowsMode>Fixed</VisibleRowsMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>BottomGroup</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Top>0</Top>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>AccountName</Name>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>Yes</CacheDataMethod>
										<DataMethod>AccountName</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>OffsetAccountName</Name>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>Yes</CacheDataMethod>
										<DataMethod>OffsetAccountName</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>taxAmountJournal1</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1533916890</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>taxAmountJournal</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
										<Label>@SYS128996</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<ColumnsMode>Fill</ColumnsMode>
								<DataSource>LedgerJournalTrans</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS6188</Caption>
						<DataSource>LedgerJournalTrans</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>GeneralTab</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>IdentificationGroup</Name>
								<ElementPosition>357913940</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerJournalTrans_Voucher1</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Voucher</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Qty</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Qty</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Caption>@SYS5711</Caption>
								<DataSource>LedgerJournalTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Reason</Name>
								<ElementPosition>894784850</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>editReasonCode</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editReasonCode</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>editReasonComment</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editReasonComment</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@SYS86426</Caption>
								<DataSource>LedgerJournalTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Currency</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CurrencyCode</Name>
										<ElementPosition>1227133512</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyCode</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>Currency_Triangulation</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Triangulation</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>fieldExchRate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1533916890</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<NeededPermission>Manual</NeededPermission>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editExchRate</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
										<MinNoOfDecimals>4</MinNoOfDecimals>
										<MinNoOfDecimalsMode>Fixed</MinNoOfDecimalsMode>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>fieldExchRateSecond</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1840700268</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<NeededPermission>Manual</NeededPermission>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editExchRateSecond</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
										<MinNoOfDecimals>4</MinNoOfDecimals>
										<MinNoOfDecimalsMode>Fixed</MinNoOfDecimalsMode>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>crossrate</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>Yes</CacheDataMethod>
										<DataMethod>crossrate</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
										<Label>@SYS53164</Label>
										<MinNoOfDecimals>4</MinNoOfDecimals>
										<MinNoOfDecimalsMode>Fixed</MinNoOfDecimalsMode>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>exchRateTxt</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>exchRateTxt</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
										<DisplayLength>15</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<Caption>@SYS333999</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Tax</Name>
								<ElementPosition>715827880</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerJournalTrans_TaxGroup</Name>
										<ElementPosition>613566756</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxGroup</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerJournalTrans_TaxItemGroup</Name>
										<ElementPosition>920350134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxItemGroup</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerJournalTrans_TaxCode</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1227133512</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxCode</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>LedgerJournalTrans_TaxDirectionControl</Name>
										<ElementPosition>1533916890</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxDirectionControl</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>LedgerJournalTrans_VatDueDate_W</Name>
										<ElementPosition>1687308579</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>VatDueDate_W</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TaxAmountJournal</Name>
										<AllowEdit>No</AllowEdit>
										<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
										<ElementPosition>1891830831</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>Yes</CacheDataMethod>
										<DataMethod>taxAmountJournal</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>LedgerJournalTrans_TaxBase_W</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1994091957</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxBase_W</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>GSTHSTTaxType_CA_GSTHSTTaxType_CA</Name>
										<CountryRegionCodes>CA</CountryRegionCodes>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>GSTHSTTaxType_CA</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>WithHoldingTax_TaxWithholdGroup1</Name>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxWithholdGroup</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>WithHoldingTax_TaxWithholdCalculate_TH</Name>
										<CountryRegionCodes>TH,SA</CountryRegionCodes>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxWithholdCalculate_TH</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>WithHoldingTax_TaxWithholdItemGroupHeading_TH</Name>
										<CountryRegionCodes>TH,SA</CountryRegionCodes>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>WithHoldingTax_TaxWithholdItemGroupHeading_TH_TaxWithholdItemGroup1</Name>
												<DataRelationPath>TaxWithholdItemGroupHeading_TH</DataRelationPath>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
											</AxFormControl>
										</Controls>
										<DataSource>LedgerJournalTrans</DataSource>
										<ReferenceField>TaxWithholdItemGroupHeading_TH</ReferenceField>
									</AxFormControl>
								</Controls>
								<Caption>@SYS333961</Caption>
								<DataSource>LedgerJournalTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>LegalEntityGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TabCompany</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>153391688</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Company</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TabOffsetCompany</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>89478484</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>OffsetCompany</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@GeneralLedger:LegalEntity</Caption>
								<DataSource>LedgerJournalTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Posting</Name>
								<ElementPosition>1789569700</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>PostingRelease_ReleaseDate</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>DateTime</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ReleaseDate</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>ReversingGroup_ReverseEntry</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ReverseEntry</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ReversingGroup_ReverseDate</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ReverseDate</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>LedgerJournalTrans_Transfer</Name>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Transfer</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@SYS334010</Caption>
								<DataSource>LedgerJournalTrans</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS2952</Caption>
						<DataSource>LedgerJournalTrans</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>HistoryTab</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>2143289342</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CurrentJournalGroup</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>715827882</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ReportedAsReadyBy</Name>
										<AllowEdit>No</AllowEdit>
										<ConfigurationKey>LedgerBasic</ConfigurationKey>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>ReportedAsReadyBy</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
										<Label>@SYS22056</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ApprovedBy1</Name>
										<AllowEdit>No</AllowEdit>
										<ConfigurationKey>LedgerBasic</ConfigurationKey>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>ApprovedBy</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RejectedBy</Name>
										<AllowEdit>No</AllowEdit>
										<ConfigurationKey>LedgerBasic</ConfigurationKey>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>RejectedBy</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
										<Label>@SYS22205</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>PostedDateTime</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>DateTime</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>PostedDateTime</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@SYS24582</Caption>
								<DataSource>LedgerJournalTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>InterCompanyGroup</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerJournalTrans_ForeignCompany</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ForeignCompany</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerJournalTrans_ForeignVoucher</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ForeignVoucher</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@SYS3805</Caption>
								<DataSource>LedgerJournalTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>TransferGroup</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>LedgerJournalTrans_TransferredOn</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransferredOn</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerJournalTrans_TransferredBy</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransferredBy</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerJournalTrans_TransferredTo</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransferredTo</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@SYS13220</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ErrorLogGroup</Name>
								<ElementPosition>1789569705</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ErrorLog</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>ErrorLog</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
										<Label>@SYS22915</Label>
										<MultiLine>Yes</MultiLine>
									</AxFormControl>
								</Controls>
								<Caption>@SYS25864</Caption>
								<DataSource>LedgerJournalTrans</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS10575</Caption>
						<DataSource>LedgerJournalTrans</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<DataSource>LedgerJournalTrans</DataSource>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Balances</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>TotalsGroupTabular</Name>
						<ExtendedStyle>tabularFields</ExtendedStyle>
						<Pattern>TabularFields</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>BalancesCaptionRow</Name>
								<ExtendedStyle>tabularFields_title</ExtendedStyle>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<AllowUserSetup>No</AllowUserSetup>
								<ArrangeMethod>None</ArrangeMethod>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>TotalsHeader</Name>
								<ExtendedStyle>tabularFields_rowHeader</ExtendedStyle>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>RowCaptionsHeader</Name>
										<AllowEdit>No</AllowEdit>
										<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
										<Type>StaticText</Type>
										<FormControlExtension
											i:nil="true" />
										<Text></Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>DebitHeader</Name>
										<AllowEdit>No</AllowEdit>
										<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
										<Type>StaticText</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS9512</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>CreditHeader</Name>
										<AllowEdit>No</AllowEdit>
										<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
										<Type>StaticText</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS35221</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>BalanceHeader</Name>
										<AllowEdit>No</AllowEdit>
										<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
										<Type>StaticText</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS95</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>FormStaticTextControl1</Name>
										<AllowEdit>No</AllowEdit>
										<ConfigurationKey>LedgerAdv2BudgetCtrl</ConfigurationKey>
										<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
										<Type>StaticText</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS342081</Text>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>No</AllowUserSetup>
								<ArrangeMethod>None</ArrangeMethod>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>VoucherRow</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>613566756</ElementPosition>
								<ExtendedStyle>tabularFields_row</ExtendedStyle>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>VoucherRowHeader</Name>
										<AllowEdit>No</AllowEdit>
										<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
										<Type>StaticText</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS12371</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>VoucherDebit</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>VoucherDebit</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>VoucherCredit</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>VoucherCredit</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>VoucherTotal</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>VoucherTotal</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
										<FastTabSummary>No</FastTabSummary>
										<NoOfDecimals>-1</NoOfDecimals>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>BudgetCheckResult</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>LedgerAdv2BudgetCtrl</ConfigurationKey>
										<ExtendedStyle>budgetCheckResult_status</ExtendedStyle>
										<PreviewPartRef>BudgetCheckResultPreview</PreviewPartRef>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayBudgetCheckResult</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
										<Label>@SYS342081</Label>
										<ShowLabel>No</ShowLabel>
										<Items />
									</AxFormControl>
								</Controls>
								<AllowUserSetup>No</AllowUserSetup>
								<ArrangeMethod>None</ArrangeMethod>
								<DataSource>LedgerJournalTrans</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>JournalRow</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>920350134</ElementPosition>
								<ExtendedStyle>tabularFields_row</ExtendedStyle>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>JournalRowHeader</Name>
										<AllowEdit>No</AllowEdit>
										<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
										<Type>StaticText</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS6790</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>JournalDebit</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>JournalDebit</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>JournalCredit</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>JournalCredit</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>JournalBalance</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>JournalBalance</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>No</AllowUserSetup>
								<ArrangeMethod>None</ArrangeMethod>
								<DataSource>LedgerJournalTrans</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>BalancesRowFooter</Name>
								<ExtendedStyle>tabularFields_rowFooter</ExtendedStyle>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<AllowUserSetup>No</AllowUserSetup>
								<ArrangeMethod>None</ArrangeMethod>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<AllowUserSetup>Restricted</AllowUserSetup>
						<ArrangeMethod>None</ArrangeMethod>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>OffsetBalance</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ExtendedStyle>tabularFields</ExtendedStyle>
						<Pattern>TabularFields</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>Group</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FixedOffsetCaptionRow</Name>
								<ExtendedStyle>tabularFields_title</ExtendedStyle>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<AllowUserSetup>No</AllowUserSetup>
								<ArrangeMethod>None</ArrangeMethod>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FixedOffsetHeaderRow</Name>
								<ExtendedStyle>tabularFields_rowHeader</ExtendedStyle>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>FixedOffsetHeader</Name>
										<AllowEdit>No</AllowEdit>
										<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
										<Type>StaticText</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS55041</Text>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>No</AllowUserSetup>
								<ArrangeMethod>None</ArrangeMethod>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FixedOffsetBalanceRow</Name>
								<ExtendedStyle>tabularFields_row</ExtendedStyle>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>BeginBalanceRowHeader</Name>
										<AllowEdit>No</AllowEdit>
										<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
										<Type>StaticText</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS95</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>beginBalance</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>beginBalance</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>No</AllowUserSetup>
								<ArrangeMethod>None</ArrangeMethod>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FixedOffsetTotalRow</Name>
								<ExtendedStyle>tabularFields_row</ExtendedStyle>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>FixedOffsetJournalBalanceRowHeader</Name>
										<AllowEdit>No</AllowEdit>
										<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
										<Type>StaticText</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS55069</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>LedgerJournalBalance</Name>
										<AllowEdit>No</AllowEdit>
										<ConfigurationKey>LedgerBasic</ConfigurationKey>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>ledgerJournalBalance</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>No</AllowUserSetup>
								<ArrangeMethod>None</ArrangeMethod>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FixedOffsetBalanceEndControl</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ExtendedStyle>tabularFields_row</ExtendedStyle>
								<Type>Group</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>FixedOffsetEndBalanceRowHeader</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
										<Type>StaticText</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS50986</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>EndBalance</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>EndBalance</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>No</AllowUserSetup>
								<ArrangeMethod>None</ArrangeMethod>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FixedOffsetRowFooter</Name>
								<ExtendedStyle>tabularFields_rowFooter</ExtendedStyle>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<AllowUserSetup>No</AllowUserSetup>
								<ArrangeMethod>None</ArrangeMethod>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<AllowUserSetup>Restricted</AllowUserSetup>
						<ArrangeMethod>None</ArrangeMethod>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<AllowUserSetup>Restricted</AllowUserSetup>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<DataSource>LedgerJournalTrans</DataSource>
				<FrameType>None</FrameType>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>