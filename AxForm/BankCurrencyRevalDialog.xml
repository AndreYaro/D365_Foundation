<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BankCurrencyRevalDialog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
/// <summary>
/// The <c>BankCurrencyRevalDialog</c> form handles the processing for the user interaction for the bank - foreign currency revaluation process.
/// </summary>
[Form]
public class BankCurrencyRevalDialog extends FormRun implements IDialogable
{
    private BankCurrencyRevalCompanyFilter companyFilter;
    private BankCurrencyRevalController bankCurrencyRevalController;
    private BankCurrencyRevalContract bankCurrencyReval;
    private boolean firstLoad = true;
}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        if (!element.args().caller())
        {
            throw error("@SYS22539");
        }

        if (!(element.args().caller() is SysOperationDialog))
        {
            throw error(strFmt("@SYS86720", this.form().name(), classStr(SysOperationDialog)));
        }

        SysOperationDialog sysOperationDialog = element.args().caller() as SysOperationDialog;

        if (sysOperationDialog.controller() == null || !(sysOperationDialog.controller() is BankCurrencyRevalController))
        {
            throw error(strFmt("@CashManagement:IncorrectControllerType", classStr(BankCurrencyRevalController)));
        }

        bankCurrencyRevalController = sysOperationDialog.controller() as BankCurrencyRevalController;

        bankCurrencyReval = bankCurrencyRevalController.getDataContractObject(classStr(BankCurrencyRevalContract)) as BankCurrencyRevalContract;

        if (bankCurrencyReval == null)
        {
            throw error(strFmt("@CashManagement:IncorrectDataContractType", classStr(BankCurrencyRevalContract)));
        }

        this.initControlValuesFromContract(bankCurrencyReval);

        if (FeatureStateProvider::isFeatureEnabled(BankCurrencyRevalEnhancementFeature::instance()))
        {
            ValidateResetIcon.visible(true);

            ResetWarningIcon.colorScheme(FormColorScheme::RGB);
            ResetWarningIcon.foregroundColor(WinAPI::RGB2int(211,104,0));

            DimensionResetWarningText.colorScheme(FormColorScheme::RGB);
            DimensionResetWarningText.foregroundColor(WinAPI::RGB2int(211,104,0));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formRun</Name>
				<Source><![CDATA[
    public FormRun formRun()
    {
        //Required by the SysOperation framework.
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initControlValuesFromContract</Name>
				<Source><![CDATA[
    protected void initControlValuesFromContract(BankCurrencyRevalContract _bankCurrencyReval)
    {
        date today = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        TransDate.dateValue(_bankCurrencyReval.parmTransDate() == dateNull() ? today : _bankCurrencyReval.parmTransDate());
        DateOfRate.dateValue(_bankCurrencyReval.parmExchangeRateDate() == dateNull() ? today : _bankCurrencyReval.parmExchangeRateDate());

        if (_bankCurrencyReval.parmPreviewBeforePost())
        {
            RunMode.value(NoYes::Yes);
        }
        else
        {
            BankCurrencyRevalHistory history;

            select firstonly RecId from history
                where history.LegalEntity == curExt();

            RunMode.value(history.RecId > 0 ? NoYes::No : NoYes::Yes);
        }

        this.initCompanyFilter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showResetWarningInfo</Name>
				<Source><![CDATA[
    private void showResetWarningInfo()
    {
        boolean showWarning = false;
        
        for (BankAccountTable bankAccountTableLocal = BankAccountTable_ds.getFirst(); bankAccountTableLocal; bankAccountTableLocal = BankAccountTable_ds.getNext())
        {
            if (bankAccountTableLocal.LastRevalResetDate == dateNull() && this.hasRevalHistoryBeforeFeatureEnabled(bankAccountTableLocal.AccountID, bankAccountTableLocal.DataAreaId))
            {
                showWarning = true;
                break;
            }
        }
        DimensionResetWarning.visible(showWarning);
        RunReset.visible(showWarning);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasRevalHistoryBeforeFeatureEnabled</Name>
				<Source><![CDATA[
    private boolean hasRevalHistoryBeforeFeatureEnabled(CompanyBankAccountId _accountId, LegalEntityDataAreaId _dataAreaId)
    {
        BankCurrencyRevalHistory bankCurrencyRevalHistory;

        select firstonly RecId from bankCurrencyRevalHistory
            where bankCurrencyRevalHistory.BankAccountId == _accountId
                && bankCurrencyRevalHistory.LegalEntity == _dataAreaId
                && !bankCurrencyRevalHistory.IsRunAfterEnhancementFeatureEnabled;

        return bankCurrencyRevalHistory.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCompanyFilter</Name>
				<Source><![CDATA[
    private void initCompanyFilter()
    {
        companyFilter = BankCurrencyRevalCompanyFilter::construct(bankAccountTable_DS, LegalEntity, BankAccountTable_DataAreaId);

        if (bankCurrencyReval.parmSelectedBankAccounts().elements() > 0)
        {
            BankAccountTable bankAccountTableLocal;
            container companyInfoDataAreas;
            container companyInfoRecIds;
            CompanyInfo companyInfo;

            ListEnumerator selectedBankAccountRecIdListEnumerator = bankCurrencyReval.parmSelectedBankAccounts().getEnumerator();

            while (selectedBankAccountRecIdListEnumerator.moveNext())
            {
                bankAccountTableLocal = BankAccountTable::findByRecId(selectedBankAccountRecIdListEnumerator.current());

                if (!conFind(companyInfoDataAreas, bankAccountTableLocal.DataAreaId))
                {
                    companyInfo = CompanyInfo::findDataArea(bankAccountTableLocal.DataAreaId);
                    companyInfoRecIds += companyInfo.RecId;
                    companyInfoDataAreas += companyInfo.DataArea;
                }
            }

            companyFilter.addCompanyCriteria([companyInfoRecIds, companyInfoDataAreas]);
        }

        companyFilter.addSelectedCompaniesToDataSourceRange();
        companyFilter.setCompanyControlsVisibility();
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectBankAccountsFromSysLastValues</Name>
				<Source><![CDATA[
    private void selectBankAccountsFromSysLastValues()
    {
        BankAccountTable bankAccountTableLocal;

        ListEnumerator selectedBankAccountRecIdListEnumerator = bankCurrencyReval.parmSelectedBankAccounts().getEnumerator();

        while (selectedBankAccountRecIdListEnumerator.moveNext())
        {
            bankAccountTableLocal = BankAccountTable::findByRecId(selectedBankAccountRecIdListEnumerator.current());
            
            if ((FeatureStateProvider::isFeatureEnabled(BankCurrencyRevalEnhancementFeature::instance()) && (bankAccountTableLocal.LastRevalResetDate != dateNull() || !element.hasRevalHistoryBeforeFeatureEnabled(bankAccountTableLocal.AccountID, bankAccountTableLocal.DataAreaId)))
                || !FeatureStateProvider::isFeatureEnabled(BankCurrencyRevalEnhancementFeature::instance()))
            {
                BankAccountTable_ds.markRecord(bankAccountTableLocal, 1);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    public boolean canClose()
    {
        boolean canClose = super();

        if (canClose && element.closedOk())
        {
            canClose = bankCurrencyRevalController.checkCloseDialog();
        }

        return canClose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyValuesFromDialogToContract</Name>
				<Source><![CDATA[
    protected void applyValuesFromDialogToContract(BankCurrencyRevalContract _bankCurrencyReval)
    {
        List selectedBankAccounts = new List(Types::Int64);

        for (BankAccountTable bankAccountTableLocal = BankAccountTable_ds.getFirst(true); bankAccountTableLocal; bankAccountTableLocal = BankAccountTable_ds.getNext())
        {
            selectedBankAccounts.addEnd(bankAccountTableLocal.RecId);
        }

        _bankCurrencyReval.parmTransDate(TransDate.dateValue());
        _bankCurrencyReval.parmExchangeRateDate(DateOfRate.dateValue());
        _bankCurrencyReval.parmSelectedBankAccounts(selectedBankAccounts);
        _bankCurrencyReval.parmPreviewBeforePost(RunMode.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        this.applyValuesFromDialogToContract(bankCurrencyReval);

        super();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>BankAccountTable</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            this.queryBuildDataSource().addOrderByField(fieldNum(BankAccountTable, DataAreaId));
            this.queryBuildDataSource().addOrderByField(fieldNum(BankAccountTable, AccountId));

            this.excludeIneligibleBankAccounts();
        }

]]></Source>
					</Method>
					<Method>
						<Name>excludeIneligibleBankAccounts</Name>
						<Source><![CDATA[
        private void excludeIneligibleBankAccounts()
        {
            QueryBuildDataSource bankAccountQbds = this.queryBuildDataSource();

            QueryBuildDataSource companyInfoQbds = bankAccountQbds.addDataSource(tableStr(CompanyInfo));
            companyInfoQbds.addLink(fieldNum(BankAccountTable, DataAreaId), fieldNum(CompanyInfo, DataArea));
            
            QueryBuildDataSource ledgerQbds = companyInfoQbds.addDataSource(tableStr(Ledger));
            ledgerQbds.addLink(fieldNum(CompanyInfo, RecId), fieldNum(Ledger, PrimaryForLegalEntity));

            QueryBuildRange currencyCodeAccountingCurrencyRange = bankAccountQbds.addRange(fieldNum(BankAccountTable, CurrencyCode));

            str accountingCurrencyRangeValue = strFmt('(%1.%2 != %3.%4)',
                bankAccountQbds.name(),
                fieldStr(BankAccountTable, CurrencyCode),
                ledgerQbds.name(),
                fieldStr(Ledger, AccountingCurrency));

            currencyCodeAccountingCurrencyRange.value(accountingCurrencyRangeValue);

            QueryBuildRange currencyCodeReportingCurrencyRange = bankAccountQbds.addRange(fieldNum(BankAccountTable, CurrencyCode));

            str reportingCurrencyRangeValue = strFmt('((%1.%2 != "") && (%3.%4 != %1.%2))',
                ledgerQbds.name(),
                fieldStr(Ledger, ReportingCurrency),
                bankAccountQbds.name(),
                fieldStr(BankAccountTable, CurrencyCode));

            currencyCodeReportingCurrencyRange.value(reportingCurrencyRangeValue);
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            super();

            if (firstLoad)
            {
                element.selectBankAccountsFromSysLastValues();
                firstLoad = false;
            }

            if (FeatureStateProvider::isFeatureEnabled(BankCurrencyRevalEnhancementFeature::instance()))
            {
                element.showResetWarningInfo();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayCanBeProcessedIconAfterEnableEnhacementFeature</Name>
						<Source><![CDATA[
        public display container displayCanBeProcessedIconAfterEnableEnhacementFeature(BankAccountTable _bankAccountTable)
        {
            container imageContainer;

            if (_bankAccountTable.LastRevalResetDate == dateNull() && element.hasRevalHistoryBeforeFeatureEnabled(_bankAccountTable.AccountID, _bankAccountTable.DataAreaId))
            {
                ImageReference image = ImageReference::constructForSymbol(ImageReferenceSymbol::Warning);
                imageContainer = image.pack();
            }

            return imageContainer;
        }

]]></Source>
					</Method>
					<Method>
						<Name>markChanged</Name>
						<Source><![CDATA[
        public void markChanged()
        {
            super();

            if (FeatureStateProvider::isFeatureEnabled(BankCurrencyRevalEnhancementFeature::instance())
                && BankAccountTable.LastRevalResetDate == dateNull()
                && element.hasRevalHistoryBeforeFeatureEnabled(BankAccountTable.AccountID, BankAccountTable.DataAreaId))
            {
                BankAccountTable_ds.markRecord(BankAccountTable, 0);
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>LegalEntity</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean wasModified = super();

            if (wasModified)
            {
                companyFilter.addSelectedCompaniesToDataSourceRange();
                BankAccountTable_DS.executeQuery();
            }

            return wasModified;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RunReset</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            MenuFunction menuFunction = new MenuFunction(menuitemDisplayStr(BankCurrencyRevalReset), MenuItemType::Display);
            menuFunction.run();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>BankAccountTable</Name>
			<Table>BankAccountTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountNameKana_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActiveFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActiveTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankAccountStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCIN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankClearingCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCodeType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCompanyStatementName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankConstantSymbol</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankContractAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankDestinationName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankInterbankClearingCode_BE</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankMultiCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPositivePayFormat</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPositivePayFormatName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPositivePayStartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankReconAllowedPennyDifference</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankReconciliationEnabled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankReconciliationMatchRuleSet</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankReconciliationStmtAsPaymConfirm</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankReconMatchAutoAfterImport</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankReconMatchRuleManualMatch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankReconMatchRuleManualReversal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankSortCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankStatementFormat</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankStatementName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankSuffix</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTransferCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CellularPhone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompanyPaymId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContactPerson</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrAccount_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyOrder_TemplateName_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyOrder_TemplateRefRecId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencySellOrder_TemplateName_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencySellOrder_TemplateRefRecId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustomerPaymentFeeLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustPaymFeePost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DebitDirectId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DiscCreditMaxMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DivisionPaymId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Email</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FeeContractAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GiroContract</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GiroContractAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IBAN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IncludeBankBarCode_FI</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceRemitAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceRemittanceLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>isBankPrenote</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsNACHAFileBlocked</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastRevalResetDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerJournalNameId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Location</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LvDefaultBank</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LvPayOrderType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NsfFeeMarkupGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NsfFeeMarkupGroupModule</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NsfLedgerJournalName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OverDraftLimit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Pager</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymForeignExportPath_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymLocalExportPath_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymOrderNumSeqId_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Phone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PhoneLocal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrenoteResponseDays</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrintGiro_FI</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegistrationNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemitCollectionAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemitDiscountAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemittanceCollectionLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemittanceDiscountLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Rfc_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMS</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SpecificSymbol</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SWIFTNo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TeleFax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Telex</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TemplateFileName_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TemplateRefRecId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransType_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>URL</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<CrossCompanyAutoQuery>Yes</CrossCompanyAutoQuery>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@CashManagement:BankCurrencyRevalFeature</Caption>
		<DialogSize xmlns="">Large</DialogSize>
		<Pattern xmlns="">DialogFastTabs</Pattern>
		<PatternVersion xmlns="">1.0</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">Dialog</Style>
		<WindowType xmlns="">Slider</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Parameters</Name>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>RevaluationInformationGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>TransDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Date</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@CashManagement:BankCurrencyRevalRevaluationDate</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>DateOfRate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Date</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@CashManagement:BankCurrencyRevalDateOfRate</Label>
									</AxFormControl>
								</Controls>
								<Caption>@GeneralLedger:ForeignCurrencyRevaluationInformation</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FilterGroup</Name>
								<Pattern>CustomFilters</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LegalEntity</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>LedgerLegalEntitySelection</ExtendedDataType>
										<LookupOnly>Yes</LookupOnly>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
								<FrameType>None</FrameType>
								<Style>CustomFilter</Style>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>DimensionResetWarning</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<Visible>No</Visible>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormImageControl">
										<Name>ResetWarningIcon</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ExtendedStyle>image_gridIcon</ExtendedStyle>
										<HeightMode>Auto</HeightMode>
										<Type>Image</Type>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<NormalImage>Warning</NormalImage>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>DimensionResetWarningText</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HeightMode>Auto</HeightMode>
										<Type>StaticText</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Text>@CashManagement:BankCurrencyRevalNoResetWarningMessage</Text>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>DimensionResetWarningJumpRef</Name>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>RunReset</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Button</Type>
										<Visible>No</Visible>
										<Width>70</Width>
										<WidthMode>Manual</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MultiSelect>Yes</MultiSelect>
										<Style>Link</Style>
										<Text>@CashManagement:BankCurrencyRevalResetGoToSetting</Text>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>GridGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>BankAccountLabel</Name>
										<Type>StaticText</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS21829</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>BankAccounts</Name>
										<Type>Grid</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormImageControl">
												<Name>ValidateResetIcon</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Image</Type>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>displayCanBeProcessedIconAfterEnableEnhacementFeature</DataMethod>
												<DataSource>BankAccountTable</DataSource>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BankAccountTable_DataAreaId</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>DataAreaId</DataField>
												<DataSource>BankAccountTable</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BankAccountTable_AccountID</Name>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>AccountID</DataField>
												<DataSource>BankAccountTable</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BankAccountTable_Name</Name>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>Name</DataField>
												<DataSource>BankAccountTable</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BankAccountTable_BankGroupId</Name>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>BankGroupId</DataField>
												<DataSource>BankAccountTable</DataSource>
											</AxFormControl>
										</Controls>
										<DataSource>BankAccountTable</DataSource>
									</AxFormControl>
								</Controls>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>AdditionalControlsGroup</Name>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>RunMode</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@GeneralLedger:ForeignCurrencyRevalPreviewBeforePosting</Label>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
							</AxFormControl>
						</Controls>
						<Caption>@CashManagement:BankCurrencyRevalDialogParameters</Caption>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FooterGroup</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<ColumnsMode>Fill</ColumnsMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>CommitGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>