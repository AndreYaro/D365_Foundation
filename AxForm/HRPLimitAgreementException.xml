<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>HRPLimitAgreementException</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class HRPLimitAgreementException extends FormRun
{
    FormListColumn                  listOfAvailableItems;
    HRPTmpLimitAgreementRule        tmpSigningLimitAgreementRule;
    HRPAuthorityBasis               authorityBasis;
    boolean                         isRecordExpired;
    Set                             setAllList, setSelectedList;

    const str valueDelimiter = ';';
    const str queryDelimiter = ',!';
    const str notSymbol = '!';

}
]]></Source>
			</Method>
			<Method>
				<Name>enableAddRemoveButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the enabled property for the add and remove buttons depending on the total selected and total available items in the <c>ListView</c> form controls.
    /// </summary>
    /// <param name="_availableItemsCounter">
    /// An interger value that represents the number of available records for selection.
    /// </param>
    /// <param name="_selectedItemsCounter">
    /// An integer value that represents the number of selected records.
    /// </param>
    public void enableAddRemoveButtons(Counter _availableItemsCounter, Counter _selectedItemsCounter)
    {
        if (_availableItemsCounter == 0 && _selectedItemsCounter == 0)
        {
            btnAdd.enabled(false);
            btnDelete.enabled(false);
        }
        else if (_availableItemsCounter > 0 && _selectedItemsCounter == 0)
        {
            btnAdd.enabled(true);
            btnDelete.enabled(false);
        }
        else if (_availableItemsCounter == 0 && _selectedItemsCounter > 0)
        {
            btnAdd.enabled(false);
            btnDelete.enabled(true);
        }
        else
        {
            btnAdd.enabled(true);
            btnDelete.enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAllListFormControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method fill data in AllList <c>ListView</c> form control.
    /// </summary>
    public void fillAllListFormControl()
    {
        HcmJob                          job;
        HcmCompensationLevel            compensationLevel;
        Query                           query;
        QueryRun                        queryRun;
        QueryBuildDataSource            queryBuildDataSource;
        QueryBuildRange                 queryBuildRange;
        TempStr                         rangeValueStr;

        allList.deleteAll();
        rangeValueStr = strReplace(tmpSigningLimitAgreementRule.SelectedElements, valueDelimiter, queryDelimiter);
        rangeValueStr = notSymbol + rangeValueStr;
        query = new Query();

        if (authorityBasis == HRPAuthorityBasis::Job)
        {
            queryBuildDataSource = query.addDataSource(tablenum(HcmJob));
            queryBuildRange = queryBuildDataSource.addRange(fieldnum(HcmJob, JobId));
            queryBuildRange.value(rangeValueStr);

            queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                job = queryRun.get(tablenum(HcmJob));
                if (!setAllList.in(job.JobId))
                {
                    setAllList.add(job.JobId);
                    allList.add(job.JobId);
                }
            }
        }
        else if (authorityBasis == HRPAuthorityBasis::Compensation)
        {
            queryBuildDataSource = query.addDataSource(tablenum(HcmCompensationLevel));
            queryBuildRange = queryBuildDataSource.addRange(fieldnum(HcmCompensationLevel, CompensationLevelId));
            queryBuildRange.value(rangeValueStr);

            queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                compensationLevel = queryRun.get(tablenum(HcmCompensationLevel));
                if (!setAllList.in(compensationLevel.CompensationLevelId))
                {
                    setAllList.add(compensationLevel.CompensationLevelId);
                    allList.add(compensationLevel.CompensationLevelId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSelectedListFormControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method fill data in SelectedList <c>ListView</c> form control.
    /// </summary>
    public void fillSelectedListFormControl()
    {
        ListEnumerator                  listEnumerator;
        Name                            listItem;
        List                            selectedJobOrCompensationList;

        selectedJobOrCompensationList = strSplit(tmpSigningLimitAgreementRule.SelectedElements, valueDelimiter);
        listEnumerator = selectedJobOrCompensationList.getEnumerator();
        selectedList.deleteAll();

        while (listEnumerator.moveNext())
        {
            listItem = listEnumerator.current();
            if ((listItem != strMin()) && (!setSelectedList.in(listItem)))
            {
                setSelectedList.add(listItem);
                selectedList.add(listItem);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        Counter recordCount;

        super();

        setAllList = new Set(Types::String);
        setSelectedList = new Set(Types::String);

        if (!element.args().caller())
        {
            throw error("@SYS22539");
        }

        if (element.args().dataset() == tablenum(HRPTmpLimitAgreementRule))
        {
            tmpSigningLimitAgreementRule = element.args().record();
            authorityBasis = element.args().parmEnum();
            recordCount = str2int(element.args().parm());
        }

        listOfAvailableItems = new FormListColumn('', 1, 145);

        allList.addColumn(1, listOfAvailableItems);
        selectedList.addColumn(1, listOfAvailableItems);

        element.populateLists();

        // enable and disable the controls
        isRecordExpired = (recordCount == 0 ? true : false);
        addRemoveGroup.enabled(!isRecordExpired);

        this.setControlLabels();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the labels for the available and selected controls.
    /// </summary>
    [Wrappable(true)]
    protected final void setControlLabels()
    {
        if (authorityBasis == HRPAuthorityBasis::Job)
        {
            staticText.text("@SYS303699");
            SelectAllGroup.caption("@SYS309873");
            SelectedListGroup.caption("@SYS309874");
        }
        else if (authorityBasis == HRPAuthorityBasis::Compensation)
        {
            staticText.text("@SYS304093");
            SelectAllGroup.caption("@SYS309871");
            SelectedListGroup.caption("@SYS309872");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>Listview</c> form controls.
    /// </summary>
    public void populateLists()
    {
        Counter availableItemsCounter, selectedItemsCounter;

        allList.deleteAll();
        selectedList.deleteAll();

        element.fillAllListFormControl();
        element.fillSelectedListFormControl();

        availableItemsCounter = allList.getCount();
        selectedItemsCounter = selectedList.getCount();

        element.enableAddRemoveButtons(availableItemsCounter, selectedItemsCounter);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>btnAdd</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Add the selected availabe item to the selected listview.
        /// </summary>
        void clicked()
        {
            Counter                     itemIdex, availableItemsCounter, selectedItemsCounter;
            FormListItem                item;
            Name                        itemSelected;
            RefRecId                    signingLimitDocumentRecId;
            HRPExpireWorkerLimits       expireWorkerLimits;

            super();

            expireWorkerLimits = new HRPExpireWorkerLimits();

            itemIdex = allList.getNextItem(FormListNext::Selected);
            if (itemIdex != -1)
            {
                item = allList.getItem(itemIdex);
                itemSelected = item.toString();

                if (!setSelectedList.in(itemSelected))
                {
                    selectedList.addItem(allList.getItem(itemIdex));
                    setSelectedList.add(itemSelected);
                }
                allList.delete(allList.getNextItem(FormListNext::Selected));
                setAllList.remove(itemSelected);

                if (itemIdex > 0 && itemIdex < allList.getCount())
                {
                    item = allList.getItem(itemIdex - 1);
                    item.stateFocus(true);
                    item.stateSelected(true);
                }

                signingLimitDocumentRecId = HRPLimitDocument::getLimitDocumentRecId(tmpSigningLimitAgreementRule.SigningLimitDocument);

                expireWorkerLimits.expireLimitAgreementRule(tmpSigningLimitAgreementRule.SigningLimitAgreementRule, signingLimitDocumentRecId);
            }

            availableItemsCounter = allList.getCount();
            selectedItemsCounter = selectedList.getCount();

            element.enableAddRemoveButtons(availableItemsCounter, selectedItemsCounter);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>btnDelete</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Removes the selected  item from the selected listview.
        /// </summary>
        void clicked()
        {
            Counter         itemIdex, availableItemsCounter, selectedItemsCounter;
            Name            itemSelected;
            FormListItem    item;

            super();

            itemIdex = selectedList.getNextItem(FormListNext::Selected);

            if (itemIdex != -1)
            {
                item = selectedList.getItem(itemIdex);
                itemSelected = item.toString();

                if (!setAllList.in(itemSelected))
                {
                    allList.addItem(selectedList.getItem(itemIdex));
                    setAllList.add(itemSelected);
                }

                selectedList.delete(selectedList.getNextItem(FormListNext::Selected));
                setSelectedList.remove(itemSelected);

                if (itemIdex > 0 && itemIdex < selectedList.getCount())
                {
                    item = allList.getItem(itemIdex-1);
                    item.stateFocus(true);
                    item.stateSelected(true);
                }
            }

            availableItemsCounter = allList.getCount();
            selectedItemsCounter = selectedList.getCount();

            element.enableAddRemoveButtons(availableItemsCounter, selectedItemsCounter);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonOk</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            FormListItem    item;
            container       finalSelection = connull();

            super();

            if (!isRecordExpired)
            {
                for (counter i = 0; i < selectedList.getCount(); i++)
                {
                    item = selectedList.getItem(i, 0);
                    finalSelection += [item.text()];
                }
                element.args().caller().getSelectedElements(finalSelection);
            }

            element.close();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonCancel</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();
            element.close();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@SYS303698</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>StaticText</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>715827882</ElementPosition>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<FilterExpression>%1</FilterExpression>
				<Left>0</Left>
				<LeftMode>LeftEdge</LeftMode>
				<Type>StaticText</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Text></Text>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ParameterGroup</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Left>0</Left>
				<Pattern>ListPanel</Pattern>
				<PatternVersion>1.3</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ListPanelGroup</Name>
						<ExtendedStyle>listPanel</ExtendedStyle>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SelectAllGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>715827882</ElementPosition>
								<ExtendedStyle>listPanel_availPanel</ExtendedStyle>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormListViewControl">
										<Name>AllList</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>ListView</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ColumnHeader>No</ColumnHeader>
										<RowSelect>Yes</RowSelect>
										<ViewType>Report</ViewType>
									</AxFormControl>
								</Controls>
								<Bold>Medium</Bold>
								<Caption>@SYS135758</Caption>
								<ViewEditMode>View</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>AddRemoveGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<ExtendedStyle>listPanel_buttonPanel</ExtendedStyle>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>btnAdd</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>ImageOnly</ButtonDisplay>
										<NormalImage>MoveRight</NormalImage>
										<Text>@SYS2318</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>btnDelete</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>ImageOnly</ButtonDisplay>
										<NormalImage>MoveLeft</NormalImage>
										<Text>@SYS311855</Text>
									</AxFormControl>
								</Controls>
								<TopMargin>10</TopMargin>
								<TopMarginMode>Fixed</TopMarginMode>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SelectedListGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<ExtendedStyle>listPanel_selPanel</ExtendedStyle>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormListViewControl">
										<Name>SelectedList</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>ListView</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ColumnHeader>No</ColumnHeader>
										<RowSelect>Yes</RowSelect>
										<ViewType>Report</ViewType>
									</AxFormControl>
								</Controls>
								<Caption>@SYS135757</Caption>
								<ViewEditMode>View</ViewEditMode>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>CommitButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>ButtonOk</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Button</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Text>@SYS5473</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>ButtonCancel</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Button</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Text>@SYS50163</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>