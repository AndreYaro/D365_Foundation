<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>MarkupAutoSetup</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class MarkupAutoSetup extends FormRun implements OfficeIMenuCustomizer
{
    QueryBuildRange     moduleTypeBlock;
    QueryBuildRange     moduleCategoryBlock;
    QueryBuildRange     moduleReturnBlock;

    MarkupModule    moduleType;
    HeadingLine     moduleCategory;

    ReturnCodeType  returnSetup;

    #ISOCountryRegionCodes
    boolean            countryRegion_IN;

}
]]></Source>
			</Method>
			<Method>
				<Name>accountCodeChanged</Name>
				<Source><![CDATA[
    void  accountCodeChanged()
    {
        if (markupAutoTable.AccountCode == TableGroupAll::All)
        {
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, AccountRelation)).allowEdit(false);
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, AccountRelation)).skip(true);

            if (element.selectedControl()
                && element.selectedControl().name() == markupAutoTable_AccountRelation.name())
            {
                markupAutoTable_AccountCode.setFocus();
            }

            //<GIN>
            if (countryRegion_IN)
            {
                markupDivision.enabled(moduleCategory== HeadingLine::Heading);
            }
            // </GIN>
        }
        else
        {
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, AccountRelation)).allowEdit(true);
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, AccountRelation)).skip(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dlvModeCodeChanged</Name>
				<Source><![CDATA[
    void  dlvModeCodeChanged()
    {
        if (markupAutoTable.DlvModeCode == TableGroupAll::All)
        {
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeRelation)).allowEdit(false);
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeRelation)).skip(true);

            if (moduleCategory == HeadingLine::Line && MarkupAutoTable.ModuleType != MarkupModuleType::Delivery)
            {
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemCode)).allowEdit(true);
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemCode)).skip(false);
            }

            if (element.selectedControl()
                && element.selectedControl().name() == markupAutoTable_DlvModeRelation.name())
            {
                markupAutoTable_DlvModeRelation.setFocus();
            }
        }
        else
        {
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeRelation)).allowEdit(true);
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeRelation)).skip(false);

            if (moduleCategory == HeadingLine::Line)
            {
                markupAutoTable.ItemCode = TableGroupAll::All;
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemCode)).modified();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailChannelCodeChanged</Name>
				<Source><![CDATA[
    internal void retailChannelCodeChanged()
    {
        if (markupAutoTable.RetailChannelCode == TableGroupAll::All)
        {
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, RetailChannelRelation)).allowEdit(false);
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, RetailChannelRelation)).skip(true);

            if (element.selectedControl()
                && element.selectedControl().name() == markupAutoTable_RetailChannelRelation.name())
            {
                markupAutoTable_RetailChannelRelation.setFocus();
            }
        }
        else
        {
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, RetailChannelRelation)).allowEdit(true);
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, RetailChannelRelation)).skip(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableFieldsActive_IN</Name>
				<Source><![CDATA[
    void enableFieldsActive_IN()
    {
        MarkupTable     markupTable;

        markupTable = markupAutoLine.markupTable();

        if (markupAutoLine.Value < 0)
        {
            markupAutoLine_ds.object(fieldNum(MarkupAutoLine, NotionalCharges_IN)).enabled(false);
            markupAutoLine_ds.object(fieldNum(MarkupAutoLine, NotionalPct_IN)).enabled(false);
        }
        else
        {
            markupAutoLine_ds.object(fieldNum(MarkupAutoLine, NotionalCharges_IN)).enabled(TaxParameters::find().Customs_IN);

            if (markupTable.CustType != MarkupType::Item)
            {
                markupAutoLine_ds.object(fieldNum(MarkupAutoLine, NotionalPct_IN)).enabled(markupAutoLine.NotionalCharges_IN ? TaxParameters::find().Customs_IN : false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableSequence</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void enableSequence(boolean _allowEdit, boolean _visible)
    {
        if (AutoChargesSetupSequenceCompoundFeature::instance().isEnabled())
        {
            markupAutoLine_ds.object(fieldNum(MarkupAutoLine, Sequence)).allowEdit(_allowEdit);
            markupAutoLine_ds.object(fieldNum(MarkupAutoLine, Sequence)).skip(!_allowEdit);
            markupAutoLine_ds.object(fieldNum(MarkupAutoLine, Sequence)).visible(_visible);
            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableCompound</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void enableCompound(boolean _allowEdit, boolean _visible)
    {
        if (AutoChargesSetupSequenceCompoundFeature::instance().isEnabled())
        {
            markupAutoLine_ds.object(fieldNum(MarkupAutoLine, IsCompound)).allowEdit(_allowEdit);
            markupAutoLine_ds.object(fieldNum(MarkupAutoLine, IsCompound)).skip(!_allowEdit);
            markupAutoLine_ds.object(fieldNum(MarkupAutoLine, IsCompound)).visible(_visible);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableSpecificUnitSymbol</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void enableSpecificUnitSymbol(boolean _allowEdit, boolean _visible)
    {
        if (AutoChargesSetupLineLevelUnitOfMeasureFeature::instance().isEnabled())
        {
            markupAutoLine_ds.object(fieldNum(MarkupAutoLine, SpecificUnitSymbol)).allowEdit(_allowEdit);
            markupAutoLine_ds.object(fieldNum(MarkupAutoLine, SpecificUnitSymbol)).visible(_visible);
            markupAutoLine_ds.object(fieldNum(MarkupAutoLine, SpecificUnitSymbol)).skip(!_allowEdit);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableAutoLineTaxCharge</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void enableAutoLineTaxCharge(boolean _visible)
    {
        if (AutoChargesSetupSequenceCompoundFeature::instance().isEnabled())
        {
            markupAutoLineTaxCharge.visible(
                _visible &&
                this.moduleCategory == HeadingLine::Heading &&
                SalesParameters::find().MarkupValueBase == MarkupValueBase::LineAmountInclCharges);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void  init()
    {
        Query   query;
        str     labelTxt;
        str     moduleTypeRangeStr;
        // <GIN>
        boolean     isCustomsEnabled     = TaxParameters::isCustomsEnable_IN();
        boolean     isMiscChargesEnabled = LedgerParameters::isMiscellaneouscharges_IN();
        // </GIN>

        // <GIN>
        countryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        // </GIN>

        super();

        // <GIN>
        if (countryRegion_IN)
        {
            markupDivision.visible(isMiscChargesEnabled);
            markupDivision.enabled(false);
        }
        // </GIN>

        if (element.args().parmEnumType())
        {
            moduleType          = element.args().parmEnum();
        }
        else
        {
            // called from 'go to main table'
            switch (element.args().dataset())
            {
                // If ever called via 'go to main table' then add initialization of moduleType
                // for the tables, see e.g. the MarkupGroup implementation.
                default:
                    throw error(strFmt("@SYS73931", element.args().name()));
            }
        }

        query = new Query();
        query.addDataSource(tableNum(MarkupAutoLine));

        query.dataSourceTable(tableNum(MarkupAutoLine)).addDynalink(fieldNum(MarkupAutoLine, TableTableId),
                                                                    markupAutoTable,
                                                                    fieldNum(MarkupAutoTable, TableId));

        query.dataSourceTable(tableNum(MarkupAutoLine)).addDynalink(fieldNum(MarkupAutoLine, TableRecId),
                                                                    markupAutoTable,
                                                                    fieldNum(MarkupAutoTable, RecId));

        markupAutoLine_ds.query(query);

        moduleTypeBlock     = markupAutoTable_ds.query().dataSourceTable(tableNum(MarkupAutoTable)).addRange(fieldNum(MarkupAutoTable, ModuleType));
        moduleCategoryBlock = markupAutoTable_ds.query().dataSourceTable(tableNum(MarkupAutoTable)).addRange(fieldNum(MarkupAutoTable, ModuleCategory));

        moduleCategory      = HeadingLine::Heading;

        if (moduleType == MarkupModuleType::Cust || moduleType == MarkupModuleType::Delivery)
        {//For Cust or Delivery show both Cust and Delivery charges setups
            moduleTypeRangeStr = strFmt('%1, %2', queryValue(MarkupModuleType::Cust), queryValue(MarkupModuleType::Delivery));
        }
        else
        {
            moduleTypeRangeStr = queryValue(moduleType);
        }
        // Return - begin
        // is form called for Return misc charges setup
        switch (element.args().dataset())
        {
            case tableNum(ReturnReasonCode):
            case tableNum(ReturnAutomaticCustomerReturnReasonCodeChargeStaging):
                returnSetup = ReturnCodeType::Reason;
                labelTxt    = "@SYS30020"; // Reason code
                break;

            case tableNum(ReturnDispositionCode):
            case tableNum(ReturnAutomaticReturnDispositionCodeChargeStaging):
                returnSetup     = ReturnCodeType::Disposition;
                moduleCategory  = HeadingLine::Line;
                labelTxt        = "@SYS104049"; // Disposition code
                break;

            default:
                returnSetup = ReturnCodeType::None;
        }

        moduleTypeBlock.value       (moduleTypeRangeStr);
        moduleCategoryBlock.value   (queryValue(moduleCategory));

        moduleReturnBlock   = markupAutoTable_ds.query().dataSourceTable(tableNum(MarkupAutoTable)).addRange(fieldNum(MarkupAutoTable, MarkupReturn));
        moduleReturnBlock.value(queryValue(returnSetup));
        // Return - end

        markupAutoTable_ds.object(fieldNum(MarkupAutoTable, AccountRelation)).allowEdit(true);
        markupAutoTable_ds.object(fieldNum(MarkupAutoTable, AccountRelation)).skip(false);
        markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemCode)).allowEdit(false);
        markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemCode)).skip(true);
        markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemRelation)).allowEdit(false);
        markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemRelation)).skip(true);

        markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeCode)).visible(false);
        markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeRelation)).visible(false);

        markupAutoTable_ds.object(fieldNum(MarkupAutoTable, RetailChannelCode)).visible(false);
        markupAutoTable_ds.object(fieldNum(MarkupAutoTable, RetailChannelRelation)).visible(false);

        markupAutoLine_ds.object(fieldNum(MarkupAutoLine, FromAmount)).visible(false);
        markupAutoLine_ds.object(fieldNum(MarkupAutoLine, ToAmount)).visible(false);
        markupAutoLine_ds.object(fieldNum(MarkupAutoLine, InventSiteId)).visible(false);
        markupAutoLine_ds.object(fieldNum(MarkupAutoLine, InventLocationId)).visible(false);

        element.enableSpecificUnitSymbol(false, false);
        element.enableSequence(false, false);
        element.enableCompound(false, false);
        element.enableAutoLineTaxCharge(false);

        markupAutoLine_ds.allowCreate(false);

        markupAutoLine_UseInMatching.visible(moduleType ==
                                                    MarkupModuleType::Vend
                                                && VendParameters::find().editUseInvoiceMatching());

        switch (moduleType)
        {
            case MarkupModuleType::Cust:
                markupAutoLine_CurrencyCode.extendedDataType(extendedTypeNum(CustCurrencyCode));
                markupAutoTable_AccountRelation.label("@SYS23779");
                // <GIN>
                if (isCustomsEnabled)
                {
                    markupAutoLine_ds.object(fieldNum(MarkupAutoLine, NotionalPct_IN)).visible(false);
                    markupAutoLine_ds.object(fieldNum(MarkupAutoLine, NotionalCharges_IN)).visible(false);
                }
                // </GIN>
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeCode)).visible(true);
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeCode)).allowEdit(true);
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeCode)).skip(false);

                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeRelation)).visible(true);
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeRelation)).allowEdit(true);
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeRelation)).skip(false);

                // If advanced auto charges and the feature to filter auto charges based on channel are enabled, run the extra logic
                if (RetailParameters::find().UseAdvancedAutoCharges && FeatureStateProvider::isFeatureEnabled(RetailFilterAutoChargesByChannelEnableFeature::instance()))
                {
                    markupAutoTable_ds.object(fieldNum(MarkupAutoTable, RetailChannelCode)).visible(true);
                    markupAutoTable_ds.object(fieldNum(MarkupAutoTable, RetailChannelCode)).allowEdit(true);
                    markupAutoTable_ds.object(fieldNum(MarkupAutoTable, RetailChannelCode)).skip(false);

                    markupAutoTable_ds.object(fieldNum(MarkupAutoTable, RetailChannelRelation)).visible(true);
                    markupAutoTable_ds.object(fieldNum(MarkupAutoTable, RetailChannelRelation)).allowEdit(true);
                    markupAutoTable_ds.object(fieldNum(MarkupAutoTable, RetailChannelRelation)).skip(false);
                }

                markupAutoLine_ds.object(fieldNum(MarkupAutoLine, FromAmount)).visible(true);
                markupAutoLine_ds.object(fieldNum(MarkupAutoLine, FromAmount)).enabled(true);

                markupAutoLine_ds.object(fieldNum(MarkupAutoLine, ToAmount)).visible(true);
                markupAutoLine_ds.object(fieldNum(MarkupAutoLine, ToAmount)).enabled(true);

                //Enabling Inventory dimension fields
                MarkupAutoLine_ds.object(fieldNum(MarkupAutoLine, InventSiteId)).visible(true);
                MarkupAutoLine_ds.object(fieldNum(MarkupAutoLine, InventSiteId)).enabled(true);
                MarkupAutoLine_ds.object(fieldNum(MarkupAutoLine, InventLocationId)).visible(true);
                MarkupAutoLine_ds.object(fieldNum(MarkupAutoLine, InventLocationId)).enabled(true);

                element.enableSequence(true, true);
                element.enableCompound(true, true);
                element.enableAutoLineTaxCharge(true);

                break;

            case MarkupModuleType::Vend:
                markupAutoLine_CurrencyCode.extendedDataType(extendedTypeNum(VendCurrencyCode));
                markupAutoTable_AccountRelation.label("@SYS54853");
                markupAutoLine_ds.object(fieldNum(MarkupAutoLine, Keep)).visible(false);
                // <GIN>
                if (isCustomsEnabled)
                {
                    markupAutoLine_ds.object(fieldNum(MarkupAutoLine, CustomsAssessableValue_IN)).visible(false);
                    markupAutoLine_ds.object(fieldNum(MarkupAutoLine, NotionalPct_IN)).visible(false);
                    markupAutoLine_ds.object(fieldNum(MarkupAutoLine, NotionalCharges_IN)).visible(false);
                }
                // </GIN>
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeCode)).visible(true);
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeCode)).allowEdit(true);
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeCode)).skip(false);

                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeRelation)).visible(true);
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeRelation)).allowEdit(true);
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeRelation)).skip(false);

                markupAutoLine_ds.object(fieldNum(MarkupAutoLine, FromAmount)).visible(true);
                markupAutoLine_ds.object(fieldNum(MarkupAutoLine, FromAmount)).enabled(true);

                markupAutoLine_ds.object(fieldNum(MarkupAutoLine, ToAmount)).visible(true);
                markupAutoLine_ds.object(fieldNum(MarkupAutoLine, ToAmount)).enabled(true);

                //Enabling Inventory dimension fields
                MarkupAutoLine_ds.object(fieldNum(MarkupAutoLine, InventSiteId)).visible(true);
                MarkupAutoLine_ds.object(fieldNum(MarkupAutoLine, InventSiteId)).enabled(true);
                MarkupAutoLine_ds.object(fieldNum(MarkupAutoLine, InventLocationId)).visible(true);
                MarkupAutoLine_ds.object(fieldNum(MarkupAutoLine, InventLocationId)).enabled(true);

                break;

            case MarkupModuleType::Delivery:
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemCode)).visible(false);
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemRelation)).visible(false);

                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeCode)).visible(true);
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeCode)).allowEdit(true);
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeCode)).skip(false);

                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeRelation)).visible(true);
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeRelation)).allowEdit(true);
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeRelation)).skip(false);

                // If advanced auto charges and the feature to filter auto charges based on channel are enabled, run the extra logic
                if (RetailParameters::find().UseAdvancedAutoCharges && FeatureStateProvider::isFeatureEnabled(RetailFilterAutoChargesByChannelEnableFeature::instance()))
                {
                    markupAutoTable_ds.object(fieldNum(MarkupAutoTable, RetailChannelCode)).visible(true);
                    markupAutoTable_ds.object(fieldNum(MarkupAutoTable, RetailChannelCode)).allowEdit(true);
                    markupAutoTable_ds.object(fieldNum(MarkupAutoTable, RetailChannelCode)).skip(false);

                    markupAutoTable_ds.object(fieldNum(MarkupAutoTable, RetailChannelRelation)).visible(true);
                    markupAutoTable_ds.object(fieldNum(MarkupAutoTable, RetailChannelRelation)).allowEdit(true);
                    markupAutoTable_ds.object(fieldNum(MarkupAutoTable, RetailChannelRelation)).skip(false);
                }

                markupAutoLine_ds.object(fieldNum(MarkupAutoLine, FromAmount)).visible(true);
                markupAutoLine_ds.object(fieldNum(MarkupAutoLine, FromAmount)).enabled(true);

                markupAutoLine_ds.object(fieldNum(MarkupAutoLine, ToAmount)).visible(true);
                markupAutoLine_ds.object(fieldNum(MarkupAutoLine, ToAmount)).enabled(true);

                //Enabling Inventory dimension fields
                MarkupAutoLine_ds.object(fieldNum(MarkupAutoLine, InventSiteId)).visible(true);
                MarkupAutoLine_ds.object(fieldNum(MarkupAutoLine, InventSiteId)).enabled(true);
                MarkupAutoLine_ds.object(fieldNum(MarkupAutoLine, InventLocationId)).visible(true);
                MarkupAutoLine_ds.object(fieldNum(MarkupAutoLine, InventLocationId)).enabled(true);
                
                break;
        }
        grid_AccountRe.label(markupAutoTable_AccountRelation.label());

        // Return - begin
        if (returnSetup != ReturnCodeType::None)
        {
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ReturnRelation)).visible(true);
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ReturnRelation)).allowEdit(false);
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ReturnRelation)).skip(true);
            markupAutoTable_ReturnRelation.label(labelTxt);

            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, AccountRelation)).visible(false);
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, AccountRelation)).allowEdit(false);
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, AccountRelation)).skip(true);

            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, AccountCode)).allowEdit(false);
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, AccountCode)).skip(true);

            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemCode)).visible(false);
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemRelation)).visible(false);

            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeCode)).visible(false);
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeRelation)).visible(false);

            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, RetailChannelCode)).visible(false);
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, RetailChannelRelation)).visible(false);

            markupAutoLine_ds.object(fieldNum(MarkupAutoLine, FromAmount)).visible(false);
            markupAutoLine_ds.object(fieldNum(MarkupAutoLine, ToAmount)).visible(false);

            headingLine.visible(false);
            headingLine.enabled(false);

            element.design(1).caption("@SYS72515");
            element.design(1).titleDatasource(element.args().dataset());
        }
        else
        {
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ReturnRelation)).visible(false);
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, AccountRelation)).visible(true);
        }
        // Return - end

        markupAutoTable_ds.object(fieldNum(MarkupAutoTable, RetailAdvancedChargesDeliveryProrate)).visible(
            RetailParameters::isRetailAutoChargesEnabledAndInUse()
            && this.moduleCategory == HeadingLine::Heading
            && (moduleType == MarkupModuleType::Cust || moduleType == MarkupModuleType::Delivery));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCurrency</Name>
				<Source><![CDATA[
    CurrencyCode initCurrency()
    {
        if (markupAutoTable.AccountCode == TableGroupAll::Table)
        {
            // set company currency for return fee setup
            if (markupAutoTable.MarkupReturn != ReturnCodeType::None)
            {
                return CompanyInfoHelper::standardCurrency();
            }

            // if it is not a return setup then currency is taken from customer/vendor set up
            switch (moduleType)
            {
                case MarkupModuleType::Cust :
                                                    return CustTable::find(markupAutoTable.AccountRelation).Currency;
                case MarkupModuleType::Vend :
                                                    return VendTable::find(markupAutoTable.AccountRelation).Currency;
            }
        }

        return Ledger::accountingCurrency(CompanyInfo::current());
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemCodeChanged</Name>
				<Source><![CDATA[
    void  itemCodeChanged()
    {
        if (moduleCategory == HeadingLine::Heading)
        {
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemCode)).allowEdit(false);
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemCode)).skip(true);
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemRelation)).allowEdit(false);
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemRelation)).skip(true);

            // <GIN>
            if (TaxParameters::checkTaxParameters_IN())
            {
                if (moduleType == MarkupModuleType::Vend)
                {
                    markupAutoLine_ds.object(fieldNum(MarkupAutoLine, NotionalPct_IN)).visible(false);
                    markupAutoLine_ds.object(fieldNum(MarkupAutoLine, NotionalCharges_IN)).visible(false);
                }
            }
            // </GIN>
        }
        else
        {
            if (MarkupAutoTable.ModuleType == MarkupModuleType::Delivery)
            {
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemCode)).allowEdit(false);
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemCode)).skip(true);
            }
            else
            {
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemCode)).allowEdit(true);
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemCode)).skip(false);
            }

            if (markupAutoTable.ItemCode == TableGroupAll::All)
            {
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemRelation)).allowEdit(false);
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemRelation)).skip(true);

                if (element.selectedControl()
                    && element.selectedControl().name() == markupAutoTable_ItemRelation.name())
                {
                    markupAutoTable_ItemCode.setFocus();
                }

                //<GIN>
                if (countryRegion_IN)
                {
                    markupDivision.enabled(true);
                }
                // </GIN>
            }
            else
            {
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemRelation)).allowEdit(true);
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemRelation)).skip(false);

                markupAutoTable.DlvModeCode = TableGroupAll::All;
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, DlvModeCode)).modified();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reReadMarkupds_IN</Name>
				<Source><![CDATA[
    public void reReadMarkupds_IN()
    {
        markupAutoLine_ds.reread();
        markupAutoLine_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>customizeMenuOptions</Name>
				<Source><![CDATA[
    public void customizeMenuOptions(OfficeMenuOptions _menuOptions)
    {
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>MarkupAutoTable</Name>
				<Methods>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            super();
            //<GIN>
            if (countryRegion_IN)
            {
                markupDivision.enabled(false);
            }
             // </GIN>
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            markupAutoLine_ds.allowCreate(false);
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            super(_append);
            markupAutoLine_ds.allowCreate(false);

            if (returnSetup != ReturnCodeType::None)
            {//In return scenarios there are no header fields to fill in by the user.
                markupAutoTable_ds.write();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        void  write()
        {
            super();
            markupAutoLine_ds.allowCreate(true);
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        void  initValue()
        {
            super();

            markupAutoTable.ModuleType      = moduleType;
            markupAutoTable.ModuleCategory  = moduleCategory;

            // Return - begin
            if (returnSetup != ReturnCodeType::None)
            {
                markupAutoTable.MarkupReturn = returnSetup;
                switch (element.args().dataset())
                {
                    case tableNum(ReturnReasonCode):
                        ReturnReasonCode returnReasonCode = element.args().record();
                        markupAutoTable.AccountCode = TableGroupAll::Table;
                        markupAutoTable.ReturnRelation = returnReasonCode.ReasonCodeId;
                        break;

                    case tableNum(ReturnAutomaticCustomerReturnReasonCodeChargeStaging):
                        ReturnAutomaticCustomerReturnReasonCodeChargeStaging returnReasonCodeStaging = element.args().record();
                        markupAutoTable.AccountCode = TableGroupAll::Table;
                        markupAutoTable.ReturnRelation = returnReasonCodeStaging.customerReturnReasonCode;
                        break;

                    case tableNum(ReturnDispositionCode):
                        ReturnDispositionCode returnDispositionCode = element.args().record();
                        markupAutoTable.AccountCode = TableGroupAll::Table;
                        markupAutoTable.ReturnRelation = returnDispositionCode.DispositionCodeId;
                        markupAutoTable.ItemCode = TableGroupAll::All;
                        break;

                    case tableNum(ReturnAutomaticReturnDispositionCodeChargeStaging):
                        ReturnAutomaticReturnDispositionCodeChargeStaging returnDispositionCodeStaging = element.args().record();
                        markupAutoTable.AccountCode = TableGroupAll::Table;
                        markupAutoTable.ReturnRelation = returnDispositionCodeStaging.returnDispositionCode;
                        markupAutoTable.ItemCode = TableGroupAll::All;
                        break;

                    default:
                         throw error("@SYS105307");
                }
            }
            // Return - end

            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, AccountRelation)).allowEdit(true);
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, AccountRelation)).skip(false);
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemRelation)).allowEdit(true);
            markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemRelation)).skip(false);

            if (moduleCategory == HeadingLine::Heading)
            {
                markupAutoTable.ItemCode = TableGroupAll::All;
                element.itemCodeChanged();
            }

            if (moduleType == MarkupModuleType::Delivery)
            {
                // Item is not configurable for delivery charges
                markupAutoTable.ItemCode = TableGroupAll::All;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        int  active()
        {
            int ret = super();

            element.itemCodeChanged();
            element.dlvModeCodeChanged();
            element.retailChannelCodeChanged();
            element.enableAutoLineTaxCharge(moduleType == MarkupModuleType::Cust);

            markupAutoLine_ds.allowCreate(true);

            if (markupAutoTable.AccountCode == TableGroupAll::All)
            {
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, AccountRelation)).allowEdit(false);
            }
            else
            {
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, AccountRelation)).allowEdit(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>AccountCode</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.accountCodeChanged();

                markupAutoTable.AccountRelation = ''; //cleanup the relation since the old value does not make sense after changing the code
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>AccountRelation</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                //<GIN>
                if (countryRegion_IN)
                {
                    markupDivision.enabled(markupAutoTable.AccountRelation != '');
                }

                // </GIN>
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>DlvModeCode</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.dlvModeCodeChanged();

                markupAutoTable.DlvModeRelation = ''; //cleanup the relation since the old value does not make sense after changing the code
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ItemCode</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.itemCodeChanged();

                markupAutoTable.ItemRelation = ''; //cleanup the relation since the old value does not make sense after changing the code
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ItemRelation</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                //<GIN>
                if (countryRegion_IN)
                {
                    markupDivision.enabled(markupAutoTable.ItemRelation != '');
                }
                // </GIN>
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>RetailChannelCode</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.retailChannelCodeChanged();

                markupAutoTable.RetailChannelRelation = ''; //cleanup the relation since the old value does not make sense after changing the code
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>MarkupAutoLine</Name>
				<Methods>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        public void linkActive()
        {
            if (!markupAutoTable.RecId)
                markupAutoLine_ds.allowCreate(false);

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            if (!markupAutoTable.RecId)
                return;

            super(_append);
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        void  initValue()
        {
            markupAutoLine.initFromAutoTable(markupAutoTable);

            super();

            markupAutoLine.ModuleCategory      = moduleCategory;
            markupAutoLine.CurrencyCode        = element.initCurrency();
            markupAutoLine.MarkupCurrencyCode  = element.initCurrency();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret = super();

            if (!markupAutoLine.allowEditMarkupCurrencyCode())
            {
                markupAutoLine_ds.object(fieldNum(MarkupAutoLine, MarkupCurrencyCode)).allowEdit(false);
            }
            else
            {
                markupAutoLine_ds.object(fieldNum(MarkupAutoLine, MarkupCurrencyCode)).allowEdit(true);
            }            
            
            if (moduleCategory == HeadingLine::Heading)
            {
                if (moduleType == MarkupModuleType::Cust)
                {
                    element.enableSequence(true, true);
                    element.enableCompound(markupAutoLine.MarkupCategory == MarkupCategory::Percent, true);
                }

                element.enableSpecificUnitSymbol(false, false);
            }
            else
            {
                if (moduleType == MarkupModuleType::Cust)
                {
                    element.enableSequence(false, false);
                    element.enableCompound(false, false);
                }

                element.enableSpecificUnitSymbol(
                    (markupAutoLine.MarkupCategory == MarkupCategory::UnitSpecific || markupAutoLine.MarkupCategory == MarkupCategory::UnitSpecificMatch),
                    true);
            }

            // <GIN>
            if (countryRegion_IN)
            {
                markupAutoLine_ds.object(fieldNum(MarkupAutoLine, TaxGroup)).enabled(!TaxParameters::checkTaxParameters_IN());
                element.enableFieldsActive_IN();
            }
            // </GIN>
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            if (AutoChargesSetupSequenceCompoundFeature::instance().isEnabled())
            {
                markupAutoLine_ds.query().dataSourceTable(tableNum(MarkupAutoLine)).addSortField(fieldNum(MarkupAutoLine, Sequence), SortOrder::Ascending);
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>MarkupCategory</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if (moduleCategory == HeadingLine::Heading)
                {
                    element.enableSequence(true, true);
                    element.enableCompound(markupAutoLine.MarkupCategory == MarkupCategory::Percent, true);
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>MarkupCode</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if (!markupAutoLine.allowEditMarkupCurrencyCode())
                {
                    markupAutoLine_ds.object(fieldNum(MarkupAutoLine, MarkupCurrencyCode)).allowEdit(false);
                }
                else
                {
                    markupAutoLine_ds.object(fieldNum(MarkupAutoLine, MarkupCurrencyCode)).allowEdit(true);
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>NotionalCharges_IN</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if (markupAutoLine.NotionalCharges_IN)
                {
                    markupAutoLine_ds.object(fieldNum(MarkupAutoLine, NotionalPct_IN)).enabled(true);
                }
                else
                {
                    markupAutoLine.NotionalPct_IN          = 0;
                    markupAutoLine_ds.object(fieldNum(MarkupAutoLine, NotionalPct_IN)).enabled(false);
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Value</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                if (countryRegion_IN)
                {
                    if ((LedgerParameters::find().Miscellaneouscharges_IN ||
                        TaxParameters::find().Customs_IN) &&
                        markupAutoLine.Value < 0)
                    {
                        markupAutoLine.NotionalCharges_IN      = NoYes::No;
                        markupAutoLine.NotionalPct_IN          = 0;
                    }
                    element.enableFieldsActive_IN();
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>HeadingLine</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        int  selectionChange()
        {
            int  ok = super();

            // Clear the filter when we are changing charges level between header and line
            QuickFilterControl.parmFilterValue('');

            moduleCategory = headingLine.selection();

            if (moduleCategory== HeadingLine::Heading)
            {
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemCode)).allowEdit(false);
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemCode)).skip(true);
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemRelation)).allowEdit(false);
                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemRelation)).skip(true);

                // <GIN>
                if (TaxParameters::isCustomsEnable_IN())
                {
                    if (moduleType == MarkupModuleType::Vend)
                    {
                        markupAutoLine_ds.object(fieldNum(MarkupAutoLine, NotionalPct_IN)).visible(false);
                        markupAutoLine_ds.object(fieldNum(MarkupAutoLine, NotionalCharges_IN)).visible(false);
                        markupAutoLine_ds.object(fieldNum(MarkupAutoLine, CustomsAssessableValue_IN)).visible(false);
                    }
                }
                // </GIN>

                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, RetailAdvancedChargesDeliveryProrate))
                    .visible(RetailParameters::isRetailAutoChargesEnabledAndInUse()
                    && (moduleType == MarkupModuleType::Cust || moduleType == MarkupModuleType::Delivery));

                if (moduleType == MarkupModuleType::Cust)
                {
                    element.enableSequence(true, true);
                    element.enableCompound(true, true);
                    element.enableAutoLineTaxCharge(true);
                }

                element.enableSpecificUnitSymbol(false, false);
            }
            else
            {
               markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemCode)).allowEdit(true);
               markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemCode)).skip(false);
               markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemRelation)).allowEdit(true);
               markupAutoTable_ds.object(fieldNum(MarkupAutoTable, ItemRelation)).skip(false);

                // <GIN>
                if (TaxParameters::isCustomsEnable_IN())
                {
                    if (moduleType == MarkupModuleType::Vend)
                    {
                        markupAutoLine_ds.object(fieldNum(MarkupAutoLine, NotionalPct_IN)).visible(true);
                        markupAutoLine_ds.object(fieldNum(MarkupAutoLine, NotionalCharges_IN)).visible(true);
                        markupAutoLine_ds.object(fieldNum(MarkupAutoLine, NotionalPct_IN)).enabled(false);
                        markupAutoLine_ds.object(fieldNum(MarkupAutoLine, CustomsAssessableValue_IN)).visible(false);
                    }
                    else
                    {
                        markupAutoLine_ds.object(fieldNum(MarkupAutoLine, CustomsAssessableValue_IN)).visible(true);
                    }
                }
                // </GIN>

                markupAutoTable_ds.object(fieldNum(MarkupAutoTable, RetailAdvancedChargesDeliveryProrate)).visible(false);

                if (moduleType == MarkupModuleType::Cust)
                {
                    element.enableSequence(false, false);
                    element.enableCompound(false, false);
                    element.enableAutoLineTaxCharge(false);
                }

                element.enableSpecificUnitSymbol(
                        (markupAutoLine.MarkupCategory == MarkupCategory::UnitSpecific || markupAutoLine.MarkupCategory == MarkupCategory::UnitSpecificMatch),
                        true);

            }

            moduleCategoryBlock.value   (queryValue(moduleCategory));
            markupAutoTable_ds.executeQuery();

            if (moduleType == MarkupModuleType::Delivery || moduleType == MarkupModuleType::Cust || moduleType == MarkupModuleType::Vend)
            {
                markupAutoLine_ds.object(fieldNum(MarkupAutoLine, FromAmount)).visible(moduleCategory == HeadingLine::Heading);
                markupAutoLine_ds.object(fieldNum(MarkupAutoLine, FromAmount)).enabled(moduleCategory == HeadingLine::Heading);
                markupAutoLine_ds.object(fieldNum(MarkupAutoLine, FromAmount)).skip(moduleCategory != HeadingLine::Heading);

                markupAutoLine_ds.object(fieldNum(MarkupAutoLine, ToAmount)).visible(moduleCategory == HeadingLine::Heading);
                markupAutoLine_ds.object(fieldNum(MarkupAutoLine, ToAmount)).enabled(moduleCategory == HeadingLine::Heading);
                markupAutoLine_ds.object(fieldNum(MarkupAutoLine, ToAmount)).skip(moduleCategory != HeadingLine::Heading);

                element.dlvModeCodeChanged();
            }
            return ok;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MarkupAutoTable_RetailChannelRelation</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        /// Suppress the jumpRef request for RetailChannelCode 'All' because RetailChannelRelation will not be filled.
        /// Suppress the jumpRef request for RetailChannelCode 'Table' because AX tries to navigate to a form associated to the 'RetailChannelTable' table.
        /// Since this form doesn't exist, we get the error "Unable to View details, no form exists for table 'RetailChannelTable'".
        /// Allow the jumpRef request for RetailChannelCode 'GroupId' because RetailChannelRelation will link to 'RetailMarkupAutoChannelGroup'
        /// </summary>
        public void jumpRef()
        {
            if (markupAutoTable.RetailChannelCode == TableGroupAll::GroupId)
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MarkupDivision</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            FormRun formRun;
            Args    args  = new Args();

            args.caller(element);
            args.record(markupAutoTable);
            formRun = new MenuFunction(menuitemDisplayStr(MarkupDivision_IN), MenuItemType::Display).create(args);
            formRun.run();

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MarkupAutoLine_MarkupCategory</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        public int selectionChange()
        {
            int ret = super();

            if (moduleCategory == HeadingLine::Line)
            {
                MarkupCategoryType categoryType = markupAutoLine_MarkupCategory.selection();
                boolean isUoMSpecificSelected = categoryType == MarkupCategory::UnitSpecific || categoryType == MarkupCategory::UnitSpecificMatch;
                element.enableSpecificUnitSymbol(isUoMSpecificSelected, true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<AllowPreLoading>No</AllowPreLoading>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>MarkupAutoTable</Name>
			<Table>MarkupAutoTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountRelation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DlvModeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DlvModeRelation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemRelation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkupReturn</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModuleCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModuleType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailAdvancedChargesDeliveryProrate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailChannelCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailChannelRelation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailConcessionFee</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailConcessionFeeLegacy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnRelation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SHA256Hash</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>MarkupAutoLine</Name>
			<Table>MarkupAutoLine</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustomsAssessableValue_IN</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FromAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSiteId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>IsCompound</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Keep</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkupCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkupCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkupCurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRReturnMarkup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModuleCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModuleType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NotionalCharges_IN</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NotionalPct_IN</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Sequence</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SpecificUnitSymbol</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ToAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Value</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>MarkupAutoTable</JoinSource>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS24268</Caption>
		<DataSource xmlns="">MarkupAutoTable</DataSource>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Pattern xmlns="">SimpleListDetails</Pattern>
		<PatternVersion xmlns="">1.3</PatternVersion>
		<Style xmlns="">SimpleListDetails</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>536870911</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>GridContainer</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>858993458</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>MarkupTable</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>FilterGroup</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>HeadingLine</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@SYS68907</HelpText>
								<NeededPermission>Create</NeededPermission>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ComboType>List</ComboType>
								<EnumType>HeadingLine</EnumType>
								<Label>@SYS14422</Label>
								<Items />
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
						<FrameType>None</FrameType>
						<Style>CustomFilter</Style>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>MarkupTable</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Grid</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToContent</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>Grid_AccountCode</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>AccountCode</DataField>
								<DataSource>MarkupAutoTable</DataSource>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Grid_AccountRe</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>AccountRelation</DataField>
								<DataSource>MarkupAutoTable</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Grid_Description</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>Description</DataField>
								<DataSource>MarkupAutoTable</DataSource>
							</AxFormControl>
						</Controls>
						<AlternateRowShading>No</AlternateRowShading>
						<DataSource>MarkupAutoTable</DataSource>
						<GridLinesStyle>Vertical</GridLinesStyle>
						<MultiSelect>No</MultiSelect>
						<ShowRowLabels>No</ShowRowLabels>
						<Style>List</Style>
					</AxFormControl>
				</Controls>
				<RightMargin>0</RightMargin>
				<RightMarginMode>Fixed</RightMarginMode>
				<FrameType>None</FrameType>
				<Style>SidePanel</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DetailsHeader</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>MarkupAutoTable_AccountCode</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>613566756</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>AccountCode</DataField>
						<DataSource>MarkupAutoTable</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>MarkupAutoTable_AccountRelation</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>920350134</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>AccountRelation</DataField>
						<DataSource>MarkupAutoTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>MarkupAutoTable_ReturnRelation</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1227133512</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Skip>Yes</Skip>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>ReturnRelation</DataField>
						<DataSource>MarkupAutoTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>MarkupAutoTable_ItemCode</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1533916890</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>ItemCode</DataField>
						<DataSource>MarkupAutoTable</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>MarkupAutoTable_ItemRelation</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1840700268</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>ItemRelation</DataField>
						<DataSource>MarkupAutoTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>MarkupAutoTable_DlvModeCode</Name>
						<ElementPosition>1886717772</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>DlvModeCode</DataField>
						<DataSource>MarkupAutoTable</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>MarkupAutoTable_DlvModeRelation</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1932735276</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>DlvModeRelation</DataField>
						<DataSource>MarkupAutoTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>MarkupAutoTable_RetailChannelCode</Name>
						<ElementPosition>1886717772</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>RetailChannelCode</DataField>
						<DataSource>MarkupAutoTable</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>MarkupAutoTable_RetailChannelRelation</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1932735276</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>RetailChannelRelation</DataField>
						<DataSource>MarkupAutoTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>MarkupAutoTable_RetailAdvancedChargesDeliveryProrate</Name>
						<HelpText>@RetailAutoCharge:AdvancedChargesDeliveryProrateHelpText</HelpText>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>RetailAdvancedChargesDeliveryProrate</DataField>
						<DataSource>MarkupAutoTable</DataSource>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1610612733</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>General</Name>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>MarkupAutoTable_MarkupAutoTableDescription</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>Description</DataField>
								<DataSource>MarkupAutoTable</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SCM:MarkupAutoSetupGeneralTabLabel</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>MarkupTrans</Name>
						<ElementPosition>613566756</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPane1</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneTabControl">
										<Name>ActionPaneTab1</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPaneTab</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>NewDeleteGroup1</Name>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Left>0</Left>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormCommandButtonControl">
														<Name>AddButton</Name>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>CommandButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
														<Command>New</Command>
														<NormalImage>New</NormalImage>
														<Primary>Yes</Primary>
														<Text>@sys60080</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCommandButtonControl">
														<Name>RemoveButton</Name>
														<ElementPosition>1610612733</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>CommandButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
														<Command>DeleteRecord</Command>
														<NormalImage>Delete</NormalImage>
														<Primary>Yes</Primary>
														<SaveRecord>No</SaveRecord>
														<Text>@sys26394</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<DataSource>MarkupAutoLine</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>MarkupDivision_IN</Name>
												<CountryRegionCodes>IN</CountryRegionCodes>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Left>0</Left>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormCommandButtonControl">
														<Name>MarkupDivision</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<CountryRegionCodes>IN</CountryRegionCodes>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@GLS220897</HelpText>
														<Left>0</Left>
														<LeftMode>RightEdge</LeftMode>
														<Type>CommandButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<Text>@GLS220881</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>TaxGroup</Name>
												<Type>ButtonGroup</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>MarkupAutoLineTaxCharge</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1288490187</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>MenuFunctionButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<DataSource>MarkupAutoLine</DataSource>
														<MenuItemName>MarkupAutoLineTaxCharge</MenuItemName>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>MarkupAutoLine</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>MarkupAutoLine_Sequence</Name>
										<Type>Integer</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Sequence</DataField>
										<DataSource>MarkupAutoLine</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>MarkupAutoLine_IsCompound</Name>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IsCompound</DataField>
										<DataSource>MarkupAutoLine</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>MarkupAutoLine_CurrencyCode</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>306783378</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyCode</DataField>
										<DataSource>MarkupAutoLine</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>MarkupAutoLine_MarkupCode</Name>
										<ElementPosition>460175067</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>MarkupCode</DataField>
										<DataSource>MarkupAutoLine</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>MarkupAutoLine_MarkupCategory</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>613566756</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>MarkupCategory</DataField>
										<DataSource>MarkupAutoLine</DataSource>
										<Selection>255</Selection>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>MarkupAutoLine_SpecificUnitSymbol</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>SpecificUnitSymbol</DataField>
										<DataSource>MarkupAutoLine</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>MarkupAutoLine_Value</Name>
										<ElementPosition>766958445</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_AccountsPayable:MarkupAutoSetup_MarkupAutoLine_Value</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Value</DataField>
										<DataSource>MarkupAutoLine</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>MarkupAutoLine_MarkupCurrencyCode</Name>
										<ElementPosition>920350134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>MarkupCurrencyCode</DataField>
										<DataSource>MarkupAutoLine</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>MarkupAutoLine_FromAmount</Name>
										<ElementPosition>971480697</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>FromAmount</DataField>
										<DataSource>MarkupAutoLine</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>MarkupAutoLine_ToAmount</Name>
										<ElementPosition>1022611260</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ToAmount</DataField>
										<DataSource>MarkupAutoLine</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>MarkupAutoLine_TaxGroup</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxGroup</DataField>
										<DataSource>MarkupAutoLine</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>MarkupAutoLine_CustomsAssessableValue_IN</Name>
										<ElementPosition>1380525201</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>CustomsAssessableValue_IN</DataField>
										<DataSource>MarkupAutoLine</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>MarkupAutoLine_NotionalCharges_IN</Name>
										<ElementPosition>1687308579</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>NotionalCharges_IN</DataField>
										<DataSource>MarkupAutoLine</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>MarkupAutoLine_Keep</Name>
										<ElementPosition>1764004423</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_AccountsPayable:MarkupAutoSetup_MarkupAutoLine_Keep</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>Keep</DataField>
										<DataSource>MarkupAutoLine</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>MarkupAutoLine_NotionalPct_IN</Name>
										<ElementPosition>1840700268</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>NotionalPct_IN</DataField>
										<DataSource>MarkupAutoLine</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>MarkupAutoLine_UseInMatching</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1994091957</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataMethod>useInMatching</DataMethod>
										<DataSource>MarkupAutoLine</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Inventory</Name>
										<ElementPosition>1610612730</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Inventory_InventSiteId</Name>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventSiteId</DataField>
												<DataSource>MarkupAutoLine</DataSource>
												<FastTabSummary>Yes</FastTabSummary>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Inventory_InventLocationId</Name>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventLocationId</DataField>
												<DataSource>MarkupAutoLine</DataSource>
												<FastTabSummary>Yes</FastTabSummary>
											</AxFormControl>
										</Controls>
										<Caption>@SYS108783</Caption>
										<DataGroup>Inventory</DataGroup>
										<DataSource>MarkupAutoLine</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>MarkupAutoLine</DataSource>
								<Style>Tabular</Style>
							</AxFormControl>
						</Controls>
						<Caption>@SYS15451</Caption>
						<DataSource>MarkupAutoLine</DataSource>
						<FastTabExpanded>Always</FastTabExpanded>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>
