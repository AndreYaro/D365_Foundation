<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>PurchRFQSealedAttachmentUpload</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
/// <summary>
/// This form is used to upload the file attachment for sealed bid attachments
/// </summary>
[Form]
public class PurchRFQSealedAttachmentUpload extends FormRun
{
    private PurchRFQSealedAttachmentManager purchRFQSealedAttachmentManager;
    Common callingRecord;
    FileUploadTemporaryStorageResult result;

}
]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        super();

        FileUpload.notifyUploadAttemptStarted -= eventhandler(this.uploadAttemptStarted);
        FileUpload.notifyUploadCompleted -= eventhandler(this.uploadCompleted);

        if(result && result.getUploadStatus())
        {
            // Delete the file from the azure temporary blob storage.
            result.deleteResult();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        DocuRef docuRef;

        if (result && result.getUploadStatus())
        {
            using (System.IO.MemoryStream stream = result.openResult() as System.IO.MemoryStream)
            {
                str fileName = FileUpload.fileName();
                str fileExtension = Docu::GetFileExtension(fileName);

                if (Docu::maxFileSizeInFileSystemLong() <= (stream.Length * 2))
                {
                    throw error("@SCM:SealedBidAttachmentExceedSizeLimit");
                }

                if (stream.Length == 0)
                {
                    throw error("@SCM:SealedBidAttachmentEmptyFile");
                }

                if (fileExtension && !Docu::validateExtension(fileExtension))
                {
                    throw error("@SYS99219");
                }

                if (strLen(fileName) > 60)
                {
                    throw error("@SCM:SealedBidAttachmentFilenameExceedLengthLimit");
                }

                System.Byte[] byteArray = stream.ToArray();
                str streamStr = System.Convert::ToBase64String(byteArray);

                PurchRFQReplyTable localReplyTable;
                PurchRFQReplyLine localReplyLine;
                PurchRFQSealedReplyTable purchRFQSealedReplyTable;
                PurchRFQSealedReplyLine purchRFQSealedReplyLine;
                Common sealedRecord;

                if (callingRecord.TableId == tableNum(PurchRFQReplyTable))
                {
                    localReplyTable = callingRecord;
                    select firstonly purchRFQSealedReplyTable
                        where purchRFQSealedReplyTable.PurchRFQReplyTable == localReplyTable.RecId;
                    sealedRecord = purchRFQSealedReplyTable;
                }
                else if (callingRecord.TableId == tableNum(PurchRFQReplyLine))
                {
                    localReplyLine = callingRecord;
                    localReplyTable = PurchRFQReplyTable::find(localReplyLine.RFQId);
                    select firstonly purchRFQSealedReplyLine
                        where purchRFQSealedReplyLine.PurchRFQReplyLine == localReplyLine.RecId;
                    sealedRecord = purchRFQSealedReplyLine;
                }

                PurchRFQSealedBidEncryptionManager purchRFQSealedBidEncryptionManager = PurchRFQSealedBidEncryptionManager::newFromPurchRFQReplyTableRecId(localReplyTable.RecId);

                str streamStrEncrypted = purchRFQSealedBidEncryptionManager.editEncryptedString(streamStr, true);
                str fileNameEncrypted = purchRFQSealedBidEncryptionManager.editEncryptedString(fileName, true);
                str fileNotesEncrypted = purchRFQSealedBidEncryptionManager.editEncryptedString(Notes.valueStr(), true);

                System.IO.MemoryStream streamStrEncryptedStream = new System.IO.MemoryStream();
                System.IO.StreamWriter writer= new System.IO.StreamWriter(streamStrEncryptedStream);
                writer.Write(streamStrEncrypted);
                writer.Flush();
                streamStrEncryptedStream.Position = 0;

                // Upload encrypted stream
                docuRef = DocumentManagement::attachFileToCommon(sealedRecord
                                                            , 'File'
                                                            , streamStrEncryptedStream
                                                            , fileNameEncrypted
                                                            , System.Web.MimeMapping::GetMimeMapping(fileNameEncrypted)
                                                            , fileNameEncrypted
                                                            , fileNotesEncrypted);                

                ttsbegin;

                PurchRFQTmpSealedReplyAttachment purchRFQTmpSealedReplyAttachment;
                purchRFQTmpSealedReplyAttachment.clear();
                purchRFQTmpSealedReplyAttachment.Name = fileName;
                
                purchRFQTmpSealedReplyAttachment.DocRefRecId = docuRef.RecId;
                
                purchRFQTmpSealedReplyAttachment.Notes = Notes.valueStr();
                purchRFQTmpSealedReplyAttachment.IsDocumentAttached = NoYes::Yes;
                purchRFQTmpSealedReplyAttachment.insert();

                ttscommit;

                purchRFQSealedAttachmentManager.parmPurchRFQTmpSealedReplyAttachment(purchRFQTmpSealedReplyAttachment);
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        super();

        purchRFQSealedAttachmentManager = element.args().caller();
        callingRecord = element.args().record();
        FileUpload.notifyUploadCompleted += eventhandler(this.uploadCompleted);
        FileUpload.notifyUploadAttemptStarted += eventhandler(this.uploadAttemptStarted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called to store the result of the upload in the
    /// <c> PurchRFQTmpSealedReplyAttchment </c> table when the file upload is completed
    /// </summary>
    [Hookable(false), Wrappable(false)]
    internal final void uploadCompleted()
    {
        result = FileUpload.getFileUploadResult() as FileUploadTemporaryStorageResult;

        if (result && result.getUploadStatus())
        {
            this.setDialogOkButtonEnabled(true);
        }
        else
        {
            throw error("@SYS129183");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadAttemptStarted</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal final void uploadAttemptStarted()
    {
        this.setDialogOkButtonEnabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogOkButtonEnabled</Name>
				<Source><![CDATA[
    protected void setDialogOkButtonEnabled(boolean _isEnabled)
    {
        Ok.visible(_isEnabled);
        Ok.enabled(_isEnabled);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="" />
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@SYS95580</Caption>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<WindowType xmlns="">Slider</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FileDetails</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Notes</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS40182</Label>
						<MultiLine>Yes</MultiLine>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FileUploadGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>FileUpload</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<FormControlExtension>
							<Name>FileUpload</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>fileTypesAccepted</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>fileNameLabel</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>browseText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>style</Name>
									<Type>Enum</Type>
									<TypeName>FileUploadStyle</TypeName>
									<Value>MinimalWithFilename</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>baseFileUploadStrategyClassName</Name>
									<Type>String</Type>
									<Value>PurchRFQSealedAttachmentFileUploadMediaStorageStrategy</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>imageMaxWidth</Name>
									<Type>Int32</Type>
									<Value>0</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>imageMaxHeight</Name>
									<Type>Int32</Type>
									<Value>0</Value>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OK</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Enabled>No</Enabled>
						<Type>CommandButton</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Cancel</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>