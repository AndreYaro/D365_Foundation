<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>TaxIntegrationTaxServiceParameters</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
using Microsoft.Dynamics.TaxCalculation.ApiContracts;

[Form]
public class TaxIntegrationTaxServiceParameters extends FormRun
{
    private TaxIntegrationBusinessProcessTmp businessProcessTmp;
    private SysLookupMultiSelectCtrl businessProcessMultiSelectCtrl;
    private SysLookupMultiSelectCtrl iSVBusinessProcessMultiSelectCtrl;
    private boolean isUniversalTaxRateAPIFeatureEnabled = FeatureStateProvider::isFeatureEnabled(TaxServiceUniversalTaxRateAPIFeature::instance());
    private SysLookupMultiSelectCtrl supportedCountryRegionMultiSelectCtrl;

    private static container supportedISVBusinessProcess = [
        TaxIntegrationBusinessProcess::Sales,
        TaxIntegrationBusinessProcess::Purchase,
        TaxIntegrationBusinessProcess::FTI,
        TaxIntegrationBusinessProcess::Inventory,
        TaxIntegrationBusinessProcess::Journal,
        TaxIntegrationBusinessProcess::Project];

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the form <c>TaxIntegrationTaxServiceParameters</c>.
    /// </summary>
    public void init()
    {
        if (!FeatureStateProvider::isFeatureEnabled(TaxIntegrationFlight::instance()))
        {
            throw error("@TaxIntegrationException:TaxServiceIsNotEnabled");
        }

        super();

        this.prepareBusinessProcess();
        TaxIntegrationTaxServiceParameters::find();

        if (!isUniversalTaxRateAPIFeatureEnabled)
        {
            TaxSolutionProviderTabPage.visible(false);
            TaxIntegrationBusinessProcessTable::saveDataBySolutionProvider('', TaxSolutionProviderType::ISV);
        }
        else
        {
            this.prepareSupportedCountry();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateControlStatusForCalculationParameter</Name>
				<Source><![CDATA[
    private void updateControlStatusForCalculationParameter()
    {
        RoundOffRule.enabled(!TaxIntegrationTaxServiceParameters.DisableCalculationParameter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidBusinessProcessName</Name>
				<Source><![CDATA[
    private boolean isValidBusinessProcessName(str _name)
    {
        if (!_name)
        {
            return false;
        }

        TaxIntegrationBusinessProcessTmp tmp;
        tmp.setTmpData(this.businessProcessTmp);

        select firstonly RecId from tmp
            where tmp.BusinessProcessString == _name;

        return tmp.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBusinessProcess</Name>
				<Source><![CDATA[
    private boolean validateBusinessProcess(str _businessProcessString, TaxSolutionProviderType _solutionProviderType = TaxSolutionProviderType::Microsoft)
    {
        if (_businessProcessString)
        {
            container _bpNames = str2con(_businessProcessString, TaxIntegrationTaxServiceConstants::BusinessProcessDelimiter);

            for (int i = 1; i <= conLen(_bpNames); i++)
            {
                str name = conPeek(_bpNames, i);

                if (!this.isValidBusinessProcessName(name))
                {
                    return false;
                }

                if (isUniversalTaxRateAPIFeatureEnabled
                    && _solutionProviderType == TaxSolutionProviderType::ISV)
                {
                    TaxIntegrationBusinessProcess businessProcess;
                    return conFind(supportedISVBusinessProcess, str2Enum(businessProcess, name));
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNoOverlapOnBusinessProcess</Name>
				<Source><![CDATA[
    private boolean validateNoOverlapOnBusinessProcess()
    {
        container businessProcessCon = businessProcessMultiSelectCtrl.getSelectedFieldValues();
        container isvBusinessProcessCon = iSVBusinessProcessMultiSelectCtrl.getSelectedFieldValues();
        container overlapBusinessProcessCon;

        for (int i = 1; i <= conLen(businessProcessCon); i++)
        {
            str businessProcess = conPeek(businessProcessCon, i);

            if (businessProcess && conFind(isvBusinessProcessCon, businessProcess))
            {
                overlapBusinessProcessCon += businessProcess;
            }
        }

        if (overlapBusinessProcessCon)
        {
            throw error(strFmt("@TaxIntegration:BusinessProcessOverlapErrorMessage", con2Str(overlapBusinessProcessCon, TaxIntegrationTaxServiceConstants::BusinessProcessDelimiter)));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFeatureSetupControlStatus</Name>
				<Source><![CDATA[
    private void updateFeatureSetupControlStatus()
    {
        FormDataObject featureSetupNameField = TaxIntegrationTaxServiceParameters_ds.object(
            fieldNum(TaxIntegrationTaxServiceParameters, FeatureSetupName));

        featureSetupNameField.enabled(TaxIntegrationTaxServiceParameters.IsEnable);
        featureSetupNameField.mandatory(TaxIntegrationTaxServiceParameters.IsEnable);

        BusinessProcessStringControl.enabled(TaxIntegrationTaxServiceParameters.IsEnable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMultipleTaxIdControlStatus</Name>
				<Source><![CDATA[
    private void updateMultipleTaxIdControlStatus()
    {
        boolean isTaxCalculationServiceEnable = TaxIntegrationTaxServiceParameters.IsEnable
            || (isUniversalTaxRateAPIFeatureEnabled && TaxIntegrationTaxServiceParameters.IsISVTaxSolutionProviderEnabled);

        this.updateReportParmsStatusDependOnMultipleTaxIdParm();

        FormDataObject isUpdateTaxExemptNumberFromCustomerAddrEnabledField = TaxIntegrationTaxServiceParameters_ds.object(
            fieldNum(TaxIntegrationTaxServiceParameters, IsUpdateTaxExemptNumberFromCustomerAddrEnabled));

        isUpdateTaxExemptNumberFromCustomerAddrEnabledField.visible(isTaxCalculationServiceEnable);
        isUpdateTaxExemptNumberFromCustomerAddrEnabledField.enabled(isTaxCalculationServiceEnable);

        FormDataObject multipleTaxIdField = TaxIntegrationTaxServiceParameters_ds.object(
            fieldNum(TaxIntegrationTaxServiceParameters, IsMultipleTaxIdEnabled));
        if (!isTaxCalculationServiceEnable)
        {
            multipleTaxIdField.setValue(false);
        }
        MultipleTaxId.visible(isTaxCalculationServiceEnable);

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportParmsStatusDependOnMultipleTaxIdParm</Name>
				<Source><![CDATA[
    private void updateReportParmsStatusDependOnMultipleTaxIdParm()
    {
        boolean shouldEnableParameters;
        shouldEnableParameters = TaxIntegrationTaxServiceParameters.IsEnable
            && TaxIntegrationTaxServiceParameters.IsMultipleTaxIdEnabled
            || (isUniversalTaxRateAPIFeatureEnabled && TaxIntegrationTaxServiceParameters.IsISVTaxSolutionProviderEnabled);

        FormDataObject multipleTaxIdVATDeclarationField = TaxIntegrationTaxServiceParameters_ds.object(
            fieldNum(TaxIntegrationTaxServiceParameters, IsMultipleTaxIdVATDeclarationEnabled));
        multipleTaxIdVATDeclarationField.enabled(shouldEnableParameters
            && FeatureStateProvider::isFeatureEnabled(TAXDeclarationExportByTaxId_Feature::instance()));

        FormDataObject multipleTaxIdIntrastatField = TaxIntegrationTaxServiceParameters_ds.object(
            fieldNum(TaxIntegrationTaxServiceParameters, IsMultipleTaxIdIntrastatEnabled));
        multipleTaxIdIntrastatField.enabled(shouldEnableParameters
            && FeatureStateProvider::isFeatureEnabled(IntrastatReportingByTaxIdFeature::instance())
            && !IntrastatReportingByTaxIdToggle::isInExclusionListOfCoutries());

        FormDataObject multipleTaxIdEUSalesListField = TaxIntegrationTaxServiceParameters_ds.object(
            fieldNum(TaxIntegrationTaxServiceParameters, IsMultipleTaxIdEUSalesListEnabled));
        multipleTaxIdEUSalesListField.enabled(shouldEnableParameters
            && FeatureStateProvider::isFeatureEnabled(EUSalesListReportingByTaxIdFeature::instance()));

        if (!shouldEnableParameters)
        {
            multipleTaxIdIntrastatField.setValue(false);
            multipleTaxIdVATDeclarationField.setValue(false);
            multipleTaxIdEUSalesListField.setValue(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateISVFeatureSetupControlStatus</Name>
				<Source><![CDATA[
    private void updateISVFeatureSetupControlStatus()
    {
        FormDataObject iSVFeatureSetupName = TaxIntegrationTaxServiceParameters_ds.object(
            fieldNum(TaxIntegrationTaxServiceParameters, ISVFeatureSetupName));

        iSVFeatureSetupName.enabled(taxIntegrationTaxServiceParameters.IsISVTaxSolutionProviderEnabled);
        iSVFeatureSetupName.mandatory(taxIntegrationTaxServiceParameters.IsISVTaxSolutionProviderEnabled);

        FormDataObject isAddressValidationEnabled = TaxIntegrationTaxServiceParameters_ds.object(
            fieldNum(TaxIntegrationTaxServiceParameters, IsAddressValidationEnabled));

        isAddressValidationEnabled.enabled(taxIntegrationTaxServiceParameters.IsISVTaxSolutionProviderEnabled);
        this.updateAddressValidationParameterStatus();
        this.updateUseTaxAssessmentStatus();
        this.updateUseTaxOverchargeTolerance();

        ISVBusinessProcessStringControl.enabled(TaxIntegrationTaxServiceParameters.IsISVTaxSolutionProviderEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareBusinessProcess</Name>
				<Source><![CDATA[
    private void prepareBusinessProcess()
    {
        this.businessProcessTmp = TaxIntegrationBusinessProcessTmp::init();

        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(TaxIntegrationBusinessProcessTmp));
        qbds.addSelectionField(fieldNum(TaxIntegrationBusinessProcessTmp, BusinessProcessString));

        QueryRun businessProcessQueryRun = new QueryRun(query);
        businessProcessQueryRun.setCursor(this.businessProcessTmp);

        this.businessProcessMultiSelectCtrl = SysLookupMultiSelectCtrl::constructWithQueryRun(
            element,
            BusinessProcessStringControl,
            businessProcessQueryRun,
            false,
            [tableNum(TaxIntegrationBusinessProcessTmp), fieldNum(TaxIntegrationBusinessProcessTmp, BusinessProcessString)]);

        if (isUniversalTaxRateAPIFeatureEnabled)
        {
            Query isvBusinessProcessQuery = new Query();
            QueryBuildDataSource isvBusinessProcessQueryDataSource = isvBusinessProcessQuery.addDataSource(tableNum(TaxIntegrationBusinessProcessTmp));
            isvBusinessProcessQueryDataSource.addSelectionField(fieldNum(TaxIntegrationBusinessProcessTmp, BusinessProcessString));

            SysQuery::findOrCreateRange(isvBusinessProcessQueryDataSource, fieldNum(TaxIntegrationBusinessProcessTmp, BusinessProcessEnum))
                .value(con2str(supportedISVBusinessProcess, ','));

            QueryRun isvBusinessProcessQueryRun = new QueryRun(isvBusinessProcessQuery);
            isvBusinessProcessQueryRun.setCursor(this.businessProcessTmp);

            this.iSVBusinessProcessMultiSelectCtrl = SysLookupMultiSelectCtrl::constructWithQueryRun(
                element,
                ISVBusinessProcessStringControl,
                isvBusinessProcessQueryRun,
                false,
                [tableNum(TaxIntegrationBusinessProcessTmp), fieldNum(TaxIntegrationBusinessProcessTmp, BusinessProcessString)]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAddressValidationParameterStatus</Name>
				<Source><![CDATA[
    private void updateAddressValidationParameterStatus()
    {
        boolean shouldEnabled = taxIntegrationTaxServiceParameters.IsISVTaxSolutionProviderEnabled && taxIntegrationTaxServiceParameters.IsAddressValidationEnabled;
        AddressValidation_SupportedCountryStringControl.enabled(shouldEnabled);
        AddressValidation_OverwriteAddress.enabled(shouldEnabled);
        AddressValidation_AutomaticValidation.enabled(shouldEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUseTaxAssessmentStatus</Name>
				<Source><![CDATA[
    private void updateUseTaxAssessmentStatus()
    {
        boolean shouldEnabled = taxIntegrationTaxServiceParameters.IsISVTaxSolutionProviderEnabled;
        TaxIntegrationTaxServiceParameters_ds.object(fieldNum(TaxIntegrationTaxServiceParameters, AccrueUseTax)).enabled(shouldEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUseTaxOverchargeTolerance</Name>
				<Source><![CDATA[
    private void updateUseTaxOverchargeTolerance()
    {
        boolean shouldEnabled = taxIntegrationTaxServiceParameters.IsISVTaxSolutionProviderEnabled;
        TaxIntegrationTaxServiceParameters_ds.object(fieldNum(TaxIntegrationTaxServiceParameters, ToleranceAmount)).enabled(shouldEnabled);
        TaxIntegrationTaxServiceParameters_ds.object(fieldNum(TaxIntegrationTaxServiceParameters, TolerancePercent)).enabled(shouldEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareSupportedCountry</Name>
				<Source><![CDATA[
    private void prepareSupportedCountry()
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(LogisticsAddressCountryRegion));
        qbds.addSelectionField(fieldNum(LogisticsAddressCountryRegion, CountryRegionId));
        qbds = qbds.addDataSource(tableNum(LogisticsAddressCountryRegionTranslation));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.addLink(fieldNum(LogisticsAddressCountryRegion, CountryRegionId),
            fieldNum(LogisticsAddressCountryRegionTranslation, CountryRegionId));
        qbds.addSelectionField(fieldNum(LogisticsAddressCountryRegionTranslation, ShortName));
        qbds.addRange(fieldNum(LogisticsAddressCountryRegionTranslation, LanguageId)).value(queryValue(currentUserLanguage()));

        this.supportedCountryRegionMultiSelectCtrl = SysLookupMultiSelectCtrl::constructWithQuery(
            element,
            AddressValidation_SupportedCountryStringControl,
            query,
            false,
            [tableNum(LogisticsAddressCountryRegion), fieldNum(LogisticsAddressCountryRegion, CountryRegionId)]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMultiSelectControl</Name>
				<Source><![CDATA[
    private void updateMultiSelectControl()
    {
        container businessProcess, iSVBusinessProcess;
        container businessProcessRecIds, iSVBusinessProcessRecIds;
        TaxIntegrationBusinessProcessTable bpTable;
        TaxIntegrationBusinessProcessTmp tmp;
        tmp.setTmpData(this.businessProcessTmp);

        while select tmp
            join bpTable
            where tmp.BusinessProcessEnum == bpTable.BusinessProcess
        {
            if (bpTable.SolutionProviderType == TaxSolutionProviderType::Microsoft)
            {
                businessProcess += tmp.BusinessProcessString;
                businessProcessRecIds += tmp.RecId;
            }
            else if (isUniversalTaxRateAPIFeatureEnabled
                && bpTable.SolutionProviderType == TaxSolutionProviderType::ISV)
            {
                iSVBusinessProcess += tmp.BusinessProcessString;
                iSVBusinessProcessRecIds += tmp.RecId;
            }
        }

        businessProcessMultiSelectCtrl.set([businessProcessRecIds, businessProcess]);

        if (isUniversalTaxRateAPIFeatureEnabled)
        {
            iSVBusinessProcessMultiSelectCtrl.set([iSVBusinessProcessRecIds, iSVBusinessProcess]);

            LogisticsAddressCountryRegion logisticsAddressCountryRegionNameViewLoc;
            TaxIntegrationAddressValidationSupportedCountry taxIntegrationAddressValidationSupportedCountryLoc;
            container supportedCountryRegionIdsRecIds, supportedCountryRegionIds;

            while select logisticsAddressCountryRegionNameViewLoc
                exists join taxIntegrationAddressValidationSupportedCountryLoc
                where logisticsAddressCountryRegionNameViewLoc.CountryRegionId == taxIntegrationAddressValidationSupportedCountryLoc.CountryRegionId
                {
                    supportedCountryRegionIdsRecIds += logisticsAddressCountryRegionNameViewLoc.RecId;
                    supportedCountryRegionIds += logisticsAddressCountryRegionNameViewLoc.CountryRegionId;
                }
            supportedCountryRegionMultiSelectCtrl.set([supportedCountryRegionIdsRecIds, supportedCountryRegionIds]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeTaxServiceData</Name>
				<Source><![CDATA[
    private boolean synchronizeTaxServiceData(
        TaxIntegrationFeatureSetupId _featureSetupId,
        TaxIntegrationFeatureSetupName _featureSetupName,
        TaxIntegrationFeatureSetupVersion _featureVersion = '',
        TaxSolutionProviderType _solutionProviderType = TaxSolutionProviderType::Microsoft)
    {
        TaxIntegrationTaxServiceDataSynchronizer dataSynchronizer = TaxIntegrationTaxServiceDataSynchronizer::constructWithParameterTable(
            _featureSetupId,
            _featureVersion,
            _featureSetupName,
            TaxIntegrationTaxServiceParameters);

        dataSynchronizer.parmSolutionProviderType(_solutionProviderType);

        return dataSynchronizer.synchronize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearFeatureSetupVersion</Name>
				<Source><![CDATA[
    private void clearFeatureSetupVersion()
    {
        TaxIntegrationTaxServiceParameters.FeatureSetupVersion = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFeatureSetupName</Name>
				<Source><![CDATA[
    private void lookupFeatureSetupName(FormStringControl _callingControl, TaxSolutionProviderType _solutionProviderType)
    {
        Args args = new Args(formStr(TaxIntegrationFeatureSetupLookup));
        args.parm(enum2Str(_solutionProviderType));
        args.caller(_callingControl.formRun());
        FormRun formRun = classFactory.formRunClass(args);
        using (SysErrorMessageHelpScope scope =  SysErrorMessageHelpScope::newErrorContextByFormAndAction(formStr(TaxIntegrationTaxServiceParameters), formMethodStr(TaxIntegrationTaxServiceParameters, lookupFeatureSetupName)))
        {
            formRun.init();
            _callingControl.performFormLookup(formRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxCodeAdjustmentStatus</Name>
				<Source><![CDATA[
    private void updateTaxCodeAdjustmentStatus()
    {
        FormDataObject taxCodeAdjustmentField = TaxIntegrationTaxServiceParameters_ds.object(
            fieldNum(TaxIntegrationTaxServiceParameters, TaxCodeAdjustment));

        taxCodeAdjustmentField.enabled(TaxIntegrationTaxServiceParameters.IsEnable);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>TaxIntegrationTaxServiceParameters</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            element.updateFeatureSetupControlStatus();
            element.updateMultipleTaxIdControlStatus();
            element.updateMultiSelectControl();
            element.updateTaxCodeAdjustmentStatus();
            element.updateControlStatusForCalculationParameter();

            if (isUniversalTaxRateAPIFeatureEnabled)
            {
                element.updateISVFeatureSetupControlStatus();
                element.updateAddressValidationParameterStatus();
            }
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>FeatureSetupName</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                str lookupParm = element.args().parm();

                if (lookupParm)
                {
                    container selectedSolution = str2con(lookupParm);

                    if (element.synchronizeTaxServiceData(
                        conPeek(selectedSolution, 3),
                        conPeek(selectedSolution, 1),
                        conPeek(selectedSolution, 2)))
                    {
                        TaxIntegrationTaxServiceParameters_ds.research(true);
                        element.updateControlStatusForCalculationParameter();
                    }
                    else
                    {
                        // Restore to the original value if synchronization failed or cancelled.
                        TaxIntegrationTaxServiceParameters.FeatureSetupName = TaxIntegrationTaxServiceParameters.orig().FeatureSetupName;
                    }

                    element.args().parm('');
                }
                else
                {
                    // Restore to the original value if nothing is selected via lookup.
                    TaxIntegrationTaxServiceParameters.FeatureSetupName = TaxIntegrationTaxServiceParameters.orig().FeatureSetupName;
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>FeatureSetupVersion</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>IsAddressValidationEnabled</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                element.updateAddressValidationParameterStatus();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>IsEnable</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;

                ret = super();

                if (!TaxIntegrationTaxServiceParameters.IsEnable && !Box::confirm("@TaxIntegration:TaxCalculationServiceTurnOffConfirmationV2"))
                {
                    ret = false;
                }

                return ret;
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                element.updateFeatureSetupControlStatus();
                element.updateMultipleTaxIdControlStatus();
                element.updateTaxCodeAdjustmentStatus();

                if (TaxIntegrationTaxServiceParameters.IsEnable
                    && TaxIntegrationTaxServiceParameters.FeatureSetupId)
                {
                    if (element.synchronizeTaxServiceData(
                        TaxIntegrationTaxServiceParameters.FeatureSetupId,
                        TaxIntegrationTaxServiceParameters.FeatureSetupName,
                        TaxIntegrationTaxServiceParameters.FeatureSetupVersion))
                    {
                        TaxIntegrationTaxServiceParameters_ds.research(true);
                        element.updateControlStatusForCalculationParameter();
                    }
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>IsISVTaxSolutionProviderEnabled</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.updateISVFeatureSetupControlStatus();
                element.updateMultipleTaxIdControlStatus();

                if (TaxIntegrationTaxServiceParameters.IsISVTaxSolutionProviderEnabled
                    && TaxIntegrationTaxServiceParameters.ISVFeatureSetupId)
                {
                    if (element.synchronizeTaxServiceData(
                        TaxIntegrationTaxServiceParameters.ISVFeatureSetupId,
                        TaxIntegrationTaxServiceParameters.ISVFeatureSetupName,
                        TaxIntegrationTaxServiceParameters.ISVFeatureSetupVersion,
                        TaxSolutionProviderType::ISV))
                    {
                        TaxIntegrationTaxServiceParameters_ds.research(true);
                    }
                }
            }

]]></Source>
							</Method>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;
            
                ret = super();

                if (ret && TaxIntegrationTaxServiceParameters.IsISVTaxSolutionProviderEnabled)
                {
                    // When enabling the tax solution provider, prompt the message for consent.
                    ret = Box::confirm("@TaxIntegration:ISVMessageForConsent");
                }
            
                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>IsMultipleTaxIdEnabled</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;

                ret = super();

                if (!TaxIntegrationTaxServiceParameters.IsMultipleTaxIdEnabled
                    && (TaxIntegrationTaxServiceParameters.IsMultipleTaxIdEUSalesListEnabled
                        || TaxIntegrationTaxServiceParameters.IsMultipleTaxIdIntrastatEnabled
                        || TaxIntegrationTaxServiceParameters.IsMultipleTaxIdVATDeclarationEnabled)
                    && !Box::confirm(
                        strFmt("@TaxMultipleVATID:MultipleVATIDParameterTurnOffConfirmation",
                            "@TaxMultipleVATID:MultipleVATIDParameterLabel",
                            "@EUSalesListCommon:VATDeclaration",
                            "@EUSalesListCommon:EUSalesList",
                            "@SYS6530")))
                {
                    ret = false;
                }
                return ret;
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                element.updateReportParmsStatusDependOnMultipleTaxIdParm();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ISVFeatureSetupName</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                str lookupParm = element.args().parm();

                if (lookupParm)
                {
                    container selectedSolution = str2con(lookupParm);

                    if (element.synchronizeTaxServiceData(
                        conPeek(selectedSolution, 3),
                        conPeek(selectedSolution, 1),
                        conPeek(selectedSolution, 2),
                        TaxSolutionProviderType::ISV))
                    {
                        TaxIntegrationTaxServiceParameters_ds.research(true);
                    }
                    else
                    {
                        // Restore to the original value if synchronization failed or cancelled.
                        TaxIntegrationTaxServiceParameters.ISVFeatureSetupName = TaxIntegrationTaxServiceParameters.orig().ISVFeatureSetupName;
                    }

                    element.args().parm('');
                }
                else
                {
                    // Restore to the original value if nothing is selected via lookup.
                    TaxIntegrationTaxServiceParameters.ISVFeatureSetupName = TaxIntegrationTaxServiceParameters.orig().ISVFeatureSetupName;
                }
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                element.lookupFeatureSetupName(_formControl, TaxSolutionProviderType::ISV);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>FeatureSetup_FeatureSetupName</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            element.lookupFeatureSetupName(this, TaxSolutionProviderType::Microsoft);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FeatureSetup_FeatureSetupVersion</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BusinessProcessStringControl</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            if (!isUniversalTaxRateAPIFeatureEnabled || element.validateNoOverlapOnBusinessProcess())
            {
                ret = super();

                TaxIntegrationBusinessProcessTable::saveDataBySolutionProvider(BusinessProcessStringControl.valueStr(), TaxSolutionProviderType::Microsoft);
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                ret = element.validateBusinessProcess(this.valueStr());
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ISVBusinessProcessStringControl</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            if (!isUniversalTaxRateAPIFeatureEnabled || element.validateNoOverlapOnBusinessProcess())
            {
                ret = super();

                TaxIntegrationBusinessProcessTable::saveDataBySolutionProvider(ISVBusinessProcessStringControl.valueStr(), TaxSolutionProviderType::ISV);
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                ret = element.validateBusinessProcess(this.valueStr(), TaxSolutionProviderType::ISV);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AddressValidation_SupportedCountryStringControl</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            TaxIntegrationAddressValidationSupportedCountry::saveDataByDataArea(AddressValidation_SupportedCountryStringControl.valueStr());

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SyncButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            TaxIntegrationTaxServiceSettingHelper::syncErrorCodeFromService();

            TaxIntegrationErrorCodeTable_ds.research(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>TaxIntegrationTaxServiceParameters</Name>
			<Table>TaxIntegrationTaxServiceParameters</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccrueUseTax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutomaticValidation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultErrorValidation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DisableCalculationParameter</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ErrorProcessMode</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FeatureSetupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FeatureSetupName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FeatureSetupVersion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsAddressValidationEnabled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsEnable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsISVTaxSolutionProviderEnabled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsMultipleTaxIdEnabled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsMultipleTaxIdEUSalesListEnabled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsMultipleTaxIdIntrastatEnabled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsMultipleTaxIdVATDeclarationEnabled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsUpdateTaxExemptNumberFromCustomerAddrEnabled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ISVFeatureSetupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ISVFeatureSetupName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ISVFeatureSetupVersion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Key</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OverwriteAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RoundOff</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RoundOffCalculationMethod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RoundOffPrinciple</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RoundOffType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxCodeAdjustment</DataField>
					<Enabled>No</Enabled>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ToleranceAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TolerancePercent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ToleranceValidation</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TaxIntegrationErrorCodeTable</Name>
			<Table>TaxIntegrationErrorCodeTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ErrorCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ErrorMessage</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ErrorValidation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<LinkType>Passive</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TaxIntegrationBusinessProcessTable</Name>
			<Table>TaxIntegrationBusinessProcessTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BusinessProcess</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SolutionProviderType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TaxIntegrationAddressValidationSupportedCountry</Name>
			<Table>TaxIntegrationAddressValidationSupportedCountry</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CountryRegionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>LogisticsAddressCountryRegion</Name>
			<Table>LogisticsAddressCountryRegion</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AddressUseZipPlus4</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AddrFormat</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BACENCode_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CountryRegionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsImmutable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ISOcode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRIOR_Facility_ID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MemberOfCustomsUnion_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OKSMCode_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RPayParentCountryRegionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TimeZone</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@TaxIntegration:TaxCalcParameterCaptionPreview</Caption>
		<Pattern xmlns="">TableOfContents</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<Style xmlns="">TableOfContents</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabGeneral</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>GeneralTitle</Name>
								<Skip>Yes</Skip>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>StaticText</Name>
										<Skip>Yes</Skip>
										<Type>StaticText</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Style>MainInstruction</Style>
										<Text>@TaxIntegration:TaxCalcParameterTitle</Text>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>No</AllowUserSetup>
								<FrameType>None</FrameType>
								<Style>TOCTitleContainer</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormTabControl">
								<Name>GeneralTab</Name>
								<Type>Tab</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormTabPageControl">
										<Name>AdvancedTaxCalculationTabPage</Name>
										<Pattern>Custom</Pattern>
										<Type>TabPage</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>TaxIntegrationTaxServiceParameters_IsEnable</Name>
												<Type>CheckBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>IsEnable</DataField>
												<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>RestOfControls</Name>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>TaxIntegrationTaxServiceParameters_TaxCodeAdjustment</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>CheckBox</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>TaxCodeAdjustment</DataField>
														<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>FeatureSetup</Name>
														<Type>Group</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>FeatureSetup_FeatureSetupName</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<HelpText>@TaxIntegration:FeatureSetupNameHelpText</HelpText>
																<Type>String</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataField>FeatureSetupName</DataField>
																<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
																<Label>@SYS31438</Label>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>FeatureSetup_FeatureSetupVersion</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Enabled>No</Enabled>
																<HelpText>@TaxIntegration:FeatureSetupVerHelpText</HelpText>
																<Type>String</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataField>FeatureSetupVersion</DataField>
																<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
																<Label>@SYS16131</Label>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>BusinessProcessStringControl</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<HelpText>@TaxIntegration:AdvancedTaxCalculationBusinessProcessHelpText</HelpText>
																<Type>String</Type>
																<FormControlExtension
																	i:nil="true" />
																<Label>@TaxIntegration:BusinessProcess</Label>
															</AxFormControl>
														</Controls>
														<Caption>@TaxIntegration:TaxFeature</Caption>
														<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>TaxIntegrationTaxServiceParameters_ErrorProcessMode</Name>
														<Type>ComboBox</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>ErrorProcessMode</DataField>
														<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
														<Items />
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>RoundOffRule</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>Group</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>RoundOffRule1_RoundOff</Name>
																<HelpText>@TaxIntegration:RoundingPrecisionHelpText</HelpText>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataField>RoundOff</DataField>
																<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
																<NoOfDecimals>6</NoOfDecimals>
																<NoOfDecimalsMode>Fixed</NoOfDecimalsMode>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormComboBoxControl">
																<Name>RoundOffRule1_RoundOffType</Name>
																<HelpText>@TaxIntegration:RoundingMethodHelpText</HelpText>
																<Type>ComboBox</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataField>RoundOffType</DataField>
																<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
																<Items />
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormComboBoxControl">
																<Name>RoundOffRule1_RoundOffPrinciple</Name>
																<HelpText>@TaxIntegration:RoudingByHelpText</HelpText>
																<Type>ComboBox</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataField>RoundOffPrinciple</DataField>
																<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
																<Items />
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormComboBoxControl">
																<Name>RoundOffRule1_RoundOffCalculationMethod</Name>
																<HelpText>@TaxIntegration:CalculationMethodHelpText</HelpText>
																<Type>ComboBox</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataField>RoundOffCalculationMethod</DataField>
																<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
																<Items />
															</AxFormControl>
														</Controls>
														<Columns>2</Columns>
														<DataGroup>RoundOffRule</DataGroup>
														<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
													</AxFormControl>
												</Controls>
												<Columns>2</Columns>
												<FrameType>None</FrameType>
											</AxFormControl>
										</Controls>
										<ColumnsMode>Fill</ColumnsMode>
										<Caption>@TaxIntegration:AdvancedTaxCalculation</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormTabPageControl">
										<Name>TaxSolutionProviderTabPage</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Pattern>Custom</Pattern>
										<Type>TabPage</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>TaxIntegrationTaxServiceParameters_IsISVTaxSolutionProviderEnabled</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>CheckBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>IsISVTaxSolutionProviderEnabled</DataField>
												<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>ISVFeatureSetup</Name>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ISVFeatureSetup_ISVFeatureSetupName</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>ISVFeatureSetupName</DataField>
														<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
														<Label>@SYS31438</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ISVBusinessProcessStringControl</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<HelpText>@TaxIntegration:ISVBusinessProcessHelpText</HelpText>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<Label>@TaxIntegration:BusinessProcess</Label>
													</AxFormControl>
												</Controls>
												<Caption>@TaxIntegration:TaxFeature</Caption>
												<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AddressValidationGroup</Name>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>AddressValidation_IsAddressValidationEnabled</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>CheckBox</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>IsAddressValidationEnabled</DataField>
														<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>AddressValidation_SupportedCountryStringControl</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<HelpText>@TaxIntegration:AddressValidationSupportedCountryHelpText</HelpText>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>Str1260</ExtendedDataType>
														<Label>@TaxIntegration:AddressValidationSupportedCountry</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>AddressValidation_OverwriteAddress</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>CheckBox</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>OverwriteAddress</DataField>
														<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>AddressValidation_AutomaticValidation</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>CheckBox</Type>
														<Visible>No</Visible>
														<FormControlExtension
															i:nil="true" />
														<DataField>AutomaticValidation</DataField>
														<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
													</AxFormControl>
												</Controls>
												<Caption>@TaxIntegration:AddressValidation</Caption>
												<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>UseTaxAssessment</Name>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>AccrueUseTax</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>CheckBox</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>AccrueUseTax</DataField>
														<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
													</AxFormControl>
												</Controls>
												<Caption>@TaxIntegration:UseTaxAssessmentLabel</Caption>
												<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>OverchargeTolerance</Name>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>TaxIntegrationTaxServiceParameters_TolerancePercent</Name>
														<Type>Real</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>TolerancePercent</DataField>
														<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>TaxIntegrationTaxServiceParameters_ToleranceAmount</Name>
														<Type>Real</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>ToleranceAmount</DataField>
														<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>TaxIntegrationTaxServiceParameters_ToleranceValidation</Name>
														<Type>ComboBox</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>ToleranceValidation</DataField>
														<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
														<Items />
													</AxFormControl>
												</Controls>
												<Caption>@TaxIntegration:OverchargeToleranceLabel</Caption>
												<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
											</AxFormControl>
										</Controls>
										<Columns>5</Columns>
										<Caption>@TaxIntegration:TaxSolutionProvider</Caption>
									</AxFormControl>
								</Controls>
								<Style>FastTabs</Style>
							</AxFormControl>
						</Controls>
						<Caption>@SYS2952</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabErrorHandling</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ErrorHandlingTitle</Name>
								<Skip>Yes</Skip>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>ErrorHandlingStaticText</Name>
										<Skip>Yes</Skip>
										<Type>StaticText</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Style>MainInstruction</Style>
										<Text>@TaxIntegration:ErrorHandlingTitle</Text>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>No</AllowUserSetup>
								<FrameType>None</FrameType>
								<Style>TOCTitleContainer</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormTabControl">
								<Name>ErrorHandlingTab</Name>
								<Type>Tab</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormTabPageControl">
										<Name>ErrorHandlingGeneralTabPage</Name>
										<Pattern>FieldsFieldGroups</Pattern>
										<PatternVersion>1.1</PatternVersion>
										<Type>TabPage</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>TaxIntegrationTaxServiceParameters_DefaultErrorValidation</Name>
												<HelpText>@TaxIntegration:DefaultResultValTypHelpText</HelpText>
												<Type>ComboBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>DefaultErrorValidation</DataField>
												<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
												<Items />
											</AxFormControl>
										</Controls>
										<ColumnsMode>Fill</ColumnsMode>
										<Caption>@SYS55776</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormTabPageControl">
										<Name>ErrorHandlingDetailTabPage</Name>
										<Pattern>ToolbarList</Pattern>
										<PatternVersion>1.2</PatternVersion>
										<Type>TabPage</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormActionPaneControl">
												<Name>ErrorCodesActionPane</Name>
												<Type>ActionPane</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonGroupControl">
														<Name>ErrorCodesButtonGroup</Name>
														<Type>ButtonGroup</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormButtonControl">
																<Name>SyncButton</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>Button</Type>
																<FormControlExtension
																	i:nil="true" />
																<ButtonDisplay>TextOnly</ButtonDisplay>
																<Style>CommandLink</Style>
																<Text>@TaxIntegration:SyncResultCodesFromTaxService</Text>
															</AxFormControl>
														</Controls>
													</AxFormControl>
												</Controls>
												<Style>Strip</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGridControl">
												<Name>ErrorCodesGrid</Name>
												<Type>Grid</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>TaxIntegrationErrorCodes_ErrorCode</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>ErrorCode</DataField>
														<DataSource>TaxIntegrationErrorCodeTable</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>TaxIntegrationErrorCodes_ErrorMessage</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>ErrorMessage</DataField>
														<DataSource>TaxIntegrationErrorCodeTable</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>TaxIntegrationErrorCodes_ErrorValidation</Name>
														<Type>ComboBox</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>ErrorValidation</DataField>
														<DataSource>TaxIntegrationErrorCodeTable</DataSource>
														<Items />
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>TaxIntegrationErrorCodes_ErrorCodeType</Name>
														<Type>ComboBox</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>ErrorCodeType</DataField>
														<DataSource>TaxIntegrationErrorCodeTable</DataSource>
														<Label>@TaxServiceISVConnector:TaxErrorCodeType</Label>
														<Items />
													</AxFormControl>
												</Controls>
												<DataSource>TaxIntegrationErrorCodeTable</DataSource>
												<MultiSelect>No</MultiSelect>
												<ShowRowLabels>No</ShowRowLabels>
												<Style>Tabular</Style>
											</AxFormControl>
										</Controls>
										<Caption>@SYS310295</Caption>
										<FastTabExpanded>Yes</FastTabExpanded>
									</AxFormControl>
								</Controls>
								<Style>FastTabs</Style>
							</AxFormControl>
						</Controls>
						<Caption>@TaxIntegration:ErrorHandling</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>MultipleTaxId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SetupTitle</Name>
								<Skip>Yes</Skip>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>SetupStaticText</Name>
										<Skip>Yes</Skip>
										<Type>StaticText</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Style>MainInstruction</Style>
										<Text>@SYS333869</Text>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>No</AllowUserSetup>
								<FrameType>None</FrameType>
								<Style>TOCTitleContainer</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Setup</Name>
								<HeightMode>SizeToAvailable</HeightMode>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>TaxIntegrationTaxServiceParameters_IsMultipleTaxIdEnabled</Name>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IsMultipleTaxIdEnabled</DataField>
										<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>TaxIntegrationTaxServiceParameters_IsMultipleTaxIdVATDeclarationEnabled</Name>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IsMultipleTaxIdVATDeclarationEnabled</DataField>
										<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>TaxIntegrationTaxServiceParameters_IsMultipleTaxIdEUSalesListEnabled</Name>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IsMultipleTaxIdEUSalesListEnabled</DataField>
										<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>TaxIntegrationTaxServiceParameters_IsMultipleTaxIdIntrastatEnabled</Name>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IsMultipleTaxIdIntrastatEnabled</DataField>
										<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>TaxIntegrationTaxServiceParameters_IsUpdateTaxExemptNumberFromCustomerAddrEnabled</Name>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IsUpdateTaxExemptNumberFromCustomerAddrEnabled</DataField>
										<DataSource>TaxIntegrationTaxServiceParameters</DataSource>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@MultipleTaxId:MultipleTaxIdTabPage</Caption>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Style>VerticalTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>