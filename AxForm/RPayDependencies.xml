<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RPayDependencies</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
    [Form]
    public class RPayDependencies extends FormRun
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillForCostType</Name>
				<Source><![CDATA[
        void fillForCostType(RPayCostType code)
    {
        RPayCounterCalcTable payCounterCalcTable;
        RPayBalColumns       payBalColumns;
        RPayCounterTable     payCounterTable;

        while select CounterUnit from payCounterCalcTable
            where (payCounterCalcTable.PayCalculateEnumName   == enumStr(RPayCommonCalcType)   &&
                   payCounterCalcTable.PayCalculateTypeNumber == RPayCommonCalcType::CostType) &&
                 ((payCounterCalcTable.NumFrom                == code                          &&
                  (! payCounterCalcTable.NumTo))                                               ||
                  (payCounterCalcTable.NumTo                                                   &&
                   payCounterCalcTable.NumFrom                                                 &&
                 (((payCounterCalcTable.NumFrom               <= code)                         &&
                  (payCounterCalcTable.NumTo                  >= code))                        ||
                   payCounterCalcTable.NumFrom                == code)))
        {
            payTmpDependencies_ds.insertRecord(RPayCostCountRateUse::Counter,
                                               payCounterCalcTable.CounterUnit,
                                               RPayCounterTable::find(payCounterCalcTable.CounterUnit).Name);
        }

        while select CounterUnit, Name from payCounterTable
            where payCounterTable.Output == code
        {
            payTmpDependencies_ds.insertRecord(RPayCostCountRateUse::Counter,
                                               payCounterTable.CounterUnit,
                                               payCounterTable.Name);
        }

        while select BalanceSheet from payBalColumns
            where (payBalColumns.Type == RPayColumnType::CTypeQtyDay  ||
                   payBalColumns.Type == RPayColumnType::CTypeQtyHour ||
                   payBalColumns.Type == RPayColumnType::CTypeAmount) &&
                   payBalColumns.Code == code
        {
            payTmpDependencies_ds.insertRecord(RPayCostCountRateUse::Statistic,
                                               payBalColumns.BalanceSheet,
                                               RPayBalHeader::find(payBalColumns.BalanceSheet).Name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillForCounter</Name>
				<Source><![CDATA[
        void fillForCounter(RPayCounterUnit code)
    {
        RPayCounterCalcTable payCounterCalcTable;
        RPayBalColumns       payBalColumns;

        while select CounterUnit from payCounterCalcTable
            where (payCounterCalcTable.PayCalculateEnumName   == enumStr(RPayCommonCalcType)    &&
                   payCounterCalcTable.PayCalculateTypeNumber == RPayCommonCalcType::BaseTotal) &&
                  ((payCounterCalcTable.NumFrom               == code                           &&
                  (! payCounterCalcTable.NumTo))                                                ||
                  (payCounterCalcTable.NumTo                                                    &&
                   payCounterCalcTable.NumFrom                                                  &&
                  (((payCounterCalcTable.NumFrom              <= code)                          &&
                  (payCounterCalcTable.NumTo                  >= code))                         ||
                   payCounterCalcTable.NumFrom                == code)))
        {
            payTmpDependencies_ds.insertRecord(RPayCostCountRateUse::Counter,
                                               payCounterCalcTable.CounterUnit,
                                               RPayCounterTable::find(payCounterCalcTable.CounterUnit).Name);
        }

        while select BalanceSheet from payBalColumns
            where payBalColumns.Type == RPayColumnType::Counter &&
                  payBalColumns.Code == code
        {
            payTmpDependencies_ds.insertRecord(RPayCostCountRateUse::Statistic,
                                               payBalColumns.BalanceSheet,
                                               RPayBalHeader::find(payBalColumns.BalanceSheet).Name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillForRate</Name>
				<Source><![CDATA[
        void fillForRate(RPayRateCode code)
    {
        RPayTable            payTable;
        RPayCounterCalcTable payCounterCalcTable;
        RPayBalColumns       payBalColumns;

        while select PayCtype, Name from payTable
            where payTable.PayRate == code
        {
            payTmpDependencies_ds.insertRecord(RPayCostCountRateUse::CostType,
                                               payTable.PayCtype,
                                               payTable.Name);
        }

        while select CounterUnit from  payCounterCalcTable
            where (payCounterCalcTable.PayCalculateEnumName   == enumStr(RPayCommonCalcType) &&
                   payCounterCalcTable.PayCalculateTypeNumber == RPayCommonCalcType::Rate)   &&
                  (( payCounterCalcTable.NumFrom              == code                        &&
                  (!  payCounterCalcTable.NumTo))                                            ||
                  ( payCounterCalcTable.NumTo                                                &&
                  payCounterCalcTable.NumFrom                                                &&
                  (((payCounterCalcTable.NumFrom              <= code)                       &&
                  (payCounterCalcTable.NumTo                  >= code))                      ||
                  payCounterCalcTable.NumFrom                 == code)))
        {
            payTmpDependencies_ds.insertRecord(RPayCostCountRateUse::Counter,
                                               payCounterCalcTable.CounterUnit,
                                               RPayCounterTable::find(payCounterCalcTable.CounterUnit).Name);
        }

        while select BalanceSheet from payBalColumns
            where payBalColumns.Type == RPayColumnType::Rate &&
                  payBalColumns.Code == code
        {
            payTmpDependencies_ds.insertRecord(RPayCostCountRateUse::Statistic,
                                               payBalColumns.BalanceSheet,
                                               RPayBalHeader::find(payBalColumns.BalanceSheet).Name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        void init()
    {
        RPayTable        payTable;
        RPayCounterTable payCounterTable;
        RPayRateTable    payRateTable;
        FormRun         formRun = element.args().caller();

        super();

        if (! formRun)
        {
            throw error("@GLS105841");
        }

        switch (formRun.name())
        {
            case formStr(RPayTable):
                payTable = element.args().record();
                this.fillForCostType(payTable.PayCtype);
                break;

            case formStr(RPayCounterTable):
                payCounterTable = element.args().record();
                this.fillForCounter(payCounterTable.CounterUnit);
                break;

            case formStr(RPayFund):
                payCounterTable = element.args().record();
                this.fillForCounter(payCounterTable.CounterUnit);
                break;

            case formStr(RPayRateTable):
                payRateTable = element.args().record();
                this.fillForRate(payRateTable.PayRate);
                break;
        }
        payTmpDependencies_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>jump</Name>
				<Source><![CDATA[
        void jump()
    {
        Args        args = new Args();

        switch (payTmpDependencies.Type)
        {
            case RPayCostCountRateUse::None :
                break;
            case RPayCostCountRateUse::CostType:
                args.record(RPayTable::find(payTmpDependencies.Code));
                new MenuFunction(menuitemDisplayStr(RPayCostTable), MenuItemType::Display).run(args);
                break;
            case RPayCostCountRateUse::Counter:
                args.record(RPayCounterTable::find(payTmpDependencies.Code));
                new MenuFunction(menuitemDisplayStr(RPayCounterTable), MenuItemType::Display).run(args);
                break;
            case RPayCostCountRateUse::Statistic:
                args.record(RPayBalHeader::find(payTmpDependencies.Code));
                new MenuFunction(menuitemDisplayStr(RPayBalanceSheet), MenuItemType::Display).run(args);
                break;
            case RPayCostCountRateUse::Scanning:
                args.record(RPaySeqTable::find(str2int(payTmpDependencies.Code)));
                new MenuFunction(menuitemDisplayStr(RPayCalcSequence), MenuItemType::Display).run(args);
                break;
            case RPayCostCountRateUse::PayParameter:
                new MenuFunction(menuitemDisplayStr(RPayParameters), MenuItemType::Display).run();
                break;
            default :
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>PayTmpDependencies</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
                int active()
        {
            int ret;

            ret = super();

            switch (payTmpDependencies.Type)
            {
                case RPayCostCountRateUse::None :
                    payTmpDependencies_code.helpText("");
                    payTmpDependencies_name.helpText("");
                    break;
                case RPayCostCountRateUse::CostType:
                    payTmpDependencies_code.helpText("@GLS105842");
                    payTmpDependencies_name.helpText("@GLS105269");
                    break;
                case RPayCostCountRateUse::Counter:
                    payTmpDependencies_code.helpText("@GLS105843");
                    payTmpDependencies_name.helpText("@GLS105243");
                    break;
                case RPayCostCountRateUse::SystemParm:
                    payTmpDependencies_code.helpText("@GLS105844");
                    payTmpDependencies_name.helpText("@GLS105445");
                    break;
                case RPayCostCountRateUse::PaySlip:
                    payTmpDependencies_code.helpText("@GLS105845");
                    payTmpDependencies_name.helpText("@GLS105209");
                    break;
                case RPayCostCountRateUse::Statistic:
                    payTmpDependencies_code.helpText("@GLS105846");
                    payTmpDependencies_name.helpText("@GLS105158");
                    break;
                case RPayCostCountRateUse::Scanning:
                    payTmpDependencies_code.helpText("@GLS105847");
                    payTmpDependencies_name.helpText("@GLS105848");
                    break;
                case RPayCostCountRateUse::PayParameter:
                    payTmpDependencies_code.helpText("@GLS105849");
                    payTmpDependencies_name.helpText("@GLS105381");
                    break;
                default :
                    payTmpDependencies_code.helpText("");
                    payTmpDependencies_name.helpText("");
                    break;
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>insertRecord</Name>
						<Source><![CDATA[
                void insertRecord(RPayCostCountRateUse type, str code, str name)
        {
            payTmpDependencies.Type = type;
            payTmpDependencies.Code = code;
            payTmpDependencies.Name = name;
            payTmpDependencies.insert();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>PayTmpDependencies_Type</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
                void jumpRef()
        {
            element.jump();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PayTmpDependencies_Code</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
                void jumpRef()
        {
            element.jump();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PayTmpDependencies_Name</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
                void jumpRef()
        {
            element.jump();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>PayTmpDependencies</Name>
			<Table>RPayTmpDependencies</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Code</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Type</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS1820</Caption>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<Style xmlns="">SimpleList</Style>
		<TitleDataSource xmlns="">PayTmpDependencies</TitleDataSource>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ApplicationBar</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CustomFilterGroup</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>PayTmpDependencies_Type</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>858993458</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>Type</DataField>
						<DataSource>PayTmpDependencies</DataSource>
						<Label>@SYS54161</Label>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>PayTmpDependencies_Code</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1288490187</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>Code</DataField>
						<DataSource>PayTmpDependencies</DataSource>
						<DisplayLength>20</DisplayLength>
						<DisplayLengthMode>Fixed</DisplayLengthMode>
						<Label>@SYS6908</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>PayTmpDependencies_Name</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1717986916</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>Name</DataField>
						<DataSource>PayTmpDependencies</DataSource>
						<Label>@SYS7399</Label>
					</AxFormControl>
				</Controls>
				<DataSource>PayTmpDependencies</DataSource>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>