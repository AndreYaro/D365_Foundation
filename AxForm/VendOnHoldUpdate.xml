<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>VendOnHoldUpdate</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class VendOnHoldUpdate extends FormRun
{
    FormRun   formRun;
    container vendRecords;

}
]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {        
        // The blockedReleaseDate field is not bound to a data source and therefore won't get converted to the UTC time zone before being stored in the database.
        // Therefore we need to remove the timezone offset from the date that the user entered.
        VendBlockedReleaseDate blockedReleaseDateUTC = DateTimeUtil::removeTimeZoneOffset(blockedReleaseDate.dateTimeValue(), DateTimeUtil::getUserPreferredTimeZone());
          
        if (VendUpdateOnHoldAsyncFlight::instance().isEnabled() && AsyncUpdate.checked())
        {
            VendUpdateOnHoldHelper::updateOnHoldAsync(this.vendRecords(),
                any2Enum(onHold.selection()),
                blockedReleaseDateUTC,
                apply.checked(),
                true,
                ReasonCode.Text());
        }
        else
        {
            VendTable::updateOnHold(this.vendRecords(),
                any2Enum(onHold.selection()),
                blockedReleaseDateUTC,
                apply.checked(),
                true,
                ReasonCode.Text());
        }


        formRun.dataSource(tablestr(VendTable)).reread();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableControls</Name>
				<Source><![CDATA[
    public void enableDisableControls()
    {
        blockedReleaseDate.enabled(any2Enum(onHold.selection()) != CustVendorBlocked::Never);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills a container object with user-selected VendTable records
    /// </summary>
    /// <param name="_formDataSource">
    /// Contains the FormDataSource of the caller form.
    /// </param>
    /// <returns>
    /// An instance of a container object containing VendTable records
    /// </returns>
    public container getSelectedRecords(FormDataSource _formDataSource)
    {
        FormDataSource fds = _formDataSource;
        VendTable currentLine;
        container vendContainer;

        for (currentLine = fds.getFirst(true) ? fds.getFirst(true) : fds.cursor(); currentLine; currentLine = fds.getNext())
        {
            vendContainer += [currentLine];
        }

        return vendContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSharedCompanies</Name>
				<Source><![CDATA[
    private boolean hasSharedCompanies(DataAreaId _dataAreaId)
    {
        SysDataSharingRule sysDataSharingRule;
        SysDataSharingOrganizationEnabled sysDataSharingOrganizationEnabled;
        SysDataSharingTableField sysDataSharingTableField;

        select count(RecId) from sysDataSharingRule
            join sysDataSharingOrganizationEnabled
                where sysDataSharingRule.DataSharingPolicy == sysDataSharingOrganizationEnabled.DataSharingPolicy
                    && sysDataSharingOrganizationEnabled.DataSharingCompany == _dataAreaId
            join sysDataSharingTableField
                where sysDataSharingTableField.TableName == tableStr(VendTable)
                    && sysDataSharingTableField.FieldName == fieldId2Name(tableNum(VendTable), FieldNum(VendTable, Blocked))
                    && sysDataSharingTableField.IsShared == NoYes::Yes
                    && sysDataSharingTableField.DataSharingRule == sysDataSharingRule.RecId
                    && sysDataSharingRule.SharedTableName == tablestr(VendTable);
            
        return (sysDataSharingRule.RecId == 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        formRun = element.args().caller();
        this.vendRecords(this.getSelectedRecords(formRun.dataSource(tablestr(VendTable))));

        if (conlen(this.vendRecords()) == 1)
        {
            VendTable vendTable = conpeek(this.vendRecords(), 1);
            vendTable = VendTable::findRecId(vendTable.RecId, true);

            // The blockedReleaseDate field is not bound to a data source and therefore won't get converted into the users time zone.
            // Therefore we need to apply the users timezone offset to the UTCTimeStamp retrieved from the database.
            VendBlockedReleaseDate blockedReleaseDateUserTimeZone = DateTimeUtil::applyTimeZoneOffset(vendTable.BlockedReleaseDate, DateTimeUtil::getUserPreferredTimeZone());

            OnHold.selection(enum2int(vendTable.Blocked));
            BlockedReleaseDate.dateTimeValue(blockedReleaseDateUserTimeZone);
            VendOnHoldHistory vendOnHoldHistory = VendOnHoldHistory::findLast(vendTable.AccountNum);
            ReasonCode.text(vendOnHoldHistory.ReasonCode);

            if (this.hasSharedCompanies(vendTable.DataAreaId))
            {
                Apply.value(NoYes::Yes);
                Apply.allowEdit(false);

                if (VendUpdateOnHoldAsyncFlight::instance().isEnabled())
                {
                    AsyncUpdate.enabled(true);
                }
            }
        }

        if (VendUpdateOnHoldAsyncFlight::instance().isEnabled())
        {
            AsyncUpdate.enabled(Apply.checked());
        }
        else
        {
            AsyncUpdate.visible(false);
            AsyncUpdate.skip(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendRecords</Name>
				<Source><![CDATA[
    protected container vendRecords(container _vendRecords = vendRecords)
    {
        vendRecords = _vendRecords;
        return vendRecords;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>ReasonCode</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            ReasonFormTable::reasonCodeLookup(this, LedgerJournalACType::Vend, LedgerJournalACType::Vend, true, false);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Validate existence of vendor type reason code in ReasonTable.
        /// </summary>
        /// <returns>
        /// A boolean indicating whether the reason code was valid for vendor type reason or not.
        /// </returns>
        public boolean validate()
        {
            boolean ret = super();

            ret = ret && ReasonTable::validateReasonCode(ReasonCode.text(), LedgerJournalACType::Vend, true, LedgerJournalACType::Vend);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Apply</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (VendUpdateOnHoldAsyncFlight::instance().isEnabled())
            {
                AsyncUpdate.enabled(this.checked());
                AsyncUpdate.checked(false);
            }
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<BackgroundColor xmlns="">WindowBackground</BackgroundColor>
		<Caption xmlns="">@SYS331014</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">DropDialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">DropDialog</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<WindowType xmlns="">Slider</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>GroupContent</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>OnHold</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>VendBlocked</ExtendedDataType>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateTimeControl">
						<Name>BlockedReleaseDate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>DateTime</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>VendBlockedReleaseDate</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>ReasonCode</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1670265058</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>ReasonCode</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>Apply</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1908874352</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@SCM:VendOnHoldApplyHoldInAllLegalEntitiesLabel</HelpText>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS190106</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>AsyncUpdate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<HelpText>@FieldDescriptions_AccountsPayable:VendOnHoldUpdate_AsyncUpdate</HelpText>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>VendOnHoldUpdate</Label>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Left>0</Left>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CommandButtonOK</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>