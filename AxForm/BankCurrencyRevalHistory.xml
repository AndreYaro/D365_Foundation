<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BankCurrencyRevalHistory</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
/// <summary>
/// The <c>BankCurrencyRevalHistory</c> form displays historical records for bank - foreign currency revaluations
/// </summary>
[Form]
public class BankCurrencyRevalHistory extends FormRun implements IFormRefreshable
{
    private const str BankCurrencyRevalEnhancementFeatureGuidStr = '09c7ddcb-bb6a-407a-b024-4e76fe3d0ca8';
}
]]></Source>
			</Method>
			<Method>
				<Name>callerRefresh</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the history grid after the revaluation process is complete.
    /// </summary>
    public void callerRefresh()
    {
        bankCurrencyRevalHistory_DS.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        #ISOCountryRegionCodes

        if (!BankCurrencyRevalFeatureExposure::isEnabled())
        {
            this.lifecyclehelper().cancelFormInitialization(
                Exception::Warning,
                strFmt("@CashManagement:BankCurrencyRevalNotEnabled", "@CashManagement:BankCurrencyRevalFeature", "@CashManagement:BankCurrencyRevalFeature", "@SYS336089"));

            return;
        }

        if (!FeatureStateProvider::isFeatureEnabled(BankCurrencyRevalEnhancementFeature::instance()))
        {
            FeatureManagementNotifications::addFeatureRecommendationNotification(BankCurrencyRevalEnhancementFeature::instance(), guidFromString(BankCurrencyRevalEnhancementFeatureGuidStr));
        }

        super();

        this.warnOnActivateCompanyChange(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewVoucher</Name>
				<Source><![CDATA[
    private void viewVoucher()
    {
        if (bankCurrencyRevalHistory.LegalEntity)
        {
            changecompany(bankCurrencyRevalHistory.LegalEntity)
            {
                BankAccountTrans bankAccountTrans;

                select firstonly bankAccountTrans
                    where bankAccountTrans.AccountId == bankCurrencyRevalHistory.BankAccountId
                        && bankAccountTrans.TransDate == bankCurrencyRevalHistory.TransDate
                        && bankAccountTrans.Voucher == bankCurrencyRevalHistory.SubledgerVoucher;

                element.displayVoucherForBankAccountTrans(bankAccountTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVoucherForBankAccountTrans</Name>
				<Source><![CDATA[
    private void displayVoucherForBankAccountTrans(BankAccountTrans _bankAccountTrans)
    {
        Args args = new Args();
        args.record(_bankAccountTrans);
        args.parm(formStr(BankCurrencyRevalHistory));

        MenuFunction menuFunction = new MenuFunction(menuItemDisplayStr(LedgerTransVoucher1), MenuItemType::Display);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>BankCurrencyRevalHistory</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            this.queryBuildDataSource().addOrderByField(fieldNum(BankCurrencyRevalHistory, TransDate), SortOrder::Descending);
            this.queryBuildDataSource().addOrderByField(fieldNum(BankCurrencyRevalHistory, LegalEntity), SortOrder::Ascending);
            this.queryBuildDataSource().addOrderByField(fieldNum(BankCurrencyRevalHistory, BankAccountID), SortOrder::Ascending);
            this.queryBuildDataSource().addOrderByField(fieldNum(BankCurrencyRevalHistory, SubledgerVoucher), SortOrder::Descending);

            this.secureByCompanyAccess();
        }

]]></Source>
					</Method>
					<Method>
						<Name>secureByCompanyAccess</Name>
						<Source><![CDATA[
        private void secureByCompanyAccess()
        {
            MyLegalEntities myLegalEntities;

            while select DataArea from myLegalEntities
            {
                boolean hasViewAccess = LedgerSecurityHelper::hasMinimumSecurityAccessForLegalEntity(
                    element.args().menuItemName(),
                    element.args().menuItemType(),
                    myLegalEntities.DataArea,
                    AccessRight::View);

                if (hasViewAccess)
                {
                    QueryBuildRange queryRange = this.queryBuildDataSource().addRange(fieldNum(BankCurrencyRevalHistory, LegalEntity));
                    queryRange.value(myLegalEntities.DataArea);
                    queryRange.status(RangeStatus::Hidden);
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret = super();

            BankCurrencyRevalHistory currentHistory = this.cursor() as BankCurrencyRevalHistory;

            TransactionReversal.enabled(currentHistory.eligibleForReversal());

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>BankCurrencyReval</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            element.callerRefresh();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LedgerTransVoucher</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.viewVoucher();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TransactionReversal</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            element.callerRefresh();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BankCurrencyRevalHistory_BankAccountId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            changecompany(bankCurrencyRevalHistory.LegalEntity)
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BankCurrencyRevalHistory_SubledgerVoucher</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            element.viewVoucher();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReversedVoucher</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            if (bankCurrencyRevalHistory.LegalEntity)
            {
                changecompany(bankCurrencyRevalHistory.LegalEntity)
                {
                    BankAccountTrans bankAccountTrans;
                    BankCurrencyRevalHistory bankCurrencyRevalHistoryReversed;

                    select firstonly bankCurrencyRevalHistoryReversed
                        where bankCurrencyRevalHistoryReversed.RecId == bankCurrencyRevalHistory.OrigBankCurrencyRevalHistory
                        join bankAccountTrans
                            where bankAccountTrans.AccountId == bankCurrencyRevalHistoryReversed.BankAccountId
                                && bankAccountTrans.TransDate == bankCurrencyRevalHistoryReversed.TransDate
                                && bankAccountTrans.Voucher == bankCurrencyRevalHistoryReversed.SubledgerVoucher;

                    element.displayVoucherForBankAccountTrans(bankAccountTrans);
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>BankCurrencyRevalHistory</Name>
			<Table>BankCurrencyRevalHistory</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BankAccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRateDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRateType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Ledger</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LegalEntity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrigBankCurrencyRevalHistory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyExchangeRateType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Reversal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubledgerVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<MaxAccessRight>View</MaxAccessRight>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<DataSource xmlns="">BankCurrencyRevalHistory</DataSource>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">SimpleList</Style>
		<UseCaptionFromMenuItem xmlns="">Yes</UseCaptionFromMenuItem>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>BankCurrencyReval</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>BankCurrencyReval</MenuItemName>
								<MenuItemType>Action</MenuItemType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>LedgerTransVoucher</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<DataSource>BankCurrencyRevalHistory</DataSource>
								<MenuItemName>LedgerTransVoucher1</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TransactionReversal</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<DataSource>BankCurrencyRevalHistory</DataSource>
								<MenuItemName>BankCurrencyRevalReversal</MenuItemName>
								<MenuItemType>Action</MenuItemType>
								<MultiSelect>No</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
								<Text>@CashManagement:BankCurrencyRevalTransactionReversal</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FilterGroup</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilter</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>BankCurrencyRevalHistoryGrid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>BankCurrencyRevalHistoryGrid</Name>
				<Type>Grid</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormDateTimeControl">
						<Name>BankCurrencyRevalHistory_CreatedDateTime</Name>
						<AllowEdit>No</AllowEdit>
						<Type>DateTime</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>CreatedDateTime</DataField>
						<DataSource>BankCurrencyRevalHistory</DataSource>
						<Label>@CashManagement:BankCurrencyRevalProcessDate</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>BankCurrencyRevalHistory_LegalEntity</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>LegalEntity</DataField>
						<DataSource>BankCurrencyRevalHistory</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>BankCurrencyRevalHistory_BankAccountId</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>BankAccountId</DataField>
						<DataSource>BankCurrencyRevalHistory</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>BankCurrencyRevalHistory_TransDate</Name>
						<AllowEdit>No</AllowEdit>
						<Type>Date</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>TransDate</DataField>
						<DataSource>BankCurrencyRevalHistory</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>BankCurrencyRevalHistory_ExchangeRateDate</Name>
						<Type>Date</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>ExchangeRateDate</DataField>
						<DataSource>BankCurrencyRevalHistory</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>BankCurrencyRevalHistory_SubledgerVoucher</Name>
						<AllowEdit>No</AllowEdit>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>SubledgerVoucher</DataField>
						<DataSource>BankCurrencyRevalHistory</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>BankCurrencyRevalHistory_Reversal</Name>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>Reversal</DataField>
						<DataSource>BankCurrencyRevalHistory</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>ReversedVoucher</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>voucherReversed</DataMethod>
						<DataSource>BankCurrencyRevalHistory</DataSource>
						<Label>@CashManagement:BankCurrencyRevalVoucherReversed</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>IsReset</Name>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>IsReset</DataField>
						<DataSource>BankCurrencyRevalHistory</DataSource>
					</AxFormControl>
				</Controls>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>