<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailButtonGridButtonSetup</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
/// <summary>
/// The <c>RetailButtonGridButtonSetup</c> form is a flyout form which will open by clicking on Action field in <c>RetailButtonGrid</c> form.
/// </summary>
[Form]
public class RetailButtonGridButtonSetup extends FormRun
{
    private const int operationId = 4000;
    private RetailOperations retailOperations;
    private Map actionIdAndLayoutTypeMap;
    private RetailButtonSetupLayoutType retailButtonSetupLayoutType;
    private RetailSearchType retailSearchType;
    private str retailSearchTypeStr;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        retailButtonGridButtons = element.args().record();

        actionIdAndLayoutTypeMap = RetailButtonDesignerHelper::operationDesignerLayout();

        Action.text(RetailOperations::find(retailButtonGridButtons.Action).OperationName);
        DisplayText.text(retailButtonGridButtons.DisplayText);
        HideButtonText.value(retailButtonGridButtons.HideButtonText);
        Tooltip.text(retailButtonGridButtons.Tooltip);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateControlsVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will handle the control visibility of form on the basis of selected action.
    /// </summary>
    private void updateControlsVisibility(RetailOperationId _action)
    {
        element.hideControls();

        if (actionIdAndLayoutTypeMap.exists(_action))
        {
            retailButtonSetupLayoutType = actionIdAndLayoutTypeMap.lookup(_action);
        }
        else
        {
            retailButtonSetupLayoutType = RetailButtonSetupLayoutType::Unknown;
        }

        switch (retailButtonSetupLayoutType)
        {
            case RetailButtonSetupLayoutType::OverrideName:
                OverrideName.visible(true);
                break;

            case RetailButtonSetupLayoutType::Payment:
                PaymentType.visible(true);
                break;

            case RetailButtonSetupLayoutType::OperationParameter:
                OperationParameter.visible(true);
                break;

            case RetailButtonSetupLayoutType::BlankOperation:
                OperationNumber.visible(true);
                BlankOperationParameter.visible(true);
                break;

            case RetailButtonSetupLayoutType::Discount:
                Discount.visible(true);
                break;

            case RetailButtonSetupLayoutType::URL:
                URL.visible(true);
                OpenInNewWindow.visible(true);
                break;

            case RetailButtonSetupLayoutType::DeliveryMode:
                DeliveryMode.visible(true);
                break;

            case RetailButtonSetupLayoutType::Menu:
                Menu.visible(true);
                break;

            case RetailButtonSetupLayoutType::ProductSale:
                ItemNumber.visible(true);
                break;

            case RetailButtonSetupLayoutType::Search:
                SearchType.visible(true);
                if (RetailButtonGridButtons.ActionProperty)
                {
                    retailSearchTypeStr = RetailButtonDesignerHelper::getConcatenatedValues(RetailButtonGridButtons.ActionProperty).value(1);
                    retailSearchType = SearchType.selection(str2Enum(retailSearchType, retailSearchTypeStr));
                }

                if (retailSearchType == RetailSearchType::Category)
                {
                    ReferenceGroup.visible(true);
                }
                else
                {
                    SearchTerm.visible(true);
                }
                break;

            case RetailButtonSetupLayoutType::Path:
                Path.visible(true);
                break;

            case RetailButtonSetupLayoutType::FulfillmentType:
                FulfillmentType.visible(true);
                break;

            case RetailButtonSetupLayoutType::Unknown:
            default:
                if (RetailButtonGridButtons.Action > operationId)
                {
                    OperationParameter.visible(true);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Here we are handling controls on basis of selected record in <c>ReatilButtonGrid</c> table.
    /// </summary>
    public void run()
    {
        this.updateControlsVisibility(RetailButtonGridButtons.Action);

        if (RetailButtonGridButtons.ActionProperty)
        {
            this.updateControlsValues();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Caller form will be refersh once user will click Ok.
    /// </summary>
    public void closeOk()
    {
        FormRun callerform = element.args().caller() as FormRun;

        callerForm.dataSource().research();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hideControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hide all the controls.
    /// </summary>
    private void hideControls()
    {
        Menu.visible(false);
        PaymentType.visible(false);
        OperationParameter.visible(false);
        OperationNumber.visible(false);
        BlankOperationParameter.visible(false);
        Discount.visible(false);
        URL.visible(false);
        OpenInNewWindow.visible(false);
        DeliveryMode.visible(false);
        FulfillmentType.visible(false);
        ItemNumber.visible(false);
        SearchType.visible(false);
        SearchTerm.visible(false);
        ReferenceGroup.visible(false);
        OverrideName.visible(false);
        Path.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateControlsValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the action property on the basis of selected layout <c>retailButtonSetupLayoutType</c>.
    /// </summary>
    private void updateControlsValues()
    {
        Array actionPropertyValues;

        switch (retailButtonSetupLayoutType)
        {
            case RetailButtonSetupLayoutType::OverrideName:
                OverrideName.text(RetailButtonGridButtons.ActionProperty);
                break;

            case RetailButtonSetupLayoutType::Payment:
                PaymentType.text(RetailTenderTypeTable::find(RetailButtonGridButtons.ActionProperty).name);
                break;

            case RetailButtonSetupLayoutType::OperationParameter:
                OperationParameter.text(RetailButtonGridButtons.ActionProperty);
                break;

            case RetailButtonSetupLayoutType::BlankOperation:
                if (RetailButtonGridButtons.ActionProperty)
                {
                    actionPropertyValues = RetailButtonDesignerHelper::getConcatenatedValues(RetailButtonGridButtons.ActionProperty);
                }

                OperationNumber.text(actionPropertyValues.value(1));
                BlankOperationParameter.text(actionPropertyValues.value(2));
                break;

            case RetailButtonSetupLayoutType::Discount:
                Discount.text(RetailButtonGridButtons.ActionProperty);
                break;

            case RetailButtonSetupLayoutType::URL:
                if (RetailButtonGridButtons.ActionProperty)
                {
                    actionPropertyValues = RetailButtonDesignerHelper::getConcatenatedValues(RetailButtonGridButtons.ActionProperty);
                }

                URL.text(actionPropertyValues.value(1));
                OpenInNewWindow.value(str2Int(actionPropertyValues.value(2)));
                break;

            case RetailButtonSetupLayoutType::DeliveryMode:
                RetailDeliveryMode retailDeliveryMode;

                select DeliveryModeName from retailDeliveryMode
                    where retailDeliveryMode.DeliveryModeId == RetailButtonGridButtons.ActionProperty;

                DeliveryMode.text(retailDeliveryMode.DeliveryModeName);
                break;

            case RetailButtonSetupLayoutType::Menu:
                Menu.text(RetailButtonGridButtons.ActionProperty);
                break;

            case RetailButtonSetupLayoutType::ProductSale:
                ItemNumber.text(RetailButtonGridButtons.ActionProperty);
                break;

            case RetailButtonSetupLayoutType::Search:
                if (RetailButtonGridButtons.ActionProperty)
                {
                    actionPropertyValues = RetailButtonDesignerHelper::getConcatenatedValues(RetailButtonGridButtons.ActionProperty);

                    retailSearchTypeStr = actionPropertyValues.value(1);
                    retailSearchType = SearchType.selection(str2Enum(retailSearchType, retailSearchTypeStr));
                }

                if (retailSearchType == RetailSearchType::All ||
                    retailSearchType == RetailSearchType::Item ||
                    retailSearchType == RetailSearchType::Customer)
                {
                    SearchTerm.text(actionPropertyValues.value(2));
                }
                else
                {
                    RecId recId = str2Int64(actionPropertyValues.value(2));

                    ReferenceGroup.value(recId);
                }
                break;

            case RetailButtonSetupLayoutType::Path:
                Path.text(RetailButtonGridButtons.ActionProperty);
                break;

            case RetailButtonSetupLayoutType::FulfillmentType:
                if (retailButtonGridButtons.ActionProperty)
                {
                    var fulfillmentTypeStr = RetailButtonDesignerHelper::getConcatenatedValues(retailButtonGridButtons.ActionProperty).value(1);
                    FulfillmentType.selection(str2Int(fulfillmentTypeStr));
                }
                break;

            case RetailButtonSetupLayoutType::Unknown:
            default:
                if (RetailButtonGridButtons.Action > operationId)
                {
                    OperationParameter.text(RetailButtonGridButtons.ActionProperty);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrUpdateRetailGridButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating or inserting the user changes to <c>RetailButtonGridButtons</c> parent record.
    /// </summary>
    private void insertOrUpdateRetailGridButton()
    {
        RetailButtonGridId buttonGridId;
        RetailButtonGridButtonId id;
        RetailButtonGridButtons retailButtonGridButtonsLoc;

        retailOperations = element.parmRetailOperations(Action.valueStr());

        buttonGridId = RetailButtonGridButtons.buttonGridId;
        id = RetailButtonGridButtons.ID;

        // Find the <c>RetailButtonGridButtons</c> table record for current button grid id and action.
        select firstonly retailButtonGridButtonsLoc
            where retailButtonGridButtonsLoc.Action == retailOperations.OperationId
            && retailButtonGridButtonsLoc.buttonGridId == buttonGridId;

        if (retailButtonGridButtonsLoc)
        {
            // Updates the current action record in <c>RetailButtonGridButtons</c> table.
            ttsbegin;
            retailButtonGridButtonsLoc.data(RetailButtonGridButtons);
            retailButtonGridButtonsLoc.selectForUpdate(true);

            retailButtonGridButtonsLoc.Action = retailOperations.OperationId;
            retailButtonGridButtonsLoc.ActionProperty = element.setActionProperty();
            retailButtonGridButtonsLoc.DisplayText = DisplayText.valuestr();
            retailButtonGridButtonsLoc.HideButtonText = HideButtonText.value();
            retailButtonGridButtonsLoc.Tooltip = Tooltip.valuestr();

            retailButtonGridButtonsLoc.update();
            ttscommit;
        }
        else
        {
            // If the Action changes in <c>RetailButtonGridButtonSetup</c> form, delete the old action record from 
            // <c>RetailButtonGridButtons</c> table and create a new record with modified values.
            ttsbegin;
            delete_from retailButtonGridButtonsLoc
                where retailButtonGridButtonsLoc.buttonGridId == buttonGridId
                && retailButtonGridButtonsLoc.ID == id;

            retailButtonGridButtonsLoc.data(RetailButtonGridButtons);
            retailButtonGridButtonsLoc.Action = retailOperations.OperationId;
            retailButtonGridButtonsLoc.ActionProperty = element.setActionProperty();
            retailButtonGridButtonsLoc.DisplayText = DisplayText.valuestr();
            retailButtonGridButtonsLoc.HideButtonText = HideButtonText.value();
            retailButtonGridButtonsLoc.Tooltip = Tooltip.valueStr();

            retailButtonGridButtonsLoc.insert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActionProperty</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will set the action property as per the selected <c>RetailButtonSetupLayoutType</c>.
    /// </summary>
    private RetailActionProperty setActionProperty()
    {
        RetailActionProperty retailActionProperty;

        switch (retailButtonSetupLayoutType)
        {
            case RetailButtonSetupLayoutType::OverrideName:
                retailActionProperty = OverrideName.valueStr();
                break;

            case RetailButtonSetupLayoutType::Payment:
                retailActionProperty = (select TenderTypeId from RetailTenderTypeTable
                                            where RetailTenderTypeTable.Name == PaymentType.valueStr()).TenderTypeId;
                break;

            case RetailButtonSetupLayoutType::OperationParameter:
                retailActionProperty = OperationParameter.valueStr();
                break;

            case RetailButtonSetupLayoutType::BlankOperation:
                retailActionProperty = strFmt('%1;%2', OperationNumber.valueStr(), BlankOperationParameter.valueStr());
                break;
            case RetailButtonSetupLayoutType::Discount:
                retailActionProperty = Discount.valueStr();
                break;

            case RetailButtonSetupLayoutType::URL:
                retailActionProperty = strFmt('%1;%2', URL.valueStr(), OpenInNewWindow.value());
                break;

            case RetailButtonSetupLayoutType::DeliveryMode:
                retailActionProperty = (select DeliveryModeId from RetailDeliveryMode
                                            where RetailDeliveryMode.DeliveryModeName == DeliveryMode.valueStr()).DeliveryModeId;
                break;

            case RetailButtonSetupLayoutType::Menu:
                retailActionProperty = Menu.valueStr();
                break;

            case RetailButtonSetupLayoutType::ProductSale:
                retailActionProperty = ItemNumber.valueStr();
                break;

            case RetailButtonSetupLayoutType::Search:
                anytype refGroup;

                retailSearchType = SearchType.selection();
                retailSearchTypeStr = enum2Str(retailSearchType);

                if (retailSearchType == RetailSearchType::Category)
                {
                    refGroup = ReferenceGroup.valueStr();
                    retailActionProperty = strFmt('%1;%2', retailSearchTypeStr, refGroup);
                }
                else
                {
                    retailActionProperty = strFmt('%1;%2', retailSearchTypeStr, SearchTerm.valueStr());
                }
                break;

            case RetailButtonSetupLayoutType::Path:
                retailActionProperty = Path.valueStr();
                break;

            case retailButtonSetupLayoutType::FulfillmentType:
                retailActionProperty = int2Str(FulfillmentType.selection());
                break;

            case RetailButtonSetupLayoutType::Unknown:
            default:
                if (RetailButtonGridButtons.Action > operationId)
                {
                    retailActionProperty = OperationParameter.valueStr();
                }
                break;
        }

        return retailActionProperty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailHierarchyIfExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find and select the Retail related category in <c>EcoResCategoryHierarchy</c> table.
    /// </summary>
    private EcoResCategoryHierarchy getRetailHierarchyIfExists()
    {
        EcoResCategoryHierarchyRole retailHierarchyRole =
            EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Retail);

        if (!retailHierarchyRole)
        {
            retailHierarchyRole =
                EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::RetailSpecialGroup);
        }

        if (!retailHierarchyRole)
        {
            throw(error(strFmt("@SYS135043", EcoResCategoryNamedHierarchyRole::Retail)));
        }

        return EcoResCategoryHierarchy::find(retailHierarchyRole.CategoryHierarchy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Select the values from <c>RetailOperations</c> table based on action text provided.
    /// </summary>
    private RetailOperations parmRetailOperations(RetailOperationName _actionText)
    {
        RetailOperations operations;

        select firstonly OperationId,OperationName from operations
            index hint operationIdIdx
            where operations.OperationName == _actionText;

        return operations;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>Action</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Presents the Actions lookup form to the user.
        /// </summary>
        public void lookup()
        {
            Query query = new Query();
            QueryBuildDataSource queryBuildDataSource;
            QueryBuildRange queryBuildRange;

            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(RetailOperations), this);

            sysTableLookup.addLookupField(fieldNum(RetailOperations, OperationName));

            queryBuildDataSource = query.addDataSource(tableNum(RetailOperations));
            queryBuildDataSource.addSortField(fieldNum(RetailOperations, OperationName));

            queryBuildRange = queryBuildDataSource.addRange(fieldNum(RetailOperations, UserOperation));
            queryBuildRange.value(queryValue(NoYes::Yes));

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Modify the Action if required and control will change according to the selected action.
        /// </summary>
        public boolean modified()
        {
            boolean ret = true;

            retailOperations = element.parmRetailOperations(Action.valueStr());

            element.updateControlsVisibility(retailOperations.OperationId);
            DisplayText.text(retailOperations.OperationName);

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Menu</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Presents the Menu lookup form to the user.
        /// </summary>
        public void lookup()
        {
            RetailButtonDesignerHelper::lookupActionPropety(this, RetailButtonSetupLayoutType::Menu);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PaymentType</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Presents the paymentType lookup form to the user.
        /// </summary>
        public void lookup()
        {
            RetailButtonDesignerHelper::lookupActionPropety(this, RetailButtonSetupLayoutType::Payment);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DeliveryMode</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Presents the Delivery mode lookup form to the user.
        /// </summary>
        public void lookup()
        {
            RetailButtonDesignerHelper::lookupActionPropety(this, RetailButtonSetupLayoutType::DeliveryMode);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SearchType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Handling the controls visibility on the basis of selected <c>SearchType</c>.
        /// </summary>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            retailSearchType = SearchType.selection();

            if (retailSearchType == RetailSearchType::Category)
            {
                SearchTerm.visible(false);
                ReferenceGroup.visible(true);
            }
            else
            {
                ReferenceGroup.visible(false);
                SearchTerm.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReferenceGroup</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>lookupReference</Name>
						<Source><![CDATA[
        /// <summary>
        /// Presents the products lookup form to the user.
        /// </summary>
        /// <returns></returns>
        public Common lookupReference()
        {
            Common ret;

            EcoResCategoryHierarchy retailHierarchy =  element.getRetailHierarchyIfExists();

            return EcoResCategory::lookupCategoryHierarchy(
                    ReferenceGroup,
                    retailHierarchy,
                    false,
                    true,
                    true,
                    null,
                    0,
                    0,
                    ProcCategoryOrganizationOption::BuyingLegalEntity,
                    0,
                    [EcoResCategoryNamedHierarchyRole::Retail,
                     EcoResCategoryNamedHierarchyRole::RetailSpecialGroup,
                     EcoResCategoryNamedHierarchyRole::RetailChannelNavigation]
                    );
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Ok</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// The <c>RetailButtonGridButton</c> table will be update/insert when user clicked on <c>OK</c> button.
        /// </summary>
        public void clicked()
        {
            element.insertOrUpdateRetailGridButton();

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>RetailButtonGridButtons</Name>
			<Table>RetailButtonGridButtons</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Action</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActionProperty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BackColor</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BackColor2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BorderColor</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>buttonGridId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Col</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>colour</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ColSpan</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DisplayText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EnableCustomFontForPOS</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EnableLiveContent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FontColor</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FontSize</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FontStyle</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GradientMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HideButtonText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>imageAlignment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NewImageAlignment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NewTextAlignment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NotificationContentAlignment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PictureId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RowNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RowSpan</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tooltip</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseCustomLookAndFeel</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@Retail:ConfigureButton</Caption>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ActionGroup</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Action</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS15752</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Menu</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS28214</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>OverrideName</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@Retail:OverrideName</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>PaymentType</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS115681</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>OperationParameter</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@Retail:OperationParameterLabel</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>OperationNumber</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS124341</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>BlankOperationParameter</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@Retail:BlankOperationParameter</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Discount</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS11829</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>URL</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS121136</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>OpenInNewWindow</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>CheckBox</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS319447</Label>
								<Style>Checkbox</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>DeliveryMode</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@Retail:DeliveryMode</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ItemNumber</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS12836</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>SearchType</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ComboBox</Type>
								<FormControlExtension
									i:nil="true" />
								<EnumType>RetailSearchType</EnumType>
								<Label>@Retail:SearchType</Label>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SearchTerm</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@Retail:SearchTerm</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>ReferenceGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<FilterExpression>%1</FilterExpression>
								<Type>ReferenceGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<ExtendedDataType>EcoResCategoryId</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Path</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS7406</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>FulfillmentType</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ComboBox</Type>
								<FormControlExtension
									i:nil="true" />
								<EnumType>RetailFulfillmentType</EnumType>
								<Label>@Retail:RetailDefaultDisplayFulfillmentType</Label>
								<Items />
							</AxFormControl>
						</Controls>
						<Caption>@SYS15752</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Appearance</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>DisplayText</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@Retail:ButtonText</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>HideButtonText</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>CheckBox</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@Retail:HideButtonText</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Tooltip</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>Tooltip</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS120256</Caption>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Top>0</Top>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Ok</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Cancel</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>