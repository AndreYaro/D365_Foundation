<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProjAdjustment</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ProjAdjustment extends FormRun
{
    QueryBuildRange         criteriaProjId;

    ProjId                  projId;
    ProjInvoiceProjId       projInvoiceId;
    ProjWipId               projWipId;
    FromDate                fromDate;
    ToDate                  toDate;

    boolean                 queryEmpl;
    boolean                 queryCost;
    boolean                 queryItem;
    boolean                 queryRevenue;
    boolean                 querySubscription;
    boolean                 autoSelectRecords;
    boolean                 autoAdjustSelection;

    ProjAdjustmentForm      projAdjustmentForm;

    boolean                 projTransTypeEmpl;
    boolean                 projTransTypeCost;
    boolean                 projTransTypeItem;
    boolean                 projTransTypeRevenue;
    boolean                 projTransTypeSubscription;
	TmpProjAdjustmentCreate projAdjustmentCreate;
    FormDataSource          m_oProjBufferDS;
    ProjEmplTrans           m_tProjEmplTrans;
    
    TmpProjAdjustmentCreate origTmpProjAdjustmentCreate;
    ProjAdjustmentSplit     adjustmentSplit;

    Map                     salesPriceCache;
    Map                     costPriceCache;
    boolean                 isAsyncProcessing;

    // <GIN>
    boolean                         indiaCountryCheck;
    TaxExciseTypeController_IN      taxExciseTypeController;
    #ISOCountryRegionCodes

    boolean isCanceled;
    private boolean isQtyChanged;

}
]]></Source>
			</Method>
			<Method>
				<Name>adjustedCostTrans</Name>
				<Source><![CDATA[
    boolean adjustedCostTrans(ProjCostTrans _projCostTrans)
    {
        ProjCostTrans projCostTrans;
        boolean       ret;

        select firstonly RecId from projCostTrans
        where projCostTrans.AdjRefTransId == _projCostTrans.TransId;

        if (projCostTrans.RecId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustedEmplTrans</Name>
				<Source><![CDATA[
    boolean adjustedEmplTrans(ProjEmplTrans _projEmplTrans)
    {
        ProjEmplTrans projEmplTrans;
        boolean       ret;

        select firstonly RecId from projEmplTrans
        where projEmplTrans.AdjRefTransId == _projEmplTrans.TransId;

        if (projEmplTrans.RecId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustedItemTrans</Name>
				<Source><![CDATA[
    boolean adjustedItemTrans(ProjItemTrans _projItemTrans)
    {
        ProjItemTrans projItemTrans;
        boolean       ret;

        select firstonly RecId from projItemTrans
        where projItemTrans.AdjRefTransId == _projItemTrans.ProjTransId;

        if (projItemTrans.RecId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustedRevenueTrans</Name>
				<Source><![CDATA[
    boolean adjustedRevenueTrans(ProjRevenueTrans _projRevenueTrans)
    {
        ProjRevenueTrans projRevenueTrans;
        boolean       ret;

        select firstonly RecId from projRevenueTrans
        where projRevenueTrans.AdjRefTransId == _projRevenueTrans.TransId;

        if (projRevenueTrans.RecId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustSelection</Name>
				<Source><![CDATA[
    public void adjustSelection()
    {
        if (tmpProjAdjustment)
        {
            element.splitLine(tmpProjAdjustment);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAdjustment</Name>
				<Source><![CDATA[
    void checkAdjustment(Args _args, FormDataSource _tmpProjAdjustmentDS)
    {
        if (_tmpProjAdjustmentDS.anyMarked())
        {
            if (tmpProjAdjustmentCreate)
            {
                if (!ProjAdjustmentUpdate::newCheckAdjustment(
                        tmpProjAdjustmentCreate,
                        tmpProjAdjustmentCreateCost,
                        tmpProjAdjustmentCreateSale,
                        tmpProjAdjustment,
                        tmpProjAdjustmentCost,
                        tmpProjAdjustmentSale,
                        _args))
                {
                    // projAdjustmentForm() object not instantiated.
                    error("@SYS82288");
                }
            }
            else
            {
                // "No adjustments have been registered."
                info("@SYS82602");
            }
        }
        else
        {
            if (tmpProjAdjustmentCreate)
            {
                _args.record(tmpProjAdjustment);
                ProjAdjustmentUpdate::newCheckAdjustment(
                        tmpProjAdjustmentCreate,
                        tmpProjAdjustmentCreateCost,
                        tmpProjAdjustmentCreateSale,
                        tmpProjAdjustment,
                        tmpProjAdjustmentCost,
                        tmpProjAdjustmentSale,
                        _args);
                tmpProjAdjustmentCreate_ds.research();
            }
            else
            {
                // "Transaction %1 - Nothing to do."
                error(strFmt("@SYS82289", tmpProjAdjustment.TransId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSMAenddate</Name>
				<Source><![CDATA[
    boolean checkSMAenddate()
    {
        SMASubscriptionTable    smaSubscriptionTable = SMASubscriptionTable::find(tmpProjAdjustment.smaSubscriptionId);
        container               periods;

        if (! smaSubscriptionTable)
        {
            return checkFailed("@SYS84347");
        }

        if (tmpProjAdjustment.smaSubscriptionPeriodType != SMASubscriptionPeriodType::PriceChange)
        {
            if (tmpProjAdjustmentCreate.smaEnddate > tmpProjAdjustment.smaEnddate)
            {
                periods = smaSubscriptionTable.findPeriods( tmpProjAdjustment.smaEnddate,
                                                            tmpProjAdjustmentCreate.smaEnddate,
                                                           (tmpProjAdjustment.smaSubscriptionPeriodType == SMASubscriptionPeriodType::ReductionDays));

                if (conLen(periods) > 1)
                {
                    return checkFailed(strFmt("@SYS84351", conPeek(conPeek(periods,1),2)));
                }

                if (conLen(periods) == 1 &&
                 tmpProjAdjustmentCreate.smaEnddate > (conPeek(conPeek(periods,1),2)))
                {
                    return checkFailed(strFmt("@SYS84353", (conPeek(conPeek(periods,1),2))));
                }
            }
        }
        if (tmpProjAdjustmentCreate.smaEnddate > smaSubscriptionTable.invoiceperiodEnd(tmpProjAdjustment.smaEnddate))
        {
            return checkFailed(strFmt("@SYS84352", date2StrUsr(smaSubscriptionTable.invoiceperiodEnd(tmpProjAdjustment.smaEnddate), DateFlags::FormatAll)));
        }

        if (tmpProjAdjustmentCreate.smaStartDate >= tmpProjAdjustmentCreate.smaEnddate)
        {
            return checkFailed("@SYS84349");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSMAstartdate</Name>
				<Source><![CDATA[
    boolean checkSMAstartdate()
    {
        SMASubscriptionTable    smaSubscriptionTable = SMASubscriptionTable::find(tmpProjAdjustment.smaSubscriptionId);
        container               periods;

        if (! smaSubscriptionTable)
        {
            return checkFailed("@SYS84347");
        }

        if (tmpProjAdjustment.smaSubscriptionPeriodType != SMASubscriptionPeriodType::PriceChange)
        {
            if (tmpProjAdjustmentCreate.smaStartDate < tmpProjAdjustment.smaStartDate)
            {
                periods = smaSubscriptionTable.findPeriods( tmpProjAdjustmentCreate.smaStartDate,
                                                            tmpProjAdjustment.smaStartDate,
                                                           (tmpProjAdjustment.smaSubscriptionPeriodType == SMASubscriptionPeriodType::ReductionDays));

                if (conLen(periods) > 1)
                {
                    return checkFailed("@SYS96120");
                    //return checkFailed(strfmt("@SYS84348", conpeek(conpeek(periods,conlen(periods)),1)));
                }
                if (conLen(periods) == 1 &&    tmpProjAdjustmentCreate.smaStartDate < (conPeek(conPeek(periods,1),1)))
                {
                    return checkFailed("@SYS96120");
                    //return checkFailed(strfmt("@SYS84348", (conpeek(conpeek(periods,1),1))));
                }
            }
        }

        if (tmpProjAdjustmentCreate.smaStartDate < smaSubscriptionTable.invoiceperiodStart(tmpProjAdjustment.smaStartDate))
        {
            return checkFailed(strFmt("@SYS84350", date2StrUsr(smaSubscriptionTable.invoiceperiodStart(tmpProjAdjustment.smaStartDate), DateFlags::FormatAll)));
        }

        if (tmpProjAdjustmentCreate.smaStartDate >= tmpProjAdjustmentCreate.smaEnddate)
        {
            return checkFailed("@SYS84349");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTransChanged</Name>
				<Source><![CDATA[
    boolean checkTransChanged()
    {
        TmpProjAdjustmentCreate     tmpProjAdjustmentCreateLocal;
        TmpProjAdjustmentCreateCost tmpProjAdjustmentCreateCostLocal;
        TmpProjAdjustmentCreateSale tmpProjAdjustmentCreateSaleLocal;
        TmpProjAdjustmentCost       tmpProjAdjustmentCostLocal;
        TmpProjAdjustmentSale       tmpProjAdjustmentSaleLocal;

        tmpProjAdjustmentCreateLocal.linkPhysicalTableInstance(tmpProjAdjustmentCreate);
        tmpProjAdjustmentCreateCostLocal.linkPhysicalTableInstance(tmpProjAdjustmentCreateCost);
        tmpProjAdjustmentCreateSaleLocal.linkPhysicalTableInstance(tmpProjAdjustmentCreateSale);
        tmpProjAdjustmentCostLocal.linkPhysicalTableInstance(tmpProjAdjustmentCost);
        tmpProjAdjustmentSaleLocal.linkPhysicalTableInstance(tmpProjAdjustmentSale);

        while select tmpProjAdjustmentCreateLocal
            where tmpProjAdjustmentCreateLocal.TransID       == tmpProjAdjustment.TransId &&
                 !tmpProjAdjustmentCreateLocal.AdjustOrig
        {
            if ((tmpProjAdjustment.TaxGroupId       != tmpProjAdjustmentCreateLocal.TaxgroupId)      ||
                (tmpProjAdjustment.CurrencyId       != tmpProjAdjustmentCreateLocal.CurrencyId)      ||
                (!DimensionDefaultFacade::areEqual(tmpProjAdjustment.DefaultDimension, tmpProjAdjustmentCreateLocal.DefaultDimension)) ||
                (tmpProjAdjustment.LinePropertyId   != tmpProjAdjustmentCreateLocal.LinePropertyId)  ||
                (tmpProjAdjustment.Qty              != tmpProjAdjustmentCreateLocal.Qty)             ||
                (tmpProjAdjustment.CategoryId       != tmpProjAdjustmentCreateLocal.CategoryId)      ||
                (tmpProjAdjustment.ResourceCategory != tmpProjAdjustmentCreateLocal.ResourceCategory)      ||
                (tmpProjAdjustment.ProjId           != tmpProjAdjustmentCreateLocal.ProjId)          ||
                (tmpProjAdjustment.TaxItemGroupId   != tmpProjAdjustmentCreateLocal.TaxItemGroupId)  ||
                (tmpProjAdjustment.ActivityNumber   != tmpProjAdjustmentCreateLocal.ActivityNumber)  ||
                (tmpProjAdjustment.Txt              != tmpProjAdjustmentCreateLocal.Txt)             ||
                (tmpProjAdjustment.smaBasePrice     != tmpProjAdjustmentCreateLocal.smaBasePrice)    ||
                (tmpProjAdjustment.smaIndex         != tmpProjAdjustmentCreateLocal.smaIndex)        ||
                (tmpProjAdjustment.smaStartDate     != tmpProjAdjustmentCreateLocal.smaStartDate)    ||
                (tmpProjAdjustment.smaEnddate       != tmpProjAdjustmentCreateLocal.smaEnddate)
               )
            {
                return true;
            }

            select firstonly tmpProjAdjustmentCreateCostLocal
                where tmpProjAdjustmentCreateCostLocal.RefRecId == tmpProjAdjustmentCreateLocal.RecId;

            select firstonly tmpProjAdjustmentCostLocal
                where tmpProjAdjustmentCostLocal.TransId == tmpProjAdjustment.TransId;

            if ((tmpProjAdjustmentCreateCostLocal && !tmpProjAdjustmentCostLocal) ||
                (!tmpProjAdjustmentCreateCostLocal && tmpProjAdjustmentCostLocal))
            {
                return true;
            }

            select firstonly tmpProjAdjustmentCreateCost
                where tmpProjAdjustmentCreateCost.RefRecId == tmpProjAdjustmentCreateLocal.RecId &&
                    !tmpProjAdjustmentCreateCost.CostRefRecId;
            if (tmpProjAdjustmentCreateCost)
            {
                return true;
            }
            else
            {
                while select tmpProjAdjustmentCreateCost
                    where tmpProjAdjustmentCreateCost.RefRecId == tmpProjAdjustmentCreateLocal.RecId
                        join tmpProjAdjustmentCostLocal
                            where tmpProjAdjustmentCostLocal.TransId == tmpProjAdjustment.TransId &&
                                  tmpProjAdjustmentCostLocal.CostRefRecId == tmpProjAdjustmentCreateCost.CostRefRecId
                {
                    if (tmpProjAdjustmentCostLocal.CostPrice != tmpProjAdjustmentCreateCost.CostPrice)
                    {
                        return true;
                    }
                }
            }

            select firstonly tmpProjAdjustmentCreateSaleLocal
                where tmpProjAdjustmentCreateSaleLocal.RefRecId == tmpProjAdjustmentCreateLocal.RecId;

            select firstonly tmpProjAdjustmentSaleLocal
                where tmpProjAdjustmentSaleLocal.TransId == tmpProjAdjustment.TransId;

            if ((tmpProjAdjustmentCreateSaleLocal && !tmpProjAdjustmentSaleLocal) ||
                (!tmpProjAdjustmentCreateSaleLocal && tmpProjAdjustmentSaleLocal))
            {
                return true;
            }

            select firstonly tmpProjAdjustmentCreateSale
                where tmpProjAdjustmentCreateSale.RefRecId == tmpProjAdjustmentCreateLocal.RecId &&
                    !tmpProjAdjustmentCreateSale.SaleRefRecId;
            if (tmpProjAdjustmentCreateSale)
            {
                return true;
            }
            else
            {
                while select tmpProjAdjustmentCreateSale
                    where tmpProjAdjustmentCreateSale.RefRecId == tmpProjAdjustmentCreateLocal.RecId
                        join tmpProjAdjustmentSaleLocal
                            where tmpProjAdjustmentSaleLocal.TransId == tmpProjAdjustment.TransId &&
                                  tmpProjAdjustmentSaleLocal.SaleRefRecId == tmpProjAdjustmentCreateSale.SaleRefRecId
                {
                    if (tmpProjAdjustmentSaleLocal.SalesPrice != tmpProjAdjustmentCreateSale.SalesPrice)
                    {
                        return true;
                    }
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
		if (ProjFlightStateHelper::isProjUseFundingLimitTrackingForAdjustmentsFlightEnabled())
        {
            element.deleteFundingLimitTracking();
        }
		else
        {
            ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(formStr(ProjAdjustment));

            if (!tmpProjAdjustment)
            {
                logger.logInformation(ProjOpsFinancialsInstrumentationActivites::ActionClosingAdjustmentForm);
            }

			while select tmpProjAdjustment
			{
				using (var activityContext = logger.projOpsFinActivity().deleteCreateAdjustmentUpdateFundingLimitContext())
				{
					activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::ActionProperty, ProjOpsFinancialsInstrumentationActivites::ActionClosingAdjustmentForm);

					TmpProjAdjustmentCreate::deleteCreateAdjustment(
											tmpProjAdjustment,
											tmpProjAdjustmentCost,
											tmpProjAdjustmentSale,
											tmpProjAdjustmentCreate,
											tmpProjAdjustmentCreateCost,
											tmpProjAdjustmentCreateSale);

					logger.logInformation(strFmt("@Proj:adjTransTelemetry",
						tmpProjAdjustment.ProjId, tmpProjAdjustmentSale.LineAmount, tmpProjAdjustmentSale.TransId,
						tmpProjAdjustmentSale.FundingSource, tmpProjAdjustment.CategoryId, ProjOpsFinancialsInstrumentationActivites::ActionClosingAdjustmentForm));
				}
			}
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTotalCostAmount</Name>
				<Source><![CDATA[
    AmountCur createTotalCostAmount(RefRecId _recId)
    {
        return TmpProjAdjustmentCreate::totalCostAmount(_recId, tmpProjAdjustmentCreate, tmpProjAdjustmentCreateCost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTotalSaleAmount</Name>
				<Source><![CDATA[
    AmountCur createTotalSaleAmount(RefRecId _recId)
    {
        return TmpProjAdjustmentCreate::totalSaleAmount(_recId, tmpProjAdjustmentCreate, tmpProjAdjustmentCreateSale);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrxAmounts</Name>
				<Source><![CDATA[
    void createTrxAmounts(AmountCur _totalCostAmount, AmountCur _totalSaleAmount)
    {
        TmpProjAdjustmentCreateCost tmpProjAdjustmentCreateCost_local;
        TmpProjAdjustmentCreateSale tmpProjAdjustmentCreateSale_local;
        TmpProjAdjustmentCost       tmpProjAdjustmentCost_local;
        TmpProjAdjustmentSale		tmpProjAdjustmentSale_local;
        List                        costList;
        List                        salesList;
        ListEnumerator              listEnumerator;

        tmpProjAdjustmentCost_local.linkPhysicalTableInstance(TmpProjAdjustmentCost);
        tmpProjAdjustmentSale_local.linkPhysicalTableInstance(TmpProjAdjustmentSale);

        costList = new List(Types::Record);
        while select tmpProjAdjustmentCreateCost
            where tmpProjAdjustmentCreateCost.RefRecId == tmpProjAdjustmentCreate.RecId
        {
            tmpProjAdjustmentCreateCost_local.clear();
            tmpProjAdjustmentCreateCost_local.data(tmpProjAdjustmentCreateCost);
            costList.addEnd(tmpProjAdjustmentCreateCost_local);
        }

        salesList = new List(Types::Record);
        while select tmpProjAdjustmentCreateSale
            where tmpProjAdjustmentCreateSale.RefRecId == tmpProjAdjustmentCreate.RecId
        {
            tmpProjAdjustmentCreateSale_local.clear();
            tmpProjAdjustmentCreateSale_local.data(tmpProjAdjustmentCreateSale);
            salesList.addEnd(tmpProjAdjustmentCreateSale_local);
        }

        try
        {
            ttsbegin;

            TmpProjAdjustmentCreate::deleteCreateAdjustmentAmount(origTmpProjAdjustmentCreate, tmpProjAdjustmentCreateCost, tmpProjAdjustmentCreateSale);

            // This is used to select correct cost and sale components of <c>tmpProjAdjustment</c> record
            // for the corresponding <c>tmpProjAdjustmentCreate</c> record.
            select tmpProjAdjustmentCost_local 
				where TmpProjAdjustmentCost_local.TransId == TmpProjAdjustmentCreate.TransId;

			select tmpProjAdjustmentSale_local
                where tmpProjAdjustmentSale_local.TransId == TmpProjAdjustmentCreate.TransId;

            TmpProjAdjustmentCreate::createTrxAmounts(
                tmpProjAdjustment,
                tmpProjAdjustmentCost_local,
                tmpProjAdjustmentSale_local,
                tmpProjAdjustmentCreate,
                tmpProjAdjustmentCreateCost,
                tmpProjAdjustmentCreateSale,
                _totalCostAmount,
                _totalSaleAmount);

            tmpProjAdjustmentCreate_ds.write();

            ttscommit;
        }
        catch (Exception::Error)
        {
            tmpProjAdjustmentCreate.data(origTmpProjAdjustmentCreate);

            delete_from tmpProjAdjustmentCreateCost
                where tmpProjAdjustmentCreateCost.RefRecId == tmpProjAdjustmentCreate.RecId;

            listEnumerator = costList.getEnumerator();
            while (listEnumerator.moveNext())
            {
                tmpProjAdjustmentCreateCost_local.clear();
                tmpProjAdjustmentCreateCost_local = listEnumerator.current();

                tmpProjAdjustmentCreateCost.clear();
                tmpProjAdjustmentCreateCost.data(tmpProjAdjustmentCreateCost_local);
                tmpProjAdjustmentCreateCost.insert();
            }

            delete_from tmpProjAdjustmentCreateSale
                where tmpProjAdjustmentCreateSale.RefRecId == tmpProjAdjustmentCreate.RecId;
            if (ProjFlightStateHelper::isProjUseFundingLimitTrackingForAdjustmentsFlightEnabled())
            {
                // Remove the tracking records
                ProjFundingLimitTracking projFundingLimitTracking;
                delete_from projFundingLimitTracking
                        exists join tmpProjAdjustmentCreate
                            where projFundingLimitTracking.TransId == tmpProjAdjustmentCreate.TmpTransId;
            }

            listEnumerator = salesList.getEnumerator();
            while (listEnumerator.moveNext())
            {
                tmpProjAdjustmentCreateSale_local.clear();
                tmpProjAdjustmentCreateSale_local = listEnumerator.current();

                tmpProjAdjustmentCreateSale.clear();
                tmpProjAdjustmentCreateSale.data(tmpProjAdjustmentCreateSale_local);
                tmpProjAdjustmentCreateSale.insert();
            }

            origTmpProjAdjustmentCreate.data(tmpProjAdjustmentCreate);
        }

        if (isQtyChanged && ProjAdjustmentSplitBalanceTotalsFlight::instance().isEnabled())
        {
            ProjAdjustmentSplit::balanceTotals(
                        tmpProjAdjustmentCreate,
                        tmpProjAdjustmentCreateCost,
                        tmpProjAdjustmentCreateSale,
                        tmpProjAdjustment,
                        tmpProjAdjustmentCreate.UpdateHourCost,
                        tmpProjAdjustmentCreate.SalesPriceMarkup);

            tmpProjAdjustmentCreate_ds.reread();
        }

        tmpProjAdjustmentCreate_DS.refresh();

        tmpProjAdjustmentCreateCost_ds.executeQuery();
        tmpProjAdjustmentCreateSale_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteUpdatedTmp</Name>
				<Source><![CDATA[
    void deleteUpdatedTmp()
    {
        ProjEmplTrans           projEmplTrans;
        ProjCostTrans           projCostTrans;
        ProjRevenueTrans        projRevenueTrans;
        ProjItemTrans           projItemTrans;
        TmpProjAdjustment       tmpProjAdjustmentLocal;

        void delTmp()
        {
            delete_from tmpProjAdjustmentCreateCost
                exists join tmpProjAdjustmentCreate
                where tmpProjAdjustmentCreate.RecId == tmpProjAdjustmentCreateCost.RefRecId &&
                    tmpProjAdjustmentCreate.TransID == tmpProjAdjustment.TransId;

            delete_from tmpProjAdjustmentCreateSale
                exists join tmpProjAdjustmentCreate
                where tmpProjAdjustmentCreate.RecId == tmpProjAdjustmentCreateSale.RefRecId &&
                    tmpProjAdjustmentCreate.TransID == tmpProjAdjustment.TransId;

            if (ProjFlightStateHelper::isProjUseFundingLimitTrackingForAdjustmentsFlightEnabled())
            {
                while select tmpProjAdjustmentCreate where tmpProjAdjustmentCreate.TransID == tmpProjAdjustment.TransId
                {
                    ProjFundingLimitTrackingManager::deleteFundingLimitTrackingByTransId(tmpProjAdjustmentCreate.TmpTransId);
                }
            }
            delete_from tmpProjAdjustmentCreate
                where tmpProjAdjustmentCreate.TransID == tmpProjAdjustment.TransId;

            delete_from tmpProjAdjustmentCost
                where tmpProjAdjustmentCost.TransId == tmpProjAdjustment.TransId;

            delete_from tmpProjAdjustmentSale
                where tmpProjAdjustmentSale.TransId == tmpProjAdjustment.TransId;

            tmpProjAdjustment.delete();
        }

        ttsbegin;
        tmpProjAdjustment.selectForUpdate(true);
        // Handle multiselect in form
        for (tmpProjAdjustmentLocal = getFirstSelection(tmpProjAdjustment_DS);
             tmpProjAdjustmentLocal;
             tmpProjAdjustmentLocal = tmpProjAdjustment_DS.getNext())
        {
            switch (tmpProjAdjustment.AdjustmentType)
            {
                case ProjAdjustmentType::Hour :
                    select firstonly projEmplTrans where  projEmplTrans.TransId ==tmpProjAdjustment.TransId;
                    if (projEmplTrans)
                    {
                        delTmp();
                    }
                    break;

                case ProjAdjustmentType::Cost:
                    select firstonly projCostTrans where projCostTrans.TransId == tmpProjAdjustment.TransId;
                    if (projCostTrans)
                    {
                        delTmp();
                    }
                    break;

                case ProjAdjustmentType::Revenue:
                    select firstonly projRevenueTrans where projRevenueTrans.TransId == tmpProjAdjustment.TransId;
                    if (projRevenueTrans)
                    {
                        delTmp();
                    }
                    break;

                case ProjAdjustmentType::Item:
                    select firstonly projItemTrans where projItemTrans.ProjTransId == tmpProjAdjustment.TransId;
                    if (projItemTrans)
                    {
                        delTmp();
                    }
                    break;
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
        
        TmpProjMarkedAndPending markedAndPendingBuffer;
        TmpProjPendingAdjustment pendingAdjBuffer;
        TmpProjAdjustment tmpProjAdjustmentBuffer;
        TmpProjAdjustmentCost tmpProjAdjustmentCostBuffer;
        TmpProjAdjustmentSale tmpprojadjustmentSaleBuffer;

        
        // This is necessary so that the table variable <c>tmpProjMarkedAndPending</c> can be used throughout the form.
        markedAndPendingBuffer.doInsert();
        delete_from markedAndPendingBuffer;
        TmpProjMarkedAndPending.linkPhysicalTableInstance(markedAndPendingBuffer);

        pendingAdjBuffer.doInsert();
        delete_from pendingAdjBuffer;
        TmpProjPendingAdjustment.linkPhysicalTableInstance(pendingAdjBuffer);
        
        tmpProjAdjustmentBuffer.doInsert();
        delete_from tmpProjAdjustmentBuffer;
        TmpProjAdjustment.linkPhysicalTableInstance(tmpProjAdjustmentBuffer);

        tmpProjAdjustmentCostBuffer.doInsert();
        delete_from tmpProjAdjustmentCostBuffer;
        TmpProjAdjustmentCost.linkPhysicalTableInstance(tmpProjAdjustmentCostBuffer);

        tmpprojadjustmentSaleBuffer.doInsert();
        delete_from tmpprojadjustmentSaleBuffer;
        TmpProjAdjustmentSale.linkPhysicalTableInstance(tmpprojadjustmentSaleBuffer);

        salesPriceCache    = new Map(Types::String, Types::Real);
        costPriceCache     = new Map(Types::String, Types::Real);

        projAdjustmentForm = ProjAdjustmentForm::newFormRun();
        projAdjustmentForm.tmpProjAdjustmentDSInitPost(tmpProjAdjustment);

        Common localRecord = element.args().record();
        if (localRecord)
        {
            m_oProjBufferDS    = FormDataUtil::getFormDataSource(localRecord);
        }
        element.PSAinitSelectedTransactions();

        this.initFromDataset(localRecord.TableId);

        tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, Transdate)).allowEdit(false);

        // <GIN>
        element.setVisible_IN();
        element.setVisibleNew_IN();
        // </GIN>

        // <GTE>
        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            TransTaxInformation_IN.visible(true);
            NewAdjustmentTransTaxInformation.visible(true);
            SelectedAdjustmentTransTaxInformation.visible(true);
        }
        // </GTE>

        if (ProjAdjustmentFormInsertAtEndFlight::instance().isEnabled())
        {
            // Setting the insertAtEnd property to false on the data sources so that when a user
            // hits the down arrow on the keyboard during data entry that it does not create 
            // a new row in the data source. Doing this in code instead of the metadata on the
            // data source itself so that this change can be flighted. When the flight is removed
            // the metadata can be updated on the data sources properties to reflect the desired behavior.
            TmpProjPendingAdjustment_ds.insertAtEnd(false);
            TmpProjMarkedAndPending_ds.insertAtEnd(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromDataset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize variables based on dataset.
    /// </summary>
    /// <param name = "_tableId">The dataset passed by the caller.</param>
    public void initFromDataset(TableId _tableId)
    {
        switch (_tableId)
        {
            case tableNum(ProjEmplTrans):
                queryEmpl           = true;
                autoSelectRecords   = true;
                autoAdjustSelection = true;
                break;

            case tableNum(ProjCostTrans):
                queryCost           = true;
                autoSelectRecords   = true;
                autoAdjustSelection = true;
                break;

            case tableNum(ProjItemTrans):
                queryItem            = true;
                autoSelectRecords    = true;
                autoAdjustSelection  = true;
                break;

            case tableNum(ProjRevenueTrans):
                ProjRevenueTrans projRevenueTrans   = element.args().record();
                queryRevenue                        = true;
                querySubscription                   = (projRevenueTrans.TransactionOrigin == ProjOrigin::Subscription);
                autoSelectRecords                   = true;
                autoAdjustSelection                 = true;
                break;

            case tableNum(ProjProposalCostDetail):
                queryCost           = true;
                autoSelectRecords   = true;
                autoAdjustSelection = true;
                break;

            case tableNum(ProjProposalEmplDetail):
                queryEmpl           = true;
                autoSelectRecords   = true;
                autoAdjustSelection = true;
                break;

            case tableNum(ProjProposalItemDetail):
                queryItem           = true;
                autoSelectRecords   = true;
                autoAdjustSelection = true;
                break;

            case tableNum(ProjProposalRevenueDetail):
                queryRevenue        = true;
                querySubscription   = false;
                autoSelectRecords   = true;
                autoAdjustSelection = true;
                break;

            case tableNum(ProjPostTransView):
                FormRun formRunObject;
                Common localRecord;
                boolean isMultiSelectEnabled = FeatureStateProvider::isFeatureEnabled(ProjPostedTransMultiSelectFeature::instance());

                if (isMultiSelectEnabled && element.args().callerType() == UtilElementType::Form)
                {
                    // The formRunOpject is used by other methods when the feature is enabled. If the caller() is not set
                    // we want to use the orignal code paths.
                    formRunObject = element.args().caller();;
                    localRecord = element.args().record();
                }

                if (isMultiSelectEnabled
                    && formRunObject 
                    && tableNum(ProjPostTransView)
                    && localRecord.TableId == tableNum(ProjPostTransView))
                {
                    // Initialize MultiSelectionHelper
                    MultiSelectionHelper multiSelectionHelper = MultiSelectionHelper::construct();
                    multiSelectionHelper.parmDatasource(FormDataUtil::getFormDataSource(localRecord));

                    int64 recordCount = 0;
                    ProjPostTransView projPostTransView = multiSelectionHelper.getFirst();
                    while (projPostTransView)
                    {
                        switch (projPostTransView.ProjTransType)
                        {
                            case ProjTransType::Item:
                                queryItem = true;
                                break;

                            case ProjTransType::Hour:
                                queryEmpl = true;
                                break;

                            case ProjTransType::Cost:
                                queryCost = true;
                                break;

                            case ProjTransType::Revenue:
                                queryRevenue = true;
                                querySubscription = (projPostTransView.TransactionOrigin == ProjOrigin::Subscription);
                                break;
                        }
                        recordCount +=1;
                        projPostTransView = multiSelectionHelper.getNext();
                    }
                    autoSelectRecords       = true;
                    if (recordCount > 1)
                    {
                        autoAdjustSelection = false;
                    }
                    else
                    {
                        autoAdjustSelection = true;
                    }
                }
                else
                {
                    ProjPostTransView projPostTransView = element.args().record();
                    switch (projPostTransView.ProjTransType)
                    {
                        case ProjTransType::Item:
                            queryItem = true;
                            break;

                        case ProjTransType::Hour:
                            queryEmpl = true;
                            break;

                        case ProjTransType::Cost:
                            queryCost = true;
                            break;

                        case ProjTransType::Revenue:
                            queryRevenue = true;
                            querySubscription = (projPostTransView.TransactionOrigin == ProjOrigin::Subscription);
                            break;
                    }
                    autoSelectRecords       = true;
                    autoAdjustSelection     = true;
                    break;
                }
            }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAdjustment</Name>
				<Source><![CDATA[
    void postAdjustment(Args _args, FormDataSource _tmpProjAdjustmentDS)
    {
        #OCCRetryCount
        ProjEmplTransSale       projEmplTransSale;
        ProjRevenueTransSale    projRevenueTransSale;
        ProjCostTransSale       projCostTransSale;
        ProjItemTransSale       projItemTransSale;
        boolean                 isAlreadyAdjusted = false;
        boolean                 recordHasChanged = false;

        ProjEmplTrans           projEmplTrans;
        ProjRevenueTrans        projRevenueTrans;
        ProjCostTrans           projCostTrans;
        ProjItemTrans           projItemTrans;

        switch (TmpProjAdjustment.AdjustmentType)
        {
            case ProjAdjustmentType::Cost:
                select firstonly RecVersion from projCostTrans
                    join TransStatus from projCostTransSale
                    where projCostTrans.TransId == TmpProjAdjustment.TransId
                       && projCostTransSale.TransId == projCostTrans.TransId;

                if (projCostTransSale.TransStatus == ProjTransStatus::Adjusted)
                {
                    isAlreadyAdjusted = true;
                }
                else if (projCostTrans.RecVersion != TmpProjAdjustment.RefRecVersion)
                {
                    recordHasChanged = true;
                }
                break;

            case ProjAdjustmentType::Hour:
                select firstonly RecVersion from projEmplTrans
                    join TransStatus from projEmplTransSale
                    where projEmplTrans.TransId == TmpProjAdjustment.TransId
                       && projEmplTransSale.TransId == projEmplTrans.TransId;

                if (projEmplTransSale.TransStatus == ProjTransStatus::Adjusted)
                {
                    isAlreadyAdjusted = true;
                }
                else if (projEmplTrans.RecVersion != TmpProjAdjustment.RefRecVersion)
                {
                    recordHasChanged = true;
                }
                break;

            case ProjAdjustmentType::Item:
                select firstonly RecVersion, InventTransId from projItemTrans
                    join TransStatus from projItemTransSale
                    where projItemTrans.ProjTransId == TmpProjAdjustment.TransId
                       && projItemTransSale.ProjTransId == projItemTrans.ProjTransId;

                if (projItemTransSale.TransStatus == ProjTransStatus::Adjusted)
                {
                    isAlreadyAdjusted = true;
                }
                else if (projItemTrans.RecVersion != TmpProjAdjustment.RefRecVersion)
                {
                    recordHasChanged = true;
                }
                break;

            case ProjAdjustmentType::Revenue :
                select firstonly RecVersion from projRevenueTrans
                    join TransStatus from projRevenueTransSale
                    where projRevenueTrans.TransId == TmpProjAdjustment.TransId
                       && projRevenueTransSale.TransId == projRevenueTrans.TransId;

                if (projRevenueTransSale.TransStatus == ProjTransStatus::Adjusted)
                {
                    isAlreadyAdjusted = true;
                }
                else if (projRevenueTrans.RecVersion != TmpProjAdjustment.RefRecVersion)
                {
					recordHasChanged = true;
                }
                break;
        }

        isAsyncProcessing = false;

		// Record has been adjusted by another process and cannot be updates - remove tracking as it can't be processed.
        if (ProjFlightStateHelper::isProjUseFundingLimitTrackingForAdjustmentsFlightEnabled() &&
            (isAlreadyAdjusted || recordHasChanged))
        {
            ProjFundingLimitTrackingManager::deleteFundingLimitTrackingByTransId(tmpProjAdjustmentCreate.TmpTransId);
        }

        if (isAlreadyAdjusted)
        {
            // "Transaction %1 is already Adjusted. It cannot be adjusted again."
            error(strFmt("@Proj:TransactionAlreadyAdjusted", tmpProjAdjustmentCreate.TransId));
        }
        else if (recordHasChanged)
        {
            // "Transaction %1 cannot be adjusted because it has changed since being selected. To adjust it, click Select and try again."
            error(strFmt("@Proj:TransactionAlreadyChanged", tmpProjAdjustmentCreate.TransId, "@SYS2245"));
        }
        else
        {
			// Check to see if there are any adjusted transactions.
			if(TmpProjAdjustmentCreate)
            {
                str recordsSelected = int2Str(_tmpProjAdjustmentDS.recordsMarked().lastIndex());

				// If there are more than 1 marked records.
				if (!MultiSelectionHelper::currentRecordOnlySelected(_tmpProjAdjustmentDS))
				{
					try
					{
						str processId = guid2Str(newGuid());
                        
						_args.parm(processId);
                                               
                        ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ProjAdjustmentUpdate));
                        using (var activityContext = logger.projOpsFinActivity().activityContext(ProjOpsFinancialsInstrumentationActivites::ProjAdjustment))
                        {
                            activityContext.addCustomProperty(ProjOpsFinancialsInstrumentationActivites::AdjustmentRecordsBeingPostedAsynchronously, recordsSelected);

						    // multiple transactions were selected, run asynchronously
						    ProjAdjustmentUpdate::newPostAdjustmentAsync(tmpProjAdjustmentCreate,
																	    tmpProjAdjustmentCreateCost,
																	    tmpProjAdjustmentCreateSale,
																	    tmpProjAdjustment,
																	    tmpProjAdjustmentCost,
																	    tmpProjAdjustmentSale,
																	    _args);

						    SysGlobalCache cache = ClassFactory.globalCache();
						    isCanceled = cache.get(classStr(ProjAdjustmentUpdate_PostServiceController), processId, false);
						    cache.clear(classStr(ProjAdjustmentUpdate_PostServiceController));
                        }

					}
					catch (Exception::Deadlock)
					{
						retry;
					}
					catch (Exception::UpdateConflict)
					{
						if (appl.ttsLevel() == 0)
						{
							if (xSession::currentRetryCount() >= #RetryNum)
							{
								throw Exception::UpdateConflictNotRecovered;
							}
							else
							{
								retry;
							}
						}
						else
						{
							throw Exception::UpdateConflict;
						}
					}
					catch (Exception::Error)
					{
						element.research();
					}
                }
				else
				{
                    
                    ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ProjAdjustmentUpdate));
                    using (var activityContext = logger.projOpsFinActivity().activityContext(ProjOpsFinancialsInstrumentationActivites::ProjAdjustment))
                    {
                        activityContext.addCustomProperty(ProjOpsFinancialsInstrumentationActivites::AdjustmentRecordsBeingPostedSynchronously, recordsSelected);

					    // Only one records is being adjusted, do a synchrounous call
					    _args.record(tmpProjAdjustment);
					    ProjAdjustmentUpdate::newPostAdjustment(
						    tmpProjAdjustmentCreate,
						    tmpProjAdjustmentCreateCost,
						    tmpProjAdjustmentCreateSale,
						    tmpProjAdjustment,
						    tmpProjAdjustmentCost,
						    tmpProjAdjustmentSale,
						    _args);

					    tmpProjAdjustmentCreate_ds.research();
                    }
				}
			 }
            else
            {
                // "No adjustments have been registered."
                info("@SYS82602");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projAdjustmentForm</Name>
				<Source><![CDATA[
    ProjAdjustmentForm projAdjustmentForm()
    {
        return projAdjustmentForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    public ProjId projId(ProjId   _projId  = projId)
    {
        projId   = _projId;

        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceId</Name>
				<Source><![CDATA[
    public ProjInvoiceProjId projInvoiceId(ProjInvoiceProjId   _projInvoiceId  = projInvoiceId)
    {
        projInvoiceId   = _projInvoiceId;

        return projInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projWIPId</Name>
				<Source><![CDATA[
    public ProjWipId projWIPId(ProjWipId   _projWipId  = projWipId)
    {
        projWipId   = _projWipId;

        return projWipId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PSAallowAdjust</Name>
				<Source><![CDATA[
    boolean PSAallowAdjust(ProjTrans projTrans)
    {
        ProjEmplTrans       childProjEmplTrans;
        ProjCostTrans       childProjCostTrans;
        ProjItemTrans       childProjItemTrans;
        ProjRevenueTrans    childProjRevenueTrans;
        ProjParameters      parameters;
        boolean             ret;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            parameters = ProjParameters::find();

            switch (projTrans.transStatus())
            {
                case ProjTransStatus::Posted :
                    ret = parameters.PostedStatus;
                    break;

                case ProjTransStatus::InvoiceProposal :
                    ret = parameters.InvoiceProposalStatus;
                    break;

                case ProjTransStatus::Invoiced, ProjTransStatus::MarkedCreditnote, ProjTransStatus::CreditnoteProposal :
                    ret = parameters.InvoicedStatus;
                    break;

                case ProjTransStatus::Estimated :
                    ret = parameters.EstimatedStatus;
                    break;

                case ProjTransStatus::Eliminated :
                    ret = parameters.EliminatedStatus;
                    break;

                default:
                    ret = false;
            }

            // Check if the transaction has already been adjusted
            // If yes do not allow the transaction to be adjusted again
            switch (projTrans.tableId())
            {
                case tableNum(ProjEmplTrans) :
                    select firstonly RecId from childProjEmplTrans
                    where childProjEmplTrans.AdjRefTransId == projTrans.transId();
                    if (childProjEmplTrans.RecId)
                    {
                        ret = false;
                    }
                    break;

                case tableNum(ProjCostTrans) :
                    select firstonly RecId from childProjCostTrans
                    where childProjCostTrans.AdjRefTransId == projTrans.transId();
                    if (childProjCostTrans.RecId)
                    {
                        ret = false;
                    }
                    break;

                case tableNum(ProjItemTrans) :
                    select firstonly RecId from childProjItemTrans
                    where childProjItemTrans.AdjRefTransId == projTrans.transId();
                    if (childProjItemTrans.RecId)
                    {
                        ret = false;
                    }
                    break;

                case tableNum(ProjRevenueTrans) :
                    select firstonly RecId from childProjRevenueTrans
                    where childProjRevenueTrans.AdjRefTransId == projTrans.transId();
                    if (childProjRevenueTrans.RecId)
                    {
                        ret = false;
                    }
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpProjAdjustmentForAdjustmentType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates quantity and resource for <c>TmpProjAdjustment</c>.
    /// </summary>
    /// <param name = "_projTrans">
    ///     An instance of <c>ProjTrans</c>.
    /// </param>
    /// <returns>
    ///     A <c>TmpProjAdjustment</c> table buffer.
    /// </returns>
    protected TmpProjAdjustment initTmpProjAdjustmentForAdjustmentType(ProjTrans _projTrans)
    {
        switch (tmpProjAdjustment.AdjustmentType)
        {
            case ProjAdjustmentType::Hour:
                tmpProjAdjustment.Qty           = ProjEmplTrans::find(tmpProjAdjustment.TransId).Qty;
                tmpProjAdjustment.ProjIdentResource   = _projTrans.resource();
                break;
            case ProjAdjustmentType::Cost:
                tmpProjAdjustment.Qty           = ProjCostTrans::find(tmpProjAdjustment.TransId).Qty;
                tmpProjAdjustment.ProjIdentResource   = _projTrans.resource();
                break;
            case ProjAdjustmentType::Revenue:
                tmpProjAdjustment.Qty           = ProjRevenueTrans::find(tmpProjAdjustment.TransId).Qty;
                tmpProjAdjustment.ProjIdentResource   = _projTrans.resource();

                if (_projTrans.smaSubscriptionId())
                {
                    tmpProjAdjustment.smaBasePrice              = _projTrans.smaBasePrice();
                    tmpProjAdjustment.smaEnddate                = _projTrans.smaEnddate();
                    tmpProjAdjustment.smaIndex                  = _projTrans.smaIndex();
                    tmpProjAdjustment.smaStartDate              = _projTrans.smaStartDate();
                    tmpProjAdjustment.smaSubscriptionId         = _projTrans.smaSubscriptionId();
                    tmpProjAdjustment.smaSubscriptionPeriodType = _projTrans.smaSubscriptionPeriodType();
                }

                break;
            case ProjAdjustmentType::Item:
                tmpProjAdjustment.Qty           = ProjItemTrans::find(tmpProjAdjustment.TransId).Qty;
                tmpProjAdjustment.ProjIdentId   = _projTrans.itemId();
                break;
            default:
                tmpProjAdjustment.ProjIdentId   = '';
        }
        return tmpProjAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PSADoTrans</Name>
				<Source><![CDATA[
    private void PSADoTrans(ProjTrans              _projTrans,
                            ProjAdjustmentType     _projTransType,
                            CurrencyCode           _currencyIdCost = '')
    {
        ProjEmplTrans     tProjEmplTrans;

        if (_projTrans.adjustable())
        {
            tmpProjAdjustment.clear();

            tmpProjAdjustment.Txt                  = _projTrans.txt();
            tmpProjAdjustment.CategoryId           = _projTrans.categoryId();
            select tmpProjAdjustmentCost where tmpProjAdjustmentCost.TransId == tmpProjAdjustment.TransId;
            tmpProjAdjustmentCost.CostPrice        = _projTrans.costPrice();
            tmpProjAdjustmentCost.LedgerStatusCost = _projTrans.ledgerStatusCost();
            tmpProjAdjustment.CurrencyIdCost       = _currencyIdCost ? _currencyIdCost : _projTrans.currencyIdCost();
            tmpProjAdjustment.CurrencyId           = _projTrans.currencyIdSales();
            tmpProjAdjustment.DefaultDimension     = _projTrans.defaultDimension();
            tmpProjAdjustment.LinePropertyId       = _projTrans.linePropertyId();
            tmpProjAdjustment.ProjId               = _projTrans.projId();
            tmpProjAdjustment.Qty                  = _projTrans.qty();
            tmpProjAdjustment.TaxGroupId           = _projTrans.taxGroup();
            tmpProjAdjustment.TaxItemGroupId       = _projTrans.taxItemGroup();
            tmpProjAdjustment.TransDate            = _projTrans.transDate();
            tmpProjAdjustment.TransId              = _projTrans.transId();
            tmpProjAdjustment.AdjustmentType       = _projTransType;
            tmpProjAdjustment.Resource             = _projTrans.resource();
            tmpProjAdjustment.ResourceCategory     = _projTrans.resourceCategory();
            tmpProjAdjustment.ActivityNumber       = _projTrans.activityNumber();
            tmpProjAdjustment.ItemId               = _projTrans.itemId();
            tmpProjAdjustment.InventTransId        = _projTrans.inventTransId();
            tmpProjAdjustment.InventDimid          = _projTrans.inventDimId();
            tmpProjAdjustment.ProjAdjustRefid      = _projTrans.projAdjustRefId();
            tmpProjAdjustment.PackingSlipId        = _projTrans.packingSlipId();

            tmpProjAdjustment.VoucherJournal       = _projTrans.voucherOriginal();
            select tmpProjAdjustmentSale where tmpProjAdjustmentSale.TransId == tmpProjAdjustment.TransId;
            tmpProjAdjustmentSale.SalesPrice       = _projTrans.salesPrice();
            tmpProjAdjustmentSale.LedgerSalesAmountMST  = _projTrans.ledgerSalesAmountMST();
            tmpProjAdjustmentSale.LedgerSalesPosted     = _projTrans.ledgerSalesPosted();
            tmpProjAdjustment.LedgerDimension           = _projTrans.itemLedgerAccountLedgerDimension();
            tmpProjAdjustment.ItemType                  = _projTrans.itemType();

            tmpProjAdjustment = this.initTmpProjAdjustmentForAdjustmentType(_projTrans);

            tmpProjAdjustment.SalesUnit             = _projTrans.salesUnit();

            tmpProjAdjustment.TransDateAdjustment = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

            tmpProjAdjustment.ItemAdjustVersion   = _projTrans.itemAdjustVersion();
            if (tmpProjAdjustment.AdjustmentType == ProjAdjustmentType::Hour)
            {
                tProjEmplTrans = ProjEmplTrans::find(_projTrans.transId());
                tmpProjAdjustment.psaIndirectComponentGroup = tProjEmplTrans.psaIndirectComponentGroup;
            }
            tmpProjAdjustment.OriginCost = _projTrans.originCost();

            tmpProjAdjustment.insert();
            tmpProjAdjustmentCost.update();
            tmpProjAdjustmentSale.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PSAInitSelectedTransactions</Name>
				<Source><![CDATA[
    void PSAInitSelectedTransactions()
    {
        Common              locProjBuffer;
        ProjEmplTrans       projEmplTrans;
        ProjCostTrans       projCostTrans;
        ProjItemTrans       projItemTrans;
        ProjRevenueTrans    projRevenueTrans;
        ProjTrans           projTrans;

        if (m_oProjBufferDS)
        {
            for (locProjBuffer = m_oProjBufferDS.getFirst(true) ? m_oProjBufferDS.getFirst(true) : m_oProjBufferDS.cursor(); locProjBuffer; locProjBuffer = m_oProjBufferDS.getNext())
            {
                switch (locProjBuffer.TableId)
                {
                    case tableNum(ProjEmplTrans)    :   projEmplTrans.data(locProjBuffer);
                                                        projTrans   = ProjTrans::newProjEmplTrans(projEmplTrans);
                                                        if (this.PSAallowAdjust(projTrans))
                                                        {
                                                            this.PSAdoTrans(projTrans,ProjAdjustmentType::Hour);
                                                        }
                                                        break;

                    case tableNum(ProjCostTrans)    :   projCostTrans.data(locProjBuffer);
                                                        projTrans   = ProjTrans::newProjCostTrans(projCostTrans);
                                                        if (this.PSAallowAdjust(projTrans))
                                                        {
                                                            this.PSAdoTrans(projTrans,ProjAdjustmentType::Cost,projCostTrans.CurrencyIdCost);
                                                        }
                                                        break;

                    case tableNum(ProjRevenueTrans) :   projRevenueTrans.data(locProjBuffer);
                                                        projTrans   = ProjTrans::newProjRevenueTrans(projRevenueTrans);
                                                        if (this.PSAallowAdjust(projTrans))
                                                        {
                                                            this.PSAdoTrans(projTrans,ProjAdjustmentType::Revenue);
                                                        }
                                                        break;

                    case tableNum(ProjItemTrans)    :   projItemTrans.data(locProjBuffer);
                                                        projTrans   = ProjTrans::newProjItemTrans(projItemTrans);
                                                        if (this.PSAallowAdjust(projTrans))
                                                        {
                                                            this.PSAdoTrans(projTrans,ProjAdjustmentType::Item,projItemTrans.CurrencyId);
                                                        }
                                                        break;

                    default:
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>research</Name>
				<Source><![CDATA[
    void research()
    {
        tmpProjAdjustment_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        if (autoSelectRecords)
        {
            element.selectAdjRecords();
            if (autoAdjustSelection)
            {
                element.adjustSelection();
            }
        }
        else
        {
            selection.setFocus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectAdjRecords</Name>
				<Source><![CDATA[
    public void selectAdjRecords()
    {
        ProjAdjustmentSelect  projAdjustmentSelect;

        if (this.hasQuery())
        {
            projAdjustmentSelect  = new ProjAdjustmentSelect();

            this.setQueryParameters(projAdjustmentSelect);
            this.setQueryParametersFromDataset(element.args().dataset(), projAdjustmentSelect);

            projAdjustmentSelect.runOperation();
            tmpProjAdjustment.linkPhysicalTableInstance(projAdjustmentSelect.tmpProjAdjustment());
            tmpProjAdjustmentCost.linkPhysicalTableInstance(projAdjustmentSelect.tmpProjAdjustmentCost());
            tmpProjAdjustmentSale.linkPhysicalTableInstance(projAdjustmentSelect.tmpProjAdjustmentSale());
            tmpProjAdjustment_ds.research();
            delete_from tmpProjAdjustmentCreate;
            delete_from tmpProjAdjustmentCreateCost;
            delete_from tmpProjAdjustmentCreateSale;
        }

        orig_ProjId.setFocus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasQuery</Name>
				<Source><![CDATA[
    public boolean hasQuery()
    {
        return (queryEmpl || queryCost || queryItem || queryRevenue || querySubscription);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryParameters</Name>
				<Source><![CDATA[
    public void setQueryParameters(ProjAdjustmentSelect _projAdjustmentSelect)
    {
        Name name;
        if (element.args().dataset())
        {
            name = tableId2name(element.args().dataset());
        }
        _projAdjustmentSelect.parmName(name);

        Args argsTrans = new Args();
        argsTrans.caller(element);
        argsTrans.record(element.args().record());
        List transIdList = ProjAdjustmentSelect::createTransIdList(argsTrans);

        _projAdjustmentSelect.parmTransIdList(transIdList.pack());
        _projAdjustmentSelect.parmQueryEmpl(queryEmpl);
        _projAdjustmentSelect.parmQueryCost(queryCost);
        _projAdjustmentSelect.parmQueryRevenue(queryRevenue);
        _projAdjustmentSelect.parmQuerySubscription(querySubscription);
        _projAdjustmentSelect.parmQueryItem(queryItem);
        _projAdjustmentSelect.parmAdjustmentDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        TransDate adjDate;
        if (element.args().caller() &&
            formHasMethod(element.args().caller(), identifierStr(getAdjustmentDate)))
        {
            adjDate = element.args().caller().getAdjustmentDate();
        }
        else
        {
            adjDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
        _projAdjustmentSelect.parmAdjustmentDate(adjDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryParametersFromDataset</Name>
				<Source><![CDATA[
    public void setQueryParametersFromDataset(TableId _tableId, ProjAdjustmentSelect  _projAdjustmentSelect)
    {
        if (_tableId == tableNum(ProjCostTrans)    ||
            _tableId == tableNum(ProjEmplTrans)    ||
            _tableId == tableNum(ProjItemTrans)    ||
            _tableId == tableNum(ProjRevenueTrans) ||
            _tableId == tableNum(ProjPostTransView))
        {
            ProjParameters projParameters = ProjParameters::find();
            if (projParameters.PostedStatus == NoYes::Yes)
            {
                _projAdjustmentSelect.parmQueryPosted(true);
            }
            if (projParameters.EliminatedStatus == NoYes::Yes)
            {
                _projAdjustmentSelect.parmQueryEliminated(true);
            }
            if (projParameters.EstimatedStatus == NoYes::Yes)
            {
                _projAdjustmentSelect.parmQueryEstimated(true);
            }
            if (projParameters.InvoiceProposalStatus == NoYes::Yes)
            {
                _projAdjustmentSelect.parmQueryInvoiceProposal(true);
            }
            if (projParameters.InvoicedStatus == NoYes::Yes)
            {
                _projAdjustmentSelect.parmQueryInvoiced(true);
            }
        }

        if (_tableId == tableNum(ProjProposalCostDetail)    ||
            _tableId == tableNum(ProjProposalEmplDetail)    ||
            _tableId == tableNum(ProjProposalItemDetail)    ||
            _tableId == tableNum(ProjProposalRevenueDetail))
        {
            _projAdjustmentSelect.parmQueryInvoiceProposal(true);
            // required to select records
            _projAdjustmentSelect.parmQueryPosted(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonAccessCreate</Name>
				<Source><![CDATA[
    void setButtonAccessCreate()
    {
        boolean isSubscription  = ProjCategory::find(tmpProjAdjustment.CategoryId).SetupSubscription;

        buttonLineProperty.visible(isSubscription ? false : true);
        buttonCurrency.visible(isSubscription ? false : true);
        buttonCostprice.visible(isSubscription ? false : true);
        buttonAll.visible(isSubscription ? false : true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonAdjustment</Name>
				<Source><![CDATA[
    void setButtonAdjustment()
    {
        TmpProjAdjustment         tmpProjAdjustmentLocal;
        tmpProjAdjustmentLocal.linkPhysicalTableInstance(tmpProjAdjustment);

        select firstonly tmpProjAdjustmentLocal;

        if (tmpProjAdjustmentLocal)
        {
            adjustment.enabled(true);
        }
        else
        {
            adjustment.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCheckPostButton</Name>
				<Source><![CDATA[
    void setCheckPostButton()
    {
        employeeUpdate.enabled(false);
        check.enabled(false);
        post.enabled(false);

        // Only enable the Update/Check/Post buttons if at least one record exists in the adjusted grid
        // for the current item to be adjusted
        if (tmpProjAdjustment && tmpProjAdjustmentCreate)
        {
            employeeUpdate.enabled(true);
            check.enabled(true);
            post.enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldAccessCreate</Name>
				<Source><![CDATA[
    void setFieldAccessCreate()
    {
        newGridProjId.allowEdit(true);
        newTabProjId.allowEdit(true);

        newGridSalesPrice.allowEdit(true);
        newSalesPriceSalesPrice.allowEdit(true);

        newGridCostPrice.allowEdit(true);
        newCostPriceCostPrice.allowEdit(true);

        newGridCurrencyId.allowEdit(true);

        tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, Qty)).allowEdit(true);

        newGridLinePropertyId.allowEdit(true);
        newTabLinePropertyId.allowEdit(true);

        newGridTaxItemGroupId.allowEdit(true);

        newGridActivityNumber.allowEdit(true);
        newTabActivityNumber.allowEdit(true);
        newItem.allowEdit(false);

        switch (tmpProjAdjustment.AdjustmentType)
        {
            case ProjAdjustmentType::Hour:
                newGridResourceCategory.allowEdit(true);
                break;

            case ProjAdjustmentType::Item:
                newGridResourceCategory.allowEdit(false);
                newGridCostPrice.allowEdit(false);
                newCostPriceCostPrice.allowEdit(false);
                newItem.allowEdit(true);
                break;

            case ProjAdjustmentType::Cost:
                newGridResourceCategory.allowEdit(false);
                newGridCostPrice.allowEdit(false);
                newCostPriceCostPrice.allowEdit(false);

                if (tmpProjAdjustment.OriginCost == ProjOrigin::ExpenseManagement)
                {
                    newGridQty.allowEdit(false);
                    newCostPriceQty.allowEdit(false);
                }

                break;

            case ProjAdjustmentType::Revenue:
                newGridResourceCategory.allowEdit(false);
                if (ProjCategory::find(tmpProjAdjustmentCreate.CategoryId).SetupSubscription)
                {
                    newGridLinePropertyId.allowEdit(false); //subscription always chargeable

                    tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, Qty)).allowEdit(false);
                    newGridSalesPrice.allowEdit(false);
                    newSalesPriceSalesPrice.allowEdit(false);

                    newTabSMABasePrice.allowEdit(false);
                    newTabSMAIndex.allowEdit(false);

                    if (tmpProjAdjustment.smaBasePrice == 0
                        || this.setFieldAccessForSalesPrice(adjustmentSplit))
                    {
                        newGridSalesPrice.allowEdit(true);
                        newSalesPriceSalesPrice.allowEdit(true);
                    }
                    else
                    {
                        newTabSMABasePrice.allowEdit(true);
                        newTabSMAIndex.allowEdit(true);
                    }
                }
                else
                {
                    newGridCostPrice.allowEdit(false);
                    newCostPriceCostPrice.allowEdit(false);
                    tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, Qty)).allowEdit(false);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldAccessForSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Determines whether to allow edit for sales price grid.
    /// </summary>
    /// <param name = "_adjustmentSplit">
    ///		An instance of <c>ProjAdjustmentSplit</c>.
    /// </param>
    /// <returns>
    ///		true if update sales price is yes; otherwise, false.
    /// </returns>
    protected boolean setFieldAccessForSalesPrice(ProjAdjustmentSplit _adjustmentSplit)
    {
        return (_adjustmentSplit.parmUpdateSalesPrice() == ProjSalesPriceMarkup::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldVisibleCreate</Name>
				<Source><![CDATA[
    void setFieldVisibleCreate()
    {
        newSubscription.visible(false);
        newTabActivityNumber.visible(true);
        newItem.visible(false);
        newTabLinePropertyId.visible(true);

        switch (tmpProjAdjustment.AdjustmentType)
        {
            case ProjAdjustmentType::Hour:
                break;

            case ProjAdjustmentType::Cost:
                break;

            case ProjAdjustmentType::Revenue:
                if (ProjCategory::find(tmpProjAdjustment.CategoryId).SetupSubscription)
                {
                    newSubscription.visible(true);
                    newTabLinePropertyId.visible(false);
                }
                break;

            case ProjAdjustmentType::Item:
                newItem.visible(true);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHourCostPrice</Name>
				<Source><![CDATA[
    void setHourCostPrice()
    {
        AmountCur   totalCostAmount;
        AmountCur   totalSaleAmount;

        AmountCur getNewTotalCostAmount()
        {
            AmountCur elrCostPerHourSetupAmt = ProjHourCostPrice::findResourceRate(tmpProjAdjustmentCreate.Resource, tmpProjAdjustmentCreate.Transdate).CostPrice;

            if (elrCostPerHourSetupAmt)
            {
                ProjEmplTrans    emplTrans;
                CurrencyCode     currencyCode = CompanyInfoHelper::standardCurrency();

                PeriodRecId period = ResourceSetup::find(tmpProjAdjustmentCreate.Resource).Period;
                TransDate periodFrom = PeriodFacade::startDate(period, tmpProjAdjustmentCreate.Transdate);
                TransDate periodTo = PeriodFacade::endDate(period, tmpProjAdjustmentCreate.Transdate );

                select crossCompany sum(Qty), sum(TotalCostAmountCur) from emplTrans where
                    emplTrans.TransDate >= periodFrom &&
                    emplTrans.TransDate <= periodTo   &&
                    emplTrans.Resource  == tmpProjAdjustmentCreate.Resource;

                // Find the calendar to use
                CalendarRecId calendar = ResourceFacade::getCalendar(tmpProjAdjustmentCreate.Resource);

                // standard working hours for the week
                List dates = ResourceCalendarFacade::getDates(calendar, periodFrom, periodTo);
                ListEnumerator datesEnumerator = dates.getEnumerator();

                ProjQtyEmpl hoursExpectedInPeriod;
                while (datesEnumerator.moveNext())
                {
                    date transDate = datesEnumerator.current();
                    hoursExpectedInPeriod += WorkCalendarDate::calcDefinedHours(ProjElr::getCalendarId(tmpProjAdjustmentCreate.Resource), transDate, false);
                }

                if (hoursExpectedInPeriod == 0 || emplTrans.Qty == 0)
                {
                    return 0;
                }

                AmountCur newCostPerHour;

                // ProjAdjustmentElrHourCostPriceCalculationFlight helps the customer to turn the new cost per hour calculation which mimics the cost calculation done in the Project Hour Journal and
                // timesheet posting. By default this flight is enabled.
                if (ProjAdjustmentElrHourCostPriceCalculationFlight::instance().isEnabled())
                {
                    newCostPerHour = hoursExpectedInPeriod / emplTrans.Qty * elrCostPerHourSetupAmt;
                }
                else
                {
                    // this is an incorrect and regressed calculation. we may need to remove this code once we have the ProjAdjustmentElrHourCostPriceCalculationFlight always enabled for our customers.
                    newCostPerHour = hoursExpectedInPeriod / ((emplTrans.Qty ? emplTrans.Qty : 1) * elrCostPerHourSetupAmt);
                }

                return tmpProjAdjustmentCreate.priceQty() * CurrencyExchangeHelper::price(newCostPerHour, currencyCode);
            }
            else
            {
                ProjPriceParameters priceParams = this.instantiateProjectPriceParametersForHourCostPriceLookup();
            	return tmpProjAdjustmentCreate.priceQty() * ProjHourCostPrice::findCostPriceByPriceParameters(priceParams, false);
            }
        }

        if (this.mustUpdateHourCostPrice())
        {
            totalCostAmount = getNewTotalCostAmount();
            tmpProjAdjustmentCreate.TotalCostAmountCur = totalCostAmount;

            totalSaleAmount = element.createTotalSaleAmount(tmpProjAdjustmentCreate.RecId);
            tmpProjAdjustmentCreate.TotalSalesAmountCur = totalSaleAmount;

            element.createTrxAmounts(totalCostAmount, totalSaleAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateProjectPriceParametersForHourCostPriceLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>ProjPriceParameters</c> parameter class instance.
    /// </summary>
    /// <returns>The <c>ProjPriceParameters</c> class instance.</returns>
    protected ProjPriceParameters instantiateProjectPriceParametersForHourCostPriceLookup()
    {
        ProjPriceParameters priceParams = ProjHourCostPrice::constructPriceParametersForFindCostPrice(
                    tmpProjAdjustmentCreate.ProjId ,
                    tmpProjAdjustmentCreate.Resource,
                    tmpProjAdjustmentCreate.CategoryId,
                    tmpProjAdjustmentCreate.LinePropertyId,
                    tmpProjAdjustmentCreate.Transdate,
                    '',
                    '',
                    '',
                    tmpProjAdjustmentCreate.ResourceCategory);

        return priceParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateHourCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the prices must be recalculated and updated.
    /// </summary>
    /// <returns>
    /// true if the prices must be recalculated; otherwise, false.
    /// </returns>
    protected boolean mustUpdateHourCostPrice()
    {
        return tmpProjAdjustmentCreate.checkAdjustmentType(ProjAdjustmentType::Hour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHourCostPriceFromTandA</Name>
				<Source><![CDATA[
    void setHourCostPriceFromTandA()
    {
        JmgJobRefCost   jmgJobRefCost;
        AmountCur       totalCostAmount;
        AmountCur       totalSaleAmount;

        if (tmpProjAdjustmentCreate.checkAdjustmentType(ProjAdjustmentType::Hour)
            && isConfigurationkeyEnabled(configurationKeyNum(Jmg)))
        {
            jmgJobRefCost   = JmgJobRefCost::construct(tmpProjAdjustmentCreate.ProjId);
            totalCostAmount = jmgJobRefCost.getProjAdjustmentTransCreateCost(tmpProjAdjustmentCreate);
            if (totalCostAmount != 0.0)
            {
                totalSaleAmount = element.createTotalSaleAmount(tmpProjAdjustmentCreate.RecId);
                element.createTrxAmounts(totalCostAmount, totalSaleAmount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesPrice</Name>
				<Source><![CDATA[
    void setSalesPrice()
    {
        AmountCur   totalCostAmount;
        AmountCur   totalSaleAmount;

        AmountCur getNewTotalSaleAmount(AmountCur _createTotalCostAmount, AmountCur _revenueTotalSaleAmount)
        {
            TmpProjAdjustmentCreateSalesPriceParameters tmpProjAdjustmentCreateSalesPriceParameters =
                this.initializeTmpProjAdjustmentCreateSalesPriceParameters(
                    tmpProjAdjustmentCreate,
                    _createTotalCostAmount,
                    _revenueTotalSaleAmount);

            return (tmpProjAdjustmentCreate.priceQty() * TmpProjAdjustmentCreate::retrieveSalesPrice(tmpProjAdjustmentCreateSalesPriceParameters));
        }

        totalCostAmount = element.createTotalCostAmount(tmpProjAdjustmentCreate.RecId);
        tmpProjAdjustmentCreate.TotalCostAmountCur = totalCostAmount;
        TmpProjAdjustmentCreate.setNewTotalCostAmount();

        totalSaleAmount = getNewTotalSaleAmount(totalCostAmount, element.createTotalSaleAmount(tmpProjAdjustmentCreate.RecId));
        tmpProjAdjustmentCreate.TotalSalesAmountCur = totalSaleAmount;
        TmpProjAdjustmentcreate.setNewTotalSaleAmount();

        element.createTrxAmounts(totalCostAmount, totalSaleAmount);

		//Save the current state of <c>TmpProjAdjustmentCreate</c> table buffer so that it can be accessed whenever required.
        origTmpProjAdjustmentCreate.data(TmpProjAdjustmentCreate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTmpProjAdjustmentCreateSalesPriceParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>TmpProjAdjustmentCreateSalesPriceParameters</c>.
    /// </summary>
    /// <param name="_tmpProjAdjustmentCreate">
    /// The TmpProjAdjustmentCreate table.
    /// </param>
    /// <param name="_totalCostAmount">
    /// Cost price to search with.
    /// </param>
    /// <param name="_revenueTotalSaleAmount">
    /// Revenue for sales price calculation.
    /// </param>
    /// <returns>
    /// An instance of the <c>TmpProjAdjustmentCreateSalesPriceParameters</c> class.
    /// </returns>
    protected TmpProjAdjustmentCreateSalesPriceParameters initializeTmpProjAdjustmentCreateSalesPriceParameters(
        TmpProjAdjustmentCreate     _tmpProjAdjustmentCreate,
        AmountCur                   _totalCostAmount,
        AmountCur                   _revenueTotalSaleAmount)
    {
        TmpProjAdjustmentCreateSalesPriceParameters tmpProjAdjustmentCreateSalesPriceParameters;
        tmpProjAdjustmentCreateSalesPriceParameters = TmpProjAdjustmentCreateSalesPriceParameters::construct();
        tmpProjAdjustmentCreateSalesPriceParameters.initializeParameters(
            _tmpProjAdjustmentCreate,
            _totalCostAmount,
            _revenueTotalSaleAmount);
        return tmpProjAdjustmentCreateSalesPriceParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxWithholdEnabled_IN</Name>
				<Source><![CDATA[
    void setTaxWithholdEnabled_IN()
    {
        tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, tdsGroup_IN)).enabled(!tmpProjAdjustmentCreate.tcsGroup_IN);
        tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, tcsGroup_IN)).enabled(!tmpProjAdjustmentCreate.tdsGroup_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTmp</Name>
				<Source><![CDATA[
    void setTmp(TmpProjAdjustment   _tmpProjAdjustment)
    {
        tmpProjAdjustment.linkPhysicalTableInstance(_tmpProjAdjustment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisible_IN</Name>
				<Source><![CDATA[
    public void setVisible_IN()
    {
        boolean isCountryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);

        assessableValue_IN.visible(isCountryRegion_IN);
        maxRetailPrice_IN.visible(isCountryRegion_IN);
        withholdingTax_IN.visible(isCountryRegion_IN);

        switch (tmpProjAdjustment.AdjustmentType)
        {
            case ProjAdjustmentType::Hour :
                withholdingTax_IN.visible(false);
            break;
            case ProjAdjustmentType::Cost :
                withholdingTax_IN.visible(false);
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleNew_IN</Name>
				<Source><![CDATA[
    public void setVisibleNew_IN()
    {
        boolean             isCountryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        ProjAdjustmentType  projAdjustmentType;

        newAssessableValue_IN.visible(isCountryRegion_IN);
        newMaxRetailPrice_IN.visible(isCountryRegion_IN);
        newWithholdingTax_IN.visible(isCountryRegion_IN);

        projAdjustmentType = tmpProjAdjustment.AdjustmentType;

        switch (projAdjustmentType)
        {
            case ProjAdjustmentType::Hour :
                newWithholdingTax_IN.visible(false);
            break;

            case ProjAdjustmentType::Cost :
                newWithholdingTax_IN.visible(false);
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smaSubscriptionSalesprice</Name>
				<Source><![CDATA[
    Amount smaSubscriptionSalesprice()
    {
        SMASubscriptionTable    smaSubscriptionTable    = SMASubscriptionTable::find(tmpProjAdjustmentCreate.smaSubscriptionId);
        Amount                  newSalesPrice;
        SMAGetPriceFrom         smaGetPriceFrom;
        Days                    numOfdaysOncreate       = tmpProjAdjustmentCreate.smaEnddate - tmpProjAdjustmentCreate.smaStartDate + 1;
        Days                    numOfdaysOnOrig         = tmpProjAdjustment.smaEnddate - tmpProjAdjustment.smaStartDate + 1;

        if (tmpProjAdjustmentCreate.smaBasePrice != 0 || tmpProjAdjustmentCreate.smaIndex != 0)
        {
            smaGetPriceFrom = SMAGetPriceFrom::SMAIndex;
        }
        else
        {
            smaGetPriceFrom = SMAGetPriceFrom::SMAPriceSetting;
        }

        if (tmpProjAdjustmentCreate.smaSubscriptionPeriodType == SMASubscriptionPeriodType::NonRegular ||
            tmpProjAdjustmentCreate.smaSubscriptionPeriodType == SMASubscriptionPeriodType::Regular)
        {
            newSalesPrice = smaSubscriptionTable.getSalesprice( 0,
                                                                smaGetPriceFrom,
                                                                tmpProjAdjustmentCreate.smaStartDate,
                                                                tmpProjAdjustmentCreate.smaEnddate,
                                                                smaSubscriptionTable.invoiceperiodStart(tmpProjAdjustmentCreate.smaStartDate),
                                                                smaSubscriptionTable.invoiceperiodEnd(tmpProjAdjustmentCreate.smaEnddate),
                                                                tmpProjAdjustmentCreate.smaBasePrice,
                                                                tmpProjAdjustmentCreate.smaIndex,
                                                                tmpProjAdjustmentCreate.ProjId,
                                                                tmpProjAdjustmentCreate.CategoryId,
                                                                tmpProjAdjustmentCreate.CurrencyId);
        }

        if (tmpProjAdjustmentCreate.smaSubscriptionPeriodType == SMASubscriptionPeriodType::PriceChange ||
            tmpProjAdjustmentCreate.smaSubscriptionPeriodType == SMASubscriptionPeriodType::ReductionDays)
        {
            if (numOfdaysOnOrig)
            {
                newSalesPrice = (tmpProjAdjustmentSale.SalesPrice / numOfdaysOnOrig) * numOfdaysOncreate;
            }
            else
            {
                newSalesPrice = 0;
            }
        }

        return newSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitLine</Name>
				<Source><![CDATA[
    void splitLine(TmpProjAdjustment  _tmpProjAdjustment)
    {
        Set set = element.retrieveTransactionsForLineSplit();

		//The case where the focus is on only one record but it is not marked on the datasource is handled by below code.
		if(!TmpProjAdjustment_ds.anyMarked() && _tmpProjAdjustment.RecId != 0)
        {
            TmpProjAdjustment_ds.setRecord(_tmpProjAdjustment);
            TmpProjAdjustment_ds.mark(true);
        }
        FormDataSourceMarks formDataSourceMarks = formDataSourceMarks::construct();
        formDataSourceMarks.parmFormDataSource(TmpProjAdjustment_ds);
        formDataSourceMarks.getMarksFromDataSource();

        adjustmentSplit = element.instantiateProjAdjustmentSplitForSplitLine();
        adjustmentSplit.parmProjTransIdSet(set);
        setiterator transIdSetIterator = new setiterator(set);
        ProjCostTransId transId;
        if (adjustmentSplit.prompt())
        {
            adjustmentSplit.runOperation();
            TmpProjAdjustment tmpAdjustmentBuffer;
            tmpAdjustmentBuffer.linkPhysicalTableInstance(_tmpProjAdjustment);
            ttsbegin;
            while(transidsetiterator.more())
            {
                transid = transidsetiterator.value();
                select forupdate tmpAdjustmentBuffer where tmpAdjustmentBuffer.transid == transid;
                tmpAdjustmentBuffer.pendingadjustment = NoYes::Yes;
                tmpAdjustmentBuffer.update();
                transidsetiterator.next();
            }
            tmpAdjustmentBuffer.reread();
            ttscommit;
            
            if (adjustmentSplit.updatedPacks())
            {
                TmpProjAdjustment_ds.research();
                formDataSourceMarks.setMarksOnDataSource();

                ProjPendingAdjustment pendingAdj = new projPendingAdjustment();
                pendingAdj.populatePendingAdjustment(TmpProjAdjustment_ds, TmpProjPendingAdjustment);
                
				// Validate the bulk changes made on each transaction, and focus the created line so
                // the control's leave() will prevent posting if the adjustment is invalid.
                tmpProjAdjustmentCreate_ds.validateWrite();
                tmpProjAdjustmentCreate_Transdate.setFocus();
    	    }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveTransactionsForLineSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a set with the transaction IDs based on user selection for line split.
    /// </summary>
    /// <returns>A set of transactions.</returns>
    protected Set retrieveTransactionsForLineSplit()
    {
        TmpProjAdjustment tmpProjAdjustmentLocal;
        Set               set = new Set(Types::String);

        for (tmpProjAdjustmentLocal = getFirstSelection(tmpProjAdjustment_DS);
        tmpProjAdjustmentLocal;
        tmpProjAdjustmentLocal=tmpProjAdjustment_DS.getNext())
        {
            set.add(tmpProjAdjustmentLocal.TransId);
        }
        return set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateProjAdjustmentSplitForSplitLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new <c>ProjAdjustmentSplit</c> object.
    /// </summary>
    /// <returns>The <c>ProjAdjustmentSplit</c> object.</returns>
    protected ProjAdjustmentSplit instantiateProjAdjustmentSplitForSplitLine()
    {
        return new ProjAdjustmentSplit(
                    tmpProjAdjustmentCreate,
                    tmpProjAdjustmentCreateCost,
                    tmpProjAdjustmentCreateSale,
                    tmpProjAdjustment,
                    tmpProjAdjustmentCost,
                    tmpProjAdjustmentSale);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCurrency</Name>
				<Source><![CDATA[
    void updateCurrency()
    {
        if (tmpProjAdjustmentCreate)
        {
            tmpProjAdjustmentCreate.CurrencyId = ProjTable::find(tmpProjAdjustmentCreate.ProjId).currencyId();
            if (! tmpProjAdjustmentCreate.CurrencyId)
            {
                    tmpProjAdjustmentCreate.CurrencyId = tmpProjAdjustment.CurrencyId;
            }

            tmpProjAdjustmentCreate_DS.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDimension</Name>
				<Source><![CDATA[
    void updateDimension()
    {
        if (tmpProjAdjustmentCreate)
        {
            tmpProjAdjustmentCreate.setDimension();
            tmpProjAdjustmentCreate_DS.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatedRecs</Name>
				<Source><![CDATA[
    Map updatedRecs(Args     args)
    {
        Map                 updatedRecs;
        FormDataSource      formDataSource;

        ProjCostTrans       projCostTransDS;
        ProjCostTrans       projCostTrans;

        ProjEmplTrans       projEmplTrans;
        ProjEmplTrans       projEmplTransDS;

        ProjItemTrans       projItemTransDS;
        ProjItemTrans       projItemTrans;

        ProjOnAccTrans      projOnAccTransDS;
        ProjOnAccTrans      projOnAccTrans;

        ProjRevenueTrans    projRevenueTransDS;
        ProjRevenueTrans    projRevenueTrans;

        updatedRecs = new Map(Types::Int64,Types::Record);
        formDataSource  = FormDataUtil::getFormDataSource(args.record());

        switch (args.dataset())
        {
            case tableNum(ProjCostTrans):
                projCostTransDS   = args.record();
                for (projCostTransDS = formDataSource.getFirst(true) ?
                     formDataSource.getFirst(true) : formDataSource.cursor();
                     projCostTransDS; projCostTransDS = formDataSource.getNext())
                {
                    projCostTrans   = ProjCostTrans::find(projCostTransDS.TransId);
                    updatedRecs.insert(projCostTrans.RecId,projCostTrans);
                }
                break;

            case tableNum(ProjEmplTrans):
                projEmplTransDS   = args.record();
                for (projEmplTransDS = formDataSource.getFirst(true) ?
                     formDataSource.getFirst(true) : formDataSource.cursor();
                     projEmplTransDS; projEmplTransDS = formDataSource.getNext())
                {
                    projEmplTrans   = ProjEmplTrans::find(projEmplTransDS.TransId);
                    updatedRecs.insert(projEmplTrans.RecId,projEmplTrans);
                }
                break;

            case tableNum(ProjItemTrans):
                projItemTransDS   = args.record();
                for (projItemTransDS = formDataSource.getFirst(true) ?
                     formDataSource.getFirst(true) : formDataSource.cursor();
                     projItemTransDS; projItemTransDS = formDataSource.getNext())
                {
                    projItemTrans   = ProjItemTrans::find(projItemTransDS.ProjTransId);
                    updatedRecs.insert(projItemTrans.RecId,projItemTrans);
                }
                break;

            case tableNum(ProjOnAccTrans):
                projOnAccTransDS   = args.record();
                for (projOnAccTransDS = formDataSource.getFirst(true) ?
                     formDataSource.getFirst(true) : formDataSource.cursor();
                     projOnAccTransDS; projOnAccTransDS = formDataSource.getNext())
                {
                    projOnAccTrans   = ProjOnAccTrans::find(projOnAccTransDS.TransId);
                    updatedRecs.insert(projOnAccTrans.RecId,projOnAccTrans);
                }
                break;

            case tableNum(ProjRevenueTrans):
                projRevenueTransDS   = args.record();
                for (projRevenueTransDS = formDataSource.getFirst(true) ?
                     formDataSource.getFirst(true) : formDataSource.cursor();
                     projRevenueTransDS; projRevenueTransDS = formDataSource.getNext())
                {
                    projRevenueTrans   = ProjRevenueTrans::find(projRevenueTransDS.TransId);
                    updatedRecs.insert(projRevenueTrans.RecId,projRevenueTrans);
                }
                break;
        }

        return updatedRecs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLinePropertyId</Name>
				<Source><![CDATA[
    void updateLinePropertyId()
    {
        if (tmpProjAdjustmentCreate)
        {
            tmpProjAdjustmentCreate.LinePropertyId = ProjLinePropertySetup::findLinePropertyId(tmpProjAdjustmentCreate.ProjId, tmpProjAdjustmentCreate.CategoryId);
            tmpProjAdjustmentCreate_DS.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRelatedForm</Name>
				<Source><![CDATA[
    // If called from a single transaction update related transaction
    void updateRelatedForm()
    {
        FormRun             callerForm  = element.args().caller();
        FormDataSource      fds;
        Args                argsTrans = new Args();
        Map                 updatedRecs;

        argsTrans.record(element.args().record());

        if (argsTrans.record() && FormDataUtil::getFormDataSource(element.args().record()))
        {
            updatedRecs     = element.updatedRecs(argsTrans);

            if (updatedRecs)
            {
                RunBaseMultiParmApplication::formCacheUpdate(callerForm,element.args().record(),updatedRecs.pack());
                fds = FormDataUtil::getFormDataSource(element.args().record());
                fds.active();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTax</Name>
				<Source><![CDATA[
    void updateTax()
    {
        if (tmpProjAdjustmentCreate)
        {
            tmpProjAdjustmentCreate.TaxgroupId      = ProjParameters::taxGroupInvoice(tmpProjAdjustmentCreate.ProjId);
            if (tmpProjAdjustmentCreate.checkAdjustmentType(ProjAdjustmentType::Item))
            {
                tmpProjAdjustmentCreate.TaxItemGroupId     = ProjParameters::taxItemGroupItem(tmpProjAdjustmentCreate.CategoryId,tmpProjAdjustmentCreate.ItemId);
            }
            else
            {
                tmpProjAdjustmentCreate.TaxItemGroupId  = ProjCategory::find(tmpProjAdjustmentCreate.CategoryId).TaxItemGroupId;
            }

            tmpProjAdjustmentCreate_DS.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSelectedTempAdjustments</Name>
				<Source><![CDATA[
    private void deleteSelectedTempAdjustments()
    {
        MultiSelectionHelper helper = MultiSelectionHelper::construct();
        List markedRecordsToBeDeleted = new List(Types::Record);
        TmpProjAdjustment tmpProjAdjustmentLocal;

        helper.parmDatasource(tmpProjAdjustment_ds);

        tmpProjAdjustmentLocal = helper.getFirst();

        ttsbegin;

        while (tmpProjAdjustmentLocal != null)
        {
            delete_from tmpProjAdjustmentCreateCost
                exists join tmpProjAdjustmentCreate
                where tmpProjAdjustmentCreate.RecId == tmpProjAdjustmentCreateCost.RefRecId &&
                    tmpProjAdjustmentCreate.TransID == tmpProjAdjustmentLocal.TransId;

            delete_from tmpProjAdjustmentCreateSale
                exists join tmpProjAdjustmentCreate
                where tmpProjAdjustmentCreate.RecId == tmpProjAdjustmentCreateSale.RefRecId &&
                    tmpProjAdjustmentCreate.TransID == tmpProjAdjustmentLocal.TransId;

			if (ProjFlightStateHelper::isProjUseFundingLimitTrackingForAdjustmentsFlightEnabled())
			{
                while select tmpProjAdjustmentCreate where tmpProjAdjustmentCreate.TransID == tmpProjAdjustmentLocal.TransId
                {
                    ProjFundingLimitTrackingManager::deleteFundingLimitTrackingByTransId(tmpProjAdjustmentCreate.TmpTransId);
				}
			}
            delete_from tmpProjAdjustmentCreate
                where tmpProjAdjustmentCreate.TransID == tmpProjAdjustmentLocal.TransId;

            delete_from tmpProjAdjustmentCost
                where tmpProjAdjustmentCost.TransId == tmpProjAdjustmentLocal.TransId;

            delete_from tmpProjAdjustmentSale
                where tmpProjAdjustmentSale.TransId == tmpProjAdjustmentLocal.TransId;

            markedRecordsToBeDeleted.addEnd(tmpProjAdjustmentLocal);
            
            tmpProjAdjustmentLocal = helper.getNext();
        }

        ListEnumerator listEnum = markedRecordsToBeDeleted.getEnumerator();

        while (listEnum.moveNext())
        {
            element.args().lookupRecord(listEnum.current());
            tmpProjAdjustment_ds.research(false);
            tmpProjAdjustment_ds.cursor().delete();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFundingLimitTracking</Name>
				<Source><![CDATA[
    private void deleteFundingLimitTracking()
    {
        ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(formStr(ProjAdjustment));

        if (!tmpProjAdjustment)
        {
            logger.logInformation(ProjOpsFinancialsInstrumentationActivites::ActionClosingAdjustmentForm);
        }

        while select tmpProjAdjustment
        {
            using (var activityContext = logger.projOpsFinActivity().deleteCreateAdjustmentUpdateFundingLimitContext())
            {
                activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::ActionProperty, ProjOpsFinancialsInstrumentationActivites::ActionClosingAdjustmentForm);
				while select tmpProjAdjustmentCreate where tmpProjAdjustmentCreate.TransID == tmpProjAdjustment.TransId
				{
					ProjFundingLimitTrackingManager::deleteFundingLimitTrackingByTransId(tmpProjAdjustmentCreate.TmpTransId);
                    tmpProjAdjustmentCreate.delete();
				}

				ProjFundingLimitTrackingManager::deleteFundingLimitTrackingByTransId(tmpProjAdjustment.TransID);
                tmpProjAdjustment.delete();

				// Not using a label as this is telemetry and we don't want it translated
				logger.logInformation(strFmt('Transaction deleted: %1',
                        tmpProjAdjustment.TransId));
            }
        }       
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateIndirectCostSales</Name>
				<Source><![CDATA[
    private void calculateIndirectCostSales(TmpProjAdjustmentCreate _tmpProjAdjustmentCreate, CostPrice _costPrice, SalesPrice _salesPrice)
    {
        _tmpProjAdjustmentCreate.psaIndirectComponentGroup = PSAComponentGroupAssignment::findAssignment(_tmpProjAdjustmentCreate.ProjId,
                                                                                                         _tmpProjAdjustmentCreate.Resource,
                                                                                                         _tmpProjAdjustmentCreate.CategoryId,
                                                                                                         _tmpProjAdjustmentCreate.Transdate,
                                                                                                         '','').IndirectComponentGroup;

        if (_tmpProjAdjustmentCreate.psaIndirectComponentGroup)
        {
            PSAIndirectCostCalculation oCalculation = new PSAIndirectCostCalculation();

            PSAIndirectComponentTrans indirectComponentTransCost = PSAIndirectComponentTrans::findByTransId(_tmpProjAdjustmentCreate.TransID, PSAIndirectComponentType::Cost);
            if (indirectComponentTransCost)
            {
                _tmpProjAdjustmentCreate.IndirectCost = oCalculation.calculate(_costPrice,
                                                                               _tmpProjAdjustmentCreate.PSAIndirectComponentGroup,
                                                                               PSAIndirectComponentType::Cost,
                                                                               indirectComponentTransCost.IndirectComponentId,
                                                                               _tmpProjAdjustmentCreate.Transdate,
                                                                               indirectComponentTransCost.RecId,
                                                                               _tmpProjAdjustmentCreate.priceQty());
            }

            PSAIndirectComponentTrans indirectComponentTransSales = PSAIndirectComponentTrans::findByTransId(_tmpProjAdjustmentCreate.TransID, PSAIndirectComponentType::Revenue);
            if (indirectComponentTransSales)
            {
                _tmpProjAdjustmentCreate.IndirectSales = oCalculation.calculate(_salesPrice,
                                                                                _tmpProjAdjustmentCreate.PSAIndirectComponentGroup,
                                                                                PSAIndirectComponentType::Revenue,
                                                                                indirectComponentTransSales.IndirectComponentId,
                                                                                _tmpProjAdjustmentCreate.Transdate,
                                                                                indirectComponentTransSales.RecId,
                                                                                _tmpProjAdjustmentCreate.priceQty());
            }
        }
        else
        {
            if (_tmpProjAdjustmentCreate.IndirectCost)
            {
                tmpProjAdjustmentCreate.NewTotalCostAmount -= tmpProjAdjustmentCreate.IndirectCost;
                tmpProjAdjustmentCreate.IndirectCost = 0;
            }

            if (_tmpProjAdjustmentCreate.IndirectSales)
            {
                tmpProjAdjustmentCreate.NewTotalSaleAmount -= tmpProjAdjustmentCreate.IndirectSales;
                tmpProjAdjustmentCreate.IndirectSales = 0;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>TmpProjAdjustment</Name>
				<Methods>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            TmpProjAdjustmentCost tmpProjAdjustmentCost_local;
            TmpProjAdjustmentSale tmpProjAdjustmentSale_local;

            ttsbegin;

            tmpProjAdjustmentCost_local.linkPhysicalTableInstance(tmpProjAdjustmentCost);
            delete_from tmpProjAdjustmentCost_local
                where tmpProjAdjustmentCost_local.TransId == tmpProjAdjustment.TransId;
            tmpProjAdjustmentCost.linkPhysicalTableInstance(tmpProjAdjustmentCost_local);

            tmpProjAdjustmentSale_local.linkPhysicalTableInstance(tmpProjAdjustmentSale);
            delete_from tmpProjAdjustmentSale_local
                where tmpProjAdjustmentSale_local.TransId == tmpProjAdjustment.TransId;
            tmpProjAdjustmentSale.linkPhysicalTableInstance(tmpProjAdjustmentSale_local);

            super();

            ttscommit;

            tmpProjAdjustmentCost_ds.research();
            tmpProjAdjustmentSale_ds.research();

            tmpProjAdjustmentCreate_ds.allowCreate(false);

            element.setButtonAdjustment();
        }

]]></Source>
					</Method>
					<Method>
						<Name>displaySalesPrice</Name>
						<Source><![CDATA[
        display SalesPrice displaySalesPrice(TmpProjAdjustment _tmpProjAdjustment)
        {
            SalesPrice salesPrice;

            if (! salesPriceCache.exists(_tmpProjAdjustment.TransId))
            {
                if (_tmpProjAdjustment.Qty)
                {
                    salesPrice = TmpProjAdjustment::totalSaleAmount(_tmpProjAdjustment.TransId, tmpProjAdjustment, tmpProjAdjustmentSale) / (_tmpProjAdjustment.Qty ? _tmpProjAdjustment.Qty : 1);
                }
                else
                {
                    salesPrice = TmpProjAdjustment::totalSaleAmount(_tmpProjAdjustment.TransId, tmpProjAdjustment, tmpProjAdjustmentSale);
                }
                salesPriceCache.insert(_tmpProjAdjustment.TransId, salesPrice);
            }

            return salesPriceCache.lookup(_tmpProjAdjustment.TransId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayCostPrice</Name>
						<Source><![CDATA[
        display CostPrice displayCostPrice(TmpProjAdjustment _tmpProjAdjustment)
        {
            CostPrice costPrice;

            if (! costPriceCache.exists(_tmpProjAdjustment.TransId))
            {
                if (_tmpProjAdjustment.Qty)
                {
                    costPrice = TmpProjAdjustment::totalCostAmount(_tmpProjAdjustment.TransId, tmpProjAdjustment, tmpProjAdjustmentCost) / (_tmpProjAdjustment.Qty ? _tmpProjAdjustment.Qty : 1);
                }
                else
                {
                    costPrice = TmpProjAdjustment::totalCostAmount(_tmpProjAdjustment.TransId, tmpProjAdjustment, tmpProjAdjustmentCost);
                }

                costPriceCache.insert(_tmpProjAdjustment.TransId, costPrice);
            }

            return costPriceCache.lookup(_tmpProjAdjustment.TransId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            timeSheet.visible(tmpProjAdjustment.checkAdjustmentType(ProjAdjustmentType::Hour));
            items.visible(tmpProjAdjustment.checkAdjustmentType(ProjAdjustmentType::Item));
            subscription.visible(ProjCategory::find(tmpProjAdjustment.CategoryId).SetupSubscription);
            costTabPage.visible(!tmpProjAdjustment.checkAdjustmentType(ProjAdjustmentType::Revenue));

            element.setFieldVisibleCreate();
            element.setButtonAdjustment();
            element.setCheckPostButton();

            if (tmpProjAdjustment.RecId)
            {
                tmpProjAdjustmentCreate_ds.allowCreate(true);
            }

            tmpProjAdjustmentCost_ds.executeQuery();
            tmpProjAdjustmentSale_ds.executeQuery();

            // <GIN>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            {
                element.setVisible_IN();
            }
            // </GIN>

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        void linkActive()
        {
            #define.star("*")

            ProjInvoiceTable    projInvoiceTable;
            ProjTable           projTable;
            ProjWIPTable        projWIPTable;
            ProjInvoiceControl  projInvoiceControl;

            switch (element.args().dataset())
            {
                case(tableNum(ProjTable)):
                    projTable    = element.args().record();
                    projId       = projTable.ProjId;
                    criteriaProjId.value(projId + #star);
                    break;
                case tableNum(ProjInvoiceTable):
                    projInvoiceTable = element.args().record();
                    element.projInvoiceId(projInvoiceTable.ProjInvoiceProjId);
                    break;

                case(tableNum(ProjWIPTable)):
                    projWIPTable = element.args().record();
                    projWipId    = projWIPTable.ProjId;
                    break;

                case(tableNum(TmpProjInvoiceControl)):
                    if (projInvoiceControl)
                    {
                        element.close();
                    }

                    projInvoiceControl  = element.args().parmObject();
                    projId              = projInvoiceControl.parmProjId();
                    fromDate            = projInvoiceControl.parmProjTransDateFrom();
                    if (projInvoiceControl.parmProjTransDateTo() != dateMax())
                    {
                        toDate              = projInvoiceControl.parmProjTransDateTo();
                    }
                    element.projInvoiceId(projInvoiceControl.parmProjInvoiceProjId());

                    projTransTypeEmpl           = projInvoiceControl.parmHour();
                    projTransTypeCost           = projInvoiceControl.parmExpenses();
                    projTransTypeItem           = projInvoiceControl.parmItem();
                    projTransTypeRevenue        = projInvoiceControl.parmRevenue();
                    projTransTypeSubscription   = projInvoiceControl.parmSubscription();

                    break;
            }

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        void init()
        {
            Query                   q = new Query();

            QueryBuildDataSource    qb1;
           
            super();

            qb1             = q.addDataSource(tableNum(TmpProjAdjustment));

            criteriaProjId  = qb1.addRange(fieldNum(TmpProjAdjustment,ProjId));

            this.query(q);
        }

]]></Source>
					</Method>
					<Method>
						<Name>markChanged</Name>
						<Source><![CDATA[
        /// <summary>
        /// This method is invoked everytime user selects a record or if there is a change in selected records.
        /// </summary>
        public void markChanged()
        {
            super();
            TmpProjMarkedAndPending_ds.executeQuery();
            element.setCheckPostButton();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TmpProjAdjustmentCreate</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            TmpProjAdjustmentCreateCost tmpProjAdjustmentCreateCost_local;
            TmpProjAdjustmentCreateSale tmpProjAdjustmentCreateSale_local;
            tmpProjAdjustmentCreateCost_local.linkPhysicalTableInstance(tmpProjAdjustmentCreateCost);
            tmpProjAdjustmentCreateSale_local.linkPhysicalTableInstance(tmpProjAdjustmentCreateSale);

            ttsbegin;
            while select forupdate tmpProjAdjustmentCreateCost_local
                where tmpProjAdjustmentCreateCost_local.RefRecId == tmpProjAdjustmentCreate.RecId
            {
                tmpProjAdjustmentCreateCost_local.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(tmpProjAdjustmentCreate.DefaultDimension, ProjFundingSource::find(tmpProjAdjustmentCreateCost_local.FundingSource).DefaultDimension);
                tmpProjAdjustmentCreateCost_local.update();
            }

            while select forupdate tmpProjAdjustmentCreateSale_local
                where tmpProjAdjustmentCreateSale_local.RefRecId == tmpProjAdjustmentCreate.RecId
            {
                tmpProjAdjustmentCreateSale_local.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(tmpProjAdjustmentCreate.DefaultDimension, ProjFundingSource::find(tmpProjAdjustmentCreateSale_local.FundingSource).DefaultDimension);
                tmpProjAdjustmentCreateSale_local.update();
            }
            ttscommit;

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>editCostPrice</Name>
						<Source><![CDATA[
        edit CostPrice editCostPrice(boolean _set, TmpProjAdjustmentCreate _tmpProjAdjustmentCreate, CostPrice _costPrice)
        {
            CostPrice ret;
            if (_set)
            {
                AmountCur totalCostAmount = _tmpProjAdjustmentCreate.priceQty() * _costPrice;
                _tmpProjAdjustmentCreate.TotalCostAmountCur = totalCostAmount;

                AmountCur totalSaleAmount = element.createTotalSaleAmount(tmpProjAdjustmentCreate.RecId);
                _tmpProjAdjustmentCreate.TotalSalesAmountCur = totalSaleAmount;

                element.createTrxAmounts(totalCostAmount, totalSaleAmount);

                if (ProjParameters::find().AdjustAutoFieldUpdate)
                {
                    element.setSalesPrice();
                }

                origTmpProjAdjustmentCreate.data(_tmpProjAdjustmentCreate);
                ret = _costPrice;
            }
            else
            {
                TmpProjAdjustmentCreateCost tmpProjAdjCreateCost;
                tmpProjAdjCreateCost.linkPhysicalTableInstance(tmpProjAdjustmentCreateCost);
    
                select sum(CostPrice) from tmpProjAdjCreateCost
                    where tmpProjAdjCreateCost.RefRecId == _tmpProjAdjustmentCreate.RecId;

                ret = tmpProjAdjCreateCost.CostPrice;
            }
            
            if (_tmpProjAdjustmentCreate.PSAIndirectComponentGroup)
            {
                _tmpProjAdjustmentCreate.setIndirectCosts(ret);                
            }

            AmountCur totalCostWithoutIndirects = _tmpProjAdjustmentCreate.TotalCostAmountCur;

            _tmpProjAdjustmentCreate.NewTotalCostAmount = totalCostWithoutIndirects + _tmpProjAdjustmentCreate.IndirectCost;

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editSalesPrice</Name>
						<Source><![CDATA[
        edit SalesPrice editSalesPrice(boolean _set, TmpProjAdjustmentCreate _tmpProjAdjustmentCreate, SalesPrice _salesPrice)
        {
            SalesPrice ret;

            if (_set)
            {
                AmountCur totalCostAmount = element.createTotalCostAmount(tmpProjAdjustmentCreate.RecId);
                tmpProjAdjustmentCreate.TotalCostAmountCur = totalCostAmount;

                AmountCur totalSaleAmount = _tmpProjAdjustmentCreate.priceQty() * _salesPrice;
                tmpProjAdjustmentCreate.TotalSalesAmountCur = totalSaleAmount;

                if (_tmpProjAdjustmentCreate.PSAIndirectComponentGroup)
                {
                    _tmpProjAdjustmentCreate.setIndirectSales(_salesPrice);
                }

                element.createTrxAmounts(totalCostAmount, totalSaleAmount);

                // <GIN>
                if (TaxParameters::checkTaxParameters_IN())
                {
                    TmpProjAdjustmentCreate.AssessableValue_IN = totalSaleAmount;
                }
                // </GIN>

                origTmpProjAdjustmentCreate.data(_tmpProjAdjustmentCreate);
                ret =  _salesPrice;
            }
            else
            {
                TmpProjAdjustmentCreateSale tmpProjAdjCreateSale;
                tmpProjAdjCreateSale.linkPhysicalTableInstance(tmpProjAdjustmentCreateSale);
    
                select sum(SalesPrice) from tmpProjAdjCreateSale
                    where tmpProjAdjCreateSale.RefRecId == _tmpProjAdjustmentCreate.RecId;

                ret = tmpProjAdjCreateSale.SalesPrice;

                if (_tmpProjAdjustmentCreate.PSAIndirectComponentGroup)
                {
                    _tmpProjAdjustmentCreate.setIndirectSales(ret);
                }
            }

            AmountCur totalSalesWithoutIndirects = _tmpProjAdjustmentCreate.TotalSalesAmountCur;

            _tmpProjAdjustmentCreate.NewTotalSaleAmount = totalSalesWithoutIndirects + _tmpProjAdjustmentCreate.IndirectSales;

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            super(_append);

            // For "Fee - subscription", there can be only 1 line.
            // So set allowCreate(false) after creating 1 line.
            if (ProjCategory::find(tmpProjAdjustment.CategoryId).SetupSubscription)
            {
               tmpProjAdjustmentCreate_ds.allowCreate(false);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            this.query().dataSourceTable(tableNum(TmpProjAdjustmentCreate)).addRange(fieldNum(TmpProjAdjustmentCreate, AdjustOrig)).value(queryValue(NoYes::No));
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int         ret;
            ProjTable   projTable;

            ret = super();
            costCreateTabPage.visible(!tmpProjAdjustmentCreate.checkAdjustmentType(ProjAdjustmentType::Revenue));
            element.setFieldAccessCreate();
            element.setButtonAccessCreate();

            // For "Fee subscription", there can be only 1 line.
            // So if there is already 1 line, set allowCreate(false).
            if (ProjCategory::find(tmpProjAdjustment.CategoryId).SetupSubscription &&
                tmpProjAdjustmentCreate_ds.getFirst() != null)
            {
                tmpProjAdjustmentCreate_ds.allowCreate(false);
            }

            tmpProjAdjustmentCreateCost_ds.executeQuery();
            tmpProjAdjustmentCreateSale_ds.executeQuery();

            origTmpProjAdjustmentCreate.data(tmpProjAdjustmentCreate);

            // enable/disable currency id field
            tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, CurrencyId)).allowEdit(true);
            projTable = ProjTable::find(tmpProjAdjustmentCreate.ProjId);
            if (ProjInvoiceTable::find(projTable.ProjInvoiceProjId).ProjLockSalesCurrency == NoYes::Yes)
            {
                tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, CurrencyId)).allowEdit(false);
            }

            // <GIN>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            {
                element.setVisibleNew_IN();
            }
            // </GIN>
            
            if (Project::isProjectExternallyManaged(tmpProjAdjustmentCreate.ProjId))
            {
                // Disable fields which are not allowed to be updated for integrated projects
                tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, ProjId)).allowEdit(false);
                tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, CategoryId)).allowEdit(false);
                tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, ActivityNumber)).allowEdit(false);
                tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, CurrencyId)).allowEdit(false);
                tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, CurrencyIdCost)).allowEdit(false);
                tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, ItemId)).allowEdit(false);
                tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, ItemType)).allowEdit(false);
                tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, LinePropertyId)).allowEdit(false);
                tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, Qty)).allowEdit(false);
                tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, Resource)).allowEdit(false);
                tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, ResourceCategory)).allowEdit(false);
                tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, SalesUnit)).allowEdit(false);
                tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, TotalCostAmountCur)).allowEdit(false);
                tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, TotalSalesAmountCur)).allowEdit(false);
                tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, TransDate)).allowEdit(false);
                tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, TransId)).allowEdit(false);
                tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, FundingSource)).allowEdit(false);
                NewGridCostPrice.allowEdit(false);
                NewCostPriceCostPrice.allowEdit(false);
                NewGridSalesPrice.allowEdit(false);
                NewSalesPriceSalesPrice.allowEdit(false);
           }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            ttsbegin;

            TmpProjAdjustmentCreate::deleteCreateAdjustmentAmount(tmpProjAdjustmentCreate, tmpProjAdjustmentCreateCost, tmpProjAdjustmentCreateSale);

            super();

            // Refresh the datasource and grid
            if (! tmpProjAdjustmentCreate.RecId)
            {
                tmpProjAdjustment.Adjusted = false;
                tmpProjAdjustment.update();
                tmpProjAdjustment_ds.reread();

                // Disable buttons if no row exists
                employeeUpdate.enabled(false);
                check.enabled(false);
                post.enabled(false);

                TmpProjAdjustment::updateFundingLimits(tmpProjAdjustment, tmpProjAdjustmentSale, true);
            }

            ttscommit;

            tmpProjAdjustmentCreateCost_ds.research();
            tmpProjAdjustmentCreateSale_ds.research();

            // For "Fee subscription", there can be only 1 line.
            // So after deletion of the only line, we should allowCreate(true).
            if (ProjCategory::find(tmpProjAdjustment.CategoryId).SetupSubscription)
            {
                tmpProjAdjustmentCreate_ds.allowCreate(true);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            super();

            tmpProjAdjustmentCreate.Txt               = tmpProjAdjustment.Txt;
            tmpProjAdjustmentCreate.CurrencyIdCost    = tmpProjAdjustment.CurrencyIdCost;
            tmpProjAdjustmentCreate.QtyToBeInvoiced   = tmpProjAdjustment.QtyToBeInvoiced;
            tmpProjAdjustmentCreate.Transdate         = tmpProjAdjustment.TransDate;
			tmpProjAdjustmentCreate.TransID           = tmpProjAdjustment.TransId;
            tmpProjAdjustmentCreate.Resource          = tmpProjAdjustment.Resource;
            tmpProjAdjustmentCreate.ResourceCategory  = tmpProjAdjustment.ResourceCategory;
            tmpProjAdjustmentCreate.ActivityNumber    = tmpProjAdjustment.ActivityNumber;
            tmpProjAdjustmentCreate.AdjustmentType    = tmpProjAdjustment.AdjustmentType;
            tmpProjAdjustmentCreate.ItemId            = tmpProjAdjustment.ItemId;
            tmpProjAdjustmentCreate.ProjIdentId       = tmpProjAdjustment.ProjIdentId;
            tmpProjAdjustmentCreate.SalesUnit         = tmpProjAdjustment.SalesUnit;
            tmpProjAdjustmentCreate.ItemType          = tmpProjAdjustment.ItemType;
            tmpProjAdjustmentCreate.InventTransId     = tmpProjAdjustment.InventTransId;
            tmpProjAdjustmentCreate.InventDimId       = tmpProjAdjustment.InventDimid;
            tmpProjAdjustmentCreate.PackingSlipId     = tmpProjAdjustment.PackingSlipId;
            tmpProjAdjustmentCreate.ProjAdjustRefId	  = tmpProjAdjustment.ProjAdjustRefid;
            tmpProjAdjustmentCreate.LedgerDimension   = tmpProjAdjustment.LedgerDimension;
            tmpProjAdjustmentCreate.ItemAdjustVersion = tmpProjAdjustment.ItemAdjustVersion;
            tmpProjAdjustmentCreate.smaBasePrice      = tmpProjAdjustment.smaBasePrice;
            tmpProjAdjustmentCreate.smaEnddate        = tmpProjAdjustment.smaEnddate;
            tmpProjAdjustmentCreate.smaIndex          = tmpProjAdjustment.smaIndex;
            tmpProjAdjustmentCreate.smaStartDate      = tmpProjAdjustment.smaStartDate;
            tmpProjAdjustmentCreate.smaSubscriptionId = tmpProjAdjustment.smaSubscriptionId;
            tmpProjAdjustmentCreate.smaSubscriptionPeriodType = tmpProjAdjustment.smaSubscriptionPeriodType;
            tmpProjAdjustmentCreate.ProjId            = tmpProjAdjustment.ProjId;
            tmpProjAdjustmentCreate.CategoryId        = tmpProjAdjustment.CategoryId;
            tmpProjAdjustmentCreate.LinePropertyId    = tmpProjAdjustment.LinePropertyId;
            tmpProjAdjustmentCreate.CurrencyId        = tmpProjAdjustment.CurrencyId;
            tmpProjAdjustmentCreate.TaxgroupId        = tmpProjAdjustment.TaxGroupId;
            tmpProjAdjustmentCreate.TaxItemGroupId    = tmpProjAdjustment.TaxItemGroupId;
            tmpProjAdjustmentCreate.DefaultDimension  = tmpProjAdjustment.DefaultDimension;
            tmpProjAdjustmentCreate.OriginCost        = tmpProjAdjustment.OriginCost;
            tmpProjAdjustmentCreate.psaIndirectComponentGroup  = tmpProjAdjustment.psaIndirectComponentGroup;
            tmpProjAdjustmentCreate.psaProjOrigTransId  = tmpProjAdjustment.TransId;
            if (ProjFlightStateHelper::isProjUseFundingLimitTrackingForAdjustmentsFlightEnabled())
            {
                tmpProjAdjustmentCreate.TmpTransId = tmpProjAdjustmentCreate.generateNewTemporaryTransId();
            }

            boolean isRevenueTrans;

            // For "Fee" and "Fee - Subscription", both are type Revenue
            // the Qty field is read-only, and can only be 1.
            if (tmpProjAdjustment.checkAdjustmentType(ProjAdjustmentType::Revenue))
            {
                tmpProjAdjustmentCreate.Qty = 1;
                isRevenueTrans = true;
            }

            // Get cost and sales prices from original line when adding the line manually in the adjustment form.
            if (!isRevenueTrans)
            {
                tmpProjAdjustmentCreate.setProjName();
                tmpProjAdjustmentCreate.Qty = tmpProjAdjustment.Qty;
                tmpProjAdjustmentCreate.IndirectCost = tmpProjAdjustment.IndirectCosts;
                tmpProjAdjustmentCreate.IndirectSales = tmpProjAdjustment.IndirectSales;
                tmpProjAdjustmentCreate.NewTotalCostAmount = tmpProjAdjustment.NewTotalCostAmount;
                tmpProjAdjustmentCreate.NewTotalSaleAmount = tmpProjAdjustment.NewTotalSaleAmount;
                tmpProjAdjustmentCreate.TotalCostAmountCur = tmpProjAdjustment.TotalCostAmountCur;
                tmpProjAdjustmentCreate.TotalSalesAmountCur = tmpProjAdjustment.TotalSalesAmountCur;
                tmpProjAdjustmentCreate.insert();

                tmpProjAdjustmentCreateCost.clear();
                tmpProjAdjustmentCreateCost.CostPrice = tmpProjAdjustment_ds.displayCostPrice(tmpProjAdjustment);
                tmpProjAdjustmentCreateCost.RefRecId = tmpProjAdjustmentCreate.RecId;
                tmpProjAdjustmentCreateCost.insert();

                tmpProjAdjustmentCreateSale.clear();
                tmpProjAdjustmentCreateSale.SalesPrice = tmpProjAdjustment_ds.displaySalesPrice(tmpProjAdjustment);
                tmpProjAdjustmentCreateSale.RefRecId = tmpProjAdjustmentCreate.RecId;
                tmpProjAdjustmentCreateSale.insert();
            }

            if (isRevenueTrans)
            {
                tmpProjAdjustmentCreate.insert();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>leaveRecord</Name>
						<Source><![CDATA[
        public boolean leaveRecord(boolean _forceUpdate = false)
        {
            boolean ret;
        
            tmpProjAdjustmentCreate_ds.write();
            ret = super(_forceUpdate);
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>ActivityNumber</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                ProjActivity    projActivity;

                super();

                if (ProjParameters::find().AdjustAutoFieldUpdate)
                {
                    projActivity = ProjActivity::find(tmpProjAdjustmentCreate.ActivityNumber);

                    if (projActivity && projActivity.CategoryDefault)
                    {
                        tmpProjAdjustmentCreate.CategoryId = projActivity.CategoryDefault;
                    }
                }
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                HierarchyTreeTable::lookupHierarchyTree(_formControl, ProjTable::find(tmpProjAdjustmentCreate.ProjId));
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>CategoryId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if (ProjParameters::find().AdjustAutoFieldUpdate)
                {
                    tmpProjAdjustmentCreate.fieldModifiedCategoryId();
                    element.setHourCostPrice();
                    element.setSalesPrice();
                }

                // <GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    TransTaxInformation transTaxInformation;
                    TransitDocumentTransTaxInfoRelation_IN transitDocumentTransTaxInfoRelation_IN;

                    select firstonly transTaxInformation
                        join RecId from transitDocumentTransTaxInfoRelation_IN
                            where transTaxInformation.RecId == transitDocumentTransTaxInfoRelation_IN.TransTaxInformationRecId
                                && transitDocumentTransTaxInfoRelation_IN.TransactionRecId == tmpProjAdjustmentCreate.RecId
                                && transitDocumentTransTaxInfoRelation_IN.TransactionTableId == tmpProjAdjustmentCreate.TableId;

                    if (transTaxInformation)
                    {
                        ttsbegin;
                        transTaxInformation.selectForUpdate(true);
                        transTaxInformation.ServiceAccountingCodeTable = ProjCategory::find(tmpProjAdjustmentCreate.CategoryId).ServiceAccountingCodeTable_IN;
                        transTaxInformation.HSNCodeTable = 0;
                        transTaxInformation.update();
                        ttscommit;
                    }
                }
                // </GIN>
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                if (ProjCategory::find(tmpProjAdjustment.CategoryId).SetupSubscription == NoYes::Yes)
                {
                    ProjCategory::lookupProjCategoryType(_formControl, ProjCategoryType::Revenue, true);
                }
                else
                {
                    super(_formControl, _filterStr);
                }
            }

]]></Source>
							</Method>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean         ret;
                ProjCategory    projCategory;

                ret = super();
                projCategory = ProjCategory::find(tmpProjAdjustmentCreate.CategoryId);

                switch (tmpProjAdjustmentCreate.AdjustmentType)
                {
                    case ProjAdjustmentType::Hour :
                        if (projCategory.CategoryType    != ProjCategoryType::Hour)
                        {
                            ret = checkFailed(strFmt("@SYS54897",tmpProjAdjustmentCreate.CategoryId));
                        }
                        break;

                    case ProjAdjustmentType::Cost :
                        if (projCategory.CategoryType    != ProjCategoryType::Cost)
                        {
                            ret = checkFailed(strFmt("@SYS54897",tmpProjAdjustmentCreate.CategoryId));
                        }
                        break;

                    case ProjAdjustmentType::Revenue :
                        if (projCategory.CategoryType    != ProjCategoryType::Revenue)
                        {
                            ret = checkFailed(strFmt("@SYS54897",tmpProjAdjustmentCreate.CategoryId));
                        }

                        // check original transaction settings against created transaction
                        if (ProjCategory::find(tmpProjAdjustment.CategoryId).SetupSubscription == NoYes::Yes)
                        {
                            if (projCategory.SetupSubscription == NoYes::No)
                            {
                                ret = checkFailed("@SYS88807");
                            }
                        }
                        else
                        {
                            if (projCategory.SetupSubscription == NoYes::Yes)
                            {
                                ret = checkFailed("@SYS88806");
                            }
                        }
                        break;
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>CurrencyId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if (ProjParameters::find().AdjustAutoFieldUpdate)
                {
                    element.setSalesPrice();
                }
                else
                {
                    // recalculate total amounts using the same cost/sales prices in case of transaction split into multiple lines
                    tmpProjAdjustmentCreate.TotalCostAmountCur = tmpProjAdjustmentCreate.priceQty() * tmpProjAdjustmentCreateCost.CostPrice;
                    tmpProjAdjustmentCreate.TotalSalesAmountCur = tmpProjAdjustmentCreate.priceQty() * tmpProjAdjustmentCreateSale.SalesPrice;

                    element.createTrxAmounts(tmpProjAdjustmentCreate.TotalCostAmountCur, tmpProjAdjustmentCreate.TotalSalesAmountCur);
                }

                // <GIN>
                if (TaxParameters::checkTaxParameters_IN())
                {
                    tmpProjAdjustmentCreate.AssessableValue_IN = tmpProjAdjustmentCreate.TotalSalesAmountCur;
                }
                // </GIN>
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>LinePropertyId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if (ProjParameters::find().AdjustAutoFieldUpdate)
                {
                    element.setHourCostPrice();
                    element.setSalesPrice();
                }
                else
                {
                    // recalculate total amounts using the same cost/sales prices in case of transaction split into multiple lines
                    tmpProjAdjustmentCreate.TotalCostAmountCur = tmpProjAdjustmentCreate.priceQty() * tmpProjAdjustmentCreateCost.CostPrice;
                    tmpProjAdjustmentCreate.TotalSalesAmountCur = tmpProjAdjustmentCreate.priceQty() * tmpProjAdjustmentCreateSale.SalesPrice;

                    element.createTrxAmounts(tmpProjAdjustmentCreate.TotalCostAmountCur, tmpProjAdjustmentCreate.TotalSalesAmountCur);
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjId</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;
                ProjCategory    projCategory;

                ret = super();

                projCategory = ProjCategory::find(tmpProjAdjustmentCreate.CategoryId);

                // check to make sure that if adjustment line comes from at subscription is a TimeMaterial Project
                if (ProjCategory::find(tmpProjAdjustment.CategoryId).SetupSubscription == NoYes::Yes)
                {
                    ProjTable projTableLocal = ProjTable::find(tmpProjAdjustmentCreate.ProjId);

                    if (!ProjMultipleContractLinesForProjectFeatureHelper::isTimeMaterialBillingMethod(projTableLocal, ProjTransType::Revenue))
                    {
                        // Only projects of type Time and material can be used for subscriptions.
                        ret = checkFailed("@SYS105681");
                    }
                }

                return ret;
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                if (ProjCategory::find(tmpProjAdjustmentCreate.CategoryId).SetupSubscription == NoYes::Yes)
                {
                    SMASubscriptionTable::lookupProjId(_formControl, tmpProjAdjustmentCreate);
                }
                else
                {
                    super(_formControl, _filterStr);
                }
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                AmountCur   totalCostAmount;
                AmountCur   totalSaleAmount;
                ProjTable   projTable;

                super();

                if (ProjParameters::find().AdjustAutoFieldUpdate)
                {
                    tmpProjAdjustmentCreate.fieldModifiedProjId();
                    element.setHourCostPrice();
                    element.setSalesPrice();
                }

                tmpProjAdjustmentCreate.setProjName();
                totalCostAmount = element.createTotalCostAmount(tmpProjAdjustmentCreate.RecId);
                tmpProjAdjustmentCreate.TotalCostAmountCur = totalCostAmount;

                totalSaleAmount = element.createTotalSaleAmount(tmpProjAdjustmentCreate.RecId);
                tmpProjAdjustmentCreate.TotalSalesAmountCur = totalSaleAmount;

				// Calculate indirect component cost and sales prices which is only applicable for Hour transaction type.
                if (tmpProjAdjustmentCreate.AdjustmentType == ProjAdjustmentType::Hour)
                {
                    element.calculateIndirectCostSales(tmpProjAdjustmentCreate, tmpProjAdjustmentCreateCost.CostPrice, tmpProjAdjustmentCreateSale.SalesPrice);

                    // this will set the total cost amount which includes indirects.
                    tmpProjAdjustmentCreate.setNewTotalCostAmount();

                    // this will set the total sales amount which includes indirects.
                    tmpProjAdjustmentCreate.setNewTotalSaleAmount();
                }

                element.createTrxAmounts(totalCostAmount, totalSaleAmount);

                // enable/disable currency id field
                tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, CurrencyId)).allowEdit(true);
                projTable = ProjTable::find(tmpProjAdjustmentCreate.ProjId);
                if (ProjInvoiceTable::find(projTable.ProjInvoiceProjId).ProjLockSalesCurrency == NoYes::Yes)
                {
                    tmpProjAdjustmentCreate_ds.object(fieldNum(TmpProjAdjustmentCreate, CurrencyId)).allowEdit(false);
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Qty</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                CostPrice   costPrice;
                SalesPrice  salesPrice;
                AmountCur   totalCostAmount;
                AmountCur   totalSaleAmount;

                costPrice = origTmpProjAdjustmentCreate.TotalCostAmountCur / (origTmpProjAdjustmentCreate.priceQty() ? origTmpProjAdjustmentCreate.priceQty() : 1);
                salesPrice = origTmpProjAdjustmentCreate.TotalSalesAmountCur / (origTmpProjAdjustmentCreate.priceQty() ? origTmpProjAdjustmentCreate.priceQty() : 1);

                super();

                totalCostAmount = tmpProjAdjustmentCreate.priceQty() * costPrice;
                tmpProjAdjustmentCreate.TotalCostAmountCur = totalCostAmount;

                totalSaleAmount = tmpProjAdjustmentCreate.priceQty() * salesPrice;
                tmpProjAdjustmentCreate.TotalSalesAmountCur = totalSaleAmount;

                // Indirect cost and sales should calculate for cost and sales price given.
                if (tmpProjAdjustmentCreate.AdjustmentType == ProjAdjustmentType::Hour)
                {
                    element.calculateIndirectCostSales(tmpProjAdjustmentCreate, costPrice, salesPrice);
                }

                // this will set the total cost amount which includes indirects.
                tmpProjAdjustmentCreate.setNewTotalCostAmount();

                // this will set the total sales amount which includes indirects.
                tmpProjAdjustmentCreate.setNewTotalSaleAmount();

                isQtyChanged = true;

                element.createTrxAmounts(totalCostAmount, totalSaleAmount);

                isQtyChanged = false;

                // <GIN>
                if (TaxParameters::checkTaxParameters_IN())
                {
                    tmpProjAdjustmentCreate.AssessableValue_IN = totalSaleAmount;
                }
                // </GIN>
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ResourceCategory</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                if (ProjParameters::find().AdjustAutoFieldUpdate)
                {
                    element.setHourCostPrice();
                    element.setSalesPrice();
                }
                else
                {
                    // recalculate total amounts using the same cost/sales prices in case of transaction split into multiple lines
                    tmpProjAdjustmentCreate.TotalCostAmountCur = tmpProjAdjustmentCreate.priceQty() * tmpProjAdjustmentCreateCost.CostPrice;
                    tmpProjAdjustmentCreate.TotalSalesAmountCur = tmpProjAdjustmentCreate.priceQty() * tmpProjAdjustmentCreateSale.SalesPrice;

                    element.createTrxAmounts(tmpProjAdjustmentCreate.TotalCostAmountCur, tmpProjAdjustmentCreate.TotalSalesAmountCur);
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SMABasePrice</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                while select forupdate tmpProjAdjustmentCreateSale
                    where tmpProjAdjustmentCreateSale.RefRecId == tmpProjAdjustmentCreate.RecId
                {
                    if (!ProjFlightStateHelper::isProjUseFundingLimitTrackingForAdjustmentsFlightEnabled())
                    {
						ProjFundingEngine::updateFundingLimits(new ProjTransTmpProjAdjustmentCreate(tmpProjAdjustmentCreate),
												tmpProjAdjustmentCreateSale.FundingSource,
												-(tmpProjAdjustmentCreate.Qty * tmpProjAdjustmentCreateSale.SalesPrice));
                    }

                    tmpProjAdjustmentCreateSale.SalesPrice  = tmpProjAdjustmentCreate.smaBasePrice * tmpProjAdjustmentCreate.smaIndex / 100;
                    tmpProjAdjustmentCreateSale.LineAmount  = tmpProjAdjustmentCreate.Qty * tmpProjAdjustmentCreateSale.SalesPrice;

                    if (!ProjFlightStateHelper::isProjUseFundingLimitTrackingForAdjustmentsFlightEnabled())
                    {
						ProjFundingEngine::updateFundingLimits(new ProjTransTmpProjAdjustmentCreate(tmpProjAdjustmentCreate),
												tmpProjAdjustmentCreateSale.FundingSource,
												tmpProjAdjustmentCreateSale.LineAmount,
												true,
												true);
                    }

                    tmpProjAdjustmentCreateSale.update();
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SMAEnddate</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;

                ret = super() && element.checkSMAenddate();

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SMAIndex</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                while select forupdate tmpProjAdjustmentCreateSale
                    where tmpProjAdjustmentCreateSale.RefRecId == tmpProjAdjustmentCreate.RecId
                {
                    if (!ProjFlightStateHelper::isProjUseFundingLimitTrackingForAdjustmentsFlightEnabled())
                    {
						ProjFundingEngine::updateFundingLimits(new ProjTransTmpProjAdjustmentCreate(tmpProjAdjustmentCreate),
												tmpProjAdjustmentCreateSale.FundingSource,
												-(tmpProjAdjustmentCreate.Qty * tmpProjAdjustmentCreateSale.SalesPrice));
                    }

                    tmpProjAdjustmentCreateSale.SalesPrice  = tmpProjAdjustmentCreate.smaBasePrice * tmpProjAdjustmentCreate.smaIndex / 100;
                    tmpProjAdjustmentCreateSale.LineAmount  = tmpProjAdjustmentCreate.Qty * tmpProjAdjustmentCreateSale.SalesPrice;

                    if (!ProjFlightStateHelper::isProjUseFundingLimitTrackingForAdjustmentsFlightEnabled())
                    {
						ProjFundingEngine::updateFundingLimits(new ProjTransTmpProjAdjustmentCreate(tmpProjAdjustmentCreate),
												tmpProjAdjustmentCreateSale.FundingSource,
												tmpProjAdjustmentCreateSale.LineAmount,
												true,
												true);
                    }

                    tmpProjAdjustmentCreateSale.update();
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SMAStartDate</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;

                ret = super() && element.checkSMAstartdate();

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>TCSGroup_IN</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                // <GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    element.setTaxWithholdEnabled_IN();
                }
                // </GIN>
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                TaxWithholdGroupHeading::lookupTaxComponentGroup_IN(_formControl, TaxWithholdCodeType_IN::TCS);
            }

]]></Source>
							</Method>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            public void jumpRef()
            {
                TaxWithholdGroupHeading::jumpRef(tmpProjAdjustmentCreate.tcsGroup_IN, TaxWithholdCodeType_IN::TCS, tmpProjAdjustmentCreate);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>TDSGroup_IN</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                // <GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    element.setTaxWithholdEnabled_IN();
                }
                // </GIN>
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                ;
                TaxWithholdGroupHeading::lookupTaxComponentGroup_IN(_formControl, TaxWithholdCodeType_IN::TDS);
            }

]]></Source>
							</Method>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            public void jumpRef()
            {
                TaxWithholdGroupHeading::jumpRef(tmpProjAdjustmentCreate.tdsGroup_IN, TaxWithholdCodeType_IN::TDS, tmpProjAdjustmentCreate);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Transdate</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                update_recordset projAdjustmentCreate
                	setting Transdate = tmpProjAdjustmentCreate.Transdate
                	where projAdjustmentCreate.TransID == tmpProjAdjustmentCreate.TransID;

                if (TmpProjAdjustmentCreate.AdjustmentType == ProjAdjustmentType::Hour)
                {
                    tmpProjAdjustmentCreate.ResourceCategory = ResourceFacade::getResourceCategory(tmpProjAdjustmentCreate.Resource, tmpProjAdjustmentCreate.TransDate, tmpProjAdjustmentCreate.DataAreaId);
                    TmpProjAdjustmentcreate_ds.object(fieldNum(TmpProjAdjustmentCreate, ResourceCategory)).modified();
                }

            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>TmpProjAdjustmentCost</Name>
				<Methods>
					<Method>
						<Name>fundingSource</Name>
						<Source><![CDATA[
        public display ProjFundingSourceId fundingSource(TmpProjAdjustmentCost  _tmpProjAdjustmentCost)
        {
            ProjFundingSource   projFundingSource;
            DictTable           dictTable;
            ProjFundingSourceId projFundingSourceName = '';

            if (_tmpProjAdjustmentCost.FundingSource)
            {
                dictTable = new DictTable(tableNum(ProjFundingSource));
                if (dictTable.rights() >= AccessType::View)
                {
                    select firstonly FundingSourceId from projFundingSource
                        where projFundingSource.RecId == _tmpProjAdjustmentCost.FundingSource;

                    projFundingSourceName = projFundingSource.FundingSourceId;
                }
            }

            return projFundingSourceName;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            QueryBuildDataSource  qbds;
            Query                 query;

            query = this.query();
            qbds = query.dataSourceName(this.name());
            qbds.clearRanges();
            qbds.addRange(fieldNum(TmpProjAdjustmentCost, TransId)).value(tmpProjAdjustment.TransId);

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TmpProjAdjustmentSale</Name>
				<Methods>
					<Method>
						<Name>fundingSource</Name>
						<Source><![CDATA[
        public display ProjFundingSourceId fundingSource(TmpProjAdjustmentSale  _tmpProjAdjustmentSale)
        {
            ProjFundingSource   projFundingSource;
            DictTable           dictTable;
            ProjFundingSourceId projFundingSourceName = '';

            if (_tmpProjAdjustmentSale.FundingSource)
            {
                dictTable = new DictTable(tableNum(ProjFundingSource));
                if (dictTable.rights() >= AccessType::View)
                {
                    select firstonly FundingSourceId from projFundingSource
                        where projFundingSource.RecId == _tmpProjAdjustmentSale.FundingSource;

                    projFundingSourceName = projFundingSource.FundingSourceId;
                }
            }

            return projFundingSourceName;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            QueryBuildDataSource  qbds;
            Query                 query;

            query = this.query();
            qbds = query.dataSourceName(this.name());
            qbds.clearRanges();
            qbds.addRange(fieldNum(TmpProjAdjustmentSale, TransId)).value(tmpProjAdjustment.TransId);

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TmpProjAdjustmentCreateCost</Name>
				<Methods>
					<Method>
						<Name>fundingSource</Name>
						<Source><![CDATA[
        public display ProjFundingSourceId fundingSource(TmpProjAdjustmentCreateCost    _tmpProjAdjustmentCreateCost)
        {
            ProjFundingSource   projFundingSource;
            DictTable           dictTable;
            ProjFundingSourceId projFundingSourceName = '';

            if (_tmpProjAdjustmentCreateCost.FundingSource)
            {
                dictTable = new DictTable(tableNum(ProjFundingSource));
                if (dictTable.rights() >= AccessType::View)
                {
                    select firstonly FundingSourceId from projFundingSource
                        where projFundingSource.RecId == _tmpProjAdjustmentCreateCost.FundingSource;

                    projFundingSourceName = projFundingSource.FundingSourceId;
                }
            }
            return projFundingSourceName;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            QueryBuildDataSource  qbds;
            Query                 query;

            query = this.query();
            qbds = query.dataSourceName(this.name());
            qbds.clearRanges();
            qbds.addRange(fieldNum(TmpProjAdjustmentCreateCost, RefRecId)).value(queryValue(tmpProjAdjustmentCreate.RecId));

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TmpProjAdjustmentCreateSale</Name>
				<Methods>
					<Method>
						<Name>fundingSource</Name>
						<Source><![CDATA[
        public display ProjFundingSourceId fundingSource(TmpProjAdjustmentCreateSale    _tmpProjAdjustmentCreateSale)
        {
            ProjFundingSource   projFundingSource;
            DictTable           dictTable;
            ProjFundingSourceId projFundingSourceName = '';

            if (_tmpProjAdjustmentCreateSale.FundingSource)
            {
                dictTable = new DictTable(tableNum(ProjFundingSource));
                if (dictTable.rights() >= AccessType::View)
                {
                    select firstonly FundingSourceId from projFundingSource
                        where projFundingSource.RecId == _tmpProjAdjustmentCreateSale.FundingSource;

                    projFundingSourceName = projFundingSource.FundingSourceId;
                }
            }
            return projFundingSourceName;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            QueryBuildDataSource  qbds;
            Query                 query;

            query = this.query();
            qbds = query.dataSourceName(this.name());
            qbds.clearRanges();
            qbds.addRange(fieldNum(TmpProjAdjustmentCreateSale, RefRecId)).value(queryValue(tmpProjAdjustmentCreate.RecId));

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TmpProjMarkedAndPending</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// This method is used to execute query to display only the records that are marked and adjusted 
		/// when a user navigates to a record that has a pending adjustment.
        /// </summary>
        /// <remarks>
        /// <c>TmpProjPendingAdjustment</c> and <c>TmpProjMarkedAndPending</c> are two tempDB
        /// tables which are responsible for displaying multiple records which are selected and adjusted.
        /// <c>TmpProjPendingAdjustment</c> table contains only the records that have pending adjustments.
        /// This is necessary because when the cursor's focus on any record changes, those transactions 
        /// are checked against <c>TmpProjPendingAdjustment</c> table to see if the current transaction
        /// has any pending adjustments. If there is, then that is added to <c>TmpProjMarkedAndPending</c>
        /// table and only those transactions are displayed on the lower grid.
        /// </remarks>
        public void executeQuery()
        {
            QueryBuildDataSource qdbs;
            qdbs = this.query().dataSourceTable(tableNum(TmpProjMarkedAndPending));
            MultiSelectionHelper helper = MultiSelectionHelper::construct();
            helper.parmDatasource(TmpProjAdjustment_ds);
            TmpProjPendingAdjustment tmpProjPendingAdjustmentLocal;
            TmpProjMarkedAndPending tmpMarkedAndPendingLocal;
            tmpProjPendingAdjustmentLocal.linkPhysicalTableInstance(TmpProjPendingAdjustment);
            TmpProjAdjustment tmpProjAdjustmentLocal =  helper.getFirst();
            
            delete_from TmpProjMarkedAndPending;
            while(tmpProjAdjustmentLocal)
            {
				while select tmpProjPendingAdjustmentLocal where tmpProjPendingAdjustmentLocal.TransId == TmpProjAdjustmentLocal.TransId
				{
					if(tmpProjPendingAdjustmentLocal)
					{
						tmpMarkedAndPendingLocal.TransID = tmpProjPendingAdjustmentLocal.TransID;
						tmpMarkedAndPendingLocal.AdjustmentType = tmpProjPendingAdjustmentLocal.AdjustmentType;
						tmpMarkedAndPendingLocal.insert();
					}
				}
                TmpProjAdjustmentLocal = helper.getNext();
            }
			TmpProjMarkedAndPending.linkPhysicalTableInstance(tmpMarkedAndPendingLocal);

            super();

        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Selection</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            List                  transIdList;
            Args                  argsTrans = new Args();
            ProjAdjustmentSelect  projAdjustmentSelect;
            Name                  name;

            super();

            if (element.args().dataset())
            {
                name = tableId2name(element.args().dataset());
            }

            if (queryEmpl || queryCost || queryItem || queryRevenue || querySubscription)
            {
                projAdjustmentSelect  = new ProjAdjustmentSelect();

                projAdjustmentSelect.parmName(name);

                projAdjustmentSelect.getLast();

                argsTrans.caller(element);
                argsTrans.record(element.args().record());
                transIdList     = ProjAdjustmentSelect::createTransIdList(argsTrans);

                projAdjustmentSelect.parmTransIdList(transIdList.pack());
                projAdjustmentSelect.parmQueryEmpl(queryEmpl);
                projAdjustmentSelect.parmQueryCost(queryCost);
                projAdjustmentSelect.parmQueryRevenue(queryRevenue);
                projAdjustmentSelect.parmQuerySubscription(querySubscription);
                projAdjustmentSelect.parmQueryItem(queryItem);
                projAdjustmentSelect.parmAdjustmentDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            }
            else
            {
                projAdjustmentSelect  = ProjAdjustmentSelect::construct(projId,
                                                                        projInvoiceId,
                                                                        projWipId,
                                                                        true,
                                                                        fromDate,
                                                                        toDate,
                                                                        name);

                if (projTransTypeEmpl || projTransTypeCost || projTransTypeRevenue || projTransTypeSubscription || projTransTypeItem)
                {
                    projAdjustmentSelect.parmQueryEmpl(projTransTypeEmpl);
                    projAdjustmentSelect.parmQueryCost(projTransTypeCost);
                    projAdjustmentSelect.parmQueryRevenue(projTransTypeRevenue);
                    projAdjustmentSelect.parmQuerySubscription(projTransTypeSubscription);
                    projAdjustmentSelect.parmQueryItem(projTransTypeItem);
                }
            }

            if (projAdjustmentSelect.prompt())
            {
                projAdjustmentSelect.runOperation();
                tmpProjAdjustment.linkPhysicalTableInstance(projAdjustmentSelect.tmpProjAdjustment());
                tmpProjAdjustmentCost.linkPhysicalTableInstance(projAdjustmentSelect.tmpProjAdjustmentCost());
                tmpProjAdjustmentSale.linkPhysicalTableInstance(projAdjustmentSelect.tmpProjAdjustmentSale());
                tmpProjAdjustment_ds.research();

                delete_from tmpProjAdjustmentCreate;
                delete_from tmpProjAdjustmentCreateCost;
                delete_from tmpProjAdjustmentCreateSale;
                delete_from TmpProjPendingAdjustment;
            }

            orig_ProjId.setFocus();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Adjustment</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();
            
            if (tmpProjAdjustment)
            {
                for (TmpProjAdjustment tmpProjAdjustmentLocal = getFirstSelection(tmpProjAdjustment_ds);
                     tmpProjAdjustmentLocal.ActivityNumber;
                     tmpProjAdjustmentLocal = tmpProjAdjustment_ds.getNext())
                {
                    if (!ProjParameters::find().AllowClosedActivitiesInAdjustments &&
                        smmActivities::find(tmpProjAdjustmentLocal.ActivityNumber).Closed == NoYes::Yes)
                    {
                        throw warning(strFmt("@Proj:ActivityClosedNotAllowedForAdjustment", tmpProjAdjustmentLocal.ActivityNumber, tmpProjAdjustmentLocal.TransId));
                    }
                }             
                element.splitLine(tmpProjAdjustment);                
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Check</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args args = new Args(element);
            FormDataSourceMarks formDataSourceMarks;

            super();

            if (tmpProjAdjustmentCreate)
            {
                // Check the marked up rows
                formDataSourceMarks = FormDataSourceMarks::construct();
                formDataSourceMarks.parmFormDataSource(tmpProjAdjustment_ds);
                formDataSourceMarks.getMarksFromDataSource();

                args.record(tmpProjAdjustment);
                element.checkAdjustment(args, tmpProjAdjustment_ds);

                tmpProjAdjustment_ds.research();

                formDataSourceMarks.setMarksOnDataSource();
            }
            else
            {
                // "No adjustments have been registered."
                info("@SYS82602");
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Post</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args                args = new Args(element);
            FormDataSourceMarks formDataSourceMarks;

            super();

            if (tmpProjAdjustmentCreate)
            {
                // Check the marked up rows
                formDataSourceMarks = FormDataSourceMarks::construct();
                formDataSourceMarks.parmFormDataSource(tmpProjAdjustment_ds);
                formDataSourceMarks.getMarksFromDataSource();

                args.record(tmpProjAdjustment);
                element.postAdjustment(args, tmpProjAdjustment_ds);

                if (!isCanceled)
                {
                    element.deleteSelectedTempAdjustments();
                    tmpProjAdjustment_ds.executeQuery();
                }

                formDataSourceMarks.setMarksOnDataSource();
                element.updateRelatedForm();
            }
            else
            {
                // "No adjustments have been registered."
                info("@SYS82602");
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonAll</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.updateLinePropertyId();
            element.updateCurrency();
            element.updateDimension();
            element.updateTax();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllNoLineProperty</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.updateCurrency();
            element.updateDimension();
            element.updateTax();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonLineProperty</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.updateLinePropertyId();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllPrices</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.setHourCostprice();
            element.updateCurrency();
            element.setSalesprice();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonCostprice</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.setHourCostprice();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonCostpriceTandA</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.setHourCostPriceFromTandA();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonCurrency</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.updateCurrency();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonSalesprice</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.setSalesprice();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonTax</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.updateTax();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonDimension</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.updateDimension();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Orig_TransDateAdjustment</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        boolean modified()
        {
            TransDate   transDate   =  tmpProjAdjustment.TransDateAdjustment;

            boolean ret;

            ret = super();

            if (! this.dateValue())
            {
                tmpProjAdjustment.TransDateAdjustment   = transDate;
                ret = checkFailed("@SYS26333");
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>NewTransaction</Name>
				<Type>Grid</Type>
				<Methods>
					<Method>
						<Name>leave</Name>
						<Source><![CDATA[
        public boolean leave()
        {
            boolean ret;
    
            ret = super();

            if (ret)
            {
                ret = tmpProjAdjustmentCreate_ds.validateWrite();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>NewGridProjId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        void lookup()
        {
            if (ProjCategory::find(tmpProjAdjustmentCreate.CategoryId).SetupSubscription == NoYes::Yes)
            {
                SMASubscriptionTable::lookupProjId(this, tmpProjAdjustmentCreate);
            }
            else
            {
                ProjTable::lookupProjId(this, tmpProjAdjustmentCreate);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<AllowPreLoading>No</AllowPreLoading>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>TmpProjAdjustment</Name>
			<Table>TmpProjAdjustment</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AdjustCorrection</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Adjusted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AdjustmentType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssessableValue_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CategoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyId1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyIdCost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_Worker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_WorkerLegalEntity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FromTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventDimid</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsIntercompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemAdjustVersion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LinePropertyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MaximumRetailPrice_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Module</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Origin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginCost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackingSlipId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjAdjustRefid</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjDataSource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjIdentId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjIdentResource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjIdentWorker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAIndirectComponentGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAModelId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSATransRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSATransTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Qty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QtyToBeInvoiced</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecVersion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Resource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceLegalEntity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesUnit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMABasePrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMAEnddate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMAIndex</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMAStartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMASubscriptionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMASubscriptionPeriodType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroupId1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxInventVATCommodityCodeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TCSGroup_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TDSGroup_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalCostAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalSalesAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ToTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDateAdjustment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>txt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VoucherJournal</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TmpProjAdjustmentCreate</Name>
			<Table>TmpProjAdjustmentCreate</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AdjustCorrection</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AdjustmentType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AdjustOrig</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssessableValue_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CategoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyIdCost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustomsTariffCodeTable_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DirectSettlement_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DSA_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExciseRecordType_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExciseTariffCodes_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExciseType_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FundingSource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemAdjustVersion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LinePropertyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MaximumRetailPrice_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Module</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginCost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackingSlipId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostalAddress_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjAdjustRefId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjIdentId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjIdentResource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>ProjName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAIndirectComponentGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAProjOrigTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAWrkCtrId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Qty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QtyToBeInvoiced</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Resource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceLegalEntity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesTaxFormTypes_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesUnit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ServiceCodeTable_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMABasePrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMAEnddate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMAIndex</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMAStartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMASubscriptionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMASubscriptionPeriodType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxgroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxInformation_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxInventVATCommodityCodeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TCSGroup_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TDSGroup_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalCostAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalSalesAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Transdate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>txt</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TmpProjMarkedAndPending</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TmpProjAdjustmentCost</Name>
			<Table>TmpProjAdjustmentCost</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CostPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostRefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FundingSource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerStatusCost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransStatus</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<LinkType>Passive</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TmpProjAdjustmentSale</Name>
			<Table>TmpProjAdjustmentSale</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FundingSource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerSalesAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerSalesPosted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SaleRefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransStatus</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<LinkType>Passive</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TmpProjAdjustmentCreateCost</Name>
			<Table>TmpProjAdjustmentCreateCost</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CostPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostRefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FundingSource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<LinkType>Passive</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TmpProjAdjustmentCreateSale</Name>
			<Table>TmpProjAdjustmentCreateSale</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FundingSource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAIndirectInvoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAIndirectRevenue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SaleRefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<LinkType>Passive</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TmpProjPendingAdjustment</Name>
			<Table>TmpProjPendingAdjustment</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransID</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TmpProjMarkedAndPending</Name>
			<Table>TmpProjMarkedAndPending</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AdjustmentType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransID</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<ArrangeWhen xmlns="">Auto</ArrangeWhen>
		<Caption xmlns="">@SYS336295</Caption>
		<DataSource xmlns="">TmpProjAdjustment</DataSource>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Pattern xmlns="">TaskParentChild</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<TitleDataSource xmlns="">TmpProjAdjustment</TitleDataSource>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Width xmlns="">1122</Width>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>429496729</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>Selection</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>715827882</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Text>@SYS2245</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>Adjustment</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<MultiSelect>Yes</MultiSelect>
								<Text>@SYS3657</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>Check</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>715827882</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<MultiSelect>Yes</MultiSelect>
								<Text>@SYS24056</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>Post</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<MultiSelect>Yes</MultiSelect>
								<Text>@SYS6098</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>EmployeeUpdate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>477218588</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>ButtonAll</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>268435454</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS11696</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>AllNoLineProperty</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>402653181</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS88773</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonSeparatorControl">
										<Name>Separator</Name>
										<ElementPosition>536870908</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ButtonSeparator</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>ButtonLineProperty</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>671088635</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS50026</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonSeparatorControl">
										<Name>Separator1</Name>
										<ElementPosition>805306362</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ButtonSeparator</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>AllPrices</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>939524089</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS88776</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>ButtonCostprice</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741816</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS88775</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>ButtonCostpriceTandA</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1207959543</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS325404</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>ButtonCurrency</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1342177270</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS56480</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>ButtonSalesprice</Name>
										<ElementPosition>1476394997</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS5755</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonSeparatorControl">
										<Name>Separator2</Name>
										<ElementPosition>1610612724</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ButtonSeparator</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>ButtonTax</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1744830451</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS28668</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonSeparatorControl">
										<Name>Separator3</Name>
										<ElementPosition>1879048178</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ButtonSeparator</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>ButtonDimension</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2013265905</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS81213</Text>
									</AxFormControl>
								</Controls>
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS4167</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>TransTaxInformation_IN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>SelectedAdjustmentTransTaxInformation</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>MenuFunctionButton</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataSource>TmpProjAdjustment</DataSource>
										<MenuItemName>TransTaxInformation</MenuItemName>
										<NeedsRecord>Yes</NeedsRecord>
										<Text>@Proj:SelectedAdjustment</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>NewAdjustmentTransTaxInformation</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>MenuFunctionButton</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataSource>TmpProjAdjustmentCreate</DataSource>
										<MenuItemName>TransTaxInformation</MenuItemName>
										<NeedsRecord>Yes</NeedsRecord>
										<Text>@Proj:NewAdjustment</Text>
									</AxFormControl>
								</Controls>
								<NeedsRecord>Yes</NeedsRecord>
								<Text>@SYS33550</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
						<DataSource>TmpProjAdjustmentCreate</DataSource>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Orig_Trans</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Overview</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Orig_trans2</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>TmpProjAdjustment_AdjustmentType</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>268435454</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AdjustmentType</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>Orig_PendingAdjustment</Name>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>PendingAdjustment</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Orig_TransDate</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>402653181</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransDate</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpProjAdjustment_TransId</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>2013265905</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransId</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Orig_ProjId</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>536870908</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjId</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Orig_ProjName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjName</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Orig_CategoryId</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>671088635</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CategoryId</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpProjAdjustment_ActivityNumber</Name>
										<ElementPosition>805306362</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ActivityNumber</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpProjAdjustment_ProjIdentId</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>939524089</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjIdentId</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>TmpProjAdjustment_ProjIdentResource</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ReferenceGroup</Type>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataSource>TmpProjAdjustment</DataSource>
										<ReferenceField>ProjIdentResource</ReferenceField>
										<ReplacementFieldGroup>ResourceId</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>TmpProjAdjustment_ResourceCategory</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ReferenceGroup</Type>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataSource>TmpProjAdjustment</DataSource>
										<ReferenceField>ResourceCategory</ReferenceField>
										<ReplacementFieldGroup>ResourceCategoryId</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Orig_TransDateAdjustment</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1207959543</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransDateAdjustment</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
										<Label>@SYS8449</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Orig_Qty</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1342177270</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Qty</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Orig_CostPrice</Name>
										<ElementPosition>1476394997</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayCostPrice</DataMethod>
										<DataSource>TmpProjAdjustment</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Orig_IndirectCosts</Name>
										<ElementPosition>1476394997</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>IndirectCosts</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Orig_TotalCostPrice</Name>
										<ElementPosition>1476394997</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>NewTotalCostAmount</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Orig_CurrencyId</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1610612724</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyId</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Orig_SalesPrice</Name>
										<ElementPosition>1744830451</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displaySalesPrice</DataMethod>
										<DataSource>TmpProjAdjustment</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Orig_IndirectSales</Name>
										<ElementPosition>1744830451</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>IndirectSales</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Orig_TotalSalesPrice</Name>
										<ElementPosition>1476394997</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>NewTotalSaleAmount</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpProjAdjustment_LinePropertyId</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1879048178</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LinePropertyId</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpProjAdjustment_PSAIndirectComponentGroup</Name>
										<ElementPosition>2147418110</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>PSAIndirectComponentGroup</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>TmpProjAdjustment</DataSource>
								<VisibleRows>7</VisibleRows>
								<VisibleRowsMode>Fixed</VisibleRowsMode>
							</AxFormControl>
						</Controls>
						<Caption>@SYS9039</Caption>
						<DataSource>TmpProjAdjustment</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>General</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Identification</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Identification_TransDate</Name>
										<ElementPosition>477218588</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransDate</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_ProjId</Name>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjId</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_ProjName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjName</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_CategoryId</Name>
										<ElementPosition>954437176</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CategoryId</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_ProjIdentId</Name>
										<ElementPosition>1193046470</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjIdentId</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>Identification_ProjIdentResource</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>ReferenceGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataSource>TmpProjAdjustment</DataSource>
										<ReferenceField>ProjIdentResource</ReferenceField>
										<ReplacementFieldGroup>ResourceId</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>Identification_ProjIdentResourceCategory</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>ReferenceGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataSource>TmpProjAdjustment</DataSource>
										<ReferenceField>ResourceCategory</ReferenceField>
										<ReplacementFieldGroup>ResourceCategoryId</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_LinePropertyId</Name>
										<ElementPosition>1670265058</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>LinePropertyId</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_ActivityNumber</Name>
										<ElementPosition>1908874352</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ActivityNumber</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>TmpProjAdjustment</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Transaction</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>Description_AdjustmentType</Name>
										<ElementPosition>613566756</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>AdjustmentType</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Description_TransId</Name>
										<ElementPosition>920350134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransId</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Description_VoucherJournal</Name>
										<ElementPosition>1227133512</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>VoucherJournal</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Description_txt</Name>
										<ElementPosition>1533916890</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>txt</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>Description_Origin</Name>
										<ElementPosition>1840700268</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Origin</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
										<Items />
									</AxFormControl>
								</Controls>
								<DataGroup>Transaction</DataGroup>
								<DataSource>TmpProjAdjustment</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>OldCostPrice</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>OldCostPriceQty</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Qty</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>OldCostPriceCostPrice</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayCostPrice</DataMethod>
										<DataSource>TmpProjAdjustment</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>OldIndirectCosts</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>IndirectCosts</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TotalCostPrice</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>NewTotalCostAmount</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Caption>@SYS13134</Caption>
								<DataSource>TmpProjAdjustment</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>OldSalesPrice</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>OldSalesPriceCurrencyId</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyId</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>OldSalesPriceSalesPrice</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displaySalesPrice</DataMethod>
										<DataSource>TmpProjAdjustment</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>OldIndirectSales</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>IndirectSales</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>OldTotalSalesPrice</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>NewTotalSaleAmount</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Caption>@SYS5755</Caption>
								<DataSource>TmpProjAdjustment</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>AssessableValue_IN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>IN</CountryRegionCodes>
								<ElementPosition>1789569704</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpProjAdjustment_AssessableValue_IN</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>AssessableValue_IN</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Caption>@GLS5298</Caption>
								<DataSource>TmpProjAdjustment</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>MaxRetailPrice_IN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>IN</CountryRegionCodes>
								<ElementPosition>1968526675</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpProjAdjustment_MaximumRetailPrice_IN</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>MaximumRetailPrice_IN</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Caption>@GLS5296</Caption>
								<DataSource>TmpProjAdjustment</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SalesTax</Name>
								<ElementPosition>715827882</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Group1_TaxGroupId</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxGroupId</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Group1_TaxItemGroupId</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxItemGroupId</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>SalesTax</DataGroup>
								<DataSource>TmpProjAdjustment</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>TimeSheet</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormTimeControl">
										<Name>Group_FromTime</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Time</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>FromTime</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormTimeControl">
										<Name>Group_ToTime</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Time</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ToTime</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>TimeSheet</DataGroup>
								<DataSource>TmpProjAdjustment</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Items</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Items_InventTransId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>InventTransId</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Items_PackingSlipId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>PackingSlipId</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Items_ProjAdjustRefid</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjAdjustRefid</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormSegmentedEntryControl">
										<Name>Items_LedgerDimension</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>SegmentedEntry</Type>
										<FormControlExtension>
											<Name>SegmentedEntryControl</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>parmControllerClassName</Name>
													<Type>String</Type>
													<Value>LedgerDimensionDefaultAccountController</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmAccountTypeEnumName</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIsDefaultAccount</Name>
													<Type>Enum</Type>
													<TypeName>boolean</TypeName>
													<Value>False</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmValidateBlockedForManualEntry</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmLockMainAccountSegment</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmPostingType</Name>
													<Type>Enum</Type>
													<TypeName>LedgerPostingType</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeTotalAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeFinancialAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
										<DataSource>TmpProjAdjustment</DataSource>
										<ReferenceField>LedgerDimension</ReferenceField>
									</AxFormControl>
								</Controls>
								<DataGroup>Items</DataGroup>
								<DataSource>TmpProjAdjustment</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Subscription</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1789569705</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Subscription_SMASubscriptionId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SMASubscriptionId</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>Subscription_SMASubscriptionPeriodType</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SMASubscriptionPeriodType</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Subscription_SMAStartDate</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SMAStartDate</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Subscription_SMAEnddate</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SMAEnddate</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Subscription_SMABasePrice</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SMABasePrice</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Subscription_SMAIndex</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SMAIndex</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<DataGroup>Subscription</DataGroup>
								<DataSource>TmpProjAdjustment</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>WithholdingTax_IN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>IN</CountryRegionCodes>
								<ElementPosition>1968526675</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>WithholdingTax_IN_TDSGroup_IN</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TDSGroup_IN</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>WithholdingTax_IN_TCSGroup_IN</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TCSGroup_IN</DataField>
										<DataSource>TmpProjAdjustment</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>WithholdingTax_IN</DataGroup>
								<DataSource>TmpProjAdjustment</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS2952</Caption>
						<DataSource>TmpProjAdjustment</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>CostTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>CostGrid</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CostGrid_FundingSource</Name>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>fundingSource</DataMethod>
										<DataSource>TmpProjAdjustmentCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CostGrid_CostPrice</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CostPrice</DataField>
										<DataSource>TmpProjAdjustmentCost</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>CostGrid_LedgerStatusCost</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LedgerStatusCost</DataField>
										<DataSource>TmpProjAdjustmentCost</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>CostTransStatus</Name>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransStatus</DataField>
										<DataSource>TmpProjAdjustmentCost</DataSource>
										<Items />
									</AxFormControl>
								</Controls>
								<DataSource>TmpProjAdjustmentCost</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS4249</Caption>
						<DataSource>TmpProjAdjustmentCost</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>SaleTabPage</Name>
						<ElementPosition>1979711486</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>SaleGrid</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SaleGrid_FundingSource</Name>
										<ElementPosition>613566756</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>fundingSource</DataMethod>
										<DataSource>TmpProjAdjustmentSale</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SaleGrid_SalesPrice</Name>
										<ElementPosition>920350134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>SalesPrice</DataField>
										<DataSource>TmpProjAdjustmentSale</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>SaleGrid_LedgerSalesPosted</Name>
										<ElementPosition>1227133512</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>LedgerSalesPosted</DataField>
										<DataSource>TmpProjAdjustmentSale</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SaleGrid_LedgerSalesAmountMST</Name>
										<ElementPosition>1533916890</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_ProjectManagementAndAccounting:ProjAdjustment_SaleGrid_LedgerSalesAmountMST</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LedgerSalesAmountMST</DataField>
										<DataSource>TmpProjAdjustmentSale</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SaleTransStatus</Name>
										<ElementPosition>1840700268</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransStatus</DataField>
										<DataSource>TmpProjAdjustmentSale</DataSource>
										<Items />
									</AxFormControl>
								</Controls>
								<DataSource>TmpProjAdjustmentSale</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS37101</Caption>
						<DataSource>TmpProjAdjustmentSale</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Dimension</Name>
						<ElementPosition>2080374782</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Pattern>DimensionEntryControl</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormContainerControl">
								<Name>DimensionEntryControlHeader</Name>
								<NeededPermission>Manual</NeededPermission>
								<Type>Container</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension>
									<Name>DimensionEntryControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>parmControllerClassName</Name>
											<Type>ExtendedDataType</Type>
											<TypeName>ClassName</TypeName>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmControlLabelText</Name>
											<Type>String</Type>
											<Value>@SYS101181</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmEnumerationName</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmDataSourceName</Name>
											<Type>String</Type>
											<Value>TmpProjAdjustment</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmValueSetReferenceField</Name>
											<Type>String</Type>
											<Value>DefaultDimension</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmEnumValueSetReferenceField</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<Controls />
							</AxFormControl>
						</Controls>
						<HideIfEmpty>No</HideIfEmpty>
						<Caption>@SYS138491</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<DataSource>TmpProjAdjustment</DataSource>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ctrlSplit</Name>
				<AlignControl>Yes</AlignControl>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1288490187</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<AlignChild>No</AlignChild>
				<HideIfEmpty>No</HideIfEmpty>
				<BackgroundColor>WindowBackground</BackgroundColor>
				<FrameType>None</FrameType>
				<Style>SplitterHorizontalContainer</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>NewTransact</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1610612734</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>NewOverview</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>NewTransaction</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>TmpProjAdjustmentCreate_Transdate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>306783378</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Transdate</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>NewGridTransID</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransID</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>NewGridProjId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>460175067</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjId</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>NewGridProjName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjName</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>NewGridCategoryId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>613566756</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CategoryId</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>NewGridActivityNumber</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>766958445</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ActivityNumber</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>NewGridResourceCategory</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ReferenceGroup</Type>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataSource>TmpProjAdjustmentCreate</DataSource>
										<ReferenceField>ResourceCategory</ReferenceField>
										<ReplacementFieldGroup>ResourceCategoryId</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpProjAdjustmentCreate_txt</Name>
										<ElementPosition>920350134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>txt</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>NewGridQty</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Qty</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>NewGridCostPrice</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1227133512</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editCostPrice</DataMethod>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>NewGridIndirectCosts</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1227133512</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>IndirectCost</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>NewGridTotalCostPrice</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1227133512</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>NewTotalCostAmount</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>NewGridCurrencyId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1380525201</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyId</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>NewGridSalesPrice</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1533916890</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editSalesPrice</DataMethod>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>NewGridIndirectSales</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1533916890</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>IndirectSales</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>NewGridTotalSalesPrice</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1227133512</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>NewTotalSaleAmount</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>NewGridLinePropertyId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1687308579</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LinePropertyId</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpProjAdjustmentCreate_TaxgroupId</Name>
										<ElementPosition>1840700268</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxgroupId</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>NewGridTaxItemgroupId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1994091957</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxItemGroupId</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpProjAdjustmentCreate_PSAIndirectComponentGroup</Name>
										<ElementPosition>2147221502</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>PSAIndirectComponentGroup</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>TmpProjAdjustmentCreate</DataSource>
								<VisibleRows>7</VisibleRows>
								<VisibleRowsMode>Fixed</VisibleRowsMode>
							</AxFormControl>
						</Controls>
						<Caption>@SYS9039</Caption>
						<DataSource>TmpProjAdjustmentCreate</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>NewGeneral</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>NewIdentification</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>NewIdentification_Transdate</Name>
										<ElementPosition>477218588</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Transdate</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>NewTabProjId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjId</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>NewTabProjName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjName</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>NewTabActivityNumber</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ActivityNumber</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>NewTabCategoryId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CategoryId</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>NewTabLinePropertyId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>LinePropertyId</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>TmpProjAdjustmentCreate</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>NewDescription</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>NewTabTxt</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>txt</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>Transaction</DataGroup>
								<DataSource>TmpProjAdjustmentCreate</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>NewCostPrice</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>NewCostPriceQty</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Qty</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>NewCostPriceCostPrice</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editCostPrice</DataMethod>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>NewIndirectCosts</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>IndirectCost</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>NewTotalCostPrice</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>NewTotalCostAmount</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Caption>@SYS13134</Caption>
								<DataSource>TmpProjAdjustmentCreate</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>NewSalesPrice</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>NewSalesPriceCurrencyId</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyId</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>NewSalesPriceSalesPrice</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editSalesPrice</DataMethod>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>NewIndirectSales</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>IndirectSales</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>NewTotalSalesPrice</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>NewTotalSaleAmount</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Caption>@SYS5755</Caption>
								<DataSource>TmpProjAdjustmentCreate</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>NewAssessableValue_IN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>IN</CountryRegionCodes>
								<ElementPosition>1789569704</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpProjAdjustmentCreate_AssessableValue_IN</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>AssessableValue_IN</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Caption>@GLS5298</Caption>
								<DataSource>TmpProjAdjustmentCreate</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>NewMaxRetailPrice_IN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>IN</CountryRegionCodes>
								<ElementPosition>1968526675</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpProjAdjustmentCreate_MaximumRetailPrice_IN</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>MaximumRetailPrice_IN</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Caption>@GLS5296</Caption>
								<DataSource>TmpProjAdjustmentCreate</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>NewSalesTax</Name>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>NewTabTaxgroupId</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxgroupId</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>NewTabTaxItemGroupId</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxItemGroupId</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>SalesTax</DataGroup>
								<DataSource>TmpProjAdjustmentCreate</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>NewItem</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormSegmentedEntryControl">
										<Name>NewItem_LedgerDimension</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>SegmentedEntry</Type>
										<FormControlExtension>
											<Name>SegmentedEntryControl</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>parmControllerClassName</Name>
													<Type>String</Type>
													<Value>LedgerDimensionDefaultAccountController</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmAccountTypeEnumName</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIsDefaultAccount</Name>
													<Type>Enum</Type>
													<TypeName>boolean</TypeName>
													<Value>False</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmValidateBlockedForManualEntry</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmLockMainAccountSegment</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmPostingType</Name>
													<Type>Enum</Type>
													<TypeName>LedgerPostingType</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeTotalAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeFinancialAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
										<ReferenceField>LedgerDimension</ReferenceField>
									</AxFormControl>
								</Controls>
								<DataGroup>Item</DataGroup>
								<DataSource>TmpProjAdjustmentCreate</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>NewSubscription</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>NewTabSMAStartDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SMAStartDate</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>NewTabSMAEnddate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SMAEnddate</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>NewTabSMABasePrice</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SMABasePrice</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>NewTabSMAIndex</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SMAIndex</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<DataGroup>Subscription</DataGroup>
								<DataSource>TmpProjAdjustmentCreate</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>NewWithholdingTax_IN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>IN</CountryRegionCodes>
								<ElementPosition>1932735281</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>NewWithholdingTax_IN_TDSGroup_IN</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TDSGroup_IN</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>NewWithholdingTax_IN_TCSGroup_IN</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TCSGroup_IN</DataField>
										<DataSource>TmpProjAdjustmentCreate</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>WithholdingTax_IN</DataGroup>
								<DataSource>TmpProjAdjustmentCreate</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS2952</Caption>
						<DataSource>TmpProjAdjustmentCreate</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>CostCreateTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>CostCreateGrid</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CostCreateGrid_FundingSource</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>fundingSource</DataMethod>
										<DataSource>TmpProjAdjustmentCreateCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CostCreateGrid_CostPrice</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CostPrice</DataField>
										<DataSource>TmpProjAdjustmentCreateCost</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<DataSource>TmpProjAdjustmentCreateCost</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS4249</Caption>
						<DataSource>TmpProjAdjustmentCreateCost</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>SaleCreateTabPage</Name>
						<ElementPosition>1979711486</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>SaleCreateGrid</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SaleCreateGrid_FundingSource</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>fundingSource</DataMethod>
										<DataSource>TmpProjAdjustmentCreateSale</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SaleCreateGrid_SalesPrice</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>SalesPrice</DataField>
										<DataSource>TmpProjAdjustmentCreateSale</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<DataSource>TmpProjAdjustmentCreateSale</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS37101</Caption>
						<DataSource>TmpProjAdjustmentCreateSale</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>NewDimension</Name>
						<ElementPosition>2080374782</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Pattern>DimensionEntryControl</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormContainerControl">
								<Name>DimensionEntryControlLine</Name>
								<NeededPermission>Manual</NeededPermission>
								<Type>Container</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension>
									<Name>DimensionEntryControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>parmControllerClassName</Name>
											<Type>ExtendedDataType</Type>
											<TypeName>ClassName</TypeName>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmControlLabelText</Name>
											<Type>String</Type>
											<Value>@SYS101181</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmEnumerationName</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmDataSourceName</Name>
											<Type>String</Type>
											<Value>TmpProjAdjustmentCreate</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmValueSetReferenceField</Name>
											<Type>String</Type>
											<Value>DefaultDimension</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmEnumValueSetReferenceField</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<Controls />
							</AxFormControl>
						</Controls>
						<HideIfEmpty>No</HideIfEmpty>
						<Caption>@SYS138491</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<DataSource>TmpProjAdjustmentCreate</DataSource>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>