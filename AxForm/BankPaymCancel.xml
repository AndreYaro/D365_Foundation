<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BankPaymCancel</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BankPaymCancel extends FormRun
{
    // The instance of the calling RunBase class
    BankPaymCancel  bankPaymCancel;

    BankParameters bankParameters;

}
]]></Source>
			</Method>
			<Method>
				<Name>checkReason</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if a Reason Code must be entered by the user.
    /// If a Reason Code is required, validates that one was entered.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// A Reason Code is required by the AR or Bank parameter but not entered by the user.
    /// </exception>
    private void checkReason()
    {
        CustParameters custParameters;

        if (reason.valueStr() == '')
        {
            // Is the Deposit Slip cancellation request from the AR form?
            if (bankPaymCancel.parmCustTrans())
            {
                // From AR, check the AR parameters.
                custParameters = CustParameters::find(false);

                if (custParameters.CancelPaymentReasonReq == true)
                {
                    throw error(strfmt("@SYS26332", "@SYS111246"));
                }
            }
            else
            {
                // Not from AR, check the Bank parameters.
                if (bankParameters.RequireDepositCancelReason == true)
                {
                    throw error(strfmt("@SYS26332", "@SYS111246"));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankPaymCancel</Name>
				<Source><![CDATA[
    public BankPaymCancel parmBankPaymCancel(BankPaymCancel _bankPaymCancel = bankPaymCancel)
    {
        if (!prmIsDefault(_bankPaymCancel))
        {
            bankPaymCancel = _bankPaymCancel;
        }
        return bankPaymCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBankPaymCancel</Name>
				<Source><![CDATA[
    public void initializeBankPaymCancel()
    {
        // Set the form's field values back into the RunBase class
        TransDate transDate = transactionDate.dateValue();

        bankPaymCancel.parmTransDate(transDate);
        bankPaymCancel.parmReason(reason.valueStr());
        bankPaymCancel.parmReasonComment(reasonComment.valueStr());
        bankPaymCancel.parmJournalName(journalName.valueStr());
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Passes the values of its fields to the BankPaymCancel class via a call to the initParms method.
    /// Checks the Bank and AR Parameters and verifies that the user supplied the required information.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// The Bank Parameters require a Reason Code for the Cancel Payment process but one was not supplied.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The AR Parameters require a Reason Code for the Cancel Payment process but one was not supplied.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The Bank Parameters require a Journal name for the Cancel Payment process but one was not supplied.
    /// </exception>
    public void closeOk()
    {
        DialogRunbase dialog = element.args().caller();
        
        // Check if Reason code is required.
        this.checkReason();

        // If not from AR, if the journal name is empty check to see if it is required in the Bank parameters.
        if ((!bankPaymCancel.parmCustTrans()) && (journalName.valueStr() == '') && (bankParameters.RequireDepositCancelJour == true))
        {
            throw error(strfmt("@SYS26332", "@SYS35283"));
        }

        this.initializeBankPaymCancel();

        if (cashRegister_WGroup.visible())
        {
            bankPaymCancel.parmTerminalRecId(terminalRecId.value());
            bankPaymCancel.parmLocationRecId(locationRecId.value());
            bankPaymCancel.parmOperatorRecId(operatorRecId.value());
        }

        dialog.updateServer();
        if (bankPaymCancel.checkCloseDialog())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up the BankPaymCancel AX form user interface based on information
    /// from the passed in BankPaymCancel class instance.
    /// </summary>
    /// <remarks>
    /// The method disables fields as needed.  For instance the journal name field is only
    /// enabled when the Bank parameters require it.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// The form was launched directly, without an instance of a caller.
    /// </exception>
    public void init()
    {
        // Make sure that we were called with an instance of an object passed in
        if (!element.args().caller())
        {
            throw error("@SYS22539");
        }

        // Get the instance of the runBase class we were called from
        bankPaymCancel =  element.args().caller().runbase();

        super();

        // Default the form's fields from the last RunBase values
        bankAccount.text(bankPaymCancel.parmAccountId());
        depositSlipNum.text(bankPaymCancel.parmDepositNum());
        transactionDate.dateValue(bankPaymCancel.parmTransDate());

        // Is the Payment cancellation request from the AR form?
        if (bankPaymCancel.parmCustTrans())
        {
            // Don't show the journal name lookup if coming from AR.
            journalName.enabled(false);
            journalName.visible(false);
        }
        else
        {
            // Journal name lookup field is only editable when the Bank Parameter
            // enforcing Deposit Slip Cancellation journals is enabled.
            bankParameters = BankParameters::find(false);
            journalName.enabled(bankParameters.RequireDepositCancelJour);
        }

        if (CashRegister_WGroup.visible(bankPaymCancel.enableCashRegister_W()))
        {
            LocationRecId.value(bankPaymCancel.parmLocationRecId());
            TerminalRecId.value(bankPaymCancel.parmTerminalRecId());
            RegisterRecId.value(CashRegisterTerminal_W::find(bankPaymCancel.parmTerminalRecId()).CashRegister);
            OperatorRecId.value(bankPaymCancel.parmOperatorRecId());
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>Reason</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets up and executes a Query that will pull back all of the records
        /// from ReasonTable that have Bank and Customer\Ledger defined in the Reason Code setup.
        /// </summary>
        public void lookup()
        {
            Query                   query = new Query();
            QueryBuildDataSource    queryBuildDataSource;
            QueryBuildRange         queryBuildRangeBank;
            QueryBuildRange         queryBuildRangeCustOrLedger;
            SysTableLookup          sysTableLookup;

            // Create an instance of SysTableLookup with the form control passed in
            sysTableLookup = SysTableLookup::newParameters(tablenum(ReasonTable), this, true);

            // Add the fields to be shown in the lookup form
            sysTableLookup.addLookupfield(fieldnum(ReasonTable, Reason));
            sysTableLookup.addLookupfield(fieldnum(ReasonTable, Description));

            // Create the query datasource
            queryBuildDataSource = query.addDataSource(tablenum(ReasonTable));

            // Restrict the Reason code to those set up for Bank and Cust\Ledger.
            queryBuildRangeBank = queryBuildDataSource.addRange(fieldnum(ReasonTable, Bank));
            queryBuildRangeBank.value(enum2str(NoYes::Yes));

            switch (bankPaymCancel.parmIsLedgerAccountType())
            {
                case NoYes::No:
                    queryBuildRangeCustOrLedger = queryBuildDataSource.addRange(fieldnum(ReasonTable, Cust));
                    break;

                case NoYes::Yes:
                    queryBuildRangeCustOrLedger = queryBuildDataSource.addRange(fieldnum(ReasonTable, Ledger));
                    break;
            }

            if (queryBuildRangeCustOrLedger)
            {
                queryBuildRangeCustOrLedger.value(enum2str(NoYes::Yes));
            }

            // Add the query to the lookup form
            sysTableLookup.parmQuery(query);

            // Perform lookup
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets the ReasonComment field to the Description of the selected Reason Code.
        /// </summary>
        /// <returns>
        /// True.
        /// </returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            reasonComment.text(ReasonTable::find(reason.text()).Description);

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Determines if the text in the Reason field is a valid Reason Code
        /// for the Cancel Payment process.
        /// </summary>
        /// <returns>
        /// True if the value corresponds to a defined Reason Code and
        /// that Reason Code is set up for use in Bank and Customer\Ledger.
        /// Otherwise, false.
        /// </returns>
        public boolean validate()
        {
            ReasonTable reasonTable;
            boolean ret;

            ret = super();

            if (reason.valueStr() != '')
            {
                reasonTable = ReasonTable::find(reason.valueStr());
                if (reasonTable.RecId == 0)
                {
                    // The value '%1' in field '%2' is not found in relating table '%3'.
                    ret = checkFailed(strfmt("@SYS112224", reason.valueStr(), fieldpname(ReasonTable, Reason), tablepname(ReasonTable)));
                }
                else
                {
                    // Check the Reason setup table to see if the code is set up to run for Bank and Cust\Ledger.
                    if (reasonTable.Bank == NoYes::No)
                    {
                        ret = checkFailed("@SYS115522");
                    }
                    else
                    {
                        switch (bankPaymCancel.parmIsLedgerAccountType())
                        {
                            case NoYes::No:
                                if (reasonTable.Cust == NoYes::No)
                                {
                                    ret = checkFailed("@SYS115522");
                                }
                                break;

                            case NoYes::Yes:
                                if (reasonTable.Ledger == NoYes::No)
                                {
                                    ret = checkFailed("@SYS115522");
                                }
                                break;
                        }
                    }
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>JournalName</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets up and executes a Query that will pull back all of the records
        /// from the LedgerJournalName table with journal type BankDepositPaymCancel
        /// where the BlockUserGroupId is either blank or set to a user group that
        /// the user is currently a member of.
        /// </summary>
        public void lookup()
        {
            Query                   query = new Query();
            QueryBuildDataSource    queryBuildDataSource;
            QueryBuildRange         queryBuildRangeJournalType;
            QueryBuildRange         queryBuildRangeBlockingGroup;
            SysTableLookup          sysTableLookup;
            UserGroupList           userGroupList;
            str                     valueStr;

            // Create an instance of SysTableLookup with the form control passed in
            sysTableLookup = SysTableLookup::newParameters(tablenum(LedgerJournalName), this);

            // Add the fields to be shown in the lookup form
            sysTableLookup.addLookupfield(fieldnum(LedgerJournalName, JournalName));
            sysTableLookup.addLookupfield(fieldnum(LedgerJournalName, Name));

            // Create the query datasource
            queryBuildDataSource = query.addDataSource(tablenum(LedgerJournalName));

            queryBuildRangeJournalType = queryBuildDataSource.addRange(fieldnum(LedgerJournalName, JournalType));
            // Make sure only the Deposit Payment cancellation journal names are returned.
            queryBuildRangeJournalType.value(queryValue(LedgerJournalType::BankDepositPaymCancel));

            queryBuildRangeBlockingGroup = queryBuildDataSource.addRange(fieldnum(LedgerJournalName, BlockUserGroupId));
            // Filter for Blocking Groups: groups that the user is in plus journal names that have no blocking.
            valueStr = SysQuery::valueEmptyString();
            while select GroupId from userGroupList where userGroupList.UserId == curuserid()
            {
                valueStr = valueStr + ',' + userGroupList.GroupId;
            }
            queryBuildRangeBlockingGroup.value(valueStr);

            // Add the query to the lookup form
            sysTableLookup.parmQuery(query);

            // Perform lookup
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Determines if the text in the JournalName field is a valid journal name
        /// for the Cancel Payment process.
        /// </summary>
        /// <returns>
        /// True if the value is a valid journal name, is a journal name that is
        /// of type BankDepositPaymCancel, and the user is a member of the "Blocking" user group.
        /// Otherwise, false;
        /// </returns>
        public boolean validate()
        {
            LedgerJournalName   journal;
            boolean ret;

            ret = super();

            if (journalName.valueStr() != '')
            {
                journal = LedgerJournalName::find(journalName.text());
                if (journal.RecId == 0)
                {
                    // The value '%1' in field '%2' is not found in relating table '%3'.
                    ret = checkFailed(strfmt("@SYS112224", journalName.valueStr(), fieldpname(LedgerJournalName, JournalName), tablepname(LedgerJournalName)));
                }
                else if (journal.JournalType != LedgerJournalType::BankDepositPaymCancel)
                {
                    // Journal type must be %1.
                    ret = checkFailed(strfmt("@SYS22977", enum2str(LedgerJournalType::BankDepositPaymCancel)));
                }
                else
                {
                    ret = JournalStatic::hasUserAccessForGroupId(journal.BlockUserGroupId);
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LocationRecId</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                if (CashRegisterTerminal_W::find(TerminalRecId.value()).Location != this.value())
                {
                    TerminalRecId.value(0);
                    RegisterRecId.value(0);
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TerminalRecId</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>lookupReference</Name>
						<Source><![CDATA[
        public Common lookupReference()
        {
            return CashRegisterTerminal_W::lookupTerminalForLocation(this, LocationRecId.value());
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                RegisterRecId.value(CashRegisterTerminal_W::find(this.value()).CashRegister);
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret = super();

            if (ret)
            {
                if (this.value() && CashRegisterTerminal_W::find(this.value()).Location != LocationRecId.value())
                {
                    ret = checkFailed(strFmt("@SYP4888381", CashRegisterLocation_W::find(LocationRecId.value()).Code));
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@SYS24593</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<StatusBarStyle xmlns="">SimpleWithoutClose</StatusBarStyle>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ContentGroup</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>TransactionDate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>238609294</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Date</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>TransDate</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Reason</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>477218588</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@FieldDescriptions_AccountsPayable:BankPaymCancel_Reason</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>ReasonCode</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>ReasonComment</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>715827882</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@FieldDescriptions_AccountsPayable:BankPaymCancel_ReasonComment</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>ReasonComment</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>BankAccount</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>954437176</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>BankAccount</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DepositSlipNum</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1193046470</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>BankDepositNum</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>JournalName</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@FieldDescriptions_AccountsPayable:BankPaymCancel_JournalName</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>LedgerJournalNameId</ExtendedDataType>
						<Label>@SYS35283</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>dialogStartGrp</Name>
						<ElementPosition>1670265058</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CashRegister_WGroup</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormReferenceGroupControl">
						<Name>LocationRecId</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ReferenceGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<ExtendedDataType>CashRegisterLocationRecId_W</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormReferenceGroupControl">
						<Name>TerminalRecId</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ReferenceGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<ExtendedDataType>CashRegisterTerminalRecId_W</ExtendedDataType>
						<ReplacementFieldGroup>Code</ReplacementFieldGroup>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormReferenceGroupControl">
						<Name>RegisterRecId</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ReferenceGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<ExtendedDataType>CashRegisterRecId_W</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormReferenceGroupControl">
						<Name>OperatorRecId</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ReferenceGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<ExtendedDataType>CashRegisterOperatorRecId_W</ExtendedDataType>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Caption>@FiscalServices:AS_BankPaymCancel_WForm_GroupCaption</Caption>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>BottomButtonGrp</Name>
				<ElementPosition>1908874352</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Top>0</Top>
				<TopMode>BottomEdge</TopMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>30</VerticalSpacing>
				<VerticalSpacingMode>Fixed</VerticalSpacingMode>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Ok</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Cancel</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>