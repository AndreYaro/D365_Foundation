<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>WHSContainerCloseDiag</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class WHSContainerCloseDiag extends FormRun
{
    WHSContainerTable           containerTable;
    WHSCloseContainerProfile    closeContainerProfile;

}
]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    public boolean canClose()
    {
        boolean ret = false;

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextByFormAndAction(formStr(WHSContainerCloseDiag), formMethodStr(WHSContainerCloseDiag, canClose)))
        {
            ret = super();

            if (this.closedOk())
            {
                ret = ret && WHSContainerTable::validateReleaseContainerContainerGroupingLicensePlateId(releaseContainer.checked(), containerGroupingLicensePlateId.text());

                if (ret && !WHSWeightUOM.text())
                {
                    ret = checkFailed("@WAX:WeightUOMMustBeSpecified");
                }

                if (ret && ContainerTrackingId.visible() && !ContainerTrackingId.text())
                {
                    ret = checkFailed("@WAX:ContainerTrackingIdMustBeSpecified");
                }

                if (ret && Weight.realValue() <= 0)
                {
                    ret = ret && checkFailed("@WAX:WeightMustBePositive");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        super();

        if (this.closedOk())
        {
            using (var _ = WhsDocumentRoutingContext::newFromParameters('', HcmWorkerLookup::currentWorker(), emptyGuid()))
            {
                WHSContainerTable::closeContainer(
                    containerTable.ShipmentId,
                    containerTable.ContainerId,
                    weight.realValue(),
                    WHSWeightUOM.text(),
                    putLocation.valueStr(),
                    releaseContainer.checked(),
                    ContainerTrackingId.text(),
                    containerGroupingLicensePlateId.text());
            }

            FormObjectSet containerTableDataSource = containerTable.dataSource();

            if (containerTableDataSource)
            {
                containerTableDataSource.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        if (element.args().dataset() != tableNum(WHSContainerTable))
        {
            throw error("@WAX1921");
        }

        containerTable = element.args().record();
        closeContainerProfile = WHSCloseContainerProfile::find(containerTable.CloseContainerProfileId);

        super();

        var worker = WHSWorker::findByWorker();

        workerId.value(worker.Worker);

        releaseContainer.visible(
               closeContainerProfile.AutoReleaseContainerAtContainerClose  == WHSAutoReleaseContainerAtContainerClose::Optional
            && closeContainerProfile.ManifestRequirementsForShipment       == WHSManifestRequirement::None
            && closeContainerProfile.ManifestRequirementsForContainerGroup == WHSManifestRequirementContainerGroup::None);

        // Show entry field for container tracking id, if container policy is set to manual manifesting at container closing
        ContainerTrackingId.visible( (closeContainerProfile.ManifestRequirementsForContainer == WHSManifestRequirement::Manual && closeContainerProfile.ManifestAtContainerClose)
                                   || containerTable.ShipCarrierTrackingNum );

        // If the container is already manifested, changing weight and tracking id is not allowed
        if (containerTable.ShipCarrierTrackingNum)
        {
            ContainerTrackingId.enabled(false);
            ContainerTrackingId.text(containerTable.ShipCarrierTrackingNum);

            SystemWeight.visible(false);
            Weight.realValue(containerTable.Weight);
            Weight.enabled(false);
            WHSWeightUOM.text(containerTable.WeightUOM);
            WHSWeightUOM.enabled(false);
        }

        this.setProfileControls();

        // The grouping of containers should not be allowed if the container is to be released immediately or if packed container work will not be created
        // The intention with this is that the work should only be created when the packer completes with the container grouping and manually releases the group.
        if (closeContainerProfile.AutoReleaseContainerAtContainerClose == WHSAutoReleaseContainerAtContainerClose::Always
            || closeContainerProfile.ContainerClosingWorkCreationProcess == WHSWarehouseContainerClosingWorkCreationProcess::None
            || closeContainerProfile.ContainerClosingWorkCreationProcess == WHSWarehouseContainerClosingWorkCreationProcess::AssignContainerToSortPosition)
        {
            containerGroupingLicensePlateId.visible(false);
            containerGroupingLicensePlateId.text('');
        }
        else
        {
            containerGroupingLicensePlateId.visible(true);
            containerGroupingLicensePlateId.text(containerTable.ContainerGroupingLicensePlateId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProfileControls</Name>
				<Source><![CDATA[
    public void setProfileControls()
    {
        // Do not show fields for final shipping location if automation policy is with work creation
        if (closeContainerProfile.ContainerClosingWorkCreationProcess == WHSWarehouseContainerClosingWorkCreationProcess::Automatic)
        {
            putLocation.text('');
            putLocation.visible(false);
        }
        else if (closeContainerProfile.ContainerClosingWorkCreationProcess == WHSWarehouseContainerClosingWorkCreationProcess::AssignContainerToSortPosition)
        {
            putLocation.text(containerTable.defaultSortingLocationId(closeContainerProfile));
            putLocation.skip(true);
        }
        else
        {
            WMSLocationId defaultFinalShipmentLocationId = containerTable.defaultFinalShipmentLocationId(closeContainerProfile);

            if (defaultFinalShipmentLocationId)
            {
                putLocation.text(defaultFinalShipmentLocationId);
                putLocation.skip(true);
            }
        }

        WHSWeightUOM.text(closeContainerProfile.getWeightUnitOfMeasure());
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>SystemWeight</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            UnitOfMeasureSymbol selectedUOMWeightSymbol     = WHSWeightUOM.ensureWeightUOMIsFilled();
            Weight              calculatedContainerWeight   = WHSContainerTable::find(containerTable.ShipmentId, containerTable.ContainerId).calculateWeightInUOM(selectedUOMWeightSymbol);

            weight.realValue(calculatedContainerWeight);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PutLocation</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            WHSLocType locationType = closeContainerProfile.putLocationType();

            InventLocationId containerWarehouseId = containerTable.containerWarehouseId(closeContainerProfile);

            WMSLocation::whsLookupWHSLocType(
                this,
                locationType,
                containerWarehouseId,
                InventLocation::find(containerWarehouseId).InventSiteId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret = super();

            InventLocationId containerWarehouseId = containerTable.containerWarehouseId(closeContainerProfile);

            if (closeContainerProfile.ContainerClosingWorkCreationProcess == WHSWarehouseContainerClosingWorkCreationProcess::AssignContainerToSortPosition)
            {
                ret = ret && WMSLocation::find(PutLocation.valueStr(), containerWarehouseId).checkSortLocation();
            }
            else
            {
                ret = ret && WMSLocation::find(PutLocation.valueStr(), containerWarehouseId).checkFinalShipLocation();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>WHSWeightUOM</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret = super();

            ret = ret && UnitOfMeasure::findBySymbol(this.text());

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>ensureWeightUOMIsFilled</Name>
						<Source><![CDATA[
        /// <summary>
        /// Fill in close container profile weight unit of measure, if no unit of measure is selected.
        /// </summary>
        /// <returns>Selected unit of measure symbol.</returns>
        public UnitOfMeasureSymbol ensureWeightUOMIsFilled()
        {
            if (!WHSWeightUOM.text())
            {
                WHSWeightUOM.text(closeContainerProfile.getWeightUnitOfMeasure());
            }

            return WHSWeightUOM.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@WAX1432</Caption>
		<Frame xmlns="">Dialog</Frame>
		<MaximizeBox xmlns="">No</MaximizeBox>
		<MinimizeBox xmlns="">No</MinimizeBox>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">Dialog</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<WindowResize xmlns="">Fixed</WindowResize>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>SystemWeight</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Text>@WAX2963</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<Style>Strip</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>WorkerGrp</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>WorkerId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Enabled>No</Enabled>
								<Type>ReferenceGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<ExtendedDataType>HcmWorkerRecId</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS81007</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>LocationGrp</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>PutLocation</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>WMSLocationId</ExtendedDataType>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
						</Controls>
						<Caption>@SYS101242</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>WeightGrp</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>Weight</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<AllowNegative>No</AllowNegative>
								<ExtendedDataType>Weight</ExtendedDataType>
								<Mandatory>Yes</Mandatory>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>WHSWeightUOM</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
								<Label>@WAX2494</Label>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
						</Controls>
						<Breakable>No</Breakable>
						<Caption>@WAX:ContainerGrossWeight</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ManifestGrp</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ContainerTrackingId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>ShipCarrierTrackingNum</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<Caption>@WAX1019</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ReleaseGrp</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>ReleaseContainer</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>CheckBox</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@WAX:ReleaseContainer</Label>
							</AxFormControl>
						</Controls>
						<Caption>@SYS4737</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ContainerGrouping</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ContainerGroupingLicensePlateId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>WHSContainerGroupingLicensePlateId</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<Caption>@WAX:ContainerGroupingLabel</Caption>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>OkCancelButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>ButtonOK</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>ButtonCancel</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>