<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>JmgRegistrationTouchReportProgress</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
/// <summary>
/// This form is used if the feature JmgRegistrationTouchReportProgressEnableFeature is on. The feature improves the user experience for the Report progress dialog in the Job Card Device.
/// In the current form the user will be able to report the good and error quantities on his/her current job, as well as to enter license plate or change the current status of his job.
/// </summary>
[SysObsolete('The Job card device has been deprecated, please use Production Floor Execution instead', false, 03\03\2022)]
final public class JmgRegistrationTouchReportProgress extends FormRun
{
    private JmgRegistrationTouchForm        controller;
    private JmgJobBundleProdFeedbackForm    prodFeedbackForm;
    private boolean                         approveClose;
    private JmgJobTable                     jmgJobTable;
    private boolean                         licensePlateRequired;
    private boolean                         batchNumberRequired;
    private boolean                         serialNumberRequired;
    private str                             numpadGoodValue;
    private str                             numpadErrorValue;
    private boolean                         separatorClicked = false;
    private str                             separator = System.Globalization.CultureInfo::GetCultureInfo(xUserInfo::find().PreferredLocale).get_NumberFormat().NumberDecimalSeparator;
    private boolean                         numpadUsed;
    private FormButtonControl               statusToggleLastClicked;
    private FormButtonControl               errorCauseButtonLastClicked;
    private boolean                         isLicensePlateValidated = true;
    private boolean                         isBatchNumberValidated  = true;
    private boolean                         isSerialNumberValidated = true;
    private const int                       licensePlateTabNumber = 1;
    private const int                       batchNumberTabNumber  = 2;
    private const int                       serialNumberTabNumber = 3;
    private const int                       goodQuantityTabNumber = 4;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        if (!SysDictClass::isEqualOrSuperclass(classidget(element.args().parmObject()), classnum(JmgJobBundle)))
        {
            throw error(strfmt("@SYS22862", formstr(JmgJobBundleProdFeedback)));
        }

        FormRun formRun = element.args().caller();
        element.args().record(null);

        boolean calledFromTouchRegistrationForm = formRun && (formRun.name() == formstr(JmgRegistrationTouch));

        if (calledFromTouchRegistrationForm)
        {
            controller = formRun.registrationFormClass();
        }

        super();

        using (var serialBatchControlContext = new JmgReportProgressSerialBatchNumberControlContext())
        {
            this.setJmgTmpJobBundleProdFeedback(calledFromTouchRegistrationForm, formRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJmgTmpJobBundleProdFeedback</Name>
				<Source><![CDATA[
    private void setJmgTmpJobBundleProdFeedback(boolean _calledFromTouchRegistrationForm,FormRun _formRun)
    {
        prodFeedbackForm = new JmgJobBundleProdFeedbackForm(element.args().parmObject(), element.args().parmEnum());
        JmgTmpJobBundleProdFeedback localJmgTmpJobBundleProdFeedback = prodFeedbackForm.getTmpJobBundleProdFeedback();
        jmgJobTable = JmgJobTable::find(localJmgTmpJobBundleProdFeedback.JobId);

        localJmgTmpJobBundleProdFeedback.GoodNow = 0;
        localJmgTmpJobBundleProdFeedback.QtyError = 0;
        localJmgTmpJobBundleProdFeedback.update();

        this.initializeControlsProperties(_calledFromTouchRegistrationForm, _formRun, localJmgTmpJobBundleProdFeedback);
        
        if (!serialNumberRequired)
        {
            localJmgTmpJobBundleProdFeedback.GoodNow = controller.suggestedGoodQuantity(jmgJobTable.JobId);
            localJmgTmpJobBundleProdFeedback.update();

            numpadGoodValue = System.Convert::ToString(localJmgTmpJobBundleProdFeedback.GoodNow);
            GoodQuantityValue.update();
        }

        jmgTmpJobBundleProdFeedback.setTmpData(localJmgTmpJobBundleProdFeedback);

        this.setWhsLicensePlateId();
        this.setInventBatchId(localJmgTmpJobBundleProdFeedback.InventBatch);
        this.setInventSerialId(localJmgTmpJobBundleProdFeedback.InventSerial);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeControlsProperties</Name>
				<Source><![CDATA[
    private void initializeControlsProperties(boolean _calledFromTouchRegistrationForm,FormRun _formRun, JmgTmpJobBundleProdFeedback _localJmgTmpJobBundleProdFeedback)
    {
        GoodQuantityTabPage.caption(strFmt("@SCM:JmgGoodQuantityWithValue", JmgTmpJobBundleProdFeedback.GoodNow));
        boolean jobTypeIsProcess = _localJmgTmpJobBundleProdFeedback.JobType == RouteJobType::Process;
        boolean jobTypeIsSetup   = _localJmgTmpJobBundleProdFeedback.JobType == RouteJobType::Setup;
        boolean isPrimaryProcess = jobTypeIsProcess && (_localJmgTmpJobBundleProdFeedback.RouteOprPriority == RouteOprPriority::Primary);

        if(!isPrimaryProcess)
        {
            licensePlateRequired = false;
            batchNumberRequired  = false;
            serialNumberRequired = false;
            FormTabs.enabled(false);
            FormTabs.skip(true);
        }
        else
        {
            licensePlateRequired = _localJmgTmpJobBundleProdFeedback.checkWhsLicensePlateEnabledForJob();

            if (JmgRegistrationTouchReportProgressBatchSerialNumberEnableFeature::isEnabled())
            {
                batchNumberRequired  = prodFeedbackForm.inventBatchRequired(_localJmgTmpJobBundleProdFeedback);
                serialNumberRequired = prodFeedbackForm.inventSerialRequired(_localJmgTmpJobBundleProdFeedback);
            }
        }

        if (jobTypeIsProcess || jobTypeIsSetup)
        {
            FeedbackStatusToggle.enabled(true);

            // Set to default value if it is editable.
            _localJmgTmpJobBundleProdFeedback.ReportAsFinished = JmgParameters::find().DefaultReportAsFinish;
        }
        else
        {
            FeedbackStatusToggle.enabled(false);
            _localJmgTmpJobBundleProdFeedback.ReportAsFinished = JmgFeedbackStatus::Completed;
        }
                     
        // The Go to job button should be visible only when the user is trying to report progress while being in the context of
        // another job - e.g. when the user is trying to start another job and is asked to complete the already running job
        GoToJobButton.visible(_calledFromTouchRegistrationForm &&(_formRun.activeJobId() != _localJmgTmpJobBundleProdFeedback.JobId));

        this.design().caption(strFmt("@SCM:JmgReportProgressCaption", _localJmgTmpJobBundleProdFeedback.JobRef, jmgJobTable.OprActId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>approveClicked</Name>
				<Source><![CDATA[
    private void approveClicked()
    {
        okButton.setFocus();
        try
        {
            using(var activityContext = JmgRegistrationInstrumentationActivities::initFormParms(JmgInstrumentationLogger::createLogger(formStr(JmgRegistrationTouchReportProgress)).registration().reportFeedback(), formStr(JmgRegistrationTouch)))
            {
                this.logActivityParms(activityContext);

                using (var serialBatchControlContext = new JmgReportProgressSerialBatchNumberControlContext())
                {
                    jmgTmpJobBundleProdFeedback.write(); // save modified data to the temporary table
                    prodFeedbackForm.parmSerialNumberSpecification(jmgTmpSerialNumberSpecification);
                    approveClose = prodFeedbackForm.canClose(jmgTmpJobBundleProdFeedback);

                    if (approveClose)
                    {
                        prodFeedbackForm.onClose(jmgTmpJobBundleProdFeedback);
                        element.close();
                    }
                }
            }
        }
        catch (Exception::Error)
        {
            approveClose = false;
        }
        if (!approveClose)
        {
            Box::stop("@SCM:JobFeedbackError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelClicked</Name>
				<Source><![CDATA[
    private void cancelClicked()
    {
        approveClose = false;
        element.close();
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        if (approveClose)
        {
            element.args().parmEnum(NoYes::No);

            if (controller)
            {
                controller.invokeRefresh(jmgJobTable.JobId);
            }
        }
        else
        {
            element.args().parmEnum(NoYes::Yes);
            prodFeedbackForm.cancel();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNumpad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the error quantity numpad.
    /// The parameters are the 3 FormGroupControls that signify the columns and a boolean that returns true if we are generating the good quantity numpad.
    /// </summary>
    private void initNumpad(FormGroupControl _column1, FormGroupControl _column2, FormGroupControl _column3, boolean _isGoodTab)
    {
        FormButtonControl fbc;
        
        fbc = element.initNumpadButton( '-', _column1, _isGoodTab);
        fbc.OnClicked += eventhandler(element.minusButtonClicked);

        this.setupColumn(7, _column1, _isGoodTab);
                
        fbc = element.initNumpadButton(separator, _column2, _isGoodTab);
        fbc.OnClicked += eventhandler(element.separatorButtonClicked);

        this.setupColumn(8, _column2, _isGoodTab);
        
        element.setupNumpadButton('0', _column2, _isGoodTab);

        fbc = element.initNumpadButton( 'C', _column3, _isGoodTab);
        fbc.OnClicked += eventhandler(element.clearButtonClicked);

        this.setupColumn(9, _column3, _isGoodTab);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumpadValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method called when the user clicked a method. It updates the new numpad value.
    /// </summary>
    /// <param name = "_sender"> The button clicked. </param>
    /// <param name = "_value"> The value of the button clicked. </param>
    private void setNumpadValue(FormControl _sender, str _value)
    {
        boolean parsed;
        System.Decimal result;

        if (this.isGoodQuantityGroupButton(_sender))
        {
            numpadGoodValue += _value;
            [parsed, result] = this.parseNumpadValue(numpadGoodValue);

            if (parsed)
            {
                jmgTmpJobBundleProdFeedback.GoodNow = result;
                GoodQuantityValue.update();
            }
        }
        else
        {
            numpadErrorValue += _value;
            [parsed, result] = this.parseNumpadValue(numpadErrorValue);

            if (parsed)
            {
                this.errorQuantity(true,  result);
                ErrorQuantityValue.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseNumpadValue</Name>
				<Source><![CDATA[
    private container parseNumpadValue(str _value)
    {
        System.Decimal result;
        boolean isParsed = System.Decimal::TryParse(
                                    _value,
                                    System.Globalization.NumberStyles::Number,
                                    System.Globalization.CultureInfo::GetCultureInfo(xUserInfo::find().PreferredLocale).get_NumberFormat(),
                                    byRef result);
        isParsed = (isParsed || !_value || _value == "-");
        if (!isParsed)
        {
            warning("@SCM:QtyReal");
        }
        return [isParsed,result];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupColumn</Name>
				<Source><![CDATA[
    /// <summary>
    /// It generates a column of the numpad
    /// </summary>
    /// <param name = "_lastButton"> The button that should be at the to of the column</param>
    /// <param name = "_formGroupControl"> The form group that the column should be added</param>
    /// <param name = "_isGoodTab"> A boolean with values : true if we are setting a column for the good numpad , false : for the error numpad </param>
    private void setupColumn(int _firstButton, FormGroupControl _formGroupControl, boolean _isGoodTab)
    {
        for (int i = _firstButton; i > 0; i-=3)
        {
            this.setupNumpadButton(int2Str(i), _formGroupControl, _isGoodTab);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumpadVariables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the global numpad variables.
    /// </summary>
    private void setNumpadVariables(boolean _numpadUsed, boolean _separatorClicked)
    {
        numpadUsed          = _numpadUsed;
        separatorClicked    = _separatorClicked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupNumpadButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method that creates one numpad and setups the event handler for the number button.
    /// </summary>
    /// <param name = "_number"> The number of the button. </param>
    /// <param name = "_group"> The group that the button should be included in. </param>
    /// <param name = "_isGoodTab"> A boolean that is true if this is part of the good quantity numpad; otherwise false in the error quantity numpad.</param>
    private void setupNumpadButton(str _number,  FormGroupControl _group, boolean _isGoodTab)
    {
        FormButtonControl fbc;
        fbc = this.initNumpadButton( _number, _group, _isGoodTab);
        fbc.OnClicked += eventhandler(element.numpadButtonClicked);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNumpadButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method that creates one numpad button.
    /// </summary>
    /// <param name = "_buttonText"> The text of the current button. </param>
    /// <param name = "_group"> The group in which the new button should be included. </param>
    /// <param name = "_isGoodTab"> True if it's a good quantity group; otherwise false. </param>
    /// <returns></returns>
    private FormButtonControl initNumpadButton(str _buttonText, FormGroupControl _group, boolean _isGoodTab)
    {
        FormButtonControl fbc;
        
        if(_isGoodTab)
        {
            fbc = _group.addControl(FormControlType::Button,'Good'+_buttonText);
        }
        else
        {
            fbc = _group.addControl(FormControlType::Button,'Error'+_buttonText);
        }
        fbc.text(_buttonText);
        fbc.visible(true);
                        
        return fbc ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGoodQuantityGroupButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the button clicked is coming from the Good Quantity tab or the Error quantity tab
    /// </summary>
    /// <param name = "_sender"> The button clicked. </param>
    /// <returns>True if the button is part of the good quantity tab, otherwise false.</returns>
    private boolean isGoodQuantityGroupButton(FormControl _sender)
    {
        return strScan(_sender.name(),'Good', 1, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numpadButtonClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// The event handler of the click of the number buttons of the numpad.
    /// </summary>
    private void numpadButtonClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        str value;

        if (!numpadUsed)
        {
            numpadUsed = true;
            if (this.isGoodQuantityGroupButton(_sender))
            {
                numpadGoodValue = '';
            }
            else
            {
                numpadErrorValue = '';
            }
        }
        value = _sender.labelText();
        this.setNumpadValue(_sender, value);

    }

]]></Source>
			</Method>
			<Method>
				<Name>clearButtonClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// The event handler for the click of the clear button.
    /// </summary>
    private void clearButtonClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        this.setNumpadVariables(true, false);
        if (this.isGoodQuantityGroupButton(_sender))
        {
            jmgTmpJobBundleProdFeedback.GoodNow = 0;
            numpadGoodValue = '';
            GoodQuantityValue.update();
        }
        else
        {
            numpadErrorValue = '';
            this.errorQuantity(true,  0);
            ErrorQuantityValue.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>separatorButtonClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// The event handler for the click of the separator button.
    /// </summary>
    private void separatorButtonClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        if (!separatorClicked)
        {
            separatorClicked = true;
            if (this.isGoodQuantityGroupButton(_sender))
            {
                if (this.buttonClickedFirstTimeOrEmpty(numpadGoodValue))
                {
                    numpadGoodValue = '0';
                }
            }
            else
            {
                if (this.buttonClickedFirstTimeOrEmpty(numpadErrorValue))
                {
                    numpadErrorValue = '0';
                }
            }
            this.setNumpadValue(_sender, separator);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>minusButtonClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// The event handler for the click of the minus button.
    /// </summary>
    private void minusButtonClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        if (this.isGoodQuantityGroupButton(_sender))
        {
            if (this.buttonClickedFirstTimeOrEmpty(numpadGoodValue))
            {
                numpadGoodValue = '-';
                GoodQuantityValue.update();
            }
        }
        else
        {
            if (this.buttonClickedFirstTimeOrEmpty(numpadErrorValue))
            {
                numpadErrorValue = '-';
                ErrorQuantityValue.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toggleJobStatusButtonClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// The event handler for the click of the status toggle button.
    /// </summary>
    private void toggleJobStatusButtonClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        jmgTmpJobBundleProdFeedback.ReportAsFinished = str2Num(_sender.name());
        
        FormButtonControl currentButtonClicked = _sender;

        // When clicked, a toggle button automatically changes value. 
        // However in this case we need to keep the state even if the user clicks twice.
        if (statusToggleLastClicked == currentButtonClicked) 
        {
            statusToggleLastClicked.toggleValue(true);
            return;
        }

        if (statusToggleLastClicked)
        {
            statusToggleLastClicked.toggleValue(false);
        }

        statusToggleLastClicked = currentButtonClicked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toggleErrorButtonClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// The event handler for the click of the error cause toggle button.
    /// </summary>
    private void toggleErrorButtonClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        ProdErrorCause localStatus;
        FormButtonControl currentButtonClicked = _sender;

        if (errorCauseButtonLastClicked)
        {
            errorCauseButtonLastClicked.toggleValue(false);
        }
        if (errorCauseButtonLastClicked == currentButtonClicked)
        {
            localStatus = ProdErrorCause::None;
            errorCauseButtonLastClicked = null;
        }
        else
        {
            localStatus = str2Num(_sender.name());
            errorCauseButtonLastClicked = currentButtonClicked;
        }

        Qty errQty = JmgErrorSpecificationForm::decodeErrorSpecification(jmgTmpJobBundleProdFeedback.ErrorSpecification).QtyError;
        jmgTmpJobBundleProdFeedback.ErrorSpecification = JmgErrorSpecificationForm::encodeValue(localStatus, errQty, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonClickedFirstTimeOrEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the current button was clicked for the first time or the the numpad value is empty
    /// </summary>
    /// <param name = "_numpadValue"> The value of the current numpad that is in use. </param>
    /// <returns> True if the separator button was clicked for the first time or the the numpad value is empty; otherwise false. </returns>
    private boolean buttonClickedFirstTimeOrEmpty(str _numpadValue)
    {
        if(_numpadValue == '' || !numpadUsed)
        {
            numpadUsed = true;
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayGoodQuantityValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// The edit method of the Good quantity
    /// </summary>
    /// <param name = "_set"> The boolean figuring if we are setting the value or just reading. </param>
    /// <param name = "_numpadGoodValue"> The value to be set if _set is true. </param>
    /// <returns> The value of the good quantity. </returns>
    public edit str displayGoodQuantityValue(boolean _set, str _numpadGoodValue = numpadGoodValue)
    {
        boolean parsed;
        System.Decimal result;
        [parsed, result] = this.parseNumpadValue(_numpadGoodValue);

        if (parsed)
        {
            numpadGoodValue = _numpadGoodValue;
        }
        else
        {
            return _numpadGoodValue;
        }
        if (_set)
        {
            separatorClicked    = false;
            jmgTmpJobBundleProdFeedback.GoodNow = result; 
        }
        GoodQuantityTabPage.caption(strFmt("@SCM:JmgGoodQuantityWithValue", jmgTmpJobBundleProdFeedback.GoodNow));

        return numpadGoodValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayErrorQuantityValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// The edit method of the Error quantity
    /// </summary>
    /// <param name = "_set"> The boolean figuring if we are setting the value or just reading. </param>
    /// <param name = "_numpadErrorValue"> The value to be set if _set is true. </param>
    /// <returns> The value of the Error quantity. </returns>
    public edit str displayErrorQuantityValue(boolean _set, str _numpadErrorValue = numpadErrorValue)
    {
        boolean parsed;
        System.Decimal result;
        [parsed, result] = this.parseNumpadValue(_numpadErrorValue);

        if (parsed)
        {
            numpadErrorValue = _numpadErrorValue;
        }
        else
        {
            return _numpadErrorValue;
        }
        if (_set)
        {
            separatorClicked    = false;
            this.errorQuantity(true,  result);
            ErrorQuantityDetails.update();
        }
                                
        return numpadErrorValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorQuantity</Name>
				<Source><![CDATA[
    public edit ProdReportedError errorQuantity(boolean _set, Qty _value)
    {
        if (_set)
        {
            JmgTmpErrorSpecification jmgTmpErrorSpecification = JmgErrorSpecificationForm::decodeErrorSpecification(jmgTmpJobBundleProdFeedback.ErrorSpecification);
            if (!jmgTmpErrorSpecification.PdsCWQtyError)
            {
                jmgTmpErrorSpecification.PdsCWQtyError = PdsCatchWeight::cwQty(jmgJobTable.ItemId, _value);
            }
            jmgTmpJobBundleProdFeedback.ErrorSpecification = JmgErrorSpecificationForm::encodeValue(jmgTmpErrorSpecification.ErrorCause, _value, jmgTmpErrorSpecification.PdsCWQtyError);
        }
        ErrorTabPage.caption(strFmt("@SCM:JmgErrorQuantityWithValue", jmgTmpJobBundleProdFeedback.errorNow()));
                
        return jmgTmpJobBundleProdFeedback.errorNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWhsLicensePlateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the License Plate Id in case the auto generation feature is on. Also hides or shows the license plate field.
    /// </summary>
    private void setWhsLicensePlateId()
    {
        WHSLicensePlateId.allowEdit(licensePlateRequired);
        LicensePlateTab.visible(licensePlateRequired);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Batch Number Id in case the auto generation feature is on. Also hides or shows the batch number field.
    /// </summary>
    private void setInventBatchId(InventBatchId _inventBatchId)
    {
        InventBatchId.allowEdit(batchNumberRequired);
        BatchNumberTab.visible(batchNumberRequired);

        if (batchNumberRequired && _inventBatchId)
        {
            InventBatchId.allowEdit(false);
            BatchNumberTab.caption("@SCM:JmgBatchNumberOk");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventSerialId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Serial Number Id in case the auto generation feature is on. Also hides or shows the serial number field.
    /// </summary>
    private void setInventSerialId(InventSerialId _inventSerialId)
    {
        InventSerialId.allowEdit(serialNumberRequired);
        SerialNumberTab.visible(serialNumberRequired);

        if (serialNumberRequired)
        {
            GoodQuantityTabPage.visible(false);
            ErrorTabPage.visible(false);
            SerialNumberGrid.visible(true);

            if (_inventSerialId)
            {
                jmgTmpJobBundleProdFeedback.GoodNow = 1;
                InventSerialId.allowEdit(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectNextTab</Name>
				<Source><![CDATA[
    private void selectNextTab()
    {
        int nextTab = FormTabs.tabValue() + 1;
        if (nextTab == batchNumberTabNumber && !batchNumberRequired)
        {
            nextTab ++;
        }
        if (nextTab == serialNumberTabNumber && !serialNumberRequired)
        {
            nextTab ++;
        }

        FormTabs.tab(nextTab);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSerialNumber</Name>
				<Source><![CDATA[
    private void addSerialNumber()
    {
        // Do not add an empty or already added serial mumber to the grid
        if (!jmgTmpJobBundleProdFeedback.InventSerial || this.serialNumberExists(jmgTmpJobBundleProdFeedback.InventSerial))
        {
            if (!jmgTmpJobBundleProdFeedback.InventSerial)
            {
                Info("@SCM:JmgRegistrationTouchReportProgressSerialNumberCannotEmptyError");
            }
            else
            {
                Info(strFmt("@SCM:JmgRegistrationTouchReportProgressSerialNumberIsRegisteredError", jmgTmpJobBundleProdFeedback.InventSerial));
            }

            InventSerialId.setFocus();
            return;
        }

        // Add the serial number to the grid
        jmgTmpSerialNumberSpecification.JobId              = jmgTmpJobBundleProdFeedback.JobId;
        jmgTmpSerialNumberSpecification.SerialNumber       = jmgTmpJobBundleProdFeedback.InventSerial;
        jmgTmpSerialNumberSpecification.QtyGood            = 1;
        jmgTmpSerialNumberSpecification.SequenceNumber     = this.getLastSequenceNumberSerialNumberSpecification(jmgTmpJobBundleProdFeedback.JobId) + 1;
        // clear the other fields
        jmgTmpSerialNumberSpecification.ErrorCause         = ProdErrorCause::None;
        jmgTmpSerialNumberSpecification.QtyError           = 0;
        jmgTmpSerialNumberSpecification.PdsCWQtyError      = 0;
        jmgTmpSerialNumberSpecification.PdsCWQtyGood       = 0;
        jmgTmpSerialNumberSpecification.ErrorSpecification = '';
        jmgTmpSerialNumberSpecification.Description        = '';

        jmgTmpSerialNumberSpecification.insert();

        jmgTmpSerialNumberSpecification_ds.research();

        jmgTmpJobBundleProdFeedback.GoodNow += jmgTmpSerialNumberSpecification.QtyGood;
        jmgTmpJobBundleProdFeedback.InventSerial = null;

        SerialNumberTab.caption(strFmt("@SCM:JmgSerialNumberOk", jmgTmpJobBundleProdFeedback.GoodNow));

        InventSerialId.setFocus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastSequenceNumberSerialNumberSpecification</Name>
				<Source><![CDATA[
    private int getLastSequenceNumberSerialNumberSpecification(JmgJobId _jobId)
    {
        JmgTmpSerialNumberSpecification jmgTmpSerialNumberSpecificationLocal;
        jmgTmpSerialNumberSpecificationLocal.setTmpData(jmgTmpSerialNumberSpecification);

        select maxof(SequenceNumber) from jmgTmpSerialNumberSpecificationLocal
            where jmgTmpSerialNumberSpecificationLocal.JobId == _jobId;

        return jmgTmpSerialNumberSpecificationLocal.SequenceNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serialNumberExists</Name>
				<Source><![CDATA[
    private boolean serialNumberExists(InventSerialId _inventSerialNumber)
    {
        JmgTmpSerialNumberSpecification jmgTmpSerialNumberSpecificationLocal;
        jmgTmpSerialNumberSpecificationLocal.setTmpData(jmgTmpSerialNumberSpecification);

        select RecId from jmgTmpSerialNumberSpecificationLocal
            where jmgTmpSerialNumberSpecificationLocal.SerialNumber == _inventSerialNumber;

        return jmgTmpSerialNumberSpecificationLocal.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setErrorSpecification</Name>
				<Source><![CDATA[
    private JmgErrorSpecification setErrorSpecification(JmgTmpSerialNumberSpecification _modifiedSerialNumberSpecification)
    {
        if (!_modifiedSerialNumberSpecification.PdsCWQtyError)
        {
            _modifiedSerialNumberSpecification.PdsCWQtyError = PdsCatchWeight::cwQty(jmgJobTable.ItemId, _modifiedSerialNumberSpecification.QtyError);
        }

        return JmgErrorSpecificationForm::encodeValue(_modifiedSerialNumberSpecification.ErrorCause, _modifiedSerialNumberSpecification.QtyError, _modifiedSerialNumberSpecification.PdsCWQtyError);
    }

]]></Source>
			</Method>
			<Method>
				<Name>encodeErrorSpecification</Name>
				<Source><![CDATA[
    private JmgErrorSpecification encodeErrorSpecification()
    {
        JmgErrorSpecification result = "";
        JmgTmpSerialNumberSpecification jmgTmpSerialNumberSpecificationLocal;
        jmgTmpSerialNumberSpecificationLocal.setTmpData(jmgTmpSerialNumberSpecification);

        while select jmgTmpSerialNumberSpecificationLocal
            where jmgTmpSerialNumberSpecificationLocal.Description != ''
        {
            result += JmgErrorSpecificationForm::encodeValue(jmgTmpSerialNumberSpecificationLocal.ErrorCause, jmgTmpSerialNumberSpecificationLocal.QtyError, jmgTmpSerialNumberSpecificationLocal.PdsCWQtyError);
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logActivityParms</Name>
				<Source><![CDATA[
    private void logActivityParms(SysInstrumentationActivityContext _activityContext)
    {
        _activityContext.addCustomProperty(JmgRegistrationInstrumentationActivities::ParmIsSerialRequired, any2Str(serialNumberRequired));
        _activityContext.addCustomProperty(JmgRegistrationInstrumentationActivities::ParmIsBatchRequired, any2Str(batchNumberRequired));
        _activityContext.addCustomProperty(JmgRegistrationInstrumentationActivities::ParmIsLicensePlateRequired, any2Str(licensePlateRequired));
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>JmgTmpJobBundleProdFeedback</Name>
				<Methods>
					<Method>
						<Name>totalQuantityRequested</Name>
						<Source><![CDATA[
        public display RouteOprQtyToOpr totalQuantityRequested()
        {
            return jmgJobTable.CalcQty;
        }

]]></Source>
					</Method>
					<Method>
						<Name>totalQuantityCompleted</Name>
						<Source><![CDATA[
        public display JmgQtyGood totalQuantityCompleted()
        {
            return jmgJobTable.goodQuantity();
        }

]]></Source>
					</Method>
					<Method>
						<Name>StartedQuantity</Name>
						<Source><![CDATA[
        public display JmgQtyGood StartedQuantity()
        {
            return jmgJobTable.startedQuantity();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;
        
            ret = super();

            if (ret && licensePlateRequired && jmgTmpJobBundleProdFeedback.WHSLicensePlate)
            {
                ret = prodFeedbackForm.checkWHSWorkTableWithSameLicensePlate(jmgTmpJobBundleProdFeedback);
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;
        
            ret = super();
            
            if (licensePlateRequired &&
                !jmgTmpJobBundleProdFeedback.WHSLicensePlate &&
                JmgRegistrationSetup::findConfigurationForCurrentUser(NoYes::Yes).GenerateLP)
            {
                jmgTmpJobBundleProdFeedback.WHSLicensePlate = WHSLicensePlate::generateLicensePlateId(jmgJobTable.ItemId, InventTable::find(jmgJobTable.ItemId).inventTableModuleInvent().UnitId);
                LicensePlateTab.caption("@SCM:JmgLicensePlateOk");
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>GoodNow</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                prodFeedbackForm.quantityChanged(jmgTmpJobBundleProdFeedback, true);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>InventBatch</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret = true;

                if (!jmgTmpJobBundleProdFeedback.skipBatchNumberValidation(jmgJobTable.ItemId) && jmgTmpJobBundleProdFeedback.InventBatch)
                {
                    Query query = JmgJobBundleProdFeedbackForm::buildBatchNumberLookupQuery(jmgTmpJobBundleProdFeedback.JobRef, jmgTmpJobBundleProdFeedback.ItemId, jmgTmpJobBundleProdFeedback.InventTransId, jmgTmpJobBundleProdFeedback.InventBatch);
                    QueryRun qr = new QueryRun(query);
                    if (!qr.next())
                    {
                        ProdTable prodOrder = ProdTable::find(jmgTmpJobBundleProdFeedback.JobRef);
                        str typeOfOrder = prodOrder.ProdType == ProdType::Process? "@PDS1470" : "@SYS89639";
                        ret = checkFailed(strFmt("@SCM:JmgRegistrationTouchReportProgressNoBatchNumberForOrderError", jmgTmpJobBundleProdFeedback.InventBatch, typeOfOrder, jmgTmpJobBundleProdFeedback.JobRef));
                    }
                }

                isBatchNumberValidated = ret;
                if (ret && jmgTmpJobBundleProdFeedback.InventBatch)
                {
                    BatchNumberTab.caption("@SCM:JmgBatchNumberOk");
                }
                else
                {
                    BatchNumberTab.caption("@SYS53635");
                }

                if (ret && FormTabs.tabValue() == batchNumberTabNumber && jmgTmpJobBundleProdFeedback.InventBatch)
                {
                    element.selectNextTab();
                }
        
                return ret;
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(InventDim), _formControl, true);
                sysTableLookup.addLookupfield(fieldNum(InventDim, InventBatchId), true);

                Query query = JmgJobBundleProdFeedbackForm::buildBatchNumberLookupQuery(jmgTmpJobBundleProdFeedback.JobRef, jmgTmpJobBundleProdFeedback.ItemId, jmgTmpJobBundleProdFeedback.InventTransId);

                sysTableLookup.parmQuery(query);
                sysTableLookup.performFormLookup();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>InventSerial</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(InventDim), _formControl, true);
                sysTableLookup.addLookupfield(fieldNum(InventDim, InventSerialId), true);

                Query query = JmgJobBundleProdFeedbackForm::buildSerialNumberLookupQuery(jmgTmpJobBundleProdFeedback.JobRef, jmgTmpJobBundleProdFeedback.ItemId, jmgTmpJobBundleProdFeedback.InventTransId);

                sysTableLookup.parmQuery(query);
                sysTableLookup.performFormLookup();
            }

]]></Source>
							</Method>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret = true;

                if (!jmgTmpJobBundleProdFeedback.skipSerialNumberValidation(jmgJobTable.ItemId) && jmgTmpJobBundleProdFeedback.InventSerial)
                {
                    Query query = JmgJobBundleProdFeedbackForm::buildSerialNumberLookupQuery(jmgTmpJobBundleProdFeedback.JobRef, jmgTmpJobBundleProdFeedback.ItemId, jmgTmpJobBundleProdFeedback.InventTransId, jmgTmpJobBundleProdFeedback.InventSerial);
                    QueryRun qr = new QueryRun(query);
                    if (!qr.next())
                    {
                        ProdTable prodOrder = ProdTable::find(jmgTmpJobBundleProdFeedback.JobRef);
                        str typeOfOrder = prodOrder.ProdType == ProdType::Process? "@PDS1470" : "@SYS89639";
                        ret = checkFailed(strFmt("@SCM:JmgRegistrationTouchReportProgressNoSerialNumberForOrderError", jmgTmpJobBundleProdFeedback.InventSerial, typeOfOrder, jmgTmpJobBundleProdFeedback.JobRef));
                    }
                }

                isSerialNumberValidated = ret;
                if (ret && jmgTmpJobBundleProdFeedback.InventSerial)
                {
                    SerialNumberTab.caption(strFmt("@SCM:JmgSerialNumberOk", "@SYS301992"));
                }
                else
                {
                    SerialNumberTab.caption("@SYS477");
                }

                if (ret && FormTabs.tabValue() == serialNumberTabNumber && jmgTmpJobBundleProdFeedback.InventSerial)
                {
                    element.addSerialNumber();
                }
        
                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>WHSLicensePlate</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;
        
                ret = super();

                isLicensePlateValidated = ret;
                if (ret && jmgTmpJobBundleProdFeedback.WHSLicensePlate)
                {
                    LicensePlateTab.caption("@SCM:JmgLicensePlateOk");
                }
                else
                {
                    LicensePlateTab.caption("@WAX359");
                }
                if (FormTabs.tabValue() == licensePlateTabNumber && jmgTmpJobBundleProdFeedback.WHSLicensePlate)
                {
                    element.selectNextTab();
                }
        
                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>JmgTmpSerialNumberSpecification</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void init()
        {
            super();

            this.query().dataSourceTable(tableNum(JmgTmpSerialNumberSpecification))
                .addSortField(fieldNum(JmgTmpSerialNumberSpecification, SequenceNumber), SortOrder::Descending);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>FormTabs</Name>
				<Type>Tab</Type>
				<Methods>
					<Method>
						<Name>tabChanged</Name>
						<Source><![CDATA[
        public void tabChanged(int _FromTab, int _ToTab)
        {
            super(_FromTab, _ToTab);
            element.setNumpadVariables(false, false);
            
            if(_FromTab == licensePlateTabNumber && _ToTab != licensePlateTabNumber &&  !isLicensePlateValidated)
            {
                FormTabs.tab(licensePlateTabNumber);
            }

            if(_FromTab == batchNumberTabNumber && _ToTab != batchNumberTabNumber &&  !isBatchNumberValidated)
            {
                FormTabs.tab(batchNumberTabNumber);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ContinueLicensePlateTabButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.selectNextTab();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ContinueBatchNumberTabButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.selectNextTab();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RegisterSerialNumberTabButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            if (jmgTmpJobBundleProdFeedback.InventSerial)
            {
                element.addSerialNumber();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ErrorCause</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();

            jmgTmpSerialNumberSpecification.ErrorSpecification = element.setErrorSpecification(jmgTmpSerialNumberSpecification);
            jmgTmpJobBundleProdFeedback.ErrorSpecification     = element.encodeErrorSpecification();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ScrapButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            
            if (jmgTmpSerialNumberSpecification.Description)
            {
                jmgTmpJobBundleProdFeedback.QtyError -= jmgTmpSerialNumberSpecification.QtyError;

                jmgTmpSerialNumberSpecification.QtyError = 0;
                jmgTmpSerialNumberSpecification.QtyGood = 1;
                jmgTmpSerialNumberSpecification.Description = '';
                jmgTmpSerialNumberSpecification.ErrorCause = ProdErrorCause::None;
                jmgTmpSerialNumberSpecification.ErrorSpecification = '';

                jmgTmpJobBundleProdFeedback.GoodNow += jmgTmpSerialNumberSpecification.QtyGood;
            }
            else
            {
                jmgTmpJobBundleProdFeedback.GoodNow -= jmgTmpSerialNumberSpecification.QtyGood;

                jmgTmpSerialNumberSpecification.QtyError = 1;
                jmgTmpSerialNumberSpecification.QtyGood = 0;
                jmgTmpSerialNumberSpecification.Description = 'Scrap';
                jmgTmpSerialNumberSpecification.ErrorSpecification = element.setErrorSpecification(jmgTmpSerialNumberSpecification);

                jmgTmpJobBundleProdFeedback.QtyError += jmgTmpSerialNumberSpecification.QtyError;
            }

            jmgTmpSerialNumberSpecification.update();
            jmgTmpSerialNumberSpecification_ds.research();

            jmgTmpJobBundleProdFeedback.ErrorSpecification = element.encodeErrorSpecification();

            SerialNumberTab.caption(strFmt("@SCM:JmgSerialNumberOk", jmgTmpJobBundleProdFeedback.GoodNow));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DeleteButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            jmgTmpJobBundleProdFeedback.GoodNow  -= jmgTmpSerialNumberSpecification.QtyGood;
            jmgTmpJobBundleProdFeedback.QtyError -= jmgTmpSerialNumberSpecification.QtyError;
            jmgTmpSerialNumberSpecification.delete();
            jmgTmpSerialNumberSpecification_ds.research();

            jmgTmpJobBundleProdFeedback.ErrorSpecification = element.encodeErrorSpecification();

            SerialNumberTab.caption(strFmt("@SCM:JmgSerialNumberOk", jmgTmpJobBundleProdFeedback.GoodNow));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GoodQuantityTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>initialize</Name>
						<Source><![CDATA[
        protected void initialize()
        {
            super();
            separatorClicked = false;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ContinueGoodTabButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            element.selectNextTab();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GoodQuantityNumpad</Name>
				<Type>Group</Type>
				<Methods>
					<Method>
						<Name>initialize</Name>
						<Source><![CDATA[
        protected void initialize()
        {
            super();
           
            numpadGoodValue = '';

            element.initNumpad(GoodColumn1, GoodColumn2, GoodColumn3, true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ErrorQuantityNumpadButtons</Name>
				<Type>Group</Type>
				<Methods>
					<Method>
						<Name>initialize</Name>
						<Source><![CDATA[
        protected void initialize()
        {
            super();
            
            numpadErrorValue = '';
            
            element.initNumpad(ErrorColumn1, ErrorColumn2, ErrorColumn3, false);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ErrorCauseToggleButtonsGroup</Name>
				<Type>Group</Type>
				<Methods>
					<Method>
						<Name>initialize</Name>
						<Source><![CDATA[
        protected void initialize()
        {
            super();
    
            DictEnum enum = new DictEnum(enumName2Id(enumStr(ProdErrorCause)));
            int      i;
            FormButtonControl fbc;
    
    
            for (i=0; i < enum.values(); i++)
            {
                if(enum.value2Label(i))
                {
                    fbc = ErrorCauseToggleButtonsGroup.addControl(FormControlType::Button,strFmt("%1 Error",enum.index2Value(i)));
                    fbc.text(enum.value2Label(i));
                    fbc.toggleButton(true);
                    fbc.OnClicked += eventhandler(element.toggleErrorButtonClicked);
                    fbc.toggleValue(false);
                }

            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FeedbackStatusToggle</Name>
				<Type>Group</Type>
				<Methods>
					<Method>
						<Name>initialize</Name>
						<Source><![CDATA[
        protected void initialize()
        {
            super();
            
            DictEnum enum = new DictEnum(enumName2Id(enumStr(JmgFeedbackStatus)));
            int      i;
            FormButtonControl fbc;
            
            JmgFeedbackStatus initialStatus = JmgParameters::find().DefaultReportAsFinish;
            
            for (i=0; i < enum.values(); i++)
            {
                fbc = FeedbackStatusToggle.addControl(FormControlType::Button,strFmt("%1 Status",enum.index2Value(i)));
                fbc.text(enum.value2Label(i));
                fbc.toggleButton(true);
                fbc.OnClicked += eventhandler(element.toggleJobStatusButtonClicked);
            
                if (initialStatus == i)
                {
                    fbc.toggleValue(true);
                    statusToggleLastClicked = fbc;
                    jmgTmpJobBundleProdFeedback.ReportAsFinished = initialStatus;
                }
                else
                {
                    fbc.toggleValue(false);
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GoToJobButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
    
            if (controller)
            {
                controller.parmMoveToJobId(jmgTmpJobBundleProdFeedback.JobId);
    
                if (!controller.focusOnJob(JmgJobTable::find(jmgTmpJobBundleProdFeedback.JobId)))
                {
                    Box::stop("@SCM:CouldNotOpenJob");
                }
            }
    
            element.cancelClicked();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CancelButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();
            element.cancelClicked();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OKButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            
            if (prodFeedbackForm.validateMaxReportQuantityPrompt(JmgTmpJobBundleProdFeedback))
            {
                prodFeedbackForm.recalculatePickingList(JmgTmpJobBundleProdFeedback);
                element.approveClicked();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<IsObsolete>Yes</IsObsolete>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>JmgTmpJobBundleProdFeedback</Name>
			<Table>JmgTmpJobBundleProdFeedback</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CalcQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ErrorSpecification</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GoodNow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventBatch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSerial</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JmgTermRegRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JobDescription</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JobId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JobRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JobType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWCalcQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWGoodNow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWQtyError</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWQtyGood</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProdJournalIdBOM</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QtyError</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QtyGood</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportAsFinished</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RouteOprPriority</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WHSLicensePlate</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>JmgTmpSerialNumberSpecification</Name>
			<Table>JmgTmpSerialNumberSpecification</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ErrorCause</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWQtyError</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWQtyGood</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QtyError</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QtyGood</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SerialNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<StartPosition>Last</StartPosition>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<ArrangeMethod xmlns="">Auto</ArrangeMethod>
		<Caption xmlns="">@SCM:ShopFloorReportProgress</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<SetCompany xmlns="">No</SetCompany>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">Workspace</Style>
		<WindowType xmlns="">Workspace</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>TableRowHeaderGroup</Name>
				<ExtendedStyle>tabularFields_rowHeader</ExtendedStyle>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStaticTextControl">
						<Name>CaptionProductionOrder</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ExtendedStyle>staticText_mediumFont</ExtendedStyle>
						<Type>StaticText</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Text></Text>
					</AxFormControl>
				</Controls>
				<AllowUserSetup>No</AllowUserSetup>
				<ArrangeMethod>None</ArrangeMethod>
				<FrameType>None</FrameType>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>MainFormGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabControl">
						<Name>FormTabs</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Tab</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormTabPageControl">
								<Name>LicensePlateTab</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>TabPage</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>LicensePlateGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>WHSLicensePlateId</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>WHSLicensePlate</DataField>
												<DataSource>JmgTmpJobBundleProdFeedback</DataSource>
												<Label>@WAX359</Label>
												<LabelPosition>Above</LabelPosition>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>ContinueLicensePlateTabButton</Name>
												<Height>70</Height>
												<Type>CommandButton</Type>
												<Width>140</Width>
												<FormControlExtension
													i:nil="true" />
												<Big>Yes</Big>
												<Command>Enter</Command>
												<DefaultButton>Yes</DefaultButton>
												<NormalImage>Forward</NormalImage>
												<Text>@SYS18701</Text>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>Auto</ArrangeMethod>
										<Columns>3</Columns>
										<Caption>@WAX359</Caption>
									</AxFormControl>
								</Controls>
								<Columns>3</Columns>
								<Caption>@WAX359</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormTabPageControl">
								<Name>BatchNumberTab</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>TabPage</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>BatchNumberGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventBatchId</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventBatch</DataField>
												<DataSource>JmgTmpJobBundleProdFeedback</DataSource>
												<LabelPosition>Above</LabelPosition>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>ContinueBatchNumberTabButton</Name>
												<Height>70</Height>
												<Type>CommandButton</Type>
												<Width>140</Width>
												<FormControlExtension
													i:nil="true" />
												<Big>Yes</Big>
												<Command>Enter</Command>
												<DefaultButton>Yes</DefaultButton>
												<NormalImage>Forward</NormalImage>
												<Text>@SYS18701</Text>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>Auto</ArrangeMethod>
										<Columns>3</Columns>
										<Caption>@SYS53635</Caption>
									</AxFormControl>
								</Controls>
								<Columns>3</Columns>
								<Caption>@SYS53635</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormTabPageControl">
								<Name>SerialNumberTab</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>TabPage</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SerialNumberGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventSerialId</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventSerial</DataField>
												<DataSource>JmgTmpJobBundleProdFeedback</DataSource>
												<LabelPosition>Above</LabelPosition>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>RegisterSerialNumberTabButton</Name>
												<Height>70</Height>
												<Type>CommandButton</Type>
												<Width>140</Width>
												<FormControlExtension
													i:nil="true" />
												<Big>Yes</Big>
												<Command>Enter</Command>
												<DefaultButton>Yes</DefaultButton>
												<NormalImage>Forward</NormalImage>
												<Text>@SYS32121</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGridControl">
												<Name>SerialNumberGrid</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Grid</Type>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>QtyGood</Name>
														<Type>Real</Type>
														<Visible>No</Visible>
														<FormControlExtension
															i:nil="true" />
														<DataField>QtyGood</DataField>
														<DataSource>JmgTmpSerialNumberSpecification</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>PdsCWQtyGood</Name>
														<Type>Real</Type>
														<Visible>No</Visible>
														<FormControlExtension
															i:nil="true" />
														<DataField>PdsCWQtyGood</DataField>
														<DataSource>JmgTmpSerialNumberSpecification</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>QtyError</Name>
														<Type>Real</Type>
														<Visible>No</Visible>
														<FormControlExtension
															i:nil="true" />
														<DataField>QtyError</DataField>
														<DataSource>JmgTmpSerialNumberSpecification</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>PdsCWQtyError</Name>
														<Type>Real</Type>
														<Visible>No</Visible>
														<FormControlExtension
															i:nil="true" />
														<DataField>PdsCWQtyError</DataField>
														<DataSource>JmgTmpSerialNumberSpecification</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>SerialNumber</Name>
														<Enabled>No</Enabled>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>SerialNumber</DataField>
														<DataSource>JmgTmpSerialNumberSpecification</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Description</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>Description</DataField>
														<DataSource>JmgTmpSerialNumberSpecification</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>ErrorCause</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>ComboBox</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>ErrorCause</DataField>
														<DataSource>JmgTmpSerialNumberSpecification</DataSource>
														<Items />
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>ScrapButton</Name>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<Big>Yes</Big>
														<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
														<NeedsRecord>Yes</NeedsRecord>
														<Text>@SYS1032</Text>
														<ToggleButton>None</ToggleButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>DeleteButton</Name>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<Big>Yes</Big>
														<MultiSelect>No</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<NormalImage>Delete</NormalImage>
														<Text>@SYS94691</Text>
														<ToggleButton>None</ToggleButton>
													</AxFormControl>
												</Controls>
												<DataSource>JmgTmpSerialNumberSpecification</DataSource>
												<HighlightActive>No</HighlightActive>
												<MultiSelect>No</MultiSelect>
												<ShowRowLabels>No</ShowRowLabels>
												<Style>Tabular</Style>
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<Caption>@SYS477</Caption>
									</AxFormControl>
								</Controls>
								<Columns>3</Columns>
								<Caption>@SYS477</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormTabPageControl">
								<Name>GoodQuantityTabPage</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>TabPage</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>GoodValueAndButton</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>GoodQuantityValue</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Height>60</Height>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>displayGoodQuantityValue</DataMethod>
												<Label>@SYS4638</Label>
												<LabelPosition>Above</LabelPosition>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>ContinueGoodTabButton</Name>
												<Height>60</Height>
												<Type>CommandButton</Type>
												<Width>140</Width>
												<FormControlExtension
													i:nil="true" />
												<Big>Yes</Big>
												<Command>Enter</Command>
												<DefaultButton>Yes</DefaultButton>
												<NormalImage>Forward</NormalImage>
												<Text>@SYS18701</Text>
											</AxFormControl>
										</Controls>
										<Columns>2</Columns>
										<Caption>@SYS4638</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>GoodQuantityNumpad</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>GoodColumn1</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls />
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>GoodColumn2</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls />
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>GoodColumn3</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<DataSource>JmgTmpJobBundleProdFeedback</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@SYS4638</Caption>
								<Style>DetailsFormDetails</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormTabPageControl">
								<Name>ErrorTabPage</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>TabPage</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ErrorQuantityNumpad</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>ErrorValue</Name>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ErrorQuantityValue</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>displayErrorQuantityValue</DataMethod>
														<Label>@SYS2083</Label>
														<LabelPosition>Above</LabelPosition>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
												</Controls>
												<Columns>2</Columns>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>ErrorQuantityNumpadButtons</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>ErrorColumn1</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>Group</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls />
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>ErrorColumn2</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>Group</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls />
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>ErrorColumn3</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>Group</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls />
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Auto</ArrangeMethod>
												<Columns>3</Columns>
												<DataSource>JmgTmpJobBundleProdFeedback</DataSource>
											</AxFormControl>
										</Controls>
										<Caption>@SYS2083</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ErrorPaddingGroup</Name>
										<Type>Group</Type>
										<Width>50</Width>
										<WidthMode>Manual</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<HideIfEmpty>No</HideIfEmpty>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ErrorCauseToggleButtonsGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<Caption>@SYS13992</Caption>
									</AxFormControl>
								</Controls>
								<Columns>3</Columns>
								<Caption>@SYS2083</Caption>
								<Style>DetailsFormDetails</Style>
							</AxFormControl>
						</Controls>
						<Style>VerticalTabs</Style>
						<Tab>0</Tab>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>DetailsGroup</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FeedbackStatusToggle</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<Caption>@SCM:JmgChangeJobStatus</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>PaddingGroup</Name>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<HideIfEmpty>No</HideIfEmpty>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>JobQuantities</Name>
								<ExtendedStyle>tabularFields</ExtendedStyle>
								<Pattern>TabularFields</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>TableCaption</Name>
										<ExtendedStyle>tabularFields_title</ExtendedStyle>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Group</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>JobQuantitiesTitleCopy1</Name>
												<AllowEdit>No</AllowEdit>
												<ExtendedStyle>tabularFields_titleText</ExtendedStyle>
												<Type>StaticText</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@SCM:JmgJobQuantities</Text>
											</AxFormControl>
										</Controls>
										<AllowUserSetup>No</AllowUserSetup>
										<ArrangeMethod>None</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>TableRow</Name>
										<ExtendedStyle>tabularFields_rowHeader</ExtendedStyle>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<AllowUserSetup>No</AllowUserSetup>
										<ArrangeMethod>None</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>StartedQuantity</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ExtendedStyle>tabularFields_row</ExtendedStyle>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>StartedLabel</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
												<Type>StaticText</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS106750</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>StartedQty</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Real</Type>
												<FormControlExtension
													i:nil="true" />
												<Alignment>Center</Alignment>
												<AutoInsSeparator>No</AutoInsSeparator>
												<DataMethod>startedQuantity</DataMethod>
												<DataSource>JmgTmpJobBundleProdFeedback</DataSource>
												<Label>@SYS106750</Label>
												<ShowLabel>No</ShowLabel>
												<ShowZero>Yes</ShowZero>
											</AxFormControl>
										</Controls>
										<AllowUserSetup>No</AllowUserSetup>
										<ArrangeMethod>None</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>AlreadyCompleted</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ExtendedStyle>tabularFields_row</ExtendedStyle>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>AlreadyCompletedLabel</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
												<Type>StaticText</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS30270</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>AlreadyCompletedQty</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Real</Type>
												<FormControlExtension
													i:nil="true" />
												<Alignment>Center</Alignment>
												<AutoInsSeparator>No</AutoInsSeparator>
												<DataMethod>totalQuantityCompleted</DataMethod>
												<DataSource>JmgTmpJobBundleProdFeedback</DataSource>
												<Label>@SYS30270</Label>
												<ShowLabel>No</ShowLabel>
												<ShowZero>Yes</ShowZero>
											</AxFormControl>
										</Controls>
										<AllowUserSetup>No</AllowUserSetup>
										<ArrangeMethod>None</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>GoodQuantityGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ExtendedStyle>tabularFields_row</ExtendedStyle>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>GoodQuantityDetailsLabel</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
												<Type>StaticText</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS70922</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>GoodQuantityDetails</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Real</Type>
												<FormControlExtension
													i:nil="true" />
												<Alignment>Center</Alignment>
												<AutoInsSeparator>No</AutoInsSeparator>
												<DataField>GoodNow</DataField>
												<DataSource>JmgTmpJobBundleProdFeedback</DataSource>
												<Label>@SYS4638</Label>
												<ShowLabel>No</ShowLabel>
												<ShowZero>Yes</ShowZero>
											</AxFormControl>
										</Controls>
										<AllowUserSetup>No</AllowUserSetup>
										<ArrangeMethod>None</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ErrorQuantityGroup</Name>
										<ExtendedStyle>tabularFields_row</ExtendedStyle>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>ErrorQuantityDetailsLabel</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
												<Type>StaticText</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS8500</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>ErrorQuantityDetails</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Real</Type>
												<FormControlExtension
													i:nil="true" />
												<Alignment>Center</Alignment>
												<DataMethod>errorQuantity</DataMethod>
												<Label>@SYS8500</Label>
												<ShowLabel>No</ShowLabel>
												<ShowZero>Yes</ShowZero>
											</AxFormControl>
										</Controls>
										<AllowUserSetup>No</AllowUserSetup>
										<ArrangeMethod>None</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>TableRowFooter</Name>
										<ExtendedStyle>tabularFields_rowFooter</ExtendedStyle>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<AllowUserSetup>No</AllowUserSetup>
										<ArrangeMethod>None</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>Restricted</AllowUserSetup>
								<ArrangeMethod>None</ArrangeMethod>
								<HideIfEmpty>No</HideIfEmpty>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<Columns>2</Columns>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FooterGroup</Name>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>GoToJobGroup</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>GoToJobButtonGroup</Name>
								<Type>ButtonGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>GoToJobButton</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Height>60</Height>
										<HeightMode>Manual</HeightMode>
										<Type>Button</Type>
										<Width>250</Width>
										<WidthMode>Manual</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Text>@SCM:GoToJob</Text>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Auto</ArrangeMethod>
						<Style>DialogContent</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>DialogCommitContainer</Name>
						<Type>ButtonGroup</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>CancelButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Height>60</Height>
								<HeightMode>Manual</HeightMode>
								<Type>Button</Type>
								<Width>105</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<SaveRecord>No</SaveRecord>
								<Text>@SYS50163</Text>
								<ToggleButton>Check</ToggleButton>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>OKButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Height>60</Height>
								<HeightMode>Manual</HeightMode>
								<Type>Button</Type>
								<Width>210</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Text>@SYS77780</Text>
								<ToggleButton>Check</ToggleButton>
								<ToggleValue>On</ToggleValue>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalRight</ArrangeMethod>
						<Style>DialogCommitContainer</Style>
					</AxFormControl>
				</Controls>
				<Columns>3</Columns>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>