<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>EcoResProductImage</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public final class EcoResProductImage extends FormRun
{
    private Common callerRecord;
    private boolean dirty = false;
    private RefRecId productRecId = 0;
    const int retailProductImageTabPage = 2;
    private boolean firstTime = true;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        var callerDataSet = element.args().dataset();

        if (!this.isDataSetValid(callerDataSet))
        {
            throw error(Error::missingFormActiveBuffer(element.name()));
        }
       
        callerRecord = element.args().record();
        DocuType::createDefaults();
        super();

        this.setDialogCaption();
        this.initRetailMediaControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDataSetValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the specified caller dataset is valid for the <c>EcoResProductImage</c> form.
    /// </summary>
    /// <param name = "_callerDataSet">The table ID of the caller object.</param>
    protected boolean isDataSetValid(TableId _callerDataSet)
    {
        return _callerDataSet == tablenum(EcoResProduct)
            || _callerDataSet == tablenum(InventTable)
            || _callerDataSet == tablenum(InventDimCombination)
            || _callerDataSet == tablenum(EcoResDistinctProductVariant)
            || _callerDataSet == tablenum(CatExternalCatalog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the dialog's default caption from "Product images" to "External catalog images" if the caller table ID is the <c>CatExternalCatalog</c>.
    /// </summary>    
    private void setDialogCaption()
    {
        if (callerRecord.TableId == tablenum(CatExternalCatalog))
        {
            element.design().caption("@SCM:CatExternalCatalogImages");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRetailMediaControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hides the <c>RetailImageDetailsTabPage</c> if the caller table ID is not <c>CatExternalCatalog</c> or if retail is not enabled.
    /// </summary>
    private void initRetailMediaControls()
    {
        boolean showRetailImageDetails = (this.isRetailEnabled() && callerRecord.TableId != tablenum(CatExternalCatalog));
        RetailImageDetailsTabPage.visible(showRetailImageDetails);

        if (showRetailImageDetails)
        {
            this.setProductRecId();
            this.populateRetailChannelProfileCombo();
            this.populateRetailMediaGrid();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProductRecId</Name>
				<Source><![CDATA[
    private void setProductRecId()
    {
        productRecId = this.getProductRecIdFromCaller();

        if (!productRecId)
        {
            //The current record is not associated with a valid product.
            warning("@RetailMediaGalleryLabels:InvalidProductRecord");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductRecIdFromCaller</Name>
				<Source><![CDATA[
    protected RefRecId getProductRecIdFromCaller()
    {
        switch (element.args().record().TableId)
        {
            case tablenum(InventTable):
                InventTable inventTable = element.args().record();
                return inventTable.Product;
            
            case tablenum(InventDimCombination):
                InventDimCombination inventDimTable = element.args().record();
                return inventDimTable.DistinctProductVariant;
            
            case tablenum(EcoResProduct):
            case tablenum(EcoResDistinctProductVariant):
            case tablenum(CatExternalCatalog):
                return element.args().record().RecId;

            default:
                return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateRetailMediaGrid</Name>
				<Source><![CDATA[
    private void populateRetailMediaGrid()
    {
        RetailMediaMasterEntity callerForm = RetailMediaMasterEntity::Product;
        RefRecId callerRecId = productRecId;
        RefRecId catalogRecId = 0;
        RefRecId internalOrgRecId = 0;

        if (productRecId > 0)
        {
            RetailMediaHelper::populateMediaAssociationFromMediaRelationTable(
                        callerRecId,
                        callerForm,
                        RetailRichMediaTmp,
                        catalogRecId,
                        internalOrgRecId);

            RetailMediaHelper::populateMediaAssociationFromMediaTemplateTable(
                        callerForm,
                        RetailRichMediaTmp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openUploadRetailMediaDialog</Name>
				<Source><![CDATA[
    private void openUploadRetailMediaDialog()
    {
        RetailMediaMasterEntity callerForm = RetailMediaMasterEntity::Product;
        RefRecId catalogRecId = 0;
        RefRecId internalOrgRecId = 0;
        Args args = new Args();
        args.record(retailRichMediaTmp);
        args.parmEnum(callerForm);

        RetailMediaHelper::openUploadRetailMediaDialog(
            args,
            productRecId,
            productRecId,
            catalogRecId,
            internalOrgRecId);

        retailRichMediaTmp_ds.research(true);
        this.previewRetailImage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailEnabled</Name>
				<Source><![CDATA[
    private boolean isRetailEnabled()
    {
        return isConfigurationkeyEnabled(configurationKeyNum(Retail));
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateRetailChannelProfileCombo</Name>
				<Source><![CDATA[
    private void populateRetailChannelProfileCombo()
    {
        Map storeMediaBaseUrls = RetailMediaHelper::getStoreAndMediaBaseUrls();
        MapEnumerator enumerator = new MapEnumerator(storeMediaBaseUrls);

        while (enumerator.moveNext())
        {
            str storeName = enumerator.currentKey();
            RetailChannelProfileCombo.add(storeName);
        }

        RetailChannelProfileCombo.selection(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewRetailImage</Name>
				<Source><![CDATA[
    private void previewRetailImage()
    {
        if (this.isRetailEnabled())
        {
            str url = RetailMediaHelper::getProductImageUrl(
                retailRichMediaTmp.Url,
                RetailChannelProfileCombo.getText(RetailChannelProfileCombo.selection()),
                productRecId);

            if (url != null)
            {
                RetailImagePreview.imageLocation(SysImageLocation::URL);
                RetailImagePreview.normalImage(url);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshRetailControls</Name>
				<Source><![CDATA[
    private void refreshRetailControls()
    {
        if (this.isRetailEnabled())
        {
            var url = retailRichMediaTmp.Url;
            if (url != null)
            {
                this.previewRetailImage();
            }
            else
            {
                element.clearRetailImage();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearRetailImage</Name>
				<Source><![CDATA[
    private void clearRetailImage()
    {
        if (this.isRetailEnabled())
        {
            RetailImagePreview.imageLocation(SysImageLocation::URL);
            RetailImagePreview.normalImage(null);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRetailmediaRecord</Name>
				<Source><![CDATA[
    private void deleteRetailmediaRecord()
    {
        RetailMediaMasterEntity callerForm = RetailMediaMasterEntity::Product;
        RefRecId callerRecId = productRecId;
        RefRecId catalogRecId = 0;
        RefRecId internalOrgRecId = 0;

        RetailMediaHelper::deleteFromMediaRelationTable(
            callerForm,
            callerRecId,
            RetailRichMediaTmp.ImageId,
            productRecId,
            catalogRecId,
            internalOrgRecId);

        RetailRichMediaTmp.delete();
        RetailRichMediaTmp_ds.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailMediaRecord</Name>
				<Source><![CDATA[
    private void updateRetailMediaRecord(int _resourceId, str _imageUrl, NoYes _isDefault)
    {
        RetailMediaMasterEntity callerForm = RetailMediaMasterEntity::Product;
        RefRecId callerRecId = productRecId;
        RefRecId catalogRecId = 0;
        RefRecId internalOrgRecId = 0;

        RetailMediaHelper::updateDefaultRecordInMediaRelationTable(
            callerForm,
            callerRecId,
            _resourceId,
            _imageUrl,
            catalogRecId,
            internalOrgRecId,
            productRecId,
            _isDefault);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>DocuRef</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            QueryBuildDataSource qbds = this.query().dataSourceTable(tablenum(DocuRef));

            // DocuRef.RefTableId is stored on insert as the root/base table id
            TableId tableId = DocuRef::GetRootTableID(callerRecord.TableId);
            QueryBuildRange criteriaRefTableId = qbds.addRange(fieldnum(DocuRef,RefTableId));
            criteriaRefTableId.status(RangeStatus::Hidden);
            criteriaRefTableId.value(queryValue(tableId));

            QueryBuildRange criteriaRefRecId = qbds.addRange(fieldnum(DocuRef,RefRecId));
            criteriaRefRecId.status(RangeStatus::Hidden);
            criteriaRefRecId.value(queryValue(callerRecord.RecId));

            DocuRef defaultDocuRef = EcoResProductImage::findDefaultImageDocuRef(callerRecord);
            if (defaultDocuRef)
            {
                element.args().lookupRecord(defaultDocuRef);
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>EcoResProductImage</Name>
				<Methods />
				<Fields>
					<Field>
						<DataField>DefaultImage</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                ecoResProductImage_ds.write();
                dirty = true;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>RetailRichMediaTmp</Name>
				<Methods>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged()
        {
            super();
            element.refreshRetailControls();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>IsDefault</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                ttsbegin;
                NoYes isDefaultRecord = NoYes::No;

                if (retailRichMediaTmp.IsDefault)
                {
                    RefRecId catalogRecId = 0;
                    RefRecId internalOrgRecId = 0;
                    RetailRichMediaTmp updateRetailRichMediaTmp = retailRichMediaTmp_ds.cursor();

                    RetailMediaHelper::setDefaultRecordInMediaGrid(
                        updateRetailRichMediaTmp,
                        retailRichMediaTmp.RecId,
                        productRecId,
                        RetailMediaMasterEntity::Product,
                        catalogRecId,
                        internalOrgRecId);

                    isDefaultRecord = NoYes::Yes;
                }

                element.updateRetailMediaRecord(retailRichMediaTmp.ImageId, retailRichMediaTmp.Url, isDefaultRecord);
                retailRichMediaTmp_ds.research(true);
                ttscommit;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>AddImageButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            DocuRef newDocuRef = DocumentFileHelper::getImageFromUser(callerRecord);
            if (newDocuRef)
            {
                EcoResProductImage::create(newDocuRef);
                element.args().lookupRecord(newDocuRef);
                docuRef_ds.research();
                dirty = true;
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EcoResProductImage_DefaultImage</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (EcoResProductImage.DefaultImage ==NoYes::No)
            {
                this.uncheckCurrentSelection();
            }
            super();
            docuRef_ds.research(true);
        }

]]></Source>
					</Method>
					<Method>
						<Name>uncheckCurrentSelection</Name>
						<Source><![CDATA[
        private void uncheckCurrentSelection()
        {
            EcoResProductImage localEcoResProductImage = EcoResProductImage_DS.getFirst() as EcoResProductImage;
            while (localEcoResProductImage)
            {
                if (localEcoResProductImage.DefaultImage == NoYes::Yes)
                {
                    localEcoResProductImage.DefaultImage = NoYes::No;
                    localEcoResProductImage.write();
                    break;
                }
                localEcoResProductImage = EcoResProductImage_DS.getNext() as EcoResProductImage;
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RetailChannelProfileCombo</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            // User has chosen a different store hence refresh the image based on the new media base url as associated with this store.
            element.previewRetailImage();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CommandButtonUpload</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.openUploadRetailMediaDialog();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CommandButtonRemove</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            ttsbegin;
            element.deleteRetailmediaRecord();
            ttscommit;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RetailRichMediaTmp_Url</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            element.previewRetailImage();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OkButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            FormControl callerControl = element.args().callerFormControl();

            if (dirty && callerControl)
            {
                if (callerControl.dataSourceObject())
                {
                    callerControl.dataSourceObject().research(true);
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>DocuRef</Name>
			<Table>DocuRef</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActualCompanyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Author</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContactPersonId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocuTemplate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EncyclopediaItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanySkipUpdate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Notes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Party</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefCompanyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Restriction</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>smmEMailEntryID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>smmEMailStoreID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>smmTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TypeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValueRecId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<StartPosition>Last</StartPosition>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>EcoResProductImage</Name>
			<Table>EcoResProductImage</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultImage</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>FileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ImageFormat</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MediumSize</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecord</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ThumbnailSize</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Usage</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>DocuRef</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>RetailRichMediaTmp</Name>
			<Table>RetailRichMediaTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AltText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ImageId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsDefault</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Url</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS303255</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Pattern xmlns="">DialogTabs</Pattern>
		<PatternVersion xmlns="">1.3</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>ProductImageDetails</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ImageDetailsTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ContentPreviewGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Pattern>Custom</Pattern>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl>
										<Name>DocumentViewer</Name>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension>
											<Name>DocumentViewer</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>dataSource</Name>
													<Type>String</Type>
													<Value>DocuRef</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmDocuManagementOptionsClassName</Name>
													<Type>String</Type>
													<Value>DefaultDocuManagementOptions</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>disableDelete</Name>
													<Type>Enum</Type>
													<TypeName>boolean</TypeName>
													<Value>False</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>disableUpload</Name>
													<Type>Enum</Type>
													<TypeName>boolean</TypeName>
													<Value>False</Value>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
									</AxFormControl>
								</Controls>
								<Style>DialogContent</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ImageGridActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>MaintainImageButtonGroup</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>AddImageButton</Name>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<Command>New</Command>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>DeleteImageButton</Name>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<Command>DeleteRecord</Command>
												<NeedsRecord>Yes</NeedsRecord>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<DataSource>DocuRef</DataSource>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>ImageGrid</Name>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>DocuRef_Name</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Name</DataField>
										<DataSource>DocuRef</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>EcoResProductImage_DefaultImage</Name>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>DefaultImage</DataField>
										<DataSource>EcoResProductImage</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>DocuRef</DataSource>
								<ShowRowLabels>No</ShowRowLabels>
							</AxFormControl>
						</Controls>
						<Caption>@RetailMediaGalleryLabels:Images</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>RetailImageDetailsTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>RetailChannelProfileGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>RetailChannelProfileCombo</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@RetailMediaGalleryLabels:Channel</Label>
										<Selection>1</Selection>
										<Items />
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<Caption>@RetailMediaGalleryLabels:ImagePreview</Caption>
								<Style>DialogContent</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>RetailImagePreviewGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Pattern>ImagePreview</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormImageControl">
										<Name>RetailImagePreview</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ExtendedStyle>card_imageSquare</ExtendedStyle>
										<Type>Image</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@RetailMediaGalleryLabels:Preview</Label>
									</AxFormControl>
								</Controls>
								<Style>DialogContent</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ImageActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>RetailImageButtonGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>CommandButtonUpload</Name>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
												<NormalImage>Add</NormalImage>
												<Text>@RetailMediaGalleryLabels:Add</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>CommandButtonRemove</Name>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
												<Command>Remove</Command>
												<NormalImage>Remove</NormalImage>
												<Text>@RetailMediaGalleryLabels:Remove</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>RetailImageGrid</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailRichMediaTmp_Url</Name>
										<AllowEdit>No</AllowEdit>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Url</DataField>
										<DataSource>RetailRichMediaTmp</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>DefaultCheckBoxControl</Name>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IsDefault</DataField>
										<DataSource>RetailRichMediaTmp</DataSource>
										<Label>@SYS40133</Label>
									</AxFormControl>
								</Controls>
								<DataSource>RetailRichMediaTmp</DataSource>
								<MultiSelect>No</MultiSelect>
							</AxFormControl>
						</Controls>
						<Caption>@RetailMediaGalleryLabels:RetailGalleryImages</Caption>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>CommitGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OkButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>CancelButton</Name>
						<Type>Button</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Text>@SYS12778</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>