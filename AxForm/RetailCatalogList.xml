<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailCatalogList</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class RetailCatalogList extends FormRun implements SysIFilterConsumerForm, SysIFilterEventHandler
{
    private const str MyCatalogsOption = '@REX:MyCatalogs';
    private const str AllCatalogsOption  = '@Retail:Catalog';

}
]]></Source>
			</Method>
			<Method>
				<Name>registerDatasourceOnQueryingEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Register the data source to which the filter should be applied.
    /// </summary>
    public void registerDatasourceOnQueryingEvent()
    {
        Catalog_DS.OnQueryExecuting += eventhandler(this.parmFilterFormQueryEventHandler().applyFilter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onFilterChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler to react on a filter change.
    /// </summary>
    public void onFilterChanged()
    {
        Catalog_DS.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize to add CatalogOptions to "All Catalog", "My Catalogs" and Set default to "My Catalogs".
    /// </summary>
    public void init()
    {
        super();

        // Initialize the default value of My Catalogs or All Catalogs Option picker.
        this.populateMyOrAllCatalogsOptions();

        //set the default selection to "My Catalogs"
        //CatalogOptionPicker.selection(0);

        Catalog_DS.query().dataSourceTable(tableNum(CatalogTranslation)).addRange(fieldNum(CatalogTranslation, Language)).value(SystemParameters::getSystemLanguageId());

        Catalog_DS.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMyOrAllCatalogsOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add "My Catalogs" and "All Catalogs" to Catalog options.
    /// </summary>
    private void populateMyOrAllCatalogsOptions()
    {
        CatalogOptionPicker.add(MyCatalogsOption);
        CatalogOptionPicker.add(AllCatalogsOption);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>Catalog</Name>
				<Methods>
					<Method>
						<Name>ApplyCatalogOptionsFilter</Name>
						<Source><![CDATA[
        /// <summary>
        /// Apply filters based on user selection for either "User specific catalog" or "all catalogs".
        /// </summary>
        private void ApplyCatalogOptionsFilter()
        {
            QueryBuildDataSource dirPerson = this.query().dataSourceTable(tableNum(DirPerson));

            switch (CatalogOptionPicker.valueStr())
            {
                // If it is "My Catalogs" then enable datasource DirPerson in the Query RetailMyOrAllCatalogs to show only catalogs filtered to the currently logged on user.
                case MyCatalogsOption:
                    dirPerson.enabled(true);
                    break;
                // If it is "All Catalogs" then disable datasource DirPerson in the Query RetailMyOrAllCatalogs to show all catalogs in the system (unfiltered).
                case AllCatalogsOption:
                    dirPerson.enabled(false);
                    break;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// Override execute query to apply catalogOptions filters.
        /// </summary>
        public void executeQuery()
        {
            this.ApplyCatalogOptionsFilter();

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        /// <summary>
        /// Disable Edit button when selected catalog state is "inactive".
        /// </summary>
        public void selectionChanged()
        {
            EditCatalog.enabled(CatalogStateTransitionValidator::canTransition(Catalog, CatalogState::Draft, true) &&
                (Catalog.State != CatalogState::Inactive));

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>CatalogOptionPicker</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Applies filter on Catalog datasource based on Catalog Options.
        /// </summary>
        /// <returns></returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            Catalog_DS.executeQuery();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EditCatalog</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Catalog Edit.
        /// </summary>
        public void clicked()
        {
            // Use CatalogUIActionHandler to get user input when catalog is not in Draft State. If yes, then Edit Catalog else don't do anything.
            CatalogUIActionHandler catalogUIActionhandler = new CatalogUIActionHandler();
            catalogUIActionhandler.setCatalog(Catalog);
            if ((Catalog.State == CatalogState::Draft) || (catalogUIActionhandler.edit() == true))
            {
                // Edit Catalog.
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSourceQuery>RetailCatalogs</DataSourceQuery>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>Catalog</Name>
			<Table>Catalog</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CatalogId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EnableSnapshot</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Owner</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PublishedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PublishedValidFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PublishedValidTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>State</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidFromDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidTo</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>CatalogTranslation</Name>
			<Table>CatalogTranslation</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Catalog</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FriendlyName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Image</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Language</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Pattern xmlns="">FormPartSectionList</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">FormPart</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CatalogFilterGroup</Name>
				<ConfigurationKey>Retail</ConfigurationKey>
				<ExtendedStyle>hubPartGrid_header</ExtendedStyle>
				<Pattern>FiltersAndToolbarInline</Pattern>
				<PatternVersion>1.0</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>QuickFilterGroup</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl>
								<Name>CatalogsQuickFilter</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ConfigurationKey>Retail</ConfigurationKey>
								<FormControlExtension>
									<Name>QuickFilterControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>targetControlName</Name>
											<Type>String</Type>
											<Value>Catalogs</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>defaultColumnName</Name>
											<Type>String</Type>
											<Value>CatalogTranslation_FriendlyName</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>placeholderText</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>CatalogOptionPicker</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ComboBox</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@RET1709</Label>
								<Items />
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<FrameType>None</FrameType>
						<Style>CustomFilter</Style>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneControl">
						<Name>CatalogActionPane</Name>
						<Type>ActionPane</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>CatalogButtonGroup</Name>
								<Type>ButtonGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>EditCatalog</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>Retail</ConfigurationKey>
										<Type>MenuFunctionButton</Type>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
										<CopyCallerQuery>Yes</CopyCallerQuery>
										<DataSource>Catalog</DataSource>
										<MenuItemName>RetailCatalogEdit</MenuItemName>
										<MultiSelect>No</MultiSelect>
										<NeedsRecord>Yes</NeedsRecord>
										<NormalImage>Edit</NormalImage>
										<OpenMode>Edit</OpenMode>
										<Style>Standard</Style>
										<Text>@RET490113</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>CatalogsNavigationButton</Name>
										<ConfigurationKey>Retail</ConfigurationKey>
										<Type>MenuFunctionButton</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<CopyCallerQuery>Yes</CopyCallerQuery>
										<FormViewOption>Details</FormViewOption>
										<MenuItemName>RetailCatalogs</MenuItemName>
										<NeedsRecord>Yes</NeedsRecord>
										<OpenMode>View</OpenMode>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Style>Strip</Style>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<Breakable>No</Breakable>
				<FrameType>None</FrameType>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Catalogs</Name>
				<AllowEdit>No</AllowEdit>
				<ConfigurationKey>Retail</ConfigurationKey>
				<Type>Grid</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CatalogTranslation_FriendlyName</Name>
						<ConfigurationKey>Retail</ConfigurationKey>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>FriendlyName</DataField>
						<DataSource>CatalogTranslation</DataSource>
						<Label>@REX4160031</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>Catalog_State</Name>
						<ConfigurationKey>Retail</ConfigurationKey>
						<FilterExpression>%1</FilterExpression>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>State</DataField>
						<DataSource>Catalog</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>Catalog_ValidFrom</Name>
						<Type>Date</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>ValidFrom</DataField>
						<DataSource>Catalog</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>Catalog_ValidTo</Name>
						<Type>Date</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>ValidTo</DataField>
						<DataSource>Catalog</DataSource>
					</AxFormControl>
				</Controls>
				<DataSource>Catalog</DataSource>
				<DefaultAction>CatalogsNavigationButton</DefaultAction>
				<MultiSelect>No</MultiSelect>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormMenuFunctionButtonControl">
				<Name>SeeMore</Name>
				<Type>MenuFunctionButton</Type>
				<FormControlExtension
					i:nil="true" />
				<ButtonDisplay>TextOnly</ButtonDisplay>
				<CopyCallerQuery>Yes</CopyCallerQuery>
				<DataSource>Catalog</DataSource>
				<FormViewOption>Grid</FormViewOption>
				<MenuItemName>RetailCatalogs</MenuItemName>
				<MultiSelect>No</MultiSelect>
				<NeedsRecord>Yes</NeedsRecord>
				<Style>Link</Style>
				<Text>@REX:SeeMoreLink</Text>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>