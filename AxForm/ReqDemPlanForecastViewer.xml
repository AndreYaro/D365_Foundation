<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ReqDemPlanForecastViewer</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ReqDemPlanForecastViewer extends FormRun
                                      implements ReqRefreshableFormInterface, OfficeIGeneratedWorkbookCustomExporter
{
    ReqDemPlanAggregatedMatrixBuilder   matrixBuilder;
    ReqDemPlanForecastAggregator        forecastAggregator = new ReqDemPlanForecastAggregator();
    ReqDemPlanForecastAttributeManager  attributeManager = new ReqDemPlanForecastAttributeManager();
    ReqDemPlanMatrix                    matrix;
    Query                               aggregatedForecastDataSourceQuery;
    QueryBuildDataSource                aggregatedForecastQueryBuildDataSource, dataAreaDataSource;
    int                                 frozenColumnCount;
    ReqDemPlanGeneratedForecast         generatedForecast;
    boolean                             wasInitialResearchCalled;

    const str AggregatedDemandExportOption = 'AggregatedDemand';
    const str AggregatedDemandPerAllocationKeyExportOption = 'AggregatedDemandPerAllocationKey';

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        attributeManager.checkConsistency();

        matrixBuilder = new ReqDemPlanAggregatedMatrixBuilder(ReqDemPlanAggregation_DS.query());
        matrixBuilder.parmMatrixLineDefinitions().addEnd(new ReqDemPlanMatrixLineDefinitionGranularityKey());
        
		wasInitialResearchCalled = true;
        this.setupFormFromGeneratedForecast();

        if (ScpDemandPlanningWhatsNewNotificationFlight::instance().isEnabled())
        {
            SystemNotificationsWhatsNewManager::AddWhatsNewWithActionLink(
                    '{77b6258a-a109-4cf2-af7a-b4385bf67cff}',
                    "@ParallelizedForecastImport:WhatsNewTitle",
                    "@ParallelizedForecastImport:WhatsNewDesc",
                    ActionPane.name(),
                    'https://go.microsoft.com/fwlink/?linkid=2247703');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds and populates the table control as needed.
    /// </summary>
    /// <param name = "_pageDirection">The direction of the pagination.</param>
    public void buildTable(ReqDemPlanPageDirection _pageDirection = ReqDemPlanPageDirection::Reset)
    {
        ReqDemPlanMatrix    newMatrix;

        var latestForecast = ReqDemPlanGeneratedForecast::findLatest();
        frozenColumnCount = latestForecast ? latestForecast.getFrozenBucketsCountAfterDate(matrixBuilder.parmStartDate()) : 0;

        if (ReqDemPlanCreateForecastService::isForecastGenerationInProgress())
        {
            warning("@DMP:ForecastGenerationInProgressWaitAndRefresh");
        }
        else
        {
            newMatrix = matrixBuilder.buildMatrix(_pageDirection);
        }

        if (newMatrix && !newMatrix.parmRowLabels().empty())
        {
            ReqDemPlanTableControlBuilder::buildFromMatrix(AggregatedViewTable, newMatrix);
            matrix = newMatrix;
        }
        else if (_pageDirection != ReqDemPlanPageDirection::NextPage && _pageDirection != ReqDemPlanPageDirection::PreviousPage)
        {
            ReqDemPlanTableControlBuilder::clearTableControl(AggregatedViewTable);
        }

        PreviousPage.enabled(matrixBuilder.existsPreviousPage());
        NextPage.enabled(matrixBuilder.existsNextPage());
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates the table control with data.
    /// </summary>
    /// <param name = "_retainPosition">The Boolean value indicating whether to retain current cursor position or not; optional.</param>
    public void refreshForm(boolean _retainPosition = false)
    {
        element.createPivotDataSourceFilters();

        // Skip research when calling from form init method
        if (!wasInitialResearchCalled)
        {
            ReqDemPlanAggregation_DS.research(_retainPosition);
        }
        GranularityText.text(strFmt("@DMP:AggregationText", attributeManager.getPivotAttributesNameText()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFormRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes given record in the form.
    /// </summary>
    /// <param name = "_record">The record that should be refreshed on the caller form.</param>
    public void refreshFormRecord(Common _record)
    {
        matrixBuilder.updateMatrixRecord(matrix, _record);
        ReqDemPlanTableControlBuilder::buildFromMatrix(AggregatedViewTable, matrix);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateFiltersModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Rebuilds the table based on the new date settings provided.
    /// </summary>
    /// <param name = "_startDate">The new starting date.</param>
    /// <param name = "_endDate">The new end date.</param>
    /// <param name = "_dateGranularity">The date granularity provided.</param>
    public void dateFiltersModified(date _startDate, date _endDate, ReqDemPlanDateGranularity _dateGranularity)
    {
        matrixBuilder.parmStartDate(_startDate);
        matrixBuilder.parmEndDate(_endDate);
        matrixBuilder.parmDateGranularity(_dateGranularity);
        matrixBuilder.buildPeriods();
        this.buildTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPivotDataSourceFilters</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Clears all the old filters and then adds the new necessary filters to the query.
    /// </summary>
    public void createPivotDataSourceFilters()
    {
        aggregatedForecastDataSourceQuery.clearQueryFilters();
        aggregatedForecastDataSourceQuery.addQueryFilter(dataAreaDataSource, fieldStr(DataArea, Id));
        var attributesListEnum= attributeManager.getAttributeFields(tableNum(ReqDemPlanAggregatedForecast), attributeManager.getAllPivotAttributes()).getEnumerator();
        while (attributesListEnum.moveNext())
        {
            if (fieldNum(ReqDemPlanAggregatedForecast, DataAreaId) == attributesListEnum.current())
            {
                continue;
            }

            aggregatedForecastDataSourceQuery.addQueryFilter(aggregatedForecastQueryBuildDataSource, fieldId2Name(tableNum(ReqDemPlanAggregatedForecast), attributesListEnum.current()));
        }
        aggregatedForecastDataSourceQuery.addQueryFilter(aggregatedForecastQueryBuildDataSource, fieldStr(ReqDemPlanAggregatedForecast, ForecastDate)).status(RangeStatus::Hidden);

        this.applyQueryRunFilterValues(aggregatedForecastDataSourceQuery);

        if (ReqDemPlanAggregation_DS.queryRun())
        {
            ReqDemPlanAggregation_DS.queryRun().query(new Query(aggregatedForecastDataSourceQuery.pack()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAggregation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first aggregation record in the given row.
    /// </summary>
    /// <param name = "_row">The row number.</param>
    /// <returns>The aggregation record or an empty buffer if no aggregation is present and all quantities are zero.</returns>
    public ReqDemPlanAggregatedForecast findAggregation(int _row)
    {
        ReqDemPlanAggregatedForecast aggregation;

        if (this.isMatrixInitialized())
        {
            int col         = 1;
            int colCount    = matrix.parmColumnLabels().elements();

            while (!aggregation && col <= colCount)
            {
                if (matrix.cellExists([_row, col]))
                {
                    aggregation = matrix.cellRecord([_row, col]);
                    break;
                }
                ++col;
            }
        }

        return aggregation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupFormFromGeneratedForecast</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets up the form from the previously generated forecast if there has been a recent forecast run.
    /// </summary>
    public void setupFormFromGeneratedForecast()
    {
        var latestForecast = ReqDemPlanGeneratedForecast::findLatest();

        if (latestForecast && (!generatedForecast || latestForecast.RecId != generatedForecast.RecId))
        {
            generatedForecast = latestForecast;

            matrixBuilder.parmStartDate(generatedForecast.ForecastStartDate);
            matrixBuilder.parmEndDate(generatedForecast.getForecastEndDate());

            BucketGranularityDropDown.selection(generatedForecast.DateGranularity);
            matrixBuilder.parmDateGranularity(generatedForecast.DateGranularity);

            matrixBuilder.buildPeriods();
        }

        element.refreshForm();
        this.enableButtons();
    }

]]></Source>
			</Method>
			<Method>
				<Name>customizeMenuOptions</Name>
				<Source><![CDATA[
    public void customizeMenuOptions(OfficeMenuOptions _menuOptions)
    {
        var exportOption = OfficeGeneratedExportMenuItem::construct(tableStr(ReqDemPlanAggregatedDemandV2Entity), AggregatedDemandExportOption);
        exportOption.displayName("@DMP:AggregatedDemand");
        _menuOptions.customMenuItems().addEnd(exportOption);

        var exportOptionPerAllocationKey = OfficeGeneratedExportMenuItem::construct(tableStr(ReqDemPlanAggregatedDemandPerAllocationKeyEntity), AggregatedDemandPerAllocationKeyExportOption);
        exportOptionPerAllocationKey.displayName("@DMP:AggregatedDemandPerAllocationKey");
        _menuOptions.customMenuItems().addEnd(exportOptionPerAllocationKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataEntityContext</Name>
				<Source><![CDATA[
    public ExportToExcelDataEntityContext getDataEntityContext(OfficeGeneratedExportMenuItem _menuItem)
    {
        ExportToExcelDataEntityContext context;

        switch (_menuItem.id())
        {
            case AggregatedDemandExportOption:
                context = ExportToExcelDataEntityContext::construct(tableStr(ReqDemPlanAggregatedDemandV2Entity));

                Map entityFieldNamesByAttributeType = ReqDemPlanAggregatedDemandV2Entity::fieldNamesByAttributeTypeMap();
                this.selectExportedColumns(context, entityFieldNamesByAttributeType);
                this.setExportFilters(context,
                                      entityFieldNamesByAttributeType,
                                      tableStr(ReqDemPlanAggregatedDemandV2Entity),
                                      fieldStr(ReqDemPlanAggregatedDemandV2Entity, DemandCategory),
                                      fieldStr(ReqDemPlanAggregatedDemandV2Entity, DemandDate));
                break;

            case AggregatedDemandPerAllocationKeyExportOption:
                context = ExportToExcelDataEntityContext::constructDefault(tableStr(ReqDemPlanAggregatedDemandPerAllocationKeyEntity));

                this.setExportFilters(context,
                                      ReqDemPlanAggregatedDemandPerAllocationKeyEntity::fieldNamesByAttributeTypeMap(),
                                      tableStr(ReqDemPlanAggregatedDemandPerAllocationKeyEntity),
                                      fieldStr(ReqDemPlanAggregatedDemandPerAllocationKeyEntity, DemandCategory),
                                      fieldStr(ReqDemPlanAggregatedDemandPerAllocationKeyEntity, DemandDate));
                break;
        }

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyQueryRunFilterValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies filter values to a given query, based on a current <c>QueryRun</c> object.
    /// </summary>
    /// <param name = "_query">The query that should get filter values applied.</param>
    private void applyQueryRunFilterValues(Query _query)
    {
        if (!ReqDemPlanAggregation_DS.queryRun())
        {
            return;
        }

        Query queryRunQuery = ReqDemPlanAggregation_DS.queryRun().query();

        for (var i = 1; i <= queryRunQuery.queryFilterCount(); i++)
        {
            QueryFilter             queryRunFilter = queryRunQuery.queryFilter(i);
            QueryBuildDataSource    dataSource;

            switch (queryRunFilter.dataSource().table())
            {
                case tableNum(ReqDemPlanAggregatedForecast):
                    dataSource = aggregatedForecastQueryBuildDataSource;
                    break;
                case tableNum(DataArea):
                    dataSource = dataAreaDataSource;
                    break;
            }

            if (dataSource)
            {
                QueryFilter queryFilter = _query.findQueryFilter(dataSource, queryRunFilter.field());

                if (queryFilter)
                {
                    queryFilter.value(queryRunFilter.value());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectExportedColumns</Name>
				<Source><![CDATA[
    private void selectExportedColumns(
        ExportToExcelDataEntityContext  _context,
        Map                             _entityFieldNamesByAttributeType)
    {
        var binding = _context.findBindingByEntityName(tableStr(ReqDemPlanAggregatedDemandV2Entity));
        List exportedFieldsList = binding.fieldList();

        exportedFieldsList.addEnd(fieldStr(ReqDemPlanAggregatedDemandV2Entity, DemandCategory));

        var attributeEnumerator = attributeManager.getAllPivotAttributes().getEnumerator();
        while (attributeEnumerator.moveNext())
        {
            ReqDemPlanForecastAttribute attribute = attributeEnumerator.current() as ReqDemPlanForecastAttribute;
            exportedFieldsList.addEnd(_entityFieldNamesByAttributeType.lookup(attribute.Attribute));
        }

        exportedFieldsList.addEnd(fieldStr(ReqDemPlanAggregatedDemandV2Entity, DemandDate));
        exportedFieldsList.addEnd(fieldStr(ReqDemPlanAggregatedDemandV2Entity, DemandQuantity));
        exportedFieldsList.addEnd(fieldStr(ReqDemPlanAggregatedDemandV2Entity, DemandQuantityConfidenceIntervalLowerBound));
        exportedFieldsList.addEnd(fieldStr(ReqDemPlanAggregatedDemandV2Entity, DemandQuantityConfidenceIntervalUpperBound));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExportFilters</Name>
				<Source><![CDATA[
    private void setExportFilters(
        ExportToExcelDataEntityContext  _context,
        Map                             _entityFieldNamesByAttributeType,
        TableName                       _entityName = tableStr(ReqDemPlanAggregatedDemandV2Entity),
        FieldName                       _demandCategoryFieldName = fieldStr(ReqDemPlanAggregatedDemandV2Entity, DemandCategory),
        FieldName                       _demandDateFieldName = fieldStr(ReqDemPlanAggregatedDemandV2Entity, DemandDate))
    {
        var entity = _context.findEntityByName(_entityName);

        Map attributeTypesByFieldId = attributeManager.getAttributeTypesByFieldNameMap();

        ExportToExcelFilterTreeBuilder filterBuilder = new ExportToExcelFilterTreeBuilder(_entityName);
        Microsoft.Dynamics.Platform.Integration.Office.FilterNode filterExpression = filterBuilder.companyFilter();

        Query query = ReqDemPlanAggregation_DS.queryRun().query();
        for (int queryFilterIndex = 1; queryFilterIndex <= query.queryFilterCount(); queryFilterIndex++)
        {
            QueryFilter queryFilter = query.queryFilter(queryFilterIndex);
            if (queryFilter.value()
                && queryFilter.dataSource().table() == tableNum(ReqDemPlanAggregatedForecast))
            {
                if (attributeTypesByFieldId.exists(queryFilter.field()))
                {
                    FieldName entityFieldName = _entityFieldNamesByAttributeType.lookup(attributeTypesByFieldId.lookup(queryFilter.field()));

                    Microsoft.Dynamics.Platform.Integration.Office.FilterNode fieldFilterExpression =
                        this.convertQueryFilterToExcelFilterExpression(queryFilter, filterBuilder, entityFieldName);

                    filterExpression = filterBuilder.and(filterExpression, fieldFilterExpression);
                }
            }
        }

        if (this.isMatrixInitialized())
        {
            var historicalCategoryFilter =
                filterBuilder.or(
                    filterBuilder.areEqual(_demandCategoryFieldName, ReqDemPlanDemandCategory::HistoricalDemand),
                    filterBuilder.areEqual(_demandCategoryFieldName, ReqDemPlanDemandCategory::CurrentForecast));

            var historicalHorizonFilter =
                filterBuilder.and(
                    filterBuilder.greaterThanOrEqualTo(_demandDateFieldName, generatedForecast.HistoricalStart),
                    filterBuilder.lessThanOrEqualTo(_demandDateFieldName, generatedForecast.HistoricalEnd));

            var historicalDateFilter = filterBuilder.and(historicalCategoryFilter, historicalHorizonFilter);

            var forecastCategoryFilter =
                filterBuilder.or(
                    filterBuilder.areEqual(_demandCategoryFieldName, ReqDemPlanDemandCategory::AdjustedForecast),
                    filterBuilder.areEqual(_demandCategoryFieldName, ReqDemPlanDemandCategory::BaselineForecast));

            var forecastHorizonFilter =
                filterBuilder.and(
                    filterBuilder.greaterThanOrEqualTo(_demandDateFieldName, matrixBuilder.parmStartDate()),
                    filterBuilder.lessThanOrEqualTo(_demandDateFieldName, matrixBuilder.parmEndDate()));

            var forecastDateFilter = filterBuilder.and(forecastCategoryFilter, forecastHorizonFilter);

            var dateFilter = filterBuilder.or(historicalDateFilter, forecastDateFilter);

            filterExpression = filterBuilder.and(filterExpression, dateFilter);
        }

        entity.filter(filterExpression);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertQueryFilterToExcelFilterExpression</Name>
				<Source><![CDATA[
    private Microsoft.Dynamics.Platform.Integration.Office.FilterNode convertQueryFilterToExcelFilterExpression(
        QueryFilter                     _queryFilter,
        ExportToExcelFilterTreeBuilder  _filterBuilder,
        FieldName                       _entityFieldName)
    {
        // Split filter value by ',' (which is treated as a separator of applicable values) but not by '\,' (which means that a comma is the expected character)
        var allowedValues = System.Text.RegularExpressions.Regex::Split(_queryFilter.value(), '(?<!\\\\),');

        System.Collections.IEnumerator enumerator = allowedValues.getEnumerator();
        boolean isFirstIteration = true;
        Microsoft.Dynamics.Platform.Integration.Office.FilterNode expression;
        while (enumerator.moveNext())
        {
            // Replace '\,' with ',' because excel filters will not interpret '\,' as comma
            str filter = strReplace(enumerator.Current, '\\,', ',');
            if (isFirstIteration)
            {
                expression = _filterBuilder.areEqual(_entityFieldName, filter);
                isFirstIteration = false;
            }
            else
            {
                expression = _filterBuilder.or(expression, _filterBuilder.areEqual(_entityFieldName, filter));
            }
        }

        return expression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>quantityCellModified</Name>
				<Source><![CDATA[
    protected void quantityCellModified()
    {
        var row =  AggregatedViewTable.row();
        var column =  AggregatedViewTable.column();
        var newQty = AggregatedViewTable.cell(column, row).data();
        if (matrix.cellExists([row, column]))
        {
            var aggregatedForecast = matrix.cellRecord([row, column]);
            try
            {
                forecastAggregator.deaggregate(aggregatedForecast, newQty);
                matrixBuilder.updateMatrixRecord(matrix, aggregatedForecast);
                AggregatedViewTable.updateCell(column, row);
            }
            catch
            {
                if (!aggregatedForecast)
                {
                    Box::warning("@DMP:FormOutdatedAndRefreshed");
                    element.refreshForm();
                }
            }
        }
        else
        {
            error("@DMP:ForecastZero");
            AggregatedViewTable.cell(column, row).data(0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtons</Name>
				<Source><![CDATA[
    protected void enableButtons()
    {
        boolean isMatrixInitialized = this.isMatrixInitialized();
        var isCellSelected          = AggregatedViewTable.row() > 0 && AggregatedViewTable.column() > 0;

        ReqDemPlanForecastDetails.enabled(isMatrixInitialized && isCellSelected);
        TransactionDetails.enabled(isMatrixInitialized && isCellSelected);

        PivotSelector.enabled(isMatrixInitialized);
        DateRange.enabled(isMatrixInitialized);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMatrixInitialized</Name>
				<Source><![CDATA[
    protected boolean isMatrixInitialized()
    {
        if (matrix)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeCompanyContext</Name>
				<Source><![CDATA[
    protected void changeCompanyContext(SelectableDataArea _selectableDataArea)
    {
        appl.setDefaultCompany(_selectableDataArea, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (wasInitialResearchCalled)
        {
            reqDemPlanAggregation_DS.research();
        }

        wasInitialResearchCalled = false;
        super();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>ReqDemPlanAggregation</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            super();

            matrixBuilder.parmDataSourceQuery(ReqDemPlanAggregation_DS.queryRun().query());
            element.buildTable();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            aggregatedForecastDataSourceQuery = this.query();
            aggregatedForecastQueryBuildDataSource = this.queryBuildDataSource();
            dataAreaDataSource = aggregatedForecastQueryBuildDataSource.addDataSource(tableNum(DataArea));
            dataAreaDataSource.addLink(fieldNum(ReqDemPlanAggregatedForecast, DataAreaId), fieldNum(DataArea, id));
            element.createPivotDataSourceFilters();

            var sourceTableFilter = aggregatedForecastQueryBuildDataSource.addRange(fieldNum(ReqDemPlanAggregatedForecast, SourceTable));
            sourceTableFilter.value(tableStr(ReqDemPlanForecast));
            sourceTableFilter.status(RangeStatus::Hidden);

            var versionFilter = aggregatedForecastQueryBuildDataSource.addRange(fieldNum(ReqDemPlanAggregatedForecast, Version));
            versionFilter.value(queryValue(enum2int(ReqDemPlanForecastVersion::Forecasted)));
            versionFilter.status(RangeStatus::Hidden);

            ReqDemPlanAggregation.setTmp();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>ReqDemPlanForecastDetails</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            var aggregatedForecast    = element.findAggregation(AggregatedViewTable.row());

            if (!aggregatedForecast || !generatedForecast)
            {
                warning("@DMP:NoForecastedValuesWarning");
                return;
            }

            var dataContract = new ReqDemPlanForecastDetailsDataContract();
            dataContract.parmForecastPeriodStart(matrixBuilder.parmStartDate());
            dataContract.parmForecastPeriodEnd(matrixBuilder.parmEndDate());
            dataContract.parmHistoricalPeriodStart(generatedForecast.HistoricalStart);
            dataContract.parmHistoricalPeriodEnd(generatedForecast.HistoricalEnd);
            dataContract.parmDateGranularity(BucketGranularityDropDown.selection());
            dataContract.parmAggregationRecId(aggregatedForecast.RecId);

            element.changeCompanyContext(aggregatedForecast.DataAreaId);

            var args = new Args();
            args.caller(element);
            args.parmObject(dataContract);

            this.menufunction().run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TransactionDetails</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            ReqDemPlanAggregatedForecast aggregatedForecast;

            var row =  AggregatedViewTable.row();
            var column =  AggregatedViewTable.column();

            if (element.isMatrixInitialized())
            {
                if (matrix.cellExists([row, column]))
                {
                    aggregatedForecast = matrix.cellRecord([row, column]);
                }
            }

            if (aggregatedForecast)
            {
                element.changeCompanyContext(aggregatedForecast.DataAreaId);

                var args = new Args();
                args.caller(element);
                args.record(aggregatedForecast);
                this.menufunction().run(args);
            }
            else
            {
                warning("@SYS32808");
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GenerateForecast</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            new MenuFunction(menuItemActionStr(ReqDemPlanGenerateBaselineForecast), MenuItemType::Action).run();
            element.setupFormFromGeneratedForecast();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PivotSelector</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.refreshForm();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DateRange</Name>
				<Type>DropDialogButton</Type>
				<Methods>
					<Method>
						<Name>dialogClosed</Name>
						<Source><![CDATA[
        public void dialogClosed(xFormRun _formRun)
        {
            super(_formRun);

            Object dialogForm = _formRun;

            element.dateFiltersModified(dialogForm.fromDate(), dialogForm.toDate(), BucketGranularityDropDown.selection());
        }

]]></Source>
					</Method>
					<Method>
						<Name>dialogInitialized</Name>
						<Source><![CDATA[
        public void dialogInitialized(xFormRun _formRun)
        {
            super(_formRun);

            Object dialogForm = _formRun;
            dialogForm.setFromDate(matrixBuilder.parmStartDate());
            dialogForm.setToDate(matrixBuilder.parmEndDate());
            dialogForm.setDateGranularity(matrixBuilder.parmDateGranularity());

            if (generatedForecast)
            {
                dialogForm.setFromDateLimit(generatedForecast.ForecastStartDate);
                dialogForm.setToDateLimit(generatedForecast.getForecastEndDate());
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AggregatedViewTable</Name>
				<Type>Table</Type>
				<Methods>
					<Method>
						<Name>editControl</Name>
						<Source><![CDATA[
        public FormControl editControl(int _column, int _row)
        {
            FormControl control = null;
            var isFrozen = _column <= frozenColumnCount;

            if (element.isMatrixInitialized())
            {
                var coordinates = [_row, _column];
                if (matrix.cellExists(coordinates))
                {
                    ReqDemPlanAggregatedForecast aggregation = matrix.cellRecord(coordinates);
                    if (aggregation.Qty != aggregation.OriginalQty)
                    {
                        if (isFrozen)
                        {
                            control = QtyCellModifiedFrozen;
                        }
                        else
                        {
                            control = QtyCellModified;
                        }
                    }
                }
            }

            if (!control)
            {
                if (isFrozen)
                {
                    control = QtyCellFrozen;
                }
                else
                {
                    control = QtyCell;
                }
            }

            return control;
        }

]]></Source>
					</Method>
					<Method>
						<Name>activeCellChanged</Name>
						<Source><![CDATA[
        public void activeCellChanged()
        {
            super();
            element.enableButtons();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>QtyCell</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.quantityCellModified();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>QtyCellModified</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.quantityCellModified();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PreviousPage</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.buildTable(ReqDemPlanPageDirection::PreviousPage);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>NextPage</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.buildTable(ReqDemPlanPageDirection::NextPage);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>ReqDemPlanAggregation</Name>
			<Table>ReqDemPlanAggregatedForecast</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AggQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AllocationKey</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Color</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Configuration</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataSource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ForecastDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InsideFreezingHorizon</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LogisticsAddressStateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LogisticsCountryRegionCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModelId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Product</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Qty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Site</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Size</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Style</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProductVersion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Version</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Warehouse</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoSearch>No</AutoSearch>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@DMP:ForecastViewerName</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ContextActions</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ReqDemPlanForecastDetails</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>ReqDemPlanForecastDetails</MenuItemName>
								<NormalImage>LineChart</NormalImage>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TransactionDetails</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>ReqDemPlanForecastViewerTransactions</MenuItemName>
								<MenuItemType>Action</MenuItemType>
								<NormalImage>BulletedList</NormalImage>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ForecastProcesses</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ForecastImport</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>ReqDemPlanForecastImport</MenuItemName>
								<MenuItemType>Action</MenuItemType>
								<NormalImage>Done</NormalImage>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>GenerateForecast</Name>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<NormalImage>Process</NormalImage>
								<Text>@DMP1082</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ForecastGenerationLog</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>ReqDemPlanForecastGenerationLog</MenuItemName>
							</AxFormControl>
						</Controls>
						<Caption>@SYS25605</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ViewSettings</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>PivotSelector</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>ReqDemPlanForecastAggregationConfigurator</MenuItemName>
								<MenuItemType>Action</MenuItemType>
								<NormalImage>Distribute</NormalImage>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDropDialogButtonControl">
								<Name>DateRange</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>DropDialogButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>ReqDemPlanForecastViewerDateRange</MenuItemName>
								<NormalImage>Month</NormalImage>
								<Text>@DMP1012</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>Setup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ReqDemPlanForecastParams</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>ReqDemPlanForecastParams</MenuItemName>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Table</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStaticTextControl">
						<Name>GranularityText</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ExtendedStyle>Heading</ExtendedStyle>
						<Type>StaticText</Type>
						<FormControlExtension
							i:nil="true" />
						<Text></Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>FilterGroup</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>PeriodsGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>BucketGranularityDropDown</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<EnumType>ReqDemPlanDateGranularity</EnumType>
										<Items />
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
								<Caption>@DMP1431</Caption>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>MainBody</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Group</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>TableControlGroup</Name>
								<HeightMode>SizeToAvailable</HeightMode>
								<Pattern>ToolbarList</Pattern>
								<PatternVersion>1.2</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormTableControl">
										<Name>AggregatedViewTable</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Table</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>QtyCell</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Real</Type>
												<FormControlExtension
													i:nil="true" />
												<Label>@SCM:ReqDemPlanForecastDetails_ForecastQtyCell</Label>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>QtyCellFrozen</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ExtendedStyle>planning_fieldFrozen</ExtendedStyle>
												<Type>Real</Type>
												<FormControlExtension
													i:nil="true" />
												<Label>@SCM:ReqDemPlanForecastDetails_ForecastQtyCellFrozen</Label>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>QtyCellModified</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ExtendedStyle>planning_fieldModified</ExtendedStyle>
												<Type>Real</Type>
												<FormControlExtension
													i:nil="true" />
												<Label>@SCM:ReqDemPlanForecastDetails_ForecastQtyCellModified</Label>
												<ShowLabel>No</ShowLabel>
												<ViewEditMode>Edit</ViewEditMode>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>QtyCellModifiedFrozen</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Enabled>No</Enabled>
												<ExtendedStyle>planning_fieldModified</ExtendedStyle>
												<Type>Real</Type>
												<FormControlExtension
													i:nil="true" />
												<Label>@SCM:ReqDemPlanForecastDetails_ForecastQtyCellModifiedFrozen</Label>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
										</Controls>
										<Column>1</Column>
										<Columns>0</Columns>
										<Row>1</Row>
										<Rows>0</Rows>
									</AxFormControl>
								</Controls>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>PaginationGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>PreviousPage</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@DMP:PreviousPage</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>NextPage</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Style>Standard</Style>
										<Text>@DMP:NextPage</Text>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts>
		<AxFormPartReference xmlns="">
			<Name>ReqDemPlanForecastViewerLegendPart</Name>
			<IsLinked>No</IsLinked>
			<MenuItemName>ReqDemPlanForecastViewerLegendPart</MenuItemName>
			<RunMode>Remote</RunMode>
		</AxFormPartReference>
	</Parts>
</AxForm>