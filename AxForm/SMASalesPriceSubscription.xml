<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SMASalesPriceSubscription</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
    public class SMASalesPriceSubscription extends FormRun
    {
        #define.star("*")
        #define.displayOptionBlank("")
        #define.displayOptionTable("@SYS8868")
        #define.displayOptionGroup("@SYS3815")
        #define.displayOptionAll("@SYS11696")

        QueryBuildRange         criteriaProjId;
        QueryBuildRange         criteriaCategoryId;
        QueryBuildRange         criteriaSubscriptionId;
        QueryBuildRange         criteriaProjPriceGroup;
        QueryBuildRange         criteriaProjValidFor;

        boolean                 fromMainSetup;
        CurrencyCode            currencyCode;
        ProjId                  relationProjId;
        ProjPriceGroupID        relationPriceGroup;
        ProjId                  projId;

        ProjCategory            projCategory;
        SMASubscriptionTable    smaSubscriptionTable;
        PriceDiscGroup          priceDiscGroup;
        ProjTable               projTable;
        ProjInvoiceTable        projInvoiceTable;
        CustTable               custTable;
        SalesQuotationTable     salesQuotationTable;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        currencyCode    = Ledger::accountingCurrency(CompanyInfo::findDataArea(curext()).RecId);

        if (isConfigurationkeyEnabled(configurationKeyNum(PriceDisc)))
        {
            smaSalesPriceSubscription_ds.object(fieldNum(SMASalesPriceSubscription, ProjValidFor)).allowEdit(false);
            smaSalesPriceSubscription_ds.object(fieldNum(SMASalesPriceSubscription, ProjValidFor)).skip(true);

            // Record is required from the calling dataset
            if ((!element.args().record()) && (element.args().dataset()))
            {
                throw error("@SYS34359");
            }

            // Set defaults depending on the dataset
            switch (element.args().dataset())
            {
                case tableNum(PriceDiscGroup):
                    topGroup.visible(false);
                    displayOption.selection(TableGroupAll::GroupId);
                    break;

                case tableNum(ProjTable):
                    projTable          = element.args().record();
                    currencyCode       = projTable.currencyId();
                    relationProjId     = projTable.ProjId;
                    relationPriceGroup = projTable.ProjPriceGroup;
                    break;

                case tableNum(ProjInvoiceTable):
                    projInvoiceTable   = element.args().record();
                    currencyCode       = projInvoiceTable.CurrencyId;
                    relationPriceGroup = projInvoiceTable.ProjPriceGroup;
                    break;

                case tableNum(CustTable):
                    custTable          = element.args().record();
                    currencyCode       = custTable.Currency;
                    relationPriceGroup = custTable.PriceGroup;
                    break;

                case tableNum(SMASubscriptionTable):
                    smaSubscriptionTable  = element.args().record();
                    projTable             = ProjTable::find(smaSubscriptionTable.ProjId);
                    currencyCode          = projTable.currencyId();
                    relationProjId        = smaSubscriptionTable.ProjId;
                    relationPriceGroup    = projTable.ProjPriceGroup;
                    break;

                case(tableNum(ProjCategory)):
                    projCategory        = element.args().record();
                    relationProjId      = projCategory.CategoryId;
                    break;

                case(tableNum(SalesQuotationTable)):
                    salesQuotationTable = element.args().record();
                    currencyCode        = salesQuotationTable.CurrencyCode;
                    relationPriceGroup  = salesQuotationTable.PriceGroupId;
                    break;
            }

            relation.text(relationProjId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPriceGroupFields</Name>
				<Source><![CDATA[
    void initPriceGroupFields()
    {
        boolean     existingRecord;

        // Check if its an existing record
        if (smaSalesPriceSubscription.RecId)
        {
            existingRecord = true;
        }

        // Disable and enable fields based on the value of ProjValidFor and where it was called
        switch (smaSalesPriceSubscription.ProjValidFor)
        {
            case TableGroupAll::Table :
                smaSalesPriceSubscription_ds.object(fieldNum(SMASalesPriceSubscription, ProjPriceGroup)).allowEdit(false);
                smaSalesPriceSubscription_ds.object(fieldNum(SMASalesPriceSubscription, ProjPriceGroup)).skip(true);
                if ((element.args().dataset()) &&
                   ((element.args().dataset() != tableNum(ProjInvoiceTable)) &&
                    (element.args().dataset() != tableNum(SalesQuotationTable)) &&
                    (element.args().dataset() != tableNum(CustTable))) || existingRecord)
                {
                    smaSalesPriceSubscription_ds.object(fieldNum(SMASalesPriceSubscription, ProjId)).allowEdit(false);
                    smaSalesPriceSubscription_ds.object(fieldNum(SMASalesPriceSubscription, ProjId)).skip(true);
                }
                else
                {
                    smaSalesPriceSubscription_ds.object(fieldNum(SMASalesPriceSubscription, ProjId)).allowEdit(true);
                    smaSalesPriceSubscription_ds.object(fieldNum(SMASalesPriceSubscription, ProjId)).skip(false);
                }
                break;

            case TableGroupAll::GroupId:
                smaSalesPriceSubscription_ds.object(fieldNum(SMASalesPriceSubscription, ProjId)).allowEdit(false);
                smaSalesPriceSubscription_ds.object(fieldNum(SMASalesPriceSubscription, ProjId)).skip(true);
                if ((element.args().dataset()) || existingRecord)
                {
                    smaSalesPriceSubscription_ds.object(fieldNum(SMASalesPriceSubscription, ProjPriceGroup)).allowEdit(false);
                    smaSalesPriceSubscription_ds.object(fieldNum(SMASalesPriceSubscription, ProjPriceGroup)).skip(true);
                }
                else
                {
                    smaSalesPriceSubscription_ds.object(fieldNum(SMASalesPriceSubscription, ProjPriceGroup)).allowEdit(true);
                    smaSalesPriceSubscription_ds.object(fieldNum(SMASalesPriceSubscription, ProjPriceGroup)).skip(false);
                }
                break;

            case TableGroupAll::All:
                smaSalesPriceSubscription_ds.object(fieldNum(SMASalesPriceSubscription, ProjPriceGroup)).allowEdit(false);
                smaSalesPriceSubscription_ds.object(fieldNum(SMASalesPriceSubscription, ProjPriceGroup)).skip(true);
                smaSalesPriceSubscription_ds.object(fieldNum(SMASalesPriceSubscription, ProjId)).allowEdit(false);
                smaSalesPriceSubscription_ds.object(fieldNum(SMASalesPriceSubscription, ProjId)).skip(true);
                break;
        }

        if ((displayOption.valueStr() == #displayOptionBlank) &&
            (element.args().dataset() != tableNum(PriceDiscGroup)) && !existingRecord)
        {
            smaSalesPriceSubscription_ds.object(fieldNum(SMASalesPriceSubscription, ProjValidFor)).allowEdit(true);
            smaSalesPriceSubscription_ds.object(fieldNum(SMASalesPriceSubscription, ProjValidFor)).skip(false);
        }
        else
        {
            smaSalesPriceSubscription_ds.object(fieldNum(SMASalesPriceSubscription, ProjValidFor)).allowEdit(false);
            smaSalesPriceSubscription_ds.object(fieldNum(SMASalesPriceSubscription, ProjValidFor)).skip(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelation</Name>
				<Source><![CDATA[
    void initRelation()
    {
        smaSalesPriceSubscription_ds.allowCreate(true);

        // Set value to relation field this is either ProjId, Price Group of empty.
        switch (displayOption.valueStr())
        {
            case #displayOptionBlank, #displayOptionAll:
                relation.text('');
                break;

            case #displayOptionTable:
                relation.text(relationProjId);
                break;

            case #displayOptionGroup:
                relation.text(relationPriceGroup);

                //
                // Don't allow to add records when there is no Price Group assigned to a ProjId except if
                // its called from main setup
                //
                if ((!relationPriceGroup) && (!fromMainSetup))
                {
                    smaSalesPriceSubscription_ds.allowCreate(false);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSelect</Name>
				<Source><![CDATA[
    void reSelect()
    {
        // Rerun the query to get a new set of data based on the new Display Option selected
        this.initRelation();
        smaSalesPriceSubscription_ds.init();
        smaSalesPriceSubscription_ds.executeQuery();
        smaSalesPriceSubscription_ds.queryRun().saveUserSetup(false);

        //
        // Don't display any records if ProjId or PriceGroup are empty except it is called from
        // EmplTable, ProjCategory, CustTable, ProjInvoiceTable, SalesQuotationTable
        //
        if (!fromMainSetup &&
            (element.args().dataset() != tableNum(ProjCategory)) &&
            (((displayOption.valueStr() == #displayOptionTable) &&
            (!relationProjId) &&
            (element.args().dataset() != tableNum(CustTable)) &&
            (element.args().dataset() != tableNum(SalesQuotationTable)) &&
            (element.args().dataset() != tableNum(ProjInvoiceTable))) ||
            ((displayOption.valueStr() == #displayOptionGroup) &&
            (!relationPriceGroup))))
        {
            smaSalesPriceSubscription.doClear();
        }

        smaSalesPriceSubscription_ds.refresh();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>SMASalesPriceSubscription</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            if (isConfigurationkeyEnabled(configurationKeyNum(PriceDisc)))
            {
                element.initPriceGroupFields();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            super();

            switch (element.args().dataset())
            {
                case tableNum(SMASubscriptionTable) :
                    smaSubscriptionTable = element.args().record();
                    smaSalesPriceSubscription.SMASubscriptionId = smaSubscriptionTable.SubscriptionId;
                    break;
                }

            if (isConfigurationkeyEnabled(configurationKeyNum(PriceDisc)))
            {
                switch (displayOption.valueStr())
                {
                    case #displayOptionBlank :
                        smaSalesPriceSubscription.ProjValidFor = TableGroupAll::Table;
                        smaSalesPriceSubscription.ProjId = '';
                        smaSalesPriceSubscription.ProjPriceGroup = '';
                        break;

                    case #displayOptionTable :
                        if ((element.args().dataset() == tableNum(ProjInvoiceTable)) ||
                            (element.args().dataset() == tableNum(CustTable)))
                        {
                            smaSalesPriceSubscription.ProjId = '';
                        }
                        else
                        {
                            smaSalesPriceSubscription.ProjId = relationProjId;
                        }
                        smaSalesPriceSubscription.ProjPriceGroup = '';
                        smaSalesPriceSubscription.ProjValidFor = TableGroupAll::Table;
                        break;

                    case #displayOptionGroup :
                        smaSalesPriceSubscription.ProjId = '';
                        smaSalesPriceSubscription.ProjPriceGroup = relationPriceGroup;
                        smaSalesPriceSubscription.ProjValidFor = TableGroupAll::GroupId;
                        break;

                    case #displayOptionAll :
                        smaSalesPriceSubscription.ProjId = '';
                        smaSalesPriceSubscription.ProjPriceGroup = '';
                        smaSalesPriceSubscription.ProjValidFor = TableGroupAll::All;
                        break;
                }
            }

            smaSalesPriceSubscription.defaultRow();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            Query                       query = new Query();
            QueryBuildDataSource        queryBuildDataSource;

            super();

            if (isConfigurationkeyEnabled(configurationKeyNum(PriceDisc)))
            {
                // Initialize choices in DisplayOption
                if (!(displayOption.getText(1)))
                {
                    if (!(element.args().dataset()))
                    {
                        displayOption.add(#displayOptionBlank);
                        fromMainSetup = true;
                    }

                    displayOption.add(#displayOptionTable);
                    displayOption.add(#displayOptionGroup);
                    displayOption.add(#displayOptionAll);
                }

                smaSalesPriceSubscription_ds.autoQuery(false);
                queryBuildDataSource      = query.addDataSource(tableNum(SMASalesPriceSubscription));

                // Caller is form PriceDiscGroup
                if ((element.args().dataset()) == tableNum(PriceDiscGroup))
                {
                    smaSalesPriceSubscription_ds.object(fieldNum(SMASalesPriceSubscription, ProjId)).allowEdit(false);
                    smaSalesPriceSubscription_ds.object(fieldNum(SMASalesPriceSubscription, ProjId)).skip(true);
                    smaSalesPriceSubscription_ds.object(fieldNum(SMASalesPriceSubscription, ProjPriceGroup)).allowEdit(false);
                    smaSalesPriceSubscription_ds.object(fieldNum(SMASalesPriceSubscription, ProjPriceGroup)).skip(true);

                    priceDiscGroup         = element.args().record();
                    relationPriceGroup     = priceDiscGroup.GroupId;
                    criteriaProjPriceGroup = queryBuildDataSource.addRange(fieldNum(SMASalesPriceSubscription, ProjPriceGroup));
                    criteriaProjPriceGroup.value(relationPriceGroup);
                }
                else
                {
                    element.initRelation();

                    // Initialize query depending on selection in DisplayOption
                    switch (displayOption.valueStr())
                    {
                        case #displayOptionBlank :
                            break;

                        case #displayOptionTable :

                            switch (element.args().dataset())
                            {
                                case tableNum(ProjTable):
                                    criteriaProjId = queryBuildDataSource.addRange(fieldNum(SMASalesPriceSubscription, ProjId));
                                    projTable       = element.args().record();
                                    projId          = projTable.ProjId;
                                    criteriaProjId.value(projId + #star);
                                    break;

                                case tableNum(SMASubscriptionTable):
                                    criteriaProjId = queryBuildDataSource.addRange(fieldNum(SMASalesPriceSubscription, ProjId));
                                    smaSubscriptionTable  = element.args().record();
                                    criteriaProjId.value(smaSubscriptionTable.ProjId);
                                    break;

                                case(tableNum(ProjCategory)):
                                    criteriaProjId  = queryBuildDataSource.addRange(fieldNum(SMASalesPriceSubscription, CategoryId));
                                    projCategory    = element.args().record();
                                    criteriaProjId.value(projCategory.CategoryId + #star);
                                    break;

                                default:
                                    criteriaProjValidFor = queryBuildDataSource.addRange(fieldNum(SMASalesPriceSubscription, ProjValidFor));
                                    criteriaProjValidFor.value(int2str(TableGroupAll::Table));
                                    break;
                            }
                            break;

                        case #displayOptionGroup :

                            switch (element.args().dataset())
                            {
                                case tableNum(ProjTable),
                                     tableNum(ProjInvoiceTable),
                                     tableNum(CustTable),
                                     tableNum(SalesQuotationTable),
                                     tableNum(SMASubscriptionTable):
                                    criteriaProjPriceGroup = queryBuildDataSource.addRange(fieldNum(SMASalesPriceSubscription, ProjPriceGroup));
                                    criteriaProjPriceGroup.value(relationPriceGroup);
                                    break;

                                default:
                                    criteriaProjValidFor = queryBuildDataSource.addRange(fieldNum(SMASalesPriceSubscription, ProjValidFor));
                                    criteriaProjValidFor.value(int2str(TableGroupAll::GroupId));
                                    break;
                            }
                            break;

                        case #displayOptionAll :

                            criteriaProjValidFor = queryBuildDataSource.addRange(fieldNum(SMASalesPriceSubscription, ProjValidFor));
                            criteriaProjValidFor.value(int2str(TableGroupAll::All));
                            break;
                    }
                }
                smaSalesPriceSubscription_ds.query(query);
            }
            else
            {
                queryBuildDataSource    = query.addDataSource(tableNum(SMASalesPriceSubscription));
                criteriaProjId          = queryBuildDataSource.addRange(fieldNum(SMASalesPriceSubscription,ProjId));
                criteriaCategoryId      = queryBuildDataSource.addRange(fieldNum(SMASalesPriceSubscription,CategoryId));
                criteriaSubscriptionId  = queryBuildDataSource.addRange(fieldNum(SMASalesPriceSubscription,smaSubscriptionId));

                this.query(query);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        public void linkActive()
        {
            if (!isConfigurationkeyEnabled(configurationKeyNum(PriceDisc)))
            {
                switch (element.args().dataset())
                {
                    case(tableNum(ProjTable)):
                        projTable               = element.args().record();
                        projId                  = projTable.ProjId;
                        criteriaProjId.value(projId + #star);
                        break;

                    case(tableNum(ProjCategory)):
                        projCategory           = element.args().record();
                        criteriaCategoryId.value(projCategory.CategoryId);
                        break;

                    case(tableNum(SMASubscriptionTable)):
                        smaSubscriptionTable   = element.args().record();
                        criteriaSubscriptionId.value(smaSubscriptionTable.SubscriptionId);
                        break;
                }
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>ProjValidFor</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.initPriceGroupFields();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>DisplayOption</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.reSelect();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Overview1_CategoryId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            ProjCategory::lookupProjCategoryType(this, ProjCategoryType::Revenue,true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Overview1_ProjId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            SMASubscriptionTable::lookupProjId(this, smaSalesPriceSubscription);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>SMASalesPriceSubscription</Name>
			<Table>SMASalesPriceSubscription</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CategoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjPeriodId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjPriceGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjValidFor</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMASubscriptionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidFrom</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoQuery>No</AutoQuery>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS84197</Caption>
		<DataSource xmlns="">SMASalesPriceSubscription</DataSource>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<Style xmlns="">SimpleList</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>536870911</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<DataSource>SMASalesPriceSubscription</DataSource>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>TopGroup</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>939524094</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilter</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>DisplayOption</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ConfigurationKey>PriceDisc</ConfigurationKey>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ComboType>List</ComboType>
						<Label>@SYS40365</Label>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Relation</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ConfigurationKey>PriceDisc</ConfigurationKey>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Skip>Yes</Skip>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS9114</Label>
						<ShowLabel>No</ShowLabel>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Overview1</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<BackgroundColor>WindowBackground</BackgroundColor>
						<DataSource>SMASalesPriceSubscription</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>OverviewGroup</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>Overview1_ValidFrom</Name>
								<ElementPosition>390451572</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>ValidFrom</DataField>
								<DataSource>SMASalesPriceSubscription</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Overview1_CategoryId</Name>
								<ElementPosition>585677358</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>CategoryId</DataField>
								<DataSource>SMASalesPriceSubscription</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Overview1_SMASubscriptionId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>780903144</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>SMASubscriptionId</DataField>
								<DataSource>SMASalesPriceSubscription</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>Overview1_ProjValidFor</Name>
								<ElementPosition>976128930</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>ProjValidFor</DataField>
								<DataSource>SMASalesPriceSubscription</DataSource>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Overview1_ProjId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1171354716</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>ProjId</DataField>
								<DataSource>SMASalesPriceSubscription</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Overview1_ProjPriceGroup</Name>
								<ElementPosition>1366580502</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>ProjPriceGroup</DataField>
								<DataSource>SMASalesPriceSubscription</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SMASalesPriceSubscription_ProjPeriodId</Name>
								<ElementPosition>1561806288</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>ProjPeriodId</DataField>
								<DataSource>SMASalesPriceSubscription</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Overview1_CurrencyCode</Name>
								<ElementPosition>1757032074</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>CurrencyCode</DataField>
								<DataSource>SMASalesPriceSubscription</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>Overview1_SalesPrice</Name>
								<ElementPosition>1952257860</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@FieldDescriptions_ProjectManagementAndAccounting:SMASalesPriceSubscription_Overview1_SalesPrice</HelpText>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>SalesPrice</DataField>
								<DataSource>SMASalesPriceSubscription</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
						</Controls>
						<BackgroundColor>WindowBackground</BackgroundColor>
						<DataSource>SMASalesPriceSubscription</DataSource>
					</AxFormControl>
				</Controls>
				<AlternateRowShading>No</AlternateRowShading>
				<DataSource>SMASalesPriceSubscription</DataSource>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>