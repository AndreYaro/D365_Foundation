<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>WHSMobileDisplayWorkListFieldList</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class WHSMobileDisplayWorkListFieldList extends FormRun
{
    WHSRFMenuItemTable  menuItem;

}
]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        this.fillContainer();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareLookup</Name>
				<Source><![CDATA[
    private FormRun prepareLookup()
    {
        Args    args;
        FormRun formRun;

        args = new args();

        if (menuItem.isFieldVisibleShowWorkLineList())
        {
            args.name(formStr(WHSMobileDisplayWorkLineListLookup));
        }
        else
        {
            switch(menuItem.WorkActivity)
            {
                case WHSWorkActivity::WorkList:
                    args.name(formStr(WHSMobileDisplayWorkListLookup));
                    break;

                case WHSWorkActivity::ReprintMultipleCartonLabels:
                    args.name(formStr(WHSMobileDisplayWaveLabelListLookup));
                    break;
            }
        }

        args.caller(element);

        formRun = ClassFactory::formRunClassOnClient(args);
        formRun.init();
        formRun.dataSource(WHSTmpFieldName);

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addControlToContainer</Name>
				<Source><![CDATA[
    private container addControlToContainer(
                                FormStringControl _control,
                                container         _con,
                                int               _containerPosition)
    {
        if (_control.text())
        {
            _containerPosition++;

            container controlCon = this.createControlContainer(
                _control.text(),
                WHSTmpFieldName::find(_control.text(), whsTmpFieldName).SysTableId);

            _con = conIns(_con, _containerPosition, controlCon);
        }

        return [_con, _containerPosition];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createControlContainer</Name>
				<Source><![CDATA[
    private container createControlContainer(FieldName _fieldName, TableId _tableId)
    {
        container controlCon = conNull();

        controlCon += _fieldName;
        controlCon += tableId2Name(_tableId);

        return controlCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFields</Name>
				<Source><![CDATA[
    void displayFields()
    {
        IdentifierName  name;
        int             length = conLen(menuItem.WorkListFieldList);
        int             i;

        for (i = 2; i <= length; i++)
        {
            name = conPeek(conPeek(menuItem.WorkListFieldList, i), 1);

            switch (i)
            {
                case 2:
                    Control2.text(name);
                    break;

                case 3:
                    Control3.text(name);
                    break;

                case 4:
                    Control4.text(name);
                    break;

                case 5:
                    Control5.text(name);
                    break;

                case 6:
                    Control6.text(name);
                    break;

                case 7:
                    Control7.text(name);
                    break;

                case 8:
                    Control8.text(name);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillContainer</Name>
				<Source><![CDATA[
    private void fillContainer()
    {
        container   con;
        container   controlCon;
        int         i = 1;

        controlCon = this.createControlContainer(
            PrimaryControl.text(),
            WHSTmpFieldName::find(PrimaryControl.text(), whsTmpFieldName).SysTableId);

        con = conIns(con, 1, controlCon);

        [con, i] = this.addControlToContainer(control2, con, i);
        [con, i] = this.addControlToContainer(control3, con, i);
        [con, i] = this.addControlToContainer(control4, con, i);
        [con, i] = this.addControlToContainer(control5, con, i);
        [con, i] = this.addControlToContainer(control6, con, i);
        [con, i] = this.addControlToContainer(control7, con, i);
        [con, i] = this.addControlToContainer(control8, con, i);

        this.tryUpdateMenuItemWorkListFieldList(con);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryUpdateMenuItemWorkListFieldList</Name>
				<Source><![CDATA[
    private void tryUpdateMenuItemWorkListFieldList(container _workListFieldList)
    {
        if (menuItem.WorkListFieldList != _workListFieldList && menuItem.checkCanUpdate())
        {
            ttsBegin;

            menuItem.WorkListFieldList = _workListFieldList;
            menuItem.update();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        if (!element.args().dataset())
        {
            throw error(Error::missingFormActiveBuffer(element.name()));
        }

        menuItem = element.args().record();

        super();

        if (menuItem.isFieldVisibleShowWorkLineList())
        {
            PrimaryControl.text(fieldId2name(tableNum(WHSWorkLine), fieldNum(WHSWorkLine, LineNum)));
            whsTmpFieldName.populateFieldNames(tableNum(WHSWorkLine), false, true, true);
            whsTmpFieldName.populateWorkLineDisplayMethods();
        }
        else
        {
            switch(menuItem.WorkActivity)
            {
                case WHSWorkActivity::WorkList:
                    PrimaryControl.text(fieldId2name(tableNum(WHSWorkTable), fieldNum(WHSWorkTable, WorkId)));
                    whsTmpFieldName.populateFieldNames(tableNum(WHSWorkTable), true, true, true);
                    whsTmpFieldName.populateFieldNames(tableNum(WHSLoadTable), false, true, true);
                    whstmpfieldName.populateWorkDisplayMethods();
                    break;

                case WHSWorkActivity::ReprintMultipleCartonLabels:
                    PrimaryControl.text(fieldId2name(tableNum(WHSWaveLabel), fieldNum(WHSWaveLabel, LabelBuildId)));
                    whsTmpFieldName.populateFieldNames(tableNum(WHSWaveLabel), true, true, true);
                    break;
            }
        }

        if (conLen(menuItem.WorkListFieldList) > 1)
        {
            this.displayFields();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkList</Name>
				<Source><![CDATA[
    private boolean validateWorkList(FieldName _name)
    {
        SysDictTable    table = new SysDictTable(tableNum(WHSWorkTable));

        return fieldName2id(tableNum(WHSWorkTable), _name)
            || fieldName2id(tableNum(WHSLoadTable), _name)
            || table.doesMethodExist(_name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWaveLabel</Name>
				<Source><![CDATA[
    private boolean validateWaveLabel(FieldName _name)
    {
        return fieldName2id(tableNum(WHSWaveLabel), _name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkLine</Name>
				<Source><![CDATA[
    private boolean validateWorkLine(FieldName _name)
    {
        SysDictTable    table = new SysDictTable(tableNum(WHSWorkLine));

        return fieldName2id(tableNum(WHSWorkLine), _name)
            || table.doesMethodExist(_name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldNameControl</Name>
				<Source><![CDATA[
    private boolean validateFieldNameControl(FieldName _name)
    {
        if (menuItem.isFieldVisibleShowWorkLineList())
        {
            return this.validateWorkLine(_name);
        }

        switch(menuItem.WorkActivity)
        {
            case WHSWorkActivity::ReprintMultipleCartonLabels :
                return this.validateWaveLabel(_name);

            case WHSWorkActivity::WorkList :
                return this.validateWorkList(_name);

            default:
                break;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateControl</Name>
				<Source><![CDATA[
    private boolean validateControl(FieldName _name)
    {
        if (! _name                      
            || this.validateFieldNameControl(_name))
        {
            return true;
        }
        else if(menuItem.isFieldVisibleShowWorkLineList())
        {
            warning(strFmt("@SYS33954", _name, tableId2Name(tableNum(WHSWorkLine))));
        }
        else
        {
            switch(menuItem.WorkActivity)
            {
                case WHSWorkActivity::WorkList:
                    warning(strFmt("@WAX:NoMenuItemsFoundForWorkId", _name));
                    break;
                case WHSWorkActivity::ReprintMultipleCartonLabels:
                    warning(strFmt("@SYS33954", _name, tableId2Name(tableNum(WHSWaveTable))));
                    break;
            }
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>WHSTmpFieldName</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                element.fillContainer();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Control2</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            this.performFormLookup(element.prepareLookup());
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = element.validateControl(this.text());

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Control3</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            this.performFormLookup(element.prepareLookup());
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = element.validateControl(this.text());

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Control4</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            this.performFormLookup(element.prepareLookup());
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            return element.validateControl(this.text());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Control5</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            this.performFormLookup(element.prepareLookup());
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            return element.validateControl(this.text());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Control6</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            this.performFormLookup(element.prepareLookup());
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            return element.validateControl(this.text());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Control7</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            this.performFormLookup(element.prepareLookup());
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            return element.validateControl(this.text());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Control8</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            this.performFormLookup(element.prepareLookup());
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            return element.validateControl(this.text());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>WHSTmpFieldName</Name>
			<Table>WHSTmpFieldName</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FieldName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SysFieldID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SysTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DelayActive>No</DelayActive>
			<InsertAtEnd>No</InsertAtEnd>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>WHSRFMenuItemTable</Name>
			<Table>WHSRFMenuItemTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AdjustmentTypeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AllowFullSplit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AllowLocationOverflow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Anchor</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AnchorBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ClusterProfileId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CycleCountFirstPass</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultData</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DisableCycleCountThreshold</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GenerateLP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GroupPutaway</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HandleByLP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LocDirHintCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LocVerification</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MenuItemDirectedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MenuItemMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MenuItemName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OverrideInventBatchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OverrideTargetLP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PageSize</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PickOldestBatch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PickPack</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrintLabel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RFDisplayPickSummary</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RFDisplayStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RFSysGroupField</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RFSysGroupFieldNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RFSysGroupLabel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RFTitle</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ScheduleMovement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShowBatchDisposition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShowDisposition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShowFilter</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Unitization</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseExistingWork</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkActivity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkAuditTemplateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkCreationProcess</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkerKeepsOrigWork</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkListFieldList</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkListQuery</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkTemplateCode</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">SimpleList</Style>
		<UseCaptionFromMenuItem xmlns="">Yes</UseCaptionFromMenuItem>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>GroupControls</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilter</Name>
						<Visible>No</Visible>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>PrimaryControl</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@WAX:PrimaryControl</Label>
						<LabelPosition>Above</LabelPosition>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Control2</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@WAX:DisplayField</Label>
						<LabelPosition>Above</LabelPosition>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Control3</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@WAX:DisplayField2</Label>
						<LabelPosition>Above</LabelPosition>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Control4</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@WAX:DisplayField3</Label>
						<LabelPosition>Above</LabelPosition>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Control5</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@WAX:DisplayField4</Label>
						<LabelPosition>Above</LabelPosition>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Control6</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@WAX:DisplayField5</Label>
						<LabelPosition>Above</LabelPosition>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Control7</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@WAX:DisplayField6</Label>
						<LabelPosition>Above</LabelPosition>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Control8</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@WAX:DisplayField7</Label>
						<LabelPosition>Above</LabelPosition>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<Breakable>No</Breakable>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>GridControl</Name>
				<Type>Grid</Type>
				<Visible>No</Visible>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>