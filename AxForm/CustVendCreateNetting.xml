<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>CustVendCreateNetting</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class CustVendCreateNetting extends FormRun
{
    private CustVendNettingBalanceTmp tmpNettingBalance;
    private Set custTransMarked = new Set(Types::Record);
    private boolean custIsPositive;
    private Set vendTransMarked = new Set(Types::Record);
    private boolean vendIsNegative;

    private AmountCur custMarkedTotalAmountCur;
    private AmountCur vendMarkedTotalAmountCur;
    private TransDate latestVendInvoiceDate;
    private TransDate latestCustInvoiceDate;

    private CustVendNettingExchRateCalculator custNettingExchRateCalculator;
    private CustVendNettingExchRateCalculator vendNettingExchRateCalculator;

    private CustVendOpenTransManager vendOpenTransManager;
    private CustVendOpenTransManager custOpenTransManager;

    [FormObservable]
    private AmountMST custNetTotalAmountMST;
    [FormObservable]
    private AmountMSTSecondary custNetTotalAmountReport;
    [FormObservable]
    private AmountMST vendNetTotalAmountMST;
    [FormObservable]
    private AmountMSTSecondary vendNetTotalAmountReport;

    private AmountMST custBalanceMSTInit;
    private AmountMSTSecondary custBalanceReportInit;
    private AmountMST vendBalanceMSTInit;
    private AmountMSTSecondary vendBalanceReportInit;

    [FormObservable]
    private AmountMST custBalanceMST;
    [FormObservable]
    private AmountMSTSecondary custBalanceReport;
    [FormObservable]
    private AmountMST vendBalanceMST;
    [FormObservable]
    private AmountMSTSecondary vendBalanceReport;

    private CompanyId currentCompany = curExt();

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        tmpNettingBalance = element.args().record();

        if (tmpNettingBalance.RecId == 0)
        {
            throw error(Error::missingParameter(this));
        }

        vendOpenTransManager = CustVendOpenTransManager::construct(VendTable::find(tmpNettingBalance.VendAccountNum));
        custOpenTransManager = CustVendOpenTransManager::construct(CustTable::find(tmpNettingBalance.CustAccountNum));

        vendNettingExchRateCalculator = CustVendNettingExchRateCalculator::construct(
            tmpNettingBalance.VendCompany,
            tmpNettingBalance.CurrencyCode,
            DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));

        custNettingExchRateCalculator = CustVendNettingExchRateCalculator::construct(
            tmpNettingBalance.CustCompany,
            tmpNettingBalance.CurrencyCode,
            DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));

        super();

        this.initFieldsText(tmpNettingBalance);
        this.initCustBalance();
        this.initVendBalance();
        Post.enabled(false);
        this.setControlsVisible();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlsVisible</Name>
				<Source><![CDATA[
    private void setControlsVisible()
    {
        CustCashDiscText.visible(false);
        CustCashDiscAmountMST.visible(false);
        CustCashDiscAmountReporting.visible(false);
        VendCashDiscText.visible(false);
        VendCashDiscAmountMST.visible(false);
        VendCashDiscAmountReporting.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetNetAmountAndBalance</Name>
				<Source><![CDATA[
    private void resetNetAmountAndBalance()
    {
        custNetTotalAmountMST = 0;
        custNetTotalAmountReport = 0;

        vendNetTotalAmountMST = 0;
        vendNetTotalAmountReport = 0;

        custMarkedTotalAmountCur = 0;
        vendMarkedTotalAmountCur = 0;

        this.initCustBalance();
        this.initVendBalance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldsText</Name>
				<Source><![CDATA[
    private void initFieldsText(CustVendNettingBalanceTmp _tmpNettingBalance)
    {
        str agreementInfoText = strFmt("@CashManagement:NettingAgreementInfo", _tmpNettingBalance.NettingAgreementName);
        AgreementInfo.text(agreementInfoText);

        str accountingCurrencyCodeText;
        str reportingCurrencyCodeText;
        changecompany(_tmpNettingBalance.CustCompany)
        {
            accountingCurrencyCodeText = strFmt("@CashManagement:AccountingCurrency", Ledger::accountingCurrency());
            CustAccountingCurrencyText.text(accountingCurrencyCodeText);

            reportingCurrencyCodeText = strFmt("@CashManagement:ReportingCurrency", Ledger::reportingCurrency());
            CustReportingCurrencyText.text(reportingCurrencyCodeText);
        }

        changecompany(_tmpNettingBalance.VendCompany)
        {
            accountingCurrencyCodeText = strFmt("@CashManagement:AccountingCurrency", Ledger::accountingCurrency());
            VendAccountingCurrencyText.text(accountingCurrencyCodeText);

            reportingCurrencyCodeText = strFmt("@CashManagement:ReportingCurrency", Ledger::reportingCurrency());
            VendReportingCurrencyText.text(reportingCurrencyCodeText);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustBalance</Name>
				<Source><![CDATA[
    private void initCustBalance()
    {
        CustTrans custTrans;

        changecompany(tmpNettingBalance.CustCompany)
        {
            select sum(AmountMst), sum(ReportingCurrencyAmount) from custTrans
                where custTrans.AccountNum == tmpNettingBalance.CustAccountNum;
        }

        custBalanceMSTInit = custTrans.AmountMst;
        custBalanceReportInit = custTrans.ReportingCurrencyAmount;
        custBalanceMST = custBalanceMSTInit;
        custBalanceReport = custBalanceReportInit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendBalance</Name>
				<Source><![CDATA[
    private void initVendBalance()
    {
        VendTrans vendTrans;

        changecompany(tmpNettingBalance.VendCompany)
        {
            select sum(AmountMST), sum(ReportingCurrencyAmount) from vendTrans
                where vendTrans.AccountNum == tmpNettingBalance.VendAccountNum;
        }

        vendBalanceMSTInit = vendTrans.AmountMST;
        vendBalanceReportInit = vendTrans.ReportingCurrencyAmount;

        vendBalanceMST = vendBalanceMSTInit;
        vendBalanceReport = vendBalanceReportInit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>managePostButton</Name>
				<Source><![CDATA[
    private void managePostButton()
    {
        Post.enabled(this.validateInput());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePost</Name>
				<Source><![CDATA[
    public boolean validatePost(Set _custTransMarked, Set _vendTransMarked, date _nettingDate)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInput</Name>
				<Source><![CDATA[
    private boolean validateInput()
    {
        return this.validateNettingDate() && custNetTotalAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNettingDate</Name>
				<Source><![CDATA[
    private boolean validateNettingDate()
    {
        boolean ret = false;

        if (NettingDate.dateValue() != dateNull())
        {
            CustVendNettingPair nettingPair;

            select StartDate, ExpireDate from nettingPair
                where nettingPair.RecId == tmpNettingBalance.NettingPairRecId;

            CustVendNettingExpireDate nettingExpireDate = nettingPair.ExpireDate == dateNull() ? maxDate() : nettingPair.ExpireDate;

            if (NettingDate.dateValue() >= nettingPair.StartDate && NettingDate.dateValue() <= nettingExpireDate)
            {
                ret = true;
            }
            else
            {
                error("@CashManagement:InvalidNettingDate");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateNettingTotal</Name>
				<Source><![CDATA[
    private void calculateNettingTotal()
    {
        if ((custMarkedTotalAmountCur > 0 && vendMarkedTotalAmountCur > 0)
            || (custMarkedTotalAmountCur < 0 && vendMarkedTotalAmountCur < 0))
        {
            custNetTotalAmountMST = 0;
            vendNetTotalAmountMST = 0;
            custNetTotalAmountReport = 0;
            vendNetTotalAmountReport = 0;
        }
        else
        {
            custNettingExchRateCalculator.updateNettingDate(NettingDate.dateValue());
            vendNettingExchRateCalculator.updateNettingDate(NettingDate.dateValue());

            if (abs(custMarkedTotalAmountCur) < abs(vendMarkedTotalAmountCur))
            {
                custNetTotalAmountMST = custNettingExchRateCalculator.amountCurToMST(custMarkedTotalAmountCur);
                vendNetTotalAmountMST = vendNettingExchRateCalculator.amountCurToMST(-custMarkedTotalAmountCur);

                custNetTotalAmountReport = custNettingExchRateCalculator.amountCurToReporting(custMarkedTotalAmountCur);
                vendNetTotalAmountReport = vendNettingExchRateCalculator.amountCurToReporting(-custMarkedTotalAmountCur);
            }
            else
            {
                custNetTotalAmountMST = custNettingExchRateCalculator.amountCurToMST(-vendMarkedTotalAmountCur);
                vendNetTotalAmountMST = vendNettingExchRateCalculator.amountCurToMST(vendMarkedTotalAmountCur);

                custNetTotalAmountReport = custNettingExchRateCalculator.amountCurToReporting(-vendMarkedTotalAmountCur);
                vendNetTotalAmountReport = vendNettingExchRateCalculator.amountCurToReporting(vendMarkedTotalAmountCur);
            }
        }

        custBalanceMST = custBalanceMSTInit - custNetTotalAmountMST;
        vendBalanceMST = vendBalanceMSTInit - vendNetTotalAmountMST;

        custBalanceReport = custBalanceReportInit - custNetTotalAmountReport;
        vendBalanceReport = vendBalanceReportInit - vendNetTotalAmountReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLatestVendInvoiceDate</Name>
				<Source><![CDATA[
    private TransDate calculateLatestVendInvoiceDate()
    {
        SetEnumerator enumerator = vendTransMarked.getEnumerator();
        TransDate latestDate;

        while (enumerator.moveNext())
        {
            VendNettingTransView vendNettingTrans = enumerator.current();
            latestDate = max(latestDate, vendNettingTrans.TransDate);
        }

        return latestDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLatestCustInvoiceDate</Name>
				<Source><![CDATA[
    private TransDate calculateLatestCustInvoiceDate()
    {
        SetEnumerator enumerator = custTransMarked.getEnumerator();
        TransDate latestDate;

        while (enumerator.moveNext())
        {
            CustNettingTransTotalView custNettingTrans = enumerator.current();
            latestDate = max(latestDate, custNettingTrans.TransDate);
        }

        return latestDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markVendTrans</Name>
				<Source><![CDATA[
    private void markVendTrans(VendNettingTransView _vendNettingTransView)
    {
        if (!vendTransMarked.in(_vendNettingTransView))
        {
            if (vendTransMarked.elements() == 0)
            {
                vendIsNegative = _vendNettingTransView.AmountCur < 0;
            }
            else if ((vendIsNegative && _vendNettingTransView.AmountCur > 0) || (!vendIsNegative && _vendNettingTransView.AmountCur < 0))
            {
                throw error("@CashManagement:CannotMarkInvoicesOnBothSides");
            }

            if (_vendNettingTransView.AmountCur > 0 && _vendNettingTransView.CashDiscDate && VendParameters::find().CashDiscForCreditNote)
            {
                error(strFmt("@CashManagement:VendCreditNoteCashDiscIsNotSupported", _vendNettingTransView.Invoice));
            }
            else
            {
                vendTransMarked.add(_vendNettingTransView);
                vendMarkedTotalAmountCur += _vendNettingTransView.AmountCur;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unmarkVendTrans</Name>
				<Source><![CDATA[
    private void unmarkVendTrans(VendNettingTransView _vendNettingTransView)
    {
        if (vendTransMarked.in(_vendNettingTransView))
        {
            vendTransMarked.remove(_vendNettingTransView);
            vendMarkedTotalAmountCur -= _vendNettingTransView.AmountCur;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markCustTrans</Name>
				<Source><![CDATA[
    private void markCustTrans(CustNettingTransTotalView _custNettingTransView)
    {
        if (!custTransMarked.in(_custNettingTransView))
        {
            if (custTransMarked.elements() == 0)
            {
                custIsPositive = _custNettingTransView.AmountCur > 0;
            }
            else if ((custIsPositive && _custNettingTransView.AmountCur < 0) || (!custIsPositive && _custNettingTransView.AmountCur > 0))
            {
                throw error("@CashManagement:CannotMarkInvoicesOnBothSides");
            }

            custTransMarked.add(_custNettingTransView);
            custMarkedTotalAmountCur += _custNettingTransView.AmountCur;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unmarkCustTrans</Name>
				<Source><![CDATA[
    private void unmarkCustTrans(CustNettingTransTotalView _custNettingTransView)
    {
        if (custTransMarked.in(_custNettingTransView))
        {
            custTransMarked.remove(_custNettingTransView);
            custMarkedTotalAmountCur -= _custNettingTransView.AmountCur;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDataSource</Name>
				<Source><![CDATA[
    private void refreshDataSource()
    {
        custNettingTransTotalView_ds.refresh();
        custNettingTransTotalView_ds.research(true);
        vendNettingTransView_ds.refresh();
        vendNettingTransView_ds.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAgreementName</Name>
				<Source><![CDATA[
    internal display Str displayAgreementName()
    {
        return tmpNettingBalance.NettingAgreementName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCustCompany</Name>
				<Source><![CDATA[
    internal display CompanyId displayCustCompany()
    {
        return tmpNettingBalance.CustCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCustAccountNum</Name>
				<Source><![CDATA[
    internal display CustName displayCustAccountNum()
    {
        return tmpNettingBalance.CustAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVendCompany</Name>
				<Source><![CDATA[
    internal display CompanyId displayVendCompany()
    {
        return tmpNettingBalance.VendCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVendAccountNum</Name>
				<Source><![CDATA[
    internal display VendName displayVendAccountNum()
    {
        return tmpNettingBalance.VendAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCurrencyCode</Name>
				<Source><![CDATA[
    internal display CurrencyCode displayCurrencyCode()
    {
        return tmpNettingBalance.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCustNetTotalAmountMST</Name>
				<Source><![CDATA[
    internal display AmountMST displayCustNetTotalAmountMST()
    {
        return custNetTotalAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCustNetTotalAmountReport</Name>
				<Source><![CDATA[
    internal display AmountMSTSecondary displayCustNetTotalAmountReport()
    {
        return custNetTotalAmountReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVendNetTotalAmountMST</Name>
				<Source><![CDATA[
    internal display AmountMST displayVendNetTotalAmountMST()
    {
        return vendNetTotalAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVendNetTotalAmountReport</Name>
				<Source><![CDATA[
    internal display AmountMSTSecondary displayVendNetTotalAmountReport()
    {
        return vendNetTotalAmountReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCustBalanceMST</Name>
				<Source><![CDATA[
    internal display AmountMST displayCustBalanceMST()
    {
        return custBalanceMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCustBalanceReport</Name>
				<Source><![CDATA[
    internal display AmountMSTSecondary displayCustBalanceReport()
    {
        return custBalanceReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVendBalanceMST</Name>
				<Source><![CDATA[
    internal display AmountMST displayVendBalanceMST()
    {
        return vendBalanceMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVendBalanceReport</Name>
				<Source><![CDATA[
    internal display AmountMSTSecondary displayVendBalanceReport()
    {
        return vendBalanceReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        #SysSystemDefinedButtons

        FormCommandButtonControl saveButton = this.control(this.controlId(#SystemDefinedSaveButton)) as FormCommandButtonControl;
        saveButton.visible(false);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>CustNettingTransTotalView</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            QueryBuildDataSource qbdsCustNettingTrans = this.query().dataSourceTable(tableNum(CustNettingTransTotalView));
            this.query().addCompanyRange(tmpNettingBalance.CustCompany);
            CustVendNettingCandidateQueryBuilder::buildCustTransQueryFromTmpNettingBalance(qbdsCustNettingTrans, tmpNettingBalance);

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayCustTransMarked</Name>
						<Source><![CDATA[
        internal display boolean displayCustTransMarked(CustNettingTransTotalView _custNettingTransTotalView)
        {
            return custTransMarked.in(_custNettingTransTotalView);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayCustTransAmountToNet</Name>
						<Source><![CDATA[
        internal display AmountCur displayCustTransAmountToNet(CustNettingTransTotalView _custNettingTransTotalView)
        {
            return _custNettingTransTotalView.AmountCur;
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayCashDiscDate</Name>
						<Source><![CDATA[
        internal display CustCashDiscDate displayCashDiscDate(CustNettingTransTotalView _custNettingTransTotalView)
        {
            CustTransOpen custTransOpen = CustTransOpen::find(_custNettingTransTotalView.TransOpenRecId);
            return element.custOpenTransManager.getCashDiscDate(custTransOpen);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>VendNettingTransView</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            QueryBuildDataSource qbdsVendNettingTrans = this.query().dataSourceTable(tableNum(VendNettingTransView));
            this.query().addCompanyRange(tmpNettingBalance.VendCompany);
            CustVendNettingCandidateQueryBuilder::buildVendTransQueryFromTmpNettingBalance(qbdsVendNettingTrans, tmpNettingBalance);

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayVendTransMarked</Name>
						<Source><![CDATA[
        internal display boolean displayVendTransMarked(VendNettingTransView _vendNettingTransView)
        {
            return vendTransMarked.in(_vendNettingTransView);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayVendTransAmountToNet</Name>
						<Source><![CDATA[
        internal display AmountCur displayVendTransAmountToNet(VendNettingTransView _vendNettingTransView)
        {
            return _vendNettingTransView.AmountCur;
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayCashDiscDate</Name>
						<Source><![CDATA[
        internal display CustCashDiscDate displayCashDiscDate(VendNettingTransView _vendNettingTransView)
        {
            VendTransOpen vendTransOpen = VendTransOpen::find(_vendNettingTransView.TransOpenRecId);
            return element.vendOpenTransManager.getCashDiscDate(vendTransOpen);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Post</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (!element.validatePost(custTransMarked, vendTransMarked, NettingDate.dateValue()))
            {
                return;
            }

            TransDate latestInvoiceDate = max(latestCustInvoiceDate, latestVendInvoiceDate);
            if (NettingDate.dateValue() < latestInvoiceDate)
            {
                if (Box::yesNo(strFmt("@CashManagement:NettingPostingDateEarlierThanInvoiceDate", NettingDate.dateValue(), latestInvoiceDate), DialogButton::No) == DialogButton::No)
                {
                    return;
                }
            }

            changecompany(currentCompany)
            {
                CustVendNettingExecution execution = CustVendNettingExecution::createFromCustVendNettingBalanceTmp(tmpNettingBalance, NettingDate.dateValue(), custNetTotalAmountMST < 0);

                CustVendNettingTransMarked::createFromCustSet(custTransMarked, execution.RecId);
                CustVendNettingTransMarked::createFromVendSet(vendTransMarked, execution.RecId);

                Args args = new Args(formStr(CustVendCreateNetting));
                args.record(execution);
                MenuFunction menuFunction = new MenuFunction(menuItemActionStr(CustVendNettingPost), MenuItemType::Action);
                menuFunction.run(args);

                execution.reread();

                if (execution.ProcessingStatus == CustVendNettingProcessStatus::Posted)
                {
                    custTransMarked = new Set(Types::Record);
                    vendTransMarked = new Set(Types::Record);

                    if (PrintNettingAdvice.value())
                    {
                        CustVendNettingAdviceReportController::printNettingAdviceReport(args);
                    }
                }

                element.refreshDataSource();
                Post.enabled(false);

                element.resetNetAmountAndBalance();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Cancel</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            element.close();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>NettingDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                element.managePostButton();
                element.calculateNettingTotal();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CustMarkSelectedButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            CustNettingTransTotalView custNettingTrans = custNettingTransTotalView_ds.getFirst(true);

            while (custNettingTrans)
            {
                element.markCustTrans(custNettingTrans);
                custNettingTrans = custNettingTransTotalView_ds.getNext();
            }

            element.calculateNettingTotal();

            latestCustInvoiceDate = element.calculateLatestCustInvoiceDate();

            element.refreshDataSource();
            element.managePostButton();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CustUnmarkSelectedButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            CustNettingTransTotalView custNettingTrans = custNettingTransTotalView_ds.getFirst(true);

            while (custNettingTrans)
            {
                element.unmarkCustTrans(custNettingTrans);
                custNettingTrans = custNettingTransTotalView_ds.getNext();
            }

            element.calculateNettingTotal();

            latestCustInvoiceDate = element.calculateLatestCustInvoiceDate();

            element.refreshDataSource();
            element.managePostButton();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>VendMarkSelectedButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            VendNettingTransView vendNettingTrans = vendNettingTransView_ds.getFirst(true);

            while (vendNettingTrans)
            {
                element.markVendTrans(vendNettingTrans);
                vendNettingTrans = vendNettingTransView_ds.getNext();
            }

            element.calculateNettingTotal();

            latestVendInvoiceDate = element.calculateLatestVendInvoiceDate();

            element.refreshDataSource();
            element.managePostButton();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>VendUnmarkSelectedButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            VendNettingTransView vendNettingTrans = vendNettingTransView_ds.getFirst(true);

            while (vendNettingTrans)
            {
                element.unmarkVendTrans(vendNettingTrans);
                vendNettingTrans = vendNettingTransView_ds.getNext();
            }

            element.calculateNettingTotal();

            latestVendInvoiceDate = element.calculateLatestVendInvoiceDate();

            element.refreshDataSource();
            element.managePostButton();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>CustNettingTransTotalView</Name>
			<Table>CustNettingTransTotalView</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DueDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Invoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransOpenRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<CrossCompanyAutoQuery>Yes</CrossCompanyAutoQuery>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>VendNettingTransView</Name>
			<Table>VendNettingTransView</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DueDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Invoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransOpenRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<CrossCompanyAutoQuery>Yes</CrossCompanyAutoQuery>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@CashManagement:CreatNetting</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">SimpleDetails</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>Post</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>CustVendNettingPost</MenuItemName>
								<MenuItemType>Action</MenuItemType>
								<MultiSelect>Yes</MultiSelect>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>Cancel</Name>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<MultiSelect>Yes</MultiSelect>
								<Text>@ApplicationFoundation:DocuFileSaveCancelButton</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FormGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>HeaderGroup</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>AgreementInfo</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Skip>Yes</Skip>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabControl">
						<Name>Tab</Name>
						<Type>Tab</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormTabPageControl">
								<Name>NettingParameters</Name>
								<Type>TabPage</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>AgreementName</Name>
										<AllowEdit>No</AllowEdit>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayAgreementName</DataMethod>
										<Label>@CashManagement:Agreement</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Currency</Name>
										<AllowEdit>No</AllowEdit>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayCurrencyCode</DataMethod>
										<Label>@CashManagement:NettingCurrency</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CustCompany</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayCustCompany</DataMethod>
										<Label>@CashManagement:CustLegalEntity</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CustAccount</Name>
										<AllowEdit>No</AllowEdit>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayCustAccountNum</DataMethod>
										<Label>@SYS124832</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>VendCompany</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayVendCompany</DataMethod>
										<Label>@CashManagement:VendLegalEntity</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>VendAccount</Name>
										<AllowEdit>No</AllowEdit>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayVendAccountNum</DataMethod>
										<Label>@SYS115631</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>NettingDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Date</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@CashManagement:NettingPostingDate</Label>
										<Mandatory>Yes</Mandatory>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>PrintNettingAdvice</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@CashManagement:PrintNettingAdvice</Label>
										<Style>Toggle</Style>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
								<Caption>@CashManagement:NettingParameters</Caption>
								<FastTabExpanded>Yes</FastTabExpanded>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormTabPageControl">
								<Name>CustomerTrans</Name>
								<Type>TabPage</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneControl">
										<Name>CustActionPane</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPane</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>CustSelectionButtonGroup</Name>
												<Type>ButtonGroup</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>CustMarkSelectedButton</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<NeededPermission>Update</NeededPermission>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<MultiSelect>Yes</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<Text>@CashManagement:MarkSelectedForSettlement</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>CustUnmarkSelectedButton</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<NeededPermission>Update</NeededPermission>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<MultiSelect>Yes</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<Text>@CashManagement:UnmarkSelected</Text>
													</AxFormControl>
												</Controls>
												<DataSource>CustNettingTransTotalView</DataSource>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
										<Style>Strip</Style>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>CustInvoice</Name>
										<Type>Grid</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>CustTransOpen_MarkTrans</Name>
												<Type>CheckBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>displayCustTransMarked</DataMethod>
												<DataSource>CustNettingTransTotalView</DataSource>
												<Label>@SYS19120</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>CustTrans_Invoice</Name>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>String</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>Invoice</DataField>
												<DataSource>CustNettingTransTotalView</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>CustTransOpen_DueDate</Name>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>Date</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>DueDate</DataField>
												<DataSource>CustNettingTransTotalView</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>CustTransOpen_CashDiscDate</Name>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>Date</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>displayCashDiscDate</DataMethod>
												<DataSource>CustNettingTransTotalView</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>CustTransOpen_Amount</Name>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>Real</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Alignment>Right</Alignment>
												<DataField>AmountCur</DataField>
												<DataSource>CustNettingTransTotalView</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>CustTrans_CurrencyCode</Name>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>String</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>CurrencyCode</DataField>
												<DataSource>CustNettingTransTotalView</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>Cust_AmountToNet</Name>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>Real</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<AllowNegative>Yes</AllowNegative>
												<DataMethod>displayCustTransAmountToNet</DataMethod>
												<DataSource>CustNettingTransTotalView</DataSource>
												<Label>@CashManagement:AmountToNet</Label>
											</AxFormControl>
										</Controls>
										<DataSource>CustNettingTransTotalView</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@CashManagement:OpenCustomerInvoices</Caption>
								<FastTabExpanded>Yes</FastTabExpanded>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormTabPageControl">
								<Name>VendorTrans</Name>
								<Type>TabPage</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneControl">
										<Name>VendActionPane</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPane</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>VendSelectionButtonGroup</Name>
												<Type>ButtonGroup</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>VendMarkSelectedButton</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<NeededPermission>Update</NeededPermission>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<MultiSelect>Yes</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<Text>@CashManagement:MarkSelectedForSettlement</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>VendUnmarkSelectedButton</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<NeededPermission>Update</NeededPermission>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<MultiSelect>Yes</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<Text>@CashManagement:UnmarkSelected</Text>
													</AxFormControl>
												</Controls>
												<DataSource>VendNettingTransView</DataSource>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
										<Style>Strip</Style>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>VendInvoice</Name>
										<Type>Grid</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>VendTransOpen_MarkTrans</Name>
												<Type>CheckBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>displayVendTransMarked</DataMethod>
												<DataSource>VendNettingTransView</DataSource>
												<Label>@SYS19120</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>VendTrans_Invoice</Name>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>String</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>Invoice</DataField>
												<DataSource>VendNettingTransView</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>VendTransOpen_DueDate</Name>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>Date</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>DueDate</DataField>
												<DataSource>VendNettingTransView</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>VendTransOpen_CashDiscDate</Name>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>Date</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>displayCashDiscDate</DataMethod>
												<DataSource>VendNettingTransView</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>VendTransOpen_Amount</Name>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>Real</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<AllowNegative>No</AllowNegative>
												<DataField>AmountCur</DataField>
												<DataSource>VendNettingTransView</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>VendTrans_CurrencyCode</Name>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>String</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>CurrencyCode</DataField>
												<DataSource>VendNettingTransView</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>Vend_AmountToNet</Name>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>Real</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<AllowNegative>Yes</AllowNegative>
												<DataMethod>displayVendTransAmountToNet</DataMethod>
												<DataSource>VendNettingTransView</DataSource>
												<Label>@CashManagement:AmountToNet</Label>
											</AxFormControl>
										</Controls>
										<DataSource>VendNettingTransView</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@CashManagement:OpenVendorInvoices</Caption>
								<FastTabExpanded>Yes</FastTabExpanded>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormTabPageControl">
								<Name>NettingTotal</Name>
								<Type>TabPage</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>NettingTotalGroup</Name>
										<AllowEdit>No</AllowEdit>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>CustNettingTotalGroup</Name>
												<AllowEdit>No</AllowEdit>
												<ExtendedStyle>tabularFields</ExtendedStyle>
												<Pattern>TabularFields</Pattern>
												<PatternVersion>1.1</PatternVersion>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>CustCaption</Name>
														<ExtendedStyle>tabularFields_title</ExtendedStyle>
														<HeightMode>SizeToAvailable</HeightMode>
														<Type>Group</Type>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls />
														<AllowUserSetup>No</AllowUserSetup>
														<ArrangeMethod>None</ArrangeMethod>
														<FrameType>None</FrameType>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>CustRowHeader</Name>
														<ExtendedStyle>tabularFields_rowHeader</ExtendedStyle>
														<Type>Group</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormStaticTextControl">
																<Name>CustColumn0Text</Name>
																<AllowEdit>No</AllowEdit>
																<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
																<Type>StaticText</Type>
																<FormControlExtension
																	i:nil="true" />
																<Text></Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStaticTextControl">
																<Name>CustNettingTotalText</Name>
																<AllowEdit>No</AllowEdit>
																<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
																<Type>StaticText</Type>
																<FormControlExtension
																	i:nil="true" />
																<Text>@CashManagement:CustNettingTotal</Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStaticTextControl">
																<Name>CustCashDiscText</Name>
																<AllowEdit>No</AllowEdit>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
																<Type>StaticText</Type>
																<FormControlExtension
																	i:nil="true" />
																<Text>@CashManagement:CustNettingCashDisc</Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStaticTextControl">
																<Name>CustBalanceAfterNettingText</Name>
																<AllowEdit>No</AllowEdit>
																<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
																<Type>StaticText</Type>
																<FormControlExtension
																	i:nil="true" />
																<Text>@CashManagement:CustBalanceAfterNetting</Text>
															</AxFormControl>
														</Controls>
														<AllowUserSetup>No</AllowUserSetup>
														<ArrangeMethod>None</ArrangeMethod>
														<FrameType>None</FrameType>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>CustAccountingCurrency</Name>
														<ExtendedStyle>tabularFields_row</ExtendedStyle>
														<Type>Group</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormStaticTextControl">
																<Name>CustAccountingCurrencyText</Name>
																<AllowEdit>No</AllowEdit>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
																<Type>StaticText</Type>
																<FormControlExtension
																	i:nil="true" />
																<Text></Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>CustNettingTotalAmountMST</Name>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataMethod>displayCustNetTotalAmountMST</DataMethod>
																<ShowLabel>No</ShowLabel>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>CustCashDiscAmountMST</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<ShowLabel>No</ShowLabel>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>CustBalanceAmountMST</Name>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataMethod>displayCustBalanceMST</DataMethod>
																<ShowLabel>No</ShowLabel>
															</AxFormControl>
														</Controls>
														<AllowUserSetup>No</AllowUserSetup>
														<ArrangeMethod>None</ArrangeMethod>
														<FrameType>None</FrameType>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>CustReportingCurrency</Name>
														<ExtendedStyle>tabularFields_row</ExtendedStyle>
														<Type>Group</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormStaticTextControl">
																<Name>CustReportingCurrencyText</Name>
																<AllowEdit>No</AllowEdit>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
																<Type>StaticText</Type>
																<FormControlExtension
																	i:nil="true" />
																<Text></Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>CustNettingTotalAmountReporting</Name>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataMethod>displayCustNetTotalAmountReport</DataMethod>
																<ShowLabel>No</ShowLabel>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>CustCashDiscAmountReporting</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<ShowLabel>No</ShowLabel>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>CustBalanceAmountReporting</Name>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataMethod>displayCustBalanceReport</DataMethod>
																<ShowLabel>No</ShowLabel>
															</AxFormControl>
														</Controls>
														<AllowUserSetup>No</AllowUserSetup>
														<ArrangeMethod>None</ArrangeMethod>
														<FrameType>None</FrameType>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>CustFooter</Name>
														<ExtendedStyle>tabularFields_rowFooter</ExtendedStyle>
														<Type>Group</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls />
														<AllowUserSetup>No</AllowUserSetup>
														<ArrangeMethod>None</ArrangeMethod>
														<FrameType>None</FrameType>
													</AxFormControl>
												</Controls>
												<AllowUserSetup>Restricted</AllowUserSetup>
												<ArrangeMethod>None</ArrangeMethod>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>VendNettingTotalGroup</Name>
												<AllowEdit>No</AllowEdit>
												<ExtendedStyle>tabularFields</ExtendedStyle>
												<Pattern>TabularFields</Pattern>
												<PatternVersion>1.1</PatternVersion>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>VendCaption</Name>
														<ExtendedStyle>tabularFields_title</ExtendedStyle>
														<HeightMode>SizeToAvailable</HeightMode>
														<Type>Group</Type>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls />
														<AllowUserSetup>No</AllowUserSetup>
														<ArrangeMethod>None</ArrangeMethod>
														<FrameType>None</FrameType>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>VendRowHeader</Name>
														<ExtendedStyle>tabularFields_rowHeader</ExtendedStyle>
														<Type>Group</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormStaticTextControl">
																<Name>VendColumn0Text</Name>
																<AllowEdit>No</AllowEdit>
																<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
																<Type>StaticText</Type>
																<FormControlExtension
																	i:nil="true" />
																<Text></Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStaticTextControl">
																<Name>VendNettingTotalText</Name>
																<AllowEdit>No</AllowEdit>
																<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
																<Type>StaticText</Type>
																<FormControlExtension
																	i:nil="true" />
																<Text>@CashManagement:VendNettingTotal</Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStaticTextControl">
																<Name>VendCashDiscText</Name>
																<AllowEdit>No</AllowEdit>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
																<Type>StaticText</Type>
																<FormControlExtension
																	i:nil="true" />
																<Text>@CashManagement:VendNettingCashDisc</Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStaticTextControl">
																<Name>VendBalanceAfterNettingText</Name>
																<AllowEdit>No</AllowEdit>
																<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
																<Type>StaticText</Type>
																<FormControlExtension
																	i:nil="true" />
																<Text>@CashManagement:VendBalanceAfterNetting</Text>
															</AxFormControl>
														</Controls>
														<AllowUserSetup>No</AllowUserSetup>
														<ArrangeMethod>None</ArrangeMethod>
														<FrameType>None</FrameType>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>VendAccountingCurrency</Name>
														<ExtendedStyle>tabularFields_row</ExtendedStyle>
														<Type>Group</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormStaticTextControl">
																<Name>VendAccountingCurrencyText</Name>
																<AllowEdit>No</AllowEdit>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
																<Type>StaticText</Type>
																<FormControlExtension
																	i:nil="true" />
																<Text></Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>VendNettingTotalAmountMST</Name>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataMethod>displayVendNetTotalAmountMST</DataMethod>
																<ShowLabel>No</ShowLabel>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>VendCashDiscAmountMST</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<ShowLabel>No</ShowLabel>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>VendBalanceAmountMST</Name>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataMethod>displayVendBalanceMST</DataMethod>
																<ShowLabel>No</ShowLabel>
															</AxFormControl>
														</Controls>
														<AllowUserSetup>No</AllowUserSetup>
														<ArrangeMethod>None</ArrangeMethod>
														<FrameType>None</FrameType>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>VendReportingCurrency</Name>
														<ExtendedStyle>tabularFields_row</ExtendedStyle>
														<Type>Group</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormStaticTextControl">
																<Name>VendReportingCurrencyText</Name>
																<AllowEdit>No</AllowEdit>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
																<Type>StaticText</Type>
																<FormControlExtension
																	i:nil="true" />
																<Text></Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>VendNettingTotalAmountReporting</Name>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataMethod>displayVendNetTotalAmountReport</DataMethod>
																<ShowLabel>No</ShowLabel>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>VendCashDiscAmountReporting</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<ShowLabel>No</ShowLabel>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>VendBalanceAmountReporting</Name>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataMethod>displayVendBalanceReport</DataMethod>
																<ShowLabel>No</ShowLabel>
															</AxFormControl>
														</Controls>
														<AllowUserSetup>No</AllowUserSetup>
														<ArrangeMethod>None</ArrangeMethod>
														<FrameType>None</FrameType>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>VendFooter</Name>
														<ExtendedStyle>tabularFields_rowFooter</ExtendedStyle>
														<Type>Group</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls />
														<AllowUserSetup>No</AllowUserSetup>
														<ArrangeMethod>None</ArrangeMethod>
														<FrameType>None</FrameType>
													</AxFormControl>
												</Controls>
												<AllowUserSetup>Restricted</AllowUserSetup>
												<ArrangeMethod>None</ArrangeMethod>
												<FrameType>None</FrameType>
											</AxFormControl>
										</Controls>
										<AllowUserSetup>Restricted</AllowUserSetup>
										<Columns>2</Columns>
									</AxFormControl>
								</Controls>
								<Caption>@CashManagement:NettingTotal</Caption>
								<FastTabExpanded>Yes</FastTabExpanded>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
						<Style>FastTabs</Style>
					</AxFormControl>
				</Controls>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts>
		<AxFormPartReference xmlns="">
			<Name>CustVendNettingCustTransDetails</Name>
			<DataSource>CustNettingTransTotalView</DataSource>
			<DataSourceRelation>SelfLink</DataSourceRelation>
			<MenuItemName>CustVendNettingCustTransDetails</MenuItemName>
		</AxFormPartReference>
		<AxFormPartReference xmlns="">
			<Name>CustVendNettingVendTransDetails</Name>
			<DataSource>VendNettingTransView</DataSource>
			<DataSourceRelation>SelfLink</DataSourceRelation>
			<MenuItemName>CustVendNettingVendTransDetails</MenuItemName>
		</AxFormPartReference>
	</Parts>
</AxForm>