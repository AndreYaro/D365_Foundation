<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailPriceListParameterSlider</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
/// <summary>
/// This dialog displays the from date, to date for retail price change reports.
/// </summary>
[Form]
public class RetailPriceListParameterSlider extends FormRun
{
    RetailPriceListParameters params;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the dialog with parameters passed.
    /// </summary>
    public void init()
    {
        FormRun             formRun;
        PageInteraction     pageInteraction;
        Object              implementationObject;

        super();

        date currentDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        FromDate.dateValue(currentDate);
        ToDate.dateValue(currentDate + 1);

        Args args = element.args();

        if (args)
        {
            params = args.parmObject();
            if (params)
            {
                FromDate.dateValue(params.parmDateFrom());
                ToDate.dateValue(params.parmDateTo());
                StoreIdField.text(params.parmStoreId());
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>FromDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// This method validates the dates entered.
        /// </summary>
        /// <returns>Value returned by base class method.</returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            date dateFrom = FromDate.dateValue();
            
            ToDate.dateValue(dateFrom + 6);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ToDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// This method validates the dates entered.
        /// </summary>
        /// <returns>Value returned by base class method.</returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            date dateFrom = FromDate.dateValue();
            date dateTo = ToDate.dateValue();

            if (dateFrom > dateTo) // If from date is later than the to date, then set the the to date as the from date.
            {
                FromDate.dateValue(dateTo);
            }


            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>StoreIdField</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// This method gets the operating unit number for the selected store.
        /// </summary>
        public boolean modified()
        {
            boolean ret;
            ret = super();

            params.parmOperatingUnitNumber(this.getOperatingUnitNumber(StoreIdField.text()));

            // If a store with the store number is found, set it to blank.
            if (System.String::IsNullOrEmpty(params.parmOperatingUnitNumber()))
            {
                StoreIdField.text("@Retail:RetailReportDefaultStoreDisplay");
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>getOperatingUnitNumber</Name>
						<Source><![CDATA[
        private str getOperatingUnitNumber(str storeNumber)
        {
            RetailStoreView store;
            select firstonly store where store.StoreNum == storeNumber;
            str opUnitNumber;

            // If a store with the store number is found, return the operating unit number.
            if (store != null)
            {
                opUnitNumber = store.OperatingUnitNum;
            }

            return opUnitNumber;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OkButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Click button event handler.
        /// </summary>
        public void clicked()
        {
            Args                            args;
            FormRun                         formRun;
            OMOperatingUnit                 operatingUnit;
            RetailStoreTable                retailStore;

            if (ToDate.dateValue() - FromDate.dateValue() > 7)
            {
                Box::stop("@RET_PRICECHANGES:PriceReportOnlyFor7Days");
            }
            else
            {
                params.parmDateFrom(FromDate.dateValue());
                params.parmDateTo(ToDate.dateValue());
                params.parmDisplayStore(StoreIdField.text());
                params.parmCalculateVariant(IncludeProductDimensionsField.checked());
                params.parmCheckInventoryAvailability(CheckInventoryAvailabilityField.checked());
                params.parmDisplayPriceChangesOnly(DisplayPriceChangesOnlyField.checked());

                select operatingUnit exists join retailStore 
                    where  operatingUnit.RecId == retailStore.OMOperatingUnitID && retailStore.StoreNumber == params.parmDisplayStore();

                args = new Args();
                args.record(operatingUnit);

                if (IncludeProductDimensionsField.checked())
                {
                    args.name(formstr(RetailStoreItemPriceListWithDimensions));
                    
                }
                else
                {
                    args.name(formstr(RetailStoreItemPriceListWithoutDimensions));
                }

                args.parmObject(params);
                formRun = classfactory.formRunClass(args);
                formRun.init();
                formRun.run();
                formRun.wait();

                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@RET_PRICECHANGES:PriceReportParamaters</Caption>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ContentSection</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>FromDate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Date</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@Retail:RetailReportFromDate</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>ToDate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Date</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@Retail:RetailReportToDate</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>StoreIdField</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>RetailStoreId</ExtendedDataType>
						<Label>@Retail:RetailReportStoreNumber</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>CheckInventoryAvailabilityField</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@RET_PRICECHANGES:DisplayProductsWithAvailableInvenetory</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>IncludeProductDimensionsField</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@RET_PRICECHANGES:DisplayPricesForVariants</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>DisplayPriceChangesOnlyField</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@RET_PRICECHANGES:DisplayProductsWithPriceChanges</Label>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>CommitButtons</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OkButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<Text>@SYS5469</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
						<Text>@Retail:RetailReportCancelButton</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>