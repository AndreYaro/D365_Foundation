<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>EcoResCategorySingleLookup</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

[Form]
public class EcoResCategorySingleLookup extends FormRun
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    FormControl                     callingControl;
    boolean                         canSelect;
    EcoResCategoryHierarchy         selectedCategoryHierarchy;
    EcoResCategory                  selectedCategory;
    EcoResCategoryId                selectedCategoryId;
    EcoResCategoryTreeDatasource    hierarchyTree;
    EcoResCategoryLookupParameters  lookupParameters;
    boolean                         isMultiHierarchy;

}
]]></Source>
			</Method>
			<Method>
				<Name>checkAndAddHierarchy</Name>
				<Source><![CDATA[
    // Sets the field 'Category' visible ON for multi hierarchy and add the hierarchy names into combo box
    public void checkAndAddHierarchy()
    {
        EcoResCategoryHierarchyRole         ecoResCategoryHierarchyRoleLocal;
        EcoResCategoryHierarchy             ecoResCategoryHierarchyLocal;
        QueryRun queryRun;
        container roles = lookupParameters.parmMultiRoleSelectionSet();
        RefRecId  selectedCategoryHierarchyId = lookupParameters.parmSelectedCategoryHierarchyId();

        // if multiple role lookup wasn't set, use the first role found on the selected hierarchy
        if (conLen(roles) == 0)
        {
            select NamedCategoryHierarchyRole from ecoResCategoryHierarchyRoleLocal
                where ecoResCategoryHierarchyRoleLocal.CategoryHierarchy == selectedCategoryHierarchy.RecId;
            roles = [ecoResCategoryHierarchyRoleLocal.NamedCategoryHierarchyRole];
        }

        // if more than 1 hierarchy matches the roles given, enable hierarchy picker
        queryRun = new QueryRun(this.queryHierarchiesByRoles(roles, true));
        if (queryRun.next())
        {
            ecoResCategoryHierarchyRoleLocal = queryRun.get(tableNum(EcoResCategoryHierarchyRole));
            if (ecoResCategoryHierarchyRoleLocal.RecId > 1)
            {
                isMultiHierarchy = true;
            }
        }
        else
        {
            isMultiHierarchy = false;
        }

        if (isMultiHierarchy)
        {
            HierarchySelector.visible(true);
            eventSource.EventWriteProductsGenericMessage('Category hierarchy', funcName(), 'Hierarchy picker enabled.');

            queryRun = new queryRun(this.queryHierarchiesByRoles(roles));
            while (queryRun.next())
            {
                ecoResCategoryHierarchyRoleLocal = queryRun.get(tableNum(EcoResCategoryHierarchyRole));
                ecoResCategoryHierarchyLocal = queryRun.get(tableNum(EcoResCategoryHierarchy));
                if (selectedCategoryHierarchyId != ecoResCategoryHierarchyLocal.RecId)
                {
                    HierarchySelector.add(ecoResCategoryHierarchyLocal.Name); // Add the hierarchy names into category list.
                }
            }

            HierarchySelector.selectText(selectedCategory ? EcoResCategoryHierarchy::find(selectedCategory.CategoryHierarchy).Name : selectedCategoryHierarchy.Name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeSelect</Name>
				<Source><![CDATA[
    public void closeSelect(str _selectString)
    {
        if (ctrlFormTree.getRoot() && canSelect)
        {
            super(_selectString);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeSelectRecord</Name>
				<Source><![CDATA[
    public void closeSelectRecord(Common _selectedRecord)
    {
        if (ctrlFormTree.getRoot() && canSelect)
        {
            super(_selectedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        EcoResCategoryHierarchyRole ecoResCategoryHierarchyRole;
        if (!element.args().record())
        {
            throw error(strfmt("@SYS22678",element.name()));
        }
        callingControl              = element.args().caller();
        selectedCategoryHierarchy   = element.args().record();
        this.initializeSelectedCategory(element.args());
        lookupParameters            = element.args().parmObject();

        if (!lookupParameters)
        {
            lookupParameters = new EcoResCategoryLookupParameters();
        }
        super();

        if ( lookupParameters.parmEcoResCategoryNameFilter() != '' && lookupParameters.parmEcoResCategoryNameFilter() != '*')
        {
            NameFilter.parmFilterValue(lookupParameters.parmEcoResCategoryNameFilter());
        }
        canSelect = false;

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            select NamedCategoryHierarchyRole from ecoResCategoryHierarchyRole
                where ecoResCategoryHierarchyRole.CategoryHierarchy == selectedCategoryHierarchy.RecId;

            if (ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole != EcoResCategoryNamedHierarchyRole::RetailVendorProductHierarchy)
            {
                element.checkAndAddHierarchy();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSelectedCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the form based on the caller.
    /// Identifies form editing rights.
    /// </summary>
    /// <param name = "_args">An <c>Args</c> instance.</param>
    public void initializeSelectedCategory(Args _args)
    {
        if (!selectedCategory)
        {
            selectedCategoryId = str2int64(_args.lookupValue());
            selectedCategory = EcoResCategory::find(selectedCategoryId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryHierarchiesByRoles</Name>
				<Source><![CDATA[
    private Query queryHierarchiesByRoles(container _roles, boolean _countOnly = false)
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(EcoResCategoryHierarchyRole));
        int i;

        qbds.addDataSource(tableNum(EcoResCategoryHierarchy))
            .addLink(fieldNum(EcoResCategoryHierarchyRole, CategoryHierarchy),
                        fieldNum(EcoResCategoryHierarchy, RecId));

        for (i=1; i<=conLen(_roles); i++)
        {
            qbds.addRange(fieldNum(EcoResCategoryHierarchyRole, NamedCategoryHierarchyRole))
                .value(queryValue( conPeek(_roles,i) ));
        }

        if (_countOnly)
        {
            qbds.fields().clearFieldList();
            qbds.addSelectionField(fieldNum(EcoResCategoryHierarchyRole, recId), SelectionField::Count);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        QueryBuildRange     range;
        EcoResCategory      root = null;

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail))
            && isMultiHierarchy)
        {
            selectedCategoryHierarchy = EcoResCategoryHierarchy::findByName(HierarchySelector.valueStr());
        }

        // display tree only if hierarchy exists
        if (selectedCategoryHierarchy.RecId)
        {
            range = ecoResCategoryHierarchy_ds.query().dataSourceTable(tablenum(EcoResCategoryHierarchy)).addRange(fieldnum(EcoResCategoryHierarchy, RecId));
            range.value( queryValue(selectedCategoryHierarchy.RecId ) );
            ecoResCategoryHierarchy_ds.executeQuery();

            root = EcoResCategory::getRoot(selectedCategoryHierarchy.RecId);

            //tree view
            hierarchyTree = new EcoResCategoryTreeDatasource(  ecoResCategory_ds,
                                                               ctrlFormTree,
                                                               fieldnum(EcoResCategory, RecId),
                                                               fieldnum(EcoResCategory, ParentCategory),
                                                               fieldnum(EcoResCategory, Name),
                                                               false /* No ID in description */,
                                                               true,
                                                               0,
                                                               selectedCategoryHierarchy,
                                                               ecoResCategoryHierarchy_ds,
                                                               lookupParameters);

            if (root.RecId)
            {
                hierarchyTree.initRoot(root.Name, root.RecId, hierarchyTree.image());

                this.selectCategory(selectedCategory, callingControl);
            }
            canSelect = false;
        }
        else
        {
            info("@SYS134292");
        }

        super();

        if (hierarchyTree)
        {
            hierarchyTree.setFocusOnFirstMatch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Select the category.
    /// </summary>
    /// <param name = "_selectedCategory">An <c>EcoResCategory</c> instance.</param>
    /// <param name = "_callingControl">An <c>FormControl</c> instance.</param>
    public void selectCategory(EcoResCategory _selectedCategory, FormControl _callingControl)
    {       
        // Select any previously selected category, only if the hierarchies match and the name was not edited.
        if (_selectedCategory.RecId && _selectedCategory.CategoryHierarchy == selectedCategoryHierarchy.RecId && !_callingControl.hasChanged())
        {
            NameFilter.parmFilterValue(_selectedCategory.Name);
            hierarchyTree.expandAndSelect(_selectedCategory.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectAndExit</Name>
				<Source><![CDATA[
    void selectAndExit()
    {
        EcoResCategoryId    ecoResSelectedCategoryId;
        int                 idxSelection;
        FormTreeItem        formTreeItem;
        boolean             selectionValid = false;
        EcoResCategory      ecoResCategorySelected;

        if (!ctrlFormTree || !ctrlFormTree.getRoot())
        {
            return;
        }

        // return selected category ID
        idxSelection = ctrlFormTree.getSelection();
        formTreeItem = ctrlFormTree.getItem(idxSelection);
        ecoResSelectedCategoryId = formTreeItem.data();

        ecoResCategorySelected = EcoResCategory::find(ecoResSelectedCategoryId);

        if (idxSelection == ctrlFormTree.getRoot())
        {
            if (!lookupParameters.parmLeafNodeOnlySelect())
            {
                selectionValid = true;
            }
        }
        else
        {
            selectionValid = (!lookupParameters.parmLeafNodeOnlySelect() || ecoResCategorySelected.isLeaf() );

            if (!InactiveProcurementCategoryCannotBeUsedFlight::instance().isEnabled())
            {
                selectionValid = selectionValid && (ecoResCategorySelected.IsActive || !lookupParameters.parmShowActiveNodesOnly());
            }
        }

        if (selectionValid)
        {
            if (InactiveProcurementCategoryCannotBeUsedFlight::instance().isEnabled())
            {
                selectionValid = ecoResCategorySelected.IsActive || !lookupParameters.parmShowActiveNodesOnly();
            }
        }

        if (selectionValid && lookupParameters.parmEcoResCategorySelectionValidator())
        {
            selectionValid = lookupParameters.parmEcoResCategorySelectionValidator().canSelectCategory(ecoResCategorySelected);
        }

        if (selectionValid)
        {
            canSelect = true;
            if (lookupParameters.parmRecordSelectMode())
            {
                element.closeSelectRecord(ecoResCategorySelected);
            }
            else
            {
                this.closeSelectCategoryId(ecoResCategorySelected);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeSelectCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Close the lookup form, and set return value.
    /// </summary>
    /// <param name = "_ecoResCategorySelected">An <c>EcoResCategory</c> instance.</param>
    public void closeSelectCategoryId(EcoResCategory _ecoResCategorySelected)
    {
        if (_ecoResCategorySelected)
        {
            element.closeSelect(int642str(_ecoResCategorySelected.RecId));
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>NameFilter</Name>
				<Type>Custom</Type>
				<Methods>
					<Method>
						<Name>applyFilter</Name>
						<Source><![CDATA[
        public void applyFilter()
        {
            super();

            if (hierarchyTree)
            {
                hierarchyTree.setNameFilter(this.parmFilterValue());
                hierarchyTree.setFocusOnFirstMatch();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HierarchySelector</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            NameFilter.parmFilterValue('');

            element.run();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ctrlFormTree</Name>
				<Type>Tree</Type>
				<Methods>
					<Method>
						<Name>expanding</Name>
						<Source><![CDATA[
        public boolean expanding(int _idx, FormTreeExpand _action, anytype _data)
        {
            boolean ret;

            ret = super(_idx, _action, _data);

            if (hierarchyTree)
            {
                hierarchyTree.expanding(_idx, _action, _data);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OKButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.selectAndExit();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>EcoResCategoryHierarchy</Name>
			<Table>EcoResCategoryHierarchy</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyModifier</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoNotify>No</AutoNotify>
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>EcoResCategory</Name>
			<Table>EcoResCategory</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CategoryHierarchy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChangeStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Code</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultProjectGlobalCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultThreshold_PSN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsActive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsCategoryAttributesInherited</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsTangible</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Level</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NestedSetLeft</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NestedSetRight</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PKWiUCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>relationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoNotify>No</AutoNotify>
			<JoinSource>EcoResCategoryHierarchy</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources>
				<AxFormDataSourceDerived>
					<Name>EcoResCategory_PCClass</Name>
					<Table>PCClass</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ReuseEnabled</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
			</DerivedDataSources>
		</AxFormDataSource>
	</DataSources>
	<Design>
		<AlwaysOnTop xmlns="">Yes</AlwaysOnTop>
		<Caption xmlns="">@SYS134294</Caption>
		<DefaultAction xmlns="">OKButton</DefaultAction>
		<Frame xmlns="">Border</Frame>
		<HeightMode xmlns="">SizeToContent</HeightMode>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">LookupGridOnly</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">Lookup</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<WidthMode xmlns="">SizeToAvailable</WidthMode>
		<WindowResize xmlns="">Fixed</WindowResize>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Header</Name>
				<ElementPosition>858993458</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>CustomFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacingMode>Fixed</VerticalSpacingMode>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>NameFilter</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>HierarchySelector</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ConfigurationKey>Retail</ConfigurationKey>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS41044</Label>
						<Items />
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTreeControl">
				<Name>ctrlFormTree</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tree</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Actions</Name>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>FormButtonGroupControl1</Name>
						<Type>ButtonGroup</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>OKButton</Name>
								<Type>CommandButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Command>OK</Command>
								<DefaultButton>Yes</DefaultButton>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>CancelButton</Name>
								<Type>CommandButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Command>Cancel</Command>
								<SaveRecord>No</SaveRecord>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalRight</ArrangeMethod>
						<Style>DialogCommitContainer</Style>
					</AxFormControl>
				</Controls>
				<FrameType>None</FrameType>
				<Style>DialogCommit</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>