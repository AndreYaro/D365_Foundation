<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProjResourceCompanyLookup</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ProjResourceCompanyLookup extends FormRun
{
    FormStringControl callerControl;
    boolean useFlatList, useAny, hasSelection, keepformOpen;
    OMHierarchyPurpose hierarchyPurpose;
    Set selected;
    str format = '%1';
    str succeedingFormat = '%2' + ProjConstants::multipleSelectLEDelimiter + '%1';
    
    // Define the max value size for user selected values.
    const int maxSelectedValueSize = 1000;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
        keepformOpen = true;
        Args args = element.args();
        callerControl = args.callerFormControl();
        useFlatList = str2Int(args.parm()) || this.showFlatListLookup();
        selected = new Set(Types::String);

        // toggle display of list or tree
        ListGroup.visible(useFlatList);
        HierarchyGroup.visible(!useFlatList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showFlatListLookup</Name>
				<Source><![CDATA[
    boolean showFlatListLookup()
    {
        select firstonly RecId, HierarchyType from hierarchyPurpose
            where hierarchyPurpose.HierarchyPurpose == HierarchyPurpose::Project
            && hierarchyPurpose.IsDefault;
        return hierarchyPurpose.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedItemsEnumerator</Name>
				<Source><![CDATA[
    private ListEnumerator getSelectedItemsEnumerator(str _callerInput)
    {
        List listCompanies = strSplit(_callerInput, ProjConstants::multipleSelectLEDelimiter);
        return listCompanies.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildHierarchy</Name>
				<Source><![CDATA[
    private void buildHierarchy(RefRecId _parentId, int _parentNode)
    {
        RefRecId hierarchyType = hierarchyPurpose.HierarchyType;
        OMHierarchyRelationship relationship;
        OMInternalOrganization organization;
        CompanyInfo companies;

        boolean isSelected;
        FormTreeItem item;
        int node;

        while select ChildOrganization from relationship
            where relationship.ParentOrganization == _parentId && relationship.HierarchyType == hierarchyType
            join Name from organization where organization.RecId == relationship.ChildOrganization
            join DataArea from companies where companies.RecId == relationship.ChildOrganization
        {
            isSelected = hasSelection && selected.in(companies.DataArea);

            item = new FormTreeItem(organization.Name);
            item.data(companies.DataArea);

            if (isSelected)
            {
                item.stateChecked(isSelected);
            }

            node = CompanyHierarchy.addItem(_parentNode, 0, item);
            element.buildHierarchy(relationship.ChildOrganization, node);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        if (useFlatList && callerControl.text())
        {
            ListEnumerator listEnumerator = element.getSelectedItemsEnumerator(callerControl.text());
            while (listEnumerator.moveNext())
            {
                //datasource.positionrecordbyvalue() method clears the marking everytime it calls because it lock down a row and then do executequery/research.
                // So using findValue() method instead
                if (CompanyView_DS.findValue(fieldNum(CompanyView, ID), listEnumerator.current()))
                {
                    CompanyView_DS.mark(true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    public boolean canClose()
    {
        boolean canClose = true;
        str selectedValues;

        if (!useAny)
        {
            if (useFlatList)
            {
                // extract data source selection only when user clicks on OK button
                if (!keepformOpen)
                {
                    selectedValues = element.getSelectionsFromDataSource();
                }
                else
                {
                    canClose = false;
                }
            }
            else
            {
                // extract tree selection
                selectedValues = element.getSelectionsFromTree(CompanyHierarchy.getRoot(), selectedValues);
            }

            selectedValues = element.validateAndSetSelectedValuesBySize(selectedValues);

            if (selectedValues)
            {
                callerControl.text(selectedValues);
            }
            else
            {
                callerControl.text(curExt());
            }
        }

        // keep the form open if canClose it not true
        if (canClose)
        {
            return super();
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectionsFromDataSource</Name>
				<Source><![CDATA[
    private str getSelectionsFromDataSource()
    {
        str selectedValues;
        CompanyView companyLookup;

        if (CompanyView_ds.anyMarked())
        {
            companyLookup = CompanyView_ds.getFirst(true);
            while (companyLookup)
            {
                if (!selectedValues)
                {
                    selectedValues = companyLookup.id;
                }
                else
                {
                    selectedValues = strFmt(succeedingFormat, selectedValues, companyLookup.id);
                }
                companyLookup = CompanyView_ds.getNext();
            }
        }
        return selectedValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectionsFromTree</Name>
				<Source><![CDATA[
    private str getSelectionsFromTree(int _node, str _selectedValues)
    {
        if (_node)
        {
            FormTreeItem item = CompanyHierarchy.getItem(_node);
            if (item.stateChecked() == FormTreeCheckedState::Checked)
            {
                _selectedValues = strFmt(format, item.data(), _selectedValues);
                format = succeedingFormat;
            }

            _selectedValues = this.getSelectionsFromTree(CompanyHierarchy.getChild(_node), _selectedValues);
            _selectedValues = this.getSelectionsFromTree(CompanyHierarchy.getNextSibling(_node), _selectedValues);
        }

        return _selectedValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndSetSelectedValuesBySize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the size of the user selected values string.
    /// </summary>
    /// <param name = "_selectedValues">The string of user selected values.</param>
    /// <returns>Return label value 'Any legal entity' if the size of user selected values string is larger than the maxSelctedValueSize.</returns>
    private str validateAndSetSelectedValuesBySize(str _selectedValues)
    {
        str selectedValues = _selectedValues;

        if (strlen(selectedValues) > maxSelectedValueSize)
        {
            info("@Res:SelectedLegalEntitiesExceedsLimit");
            selectedValues = "@SYS4006013";
        }

        return selectedValues;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>CompanyView</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// Build the tree after the query has executed.
        /// </summary>
        public void executeQuery()
        {
            super();

            if (!useFlatList)
            {
                ListEnumerator listEnumerator = element.getSelectedItemsEnumerator(callerControl.text());
                while (listEnumerator.moveNext())
                {
                    selected.add(listEnumerator.current());
                }
                hasSelection = selected.elements();

                element.buildHierarchy(0, 0);
                CompanyHierarchy.update();

                SysFormTreeControl::expandTree(CompanyHierarchy, CompanyHierarchy.getRoot());
                CompanyHierarchy.select(CompanyHierarchy.getRoot());
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Any</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Update controller text to show text as Any legal entity.
        /// </summary>
        public void clicked()
        {
            callerControl.text("@SYS4006013");
            useAny = true;
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OK</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// For flat list, the form should only be closed when user clicks the OK button.
        /// </summary>
        public void clicked()
        {
            keepformOpen = false;
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>CompanyView</Name>
			<Table>CompanyView</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>id</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<HeightMode xmlns="">SizeToContent</HeightMode>
		<Pattern xmlns="">LookupTab</Pattern>
		<PatternVersion xmlns="">1.0</PatternVersion>
		<Style xmlns="">Lookup</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<WidthMode xmlns="">SizeToAvailable</WidthMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ListGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>TabPage</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>CompanySelection</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToContent</HeightMode>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ID</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ID</DataField>
										<DataSource>CompanyView</DataSource>
										<Label>@SYS315616</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Name</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Name</DataField>
										<DataSource>CompanyView</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>CompanyView</DataSource>
								<Style>Tabular</Style>
							</AxFormControl>
						</Controls>
						<Caption>@Proj:ListLookup</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>HierarchyGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>TabPage</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormTreeControl">
								<Name>CompanyHierarchy</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Tree</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<CheckBox>Yes</CheckBox>
								<RowSelect>Yes</RowSelect>
								<SingleSelection>No</SingleSelection>
							</AxFormControl>
						</Controls>
						<Caption>@Proj:HierarchyLookup</Caption>
					</AxFormControl>
				</Controls>
				<ShowTabs>No</ShowTabs>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Commands</Name>
				<ElementPosition>1610612734</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>CommandsBtnGrp</Name>
						<Type>ButtonGroup</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>Any</Name>
								<ElementPosition>954437176</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>CommandButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Command>OK</Command>
								<Text>@SYS4006013</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>OK</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Left>0</Left>
								<LeftMode>RightEdge</LeftMode>
								<Type>CommandButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Command>OK</Command>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalRight</ArrangeMethod>
						<Style>DialogCommitContainer</Style>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<LeftMargin>3</LeftMargin>
				<LeftMarginMode>Fixed</LeftMarginMode>
				<RightMargin>3</RightMargin>
				<RightMarginMode>Fixed</RightMarginMode>
				<FrameType>None</FrameType>
				<Style>DialogCommit</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>