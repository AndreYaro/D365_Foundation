<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>LedgerCovTotalProcessAutomationCriteria</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class LedgerCovTotalProcessAutomationCriteria extends FormRun implements ProcessScheduleParametersIInitialize,
                                                                                ProcessScheduleParametersIValidate,
                                                                                ProcessScheduleParametersIWrite
{
    private ProcessScheduleSchedulingContract schedulingContract;

}
]]></Source>
			</Method>
			<Method>
				<Name>setSchedulingContract</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void setSchedulingContract(ProcessScheduleSchedulingContract _schedulingParameters)
    {
        schedulingContract = _schedulingParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForSeriesCreate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void initializeForSeriesCreate()
    {
        this.CheckAndWarnLegacyBatchExists();
        CashflowFilterType.selection(AllNew::New);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForSeriesUpdate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void initializeForSeriesUpdate()
    {
        this.CheckAndWarnLegacyBatchExists();

        LedgerCovTotalProcessAutomationSchedulingParameters parameters =
            LedgerCovTotalProcessAutomationSchedulingParameters::findForProcessScheduleSeries(schedulingContract.getProcessScheduleSeriesData().getSeriesRecId(), true);

        CashflowFilterType.selection(parameters.Type);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForOccurrenceCreate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void initializeForOccurrenceCreate()
    {
        CashflowFilterType.selection(AllNew::New);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForOccurrenceUpdate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void initializeForOccurrenceUpdate()
    {
        LedgerCovTotalProcessAutomationSchedulingParameters parameters =
            LedgerCovTotalProcessAutomationSchedulingParameters::findForProcessScheduleOccurrence(schedulingContract.getProcessScheduleOccurrenceData().getOccurrenceRecId());

        CashflowFilterType.selection(parameters.Type);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createScheduleSeries</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void createScheduleSeries(ProcessScheduleSchedulingContract _schedulingParameters)
    {
        LedgerCovTotalProcessAutomationSchedulingParameters parameters;
        parameters.Type = CashflowFilterType.selection();
        parameters.ProcessScheduleSeries = _schedulingParameters.getProcessScheduleSeriesData().getSeriesRecId();
        parameters.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createScheduledOccurrence</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void createScheduledOccurrence(ProcessScheduleSchedulingContract _schedulingParameters)
    {
        LedgerCovTotalProcessAutomationSchedulingParameters parameters;
        parameters.Type = CashflowFilterType.selection();
        parameters.ProcessScheduleSeries = _schedulingParameters.getProcessScheduleSeriesData().getSeriesRecId();
        parameters.ProcessScheduleOccurrence = _schedulingParameters.getProcessScheduleOccurrenceData().getOccurrenceRecId();
        parameters.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateScheduleSeries</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void updateScheduleSeries(ProcessScheduleSchedulingContract _schedulingParameters)
    {
        LedgerCovTotalProcessAutomationSchedulingParameters parameters =
            LedgerCovTotalProcessAutomationSchedulingParameters::findForProcessScheduleSeries(_schedulingParameters.getProcessScheduleSeriesData().getSeriesRecId(), true);

        if (parameters)
        {
            ttsbegin;
            parameters.Type = CashflowFilterType.selection();
            parameters.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateScheduledOccurrence</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void updateScheduledOccurrence(ProcessScheduleSchedulingContract _schedulingParameters)
    {
        LedgerCovTotalProcessAutomationSchedulingParameters parameters =
            LedgerCovTotalProcessAutomationSchedulingParameters::findForProcessScheduleOccurrence(_schedulingParameters.getProcessScheduleOccurrenceData().getOccurrenceRecId(), true);

        ttsbegin;
        parameters.ProcessScheduleOccurrence = _schedulingParameters.getProcessScheduleOccurrenceData().getOccurrenceRecId();
        parameters.Type = CashflowFilterType.selection();
        parameters.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean validate()
    {
        return this.checkAndWarnLegacyBatchExists();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndWarnLegacyBatchExists</Name>
				<Source><![CDATA[
    private boolean checkAndWarnLegacyBatchExists()
    {
        boolean isExclusivelyUsedByProcessAutomation = true;
        if(!ProcessExecutionProcessStatus::isProcessExclusivelyExecutedByFramework(className2Id(classStr(LedgerCovTotal))))
        {
            isExclusivelyUsedByProcessAutomation = checkFailed("@CashFlowManagement:LedgerCovTotalAutomationLegacyBatchStatusWarningMessage");
        }

        return isExclusivelyUsedByProcessAutomation;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="" />
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@CashFlowManagement:LedgerCovTotalCriteriaPageCaption</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CashflowParameters</Name>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>CashflowFilterType</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<EnumType>AllNew</EnumType>
						<Label>@CashFlowManagement:CashFlowForecastCalculationMethod</Label>
						<Items />
					</AxFormControl>
				</Controls>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>