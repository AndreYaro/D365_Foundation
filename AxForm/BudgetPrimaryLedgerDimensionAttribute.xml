<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BudgetPrimaryLedgerDimensionAttribute</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BudgetPrimaryLedgerDimensionAttribute extends FormRun
{
    BudgetDimensionsListPanel   budgetDimensionsListPanel;
    Set                         originalBudgetDimensions;
    LedgerRecId                 primaryLedger;

}
]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the form should close.
    /// </summary>
    /// <returns>
    /// True if the form should be able to close; otherwise, false.
    /// </returns>
    public boolean canClose()
    {
        boolean ret;

        // Remove any dimension attributes that are budget-enabled but no longer in an account structure for the primary primaryLedger.
        ret = !BudgetPrimaryLedgerDimensionAttribute::cleanupBudgetDimensions();

        if (ret)
        {
            ret = super();
        }
        else
        {
            // Budget-enabled dimension attributes were removed; refresh the list panel.
            budgetDimensionsListPanel.fill();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the primaryLedger dimensions on unposted transactions and then closes the form.
    /// </summary>
    public void closeOk()
    {
        // Add enabled dimension attributes.
        Set enabledBudgetDimensions =
            Set::difference(budgetDimensionsListPanel.getBudgetDimensions(), originalBudgetDimensions);

        if (enabledBudgetDimensions.elements() > 0)
        {
            ttsbegin;

            SetEnumerator enumerator = enabledBudgetDimensions.getEnumerator();

            while (enumerator.moveNext())
            {
                BudgetPrimaryLedgerDimensionAttribute budgetPrimaryLedgerDimensionAttribute;
                budgetPrimaryLedgerDimensionAttribute.PrimaryLedger = primaryLedger;
                budgetPrimaryLedgerDimensionAttribute.DimensionAttribute = enumerator.current();
                budgetPrimaryLedgerDimensionAttribute.insert();
            }

            ttscommit;
        }

        // Remove disabled dimension attributes.
        Set disabledBudgetDimensions =
            Set::difference(originalBudgetDimensions, budgetDimensionsListPanel.getBudgetDimensions());

        if (disabledBudgetDimensions.elements() > 0)
        {
            DimensionAttributeSetStorage setStorage = new DimensionAttributeSetStorage();
            SetEnumerator enumerator = disabledBudgetDimensions.getEnumerator();

            while (enumerator.moveNext())
            {
                BudgetPrimaryLedgerDimensionAttribute budgetPrimaryLedgerDimensionAttribute;

                delete_from budgetPrimaryLedgerDimensionAttribute
                    where budgetPrimaryLedgerDimensionAttribute.PrimaryLedger == primaryLedger &&
                        budgetPrimaryLedgerDimensionAttribute.DimensionAttribute == enumerator.current();

                DimensionAttribute dimAttribute = DimensionAttribute::find(enumerator.current());
                setStorage.addItem(dimAttribute.RecId, dimAttribute.HashKey, NoYes::Yes);
            }

            RecId dimensionSetId = setStorage.save();

            BudgetDimensionStructureChangeSynchronize::processBudgetEnabledDimensionsChange(dimensionSetId, primaryLedger);
        }

        if (enabledBudgetDimensions.elements() > 0 || disabledBudgetDimensions.elements() > 0)
        {
            // Clean up dimension validation cached record for each account structure and related rule structure in current ledger.
            // This will force dimension validation re-validate dimension conmbinations.
            ttsbegin;

            DimensionHierarchyCollection accountStructureCollection = Ledger::getAccountStructureCollectionForLedger();
            accountStructureCollection.initializeEnumerator();

            while (accountStructureCollection.moveNext())
            {
                DimensionHierarchyId accountStructureRecId = accountStructureCollection.currentId();
                DimensionValidation::clearCacheForAccountStructureChange(accountStructureRecId, curExt());

                // Clear up the cache record for current account structure related rule sturcture.
                DimensionRuleAppliedHierarchy dimensionRuleAppliedHierarchy;
                DimensionRule dimensionRule;

                while select DimensionHierarchy from dimensionRuleAppliedHierarchy
                    exists join dimensionRule
                        where dimensionRuleAppliedHierarchy.DimensionRule == dimensionRule.RecId
                            && dimensionRule.AccountStructure == accountStructureRecId
                {
                    DimensionValidation::clearCacheForAccountStructureChange(dimensionRuleAppliedHierarchy.DimensionHierarchy, curExt());
                }
            }

            // Clear the data entity resolved reference cache.
            DimensionCache::onHierarchyChanged();

            ttscommit;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all dimension attributes that are enabled for budgeting for the current Ledger.
    /// </summary>
    /// <returns>
    /// A set containing an element for each budget enabled dimension attribute.
    /// </returns>
    /// <remarks>
    /// Each set value is the RecId of a dimension attribute.
    /// </remarks>
    private Set getBudgetDimensions()
    {
        Set                                     budgetDimensions;
        BudgetPrimaryLedgerDimensionAttribute   budgetPrimaryLedgerDimensionAttribute;

        budgetDimensions = new Set(Types::Int64);

        while select DimensionAttribute from budgetPrimaryLedgerDimensionAttribute
            where budgetPrimaryLedgerDimensionAttribute.PrimaryLedger == primaryLedger
        {
            budgetDimensions.add(budgetPrimaryLedgerDimensionAttribute.DimensionAttribute);
        }

        return budgetDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the steps needed to initialize the form.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Structures have not been assigned to the primary primaryLedger for the company.
    /// </exception>
    public void init()
    {
        if (!LedgerStructure::existsForLedger())
        {
            throw error("@SYS314058");
        }

        primaryLedger = Ledger::current();

        originalBudgetDimensions = this.getBudgetDimensions();

        // Remove any dimension attributes that are budget-enabled but no longer in an account structure for the primary primaryLedger.
        BudgetPrimaryLedgerDimensionAttribute::cleanupBudgetDimensions();

        budgetDimensionsListPanel = BudgetDimensionsListPanel::newForm(element,
            element.controlId(formControlStr(BudgetPrimaryLedgerDimensionAttribute, ListViews)));
        budgetDimensionsListPanel.parmCaptionSelected("@SYS328497");

        super();

        budgetDimensionsListPanel.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        budgetDimensionsListPanel.fill();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@SYS328497</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Height xmlns="">300</Height>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<StatusBarStyle xmlns="">Simple</StatusBarStyle>
		<Style xmlns="">Dialog</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Width xmlns="">400</Width>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>InstructionText</Name>
				<ElementPosition>715827882</ElementPosition>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<FilterExpression>%1</FilterExpression>
				<Type>StaticText</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Text>@SYS314057</Text>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ContentGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ListViews</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<Columns>-1</Columns>
						<ColumnsMode>Fill</ColumnsMode>
						<TopMargin>11</TopMargin>
						<TopMarginMode>Fixed</TopMarginMode>
						<FrameType>None</FrameType>
						<Style>DialogContent</Style>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>DialogCommit</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Ok</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Cancel</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>