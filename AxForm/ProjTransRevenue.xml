<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProjTransRevenue</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ProjTransRevenue extends FormRun
{
    QueryBuildDataSource        qb_projTable;
    QueryBuildDataSource        qb_ProjCategory;
    QueryBuildDataSource        qb_smaSubscriptionTable;
    QueryBuildDataSource        qb_projRevenueTrans;
    QueryBuildDataSource        qb_projRevenueTransSale1;
    QueryBuildDataSource        qb_projRevenueTransSale2;
    QueryBuildDataSource        qb_ProjLineProperty;
    QueryBuildDataSource        qb_ProjService;
    QueryBuildDataSource        qb_ProjTransPosting;
    QueryBuildDataSource        qb_ProjGrantView;

    // <GIN>
    QueryBuildDataSource        qb_projCostTransTaxExtensionIN;
    // </GIN>

    // Range ProjGrantID
    QueryBuildRange             criteriaGrantID;

    // Range lineProperty
    QueryBuildRange             criteriatoBeInvoiced;

    // Range projTable
    QueryBuildRange             criteriaWIPProjId;
    QueryBuildRange             criteriaProjId;

    QueryBuildRange             criteriaProjInvoiceProjId;
    QueryBuildRange             criteriaFixedPrice;
    QueryBuildRange             criteriaTimeMaterial;
    QueryBuildRange             criteriaInternal;
    QueryBuildRange             criteriaCost;
    QueryBuildRange             criteriaInvestment;
    QueryBuildRange             criteriaTime;
    QueryBuildRange             criteriaSorting1;
    QueryBuildRange             criteriaSorting2;
    QueryBuildRange             criteriaSorting3;
    QueryBuildRange             criteriaGroupId;
    QueryBuildRange             criteriaCustAccount;
    QueryBuildRange             criteriaTransStatus1;
    QueryBuildRange             criteriaTransStatus2;

    // Range projCategoryId
    QueryBuildRange             criteriaCategoryGroupId;
    QueryBuildRange             criteriaSubscriptionGroupId;

    // Range projRevenueTrans
    QueryBuildRange             criteriaResource;
    QueryBuildRange             criteriaTransDate;
    QueryBuildRange             criteriaCategoryId;
    QueryBuildRange             criteriaSubscriptionId;
    QueryBuildRange             criteriaOrigin;
    QueryBuildRange             criteriaTransId;
    QueryBuildRange             criteriaRefId;
    QueryBuildRange             criteriaService;
    QueryBuildRange             criteriaSalesCurrency;

    //Range LedgerTransDate
    QueryBuildRange             criteriaLedgerTransDate;

    ProjStatistic               projStatistic;
    [FormObservable]
    TransDate                   ledgerFromDate;
    [FormObservable]
    TransDate                   ledgerToDate;
    boolean                     subscriptionMode;

    ProjInvoiceControl          projInvoiceControl;
    boolean                     linkInvoiceControl;
    boolean                     linkProjStatistic;
    boolean                     linkProjService;
    boolean                     m_bLinkProjFinancialStatisitc;

    ProjCashFlow                projCashFlow;
    boolean                     linkProjCashFlow;

    Map                         ledgerAmountCache;
    ProjTransIdBase             transId;
    ProjTransIdBase             refTransid;

    str                         subscriptionId;

    Object                      callerForm;
    boolean                     isCallerForm;
    boolean                     rangeCategoryGroup;
    boolean                     rangeLedgerTransDate;

    ProjCreateAdjTraceTree      traceTree;
    ProjTransIdBase             selectionTransId;

    #define.star('*')
    // <GIN>
    // <GIN>
    boolean     isIndiaIndirectTaxParameterMarked;
    boolean     isIndiaWHTMarked;
    boolean     isProjRevenueTrans_INEnabled;

    private boolean enableProjMultipleContractLinesForProjectFeature = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

    #ISOCountryRegionCodes
}
]]></Source>
			</Method>
			<Method>
				<Name>bookRefresh</Name>
				<Source><![CDATA[
    void bookRefresh()
    {
        projRevenueTrans_ds.refresh();
        projRevenueTrans_ds.reread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    Query buildQuery()
    {
        Query                       q = new Query();
        PSATmpProjInvoiceSummary    tSummary;

        qb_projRevenueTrans     = q.addDataSource(tableNum(ProjRevenueTrans));

        if (callerForm && isCallerForm && callerForm.name() == formStr(ProjTransRevenue))
        {
            criteriaTransId = qb_projRevenueTrans.addRange(fieldNum(ProjRevenueTrans, TransId));
            return q;
        }

        criteriaResource          = qb_projRevenueTrans.addRange(fieldNum(ProjRevenueTrans, Resource));
        criteriaTransDate       = qb_projRevenueTrans.addRange(fieldNum(ProjRevenueTrans, TransDate));
        criteriaCategoryId      = qb_projRevenueTrans.addRange(fieldNum(ProjRevenueTrans, CategoryId));
        criteriaSubscriptionId  = qb_projRevenueTrans.addRange(fieldNum(ProjRevenueTrans, smaSubscriptionId));
        criteriaOrigin          = qb_projRevenueTrans.addRange(fieldNum(ProjRevenueTrans, TransactionOrigin));
        criteriaTransId         = qb_projRevenueTrans.addRange(fieldNum(ProjRevenueTrans, TransId));
        criteriaRefId           = qb_projRevenueTrans.addRange(fieldNum(ProjRevenueTrans, TransIdRef));
        criteriaSalesCurrency   = qb_projRevenueTrans.addRange(fieldNum(ProjRevenueTrans, CurrencyId));

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            QueryBuildDataSource qb_projRevenueTransTaxExtensionIN = qb_projRevenueTrans.addDataSource(tableNum(ProjRevenueTransTaxExtensionIN));
            qb_projRevenueTransTaxExtensionIN.joinMode(JoinMode::OuterJoin);
            qb_projRevenueTransTaxExtensionIN.relations(true);
        }
        // </GIN>

        if (element.args().dataset() == tableNum(PSATmpProjInvoiceSummary))
        {
            tSummary = element.args().record();
            qb_projRevenueTrans.addRange(fieldNum(ProjRevenueTrans,ProjId)).value(tSummary.ProjId);
        }

        qb_projRevenueTransSale1 = qb_projRevenueTrans.addDataSource(tableNum(ProjRevenueTransSale));
        qb_projRevenueTransSale1.relations(true);
        qb_projRevenueTransSale1.joinMode(JoinMode::ExistsJoin);
        criteriaTransStatus1 = qb_projRevenueTransSale1.addRange(fieldNum(ProjRevenueTransSale, TransStatus));

        // Used for partial invoice which requires to joins to the table
        qb_projRevenueTransSale2 = qb_projRevenueTrans.addDataSource(tableNum(ProjRevenueTransSale));
        qb_projRevenueTransSale2.relations(true);
        qb_projRevenueTransSale2.joinMode(JoinMode::ExistsJoin);
        criteriaTransStatus2 = qb_projRevenueTransSale2.addRange(fieldNum(ProjRevenueTransSale, TransStatus));
        qb_projRevenueTransSale2.enabled(false);

        if (subscriptionMode)
        {
            criteriaOrigin.value(queryValue(ProjOrigin::Subscription));
            qb_projRevenueTrans.addSortField(fieldNum(ProjRevenueTrans, smaEnddate), SortOrder::Descending);
            qb_projRevenueTrans.addSortField(fieldNum(ProjRevenueTrans, smaSubscriptionId));
            qb_projRevenueTrans.addSortField(fieldNum(ProjRevenueTrans, smaStartDate), SortOrder::Descending);
            qb_projRevenueTrans.addSortField(fieldNum(ProjRevenueTrans, smaSubscriptionPeriodType));
        }

        if (element.subscriptionGroup())
        {
            qb_smaSubscriptionTable = qb_projRevenueTrans.addDataSource(tableNum(SMASubscriptionTable));
            qb_smaSubscriptionTable.addLink(fieldNum(ProjRevenueTrans, smaSubscriptionId), fieldNum(SMASubscriptionTable, SubscriptionId));
            qb_smaSubscriptionTable.fetchMode(0);
            qb_smaSubscriptionTable.joinMode(JoinMode::ExistsJoin);

            criteriaSubscriptionGroupId = qb_smaSubscriptionTable.addRange(fieldNum(SMASubscriptionTable, GroupId));
        }

        if (rangeCategoryGroup)
        {
            qb_ProjCategory = qb_projRevenueTrans.addDataSource(tableNum(ProjCategory));
            qb_ProjCategory.addLink(fieldNum(ProjRevenueTrans, CategoryId), fieldNum(ProjCategory, CategoryId));
            qb_ProjCategory.fetchMode(0);
            qb_ProjCategory.joinMode(JoinMode::ExistsJoin);

            criteriaCategoryGroupId = qb_ProjCategory.addRange(fieldNum(ProjCategory, CategoryGroupId));
        }

        if (linkProjService)
        {
            qb_ProjService = qb_projRevenueTrans.addDataSource(tableNum(SMAServiceOrderLine));

            qb_ProjService.addLink(fieldNum(ProjRevenueTrans, TransIdRef), fieldNum(SMAServiceOrderLine, ProjTransId));
            qb_ProjService.addLink(fieldNum(ProjRevenueTrans, ProjId), fieldNum(SMAServiceOrderLine, ProjId));
            qb_ProjService.fetchMode(0);
            qb_ProjService.joinMode(JoinMode::InnerJoin);

            criteriaService = qb_ProjService.addRange(fieldNum(SMAServiceOrderLine, ServiceOrderId));
            criteriaProjId  = qb_ProjService.addRange(fieldNum(SMAServiceOrderLine, ProjId));
        }
        else
        {
            qb_projTable = qb_projRevenueTrans.addDataSource(tableNum(ProjTable));
            qb_projTable.addLink(fieldNum(ProjRevenueTrans, ProjId), fieldNum(ProjTable, ProjId));
            qb_projTable.fetchMode(0);
            qb_projTable.joinMode(JoinMode::ExistsJoin);

            criteriaProjInvoiceProjId   = qb_projTable.addRange(fieldNum(ProjTable, ProjInvoiceProjId));
            criteriaProjId              = qb_projTable.addRange(fieldNum(ProjTable, ProjId));
            criteriaWIPProjId           = qb_projTable.addRange(fieldNum(ProjTable, wipProject));

            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {            
                criteriaFixedPrice          = qb_projTable.addRange(fieldNum(ProjTable, Type));
                criteriaTimeMaterial        = qb_projTable.addRange(fieldNum(ProjTable, Type));
                criteriaInternal            = qb_projTable.addRange(fieldNum(ProjTable, Type));
                criteriaCost                = qb_projTable.addRange(fieldNum(ProjTable, Type));
                criteriaInvestment          = qb_projTable.addRange(fieldNum(ProjTable, Type));
                criteriaTime                = qb_projTable.addRange(fieldNum(ProjTable, Type));
            }
            criteriaSorting1            = qb_projTable.addRange(fieldNum(ProjTable, SortingId), 1);
            criteriaSorting2            = qb_projTable.addRange(fieldNum(ProjTable, SortingId), 2);
            criteriaSorting3            = qb_projTable.addRange(fieldNum(ProjTable, SortingId), 3);
            criteriaGroupId             = qb_projTable.addRange(fieldNum(ProjTable, ProjGroupId));
            criteriaCustAccount         = qb_projTable.addRange(fieldNum(ProjTable, CustAccount));
        }

        if (rangeLedgerTransDate)
        {
            qb_ProjTransPosting = qb_projRevenueTrans.addDataSource(tablenum(ProjTransPosting));
            qb_ProjTransPosting.addLink(fieldnum(ProjRevenueTrans,TransId), fieldnum(ProjTransPosting, TransId));
            qb_ProjTransPosting.joinMode(JoinMode::ExistsJoin);

            criteriaLedgerTransDate = qb_ProjTransPosting.addRange(fieldnum(ProjTransPosting,LedgerTransDate));
        }

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryLineproperty</Name>
				<Source><![CDATA[
    Query buildQueryLineproperty(JoinMode _joinMode)
    {
        Query q = element.buildQuery();

        if (selectInvoiceStatus.selection() == projSelectTrans::ToBeInvoiced)
        {
            qb_ProjLineProperty = qb_projRevenueTrans.addDataSource(tableNum(ProjLineProperty));

            qb_ProjLineProperty.addLink(fieldNum(ProjRevenueTrans, LinePropertyId), fieldNum(ProjLineProperty, LinePropertyId));
            qb_ProjLineProperty.fetchMode(0);

            criteriatoBeInvoiced = qb_ProjLineProperty.addRange(fieldNum(ProjLineProperty, ToBeInvoiced));
            criteriatoBeInvoiced.value(queryValue(NoYes::No));

            qb_ProjLineProperty.joinMode(_joinMode);
        }
        else if (selectInvoiceStatus.selection() == projSelectTrans::NoChargeable)
        {
            QueryBuildDataSource qbds = qb_projRevenueTrans.addDataSource(tableNum(ProjTransRevenueNonChargeable));
            qbds.relations(false);
            qbds.addLink(fieldNum(ProjRevenueTrans, TransId), fieldNum(ProjTransRevenueNonChargeable, TransId));
            qbds.joinMode(_joinMode);
        }

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        this.initDataSet();

        if (element.args().parmEnumType()   &&
            element.args().parmEnum()       &&
            element.args().parmEnumType()   == enumNum(ProjOrigin) &&
            element.args().parmEnum()       == ProjOrigin::Subscription)
        {
            subscriptionMode = true;
        }

        callerForm = element.args().caller();

        isCallerForm = callerForm is FormRun;

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            isIndiaIndirectTaxParameterMarked   = TaxParameters::checkTaxParameters_IN();
            isIndiaWHTMarked                    = TaxWithholdParameters_IN::checkTaxParameters();
            isProjRevenueTrans_INEnabled        = SysExtensionSerializerExtensionMap::isExtensionEnabled(tableNum(ProjRevenueTransTaxExtensionIN));
        }
        // </GIN>

        super();

        if (subscriptionMode)
        {
            projPeriodicPostingSales.enabled(false);
        }

        ledgerFromDate  = dateNull();
        ledgerToDate    = dateMax();

        if (element.args().dataset() == tableNum(TmpProjStatistic))
        {
            priceAmount.selection(PriceAmount::LedgerUpdate);
        }

        element.setPriceAmount();
        element.setVisible();

        ledgerAmountCache = new Map(Types::String, Types::Real);
        traceTree = new ProjCreateAdjTraceTree(ctrlTree, ProjTransType::Revenue);

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            element.setVisible_IN();
            element.setTaxWithholdVisible_IN();
        }
        // </GIN>

        // <GTE>
        boolean isGTEEnabled = TaxSolutionScopeIntegrationUtil::isCompanyEnabled();
        TransTaxInformation.visible(isIndiaIndirectTaxParameterMarked || isGTEEnabled);
        
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            Tax.visible(false);
            TaxGroup.visible(false);
            TaxItemGroup.visible(false);
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataSet</Name>
				<Source><![CDATA[
    void initDataSet()
    {
        ProjRevenueTrans        projRevenueTransLink;
        ProjStatistic           pS;
        ProjTransPosting        projTransPosting;
        ProjJournalTrans        projJournalTrans;
        TmpProjPeriodic         tmpProjPeriodic;
        TmpProjPeriodicLedger   tmpProjPeriodicLedger;
        TmpProjAdjustment       tmpProjAdjustment;
        SMAServiceOrderLine     serviceOrderLine;
        ProjRevenueTransSale    projRevenueTransSaleLink;

        linkProjService     = false;

        switch (element.args().dataset())
        {
            case tableNum(ProjRevenueTrans):
                projRevenueTransLink = element.args().record();
                transId = projRevenueTransLink.TransId;
                break;

            case tableNum(ProjRevenueTransSale):
                projRevenueTransSaleLink = element.args().record();
                transId = projRevenueTransSaleLink.TransId;
                break;

            case tableNum(TmpProjStatistic):
                pS   = element.args().parmObject();
                if (pS.parmSubscriptionId())
                {
                    subscriptionMode    = true;
                    subscriptionId = pS.parmSubscriptionId();
                }
                break;

            case(tableNum(ProjTransPosting)):
                projTransPosting    = element.args().record();
                transId             = projTransPosting.TransId;
                break;

            case(tableNum(ProjJournalTrans)):
                projJournalTrans    = element.args().record();
                transId             = projJournalTrans.TransId;
                break;

            case(tableNum(SMAServiceOrderLine)):
                serviceOrderLine    = element.args().record();
                transId             = serviceOrderLine.ProjTransId;
                break;

            case(tableNum(TmpProjPeriodic)):
                tmpProjPeriodic     = element.args().record();
                transId             = tmpProjPeriodic.TransId;
                break;

            case(tableNum(TmpProjPeriodicLedger)):
                tmpProjPeriodicLedger   = element.args().record();
                transId                 = tmpProjPeriodicLedger.TransId;
                break;

            case(tableNum(TmpProjAdjustment)):
                tmpProjAdjustment   = element.args().record();
                transId             = tmpProjAdjustment.TransId;
                break;

            case(tableNum(SMAServiceOrderTable)):
                linkProjService     = true;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkInvoiceControl</Name>
				<Source><![CDATA[
    void linkInvoiceControl()
    {
        if (projInvoiceControl.parmProjTransDateFrom() || projInvoiceControl.parmProjTransDateTo())
        {
            criteriaTransDate.value(SysQuery::range(projInvoiceControl.parmProjTransDateFrom(), projInvoiceControl.parmProjTransDateTo()));
        }

        if (projInvoiceControl.parmResource())
        {
            criteriaResource.value(queryValue(projInvoiceControl.parmResource()));
        }

        if (projInvoiceControl.parmProjCategoryId())
        {
            criteriaCategoryId.value(projInvoiceControl.parmProjCategoryId());
        }

        if (projInvoiceControl.parmCategoryGroupId())
        {
            criteriaCategoryGroupId.value(projInvoiceControl.parmCategoryGroupId());
        }

        if (!element.enableProjMultipleContractLinesForProjectFeature)
        {
            if (projInvoiceControl.parmFixedPrice())
            {
                criteriaFixedPrice.value(queryValue(ProjType::FixedPrice));
            }
            else
            {
                criteriaFixedPrice.value(queryValue(SysQuery::valueEmptyString()));
            }

            if (projInvoiceControl.parmTimeMaterial())
            {
                criteriaTimeMaterial.value(queryValue(ProjType::TimeMaterial));
            }
            else
            {
                criteriaTimeMaterial.value(queryValue(SysQuery::valueEmptyString()));
            }

            if (projInvoiceControl.parmInternalCost())
            {
                criteriaInternal.value(queryValue(ProjType::Cost));
            }
            else
            {
                criteriaInternal.value(queryValue(SysQuery::valueEmptyString()));
            }

            if (projInvoiceControl.parmInternalCost())
            {
                criteriaCost.value(queryValue(ProjType::Internal));
            }
            else
            {
                criteriaCost.value(queryValue(SysQuery::valueEmptyString()));
            }

            if (projInvoiceControl.parmInvestment())
            {
                criteriaInvestment.value(queryValue(ProjType::Investment));
            }
            else
            {
                criteriaInvestment.value(queryValue(SysQuery::valueEmptyString()));
            }
        }

        if (projInvoiceControl.parmProjId())
        {
            criteriaProjId.value(projInvoiceControl.parmProjId());
        }

        if (projInvoiceControl.parmProjInvoiceProjId())
        {
            criteriaProjInvoiceProjId.value(queryValue(projInvoiceControl.parmProjInvoiceProjId()));
        }

        if (projInvoiceControl.parmSalesCurrency())
        {
            criteriaSalesCurrency.value(queryValue(projInvoiceControl.parmSalesCurrency()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkProjCashFlow</Name>
				<Source><![CDATA[
    void linkProjCashFlow()
    {
        if (projCashFlow.parmFee())
        {
            if (ledgerFromDate && (ledgerFromDate != dateNull()))
            {
                ledgerDateFrom.dateValue(ledgerFromDate);
            }

            if (ledgerToDate && (ledgerToDate != dateMax()))
            {
                ledgerDateto.dateValue(ledgerToDate);
            }

            if (! (ledgerFromDate && ledgerToDate))
            {
                ledgerDates.visible(false);
            }

            if (projCashFlow.parmProjectFromDate() || projCashFlow.parmProjectToDate())
            {
                criteriaTransDate.value(SysQuery::range(projCashFlow.parmProjectFromDate(), projCashFlow.parmProjectToDate()));
            }

            if (projCashFlow.parmResource())
            {
                criteriaResource.value(queryValue(projCashFlow.parmResource()));
            }

            if (projCashFlow.parmCategoryId())
            {
                criteriaCategoryId.value(projCashFlow.parmCategoryId());
            }

            if (element.subscriptionGroup())
            {
                criteriaSubscriptionGroupId.value(projCashFlow.parmSubscriptionGroupId());
            }

            if (projCashFlow.parmCategoryGroupId())
            {
                criteriaCategoryGroupId.value(projCashFlow.parmCategoryGroupId());
            }

            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                if (projCashFlow.parmFixedPrice())
                {
                    criteriaFixedPrice.value(queryValue(ProjType::FixedPrice));
                }

                if (projCashFlow.parmTimeMaterial())
                {
                    criteriaTimeMaterial.value(queryValue(ProjType::TimeMaterial));
                }

                if (projCashFlow.parmInternalCost())
                {
                    criteriaInternal.value(queryValue(ProjType::Cost));
                }

                if (projCashFlow.parmInternalCost())
                {
                    criteriaCost.value(queryValue(ProjType::Internal));
                }

                if (projCashFlow.parmInvestment())
                {
                    criteriaInvestment.value(queryValue(ProjType::Investment));
                }

                if (projCashFlow.parmTimeProject())
                {
                    criteriaTime.value(queryValue(ProjType::Time));
                }

                if (!(projCashFlow.parmFixedPrice()   ||
                        projCashFlow.parmTimeMaterial() ||
                        projCashFlow.parmInternalCost() ||
                        projCashFlow.parmInvestment()   ||
                        projCashFlow.parmTimeProject()))
                {
                    criteriaInvestment.value(queryValue(SysQuery::valueEmptyString()));
                }
            }

            if (projCashFlow.parmSorting1())
            {
                criteriaSorting1.value(queryValue(projCashFlow.parmSorting1()));
            }

            if (projCashFlow.parmSorting2())
            {
                criteriaSorting2.value(queryValue(projCashFlow.parmSorting2()));
            }

            if (projCashFlow.parmSorting3())
            {
                criteriaSorting3.value(queryValue(projCashFlow.parmSorting3()));
            }

            if (projCashFlow.parmCustAccount())
            {
                criteriaCustAccount.value(queryValue(projCashFlow.parmCustAccount()));
            }

            if (projCashFlow.parmProjGroupId())
            {
                criteriaGroupId.value(queryValue(projCashFlow.parmProjGroupId()));
            }

            if (projCashFlow.parmProjTree())
            {
                criteriaProjId.value(projCashFlow.parmProjId()+ #star);
            }
            else
            {
                if (projCashFlow.parmProjId())
                {
                    criteriaProjId.value(queryValue(projCashFlow.parmProjId()));
                }
                else
                {
                    if (projCashFlow.parmSubscriptionId())
                    {
                        criteriaProjId.value(queryValue(SMASubscriptionTable::find(projCashFlow.parmSubscriptionId()).ProjId));
                    }
                }
            }

            if (projCashFlow.parmProjWIPId())
            {
                criteriaWIPProjId.value(queryValue(projCashFlow.parmProjWIPId()));
            }

            if (projCashFlow.parmProjInvoiceProjId())
            {
                criteriaProjInvoiceProjId.value(queryValue(projCashFlow.parmProjInvoiceProjId()));
            }
        }
        else
        {
            criteriaProjId.value(queryValue(SysQuery::valueEmptyString()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkProjStatistic</Name>
				<Source><![CDATA[
    void linkProjStatistic()
    {
        if (projStatistic.parmRevenue())
        {
            ledgerFromDate  = projStatistic.parmLedgerFromDate();
            ledgerToDate    = projStatistic.parmLedgerToDate();

            ledgerDates.visible(true);

            if (ledgerFromDate && (ledgerFromDate != dateNull()))
            {
                ledgerDateFrom.dateValue(ledgerFromDate);
            }

            if (ledgerToDate && (ledgerToDate != dateMax()))
            {
                ledgerDateTo.dateValue(ledgerToDate);
            }

            if (! (ledgerFromDate && ledgerToDate))
            {
                ledgerDates.visible(false);
            }

            if (projStatistic.parmProjFromDate() || projStatistic.parmProjToDate())
            {
                criteriaTransDate.value(SysQuery::range(projStatistic.parmProjFromDate(), projStatistic.parmProjToDate()));
            }

            if (projStatistic.parmLedgerFromDate() || projStatistic.parmLedgerToDate())
            {
                criteriaLedgerTransDate.value(SysQuery::range(projStatistic.parmLedgerFromDate(), projStatistic.parmLedgerToDate()));
            }

            if (projStatistic.parmResource())
            {
                criteriaResource.value(queryValue(projStatistic.parmResource()));
            }

            if (projStatistic.parmProjCategoryId())
            {
                criteriaCategoryId.value(projStatistic.parmProjCategoryId());
            }

            if (projStatistic.parmCategoryGroupId())
            {
                criteriaCategoryGroupId.value(projStatistic.parmCategoryGroupId());
            }

            if (element.subscriptionGroup())
            {
                criteriaSubscriptionGroupId.value(projStatistic.parmSubscriptionGroupId());
            }

            if (projStatistic.parmCategoryGroupId())
            {
                criteriaCategoryGroupId.value(projStatistic.parmCategoryGroupId());
            }

            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                if (projStatistic.parmFixedPrice())
                {
                    criteriaFixedPrice.value(queryValue(ProjType::FixedPrice));
                }

                if (projStatistic.parmTimeMaterial())
                {
                    criteriaTimeMaterial.value(queryValue(ProjType::TimeMaterial));
                }

                if (projStatistic.parmInternalCost())
                {
                    criteriaInternal.value(queryValue(ProjType::Cost));
                }

                if (projStatistic.parmInternalCost())
                {
                    criteriaCost.value(queryValue(ProjType::Internal));
                }

                if (projStatistic.parmInvestment())
                {
                    criteriaInvestment.value(queryValue(ProjType::Investment));
                }

                if (projStatistic.parmTime())
                {
                    criteriaTime.value(queryValue(ProjType::Time));
                }

                if (!(projStatistic.parmFixedPrice()   ||
                        projStatistic.parmTimeMaterial() ||
                        projStatistic.parmInternalCost() ||
                        projStatistic.parmInvestment()   ||
                        projStatistic.parmTime()))
                {
                    criteriaInvestment.value(queryValue(SysQuery::valueEmptyString()));
                }
            }

            if (projStatistic.parmSorting1())
            {
                criteriaSorting1.value(queryValue(projStatistic.parmSorting1()));
            }

            if (projStatistic.parmSorting2())
            {
                criteriaSorting2.value(queryValue(projStatistic.parmSorting2()));
            }

            if (projStatistic.parmSorting3())
            {
                criteriaSorting3.value(queryValue(projStatistic.parmSorting3()));
            }

            if (projStatistic.parmCustAccount())
            {
                criteriaCustAccount.value(queryValue(projStatistic.parmCustAccount()));
            }

            if (projStatistic.parmProjGroupId())
            {
                criteriaGroupId.value(queryValue(projStatistic.parmProjGroupId()));
            }

            if (projStatistic.parmGrantID())
            {
                qb_ProjGrantView = SysQuery::findOrCreateDataSource(projRevenueTrans_ds.query(), tableNum(ProjGrantView), tableNum(ProjRevenueTrans));
                qb_ProjGrantView.addLink(fieldNum(ProjRevenueTrans,ProjId), fieldNum(ProjGrantView, ProjId));
                criteriaGrantID = qb_ProjGrantView.addRange(fieldNum(ProjGrantView, GrantId));
                criteriaGrantID.value(queryValue(projStatistic.parmGrantID()));
            }
            else if (projStatistic.parmProjTree())
            {
                criteriaProjId.value(projStatistic.parmProjId()+ #star);
            }
            else
            {
                if (projStatistic.parmProjId())
                {
                    criteriaProjId.value(queryValue(projStatistic.parmProjId()));
                }
                else
                {
                    if (projStatistic.parmSubscriptionId())
                    {
                        criteriaProjId.value(queryValue(SMASubscriptionTable::find(projStatistic.parmSubscriptionId()).ProjId));
                    }
                }
            }

            if (projStatistic.parmProjWIPId())
            {
                criteriaWIPProjId.value(queryValue(projStatistic.parmProjWIPId()));
            }

            if (projStatistic.parmProjInvoiceProjId())
            {
                criteriaProjInvoiceProjId.value(queryValue(projStatistic.parmProjInvoiceProjId()));
            }
        }
        else
        {
            criteriaProjId.value(queryValue(SysQuery::valueEmptyString()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCashFlow</Name>
				<Source><![CDATA[
    ProjCashFlow projCashFlow()
    {
        return projCashFlow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projStatistic</Name>
				<Source><![CDATA[
    ProjStatistic projStatistic()
    {
        return projStatistic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PSALinkProjFinancialStatistic</Name>
				<Source><![CDATA[
    void PSALinkProjFinancialStatistic()
    {
        PSATmpProjFinancialStatistic tTmpProjStatistic;
        PSATmpStr                    sProjId;
        TransDate                    dLedgerFromDate;
        TransDate                    dLedgerToDate;

        void setProjInvoiceCriteria()
        {
            criteriaProjInvoiceProjId.value(queryValue(projStatistic.parmProjInvoiceProjId()));
            
            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                if (projStatistic.parmFixedPrice())
                {
                    criteriaFixedPrice.value(queryValue(ProjType::FixedPrice));
                }
                if (projStatistic.parmTimeMaterial())
                {
                    criteriaTimeMaterial.value(queryValue(ProjType::TimeMaterial));
                }
                if (projStatistic.parmInternalCost())
                {
                    criteriaInternal.value(queryValue(ProjType::Cost));
                }
                if (projStatistic.parmInternalCost())
                {
                    criteriaCost.value(queryValue(ProjType::Internal));
                }
                if (projStatistic.parmInvestment())
                {
                    criteriaInvestment.value(queryValue(ProjType::Investment));
                }
                if (projStatistic.parmTime())
                {
                    criteriaTime.value(queryValue(ProjType::Time));
                }
            }
        }

        tTmpProjStatistic = element.args().record();
        sProjId = tTmpProjStatistic.ProjViewId;

        dLedgerFromDate  = projStatistic.parmLedgerFromDate();
        dLedgerToDate    = projStatistic.parmLedgerToDate();

        ledgerDates.visible(true);

        if (dLedgerFromDate && (dLedgerFromDate != dateNull()))
        {
            ledgerDateFrom.dateValue(dLedgerFromDate);
        }

        if (dLedgerToDate && (dLedgerToDate != dateMax()))
        {
            ledgerDateTo.dateValue(dLedgerToDate);
        }

        if (!(dLedgerFromDate && dLedgerToDate))
        {
            ledgerDates.visible(false);
        }

        if (projStatistic.parmProjFromDate() || projStatistic.parmProjToDate())
        {
            criteriaTransDate.value(strFmt('%1..%2',queryValue(projStatistic.parmProjFromDate()),
                                                    queryValue(projStatistic.parmProjToDate())));
        }

        if (tTmpProjStatistic.ProjTotal == PSAProjTotal::None)
        {
            criteriaProjId.value(queryValue(sProjId));
        }
        else if (tTmpProjStatistic.ProjTotal == PSAProjTotal::LevelTotal)
        {
            if (projStatistic.psaParmDisplayLevel() == 0)
            {
                if (projStatistic.parmProjInvoiceProjId())
                {
                    setProjInvoiceCriteria();
                }
                else if (projStatistic.parmProjId())
                {
                    if (projStatistic.parmProjTree())
                    {
                        criteriaProjId.value(sProjId + #star);
                    }
                    else
                    {
                        criteriaProjId.value(sProjId);
                    }
                }
            }
            else
            {
                criteriaProjId.value(sProjId + #star);
            }
        }
        else
        {
            if (projStatistic.parmProjInvoiceProjId() && tTmpProjStatistic.ProjTotal == PSAProjTotal::GrandTotal)
            {
                setProjInvoiceCriteria();
            }
            else
            {
                criteriaProjId.value(strLTrim(sProjId) + #star);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedTransId</Name>
				<Source><![CDATA[
    ProjTransIdBase selectedTransId()
    {
        return selectionTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonAccess</Name>
				<Source><![CDATA[
    void setButtonAccess()
    {
        ProjRevenueTrans        projRevenueTransSelected;
        boolean                 projReverseTransEnabled;
        boolean                 projAdjustmentEnabled;
        ProjRevenueTransSale    projRevenueTransSaleCheck;
        boolean                 projAdjTraceEnabled;
        ProjRevenueTrans        childProjRevenueTrans;
        boolean                 lockFieldsForAdjustments;
        boolean                 CDSLockingOptionAdjustments = ProjCDSLockingOptionTable::get(ProjCDSLockingOption::Adjustments);

        for (projRevenueTransSelected = projRevenueTrans_ds.getFirst(true)
            ? projRevenueTrans_ds.getFirst(true)
            : projRevenueTrans_ds.cursor(); projRevenueTransSelected; projRevenueTransSelected = projRevenueTrans_ds.getNext())
        {
            if (! projAdjustmentEnabled)
            {
                lockFieldsForAdjustments = CDSLockingOptionAdjustments ? Project::isProjectExternallyManaged(projRevenueTransSelected.ProjId) : false;
                projAdjustmentEnabled = ProjTrans::newProjRevenueTrans(projRevenueTransSelected).adjustable() && !lockFieldsForAdjustments;
            }

            while select projRevenueTransSaleCheck
                where projRevenueTransSaleCheck.TransId == projRevenueTransSelected.TransId
            {
                if (! projReverseTransEnabled)
                {
                    projReverseTransEnabled = projRevenueTransSaleCheck.canBeMarkedForCreditNote();
                }
            }

            if (! projAdjTraceEnabled)
            {
                projAdjTraceEnabled = projRevenueTransSelected.AdjRefTransId ? true : false;
                if (! projAdjTraceEnabled)
                {
                    select firstonly RecId from childProjRevenueTrans
                        where childProjRevenueTrans.AdjRefTransId == projRevenueTransSelected.TransId;

                    projAdjTraceEnabled = childProjRevenueTrans.RecId ? true : false;
                }
            }
        }

        projReverseTrans.enabled(projReverseTransEnabled);
        smaAccruePeriodLine.visible(projRevenueTrans.TransactionOrigin == ProjOrigin::Subscription);
        projPeriodicPostingSales.enabled(projRevenueTrans.TransactionOrigin != ProjOrigin::Subscription);
        projAdjustmentRevenue.enabled(projAdjustmentEnabled);
        transAdjustmentTrace.enabled(projAdjTraceEnabled);

        projRevenueTransSelected = projRevenueTrans_ds.cursor();
        boolean allowSplitTransaction = ProjSplitTransaction::canSplitTransaction(projRevenueTransSelected);
        SplitTransaction.enabled(allowSplitTransaction);
                
        if (ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
        {
            FormButtonGroupControl3.visible(false);
            FormButtonGroupControl3.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLinkCriteria</Name>
				<Source><![CDATA[
    void setLinkCriteria()
    {
        ProjWIPTable            projWIPTable;
        ProjInvoiceTable        projInvoiceTable;
        ProjTable               projTable;
        ProjCategory            projCategory;
        SMASubscriptionTable    subscriptionTable;
        SMAServiceOrderTable    serviceOrderTable;
        HcmWorker               hcmWorker;
        ResourceView            resource;

        TmpProjStatistic        tmpProjStatistic;

        ProjId                  projId;

        switch (element.args().dataset())
        {
            case (tableNum(ProjWIPTable)):
                projWIPTable = element.args().record();
                criteriaWIPProjId.value(projWIPTable.ProjId);
                break;

            case (tableNum(ProjInvoiceTable)):
                projInvoiceTable = element.args().record();
                criteriaProjInvoiceProjId.value(projInvoiceTable.ProjInvoiceProjId);
                break;

            case (tableNum(ProjTable)):
                projTable   =  element.args().record();
                projId      = projTable.ProjId;
                criteriaProjId.value(projId + #star);

                break;

            case (tableNum(HcmWorker)):
                hcmWorker = element.args().record();
                criteriaResource.value(queryValue(queryValue(ResourceFacade::findByWorker(hcmWorker.RecId))));
                break;

            case(tablenum(ResourceView)):
                resource = element.args().record();
                criteriaResource.value(queryValue(resource.RecId));
                break;

            case(tableNum(ProjCategory)):
                projCategory = element.args().record();
                criteriaCategoryId.value(projCategory.CategoryId);
                break;

            case(tableNum(SMASubscriptionTable)):
                subscriptionTable = element.args().record();
                criteriaSubscriptionId.value(subscriptionTable.SubscriptionId);
                break;

            case(tableNum(SMAServiceOrderTable)):
                serviceOrderTable = element.args().record();
                criteriaProjId.value(serviceOrderTable.ProjId);
                criteriaService.value(serviceOrderTable.ServiceOrderId);
                break;

            case(tableNum(TmpProjStatistic)):
                tmpProjStatistic = element.args().record();
                criteriaSubscriptionId.value(subscriptionId);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceAmount</Name>
				<Source><![CDATA[
    void setPriceAmount()
    {
        if (element.args().dataset() == tableNum(TmpProjStatistic) ||
            element.args().dataset() == tableNum(PSATmpProjFinancialStatistic))
        {
            priceAmount.selection(PriceAmount::LedgerUpdate);
        }
        else if (element.args().dataset() == tableNum(TmpProjCashFlow))
        {
            priceAmount.selection(PriceAmount::LedgerUpdate);
        }
        else
        {
            priceAmount.selection(ProjParameters::find().DisplayPriceAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxWithholdVisible_IN</Name>
				<Source><![CDATA[
    void setTaxWithholdVisible_IN()
    {
        TaxWithholdParameters_IN    taxWithholdParameters;

        taxWithholdParameters = TaxWithholdParameters_IN::find();
        projRevenueTransTaxExtensionIN_ds.object(fieldNum(ProjRevenueTransTaxExtensionIN, TDSGroup)).visible(taxWithholdParameters.tdsActivate);
        projRevenueTransTaxExtensionIN_ds.object(fieldNum(ProjRevenueTransTaxExtensionIN, TCSGroup)).visible(taxWithholdParameters.tcsActivate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisible</Name>
				<Source><![CDATA[
    void setVisible()
    {
        switch (priceAmount.selection())
        {
            case PriceAmount::Price:
                salesPriceGrid.visible(true);
                currencyIdGrid.visible(true);
                salesAmountGrid.visible(false);
                transTurnoverGrid.visible(false);
                break;

            case PriceAmount::LedgerUpdate:
                salesPriceGrid.visible(false);
                currencyIdGrid.visible(false);
                salesAmountGrid.visible(true);
                transTurnoverGrid.visible(false);
                break;

            case PriceAmount::LineAmount:
                salesPriceGrid.visible(true);
                currencyIdGrid.visible(true);
                salesAmountGrid.visible(false);
                transTurnoverGrid.visible(true);
                break;
        }

        if (subscriptionMode)
        {
            projRevenueTrans_Resource.visible(false);
            projRevenueTrans_LinePropertyId.visible(false);
            smaSubscriptionId.visible(true);
            smaSubscriptionPeriodType.visible(true);
            smaStartdate.visible(true);
            smaEnddate.visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisible_IN</Name>
				<Source><![CDATA[
    private void setVisible_IN()
    {
        AssessableValue_IN.visible(isIndiaIndirectTaxParameterMarked);
        MaxRetainPrice_IN.visible(isIndiaIndirectTaxParameterMarked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscriptionGroup</Name>
				<Source><![CDATA[
    boolean subscriptionGroup()
    {
        return (projStatistic && projStatistic.parmSubscriptionGroupId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        if (this.args().parmEnumType() == enumNum(IsSplitTransaction))
        {
            // Setup and open trace group
            if (this.args().parmEnum() == NoYes::Yes)
            {
                TransAdjustmentTrace.clicked();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>ProjRevenueTrans</Name>
				<Methods>
					<Method>
						<Name>setQuery</Name>
						<Source><![CDATA[
        public void setQuery()
        {
            switch (selectInvoiceStatus.selection())
            {
                case projSelectTrans::All:
                    this.query(element.buildQuery());
                    break;

                case projSelectTrans::Invoiced:
                    this.query(element.buildQuery());
                    break;

                case projSelectTrans::PartiallyInvoiced:
                    this.query(element.buildQuery());
                    break;

                case projSelectTrans::Adjusted:
                    this.query(element.buildQuery());
                    break;

                case projSelectTrans::ToBeInvoiced:
                    this.query(element.buildQueryLineProperty(JoinMode::NoExistsJoin));
                    break;

                case projSelectTrans::NoChargeable:
                    this.query(element.buildQueryLineProperty(JoinMode::ExistsJoin));
                    break;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            element.setButtonAccess();

            ret = super();

            subscription.visible(projRevenueTrans.TransactionOrigin == ProjOrigin::Subscription);

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        void linkActive()
        {
            rangeCategoryGroup   = false;
            rangeLedgerTransDate = false;

            switch (element.args().dataset())
            {
                case(tableNum(TmpProjStatistic)):
                    // linkActive called again .criteria changed... close form
                    if (projStatistic)
                    {
                        element.close();
                    }

                    projStatistic       = element.args().parmObject();
                    linkProjStatistic   = true;

                    if (projStatistic.parmCategoryGroupId())
                    {
                        rangeCategoryGroup = true;
                    }

                    if (projStatistic.parmLedgerFromDate()||projStatistic.parmLedgerToDate())
                    {
                        rangeLedgerTransDate = true;
                    }

                    break;

                case tableNum(PSATmpProjFinancialStatistic):
                    projStatistic = element.args().parmObject();
                    m_bLinkProjFinancialStatisitc =  true;
                    break;

                case(tableNum(TmpProjCashFlow)):
                    // linkActive called again .criteria changed... close form
                    if (projCashFlow)
                    {
                        element.close();
                    }

                    projCashFlow        = element.args().parmObject();
                    linkProjCashFlow   = true;

                    if (projCashFlow.parmCategoryGroupId())
                    {
                        rangeCategoryGroup = true;
                    }

                    break;

                case(tableNum(TmpProjInvoiceControl)):
                    if (projInvoiceControl)
                    {
                        element.close();
                    }

                    projInvoiceControl  = element.args().parmObject();
                    linkInvoiceControl  = true;

                    if (projInvoiceControl.parmCategoryGroupId())
                    {
                        rangeCategoryGroup = true;
                    }

                    break;
            }

            if (element.args().dataset())
            {
                switch (selectInvoiceStatus.selection())
                {
                    case projSelectTrans::All:
                        this.query(element.buildQuery());
                        break;

                    case projSelectTrans::Invoiced:
                        this.query(element.buildQuery());
                        break;

                    case projSelectTrans::PartiallyInvoiced:
                        this.query(element.buildQuery());
                        break;

                    case projSelectTrans::Adjusted:
                        this.query(element.buildQuery());
                        break;

                    case projSelectTrans::ToBeInvoiced:
                        this.query(element.buildQueryLineProperty(JoinMode::NoExistsJoin));
                        break;

                    case projSelectTrans::NoChargeable:
                        this.query(element.buildQueryLineProperty(JoinMode::ExistsJoin));
                        break;
                }
            }

            element.setLinkCriteria();

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        void init()
        {
            this.setQuery();

            super();
            this.query().dataSourceTable(tableNum(ProjRevenueTrans)).addRange(fieldNum(ProjRevenueTrans, IsRetained)).value(SysQuery::valueNot(NoYes::Yes));
            this.query().dataSourceTable(tableNum(ProjRevenueTrans)).addRange(fieldNum(ProjRevenueTrans, IsReleased)).value(SysQuery::valueNot(NoYes::Yes));

            this.cacheAddMethod(tableMethodStr(ProjRevenueTrans, salesPrice));
            this.cacheAddMethod(tableMethodStr(ProjRevenueTrans, salesAmount));
            this.cacheAddMethod(tableMethodStr(ProjRevenueTrans, transTurnover));
            this.cacheAddMethod(tableMethodStr(ProjRevenueTrans, projInvoiceStatus));
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            if (callerForm && isCallerForm && callerForm.name() == formStr(ProjTransRevenue))
            {
                criteriaTransId.value(callerForm.selectedTransId());
                super();
                return;
            }

            switch (selectInvoiceStatus.selection())
            {
                case projSelectTrans::All:
                    if (criteriaTimeMaterial)
                    {
                        criteriaTimeMaterial.value(SysQuery::valueUnlimited());
                    }
                    qb_projRevenueTransSale1.enabled(false);
                    qb_projRevenueTransSale2.enabled(false);
                    break;

                case projSelectTrans::Invoiced:
                    if (criteriaTimeMaterial)
                    {
                        criteriaTimeMaterial.value(SysQuery::valueUnlimited());
                    }
                    qb_projRevenueTransSale1.enabled(true);
                    criteriaTransStatus1.value(strFmt("%1,%2,%3",
                                              queryValue(ProjTransStatus::Invoiced),
                                              queryValue(ProjTransStatus::MarkedCreditnote),
                                              queryValue(ProjTransStatus::CreditnoteProposal)));

                    qb_projRevenueTransSale2.enabled(true);
                    qb_projRevenueTransSale2.joinMode(JoinMode::NoExistsJoin);
                    criteriaTransStatus2.value(queryValue(ProjTransStatus::Posted));
                    break;

                case projSelectTrans::PartiallyInvoiced:
                    if (criteriaTimeMaterial)
                    {
                        criteriaTimeMaterial.value(SysQuery::valueUnlimited());
                    }
                    qb_projRevenueTransSale1.enabled(true);
                    //Invoiced
                    criteriaTransStatus1.value(strFmt("%1,%2,%3",
                                                            queryValue(ProjTransStatus::Invoiced),
                                                            queryValue(ProjTransStatus::MarkedCreditnote),
                                                            queryValue(ProjTransStatus::CreditnoteProposal)));
                    
                    // Not Invoiced or adjusted
                    qb_projRevenueTransSale2.joinMode(JoinMode::ExistsJoin);
                    qb_projRevenueTransSale2.enabled(true);
                    criteriaTransStatus2.value(queryValue(ProjTransStatus::Posted));
                    break;
 
                case projSelectTrans::Adjusted:
                    qb_projRevenueTransSale1.enabled(true);
                    criteriaTransStatus1.value(queryValue(ProjTransStatus::Adjusted));

                    qb_projRevenueTransSale2.enabled(false);
                    break;

                case projSelectTrans::ToBeInvoiced:
                    if (criteriaTimeMaterial)
                    {
                        criteriaTimeMaterial.value(SysQuery::valueUnlimited());
                    }
                    qb_projRevenueTransSale1.enabled(true);
                    criteriaTransStatus1.value(strFmt("%1,%2",
                                              queryValue(ProjTransStatus::Posted),
                                              queryValue(ProjTransStatus::InvoiceProposal)));

                    qb_projRevenueTransSale2.enabled(false);
                    break;

                case projSelectTrans::NoChargeable:
                    if (criteriaTimeMaterial)
                    {
                        criteriaTimeMaterial.value(SysQuery::valueUnlimited());
                    }
                    qb_projRevenueTransSale1.enabled(false);
                    qb_projRevenueTransSale2.enabled(false);
                    break;
            }

            if (linkInvoiceControl)
            {
                element.linkInvoiceControl();
            }

            if (linkProjStatistic)
            {
                element.linkProjStatistic();
            }

            if (m_bLinkProjFinancialStatisitc)
            {
                element.PSALinkProjFinancialStatistic();
            }

            if (linkProjCashFlow)
            {
                element.linkProjCashFlow();
            }

            if (transId)
            {
                criteriaTransId.value(transId);
            }

            if (refTransid)
            {
                criteriaRefId.value(refTransid);
            }

            super();

            element.setButtonAccess();
        }

]]></Source>
					</Method>
					<Method>
						<Name>cursorNotify</Name>
						<Source><![CDATA[
        public void cursorNotify(int _event)
        {
            ProjRevenueTrans        projRevenueTransCache;
            Set                     setTransCache;

            super(_event);

            if (priceAmount.selection() == PriceAmount::LedgerUpdate)
            {
                if (_event == 0 || _event == 1)
                {
                    projRevenueTransCache = projRevenueTrans_DS.getFirst(0,false);
                    while (projRevenueTransCache)
                    {
                        if (! ledgerAmountCache.exists(projRevenueTransCache.TransId))
                        {
                            if (! setTransCache)
                            {
                                setTransCache = new Set(Types::String);
                            }
                            setTransCache.add(projRevenueTransCache.TransId);
                        }

                        projRevenueTransCache = projRevenueTrans_DS.getNext();
                    }

                    if (setTransCache)
                    {
                        ledgerAmountCache = Map::create(ProjRevenueTrans::sumAmountDisplayCache(setTransCache.pack(),
                                                                                             ledgerAmountCache.pack(),
                                                                                             ledgerFromDate,
                                                                                             ledgerToDate));
                    }
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>salesAmount</Name>
						<Source><![CDATA[
        display AmountCur salesAmount(ProjRevenueTrans _projRevenueTrans)
        {
            if (! ledgerAmountCache.exists(_projRevenueTrans.TransId))
            {
                ledgerAmountCache.insert(_projRevenueTrans.TransId, _projRevenueTrans.salesAmount(_projRevenueTrans,ledgerFromDate,ledgerToDate));
            }

            return ledgerAmountCache.lookup(_projRevenueTrans.TransId);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>ProjRevenueTransTaxExtensionIN</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            if (isProjRevenueTrans_INEnabled)
            {
                this.linkType(FormLinkType::OuterJoin);
            }
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>TransAdjustmentTrace</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            adjustmentTraceTabPage.visible(true);
            adjustmentTraceTabPage.setFocus();

            traceTree.createTraceTree(projRevenueTrans.TransId);
            fieldList.text(traceTree.listofFields());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitTransaction</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            // Update the record being displayed
            projRevenueTrans_ds.reread();
            projRevenueTrans_ds.rereadReferenceDataSources();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PriceAmount</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.setVisible();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SelectInvoiceStatus</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            projRevenueTrans_ds.setQuery();
            element.setLinkCriteria();
            projRevenueTrans_ds.executeQuery();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Tab</Name>
				<Type>Tab</Type>
				<Methods>
					<Method>
						<Name>tabChanged</Name>
						<Source><![CDATA[
        public void tabChanged(int _fromTab, int _toTab)
        {
            super(_fromTab, _toTab);

            if (_fromTab == 4)
            {
                adjustmentTraceTabPage.visible(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Group_M_proposalId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            ProjProposalJour::jumpRefProposal(projRevenueTrans.proposalId(),projRevenueTrans.TransId,ProjTransType::Revenue);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Group_M_invoiceId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            ProjInvoiceJour::jumpRefInvoice(projRevenueTrans.TransId,ProjTransType::Revenue);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FundingSourceSale</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            Project::jumpRefFundingSource(projRevenueTransSale.FundingSource, element);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GoToTransaction</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args    args;
            FormRun formRun;

            args = new Args();
            args.name(formStr(ProjTransRevenue));
            args.caller(element);

            formRun = classfactory.formRunClass(args);
            formRun.init();
            formRun.run();
            formRun.wait();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SetupTree</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args    args;
            FormRun formRun;

            args = new Args();
            args.name(formStr(ProjAdjTreeCreateVisualization));
            args.caller(element);

            formRun = classfactory.formRunClass(args);
            formRun.init();
            formRun.run();
            formRun.wait();

            if (formRun.closedOk())
            {
                adjustmentTraceTabPage.visible(true);
                adjustmentTraceTabPage.setFocus();

                traceTree.createTraceTree(projRevenueTrans.TransId);
                fieldList.text(traceTree.listofFields());
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ctrlTree</Name>
				<Type>Tree</Type>
				<Methods>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged(FormTreeItem _oldItem, FormTreeItem _newItem, FormTreeSelect _how)
        {
            super(_oldItem, _newItem, _how);

            selectionTransId = ctrlTree.getItem(_newItem.idx()).data();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<AllowPreLoading>No</AllowPreLoading>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>ProjRevenueTrans</Name>
			<Table>ProjRevenueTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AdjRefTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CategoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsCorrection</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsReleased</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsRetained</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LinePropertyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackedExtensions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Price</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAContractLineNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAProjOrigTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Qty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Resource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMABasePrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMAEnddate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMAIndex</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMAStartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMASubscriptionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMASubscriptionPeriodType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalSalesAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransIdRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VoucherJournal</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoQuery>No</AutoQuery>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ProjRevenueTransSale</Name>
			<Table>ProjRevenueTransSale</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ControlId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ControlVersion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FundingSource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerSalesAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerSalesPosted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerTransdate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjProposalId_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSARefREcId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSARetentionPercent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAsPerOriginalInvoice_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WIPPeriod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WIPType</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>ProjRevenueTrans</JoinSource>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ProjRevenueTransTaxExtensionIN</Name>
			<Table>ProjRevenueTransTaxExtensionIN</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AssessableValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompanyLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MaximumRetailPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjRevenueTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesTaxFormTypes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ServiceCodeTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ServiceEventGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxInformation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxInventVATCommodityCodeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TCSGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TDSGroup</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>ProjRevenueTrans</JoinSource>
			<LinkType>Passive</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS91518</Caption>
		<DataSource xmlns="">ProjRevenueTrans</DataSource>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Mode xmlns="">Delete</Mode>
		<Pattern xmlns="">Task</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<TitleDataSource xmlns="">ProjRevenueTrans</TitleDataSource>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane1</Name>
				<ElementPosition>536870911</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneTabControl">
						<Name>ActionPaneTab1</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ActionPaneTab</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>FormButtonGroupControl2</Name>
								<Type>ButtonGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>ProjInvoiceLine</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>ProjInvoiceLine</MenuItemName>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>TransAdjustmentTrace</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS133198</Text>
									</AxFormControl>
								</Controls>
								<Caption>@SYS3850</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>FormButtonGroupControl3</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ButtonGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>ProjPeriodicPostingSales</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>ProjPeriodicPostingSales</MenuItemName>
										<MultiSelect>Yes</MultiSelect>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>InvoiceProposal</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2046820350</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>ProjInvoiceProposal</MenuItemName>
										<MultiSelect>Yes</MultiSelect>
										<NeedsRecord>Yes</NeedsRecord>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>ProjInvoiceProposalListPage</Name>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>ProjInvoiceProposalListPage</MenuItemName>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>ProjReverseTrans</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2113929214</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>ProjReverseTrans</MenuItemName>
										<MultiSelect>Yes</MultiSelect>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDropDialogButtonControl">
										<Name>ProjAdjustmentRevenue</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1560281085</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>DropDialogButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<DataSource>ProjRevenueTrans</DataSource>
										<MenuItemName>ProjAdjustmentDropMenu</MenuItemName>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>SplitTransaction</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>MenuFunctionButton</Type>
										<FormControlExtension
											i:nil="true" />
										<DataSource>ProjRevenueTrans</DataSource>
										<MenuItemName>ProjSplitTransaction</MenuItemName>
										<MenuItemType>Action</MenuItemType>
										<MultiSelect>No</MultiSelect>
										<NeedsRecord>Yes</NeedsRecord>
									</AxFormControl>
								</Controls>
								<Caption>@SYS10340</Caption>
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
						<AlignChildren>No</AlignChildren>
						<ArrangeMethod>Vertical</ArrangeMethod>
						<Caption>@SYS40422</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>FormButtonGroupControl1</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SMAAccruePeriodLine</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2080374782</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>SMAAccruePeriodLine</MenuItemName>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>Project</Name>
								<ElementPosition>1409286141</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>ProjTransPosting</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>LedgerTransaction</Name>
								<ElementPosition>939524094</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataSource>ProjRevenueTrans</DataSource>
								<MenuItemName>ProjLedgerTransVoucher</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TransTaxInformation</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<DataSource>ProjRevenueTrans</DataSource>
								<MenuItemName>TransTaxInformation</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>TopGroup</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>CustomFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl1</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
									<Value>ProjectRevenueTrans_TransDate</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>DisplayGroup</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>PriceAmount</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<EnumType>PriceAmount</EnumType>
								<Label>@SYS90428</Label>
								<LabelAlignment>Right</LabelAlignment>
								<Items />
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>FilterGroup</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>SelectInvoiceStatus</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<EnumType>projSelectTrans</EnumType>
								<Label>@SYS50275</Label>
								<LabelAlignment>Right</LabelAlignment>
								<Items />
							</AxFormControl>
						</Controls>
						<Columns>3</Columns>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>LedgerDates</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>LedgerDateFrom</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Date</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@Proj:LedgerDatesFrom</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>LedgerDateTo</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Date</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@Proj:LedgerDatesTo</Label>
							</AxFormControl>
						</Controls>
						<Columns>2</Columns>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1610612734</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Overview</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ProjectRevenueTrans_TransDate</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransDate</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjRevenueTrans_ProjId</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjId</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjectRevenueTrans_Category</Name>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CategoryId</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SMASubscriptionId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>SMASubscriptionId</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SMASubscriptionPeriodType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>SMASubscriptionPeriodType</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>SMAStartdate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2113929214</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>SMAStartDate</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>SMAEnddate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2130706430</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>SMAEnddate</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>ProjRevenueTrans_Resource</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ReferenceGroup</Type>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataSource>ProjRevenueTrans</DataSource>
										<ReferenceField>Resource</ReferenceField>
										<ReplacementFieldGroup>ResourceId</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>currencyIdGrid</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2143289342</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyId</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SalesPriceGrid</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2145386494</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>salesPrice</DataMethod>
										<DataSource>ProjRevenueTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>salesAmountGrid</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2146435070</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>salesAmount</DataMethod>
										<DataSource>ProjRevenueTrans</DataSource>
										<DisplayLength>11</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
										<Label>@SYS2835</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TransTurnoverGrid</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2146959358</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>transTurnover</DataMethod>
										<DataSource>ProjRevenueTrans</DataSource>
										<Label>@SYS10500</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjRevenueTrans_LinePropertyId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2147221502</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LinePropertyId</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ProjInvoiceStatus</Name>
										<ElementPosition>2147287038</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>projInvoiceStatus</DataMethod>
										<DataSource>ProjRevenueTrans</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ProjRevenueTrans_TransactionOrigin</Name>
										<ElementPosition>2147352574</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransactionOrigin</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
										<Items />
									</AxFormControl>
								</Controls>
								<DataSource>ProjRevenueTrans</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS9039</Caption>
						<DataSource>ProjRevenueTrans</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>General</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1476395006</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Identification</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Identification_TransDate</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransDate</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_ProjId</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjId</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_ActivityNumber</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ActivityNumber</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_CategoryId</Name>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CategoryId</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>Identification_Resource</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>ReferenceGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataSource>ProjRevenueTrans</DataSource>
										<ReferenceField>Resource</ReferenceField>
										<ReplacementFieldGroup>ResourceId</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_LinePropertyId</Name>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>LinePropertyId</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<DataSource>ProjRevenueTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Transaction</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Transaction_TransId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransId</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Transaction_TransIdRef</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransIdRef</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Transaction_AdjRefTransId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>AdjRefTransId</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Transaction_VoucherJournal</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>VoucherJournal</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Transaction_Txt</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Txt</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>Transaction_TransactionOrigin</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransactionOrigin</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
										<Items />
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<DataGroup>Transaction</DataGroup>
								<DataSource>ProjRevenueTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SalesPriceGroup</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SalesPriceGroup_CurrencyId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyId</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SalesPriceGroup_M_salesPrice</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>salesPrice</DataMethod>
										<DataSource>ProjRevenueTrans</DataSource>
										<DisplayLength>20</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SalesPriceGroup_TotalSalesAmountCur</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TotalSalesAmountCur</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
										<DisplayLength>20</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SalesPriceGroup_M_ledgerSalesAmount</Name>
										<AllowEdit>No</AllowEdit>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>ledgerSalesAmount</DataMethod>
										<DataSource>ProjRevenueTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<DataGroup>SalesPrice</DataGroup>
								<DataSource>ProjRevenueTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Tax</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TaxGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxGroupId</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TaxItemGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxItemGroupId</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<DataGroup>SalesTax</DataGroup>
								<DataSource>ProjRevenueTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Invoice</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Group_M_proposalId</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>proposalId</DataMethod>
										<DataSource>ProjRevenueTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Group_M_invoiceId</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>invoiceId</DataMethod>
										<DataSource>ProjRevenueTrans</DataSource>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<DataGroup>Invoice</DataGroup>
								<DataSource>ProjRevenueTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Subscription</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Amount_SMASubscriptionId</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SMASubscriptionId</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>Amount_SMASubscriptionPeriodType</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SMASubscriptionPeriodType</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Amount_SMAStartDate</Name>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SMAStartDate</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Amount_SMAEnddate</Name>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SMAEnddate</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Amount_SMABasePrice</Name>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SMABasePrice</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Amount_SMAIndex</Name>
										<ElementPosition>2113929214</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SMAIndex</DataField>
										<DataSource>ProjRevenueTrans</DataSource>
										<Label>@SYS98529</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<DataGroup>Subscription</DataGroup>
								<DataSource>ProjRevenueTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>WithholdingTax_IN</Name>
								<CountryRegionCodes>IN</CountryRegionCodes>
								<ElementPosition>1946157054</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>WithholdingTax_IN_TCSGroup</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TCSGroup</DataField>
										<DataSource>ProjRevenueTransTaxExtensionIN</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>WithholdingTax_IN_TDSGroup</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TDSGroup</DataField>
										<DataSource>ProjRevenueTransTaxExtensionIN</DataSource>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<DataGroup>WithholdingTax</DataGroup>
								<DataSource>ProjRevenueTransTaxExtensionIN</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>AssessableValue_IN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>IN</CountryRegionCodes>
								<ElementPosition>2013265918</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ProjRevenueTransTaxExtensionIN_AssessableValue</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>AssessableValueTransactionCurrency</DataField>
										<DataSource>ProjRevenueTransTaxExtensionIN</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<Caption>@GLS5298</Caption>
								<DataSource>ProjRevenueTransTaxExtensionIN</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>MaxRetainPrice_IN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>IN</CountryRegionCodes>
								<ElementPosition>2080374782</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ProjRevenueTransTaxExtensionIN_MaximumRetailPrice</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>MaximumRetailPrice</DataField>
										<DataSource>ProjRevenueTransTaxExtensionIN</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<Caption>@GLS5296</Caption>
								<DataSource>ProjRevenueTransTaxExtensionIN</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS2952</Caption>
						<DataSource>ProjRevenueTrans</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabFinancialDimensions</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<NeededPermission>Manual</NeededPermission>
						<Pattern>DimensionEntryControl</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormContainerControl">
								<Name>DimensionEntryControl</Name>
								<AllowEdit>No</AllowEdit>
								<Type>Container</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension>
									<Name>DimensionEntryControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>parmControllerClassName</Name>
											<Type>ExtendedDataType</Type>
											<TypeName>ClassName</TypeName>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmControlLabelText</Name>
											<Type>String</Type>
											<Value>@SYS101181</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmEnumerationName</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmDataSourceName</Name>
											<Type>String</Type>
											<Value>ProjRevenueTrans</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmValueSetReferenceField</Name>
											<Type>String</Type>
											<Value>DefaultDimension</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmEnumValueSetReferenceField</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<Controls />
							</AxFormControl>
						</Controls>
						<HideIfEmpty>No</HideIfEmpty>
						<Caption>@SYS101181</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Sale</Name>
						<ElementPosition>1979711486</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>SaleGrid</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ProjRevenueTransSale_LedgerTransdate</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LedgerTransdate</DataField>
										<DataSource>ProjRevenueTransSale</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ProjRevenueTransSale_SalesPrice</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>SalesPrice</DataField>
										<DataSource>ProjRevenueTransSale</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ProjRevenueTransSale_LineAmount</Name>
										<ElementPosition>1744830462</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LineAmount</DataField>
										<DataSource>ProjRevenueTransSale</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>ProjRevenueTransSale_LedgerSalesPosted</Name>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>LedgerSalesPosted</DataField>
										<DataSource>ProjRevenueTransSale</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ProjRevenueTransSale_LedgerSalesAmount</Name>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LedgerSalesAmount</DataField>
										<DataSource>ProjRevenueTransSale</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ProjRevenueTransSale_WIPPeriod</Name>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>WIPPeriod</DataField>
										<DataSource>ProjRevenueTransSale</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ProjRevenueTransSale_TransStatus</Name>
										<ElementPosition>2113929214</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransStatus</DataField>
										<DataSource>ProjRevenueTransSale</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>FundingSourceSale</Name>
										<ElementPosition>2130706430</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_ProjectManagementAndAccounting:ProjTransRevenue_FundingSourceSale</HelpText>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>FundingSourceSale_FundingSourceId</Name>
												<DataRelationPath>FundingSource</DataRelationPath>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
											</AxFormControl>
										</Controls>
										<DataSource>ProjRevenueTransSale</DataSource>
										<ReferenceField>FundingSource</ReferenceField>
										<ReplacementFieldGroup>FundingSourceName</ReplacementFieldGroup>
									</AxFormControl>
								</Controls>
								<DataSource>ProjRevenueTransSale</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS37101</Caption>
						<DataSource>ProjRevenueTransSale</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>AdjustmentTraceTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2080374782</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPane</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneTabControl">
										<Name>ActionPaneTab</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPaneTab</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>ButtonGroup1</Name>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Left>0</Left>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>GoToTransaction</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<Text>@SYS133347</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>SetupTree</Name>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<Text>@SYS133492</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormTreeControl">
								<Name>ctrlTree</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Tree</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FieldGroup</Name>
								<Pattern>FillText</Pattern>
								<PatternVersion>UX7 1.0</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>FieldList</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>StaticText</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
								<Style>CustomFilter</Style>
							</AxFormControl>
						</Controls>
						<Caption>@SYS133198</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Columns>3</Columns>
				<DataSource>ProjRevenueTrans</DataSource>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>