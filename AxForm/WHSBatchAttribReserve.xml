<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>WHSBatchAttribReserve</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class WHSBatchAttribReserve extends FormRun implements IFormRefreshable
{
    InventMovement                      movement;
    InventLocationId                    fromInventLocId;
    TransDate                           ageDate;

    InventDimCtrl_Frm_ActiveRightClick  inventDimFormSetupRightClick;

    InventDimCtrl_Frm_WHSBatchReserve   inventDimFormSetup;
    boolean                             parmActiveIsOk;
    InventDimParm                       inventDimParmActive;
    WHSInventOnHandReserveBatch         inventOnHandReserve;
    boolean                             formInit;

    [FormObservable]
    UnitOfMeasureSymbol                 unitIdInvent;
    [FormObservable]
    UnitOfMeasureSymbol                 unitIdSecondary;

    [FormObservable]
    ItemId                              currentItemId;

    [FormObservable]
    InventDimId                         currentInventDim;

    TransDate                           checkDate;

    PdsFormCtrl_WHSBatchAttribReserve   formCtrl;

    protected FormObservableLink        reserveNowAction = new FormObservableLink();

    PdsBatchAttribReserveForm           pdsBatchAttribReserveForm;
    container                           cachedPackedSetOfRequiredAttributes;
    boolean                             cacheFilled;
    private InventInstrumentationLogger logger;
    private Set                         cachedSetOfRequiredAttributes;
    private int                         cachedTmpPdsBatchSelectPosition;
    private boolean isInventAvailPhysicalByBatchIdWithoutDimEnabled = InventAvailPhysicalByBatchIdWithoutDimFlight::instance().isEnabled();

}
]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        if (!element.closedCancel())
        {
            element.callerRefresh();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerRefresh</Name>
				<Source><![CDATA[
    public void callerRefresh()
    {
        pdsBatchAttribReserveForm.callerRefresh(element.args().caller());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDefaultAttributes</Name>
				<Source><![CDATA[
    public void fillDefaultAttributes()
    {
        using (var activityContext = element.instrumentationLogger().whsBatchAttribReserve().fillDefaultAttributes())
        {
            pdsBatchAttribReserveForm.fillDefaultAttributes(tmpPdsBatchAttribSelect, element.movement());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchHistoryFormControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to return batch history form control.
    /// </summary>
    /// <returns>
    /// Form control for batch history.
    /// </returns>
    public FormControl getBatchHistoryFormControl()
    {
        return history;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        InventTransferLine      invTransferLn;
        InventTransferParmLine  invTransferParmLn;
        WMSOrderTrans           wmsOrderTrans;
        InventTable             inventTable;

        using (var activityContext = element.instrumentationLogger().whsBatchAttribReserve().formInit())
        {
            inventOnHandReserve = WHSInventOnHandReserveBatch::newFromFormRun(this);

            pdsBatchAttribReserveForm = PdsBatchAttribReserveForm::construct();

            switch (element.args().record().TableId)
            {
                case tableNum(InventTransferLine):
                    InventTransferLine transferLine = element.args().record();
                    currentInventDim = transferLine.InventDimId;
                    invTransferLn = element.args().record();
                    fromInventLocId = invTransferLn.inventTransferTable().InventLocationIdFrom;
                    break;
                case tableNum(InventTransferParmLine):
                    InventTransferParmLine transferParmLine = element.args().record();
                    currentInventDim = transferParmLine.InventDimId;
                    invTransferParmLn = element.args().record();
                    fromInventLocId = InventDim::find(invTransferParmLn.InventDimId).InventLocationId;
                    break;
                case tableNum(WMSOrderTrans):
                    WMSOrderTrans orderTrans = element.args().record();
                    currentInventDim = orderTrans.InventDimId;
                    wmsOrderTrans = element.args().record();
                    fromInventLocId = wmsOrderTrans.inventDim().InventLocationId;
                    break;
                case tableNum(SalesLine):
                    SalesLine salesLine = element.args().record();
                    currentInventDim = salesLine.InventDimId;
                    fromInventLocId = '';
                    break;

                default :
                    fromInventLocId = '';
            }

            // Ensure batch is above location in reservation hierarchy when opening the form.
            inventTable = InventTable::find(inventOnHandReserve.getItemId());
            if (!WHSReservationHierarchyInventDimUtil::isBatchAboveLocation(inventTable))
            {
                if (!inventOnHandReserve.movement().canUseFlexibleWarehouseLevelDimensionReservation() ||
                !WHSReservationHierarchyElementPolicyProvider::singleton().isReservationOnDemandOrderEnabled(inventTable.whsReservationHierarchy(), fieldNum(InventDim, inventBatchId)))
                {
                    throw error("@WAX5593");
                }

                inventOnHandReserve.parmCanUseFlexibleWarehouseLevelDimensionReservation(true);
            }

            formCtrl = PdsFormCtrl_WHSBatchAttribReserve::newFromForm(element);

            super();

            formCtrl.setDatasources(inventTransMovement);
            formCtrl.initPost();

            whsInventReserve_ds.query()
                .dataSourceTable(tableNum(WHSInventReserve))
                .addDynalink(
                    fieldNum(WHSInventReserve, ItemId),
                    tmpPdsBatchSelect,
                    fieldNum(TmpPdsBatchSelect,ItemId));
            inventTrans_ds.query()
                .dataSourceTable(tableNum(InventTrans))
                .addDynalink(
                    fieldNum(InventTrans, ItemId),
                    tmpPdsBatchSelect,
                    fieldNum(TmpPdsBatchSelect,ItemId));

            element.updateDesign(InventDimFormDesignUpdate::Init);

            if (inventOnHandReserve.mustUseFlexibleWarehouseLevelDimensionReservation())
            {
                InventDimParm inventDimParm = inventDimFormSetup.parmDimParmVisibleGrid().data();

                WHSReservationHierarchyInventDimUtil::initInventDimParmFromHierarchyList(WhsReservationHierarchyProvider::construct().getDimListBatchAndAboveFromInventTable(inventOnHandReserve.movement().inventTable(), WHSReservationHierarchySortOrder::BottomUp), inventDimParm);
                InventDim::queryAddRangeCriteriaRequireParmLevel(inventDim_ds.query().dataSourceTable(tableNum(InventDim)),
                                                             inventOnHandReserve.parmInventDimCriteria(),
                                                             inventDimParm);

                overviewOrderCommitted.visible(true);
                availReservationGrid.visible(false);
                availReservationFlexGrid.visible(true);
            }
            else
            {
                InventDim::queryAddRangeCriteriaRequireParmLevel(inventDim_ds.query().dataSourceTable(tableNum(InventDim)),
                                                             inventOnHandReserve.parmInventDimCriteria(),
                                                             inventDimFormSetup.parmDimParmVisibleGrid());
            }

            inventOnHandReserve.addAdvancedCriteria(whsInventReserve_q, inventDimFormSetup.parmDimParmVisibleGrid());

            if (InventTable.pdsIsShelfLifeCapable())
            {
                element.pdsShow();
            }

            this.setFieldsVisibleBasedOnCWItem();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLocationForOrderCommittedReservation</Name>
				<Source><![CDATA[
    private boolean checkLocationForOrderCommittedReservation(InventDim _inventDim)
    {
        boolean ret = true;

        if (_inventDim.wmsLocationId && _inventDim.InventLocationId)
        {
            WMSLocation location = WMSLocation::find(_inventDim.wmsLocationId, _inventDim.InventLocationId);

            if (location.isPackingLocation())
            {
                ret = checkFailed(strFmt("@WAX:OrderCommittedReservationIsNotAllowedForPackLocations", location.wMSLocationId));
            }
            else if (location.whsLocationIsUserLocation())
            {
                ret = checkFailed(strFmt("@WAX:OrderCommittedReservationIsNotAllowedForUserLocations", location.wMSLocationId));
            }
            else if (location.isStagingLocation())
            {
                ret = checkFailed(strFmt("@WAX:OrderCommittedReservationIsNotAllowedForStageLocations", location.wMSLocationId));
            }
            else if (location.isSortingLocation())
            {
                ret = checkFailed(strFmt("@WAX:OrderCommittedReservationIsNotAllowedForSortLocations", location.wMSLocationId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsVisibleBasedOnCWItem</Name>
				<Source><![CDATA[
    private void setFieldsVisibleBasedOnCWItem()
    {
        boolean isCWItem = this.isItemCWEnabled(inventOnHandReserve.getItemId());
        boolean mustUseFlexibleWarehouseLevelDimensionReservation = inventOnHandReserve.mustUseFlexibleWarehouseLevelDimensionReservation();

        GroupCatchWeightGrid.visible(isCwItem);
        CWUnitId.visible(isCWItem);
        HeaderCWReservedPhysical.visible(isCWItem);
        HeaderCWReservOrdered.visible(isCWItem);
        HeaderCWOnOrder.visible(isCWItem);
        ReserveNowCW.visible(isCWItem);
        InventTrans_PdsCWQty.visible(isCWItem);
        CWUnitIdGrid.visible(isCWItem);
        displayCWPhysAvailUpHierarchy.visible(isCWItem && !mustUseFlexibleWarehouseLevelDimensionReservation);

        GroupNonCatchWeightGrid.visible(!isCWItem);
        HeaderReservedPhysical.visible(!isCWItem);
        HeaderReservOrdered.visible(!isCWItem);
        HeaderOnOrder.visible(!isCWItem);
        ReserveNow.visible(!isCWItem);
        InventTrans_Qty.visible(!isCWItem);
        UnitIdGrid.visible(!isCWItem);
        displayPhysAvailUpHierarchy.visible(!isCWItem && !mustUseFlexibleWarehouseLevelDimensionReservation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemCWEnabled</Name>
				<Source><![CDATA[
    private boolean isItemCWEnabled(ItemId _itemId)
    {
        return PdsGlobal::pdsIsCWItem(_itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheTmpPdsBatchSelectPosition</Name>
				<Source><![CDATA[
    private void cacheTmpPdsBatchSelectPosition()
    {
        this.cachedTmpPdsBatchSelectPosition = TmpPdsBatchSelect_ds.getPosition();
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreTmpPdsBatchSelectPosition</Name>
				<Source><![CDATA[
    private void restoreTmpPdsBatchSelectPosition()
    {
        TmpPdsBatchSelect_ds.setPosition(this.cachedTmpPdsBatchSelectPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimParmActive</Name>
				<Source><![CDATA[
    public InventDimParm inventDimParmActive()
    {
        if (!parmActiveIsOk && inventDimFormSetup.movement())
        {
            inventDimFormSetup.movement().inventDimGroupSetup().inventDimParmActive(inventDimParmActive);
            parmActiveIsOk = true;
        }

        return inventDimParmActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimSetupObject</Name>
				<Source><![CDATA[
    public InventDimCtrl_Frm_WHSBatchReserve inventDimSetupObject()
    {
        if (!inventDimFormSetup)
        {
            inventDimFormSetup = InventDimCtrl_Frm_WHSBatchReserve::newFromForm(element);
            inventDimFormSetup.parmLargeRightClickForm(NoYes::No);
            inventOnHandReserve.parmInventDimFormSetup(inventDimFormSetup);
        }
        return inventDimFormSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransMovement</Name>
				<Source><![CDATA[
    public InventTrans inventTransMovement()
    {
        return inventTransMovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>movement</Name>
				<Source><![CDATA[
    public InventMovement movement()
    {
        if (!movement)
        {
            movement = InventMovement::constructNoThrow(element.args().record());
        }
        return movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsShow</Name>
				<Source><![CDATA[
    public void pdsShow()
    {
        if (inventoryDimensionsGrid_inventBatchId.visible())
        {
            pdsBestBeforeDate.visible(true);
            pdsExpDate.visible(true);
        }
        else
        {
            pdsBestBeforeDate.visible(false);
            pdsExpDate.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshMovement</Name>
				<Source><![CDATA[
    public void refreshMovement()
    {
        inventOnHandReserve.parmTransSumBuffer().reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshSelection</Name>
				<Source><![CDATA[
    public void refreshSelection()
    {
        InventBatch               inventBatch;
        TmpPdsBatchSelect         batchSelect;
        boolean                   skipBatch = false;
        InventBatchId             inventBatchId;
        ItemId                    itemId = movement.itemId();
        InventTrans               tmpInventTrans;
        InventTransOrigin         tmpInventTransOrigin;
        InventDim                 tmpInventDim;
        boolean                   sameLotRes = movement.pdsSameLotReservation();
        InventDim                 sameLotDim;
        InventDimParm             sameLotDimParm;
        InventSum                 sameLotSum;
        InventBatchId             sameLotBatchId;

        WHSInventReserve          inventReserve;
        InventDim                 reserveInventDim;
        TmpDBPdsBatchAttribSelect tmpDBpdsBatchAttribSelect;
        List                      reservationBatches;
        ListEnumerator            reservationBatchEnumerator;
        List                      batchAttributesIds;

        logger = element.instrumentationLogger();
        using (var activityContext = logger.whsBatchAttribReserve().refreshSelection())
        {
            logger.whsBatchAttribReserve().flexibleReservation(activityContext, inventOnHandReserve.mustUseFlexibleWarehouseLevelDimensionReservation());
   
            batchSelect.setTmpData(tmpPdsBatchSelect);
            delete_from batchSelect;

            sameLotBatchId = sameLotRes
                    ? movement.pdsSameLotReservationBatch().InventBatchId
                    : '';
            sameLotDim.data(movement.inventdim());
            sameLotDimParm.initFromInventDim(sameLotDim);

            // Use TempDB table for better join performance
            RecordInsertList insertList = new RecordInsertList(tableNum(TmpDBPdsBatchAttribSelect), true, true, true, true, true, tmpDBPdsBatchAttribSelect);
            batchAttributesIds = new List(Types::String);

            while select PdsBatchAttribId from tmpPdsBatchAttribSelect
            {
                tmpDBpdsBatchAttribSelect.PdsBatchAttribId = tmpPdsBatchAttribSelect.PdsBatchAttribId;
                insertList.add(tmpDBPdsBatchAttribSelect);
                batchAttributesIds.addEnd(tmpDBPdsBatchAttribSelect.PdsBatchAttribId);
            }

            insertList.insertDatabase();

            reservationBatches = this.getReservationBatches(itemId, sameLotDim.inventBatchId, tmpDBpdsBatchAttribSelect);
            
            reservationBatchEnumerator = reservationBatches.getEnumerator();

            while (reservationBatchEnumerator.moveNext())
            {
                inventBatch = reservationBatchEnumerator.current();
                skipBatch = false;
                if (sameLotRes && inventBatch.inventBatchId != sameLotBatchId)
                {
                    sameLotDim.data(movement.inventdim());
                    sameLotDim.InventBatchId = inventBatch.inventBatchId;
                    sameLotDimParm.clear();
                    sameLotDimParm.initFromInventDim(sameLotDim);
                    sameLotDimParm.ItemIdFlag = NoYes::Yes;

                    using (var activityContextInventSum = logger.whsBatchAttribReserve().inventSumFindSumQty())
                    {
                        sameLotSum = InventSum::findSumQty(itemId,sameLotDim,sameLotDimParm);
                    }
                }

                skipBatch = false;

                InventDim     reserveInventDimCriteria;
                InventDimParm reserveInventDimParm;
                
                // According to dimensions display parameter of the form, Site, warehouse, inventory status and batch number must be consistent.
                reserveInventDimCriteria.data(movement.inventdim());
                reserveInventDimCriteria.clearLocationAndBelowDim(movement.itemId());
                reserveInventDimCriteria.inventBatchId = inventBatch.inventBatchId;
                reserveInventDimParm.initFromInventDim(reserveInventDimCriteria);

                using (var activityContextInventReserve = logger.whsBatchAttribReserve().whsInventReserveQuery())
                {
                    if (InventUseDimOfWHSInventReserveToggle::instance().isEnabled())
                    {
                        select firstonly RecId
                            from inventReserve
                            where inventReserve.ItemId == itemId
                               && (inventReserve.AvailPhysical > 0
                               || (InventParameters::find().ReserveOnOrdered && inventReserve.AvailOrdered > 0))
                               && #InventDimFieldsFilter(inventReserve, reserveInventDimCriteria, reserveInventDimParm);
                    }
                    else
                    {
                        select firstonly RecId
                            from inventReserve
                            where inventReserve.ItemId == itemId
                               && (inventReserve.AvailPhysical > 0
                               || (InventParameters::find().ReserveOnOrdered && inventReserve.AvailOrdered > 0))
                        #InventDimExistsJoin(inventReserve.InventDimId, reserveInventDim, reserveInventDimCriteria, reserveInventDimParm);
                    }
                }

                if (!skipBatch
                    && inventBatch.ProdDate
                    && inventBatch.ProdDate <= ageDate)
                {
                    skipBatch = true;
                }
                else if (inventReserve.RecId == 0)
                {
                    // Check if this batch has been reserved for the movement
                    using (var activityContextInventReserve = logger.whsBatchAttribReserve().isBatchReservedCheck(false))
                    {
                        select firstonly RecId
                            from tmpInventTrans
                            where (tmpInventTrans.StatusIssue == StatusIssue::ReservPhysical ||
                                   tmpInventTrans.StatusIssue == StatusIssue::ReservOrdered)
                            join TableId from tmpInventTransOrigin
                                where tmpInventTransOrigin.RecId         == tmpInventTrans.InventTransOrigin &&
                                      tmpInventTransOrigin.InventTransId == (inventOnHandReserve.mustUseFlexibleWarehouseLevelDimensionReservation() ? inventOnHandReserve.movement().whsOrderCommittedReservationMovement(true).transId() : movement.transId())
                            join RecId from tmpInventDim
                                where tmpInventDim.InventDimId   == tmpInventTrans.InventDimId &&
                                      tmpInventDim.InventBatchId == inventBatch.InventBatchId;
                    }
                    
                    skipBatch = tmpInventTrans.RecId == 0;

                    if (skipBatch && inventOnHandReserve.mustUseFlexibleWarehouseLevelDimensionReservation())
                    {
                        WHSOrderCommittedReservation            orderCommittedReservation;
                        WHSOrderCommittedReservationTransferred orderCommittedReservationTransferred;

                        using (var activityContextInventReserve = logger.whsBatchAttribReserve().isBatchReservedCheck(true))
                        {
                            select firstonly RecId
                                from orderCommittedReservation
                                where orderCommittedReservation.CommittingOriginInventTransId == movement.transId()
                                exists join orderCommittedReservationTransferred
                                    where orderCommittedReservationTransferred.OrderCommittedReservation == orderCommittedReservation.RecId
                                       && orderCommittedReservationTransferred.QtyTransferred
                                exists join tmpInventDim
                                    where tmpInventDim.InventDimId   == orderCommittedReservationTransferred.InventDimId
                                       && tmpInventDim.InventBatchId == inventBatch.InventBatchId;
                        }

                        skipBatch = orderCommittedReservation.RecId == 0;
                    }
                }

                if (!skipBatch)
                {
                    skipBatch = !this.validateBatchAttributesValues(inventBatch, batchAttributesIds, tmpPdsBatchAttribSelect);
                }

                if (!skipBatch)
                {
                    batchSelect.clear();
                    batchSelect.ItemId = itemId;
                    batchSelect.InventBatchId = inventBatch.InventBatchId;
                    batchSelect.insert();
                }
            }

            tmpPdsBatchSelect_ds.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBatchAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the specified batch matches attributes requirements.
    /// </summary>
    /// <param name = "_inventBatch">Batch to validate.</param>
    /// <param name = "_attributeIds">List of batch attribute IDs to check.</param>
    /// <param name = "_attributeSelect">Cursor into <c>TmpPdsBatchAttribSelect</c>.</param>
    /// <returns>true if the batch matches attributes requirements; otherwise, false.</returns>
    private boolean validateBatchAttributes(
        InventBatch             _inventBatch,
        List                    _attributeIds,
        TmpPdsBatchAttribSelect _attributeSelect)
    {
        boolean result = this.validateBatchHasRequiredAttributes(_attributeIds);
        result = result && this.validateBatchAttributesValues(_inventBatch, _attributeIds, _attributeSelect);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBatchAttributesValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that attributes for the given batch match the requirements.
    /// </summary>
    /// <param name = "_inventBatch">Batch to check.</param>
    /// <param name = "_attributeIds">List of batch attribute IDs to check.</param>
    /// <param name = "_attributeSelect">Cursor into <c>TmpPdsBatchAttribSelect</c>.</param>
    /// <returns>true if attributes match the required values; otherwise, false.</returns>
    private boolean validateBatchAttributesValues(
        InventBatch             _inventBatch,
        List                    _attributeIds,
        TmpPdsBatchAttribSelect _attributeSelect)
    {
        Map                     batchAttributes;
        TmpPdsBatchAttribSelect attributeSelect;
        boolean                 result = true;
        ListEnumerator          attributeIdsEnumerator;

        using (var activityContextInventReserve = element.instrumentationLogger().whsBatchAttribReserve().validateBatchAttributesValues())
        {
            batchAttributes = this.getReservationBatchAttributes(_inventBatch.itemId, _inventBatch.inventBatchId);
            attributeIdsEnumerator = _attributeIds.getEnumerator();

            attributeSelect.setTmpData(_attributeSelect);

            while (attributeIdsEnumerator.moveNext())
            {
                PdsBatchAttribId attribId = attributeIdsEnumerator.current();

                // check if the batch has the current attributes id
                if (!batchAttributes.exists(attribId))
                {
                    result = false;
                    break;
                }

                select firstonly attributeSelect
                        where attributeSelect.PdsBatchAttribId == attribId;

                if (!PdsBatchAttributes::evalCond(attribId,
                            batchAttributes.lookup(attribId),
                            attributeSelect.PdsBatchAttribOpr1,
                            attributeSelect.PdsBatchAttribValue1 ))
                {
                    result = false;
                    break;
                }
                if (attributeSelect.PdsBatchAttribOpr2 != PdsBatchAttribOpr::empty
                   && !PdsBatchAttributes::evalCond(attribId,
                                batchAttributes.lookup(attribId),
                                attributeSelect.PdsBatchAttribOpr2,
                                attributeSelect.PdsBatchAttribValue2))
                {
                    result = false;
                    break;
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBatchHasRequiredAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the batch has all required attributes specified.
    /// </summary>
    /// <param name = "_attributeIds">List of batchh attribute IDs.</param>
    /// <returns>true if batch has all required attributes specified; otherwise, false.</returns>
    private boolean validateBatchHasRequiredAttributes(List _attributeIds)
    {
        Set missingAttributes = this.getIdsOfRequiredBatchAttributes();
        ListEnumerator attributeIdsEnumerator = _attributeIds.getEnumerator();

        while (attributeIdsEnumerator.moveNext() && missingAttributes.elements() > 0)
        {
            PdsBatchAttribId attribId = attributeIdsEnumerator.current();
            if (missingAttributes.in(attribId))
            {
                missingAttributes.remove(attribId);
            }
        }

        return missingAttributes.elements() == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rightClickModifyQuery</Name>
				<Source><![CDATA[
    void rightClickModifyQuery()
    {
        if (inventOnHandReserve.mustUseFlexibleWarehouseLevelDimensionReservation() ||
            inventOnHandReserve.validateHierarchyNoHoles(inventDimFormSetup.parmDimParmVisibleGrid()))
        {
            if (inventOnHandReserve.mustUseFlexibleWarehouseLevelDimensionReservation())
            {
                InventDimParm inventDimParm = inventDimFormSetup.parmDimParmVisibleGrid().data();

                WHSReservationHierarchyInventDimUtil::initInventDimParmFromHierarchyList(WhsReservationHierarchyProvider::construct().getDimListBatchAndAboveFromInventTable(inventOnHandReserve.movement().inventTable(), WHSReservationHierarchySortOrder::BottomUp), inventDimParm);
                InventDim::queryAddRangeCriteriaRequireParmLevel(inventDim_ds.query().dataSourceTable(tableNum(InventDim)),
                                                                 inventOnHandReserve.parmInventDimCriteria(),
                                                                 inventDimParm);
            }
            else
            {
                InventDim::queryAddRangeCriteriaRequireParmLevel(inventDim_ds.query().dataSourceTable(tableNum(InventDim)),
                                                                 inventOnHandReserve.parmInventDimCriteria(),
                                                                 inventDimFormSetup.parmDimParmVisibleGrid());
            }

            inventOnHandReserve.adjustReservationLevel(wHSInventReserve_q, inventDimFormSetup.parmDimParmVisibleGrid());

            tmpPdsBatchSelect_ds.executeQuery();
            whsInventReserve_DS.executeQuery();
            inventTrans_ds.executeQuery();
        }
        else
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectBatch</Name>
				<Source><![CDATA[
    public void selectBatch(InventBatchId _inventBatchId)
    {
        TmpPdsBatchSelect   tmpSel;

        tmpSel.setTmpData(tmpPdsBatchSelect);
        delete_from tmpSel;

        tmpSel.clear();
        tmpSel.InventBatchId = _inventBatchId;
        tmpSel.ItemId = this.movement().itemId();
        tmpSel.insert();

        tmpPdsBatchSelect_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    public void updateDesign(InventDimFormDesignUpdate _mode)
    {
        switch (_mode)
        {
            case InventDimFormDesignUpdate::Init          :
                element.inventDimSetupObject().initFromCaller();
                element.inventDimSetupObject().parmCtrlItemId(whsInventReserve_ItemId);

                if (element.inventDimSetupObject().movement()
                    && !element.inventDimSetupObject().movement()
                        .canReservationFormBeShown())
                {
                    element.close();
                }

                element.inventDimSetupObject().formActiveSetup();
                element.inventDimSetupObject().formSetControls(false,true);

                break;

            case InventDimFormDesignUpdate::LinkActive    :
                movement = element.inventDimSetupObject().movement();
                if (!movement || !movement.canReservationFormBeShown())
                {
                    element.close();
                    return;
                }

                element.inventDimSetupObject().formActiveSetup();

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchHasAllMandatoryAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the specified item batch has all the necessary defined customer attributes.
    /// </summary>
    /// <param name = "_itemId">Item number.</param>
    /// <param name = "_inventBatchId">Inventory batch number.</param>
    /// <param name = "_attribSel">Attribute selection database cursor to query against.</param>
    /// <returns>true, if the batch has all necessary attributes; otherwise, false.</returns>
    private boolean batchHasAllMandatoryAttributes(
        ItemId                    _itemId,
        InventBatchId             _inventBatchId,
        TmpDBPdsBatchAttribSelect _attribSel)
    {
        PdsBatchAttributes      batchAttributes;

        select firstonly RecId from _attribSel
            notexists join batchAttributes
            where batchAttributes.PdsBatchAttribId == _attribSel.PdsBatchAttribId
               && batchAttributes.ItemId           == _itemId
               && batchAttributes.InventBatchId    == _inventBatchId;

        return _attribSel.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIdsOfRequiredBatchAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the IDs of batch attributes required.
    /// </summary>
    /// <returns>Set of batch attribute IDs.</returns>
    private Set getIdsOfRequiredBatchAttributes()
    {
        if (!cacheFilled)
        {
            cachedSetOfRequiredAttributes = new Set(Types::String);

            while select PdsBatchAttribId from TmpPdsBatchAttribSelect
            {
                cachedSetOfRequiredAttributes.add(TmpPdsBatchAttribSelect.PdsBatchAttribId);
            }
            cacheFilled = true;
        }

        return cachedSetOfRequiredAttributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReservationBatchAttributes</Name>
				<Source><![CDATA[
    private Map getReservationBatchAttributes(ItemId _itemId, InventBatchId _inventBatchId)
    {
        PdsBatchAttributes  batchAttributes;
        Map attributes = new Map(Types::String, Types::String);

        while select PdsBatchAttribId, PdsBatchAttribValue from batchAttributes
            where batchAttributes.InventBatchId == _inventBatchId
               && batchAttributes.ItemId        == _itemId
        {
            attributes.insert(batchAttributes.PdsBatchAttribId, batchAttributes.PdsBatchAttribValue);
        }

        return attributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReservationBatches</Name>
				<Source><![CDATA[
    /// <summary>
    ///  retrieves inventory batches for the given itemId and the selected batch attributes ids
    /// </summary>
    /// <param name = "_itemId"> The itemId used to retrieve the inventory batches </param>
    /// <param name = "_sameLotBatchId">Same lot inventory reservation batch id</param>
    /// <param name = "_attribSelect">user selected attributes used to filter the inventory batches </param>
    /// <returns>List of inventory batches ids for the given itemId and matches the selected batch attributes ids</returns>
    [Replaceable]
    protected List getReservationBatches(ItemId _itemId, InventBatchId _sameLotBatchId, TmpDBPdsBatchAttribSelect _attribSelect)
    {
        List reservationBatches = new List(Types::Record);

        using (var activityContext = element.instrumentationLogger().whsBatchAttribReserve().getReservationBatches())
        {
            element.instrumentationLogger().whsBatchAttribReserve().sameLotBatchId(activityContext, _sameLotBatchId);

            if (_sameLotBatchId != '')
            {
                if (this.batchHasAllMandatoryAttributes(_itemId, _sameLotBatchId, _attribSelect))
                {
                    reservationBatches.addEnd(InventBatch::find(_sameLotBatchId, _itemId));
                }
            }
            else
            {
                InventBatch			inventBatchSelect;
                PdsBatchAttributes	batchAttributes;

                InventDim	inventDimBatchSelect;
                InventDim   inventDimTable;
                InventDim   movementInventDim = movement.inventdim();

                if (isInventAvailPhysicalByBatchIdWithoutDimEnabled)
                {
                    InventAvailPhysicalByBatchId inventAvailPhysicalByBatchIdWithoutDim;

                    // Add all batches with AvailPhysical > 0
                    while select inventBatchSelect
                    where inventBatchSelect.ItemId                   == _itemId
                    exists join inventAvailPhysicalByBatchIdWithoutDim
                    where inventAvailPhysicalByBatchIdWithoutDim.ItemId        == _itemId
                       && inventAvailPhysicalByBatchIdWithoutDim.InventBatchId == inventBatchSelect.InventBatchId
                       && inventAvailPhysicalByBatchIdWithoutDim.AvailPhysical  > 0
                    notexists join _attribSelect
                    notexists join batchAttributes
                    where batchAttributes.ItemId           == _itemId
                       && batchAttributes.InventBatchId    == inventBatchSelect.InventBatchId
                       && batchAttributes.PdsBatchAttribId == _attribSelect.PdsBatchAttribId
                    {
                        reservationBatches.addEnd(inventBatchSelect);
                    }

                    // Add all batches with AvailPhysical <= 0 given it was reserved for current movement
                    while select inventBatchSelect
                    where inventBatchSelect.ItemId                == _itemId
                    exists join inventAvailPhysicalByBatchIdWithoutDim
                    where inventAvailPhysicalByBatchIdWithoutDim.ItemId     == _itemId
                    && inventAvailPhysicalByBatchIdWithoutDim.InventBatchId == inventBatchSelect.InventBatchId
                    && inventAvailPhysicalByBatchIdWithoutDim.AvailPhysical <= 0
                    exists join inventDimTable
                    // To select all correct related batches even that batch is partially reserved by other inventtrans.
                    // Adding inventSiteId, inventLocationId and inventStatusId as a filter, trying to filter out useless records. improving perfromance.
                    where inventDimTable.InventSiteId  == movementInventDim.InventSiteId
                       && (!movementInventDim.inventlocationId || inventDimTable.inventLocationId == movementInventDim.inventlocationId)
                       && (!movementInventDim.InventStatusId   || inventDimTable.InventStatusId   == movementInventDim.InventStatusId)
                       && inventDimTable.InventBatchId == inventBatchSelect.InventBatchId
                    notexists join _attribSelect
                    notexists join batchAttributes
                    where batchAttributes.ItemId           == _itemId
                       && batchAttributes.InventBatchId    == inventBatchSelect.InventBatchId
                       && batchAttributes.PdsBatchAttribId == _attribSelect.PdsBatchAttribId
                    {
                        reservationBatches.addEnd(inventBatchSelect);
                    }
                }
                else
                {
                    InventAvailPhysicalByBatchId inventAvailPhysicalByBatchId;

                    // Add all batches with AvailPhysical > 0
                    while select inventBatchSelect
                    where inventBatchSelect.ItemId                   == _itemId
                    exists join inventAvailPhysicalByBatchId
                    where inventAvailPhysicalByBatchId.ItemId        == _itemId
                       && inventAvailPhysicalByBatchId.InventBatchId == inventBatchSelect.InventBatchId
                       && inventAvailPhysicalByBatchId.AvailPhysical  > 0
                    notexists join _attribSelect
                    notexists join batchAttributes
                    where batchAttributes.ItemId           == _itemId
                       && batchAttributes.InventBatchId    == inventBatchSelect.InventBatchId
                       && batchAttributes.PdsBatchAttribId == _attribSelect.PdsBatchAttribId
                    {
                        reservationBatches.addEnd(inventBatchSelect);
                    }

                    // Add all batches with AvailPhysical <= 0 given it was reserved for current movement
                    while select inventBatchSelect
                    where inventBatchSelect.ItemId                == _itemId
                    exists join inventAvailPhysicalByBatchId
                    where inventAvailPhysicalByBatchId.ItemId     == _itemId
                    && inventAvailPhysicalByBatchId.InventBatchId == inventBatchSelect.InventBatchId
                    && inventAvailPhysicalByBatchId.AvailPhysical <= 0
                    exists join inventDimTable
                    // To select all correct related batches even that batch is partially reserved by other inventtrans.
                    // Adding inventSiteId, inventLocationId and inventStatusId as a filter, trying to filter out useless records. improving perfromance.
                    where inventDimTable.InventSiteId  == movementInventDim.InventSiteId
                       && (!movementInventDim.inventlocationId || inventDimTable.inventLocationId == movementInventDim.inventlocationId)
                       && (!movementInventDim.InventStatusId   || inventDimTable.InventStatusId   == movementInventDim.InventStatusId)
                       && inventDimTable.InventBatchId == inventBatchSelect.InventBatchId
                    notexists join _attribSelect
                    notexists join batchAttributes
                    where batchAttributes.ItemId           == _itemId
                       && batchAttributes.InventBatchId    == inventBatchSelect.InventBatchId
                       && batchAttributes.PdsBatchAttribId == _attribSelect.PdsBatchAttribId
                    {
                        reservationBatches.addEnd(inventBatchSelect);
                    }
                }
            }

            element.instrumentationLogger().whsBatchAttribReserve().reservationBatchesCounts(activityContext, reservationBatches.elements());

        }

        return reservationBatches;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal InventInstrumentationLogger instrumentationLogger()
    {
        if (!logger)
        {
            logger = InventInstrumentationLogger::createLogger(formStr(WHSBatchAttribReserve));
        }

        return logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrderCommittedData</Name>
				<Source><![CDATA[
    private void updateOrderCommittedData()
    {
        if (!overviewOrderCommitted.visible())
        {
            return;
        }

        TmpPdsBatchSelect batchSelect;
        TmpPdsBatchSelect batchSelectOrderCommitted;
        TmpPdsBatchSelect batchSelectOrderCommittedNew;

        ttsbegin;

        batchSelect.setTmpData(tmpPdsBatchSelect);
        batchSelectOrderCommitted.setTmpData(tmpPdsBatchSelectOrderCommitted);
        batchSelectOrderCommittedNew.setTmpData(tmpPdsBatchSelectOrderCommitted);

        delete_from batchSelectOrderCommitted
            notexists join batchSelect
            where batchSelect.InventBatchId == batchSelectOrderCommitted.InventBatchId;

        while select forupdate batchSelectOrderCommitted
        {
            if (!tmpPdsBatchSelectOrderCommitted_ds.displayReserveNow(batchSelectOrderCommitted))
            {
                batchSelectOrderCommitted.delete();
            }
        }

        while select forupdate batchSelect
            notexists join batchSelectOrderCommitted
            where batchSelectOrderCommitted.InventBatchId == batchSelect.InventBatchId
        {
            if (tmpPdsBatchSelectOrderCommitted_ds.displayReserveNow(batchSelect))
            {
                batchSelectOrderCommittedNew.clear();
                batchSelectOrderCommittedNew.initValue();
                batchSelectOrderCommittedNew.InventBatchId = batchSelect.InventBatchId;
                batchSelectOrderCommittedNew.ItemId        = batchSelect.ItemId;
                batchSelectOrderCommittedNew.insert();
            }
        }

        ttscommit;

        tmpPdsBatchSelectOrderCommitted_ds.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReserveLine</Name>
				<Source><![CDATA[
    private boolean updateReserveLine(WHSInventReserve _inventReserve, InventDim _inventDim)
    {
        if (inventOnHandReserve.mustUseFlexibleWarehouseLevelDimensionReservation() && !element.checkLocationForOrderCommittedReservation(_inventDim))
        {
            return false;
        }

        Common common = element.args().record();

        using (var activityContext = element.instrumentationLogger().whsBatchAttribReserve().reserveLine())
        {
            logger.whsBatchAttribReserve().flexibleReservation(activityContext, inventOnHandReserve.mustUseFlexibleWarehouseLevelDimensionReservation());
                    
            // When the first parameter (common) is provided only ItemId and InventBatchId fields are used from the inventTrans variable
            pdsBatchAttribReserveForm.checkReserveLine(common,
                                                       inventTrans,
                                                       _inventDim,
                                                       tmpPdsBatchAttribSelect,
                                                       checkDate,
                                                       movement.pdsOverrideFEFO());

            inventOnHandReserve.updateReserveLine(_inventReserve, _inventDim);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFormOnReserveLine</Name>
				<Source><![CDATA[
    private void refreshFormOnReserveLine()
    {
        element.cacheTmpPdsBatchSelectPosition();
        element.refreshMovement();
        tmpPdsBatchSelect_DS.research(true);
        inventTransMovementOrigin_ds.research();
        inventTransMovement_ds.refresh();
        reserveNow.setFocus();
        element.restoreTmpPdsBatchSelectPosition();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>InventTransMovement</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;
            SalesLine   salesLine;
            ProdTable   prodTable;
            ProdBOM     prodBOM;

            ret = super();

            if (inventTransMovementOrigin.inventTable().pdsIsShelfLifeCapable())
            {
                switch (inventTransMovementOrigin.ReferenceCategory)
                {
                    case InventTransType::Sales :
                        salesLine = inventTransMovementOrigin.originator();
                        checkDate = salesLine.ShippingDateRequested;
                        break;
                    case InventTransType::ProdLine :
                        prodBOM = inventtransmovementorigin.originator();
                        checkDate = prodTable.DlvDate;
                        break;
                    case InventTransType::Production :
                    //fallthrough;
                    case InventTransType::PmfProdCoBy :
                        prodTable = inventTransMovementOrigin.originator();
                        checkDate = prodTable.DlvDate;
                        break;
                }
            }

            formCtrl.dataSourceActivePost();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>movementReservOrdered</Name>
						<Source><![CDATA[
        public display InventQtyReservOrdered movementReservOrdered(InventTrans _inventTrans)
        {
            reserveNowAction.observe();
            return this.convertQty(inventOnHandReserve.getReservedOrderedLot(), _inventTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>movementOnOrder</Name>
						<Source><![CDATA[
        public display InventQtyOnOrder movementOnOrder(InventTrans _inventTrans)
        {
            reserveNowAction.observe();
            return this.convertQty(inventOnHandReserve.getOnOrderLot(), _inventTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>movementReservPhysical</Name>
						<Source><![CDATA[
        public display InventQtyReservPhysical movementReservPhysical(InventTrans _inventTrans)
        {
            reserveNowAction.observe();
            return this.convertQty(inventOnHandReserve.getReservedPhysicalLot(), _inventTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>movementCWReservOrdered</Name>
						<Source><![CDATA[
        public display PdsCWReservOrdered movementCWReservOrdered(InventTrans _inventTrans)
        {
            if (!element.isItemCWEnabled(_inventTrans.ItemId))
            {
                return 0;
            }

            reserveNowAction.observe();
            return this.convertQty(inventOnHandReserve.getCWReservedOrderedLot(), _inventTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>movementCWOnOrder</Name>
						<Source><![CDATA[
        public display PdsCWOnOrder movementCWOnOrder(InventTrans _inventTrans)
        {
            if (!element.isItemCWEnabled(_inventTrans.ItemId))
            {
                return 0;
            }

            reserveNowAction.observe();
            return this.convertQty(inventOnHandReserve.getCWOnOrderLot(), _inventTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>movementCWReservPhysical</Name>
						<Source><![CDATA[
        public display PdsCWReservPhysical movementCWReservPhysical(InventTrans _inventTrans)
        {
            if (!element.isItemCWEnabled(_inventTrans.ItemId))
            {
                return 0;
            }

            reserveNowAction.observe();
            return this.convertQty(inventOnHandReserve.getCWReservedPhysicalLot(), _inventTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>convertQty</Name>
						<Source><![CDATA[
        private InventQty convertQty(InventQty _quantity, InventTrans _inventTrans)
        {
            return inventOnHandReserve.convertQuantityBetweenUnits(
                _quantity,
                unitIdInvent,
                unitIdSecondary,
                _inventTrans.ItemId,
                _inventTrans.InventDimId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>unitId</Name>
						<Source><![CDATA[
        public display UnitOfMeasureSymbol unitId()
        {
            InventMovement  lclMov;

            lclMov = element.movement();
            
            return lclMov ? lclMov.transUnitId() : '';
        }

]]></Source>
					</Method>
					<Method>
						<Name>cwUnitId</Name>
						<Source><![CDATA[
        public display UnitOfMeasureSymbol cwUnitId()
        {
            // Method returns empty string for non catch weight enabled items.
            return PdsCatchWeight::cwUnitId(element.movement().itemId());
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TmpPdsBatchSelect</Name>
				<Methods>
					<Method>
						<Name>displayPhysAvailUpHierarchy</Name>
						<Source><![CDATA[
        /// <summary>
        /// Displays the physical available amount taking into consideration availablity up the hierarchy.
        /// </summary>
        /// <param name="_batchSelect">
        /// The current TmpPdsBatchSelect buffer selected.
        /// </param>
        /// <returns>
        /// The physical available amount.
        /// </returns>
        [SysClientCacheDataMethodAttribute(true)]
        display public InventQtyAvailPhysical displayPhysAvailUpHierarchy(TmpPdsBatchSelect _batchSelect)
        {
            InventDim           inventDimLocal;
            WHSInventReserve    whsInventReserveLocal;

            inventDimLocal = _batchSelect.joinChild();
            inventDimLocal = InventDim::findOrCreate(inventDimLocal);
            whsInventReserveLocal = _batchSelect.joinChild().joinChild();
            whsInventReserveLocal.InventDimId = inventDimLocal.InventDimId;

            return inventOnHandReserve.convertQuantityBetweenUnits(
                    whsInventReserveLocal.displayPhysAvailUpHierarchy(),
                    unitIdInvent,
                    unitIdSecondary,
                    whsInventReserveLocal.ItemId,
                    whsInventReserveLocal.InventDimId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayCWPhysAvailUpHierarchy</Name>
						<Source><![CDATA[
        /// <summary>
        /// Displays the physical available amount taking into consideration availability up the hierarchy.
        /// </summary>
        /// <param name="_batchSelect">
        /// The current TmpPdsBatchSelect buffer selected.
        /// </param>
        /// <returns>
        /// The physical available catch weight amount.
        /// </returns>
        [SysClientCacheDataMethodAttribute(true)]
        display public PdsCWAvailPhysical displayCWPhysAvailUpHierarchy(TmpPdsBatchSelect _batchSelect)
        {
            InventDim inventDimLocal = _batchSelect.joinChild();
            inventDimLocal = InventDim::findOrCreate(inventDimLocal);
            WHSInventReserve whsInventReserveLocal = _batchSelect.joinChild().joinChild();
            whsInventReserveLocal.InventDimId = inventDimLocal.InventDimId;

            if (!element.isItemCWEnabled(whsInventReserveLocal.ItemId))
            {
                return 0;
            }

            return inventOnHandReserve.convertQuantityBetweenUnits(
                    whsInventReserveLocal.displayCWPhysAvailUpHierarchy(),
                    unitIdInvent,
                    unitIdSecondary,
                    whsInventReserveLocal.ItemId,
                    whsInventReserveLocal.InventDimId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            element.inventDimSetupObject().modifyQueryTmpBatchSel(whsInventReserve_DS, inventDim_ds, fromInventLocId);
            super();

            element.updateOrderCommittedData();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            element.updateDesign(InventDimFormDesignUpdate::LinkActive);

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
            this.query().dataSourceTable(tableNum(TmpPdsBatchSelect))
                .addSortField(fieldNum(TmpPdsBatchSelect, InventBatchId));
        }

]]></Source>
					</Method>
					<Method>
						<Name>reserveNowQty</Name>
						<Source><![CDATA[
        public edit PdsQtyReservation reserveNowQty(boolean _set, TmpPdsBatchSelect _batchSelect, InventHandlingQty _reserveNow)
        {
            return this.reserveNow(_set, _batchSelect, _reserveNow);
        }

]]></Source>
					</Method>
					<Method>
						<Name>reserveNowCWQty</Name>
						<Source><![CDATA[
        public edit PdsCWQtyReservation reserveNowCWQty(boolean _set, TmpPdsBatchSelect _batchSelect, InventHandlingQty _reserveNow)
        {
            return this.reserveNow(_set, _batchSelect, _reserveNow);
        }

]]></Source>
					</Method>
					<Method>
						<Name>reserveNow</Name>
						<Source><![CDATA[
        public edit PdsQtyReservation reserveNow(
            boolean _set,
            TmpPdsBatchSelect _batchSelect,
            InventQty  _reserveNow)
        {
            boolean                     ret = true;
            PdsQtyReservation           reserveQty;
            PdsBatchDispCheck_Reserve   pdsCheckReserve;
            SalesLine                   salesLine;
            WHSInventReserve            inventReserve;

            if (inventTrans.inventTable().isItemBatchActivated())
            {
                if (_set
                    && _reserveNow != 0.00
                    && InventTrans.inventTable().pdsIsShelfLifeCapable())
                {
                    if (element.args().record().TableId == tableNum(SalesLine))
                    {
                        salesLine = element.args().record();
                        ret = InventBatch::pdsCheckExpiryDate(inventDim.InventBatchId,
                                                salesLine.ItemId,
                                                salesLine.ReceiptDateRequested,
                                                true,
                                                salesLine.CustAccount,
                                                false,
                                                inventDim);
                    }
                    else
                    {
                        ret = InventBatch::pdsCheckExpiryDate(
                            inventDim.InventBatchId,
                            inventTrans.ItemId,checkDate);
                    }

                    if (ret)
                    {
                        pdsCheckReserve = PdsBatchDispCheck_Reserve::construct();
                        ret = pdsCheckReserve.validateTransCheck(
                            inventTrans,element.args().record());
                    }
                }
            }

            if (_set && _reserveNow != 0 && inventOnHandReserve.mustUseFlexibleWarehouseLevelDimensionReservation())
            {
                if (!element.checkLocationForOrderCommittedReservation(inventDim))
                {
                    throw error("@SYS18447");
                }
            }

            if (ret)
            {
                inventReserve = _batchSelect.joinChild().joinChild();
                inventReserve.InventDimId = InventDim::findOrCreate(_batchSelect.joinChild()).InventDimId;

                if (inventReserve.ItemId)
                {
                    inventOnHandReserve.parmInventDimId(inventReserve.InventDimId);

                    reserveQty = inventOnHandReserve.reserveHandlingQuantityNow(_set, inventReserve, _reserveNow);
                }

                if (_set)
                {
                    element.cacheTmpPdsBatchSelectPosition();

                    this.reread();
                    element.refreshMovement();
                    reserveNowAction.markChanged();
                    
                    element.restoreTmpPdsBatchSelectPosition();
                }
            }
            else if (_set)
            {
                reserveQty = _reserveNow;
            }
            
            return reserveQty;
        }

]]></Source>
					</Method>
					<Method>
						<Name>availPhysicalUnit</Name>
						<Source><![CDATA[
        public display InventQtyAvailPhysical availPhysicalUnit(WHSInventReserve _inventReserve)
        {
            return inventOnHandReserve.convertQuantityBetweenUnits(
                    _inventReserve.AvailPhysical,
                    unitIdInvent,
                    unitIdSecondary,
                    _inventReserve.ItemId,
                    _inventReserve.InventDimId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayUnitId</Name>
						<Source><![CDATA[
        public display UnitOfMeasureSymbol displayUnitId()
        {
            InventMovement lclMov = element.movement();
            
            return lclMov ? lclMov.transUnitId() : '';
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayCWUnitId</Name>
						<Source><![CDATA[
        public display UnitOfMeasureSymbol displayCWUnitId()
        {
            // Method returns empty string for non catch weight enabled items.
            return PdsCatchWeight::cwUnitId(element.movement().itemId());
        }

]]></Source>
					</Method>
					<Method>
						<Name>availReservationFlexUnit</Name>
						<Source><![CDATA[
        internal display InventQtyAvailReservation availReservationFlexUnit(TmpPdsBatchSelect _batchSelect)
        {
            if (inventOnHandReserve.mustUseFlexibleWarehouseLevelDimensionReservation())
            {
                InventDim     inventDimLocal = InventDim::findOrCreate(_batchSelect.joinChild());
                InventDimParm inventDimParm = inventDimFormSetup.parmDimParmVisibleGrid().data();

                return inventOnHandReserve.convertQuantityBetweenUnits(
                    inventOnHandReserve.onhandAvailReservationInventFlexible(inventDimLocal, inventDimParm),
                    unitIdInvent,
                    unitIdSecondary,
                    inventOnHandReserve.movement().itemId(),
                    inventDimLocal.InventDimId);
            }

            return whsInventReserve_ds.availReservationUnit(_batchSelect.joinChild().joinChild());
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>InventDim</Name>
				<Methods>
					<Method>
						<Name>physicalInventUnit</Name>
						<Source><![CDATA[
        public display InventQtyPhysicalOnhand physicalInventUnit(InventDim _inventDim)
        {
            InventDim   displayInventDim = InventDim::findOrCreate(_inventDim);

            return inventOnHandReserve.convertQuantityBetweenUnits(
                                        WHSInventOnHand::getWorkPhysicalInvent(currentItemId, displayInventDim.InventDimId),
                                        unitIdInvent,
                                        unitIdSecondary,
                                        currentItemId,
                                        displayInventDim.inventDimId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>cwPhysicalInventUnit</Name>
						<Source><![CDATA[
        public display PdsCWPhysicalInvent cwPhysicalInventUnit(InventDim _inventDim)
        {
            if (!element.isItemCWEnabled(currentItemId))
            {
                return 0;
            }
            InventDim displayInventDim = InventDim::findOrCreate(_inventDim);

            return inventOnHandReserve.convertQuantityBetweenUnits(
                                        WHSInventOnHand::getWorkPhysicalInventHandlingQty(currentItemId, displayInventDim.InventDimId),
                                        unitIdInvent,
                                        unitIdSecondary,
                                        currentItemId,
                                        displayInventDim.inventDimId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>pdsBestBeforeDate</Name>
						<Source><![CDATA[
        public display PdsBestBeforeDate pdsBestBeforeDate(InventDim _inventDim)
        {
            PdsBestBeforeDate   bestBeforeDate = dateNull();

            if (hasFieldAccess(tableNum(InventBatch),
                    fieldNum(InventBatch,PdsBestBeforeDate),AccessType::View))
            {
                if (_inventDim.InventBatchId)
                {
                    bestBeforeDate = InventBatch::find(
                        _inventDim.InventBatchId,
                        tmpPdsBatchSelect.ItemId).PdsBestBeforeDate;
                }
            }

            return bestBeforeDate;
        }

]]></Source>
					</Method>
					<Method>
						<Name>pdsExpDate</Name>
						<Source><![CDATA[
        public display InventBatchExpDate pdsExpDate(InventDim _inventDim)
        {
            InventBatchExpDate   expDate = dateNull();

            if (hasFieldAccess(tableNum(InventBatch),
                    fieldNum(InventBatch,PdsBestBeforeDate),AccessType::View))
            {
                if (_inventDim.InventBatchId)
                {
                    expDate = InventBatch::find(
                    _inventDim.InventBatchId, tmpPdsBatchSelect.ItemId).ExpDate;
                }
            }

            return expDate;
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int                 ret;
            InventTable         inventTable;
            SalesLine           salesLine;
            boolean             allowEdit;

            inventTable = InventTable::find(whsInventReserve.ItemId);

            if (inventTable.pdsIsShelfLifeCapable()
                && inventTable.isItemBatchActivated())
            {
                if (inventTable.modelGroup().PdsCheck)
                {
                    if (element.args().record().TableId == tableNum(SalesLine))
                    {
                        salesLine = element.args().record();
                        allowEdit = InventBatch::pdsCheckExpiryDate(
                                        inventDim.InventBatchId,
                                        whsInventReserve.ItemId,
                                        salesLine.ReceiptDateRequested,
                                        false,
                                        salesLine.CustAccount,
                                        false,
                                        inventDim);
                    }
                    else
                    {
                        allowEdit = InventBatch::pdsCheckExpiryDate(
                                        inventDim.InventBatchId,
                                        whsInventReserve.ItemId);
                    }

                    if (reserveNow.visible())
                    {
                        reserveNow.enabled(allowEdit);
                    }
                }
            }

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            // Suppress the super() call
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>inventBatchId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                PdsBatchDispCheck_Reserve   pdsCheckReserve;
                Common                      refRecord;

                if (InventTrans.inventTable().pdsIsShelfLifeCapable())
                {
                    refRecord = inventTransOrigin.originator();
                    if (refRecord)
                    {
                        pdsCheckReserve = PdsBatchDispCheck_Reserve::construct();
                        if (pdsCheckReserve.validateTransCheck(inventTrans,refRecord))
                        {
                            super();
                        }
                    }
                }
                else
                {
                    super();
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>InventTrans</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            #DEFINE.LiteralsActive(0)
            #DEFINE.LiteralsNotActive(2)

            InventDimParm inventDimParmFilled;

            QueryBuildDataSource    qbsTrans;
            QueryBuildDataSource    qbsDim;

            this.query().literals(#LiteralsActive);

            qbsTrans = this.query().dataSourceTable(tableNum(InventTrans));
            qbsDim   = this.query().dataSourceTable(tableNum(InventDim));

            qbsTrans.sortClear();
            qbsDim.sortClear();

            inventDimParmFilled.initFromInventDim(inventDim);
            if (InventDimParm::isInventDimParmEqual(inventDimParmFilled,InventDimParm::andParms(
                            element.inventDimParmActive(),
                            this.getInventDimParmGrid())))
            {
                InventDim::queryAddRangeFromDSSort(inventTrans_ds.query().dataSourceTable(tableNum(InventDim)), inventDim_DS);

                if (InventTrackingDimension::queryAddIndexHint(qbsDim, inventDimParmFilled))
                {
                    this.query().literals(#LiteralsNotActive);

                    qbsTrans.addSortIndex(indexNum(InventTrans, DimIdIdx));
                    qbsTrans.indexIsHint(true);
                }
                else if (!inventDimParmFilled.isFlagSelective())
                {
                    this.query().literals(#LiteralsNotActive);

                    qbsTrans.addSortIndex(indexNum(InventTrans, ItemIdx));
                    qbsTrans.indexIsHint(true);

                    qbsDim.addSortIndex(indexNum(InventDim, DimIdIdx));
                    qbsDim.indexIsHint(true);
                }

                super();
            }
            else
            {
                this.query().literals(#LiteralsNotActive);

                qbsTrans.addSortIndex(indexNum(InventTrans,recId));
                qbsTrans.indexIsHint(true);

                qbsDim.addSortIndex(indexNum(InventDim,DimIdIdx));
                qbsDim.indexIsHint(true);

                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>getInventDimParmGrid</Name>
						<Source><![CDATA[
        private InventDimParm getInventDimParmGrid()
        {
            InventDimParm inventDimParmGrid = inventDimFormSetup.parmDimParmVisibleGrid();
            InventTable   item = InventTable::find(element.currentItemId);
                
            if (item.Product().isProductMaster())
            {
                List activeFields = EcoResProductDimensionGroupProduct::findByProduct(item.Product).activeProductDimensions();
                inventDimParmGrid.initFromInventDimFieldList(activeFields);
            }
            
            return inventDimParmGrid;
        }

]]></Source>
					</Method>
					<Method>
						<Name>qtyUnit</Name>
						<Source><![CDATA[
        public display InventQty  qtyUnit(InventTrans _inventTrans)
        {
            return inventOnHandReserve.convertQuantityBetweenUnits(_inventTrans.Qty, unitIdInvent, unitIdSecondary, _inventTrans.ItemId, _inventTrans.InventDimId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            this.query().dataSourceTable(tableNum(InventTrans),1).addRange(fieldNum(InventTrans,StatusIssue)).value('0');
            this.query().dataSourceTable(tableNum(InventTrans),1).addRange(fieldNum(InventTrans,StatusReceipt)).value(queryValue(StatusReceipt::Purchased)+'..'
                    +queryValue(StatusReceipt::QuotationReceipt));
            this.query().dataSourceTable(tableNum(InventTrans),1).addRange(fieldNum(InventTrans,PackingSlipReturned)).value(queryValue(NoYes::No));
            this.query().dataSourceTable(tableNum(InventTrans),1).addRange(fieldNum(InventTrans,InvoiceReturned)).value(queryValue(NoYes::No));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>InventTransMovementOrigin</Name>
				<Methods>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        public void linkActive()
        {
            super();

            movement = null;
            movement = element.movement();

            if (movement && movement.itemId() != currentItemId)
            {
                unitIdInvent = InventTableModule::find(
                    movement.itemId(),ModuleInventPurchSales::Invent).UnitId;
                unitIdSecondary = movement.transUnitId();

                element.fillDefaultAttributes();
                element.refreshSelection();

                element.updateDesign(InventDimFormDesignUpdate::LinkActive);
            }
            currentItemId = movement.itemId();

            tmpPdsBatchSelect_ds.research();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            InventTransFormHelper::formQueryAddDynalink(inventTransMovementOrigin_DS, null, element.args());
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>InventTransOrigin</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            this.query().dataSourceTable(tableNum(InventTransOrigin),1).addRange(fieldNum(InventTransOrigin, ReferenceCategory)).value(SysQuery::valueNot(InventTransType::WHSWork));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>WHSInventReserve</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret = true;

            // Suppress call to super (write method also suppressed)
            //ret = super();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>physicalInventUnit</Name>
						<Source><![CDATA[
        public display InventQtyPhysicalOnhand physicalInventUnit(WHSInventReserve _inventReserve)
        {
            _inventReserve.checkInvalidFieldAccess(false);

            return inventOnHandReserve.convertQuantityBetweenUnits(
                WHSInventOnHand::getWorkPhysicalInvent(_inventReserve.ItemId, _inventReserve.InventDimId),
                    unitIdInvent,
                    unitIdSecondary,
                    _inventReserve.ItemId,
                    _inventReserve.InventDimId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>availPhysicalUnit</Name>
						<Source><![CDATA[
        public display InventQtyAvailPhysical availPhysicalUnit(WHSInventReserve _inventReserve)
        {
            _inventReserve.InventDimId = currentInventDim;
            _inventReserve.checkInvalidFieldAccess(false);

            return inventOnHandReserve.convertQuantityBetweenUnits(
                    _inventReserve.AvailPhysical,
                    unitIdInvent,
                    unitIdSecondary,
                    _inventReserve.ItemId,
                    _inventReserve.InventDimId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>orderedUnit</Name>
						<Source><![CDATA[
        public display InventQtyOrdered  orderedUnit(WHSInventReserve _inventReserve)
        {
            _inventReserve.InventDimId = currentInventDim;
            _inventReserve.checkInvalidFieldAccess(false);

            return inventOnHandReserve.convertQuantityBetweenUnits(
                    _inventReserve.AvailOrdered - _inventReserve.AvailPhysical,
                    unitIdInvent,
                    unitIdSecondary,
                    _inventReserve.ItemId,
                    _inventReserve.InventDimId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>availReservationUnit</Name>
						<Source><![CDATA[
        public display InventQtyAvailReservation availReservationUnit(WHSInventReserve _inventReserve)
        {
            _inventReserve.InventDimId = currentInventDim;
            _inventReserve.checkInvalidFieldAccess(false);

            return inventOnHandReserve.convertQuantityBetweenUnits(
                    InventParameters::find().ReserveOnOrdered ? _inventReserve.AvailOrdered : _inventReserve.AvailPhysical,
                    unitIdInvent,
                    unitIdSecondary,
                    _inventReserve.ItemId,
                    _inventReserve.InventDimId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>reservPhysicalUnit</Name>
						<Source><![CDATA[
        public display InventQtyReservPhysical reservPhysicalUnit(WHSInventReserve _inventReserve)
        {
            _inventReserve.InventDimId = currentInventDim;
            _inventReserve.checkInvalidFieldAccess(false);

            return inventOnHandReserve.convertQuantityBetweenUnits(
                    _inventReserve.ReservPhysical,
                    unitIdInvent,
                    unitIdSecondary,
                    _inventReserve.ItemId,
                    _inventReserve.InventDimId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>reservOrderedUnit</Name>
						<Source><![CDATA[
        public display InventQtyReservOrdered reservOrderedUnit(WHSInventReserve _inventReserve)
        {
            _inventReserve.InventDimId = currentInventDim;
            _inventReserve.checkInvalidFieldAccess(false);

            return inventOnHandReserve.convertQuantityBetweenUnits(
                    _inventReserve.ReservOrdered,
                    unitIdInvent,
                    unitIdSecondary,
                    _inventReserve.ItemId,
                    _inventReserve.InventDimId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>cwPhysicalInventUnit</Name>
						<Source><![CDATA[
        public display PdsCWPhysicalInvent cwPhysicalInventUnit(WHSInventReserve _inventReserve)
        {
            if (!element.isItemCWEnabled(_inventReserve.ItemId))
            {
                return 0;
            }

            _inventReserve.checkInvalidFieldAccess(false);

            return inventOnHandReserve.convertQuantityBetweenUnits(
                WHSInventOnHand::getWorkPhysicalInventHandlingQty(_inventReserve.ItemId, _inventReserve.InventDimId),
                    unitIdInvent,
                    unitIdSecondary,
                    _inventReserve.ItemId,
                    _inventReserve.InventDimId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>cwAvailPhysicalUnit</Name>
						<Source><![CDATA[
        public display PdsCWAvailPhysical cwAvailPhysicalUnit(WHSInventReserve _inventReserve)
        {
            if (!element.isItemCWEnabled(_inventReserve.ItemId))
            {
                return 0;
            }

            _inventReserve.checkInvalidFieldAccess(false);

            return inventOnHandReserve.convertQuantityBetweenUnits(
                    _inventReserve.CWAvailPhysical,
                    unitIdInvent,
                    unitIdSecondary,
                    _inventReserve.ItemId,
                    _inventReserve.InventDimId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>cwOrderedUnit</Name>
						<Source><![CDATA[
        public display PdsCWOrdered cwOrderedUnit(WHSInventReserve _inventReserve)
        {
            if (!element.isItemCWEnabled(_inventReserve.ItemId))
            {
                return 0;
            }

            _inventReserve.checkInvalidFieldAccess(false);

            return inventOnHandReserve.convertQuantityBetweenUnits(
                    _inventReserve.CWAvailOrdered - _inventReserve.CWAvailPhysical,
                    unitIdInvent,
                    unitIdSecondary,
                    _inventReserve.ItemId,
                    _inventReserve.InventDimId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>cwAvailReservationUnit</Name>
						<Source><![CDATA[
        public display PdsCWAvailReservation cwAvailReservationUnit(WHSInventReserve _inventReserve)
        {
            if (!element.isItemCWEnabled(_inventReserve.ItemId))
            {
                return 0;
            }

            _inventReserve.checkInvalidFieldAccess(false);

            return inventOnHandReserve.convertQuantityBetweenUnits(
                    _inventReserve.CWAvailOrdered,
                    unitIdInvent,
                    unitIdSecondary,
                    _inventReserve.ItemId,
                    _inventReserve.InventDimId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>cwReservPhysicalUnit</Name>
						<Source><![CDATA[
        public display PdsCWReservPhysical cwReservPhysicalUnit(WHSInventReserve _inventReserve)
        {
            if (!element.isItemCWEnabled(_inventReserve.ItemId))
            {
                return 0;
            }

            _inventReserve.checkInvalidFieldAccess(false);

            return inventOnHandReserve.convertQuantityBetweenUnits(
                    _inventReserve.CWReservPhysical,
                    unitIdInvent,
                    unitIdSecondary,
                    _inventReserve.ItemId,
                    _inventReserve.InventDimId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>cwReservOrderedUnit</Name>
						<Source><![CDATA[
        public display PdsCWReservOrdered cwReservOrderedUnit(WHSInventReserve _inventReserve)
        {
            if (!element.isItemCWEnabled(_inventReserve.ItemId))
            {
                return 0;
            }

            _inventReserve.checkInvalidFieldAccess(false);

            return inventOnHandReserve.convertQuantityBetweenUnits(
                    _inventReserve.CWReservOrdered,
                    unitIdInvent,
                    unitIdSecondary,
                    _inventReserve.ItemId,
                    _inventReserve.InventDimId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            //super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
            element.inventDimSetupObject().initQueryWHSInventReserve(whsInventReserve_DS);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TmpPdsBatchSelectOrderCommitted</Name>
				<Methods>
					<Method>
						<Name>displayReserveNow</Name>
						<Source><![CDATA[
        public display PdsQtyReservation displayReserveNow(TmpPdsBatchSelect _batchSelect)
        {
            InventDim     inventDimLocal = element.movement().inventdim().data();
            InventDimParm inventDimParm;

            inventDimLocal.inventDimId = '';
            inventDimLocal.inventBatchId = _batchSelect.InventBatchId;
            inventDimLocal = InventDim::findOrCreate(inventDimLocal);
            inventOnHandReserve.parmInventDimId(inventDimLocal.InventDimId);
            inventDimParm.initFromInventDim(inventDimLocal);

            InventQty reserveQty = inventOnHandReserve.onhandReservedInvent(inventDimLocal, inventDimParm);
            InventQty transferredQty = WHSOrderCommittedReservationFacade::calculateTransferredQty(inventOnHandReserve.movement().transId(), inventDimLocal, inventDimParm);

            return inventOnHandReserve.convertQuantityBetweenUnits(
                reserveQty + transferredQty,
                unitIdInvent,
                unitIdSecondary,
                inventOnHandReserve.movement().itemId(),
                inventDimLocal.InventDimId);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Search</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            cacheFilled = false;
            FormRun fr;
            Args    args;

            super();
            args = new Args(formStr(PdsBatchAttribReserveSelect));
            args.caller(element);
            args.record(tmpPdsBatchAttribSelect);
            args.parmEnumType(enumNum(ModuleAxapta));
            args.parmEnum(enum2int(ModuleAxapta::SalesOrder));
            fr = classfactory.formRunClass(args);
            fr.run();
            fr.wait();
            fr = null;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>History</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            Args args = new Args();
            args.caller(element);
            args.record(tmpPdsBatchAttribSelect);

            MenuFunction mf = new MenuFunction(menuItemDisplayStr(PdsBatchAttribReserveHistory), MenuItemType::Display);
            FormRun      fr = mf.create(Args);

            fr.run();
            fr.wait();

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReserveLot</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            using (var activityContext = element.instrumentationLogger().whsBatchAttribReserve().reserveLot())
            {
                logger.whsBatchAttribReserve().flexibleReservation(activityContext, inventOnHandReserve.mustUseFlexibleWarehouseLevelDimensionReservation());

                super();

                inventOnHandReserve.updateReserveLot(tmpPdsBatchAttribSelect);

                element.cacheTmpPdsBatchSelectPosition();
                element.refreshMovement();
                tmpPdsBatchSelect_DS.research(true);
                inventTransMovementOrigin_ds.research();
                whsInventReserve_DS.executeQuery();
                reserveNow.setFocus();
                element.restoreTmpPdsBatchSelectPosition();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReserveLine</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            if (!element.updateReserveLine(whsInventReserve, inventDim))
            {
                throw error("@SYS18447");
            }

            element.refreshFormOnReserveLine();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReserveLines</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            MultiSelectionHelper selectionHelper = MultiSelectionHelper::construct();

            selectionHelper.parmDatasource(tmpPdsBatchSelect_ds);

            TmpPdsBatchSelect localTmpPdsBatchSelect = selectionHelper.getFirst();
            boolean           firstRecord = true;

            while (localTmpPdsBatchSelect)
            {
                InventDim        localInventDim = localTmpPdsBatchSelect.joinChild();
                WHSInventReserve localInventReserve;

                localInventReserve = localInventDim.joinChild();

                if (firstRecord)
                {
                    firstRecord = false;
                }
                // AvailPhysical/AvailOrdered should be re-calculated for each next line to take into account reservation for previous line.
                // For fleible reservation we may skip re-calculation since these fieldss are not used.
                else if (!inventOnHandReserve.mustUseFlexibleWarehouseLevelDimensionReservation())
                {
                    WHSInventReserveQuantities quantities = WHSInventOnHand::getAvailQuantitiesForLevel(movement.itemId(), localInventDim, inventOnHandReserve.onHandQuery().reservationLevel(), false);

                    localInventReserve.AvailPhysical = quantities.AvailPhysical;
                    localInventReserve.AvailOrdered  = quantities.AvailOrdered;
                }

                element.updateReserveLine(localInventReserve, localInventDim);

                localTmpPdsBatchSelect = selectionHelper.getNext();
            }

            element.refreshFormOnReserveLine();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TmpPdsBatchSelectOrderCommited_InventBatchId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            Args args = new Args();
            args.record(TmpPdsBatchSelectOrderCommitted);
            args.caller(element);
            
            MenuFunction menuFunction = new MenuFunction(menuitemDisplayStr(InventBatch), MenuItemType::Display);
            menuFunction.run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>InventTransMovement</Name>
			<Table>InventTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountAdjustment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountOperations</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountPosted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSecCurAdjustment_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSecCurPhysical_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSecCurPosted_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSettled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSettledSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountStd</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountStdSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateClosed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateClosedSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateExpected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateFinancial</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateInvent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DatePhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GroupRefId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GroupRefType_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyInventDimTransferred</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimFixed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventDimIdSales_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransOriginDelivery_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransOriginSales_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransOriginTransit_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceReturned</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkingRefInventTransOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackingSlipId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackingSlipReturned</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWSettled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PickingRouteID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjAdjustRefId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjCategoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Qty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QtySettled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QtySettledSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnInventTransOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RevenueAmountPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShippingDateConfirmed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShippingDateRequested</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StatusIssue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StatusReceipt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Storno_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StornoPhysical_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAmountPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TimeExpected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransChildRefId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransChildType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValueOpen</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValueOpenSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VoucherPhysical</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DelayActive>No</DelayActive>
			<JoinSource>InventTransMovementOrigin</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TmpPdsBatchSelect</Name>
			<Table>TmpPdsBatchSelect</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventBatchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventDim</Name>
			<Table>InventDim</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>configId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventBatchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventColorId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventVersionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventGtdId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventOwnerId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventProfileId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventSerialId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSiteId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSizeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStyleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LicensePlateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SHA1Hash</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSPalletId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DelayActive>No</DelayActive>
			<JoinSource>TmpPdsBatchSelect</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TmpPdsBatchAttribSelect</Name>
			<Table>TmpPdsBatchAttribSelect</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsBatchAttribId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsBatchAttribOpr1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsBatchAttribOpr2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsBatchAttribValue1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsBatchAttribValue2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventTrans</Name>
			<Table>InventTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountAdjustment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountOperations</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountPosted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSecCurAdjustment_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSecCurPhysical_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSecCurPosted_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSettled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSettledSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountStd</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountStdSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateClosed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateClosedSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateExpected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateFinancial</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateInvent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DatePhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GroupRefId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GroupRefType_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyInventDimTransferred</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimFixed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventDimIdSales_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransOriginDelivery_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransOriginSales_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransOriginTransit_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceReturned</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkingRefInventTransOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackingSlipId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackingSlipReturned</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWSettled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PickingRouteID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjAdjustRefId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjCategoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Qty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QtySettled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QtySettledSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnInventTransOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RevenueAmountPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShippingDateConfirmed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShippingDateRequested</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StatusIssue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StatusReceipt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Storno_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StornoPhysical_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAmountPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TimeExpected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransChildRefId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransChildType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValueOpen</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValueOpenSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VoucherPhysical</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TmpPdsBatchSelect</JoinSource>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventDimTrans</Name>
			<Table>InventDim</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>configId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventBatchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventColorId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventVersionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventGtdId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventOwnerId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventProfileId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventSerialId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSiteId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSizeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStyleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LicensePlateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SHA1Hash</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSPalletId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DelayActive>No</DelayActive>
			<JoinSource>InventTrans</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventTransMovementOrigin</Name>
			<Table>InventTransOrigin</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemInventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Party</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DelayActive>No</DelayActive>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventTransOrigin</Name>
			<Table>InventTransOrigin</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemInventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Party</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DelayActive>No</DelayActive>
			<JoinSource>InventTrans</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>WHSInventReserve</Name>
			<Table>WHSInventReserve</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AvailOrdered</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AvailPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReservOrdered</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReservPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DelayActive>No</DelayActive>
			<JoinSource>InventDim</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TmpPdsBatchSelectOrderCommitted</Name>
			<Table>TmpPdsBatchSelect</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventBatchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@PRO1848</Caption>
		<Pattern xmlns="">SimpleDetails-FastTabsContainer</Pattern>
		<PatternVersion xmlns="">1.4</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<TitleDataSource xmlns="">TmpPdsBatchSelect</TitleDataSource>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>536870911</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>InventDimParmFixed</Name>
								<ElementPosition>536870910</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>InventDimParmFixed</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>Search</Name>
								<ElementPosition>805306365</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@PRO1630</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>History</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741820</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@PRO1844</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>PdsBatchAttributes</Name>
								<ElementPosition>1342177275</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>TmpPdsBatchSelect</DataSource>
								<MenuItemName>PdsBatchAttributes</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ReserveLot</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612730</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@PDS1327</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ReserveLine</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1879048185</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@PDS1329</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ReserveLines</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1879048185</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@WAX:ReserveLines</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Header</Name>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Lot</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>HeaderReference</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>613566756</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>InventTransMovementOrigin_ReferenceCategory</Name>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ReferenceCategory</DataField>
										<DataSource>InventTransMovementOrigin</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InventTransMovementOrigin_ReferenceId</Name>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ReferenceId</DataField>
										<DataSource>InventTransMovementOrigin</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InventTransMovementOrigin_ItemId</Name>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ItemId</DataField>
										<DataSource>InventTransMovementOrigin</DataSource>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>HeaderUnits</Name>
								<ElementPosition>920350134</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>UnitId</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>unitId</DataMethod>
										<DataSource>InventTransMovement</DataSource>
										<Label>@SYS190814</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CWUnitId</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>WHSCatchWeight</ConfigurationKey>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>cwUnitId</DataMethod>
										<DataSource>InventTransMovement</DataSource>
										<Label>@PDS3</Label>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>HeaderReservedPhysical</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1227133512</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ReservPhysicalLot</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>movementReservPhysical</DataMethod>
										<DataSource>InventTransMovement</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>HeaderReservOrdered</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1533916890</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ReservOrderedLot</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>movementReservOrdered</DataMethod>
										<DataSource>InventTransMovement</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>HeaderOnOrder</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1840700268</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>OnOrderLot</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>movementOnOrder</DataMethod>
										<DataSource>InventTransMovement</DataSource>
										<Label>@SYS7183</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>HeaderCWReservedPhysical</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1227133512</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CWReservPhysicalLot</Name>
										<AllowEdit>No</AllowEdit>
										<ConfigurationKey>WHSCatchWeight</ConfigurationKey>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>movementCWReservPhysical</DataMethod>
										<DataSource>InventTransMovement</DataSource>
										<Label>@PDS61</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>HeaderCWReservOrdered</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1533916890</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CWReservOrderedLot</Name>
										<AllowEdit>No</AllowEdit>
										<ConfigurationKey>WHSCatchWeight</ConfigurationKey>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>movementCWReservOrdered</DataMethod>
										<DataSource>InventTransMovement</DataSource>
										<Label>@PDS56</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>HeaderCWOnOrder</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1840700268</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CWOnOrderLot</Name>
										<AllowEdit>No</AllowEdit>
										<ConfigurationKey>WHSCatchWeight</ConfigurationKey>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>movementCWOnOrder</DataMethod>
										<DataSource>InventTransMovement</DataSource>
										<Label>@PDS21</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<FrameType>None</FrameType>
						<ViewEditMode>View</ViewEditMode>
					</AxFormControl>
				</Controls>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1610612733</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>OverviewOrderCommitted</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>OnHandOrderCommitted</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpPdsBatchSelectOrderCommited_InventBatchId</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>InventBatchId</DataField>
										<DataSource>TmpPdsBatchSelectOrderCommitted</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpPdsBatchSelectOrderCommited_DisplayReserveNow</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1879048185</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayReserveNow</DataMethod>
										<DataSource>TmpPdsBatchSelectOrderCommitted</DataSource>
										<Label>@WAX:WHSBatchAttribReserve_OrderCommittedQty</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<DataSource>TmpPdsBatchSelectOrderCommitted</DataSource>
								<ShowRowLabels>No</ShowRowLabels>
							</AxFormControl>
						</Controls>
						<Caption>@WAX:BatchNumbersCommittedToSourceLine</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Overview</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>OnHand</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>WHSInventReserve_ItemId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>536870910</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ItemId</DataField>
										<DataSource>WHSInventReserve</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>InventoryDimensionsGrid</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>805306365</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_configId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>configId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_InventSizeId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventSizeId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_InventColorId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventColorId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_InventStyleId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventStyleId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_InventVersionId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventVersionId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_InventSiteId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventSiteId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_InventLocationId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventLocationId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_inventBatchId</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1010580536</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>inventBatchId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_wMSLocationId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>wMSLocationId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_inventSerialId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>inventSerialId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_InventStatusId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventStatusId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_LicensePlateId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>LicensePlateId</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_InventOwnerId_RU</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventOwnerId_RU</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_InventProfileId_RU</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventProfileId_RU</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventoryDimensionsGrid_InventGtdId_RU</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventGtdId_RU</DataField>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
										</Controls>
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataGroup>InventoryDimensions</DataGroup>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>pdsBestBeforeDate</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741820</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>pdsBestBeforeDate</DataMethod>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>pdsExpDate</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1342177275</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>pdsExpDate</DataMethod>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>UnitIdGrid</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>WHSCatchWeight</ConfigurationKey>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>Yes</CacheDataMethod>
										<DataMethod>displayUnitId</DataMethod>
										<DataSource>TmpPdsBatchSelect</DataSource>
										<Label>@SYS190814</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CWUnitIdGrid</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>WHSCatchWeight</ConfigurationKey>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>Yes</CacheDataMethod>
										<DataMethod>displayCWUnitId</DataMethod>
										<DataSource>TmpPdsBatchSelect</DataSource>
										<Label>@PDS3</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>GroupNonCatchWeightGrid</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612730</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>PhisicalInvent</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>536870910</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>physicalInventUnit</DataMethod>
												<DataSource>InventDim</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>ReservPhysicalGrid</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>805306365</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>reservPhysicalUnit</DataMethod>
												<DataSource>WHSInventReserve</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>AvailPhysicalGrid</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>1073741820</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>availPhysicalUnit</DataMethod>
												<DataSource>WHSInventReserve</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>displayPhysAvailUpHierarchy</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1207959547</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>displayPhysAvailUpHierarchy</DataMethod>
												<DataSource>TmpPdsBatchSelect</DataSource>
												<Label>@WAX3575</Label>
												<NoOfDecimals>-1</NoOfDecimals>
												<ShowZero>Yes</ShowZero>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>OrderedGrid</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>1342177275</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>orderedUnit</DataMethod>
												<DataSource>WHSInventReserve</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>ReservOrderedGrid</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>1610612730</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>reservOrderedUnit</DataMethod>
												<DataSource>WHSInventReserve</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>AvailReservationGrid</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048185</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>availReservationUnit</DataMethod>
												<DataSource>WHSInventReserve</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>AvailReservationFlexGrid</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048185</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Visible>No</Visible>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>availReservationFlexUnit</DataMethod>
												<DataSource>TmpPdsBatchSelect</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
										</Controls>
										<BackgroundColor>WindowBackground</BackgroundColor>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>GroupCatchWeightGrid</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>WHSCatchWeight</ConfigurationKey>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>CWPhysicalInvent</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>536870910</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>cwPhysicalInventUnit</DataMethod>
												<DataSource>InventDim</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>CWReservPhysicalGrid</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>805306365</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>cwReservPhysicalUnit</DataMethod>
												<DataSource>WHSInventReserve</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>CWAvailPhysicalGrid</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>1073741820</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>cwAvailPhysicalUnit</DataMethod>
												<DataSource>WHSInventReserve</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>displayCWPhysAvailUpHierarchy</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1207959547</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>displayCWPhysAvailUpHierarchy</DataMethod>
												<DataSource>TmpPdsBatchSelect</DataSource>
												<Label>@WAX3575</Label>
												<NoOfDecimals>-1</NoOfDecimals>
												<ShowZero>Yes</ShowZero>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>CWOrderedGrid</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>1342177275</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>cwOrderedUnit</DataMethod>
												<DataSource>WHSInventReserve</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>CWReservOrderedGrid</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>1610612730</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>cwReservOrderedUnit</DataMethod>
												<DataSource>WHSInventReserve</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>CWAvailReservationGrid</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>1879048185</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>cwAvailReservationUnit</DataMethod>
												<DataSource>WHSInventReserve</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ReserveNow</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1879048185</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>reserveNowQty</DataMethod>
										<DataSource>TmpPdsBatchSelect</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
										<ViewEditMode>Edit</ViewEditMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ReserveNowCW</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>WHSCatchWeight</ConfigurationKey>
										<ElementPosition>1879048185</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>reserveNowCWQty</DataMethod>
										<DataSource>TmpPdsBatchSelect</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
										<ViewEditMode>Edit</ViewEditMode>
									</AxFormControl>
								</Controls>
								<DataSource>TmpPdsBatchSelect</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS9039</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ChildTabPage</Name>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>InventTransOrigin_ReferenceCategory</Name>
										<ElementPosition>477218588</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ReferenceCategory</DataField>
										<DataSource>InventTransOrigin</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InventTransOrigin_ReferenceId</Name>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ReferenceId</DataField>
										<DataSource>InventTransOrigin</DataSource>
										<LookupButton>Never</LookupButton>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InventTrans_PackingSlipId</Name>
										<ElementPosition>954437176</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>PackingSlipId</DataField>
										<DataSource>InventTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InventTrans_InvoiceId</Name>
										<ElementPosition>1193046470</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>InvoiceId</DataField>
										<DataSource>InventTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>InventTrans_StatusReceipt</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>StatusReceipt</DataField>
										<DataSource>InventTrans</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>InventTrans_DateStatus</Name>
										<ElementPosition>1670265058</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>DateStatus</DataField>
										<DataSource>InventTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>InventTrans_Qty</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1908874352</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Qty</DataField>
										<DataSource>InventTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>InventTrans_PdsCWQty</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>WHSCatchWeight</ConfigurationKey>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>PdsCWQty</DataField>
										<DataSource>InventTrans</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>InventTrans</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS30149</Caption>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>