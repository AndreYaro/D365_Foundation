<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>PriceDiscActual</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class PriceDiscActual extends FormRun
{
    PriceParameters         priceParameters;
    PriceDiscTable          actualPrice;
    PriceDiscTable          actualDisc;

    CustTable               selectedCustTable;

    [FormObservable]
    SalesPrice              salesPrice;
    [FormObservable]
    SalesLineDisc           salesLineDisc;
    [FormObservable]
    SalesLinePercent        salesLinePercent;
    [FormObservable]
    PriceUnit               priceUnit;
    [FormObservable]
    PriceMarkup             salesMarkup;
    [FormObservable]
    DiscPct                 percent1;
    [FormObservable]
    DiscPct                 percent2;

    QueryBuildRange         itemId;

    TmpFrmVirtual           tmpFrmVirtual;

    // Margin Alerts
    [FormObservable]
    AmountCur               royalty;
    [FormObservable]
    AmountCur               rebates;
    [FormObservable]
    Percent                 marginPercent;
    [FormObservable]
    MCRMarginPecentStr      mcrMarginPecentStr;
    [FormObservable]
    SymbolFontGlyphName     marginIcon;
    [FormObservable]
    SalesPrice              netSalesPrice;
    [FormObservable]
    SalesPrice              unitSalesPrice;
    [FormObservable]
    AmountCur               totalDiscount;
    [FormObservable]
    AmountCur               pendingPrice;
    InventItemPriceSim      tmpInventItemPriceSim;
    SalesLine               tmpSalesLine;
    InventItemPrice         tmpInventItemPrice;
    [FormObservable]
    CostPrice               mcrCostPrice;
    Map                     mcrMarginCalcMap;
    TransDate               transDateValue;
    private InventDim       formInventDim;

}
]]></Source>
			</Method>
			<Method>
				<Name>calcMarginPercentAndNetSalesPrice</Name>
				<Source><![CDATA[
    private void calcMarginPercentAndNetSalesPrice()
    {
        if (tmpInventItemPriceSim.PriceUnit != 0)
        {
            pendingPrice = tmpInventItemPriceSim.Price / tmpInventItemPriceSim.PriceUnit;
            pendingPrice = CurrencyExchangeHelper::price(pendingPrice, CompanyInfoHelper::standardCurrency());
        }

        if (pendingPrice)
        {
            element.calcMarginPercentBasedOnPendingPrice();
        }
        else
        {
            element.calcMarginPercentBasedOnCostPrice();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMarginPercentBasedOnCostPrice</Name>
				<Source><![CDATA[
    private void calcMarginPercentBasedOnCostPrice()
    {
        CostPrice costPriceForMargin = mcrCostPrice;

        if (PriceDiscActualConvertCostPriceFlight::instance().isEnabled())
        {
            UnitOfMeasureSymbol salesUnitId  = inventTable.salesUnitId();
            UnitOfMeasureSymbol inventUnitId = inventTable.inventUnitId();

            if (inventUnitId != salesUnitId)
            {
                // convert price from inventory to sales (the opposite logic than for quantity)
                costPriceForMargin =  EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(inventTable.ItemId,
                                                                                      formInventDim.inventDimId,
                                                                                      mcrCostPrice,
                                                                                      salesUnitId,
                                                                                      inventUnitId,
                                                                                      NoYes::No,
                                                                                      NoYes::No);
            }
        }

        marginPercent      = MCRMarginAlert::calcMarginPercent(netSalesPrice, costPriceForMargin);
        mcrMarginPecentStr = MCRMarginAlert::marginPercentToMarginPercentStr(netSalesPrice, marginPercent);
        netSalesPrice      = netSalesPrice - costPriceForMargin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMarginPercentBasedOnPendingPrice</Name>
				<Source><![CDATA[
    private void calcMarginPercentBasedOnPendingPrice()
    {
        mcrProfitability_PendingPrice.visible(true);
        marginPercent      = MCRMarginAlert::calcMarginPercent(netSalesPrice, pendingPrice);
        mcrMarginPecentStr = MCRMarginAlert::marginPercentToMarginPercentStr(netSalesPrice, marginPercent);

        if (tmpInventItemPriceSim.PriceUnit != 0)
        {
            netSalesPrice = netSalesPrice - tmpInventItemPriceSim.Price / tmpInventItemPriceSim.PriceUnit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarginSalesLineBuffer</Name>
				<Source><![CDATA[
    private SalesLine createMarginSalesLineBuffer(InventDimId _inventDimId)
    {
        SalesLine salesLineMargin;

        // Fill a sales line buffer from datasources and trade agreement search
        // From item
        salesLineMargin.ItemId          = inventTable.ItemId;
        salesLineMargin.InventDimId     = _inventDimId;
        salesLineMargin.QtyOrdered      = inventQty.realValue();
        salesLineMargin.SalesQty        = inventQty.realValue();

        if (PriceDiscActualConvertCostPriceFlight::instance().isEnabled())
        {
            salesLineMargin.SalesUnit = inventTable.salesUnitId();
        }
        else
        {
            salesLineMargin.SalesUnit = inventTable.inventUnitId();
        }

        salesLineMargin.ShippingDateRequested = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        // From customer
        salesLineMargin.CurrencyCode    = selectedCustTable.Currency;
        salesLineMargin.CustAccount     = selectedCustTable.AccountNum;

        // Pricing fields
        salesLineMargin.LineAmount      = inventTable_ds.lineAmount(inventTable);
        salesLineMargin.LineDisc        = salesLineDisc;
        salesLineMargin.LinePercent     = salesLinePercent;
        salesLineMargin.PriceUnit       = priceUnit;
        salesLineMargin.SalesMarkup     = salesMarkup;
        salesLineMargin.SalesPrice      = salesPrice;

        if (tmpSalesLine
            && ! tmpSalesLine.mcrSalesLinePriceOverride().PriceOverride)
        {
            salesLineMargin.MultiLnDisc    = tmpSalesLine.MultiLnDisc;
            salesLineMargin.MultiLnPercent = tmpSalesLine.MultiLnPercent;
        }

        return salesLineMargin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPriceAgreement</Name>
				<Source><![CDATA[
    void findPriceAgreement()
    {
        InventDim inventDim;

        if (ShowProductVariants.value() != 0)
        {
            inventDim = InventDim::find(InventDimDimCombination.InventDimId);
        }

        inventDim = this.getInventDim(inventDim);

        if (PriceDiscActualConvertCostPriceFlight::instance().isEnabled())
        {
            formInventDim = inventDim;
        }

        transDateValue = TransDate.valueStr() != '' ? TransDate.dateValue() : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        [salesPrice,
        salesMarkup,
        priceUnit,
        salesLineDisc,
        salesLinePercent,
        percent1,
        percent2,
        actualPrice,
        actualDisc] = PriceDisc::actualSalesPriceDisc(selectedCustTable, inventTable, inventQty.realValue(), transDateValue, inventDim);

        if (tmpSalesLine
            && tmpSalesLine.mcrSalesLinePriceOverride().PriceOverride)
        {
            salesPrice          = tmpSalesLine.SalesPrice;
            salesLineDisc       = tmpSalesLine.LineDisc;
            salesLinePercent    = tmpSalesLine.LinePercent;
        }

        // Margin Alerts
        element.mcrCalcMarginAlert(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDim</Name>
				<Source><![CDATA[
    private InventDim getInventDim(InventDim _inventDim)
    {
        InventDimId inventDimId;

        if (tmpSalesLine)
        {
            inventDimId = tmpSalesLine.InventDimId;
        }
        else if (tmpInventItemPriceSim)
        {
            inventDimId = tmpInventItemPriceSim.InventDimId;
        }
        else if (tmpInventItemPrice)
        {
            inventDimId = tmpInventItemPrice.InventDimId;
        }
        else if (_inventDim)
        {
            inventDimId = MCRMarginAlert_Sales::updateInventDimFromCustomer(_inventDim, selectedCustTable.AccountNum).inventDimId;
        }
        else
        {
            inventDimId = MCRMarginAlert_Sales::updateInventDimFromCustomer(InventDim::findOrCreateBlank(), selectedCustTable.AccountNum).InventDimId;
        }

        return InventDim::find(inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarginSalesParms</Name>
				<Source><![CDATA[
    private mcrMarginSalesParms getMarginSalesParms(InventDimId _inventDimId)
    {
        MCRMarginSalesParms     mcrMarginSalesParms;
        container               mcrMarginCalcMapKey;
        SalesLine               salesLineMargin;

        mcrMarginCalcMapKey = [InventTable.ItemId, _inventDimId, selectedCustTable.AccountNum, inventQty.realValue(), transDateValue];
        if (mcrMarginCalcMap.exists(mcrMarginCalcMapKey))
        {
            mcrMarginSalesParms = mcrMarginCalcMap.lookup(mcrMarginCalcMapKey);
        }
        else
        {
            salesLineMargin = element.createMarginSalesLineBuffer(_inventDimId);

            // Calculate margin
            mcrMarginSalesParms = MCRMarginAlert_Simulation::calcMarginServer(salesLineMargin, transDateValue);
            mcrMarginCalcMap.insert(mcrMarginCalcMapKey, mcrMarginSalesParms);
        }

        return mcrMarginSalesParms;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustAccount</Name>
				<Source><![CDATA[
    private void setCustAccount(CustAccount _custAccount)
    {
        selectedCustTable = custTable::find(_custAccount);
        AccountNumFilter.text(selectedCustTable.AccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void  init()
    {
        super();

        itemId = inventTable_ds.query().dataSourceTable(tableNum(InventTable)).addRange(fieldNum(InventTable, ItemId));

        SalesParameters salesParameters = SalesParameters::find();
        mcrProfitability.visible(salesParameters.MCREnableMarginAlert);
        mcrMarginPercentGroup.visible(salesParameters.MCREnableMarginAlert);

        if (salesParameters.MCREnableMarginAlert)
        {
            mcrMarginCalcMap = new Map(Types::Container, Types::Class);
        }

        if (element.args().caller())
        {
            if(!this.initFromArgs())
            {
                PriceDiscICallerParameters caller = element.args().caller() as PriceDiscICallerParameters;
                if (caller)
                {
                    TransDate.dateValue(caller.parmWorkingDate());
                    InventQty.realValue(caller.parmInventQty());
                    this.setCustAccount(caller.parmCustAccount());

                    this.setItemId(caller.parmItemId());
                }
            }

            element.findAndRefreshPriceAgreements();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form from the arguments.
    /// </summary>
    /// <returns>true if initialization has been executed based on the passed record; otherwise, false.</returns>
    protected boolean initFromArgs()
    {
        boolean handled = true;

        switch (element.args().dataset())
        {
            case tableNum(AgreementLine):
                // If we called from Sales Agreement form, proper customer should be picked up according to
                // CustAccount field of the SalesAgreementHeader instance, corresponded to the active agreement line.
                AgreementLine agreementLine = element.args().record();
                this.setCustAccount(SalesAgreementHeader::find(agreementLine.Agreement).CustAccount);
                AccountNumFilter.enabled(false);
                this.updateDesignItemIdFilter(agreementLine.ItemId);
                break;
            case tableNum(SalesLine):
                tmpSalesLine = element.args().record();
                this.setCustAccount(tmpSalesLine.salesTable().CustAccount);
                AccountNumFilter.enabled(false);
                this.updateDesignItemIdFilter(tmpSalesLine.ItemId);
                break;
            case tableNum(SalesAgreementHeader):
                SalesAgreementHeader salesAgreementHeader = element.args().record();
                this.setCustAccount(salesAgreementHeader.CustAccount);
                AccountNumFilter.enabled(false);
                break;
            case tableNum(SalesTable):
                SalesTable salesTable = element.args().record();
                this.setCustAccount(salesTable.CustAccount);
                AccountNumFilter.enabled(false);
                break;
            case tableNum(SalesQuotationTable):
                SalesQuotationTable salesQuotationTable = element.args().record();
                if (SalesQuotationTable.CustAccount)
                {
                    this.setCustAccount(SalesQuotationTable.CustAccount);
                    AccountNumFilter.enabled(false);
                }
                break;
            case tableNum(InventItemPrice):
                tmpInventItemPrice = element.args().record();
                this.updateDesignItemIdFilter(tmpInventItemPrice.ItemId);
                break;
            case tableNum(InventItemPriceSim):
                tmpInventItemPriceSim = element.args().record();
                break;
            case tableNum(InventTable):
                InventTable inventTableLocal = element.args().record();
                this.updateDesignItemIdFilter(inventTableLocal.ItemId);
                break;
            default:
                handled = false;
        }

        return handled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemId</Name>
				<Source><![CDATA[
    private void setItemId(ItemId _itemId)
    {
        itemId.value(queryValue(_itemId));
        InventTable_DS.executeQuery();
        ItemIdFilter.text(_itemId);
        this.updateDesignShowVariants(_itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignItemIdFilter</Name>
				<Source><![CDATA[
    private void updateDesignItemIdFilter(ItemId _itemId)
    {
        this.setItemId(_itemId);
        ItemIdFilter.enabled(false);

        inventQty.realValue(inventTable.salesStandardQty(inventDimCombination.InventDimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCalcMarginAlert</Name>
				<Source><![CDATA[
    void mcrCalcMarginAlert(InventDim _inventDim)
    {
        InventDimId             inventDimId;
        MCRMarginSalesParms     mcrMarginSalesParms;

        if (SalesParameters::find().MCREnableMarginAlert)
        {
            mcrMarginSalesParms = element.getMarginSalesParms(_inventDim.inventDimId);

            // Unit sales price
            unitSalesPrice = ExchangeRateHelper::curPrice2CurPrice(salesPrice, selectedCustTable.Currency, CompanyInfoHelper::standardCurrency());
            if (priceUnit)
            {
                unitSalesPrice = unitSalesPrice / priceUnit;
            }

            royalty         = mcrMarginSalesParms.parmRoyaltyAmount();
            rebates         = mcrMarginSalesParms.parmRebateAmount();
            netSalesPrice   = mcrMarginSalesParms.parmNetSalesPrice();
            totalDiscount   = mcrMarginSalesParms.parmTotalDiscount();
            mcrCostPrice    = mcrMarginSalesParms.parmCostPrice();

            element.calcMarginPercentAndNetSalesPrice();

            marginIcon = MCRMarginAlert::getMarginSymbol(marginPercent);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignVariant</Name>
				<Source><![CDATA[
    private void updateDesignVariant()
    {
        VariantGrid.visible(ShowProductVariants.value() != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAndRefreshPriceAgreements</Name>
				<Source><![CDATA[
    private void findAndRefreshPriceAgreements()
    {
        element.findPriceAgreement();

        lineDiscSales.enabled(element.hasTradeAgreementLineDisc());
        priceSales.enabled(element.hasTradeAgreementSalesPrice());
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTradeAgreementSalesPrice</Name>
				<Source><![CDATA[
    private boolean hasTradeAgreementSalesPrice()
    {
        if (ShowProductVariants.value() == 0)
        {
            return PriceDiscTable::existAccountItemDateRelation(PriceType::PriceSales,
                                                         selectedCustTable.AccountNum,
                                                         selectedCustTable.PriceGroup,
                                                         inventTable.ItemId,
                                                         '',
                                                         transDateValue,
                                                         InventQty.realValue());
        }
        return PriceDiscTable::existAccountItemDateRelation(PriceType::PriceSales,
                                                         selectedCustTable.AccountNum,
                                                         selectedCustTable.PriceGroup,
                                                         inventTable.ItemId,
                                                         '',
                                                         transDateValue,
                                                         InventQty.realValue(),
                                                         inventDimDimCombination);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTradeAgreementLineDisc</Name>
				<Source><![CDATA[
    private boolean hasTradeAgreementLineDisc()
    {
        if (ShowProductVariants.value() == 0)
        {
            return PriceDiscTable::existAccountItemDateRelation(PriceType::LineDiscSales,
                                                         selectedCustTable.AccountNum,
                                                         selectedCustTable.LineDisc,
                                                         inventTable.ItemId,
                                                         InventTableModule::find(inventTable.ItemId, ModuleInventPurchSales::Sales).LineDisc,
                                                         transDateValue,
                                                         InventQty.realValue());
        }
        return PriceDiscTable::existAccountItemDateRelation(PriceType::LineDiscSales,
                                                         selectedCustTable.AccountNum,
                                                         selectedCustTable.LineDisc,
                                                         inventTable.ItemId,
                                                         InventTableModule::find(inventTable.ItemId, ModuleInventPurchSales::Sales).LineDisc,
                                                         transDateValue,
                                                         InventQty.realValue(),
                                                         inventDimDimCombination);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignShowVariants</Name>
				<Source><![CDATA[
    private void updateDesignShowVariants(ItemId _itemId)
    {
        if (EcoResProduct::find(inventTable::itemProduct(_itemId)).isProductMaster())
        {
            ShowProductVariants.enabled(true);
        }
        else
        {
            ShowProductVariants.enabled(false);
        }
        ShowProductVariants.value(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currency</Name>
				<Source><![CDATA[
    display CurrencyCode currency()
    {
        return selectedCustTable.Currency;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>InventTable</Name>
				<Methods>
					<Method>
						<Name>mcrCostPrice</Name>
						<Source><![CDATA[
        display CostPrice  mcrCostPrice()
        {
            return mcrCostPrice;
        }

]]></Source>
					</Method>
					<Method>
						<Name>mcrMarginPecentStr</Name>
						<Source><![CDATA[
        display MCRMarginPecentStr mcrMarginPecentStr()
        {
            return mcrMarginPecentStr;
        }

]]></Source>
					</Method>
					<Method>
						<Name>mcrProfitpendingPrice</Name>
						<Source><![CDATA[
        display CostPrice mcrProfitpendingPrice()
        {
            return pendingPrice;
        }

]]></Source>
					</Method>
					<Method>
						<Name>mcrUnitSalesPrice</Name>
						<Source><![CDATA[
        display SalesPrice mcrUnitSalesPrice()
        {
            return unitSalesPrice;
        }

]]></Source>
					</Method>
					<Method>
						<Name>mcrTotalDiscount</Name>
						<Source><![CDATA[
        display AmountCur mcrTotalDiscount()
        {
            return totalDiscount;
        }

]]></Source>
					</Method>
					<Method>
						<Name>mcrProfitRebate</Name>
						<Source><![CDATA[
        display AmountCur mcrProfitRebate()
        {
            return rebates;
        }

]]></Source>
					</Method>
					<Method>
						<Name>mcrProfitRoyalty</Name>
						<Source><![CDATA[
        display MCRRoyaltyAmount mcrProfitRoyalty()
        {
            return royalty;
        }

]]></Source>
					</Method>
					<Method>
						<Name>mcrProfitNetSalesPrice</Name>
						<Source><![CDATA[
        display SalesPrice mcrProfitNetSalesPrice()
        {
            return netSalesPrice;
        }

]]></Source>
					</Method>
					<Method>
						<Name>mcrProfitIcon</Name>
						<Source><![CDATA[
        display container mcrProfitIcon()
        {
            return ImageReference::constructForSymbol(marginIcon).pack();
        }

]]></Source>
					</Method>
					<Method>
						<Name>mcrProfitDiscount</Name>
						<Source><![CDATA[
        display SalesPrice mcrProfitDiscount()
        {
            return totalDiscount;
        }

]]></Source>
					</Method>
					<Method>
						<Name>mcrMarginPercent</Name>
						<Source><![CDATA[
        display Percent mcrMarginPercent()
        {
            return marginPercent;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
            inventTable_ds.cacheAddMethod(tableMethodStr(InventTable, itemDescriptionOrName));
            inventTable_ds.cacheAddMethod(tableMethodStr(InventTable, itemIdAndDescription));
            inventTable_ds.cacheAddMethod(tableMethodStr(InventTable, salesStandardQty));
            inventTable_ds.cacheAddMethod(tableMethodStr(InventTable, salesLineDisc));
            inventTable_ds.cacheAddMethod(tableMethodStr(InventTable, defaultProductName));
        }

]]></Source>
					</Method>
					<Method>
						<Name>discAmount</Name>
						<Source><![CDATA[
        display SalesLineDisc discAmount()
        {
            return salesLineDisc;
        }

]]></Source>
					</Method>
					<Method>
						<Name>salesMarkup</Name>
						<Source><![CDATA[
        display PriceMarkup  salesMarkup(InventTable  _inventTable)
        {
            return salesMarkup;
        }

]]></Source>
					</Method>
					<Method>
						<Name>unitId</Name>
						<Source><![CDATA[
        display SalesUnit  unitId(InventTable  _inventTable)
        {
            if (actualPrice.RecId)
                return actualPrice.UnitId;
            else
                return inventTable.salesUnitId();
        }

]]></Source>
					</Method>
					<Method>
						<Name>priceUnit</Name>
						<Source><![CDATA[
        display PriceUnit  priceUnit(InventTable  _inventTable)
        {
            return priceUnit;
        }

]]></Source>
					</Method>
					<Method>
						<Name>percent2</Name>
						<Source><![CDATA[
        display DiscPct  percent2(InventTable  _inventTable)
        {
            return percent2;
        }

]]></Source>
					</Method>
					<Method>
						<Name>percent1</Name>
						<Source><![CDATA[
        display DiscPct  percent1(InventTable  _inventTable)
        {
            return percent1;
        }

]]></Source>
					</Method>
					<Method>
						<Name>price</Name>
						<Source><![CDATA[
        display SalesPrice  price(InventTable  _inventTable)
        {
            return salesPrice;
        }

]]></Source>
					</Method>
					<Method>
						<Name>purchUnit</Name>
						<Source><![CDATA[
        display PurchUnit  purchUnit(InventTable  _inventTable)
        {
            return _inventTable.purchUnitId();
        }

]]></Source>
					</Method>
					<Method>
						<Name>salesUnit</Name>
						<Source><![CDATA[
        display SalesUnit  salesUnit(InventTable  _inventTable)
        {
            return _inventTable.salesUnitId();
        }

]]></Source>
					</Method>
					<Method>
						<Name>salesPrice</Name>
						<Source><![CDATA[
        display SalesPrice  salesPrice(InventTable  _inventTable)
        {
            return _inventTable.salesPcsPrice();
        }

]]></Source>
					</Method>
					<Method>
						<Name>purchPrice</Name>
						<Source><![CDATA[
        display PurchPrice  purchPrice(InventTable  _inventTable)
        {
            return _inventTable.purchPcsPrice();
        }

]]></Source>
					</Method>
					<Method>
						<Name>lineAmount</Name>
						<Source><![CDATA[
        display AmountCur lineAmount(InventTable _inventTable)
        {
            return PriceDisc::price2Amount(salesPrice,
                                           priceUnit,
                                           salesLineDisc,
                                           inventQty.realValue(),
                                           inventQty.realValue(),
                                           salesMarkup,
                                           salesLinePercent,
                                           selectedCustTable.Currency,
                                           0);
        }

]]></Source>
					</Method>
					<Method>
						<Name>contributionMargin</Name>
						<Source><![CDATA[
        display SalesContributionMargin contributionMargin(InventTable _inventTable)
        {
            SalesContributionMargin salesContributionMargin;
            CostPrice               costPcsPriceForContributionMargin;
            UnitOfMeasureSymbol     salesUnitId;
            UnitOfMeasureSymbol     inventUnitId;

            salesContributionMargin = inventTable_ds.lineAmount(_inventTable);

            if (inventQty.realValue())
            {
                costPcsPriceForContributionMargin = inventTable.costPcsPrice();

                if (PriceDiscActualConvertCostPriceFlight::instance().isEnabled())
                {
                    salesUnitId  = inventTable.salesUnitId();
                    inventUnitId = inventTable.inventUnitId();
                    
                    if (inventUnitId != salesUnitId)
                    {
                        // convert price from inventory to sales (the opposite logic than for quantity)
                        costPcsPriceForContributionMargin =  EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(inventTable.ItemId,
                                                                                      formInventDim.inventDimId,
                                                                                      mcrCostPrice,
                                                                                      salesUnitId,
                                                                                      inventUnitId,
                                                                                      NoYes::No,
                                                                                      NoYes::No);       
                    }
                }

                salesContributionMargin -= CurrencyExchangeHelper::curAmount(inventQty.realValue() * costPcsPriceForContributionMargin, selectedCustTable.Currency);
            }

            return salesContributionMargin;
        }

]]></Source>
					</Method>
					<Method>
						<Name>contributionRatio</Name>
						<Source><![CDATA[
        display SalesContributionRatio  contributionRatio(InventTable _inventTable)
        {
            return percent(inventTable_ds.contributionMargin(_inventTable), inventTable_ds.lineAmount(_inventTable));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>InventDimCombination</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            if (ShowProductVariants.value() != 0)
            {
                element.findAndRefreshPriceAgreements();
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>AccountNumFilter</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.findAndRefreshPriceAgreements();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                CustTable localCustTable = CustTable::find(this.valueStr());
                if (localCustTable.RecId)
                {
                    selectedCustTable = localCustTable;
                }
                else
                {
                    SysDictTable custTableDict = SysDictTable::newTableId(tablenum(CustTable));
                    SysDictField accountNumDict = new SysDictField(tablenum(CustTable), fieldnum(CustTable, AccountNum));
                    ret = checkFailed(strfmt("@SCM:TableFieldValidation", this.valueStr(), accountNumDict.label(), custTableDict.label()));
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ItemIdFilter</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            itemId.value(queryValue(this.valueStr()));
            InventTable_DS.executeQuery();
            inventQty.realValue(inventTable.salesStandardQty());

            element.findAndRefreshPriceAgreements();

            element.updateDesignShowVariants(inventTable.ItemId);

            element.updateDesignVariant();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            InventTable::lookupItem(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>InventQty</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        boolean  modified()
        {
            boolean     ret;
            InventQty   tmpInventQty;

            ret = super();

            tmpInventQty = InventTable::calculateOrderQuantity(inventTable.inventItemSalesSetup(InventDimCombination.InventDimId),
															   InventDimCombination.InventDimId,
															   this.realValue(),
															   inventTable.salesUnitId());

            this.realValue(tmpInventQty);

            element.findAndRefreshPriceAgreements();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TransDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                element.findAndRefreshPriceAgreements();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ShowProductVariants</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            element.findAndRefreshPriceAgreements();

            element.updateDesignVariant();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>InventTable</Name>
			<Table>InventTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ABCContributionMargin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ABCRevenue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ABCTieUp</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ABCValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AlcoholManufacturerId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AlcoholProductionTypeId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AlcoholStrength_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AltConfigId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AltInventColorId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AltInventSizeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AltInventStyleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AltInventVersionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AltItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApproxTaxValue_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssetGroupId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssetId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoReportFinished</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BatchMergeDateCalculationMethod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BatchNumGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BOMCalcGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BOMLevel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BOMManualReceipt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BOMUnitId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommissionGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostModel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustomsExportTariffCodeTable_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustomsImportTariffCodeTable_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DAXIntegrationKey</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Density</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Depth</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EPCManager</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExceptionCode_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExciseTariffCodes_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EximProductGroupTable_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FiscalLIFOAvoidCalc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FiscalLIFONormalValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FiscalLIFONormalValueCalc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ForecastDMPInclude</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>grossDepth</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>grossHeight</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>grossWidth</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Height</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ICMSOnService_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Intracode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntrastatExclude</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntrastatProcId_CZ</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntraUnit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventFiscalLIFOGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventProductType_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemBuyerGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemDimCostPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemPriceToleranceGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemTaggingLevel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkupCode_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchingPolicy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRPackedExtensions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MinimumPalletQuantity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NameAlias</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NetWeight</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NGPCodesTable_FR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NRTaxGroup_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrigCountryRegionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrigCountyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrigStateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackagingGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Packing_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PalletTagging</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PDSBaseAttributeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsBestBefore</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWWMSMinimumPalletQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWWMSQtyPerLayer</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWWMSStandardPalletQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsFreightAllocationGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsItemRebateGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PDSPotencyAttribRecording</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsShelfAdvice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsShelfLife</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PDSTargetFactor</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsVendorCheckItem</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Phantom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PKWiUCode_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PmfPlanningItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PmfProductType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PmfYieldPct</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryVendorId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProdFlushingPrincip</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProdGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProdPoolId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Product</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>projCategoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PropertyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchModel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>qtyPerLayer</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReqGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SADRateCode_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesContributionRatio</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesModel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesPercentMarkup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesPriceModelBasic</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ScrapConst</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ScrapVar</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SerialNumGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ServiceCodeTable_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SkipIntraCompanySync_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>sortCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StandardConfigId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StandardInventColorId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StandardInventSizeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StandardInventStyleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StandardInventVersionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>standardPalletQuantity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StatisticsFactor</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaraWeight</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxationOrigin_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxFiscalClassification_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxPackagingQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxServiceCode_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UnitVolume</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseAltItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Width</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WMSArrivalHandlingTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WMSPalletTypeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WMSPickingQtyTime</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventDimCombination</Name>
			<Table>InventDimCombination</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DistinctProductVariant</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailVariantId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>InventTable</JoinSource>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventDimDimCombination</Name>
			<Table>InventDim</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>configId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventBatchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventColorId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventGtdId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventOwnerId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventProfileId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventSerialId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSiteId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSizeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStyleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventVersionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LicensePlateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SHA1Hash</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSPalletId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>InventDimCombination</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<AllowFormCompanyChange xmlns="">Yes</AllowFormCompanyChange>
		<Caption xmlns="">@SYS139087</Caption>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">SimpleList</Style>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>FormActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>LineDiscSales</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Enabled>No</Enabled>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>PriceDiscTable_LineDiscSales</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>PriceSales</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Enabled>No</Enabled>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>PriceDiscTable_PriceSales</MenuItemName>
							</AxFormControl>
						</Controls>
						<Caption>@SYS981</Caption>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FiltersGroup</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>VariantGrid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>AccountNumFilter</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>CustAccount</ExtendedDataType>
						<Mandatory>Yes</Mandatory>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>ItemIdFilter</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>ItemId</ExtendedDataType>
						<Mandatory>Yes</Mandatory>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>InventQty</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>858993458</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>InventQty</ExtendedDataType>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>TransDate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Date</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>TransDate</ExtendedDataType>
						<Label>@SYS80056</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>ShowProductVariants</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Enabled>No</Enabled>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS191416</Label>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>VariantGrid</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Type>Grid</Type>
				<Visible>No</Visible>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ProductDimensions</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ProductDimensions_configId</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>configId</DataField>
								<DataSource>InventDimDimCombination</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ProductDimensions_InventSizeId</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>InventSizeId</DataField>
								<DataSource>InventDimDimCombination</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ProductDimensions_InventColorId</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>InventColorId</DataField>
								<DataSource>InventDimDimCombination</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ProductDimensions_InventStyleId</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>InventStyleId</DataField>
								<DataSource>InventDimDimCombination</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ProductDimensions_InventVersionId</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>InventVersionId</DataField>
								<DataSource>InventDimDimCombination</DataSource>
							</AxFormControl>
						</Controls>
						<DataGroup>ProductDimensions</DataGroup>
						<DataSource>InventDimDimCombination</DataSource>
					</AxFormControl>
				</Controls>
				<DataSource>InventDimCombination</DataSource>
				<Style>Tabular</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CalculationResultsGroup</Name>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Calculation</Name>
						<ElementPosition>417566262</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<PatternVersion>UX7 1.0</PatternVersion>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>LineAmount</Name>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>lineAmount</DataMethod>
								<DataSource>InventTable</DataSource>
								<Label>@SYS6901</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Currency</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>currency</DataMethod>
								<ExtendedDataType>CurrencyCode</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>ContributionRatio</Name>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>contributionRatio</DataMethod>
								<DataSource>InventTable</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
						</Controls>
						<Columns>3</Columns>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>PricesAndDiscounts</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>PriceAndDiscountTradeAgreements</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Price</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>price</DataMethod>
										<DataSource>InventTable</DataSource>
										<Label>@SYS11865</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>PriceUnit</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>priceUnit</DataMethod>
										<DataSource>InventTable</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>UnitId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>unitId</DataMethod>
										<DataSource>InventTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>DiscAmount</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>discAmount</DataMethod>
										<DataSource>InventTable</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Percent1</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>percent1</DataMethod>
										<DataSource>InventTable</DataSource>
										<Label>@SYS901</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Percent2</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>percent2</DataMethod>
										<DataSource>InventTable</DataSource>
										<Label>@SYS902</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Columns>2</Columns>
								<Caption>@SCM:PriceDiscFromAgreementOverview</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SalesPrices</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SalesPrice</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>salesPrice</DataMethod>
										<DataSource>InventTable</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SalesUnit</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>salesUnit</DataMethod>
										<DataSource>InventTable</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@SYS301586</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>PurchPrices</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>PurchPrice</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>purchPrice</DataMethod>
										<DataSource>InventTable</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PurchUnit</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>purchUnit</DataMethod>
										<DataSource>InventTable</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@SCM:PriceDiscProductCost</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>MCRProfitability</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ConfigurationKey>TradeMarginAlert</ConfigurationKey>
								<ElementPosition>1677721597</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>MCRProfitability_price</Name>
										<ConfigurationKey>TradeMarginAlert</ConfigurationKey>
										<ElementPosition>390451572</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Height>0</Height>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>MCRUnitSalesPrice</DataMethod>
										<DataSource>InventTable</DataSource>
										<Label>@SCM:PriceDiscActualUnitSalesPriceLabel</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>MCRProfitability_discAmount</Name>
										<ConfigurationKey>TradeMarginAlert</ConfigurationKey>
										<ElementPosition>585677358</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Height>0</Height>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>MCRTotalDiscount</DataMethod>
										<DataSource>InventTable</DataSource>
										<Label>@SYS11829</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>MCRProfitability_Rebate</Name>
										<ConfigurationKey>TradeMarginAlert</ConfigurationKey>
										<ElementPosition>780903144</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Height>0</Height>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>MCRProfitRebate</DataMethod>
										<DataSource>InventTable</DataSource>
										<Label>@MCR24921</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>MCRProfitability_Royalty</Name>
										<ConfigurationKey>TradeMarginAlert</ConfigurationKey>
										<ElementPosition>976128930</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Height>0</Height>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>MCRProfitRoyalty</DataMethod>
										<DataSource>InventTable</DataSource>
										<Label>@MCR33559</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>costPrice</Name>
										<ElementPosition>1366580502</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>mcrCostPrice</DataMethod>
										<DataSource>InventTable</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>MCRProfitability_PendingPrice</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1561806288</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Height>0</Height>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<Width>0</Width>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>MCRProfitpendingPrice</DataMethod>
										<DataSource>InventTable</DataSource>
										<Label>@MCR40035</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>MCRProfitability_NetSalesPrice</Name>
										<ConfigurationKey>TradeMarginAlert</ConfigurationKey>
										<ElementPosition>1757032074</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Height>0</Height>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>MCRProfitNetSalesPrice</DataMethod>
										<DataSource>InventTable</DataSource>
										<Label>@MCR37283</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>MCRMarginPercentGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>TradeMarginAlert</ConfigurationKey>
										<ElementPosition>1952257860</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>MCRMarginPercentStr</Name>
												<ConfigurationKey>TradeMarginAlert</ConfigurationKey>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>mcrMarginPecentStr</DataMethod>
												<DataSource>InventTable</DataSource>
												<Label>@MCR4410233</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormImageControl">
												<Name>MCRMarginAlertMain_Icon</Name>
												<ConfigurationKey>TradeMarginAlert</ConfigurationKey>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Height>30</Height>
												<HeightMode>Manual</HeightMode>
												<Type>Image</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>30</Width>
												<WidthMode>Manual</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>MCRProfitIcon</DataMethod>
												<DataSource>InventTable</DataSource>
												<Label>@SCM:PriceDiscActual_MCRMarginAlertMain_Icon</Label>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>HorizontalLeft</ArrangeMethod>
										<ColumnsMode>Fill</ColumnsMode>
									</AxFormControl>
								</Controls>
								<Columns>2</Columns>
								<Caption>@MCR36416</Caption>
							</AxFormControl>
						</Controls>
						<Columns>4</Columns>
					</AxFormControl>
				</Controls>
				<Caption>@SCM:BestPriceFound</Caption>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>