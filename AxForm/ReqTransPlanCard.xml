<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ReqTransPlanCard</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ReqTransPlanCard extends FormRun  implements SysIFilterProvider
{
    private const str EmptyImage = '';

}
]]></Source>
			</Method>
			<Method>
				<Name>parmFilter</Name>
				<Source><![CDATA[
    public SysIFilter parmFilter()
    {
        return this.parmSourceFilter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeEvent</Name>
				<Source><![CDATA[
    public SysFilterChangeEvent parmChangeEvent()
    {
        return this.parmFilterProvider().parmChangeEvent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        ReqParameters::checkPlanningProcessesAreEnabled();

        super();

        Heading.text("@SCM:MasterPlanningWorkspaceTitle");
        SubHeading.text("@SCM:ReqProcessStatusLastRun");

        if (this.args() && this.args().caller() is SysIFilterProvider)
        {
            this.updateCard();
            this.ensureParentEventHandlers(this.args().caller());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleRefresh</Name>
				<Source><![CDATA[
    public void handleRefresh()
    {
        this.updateCard();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureParentEventHandlers</Name>
				<Source><![CDATA[
    private void ensureParentEventHandlers(FormRun _parentForm)
    {
        if (this.isPartLocal() && _parentForm)
        {
            _parentForm.dataHelper().Refreshed += eventhandler(this.handleRefresh);
        }

        this.parmFilterProvider().parmChangeEvent().filterChanged += eventhandler(this.handleRefresh);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCard</Name>
				<Source><![CDATA[
    private void updateCard()
    {
        ReqPlanId planId = SysFilterValueHelper::getFirstValueRecordFromFilter(this.parmSourceFilter());

        Status.text('');
        LastRunDate.dateTimeValue(DateTimeUtil::minValue());

        if (ReqPlan::exist(planId))
        {
            ActionPane.visible(true);

            if (ReqPlanManager::isLocked(planId))
            {
                Status.text("@SYS39781");
                ButtonGroup.visible(false);
                ButtonGroupRunning.visible(true);
            }
            else
            {
                Status.text("@SYS39782");
                ButtonGroup.visible(true);
                ButtonGroupRunning.visible(false);
                this.updateRunStatus(planId);
            }
        }
        else
        {
            ActionPane.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRunStatus</Name>
				<Source><![CDATA[
    private void updateRunStatus(ReqPlanId _planId)
    {
        ReqLog reqLog;

        select firstonly EndDateTime, Log  from reqLog
                    order by reqLog.EndDateTime desc
                    where reqLog.ReqPlanId == _planId;

        if (reqLog)
        {
            var lastRunTime = DateTimeUtil::applyTimeZoneOffset(reqLog.EndDateTime, DateTimeUtil::getUserPreferredTimeZone());

            LastRunDate.dateTimeValue(lastRunTime);

            boolean hasWarning;
            boolean hasError;

            var logContainer = reqLog.Log;
            int logContainerLength = conLen(logContainer);

            for (var i = 1; i <= logContainerLength; ++i)
            {
                var logLine = conPeek(logContainer, i);
                if (conLen(logLine) == 2)
                {
                    Exception exception = conPeek(logLine, 1);

                    if (exception == Exception::Warning)
                    {
                        hasWarning = true;
                    }
                    else if (exception == Exception::Error)
                    {
                        hasError = true;
                        break;
                    }
                }
            }

            this.updateIndicatorImage(hasError, hasWarning);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIndicatorImage</Name>
				<Source><![CDATA[
    protected void updateIndicatorImage(boolean hasError, boolean hasWarning)
    {
        if (hasError)
        {
            IndicatorImage.normalImage(ImageReferenceSymbol::Error);
        }
        else if (hasWarning)
        {
            IndicatorImage.normalImage(ImageReferenceSymbol::Warning);
        }
        else
        {
            IndicatorImage.normalImage(EmptyImage);
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="" />
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Pattern xmlns="">Custom</Pattern>
		<Style xmlns="">FormPart</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>MasterPlanning</Name>
				<ExtendedStyle>BusinessCard</ExtendedStyle>
				<Pattern>BusinessCardIndicator</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Heading</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ExtendedStyle>Heading</ExtendedStyle>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@SCM:MasterPlanningWorkspaceTitle</Label>
						<ShowLabel>No</ShowLabel>
						<Text>@SCM:MasterPlanningWorkspaceTitle</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SubHeading</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@SCM:ReqProcessStatusLastRun</Label>
						<ShowLabel>No</ShowLabel>
						<Text>@SCM:ReqProcessStatusLastRun</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateTimeControl">
						<Name>LastRunDate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>DateTime</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@SCM:DateControl</Label>
						<ShowLabel>No</ShowLabel>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneControl">
						<Name>ActionPane</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ActionPane</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>ButtonGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ButtonGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>CreatePlan</Name>
										<Type>MenuFunctionButton</Type>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>ReqCalcScheduleItemTable</MenuItemName>
										<MenuItemType>Action</MenuItemType>
										<NormalImage>Process</NormalImage>
										<Text>@SYS9282</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>ViewLog</Name>
										<Type>MenuFunctionButton</Type>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>ReqLog</MenuItemName>
									</AxFormControl>
								</Controls>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>ButtonGroupRunning</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ButtonGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>ReqLogVisualization</Name>
										<Type>MenuFunctionButton</Type>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>ReqLogVisualization</MenuItemName>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Style>Strip</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Status</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ExtendedStyle>Footer1</ExtendedStyle>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<ChangeCase>UpperCase</ChangeCase>
						<Label>@SCM:StatusString</Label>
						<ShowLabel>No</ShowLabel>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormImageControl">
						<Name>IndicatorImage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ExtendedStyle>businessCard_notification</ExtendedStyle>
						<Type>Image</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@SCM:ReqTransPlanCard_IndicatorImage</Label>
						<ShowLabel>No</ShowLabel>
					</AxFormControl>
				</Controls>
				<AllowUserSetup>Restricted</AllowUserSetup>
				<ArrangeMethod>None</ArrangeMethod>
				<Style>Card</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>