<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProjTableCreate</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ProjTableCreate extends FormRun
{
    ProjTable                   formProjTable;
    ProjWIPTable                projWIPTable;
    ProjParameters              projParameters;

    NumberSeqFormHandler        numberSeqFormHandler;
    ProjId                      projId;
    ProjInvoiceProjId           projInvoiceProjId;
    CustAccount                 localCustAccount;
    ProjProjectedStartDate      projStartDate;

    ProjTableType               projTableType;

    boolean                     isSubProject;
    boolean                     isTemplateProject = false;

    ProjProjectCopier           projProjectCopier;
    FormRun                     wbsFormPartFormRun;
    FormRun						projTableFormRun;
    
    boolean enableMultipleContractLinesForProject = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();
    ProjRevenueProfile revProfile;

}
]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    boolean  canClose()
    {
        if (element.closedOk())
        {
            if (!element.validateProjTableOnClose())
            {
                return false;
            }

            if (!element.validateFixedPriceProjectOnClose())
            {
                return false;
            }

            element.setPsaScheduleDatesOnClose();

            projTable_ds.write();
        }
        else
        {
            element.numberSeqFormHandler().formMethodClose();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipSettingPsaScheduleDateOnClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check project start date is open for pickup.
    /// </summary>
    /// <returns>
    /// true, if field <c>ProjectedStartDate</c> value is valid pickup date; otherwie, false.
    /// </returns>
    boolean skipSettingPsaScheduleDateOnClose()
    {
        return WorkCalendarDate::isPickupDate(projTable.PsaSchedCalendarId, projTable.ProjectedStartDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFixedPriseOrInvestmentProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the project is a fixed price or an investment project.
    /// </summary>
    /// <returns>
    /// true, if the project is a fixed price or an investment project; otherwise, false.
    /// </returns>
    boolean isFixedPriseOrInvestmentProject()
    {
        return projTable.Type == ProjType::FixedPrice || projTable.Type == ProjType::Investment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFixedPriceProjectOnClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs additional validation for fixed price projects on form close.
    /// </summary>
    /// <returns>
    /// true, if the validation for fixed price project or investment project is passed; otherwise, false.
    /// </returns>
    boolean validateFixedPriceProjectOnClose()
    {
        boolean ret = true;

        if (!enableMultipleContractLinesForProject && element.isFixedPriseOrInvestmentProject())
        {
            ProjGroup projGroup = ProjGroup::find(projTable.ProjGroupId);
            ret = element.populateProjWIPTable(projGroup.ControlId, projGroup.PeriodId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProjWIPTable</Name>
				<Source><![CDATA[
    private boolean populateProjWIPTable(ProjControlId _controlId, ProjPeriodId _periodId)
    {
        if (_controlId == '' || _periodId == '')
        {
            return checkFailed("@GLS480006");
        }
        projWIPTable.clear();
        projWIPTable.ProjId         = projTable.ProjId;
        projWIPTable.ControlId      = _controlId;
        projWIPTable.PeriodId       = _periodId;
        projWIPTable.Description    = projTable.Name;

        return projWIPTable.validateWrite(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjTableOnClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>ProjTable</c> buffer on form close.
    /// </summary>
    /// <returns>
    /// true, if the <c>ProjTable</c> passes the validation; otherwise, false.
    /// </returns>
    boolean validateProjTableOnClose()
    {
        boolean ret = true;
        if (projTableType && element.closedOk() && (projTable_ds.validateWrite() == false))
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPsaScheduleDatesOnClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the PSA schedule dates on form close.
    /// </summary>
    void setPsaScheduleDatesOnClose()
    {
        // Update PsaSchedStartDate and PsaSchedEndDate to become a working date starting from ProjectedStartDate
        if (!element.skipSettingPsaScheduleDateOnClose())
        {
            projTable.PsaSchedStartDate  = WorkCalendar::findOpenDateForward(projTable.PsaSchedCalendarId, projTable.ProjectedStartDate, projTable.PsaSchedFromTime);
            projTable.PsaSchedEndDate    = projTable.PsaSchedStartDate;
        }
        else
        {
            projTable.PsaSchedStartDate  = ProjTable.ProjectedStartDate;
            projTable.PsaSchedEndDate    = ProjTable.ProjectedStartDate;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>changeType</Name>
				<Source><![CDATA[
    void changeType()
    {
        projTableType = ProjTableType::construct(projTable);

        projTableType.initProjTable();
        projTableType.createFormActive(element);

        projTableType.enableDisableFields();

        element.enableNewProjectContractButton();
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    void close()
    {
        FormRun                 callerFormObject;
        FormName                callerFormName;

        callerFormObject = element.args().caller();

        if (numberSeqFormHandler)
        {
            numberSeqFormHandler.formMethodClose();
        }

        if (callerFormObject != null)
        {
            callerFormName = callerFormObject.name();

            if (callerFormName == formStr(ProjProjectsListPage)         ||
                callerFormName == formStr(ProjGrant)                    ||
                callerFormName == formStr(ProjInvoiceTable)             ||
                callerFormName == formStr(ProjProjectCOntractsListPage) ||
                callerFormName == formStr(ProjProjectManagementWorkspace))
            {
                if (projTable.RecId)
                {
                    element.openEditDetailsForm();
                }
            }

            if (isSubProject && (callerFormName == formStr(ProjTable)) && this.closedOk() && !ProjTableFormSubprojectHierarchyGrid::isFeatureEnabled())
            {
                if (projTable && formHasMethod(callerFormObject, identifierStr(updateProjectTreeHierarchy)))
                {
                    callerFormObject.updateProjectTreeHierarchy(projTable.ProjId);
                }
            }

            // Adding project manager to project as a team member.
            // Code added after running project detail form to capture the info message on project details form
            // when project manager was not been added to created project.
            if (this.shouldAddProjectManagerAsTeamMember(callerFormName))
            {
                PSAProjSchedRole::addTeamMemberForProject(projTable.ProjId, projTable.WorkerResponsible,
                                                        projTable.PSASchedStartDate, projTable.PSASchedEndDate);
            }

            // Refreshing the ProjTable form after updating the project manager as team member.
            if (projTableFormRun && callerFormName == formStr(ProjProjectsListPage))
            {
                projTableFormRun.dataSource().reread();
            }
            else if (callerFormName == formStr(ProjTable))
            {
                callerFormObject.dataSource().reread();
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAddProjectManagerAsTeamMember</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the project manager has to be added as a team member of the project.
    /// </summary>
    /// <param name = "_callerFormName">
    /// Name of the caller form.
    /// </param>
    /// <returns>
    /// true if <c>ProjTable</c> exists and has value in <c>WorkerResponsible</c> field also the caller form is either <c>ProjProjectsListPage</c> or <c>ProjTable</c>; otherwise, false.
    /// </returns>
    protected boolean shouldAddProjectManagerAsTeamMember(FormName _callerFormName)
    {
        return projTable.RecId && projTable.WorkerResponsible &&
                (_callerFormName == formStr(ProjProjectsListPage) || _callerFormName == formStr(ProjTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custAccount</Name>
				<Source><![CDATA[
    CustAccount  custAccount(CustAccount   _custAccount = localCustAccount)
    {
        localCustAccount  = _custAccount;

        return localCustAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableNewProjectContractButton</Name>
				<Source><![CDATA[
    private void enableNewProjectContractButton()
    {
        if (projTable.Type == ProjType::Time ||
            projTable.Type == ProjType::Cost ||
            projTable.Type == ProjType::Internal ||
            projTable.Type == ProjType::Investment)
        {
            newProjectContract.enabled(false);
            newProjectContract.skip(true);
        }
        else
        {
            newProjectContract.enabled(true);
            newProjectContract.skip(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        projParameters = ProjParameters::find();

        super();

        if (element.args() && element.args().caller())
        {
            this.initFromDataset(element.args().dataset());
        }

        isSubProject = false;
        if (element.args() &&
            element.args().parmEnumType() == enumNum(ProjTableCreateLevel) &&
            element.args().parmEnum())
        {
            isSubProject = (element.args().parmEnum() == ProjTableCreateLevel::Subproject);
            isTemplateProject = (element.args().parmEnum() == ProjTableCreateLevel::Template);
            element.projId(formProjTable.ProjId);
        }

        element.projectedStartDate(DateTimeUtil::Date(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone())));

        element.setCaption();

        if (this.enableMultipleContractLinesForProject)
        {
            projTable_Type.visible(false);
            projTable_Type.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromDataset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize variables based on dataset.
    /// </summary>
    /// <param name = "_tableId">The dataset passed by the caller.</param>
    public void initFromDataset(TableId _tableId)
    {
        switch (_tableId)
        {
            case tableNum(ProjTable) :
                formProjTable = element.args().record();
                break;

            case tableNum(ProjInvoiceTable) :
                ProjInvoiceTable projInvoiceTable = element.args().record();
                element.projInvoiceProjId(projInvoiceTable.ProjInvoiceProjId);
                break;

            case tableNum(CustTable) :
                CustTable custTable = element.args().record();
                element.custAccount(custTable.AccountNum);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqFormHandler</Name>
				<Source><![CDATA[
    public NumberSeqFormHandler numberSeqFormHandler()
    {
        if (!numberSeqFormHandler)
        {
            numberSeqFormHandler = ProjTable.numberSeqFormHandler(element, projTable_ds);
        }

        return numberSeqFormHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openEditDetailsForm</Name>
				<Source><![CDATA[
    public void openEditDetailsForm()
    {
        MenuFunction    menuFunction;
        Args            args       = new Args();

        args.record(projTable);
        args.caller(this);

        menuFunction = new MenuFunction(menuitemDisplayStr(ProjTable), MenuItemType::Display);
        projTableFormRun = menuFunction.create(args);
        projTableFormRun.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectedStartDate</Name>
				<Source><![CDATA[
    ProjProjectedStartDate projectedStartDate(ProjProjectedStartDate _projectedStartDate = projStartDate)
    {
        projStartDate = _projectedStartDate;
        return projStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    ProjId  projId(ProjId   _projId = projId)
    {
        projId  = _projId;

        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceProjId</Name>
				<Source><![CDATA[
    ProjInvoiceProjId  projInvoiceProjId(ProjInvoiceProjId   _projInvoiceProjId = projInvoiceProjId)
    {
        projInvoiceProjId  = _projInvoiceProjId;

        return projInvoiceProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFieldSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///     To check if the field ProjGroupId is set.
    /// </summary>
    /// <returns>
    ///     true if the ProjGroupID is set; otherwise, false.
    /// </returns>
    protected boolean checkFieldSet()
    {
        return ProjTable.isFieldSet(fieldNum(ProjTable, ProjGroupId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        super();
        
        // This check is added to avoid the duplicate dialog shown for selecting the record template.
        if (!element.checkFieldSet() && !element.enableMultipleContractLinesForProject)
        {
            try
            {
                projTable_Type.modified();
            }
            catch (Exception::Error)
            {
                element.close();
            }
        }
        else
        {
            element.changeType();
            element.enableCtrlProjId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaption</Name>
				<Source><![CDATA[
    void setCaption()
    {
        if (isSubProject)
        {
            element.design().caption("@SYS321410");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustAccount</Name>
				<Source><![CDATA[
    public void setCustAccount(CustAccount _custAccount)
    {
        projTable.CustAccount = _custAccount;
        custAccount.text(_custAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjInvoiceProjId</Name>
				<Source><![CDATA[
    public void setProjInvoiceProjId(ProjInvoiceProjId _projInvoiceProjId)
    {
        element.projInvoiceProjId(_projInvoiceProjId);

        if (_projInvoiceProjId != "" && projTable.ProjInvoiceProjId != _projInvoiceProjId)
        {
            projTable.ProjInvoiceProjId = _projInvoiceProjId;
            projTable.modifiedField(fieldNum(ProjTable, ProjInvoiceProjId));
        }

        projInvoiceId.text(_projInvoiceProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWBSFormRun</Name>
				<Source><![CDATA[
    public void setWBSFormRun(FormRun _formRunObj)
    {
        wbsFormPartFormRun = _formRunObj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableCtrlProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to enable/Disable ProjId field
    /// </summary>
    private void enableCtrlProjId()
    {
        if (projTable.ParentId)
        {
            if (!ProjTable::isNumberSeqManual())
            {
                ctrlProjId.allowEdit(false);
            }
            if (ProjTable::isAllowChangeDown() || ProjTable::isAllowChangeUp())
            {
                ctrlProjId.allowEdit(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjectInTts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a project in transaction.
    /// </summary>
    protected void createProjectInTts()
    {
        try
        {
            ttsbegin;

            this.createProject();

            ttscommit;
        }
        catch (Exception::Error)
        {
            element.numberSeqFormHandler().formMethodClose(true);
            projTable.RecId = 0;

            element.close();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a project and required related tables.
    /// </summary>
    protected void createProject()
    {
        projTable.insert();

        if (isSubProject && projTable)
        {
            ProjTable parentProjTable = ProjTable::find(element.projId());
        }

        // Create Estimate project and assign the estimate project to the main project only if
        // the project created is of type 'Fixed price' or 'Investment' and
        // the project group that is selected has revenue recognition accounting rule other than 'No WIP'
        if (projTable.shouldCreateRevRecEstimateProject())
        {
            projWIPTable.insert();
        }

        element.numberSeqFormHandler().formMethodDataSourceWrite();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCollaborationWorkspace</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates collaboration workspace for the created project.
    /// </summary>
    protected void createCollaborationWorkspace()
    {
        try
        {
            CollabSiteManager collabSiteManager = CollabSiteManager::construct(projTable);
            collabSiteManager.autoCreateSite(true, false, false);
        }
        catch
        {
            warning("@SYS137323");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCallingCaseForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates calling form after project modification.
    /// </summary>
    protected void updateCallingCaseForm()
    {
        if (element.args().dataset() == tableNum(CaseDetail) || element.args().dataset() == tableNum(CaseDetailBase))
        {
            CaseDetail caseDetail = element.args().record();
            smmProjConnect projConnect = smmProjConnect::construct(caseDetail);
            projConnect.parmProjId(projTable.ProjId);
            projConnect.run();

            if (formHasMethod(element.args().caller(), identifierStr(refreshAssociations)))
            {
                element.args().caller().refreshAssociations();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTableWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles write login of ProjTable data source.
    /// </summary>
    protected void projTableWrite()
    {
        if (!element.closedOk())
        {
            return;
        }

        ctrlProjId.leave();

        this.createProjectInTts();

        // put this outside of the Project create transaction
        // if this fails, then Project creation will continue
        // and don't throw the exception, just display the error message
        this.createCollaborationWorkspace();

        if (formHasMethod(element.args().caller(), identifierStr(createprojId)))
        {
            element.args().caller().createprojId(projTable.ProjId);
        }

        this.updateCallingCaseForm();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>ProjTable</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        void write()
        {
            element.projTableWrite();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        boolean validateWrite()
        {
            boolean ret = true;

            if (ProjTable::exist(projTable.ProjId))
            {
                return checkFailed("@SYS56494");
            }

            if (!element.closedOk())
            {
                element.numberSeqFormHandler().formMethodDataSourceValidateWrite(ret);
                return false;
            }

            ret = projTableType.validateWrite();

            ret = element.numberSeqFormHandler().formMethodDataSourceValidateWrite(ret) && ret;

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        void initValue()
        {
            // for root project, get type from parameters
            // subprojects get type from the parent
            if (!isSubProject)
            {
                this.initializeRootProjectCustomerInformation();
            }
            else if (element.enableMultipleContractLinesForProject)
            {
                projTable.Type = ProjType::None;
            }
            else
            {
                projTable.Type = ProjTable::find(element.projId()).Type;
            }

            super();

            if (isSubProject)
            {
                projTable.type().initFromParent(element.projId());

                if (ProjSubProjectDoNotInitWIPProjectFlight::instance().isEnabled())
                {
                    // For subproject creation we should not initialize the WIPProject from the parent. It is invalid and causes validation issues later.
                    // This will later be set when inserting the record for the WIPTable. See createProject() for more details
                    ProjTable.WIPProject = null;
                }
            }

            projTable.ProjectedStartDate = element.projectedStartDate();

            // Initializing the additonal date fields to blank values
            projTable.ProjectedEndDate = dateNull();
            projTable.ExtensionDate = dateNull();

            // if the New Project slider is called in New Template mode
            Template.visible(isTemplateProject);
            if (isTemplateProject)
            {
                ProjTable.Template = NoYes::Yes;
                element.design().caption("@Proj:NewProjTemplate");
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>initializeRootProjectCustomerInformation</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initializes the project table record from parameters.
        /// </summary>
        protected void initializeRootProjectCustomerInformation()
        {
            projTable.Type = element.enableMultipleContractLinesForProject ? ProjType::None : projParameters.DisplayProjectType;
            projTable.ProjInvoiceProjId = element.projInvoiceProjId();
            projTable.modifiedField(fieldNum(ProjTable,ProjInvoiceProjId));
            if (element.custAccount())
            {
                projTable.CustAccount = element.custAccount();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        void create(boolean append = false)
        {
            super(append);

            if (projTable.ParentId)
            {
                projTable.formMethodDataSourceCreate(element,projTable_DS,projTable.ParentId);
            }
            else
            {
                element.numberSeqFormHandler().formMethodDataSourceCreate();
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>ProjId</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                NumberSequenceFormat    subFormat = ProjTable::find(projTable.ParentId).Format;
                boolean                 validate;

                validate = super();

                if (validate)
                {
                    validate = projTable.validateProjId(projTable.ProjId);

                    if (!validate)
                    {
                        ctrlProjId.text(projTable.ProjId);
                        Box::stop(strFmt("@SYS62416", projTable.ParentId, subFormat));
                    }
                }

                return validate;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjInvoiceProjId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                projtable_ds.refresh();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Type</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.changeType();
                element.enableCtrlProjId();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>WorkerResponsible</DataField>
						<Methods>
							<Method>
								<Name>resolveReference</Name>
								<Source><![CDATA[
            public Common resolveReference(FormReferenceControl _formReferenceControl)
            {
                HcmWorker ret;

                ret = super(_formReferenceControl);

                if (ret.RecId && !ProjWorkerLookup::validateWorker(ret.RecId, projTable, false))
                {
                    ret = null;
                }

                return ret;
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                return ProjWorkerLookup::lookupWorker(_formReferenceControl, projTable, false);
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if (!projTable.editSubProj(fieldNum(ProjTable, WorkerResponsible), projTable.WorkerResponsible, projTable.orig().WorkerResponsible))
                {
                    projTable.WorkerResponsible = projTable.orig().WorkerResponsible;
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>projTable_Type</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>enter</Name>
						<Source><![CDATA[
        /// <summary>
        /// Removes the None type when 'enable multiple contract lines for a project' is turned off.
        /// </summary>
        public void enter()
        {
            super();
            
            if (!element.enableMultipleContractLinesForProject)
            {
                this.delete(enum2Str(ProjType::None));
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProjTable_ProjGroupId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        void lookup()
        {
            DictEnum            dictEnum=new DictEnum(enumNum(ProjGroupType));
            ConfigurationKeyId  configKey;

            configKey = dictEnum.value2ConfigurationKey(projTable_Type.selection());
            if (isConfigurationkeyEnabled(configKey))
            {
                ProjGroup::lookupGroup(this, projTable.Type);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            projTable.CheckBudget = projTable.projGroup().CheckBudget;

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProjInvoiceId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            SysTableLookup              sysTableLookup;

            sysTableLookup = SysTableLookup::newParameters(tableNum(ProjInvoiceTable), this);

            sysTableLookup.addLookupfield(fieldNum(ProjInvoiceTable, ProjInvoiceProjId));
            sysTableLookup.addLookupfield(fieldNum(ProjInvoiceTable, Description));
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                sysTableLookup.addLookupMethod(tableMethodStr(ProjInvoiceTable, fundingSourceName));
                sysTableLookup.setLabel("@SYS27874");
            }

            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OKCommandButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            boolean     callSuper   = true;

            if (!projTable.ProjId ||
                (!projTable.ProjGroupId && !element.enableMultipleContractLinesForProject) ||
                !projTable.ProjectedStartDate ||
                (!projTable.ProjInvoiceProjId && (projTable.Type == ProjType::FixedPrice || projTable.Type == ProjType::TimeMaterial)))
            {
                throw error("@SYS37918");
            }

            if (callSuper)
            {
                super();
            }

            if (projTable.ParentId && (projTable.Type == ProjType::TimeMaterial ||
                (element.enableMultipleContractLinesForProject
                && ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForBillingMethod(projTable.ProjId, projTable.ProjInvoiceProjId, ProjContractBillingMethod::TimeMaterial))))
            {
                ProjTable::copyPwpSettingFromParentProject(projTable);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>ProjTable</Name>
			<Table>ProjTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AlternateBudgetProject</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssetId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankDocumentType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CertifiedPayroll</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CheckBudget</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompleteScheduled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContractAmendment_SA</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContractDate_SA</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContractPeriod_SA</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContractValue_SA</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Created</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeliveryLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DlvName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Email</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExtensionDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Format</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Header</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JobId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JobPayType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MinTimeIncrement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OCIP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OCIPGL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackedExtensions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjBudgetaryControlOn</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjBudgetInterval</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjBudgetManagement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjBudgetOverrunOption</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjCarryForwardNegativeBudget</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjCarryForwardRemainingBudget</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjectedEndDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjectedStartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjLedgerPosting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjLinePropertySearch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjPriceGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSADoInvoiceCost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAForecastModelId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAForecastModelIdExternal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAInvoiceMethod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSANotes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAPhone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAPReqControl</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAPReqHourValidate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAPReqItemValidate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAProjStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAProjTask</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAReadyForInvoicing</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAResSchedStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSARetainIncludeLower</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSARetainPercent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSARetainScheduleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedCalendarId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedConstraintDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedConstraintType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedDefaultDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedDuration</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedEffort</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedEndDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedFromTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedIgnoreCalendar</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedMilestone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedScheduled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedStartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedToTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedUseDuration</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSATeleFax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSATimeMeasure</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSATrackCost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAUnitId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequireActivityExpenseForecast</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequireActivityExpenseTrx</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequireActivityHourForecast</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequireActivityHourTrx</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequireActivityItemForecast</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequireActivityItemTrx</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>sortingId[1]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>sortingId[2]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>sortingId[3]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Status</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Subject_SA</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SyncCreatedByExternal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SyncEntityId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SyncLastTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SyncToCRM</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SyncVersion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Template</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TimePostDetailSummary</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Type</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseAlternateProject</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseBudgeting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidateProjCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WIPProject</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkerPSAArchitect</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkerResponsible</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkerResponsibleFinancial</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkerResponsibleSales</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<LinkType>Passive</LinkType>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<BackgroundColor xmlns="">WindowBackground</BackgroundColor>
		<Caption xmlns="">@Proj:NewProject</Caption>
		<DataSource xmlns="">ProjTable</DataSource>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<TitleDataSource xmlns="">ProjTable</TitleDataSource>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FormGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>projTable_Type</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ComboType>List</ComboType>
						<DataField>Type</DataField>
						<DataSource>ProjTable</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>FrameGroup</Name>
						<ElementPosition>715827882</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CtrlProjId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>ProjId</DataField>
								<DataSource>ProjTable</DataSource>
								<LookupButton>Never</LookupButton>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Name</Name>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>Name</DataField>
								<DataSource>ProjTable</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ProjTable_ProjGroupId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>ProjGroupId</DataField>
								<DataSource>ProjTable</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ProjTable_Description</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<DataField>Description</DataField>
								<DataSource>ProjTable</DataSource>
							</AxFormControl>
						</Controls>
						<HideIfEmpty>No</HideIfEmpty>
						<DataSource>ProjTable</DataSource>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ProjectContract</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Group1</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjInvoiceId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjInvoiceProjId</DataField>
										<DataSource>ProjTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>NewProjectContract</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Left>0</Left>
										<LeftMode>RightEdge</LeftMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>ImageOnly</ButtonDisplay>
										<MenuItemName>ProjInvoiceTableCreate</MenuItemName>
										<NormalImage>New</NormalImage>
										<SaveRecord>No</SaveRecord>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
								<HideIfEmpty>No</HideIfEmpty>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CustAccount</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_AccountsReceivable:ProjTableCreate_CustAccount</HelpText>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>CustAccount</DataField>
								<DataSource>ProjTable</DataSource>
								<Label>@SYS302</Label>
							</AxFormControl>
						</Controls>
						<HideIfEmpty>No</HideIfEmpty>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormReferenceGroupControl">
						<Name>ProjTable_WorkerResponsible</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ReferenceGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<DataSource>ProjTable</DataSource>
						<ReferenceField>WorkerResponsible</ReferenceField>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>ProjectedStartDate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Date</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>ProjectedStartDate</DataField>
						<DataSource>ProjTable</DataSource>
						<Label>@SYS4009396</Label>
						<Mandatory>Yes</Mandatory>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>Template</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>CheckBox</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataField>Template</DataField>
						<DataSource>ProjTable</DataSource>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoLeft</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKCommandButton</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<SaveRecord>No</SaveRecord>
						<Text>@Proj:CreateProject</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelCommandButton</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>