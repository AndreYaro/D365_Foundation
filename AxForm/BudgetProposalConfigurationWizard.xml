<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BudgetProposalConfigurationWizard</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BudgetProposalConfigurationWizard extends FormRun
{
    private BudgetProposalConfigurationWizard wizard;
    private BudgetProposalConfiguration selectedBudgetProposalRecord;
    private BudgetProposalConfiguration budgetProposal;
    private FiscalCalendarRecId fiscalCalendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

    private const int SummaryInformationTab = 1;
    private const int DetailedInputsTab = 2;
    private const int OutputTab = 3;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void init()
    {
        if (!BudgetProposalActivation::isActive())
        {
            this.lifecycleHelper().exitForm("@Budget:BudgetProposalTermsAndConditions");
        }
        else
        {
            super();

            wizard = element.args().caller() as BudgetProposalConfigurationWizard;

            if (element.args().caller())
            {
                wizard = element.args().caller();

                selectedBudgetProposalRecord = wizard.parmBudgetProposalConfiguration();

                element.initAccountTypeControl();

                if (selectedBudgetProposalRecord)
                {
                    element.populateFieldsFromBuffer();
                }
            }
        }

        if (BudgetProposalConfigurationOutputBudgetCodeFlight::instance().isEnabled())
        {
            OutputGroup_BudgetTransactionCode.visible(false);
        }
        else
        {
            OutputGroup_BudgetTransactionCodeGroup.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDetailedInputsHelpText</Name>
				<Source><![CDATA[
    private void setDetailedInputsHelpText(BudgetSourceTransactions _source = selectedBudgetProposalRecord.SourceTransactions)
    {
        switch (_source)
        {
            case BudgetSourceTransactions::Budget :
                DetailedInputsTabHelpText.text("@Budget:ProposalWizardDetailedInputsBudgetText");
                break;
            case BudgetSourceTransactions::Actuals :
                DetailedInputsTabHelpText.text("@Budget:ProposalWizardDetailedInputsActualsText");
                break;
            case BudgetSourceTransactions::Both :
                DetailedInputsTabHelpText.text("@Budget:ProposalWizardDetailedInputsText");
                break;
            default :
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceControlsVisibility</Name>
				<Source><![CDATA[
    private void updateSourceControlsVisibility(BudgetSourceTransactions _source = selectedBudgetProposalRecord.SourceTransactions)
    {
        switch (_source)
        {
            case BudgetSourceTransactions::Budget :
                SourceGenJourAccountTypeGroup.visible(false);
                BudgetSources.visible(true);
                BudgetAsOfDate.visible(false);
                break;
            case BudgetSourceTransactions::Actuals :
                SourceGenJourAccountTypeGroup.visible(true);
                BudgetSources.visible(false);
                BudgetAsOfDate.visible(false);
                break;
            case BudgetSourceTransactions::Both :
                SourceGenJourAccountTypeGroup.visible(true);
                BudgetSources.visible(true);
                BudgetAsOfDate.visible(true);
                break;
            default :
                SourceGenJourAccountTypeGroup.visible(false);
                BudgetSources.visible(false);
                BudgetAsOfDate.visible(false);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFieldsFromBuffer</Name>
				<Source><![CDATA[
    private void populateFieldsFromBuffer()
    {
        element.populateSummaryInformationTabControls();
        element.populateDetailedInputsControls();
        element.populateOutputTabControls();

        element.updateSourceControlsVisibility();
        element.setDetailedInputsHelpText();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSummaryInformationTabControls</Name>
				<Source><![CDATA[
    private void populateSummaryInformationTabControls()
    {
        Name.text(selectedBudgetProposalRecord.Name);
        StartDate.dateValue(selectedBudgetProposalRecord.StartDate);
        EndDate.dateValue(selectedBudgetProposalRecord.EndDate);
        BudgetAsOfDate.dateValue(selectedBudgetProposalRecord.BudgetAsOfDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDetailedInputsControls</Name>
				<Source><![CDATA[
    private void populateDetailedInputsControls()
    {
        switch (selectedBudgetProposalRecord.SourceTransactions)
        {
            case BudgetSourceTransactions::Budget :
                element.updateBudgetSourceGridControl();
                element.setBudgetSourceRangeDates(selectedBudgetProposalRecord.SourceTransactions);
                break;
            case BudgetSourceTransactions::Actuals :
                element.updateSourceAccountTypeControl();
                break;
            case BudgetSourceTransactions::Both :
                element.updateSourceAccountTypeControl();
                element.updateBudgetSourceGridControl();
                element.setBudgetSourceRangeDates(selectedBudgetProposalRecord.SourceTransactions);
                break;
            default :
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateOutputTabControls</Name>
				<Source><![CDATA[
    private void populateOutputTabControls()
    {
        SourceTransactions.selection(selectedBudgetProposalRecord.SourceTransactions);
        OutputGroup_BudgetModel.text(selectedBudgetProposalRecord.BudgetModelId);

        if (BudgetProposalConfigurationOutputBudgetCodeFlight::instance().isEnabled())
        {
            OutputGroup_BudgetTransactionCodeGroup.value(BudgetTransactionCode::find(selectedBudgetProposalRecord.BudgetTransactionCode).RecId);
        }
        else
        {
            OutputGroup_BudgetTransactionCode.text(BudgetTransactionCode::find(selectedBudgetProposalRecord.BudgetTransactionCode).Name);
        }

        // Set Output dates
        element.setOutputDates(selectedBudgetProposalRecord.EndDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetSourceGridControl</Name>
				<Source><![CDATA[
    private void updateBudgetSourceGridControl()
    {
        BudgetProposalSource budgetProposalSource;
       
        while select budgetProposalSource where budgetProposalSource.BudgetProposalConfiguration == selectedBudgetProposalRecord.RecId
        {
            budgetProposalSourceTmp.BudgetModelId = budgetProposalSource.BudgetModelId;
            budgetProposalSourceTmp.BudgetSubModelId = budgetProposalSource.BudgetModelId;
            budgetProposalSourceTmp.BudgetTransactionCode = budgetProposalSource.BudgetTransactionCode;
            budgetProposalSourceTmp.BudgetModelType = budgetProposalSource.BudgetModelType;
            budgetProposalSourceTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceAccountTypeControl</Name>
				<Source><![CDATA[
    private void updateSourceAccountTypeControl()
    {
        int sourceControlCount = SourceGenJourAccountTypeControl.getCount();

        // Clear the current selections
        for (int i = 0; i < sourceControlCount; i++)
        {
            FormListItem item = SourceGenJourAccountTypeControl.getItem(i);
            item.stateSelected(false);
            item.stateChecked(false);
            SourceGenJourAccountTypeControl.setItem(item);
        }

        // Populate control with current record selections
        BudgetProposalSourceAccountType sourceAccountType;

        while select sourceAccountType where sourceAccountType.BudgetProposalConfiguration == selectedBudgetProposalRecord.RecId
        {
            for (int i = 0; i < sourceControlCount; i++)
            {
                FormListItem item = SourceGenJourAccountTypeControl.getItem(i);
                if (item.data() == sourceAccountType.LedgerAccountType)
                {
                    item.stateSelected(true);
                    item.stateChecked(true);
                    SourceGenJourAccountTypeControl.setItem(item);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAccountTypeControl</Name>
				<Source><![CDATA[
    private void initAccountTypeControl()
    {
        // Add a column header if one didn't exist
        if (!SourceGenJourAccountTypeControl.getColumn(0))
        {
            SourceGenJourAccountTypeControl.addColumn(0, new FormListColumn("@Budget:AccountType", 0));
        }

        // Add the supported transaction types for actuals to the selection list
        element.addAccountType2List(DimensionLedgerAccountType::Asset);
        element.addAccountType2List(DimensionLedgerAccountType::Expense);
        element.addAccountType2List(DimensionLedgerAccountType::Total);
        element.addAccountType2List(DimensionLedgerAccountType::Revenue);
        element.addAccountType2List(DimensionLedgerAccountType::Liability);
        element.addAccountType2List(DimensionLedgerAccountType::Equity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAccountType2List</Name>
				<Source><![CDATA[
    private void addAccountType2List(DimensionLedgerAccountType _accountType)
    {
        SourceGenJourAccountTypeControl.addItem(new FormListItem(enum2str(_accountType), 0, _accountType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>wizard</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SysWizard wizard()
    {
        return wizard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDates</Name>
				<Source><![CDATA[
    private void updateDates()
    {
        FromDate dateFrom = StartDate.dateValue();
        ToDate dateTo = EndDate.dateValue();

        if (dateFrom < dateTo) 
        {
            element.setBudgetSourceRangeDates();
            element.setOutputDates();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetSourceRangeDates</Name>
				<Source><![CDATA[
    private void setBudgetSourceRangeDates(BudgetSourceTransactions _source = SourceTransactions.selection())
    {
        if (_source != BudgetSourceTransactions::Actuals)
        {
            FiscalPeriodStart fiscalPeriodStartDate = FiscalCalendars::findFirstDayOfMonth(fiscalCalendarRecId, StartDate.dateValue());

            FromDate dateFrom = _source == BudgetSourceTransactions::Both ? BudgetAsOfDate.dateValue() : fiscalPeriodStartDate;
            ToDate dateTo = FiscalCalendars::findLastDayOfMonth(fiscalCalendarRecId, EndDate.dateValue());
        
            DetailedInputs_StartDate.dateValue(dateFrom);
            DetailedInputs_EndDate.dateValue(dateTo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOutputDates</Name>
				<Source><![CDATA[
    private void setOutputDates(ToDate _dateTo = EndDate.dateValue())
    {
        ToDate toDate = FiscalCalendars::findLastDayOfMonth(fiscalCalendarRecId, _dateTo);
        
        Output_StartDate.dateValue(toDate + 1);
        Output_EndDate.dateValue(nextYr(Output_StartDate.dateValue()) - 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidBudgetProposalName</Name>
				<Source><![CDATA[
    private boolean isValidBudgetProposalName()
    {
        boolean isValid = true;

        BudgetProposalConfiguration existingBudgetProposal = BudgetProposalConfiguration::findBudgetProposalByNameAndLedger(Name.text());

        if (existingBudgetProposal.RecId != 0 && existingBudgetProposal.RecId != selectedBudgetProposalRecord.RecId)
        {
            isValid = checkFailed(strFmt("@Budget:NameConflict", Name.text()));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidSummaryInformationTabControls</Name>
				<Source><![CDATA[
    private boolean isValidSummaryInformationTabControls()
    {
        boolean isValid = true;

        if (Name.text() == '')
        {
            isValid = checkFailed(strFmt("@Budget:FieldMustBeFilledIn", "@SYS7576"));
        }
        else
        {
            isValid = element.isValidBudgetProposalName();
        }

        if (StartDate.dateValue() == dateNull())
        {
            isValid = checkFailed(strFmt("@Budget:FieldMustBeFilledIn", "@SYS5209"));
        }

        if (EndDate.dateValue() == dateNull())
        {
            isValid = checkFailed(strFmt("@Budget:FieldMustBeFilledIn", "@SYS14656"));
        }

        if (StartDate.dateValue() != dateNull() && EndDate.dateValue() != dateNull())
        {
            if (!FiscalCalendarYear::findYearByCalendarDate(fiscalCalendarRecId, StartDate.dateValue()))
            {
                isValid = checkFailed(strFmt("@Budget:InvalidFiscalPeriodDate", "@SYS5209"));
            }

            if (!FiscalCalendarYear::findYearByCalendarDate(fiscalCalendarRecId, EndDate.dateValue()))
            {
                isValid = checkFailed(strFmt("@Budget:InvalidFiscalPeriodDate", "@SYS14656"));
            }
            
            if (StartDate.dateValue() >= EndDate.dateValue())
            {
                isValid = checkFailed(strFmt("@Budget:InvalidDateRange", "@SYS14656", "@SYS5209"));
            }
        }

        if (SourceTransactions.selection() == BudgetSourceTransactions::Both)
        {
            if (BudgetAsOfDate.dateValue() == dateNull())
            {
                isValid = checkFailed(strFmt("@Budget:FieldMustBeFilledIn", "@Budget:BudgetAsOfDate"));
            }
            else if (BudgetAsOfDate.dateValue() <= (StartDate.dateValue()) || BudgetAsOfDate.dateValue() >= (EndDate.dateValue()))
            {
                isValid = checkFailed(strFmt("@Budget:InvalidBudgetAsOfDate", "@Budget:BudgetAsOfDate", "@SYS5209", "@SYS22882"));
            }
        }

        if (!isValid)
        {
            element.setSummayInformationTabControlsMandatory();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidDetailedInputControls</Name>
				<Source><![CDATA[
    private boolean isValidDetailedInputControls()
    {
        boolean isValid = true;

        switch (SourceTransactions.selection())
        {
            case BudgetSourceTransactions::Budget :
                isValid = element.validateBudgetProposalSources();
                break;
            case BudgetSourceTransactions::Actuals :
                isValid = element.validateSourceAccountTypes();
                break;
            case BudgetSourceTransactions::Both :
                isValid = element.validateBudgetProposalSources() && element.validateSourceAccountTypes();
                break;
            default :
                break;
        }

        if (!isValid)
        {
            element.setDetailedInputsTabControlsMandatory();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidOutputTabControls</Name>
				<Source><![CDATA[
    private boolean isValidOutputTabControls()
    {
        boolean isValid = true;

        if (OutputGroup_BudgetModel.text() == '')
        {
            isValid = checkFailed(strFmt("@Budget:FieldMustBeFilledIn", "@SYS1966"));
        }

        if (isValid && BudgetModel::find(HeadingSub::Heading, OutputGroup_BudgetModel.text()).RecId == 0)
        {
            isValid = checkFailed(strFmt("@Budget:InvalidOutputBudgetModel", OutputGroup_BudgetModel.text()));
        }

        if (BudgetProposalConfigurationOutputBudgetCodeFlight::instance().isEnabled() ?
            OutputGroup_BudgetTransactionCodeGroup.value() == 0 :
            OutputGroup_BudgetTransactionCode.text() == '')
        {
            isValid = checkFailed(strFmt("@Budget:FieldMustBeFilledIn", "@SYS339265"));
        }

        if (isValid && !element.validateOutputBudgetCode())
        {
            str budgetTransactionName = BudgetProposalConfigurationOutputBudgetCodeFlight::instance().isEnabled() ?
                                        BudgetTransactionCode::find(OutputGroup_BudgetTransactionCodeGroup.value()).Name :
                                        OutputGroup_BudgetTransactionCode.text();

            isValid = checkFailed(strFmt("@Budget:InvalidOutputBudgetCode", budgetTransactionName));
        }

        if (!isValid)
        {
            element.setOutputTabControlsMandatory();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOutputBudgetCode</Name>
				<Source><![CDATA[
    private boolean validateOutputBudgetCode()
    {
        BudgetTransactionCode budgetCode = BudgetProposalConfigurationOutputBudgetCodeFlight::instance().isEnabled() ?
                                           BudgetTransactionCode::find(OutputGroup_BudgetTransactionCodeGroup.value(), false) :
                                           BudgetTransactionCode::findByBudgetTransactionCode(OutputGroup_BudgetTransactionCode.text());

        return budgetCode.RecId != 0 && budgetCode.BudgetTransactionType != BudgetTransactionType::Transfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSummayInformationTabControlsMandatory</Name>
				<Source><![CDATA[
    private void setSummayInformationTabControlsMandatory()
    {
        Name.mandatory(true);
        StartDate.mandatory(true);
        EndDate.mandatory(true);
        BudgetAsOfDate.mandatory(false);

        if (SourceTransactions.selection() == BudgetSourceTransactions::Both)
        {
            BudgetAsOfDate.mandatory(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDetailedInputsTabControlsMandatory</Name>
				<Source><![CDATA[
    private void setDetailedInputsTabControlsMandatory()
    {
        BudgetProposalSource_BudgetModelId.mandatory(true);
        BudgetProposalSourceTmp_BudgetTransactionCode.mandatory(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOutputTabControlsMandatory</Name>
				<Source><![CDATA[
    private void setOutputTabControlsMandatory()
    {
        OutputGroup_BudgetModel.mandatory(true);

        if (BudgetProposalConfigurationOutputBudgetCodeFlight::instance().isEnabled())
        {
            OutputGroup_BudgetTransactionCodeGroup.mandatory(true);
        }
        else
        {
            OutputGroup_BudgetTransactionCode.mandatory(true);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetProposalSources</Name>
				<Source><![CDATA[
    private boolean validateBudgetProposalSources()
    {
        boolean isValid = true;

        if (!element.budgetProposalSourcesSelected())
        {
            isValid = checkFailed("@Budget:BudgetSourceRequired");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSourceAccountTypes</Name>
				<Source><![CDATA[
    private boolean validateSourceAccountTypes()
    {
        boolean isValid = true;

        if (!element.budgetProposalSourceAccountTypesSelected())
        {
            isValid = checkFailed("@Budget:BudgetSourceAccountTypesRequired");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetProposalSourceAccountTypesSelected</Name>
				<Source><![CDATA[
    private boolean budgetProposalSourceAccountTypesSelected()
    {
        boolean isValid;
        int sourceControlCount = SourceGenJourAccountTypeControl.getCount();

        for (int i = 0; i < sourceControlCount; i++)
        {
            FormListItem item = SourceGenJourAccountTypeControl.getItem(i);

            isValid = item.stateSelected() ? true : isValid;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetProposalSourcesSelected</Name>
				<Source><![CDATA[
    private boolean budgetProposalSourcesSelected()
    {
        Array dataLines;
        Array lineData;
        int linesCount;
        int lineIndex;
        struct budgetSourceGridData = ProposalSourceGrid.getSelectedData();
        const int DataLinesIndex = 2;
        const int BudgetModelIndex = 2;
        const int BudgetCodeIndex = 3;
        BudgetModelId budgetModelText;
        BudgetCode budgetCodeText;

        dataLines = budgetSourceGridData.value(budgetSourceGridData.fieldName(DataLinesIndex));

        linesCount = dataLines.lastIndex();

        boolean isValid = false;

        if (linesCount > 0)
        {
            for (lineIndex = 1; lineIndex <= linesCount; lineIndex++)
            {
                lineData = dataLines.value(lineIndex);
                budgetModelText = lineData.value(BudgetModelIndex);
                budgetCodeText = lineData.value(BudgetCodeIndex);

                isValid = (budgetModelText != '' && budgetCodeText != '') ? true : isValid;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void closeOk()
    {
        if (element.isValidOutputTabControls())
        {
            PowerAIInsightsStateMachineFacade stateMachineFacade = PowerAIInsightsStateMachineFacade::newForFeatureName(FinanceInsightsConstants::BudgetProposalInsightsFeatureNameV2);
            if (stateMachineFacade.getCurrentState() == BudgetProposalInsightsStateMachineState::Enabled)
            {
                element.processWizardData();

                if (budgetProposal.RecId != 0 && element.canProceedToGenerateSource())
                {
                    element.generateBudgetProposalSource(stateMachineFacade);

                    super();

                    wizard.refreshCallingForm(budgetProposal);
                }
                info(strFmt("@Budget:BudgetSourceProcessing", budgetProposal.Name));
            }
            else
            {
                warning("@Budget:NewModelCreationModelWarning");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProceedToGenerateSource</Name>
				<Source><![CDATA[
    private boolean canProceedToGenerateSource()
    {
        boolean proceedToGenerateSource = true;
        
        if (BudgetTimeSeriesDetail::existsBudgetTimeSeriesData())
        {
            if (Box::okCancel("@Budget:BudgetProposalWizardFinishConfirm", DialogButton::Cancel) == DialogButton::Cancel)
            {
                proceedToGenerateSource = false;
            }
        }

        return proceedToGenerateSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateBudgetProposalSource</Name>
				<Source><![CDATA[
    private void generateBudgetProposalSource(PowerAIInsightsStateMachineFacade _stateMachineFacade)
    {
        _stateMachineFacade.processEvent(BudgetProposalConfigurationStateMachineEvent::newFromBudgetProposalConfiguration(budgetProposal));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processWizardData</Name>
				<Source><![CDATA[
    private void processWizardData()
    {
        if (!selectedBudgetProposalRecord)
        {
            element.createBudgetProposalConfiguration();
        }
        else
        {
            element.updateBudgetProposalConfiguration();
        }

        element.deleteCurrentBudgetProposalSources();
        element.saveBudgetProposalSources();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetProposalConfiguration</Name>
				<Source><![CDATA[
    private void createBudgetProposalConfiguration()
    {
        BudgetTransactionCodeRecId budgetTransactionCodeRecId = element.getOutputBudgetTransactionCodeRecId();

        BudgetProposalConfiguration::createBudgetProposalConfiguration(
            SourceTransactions.selection(),
            Name.text(),
            StartDate.dateValue(),
            EndDate.dateValue(),
            BudgetAsOfDate.dateValue(),
            OutputGroup_BudgetModel.text(),
            budgetTransactionCodeRecId);
            
        budgetProposal = BudgetProposalConfiguration::findBudgetProposalByNameAndLedger(Name.text());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetProposalConfiguration</Name>
				<Source><![CDATA[
    private void updateBudgetProposalConfiguration()
    {
        BudgetTransactionCodeRecId budgetTransactionCodeRecId = element.getOutputBudgetTransactionCodeRecId();

        budgetProposal = BudgetProposalConfiguration::findBudgetProposalByNameAndLedger(selectedBudgetProposalRecord.Name);

        BudgetProposalConfiguration::updateBudgetProposalConfiguration(
            budgetProposal,
            SourceTransactions.selection(),
            Name.text(),
            StartDate.dateValue(),
            EndDate.dateValue(),
            BudgetAsOfDate.dateValue(),
            OutputGroup_BudgetModel.text(),
            budgetTransactionCodeRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCurrentBudgetProposalSources</Name>
				<Source><![CDATA[
    private void deleteCurrentBudgetProposalSources()
    {
        BudgetProposalSource::deleteForBudgetProposalConfig(budgetProposal.RecId);
        BudgetProposalSourceAccountType::deleteForBudgetProposalConfig(budgetProposal.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveBudgetProposalSources</Name>
				<Source><![CDATA[
    private void saveBudgetProposalSources()
    {
        switch (SourceTransactions.selection())
        {
            case BudgetSourceTransactions::Budget :
                element.saveBudgetSources();
                break;
            case BudgetSourceTransactions::Actuals :
                element.saveSourceAccountTypesSelection();
                break;
            case BudgetSourceTransactions::Both :
                element.saveBudgetSources();
                element.saveSourceAccountTypesSelection();
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveSourceAccountTypesSelection</Name>
				<Source><![CDATA[
    private void saveSourceAccountTypesSelection()
    {
        if (budgetProposal.RecId)
        {
            int sourceControlCount = SourceGenJourAccountTypeControl.getCount();

            // Update the selected account control types for actuals
            for (int i = 0; i < sourceControlCount; i = i + 1)
            {
                element.createSourceAccountType(i);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveBudgetSources</Name>
				<Source><![CDATA[
    private void saveBudgetSources()
    {
        BudgetProposalSource budgetProposalSource;

        RefRecId budgetProposalConfiguration = budgetProposal.RecId;
        DataAreaId legalEntity = CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(budgetProposal.Ledger));

        insert_recordset budgetProposalSource (BudgetModelId, BudgetSubModelId, BudgetTransactionCode, BudgetModelType, BudgetModelDataAreaId, BudgetProposalConfiguration)
            select BudgetModelId, BudgetSubModelId, BudgetTransactionCode, BudgetModelType, legalEntity, budgetProposalConfiguration
            from budgetProposalSourceTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSourceAccountType</Name>
				<Source><![CDATA[
    private void createSourceAccountType(int _idx)
    {
        FormListItem item = SourceGenJourAccountTypeControl.getItem(_idx);
        
        if (item.stateSelected())
        {
            // Add AccountType
            BudgetProposalSourceAccountType checkedItem;
            checkedItem.BudgetProposalConfiguration = budgetProposal.RecId;
            checkedItem.LedgerAccountType = item.data();

            if (checkedItem.validateWrite())
            {
                checkedItem.write();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOutputBudgetTransactionCodeRecId</Name>
				<Source><![CDATA[
    private BudgetTransactionCodeRecId getOutputBudgetTransactionCodeRecId()
    {
        BudgetTransactionCodeRecId budgetTransactionCodeRecId;

        if (BudgetProposalConfigurationOutputBudgetCodeFlight::instance().isEnabled())
        {
            budgetTransactionCodeRecId = OutputGroup_BudgetTransactionCodeGroup.value();
        }
        else
        {
            budgetTransactionCodeRecId =  BudgetTransactionCode::findByBudgetTransactionCode(OutputGroup_BudgetTransactionCode.text()).RecId;
        }

        return budgetTransactionCodeRecId;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>BudgetProposalSourceTmp</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void write()
        {
            if (budgetProposalSourceTmp.BudgetModelId != '' && budgetProposalSourceTmp.BudgetTransactionCode > 0)
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>BudgetTransactionCode</DataField>
						<Methods>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            [Hookable(false)]
            public void jumpRef()
            {
                BudgetTransactionCode budgetTransactionCodeLocal = BudgetTransactionCode::find(BudgetProposalSourceTmp.BudgetTransactionCode);

                BudgetTransactionCode::jumpRefBudgetTransactionCode(budgetTransactionCodeLocal, this);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>BudgetProposalConfigurationWizard</Name>
				<Type>Tab</Type>
				<Methods>
					<Method>
						<Name>tabChange</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean tabChange(int _FromTab)
        {
            boolean ret = super(_FromTab);
            
            if (element.selectedControl().name() == "@SYS56453")
            {
                return ret;
            }

            switch (_FromTab)
            {
                case SummaryInformationTab :
                    ret = ret && element.isValidSummaryInformationTabControls();
                    break;
                case DetailedInputsTab :
                    ret = ret && element.isValidDetailedInputControls();
                    break;
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>StartDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean modified()
        {
            boolean ret = super();

            element.updateDates();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EndDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean modified()
        {
            boolean ret = super();

            element.updateDates();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SourceTransactions</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean modified()
        {
            boolean ret = super();

            element.updateSourceControlsVisibility(this.selection());
            element.setDetailedInputsHelpText(this.selection());
            element.setBudgetSourceRangeDates();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetAsOfDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean modified()
        {
            boolean ret = super();

            element.setBudgetSourceRangeDates();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetProposalSource_BudgetModelId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void lookup()
        {
            BudgetModel::lookupBudgetModel(this, true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OutputGroup_BudgetModel</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void lookup()
        {
            BudgetModel::lookupBudgetModel(this, true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OutputGroup_BudgetTransactionCodeGroup</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>lookupReference</Name>
						<Source><![CDATA[
        public Common lookupReference()
        {
            SysReferenceTableLookup referenceLookup;

            referenceLookup = SysReferenceTableLookup::newParameters(tableNum(BudgetTransactionCode), this, true);

            // Add fields that will be shown in the lookup form as columns
            referenceLookup.addLookupfield(fieldNum(BudgetTransactionCode, Name));
            referenceLookup.addLookupfield(fieldNum(BudgetTransactionCode, Description));
            referenceLookup.addLookupfield(fieldNum(BudgetTransactionCode, BudgetTransactionType));

            // Add the query to the lookup form
            // Budget drafts with transaction codes of type 'Transfer' are not able to be posted if they contain a mix of both Expense and Revenue lines.
            // Therefore for the wizard output lookup we need to exclude budget transaction codes of type 'Transfer'.
            referenceLookup.parmQuery(BudgetTransactionManager::getBudgetTransactionCodeQueryForBudgetTranasactionTypes(
                BudgetTransactionCodeQueryMode::ExcludeType,
                BudgetTransactionType::Transfer));

            // Perform the lookup and return the selected record
            return referenceLookup.performFormLookup() as BudgetTransactionCode;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OutputGroup_BudgetTransactionCode</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void lookup()
        {
            this.lookupBudgetTransactionCode(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookupBudgetTransactionCode</Name>
						<Source><![CDATA[
        private void lookupBudgetTransactionCode(FormStringControl _ctrl)
        {
            SysTableLookup budgetTransactionCodeLookup;

            budgetTransactionCodeLookup = SysTableLookup::newParameters(tablenum(BudgetTransactionCode), _ctrl, true);

            // Add the fields to be shown in the lookup form
            budgetTransactionCodeLookup.addLookupfield(fieldnum(BudgetTransactionCode, Name));
            budgetTransactionCodeLookup.addLookupfield(fieldnum(BudgetTransactionCode, Description));
            budgetTransactionCodeLookup.addLookupfield(fieldnum(BudgetTransactionCode, BudgetTransactionType));

            // Add the query to the lookup form
            // Budget drafts with transaction codes of type 'Transfer' are not able to be posted if they contain a mix of both Expense and Revenue lines. 
            // Therefore for the wizard output lookup we need to exclude budget transaction codes of type 'Transfer'.
            budgetTransactionCodeLookup.parmQuery(BudgetTransactionManager::getBudgetTransactionCodeQueryForBudgetTranasactionTypes(
                BudgetTransactionCodeQueryMode::ExcludeType,
                BudgetTransactionType::Transfer));

            // Perform lookup
            budgetTransactionCodeLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>BudgetProposalSourceTmp</Name>
			<Table>BudgetProposalSourceTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BudgetModelDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetModelId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetModelType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetSubModelId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetTransactionCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@Budget:BudgetProposalWizard</Caption>
		<Pattern xmlns="">Wizard</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">Wizard</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<WindowType xmlns="">Workspace</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>BudgetProposalConfigurationWizard</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>SummaryInformation</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>SummaryInformationTabHelpText</Name>
								<ExtendedStyle>staticText_defaultFont</ExtendedStyle>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>@Budget:ProposalWizardSummaryInformationText</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SummaryDetailsGroup</Name>
								<Pattern>Custom</Pattern>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Name</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@FieldDescriptions_Budgeting:BudgetProposalConfigurationWizard_Name</HelpText>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<Alignment>Left</Alignment>
										<ExtendedDataType>Description</ExtendedDataType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>StartDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@FieldDescriptions_Budgeting:BudgetProposalConfigurationWizard_StartDate</HelpText>
										<Type>Date</Type>
										<FormControlExtension
											i:nil="true" />
										<Alignment>Left</Alignment>
										<ExtendedDataType>FromDate</ExtendedDataType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>EndDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@FieldDescriptions_Budgeting:BudgetProposalConfigurationWizard_EndDate</HelpText>
										<Type>Date</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>ToDate</ExtendedDataType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SourceTransactions</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@FieldDescriptions_Budgeting:BudgetProposalConfigurationWizard_SourceTransactions</HelpText>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<EnumType>BudgetSourceTransactions</EnumType>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>BudgetAsOfDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@FieldDescriptions_Budgeting:BudgetProposalConfigurationWizard_BudgetAsOfDate</HelpText>
										<Type>Date</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>BudgetAsOfDate</ExtendedDataType>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>@Budget:ProposalWizardSummaryInformation</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>DetailedInputs</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>DetailedInputsTabHelpText</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ExtendedStyle>staticText_defaultFont</ExtendedStyle>
								<Type>StaticText</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>@Budget:ProposalWizardDetailedInputsBudgetText</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>DetailedInputsGroup</Name>
								<Pattern>Custom</Pattern>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SourceGenJourAccountTypeGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormListViewControl">
												<Name>SourceGenJourAccountTypeControl</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>ListView</Type>
												<FormControlExtension
													i:nil="true" />
												<CheckBox>Yes</CheckBox>
												<ShowSelAlways>No</ShowSelAlways>
												<SingleSelection>No</SingleSelection>
												<ViewType>List</ViewType>
											</AxFormControl>
										</Controls>
										<Caption>@SYS111239</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>BudgetSources</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormActionPaneControl">
												<Name>ProposalSourceActionPane</Name>
												<Type>ActionPane</Type>
												<WidthMode>SizeToContent</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormActionPaneTabControl">
														<Name>ProposalSourceActionPaneTab</Name>
														<Type>ActionPaneTab</Type>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls />
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonGroupControl">
														<Name>ProposalSourceCommandButtonGroup</Name>
														<Type>ButtonGroup</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormCommandButtonControl">
																<Name>ProposalSourceNew</Name>
																<AllowEdit>No</AllowEdit>
																<Type>CommandButton</Type>
																<FormControlExtension
																	i:nil="true" />
																<Command>New</Command>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormCommandButtonControl">
																<Name>ProposalSourceDelete</Name>
																<AllowEdit>No</AllowEdit>
																<Type>CommandButton</Type>
																<FormControlExtension
																	i:nil="true" />
																<Command>DeleteRecord</Command>
															</AxFormControl>
														</Controls>
														<DataSource>BudgetProposalSourceTmp</DataSource>
													</AxFormControl>
												</Controls>
												<DataSource>BudgetProposalSourceTmp</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGridControl">
												<Name>ProposalSourceGrid</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HeightMode>SizeToContent</HeightMode>
												<Type>Grid</Type>
												<WidthMode>SizeToContent</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>BudgetProposalSource_BudgetModelId</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>editBudgetModel</DataMethod>
														<DataSource>BudgetProposalSourceTmp</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormReferenceGroupControl">
														<Name>BudgetProposalSourceTmp_BudgetTransactionCode</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>ReferenceGroup</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls />
														<DataSource>BudgetProposalSourceTmp</DataSource>
														<ReferenceField>BudgetTransactionCode</ReferenceField>
													</AxFormControl>
												</Controls>
												<DataSource>BudgetProposalSourceTmp</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>DetailedInputs_StartDate</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Date</Type>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>FromDate</ExtendedDataType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>DetailedInputs_EndDate</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Date</Type>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>ToDate</ExtendedDataType>
											</AxFormControl>
										</Controls>
										<Caption>@Budget:SourceBudget</Caption>
										<DataSource>BudgetProposalSourceTmp</DataSource>
									</AxFormControl>
								</Controls>
								<Style>Card</Style>
							</AxFormControl>
						</Controls>
						<AllowUserSetup>No</AllowUserSetup>
						<ArrangeMethod>None</ArrangeMethod>
						<Caption>@Budget:ProposalWizardDetailedInputs</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Output</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>OutputTabHelpText</Name>
								<ExtendedStyle>staticText_defaultFont</ExtendedStyle>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>@Budget:ProposalWizardOutputTabText</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>BudgetOutputGroup</Name>
								<Pattern>Custom</Pattern>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>OutputGroup_BudgetModel</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>BudgetModelId</ExtendedDataType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>OutputGroup_BudgetTransactionCodeGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ReferenceGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<HideIfEmpty>No</HideIfEmpty>
										<ExtendedDataType>BudgetTransactionCodeRecId</ExtendedDataType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>OutputGroup_BudgetTransactionCode</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>BudgetTransactionCodeRecId</ExtendedDataType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Output_StartDate</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Date</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>FromDate</ExtendedDataType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Output_EndDate</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Date</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>ToDate</ExtendedDataType>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>@Budget:ProposalWizardOutput</Caption>
					</AxFormControl>
				</Controls>
				<ShowTabs>No</ShowTabs>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>