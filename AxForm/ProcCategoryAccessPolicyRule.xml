<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProcCategoryAccessPolicyRule</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ProcCategoryAccessPolicyRule extends FormRun
{
    SysPolicyRule                   sysPolicyRule;
    RefRecID                        policyRuleTypeIndex;
    RefRecID                        policyIndex;
    EcoResCategoryHierarchy         selectedCategoryHierarchy;
    EcoResCategoryTreeDatasource    hierarchyTree;
}
]]></Source>
			</Method>
			<Method>
				<Name>addSelectedCategoryAndAncestors</Name>
				<Source><![CDATA[
    void addSelectedCategoryAndAncestors()
    {
        FormTreeItem                    formTreeItem;
        EcoResCategoryId                ecoResSelectedCategoryId;
        EcoResCategory                  ecoResCategorySelected;
        EcoResCategory                  selectedCategoryAndAncestors, selectedCategoryDescendants;
        ProcCategoryTmpAllowedCategory  tmpProcCategoryTmpAllowedCategory;
        int                             idxSelection = ctrlFormTree.getFirstSelected();

        tmpProcCategoryTmpAllowedCategory.setTmp();

        while (idxSelection)
        {
            formTreeItem             = ctrlFormTree.getItem(idxSelection);
            ecoResSelectedCategoryId = formTreeItem.data();
            ecoResCategorySelected   = EcoResCategory::find(ecoResSelectedCategoryId);

            tmpProcCategoryTmpAllowedCategory.setTmpData(procCategoryTmpAllowedCategory);

            while select RecId, Name from selectedCategoryAndAncestors
                where selectedCategoryAndAncestors.NestedSetLeft <= ecoResCategorySelected.NestedSetLeft
                    && selectedCategoryAndAncestors.NestedSetRight >= ecoResCategorySelected.NestedSetRight
                    && selectedCategoryAndAncestors.CategoryHierarchy == ecoResCategorySelected.CategoryHierarchy
            {
                select firstonly RecId from tmpProcCategoryTmpAllowedCategory
                    where tmpProcCategoryTmpAllowedCategory.Category == selectedCategoryAndAncestors.RecId;

                if (tmpProcCategoryTmpAllowedCategory.RecId == 0)
                {
                    tmpProcCategoryTmpAllowedCategory.initValue();
                    tmpProcCategoryTmpAllowedCategory.Category          = selectedCategoryAndAncestors.RecId;
                    tmpProcCategoryTmpAllowedCategory.CategoryName      = selectedCategoryAndAncestors.Name;
                    tmpProcCategoryTmpAllowedCategory.AccessPolicyRule  = sysPolicyRule.RecId;
                    tmpProcCategoryTmpAllowedCategory.insert();
                }
            }

            if (addSubtree.checked())
            {
                while select RecId, Name from selectedCategoryDescendants
                    where selectedCategoryDescendants.NestedSetLeft > ecoResCategorySelected.NestedSetLeft
                        && selectedCategoryDescendants.NestedSetRight < ecoResCategorySelected.NestedSetRight
                        && selectedCategoryDescendants.CategoryHierarchy == ecoResCategorySelected.CategoryHierarchy
                {
                    select firstonly RecId from tmpProcCategoryTmpAllowedCategory
                        where tmpProcCategoryTmpAllowedCategory.Category == selectedCategoryDescendants.RecId;

                    if (tmpProcCategoryTmpAllowedCategory.RecId ==0)
                    {
                        tmpProcCategoryTmpAllowedCategory.initValue();
                        tmpProcCategoryTmpAllowedCategory.Category          = selectedCategoryDescendants.RecId;
                        tmpProcCategoryTmpAllowedCategory.CategoryName      = selectedCategoryDescendants.Name;
                        tmpProcCategoryTmpAllowedCategory.AccessPolicyRule  = sysPolicyRule.RecId;
                        tmpProcCategoryTmpAllowedCategory.insert();
                    }
                }
            }

            idxSelection = ctrlFormTree.getNextSelected(idxSelection);
        }

        procCategoryTmpAllowedCategory_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord</Name>
				<Source><![CDATA[
    public void createRecord(str _formDataSourceName, boolean _append = false)
    {
        if ((_formDataSourceName != ecoResCategory_ds.name()) &&
            (_formDataSourceName != ecoResCategoryHierarchy_ds.name()))
        {
            super(_formDataSourceName, _append);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasRuleChanged</Name>
				<Source><![CDATA[
    private boolean hasRuleChanged()
    {
        ProcCategoryAccessPolicyParameter existingCategories;
        ProcCategoryTmpAllowedCategory    tempCategories;

        // The rule has not been created yet, so it cannot have changed
        if (sysPolicyRule.RecId == 0)
        {
            return false;
        }

        tempCategories.setTmp();
        tempCategories.setTmpData(procCategoryTmpAllowedCategory);

        // Check to see if categories have been added...
        select firstOnly recId from tempCategories
            where tempCategories.AccessPolicyRule == sysPolicyRule.RecId
            notExists join existingCategories
                where tempCategories.Category == existingCategories.ProcurementCategory
                    && existingCategories.ProcurementCategoryAccessPolicyRule == tempCategories.AccessPolicyRule;

        if (tempCategories.RecId)
        {
            return true; // categories added
        }

        // ...or removed.  We would do the same thing here as above to make one nice join, except for this AX limitation:
        // "InMemory temporary tables must be the outer tables when they are joined to a TempDB table or permanent table."
        while select recId from existingCategories
            where existingCategories.ProcurementCategoryAccessPolicyRule == sysPolicyRule.RecId
        {
            select firstOnly recId from tempCategories
                where tempCategories.Category == existingCategories.ProcurementCategory
                    && tempCategories.AccessPolicyRule == sysPolicyRule.RecId;

            if (!tempCategories.recId)
            {
                return true; // categories removed
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        SysPolicyRule tempSysPolicyRule;
        utcdatetime   utcMinValue = DateTimeUtil::minValue();
        utcdatetime   utcMaxValue = DateTimeUtil::maxValue();
        utcdatetime   maxValidToUTCDateTime;

        super();

        if (!element.args().caller())
        {
            throw error(Error::missingFormActiveBuffer(element.name()));
        }

        tempSysPolicyRule     = element.args().record();
        policyRuleTypeIndex   = str2int64(element.args().parm());
        policyIndex           = element.args().caller().getPolicyIndex();

        select firstonly forupdate validTimeState(utcMinValue, utcMaxValue) sysPolicyRule
                where sysPolicyRule.RecId == tempSysPolicyRule.RecId;

        if (sysPolicyRule.RecId == 0) // This is a new rule
        {
            maxValidToUTCDateTime =  DateTimeUtil::newDateTime(DateTimeUtil::date(utcMaxValue),
                                                               DateTimeUtil::time(utcMaxValue),
                                                               DateTimeUtil::getUserPreferredTimeZone());

            maxValidToUTCDateTime = (maxValidToUTCDateTime > utcMaxValue) ? utcMaxValue : maxValidToUTCDateTime;

            // Seed the rule fields, but don't insert yet
            sysPolicyRule.initValue();
            sysPolicyRule.Policy         = policyIndex;
            sysPolicyRule.PolicyRuleType = policyRuleTypeIndex;
            sysPolicyRule.ValidFrom      = element.args().caller().getDefaultStartDate(policyIndex, policyRuleTypeIndex);
            sysPolicyRule.ValidTo        = maxValidToUTCDateTime;
        }
        else // This is an existing rule
        {
            // Populate the exiting category list
            element.initializeSelectedCategories(sysPolicyRule.RecId);

            // If the record is PAST (expired) or PRESENT (active), neither of the dates are editable.
            //   Why?  If PAST, changing is never allowed, period.
            //   If PRESENT, ValidFrom changes are handled by creating a new rule and ValidTo changes
            //   are handled by the shorten/lengthen rule duration button in correction mode
            //   If FUTURE, we can safely update (correct) the dates on the current rule
            if (sysPolicyRule.ValidFrom <= DateTimeUtil::utcNow())
            {
                validFromDate.allowEdit(false);
                validToDate.allowEdit(false);
            }

            // If the policy rule has expired (PAST), then disable ALL editing & hide the save button
            if (sysPolicyRule.ValidTo <= DateTimeUtil::utcNow())
            {
                isInherited.allowEdit(false);

                ctrlFormTree.enabled(false);
                categoryTreeButtonGroup.enabled(false);
                selectedCategoriesGrid.allowEdit(false);

                saveAccessPolicyRule.visible(NoYes::No);
                addSubtree.enabled(NoYes::No);
            }
        }

        // Initialize control values with the new or existing rule values now that we have them
        validFromDate.dateTimeValue(sysPolicyRule.ValidFrom);
        validToDate.dateTimeValue(sysPolicyRule.ValidTo);
        isInherited.value(sysPolicyRule.IsInherited);

        // Initialize category tree
        selectedCategoryHierarchy = EcoResCategoryHierarchy::find(EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Procurement).CategoryHierarchy);
        ecoResCategoryHierarchy_ds.query().dataSourceTable(tablenum(EcoResCategoryHierarchy)).addRange(fieldnum(EcoResCategoryHierarchy, RecId)).value(queryValue(selectedCategoryHierarchy.RecId));
        element.initializeCategoryTree();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCategoryTree</Name>
				<Source><![CDATA[
    public void initializeCategoryTree()
    {
        EcoResCategory root = EcoResCategory::getRoot(selectedCategoryHierarchy.RecId);

        //tree view
        hierarchyTree = new EcoResCategoryTreeDatasource(ecoResCategory_ds,
                                                         ctrlFormTree,
                                                         fieldnum(EcoResCategory, RecId),
                                                         fieldnum(EcoResCategory, ParentCategory),
                                                         fieldnum(EcoResCategory, Name),
                                                         false,
                                                         true,
                                                         0,
                                                         selectedCategoryHierarchy,
                                                         ecoResCategoryHierarchy_ds);

        hierarchyTree.initRoot(root.Name, root.RecId, hierarchyTree.image());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSelectedCategories</Name>
				<Source><![CDATA[
    private void initializeSelectedCategories(RefRecId _sysPolicyRuleRecId)
    {
        ProcCategoryAccessPolicyParameter catAccessPolicyParameter;
        EcoResCategory                    selectedCategories;

        insert_recordset procCategoryTmpAllowedCategory (Category, CategoryName, AccessPolicyRule)
            select RecId, Name from selectedCategories
                join ProcurementCategoryAccessPolicyRule from catAccessPolicyParameter
                    where catAccessPolicyParameter.ProcurementCategoryAccessPolicyRule == _sysPolicyRuleRecId
                        && catAccessPolicyParameter.ProcurementCategory == selectedCategories.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeSelectedCategoryAndDescendants</Name>
				<Source><![CDATA[
    public void removeSelectedCategoryAndDescendants()
    {
        EcoResCategory                 ecoResCategorySelected;
        EcoResCategory                 selectedCategoryAndDescendants;
        ProcCategoryTmpAllowedCategory tmpProcCategoryTmpAllowedCategory;
        ProcCategoryTmpAllowedCategory selectedCategory;

        tmpProcCategoryTmpAllowedCategory.setTmp();
        tmpProcCategoryTmpAllowedCategory.setTmpData(procCategoryTmpAllowedCategory);

        ttsbegin;

        selectedCategory = getFirstSelection(procCategoryTmpAllowedCategory_ds);

        while (selectedCategory)
        {
            ecoResCategorySelected = EcoResCategory::find(selectedCategory.Category);

            delete_from tmpProcCategoryTmpAllowedCategory
                    exists join RecId from selectedCategoryAndDescendants
                        where selectedCategoryAndDescendants.RecId == tmpProcCategoryTmpAllowedCategory.Category
                            && selectedCategoryAndDescendants.NestedSetLeft >= ecoResCategorySelected.NestedSetLeft
                            && selectedCategoryAndDescendants.NestedSetRight <= ecoResCategorySelected.NestedSetRight
                            && selectedCategoryAndDescendants.CategoryHierarchy == ecoResCategorySelected.CategoryHierarchy;

            selectedCategory = procCategoryTmpAllowedCategory_ds.getNext();
        }

        ttscommit;

        procCategoryTmpAllowedCategory_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAccessPolicyParameter</Name>
				<Source><![CDATA[
    void saveAccessPolicyParameter()
    {
        RefRecId                          accessPolicyRuleId = sysPolicyRule.RecId;
        ProcCategoryAccessPolicyParameter categoryAccessPolicyParameter, categoryAccessPolicyParameterNew;
        ProcCategoryTmpAllowedCategory    tmpProcCategoryTmpAllowedCategory;

        if (sysPolicyRule.RecId != 0)
        {
            ttsbegin;

            // Update the temp table with the new policy rule ID
            update_recordset procCategoryTmpAllowedCategory
                    setting AccessPolicyRule = accessPolicyRuleId;

            // Delete the categories that are deleted from the temp table (or disallowed in this session)
            while select forupdate categoryAccessPolicyParameter
                    where categoryAccessPolicyParameter.ProcurementCategoryAccessPolicyRule == accessPolicyRuleId
            {
                select firstonly RecId from tmpProcCategoryTmpAllowedCategory
                        where tmpProcCategoryTmpAllowedCategory.Category == categoryAccessPolicyParameter.ProcurementCategory
                            && tmpProcCategoryTmpAllowedCategory.AccessPolicyRule == categoryAccessPolicyParameter.ProcurementCategoryAccessPolicyRule;

                if (tmpProcCategoryTmpAllowedCategory.RecId == 0)
                {
                    categoryAccessPolicyParameter.delete();
                }
            }

            // Add the categories that are added from the temp table (or allowed in this session)
            insert_recordset categoryAccessPolicyParameterNew (ProcurementCategory, ProcurementCategoryAccessPolicyRule)
                    select Category, accessPolicyRuleId from procCategoryTmpAllowedCategory
                        notexists join categoryAccessPolicyParameter
                            where categoryAccessPolicyParameter.ProcurementCategory == procCategoryTmpAllowedCategory.Category
                                && categoryAccessPolicyParameter.ProcurementCategoryAccessPolicyRule == procCategoryTmpAllowedCategory.AccessPolicyRule;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAccessPolicyRule</Name>
				<Source><![CDATA[
    void saveAccessPolicyRule()
    {
        utcdatetime utcNow  = DateTimeUtil::utcNow();
        utcdatetime validFromUTCDateTime, validToUTCDateTime;

        // Convert local time (displayed in the UtcDateTimeEdit control) to UTC time (to be stored in the DB)
        validToUTCDateTime = DateTimeUtil::removeTimeZoneOffset(ValidToDate.dateTimeValue(), DateTimeUtil::getUserPreferredTimeZone());

        // Don't allow an expiration date in the past
        if (validToUTCDateTime <= utcNow)
        {
            error("@SYS136921");
            return;
        }

        // Convert local time (displayed in the UtcDateTimeEdit control) to UTC time (to be stored in the DB)
        validFromUTCDateTime = DateTimeUtil::removeTimeZoneOffset(validFromDate.dateTimeValue(), DateTimeUtil::getUserPreferredTimeZone());

        // We give the user a 1 minute grace period to enter data for a new rule, and then we want to
        // correct the effective date because they really shouldn't be creating past-effective rules
        if (validFromUTCDateTime <= DateTimeUtil::addMinutes(utcNow, -1) && sysPolicyRule.RecId == 0)
        {
            // Policy rule start date is in the past.  This is not allowed.
            // Would you like to use the current date and time?
            if (Box::okCancel("@SYS138421", DialogButton::Ok) == DialogButton::Ok)
            {
                validFromUTCDateTime = utcNow;
            }
            else
            {
                return;
            }
        }

        ttsbegin;

        // The tricky part here is if they have changed any rule DATA (categories)
        // for an ACTIVE, EXISTING rule, we need to expire the current rule and
        // create a NEW one to retain the historical records of the old rule.
        if (sysPolicyRule.RecId != 0
                && validFromUTCDateTime <= utcNow
                && validToUTCDateTime >= utcNow
                && element.hasRuleChanged())
        {
            sysPolicyRule.delete();

            // Now that the rule is expired, we need to grab the expiration date of the
            // expired rule so we can use it to set the effective date of the new rule
            validFromUTCDateTime = sysPolicyRule.ValidTo;
            sysPolicyRule.clear();
        }

        sysPolicyRule.Policy            = policyIndex;
        sysPolicyRule.PolicyRuleType    = policyRuleTypeIndex;
        sysPolicyRule.ValidFrom         = validFromUTCDateTime;
        sysPolicyRule.ValidTo           = validToUTCDateTime;
        sysPolicyRule.IsInherited       = isInherited.value();

        if (sysPolicyRule.validateWrite())
        {
            sysPolicyRule.validTimeStateUpdateMode(ValidTimeStateUpdate::EffectiveBased);
            sysPolicyRule.write(); // Finally insert or update the rule values to the DB
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAccessPolicyRuleAndParameter</Name>
				<Source><![CDATA[
    void saveAccessPolicyRuleAndParameter()
    {
        ttsbegin;

        // Save the policy rule
        element.saveAccessPolicyRule();

        // Save categories allowed for the rule
        if (sysPolicyRule.RecId != 0)
        {
            element.saveAccessPolicyParameter();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFromDate</Name>
				<Source><![CDATA[
    public edit validFromDateTime setFromDate(boolean _set, validFromDateTime _dateTime)
    {
        if (_set)
        {
            sysPolicyRule.ValidFrom = _dateTime;
        }

        _dateTime = sysPolicyRule.ValidFrom;

        return _dateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setToDate</Name>
				<Source><![CDATA[
    public edit validToDateTime setToDate(boolean _set, validToDateTime _dateTime)
    {
        if (_set)
        {
            sysPolicyRule.ValidTo = _dateTime;
        }

        _dateTime = sysPolicyRule.ValidTo;

        return _dateTime;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>ctrlFormTree</Name>
				<Type>Tree</Type>
				<Methods>
					<Method>
						<Name>expanding</Name>
						<Source><![CDATA[
        public boolean expanding(int _idx, FormTreeExpand _action, anytype _data)
        {
            boolean ret;

            ret = super(_idx, _action, _data);
            hierarchyTree.expanding(_idx, _action, _data);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Add</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            element.addSelectedCategoryAndAncestors();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Remove</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            element.removeSelectedCategoryAndDescendants();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SaveAccessPolicyRule</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            element.saveAccessPolicyRuleAndParameter();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>EcoResCategory</Name>
			<Table>EcoResCategory</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CategoryHierarchy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChangeStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Code</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultProjectGlobalCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultThreshold_PSN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsActive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsCategoryAttributesInherited</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsTangible</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Level</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NestedSetLeft</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NestedSetRight</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PKWiUCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>relationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>EcoResCategoryHierarchy</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources>
				<AxFormDataSourceDerived>
					<Name>EcoResCategory_PCClass</Name>
					<Table>PCClass</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ReuseEnabled</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
			</DerivedDataSources>
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>EcoResCategoryHierarchy</Name>
			<Table>EcoResCategoryHierarchy</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyModifier</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ProcCategoryTmpAllowedCategory</Name>
			<Table>ProcCategoryTmpAllowedCategory</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccessPolicyRule</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Category</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CategoryName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreateDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FriendlyName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastModifiedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LegalEntityName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Status</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS304917</Caption>
		<DialogSize xmlns="">Full</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<Height xmlns="">0</Height>
		<HeightMode xmlns="">Column</HeightMode>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<StatusBarStyle xmlns="">SimpleWithoutClose</StatusBarStyle>
		<Style xmlns="">Dialog</Style>
		<Width xmlns="">700</Width>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>SysPolicyRule</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormDateTimeControl">
						<Name>ValidFromDate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>429496729</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>DateTime</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>setFromDate</DataMethod>
						<Label>@SYS35161</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateTimeControl">
						<Name>ValidToDate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>858993458</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>DateTime</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>setToDate</DataMethod>
						<Label>@SYS102701</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>IsInherited</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1288490187</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@SYS310742</HelpText>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS310741</Label>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Caption>@SYS304921</Caption>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CategoryPolicy</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>ListPanel</Pattern>
				<PatternVersion>1.3</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>AddChildCategoryGroup</Name>
						<Pattern>CustomFilters</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>Group</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>AddSubtree</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@SYS328707</HelpText>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS328706</Label>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<FrameType>None</FrameType>
						<Style>CustomFilter</Style>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>PickListGroup</Name>
						<ExtendedStyle>listPanel</ExtendedStyle>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>AvailableCategories</Name>
								<ElementPosition>429496729</ElementPosition>
								<ExtendedStyle>listPanel_availPanel</ExtendedStyle>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormTreeControl">
										<Name>ctrlFormTree</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Tree</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<SingleSelection>No</SingleSelection>
									</AxFormControl>
								</Controls>
								<Caption>@SYS304923</Caption>
								<ViewEditMode>View</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>categoryTreeButtonGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>858993458</ElementPosition>
								<ExtendedStyle>listPanel_buttonPanel</ExtendedStyle>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>Add</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@SYS304925</HelpText>
										<NeededPermission>Create</NeededPermission>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>ImageOnly</ButtonDisplay>
										<NormalImage>MoveRight</NormalImage>
										<Text>@SYS2318</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>Remove</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@SYS304926</HelpText>
										<NeededPermission>Delete</NeededPermission>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>ImageOnly</ButtonDisplay>
										<NormalImage>MoveLeft</NormalImage>
										<Text>@SYS311855</Text>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SelectedCategoriesGroup</Name>
								<ElementPosition>1288490187</ElementPosition>
								<ExtendedStyle>listPanel_selPanel</ExtendedStyle>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>SelectedCategoriesGrid</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1342177278</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Grid</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>ProcCategoryTmpAllowedCategory_CategoryName</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>CategoryName</DataField>
												<DataSource>ProcCategoryTmpAllowedCategory</DataSource>
											</AxFormControl>
										</Controls>
										<DataSource>ProcCategoryTmpAllowedCategory</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@SYS304927</Caption>
								<ViewEditMode>View</ViewEditMode>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<Columns>3</Columns>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<Caption>@SYS304922</Caption>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Left>0</Left>
				<Top>0</Top>
				<TopMode>BottomEdge</TopMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>SaveAccessPolicyRule</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Close</Name>
						<ElementPosition>2013265918</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Columnspace>5</Columnspace>
				<ColumnspaceMode>Fixed</ColumnspaceMode>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>