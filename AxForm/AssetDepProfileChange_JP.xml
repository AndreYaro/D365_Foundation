<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>AssetDepProfileChange_JP</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
    [Form]
    public class AssetDepProfileChange_JP extends FormRun
    {
        private AssetReasonCodeAssetDepProfileChange_JP assetReasonCode;
        private AssetParameters assetParameters;
        private boolean reasonPrompted;

        AssetDepBookMap_JP                  assetDepBookMap;
        AssetDepMethodChangeSettings_JP     changeSettings;
        AssetDepProfileChangeOperator_JP    changeOperator;
        AssetType                           assetType;
        boolean                             isChangeAvailable;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        AssetDepreciationMethod     defaultDepMethod;

        if (!element.args() || element.args().dataset() != tableNum(AssetBook))
        {
            throw error(strFmt("@SYS25516",element.name()));
        }

        assetDepBookMap = element.args().record();
        defaultDepMethod = assetDepBookMap.AssetDepBookMap_JP::depreciationProfileOnDate(dateNull()).Method;
        assetType = AssetGroup::find(assetDepBookMap.AssetGroup).AssetType;
        changeSettings = AssetDepMethodChangeSettings_JP::construct(assetType);
        changeOperator  = new AssetDepProfileChangeOperator_JP(changeSettings);
        isChangeAvailable = (assetDepBookMap.AssetStatus == AssetStatus::Open
            && (changeSettings.enabled(defaultDepMethod)
                || AssetDepProfileChange_JP::exist(assetDepBookMap.TableId, assetDepBookMap.RecId)));

        super();

        AssetDepProfileChange_JP_ds.object(fieldNum(AssetDepProfileChange_JP, IsUseEquallyDividedFormula)).visible(
            changeSettings.isUseEquallyDividedFormulaEnabledMethod(defaultDepMethod));
        if (!isChangeAvailable)
        {
            AssetDepProfileChange_JP_ds.allowCreate(false);
            AssetDepProfileChange_JP_ds.allowDelete(false);
            AssetDepProfileChange_JP_ds.allowEdit(false);
            UpdateServiceLifeButton.enabled(false);
        }

        if (AssetReasonCodeAssetDepProfileChange_JPFlight::instance().isEnabled())
        {
            assetParameters = AssetParameters::find();
            assetReasonCode = AssetReasonCodeAssetDepProfileChange_JP::construct();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the UI's state.
    /// </summary>
    void updateDesign()
    {
        AssetDepProfileChange_JP    lastDepProfileChange;
        AssetDepreciationProfile    prevDepProfile, curDepProfile;
        container                   methodChange;

        // disable all field by default
        AssetDepProfileChange_JP_ValidFrom.enabled(false);
        AssetDepProfileChange_JP_ValidTo.enabled(false);
        AssetDepProfileChange_JP_DepreciationProfile.enabled(false);
        AssetDepProfileChange_JP_IsUseEquallyDividedFormula.enabled(false);
        UpdateServiceLifeButton.enabled(false);
        AssetDepProfileChange_JP_ds.allowDelete(false);

        // Update UI for the default line
        lastDepProfileChange = AssetDepProfileChange_JP::findLast(assetDepBookMap.TableId, assetDepBookMap.RecId);
        if (!AssetDepProfileChange_JP.RecId
            || AssetDepProfileChange_JP.RecId == lastDepProfileChange.RecId)
        {
            AssetDepProfileChange_JP_ds.allowDelete(true);

            if (AssetDepProfileChange_JP.RecId && AssetDepProfileChange_JP.ValidFrom == dateNull())
            {
                AssetDepProfileChange_JP_ValidTo.enabled(AssetDepProfileChange_JP.ValidTo == dateNull() || AssetDepProfileChange_JP.ValidTo >= assetDepBookMap.LastDepreciationDate);
                AssetDepProfileChange_JP_ServiceLife.enabled(true);
                AssetDepProfileChange_JP_LifeTime.enabled(true);
            }
            else
            {
                AssetDepProfileChange_JP_DepreciationProfile.enabled(true);

                curDepProfile = AssetDepreciationProfile::find(AssetDepProfileChange_JP.DepreciationProfile);
                if (AssetDepProfileChange_JP.RecId)
                {
                    AssetDepProfileChange_JP_ValidFrom.enabled(AssetDepProfileChange_JP.ValidFrom > assetDepBookMap.LastDepreciationDate);
                    AssetDepProfileChange_JP_ValidTo.enabled(AssetDepProfileChange_JP.ValidTo >= assetDepBookMap.LastDepreciationDate);
                    prevDepProfile = AssetDepProfileChange_JP.findPrevious().DepreciationProfile();
                }
                else
                {
                    AssetDepProfileChange_JP_ValidFrom.enabled(true);
                    AssetDepProfileChange_JP_ValidTo.enabled(true);
                    prevDepProfile = AssetDepreciationProfile::find(lastDepProfileChange.DepreciationProfile);
                }
                if (prevDepProfile && curDepProfile)
                {
                    methodChange = [prevDepProfile.Method, curDepProfile.Method];

                    UpdateServiceLifeButton.enabled(changeSettings.isUpdateServiceLifeEnabled(methodChange));
                    AssetDepProfileChange_JP_IsUseEquallyDividedFormula.enabled(changeSettings.isUseEquallyDividedFormulaEnabled(methodChange));
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>AssetDepProfileChange_JP</Name>
				<Methods>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            AssetDepProfileChange_JP prevDepProfileChange;

            if (!AssetDepProfileChange_JP::exist(assetDepBookMap.TableId, assetDepBookMap.RecId))
            {
                this.createDefaultRecord();
                AssetDepProfileChange_JP_ds.research();
            }
            else
            {
                super(_append);

                prevDepProfileChange = AssetDepProfileChange_JP.findPrevious();
                AssetDepProfileChange_JP.ServiceLife = prevDepProfileChange.ServiceLife;
                AssetDepProfileChange_JP.LifeTime    = prevDepProfileChange.LifeTime;

                AssetDepProfileChange_JP_ValidFrom.setFocus();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            ttsBegin;

            // Update the life time rest if this is the current effective depreciation profile change
            AssetDepProfileChange_JP.updateLifeTimeRest(assetDepBookMap);

            if (AssetReasonCodeAssetDepProfileChange_JPFlight::instance().isEnabled())
            {
                if (assetParameters.AssetChanges==NoYes::Yes
                    && assetReasonCode.checkFields_JP(assetDepProfileChange_JP))
                {
                    assetReasonCode.runOperation();
                }
            }

            super();
            ttsCommit;

            if (AssetReasonCodeAssetDepProfileChange_JPFlight::instance().isEnabled())
            {
                //Clear reasonPrompted flag after all ttscommits
                reasonPrompted = false;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            AssetAmount                     acquisitionPrice;
            AssetAmount                     remainingBalance;
            AssetUndepBalanceLimit_JP       remainingBalanceRate;
            AssetDepProfileChange_JP        prevDepProfileChange;
            AssetDepProfileChangeArgs_JP    changeArgs;
            container                       methodChange;
            boolean                         ret;

            ret = super();

            // Do not need to validate if this is the default line
            prevDepProfileChange = AssetDepProfileChange_JP.findPrevious();
            if (ret && prevDepProfileChange)
            {
                methodChange = [prevDepProfileChange.depreciationProfile().Method, AssetDepProfileChange_JP.depreciationProfile().Method];
                if (methodChange == [AssetDepreciationMethod::OldDecliningBalance_JP, AssetDepreciationMethod::OldStraightLine_JP])
                {
                    [remainingBalanceRate, remainingBalance, acquisitionPrice] = AssetDepProfileChangeHelper_JP::calcRemainingBalanceRate(assetDepBookMap, AssetDepProfileChange_JP.ValidFrom);
                    if (!AssetDepProfileChangeHelper_JP::checkRemainingBalance(methodChange, acquisitionPrice, remainingBalance, true))
                    {
                        return false;
                    }
                }

                changeArgs = new AssetDepProfileChangeArgs_JP();
                changeArgs.initFromAssetDepBookMap(assetDepBookMap);
                changeArgs.parmFromDepProfileId(prevDepProfileChange.DepreciationProfile);
                changeArgs.parmToDepProfileId(AssetDepProfileChange_JP.DepreciationProfile);
                changeArgs.parmStartDate(AssetDepProfileChange_JP.ValidFrom);
                changeArgs.parmPrevEndDate(prevDepProfileChange.ValidTo);
                changeArgs.parmIsUseEquallyDividedFormula(AssetDepProfileChange_JP.IsUseEquallyDividedFormula);

                changeOperator.parmChangeArgs(changeArgs);
                ret = changeOperator.validate();
            }

            if (AssetReasonCodeAssetDepProfileChange_JPFlight::instance().isEnabled())
            {
                if (ret
                    && assetParameters.AssetChanges == NoYes::Yes
                    && assetDepProfileChange_JP.SourceTableId == tableNum(AssetBook))
                {
                    AssetBook assetBook = AssetBook::findByRecId(assetDepProfileChange_JP.SourceRecId);
                    assetReasonCode.parmAssetFieldChangesMap(assetBook);
                    boolean needReason = assetReasonCode.checkFields_JP(assetDepProfileChange_JP);

                    if (needReason && !reasonPrompted)
                    {
                        reasonPrompted = true;

                        ret = assetReasonCode.prompt();

                        if (!ret)
                        {
                            //If prompt is cancelled reset flag
                            reasonPrompted = false;
                        }
                    }
                }
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            if (isChangeAvailable)
            {
                element.updateDesign();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            QueryBuildDataSource            qbds;

            // Ensure the default depreciation profile line is there
            if (isChangeAvailable && !AssetDepProfileChange_JP::exist(assetDepBookMap.TableId, assetDepBookMap.RecId))
            {
                this.createDefaultRecord();
            }

            super();

            qbds = this.query().dataSourceTable(tableNum(AssetDepProfileChange_JP));
            if (qbds)
            {
                qbds.addRange(fieldNum(AssetDepProfileChange_JP, SourceTableId)).value(SysQuery::value(assetDepBookMap.TableId));
                qbds.addDynalink(
                    fieldNum(AssetDepProfileChange_JP, SourceRecId),
                    assetDepBookMap,
                    fieldName2id(assetDepBookMap.TableId, identifierStr(RecId)));
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>createDefaultRecord</Name>
						<Source><![CDATA[
        /// <summary>
        /// Creates the default depreciation profile change record based on fixed asset depreciation profile
        /// </summary>
        public void createDefaultRecord()
        {
            AssetDepProfileChangeArgs_JP    changeArgs;

            changeArgs = new AssetDepProfileChangeArgs_JP();
            changeArgs.initFromAssetDepBookMap(assetDepBookMap);
            changeArgs.normalize(changeSettings);
            changeOperator.parmChangeArgs(changeArgs);
            changeOperator.createDefault();
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            ttsbegin;

            if (AssetReasonCodeAssetDepProfileChange_JPFlight::instance().isEnabled())
            {
                if (assetParameters.AssetChanges == NoYes::Yes 
                    && assetDepProfileChange_JP.SourceTableId == tableNum(AssetBook))
                {
                    assetDepProfileChange_JP.NetBookValue = 0;
                    assetDepProfileChange_JP.LifeTime = 0;
                    assetDepProfileChange_JP.ServiceLife = 0;

                    AssetBook assetBook = AssetBook::findByRecId(assetDepProfileChange_JP.SourceRecId);
                    assetReasonCode.parmAssetFieldChangesMap(assetBook);
                    assetReasonCode.checkFields_JP(assetDepProfileChange_JP);

                    assetReasonCode.runOperation();
                }
            }

            super();
            ttscommit;

            if (AssetReasonCodeAssetDepProfileChange_JPFlight::instance().isEnabled())
            {
                //Clear reasonPrompted flag after all ttscommits
                reasonPrompted = false;
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>DepreciationProfile</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.updateDesign();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ValidFrom</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean                     ret;
                AssetDepBookTableMap_JP     assetDepBookTableMap;
                AssetDepreciationProfile    prevDepProfile, curDepProfile;
                AssetTableInterval          assetTableInterval;
                RefRecId                    calenderRecId;
                container                   methodChange;

                ret = super();

                if (ret && AssetDepProfileChange_JP.ValidFrom <= assetDepBookMap.LastDepreciationDate)
                {
                    ret = checkFailed("@SYS4003049");
                }
                if (ret)
                {
                    curDepProfile = AssetDepProfileChange_JP.DepreciationProfile();
                    prevDepProfile = AssetDepProfileChange_JP.findPrevious().DepreciationProfile();
                    if (prevDepProfile && curDepProfile)
                    {
                        methodChange = [prevDepProfile.Method, curDepProfile.Method];
                        if (changeSettings.isChangeInFirstYearForbidden(methodChange))
                        {
                            assetDepBookTableMap = AssetDepBookTableMap_JP::find(assetDepBookMap.AssetDepBookMap_JP::assetBookType(), assetDepBookMap.AssetBookId);
                            calenderRecId = assetDepBookTableMap.getFiscalCalendar_JP(assetDepBookMap.UsedFromDate);
                            assetTableInterval = AssetTableIntervalExt_JP::constructFromCalendarSchedule(
                                AssetDepProfileChange_JP.depreciationProfile(),
                                assetDepBookTableMap.TableId,
                                assetDepBookTableMap.RecId);
                            if (AssetDepProfileChange_JP.ValidFrom <= assetTableInterval.findLastDayOfYear(assetDepBookMap.UsedFromDate))
                            {
                                ret = checkFailed("@SYS4003050");
                            }

                            // Check start date matches the period start
                            calenderRecId = assetDepBookTableMap.getFiscalCalendar_JP(AssetDepProfileChange_JP.ValidFrom);
                            assetTableInterval = AssetTableIntervalExt_JP::constructFromCalendarSchedule(
                                AssetDepProfileChange_JP.depreciationProfile(),
                                assetDepBookTableMap.TableId,
                                assetDepBookTableMap.RecId);
                            if (ret && assetTableInterval.startOfPeriod(AssetDepProfileChange_JP.ValidFrom) != AssetDepProfileChange_JP.ValidFrom)
                            {
                                ret = checkFailed(strFmt("@SYS4003073", FiscalCalendar::find(calenderRecId).CalendarId));
                            }
                        }
                    }
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ValidTo</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                AssetDepBookTableMap_JP     assetDepBookTableMap;
                AssetTableInterval          assetTableInterval;
                RefRecId                    calenderRecId;
                boolean ret;

                ret = super();

                if (ret && AssetDepProfileChange_JP.ValidTo < assetDepBookMap.LastDepreciationDate)
                {
                    // The ending date must be the same date or later than the date for the depreciation transaction that was last posted.
                    ret = checkFailed("@SYS4003075");
                }
                else if (AssetDepProfileChange_JP.ValidTo != dateMax())
                {
                    assetDepBookTableMap = AssetDepBookTableMap_JP::find(assetDepBookMap.AssetDepBookMap_JP::assetBookType(), assetDepBookMap.AssetBookId);
                    calenderRecId = assetDepBookTableMap.AssetDepBookTableMap_JP::getFiscalCalendar_JP(AssetDepProfileChange_JP.ValidTo);
                    assetTableInterval = AssetTableIntervalExt_JP::constructFromCalendarSchedule(
                        AssetDepProfileChange_JP.depreciationProfile(),
                        assetDepBookTableMap.TableId,
                        assetDepBookTableMap.RecId);
                    if (assetTableInterval.endPeriod(AssetDepProfileChange_JP.ValidTo) != AssetDepProfileChange_JP.ValidTo)
                    {
                        ret = checkFailed(strFmt("@SYS4003074", FiscalCalendar::find(calenderRecId).CalendarId));
                    }
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>UpdateServiceLifeButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            if (AssetDepProfileChangeHelper_JP::updateServiceLife(assetDepBookMap, changeSettings, AssetDepProfileChange_JP.findPrevious(), AssetDepProfileChange_JP, true, true))
            {
                AssetDepProfileChange_JP.calcLifeTime();
                AssetDepProfileChange_JP_ds.refresh();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AssetDepProfileChange_JP_DepreciationProfile</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            AssetDepProfileChange_JP            prevDepProfileChange;
            AssetDepreciationProfile            depProfile;

            prevDepProfileChange = AssetDepProfileChange_JP.findPrevious();
            if (prevDepProfileChange)
            {
                depProfile = prevDepProfileChange.depreciationProfile();
            }
            else
            {
                depProfile = assetDepBookMap.depreciationProfile();
            }

            AssetDepProfileChangeHelper_JP::lookupToDepProfile(this, assetType, depProfile);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>AssetDepProfileChange_JP</Name>
			<Table>AssetDepProfileChange_JP</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DepreciationProfile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsUseEquallyDividedFormula</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LifeTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ServiceLife</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NetBookValue</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<ValidTimeStateAutoQuery>DateRange</ValidTimeStateAutoQuery>
			<ValidTimeStateUpdate>Correction</ValidTimeStateUpdate>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS4003053</Caption>
		<DataSource xmlns="">AssetDepProfileChange_JP</DataSource>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<Style xmlns="">SimpleList</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>429496729</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>UpdateServiceLifeButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>CommandButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS4003060</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CustomFilterGroup</Name>
				<ElementPosition>1288490187</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>AssetDepProfileChange_JP_ValidFrom</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>390451572</ElementPosition>
						<Enabled>No</Enabled>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Date</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>ValidFrom</DataField>
						<DataSource>AssetDepProfileChange_JP</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>AssetDepProfileChange_JP_ValidTo</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>585677358</ElementPosition>
						<Enabled>No</Enabled>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Date</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>ValidTo</DataField>
						<DataSource>AssetDepProfileChange_JP</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>AssetDepProfileChange_JP_DepreciationProfile</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>780903144</ElementPosition>
						<Enabled>No</Enabled>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>DepreciationProfile</DataField>
						<DataSource>AssetDepProfileChange_JP</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>AssetDepProfileChange_JP_ServiceLife</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1106279454</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<AllowNegative>No</AllowNegative>
						<DataField>ServiceLife</DataField>
						<DataSource>AssetDepProfileChange_JP</DataSource>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormIntegerControl">
						<Name>AssetDepProfileChange_JP_LifeTime</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Integer</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<AllowNegative>No</AllowNegative>
						<DataField>LifeTime</DataField>
						<DataSource>AssetDepProfileChange_JP</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>AssetDepProfileChange_JP_IsUseEquallyDividedFormula</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1757032074</ElementPosition>
						<Enabled>No</Enabled>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<BackgroundColor>WindowBackground</BackgroundColor>
						<DataField>IsUseEquallyDividedFormula</DataField>
						<DataSource>AssetDepProfileChange_JP</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>AssetDepProfileChange_JP_NetBookValue</Name>
						<ElementPosition>1952257860</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>NetBookValue</DataField>
						<DataSource>AssetDepProfileChange_JP</DataSource>
						<NoOfDecimals>-1</NoOfDecimals>
						<ShowZero>No</ShowZero>
					</AxFormControl>
				</Controls>
				<AlternateRowShading>No</AlternateRowShading>
				<DataSource>AssetDepProfileChange_JP</DataSource>
				<MultiSelect>No</MultiSelect>
				<ShowRowLabels>No</ShowRowLabels>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>