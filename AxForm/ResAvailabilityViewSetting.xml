<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ResAvailabilityViewSetting</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ResAvailabilityViewSetting extends FormRun
{
    #TimeConstants

    private ResAvailabilityViewSetting controller;
    private boolean enableHourScheduling;

    //To make 8:00 AM 60 seconds * 60 minutes * 8 hours = 28800 seconds
    private const TimeOfDay starTimeOfDay = 28800;
    private const TimeOfDay endTimeOfDay = #LastSecondOfTheDay;

}
]]></Source>
			</Method>
			<Method>
				<Name>availabilityViewSetting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the Availability view setting
    /// </summary>
    /// <param name = "_controller">Instance of <c>ResAvailabilityViewSetting</c></param>
    /// <returns>Instance of <c>ResAvailabilityViewSetting</c></returns>
    public ResAvailabilityViewSetting availabilityViewSetting(ResAvailabilityViewSetting _controller = controller)
    {
        controller = _controller;
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize form with values from the ResAvailabilityViewSetting controller
    /// </summary>
    public void init()
    {
        enableHourScheduling = ResUtil::getEnableHourSchedulingSetting();

        if (!enableHourScheduling)
        {
            Set enumSet= new Set(Types::Enum);
            enumSet.Add(AVTimeframeType::Day);
            enumSet.Add(AVTimeframeType::Week);
            enumSet.Add(AVTimeframeType::Month);
            enumSet.Add(AVTimeframeType::Quarter);
            enumSet.Add(AVTimeframeType::HalfYear);

            sysFormEnumComboBox::newParameters(element, element.controlId(
            formControlStr(ResAvailabilityViewSetting, Timescale)),
            enumNum(AVTimeframeType), enumSet);
        }
        super();

        Timescale.label("@SYS4008858");

        if (element.args())
        {
            if (!controller)
            {
                controller = element.args().caller() as ResAvailabilityViewSetting;
            }

            if (controller)
            {
                date startDate = DateTimeUtil::date(controller.StartDateTime());
                StartDateTime.dateTimeValue(DateTimeUtil::newDateTime(startDate, starTimeOfDay));

                date endDate = DateTimeUtil::date(controller.endDateTime());
                EndDateTime.dateTimeValue(DateTimeUtil::newDateTime(endDate, endTimeOfDay));
                if (!enableHourScheduling)
                {
                    Timescale.selection(controller.Timescale() - 1);
                }
                else
                {
                    Timescale.selection(controller.Timescale());
                }
                DisplayScheduleDescription.value(controller.ShowScheduleDescription());
                DisplayScheduleCapacity.value(controller.ShowScheduleCapacity());
                CapacityAggregation.selection(controller.CapacityAggregation());
                DisplayScheduleCapacity.label(controller.CapacityToggleDescription());
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>StartDateTime</Name>
				<Type>DateTime</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Handle End date/time adjustment
        /// </summary>
        /// <returns>Modify operation result</returns>
        public boolean modified()
        {
            boolean ret = super();

            utcdatetime newValue = StartDateTime.dateTimeValue();

            if (ret && newValue > EndDateTime.dateTimeValue())
            {
                date newEndDate =  DateTimeUtil::date(StartDateTime.dateTimeValue());
                TimeOfDay endTime = DateTimeUtil::time(EndDateTime.dateTimeValue());
                EndDateTime.dateTimeValue(DateTimeUtil::newDateTime(newEndDate, endTime));
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EndDateTime</Name>
				<Type>DateTime</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Handle Start date/time adjustment
        /// </summary>
        /// <returns>Modify operation result</returns>
        public boolean modified()
        {
            boolean ret = super();

            utcdatetime newValue = EndDateTime.dateTimeValue();
            if (ret && newValue < StartDateTime.dateTimeValue())
            {
                date newStartDate =  DateTimeUtil::date(EndDateTime.dateTimeValue());
                TimeOfDay startTime = DateTimeUtil::time(StartDateTime.dateTimeValue());
                StartDateTime.dateTimeValue(DateTimeUtil::newDateTime(newStartDate, startTime));
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OKButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Applies the specified availability view setting
        /// </summary>
        public void clicked()
        {
            if (!controller)
            {
                controller = element.args().caller() as ResAvailabilityViewSetting;
            }

            if (controller)
            {
                controller.startDateTime(StartDateTime.dateTimeValue());
                controller.endDateTime(EndDateTime.dateTimeValue());
                if (!enableHourScheduling)
                {
                    controller.timescale(Timescale.selection() + 1);
                }
                else
                {
                    controller.timescale(Timescale.selection());
                }
                controller.showScheduleCapacity(DisplayScheduleCapacity.value());
                controller.showScheduleDescription(DisplayScheduleDescription.value());
                controller.capacityAggregation(CapacityAggregation.selection());
                controller.save();
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@Res:AvailabilityViewSettings</Caption>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>SettingsActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>SettingsButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls />
					</AxFormControl>
				</Controls>
				<Style>Strip</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ViewSettings</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>DateSettings</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormDateTimeControl">
								<Name>StartDateTime</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>DateTime</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@Res:FromDate</Label>
								<TimeSeconds>No</TimeSeconds>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateTimeControl">
								<Name>EndDateTime</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>DateTime</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@Res:ToDate</Label>
								<TimeSeconds>No</TimeSeconds>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ReservationSettings</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>Timescale</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ComboBox</Type>
								<FormControlExtension
									i:nil="true" />
								<EnumType>AVTimeframeType</EnumType>
								<Label>@SYS4008858</Label>
								<Selection>2</Selection>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>DisplayScheduleDescription</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1879048189</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS4009784</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>DisplayScheduleCapacity</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1533916890</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS4008832</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>CapacityAggregation</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ComboBox</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<EnumType>ResCapacityAggregation</EnumType>
								<Label>@Res:CapacityAggregation</Label>
								<Selection>1</Selection>
								<Items />
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>CommandButtons</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>