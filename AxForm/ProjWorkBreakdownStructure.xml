<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProjWorkBreakdownStructure</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ProjWorkBreakdownStructure extends FormRun implements OfficeIMenuCustomizer, OfficeITemplateCustomExporter
{
    private ProjTable               projTable;
    private SalesQuotationTable     salesQuotationTable;
    private ProjPlanVersionDetail   projPlanVersionDetail;
    private Hierarchy               hierarchy;
    private FormRun                 parentFormRun;
    [FormObservable]
    private HierarchyIdBase         currentHierarchyId;
    [FormObservable]
    private ProjWBSType             typeOfWBS;
    private boolean                 isPublished;
    private boolean                 hasPublished;
    private boolean                 hasDraft;
    private boolean                 isEnabled;
    private boolean                 showDifference;
    private boolean                 switchTab;    

    private ProjectWbsLockCheck     wbsLockInfo;

}
]]></Source>
			</Method>
			<Method>
				<Name>parmProjTable</Name>
				<Source><![CDATA[
    public ProjTable parmProjTable(ProjTable _projTable = projTable)
    {
        projTable = _projTable;
        return projTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesQuotationTable</Name>
				<Source><![CDATA[
    public SalesQuotationTable parmSalesQuotationTable(SalesQuotationTable _salesQuotationTable = salesQuotationTable)
    {
        salesQuotationTable = _salesQuotationTable;
        return salesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentHierarchyId</Name>
				<Source><![CDATA[
    public HierarchyIdBase parmCurrentHierarchyId(HierarchyIdBase _currentHierarchyId = currentHierarchyId)
    {
        currentHierarchyId = _currentHierarchyId;
        return currentHierarchyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customizeMenuOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Customizes the options used to populate the Office Menu.
    /// </summary>
    /// <param name = "_menuOptions">The menu options to be customized.</param>
    public void customizeMenuOptions(OfficeMenuOptions _menuOptions)
    {
        if (typeOfWBS == ProjWBSType::Project)
        {
            // Clear the menu options which are driven by the root datasource of an entity, as some
            // of the of the options are valid for only certain journal types.
            ListIterator dataEntityIterator = new ListIterator(_menuOptions.dataEntityOptions());

            while (dataEntityIterator.more())
            {
                dataEntityIterator.delete();
            }

            DocuTemplate docuTemplate = DocuTemplate::findTemplate(OfficeAppApplicationType::Excel, resourceStr(ProjProjectWBSDraftExcelTemplate));

            if (docuTemplate)
            {
                OfficeTemplateExportMenuItem menuItem = OfficeTemplateExportMenuItem::constructWithDocuTemplate(docuTemplate, docuTemplate.TemplateID);

                _menuOptions.customMenuItems().addEnd(menuItem);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitialTemplateFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the set of initial filters to be applied to the template.
    /// </summary>
    /// <returns>
    /// The Map of filters to apply.
    /// Keyed by AOT entity name.
    /// Values are all Microsoft.Dynamics.Platform.Integration.Office.FilterNode intances.
    /// </returns>
    /// <remarks>
    /// The filters supplied here will override any filters currently in the template.
    /// If no filter is suppled for a given entity, any filters currently in the template are retained.
    /// </remarks>
    public Map getInitialTemplateFilters(OfficeTemplateExportMenuItem _menuItem)
    {
        const str templateName = resourceStr(ProjProjectWBSDraftExcelTemplate);
        DocuTemplate template = DocuTemplate::findTemplate(OfficeAppApplicationType::Excel, templateName);
        str wbsEntity = tableStr(ProjProjectWBSDraftEntity);
        str projectEntity = tableStr(ProjectEntity);
        Map filtersToApply = new Map(Types::String, Types::Class);

        // Ensure the template was present
        if (template && template.TemplateID == templateName)
        {
            ExportToExcelFilterTreeBuilder filterBuilder = new ExportToExcelFilterTreeBuilder(projectEntity);

            var filter = filterBuilder.areEqual(fieldStr(ProjectEntity,ProjectID), projTable.ProjId);

            filtersToApply.insert(projectEntity, filter);

            filterBuilder = new ExportToExcelFilterTreeBuilder(wbsEntity);

            filter = filterBuilder.areEqual(fieldStr(ProjProjectWBSDraftEntity,ProjectID), projTable.ProjId);

            filtersToApply.insert(wbsEntity, filter);
        }

        return filtersToApply;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTemplateSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies any updates to the settings contained within the template for the specified menu item.
    /// </summary>
    /// <param name="_menuItem">The menu item.</param>
    /// <param name="_settingsManager">The <see cref="SettingsManager"/> to use when performing the updates.</param>
    void updateTemplateSettings(OfficeTemplateExportMenuItem _menuItem, Microsoft.Dynamics.Platform.Integration.Office.SettingsManager _settingsManager)
    {
        // No implementation details for this since we don't need to update the template settings
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
        isEnabled = true;
        parentFormRun = element.args().caller();

        hGridSchedule.parmState(HierarchicalGridControlState::Active);

        if ((parentFormRun && parentFormRun.name() == formstr(ProjWbsTemplate))
            || (parentFormRun && parentFormRun.name() == formstr(ProjABSTemplateCreate))
            || (element.args().menuItemName() == menuItemDisplayStr(PSAABSTemplate)))
        {
            typeOfWBS = ProjWBSType::Template;
            hierarchy = element.args().record();
            currentHierarchyId = hierarchy.HierarchyId;
        }
        else if (parentFormRun && parentFormRun.name() == formstr(DMFDataVizualization))
        {
            ProjProjectWBSDraftStaging  projectWBSDraft;
            ProjWBSTemplateTasksStaging templateWBS;
            ProjQuotationWbsStaging     quoteWBS;

            switch (element.args().dataset())
            {
                case tableNum(ProjWBSTemplateTasksStaging):
                    typeOfWBS = ProjWBSType::Template;
                    templateWBS = element.args().record();
                    currentHierarchyId = templateWBS.HierarchyId;
                    break;

                case tableNum(ProjProjectWBSDraftStaging):
                    typeOfWBS = ProjWBSType::Project;
                    projectWBSDraft = element.args().record();
                    projTable = ProjTable::find(projectWBSDraft.ProjectId);
                    this.selectProjectVersion();
                    this.checkIfWbsIsLocked();
                    
                    return;

                case tableNum(ProjQuotationWbsStaging):
                    typeOfWBS = ProjWBSType::ProjectQuotation;
                    quoteWBS = element.args().record();
                    salesQuotationTable = SalesQuotationTable::find(quoteWBS.QuotationId);

                    currentHierarchyId = HierarchyLinkTable::findRefTableRecId(tableNum(SalesQuotationTable), salesQuotationTable.RecId).HierarchyId;
                    break;
            }
        }
        else
        {
            projTable = this.getProjTableRecordFromCaller();
            if (projTable)
            {
                if (projTable.Status == ProjStatus::Completed)
                {
                    isEnabled = false;
                }
                boolean hasPublishedVersion   = false;
                typeOfWBS = ProjWBSType::Project;
                
                this.selectProjectVersion();      
                
                // Display warning if this project has outstanding extended fulfillment to be managed.
                boolean hasExtendedFulfillment = this.hasExtendedFulfillment();
                FulfillmentNotification.enabled(hasExtendedFulfillment);
                
                if (hasExtendedFulfillment)
                {
                    warning("@Res:FulfillmentNotificationWBSAlert");
                }
                                                  
                return;
            }
            else
            {
                hierarchy = element.args().record();
                currentHierarchyId = hierarchy.HierarchyId;
                HierarchyLinkTable hierarchyLinkTable = HierarchyLinkTable::findByHierarchyId(currentHierarchyId);
                if (hierarchyLinkTable.refTableId == tableNum(SalesQuotationTable))
                {
                    typeOfWBS = ProjWBSType::ProjectQuotation;
                    salesQuotationTable = SalesQuotationTable::findRec(hierarchyLinkTable.RefRecId);
                }
            }
        }

        this.checkIfWbsIsLocked();

        this.updateControls();
        this.updateContext();                
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasExtendedFulfillment</Name>
				<Source><![CDATA[
    private boolean hasExtendedFulfillment()
    {
        ActivityRecId rootActivity = ActivityFacade::findActivityByProjectId(projTable.ProjId);
        
        ResExtendFulfillmentTable extendFulfillment;
        select firstonly extendFulfillment
            where extendFulfillment.RootActivity == rootActivity;

        return extendFulfillment ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfWbsIsLocked</Name>
				<Source><![CDATA[
    private void checkIfWbsIsLocked()
    {
        wbsLockInfo = ProjectWbsLockBox::wbsCheckOutInfoByHierarchy(currentHierarchyId);

        // if checked out and not published
        if (wbsLockInfo.isLocked() && !wbsLockInfo.isPublished())
        {
            isEnabled = false;
            info(strfmt("@ProjPlan:WbsCheckedOutMessage", wbsLockInfo.userName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateControls</Name>
				<Source><![CDATA[
    private void updateControls()
    {
        if (typeOfWBS == ProjWBSType::Project)
        {
            if (isPublished)
            {
                FormButtonControlCheckInCheckOut.text("@ProjPlan:CheckOut");
            }
            else
            {
                FormButtonControlCheckInCheckOut.text("@ProjPlan:CheckIn");
            }

            if (showDifference)
            {
                StatusString.text("@ProjPlan:ShowingDifference");
            }
            else
            {
                StatusString.text(enum2str(projPlanVersionDetail.VersionType));
            }

            FormButtonControlViewPublished.visible(!isPublished && hasPublished);
            FormButtonControlDiscardDraft.visible(!isPublished && hasPublished);
            FormButtonControlCheckInCheckOut.visible((projTable.Status != ProjStatus::Completed));
            FormButtonControlShowDifference.visible(!isPublished && hasPublished);
            FormButtonControlShowDifference.toggleValue(showDifference ? 1 : 0);

            TrackingViewsButton.visible(true);
            TrackingViewsButton.enabled(isPublished || hasPublished || (projTable.Status == ProjStatus::Completed));
            FulfillmentNotification.visible(true);
        }
        else
        {
            FormButtonControlCheckInCheckOut.visible(false);
            FormButtonControlViewPublished.visible(false);
            FormButtonControlDiscardDraft.visible(false);
            FormButtonControlShowDifference.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateContext</Name>
				<Source><![CDATA[
    private void updateContext()
    {
        var sessionContext = ProjWbsSessionContextDataContract::construct();
        sessionContext.parmIsPublished(isPublished);
        sessionContext.parmWBSType(typeOfWBS);
        sessionContext.parmHierarchyId(currentHierarchyId);
        sessionContext.parmHideDetailColumns(false);
        sessionContext.parmReadOnly(isEnabled);
        sessionContext.parmShowDifference(showDifference);
        sessionContext.parmSwitchTab(switchTab);
        hGridSchedule.parmSessionContext(sessionContext);
        hGridCostEstimate.parmSessionContext(sessionContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerText</Name>
				<Source><![CDATA[
    public display str headerText()
    {
        str headerStr;

        if (typeOfWBS == ProjWBSType::Template)
        {
            headerStr = strFmt("@SYS191501", currentHierarchyId, hierarchy.Name);
        }
        else if (typeOfWBS == ProjWBSType::ProjectQuotation)
        {
            headerStr = strFmt("@SYS191501", salesQuotationTable.QuotationId,
                                                      salesQuotationTable.QuotationName);
        }
        else
        {
            headerStr = projTable.projIdAndNameColumn();
        }

        return headerStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchyIdFromFormCaller</Name>
				<Source><![CDATA[
    private HierarchyIdBase getHierarchyIdFromFormCaller()
    {
        Args formArgs = element.args();
        HierarchyIdBase hierarchyId = "";

        if (formArgs)
        {
            hierarchyId = formArgs.parm();
        }
        return hierarchyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjTableRecordFromCaller</Name>
				<Source><![CDATA[
    private ProjTable getProjTableRecordFromCaller()
    {
        Args                formArgs = element.args();
        ProjTable           fromCaller;

        if (formArgs)
        {
            fromCaller = formArgs.record() as ProjTable;
            if (fromCaller)
            {
                return fromCaller;
            }
        }

        fromCaller = ProjPlanVersionDetail::getProjTableByHierarchyId(this.getHierarchyIdFromFormCaller());

        return fromCaller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectProjectVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates selected version record buffer.
    /// </summary>
    public void selectProjectVersion(boolean _selectPublished = false)
    {
        if (_selectPublished)
        {
            select firstonly projPlanVersionDetail
                order by projPlanVersionDetail.VersionId desc
                where projPlanVersionDetail.ProjId == projTable.ProjId
                    && projPlanVersionDetail.VersionType == ProjPlanVersionType::PublishedCurrent;
        }
        else
        {
            select firstonly projPlanVersionDetail
                order by projPlanVersionDetail.VersionId desc
                    where projPlanVersionDetail.ProjId == projTable.ProjId;
        }

        currentHierarchyId = projPlanVersionDetail.HierarchyId;

        this.checkIfWbsIsLocked();

        isPublished     = projPlanVersionDetail.VersionType == ProjPlanVersionType::PublishedCurrent;
        hasPublished    = ProjPlanVersionDetail::checkProjectHasPublishedHierarchy(projPlanVersionDetail.ProjId);
        hasDraft        = ProjPlanVersionDetail::findProjectDraftVersion(projPlanVersionDetail.ProjId) != null;

        this.updateContext();
        this.updateControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>toggleDifference</Name>
				<Source><![CDATA[
    public void toggleDifference()
    {
        showDifference = !showDifference;
        this.updateContext();
        this.updateControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchTab</Name>
				<Source><![CDATA[
    public void switchTab()
    {
        switchTab = !switchTab;

        this.updateContext();
        this.updateControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishWorkflowUponTaskDateChangeValidation</Name>
				<Source><![CDATA[
    private void publishWorkflowUponTaskDateChangeValidation()
    {
        // In the case of resource workflow is enabled, detect if user has made any date changes in any task upon publishes.
        // If so, publishing process will only be carry out if user confirms on resource request submission.
        List leafNodeTaskChangeList = new List(Types::Class);
        boolean taskDateIsChanged = ResRequestHelper::isProjectWBSTaskDateChanged(leafNodeTaskChangeList, projPlanVersionDetail.ProjId, projPlanVersionDetail.VersionId);
        boolean hasDraftAssignment = ProjPlanVersionAssignment::hasReservationByHierarchyId(leafNodeTaskChangeList, projPlanVersionDetail.HierarchyId);
        
        if (taskDateIsChanged || hasDraftAssignment)
        {
            ResWBSValidateAssignmentDateContext validateAssignmentContext = ResWBSValidateAssignmentDateContext::construct();
            validateAssignmentContext.leafNodeTaskChangesListParam(leafNodeTaskChangeList);
            validateAssignmentContext.selectionsReady += eventhandler(element.validateAssignmentDataReady);
            validateAssignmentContext.showForm();
        }
        else
        {
            element.processPublishVersion();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAssignmentDataReady</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logic will execute upon user commit to publish from the <c>ResWBSValidateAssignmentDate</c> form.
    /// </summary>
    /// <param name = "_context"><c>ResWBSValidateAssignmentDateContext</c> class.</param>
    private void validateAssignmentDataReady(ResWBSValidateAssignmentDateContext _context)
    {
        element.processPublishVersion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publishes current version.
    /// </summary>
    public void publishVersion()
    {
        if (projPlanVersionDetail.VersionType == ProjPlanVersionType::Draft)
        {
            if (ProjPlanVersionsManager::checkHasDeletedTasksWithActuals(currentHierarchyId))
            {
                showDifference = true;
                warning("@ProjPlan:TasksWithActualsDeleted");
                this.updateContext();
                this.updateControls();
            }
            else
            {
                if (ResRequestHelper::isWorkflowEnabled())
                {
                    element.publishWorkflowUponTaskDateChangeValidation();
                }
                else
                {
                    element.processPublishVersion();
                }
            }
        }
        else if (projPlanVersionDetail.VersionType == ProjPlanVersionType::PublishedCurrent)
        {
            if (!ProjPlanVersionDetail::findProjectDraftVersion(projPlanVersionDetail.ProjId))
            {
                ProjPlanVersionsManager::createDraftFromPublishedVersion(projPlanVersionDetail.ProjId, projPlanVersionDetail.VersionId);
            }

            element.selectProjectVersion();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPublishVersion</Name>
				<Source><![CDATA[
    private void processPublishVersion()
    {
        ProjectWbsUpdateEventHandler::removeLockForPublishedWbs(currentHierarchyId);

        ProjPlanVersionsManager::publishVersion(projPlanVersionDetail.ProjId, projPlanVersionDetail.VersionId);
        FormButtonControlCheckInCheckOut.text(enum2str(ProjPlanVersionType::PublishedCurrent));
        isPublished = true;
        hasDraft = false;
        showDifference = false;
        element.selectProjectVersion(true);
        this.updateContext();
        this.updateControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPublishVersionTaskResult</Name>
				<Source><![CDATA[
    private void processPublishVersionTaskResult(AsyncTaskResult _taskResult)
    {
        if (_taskResult)
        {
            System.Exception exception = _taskResult.getException();
            if (!exception)
            {
                this.selectProjectVersion();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        List dsList;
        ListEnumerator dsListEnumerator;
        FormDataSource formDS;
        FormRun callerForm = element.args().caller();

        super();

        // If the caller is a form, refresh
        if (callerForm)
        {
            // Project
            if (strCmp(callerForm.name(), formStr(ProjTable)) == 0)
            {
                callerForm.refreshDataSource();
            }

            // Project Quotation
            if (strCmp(callerForm.name(), formStr(SalesQuotationProjTable)) == 0)
            {
                if (formHasMethod(callerForm, identifierStr(doRefresh)))
                {
                    callerForm.doRefresh();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>TrackingViewsButton</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            //We do not want super to be called as we are running custom code here
            //super();
            Args        args;
            FormRun     projTrackingViews;

            args = new Args();
            args.caller(element);
            args.menuItemName("ProjTrackingViews");
            args.parm(ProjPlanVersionDetail::getOldDataModelPublishedHierarchyId(projPlanVersionDetail.HierarchyId));
            args.name(formstr(ProjTrackingViews));
            args.openMode(OpenMode::View);

            projTrackingViews = classFactory.formRunClass(args);
            projTrackingViews.init();
            projTrackingViews.run();
            projTrackingViews.wait();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FormButtonControlCheckInCheckOut</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.publishVersion();
         }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FormButtonControlViewPublished</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            showDifference = false;
            element.selectProjectVersion(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FormButtonControlDiscardDraft</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            boolean confirmed = Box::confirm("@ProjPlan:ConfirmDiscardDraft");
            if (confirmed)
            {
                showDifference = false;
                element.selectProjectVersion(true);
                ProjPlanVersionsManager::discardDraft(projPlanVersionDetail.ProjId);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FormButtonControlShowDifference</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.toggleDifference();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FulfillmentNotification</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (projTable)
            {
                Args args = new Args();
                args.record(projTable);
                args.caller(element);
                args.menuItemName(menuItemDisplayStr(ResExtendFulfillmentDetailsDialog));
                args.name(formStr(ResExtendFulfillmentDetailsDialog));
                args.openMode(OpenMode::View);
                FormRun formExtendFulfillmentDetailsDialog = classfactory.formRunClass(args);
                formExtendFulfillmentDetailsDialog.init();
                formExtendFulfillmentDetailsDialog.run();
                formExtendFulfillmentDetailsDialog.wait();

                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>tabPageSchedule</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();
            if (hGridCostEstimate.parmIsDirty())
            {
                hGridSchedule.parmState(HierarchicalGridControlState::Synchronize);
                hGridCostEstimate.parmState(HierarchicalGridControlState::Synchronize);
            }
            else
            {
                hGridSchedule.parmState(HierarchicalGridControlState::Active);
                hGridCostEstimate.parmState(HierarchicalGridControlState::Inactive);
            }

            // Disable scheduling when lockSchedulingTabOnly is true. This means the WBS is checkedout
            if (wbsLockInfo.isLocked() && !wbsLockInfo.isPublished())
            {
                isEnabled = false;
            }

            element.switchTab();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>hGridSchedule</Name>
				<Type>Custom</Type>
				<Methods>
					<Method>
						<Name>sync</Name>
						<Source><![CDATA[
        public CollectionDataContract sync(str _actions, str _interactionContext = "")
        {
            CollectionDataContract ret;

            ret = super(_actions, _interactionContext);
            hGridSchedule.parmState(HierarchicalGridControlState::Inactive);
            hGridCostEstimate.parmState(HierarchicalGridControlState::Active);
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>tabPageCost</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();

            if (hGridSchedule.parmIsDirty())
            {
                hGridCostEstimate.parmState(HierarchicalGridControlState::Synchronize);
                hGridSchedule.parmState(HierarchicalGridControlState::Synchronize);
            }
            else
            {
                hGridCostEstimate.parmState(HierarchicalGridControlState::Active);
                hGridSchedule.parmState(HierarchicalGridControlState::Inactive);
            }
            
            // Disable scheduling when lockSchedulingTabOnly is true. This means the WBS is checkedout
            if (wbsLockInfo.isLocked() && !wbsLockInfo.isPublished())
            {
                isEnabled = true;
            }

            element.switchTab();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>hGridCostEstimate</Name>
				<Type>Custom</Type>
				<Methods>
					<Method>
						<Name>sync</Name>
						<Source><![CDATA[
        public CollectionDataContract sync(str _actions, str _interactionContext = "")
        {
            CollectionDataContract ret;

            ret = super(_actions, _interactionContext);
            hGridCostEstimate.parmState(HierarchicalGridControlState::Inactive);
            hGridSchedule.parmState(HierarchicalGridControlState::Active);
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@SYS338946</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>NavButtons</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TrackingViewsButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@Proj:TrackingViews</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>FormButtonGroupControlPublish</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>FormButtonControlCheckInCheckOut</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@ProjPlan:CheckIn</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>FormButtonControlViewPublished</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@ProjPlan:ShowPublished</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>FormButtonControlDiscardDraft</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@ProjPlan:DiscardDraft</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>FormButtonControlShowDifference</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@ProjPlan:ShowDifference</Text>
								<ToggleButton>Check</ToggleButton>
							</AxFormControl>
						</Controls>
						<Caption>@ProjPlan:Checkin</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ResourceFulfillment</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>FulfillmentNotification</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Enabled>No</Enabled>
								<Type>Button</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<NormalImage>Warning</NormalImage>
								<Text>@Res:FulfillmentNotification</Text>
							</AxFormControl>
						</Controls>
						<Caption>@Res:ResourceFulfillment</Caption>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>HeaderGroup</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Header</Name>
						<Skip>Yes</Skip>
						<Type>String</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>headerText</DataMethod>
						<Label>@SYS318380</Label>
						<Style>TitleField</Style>
						<ViewEditMode>View</ViewEditMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>EntityStatus</Name>
						<ExtendedStyle>entityStatus</ExtendedStyle>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>StatusString</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Skip>Yes</Skip>
								<Type>String</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Alignment>Left</Alignment>
								<Label>@Proj:Status</Label>
								<ShowLabel>No</ShowLabel>
								<ViewEditMode>View</ViewEditMode>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalRight</ArrangeMethod>
						<Breakable>No</Breakable>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<Style>DetailTitleContainer</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>ControlTab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>tabPageSchedule</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl>
								<Name>hGridSchedule</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>SizeToAvailable</HeightMode>
								<FormControlExtension>
									<Name>HierarchicalGridCommonControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>serverInteractionClassName</Name>
											<Type>String</Type>
											<Value>ProjWbsServerInteraction</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>interactionContextClassName</Name>
											<Type>String</Type>
											<Value>ProjWbsInteractionContextDataContract</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>javaScriptFiles</Name>
											<Type>String</Type>
											<Value>WBSSchedulePlanningView.js</Value>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
							</AxFormControl>
						</Controls>
						<AllowUserSetup>No</AllowUserSetup>
						<Caption>@ProjPlan:SchedulePlanning</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>tabPageCost</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl>
								<Name>hGridCostEstimate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>SizeToAvailable</HeightMode>
								<FormControlExtension>
									<Name>HierarchicalGridCommonControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>serverInteractionClassName</Name>
											<Type>String</Type>
											<Value>ProjWbsServerInteraction</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>interactionContextClassName</Name>
											<Type>String</Type>
											<Value>ProjWbsInteractionContextDataContract</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>javaScriptFiles</Name>
											<Type>String</Type>
											<Value>WBSCostPlanningView.js</Value>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
							</AxFormControl>
						</Controls>
						<AllowUserSetup>No</AllowUserSetup>
						<Caption>@ProjPlan:EstimatedCostsAndRevenue</Caption>
					</AxFormControl>
				</Controls>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>