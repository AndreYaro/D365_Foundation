<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BankChequeCancel</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BankChequeCancel extends FormRun
{
    // The instance of the calling RunBase class
    BankChequeCancel bankChequeCancel;
    BankParameters bankParameters;

}
]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Passes the values of its fields to the BankChequeCancel class via a call to the initParms method.
    /// If the Bank Parameters specify that a journal or Reason code is required, verifies that one is supplied.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// The Bank Parameters require a Reason Code for the Payment Reversal process but one was not supplied.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The Bank Parameters require a Journal name for the Payment Reversal process but one was not supplied.
    /// </exception>
    public void closeOk()
    {
        DialogRunbase dialog = element.args().caller();
        TransDate transDate = transactionDate.dateValue();

        if ((reason.valueStr() == '') && (bankParameters.RequireChequeReversalReason == true))
        {
            //Field %1 must be filled in.
            throw error(strfmt("@SYS26332", "@SYS111246"));
        }

        if ((journalName.valueStr() == '') && (bankParameters.RequireChequeReversalJour == true))
        {
            //Field %1 must be filled in.
            throw error(strfmt("@SYS26332", "@SYS35283"));
        }

        // Set the form's field values back into the RunBase class
        bankChequeCancel.initParms(
            transDate,
            reason.valueStr(),
            reasonComment.valueStr(),
            reconcile.value(),
            journalName.valueStr());

        dialog.updateServer();
        if (bankChequeCancel.checkCloseDialog())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up the BankChequeCancel AX form user interface based on information
    /// from the passed in BankChequeCancel class instance.
    /// </summary>
    /// <remarks>
    /// The method disables fields as needed.  For instance the journal name field is only
    /// enabled when the Bank parameters require it.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// The form was launched directly, without an instance of a caller.
    /// </exception>
    public void init()
    {
        // Make sure that we were called with an instance of an object passed in
        if (!element.args().caller())
        {
            throw error("@SYS22539");
        }

        // Get the instance of the runBase class we were called from
        bankChequeCancel =  element.args().caller().runbase();

        super();

        // Default the form's fields from the last RunBase values
        bankAccount.text(bankChequeCancel.parmAccountId());
        chequeNum.text(bankChequeCancel.parmChequeNum());

        // If there is no Bank Account transaction record, don't display the Reconcile field.
        if (BankAccountTrans::findByAccountIDAndChequeNum(bankChequeCancel.parmAccountId(), bankChequeCancel.parmChequeNum()).RecId == 0)
        {
            reconcile.enabled(false);
            reconcile.visible(false);
        }
        else
        {
            reconcile.value(bankChequeCancel.parmReconcile());
        }

        if (!bankChequeCancel.parmTransDate())
        {
            transactionDate.enabled(false);
            transactionDate.visible(false);

            reason.enabled(false);
            reason.visible(false);
            reasonComment.enabled(false);
            reasonComment.visible(false);
        }
        else
        {
            transactionDate.dateValue(bankChequeCancel.parmTransDate());
        }

        // Journal name lookup field is only editable when the Bank Parameter
        // enforcing Payment reversal journals is enabled.
        bankParameters = BankParameters::find(false);
        journalName.enabled(bankParameters.RequireChequeReversalJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runBase</Name>
				<Source><![CDATA[
    RunBase runBase()
    {
        return bankChequeCancel;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>Reason</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets up and executes a Query that will pull back all of the records from
        /// ReasonTable that have Bank and either Customer or Vendor defined in the Reason Code setup.
        /// </summary>
        public void lookup()
        {
            Query                   query = new Query();
            QueryBuildDataSource    queryBuildDataSource;
            QueryBuildRange         queryBuildRangeBank;
            QueryBuildRange         queryBuildRangeCustVend;
            SysTableLookup          sysTableLookup;

            // Create an instance of SysTableLookup with the form control passed in
            sysTableLookup = SysTableLookup::newParameters(tablenum(ReasonTable), this, true);

            // Add the fields to be shown in the lookup form
            sysTableLookup.addLookupfield(fieldnum(ReasonTable, Reason));
            sysTableLookup.addLookupfield(fieldnum(ReasonTable, Description));

            // Create the query datasource
            queryBuildDataSource = query.addDataSource(tablenum(ReasonTable));

            // Restrict the Reason code to those set up for Bank and Cust\Vend.
            queryBuildRangeBank = queryBuildDataSource.addRange(fieldnum(ReasonTable, Bank));
            queryBuildRangeBank.value(enum2str(NoYes::Yes));

            switch (bankChequeCancel.parmRecipientType())
            {
                case BankChequeRecipientType::Cust:
                    queryBuildRangeCustVend = queryBuildDataSource.addRange(fieldnum(ReasonTable, Cust));
                    break;

                case BankChequeRecipientType::Vend:
                    queryBuildRangeCustVend = queryBuildDataSource.addRange(fieldnum(ReasonTable, Vend));
                    break;
            }

            if (queryBuildRangeCustVend)
            {
                queryBuildRangeCustVend.value(enum2str(NoYes::Yes));
            }

            // Add the query to the lookup form
            sysTableLookup.parmQuery(query);

            // Perform lookup
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets the ReasonComment field to the Description of the selected Reason Code.
        /// </summary>
        /// <returns>
        /// True.
        /// </returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            reasonComment.text(ReasonTable::find(reason.text()).Description);

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Determines if the text in the Reason field is a valid Reason Code
        /// for the Payment Reversal process.
        /// </summary>
        /// <returns>
        /// True if the value corresponds to a defined Reason Code and
        /// that Reason Code is set up for use in Bank and Customer\Vendor.
        /// Otherwise, false.
        /// </returns>
        public boolean validate()
        {
            ReasonTable reasonTable;
            boolean ret;

            ret = super();

            if (reason.valueStr() != '')
            {
                reasonTable = ReasonTable::find(reason.valueStr());
                if (reasonTable.RecId == 0)
                {
                    // The value '%1' in field '%2' is not found in relating table '%3'.
                    ret = checkFailed(strfmt("@SYS112224", reason.valueStr(), fieldpname(ReasonTable, Reason), tablepname(ReasonTable)));
                }
                else
                {
                    // Check the Reason setup table to see if the code is set up to run for Bank and Cust\Vend.
                    if (reasonTable.Bank == NoYes::No)
                    {
                        ret = checkFailed("@SYS115522");
                    }
                    else
                    {
                        switch (bankChequeCancel.parmRecipientType())
                        {
                            case BankChequeRecipientType::Cust:
                                if (reasonTable.Cust == NoYes::No)
                                {
                                    ret = checkFailed("@SYS115522");
                                }
                                break;

                            case BankChequeRecipientType::Vend:
                                if (reasonTable.Vend == NoYes::No)
                                {
                                    ret = checkFailed("@SYS115522");
                                }
                                break;

                            case BankChequeRecipientType::Ledger:
                                if (reasonTable.Ledger == NoYes::No)
                                {
                                    ret = checkFailed("@SYS115522");
                                }
                                break;
                        }
                    }
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>JournalName</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets up and executes a Query that will pull back all of the records
        /// from the LedgerJournalName table with journal type BankChequeReversal
        /// where the BlockUserGroupId is either blank or set to a user group that
        /// the user is currently a member of.
        /// </summary>
        public void lookup()
        {
            Query                   query = new Query();
            QueryBuildDataSource    queryBuildDataSource;
            QueryBuildRange         queryBuildRangeJournalType;
            QueryBuildRange         queryBuildRangeBlockingGroup;
            SysTableLookup          sysTableLookup;
            UserGroupList           userGroupList;
            str                     valueStr;

            // Create an instance of SysTableLookup with the form control passed in
            sysTableLookup = SysTableLookup::newParameters(tablenum(LedgerJournalName), this);

            // Add the fields to be shown in the lookup form
            sysTableLookup.addLookupfield(fieldnum(LedgerJournalName, JournalName));
            sysTableLookup.addLookupfield(fieldnum(LedgerJournalName, Name));

            // Create the query datasource
            queryBuildDataSource = query.addDataSource(tablenum(LedgerJournalName));

            queryBuildRangeJournalType = queryBuildDataSource.addRange(fieldnum(LedgerJournalName, JournalType));
            // Make sure only the Cheque Reversal journal names are returned.
            queryBuildRangeJournalType.value(queryValue(LedgerJournalType::BankChequeReversal));

            queryBuildRangeBlockingGroup = queryBuildDataSource.addRange(fieldnum(LedgerJournalName, BlockUserGroupId));
            // Filter for Blocking Groups: groups that the user is in plus journal names that have no blocking.
            valueStr = SysQuery::valueEmptyString();
            while select GroupId from userGroupList where userGroupList.UserId == curuserid()
            {
                valueStr = valueStr + ',' + userGroupList.GroupId;
            }
            queryBuildRangeBlockingGroup.value(valueStr);

            // Add the query to the lookup form
            sysTableLookup.parmQuery(query);

            // Perform lookup
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Determines if the text in the JournalName field is a valid journal name
        /// for the Payment Reversal process.
        /// </summary>
        /// <returns>
        /// True if the value is a valid journal name, is a journal name that is
        /// of type BankChequeReversal, and the user is a member of the "Blocking" user group.
        /// Otherwise, false;
        /// </returns>
        public boolean validate()
        {
            LedgerJournalName   journal;
            boolean ret;

            ret = super();

            if (journalName.valueStr() != '')
            {
                journal = LedgerJournalName::find(journalName.valueStr());
                if (journal.RecId == 0)
                {
                    // The value '%1' in field '%2' is not found in relating table '%3'.
                    ret = checkFailed(strfmt("@SYS112224", journalName.valueStr(), fieldpname(LedgerJournalName, JournalName), tablepname(LedgerJournalName)));
                }
                else if (journal.JournalType != LedgerJournalType::BankChequeReversal)
                {
                    // Journal type must be %1.
                    ret = checkFailed(strfmt("@SYS22977", enum2str(LedgerJournalType::BankChequeReversal)));
                }
                else
                {
                    ret = JournalStatic::hasUserAccessForGroupId(journal.BlockUserGroupId);
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@SYS22512</Caption>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<StatusBarStyle xmlns="">SimpleWithoutClose</StatusBarStyle>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContentGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>TransactionDate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>214748364</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Date</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>TransDate</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Reason</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>429496728</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@FieldDescriptions_CashAndBankManagement:BankChequeCancel_Reason</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>ReasonCode</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>ReasonComment</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>644245092</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@FieldDescriptions_CashAndBankManagement:BankChequeCancel_ReasonComment</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>ReasonComment</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>BankAccount</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>858993456</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>BankAccount</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>ChequeNum</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741820</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>BankChequeNum</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>Reconcile</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1288490184</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@FieldDescriptions_CashAndBankManagement:BankChequeCancel_Reconcile</HelpText>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS100071</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>JournalName</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1503238548</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@FieldDescriptions_CashAndBankManagement:BankChequeCancel_JournalName</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>LedgerJournalNameId</ExtendedDataType>
						<Label>@SYS35283</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>dialogStartGrp</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>BottomButtonGrp</Name>
				<ElementPosition>1932735276</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Top>0</Top>
				<TopMode>BottomEdge</TopMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>30</VerticalSpacing>
				<VerticalSpacingMode>Fixed</VerticalSpacingMode>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Ok</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Cancel</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>