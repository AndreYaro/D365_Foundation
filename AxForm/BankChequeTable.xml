<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BankChequeTable</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BankChequeTable extends FormRun
{
    private BankAccountTable bankAccountTable;
    private boolean canPrintNonNegotiableCheque;
    private QueryBuildRange cancelChequeRange;
    private TransDate toDateInitialValue = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    private int originalDatabaseHint;
    
}
]]></Source>
			</Method>
			<Method>
				<Name>chequeCreateActive</Name>
				<Source><![CDATA[
    private void chequeCreateActive()
    {
        BankChequeLayout bankChequeLayout;

        bankChequeLayout = BankChequeLayout::find(bankChequeTable.AccountID);

        if (bankChequeLayout && bankChequeLayout.ChequeNumMethod == ChequeNumMethod::Fixed)
        {
            buttonBankChequeCreate.enabled(true);
        }
        else
        {
            buttonBankChequeCreate.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastBankAccountTable</Name>
				<Source><![CDATA[
    private boolean isLastBankAccountTable()
    {
        return (element.args().dataset() == tableNum(BankAccountTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildArgsForBankAccountTable</Name>
				<Source><![CDATA[
    private Args buildArgsForBankAccountTable(Args _args)
    {
        bankAccountTable = element.args().record();

        _args.record(bankAccountTable);

        return _args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        BankChequePaymTrans bankChequePaymTrans;

        super();

        if (element.args() && element.args().record())
        {
            switch (element.args().record().TableId)
            {
                case tableNum(BankAccountTable):
                    bankAccountTable = element.args().record();
                    break;

                case tableNum(BankChequePaymTrans):
                    bankChequePaymTrans = element.args().record();
                    bankAccountTable = BankAccountTable::find(bankChequePaymTrans.AccountId);
                    break;
            }
        }

        canPrintNonNegotiableCheque = BankParameters::find().AllowPaymentCopies;

        bankChequeCopy.enabled(false);

        if (BankParameters::find().AllowCreateBlankStatusChecks)
        {
            BankBlankChequeCreate.visible(true);
        }

        if (FeatureStateProvider::isFeatureEnabled(BankBridgingVendorTransactionDetailsFeature::instance()))
        {
            Grid_RemittanceLocation.visible(true);
            Grid_RemittanceAddress.visible(true);
            Grid_FurtherPosting.visible(true);
            Grid_ClearedDate.visible(true);
            FurtherPosting.visible(true);
            ClearedDate.visible(true);
            DateRange.visible(true); 

            BankAccountTrans_ds.executeQuery();

            FromDate.dateValue(LedgerFiscalCalendar::findFirstOpenStartDateInAnyYear(CompanyInfoHelper::fiscalCalendarRecId(), dateNull()));
            ToDate.dateValue(toDateInitialValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBankChequeCopyEnabled</Name>
				<Source><![CDATA[
    private boolean isBankChequeCopyEnabled(BankChequeTable _bankChequeTable)
    {
        return (_bankChequeTable.RecipientType == BankChequeRecipientType::Ledger || _bankChequeTable.RecipientType == BankChequeRecipientType::Vend);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runQueryAndEnableFilters</Name>
				<Source><![CDATA[
    private void runQueryAndEnableFilters(AsyncTaskResult _result)
    {
        if (FeatureStateProvider::isFeatureEnabled(BankBridgingVendorTransactionDetailsFeature::instance()))
        {
            BankChequeTable_ds.executeQuery();
            FromDate.enabled(true);
            ToDate.enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonOriginalPayment</Name>
				<Source><![CDATA[
    private void enableButtonOriginalPayment()
    {
        if (bankChequeTable.SourceTableId == tableNum(LedgerJournalTrans) && bankChequeTable.SourceRecId != 0)
        {
            ButtonOriginalPayment.enabled(true);
        }
        else
        {
            ButtonOriginalPayment.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearDatabaseHint</Name>
				<Source><![CDATA[
    private void clearDatabaseHint()
    {
        this.originalDatabaseHint = SqlSystem::databaseHints();
        SqlSystem::databaseHints(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreOriginalDatabaseHint</Name>
				<Source><![CDATA[
    private void restoreOriginalDatabaseHint()
    {
        SqlSystem::databaseHints(this.originalDatabaseHint);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>BankChequeTable</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            this.cacheAddMethod(tableMethodStr(BankChequeTable, displayRemittanceLocation));
            this.cacheAddMethod(tableMethodStr(BankChequePaymTrans, displayRemittanceAddress));

            this.queryBuildDataSource().addSortField(fieldNum(BankChequeTable, AccountId));
            this.queryBuildDataSource().addSortField(fieldNum(BankChequeTable, ChequeNum), SortOrder::Descending);
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int                                 ret;
            CustVendTrans                       localCustVendTrans;
            boolean                             doEnableChequeCopy = true;
            BankChequeTable                     localBankChequeTable;
            GeneralJournalAccountEntry          generalJournalAccountEntry;
            GeneralJournalEntry                 generalJournalEntry;
            SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
            LedgerEntry                         ledgerEntry;
            LedgerJournalTrans                  localLedgerJouranlTrans;
            NoYes                               isBridged;
            NoYes                               isPosted;

            ret = super();

            if (ret)
            {
                cancel.enabled(false);

                if (bankChequeTable.Voucher)
                {
                    buttonBankChequePaymentTrans.enabled(true);
                    buttonVoucher.enabled(true);
                    buttonTransaction.enabled(true);

                    //Find cheque that is involved in bridging posting
                    select firstonly RecId from generalJournalAccountEntry order by RecId asc
                        join RecId from generalJournalEntry
                            where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                                && generalJournalEntry.AccountingDate == bankChequeTable.TransDate
                                && generalJournalAccountEntry.PaymentReference == bankChequeTable.ChequeNum
                        join RecId from subledgerVoucherGeneralJournalEntry
                            where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId
                                && subledgerVoucherGeneralJournalEntry.Voucher == bankChequeTable.Voucher
                        join RecId from ledgerEntry
                            where ledgerEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                                && ledgerEntry.IsBridgingPosting == NoYes::Yes;

                    //Determine if the bridged transaction has been posted
                    if (ledgerEntry.RecId)
                    {
                        isBridged = NoYes::Yes;

                        select firstonly localLedgerJouranlTrans
                            where localLedgerJouranlTrans.FurtherPostingRecId == ledgerEntry.RecId;

                        isPosted = localLedgerJouranlTrans.ledgerJournalTable().Posted;
                    }

                    //we do not enable the ability to cancel the cheque until the bridge posting has occurred.
                    //cancelling a check that is involved in bridging before bridge posting forces manual adjustments against the bridging accounts
                    switch (bankChequeTable.RecipientType)
                    {
                        case BankChequeRecipientType::Vend:
                        case BankChequeRecipientType::Cust:

                            localCustVendTrans = BankChequeCancel::findCustVendTransForCheque(bankChequeTable);
                            if (bankChequeTable.ChequeStatus == ChequeStatus::Payment && localCustVendTrans.RecId != 0 && (isBridged == NoYes::No || isPosted == NoYes::Yes))
                            {
                                cancel.enabled(true);
                            }
                            break;

                        case BankChequeRecipientType::Ledger:

                            if (bankChequeTable.ChequeStatus == ChequeStatus::Payment && (isBridged == NoYes::No || isPosted == NoYes::Yes))
                            {
                                cancel.enabled(true);
                            }
                            break;
                    }
                }
                else
                {
                    buttonBankChequePaymentTrans.enabled(false);
                    buttonVoucher.enabled(false);
                    buttonTransaction.enabled(false);
                }

                element.chequeCreateActive();
                element.enableButtonOriginalPayment();
            }

            if (canPrintNonNegotiableCheque)
            {
                if (bankChequeTable_ds.anyMarked())
                {
                    localBankChequeTable = bankChequeTable_ds.getFirst(1);

                    while (localBankChequeTable && doEnableChequeCopy)
                    {
                        doEnableChequeCopy = (localBankChequeTable.ChequeStatus == ChequeStatus::Payment);

                        if (doEnableChequeCopy)
                        {
                            doEnableChequeCopy = element.isBankChequeCopyEnabled(localBankChequeTable);
                        }
                        localBankChequeTable = bankChequeTable_ds.getNext();
                    }
                }
                else
                {
                    localBankChequeTable = bankChequeTable_ds.cursor();
                    doEnableChequeCopy = (localBankChequeTable.ChequeStatus == ChequeStatus::Payment);
                    if (doEnableChequeCopy)
                    {
                        doEnableChequeCopy = element.isBankChequeCopyEnabled(localBankChequeTable);
                    }
                }

                bankChequeCopy.enabled(doEnableChequeCopy);
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        public void linkActive()
        {
            super();

            if (element.args().dataset() == tableNum(LedgerJournalTrans))
            {
                LedgerJournalTrans ledgerJournalTrans = element.args().record() as LedgerJournalTrans;

                Query query = bankChequeTable_ds.query();

                QueryBuildDataSource qbds = query.dataSourceTable(tableNum(BankChequeTable));
                qbds.clearDynalinks();
                qbds.clearRanges();

                if(ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
                   && ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank)
                {
                    qbds.addRange(fieldNum(BankChequeTable, ChequeNum)).value(queryValue(ledgerJournalTrans.BankChequeNum));
                    qbds.addRange(fieldNum(BankChequeTable, RecipientAccountNum)).value(queryValue(ledgerJournalTrans.findVendTable().AccountNum));
                    qbds.addRange(fieldNum(BankChequeTable, RecipientType)).value(queryValue(LedgerJournalACType::Vend));
                    qbds.addRange(fieldNum(BankChequeTable, AccountID)).value(queryValue(ledgerJournalTrans.findBankAccountTableForOffset().AccountID));
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void executeQuery()
        {
            FormRun formRun = this.formRun();
            if (FeatureStateProvider::isFeatureEnabled(BankBridgingVendorTransactionDetailsFeature::instance()))
            {
                formRun.clearDatabaseHint();
                TransDate toDateRangeValue = ToDate.dateValue();

                if (ToDate.dateValue() == dateNull())
                {
                    toDateRangeValue = toDateInitialValue;
                }

                BankChequeTable_ds.query().dataSourceTable(tableNum(BankChequeTable)).clearRange(fieldNum(BankChequeTable, TransDate));
                BankChequeTable_ds.query().dataSourceTable(tableNum(BankChequeTable)).addRange(fieldNum(BankChequeTable, TransDate)).value(SysQueryRangeUtil::dateRange(DateTimeUtil::date(FromDate.dateValue()), DateTimeUtil::date(toDateRangeValue)));

                if(IncludeChecksWithoutDates.checked())
                {
                    BankChequeTable_ds.query().dataSourceTable(tableNum(BankChequeTable)).addRange(fieldNum(BankChequeTable, TransDate)).value(queryValue(dateNull()));
                }
            
            }


            super();

            if (FeatureStateProvider::isFeatureEnabled(BankBridgingVendorTransactionDetailsFeature::instance()))
            {
                formRun.restoreOriginalDatabaseHint();
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>BankAccountTrans</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void init()
        {
            if (FeatureStateProvider::isFeatureEnabled(BankBridgingVendorTransactionDetailsFeature::instance()))
            {
                this.linkType(FormLinkType::OuterJoin);
            }

            super();

            if (FeatureStateProvider::isFeatureEnabled(BankBridgingVendorTransactionDetailsFeature::instance()))
            {
                cancelChequeRange = BankAccountTrans_ds.query().dataSourceTable(tableNum(BankAccountTrans)).addRange(fieldNum(BankAccountTrans, DataAreaId));
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void executeQuery()
        {
            if (FeatureStateProvider::isFeatureEnabled(BankBridgingVendorTransactionDetailsFeature::instance()))
            {
                cancelChequeRange.value(strFmt('(%1.%2 == 0) || ((%1.%2 == 1) && (%1.%3 <= 0))',
                    tableStr(BankAccountTrans),
                    fieldStr(BankAccountTrans, Cancel),
                    fieldStr(BankAccountTrans, AmountCur)));
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Cancel</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            BankChequeTable tmpBankChequeTable;

            if (BankChequeTable::find(bankChequeTable.AccountID, bankChequeTable.ChequeNum).ChequeStatus == ChequeStatus::Cancelled)
            {
                tmpBankChequeTable.data(bankChequeTable);
                bankChequeTable_ds.reread();

                element.args().lookupRecord(tmpBankChequeTable);
                bankChequeTable_ds.research();

                throw error(strFmt("@SYS99596", tmpBankChequeTable.ChequeNum));
            }

            super();
            bankChequeTable_ds.executeQuery();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonBankChequeCreate</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            Args args = new Args(element);

            super();

            if (!bankAccountTable || (bankChequeTable && bankAccountTable.AccountID != bankChequeTable.AccountID))
            {
                bankAccountTable = BankAccountTable::find(bankChequeTable.AccountID);
            }

            if (element.isLastBankAccountTable())
            {
                args.record(bankAccountTable);
            }
            else
            {
                args.record(bankChequeTable);
            }

            new MenuFunction(menuItemActionStr(BankChequeCreate), MenuItemType::Action).run(args);
            bankChequeTable_ds.research();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ChequeDelete</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (element.isLastBankAccountTable())
            {
                Args args = new Args(element);

                element.buildArgsForBankAccountTable(args);
                new MenuFunction(menuItemActionStr(BankChequeDelete), MenuItemType::Action).run(args);
            }
            else
            {
                super();
            }

            bankChequeTable_ds.research();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BankChequeCopy</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            BankChequeTable localBankChequeTable;
            boolean canPrintCheck = true;

            if (bankChequeTable_ds.anyMarked())
            {
                localBankChequeTable = bankChequeTable_ds.getFirst(1);

                while (localBankChequeTable)
                {
                    if (localBankChequeTable.ChequeStatus != ChequeStatus::Payment)
                    {
                        canPrintCheck = false;
                        if (DialogButton::Ok == Box::okCancel(strFmt("@SYS329463", "@SYS152782"), DialogButton::Cancel))
                        {
                            canPrintCheck = true;
                        }
                        break;
                    }
                    localBankChequeTable = bankChequeTable_ds.getNext();
                }
            }

            if (canPrintCheck)
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BankBlankChequeCreate</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            bankChequeTable_ds.research();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonOriginalPayment</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            if (bankChequeTable.SourceTableId == tableNum(LedgerJournalTrans) && bankChequeTable.SourceRecId != 0)
            {
                LedgerJournalTrans ledgerJournalTrans = LedgerJournalTrans::findRecId(bankChequeTable.SourceRecId, false);
                LedgerJournalTable ledgerJournalTable = LedgerJournalTable::find(ledgerJournalTrans.JournalNum);

                if (ledgerJournalTable)
                {
                    Args args = new Args();
                    args.record(ledgerJournalTable);
                    args.parmEnumType(enumNum(LedgerJournalType));
                    args.parmEnum(enum2int(ledgerJournalTable.JournalType));

                    str menuItemStr = LedgerJournalStatic::menuItemNameForJournalType(ledgerJournalTable);
                    MenuFunction menuFunction = new MenuFunction(menuItemStr, MenuItemType::Display);
                    menuFunction.run(args);
                }
                else
                {
                    warning("@CashManagement:SourcePaymentJournalNotExistOnCheck");
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FromDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean validate()
        {
            boolean ret = super();

            if (FeatureStateProvider::isFeatureEnabled(BankBridgingVendorTransactionDetailsFeature::instance())
                && this.dateValue() > ToDate.dateValue() 
                && ToDate.dateValue() != DateTimeUtil::date(DateTimeUtil::minValue()))
            {
                ret = checkFailed(strFmt("@SYS107147", this.dateValue()));
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean modified()
        {
            boolean ret = super();

            if (FeatureStateProvider::isFeatureEnabled(BankBridgingVendorTransactionDetailsFeature::instance()))
            {
                this.enabled(false);
                element.setTimeOutEx(formMethodStr(BankChequeTable, runQueryAndEnableFilters));
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ToDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean validate()
        {
            boolean ret = super();

            if (FeatureStateProvider::isFeatureEnabled(BankBridgingVendorTransactionDetailsFeature::instance())
                && this.dateValue() < FromDate.dateValue()
                && ToDate.dateValue() != DateTimeUtil::date(DateTimeUtil::minValue()))
            {
                ret = checkFailed(strFmt("@CashManagement:InvalidDateRange", this.dateValue()));
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean modified()
        {
            boolean ret = super();

            if (FeatureStateProvider::isFeatureEnabled(BankBridgingVendorTransactionDetailsFeature::instance()))
            {
                this.enabled(false);
                element.setTimeOutEx(formMethodStr(BankChequeTable, runQueryAndEnableFilters));
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>IncludeChecksWithoutDates</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void clicked()
        {
            super();
            this.showOrHideChecksWithoutDates();
        }

]]></Source>
					</Method>
					<Method>
						<Name>showOrHideChecksWithoutDates</Name>
						<Source><![CDATA[
        private void showOrHideChecksWithoutDates()
        {
            if (!IncludeChecksWithoutDates.checked())
            {       
                BankChequeTable_ds.query().dataSourceTable(tableNum(BankChequeTable)).clearRanges();
            }      

            BankChequeTable_ds.executeQuery();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>BankChequeTable</Name>
			<Table>BankChequeTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankNegInstRecipientName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChequeNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChequeStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProcessedByPositivePay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonRefRecID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecipientAccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecipientCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecipientTransVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecipientType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemittanceAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReversalRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReversalTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<Index>AccountChequeIdx</Index>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ReasonReferenceTable</Name>
			<Table>ReasonTableRef</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Reason</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonComment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>BankChequeTable</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>BankAccountTrans</Name>
			<Table>BankAccountTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyAmountCorrect_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountStatement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountStatementDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AcknowledgementDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCorrect</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountReportingCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankChequeTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPaymentRegistrationNum_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTransAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTransCurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTransType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Cancel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CancelPending</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CentralBankPurposeCode_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CentralBankPurposeText_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChequeNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ClearedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrespondentCountry_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DepositNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Included</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerTransType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Manual</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymReference</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonRefRecID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Reconciled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyAmountCorrect_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyAmount_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>BankChequeTable</JoinSource>
			<LinkType>Passive</LinkType>
			<OnlyFetchActive>Yes</OnlyFetchActive>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<Index>ChequeIdIdx</Index>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<AllowFormCompanyChange xmlns="">Yes</AllowFormCompanyChange>
		<Caption xmlns="">@SYS28374</Caption>
		<DataSource xmlns="">BankChequeTable</DataSource>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Pattern xmlns="">Task</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<TitleDataSource xmlns="">BankChequeTable</TitleDataSource>
		<UseCaptionFromMenuItem xmlns="">Yes</UseCaptionFromMenuItem>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ButtonBankChequePaymentTrans</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>BankChequePaymentTrans</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ButtonTransaction</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>BankChequeTable</DataSource>
								<MenuItemName>BankAccountTrans</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ButtonVoucher</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>BankChequeTable</DataSource>
								<MenuItemName>LedgerTransVoucher1</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>Cancel</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2080374782</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>BankChequeTable</DataSource>
								<MenuItemName>BankChequeCancel</MenuItemName>
								<MenuItemType>Action</MenuItemType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ButtonBankChequeCreate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2105540606</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<NeededPermission>Manual</NeededPermission>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS23133</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ChequeDelete</Name>
								<ElementPosition>2013265918</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>BankChequeTable</DataSource>
								<MenuItemName>BankChequeDelete</MenuItemName>
								<MenuItemType>Action</MenuItemType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>BankChequeCopy</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2130706430</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>BankChequeTable</DataSource>
								<MenuItemName>BankChequeCopy</MenuItemName>
								<MenuItemType>Action</MenuItemType>
								<MultiSelect>Yes</MultiSelect>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>BankBlankChequeCreate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>Auto</HeightMode>
								<HelpText>@CashManagement:BankBlankChequeCreateHelpText</HelpText>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>BankChequeTable</DataSource>
								<MenuItemName>BankBlankChequeCreate</MenuItemName>
								<MenuItemType>Action</MenuItemType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ButtonOriginalPayment</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Enabled>No</Enabled>
								<HeightMode>Auto</HeightMode>
								<NeededPermission>Read</NeededPermission>
								<Type>Button</Type>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@CashManagement:OriginalPayment</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CustomFilters</Name>
				<Pattern>CustomFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilter</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
									<Value>Grid_AccountID</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>DateRange</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>FromDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Date</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS5209</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>ToDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Date</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS14656</Label>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS41297</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>CheckBoxGroup</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>IncludeChecksWithoutDates</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>CheckBox</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@CashManagement:IncludeChecksWithoutDates</Label>
								<Style>Toggle</Style>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1610612734</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Overview</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Grid_AccountID</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AccountID</DataField>
										<DataSource>BankChequeTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Grid_TransDate</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransDate</DataField>
										<DataSource>BankChequeTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Grid_ChequeNum</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ChequeNum</DataField>
										<DataSource>BankChequeTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>Grid_ChequeStatus</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_CashAndBankManagement:BankChequeTable_Grid_ChequeStatus</HelpText>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ChequeStatus</DataField>
										<DataSource>BankChequeTable</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Grid_RecipientAccountNum</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_CashAndBankManagement:BankChequeTable_Grid_RecipientAccountNum</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>RecipientAccountNum</DataField>
										<DataSource>BankChequeTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Grid_RemittanceLocation</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>No</CacheDataMethod>
										<DataMethod>displayRemittanceLocation</DataMethod>
										<DataSource>BankChequeTable</DataSource>
										<Label>@SYS152694</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Grid_RemittanceAddress</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>No</CacheDataMethod>
										<DataMethod>displayRemittanceAddressDescription</DataMethod>
										<DataSource>BankChequeTable</DataSource>
										<Label>@SYS22223</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>Grid_FurtherPosting</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>No</CacheDataMethod>
										<DataMethod>displayFurtherPosting</DataMethod>
										<DataSource>BankChequeTable</DataSource>
										<Label>@SYS21704</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Grid_ClearedDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Date</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>ClearedDate</DataField>
										<DataSource>BankAccountTrans</DataSource>
										<Label>@CashManagement:ClearedDate</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Grid_CurrencyCode</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyCode</DataField>
										<DataSource>BankChequeTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Grid_AmountCur</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AmountCur</DataField>
										<DataSource>BankChequeTable</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<DataSource>BankChequeTable</DataSource>
								<Style>Tabular</Style>
							</AxFormControl>
						</Controls>
						<Caption>@SYS9039</Caption>
						<DataSource>BankChequeTable</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>General</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Identification</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_AccountID</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>AccountID</DataField>
										<DataSource>BankChequeTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_ChequeNum</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ChequeNum</DataField>
										<DataSource>BankChequeTable</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>Identification</DataGroup>
								<DataSource>BankChequeTable</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Payment</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Payment_CurrencyCode</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyCode</DataField>
										<DataSource>BankChequeTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Payment_AmountCur</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>AmountCur</DataField>
										<DataSource>BankChequeTable</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>Payment_RecipientType</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>RecipientType</DataField>
										<DataSource>BankChequeTable</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Payment_RecipientAccountNum</Name>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_CashAndBankManagement:BankChequeTable_Payment_RecipientAccountNum</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>RecipientAccountNum</DataField>
										<DataSource>BankChequeTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Payment_BankNegInstRecipientName</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>BankNegInstRecipientName</DataField>
										<DataSource>BankChequeTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Payment_RecipientCompany</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>RecipientCompany</DataField>
										<DataSource>BankChequeTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Payment_RecipientTransVoucher</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>RecipientTransVoucher</DataField>
										<DataSource>BankChequeTable</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>Payment</DataGroup>
								<DataSource>BankChequeTable</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>FurtherPosting</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>CheckBox</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displayFurtherPosting</DataMethod>
								<DataSource>BankChequeTable</DataSource>
								<Label>@SYS21704</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>ClearedDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Date</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>ClearedDate</DataField>
								<DataSource>BankAccountTrans</DataSource>
								<Label>@CashManagement:ClearedDate</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Reason</Name>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Reason_Reason</Name>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_CashAndBankManagement:BankChequeTable_Reason_Reason</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Reason</DataField>
										<DataSource>ReasonReferenceTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Reason_ReasonComment</Name>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_CashAndBankManagement:BankChequeTable_Reason_ReasonComment</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ReasonComment</DataField>
										<DataSource>ReasonReferenceTable</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>Reason</DataGroup>
								<DataSource>ReasonReferenceTable</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Status</Name>
								<ElementPosition>2013265918</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_CashAndBankManagement:BankChequeTable_Status</HelpText>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>Status_ChequeStatus</Name>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_CashAndBankManagement:BankChequeTable_Status_ChequeStatus</HelpText>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ChequeStatus</DataField>
										<DataSource>BankChequeTable</DataSource>
										<Items />
									</AxFormControl>
								</Controls>
								<Caption>@SYS25532</Caption>
								<DataGroup>Check</DataGroup>
								<DataSource>BankChequeTable</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>VoucherGroup</Name>
								<ElementPosition>2080374782</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>VoucherGroup_TransDate</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransDate</DataField>
										<DataSource>BankChequeTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>VoucherGroup_Voucher</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Voucher</DataField>
										<DataSource>BankChequeTable</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>Voucher</DataGroup>
								<DataSource>BankChequeTable</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Creator</Name>
								<ElementPosition>2113929214</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>Creator_createdDateTime</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>DateTime</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>createdDateTime</DataField>
										<DataSource>BankChequeTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Creator_createdBy</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>createdBy</DataField>
										<DataSource>BankChequeTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>Creator_modifiedDateTime</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>DateTime</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>modifiedDateTime</DataField>
										<DataSource>BankChequeTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Creator_modifiedBy</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>modifiedBy</DataField>
										<DataSource>BankChequeTable</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>SystemInfo</DataGroup>
								<DataSource>BankChequeTable</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS2952</Caption>
						<DataSource>BankChequeTable</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Remittance</Name>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Group_Remittance</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Remittance_RemittanceLocation</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_CashAndBankManagement:BankChequeTable_Remittance_RemittanceLocation</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayRemittanceLocation</DataMethod>
										<DataSource>BankChequeTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Remittance_RemittanceAddress</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_CashAndBankManagement:BankChequeTable_Remittance_RemittanceAddress</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayRemittanceAddress</DataMethod>
										<DataSource>BankChequeTable</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@sys152838</Caption>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@sys152838</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>