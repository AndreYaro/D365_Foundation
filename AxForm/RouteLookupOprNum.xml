<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RouteLookupOprNum</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class RouteLookupOprNum extends FormRun
{
    RouteId routeId;
    ItemId  itemId;    

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        var routeLookupOprNumSkippable = element.args().caller() as RouteLookupOprNumISkippable;
        if (routeLookupOprNumSkippable != null
            && routeLookupOprNumSkippable.skipRouteOperationNumberLookup())
        {
            throw info("@SCM:Message_RouteOperationLookupDisabled_MultipleBOMVersions");
        }

        if (this.isCalledFromForm())
        {
            this.initRouteId();

            if (routeId == '')
            {
                str errorMessage = itemId ? strFmt("@SCM:NoApplicableRouteForItem", ItemId) : "@SCM:NoApplicableRoute";
                checkfailed(errorMessage);
                element.close();
            }
        }
        else
        {
            throw error("@SYS22996");
        }

        super();

        element.selectMode(route_OprNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRouteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>RouteId</c> value for the <c>Route</c> table.
    /// </summary>
    protected void initRouteId()
    {
        if (SysFormRun::hasMethod(element.args().caller(), identifierStr(itemId))
            || SysFormRun::hasMethod(element.args().caller(), identifierStr(bomVersionItemId)))
        {
            InventQty   searchQty;
            itemId    = SysFormRun::hasMethod(element.args().caller(), identifierStr(bomVersionItemId)) ?
                element.args().caller().bomVersionItemId() : element.args().caller().itemId();
            InventDim   inventDim = this.getInventDimFromCaller();

            if (SysFormRun::hasMethod(element.args().caller(), identifierStr(fromQty)))
            {
                searchQty = element.args().caller().fromQty();
            }

            if (inventDim.InventSiteId || inventDim.anyProductDimensionSpecified())
            {
                inventDim = InventDim::findOrCreate(inventDim);
            }

            InventTable inventTable = InventTable::find(itemId);

            routeId = inventTable.routeId(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                              searchQty,
                                              inventDim);
        }
        else if (SysFormRun::hasMethod(element.args().caller(), classStr(BOMDesignerCtrl)))
        {
            BOMDesignerCtrl bomDesignerCtrl = element.args().caller().bomDesignerCtrl();
            Bom             bom             = element.args().record();

            itemId = bomDesignerCtrl.getParentBOMItemId(bom);
            routeId = bomDesignerCtrl.getParentRouteId(bom);
        }
        else
        {
            routeId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalledFromForm</Name>
				<Source><![CDATA[
    private boolean isCalledFromForm()
    {
        return SysDictClass::isEqualOrSuperclass(classIdGet(element.args().caller()), classNum(FormRun));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimFromCaller</Name>
				<Source><![CDATA[
    protected InventDim getInventDimFromCaller()
    {
        InventDim inventDim;

        if (SysFormRun::hasMethod(element.args().caller(), identifierStr(bomVersionInventDim)))
        {
            inventDim = element.args().caller().bomVersionInventDim();
        }
        else if (SysFormRun::hasMethod(element.args().caller(), identifierStr(inventDim)))
        {
            inventDim = element.args().caller().inventDim();
        }
        else
        {
            inventDim = this.getInventDimFromCallerBySpecificDimensions();
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimFromCallerBySpecificDimensions</Name>
				<Source><![CDATA[
    private InventDim getInventDimFromCallerBySpecificDimensions()
    {
        InventDim inventDim;

        var caller = element.args().caller();

        if (SysFormRun::hasMethod(caller, identifierStr(siteId)))
        {
            inventDim.InventSiteId = caller.siteId();
        }

        if (SysFormRun::hasMethod(caller, identifierStr(configId)))
        {
            inventDim.ConfigId = caller.configId();
        }

        if (SysFormRun::hasMethod(caller, identifierStr(sizeId)))
        {
            inventDim.InventSizeId = caller.sizeId();
        }

        if (SysFormRun::hasMethod(caller, identifierStr(colorId)))
        {
            inventDim.InventColorId = caller.colorId();
        }

        if (SysFormRun::hasMethod(caller, identifierStr(styleId)))
        {
            inventDim.InventStyleId = caller.styleId();
        }

        if (SysFormRun::hasMethod(caller, identifierStr(versionId)))
        {
            inventDim.InventVersionId = caller.versionId();
        }

        return inventDim;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>Route</Name>
				<Methods>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        public void linkActive()
        {
            Query                   q       = this.query();
            QueryBuildDataSource    qbds    = q.dataSourceNo(1);
            QueryBuildRange         qr      = SysQuery::findOrCreateRange(qbds, fieldNum(Route,RouteId));

            qr.value(SysQuery::value(routeId));

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="" />
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>Route</Name>
			<Table>Route</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccError</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ErrorPct</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JobPayType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Level</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LinkType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OprId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OprNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OprNumNext</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OprPriority</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RouteId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Frame xmlns="">Border</Frame>
		<HeightMode xmlns="">SizeToContent</HeightMode>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Pattern xmlns="">LookupGridOnly</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<Style xmlns="">Lookup</Style>
		<WidthMode xmlns="">SizeToAvailable</WidthMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<AllowEdit>No</AllowEdit>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToContent</HeightMode>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormIntegerControl">
						<Name>Route_OprNum</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Integer</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>OprNum</DataField>
						<DataSource>Route</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>Route_OprPriority</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>OprPriority</DataField>
						<DataSource>Route</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Route_OprId</Name>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>OprId</DataField>
						<DataSource>Route</DataSource>
					</AxFormControl>
				</Controls>
				<DataSource>Route</DataSource>
				<MultiSelect>No</MultiSelect>
				<ShowRowLabels>No</ShowRowLabels>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>