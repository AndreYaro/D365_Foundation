<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BudgetControlLedgerJournalDataMaintenance</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BudgetControlLedgerJournalDataMaintenance extends FormRun implements BudgetControlILedgerJournalDataMaintenanceRequestable
{
    private NoYes isPosted;
    private TransDate fromDate;
    private TransDate toDate;
    private LedgerJournalType ledgerJournalType;

}
]]></Source>
			</Method>
			<Method>
				<Name>getRequest</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public BudgetControlLedgerJournalDataMaintenanceRequest getRequest()
    {
        str filterStr = JournalNum.valueStr();
        NoYes removeFoundDocuments = RemoveFoundDocumentsCheckBox.value();
        DataAreaId dataAreaId = Company.valueStr();

        BudgetControlLedgerJournalDataMaintenanceRequest request =
            BudgetControlLedgerJournalDataMaintenanceRequest::constructFromDialog(filterStr, removeFoundDocuments, ledgerJournalType, dataAreaId);

        return request;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void init()
    {
        super();

        BudgetControlDataMaintenance dataMaintenance = element.args().record();

        isPosted = dataMaintenance.DocumentSourceTrackingStatus == BudgetSourceTrackingStatus::Draft ? NoYes::No : NoYes::Yes;
        fromDate = dataMaintenance.DocumentFromDate;
        toDate = dataMaintenance.DocumentToDate;

        JournalType.clear();

        JournalType.add(enum2Str(LedgerJournalType::Daily));
        JournalType.add(enum2Str(LedgerJournalType::Allocation));
        JournalType.add(enum2Str(LedgerJournalType::Assets));
        JournalType.add(enum2Str(LedgerJournalType::Cost));
        JournalType.add(enum2Str(LedgerJournalType::Approval));
        JournalType.add(enum2Str(LedgerJournalType::PurchaseLedger));
        JournalType.add(enum2Str(LedgerJournalType::VendInvoiceRegister));

        element.setJournalType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJournalType</Name>
				<Source><![CDATA[
    private void setJournalType()
    {
        ledgerJournalType = enum2int(str2Enum(ledgerJournalType, JournalType.valueStr()));
        JournalName.text('');
        JournalNum.text('');
        Company.clear();
        Company.enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCompany</Name>
				<Source><![CDATA[
    private void setCompany()
    {
        Company.setCompany(JournalNum.text());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalNumber</Name>
				<Source><![CDATA[
    private boolean validateJournalNumber()
    {
        boolean ret = true;
        str ledgerJournalNumber = JournalNum.text();
        str ledgerJournalName = JournalName.text();
        str dataAreaId = Company.valueStr();

        if (ledgerJournalNumber != '')
        {
            LedgerJournalTable ledgerJournalTable =  this.findLedgerJournalTable(ledgerJournalNumber);

            if (ledgerJournalTable.RecId == 0
                    || (ledgerJournalName != '' && ledgerJournalTable.JournalName != ledgerJournalName))
            {
                ret = checkFailed(strFmt("@Budget:JournalNumNotFound", ledgerJournalNumber, ledgerJournalName));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLedgerJournalTable</Name>
				<Source><![CDATA[
    private LedgerJournalTable findLedgerJournalTable(LedgerJournalId _journalNum, DataAreaId _dataAreaId = '')
    {
        LedgerJournalTable ledgerJournalTable;

        if (_journalNum)
        {
            if (_dataAreaId == '')
            {
                select firstonly crosscompany ledgerJournalTable
                        where ledgerJournalTable.JournalNum == _journalNum;
            }
            else
            {
                changecompany (_dataAreaId)
                {
                    select firstonly ledgerJournalTable
                        where ledgerJournalTable.JournalNum == _journalNum;
                }
            }
        }

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>JournalType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean modified()
        {
            boolean ret = super();

            element.setJournalType();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>JournalName</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void lookup()
        {
            this.lookupJournalNameByJournalType(this, ledgerJournalType);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean validate()
        {
            boolean ret = super();
        
            str localJournalName = this.text();

            if (ret && localJournalName != '')
            {
                LedgerJournalName ledgerJournalName = this.findLedgerJournalName(localJournalName);

               if (ledgerJournalName.RecId == 0)
               {
                   ret = checkFailed("@Budget:JournalNameValidationError");
               }
            }
        
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean modified()
        {
            boolean ret = super();
        
            JournalNum.text('');
        
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookupJournalNameByJournalType</Name>
						<Source><![CDATA[
        private void lookupJournalNameByJournalType(FormStringControl _formControl, LedgerJournalType _journalType)
        {
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(LedgerJournalName),_formControl);
            Query query = new Query();
            query.allowCrossCompany(true);
            QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(LedgerJournalName));
            QueryBuildRange queryBuildRangeJournalType = queryBuildDataSource.addRange(fieldNum(LedgerJournalName, JournalType));
            QueryBuildRange queryBuildRangeUserGroupId = queryBuildDataSource.addRange(fieldNum(LedgerJournalName, BlockUserGroupId));

            sysTableLookup.addLookupfield(fieldNum(LedgerJournalName, JournalName));
            sysTableLookup.addLookupfield(fieldNum(LedgerJournalName, Name));

            queryBuildRangeJournalType.value(queryValue(_journalType));
            queryBuildRangeUserGroupId.value(UserGroupList::groupsForUser());

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>findLedgerJournalName</Name>
						<Source><![CDATA[
        private LedgerJournalName findLedgerJournalName(LedgerJournalNameId _ledgerJournalName)
        {
            LedgerJournalName ledgerJournalName;

            select firstonly crosscompany ledgerJournalName
                where ledgerJournalName.JournalName == _ledgerJournalName;

            return ledgerJournalName;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>JournalNum</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void lookup()
        {
            this.lookupJournalNumByJournalType(this, ledgerJournalType, JournalName.text());
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean validate()
        {
            str ledgerJournalNumber = this.text();
            str ledgerJournalName = JournalName.text();
            boolean ret = super();
            
            ret  = ret && element.validateJournalNumber();

            if (ret)
            {
                element.setCompany();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>findLedgerJournalTable</Name>
						<Source><![CDATA[
        private LedgerJournalTable findLedgerJournalTable(LedgerJournalId _journalNum)
        {
            LedgerJournalTable ledgerJournalTable;

            if (_journalNum)
            {
                select firstonly crosscompany ledgerJournalTable
                    where ledgerJournalTable.JournalNum == _journalNum;
            }

            return ledgerJournalTable;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookupJournalNumByJournalType</Name>
						<Source><![CDATA[
        private void lookupJournalNumByJournalType(
            FormStringControl _formControl,
            LedgerJournalType _journalType,
            LedgerJournalNameId _journalName)
        {
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(LedgerJournalTable), _formControl);

            Query query = new Query();
            query.allowCrossCompany(true);
            QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(LedgerJournalTable));

            queryBuildDataSource.addRange(fieldNum(LedgerJournalTable, JournalType)).value(queryValue(_journalType));
            queryBuildDataSource.addRange(fieldNum(LedgerJournalTable, Posted)).value(queryValue(isPosted));

            if (_journalName != '')
            {
                queryBuildDataSource.addRange(fieldNum(LedgerJournalTable, JournalName)).value(queryValue(_journalName));
            }

            QueryBuildDataSource queryBuildDataSourceTrans = queryBuildDataSource.addDataSource(tableNum(LedgerJournalTrans));
            queryBuildDataSourceTrans.addLink(fieldNum(LedgerJournalTable, JournalNum), fieldNum(LedgerJournalTrans, JournalNum));
            queryBuildDataSourceTrans.relations(true);
            queryBuildDataSourceTrans.joinMode(JoinMode::ExistsJoin);

            queryBuildDataSourceTrans.addRange(fieldNum(LedgerJournalTrans, TransDate)).value(SysQuery::range(fromDate, toDate));

            sysTableLookup.addLookupfield(fieldNum(LedgerJournalTable, JournalNum));
            sysTableLookup.addLookupfield(fieldNum(LedgerJournalTable, JournalName));
            sysTableLookup.addLookupfield(fieldNum(LedgerJournalTable, Name));
            sysTableLookup.addLookupfield(fieldNum(LedgerJournalTable, DataAreaId));

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Company</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>setCompany</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void setCompany(LedgerJournalId _journalNum)
        {
            this.addCompanyByJournalNum(_journalNum);

            boolean existsMultipleCompany = this.existsJournalNumberInMultipleCompany(_journalNum);
            this.enabled(existsMultipleCompany);
        }

]]></Source>
					</Method>
					<Method>
						<Name>existsJournalNumberInMultipleCompany</Name>
						<Source><![CDATA[
        private boolean existsJournalNumberInMultipleCompany(LedgerJournalId _journalNum)
        {
            LedgerJournalTable ledgerJournalTable;
            LedgerJournalTrans ledgerJournalTrans;

            if (_journalNum)
            {
                select crosscompany count(RecId) from ledgerJournalTable
                    where ledgerJournalTable.JournalNum == _journalNum
                        && ledgerJournalTable.Posted == isPosted
                    exists join ledgerJournalTrans
                        where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
                            && ledgerJournalTrans.TransDate >= fromDate
                            && ledgerJournalTrans.TransDate <= toDate;
            }

            return ledgerJournalTable.RecId > 1;
        }

]]></Source>
					</Method>
					<Method>
						<Name>addCompanyByJournalNum</Name>
						<Source><![CDATA[
        private void addCompanyByJournalNum(LedgerJournalId _journalNum)
        {
            LedgerJournalTable ledgerJournalTable;
            LedgerJournalTrans ledgerJournalTrans;

            if (_journalNum)
            {
                this.clear();

                while select crosscompany DataAreaId from ledgerJournalTable
                    where ledgerJournalTable.JournalNum == _journalNum
                        && ledgerJournalTable.Posted == isPosted
                    exists join ledgerJournalTrans
                        where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
                            && ledgerJournalTrans.TransDate >= fromDate
                            && ledgerJournalTrans.TransDate <= toDate
                {
                    this.add(ledgerJournalTable.DataAreaId);
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OKButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void clicked()
        {
            if (element.validateJournalNumber())
            {
                element.closeOk();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@Budget:LedgerJournalDataMaintenanceProviderName</Caption>
		<DefaultAction xmlns="">OKButton</DefaultAction>
		<DialogSize xmlns="">Medium</DialogSize>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<UseCaptionFromMenuItem xmlns="">Yes</UseCaptionFromMenuItem>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>SecondaryInstructions</Name>
				<AllowEdit>No</AllowEdit>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<Type>StaticText</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Text>@Budget:LedgerJournalDataMaintenanceInstruction</Text>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ContentGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>JournalType</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS22453</Label>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>JournalName</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DisplayLength>20</DisplayLength>
						<DisplayLengthMode>Fixed</DisplayLengthMode>
						<ExtendedDataType>LedgerJournalNameId</ExtendedDataType>
						<Label>@SYS1436</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>JournalNum</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@Budget:LedgerJournalDataMaintenanceJournalNumber</Label>
						<Mandatory>Yes</Mandatory>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>Company</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Enabled>No</Enabled>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS13342</Label>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>RemoveFoundDocumentsCheckBox</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<HelpText>@Budget:RemoveExistingFoundDocumentsHelpText</HelpText>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@Budget:RemoveExistingFoundDocumentsLabel</Label>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>CommitContainer</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<Text>@SYS5469</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>