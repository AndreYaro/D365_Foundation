<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailAddItems</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class RetailAddItems extends FormRun implements RetailIAddItems
{
    EcoResCategoryTreeDatasource        mHierarchyTree;
    EcoResCategoryHierarchy             mCategoryHierarchy;

    RetailInventDimCtrl_Frm_AddProducts inventDimFormSetup;
    EcoResCategoryLookupParameters      lookupParameters;
    EcoResCategoryHierarchy             selectedHierarchy;
    EcoResCategory                      callerEcoResCategory;
    RetailKit                           callerRetailKit;
    RetailKitComponent                  callerRetailKitComponent;
    boolean                             isMultiHierarchy;
    boolean                             calledFromSpecialHierarchyForm;
    boolean                             selectedHierachyIsSpecial;
    TableId                             callerTableId;
    MenuItemName                        callerMenuItemName;
    RetailCreateLinesFromProductsToAdd  productsToAdd;

    // This will make executeQuery method skip the first database call at form init.
    // That call is unnecessary as subsequent calls repeat the same work.
    boolean                             isFirstProductQueryExecute = true;

    RetailIAddItemsCaller               retailAddItemsCaller;
    RetailAddItemsData                  retailAddItemsData;    

    private const int RecordsToLoad_LoadLimitedRecords = 500;
    private const int RecordsToLoad_LoadAllRecords = 0;

}
]]></Source>
			</Method>
			<Method>
				<Name>RefreshProductsToAdd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh the products to add datasource.
    /// </summary>
    /// <param name = "_showAllProducts">Whether to show all, or limited, products.</param>
    public void RefreshProductsToAdd(boolean _showAllProducts)
    {
        if (_showAllProducts)
        {
            ecoResProduct_ds.maxRecordsToLoad(RecordsToLoad_LoadAllRecords);
        }
        else
        {
            ecoResProduct_ds.maxRecordsToLoad(RecordsToLoad_LoadLimitedRecords);
        }

        EcoResProduct_ds.executeQuery();
        this.UpdateShowAllProductsButton();
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateShowAllProductsButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the Show all products button based on the current state.
    /// </summary>
    public void UpdateShowAllProductsButton()
    {
        int loadedRecords = ecoResProduct_ds.numberOfRowsLoaded();
        boolean enableButton = EcoResProduct_ds.maxRecordsToLoad() != RecordsToLoad_LoadAllRecords;

        if (enableButton
            && EcoResProduct_ds.allRowsLoaded()
            && loadedRecords < RecordsToLoad_LoadLimitedRecords)
        {
            // All rows have been loaded, and it is less than the Limit, so we don't need to light up the button.
            enableButton = false;
        }

        if (enableButton)
        {
            ShowAllProductsButton.enabled(true);
        }
        else
        {
            ShowAllProductsButton.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndAddHierarchy</Name>
				<Source><![CDATA[
    // Sets the field 'Category' visible ON for multi hierarchy and add the hierarchy names into combo box
    public void checkAndAddHierarchy()//EcoResCategoryLookupParameters _lookupParameters, EcoResCategoryHierarchy _selectedCategoryHierarchy )
    {
        EcoResCategoryHierarchyRole ecoResCategoryHierarchyRoleLocal;
        EcoResCategoryHierarchy     ecoResCategoryHierarchyLocal;
        QueryRun                    queryRun;
        RecId                       selectedHierarchyId;
        Set                         hierarchySet = new Set(Types::String);

        container roles = lookupParameters.parmMultiRoleSelectionSet();

        selectedHierarchy = element.initializeCategoryHierarchy();//EcoResCategoryHierarchy::findByName(HierarchySelector.valueStr());

        // if multiple role lookup wasn't set, use the first role found on the selected hierarchy
        if (conLen(roles) == 0)
        {
            select firstonly NamedCategoryHierarchyRole from ecoResCategoryHierarchyRoleLocal
                where ecoResCategoryHierarchyRoleLocal.CategoryHierarchy == selectedHierarchy.RecId;
            roles = [ecoResCategoryHierarchyRoleLocal.NamedCategoryHierarchyRole];
        }

        // if more than 1 hierarchy matches the roles given, enable hierarchy picker
        queryRun = new QueryRun(this.queryHierarchiesByRoles(roles, true));
        if (queryRun.next())
        {
            ecoResCategoryHierarchyRoleLocal = queryRun.get(tableNum(EcoResCategoryHierarchyRole));
            if (ecoResCategoryHierarchyRoleLocal.RecId > 1)
            {
                isMultiHierarchy = true;
            }
        }
        else
        {
            isMultiHierarchy = false;
        }

        if (isMultiHierarchy)
        {
            hierarchySelector.visible(true);

            queryRun = new QueryRun(this.queryHierarchiesByRoles(roles));

            while (queryRun.next())
            {
                ecoResCategoryHierarchyRoleLocal = queryRun.get(tableNum(EcoResCategoryHierarchyRole));
                ecoResCategoryHierarchyLocal = queryRun.get(tableNum(EcoResCategoryHierarchy));
                // check args and see if we have currently selected hierarchy as parm
                if (this.args() && Global::isInteger(this.args().parm()))
                {
                    selectedHierarchyId = str2int64(this.args().parm());
                }
                if (ecoResCategoryHierarchyLocal.RecId != selectedHierarchyId)
                {
                    if (!hierarchySet.in(ecoResCategoryHierarchyLocal.Name))
                    {
                        hierarchySet.add(ecoResCategoryHierarchyLocal.Name);

                        hierarchySelector.add(ecoResCategoryHierarchyLocal.Name); // Add the hierarchy names into category list.
                    }
                }
            }
            hierarchySelector.selectText(selectedHierarchy.Name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrderLine</Name>
				<Source><![CDATA[
    void createOrderLine(Object _fdS)
    {
        productsToAdd.parmCallerCommon(element.args().record());

        if (callerTableId == tableNum(InventJournalTrans))
        {
            productsToAdd.journalForm(element.args().caller().journalForm());
        }

        productsToAdd.createProducts(tmpInventTable);

        if (callerTableId == tableNum(PurchTable) || callerTableId == tableNum(SalesTable))
        {
            _fdS.reReadLines(); // to refresh line datasource.
        }
        else if (callerTableId == tableNum(TmpRetailLabelsToPrint))
        {
            _fdS.reReadLines(productsToAdd.getTmpAddProducts());
        }
        else
        {
            _fdS.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createToFSHBuyersPushLine</Name>
				<Source><![CDATA[
    void createToFSHBuyersPushLine(RetailBuyersPushTable _fshBuyersPushTable, FormDataSource _callerDataSource)
    {
        RetailBuyersPushLine fshBuyersPushLine;

        fshBuyersPushLine.createFromTmpInventTable(_fshBuyersPushTable, tmpInventTable);
        inventTable_ds.executeQuery();

        _callerDataSource.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createToMassUpdateLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates record into <c>RetailMassUpdateWorksheetLine</c> table.
    /// </summary>
    /// <param name="_massUpdateTableRecId">
    ///  The selected mass update table rec id.
    /// </param>
    /// <param name="_callerDataSource">
    ///  The selected mass update table record.
    /// </param>
    void createToMassUpdateLine(RefRecId _massUpdateTableRecId, FormDataSource _callerDataSource)
    {
        RetailMassUpdateWorksheetLine   massUpdateLine;

        massUpdateLine.insertFromAddProducts(_massUpdateTableRecId, tmpInventTable);

        _callerDataSource.positionToRecord(RetailMassUpdateWorksheetTable::findRecId(_massUpdateTableRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createToPriceDiscAdmTrans</Name>
				<Source><![CDATA[
    void createToPriceDiscAdmTrans(PriceDiscAdmTable _priceDiscAdmTable)
    {
        PriceDiscAdmTrans::createFromTmpProductAndVariants(_priceDiscAdmTable.JournalNum, tmpInventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createToProductCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Create selected products in <c>EcoResProductCategory</c> table.
    /// </summary>
    /// <param name="_callerDS">
    ///  Caller form datasource object.
    /// </param>
    void createToProductCategory(FormDataSource _callerDS)
    {
        DialogButton response;
        Set productIds;
        RetailCategoryProductUpdateParm parameters;
        Args args;
        MenuFunction menuFunction;
        EcoResCategoryHierarchy     ecoResCategoryHierarchy;
        int64 numberOfProductsAdded;
        boolean rowsWereCreated;

        select count(RecId) from tmpInventTable;
        numberOfProductsAdded = tmpInventTable.RecId;

        if  (numberOfProductsAdded == 0)
        {
            // no products were added
            return;
        }

        rowsWereCreated = EcoResProductCategory::createFromTmpProductTable(tmpInventTable, callerEcoResCategory);

        if (rowsWereCreated)
        {
            if (calledFromSpecialHierarchyForm
                || EcoResCategoryHierarchyRole::existRoleHierarchyPair(EcoResCategoryNamedHierarchyRole::RetailSpecialGroup,callerEcoResCategory.CategoryHierarchy))
            {
                RetailSpecialCategoryMember::createFromTmpProductsToAdd(tmpInventTable, callerEcoResCategory, productsToAdd);
            }

            ecoResCategoryHierarchy = EcoResCategoryHierarchy::find(callerEcoResCategory.CategoryHierarchy);

            if (EcoResCategoryHierarchyRole::existRoleHierarchyPair(
                    EcoResCategoryNamedHierarchyRole::Retail,
                    ecoResCategoryHierarchy.RecId))
            {
                response = Box::yesNo("@RET260050", DialogButton::No, "@RET260051", "@RET260052");

                if (DialogButton::Yes == response)
                {
                    args = new Args(formStr(RetailProductUpdateForm));

                    parameters = RetailCategoryProductUpdateParm::construct();
                    parameters.parmEntityName(callerEcoResCategory.Name);
                    parameters.parmEntityType(RetailProductUpdateMode::ProductSet);
                    parameters.parmEntityId(callerEcoResCategory.RecId);
                    parameters.parmCategoryId(callerEcoResCategory.RecId);

                    productIds = new Set(Types::Int64);
                    // build the set of all companies, where the product has been released
                    while select tmpInventTable
                    {
                        productIds.add(tmpInventTable.EcoResProduct);
                    }

                    parameters.parmProductIds(productIds);
                    args.parmObject(parameters);

                    menuFunction = new MenuFunction(menuitemDisplayStr(RetailProductUpdate), MenuItemType::Display);
                    menuFunction.run(args);
                }
            }
        }
        _callerDS.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createToProductKitComponents</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Create selected products in <c>RetailKitComponent</c> table.
    /// </summary>
    /// <param name="_callerDS">
    ///  Caller form datasource object.
    /// </param>
    void createToProductKitComponents()
    {
        int64 numberOfProductsAdded;
        boolean rowsWereCreated;

        select count(RecId) from tmpInventTable;
        numberOfProductsAdded = tmpInventTable.RecId;

        if  ( numberOfProductsAdded == 0)
        {
            // no products were added
            return;
        }

        rowsWereCreated = RetailKitComponent::createFromTmpProductTable(tmpInventTable, callerRetailKit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createToProductKitComponentSubstitutes</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Retail - Create selected products in <c>RetailKitComponentSubstitute</c> table.
    /// </summary>
    /// <param name="_callerDS">
    ///  Caller form datasource object.
    /// </param>
    void createToProductKitComponentSubstitutes()
    {
        int64 numberOfProductsAdded;
        boolean rowsWereCreated;

        select count(RecId) from tmpInventTable;
        numberOfProductsAdded = tmpInventTable.RecId;

        if  ( numberOfProductsAdded == 0)
        {
            // no products were added
            return;
        }
        rowsWereCreated = RetailKitComponentSubstitute::createFromTmpProductTable(tmpInventTable, callerRetailKitComponent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createToRBODeliveryModeItemList</Name>
				<Source><![CDATA[
    void createToRBODeliveryModeItemList(DlvMode _dlvMode, FormDataSource _callerDataSource)
    {
        RetailDlvModeProductLine dlvModeProductLine;

        dlvModeProductLine.createFromTmpProductsToAdd(_dlvMode, tmpInventTable);

        inventTable_ds.executeQuery();

        _callerDataSource.positionToRecord(DlvMode::findRecId(_dlvMode.RecId));

        _callerDataSource.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createToRBOPackageLine</Name>
				<Source><![CDATA[
    void createToRBOPackageLine(RetailPackageId _packageId, FormDataSource _callerDataSource)
    {
        RetailPackageLines rboPackageLines;

        rboPackageLines.createFromTmpInventTable(_packageId, tmpInventTable, productsToAdd);
        inventTable_ds.executeQuery();

        _callerDataSource.positionToRecord(RetailPackageTable::find(_packageId));

        _callerDataSource.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableCategoryHierarchy</Name>
				<Source><![CDATA[
    private void enableCategoryHierarchy()
    {
        this.initializeCategoryHierarchy();
        this.initializeCategoryTree();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCategoryHierarchy</Name>
				<Source><![CDATA[
    private EcoResCategoryHierarchy getCategoryHierarchy()
    {
        return mCategoryHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAddItemsInitParameters</Name>
				<Source><![CDATA[
    private void initAddItemsInitParameters(FormRun _callerForm)
    {
        retailAddItemsData = RetailAddItemsData::createInstance(null);

        if (callerTableId == tableNum(PurchTable))
        {
            retailAddItemsData.itemOrderSetupType = InventItemOrderSetupType::Purch;
        }
        else if (callerTableId == tableNum(SalesTable))
        {
            retailAddItemsData.itemOrderSetupType = InventItemOrderSetupType::Sales;
        }
        else
        {
            retailAddItemsData.itemOrderSetupType = InventItemOrderSetupType::Invent;
        }

        retailAddItemsData.shouldAddSalesHierarchyPurpose = false;
        if (    callerMenuItemName == menuitemDisplayStr(TAMRetailAddItems)
            ||  callerMenuItemName == menuitemDisplayStr(MCRRoyaltyContractAddItems)
            ||  callerMenuItemName == menuitemDisplayStr(MCRRoyaltyTableAddItems)
            ||  callerMenuItemName == menuItemDisplayStr(RetailAddItems))
        {
            retailAddItemsData.shouldAddSalesHierarchyPurpose = true;
        }

        retailAddItemsData.showCatalogs = false;
        if (callerMenuItemName == menuItemDisplayStr(RetailAddItems) && _callerForm.name() == formStr(SalesTable))
        {
            retailAddItemsData.verifyAlternativeItem = true;

            SalesTable salesTable = element.args().record() as SalesTable;
            if (B2B2BDataHelper::shouldRespectCatalog(salesTable.RetailChannelTable))
            {
                retailAddItemsData.showCatalogs = true;
                retailAddItemsData.retailChannelId = salesTable.RetailChannelTable;
                retailAddItemsData.custAccount = salesTable.CustAccount;
            }
        }

        retailAddItemsData.showDimensions = true;
        if (    callerMenuItemName == menuitemDisplayStr(RetailAddProductsVariants)
            ||  callerTableId == tableNum(RetailBuyersPushTable)
            ||  (_callerForm != null && _callerForm.name() == formStr(RetailMassUpdateWorksheet))
            ||  retailAddItemsData.showCatalogs)
        {
            retailAddItemsData.showDimensions = false;
        }

        retailAddItemsData.showVariantColumn = false;
        if (    callerMenuItemName == menuitemDisplayStr(RetailAddProductsVariants)
            ||  callerMenuItemName == menuitemDisplayStr(RetailPriceDiscAddItems)
            ||  callerTableId == tableNum(RetailBuyersPushTable)
            ||  retailAddItemsData.showCatalogs)
        {
            retailAddItemsData.showVariantColumn = true;
        }

        retailAddItemsData.showQty      = true;
        retailAddItemsData.showFilters  = true;

        if (    callerTableId == tableNum(RetailPeriodicDiscount)
            ||  callerTableId == tableNum(RetailDiscountThresholdTiers)
            ||  callerTableId == tableNum(RetailBuyersPushTable)
            ||  callerTableId == tableNum(RetailMassUpdateWorksheetTable)
            ||  callerTableId == tableNum(PriceDiscAdmTable))
        {
            retailAddItemsData.showQty = false;
        }
        
        if (   (callerMenuItemName == menuitemDisplayStr(RetailAddProductsVariants)
                && (    callerTableId == tableNum(RetailAssortmentTable)
                    ||  (_callerForm != null && _callerForm.name() == formStr(RetailKitConfigure))
                    ||  callerTableId == tableNum(DlvMode)
                    ||  (_callerForm != null && _callerForm.name() == formStr(RetailCategory))
                    )
                )
            ||  callerMenuItemName == menuitemDisplayStr(TAMRetailAddItems)
            ||  callerMenuItemName == menuitemDisplayStr(MCRRoyaltyContractAddItems)
            ||  callerMenuItemName == menuitemDisplayStr(MCRRoyaltyTableAddItems)
           )
        {
            retailAddItemsData.showQty = false;
            retailAddItemsData.showFilters = false;
        }

        retailAddItemsData.showGlobalVariants = false;
        if (callerTableId == tableNum(RetailAssortmentTable) ||
            (_callerForm != null && (_callerForm.name() == formStr(RetailKitConfigure) || _callerForm.name() == formStr(RetailCategory))))
        {
            retailAddItemsData.showGlobalVariants = true;
        }

        retailAddItemsData.showOnlyReleasedProducts = true;
        if ((callerMenuItemName == menuitemDisplayStr(RetailAddProductsVariants)
            && (    callerTableId == tableNum(RetailAssortmentTable)
                ||  (_callerForm != null && _callerForm.name() == formStr(RetailKitConfigure))
                ||  callerTableId == tableNum(DlvMode)
                ||  (_callerForm != null && _callerForm.name() == formStr(RetailCategory))
                )
            ))
        {
            retailAddItemsData.showOnlyReleasedProducts = false;
        }

        retailAddItemsData.shouldClearDynalink = false;
        if (_callerForm != null && (_callerForm.name() == formStr(RetailMassUpdateWorksheet) || _callerForm.name() == formStr(RetailPrintLabels)))
        {
            retailAddItemsData.shouldClearDynalink = true;
        }

        retailAddItemsData.showAddProductsVariantsActionPane   = true;
        retailAddItemsData.showSelectedProductsGroup           = true;
        if (_callerForm != null && (_callerForm.name() == formStr(RetailTillLayout) || _callerForm.name() == formStr(RetailButtonGrid) || _callerForm.name() == formStr(RetailInfocodeTable)))
        {
            retailAddItemsData.showAddProductsVariantsActionPane   = false;
            retailAddItemsData.showSelectedProductsGroup           = false;
        }

        if (callerMenuItemName == menuitemDisplayStr(RetailAddProducts) || callerMenuItemName == menuitemDisplayStr(RetailAddItems))
        {
            retailAddItemsData.defaultQuantity = 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {        
        FormRun callerForm = element.args().caller();

        callerTableId       = element.args().dataset();
        callerMenuItemName  = element.args().menuItemName();      

        super();

        // Read configuration values
        if (callerForm is RetailIAddItemsCaller)
        {
            retailAddItemsCaller = callerForm as RetailIAddItemsCaller;
            retailAddItemsData = retailAddItemsCaller.getAddItemsInitParameters(); 
        }
        else 
        {
            this.initAddItemsInitParameters(callerForm);
        }

        // Read configuration values and take actions based on these configuration values
        if (retailAddItemsData.shouldClearDynalink)
        {
            EcoResProduct_ds.query().dataSourceTable(tableNum(EcoResProduct)).clearDynalinks();
        }

        element.updateDesign(InventDimFormDesignUpdate::Init);
        element.enableCategoryHierarchy();
        element.setEnableDisableFields();        

        TmpInventTable_ds.object(fieldNum(TmpRetailProductsToAdd, Quantity)).visible(retailAddItemsData.showQty);
        InventItemGroupItem_ds.query().dataSourceTable(tableNum(InventItemGroupItem)).enabled(false);        
        InventTable_ds.query().dataSourceTable(tableNum(InventTable)).enabled(retailAddItemsData.showOnlyReleasedProducts);
        RetailCatalogProductIncludeMasterView_ds.query().dataSourceTable(tableNum(RetailCatalogProductIncludeMasterView)).enabled(retailAddItemsData.showCatalogs);
       
        element.initializeCatalog();

        // Load existing set of products       
        if (retailAddItemsCaller)
        {
            TmpInventTable.setTmpData(retailAddItemsData.tmpProductsToAdd);
        }

        // Always initialize the productsToAdd collection.
        productsToAdd  = new RetailCreateLinesFromProductsToAdd();
        productsToAdd.loadLinesFromCaller(element.args(), TmpInventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCategoryHierarchy</Name>
				<Source><![CDATA[
    private EcoResCategoryHierarchy initializeCategoryHierarchy()
    {
        EcoResCategoryHierarchyRole retailHierarchyRole =
            EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Retail);

        if (!retailHierarchyRole)
        {
            retailHierarchyRole =
                EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::RetailSpecialGroup);

            if (!retailHierarchyRole)
            {
                retailHierarchyRole =
                    EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Procurement);
            }
        }

        return EcoResCategoryHierarchy::find(retailHierarchyRole.CategoryHierarchy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCategoryTree</Name>
				<Source><![CDATA[
    //  Initializes the hierarchy for Retail product, Special hierarchy & procurement.
    public void initializeCategoryTree()
    {
        container hierarchyRole;

        selectedHierarchy = this.getCategoryHierarchy();

        hierarchyRole = [EcoResCategoryNamedHierarchyRole::Retail,
                        EcoResCategoryNamedHierarchyRole::RetailSpecialGroup,
                        EcoResCategoryNamedHierarchyRole::Procurement];

        if (retailAddItemsData.shouldAddSalesHierarchyPurpose)
        {
            hierarchyRole += EcoResCategoryNamedHierarchyRole::Sales;
        }               

        lookupParameters = new EcoResCategoryLookupParameters(
                                                        false,
                                                        true,
                                                        false,
                                                        true,
                                                        '' ,
                                                        null,
                                                        0,
                                                        0,
                                                        ProcCategoryOrganizationOption::BuyingLegalEntity,
                                                        0,
                                                        hierarchyRole);

        if (retailAddItemsData.shouldAddSalesHierarchyPurpose)
        {
            lookupParameters.parmMultiRoleSelectionSet(hierarchyRole);
        }

        element.checkAndAddHierarchy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCatalog</Name>
				<Source><![CDATA[
    private void initializeCatalog()
    {
        if (!retailAddItemsData.showCatalogs)
        {
            return;
        }

        Catalog catalog = B2B2BDataHelper::getDefaultCatalogByCustAccountAndRetailChannel(retailAddItemsData.retailChannelId, retailAddItemsData.custAccount);
        CatalogSelector.text(catalog.CatalogId);
        RetailCatalogProductIncludeMasterView_ds.query().dataSourceTable(tableNum(RetailCatalogProductIncludeMasterView))
            .addRange(fieldNum(RetailCatalogProductIncludeMasterView, Catalog)).value(any2Str(catalog.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTmpProductsToAdd</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates record into <c>TmpRetailProductsToAdd</c>.
    /// </summary>
    /// <param name="_productRecId">
    ///  The product rec id.
    /// </param>
    /// <param name="_variantId">
    ///  The distinct product variant rec id.
    /// </param>
    /// <param name="_quantity">
    ///  The line quantity used to create transaction line.
    /// </param>
    public void insertIntoTmpProductsToAdd(RefRecId _productRecId, RefRecId _variantId, Qty _quantity)
    {
        InventDim       tmpInventDim;
        EcoResProduct   product;
        PurchTable      purchTable;
        SalesTable      salesTable;
        InventJournalTrans inventJournalTrans;

        product = EcoResProduct::find(_productRecId);

        tmpInventTable.clear();

        tmpInventTable.EcoResProduct        = product.RecId;
        tmpInventTable.EcoResProductName    = product.productName();
        tmpInventTable.Quantity             = _quantity;

        // Find associated product category and include in the invent table     
        QueryBuildRange categoryRange = EcoResCategory_ds.queryBuildDataSource().findRange(fieldnum(EcoResCategory, RecId));

        if (categoryRange)
        {
            tmpInventTable.Category = str2Int64(categoryRange.value());
        }
        else
        {            
            EcoResProductCategory productCategory;

            select Category from productCategory
                where productCategory.CategoryHierarchy == selectedHierarchy.RecId &&
                      productCategory.Product == product.RecId;

            tmpInventTable.Category = productCategory.Category;
        }

        // find InventDim when invoking from Matrix pivot form.
        if (_variantId)
        {
            tmpInventTable.EcoResDistinctProductVariant = _variantId;
            tmpInventDim = InventDimCombination::findByDistinctProductVariant(_variantId).inventDim();
            element.setInventDim(tmpInventTable, tmpInventDim);
        }

        if (_variantId == 0)
        {
            element.setInventDim(tmpInventTable, InventDim::findOrCreateBlank());
        }

        // updating ItemId to build up relation between TmpRetailProductsToAdd and InventDim to
        // work Inventory dimension combinations correctly.
        tmpInventTable.ItemId  = InventTable::findByProduct(tmpInventTable.EcoResProduct).ItemId;

		// Updating the quantity in the AddVariants form as per default quantity setup. 
        if (!retailAddItemsData.defaultQuantity)
        {
            TmpInventTable.Quantity = retailAddItemsData.defaultQuantity;
        }

        if (retailAddItemsData.showCatalogs && CatalogSelector.valueStr())
        {
            Catalog catalog = Catalog::FindByCatalogId(CatalogSelector.valueStr());
            tmpInventTable.Catalog = catalog.RecId;
        }

        if (retailAddItemsData.verifyAlternativeItem)
        {
            element.createAlternativeItemifExists();
        }
        else
        {
            tmpInventTable.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimSetupObject</Name>
				<Source><![CDATA[
    RetailInventDimCtrl_Frm_AddProducts inventDimSetupObject()
    {
        if (!inventDimFormSetup)
        {
            inventDimFormSetup  = RetailInventDimCtrl_Frm_AddProducts::newFromForm(element);
            inventDimFormSetup.parmLargeRightClickForm(NoYes::Yes);
        }
        return inventDimFormSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveDeletedTmpProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the temporary product.
    /// </summary>
    /// <param name = "_tmpProduct">The temporary products to delete.</param>
    public void saveDeletedTmpProduct(TmpRetailProductsToAdd _tmpProduct)
    {
        productsToAdd.parmCallerCommon(element.args().record());
        productsToAdd.saveDeletedTmpProducts(_tmpProduct);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCreateToMCRRoyaltyItemCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Create selected products in <c>MCRRoyaltyItemCode</c> table.
    /// </summary>
    /// <param name="_mcrRoyaltyTable">
    ///  A <c>MCRRoyaltyTable</c> record used in the creation of child <c>MCRRoyaltyItemCode</c> table .
    /// </param>
    void mcrCreateToMCRRoyaltyItemCode(MCRRoyaltyTable _mcrRoyaltyTable)
    {
        List        listProducts = new List(Types::Record);
        container   mcrRoyaltyTableContainer;

        while select tmpInventTable
        {
            listProducts.addEnd(tmpInventTable);
        }

        mcrRoyaltyTableContainer    = buf2Con(_mcrRoyaltyTable, true);
        // create MCRRoyaltyItemCode based on a selection list and MCRRoyaltyTable parent
        MCRRoyaltyItemCode::insertMCRRoyaltyItemCodeFromProduct(listProducts.pack(), mcrRoyaltyTableContainer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCreateToMCRRoyaltyItemTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Create selected products in <c>MCRRoyaltyItemTable</c> table.
    /// </summary>
    /// <param name="_mcrRoyaltyContract">
    ///  A <c>MCRRoyaltyContract</c> record used in the creation of child <c>MCRRoyaltyItemTable</c> table .
    /// </param>
    void mcrCreateToMCRRoyaltyItemTable(MCRRoyaltyContract _mcrRoyaltyContract)
    {
        List        listProducts = new List(Types::Record);
        container   mcrRoyaltyContractContainer;

        while select tmpInventTable
        {
            listProducts.addEnd(tmpInventTable);
        }

        mcrRoyaltyContractContainer = buf2Con(_mcrRoyaltyContract, true);
        // create MCRRoyaltyItemTable based on a selection list and MCRRoyaltyContract parent
        MCRRoyaltyItemTable::insertMCRRoyaltyItemTableFromProduct(listProducts.pack(), mcrRoyaltyContractContainer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateLinesFromProductsToAdd</Name>
				<Source><![CDATA[
    public RetailCreateLinesFromProductsToAdd parmCreateLinesFromProductsToAdd(RetailCreateLinesFromProductsToAdd _productsToAdd)
    {
        productsToAdd = _productsToAdd;

        return productsToAdd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEcoResCategory</Name>
				<Source><![CDATA[
    // Returns form caller selected EcoResCategory record
    public EcoResCategory parmEcoResCategory(EcoResCategory _ecoResCategory = callerEcoResCategory)
    {
        callerEcoResCategory = _ecoResCategory;

        return callerEcoResCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailKit</Name>
				<Source><![CDATA[
    // Returns form caller selected RetailKit record
    public RetailKit parmRetailKit(RetailKit _retailKit = callerRetailKit)
    {
        callerRetailKit = _retailKit;

        return callerRetailKit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailKitComponent</Name>
				<Source><![CDATA[
    // Returns form caller selected RetailKit record
    public RetailKitComponent parmRetailKitComponent(RetailKitComponent _retailKitComponent = callerRetailKitComponent)
    {
        callerRetailKitComponent = _retailKitComponent;

        return callerRetailKitComponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecialHierarchyForm</Name>
				<Source><![CDATA[
    public boolean parmSpecialHierarchyForm(boolean _calledFromSpecialHierarchyForm = calledFromSpecialHierarchyForm)
    {
        calledFromSpecialHierarchyForm = _calledFromSpecialHierarchyForm;

        return calledFromSpecialHierarchyForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productName</Name>
				<Source><![CDATA[
    display EcoResProductName productName()
    {
        return EcoResProductTranslation::findByProductLanguage(tmpInventTable.EcoResProduct, SystemParameters::getSystemLanguageId()).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryHierarchiesByRoles</Name>
				<Source><![CDATA[
    private Query queryHierarchiesByRoles(container _roles, boolean _countOnly = false)
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(EcoResCategoryHierarchyRole));
        int i;

        qbds.addDataSource(tableNum(EcoResCategoryHierarchy))
            .addLink(fieldNum(EcoResCategoryHierarchyRole, CategoryHierarchy),
                    fieldNum(EcoResCategoryHierarchy, RecId));

        for (i=1; i<=conLen(_roles); i++)
        {
            qbds.addRange(fieldNum(EcoResCategoryHierarchyRole, NamedCategoryHierarchyRole))
                .value(queryValue( conPeek(_roles,i) ));
        }

        if (_countOnly)
        {
            qbds.fields().clearFieldList();
            qbds.addSelectionField(fieldNum(EcoResCategoryHierarchyRole, RecId), SelectionField::Count);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDS</Name>
				<Source><![CDATA[
    public void refreshDS()
    {
        tmpinventTable_ds.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        EcoResCategory  root;

        super();

        if (isMultiHierarchy)
        {
            selectedHierarchy = EcoResCategoryHierarchy::findByName(hierarchySelector.valueStr());
        }

        root = EcoResCategory::getRoot(selectedHierarchy.RecId);

        if (selectedHierarchy.RecId)
        {
            selectedHierachyIsSpecial = EcoResCategoryHierarchyRole::existRoleHierarchyPair(EcoResCategoryNamedHierarchyRole::RetailSpecialGroup, selectedHierarchy.RecId);

            if (selectedHierachyIsSpecial)
            {
                // this may have issues with performance.
                // We will try to make sure that by the time we reach this point this was already done.
                RetailCategoryContainmentLookup::synchronizeCategoriesLookup();
            }

            mHierarchyTree = EcoResCategoryTreeDatasource::newFromParameter( ecoResCategory_ds,
                                                               hierarchyTreeCtrl,
                                                               fieldNum(EcoResCategory, RecId),
                                                               fieldNum(EcoResCategory, ParentCategory),
                                                               fieldNum(EcoResCategory, Name),
                                                               false /* No ID in description */,
                                                               true,
                                                               fieldNum(EcoResCategory, Code),
                                                               selectedHierarchy,
                                                               null,
                                                               lookupParameters,
                                                               fieldNum(EcoResCategory, NestedSetLeft) /* for tree sort order */
                                                               );

            if (root.RecId)
            {
                mHierarchyTree.initRoot(root.Name, root.RecId, mHierarchyTree.image() );
            }
            if (mHierarchyTree)
            {
                mHierarchyTree.setFocusOnFirstMatch();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnableDisableFields</Name>
				<Source><![CDATA[
    private void setEnableDisableFields()
    {
        menuItemDimensions.visible(retailAddItemsData.showDimensions);
        inventoryDimensions.visible(retailAddItemsData.showDimensions);

        if (retailAddItemsData.showVariantColumn && element.args().parm() != 'HideVariantColumn')
        {
            TmpInventTable_EcoResDistinctProductVariant.visible(true);
        }

        if (element.args().parm() == 'HideVariantColumn')
        {
            AddVariantsButton.enabled(false);
        }

        AddProductsVariantsActionPane.visible(retailAddItemsData.showAddProductsVariantsActionPane);
        RightGroup.visible(retailAddItemsData.showSelectedProductsGroup);

        CatalogSelector.visible(retailAddItemsData.showCatalogs);
        ItemGroup.visible(retailAddItemsData.showFilters);
        BuyersGroup.visible(retailAddItemsData.showFilters);
        Vendor.visible(retailAddItemsData.showFilters);

        TmpInventTable_Catalog.visible(retailAddItemsData.showCatalogs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets the <c>InventDim</c> data source according to dataset.
    /// </summary>
    /// <param name="_productsToAdd">
    ///  A buffer record of <c>TmpRetailProductsToAdd</c> table.
    /// </param>
    /// <param name="_inventDimd">
    ///  The inventDim to retrieve default settings from; optional.
    /// </param>
    void setInventDim(TmpRetailProductsToAdd _productsToAdd, InventDim _inventDim = inventDim)
    {
        _productsToAdd.initFromInventTable(InventTable::findByProduct(_productsToAdd.EcoResProduct),
                                           retailAddItemsData.itemOrderSetupType,
                                           _inventDim,
                                           element.args().record());

        inventDim.data(InventDim::find(_productsToAdd.InventDim));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showHideQtyColumn</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks whether Quantity column need to display on the Matrix pivot form.
    /// </summary>
    /// <returns>True if Quantity column need to display on the Matrix pivot form; otherwise, false.</returns>
    public boolean showHideQtyColumn()
    {
        return retailAddItemsData.showQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tamCreateToFundInvent</Name>
				<Source><![CDATA[
    void tamCreateToFundInvent(TAMFundTable _tamFundTable)
    {
        List listProducts = new List(Types::Record);

        while select tmpInventTable
        {
            listProducts.addEnd(tmpInventTable);
        }

        TAMFundInvent::insertTAMPromotionItemFromProduct(listProducts.pack(), _tamFundTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tamCreateToPdsRebateItem</Name>
				<Source><![CDATA[
    void tamCreateToPdsRebateItem(PdsRebateAgreement _pdsRebateAgreement)
    {
        List listProducts = new List(Types::Record);

        while select tmpInventTable
        {
            listProducts.addEnd(tmpInventTable);
        }

        PdsRebateItem::insertPdsRebateItemFromProduct(listProducts.pack(), _pdsRebateAgreement, InventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tamCreateToTAMPromoItemFromMerchEvent</Name>
				<Source><![CDATA[
    void tamCreateToTAMPromoItemFromMerchEvent(TAMMerchandisingEvent _tamMerchandisingEvent)
    {
        List                listProducts = new List(Types::Record);
        TAMTradePromotion   tamTradePromotion = TAMTradePromotion::findByPromoID(_tamMerchandisingEvent.PromotionID);

        while select tmpInventTable
        {
            listProducts.addEnd(tmpInventTable);
        }

        TAMPromotionItem::insertTAMPromotionItemFromProduct(listProducts.pack(), tamTradePromotion, true, _tamMerchandisingEvent.MerchandisingEventID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tamCreateToTAMPromoItemFromPromotion</Name>
				<Source><![CDATA[
    void tamCreateToTAMPromoItemFromPromotion(TAMTradePromotion _tamTradePromotion)
    {
        List                listProducts = new List(Types::Record);

        while select tmpInventTable
        {
            listProducts.addEnd(tmpInventTable);
        }

        TAMPromotionItem::insertTAMPromotionItemFromProduct(listProducts.pack(), _tamTradePromotion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tamCreateToVendRebateItem</Name>
				<Source><![CDATA[
    void tamCreateToVendRebateItem(TAMVendRebateAgreement _tamVendRebateAgreement)
    {
        List listProducts = new List(Types::Record);

        while select tmpInventTable
        {
            listProducts.addEnd(tmpInventTable);
        }

        TAMVendRebateItem::insertTAMVendRebateItemFromProduct(listProducts.pack(), _tamVendRebateAgreement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpInventTable</Name>
				<Source><![CDATA[
    public TmpRetailProductsToAdd tmpInventTable()
    {
        return TmpInventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    void updateDesign(InventDimFormDesignUpdate mode)
    {
        switch (mode)
        {
            case InventDimFormDesignUpdate::Init           :
                if (!inventDimFormSetup)
                {
                    inventDimFormSetup = RetailInventDimCtrl_Frm_AddProducts::newFromForm(element);
                }
                break;

            case InventDimFormDesignUpdate::Active         :
                inventDimFormSetup.formActiveSetup(InventDimGroupSetup::newInventTable(InventTable::findByProduct(tmpInventTable.EcoResProduct)));
                inventDimFormSetup.formSetControls(true);
                break;

            case InventDimFormDesignUpdate::FieldChange    :
                inventDimFormSetup.formActiveSetup(InventDimGroupSetup::newInventTable(InventTable::findByProduct(tmpInventTable.EcoResProduct)));
                inventDimFormSetup.formSetControls(false);
                break;

            default :
                throw error(strFmt("@SYS54195",funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        super();

        this.createCallerTableRecords(callerTableId, tmpInventTable);

        if (callerMenuItemName == menuitemDisplayStr(RetailAddProductsVariants))
        {
            if (callerEcoResCategory.RecId)
            {
                element.createToProductCategory(FormDataUtil::getFormDataSource(callerEcoResCategory));
            }

            if (callerRetailKit.RecId)
            {
                element.createToProductKitComponents();
            }

            if (callerRetailKitComponent.RecId)
            {
                element.createToProductKitComponentSubstitutes();
            }
        }
        else if (callerMenuItemName == menuitemDisplayStr(RetailPriceDiscAddItems))
        {
            element.args().caller().refreshPriceDiscAdmTrans();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCallerTableRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates records in caller table when <c>RetailAddItems</c> form is closed.
    /// </summary>
    /// <param name = "_callerTableId">
    /// The caller tableId.
    /// </param>
    /// <param name = "_tmpInventTable">
    /// The table buffer of <c>TmpRetailProductsToAdd</c> temporary table.
    /// </param>
    public void createCallerTableRecords(TableId _callerTableId, TmpRetailProductsToAdd _tmpInventTable)
    {
        Common                          callerRecord;
        RetailBuyersPushTable           fshBuyersPushTable;
        RetailPackageTable              rboPackageTable;
        RetailMassUpdateWorksheetTable  massUpdateTable;
        PriceDiscAdmTable               priceDiscAdmTable;
        PdsRebateAgreement              pdsRebateAgreement;
        TAMVendRebateAgreement          tamVendRebateAgreement;
        TAMTradePromotion               tamTradePromotion;
        TAMMerchandisingEvent           tamMerchandisingEvent;
        TAMFundTable                    tamFundTable;
        MCRRoyaltyContract              mcrRoyaltyContract;
        MCRRoyaltyTable                 mcrRoyaltyTable;


        if (retailAddItemsCaller)
        {
            retailAddItemsCaller.processSelectedProducts(retailAddItemsData);
        }

        switch (_callerTableId)
        {
            case tableNum(DlvMode):
                callerRecord = element.args().record();
                element.createToRBODeliveryModeItemList(callerRecord, FormDataUtil::getFormDataSource(callerRecord));
                break;

            case tableNum(RetailBuyersPushTable):
                fshBuyersPushTable = element.args().record();
                element.createToFSHBuyersPushLine(fshBuyersPushTable, FormDataUtil::getFormDataSource(fshBuyersPushTable));
                break;

            case tableNum(RetailPackageTable):
                rboPackageTable = element.args().record();
                element.createToRBOPackageLine(rboPackageTable.PackageId, FormDataUtil::getFormDataSource(rboPackageTable));
                break;

            case tableNum (RetailPeriodicDiscount):
            case tableNum (RetailDiscountThresholdTiers):
            case tableNum (SalesTable):
            case tableNum (PurchTable):
            case tableNum (InventTransferTable):
            case tableNum (InventJournalTrans):
            case tableNum (TmpRetailLabelsToPrint):
                element.createOrderLine(FormDataUtil::getFormDataSource(element.args().record()));
                break;
            case tableNum(RetailMassUpdateWorksheetTable):
                massUpdateTable = element.args().record();
                element.createToMassUpdateLine(massUpdateTable.RecId, FormDataUtil::getFormDataSource(massUpdateTable));
                break;
            case tableNum(PriceDiscAdmTable):
                priceDiscAdmTable = element.args().record();
                element.createToPriceDiscAdmTrans(priceDiscAdmTable);
                break;
            case tableNum(PDSRebateAgreement):
                pdsRebateAgreement = element.args().record();
                element.tamCreateToPdsRebateItem(pdsRebateAgreement);
                break;
            case tableNum(TAMVendRebateAgreement):
                tamVendRebateAgreement = element.args().record();
                element.tamCreateToVendRebateItem(tamVendRebateAgreement);
                break;
            case tableNum(MCRRoyaltyContract):
                mcrRoyaltyContract = element.args().record();
                element.mcrCreateToMCRRoyaltyItemTable(mcrRoyaltyContract);
                break;
            case tableNum(MCRRoyaltyTable):
                mcrRoyaltyTable = element.args().record();
                element.mcrCreateToMCRRoyaltyItemCode(mcrRoyaltyTable);
                break;
            case tableNum(TAMTradePromotion):
                tamTradePromotion = element.args().record();
                element.tamCreateToTAMPromoItemFromPromotion(tamTradePromotion);
                break;
            case tableNum(TAMMerchandisingEvent):
                tamMerchandisingEvent = element.args().record();
                element.tamCreateToTAMPromoItemFromMerchEvent(tamMerchandisingEvent);
                break;
            case tableNum(TAMFundTable):
                tamFundTable = element.args().record();
                element.tamCreateToFundInvent(tamFundTable);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showGlobalVariants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows global product variants.
    /// </summary>
    public boolean showGlobalVariants()
    {
        return retailAddItemsData.showGlobalVariants;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAlternativeItemifExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces current item with an alternative item if an alternative item has been set up.
    /// </summary>
    public void createAlternativeItemifExists()
    {
        SalesAlternativeItem    salesAlternativeItem;

        salesAlternativeItem    = SalesAlternativeItem::construct();

        salesAlternativeItem.parmItemId(tmpInventTable.ItemId);
        salesAlternativeItem.parmInventDim(InventDim::find(tmpInventTable.InventDim));
        salesAlternativeItem.parmQtyOrdered(tmpInventTable.Quantity);

        if (salesAlternativeItem.existAlternativeItem())
        {
            if (Box::okCancel(strFmt("@Retail:AlternativeItemConfirm" ,salesAlternativeItem.parmItemId(), salesAlternativeItem.alternativeItemId(),
                                                  salesAlternativeItem.alternativeProductDimensionPrefix()), DialogButton::Ok) == DialogButton::Ok)
            {
                ItemId                  alternativeItemId;
                EcoResProduct           ecoResProductLocal;
                InventDim               alternativeItemInventDim;

                [alternativeItemId, alternativeItemInventDim]    = InventTable::findAlternativeItem(salesAlternativeItem.parmItemId(), salesAlternativeItem.parmInventDim(), salesAlternativeItem.parmQtyOrdered());
                ecoResProductLocal                  = EcoResProduct::find(InventTable::find(alternativeItemId).Product);

                tmpInventTable.EcoResProduct        = ecoResProductLocal.RecId;
                tmpInventTable.EcoResProductName    = ecoResProductLocal.productName();
                tmpInventTable.ItemId               = alternativeItemId;
                
                element.setInventDim(tmpInventTable, alternativeItemInventDim);
                tmpInventTable.insert();
            }
            else
            {
                tmpInventTable.clear();
            }
        }
        else
        {
            tmpInventTable.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cursorNotify</Name>
				<Source><![CDATA[
    /// <summary>
    /// Raised when a cursor event occurs.
    /// </summary>
    /// <param name = "_event">The cursor event.</param>
    public void cursorNotify(int _event)
    {
        // If the cursor event is for an increase in row cache size, or that all rows have been loaded, then refresh the Show all products button.
        if (_event == 0 /*CacheSize*/ || _event == 1 /*AllLoaded*/)
        {
            element.UpdateShowAllProductsButton();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the product is 'Non-stocked' product.
    /// </summary>
    /// <param name = "_ecResProduct">The <c>EcoResProduct</c> table buffer.</param>
    /// <returns>True, if validation is successful, otherwise false.</returns>
    private boolean validateItem(EcoResProduct _ecResProduct)
    {
        boolean result = true;

        if (RetailAddItemsDoNotAddNonStockedItemsFlight::instance().isEnabled()
            && element.args().caller()
            && element.args().callerName() == formStr(RetailKitConfigure))
        {
            try
            {
                InventTable inventTableLoc = InventTable::findByProduct(_ecResProduct.RecId);

                setPrefix("@SYS40295");

                if (inventTableLoc && inventTableLoc.isStocked() == NoYes::No)
                {
                    error(strFmt("@Retail:RetailKitNonStockedProductCannotBeAddedError", inventTableLoc.ItemId));
                    result = false;
                }
                else if(!inventTableLoc)
                {
                    warning(strFmt("@Retail:RetailKitProductNotReleasedWarning", _ecResProduct.DisplayProductNumber));
                }
            }
            catch
            {
                // Do not break the flow.
                result = false;
            }
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>InventTable</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            element.updateDesign(InventDimFormDesignUpdate::Active);

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            this.query().dataSourceTable(tableNum(InventTable)).clearRanges();
            this.query().dataSourceTable(tableNum(InventTable)).addRange(fieldNum(InventTable, ItemBuyerGroupId)).value(buyersGroup.valueStr());
            this.query().dataSourceTable(tableNum(InventTable)).addRange(fieldNum(InventTable, PrimaryVendorId)).value(vendor.valueStr());

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>EcoResProduct</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            // exclude variants.
            this.queryBuildDataSource().addRange(fieldNum(EcoResProduct, InstanceRelationType)).value(SysQuery::valueNot(tableNum(EcoResDistinctProductVariant)));
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            if (element.args().parm() != 'HideVariantColumn'    &&
                EcoResProductMaster::find(ecoResProduct.RecId)  &&
                EcoResProductMaster::find(ecoResProduct.RecId).hasProductVariants()  &&
                callerTableId != tableNum(RetailMassUpdateWorksheetTable))
            {
                addVariantsButton.enabled(true);
            }
            else
            {
                addVariantsButton.enabled(false);
            }

            if (element.args().parm() == 'AddKitComponentsOnly')
            {
                addProductsButton.enabled(!EcoResProductMaster::exist(ecoResProduct.RecId));
                addVariantsButton.enabled(EcoResProductMaster::exist(ecoResProduct.RecId));
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes query associated with the current datasource.
        /// </summary>
        public void executeQuery()
        {
            if (isFirstProductQueryExecute)
            {
                isFirstProductQueryExecute = false;
            }
            else
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>EcoResCategory</Name>
				<Methods>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged()
        {
            super();

            RetailCategoryHelper::categorySelectionChanged(
                ecoResCategory,
                ecoResCategoryDescendents_ds,
                retailCategoryContainmentLookup_ds,
                selectedHierachyIsSpecial);

            // Refresh the products with limited row-count.
            element.RefreshProductsToAdd(false);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>InventItemGroupItem</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            this.query().dataSourceTable(tableNum(InventItemGroupItem)).clearRanges();

            if (itemGroup.valueStr())
            {
                this.query().dataSourceTable(tableNum(InventItemGroupItem)).addRange(fieldNum(InventItemGroupItem, ItemGroupId)).value(itemGroup.valueStr());
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>InventDim</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            //    super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>EcoResProductTranslation</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            EcoResProductTranslation::queryAddDefaultLanguage(this.query());
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TmpInventTable</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            InventDim   inventDimLocal;

            if (retailAddItemsData.showCatalogs && tmpInventTable.EcoResDistinctProductVariant)
            {
                // When catalog is shown, in the right grid of selected products, we use column `TmpInventTable_EcoResDistinctProductVariant` for variant selection
                // rather than column group `inventoryDimensions` for specifying each product dimension. So here product dimensions in `inventDim` are empty, we
                // need to get these values by variant product ID.
                InventDim inventDimVariant = InventDimCombination::findByDistinctProductVariant(tmpInventTable.EcoResDistinctProductVariant).inventDim();
                inventDimLocal.ConfigId         = inventDimVariant.ConfigId;
                inventDimLocal.InventColorId    = inventDimVariant.InventColorId;
                inventDimLocal.InventSizeId     = inventDimVariant.InventSizeId;
                inventDimLocal.InventStyleId    = inventDimVariant.InventStyleId;
            }
            else
            {
                inventDimLocal.ConfigId         = inventDim.ConfigId;
                inventDimLocal.InventColorId    = inventDim.InventColorId;
                inventDimLocal.InventSizeId     = inventDim.InventSizeId;
                inventDimLocal.InventStyleId    = inventDim.InventStyleId;
            }

            inventDimLocal.InventVersionId  = inventDim.InventVersionId;
            inventDimLocal.InventSiteId     = inventDim.InventSiteId;
            inventDimLocal.InventLocationId = inventDim.InventLocationId;
            inventDimLocal.InventBatchId    = inventDim.InventBatchId;
            inventDimLocal.wmsLocationId    = inventDim.wmsLocationId;
            inventDimLocal.wmsPalletId      = inventDim.wmsPalletId;
            inventDimLocal.inventSerialId   = InventDim.inventSerialId;
            inventDimLocal.InventStatusId   = InventDim.InventStatusId;

            tmpInventTable.InventDim = InventDim::findOrCreate(inventDimLocal).InventDimId;

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>inventDim</Name>
						<Source><![CDATA[
        InventDim inventDim()
        {
            return inventDim;
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            element.updateDesign(InventDimFormDesignUpdate::Active);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>EcoResDistinctProductVariant</DataField>
						<Methods>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                RetailGroupMemberLine tmpLine;
                tmpLine.Product = tmpInventTable.EcoResProduct;

                return RetailGroupMemberLine::variantLookupByCatalog(_formReferenceControl, tmpLine, '', tmpInventTable.Catalog);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>RetailCategoryContainmentLookup</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
            RetailCategoryContainmentLookup::synchronizeCategoriesLookup();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>RetailCatalogProductIncludeMasterView</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            Catalog selectedCatalog = Catalog::FindByCatalogId(CatalogSelector.valueStr());

            this.query().dataSourceTable(tableNum(RetailCatalogProductIncludeMasterView)).clearRanges();
            this.query().dataSourceTable(tableNum(RetailCatalogProductIncludeMasterView)).addRange(fieldNum(RetailCatalogProductIncludeMasterView, Catalog)).value(any2Str(selectedCatalog.RecId));

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
            QueryBuildDataSource qbds = this.query().dataSourceTable(tableNum(RetailCatalogProductIncludeMasterView));
            qbds.addLink(fieldNum(EcoResProduct, RecId), fieldNum(RetailCatalogProductIncludeMasterView, Product));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>CatalogSelector</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (retailAddItemsData.showCatalogs)
            {
                SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(Catalog), this);

                Query query = B2B2BDataHelper::buildQueryForB2bCatalogLookup(retailAddItemsData.retailChannelId, retailAddItemsData.custAccount);

                sysTableLookup.addLookupfield(fieldNum(Catalog, CatalogId));
                sysTableLookup.addLookupMethod(tableMethodStr(Catalog, name));
                sysTableLookup.parmQuery(query);

                sysTableLookup.performFormLookup();
            }
            else
            {
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            if (CatalogSelector.valueStr())
            {
                Query query = B2B2BDataHelper::buildQueryForB2bCatalogLookup(retailAddItemsData.retailChannelId, retailAddItemsData.custAccount);
                query.dataSourceTable(tableNum(Catalog)).addRange(fieldNum(Catalog, CatalogId)).value(CatalogSelector.valueStr());
                query.topRows(1);
                QueryRun qr = new QueryRun(query);
                if (!qr.next())
                {
                    return false;
                }
            }

            boolean ret = super();

            inventTable_ds.executeQuery();
            RetailCatalogProductIncludeMasterView_ds.executeQuery();
            ecoResProduct_ds.executeQuery();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HierarchySelector</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            //if(FormTreeSelect::Unknown)
            element.run();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HierarchyTreeCtrl</Name>
				<Type>Tree</Type>
				<Methods>
					<Method>
						<Name>expanded</Name>
						<Source><![CDATA[
        public void expanded(int _idx, FormTreeExpand _action, anytype _data)
        {
            super(_idx, _action, _data);
            if (mHierarchyTree)
            {
                mHierarchyTree.onExpanded(_idx, _action);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>expanding</Name>
						<Source><![CDATA[
        public boolean expanding(int _idx, FormTreeExpand _action, anytype _data)
        {
            boolean ret;

            ret = super(_idx, _action, _data);

            if (mHierarchyTree)
            {
                mHierarchyTree.expanding(_idx, _action, _data);
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged(FormTreeItem _oldItem, FormTreeItem _newItem, FormTreeSelect _how)
        {
            super(_oldItem, _newItem, _how);

            if (mHierarchyTree)
            {
                mHierarchyTree.selectionChanged(_oldItem, _newItem);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ItemGroup</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            if (itemGroup.valueStr())
            {
                inventItemGroupItem_ds.query().dataSourceTable(tableNum(InventItemGroupItem)).enabled(true);
            }
            else
            {
                inventItemGroupItem_ds.query().dataSourceTable(tableNum(InventItemGroupItem)).enabled(false);
            }
            inventTable_ds.executeQuery();
            inventItemGroupItem_ds.executeQuery();
            ecoResProduct_ds.executeQuery();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BuyersGroup</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            inventTable_ds.executeQuery();
            ecoResProduct_ds.executeQuery();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Vendor</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            inventTable_ds.executeQuery();
            ecoResProduct_ds.executeQuery();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Select_Button</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        // This control is disabled as its using system name and cannot be called.
        void clicked()
        {
            EcoResProduct   ecoResProductLocal;
            FormDataSource  fds;

            super();

            fds = FormDataUtil::getFormDataSource(ecoResProduct);

            for (ecoResProductLocal = fds.getFirst(true) ? fds.getFirst(true) :
                    fds.cursor(); ecoResProductLocal;
            ecoResProductLocal = fds.getNext())
            {
                element.insertIntoTmpProductsToAdd(ecoResProductLocal.RecId,
                                                    0,
                                                    0);
            }

            tmpInventTable_DS.research(true);

            fds.research(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AddProductsButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            EcoResProduct   ecoResProductLocal;
            FormDataSource  fds;

            super();

            fds = FormDataUtil::getFormDataSource(ecoResProduct);

            for (ecoResProductLocal = fds.getFirst(true) ? fds.getFirst(true) :
                    fds.cursor(); ecoResProductLocal;
            ecoResProductLocal = fds.getNext())
            {
                if (element.validateItem(ecoResProductLocal))
                {
                    element.insertIntoTmpProductsToAdd(ecoResProductLocal.RecId,
                                                        0,
                                                        0);
                }
            }

            tmpInventTable_DS.research(true);

            fds.research(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AddVariantsButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            //super();

            Args    args;
            EcoResProductMaster master;

            args = new Args();

            select firstonly * from master where master.RecId == ecoResProduct.RecId;
            args.record(master);
            args.caller(element);

            if (retailAddItemsData.showCatalogs && CatalogSelector.valueStr())
            {
                args.parm(CatalogSelector.valueStr());
            }

            new MenuFunction(menuitemDisplayStr(RetailMatrixPivot), MenuItemType::Display).run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ShowAllProductsButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            // Set the record limit to 'All' and refresh the query.
            element.RefreshProductsToAdd(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Button</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            TmpRetailProductsToAdd tmpProductsToAdd;
            FormDataSource ds;
            TmpRetailProductsToAdd tmpInventTable_local;

            super();

            tmpInventTable_local.setTmpData(tmpInventTable);

            ds = FormDataUtil::getFormDataSource(tmpInventTable);

            for (tmpProductsToAdd = ds.getFirst(true) ? ds.getFirst(true) : ds.cursor(); tmpProductsToAdd; tmpProductsToAdd = ds.getNext())
            {
                element.saveDeletedTmpProduct(tmpProductsToAdd);

                if (!RetailMerchandisingKillSwitch::disableDeleteSelectedItemsOnlyFromAddProducts())
                {
                    delete_from tmpInventTable_local
                        where tmpInventTable_local.RecId == tmpProductsToAdd.RecId;
                }
                else
                {
                    delete_from tmpInventTable_local
                        where tmpInventTable_local.EcoResProduct == tmpProductsToAdd.EcoResProduct &&
                            tmpInventTable_local.EcoResDistinctProductVariant == tmpProductsToAdd.EcoResDistinctProductVariant &&
                            tmpInventTable_local.InventDim == tmpProductsToAdd.InventDim;
                }
            }

            ds.research(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>InventTable</Name>
			<Table>InventTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ABCContributionMargin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ABCRevenue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ABCTieUp</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ABCValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AlcoholManufacturerId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AlcoholProductionTypeId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AlcoholStrength_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AltConfigId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AltInventColorId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AltInventSizeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AltInventStyleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AltInventVersionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AltItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApproxTaxValue_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssetGroupId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssetId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoReportFinished</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BatchMergeDateCalculationMethod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BatchNumGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BOMCalcGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BOMLevel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BOMManualReceipt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BOMUnitId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommissionGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostModel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustomsExportTariffCodeTable_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustomsImportTariffCodeTable_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DAXIntegrationKey</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Density</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Depth</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EPCManager</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExceptionCode_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExciseTariffCodes_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EximProductGroupTable_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FiscalLIFOAvoidCalc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FiscalLIFONormalValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FiscalLIFONormalValueCalc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ForecastDMPInclude</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>grossDepth</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>grossHeight</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>grossWidth</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Height</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ICMSOnService_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Intracode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntrastatExclude</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntrastatProcId_CZ</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntraUnit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventFiscalLIFOGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventProductType_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemBuyerGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemDimCostPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemPriceToleranceGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemTaggingLevel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkupCode_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchingPolicy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRPackedExtensions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MinimumPalletQuantity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NameAlias</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NetWeight</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NGPCodesTable_FR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NRTaxGroup_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrigCountryRegionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrigCountyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrigStateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackagingGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Packing_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PalletTagging</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PDSBaseAttributeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsBestBefore</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWWMSMinimumPalletQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWWMSQtyPerLayer</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWWMSStandardPalletQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsFreightAllocationGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsItemRebateGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PDSPotencyAttribRecording</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsShelfAdvice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsShelfLife</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PDSTargetFactor</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsVendorCheckItem</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Phantom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PKWiUCode_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PmfPlanningItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PmfProductType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PmfYieldPct</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryVendorId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProdFlushingPrincip</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProdGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProdPoolId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Product</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>projCategoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PropertyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchModel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>qtyPerLayer</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReqGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SADRateCode_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesContributionRatio</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesModel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesPercentMarkup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesPriceModelBasic</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ScrapConst</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ScrapVar</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SerialNumGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ServiceCodeTable_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SkipIntraCompanySync_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>sortCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StandardConfigId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StandardInventColorId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StandardInventSizeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StandardInventStyleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StandardInventVersionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>standardPalletQuantity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StatisticsFactor</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaraWeight</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxationOrigin_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxFiscalClassification_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxPackagingQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxServiceCode_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UnitVolume</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseAltItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Width</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WMSArrivalHandlingTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WMSPalletTypeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WMSPickingQtyTime</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>EcoResProduct</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>EcoResProduct</Name>
			<Table>EcoResProduct</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DisplayProductNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWProduct</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProductType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>relationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SearchName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<CounterField>DisplayProductNumber</CounterField>
			<Index>DisplayProductNumberIdx</Index>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources>
				<AxFormDataSourceDerived>
					<Name>EcoResProduct_EcoResProductMaster</Name>
					<Table>EcoResProductMaster</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RetailColorGroupId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RetailSizeGroupId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RetailStyleGroupId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>VariantConfigurationTechnology</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
				<AxFormDataSourceDerived>
					<Name>EcoResProduct_EcoResDistinctProduct</Name>
					<Table>EcoResDistinctProduct</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources>
						<AxFormDataSourceDerived>
							<Name>EcoResProduct_EcoResDistinctProductVariant</Name>
							<Table>EcoResDistinctProductVariant</Table>
							<Fields>
								<AxFormDataSourceField>
									<DataField>ProductMaster</DataField>
								</AxFormDataSourceField>
								<AxFormDataSourceField>
									<DataField>RecId</DataField>
								</AxFormDataSourceField>
								<AxFormDataSourceField>
									<DataField>RetaiTotalWeight</DataField>
								</AxFormDataSourceField>
								<AxFormDataSourceField>
									<DataField>TableId</DataField>
								</AxFormDataSourceField>
							</Fields>
							<ReferencedDataSources />
							<DerivedDataSources />
						</AxFormDataSourceDerived>
					</DerivedDataSources>
				</AxFormDataSourceDerived>
			</DerivedDataSources>
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>EcoResCategory</Name>
			<Table>EcoResCategory</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CategoryHierarchy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChangeStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Code</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultProjectGlobalCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultThreshold_PSN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsActive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsCategoryAttributesInherited</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsTangible</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Level</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NestedSetLeft</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NestedSetRight</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PKWiUCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>relationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources>
				<AxFormDataSourceDerived>
					<Name>EcoResCategory_PCClass</Name>
					<Table>PCClass</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ReuseEnabled</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
			</DerivedDataSources>
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>EcoResProductCategory</Name>
			<Table>EcoResProductCategory</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Category</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CategoryHierarchy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Product</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DelayActive>No</DelayActive>
			<JoinSource>EcoResProduct</JoinSource>
			<LinkType>ExistJoin</LinkType>
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>EcoResCategoryDescendents</Name>
			<Table>EcoResCategory</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CategoryHierarchy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChangeStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Code</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultProjectGlobalCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultThreshold_PSN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsActive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsCategoryAttributesInherited</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsTangible</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Level</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NestedSetLeft</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NestedSetRight</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PKWiUCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>relationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>EcoResProductCategory</JoinSource>
			<LinkType>ExistJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources>
				<AxFormDataSourceDerived>
					<Name>EcoResCategoryDescendents_PCClass</Name>
					<Table>PCClass</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ReuseEnabled</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
			</DerivedDataSources>
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventItemGroupItem</Name>
			<Table>InventItemGroupItem</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemGroupDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>InventTable</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<Index>ItemIdx</Index>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventDim</Name>
			<Table>InventDim</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>configId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventBatchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventColorId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventGtdId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventOwnerId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventProfileId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventSerialId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSiteId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSizeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStyleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventVersionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LicensePlateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SHA1Hash</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSPalletId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TmpInventTable</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>EcoResProductTranslation</Name>
			<Table>EcoResProductTranslation</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LanguageId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Product</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>EcoResProduct</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TmpInventTable</Name>
			<Table>TmpRetailProductsToAdd</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EcoResDistinctProductVariant</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EcoResProduct</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EcoResProductName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventDim</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Quantity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>RetailCategoryContainmentLookup</Name>
			<Table>RetailCategoryContainmentLookup</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Category</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContainedCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsDirty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>EcoResProductCategory</JoinSource>
			<LinkType>ExistJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>RetailCatalogProductIncludeMasterView</Name>
			<Table>RetailCatalogProductIncludeMasterView</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Catalog</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CatalogProduct</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Product</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>EcoResProduct</JoinSource>
			<LinkType>ExistJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS132109</Caption>
		<ColumnSpace xmlns="">30</ColumnSpace>
		<ColumnSpaceMode xmlns="">Fixed</ColumnSpaceMode>
		<DataSource xmlns="">EcoResProduct</DataSource>
		<DialogSize xmlns="">Full</DialogSize>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<StatusBarStyle xmlns="">None</StatusBarStyle>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>MainGroup</Name>
				<ElementPosition>805306366</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>TreeGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>591751048</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>GroupTree</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Height>0</Height>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CatalogSelector</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>920350134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>RetailCatalogId</ExtendedDataType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>StaticText2</Name>
										<ElementPosition>306783376</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>StaticText</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DisplayLength>50</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
										<Text>@RET5928</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>HierarchySelector</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>460175066</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS41044</Label>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormTreeControl">
										<Name>HierarchyTreeCtrl</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>690262599</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Height>0</Height>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Tree</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ItemGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>920350134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>ItemGroupId</ExtendedDataType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BuyersGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1227133512</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>ItemBuyerGroupId</ExtendedDataType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Vendor</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1533916890</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>VendAccount</ExtendedDataType>
									</AxFormControl>
								</Controls>
								<Caption>@RET5132</Caption>
							</AxFormControl>
						</Controls>
						<Columnspace>2</Columnspace>
						<ColumnspaceMode>Fixed</ColumnspaceMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>VSplitterFilter</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>887626572</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<Style>SplitterVerticalContainer</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>MiddleGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1183502096</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>AddProductsVariantsGroup</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Height>0</Height>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneControl">
										<Name>AddProductsVariantsActionPane</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPane</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormActionPaneTabControl">
												<Name>CopyOfActionPaneTab</Name>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ActionPaneTab</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonGroupControl">
														<Name>AddProducts</Name>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Left>0</Left>
														<Type>ButtonGroup</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormButtonControl">
																<Name>Select_Button</Name>
																<AllowEdit>No</AllowEdit>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>805306366</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>Button</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<Visible>No</Visible>
																<Width>75</Width>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
																<MultiSelect>Yes</MultiSelect>
																<NormalImage>New</NormalImage>
																<Text>@RET5134</Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormButtonControl">
																<Name>AddProductsButton</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>1207959549</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>Button</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<Width>75</Width>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
																<MultiSelect>Yes</MultiSelect>
																<NormalImage>Add</NormalImage>
																<Text>@RET5134</Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormButtonControl">
																<Name>AddVariantsButton</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>1610612733</ElementPosition>
																<Enabled>No</Enabled>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>Button</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<Width>75</Width>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
																<MultiSelect>Yes</MultiSelect>
																<NormalImage>AddMultiple</NormalImage>
																<Text>@RET260149</Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormButtonSeparatorControl">
																<Name>ShowAllProductsSeparator</Name>
																<Type>ButtonSeparator</Type>
																<FormControlExtension
																	i:nil="true" />
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormButtonControl">
																<Name>ShowAllProductsButton</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Enabled>No</Enabled>
																<Type>Button</Type>
																<FormControlExtension
																	i:nil="true" />
																<Text>@Retail:RetailAddItemsShowAllProducts</Text>
															</AxFormControl>
														</Controls>
														<ArrangeMethod>Vertical</ArrangeMethod>
														<Columns>2</Columns>
													</AxFormControl>
												</Controls>
												<AlignChild>No</AlignChild>
												<AlignChildren>No</AlignChildren>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<Columns>2</Columns>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
										<Style>Strip</Style>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>Grid</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Height>0</Height>
										<Type>Grid</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventTable_ItemId</Name>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>DisplayProductNumber</DataField>
												<DataSource>EcoResProduct</DataSource>
												<DisplayLength>10</DisplayLength>
												<DisplayLengthMode>Fixed</DisplayLengthMode>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>ItemName</Name>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>Name</DataField>
												<DataSource>EcoResProductTranslation</DataSource>
											</AxFormControl>
										</Controls>
										<DataSource>EcoResProduct</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@RET5927</Caption>
							</AxFormControl>
						</Controls>
						<Columnspace>2</Columnspace>
						<ColumnspaceMode>Fixed</ColumnspaceMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>VSplitterAddProducts</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1479377620</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<Style>SplitterVerticalContainer</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>RightGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1813430633</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>RightGroupGrid</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Height>0</Height>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneControl">
										<Name>ActionPane</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPane</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormActionPaneTabControl">
												<Name>ActionPaneTab</Name>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ActionPaneTab</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonGroupControl">
														<Name>RemoveButton</Name>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Left>0</Left>
														<Type>ButtonGroup</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormButtonControl">
																<Name>Button</Name>
																<ElementPosition>1073741822</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>Button</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
																<MultiSelect>Yes</MultiSelect>
																<NormalImage>Remove</NormalImage>
																<Text>@RET5135</Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormMenuFunctionButtonControl">
																<Name>MenuItemDimensions</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>1610612733</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>MenuFunctionButton</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<MenuItemName>InventDimParmFixed</MenuItemName>
																<SaveRecord>No</SaveRecord>
																<Text>@SYS5951</Text>
															</AxFormControl>
														</Controls>
														<ArrangeMethod>Vertical</ArrangeMethod>
														<Columns>2</Columns>
													</AxFormControl>
												</Controls>
												<AlignChild>No</AlignChild>
												<AlignChildren>No</AlignChildren>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<Columns>2</Columns>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
										<Style>Strip</Style>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>Grid1</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Height>0</Height>
										<Type>Grid</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormReferenceGroupControl">
												<Name>TmpInventTable_Catalog</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>939524094</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ReferenceGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>TmpInventTable_Catalog_DisplayCatalogNumber</Name>
														<DataRelationPath>Catalog</DataRelationPath>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
													</AxFormControl>
												</Controls>
												<DataSource>TmpInventTable</DataSource>
												<Label>@Retail:CatalogNumber</Label>
												<ReferenceField>Catalog</ReferenceField>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormReferenceGroupControl">
												<Name>TmpInventTable_EcoResProduct</Name>
												<ElementPosition>939524094</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ReferenceGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>TmpInventTable_EcoResProduct_DisplayProductNumber</Name>
														<DataRelationPath>EcoResProduct</DataRelationPath>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
													</AxFormControl>
												</Controls>
												<DataSource>TmpInventTable</DataSource>
												<Label>@SYS133863</Label>
												<ReferenceField>EcoResProduct</ReferenceField>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>ProductName</Name>
												<ElementPosition>1409286141</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>EcoResProductName</DataField>
												<DataSource>TmpInventTable</DataSource>
												<DisplayLength>10</DisplayLength>
												<DisplayLengthMode>Fixed</DisplayLengthMode>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormReferenceGroupControl">
												<Name>TmpInventTable_EcoResDistinctProductVariant</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1644167165</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ReferenceGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Visible>No</Visible>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>TmpInventTable_EcoResDistinctProductVariant_DisplayProductNumber</Name>
														<DataRelationPath>EcoResDistinctProductVariant</DataRelationPath>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
													</AxFormControl>
												</Controls>
												<DataSource>TmpInventTable</DataSource>
												<ReferenceField>EcoResDistinctProductVariant</ReferenceField>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>TmpInventTable_Quantity</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1761607677</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>Quantity</DataField>
												<DataSource>TmpInventTable</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>InventoryDimensions</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048189</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>InventoryDimensions_configId</Name>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>configId</DataField>
														<DataSource>InventDim</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>InventoryDimensions_InventSizeId</Name>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>InventSizeId</DataField>
														<DataSource>InventDim</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>InventoryDimensions_InventColorId</Name>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>InventColorId</DataField>
														<DataSource>InventDim</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>InventoryDimensions_InventStyleId</Name>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>InventStyleId</DataField>
														<DataSource>InventDim</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>InventoryDimensions_InventVersionId</Name>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>InventVersionId</DataField>
														<DataSource>InventDim</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>InventoryDimensions_InventSiteId</Name>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>InventSiteId</DataField>
														<DataSource>InventDim</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>InventoryDimensions_InventLocationId</Name>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>InventLocationId</DataField>
														<DataSource>InventDim</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>InventoryDimensions_inventBatchId</Name>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>inventBatchId</DataField>
														<DataSource>InventDim</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>InventoryDimensions_wMSLocationId</Name>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>wMSLocationId</DataField>
														<DataSource>InventDim</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>InventoryDimensions_inventSerialId</Name>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>inventSerialId</DataField>
														<DataSource>InventDim</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>InventoryDimensions_InventStatusId</Name>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>InventStatusId</DataField>
														<DataSource>InventDim</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>InventoryDimensions_LicensePlateId</Name>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>LicensePlateId</DataField>
														<DataSource>InventDim</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>InventoryDimensions_InventOwnerId_RU</Name>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>InventOwnerId_RU</DataField>
														<DataSource>InventDim</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>InventoryDimensions_InventProfileId_RU</Name>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>InventProfileId_RU</DataField>
														<DataSource>InventDim</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>InventoryDimensions_InventGtdId_RU</Name>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>InventGtdId_RU</DataField>
														<DataSource>InventDim</DataSource>
													</AxFormControl>
												</Controls>
												<BackgroundColor>WindowBackground</BackgroundColor>
												<DataGroup>InventoryDimensions</DataGroup>
												<DataSource>InventDim</DataSource>
											</AxFormControl>
										</Controls>
										<DataSource>TmpInventTable</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@RET5926</Caption>
								<DataSource>TmpInventTable</DataSource>
							</AxFormControl>
						</Controls>
						<DataSource>TmpInventTable</DataSource>
					</AxFormControl>
				</Controls>
				<Columns>5</Columns>
				<Columnspace>25</Columnspace>
				<ColumnspaceMode>Fixed</ColumnspaceMode>
				<FrameType>None</FrameType>
				<OptionValue>2</OptionValue>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OK</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<Text>@RET5137</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Cancel</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
						<Text>@RET5138</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>