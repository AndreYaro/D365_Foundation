<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>TaxHMRCWebContextForm_UK</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public final class TaxHMRCWebContextForm_UK extends FormRun implements TaxIHMRCWebContext_UK
{
    private TaxHMRCWebContextControl_UK webContextControl;
    private TaxHMRCWebContextFormArgs_UK formArgs;
    private boolean contextReady;

}
]]></Source>
			</Method>
			<Method>
				<Name>getWebContextContract</Name>
				<Source><![CDATA[
    private TaxHMRCWebContextContract_UK getWebContextContract()
    {
        return webContextControl.getWebContextContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWebContextContractOnCloseOk</Name>
				<Source><![CDATA[
    public TaxHMRCWebContextContract_UK getWebContextContractOnCloseOk()
    {
        TaxHMRCWebContextContract_UK context = new TaxHMRCWebContextContract_UK();

        if (element.closedOk())
        {
            context = this.getWebContextContract();
            context.parmUserAgreed(true);
        }

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        Information.parmHtml("@TaxHMRCWebContext_UK:WaitFraudPreventionHeadersFormed");

        webContextControl = element.design().addControlEx(classstr(TaxHMRCWebContextControl_UK), '_webContext');
        webContextControl.webContextReady += eventhandler(element.webContextReady);

        if (element.args().parmObject())
        {
            formArgs = element.args().parmObject();
            webContextControl.parmWebResourcesJSON(formArgs.parmWebResourcesJSON());
        }
        else
        {
            formArgs = new TaxHMRCWebContextFormArgs_UK();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>webContextReady</Name>
				<Source><![CDATA[
    // Handler will be invoked when the client sends the context
    private void webContextReady()
    {
        contextReady = true;
        element.setEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHtmlLink</Name>
				<Source><![CDATA[
    private str createHtmlLink(str _link, str _linkText)
    {
        return strFmt('<a target=\'_blank\' href=\'%1\'>%2</a>', _link, _linkText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGovVendorForwarded</Name>
				<Source><![CDATA[
    private str getGovVendorForwarded(TaxHMRCWebContextContract_UK _context)
    {
        str govVendorForwarded = TaxHMRCHelper_UK::getWebApplSupplementaryHeaderValue(formArgs.parmWebApplicationRefRecId(), 'Gov-Vendor-Forwarded');
        str govVendorPublicIP = this.getGovVendorPublicIP(_context);
        str govClientPublicIP = this.getGovClientPublicIP(_context);

        // Check automatic collection firstly.
        if (_context.parmServerPublicIP() || _context.parmClientPublicIP() || !govVendorForwarded)
        {
            if (govVendorPublicIP && govClientPublicIP)
            {
                govVendorForwarded = 'by=' + govVendorPublicIP + '&for=' + govClientPublicIP;
            }
            else if (govVendorPublicIP)
            {
                govVendorForwarded = 'by=' + govVendorPublicIP;
            }
            else if (govClientPublicIP)
            {
                govVendorForwarded = 'for=' + govClientPublicIP;
            }
        }

        return govVendorForwarded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGovVendorPublicIP</Name>
				<Source><![CDATA[
    private str getGovVendorPublicIP(TaxHMRCWebContextContract_UK _context)
    {
        return _context.parmServerPublicIP() ? _context.parmServerPublicIP()
            : TaxHMRCHelper_UK::getWebApplSupplementaryHeaderValue(formArgs.parmWebApplicationRefRecId(), 'Gov-Vendor-Public-IP');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGovClientPublicIP</Name>
				<Source><![CDATA[
    private str getGovClientPublicIP(TaxHMRCWebContextContract_UK _context)
    {
        return _context.parmClientPublicIP() ? _context.parmClientPublicIP()
            : TaxHMRCHelper_UK::getWebApplSupplementaryHeaderValue(formArgs.parmWebApplicationRefRecId(), 'Gov-Client-Public-IP');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGovVendorVersion</Name>
				<Source><![CDATA[
    private str getGovVendorVersion()
    {
        str productVersion = TaxHMRCHelper_UK::getProductBuildVersion();
        productVersion = productVersion ? xInfo::productName() + ' product version=' + productVersion : "";

        str platformVersion = TaxHMRCHelper_UK::getPlatformBuildVersion();
        platformVersion = platformVersion ? xInfo::productName() + ' platform version=' + platformVersion : "";

        str govVendorVersion;

        if (productVersion && platformVersion)
        {
            govVendorVersion = productVersion + '&' + platformVersion;
        }
        else if (productVersion)
        {
            govVendorVersion = productVersion;
        }
        else if (platformVersion)
        {
            govVendorVersion = platformVersion;
        }

        return govVendorVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEmptyHeaders</Name>
				<Source><![CDATA[
    private void validateEmptyHeaders(TaxHMRCWebContextContract_UK _context)
    {
        container emptyHeaders;

        if(!curUserId())
        {
            emptyHeaders += 'Gov-Client-User-IDs';
        }

        if(!_context.parmDeviceID())
        {
            emptyHeaders += 'Gov-Client-Device-ID';
        }

        if(!_context.parmTimezone())
        {
            emptyHeaders += 'Gov-Client-Timezone';
        }

        if(!_context.parmScreenWidth()
            && !_context.parmScreenHeight()
            && !_context.parmScreenColorDepth()
            && !_context.parmDevicePixelRatio())
        {
            emptyHeaders += 'Gov-Client-Screens';
        }

        if(!_context.parmInnerWidth() && !_context.parmInnerHeight())
        {
            emptyHeaders += 'Gov-Client-Window-Size';
        }

        if(!_context.parmPlugins())
        {
            emptyHeaders += 'Gov-Client-Browser-Plugins';
        }

        if(!_context.parmUserAgent())
        {
            emptyHeaders += 'Gov-Client-Browser-JS-User-Agent';
        }

        if(!_context.parmLocalIPs())
        {
            emptyHeaders += 'Gov-Client-Local-IPs';
        }

        if(!_context.parmLocalIPsTimestamp())
        {
            emptyHeaders += 'Gov-Client-Local-IPs-Timestamp';
        }

        if(!this.getGovClientPublicIP(_context))
        {
            emptyHeaders += 'Gov-Client-Public-IP';
        }

        if(!_context.parmClientPublicIPTimestamp())
        {
            emptyHeaders += 'Gov-Client-Public-IP-Timestamp';
        }

        if(!this.getGovVendorPublicIP(_context))
        {
            emptyHeaders += 'Gov-Vendor-Public-IP';
        }

        if(!this.getGovVendorForwarded(_context))
        {
            emptyHeaders += 'Gov-Vendor-Forwarded';
        }

        if(!TaxHMRCHelper_UK::calculateSHA512(xInfo::serialNo()))
        {
            emptyHeaders += 'Gov-Vendor-License-IDs';
        }

        if(!this.getGovVendorVersion())
        {
            emptyHeaders += 'Gov-Vendor-Version';
        }

        if (conLen(emptyHeaders) > 0)
        {
            warning(strFmt("@TaxHMRCWebContext_UK:EmptyHeadersValidationMessage", con2Str(emptyHeaders, ', ')));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnabled</Name>
				<Source><![CDATA[
    private void setEnabled()
    {
        TaxHMRCWebContextContract_UK context = this.getWebContextContract();
        context.parmServerPublicIP(TaxHMRCHelper_UK::getGovVendorPublicIP(formArgs.parmWebResourcesJSON()));

        this.validateEmptyHeaders(context);

        SysUrlEncoder encoder = new SysUrlEncoder();

        Information.parmHtml(
              '<p>'
            + strFmt("@TaxHMRCWebContext_UK:WarningTextAboutHMRCRequirementToSendAdditionalInformation",
                     this.createHtmlLink('https://go.microsoft.com/fwlink/?linkid=2099056', "@TaxHMRCWebContext_UK:FraudPreventionHeadersLinkText"),
                     this.createHtmlLink('https://go.microsoft.com/fwlink/?linkid=2099326', "@TaxHMRCWebContext_UK:HMRCFraudPreventionLinkText"))
            + '<br><br>'
            + "@TaxHMRCWebContext_UK:ToSubmitRequestYouNeedToProvideInformation"
            + '</p>'
            + '<ul> <li><strong>Gov-Client-Connection-Method</strong>: ' + 'WEB_APP_VIA_SERVER'
            + '</li><li><strong>Gov-Client-User-IDs</strong>: ' + xInfo::productName()
                                                                + '=' + curUserId()
            + '</li><li><strong>Gov-Client-Device-ID</strong>: ' + context.parmDeviceID()
            + '</li><li><strong>Gov-Client-Timezone</strong>: ' + context.parmTimezone()
            + '</li><li><strong>Gov-Client-Screens</strong>: ' + 'width=' + context.parmScreenWidth()
                                                               + '&height=' + context.parmScreenHeight()
                                                               + '&colour-depth=' + context.parmScreenColorDepth()
                                                               + '&scaling-factor=' + context.parmDevicePixelRatio()
            + '</li><li><strong>Gov-Client-Window-Size</strong>: ' + 'width=' + context.parmInnerWidth()
                                                                   + '&height=' + context.parmInnerHeight()
            + '</li><li><strong>Gov-Client-Browser-Plugins</strong>: ' + encoder.decode(context.parmPlugins())
            + '</li><li><strong>Gov-Client-Browser-JS-User-Agent</strong>: ' + context.parmUserAgent()
            + '</li><li><strong>Gov-Client-Browser-Do-Not-Track</strong>: ' + (context.parmDoNotTrack()
                                                                               ? context.parmDoNotTrack()
                                                                               : 'false')
            + '</li><li><strong>Gov-Client-Local-IPs</strong>: ' + context.parmLocalIPs()
            + '</li><li><strong>Gov-Client-Local-IPs-Timestamp</strong>: ' + context.parmLocalIPsTimestamp()
            + '</li><li><strong>Gov-Client-Public-IP</strong>: ' + this.getGovClientPublicIP(context)
            + '</li><li><strong>Gov-Client-Public-IP-Timestamp</strong>: ' + context.parmClientPublicIPTimestamp()

            // It is confirmed with HMRC to omit Gov-Client-Public-Port and Gov-Client-Multi-Factor fraud prevention headers.
            // + '</li><li><strong>Gov-Client-Public-Port</strong>: '
            // + '</li><li><strong>Gov-Client-Multi-Factor</strong>: '

            + '</li><li><strong>Gov-Vendor-Public-IP</strong>: ' + this.getGovVendorPublicIP(context)
            + '</li><li><strong>Gov-Vendor-Forwarded</strong>: ' + this.getGovVendorForwarded(context)
            + '</li><li><strong>Gov-Vendor-License-IDs</strong>: ' + xInfo::productName()
                                                                   + '=' + TaxHMRCHelper_UK::calculateSHA512(xInfo::serialNo())
            + '</li><li><strong>Gov-Vendor-Product-Name</strong>: ' + xInfo::productName()
            + '</li><li><strong>Gov-Vendor-Version</strong>: ' + this.getGovVendorVersion()
            + '</li></ul>'
        );

        PrivacyStatement.parmHtml(strFmt("@TaxHMRCWebContext_UK:YourPrivacyIsImportantToLearnMoreRead",
                                         this.createHtmlLink('https://go.microsoft.com/fwlink/?LinkId=521839',
                                                             "@TaxHMRCWebContext_UK:PrivacyStatementLinkText")));

        ConsentCheckbox.enabled(true);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>ConsentCheckbox</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            OKButton.enabled(ConsentCheckbox.checked());

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OKButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.closeOk();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CancelButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.closeCancel();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@TaxHMRCWebContext_UK:FormTitle_TaxHMRCWebContextForm_UK</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl>
				<Name>Information</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension>
					<Name>HtmlViewerControl</Name>
					<ExtensionComponents />
					<ExtensionProperties>
						<AxFormControlExtensionProperty>
							<Name>htmlField</Name>
							<Type>String</Type>
						</AxFormControlExtensionProperty>
					</ExtensionProperties>
				</FormControlExtension>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ConsentGroup</Name>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStaticTextControl">
						<Name>ConsentText</Name>
						<Type>StaticText</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Text>@TaxHMRCWebContext_UK:ProvidingAdditionalInformationConsent</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>ConsentCheckbox</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Enabled>No</Enabled>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<ShowLabel>No</ShowLabel>
						<Style>Checkbox</Style>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>OkCancelGroup</Name>
				<Type>ButtonGroup</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>OKButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Enabled>No</Enabled>
						<Type>Button</Type>
						<FormControlExtension
							i:nil="true" />
						<Text>@SYS68352</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>CancelButton</Name>
						<Type>Button</Type>
						<FormControlExtension
							i:nil="true" />
						<DefaultButton>Yes</DefaultButton>
						<Text>@TaxHMRCWebContext_UK:DoNotSubmit</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalWrap</ArrangeMethod>
			</AxFormControl>
			<AxFormControl>
				<Name>PrivacyStatement</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension>
					<Name>HtmlViewerControl</Name>
					<ExtensionComponents />
					<ExtensionProperties>
						<AxFormControlExtensionProperty>
							<Name>htmlField</Name>
							<Type>String</Type>
						</AxFormControlExtensionProperty>
					</ExtensionProperties>
				</FormControlExtension>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>