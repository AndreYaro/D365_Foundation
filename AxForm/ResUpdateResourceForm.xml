<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ResUpdateResourceForm</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ResUpdateResourceForm extends FormRun
{
    ResResourcesListView selectedResourceContext;
    ResProjectResourceEffectiveDateRangeView selectedEffectiveResourcesView;
    private int dataSetTableNum;
    private ResourceRecId resourceRecId;
    private ResourceName targetResourceName;
    private CalendarId targetResourceCalendarId;
    private ProjPeriodId targetResourcePeriodId;
    private utcdatetime validFromDateTime;
    private utcdatetime validToDateTime;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the the form fields value
    /// </summary>
    public void init()
    {
        super();

        if (element.args().caller() && element.args().dataset())
        {
            dataSetTableNum = element.args().dataset();
            switch (dataSetTableNum)
            {
                case tableNum(ResResourcesListView):
                    selectedResourceContext = element.args().record();
                    break;
                case tableNum(ResProjectResourceEffectiveDateRangeView):
                    selectedEffectiveResourcesView = element.args().record();
                    break;
            }
            
            element.initFields();
        }
        else
        {
            throw error(error::missingFormActiveBuffer(formStr(ResUpdateResourceForm)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFields</Name>
				<Source><![CDATA[
    private void initFields()
    {
        if (selectedResourceContext.ResourceType == WrkCtrType::Personnel)
        {
            Worker.text(element.workerName());
        }
        else
        {
            Worker.visible(false);
        }

        ResResourceId targetResourceId;
        switch (dataSetTableNum)
        {
            case tableNum(ResResourcesListView):
                resourceRecId = selectedResourceContext.Resource;
                targetResourceId = selectedResourceContext.ResourceId;
                targetResourceName = selectedResourceContext.ResourceName;
                targetResourceCalendarId = selectedResourceContext.ResourceCalendarId;
                targetResourcePeriodId = selectedResourceContext.PeriodCodeId;
                validFromDateTime = selectedResourceContext.EffectiveDate;
                validToDateTime = selectedResourceContext.ExpirationDate;
                break;
            case tableNum(ResProjectResourceEffectiveDateRangeView):
                resourceRecId = selectedEffectiveResourcesView.Resource;
                targetResourceId = selectedEffectiveResourcesView.ResourceId;
                targetResourceName = selectedEffectiveResourcesView.Name;
                targetResourceCalendarId = selectedEffectiveResourcesView.getCalendarId(selectedEffectiveResourcesView.ValidFromDateTime);
                targetResourcePeriodId = selectedEffectiveResourcesView.getPeriodId();
                validFromDateTime = selectedEffectiveResourcesView.ValidFromDateTime;
                validToDateTime = selectedEffectiveResourcesView.ValidToDateTime;
                break;
        }

        ResourceId.text(targetResourceId);
        ResourceName.text(targetResourceName);
        ResourceCalendarId.text(targetResourceCalendarId);
        PeriodCode.text(targetResourcePeriodId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workerName</Name>
				<Source><![CDATA[
    private HcmWorkerName workerName()
    {
        HcmWorker hcmworker;
        
        switch (dataSetTableNum)
        {
            case tableNum(ResResourcesListView):
                if (selectedResourceContext.Worker)
                {
                    select firstonly hcmWorker
                        where hcmWorker.RecId == selectedResourceContext.Worker;
                }
                break;
            case tableNum(ResProjectResourceEffectiveDateRangeView):
                ResourceWorkerView resWorkerView;
                select firstonly hcmworker
                exists join resWorkerView
                    where resWorkerView.Worker == hcmworker.RecId &&
                        resWorkerView.RecId == selectedEffectiveResourcesView.Resource;
                break;
        }

        HcmWorkerName workerName = hcmworker.RecId ? hcmworker.name() : '';
        
        return workerName;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>ResourceCalendarId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Lookup calendar in this LE.
        /// </summary>
        public void lookup()
        {
            Query query = new Query();
            QueryBuildDataSource queryBuildDataSource;
            QueryBuildRange queryBuildRange;
            
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(WorkCalendarTable), this);

            sysTableLookup.addLookupfield(fieldNum(WorkCalendarTable, CalendarId), true);
            sysTableLookup.addLookupfield(fieldNum(WorkCalendarTable, Name));

            queryBuildDataSource = query.addDataSource(tableNum(WorkCalendarTable));

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PeriodCode</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Look up existing Period in this legal entity
        /// </summary>
        public void lookup()
        {
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(ProjPeriodTable), this);

            sysTableLookup.addLookupfield(fieldNum(ProjPeriodTable, PeriodId));
            sysTableLookup.addLookupfield(fieldNum(ProjPeriodTable, TimesheetFrequency));
            sysTableLookup.addLookupfield(fieldNum(ProjPeriodTable, Description));
            sysTableLookup.addSelectionField(fieldNum(ProjPeriodTable, PeriodId));

            Query query = ProjPeriodTable::getProjPeriodTableQueryFilterByTimesheetPeriods();
           
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UpdateButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Update resource properties
        /// </summary>
        public void clicked()
        {
            ResResourceDataEntity   resourceDataEntity;
            CalendarRecId           calendarRecId;
            ProjPeriodTableRecId    periodCodeRecId;
            Object                  callerFormObject;
            FormName                callerFormName;
            boolean                 requireUpdate = false;
            boolean                 updateCalendar = false;
            boolean                 updatePeriodCode = false;
            boolean                 updateCategory = false;
            boolean                 updateSalesPrice = false;

            super();

            resourceDataEntity = ResResourceDataEntity::find(resourceRecId, true);

            if (ResourceName.text() != targetResourceName)
            {
                requireUpdate = true;
                resourceDataEntity.Name = ResourceName.text();
            }

            if (ResourceCalendarId.text() != targetResourceCalendarId)
            {
                updateCalendar = true;
                calendarRecId = ResourceCalendarFacade::getCalendarRecId(ResourceCalendarId.text());
            }

            if (PeriodCode.text() != targetResourcePeriodId)
            {
                updatePeriodCode = true;
                periodCodeRecId = ProjPeriodTable::find(PeriodCode.text()).RecId;
            }

            if (requireUpdate || updateCalendar || updatePeriodCode)
            {
                resourceDataEntity.update(updateCalendar, updatePeriodCode, updateCategory, false, updateSalesPrice,
                    calendarRecId, periodCodeRecId, 0, 0, 0, validFromDateTime, validToDateTime);

                callerFormObject = element.args().caller();
                if (callerFormObject != null)
                {
                    callerFormName = callerFormObject.name();
                    if (callerFormName == formStr(ResResourcesListPage) || 
                        callerFormName == formStr(ResResourcesListPageV2))
                    {
                        callerFormObject.refreshResourceList();
                    }
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@Res:UpdateResource</Caption>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<WindowType xmlns="">Slider</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>UpdateResourceGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>UpdateResourceContent</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ResourceId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Skip>Yes</Skip>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>ResResourceId</ExtendedDataType>
								<ViewEditMode>View</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ResourceName</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>Name</ExtendedDataType>
								<Label>@Res:ResourceName</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Worker</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>HcmWorkerName</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ResourceCalendarId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>CalendarId</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>PeriodCode</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>ProjPeriodId</ExtendedDataType>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>CommitButtonsGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>UpdateButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<Text>@Res:Update</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>