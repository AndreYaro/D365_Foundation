<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>WHSInventOnHandReserve</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class WHSInventOnHandReserve extends FormRun
{
    WHSInventOnHandReserve              inventOnHandReserve;
    InventDimCtrl_Frm_OnHand            inventDimFormSetup;
    boolean                             reserveOnOrdered;
    InventDimFixed                      inventDimFixed;
    InventDimParm                       inventDimParmFixed;
    boolean                             interCompanyMarkingAllowed;

    protected FormObservableLink        reserveNowAction = new FormObservableLink();

}
]]></Source>
			</Method>
			<Method>
				<Name>adjustInventDimParmFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the inventDimParm being used for filtering the query.
    /// </summary>
    /// <returns>
    /// The inventDimParm that will be used to filter the query.
    /// </returns>
    /// <remarks>
    /// In order to filter out batches that don't meet shelf life criteria the query filters must make sure to include batch dimensions.
    /// </remarks>
    public InventDimParm adjustInventDimParmFilter()
    {
        if (!WhsInventOnHandReserveExpandToBatchV2Flight::instance().isEnabled())
        {
            // In order to filter by expiration date on batch we must always look at least batch level.
            // We only apply filter if batch is above location in the resevation hierarchy.
            if (inventDimParm.InventBatchIdFlag == NoYes::No
            &&  inventOnHandReserve.getIsBatchAboveLocation())
            {
                return inventOnHandReserve.getBatchLevelInventDimParm();
            }
        }

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLockedDimensionControlByDimParmFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the check-box flag control in the Locked Dimensions grid that corresponds to the specified <c>InventDimParm</c> fieldId.
    /// </summary>
    /// <param name = "_dimParmFieldId">A field in <c>InventDimParm</c> to search for.</param>
    /// <returns>The corresponding check-box control.</returns>
    /// <remarks>
    /// There's a hard dependency on control names matching the field names on <c>InventDimParm</c>.
    /// </remarks>
    private FormCheckBoxControl findLockedDimensionControlByDimParmFieldId(FieldId _dimParmFieldId)
    {
        return element.control(element.controlId(this.lockedDimensionControlNameByDimParmFieldId(_dimParmFieldId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockedDimensionControlNameByDimParmFieldId</Name>
				<Source><![CDATA[
    private FormControlName lockedDimensionControlNameByDimParmFieldId(FieldId _dimParmFieldId)
    {
        return strFmt('LockedDimGrid_%1', fieldId2name(tableNum(InventDimParm), _dimParmFieldId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFormControls</Name>
				<Source><![CDATA[
    private void createFormControls()
    {
        FormCheckBoxControl prevControlParm;
        FormControl         prevControlDim;

        // Add check-box controls for production dimensions to the locked dimensions grid, as product dimensions are not stored in the hierarchy.
        FormControl         prevLockedDimControl = this.addProductDimFixedControlToLockedDimensionsGrid();

        Enumerator le = inventOnHandReserve.parmHierarchyList().getEnumerator();
        boolean WhsInventOnHandReserveExpandToBatchV2FlightEnabled = WhsInventOnHandReserveExpandToBatchV2Flight::instance().isEnabled();
        // Loop over hierarchy to create controls and set visiblity for remaining dimensions.
        while (le.moveNext())
        {
            WHSReservationHierarchyElementData hierarchyElementData = le.current();
            FieldId dimFieldId = hierarchyElementData.parmDimensionFieldId();
            FieldId dimParmFieldId = InventDim::dim2dimParm(dimFieldId);

            // Add InventDimParm controls
            prevControlParm = FixedView.addDataField(inventDimParm_ds.id(), dimParmFieldId, prevControlParm);
            
            if (WhsInventOnHandReserveExpandToBatchV2FlightEnabled &&
                dimFieldId == fieldNum(InventDim, inventBatchId))
            {
                prevControlParm.helpText("@WAX:WHSInventOnHandDimensionCheckBoxHelpText");
            }


            // Set visiblity of fix dimension grid controls.
            FormCheckBoxControl prevLockedDimCheckBoxControl = GridInventTransParmFixed.addControl(
                                                                        FormControlType::CheckBox, 
                                                                        this.lockedDimensionControlNameByDimParmFieldId(dimParmFieldId),
                                                                        prevLockedDimControl);
            prevLockedDimCheckBoxControl.viewEditMode(ViewEditMode::Edit);
            prevLockedDimCheckBoxControl.dataSource(InventTransInventDimFixed_ds.name());
            prevLockedDimCheckBoxControl.dataMethod(strFmt('edit%1', fieldId2Name(tableNum(InventDimParm), dimParmFieldId)));
            prevLockedDimControl = prevLockedDimCheckBoxControl;            

            // Add InventDim controls
            prevControlDim = InventoryDimensions.addDataField(InventDim_ds.id(), dimFieldId, prevControlDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayOnOrderLot</Name>
				<Source><![CDATA[
    public display InventQty displayOnOrderLot()
    {
		reserveNowAction.observe();
        return inventOnHandReserve.getOnOrderLot();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayReserveOrderedLot</Name>
				<Source><![CDATA[
    public display InventQty displayReserveOrderedLot()
    {
		reserveNowAction.observe();
        return inventOnHandReserve.getReservedOrderedLot();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayReservePhysicalLot</Name>
				<Source><![CDATA[
    public display InventQty displayReservePhysicalLot()
    {
        reserveNowAction.observe();
        return inventOnHandReserve.getReservedPhysicalLot();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCWOnOrderLot</Name>
				<Source><![CDATA[
    public display InventHandlingQty displayCWOnOrderLot()
    {
        if (!this.isItemCWEnabled(inventOnHandReserve.getItemId()))
        {
            return 0;
        }

        reserveNowAction.observe();
        return inventOnHandReserve.getCWOnOrderLot();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCWReserveOrderedLot</Name>
				<Source><![CDATA[
    public display InventHandlingQty displayCWReserveOrderedLot()
    {
        if (!this.isItemCWEnabled(inventOnHandReserve.getItemId()))
        {
            return 0;
        }

        reserveNowAction.observe();
        return inventOnHandReserve.getCWReservedOrderedLot();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCWReservePhysicalLot</Name>
				<Source><![CDATA[
    public display InventHandlingQty displayCWReservePhysicalLot()
    {
        if (!this.isItemCWEnabled(inventOnHandReserve.getItemId()))
        {
            return 0;
        }

        reserveNowAction.observe();
        return inventOnHandReserve.getCWReservedPhysicalLot();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editInventDimParmFixedField</Name>
				<Source><![CDATA[
    public NoYesId editInventDimParmFixedField(
        FieldId     _inventDimFieldId,
        boolean     _set,
        InventTrans _inventTrans,
        NoYesId     _inventDimFieldIdFlag)
    {
        FieldId inventDimParmFieldId    = InventDim::dim2dimParm(_inventDimFieldId);

        if (inventDimFixed != _inventTrans.InventDimFixed)
        {
            InventDimFixedClass::inventDimFixed2InventDimParm(_inventTrans.InventDimFixed, inventDimParmFixed);
        }

        inventDimFixed = _inventTrans.InventDimFixed;

        if (_set)
        {
            inventDimParmFixed.(inventDimParmFieldId) = _inventDimFieldIdFlag;
            inventDimFixed = InventDimFixedClass::inventDimParm2InventDimFixed(inventDimParmFixed);

            element.inventDimSetupObject().modifyInventDimFixed(inventTransInventDimFixed, inventDim, inventDimFixed, _inventDimFieldId);

            inventTransInventDimFixed_ds.executeQuery();
        }

        return inventDimParmFixed.(inventDimParmFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        inventOnHandReserve = WHSInventOnHandReserve::newFromFormRun(this);

        super();

        whsInventReserve_q.dataSourceTable(tableNum(InventDim)).clearDynalinks();
        InventDim::queryGroupByInventDimParm(whsInventReserve_q.dataSourceTable(tableNum(InventDim)), inventDimParm);

        SysQuery::findOrCreateRange(whsInventReserve_q.dataSourceTable(tableNum(WHSInventReserve)), fieldNum(WHSInventReserve, ItemId)).status(RangeStatus::Locked);
        InventDim::queryAddRangeCriteriaRequireParmLevel(whsInventReserve_q.dataSourceTable(tableNum(InventDim)),
                                                         inventOnHandReserve.parmInventDimCriteria(),
                                                         this.adjustInventDimParmFilter());

        inventOnHandReserve.addAdvancedCriteria(whsInventReserve_q, inventDimParm);

        SearchCriteria.text(inventOnHandReserve.parmInventDimCriteria().preFix());

        this.createFormControls();

        element.updateDesign(InventDimFormDesignUpdate::Init);
        inventTransInventDimFixed_ds.executeQuery();

        inventDimFormSetup.formSetControls(true, true);

        this.setFieldsVisibleBasedOnCWItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsVisibleBasedOnCWItem</Name>
				<Source><![CDATA[
    private void setFieldsVisibleBasedOnCWItem()
    {
        boolean isCWItem = this.isItemCWEnabled(inventOnHandReserve.getItemId());

        LockedDimensionsGrid_CWQty.visible(isCwItem);
        displayCWPhysAvailUpHierarchy.visible(isCWItem);
        CWReservPhysicalTrans.visible(isCWItem);
        CWReservOrderedTrans.visible(isCWItem);
        CWOnOrderTrans.visible(isCWItem);
        ReserveNowCW.visible(isCWItem);
        WHSInventReserve_CWAvailOrdered.visible(isCWItem);
        CWUnitId.visible(isCWItem);
        CWUnitIdGrid.visible(isCWItem);

        LockedDimensionsGrid_InventQty.visible(!isCWItem);
        displayPhysAvailUpHierarchy.visible(!isCWItem);
        ReservPhysicalTrans.visible(!isCWItem);
        ReservOrderedTrans.visible(!isCWItem);
        OnOrderTrans.visible(!isCWItem);
        ReserveNow.visible(!isCWItem);
        WHSInventReserve_AvailOrdered.visible(!isCWItem);
        UnitIdGrid.visible(!isCWItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemCWEnabled</Name>
				<Source><![CDATA[
    private boolean isItemCWEnabled(ItemId _itemId)
    {
        return PdsGlobal::pdsIsCWItem(_itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimSetupObject</Name>
				<Source><![CDATA[
    public InventDimCtrl_Frm_OnHand inventDimSetupObject()
    {
        if (!inventDimFormSetup)
        {
            inventDimFormSetup = InventDimCtrl_Frm_WHSOnhandReserve::newFromForm(element);
            inventDimFormSetup.parmDimParmVisibleGrid(inventDimParm);
            inventDimFormSetup.parmLargeRightClickForm(NoYes::Yes);

            inventOnHandReserve.parmInventDimFormSetup(inventDimFormSetup);
        }

        return inventDimFormSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyWHSInventReserveAvailRange</Name>
				<Source><![CDATA[
    public void modifyWHSInventReserveAvailRange(boolean _useQueryRunQueryIfExists)
    {
        QueryBuildRange qbr;

        //if we have a queryrun then we need to manipulate the queryruns query since that will be the one that is being executed
        if (_useQueryRunQueryIfExists && whsInventReserve_ds.queryRun())
        {
            qbr = SysQuery::findOrCreateRange(whsInventReserve_qr.query().dataSourceTable(tableNum(WHSInventReserve)), fieldNum(WHSInventReserve, RecId));
        }
        else
        {
            qbr = SysQuery::findOrCreateRange(whsInventReserve_q.dataSourceTable(tableNum(WHSInventReserve)), fieldNum(WHSInventReserve, RecId));
        }
        // If the movement we are currently working with has reserved qty it is possible that it is reserving the full amount for a dimension set. Making availOrdered 0.
        // To avoid omitting these lines we must also include any WHSInventReserve Lines that have reserved quantity.
        WHSInventOnHandReserve::includeReservedQuantityQuery(qbr, (inventOnHandReserve.getReservedPhysicalLot() || inventOnHandReserve.getReservedOrderedLot()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsShow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Toggles the visiablility of addtional batch information controls.
    /// </summary>
    /// <param name="_inventBatchVisible">
    /// Determines if batch field is visiable or not.
    /// </param>
    public void pdsShow(boolean _inventBatchVisible)
    {
        pdsDispositionCode.visible(_inventBatchVisible);
        pdsDispositionStatus.visible(_inventBatchVisible);

        pdsBestBeforeDate.visible(_inventBatchVisible);
        pdsExpDate.visible(_inventBatchVisible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rightClickModifyQuery</Name>
				<Source><![CDATA[
    void rightClickModifyQuery()
    {
        InventDim::queryAddRangeCriteriaRequireParmLevel(whsInventReserve_q.dataSourceTable(tableNum(InventDim)),
                                                         inventOnHandReserve.parmInventDimCriteria(),
                                                         this.adjustInventDimParmFilter());

        inventOnHandReserve.adjustReservationLevel(wHSInventReserve_q, inventDimParm);

        InventDim::queryGroupByInventDimParm(whsInventReserve_q.dataSourceTable(tableNum(InventDim)), inventDimParm);

        whsInventReserve_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        reserveNow.setFocus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets an inventDimId on the <c>WHSInventReserve</c> record based on the joined inventDim.
    /// </summary>
    /// <param name="_whsInventReserve">
    /// The <c>WHSInventReserve</c> record that will have inventDimId set.
    /// </param>
    /// <remarks>
    /// Because we are grouping and summing in our query, inventDimId is not selected on WHSInventReserve.
    /// </remarks>
    public void setInventDimId(WHSInventReserve _whsInventReserve)
    {
        InventDim dim = InventDim::findOrCreate(_whsInventReserve.joinChild());
        _whsInventReserve.InventDimId = dim.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductDimFixedControlToLockedDimensionsGrid</Name>
				<Source><![CDATA[
    private FormControl addProductDimFixedControlToLockedDimensionsGrid()
    {
        // Add dimension controls after the quantity control
        FormControl prevLockedDimControl = this.isItemCWEnabled(inventOnHandReserve.getItemId()) ? LockedDimensionsGrid_InventQty : LockedDimensionsGrid_CWQty;

        InventDimGroupSetup inventDimGroupSetup = inventOnHandReserve.movement().inventDimGroupSetup();

        Enumerator le = inventDimGroupSetup.ecoResProductDimGroupSetup().activeDimensionFields().getEnumerator();
        while (le.moveNext())
        {
            FieldId dimFieldId = le.current();
            FieldId dimParmFieldId = InventDim::dim2dimParm(dimFieldId);
            FieldName dimParmFieldName = fieldId2Name(tableNum(InventDimParm), dimParmFieldId);

            FormCheckBoxControl prevLockedDimCheckBoxControl = GridInventTransParmFixed.addControl(
                                                                            FormControlType::CheckBox,
                                                                            strFmt('LockedDimGrid_%1', dimParmFieldName),
                                                                            prevLockedDimControl);
            prevLockedDimCheckBoxControl.viewEditMode(ViewEditMode::Edit);
            prevLockedDimCheckBoxControl.dataSource(InventTransInventDimFixed_ds.name());
            prevLockedDimCheckBoxControl.dataMethod(strFmt('edit%1', dimParmFieldName));
            prevLockedDimControl = prevLockedDimCheckBoxControl;
        }

        return prevLockedDimControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    void updateDesign(InventDimFormDesignUpdate _mode)
    {
        switch (_mode)
        {
            case InventDimFormDesignUpdate::Init:
                reserveOnOrdered = InventParameters::find().ReserveOnOrdered;
                element.inventDimSetupObject().formActiveSetup();
                element.inventDimSetupObject().formSetControls(true,true);
                element.updateInventDimFixedControls(element.inventDimSetupObject().movement().inventDimGroupSetup());
                // InterCompany linked orders should not allow changes to reservation
                if (element.args()
                &&  element.args().record())
                {
                    interCompanyMarkingAllowed = TradeInterCompany::markingAllowed(element.args().record());
                    if (!interCompanyMarkingAllowed)
                    {
                        warning("@SYS94314");
                    }
                }
                else
                {
                    interCompanyMarkingAllowed = true;
                }
                // Locking down ability to reserve
                whsInventReserve_ds.allowEdit(interCompanyMarkingAllowed && inventOnHandReserve.movement().canReservationFormBeEdited());
                reserveLot.enabled(interCompanyMarkingAllowed && inventOnHandReserve.movement().canReservationFormBeEdited());
                break;

            case InventDimFormDesignUpdate::LinkActive:
                element.inventDimSetupObject().initFromCaller();
                element.inventDimSetupObject().parmCtrlItemId(whsInventReserve_ItemId);
                element.updateInventDimFixedControls(element.inventDimSetupObject().movement().inventDimGroupSetup());
                break;

            case InventDimFormDesignUpdate::Active:
                element.inventDimSetupObject().formActiveSetup();
                element.inventDimSetupObject().formSetControls(true,true);
                break;

            default:
                throw error(strFmt("@SYS54195",funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventDimFixedControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disable primary stocking and product dimensions - they are always locked and cannot be edited
    /// </summary>
    /// <param name = "_inventDimGroupSetup">An instance of <c>InventDimGroupSetup</c> class containing information about the inventory dimensions for the selected item.</param>
    public void updateInventDimFixedControls(InventDimGroupSetup _inventDimGroupSetup)
    {
        InventDimParm   primaryStockingDimParm;
        _inventDimGroupSetup.inventDimParmPrimaryNotProductDim(primaryStockingDimParm);

        // We only loop non-product dim fields below as they are not stored in the reservation hierarchy
        Enumerator enumerator = inventOnHandReserve.parmHierarchyList().getEnumerator();
        while (enumerator.moveNext())
        {
            WHSReservationHierarchyElementData hierarchyElementData = enumerator.current();
            FieldId dimFieldId = hierarchyElementData.parmDimensionFieldId();
            FieldId dimParmFieldId = InventDim::dim2dimParm(dimFieldId);

            FormCheckBoxControl fixedDimControl = element.findLockedDimensionControlByDimParmFieldId(dimParmFieldId);
            fixedDimControl.enabled(!primaryStockingDimParm.(dimParmFieldId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        // We don't want to update the caller if closeCancel was called
        if (!element.closedCancel())
        {
            inventOnHandReserve.callerRefresh();
        }

        super();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>InventDimParm</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            inventOnHandReserve.initInventDimParmVisible(inventDimParm);
            inventDimParm.write();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>WHSInventReserve</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            element.modifyWHSInventReserveAvailRange(false);

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            return true;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            // do nothing
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayPhysAvailUpHierarchy</Name>
						<Source><![CDATA[
        /// <summary>
        /// Displays the physical available amount taking into consideration availablity up the hierarchy.
        /// </summary>
        /// <param name="_whsInventReseve">
        /// The current WHSinventReserve buffer.
        /// </param>
        /// <returns>
        /// The physical available amount.
        /// </returns>
        [SysClientCacheDataMethodAttribute(true)]
        display public InventQtyAvailPhysical displayPhysAvailUpHierarchy(WHSInventReserve _whsInventReseve)
        {
            element.setInventDimId(_whsInventReseve);

            return min(_whsInventReseve.displayPhysAvailUpHierarchy(), _whsInventReseve.AvailPhysical);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayCWPhysAvailUpHierarchy</Name>
						<Source><![CDATA[
        /// <summary>
        /// Displays the physical available catch weight amount taking into consideration availability up the hierarchy.
        /// </summary>
        /// <param name="_whsInventReserve">
        /// The current <c>WHSInventReserve</c> buffer.
        /// </param>
        /// <returns>
        /// The physical available catch weight amount.
        /// </returns>
        [SysClientCacheDataMethodAttribute(true)]
        display public PdsCWAvailPhysical displayCWPhysAvailUpHierarchy(WHSInventReserve _whsInventReserve)
        {
            if (!element.isItemCWEnabled(_whsInventReserve.ItemId))
            {
                return 0;
            }

            element.setInventDimId(_whsInventReserve);

            return min(_whsInventReserve.displayCWPhysAvailUpHierarchy(), _whsInventReserve.CWAvailPhysical);
        }

]]></Source>
					</Method>
					<Method>
						<Name>pdsExpDate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Displays expiration date of the batch.
        /// </summary>
        /// <param name="_whsInventReserve">
        /// The current WHSInventReserve buffer.
        /// </param>
        /// <returns>
        /// Expiration date of the batch.
        /// </returns>
        public display InventBatchExpDate pdsExpDate(WHSInventReserve _whsInventReserve)
        {
            InventDim           pdsInventDim;
            InventBatchExpDate  expDate = dateNull();

            if (hasFieldAccess(tableNum(InventBatch), fieldNum(InventBatch,ExpDate), AccessType::View))
            {
                pdsInventDim = _whsInventReserve.joinChild();

                if (pdsInventDim.InventBatchId)
                {
                    expDate = InventBatch::find(pdsInventDim.InventBatchId, _whsInventReserve.ItemId).ExpDate;
                }
            }

            return expDate;
        }

]]></Source>
					</Method>
					<Method>
						<Name>pdsBestBeforeDate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Displays the batch best before date.
        /// </summary>
        /// <param name="_whsInventReserve">
        /// The current WHSInventReserve buffer.
        /// </param>
        /// <returns>
        /// The batch best before date.
        /// </returns>
        public display PdsBestBeforeDate pdsBestBeforeDate(WHSInventReserve _whsInventReserve)
        {
            InventDim           pdsInventDim;
            PdsBestBeforeDate   bestBeforeDate = dateNull();

            if (hasFieldAccess(tableNum(InventBatch), fieldNum(InventBatch,PdsBestBeforeDate), AccessType::View))
            {
                pdsInventDim = _whsInventReserve.joinChild();

                if (pdsInventDim.InventBatchId)
                {
                    bestBeforeDate = InventBatch::find(pdsInventDim.InventBatchId, _whsInventReserve.ItemId).PdsBestBeforeDate;
                }
            }

            return bestBeforeDate;
        }

]]></Source>
					</Method>
					<Method>
						<Name>pdsDispositionStatus</Name>
						<Source><![CDATA[
        /// <summary>
        /// Displays the batch disposition status.
        /// </summary>
        /// <param name="_whsInventReserve">
        /// The current WHSInventReserve buffer.
        /// </param>
        /// <returns>
        /// The batch disposition status.
        /// </returns>
        public display PdsBatchDispositionStatus pdsDispositionStatus(WHSInventReserve  _whsInventReserve)
        {
            InventDim                           pdsInventDim;
            PdsBatchDispositionStatus           status = PdsStatus::NotApplicable;

            pdsInventDim = _whsInventReserve.joinChild();
            if (pdsInventDim.InventBatchId)
            {
                status = InventBatch::find(pdsInventDim.InventBatchId,
                                            _whsInventReserve.ItemId).pdsDispositionStatus();
            }

            return status;
        }

]]></Source>
					</Method>
					<Method>
						<Name>pdsDispositionCode</Name>
						<Source><![CDATA[
        /// <summary>
        /// Displays the batch disposition code.
        /// </summary>
        /// <param name="_whsInventReserve">
        /// The current WHSInventReserve buffer.
        /// </param>
        /// <returns>
        /// The batch disposition code.
        /// </returns>
        public display PdsBatchDispositionCode pdsDispositionCode(WHSInventReserve _whsInventReserve)
        {
            InventDim               pdsInventDim;
            PdsBatchDispositionCode dispositionCode = '';

            if (hasFieldAccess(tableNum(InventBatch), fieldNum(InventBatch,PdsDispositionCode), AccessType::View))
            {
                pdsInventDim = _whsInventReserve.joinChild();

                if (pdsInventDim.InventBatchId)
                {
                    dispositionCode = InventBatch::find(pdsInventDim.InventBatchId, _whsInventReserve.ItemId).PdsDispositionCode;
                }
            }

            return dispositionCode;
        }

]]></Source>
					</Method>
					<Method>
						<Name>research</Name>
						<Source><![CDATA[
        public void research(boolean _retainPosition = false)
        {
            QueryBuildDataSource    qbds;

            element.modifyWHSInventReserveAvailRange(true);

            qbds = whsInventReserve_ds.queryRun().query().dataSourceTable(tableNum(InventDim));
            InventDim::queryAddRangeCriteriaRequireParmLevel(qbds,
                                                             inventOnHandReserve.parmInventDimCriteria(),
                                                             element.adjustInventDimParmFilter(),
                                                             InventDim::dimFieldsList(),
                                                             qbds);

            super(_retainPosition);
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            element.updateDesign(InventDimFormDesignUpdate::Active);

            inventTransInventDimFixed_ds.executeQuery();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            QueryBuildDataSource    qbds;
            QueryBuildRange         qbr;

            super();

            qbds = whsInventReserve_q.dataSourceTable(tableNum(WHSInventReserve));
            qbds.clearDynalinks();
            WHSInventReserve::addSumFields(qbds);
            qbds.addRange(fieldNum(WHSInventReserve, ItemId)).value(queryValue(inventOnHandReserve.getItemId()));
            qbr = qbds.addRange(fieldNum(WHSInventReserve, RecId));
            qbr.status(RangeStatus::Locked);
            element.modifyWHSInventReserveAvailRange(false);

            qbds.addSortField(fieldNum(WHSInventReserve, ItemId));
            qbds.orderMode(OrderMode::GroupBy);
        }

]]></Source>
					</Method>
					<Method>
						<Name>reserveNowQty</Name>
						<Source><![CDATA[
        public edit PdsQtyReservation reserveNowQty(boolean _set, WHSInventReserve _inventReserve, InventHandlingQty _reserveNow)
        {
            return this.reserveNow(_set, _inventReserve, _reserveNow);
        }

]]></Source>
					</Method>
					<Method>
						<Name>reserveNowCWQty</Name>
						<Source><![CDATA[
        public edit PdsCWQtyReservation reserveNowCWQty(boolean _set, WHSInventReserve _inventReserve, InventHandlingQty _reserveNow)
        {
            return this.reserveNow(_set, _inventReserve, _reserveNow);
        }

]]></Source>
					</Method>
					<Method>
						<Name>reserveNow</Name>
						<Source><![CDATA[
        public edit InventQty reserveNow(boolean set, WHSInventReserve _inventReserve, InventQty  _reserveNow)
        {
            InventQty   retInventQty;
            boolean     ret = true;
            Common      common = element.args().record();
            CustAccount custId;
            InventTable inventTable = InventTable::find(_inventReserve.ItemId);

            if (inventTable.isItemBatchActivated())
            {
                if (set && _reserveNow != 0.00 && inventTable.pdsIsShelfLifeCapable())
                {
                    switch (common.TableId)
                    {
                        case tableNum(SalesLine) :
                            custId = common.(fieldNum(SalesLine,CustAccount));
                            break;
                        case tableNum(SalesParmLine) :
                            custId = common.(fieldNum(SalesParmLine,CustAccount));
                            break;
                        default:
                            custId = '';
                    }

                    ret = InventBatch::pdsCheckExpiryDate(inventDim.InventBatchId,
                                                              _inventReserve.ItemId,
                                                              inventOnHandReserve.getCheckDate(),
                                                              true,
                                                              custId,
                                                              inventOnHandReserve.getOverrideFEFO(),
                                                              inventDim);

                    if (ret)
                    {
                        ret = inventOnHandReserve.validateBatchReserve(element.args(), _inventReserve);
                    }
                }
            }

            if (ret)
            {
                // Set the InventDimId as it is not selected by the summing query
                element.setInventDimId(_inventReserve);

                retInventQty = inventOnHandReserve.reserveHandlingQuantityNow(set, _inventReserve, _reserveNow);

                // Reset the InventDimId to avoid unnecessary changes, otherwise the record will be
                // modified even without a user interaction, exposing to an unwanted "Save changes" dialog
                _inventReserve.InventDimId = '';

                if (set)
                {
                    whsInventReserve_ds.reread();
                    inventTransInventDimFixed_ds.research(true);
                    reserveNowAction.markChanged();
                }
            }
            else
            {
                retInventQty = _reserveNow;
            }

            return retInventQty;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>InventTransOriginMovement</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
            
            InventTransFormHelper::formQueryAddDynalink(inventTransOriginMovement_DS, null, element.args());
            
        }

]]></Source>
					</Method>
					<Method>
						<Name>unitId</Name>
						<Source><![CDATA[
        public display UnitOfMeasureSymbol unitId(InventTransOrigin _inventTransOrigin)
        {
            return InventTableModule::find(_inventTransOrigin.ItemId, ModuleInventPurchSales::Invent).UnitId;
        }

]]></Source>
					</Method>
					<Method>
						<Name>cwUnitId</Name>
						<Source><![CDATA[
        public display PdsCWUnitId cwUnitId(InventTransOrigin _inventTransOrigin)
        {
            if (element.isItemCWEnabled(_inventTransOrigin.ItemId))
            {
                return PdsCatchWeightItem::pdsCWUnitId(_inventTransOrigin.ItemId);
            }
                
            return "";
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>InventTransInventDimFixed</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            return false;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            element.inventDimSetupObject().modifyQueryInventDimFixed(inventTransInventDimFixed_DS,inventDim,whsInventReserve_ds.reserveNow(false, whsInventReserve, 0));

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>qty</Name>
						<Source><![CDATA[
        public display InventQty qty(InventTrans   _inventTrans)
        {
            return -_inventTrans.Qty;
        }

]]></Source>
					</Method>
					<Method>
						<Name>cwQty</Name>
						<Source><![CDATA[
        public display InventHandlingQty cwQty(InventTrans   _inventTrans)
        {
            return -_inventTrans.PdsCWQty;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editConfigIdFlag</Name>
						<Source><![CDATA[
        public display EcoResConfigurationFlag editConfigIdFlag(InventTrans _inventTrans)
        {
            return element.editInventDimParmFixedField(fieldNum(InventDim, ConfigId), false, _inventTrans, NoYes::No);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editInventSizeIdFlag</Name>
						<Source><![CDATA[
        public display EcoResSizeFlag editInventSizeIdFlag(InventTrans _inventTrans)
        {
            return element.editInventDimParmFixedField(fieldNum(InventDim, InventSizeId), false, _inventTrans, NoYes::No);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editInventColorIdFlag</Name>
						<Source><![CDATA[
        public display EcoResColorFlag editInventColorIdFlag(InventTrans _inventTrans)
        {
            return element.editInventDimParmFixedField(fieldNum(InventDim, InventColorId), false, _inventTrans, NoYes::No);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editInventVersionIdFlag</Name>
						<Source><![CDATA[
        public display EcoResVersionFlag editInventVersionIdFlag(InventTrans _inventTrans)
        {
            return element.editInventDimParmFixedField(fieldNum(InventDim, InventVersionId), false, _inventTrans, NoYes::No);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editInventStyleIdFlag</Name>
						<Source><![CDATA[
        public display EcoResStyleFlag editInventStyleIdFlag(InventTrans _inventTrans)
        {
            return element.editInventDimParmFixedField(fieldNum(InventDim, InventStyleId), false, _inventTrans, NoYes::No);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editInventSiteIdFlag</Name>
						<Source><![CDATA[
        public edit InventSiteIdFlag editInventSiteIdFlag(
            boolean     _set,
            InventTrans _inventTrans,
            NoYesId     _inventSiteIdFlag)
        {
            return element.editInventDimParmFixedField(fieldNum(InventDim, InventSiteId), _set, _inventTrans, _inventSiteIdFlag);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editInventLocationIdFlag</Name>
						<Source><![CDATA[
        public edit InventLocationIdFlag editInventLocationIdFlag(
            boolean     _set,
            InventTrans _inventTrans,
            NoYesId     _inventLocationIdFlag)
        {
            return element.editInventDimParmFixedField(fieldNum(InventDim, InventLocationId), _set, _inventTrans, _inventLocationIdFlag);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editInventStatusFlag</Name>
						<Source><![CDATA[
        public edit WHSInventStatusFlag editInventStatusFlag(
            boolean     _set,
            InventTrans _inventTrans,
            NoYesId     _whsInventStatusFlag)
        {
            return element.editInventDimParmFixedField(fieldNum(InventDim, InventStatusId), _set, _inventTrans, _whsInventStatusFlag);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editInventDimension1Flag</Name>
						<Source><![CDATA[
        public edit InventDimension1Flag editInventDimension1Flag(
            boolean                 _set,
            InventTrans             _inventTrans,
            InventDimension1Flag    _inventDimension1Flag)
        {
            FieldId dimFieldId = fieldNum(InventDim, InventDimension1);
            return element.editInventDimParmFixedField(dimFieldId, InventDim::isFieldIdProductDimension(dimFieldId) ? false : _set, _inventTrans, _inventDimension1Flag);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editInventDimension2Flag</Name>
						<Source><![CDATA[
        public edit InventDimension2Flag editInventDimension2Flag(
            boolean                 _set,
            InventTrans             _inventTrans,
            InventDimension2Flag    _inventDimension2Flag)
        {
            FieldId dimFieldId = fieldNum(InventDim, InventDimension2);
            return element.editInventDimParmFixedField(dimFieldId, InventDim::isFieldIdProductDimension(dimFieldId) ? false : _set, _inventTrans, _inventDimension2Flag);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editInventDimension3Flag</Name>
						<Source><![CDATA[
        public edit InventDimension3Flag editInventDimension3Flag(
            boolean                 _set,
            InventTrans             _inventTrans,
            InventDimension3Flag    _inventDimension3Flag)
        {
            FieldId dimFieldId = fieldNum(InventDim, InventDimension3);
            return element.editInventDimParmFixedField(dimFieldId, InventDim::isFieldIdProductDimension(dimFieldId) ? false : _set, _inventTrans, _inventDimension3Flag);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editInventDimension4Flag</Name>
						<Source><![CDATA[
        public edit InventDimension4Flag editInventDimension4Flag(
            boolean                 _set,
            InventTrans             _inventTrans,
            InventDimension4Flag    _inventDimension4Flag)
        {
            FieldId dimFieldId = fieldNum(InventDim, InventDimension4);
            return element.editInventDimParmFixedField(dimFieldId, InventDim::isFieldIdProductDimension(dimFieldId) ? false : _set, _inventTrans, _inventDimension4Flag);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editInventDimension5Flag</Name>
						<Source><![CDATA[
        public edit InventDimension5Flag editInventDimension5Flag(
            boolean                 _set,
            InventTrans             _inventTrans,
            InventDimension5Flag    _inventDimension5Flag)
        {
            FieldId dimFieldId = fieldNum(InventDim, InventDimension5);
            return element.editInventDimParmFixedField(dimFieldId, InventDim::isFieldIdProductDimension(dimFieldId) ? false : _set, _inventTrans, _inventDimension5Flag);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editInventDimension6Flag</Name>
						<Source><![CDATA[
        public edit InventDimension6Flag editInventDimension6Flag(
            boolean                 _set,
            InventTrans             _inventTrans,
            InventDimension6Flag    _inventDimension6Flag)
        {
            FieldId dimFieldId = fieldNum(InventDim, InventDimension6);
            return element.editInventDimParmFixedField(dimFieldId, InventDim::isFieldIdProductDimension(dimFieldId) ? false : _set, _inventTrans, _inventDimension6Flag);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editInventDimension7Flag</Name>
						<Source><![CDATA[
        public edit InventDimension7Flag editInventDimension7Flag(
            boolean                 _set,
            InventTrans             _inventTrans,
            InventDimension7Flag    _inventDimension7Flag)
        {
            FieldId dimFieldId = fieldNum(InventDim, InventDimension7);
            return element.editInventDimParmFixedField(dimFieldId, InventDim::isFieldIdProductDimension(dimFieldId) ? false : _set, _inventTrans, _inventDimension7Flag);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editInventDimension8Flag</Name>
						<Source><![CDATA[
        public edit InventDimension8Flag editInventDimension8Flag(
            boolean                 _set,
            InventTrans             _inventTrans,
            InventDimension8Flag    _inventDimension8Flag)
        {
            FieldId dimFieldId = fieldNum(InventDim, InventDimension8);
            return element.editInventDimParmFixedField(dimFieldId, InventDim::isFieldIdProductDimension(dimFieldId) ? false : _set, _inventTrans, _inventDimension8Flag);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editInventDimension9Flag</Name>
						<Source><![CDATA[
        public edit InventDimension9Flag editInventDimension9Flag(
            boolean                 _set,
            InventTrans             _inventTrans,
            InventDimension9Flag    _inventDimension9Flag)
        {
            FieldId dimFieldId = fieldNum(InventDim, InventDimension9);
            return element.editInventDimParmFixedField(dimFieldId, InventDim::isFieldIdProductDimension(dimFieldId) ? false : _set, _inventTrans, _inventDimension9Flag);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editInventDimension10Flag</Name>
						<Source><![CDATA[
        public edit InventDimension10Flag editInventDimension10Flag(
            boolean                 _set,
            InventTrans             _inventTrans,
            InventDimension10Flag   _inventDimension10Flag)
        {
            FieldId dimFieldId = fieldNum(InventDim, InventDimension10);
            return element.editInventDimParmFixedField(dimFieldId, InventDim::isFieldIdProductDimension(dimFieldId) ? false : _set, _inventTrans, _inventDimension10Flag);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editInventDimension11Flag</Name>
						<Source><![CDATA[
        public edit InventDimension11Flag editInventDimension11Flag(
            boolean                 _set,
            InventTrans             _inventTrans,
            InventDimension11Flag    _inventDimension11Flag)
        {
            FieldId dimFieldId = fieldNum(InventDim, InventDimension11);
            return element.editInventDimParmFixedField(dimFieldId, InventDim::isFieldIdProductDimension(dimFieldId) ? false : _set, _inventTrans, _inventDimension11Flag);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editInventDimension12Flag</Name>
						<Source><![CDATA[
        public edit InventDimension12Flag editInventDimension12Flag(
            boolean                 _set,
            InventTrans             _inventTrans,
            InventDimension12Flag    _inventDimension12Flag)
        {
            FieldId dimFieldId = fieldNum(InventDim, InventDimension12);
            return element.editInventDimParmFixedField(dimFieldId, InventDim::isFieldIdProductDimension(dimFieldId) ? false : _set, _inventTrans, _inventDimension12Flag);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editInventBatchIdFlag</Name>
						<Source><![CDATA[
        public edit InventBatchIdFlag editInventBatchIdFlag(
            boolean     _set,
            InventTrans _inventTrans,
            NoYesId     _inventBatchIdFlag)
        {
            return element.editInventDimParmFixedField(fieldNum(InventDim, InventBatchId), _set, _inventTrans, _inventBatchIdFlag);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editInventSerialIdFlag</Name>
						<Source><![CDATA[
        public edit InventSerialIdFlag editInventSerialIdFlag(
            boolean     _set,
            InventTrans _inventTrans,
            NoYesId     _inventSerialIdFlag)
        {
            return element.editInventDimParmFixedField(fieldNum(InventDim, InventSerialId), _set, _inventTrans, _inventSerialIdFlag);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editLicensePlateFlag</Name>
						<Source><![CDATA[
        public edit WHSLicensePlateFlag editLicensePlateFlag(
            boolean     _set,
            InventTrans _inventTrans,
            NoYesId     _whsLicensePlateFlag)
        {
            return element.editInventDimParmFixedField(fieldNum(InventDim, LicensePlateId), _set, _inventTrans, _whsLicensePlateFlag);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editWMSLocationIdFlag</Name>
						<Source><![CDATA[
        public edit WMSLocationIdFlag editWMSLocationIdFlag(
            boolean     _set,
            InventTrans _inventTrans,
            NoYesId     _wmsLocationIdFlag)
        {
            return element.editInventDimParmFixedField(fieldNum(InventDim, wmsLocationId), _set, _inventTrans, _wmsLocationIdFlag);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editInventOwnerIdFlag_RU</Name>
						<Source><![CDATA[
        edit InventOwnerIdFlag_RU editInventOwnerIdFlag_RU(boolean     _set,
                                          InventTrans _inventTrans,
                                          NoYesId     _inventOwnerIdFlag_RU)
        {
            return element.editInventDimParmFixedField(fieldNum(InventDim, InventOwnerId_RU), _set, _inventTrans, _inventOwnerIdFlag_RU);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editInventGTDIdFlag_RU</Name>
						<Source><![CDATA[
        edit InventGTDIdFlag_RU editInventGTDIdFlag_RU(boolean     _set,
                                        InventTrans _inventTrans,
                                        NoYesId     _inventGTDIdFlag_RU)
        {
            return element.editInventDimParmFixedField(fieldNum(InventDim, InventGtdId_RU), _set, _inventTrans, _inventGTDIdFlag_RU);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editInventProfileIdFlag_RU</Name>
						<Source><![CDATA[
        edit InventProfileIdFlag_RU editInventProfileIdFlag_RU(boolean     _set,
                                            InventTrans _inventTrans,
                                            NoYesId     _inventProfileIdFlag_RU)
        {
            return element.editInventDimParmFixedField(fieldNum(InventDim, InventProfileId_RU), _set, _inventTrans, _inventProfileIdFlag_RU);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>ReserveLot</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            inventOnHandReserve.updateReserveLot();
            whsInventReserve_ds.research(false);
            reserveNow.setFocus();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UpdateQueryBtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            if (inventOnHandReserve.validateHierarchyNoHoles(inventDimParm))
            {
                inventDimParm.write();
                element.inventDimSetupObject().formSetControlsRightClick(true, inventDimFormSetup.allowResizeOfFormControls());
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>InventDim</Name>
			<Table>InventDim</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>configId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventBatchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventColorId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventVersionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventGtdId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventOwnerId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventProfileId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventSerialId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSiteId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSizeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStyleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LicensePlateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SHA1Hash</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSPalletId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>WHSInventReserve</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventDimParm</Name>
			<Table>InventDimParm</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ClosedFlag</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ClosedQtyFlag</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompanyFlag</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ConfigIdFlag</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventBatchIdFlag</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventColorIdFlag</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventVersionIdFlag</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventGTDIdFlag_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationIdFlag</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventOwnerIdFlag_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventProfileIdFlag_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSerialIdFlag</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSiteIdFlag</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSizeIdFlag</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStatusFlag</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStyleIdFlag</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemIdFlag</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LicensePlateFlag</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WMSLocationIdFlag</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WMSPalletIdFlag</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>WHSInventReserve</Name>
			<Table>WHSInventReserve</Table>
			<Fields>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>AvailOrdered</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>AvailPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyLevel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReservOrdered</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReservPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventTransOriginMovement</Name>
			<Table>InventTransOrigin</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemInventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Party</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventTransInventDimFixed</Name>
			<Table>InventTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountAdjustment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountOperations</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountPosted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSecCurAdjustment_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSecCurPhysical_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSecCurPosted_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSettled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSettledSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountStd</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountStdSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateClosed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateClosedSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateExpected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateFinancial</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateInvent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DatePhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GroupRefId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GroupRefType_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyInventDimTransferred</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimFixed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventDimIdSales_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransOriginDelivery_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransOriginSales_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransOriginTransit_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceReturned</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkingRefInventTransOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NonFinancialTransferInventClosing</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackingSlipId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackingSlipReturned</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWSettled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PickingRouteID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjAdjustRefId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjCategoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Qty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QtySettled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QtySettledSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnInventTransOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RevenueAmountPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShippingDateConfirmed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShippingDateRequested</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StatusIssue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StatusReceipt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StornoPhysical_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Storno_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAmountPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TimeExpected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransChildRefId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransChildType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValueOpen</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValueOpenSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VoucherPhysical</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>InventTransOriginMovement</JoinSource>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<Index>TransOriginIdx</Index>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS7120</Caption>
		<DataSource xmlns="">WHSInventReserve</DataSource>
		<Pattern xmlns="">SimpleDetails-FastTabsContainer</Pattern>
		<PatternVersion xmlns="">1.4</PatternVersion>
		<SaveSize xmlns="">No</SaveSize>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<StatusBarStyle xmlns="">Simple</StatusBarStyle>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>536870911</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ReserveLot</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>939524094</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<NeededPermission>Update</NeededPermission>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS54987</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Trans</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Skip>Yes</Skip>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>HeaderUnits</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>UnitId</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ConfigurationKey>WHSCatchWeight</ConfigurationKey>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>unitId</DataMethod>
								<DataSource>InventTransOriginMovement</DataSource>
								<Label>@SYS190814</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CWUnitId</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ConfigurationKey>WHSCatchWeight</ConfigurationKey>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>cwUnitId</DataMethod>
								<DataSource>InventTransOriginMovement</DataSource>
								<Label>@PDS3</Label>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>ReservPhysicalTrans</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>858993458</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Skip>Yes</Skip>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>displayReservePhysicalLot</DataMethod>
						<Label>@SYS22392</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>ReservOrderedTrans</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1288490187</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Skip>Yes</Skip>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>displayReserveOrderedLot</DataMethod>
						<Label>@SYS22393</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>OnOrderTrans</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1717986916</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Skip>Yes</Skip>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>displayOnOrderLot</DataMethod>
						<Label>@SYS7183</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>CWReservPhysicalTrans</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ConfigurationKey>WHSCatchWeight</ConfigurationKey>
						<ElementPosition>858993458</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Skip>Yes</Skip>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>displayCWReservePhysicalLot</DataMethod>
						<Label>@PDS61</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>CWReservOrderedTrans</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ConfigurationKey>WHSCatchWeight</ConfigurationKey>
						<ElementPosition>1288490187</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Skip>Yes</Skip>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>displayCWReserveOrderedLot</DataMethod>
						<Label>@PDS56</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>CWOnOrderTrans</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ConfigurationKey>WHSCatchWeight</ConfigurationKey>
						<ElementPosition>1717986916</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Skip>Yes</Skip>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>displayCWOnOrderLot</DataMethod>
						<Label>@PDS21</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>FastTab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>DimAvailability</Name>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>DimAvailabilityActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>DimAvailabilityButtons</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>UpdateQueryBtn</Name>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@WAX:WHSInventOnHandRefreshDimensionsHelpText</HelpText>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<Text>@WAX4785</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FixedView</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Pattern>CustomFilters</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
								<FrameType>None</FrameType>
								<Style>CustomFilter</Style>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>UnitIdGrid</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>WHSCatchWeight</ConfigurationKey>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>unitId</DataMethod>
										<DataSource>InventTransOriginMovement</DataSource>
										<Label>@SYS190814</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CWUnitIdGrid</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>WHSCatchWeight</ConfigurationKey>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>cwUnitId</DataMethod>
										<DataSource>InventTransOriginMovement</DataSource>
										<Label>@PDS3</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>WHSInventReserve_ItemId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>536870910</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ItemId</DataField>
										<DataSource>WHSInventReserve</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>displayPhysAvailUpHierarchy</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741820</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayPhysAvailUpHierarchy</DataMethod>
										<DataSource>WHSInventReserve</DataSource>
										<Label>@WAX3575</Label>
										<NoOfDecimals>-1</NoOfDecimals>
										<ShowZero>Yes</ShowZero>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>displayCWPhysAvailUpHierarchy</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>WHSCatchWeight</ConfigurationKey>
										<ElementPosition>1073741820</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayCWPhysAvailUpHierarchy</DataMethod>
										<DataSource>WHSInventReserve</DataSource>
										<Label>@WAX3575</Label>
										<NoOfDecimals>-1</NoOfDecimals>
										<ShowZero>Yes</ShowZero>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>WHSInventReserve_AvailOrdered</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1342177275</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AvailOrdered</DataField>
										<DataSource>WHSInventReserve</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
										<ShowZero>Yes</ShowZero>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>WHSInventReserve_CWAvailOrdered</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>WHSCatchWeight</ConfigurationKey>
										<ElementPosition>1342177275</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CWAvailOrdered</DataField>
										<DataSource>WHSInventReserve</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
										<ShowZero>Yes</ShowZero>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>InventoryDimensions</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612730</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>pdsDispositionCode</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1664299821</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>pdsDispositionCode</DataMethod>
										<DataSource>WHSInventReserve</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>pdsDispositionStatus</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986912</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>pdsDispositionStatus</DataMethod>
										<DataSource>WHSInventReserve</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>pdsBestBeforeDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1771674003</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>pdsBestBeforeDate</DataMethod>
										<DataSource>WHSInventReserve</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>pdsExpDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1825361094</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>pdsExpDate</DataMethod>
										<DataSource>WHSInventReserve</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>reserveNow</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1879048188</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>reserveNowQty</DataMethod>
										<DataSource>WHSInventReserve</DataSource>
										<Label>@SYS7669</Label>
										<NoOfDecimals>-1</NoOfDecimals>
										<ViewEditMode>Edit</ViewEditMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>reserveNowCW</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>WHSCatchWeight</ConfigurationKey>
										<ElementPosition>1879048188</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>reserveNowQty</DataMethod>
										<DataSource>WHSInventReserve</DataSource>
										<Label>@PDS58</Label>
										<NoOfDecimals>-1</NoOfDecimals>
										<ViewEditMode>Edit</ViewEditMode>
									</AxFormControl>
								</Controls>
								<DataSource>WHSInventReserve</DataSource>
								<Scrollbars>Yes</Scrollbars>
								<ShowRowLabels>No</ShowRowLabels>
								<VisibleRows>10</VisibleRows>
								<VisibleRowsMode>Fixed</VisibleRowsMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>GroupSearchCriteria</Name>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Pattern>FillText</Pattern>
								<PatternVersion>UX7 1.0</PatternVersion>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SearchCriteria</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@WAX5745</Label>
										<LabelPosition>Above</LabelPosition>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>@WAX3576</Caption>
						<FastTabExpanded>Always</FastTabExpanded>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>LockedDimensions</Name>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>GridInventTransParmFixed</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Top>0</Top>
								<TopMode>TopEdge</TopMode>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>LockedDimensionsGrid_InventQty</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>qty</DataMethod>
										<DataSource>InventTransInventDimFixed</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>LockedDimensionsGrid_CWQty</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>WHSCatchWeight</ConfigurationKey>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>cwQty</DataMethod>
										<DataSource>InventTransInventDimFixed</DataSource>
										<Label>@PDS128</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<DataSource>InventTransInventDimFixed</DataSource>
								<ShowRowLabels>No</ShowRowLabels>
								<VisibleRows>6</VisibleRows>
								<VisibleRowsMode>Fixed</VisibleRowsMode>
							</AxFormControl>
						</Controls>
						<Caption>@SYS79535</Caption>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>