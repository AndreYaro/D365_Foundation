<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BankReconciliationStatementFilterDropDialog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BankReconciliationStatementFilterDropDialog extends FormRun
{
    private date dateFrom;
    private date dateTo;
    private AmountCurDebit debitAmountFrom;
    private AmountCurDebit debitAmountTo;
    private AmountCurCredit creditAmountFrom;
    private AmountCurCredit creditAmountTo;
    private container transCodes;
    private container transCodeIds;
    private str tradingParty;
    private str referenceNumber;
    private str identification;

    private FormRun bankReconWorksheetFormRun;
    private SysLookupMultiSelectCtrl multiSelectTransCodeControl;
    private CompanyBankAccountId bankAccountId;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        dateFrom,
        dateTo,
        debitAmountFrom,
        debitAmountTo,
        creditAmountFrom,
        creditAmountTo,
        transCodes,
        transCodeIds,
        tradingParty,
        referenceNumber,
        identification
    #endmacro

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        if (!element.args() || !element.args().caller())
        {
            throw error("@SYS22539");
        }

        bankReconWorksheetFormRun = element.args().caller() as FormRun;

        if (formHasMethod(bankReconWorksheetFormRun, identifierStr(getBankAccountId)))
        {
            bankAccountId = bankReconWorksheetFormRun.getBankAccountId();
        }

        this.initFiltersFromCache();
        this.initMultiSelectTransCodeControl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
     public dataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    public identifierName lastValueDesignName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    public identifierName lastValueElementName()
    {
        return this.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    public UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    public userId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conpeek(packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFiltersFromCache</Name>
				<Source><![CDATA[
    private void initFiltersFromCache()
    {
        xSysLastValue::getLast(this);

        StatementOpenBookingDateFromFilter.dateValue(dateFrom);
        StatementOpenBookingDateToFilter.dateValue(dateTo);
        StatementOpenDebitAmountFromFilter.realValue(debitAmountFrom);
        StatementOpenDebitAmountToFilter.realValue(debitAmountTo);
        StatementOpenCreditAmountFromFilter.realValue(creditAmountFrom);
        StatementOpenCreditAmountToFilter.realValue(creditAmountTo);
        StatementOpenTradingPartyFilter.text(tradingParty);
        StatementOpenReferenceNumberFilter.text(referenceNumber);
        StatementOpenIdentificationFilter.text(identification);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMultiSelectTransCodeControl</Name>
				<Source><![CDATA[
    private void initMultiSelectTransCodeControl()
    {
        Query query = new Query();
        QueryBuildDataSource qbdsMapping = query.addDataSource(tableNum(BankStatementTransactionTypeMapping));
        QueryBuildDataSource qbdsHeader = qbdsMapping.addDataSource(tableNum(BankStatementTransactionTypeHeader));

        qbdsHeader.relations(true);
        qbdsHeader.addRange(fieldNum(BankStatementTransactionTypeHeader, BankAccountTable)).value(queryValue(bankAccountId));
        qbdsHeader.addSelectionField(fieldNum(BankStatementTransactionTypeHeader, BankAccountTable));
        qbdsHeader.fields().clearFieldList();

        qbdsMapping.addSelectionField(fieldNum(BankStatementTransactionTypeMapping, StatementTransactionCode));
        qbdsMapping.addSelectionField(fieldNum(BankStatementTransactionTypeMapping, BankTransType));

        QueryBuildDataSource qbdsTransType = qbdsMapping.addDataSource(tableNum(BankTransType));
        qbdsTransType.relations(true);
        qbdsTransType.joinMode(JoinMode::InnerJoin);
        qbdsTransType.fetchMode(QueryFetchMode::One2One);
        qbdsTransType.addLink(fieldNum(BankStatementTransactionTypeMapping, BankTransType), fieldNum(BankTransType, BankTransType));
        qbdsTransType.addSelectionField(fieldNum(BankTransType, Name));

        multiSelectTransCodeControl = SysLookupMultiSelectCtrl::constructWithQuery(element, StatementOpenTransCodeFilter, query);
        multiSelectTransCodeControl.set([transCodeIds, transCodes]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearSelections</Name>
				<Source><![CDATA[
    private void clearSelections()
    {
        transCodes = conNull();
        transCodeIds = conNull();
        multiSelectTransCodeControl.set([transCodeIds, transCodes]);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>StatementOpenBookingDateFromFilter</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                BankReconciliationWorksheetFilterHelper::validateDateRange(this.dateValue(), StatementOpenBookingDateToFilter.dateValue());
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>StatementOpenBookingDateToFilter</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            if (ret)
            {
                BankReconciliationWorksheetFilterHelper::validateDateRange(StatementOpenBookingDateFromFilter.dateValue(), this.dateValue());
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>StatementOpenDebitAmountFromFilter</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            if (ret)
            {
                BankReconciliationWorksheetFilterHelper::validateAmountPositive(this.realValue());
                BankReconciliationWorksheetFilterHelper::validateAmountRange(this.realValue(), StatementOpenDebitAmountToFilter.realValue());
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>StatementOpenDebitAmountToFilter</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            if (ret)
            {
                BankReconciliationWorksheetFilterHelper::validateAmountPositive(this.realValue());
                BankReconciliationWorksheetFilterHelper::validateAmountRange(StatementOpenDebitAmountFromFilter.realValue(), this.realValue());
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>StatementOpenCreditAmountFromFilter</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            if (ret)
            {
                BankReconciliationWorksheetFilterHelper::validateAmountPositive(this.realValue());
                BankReconciliationWorksheetFilterHelper::validateAmountRange(this.realValue(), StatementOpenCreditAmountToFilter.realValue());
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>StatementOpenCreditAmountToFilter</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            if (ret)
            {
                BankReconciliationWorksheetFilterHelper::validateAmountPositive(this.realValue());
                BankReconciliationWorksheetFilterHelper::validateAmountRange(StatementOpenCreditAmountFromFilter.realValue(), this.realValue());
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>StatementOpenTransCodeFilter</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            if (ret)
            {
                BankStatementTransactionTypeMapping mapping;
                container transCodeInput = str2con(this.text(), ';', false);
                container validSelections;

                for (int i = 1; i <= conLen(transCodeInput); i++)
                {
                    str transCode = strLRTrim(conPeek(transCodeInput, i));
                    mapping = BankStatementTransactionTypeMapping::findByAccountAndTransCode(bankAccountId, transCode);
                    if (mapping.RecId)
                    {
                        validSelections += mapping.RecId;
                    }
                }

                multiSelectTransCodeControl.set([validSelections, transCodeInput]);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ResetButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            StatementOpenBookingDateFromFilter.dateValue(dateNull());
            StatementOpenBookingDateToFilter.dateValue(dateNull());
            StatementOpenDebitAmountFromFilter.realValue(0);
            StatementOpenDebitAmountToFilter.realValue(0);
            StatementOpenCreditAmountFromFilter.realValue(0);
            StatementOpenCreditAmountToFilter.realValue(0);
            StatementOpenTransCodeFilter.text(null);
            StatementOpenTradingPartyFilter.text(null);
            StatementOpenReferenceNumberFilter.text(null);
            StatementOpenIdentificationFilter.text(null);

            element.clearSelections();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ApplyButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            dateFrom = StatementOpenBookingDateFromFilter.dateValue();
            dateTo = StatementOpenBookingDateToFilter.dateValue();
            debitAmountFrom = StatementOpenDebitAmountFromFilter.realValue();
            debitAmountTo = StatementOpenDebitAmountToFilter.realValue();
            creditAmountFrom = StatementOpenCreditAmountFromFilter.realValue();
            creditAmountTo = StatementOpenCreditAmountToFilter.realValue();
            transCodeIds = multiSelectTransCodeControl.get();
            transCodes = str2con(StatementOpenTransCodeFilter.text(), ';', false);
            tradingParty = StatementOpenTradingPartyFilter.text();
            referenceNumber = StatementOpenReferenceNumberFilter.text();
            identification = StatementOpenIdentificationFilter.text();

            xSysLastValue::saveLast(element);

            str summary = BankReconciliationWorksheetFilterHelper::generateStatementFilterSummaryInfo(
                dateFrom,
                dateTo,
                debitAmountFrom,
                debitAmountTo,
                creditAmountFrom,
                creditAmountTo,
                con2Str(transCodes),
                tradingParty,
                referenceNumber,
                identification);
            
            if (formHasMethod(bankReconWorksheetFormRun, identifierStr(applyStatementOpenFilters)))
            {
                bankReconWorksheetFormRun.applyStatementOpenFilters(
                    dateFrom,
                    dateTo,
                    debitAmountFrom,
                    debitAmountTo,
                    creditAmountFrom,
                    creditAmountTo,
                    transCodes,
                    tradingParty,
                    referenceNumber,
                    identification,
                    summary);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<ArrangeMethod xmlns="">Auto</ArrangeMethod>
		<Caption xmlns="">@SYS190436</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<Style xmlns="">DropDialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>StatementOpenFilterGroup</Name>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>StatementOpenBookingDateFilterGroup</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>StatementOpenBookingDateFromFilter</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Date</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@CashManagement:BankReconWorksheetFilterStatementBookingDateFromLabel</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>StatementOpenBookingDateToFilter</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Date</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS53942</Label>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>StatementOpenDebitAmountFilterGroup</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>StatementOpenDebitAmountFromFilter</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@CashManagement:BankReconWorksheetFilterDebitAmountFromLabel</Label>
								<ShowZero>No</ShowZero>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>StatementOpenDebitAmountToFilter</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS53942</Label>
								<ShowZero>No</ShowZero>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>StatementOpenCreditAmountFilterGroup</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>StatementOpenCreditAmountFromFilter</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@CashManagement:BankReconWorksheetFilterCreditAmountFromLabel</Label>
								<ShowZero>No</ShowZero>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>StatementOpenCreditAmountToFilter</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS53942</Label>
								<ShowZero>No</ShowZero>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>StatementOpenTransCodeFilter</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@GLS221722</Label>
						<ReplaceOnLookup>No</ReplaceOnLookup>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>StatementOpenTradingPartyFilter</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@GLS221306</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>StatementOpenReferenceNumberFilter</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS54020</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>StatementOpenIdentificationFilter</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@GLS221245</Label>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>StatementOpenButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>ResetButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Text>@SYS3073</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>ApplyButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<Text>@SYS24973</Text>
					</AxFormControl>
				</Controls>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>