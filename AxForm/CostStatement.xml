<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>CostStatement</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class CostStatement extends FormRun
{
    CostObjectKPIViewModel          kpiCostObjectViewModel;
    CostInventoryStatementViewModel costInventoryStatementViewModel;
    CostStatementFlowsViewModel     costStatementFlowsViewModel;
    CostStatementModel              costStatementModel;

}
]]></Source>
			</Method>
			<Method>
				<Name>isModelEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the loaded model is empty.
    /// </summary>
    /// <returns>
    /// Returns true, if the model is empty. Otherwise, the method returns false.
    /// </returns>
    private boolean isModelEmpty()
    {
        switch (this.args().menuItemName())
        {
            case menuItemDisplayStr(CostInventoryStatement):
                var itemId = element.resolveItemId(element.args());
                if (!itemId)
                {
                    return true;
                }
                break;

            case menuItemDisplayStr(CostWIPStatement):
                var prodId = element.resolveProdId(element.args());
                if (!prodId)
                {
                    return true;
                }
                break;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForm</Name>
				<Source><![CDATA[
    private void initializeForm()
    {
        if (element.isModelEmpty())
        {
            element.close();
        }
        else
        {
            CostICostSelectPeriodStorage periodStorage = element.initializePeriodStorage(element.args());

            CostSelectPeriodFormViewModel::construct(periodStorage,
                                                         DateCode,
                                                         FromDate,
                                                         ToDate);

            element.initCostStateModel();

            element.removeDatePeriodControlsHandlers();

            element.initViewControls();

            element.initViewModels();

            element.addDatePeriodControlsHandlers();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeDatePeriodControlsHandlers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes event handlers from <c>FormControl</c> controls.
    /// </summary>
    /// <remarks>
    /// This method is used to avoid memory leaks.
    /// </remarks>
    private void removeDatePeriodControlsHandlers()
    {
        if (costStatementFlowsViewModel)
        {
            DateCode.OnModified -= eventhandler(costStatementFlowsViewModel.notifyChartsWithNewPeriod);
            FromDate.OnModified -= eventhandler(costStatementFlowsViewModel.notifyChartsWithNewPeriod);
            ToDate.OnModified   -= eventhandler(costStatementFlowsViewModel.notifyChartsWithNewPeriod);
        }
        if (costInventoryStatementViewModel)
        {
            DateCode.OnModified -= eventhandler(costInventoryStatementViewModel.updateOnFormControlEvent);
            FromDate.OnModified -= eventhandler(costInventoryStatementViewModel.updateOnFormControlEvent);
            ToDate.OnModified   -= eventhandler(costInventoryStatementViewModel.updateOnFormControlEvent);
        }
        if (kpiCostObjectViewModel)
        {
            DateCode.OnModified -= eventhandler(kpiCostObjectViewModel.updateOnFormControlEvent);
            FromDate.OnModified -= eventhandler(kpiCostObjectViewModel.updateOnFormControlEvent);
            ToDate.OnModified   -= eventhandler(kpiCostObjectViewModel.updateOnFormControlEvent);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDatePeriodControlsHandlers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds event handlers to <c>FormControl</c> controls.
    /// </summary>
    private void addDatePeriodControlsHandlers()
    {
        DateCode.OnModified += eventhandler(costInventoryStatementViewModel.updateOnFormControlEvent);
        FromDate.OnModified += eventhandler(costInventoryStatementViewModel.updateOnFormControlEvent);
        ToDate.OnModified   += eventhandler(costInventoryStatementViewModel.updateOnFormControlEvent);

        DateCode.OnModified += eventhandler(costStatementFlowsViewModel.notifyChartsWithNewPeriod);
        FromDate.OnModified += eventhandler(costStatementFlowsViewModel.notifyChartsWithNewPeriod);
        ToDate.OnModified   += eventhandler(costStatementFlowsViewModel.notifyChartsWithNewPeriod);
        costStatementFlowsViewModel.update();

        if (kpiCostObjectViewModel)
        {
            DateCode.OnModified += eventhandler(kpiCostObjectViewModel.updateOnFormControlEvent);
            FromDate.OnModified += eventhandler(kpiCostObjectViewModel.updateOnFormControlEvent);
            ToDate.OnModified   += eventhandler(kpiCostObjectViewModel.updateOnFormControlEvent);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCostStateModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>CostStateModel</c> model according to selected menu item.
    /// </summary>
    private void initCostStateModel()
    {
        switch (element.args().menuItemName())
        {
            case menuItemDisplayStr(CostInventoryStatement),
                 menuItemDisplayStr(CostInventoryStatementWorkspace):
                var itemId = this.resolveItemId(element.args());
                var inventDim = this.resolveInventDim(element.args());
                var inventoryStatementModel = CostInventoryStatementModel::construct();
                inventoryStatementModel.parmItemId(itemId);
                inventoryStatementModel.parmInventDim(inventDim);

                costStatementModel = inventoryStatementModel;
                if (element.args().menuItemName() == menuItemDisplayStr(CostInventoryStatement))
                {
                    this.initializeKPIControls(inventoryStatementModel);
                }

                break;

            case menuItemDisplayStr(CostWIPStatement):
                var prodId = this.resolveProdId(element.args());
                var WIPStatementModel = CostWIPStatementModel::construct();
                WIPStatementModel.parmProdId(prodId);
                costStatementModel = WIPStatementModel;

                break;

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initViewControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes view controls according to selected menu item.
    /// </summary>
    private void initViewControls()
    {
        switch (element.args().menuItemName())
        {
            case menuItemDisplayStr(CostInventoryStatementWorkspace):
                this.showCostObjectButton();
                this.disableDateControls();
            case menuItemDisplayStr(CostInventoryStatement):
                // hide WIP chart
                CostWIPFlowChart.visible(false);
                var inventoryChart = CostInventoryFlowChart.getPartFormRun() as CostISetInventoryCostObject;
                var itemId = this.resolveItemId(element.args());
                var inventDim = this.resolveInventDim(element.args());
                inventoryChart.setCostObject(itemId, inventDim);

                break;

            case menuItemDisplayStr(CostWIPStatement):
                CostStatementLine_Quantity.visible(false);

                // hide inventory chart
                CostInventoryFlowChart.visible(false);

                var wipChart = CostWIPFlowChart.getPartFormRun() as CostISetProductionCostObject;
                var prodId = this.resolveProdId(element.args());
                wipChart.setCostObject(prodId);

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initViewModels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes ViewModel objects.
    /// </summary>
    private void initViewModels()
    {
        this.removeDatePeriodControlsHandlers();

        costInventoryStatementViewModel = CostInventoryStatementViewModel::construct(FromDate,
                                                                                     ToDate,
                                                                                     costStatementLine_DS,
                                                                                     costStatementModel);
        costInventoryStatementViewModel.update();

        costStatementFlowsViewModel = CostStatementFlowsViewModel::newFromParameters(FromDate,
                                                                                     ToDate,
                                                                                     CostInventoryFlowChart,
                                                                                     CostWIPFlowChart);
        costStatementFlowsViewModel.update();

        if (kpiCostObjectViewModel)
        {
            kpiCostObjectViewModel.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCostObjectButton</Name>
				<Source><![CDATA[
    private void showCostObjectButton()
    {
        CostObjectButton.visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableDateControls</Name>
				<Source><![CDATA[
    private void disableDateControls()
    {
        DateCode.enabled(false);
        FromDate.enabled(false);
        ToDate.enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePeriodStorage</Name>
				<Source><![CDATA[
    private CostICostSelectPeriodStorage initializePeriodStorage(Args _args)
    {
        CostICostSelectPeriodStorage    periodStorage;
        CostSelectPeriodState           periodState;

        if (_args
            && _args.menuItemName() == menuItemDisplayStr(CostInventoryStatementWorkspace)
            && _args.parmObject())
        {
            periodState = element.args().parmObject() as CostSelectPeriodState;
        }

        if (periodState)
        {
            periodStorage = CostSelectPeriodStorage::newFromPeriodState(periodState);
        }
        else
        {
            periodStorage = CostSelectPeriodStorageForm::newFromFormName(this.name());
        }

        return periodStorage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeKPIControls</Name>
				<Source><![CDATA[
    private void initializeKPIControls(CostInventoryStatementModel _costInventoryStatementModel)
    {
        InventoryAccuracyCard.visible(true);
        InventoryTurnCard.visible(true);
        InventoryDaysCard.visible(true);

        var inventoryAccuracyCardFormRun = InventoryAccuracyCard.getPartFormRun() as CostIKPI;
        var inventoryTurnCardFormRun = InventoryTurnCard.getPartFormRun() as CostIKPI;
        var inventoryDaysCardFormRun = InventoryDaysCard.getPartFormRun() as CostIKPI;

        kpiCostObjectViewModel = CostObjectKPIViewModel::construct(inventoryTurnCardFormRun,
                                                                   inventoryAccuracyCardFormRun,
                                                                   inventoryDaysCardFormRun,
                                                                   FromDate,
                                                                   ToDate,
                                                                   _costInventoryStatementModel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the <c>InventDim</c> buffer.
    /// </summary>
    /// <param name = "_args">
    /// The instance of the <c>Args</c> class used to resolve the <c>InventDim</c>.
    /// </param>
    /// <returns>
    /// The resolved <c>InventDim</c> buffer.
    /// </returns>
    private InventDim resolveInventDim(Args _args)
    {
        InventDim   inventDim;

        if (_args.record()
            && FormDataUtil::getFormDataSource(_args.record()))
        {
            var inventDimDS = InventDim::callerInventDimDatasource(_args);

            if (inventDimDS)
            {
                inventDim = inventDimDS.cursor() as InventDim;
            }
        }
        else if (_args.parm())
        {
            inventDim = InventDim::find(_args.parm());
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the <c>ItemId</c>.
    /// </summary>
    /// <param name = "_args">
    /// The instance of the <c>Args</c> class used to resolve the <c>ItemId</c>.
    /// </param>
    /// <returns>
    /// The resolved <c>ItemId</c>
    /// </returns>
    private ItemId resolveItemId(Args _args)
    {
        ItemId  itemId;

        var record = _args.record();

        switch (record.TableId)
        {
            case tableNum(InventTable):
                var inventTable = record as InventTable;
                itemId = inventTable.ItemId;
                break;

            case tableNum(InventSum):
                var inventSum = record as InventSum;
                itemId = inventSum.ItemId;
                break;
        }

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveProdId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the production ID.
    /// </summary>
    /// <param name = "_args">
    /// The instance of the <c>Args</c> class used to resolve the production ID.
    /// </param>
    /// <returns>
    /// The resolved production ID.
    /// </returns>
    private ProdId resolveProdId(Args _args)
    {
        ProdId  prodId;

        var record = _args.record();

        switch (record.TableId)
        {
            case tableNum(Prodtable):
                var prodTable = record as Prodtable;
                prodId = prodTable.ProdId;
                break;
        }

        return prodId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form.
    /// </summary>
    public void init()
    {
        super();

        element.initializeForm();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>CostStatementLine</Name>
				<Methods>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        public void linkActive()
        {
            super();
            element.initializeForm();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>CostObjectButton</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            var args = new Args();
            var menuFunction = new MenuFunction(menuitemDisplayStr(InventCostOnHandItem), MenuItemType::Display);
            args = new Args(menuFunction.object());
            args.caller(element);
            args.record(element.args().record());
            args.parm(element.args().parm());

            menuFunction.run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>CostStatementLine</Name>
			<Table>CostStatementLine</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Amount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Level</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Quantity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<DialogSize xmlns="">Medium</DialogSize>
		<Pattern xmlns="">Custom</Pattern>
		<Style xmlns="">Dialog</Style>
		<UseCaptionFromMenuItem xmlns="">Yes</UseCaptionFromMenuItem>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>CostObjectButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>CostObjectButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>InventCostOnHandItem</MenuItemName>
								<Text>@CostManagement:Button_CostStatement_CostObjectButton</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<Style>Strip</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogHeader</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DateCode</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>DateCode</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>FromDate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Date</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>FromDate</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>ToDate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Date</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>ToDate</ExtendedDataType>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
				<Style>DialogContent</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Content</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>Grid</Name>
						<AllowEdit>No</AllowEdit>
						<HeightMode>SizeToContent</HeightMode>
						<Type>Grid</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CostStatementLine_Name</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displayName</DataMethod>
								<DataSource>CostStatementLine</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>CostStatementLine_Quantity</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displayQuantity</DataMethod>
								<DataSource>CostStatementLine</DataSource>
								<ShowZero>Yes</ShowZero>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>CostStatementLine_Amount</Name>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displayAmount</DataMethod>
								<DataSource>CostStatementLine</DataSource>
								<ShowZero>Yes</ShowZero>
							</AxFormControl>
						</Controls>
						<MultiSelect>No</MultiSelect>
						<Style>Tabular</Style>
						<VisibleRows>11</VisibleRows>
						<VisibleRowsMode>Fixed</VisibleRowsMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>FlowCharts</Name>
						<Type>Group</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormContainerControl">
								<Name>CostInventoryFlowChart</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Container</Type>
								<FormControlExtension>
									<Name>FormPartControl</Name>
									<ExtensionComponents>
										<AxFormControlExtensionComponent xmlns=""
											i:type="AxFormControlExtensionComponentComposite">
											<Name>dataLinks</Name>
											<ExtensionComponents />
										</AxFormControlExtensionComponent>
									</ExtensionComponents>
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>targetName</Name>
											<Type>String</Type>
											<Value>CostInventoryFlowChart</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>autoRefreshInterval</Name>
											<Type>Int32</Type>
											<Value>0</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmRunMode</Name>
											<Type>Enum</Type>
											<TypeName>FormPartControlRunMode</TypeName>
											<Value>Local</Value>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<Controls />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormContainerControl">
								<Name>CostWIPFlowChart</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Container</Type>
								<FormControlExtension>
									<Name>FormPartControl</Name>
									<ExtensionComponents>
										<AxFormControlExtensionComponent xmlns=""
											i:type="AxFormControlExtensionComponentComposite">
											<Name>dataLinks</Name>
											<ExtensionComponents />
										</AxFormControlExtensionComponent>
									</ExtensionComponents>
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>targetName</Name>
											<Type>String</Type>
											<Value>CostWIPFlowChart</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>autoRefreshInterval</Name>
											<Type>Int32</Type>
											<Value>0</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmRunMode</Name>
											<Type>Enum</Type>
											<TypeName>FormPartControlRunMode</TypeName>
											<Value>Local</Value>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<Controls />
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Auto</ArrangeMethod>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>KPIs</Name>
						<Type>Group</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormContainerControl">
								<Name>InventoryTurnCard</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Container</Type>
								<Visible>No</Visible>
								<FormControlExtension>
									<Name>FormPartControl</Name>
									<ExtensionComponents>
										<AxFormControlExtensionComponent xmlns=""
											i:type="AxFormControlExtensionComponentComposite">
											<Name>dataLinks</Name>
											<ExtensionComponents />
										</AxFormControlExtensionComponent>
									</ExtensionComponents>
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>targetName</Name>
											<Type>String</Type>
											<Value>CostInventoryTurnCard</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmRunMode</Name>
											<Type>Enum</Type>
											<TypeName>FormPartControlRunMode</TypeName>
											<Value>Local</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>autoRefreshInterval</Name>
											<Type>Int32</Type>
											<Value>0</Value>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<Controls />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormContainerControl">
								<Name>InventoryAccuracyCard</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Container</Type>
								<Visible>No</Visible>
								<FormControlExtension>
									<Name>FormPartControl</Name>
									<ExtensionComponents>
										<AxFormControlExtensionComponent xmlns=""
											i:type="AxFormControlExtensionComponentComposite">
											<Name>dataLinks</Name>
											<ExtensionComponents />
										</AxFormControlExtensionComponent>
									</ExtensionComponents>
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>targetName</Name>
											<Type>String</Type>
											<Value>CostInventoryAccuracyCard</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmRunMode</Name>
											<Type>Enum</Type>
											<TypeName>FormPartControlRunMode</TypeName>
											<Value>Local</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>autoRefreshInterval</Name>
											<Type>Int32</Type>
											<Value>0</Value>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<Controls />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormContainerControl">
								<Name>InventoryDaysCard</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Container</Type>
								<Visible>No</Visible>
								<FormControlExtension>
									<Name>FormPartControl</Name>
									<ExtensionComponents>
										<AxFormControlExtensionComponent xmlns=""
											i:type="AxFormControlExtensionComponentComposite">
											<Name>dataLinks</Name>
											<ExtensionComponents />
										</AxFormControlExtensionComponent>
									</ExtensionComponents>
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>targetName</Name>
											<Type>String</Type>
											<Value>CostObjectInventoryDaysCard</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>autoRefreshInterval</Name>
											<Type>Int32</Type>
											<Value>0</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmRunMode</Name>
											<Type>Enum</Type>
											<TypeName>FormPartControlRunMode</TypeName>
											<Value>Local</Value>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<Controls />
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalWrap</ArrangeMethod>
						<Columns>2</Columns>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>CloseButtonGroupControl</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CloseButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
						<Text>@SYS15212</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>
