<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SourceDocumentsPendingAccountingProcessing</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class SourceDocumentsPendingAccountingProcessing extends FormRun
{
    SourceDocumentTmpTypeInformation sourceDocumentTmpTypeInformation;

    private int64 taskCount = 1;
    
    private int64 numberOfDocumentsToProcess = 0;

    const int NumberOfRetriesOnFailure = 2;
    const NoYes BatchJobEnded = NoYes::Yes;
    const NoYes BatchJobError = NoYes::Yes;
    const NoYes BatchJobCancelled = NoYes::Yes;
    const NoYes PopUpMessageAlert = NoYes::Yes;
    const NoYes EmailAlert = NoYes::No;



}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        sourceDocumentTmpTypeInformation = SourceDocumentType::getSourceDocumentTypeInformation(this.name());
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>SourceDocumentsPendingAcountingView</Name>
				<Methods>
					<Method>
						<Name>documentId</Name>
						<Source><![CDATA[
        display DocumentNumLarge documentId(SourceDocumentsPendingAcountingView _sourceDocumentsPendingAcountingView)
        {
            SourceDocument  sourceDocument;
            Num             sourceDocumentId;

            DataAreaId documentPostingCompany = _sourceDocumentsPendingAcountingView.DocumentDataAreaId;

            if (strRTrim(strLTrim(documentPostingCompany)) != '')
            {
                changecompany(documentPostingCompany)
                {
                    sourceDocument = SourceDocument::newFromSourceDocumentHeader(SourceDocumentHeader::find(_sourceDocumentsPendingAcountingView.SourceDocumentHeader));

                    if (sourceDocument)
                    {
                        sourceDocumentId = sourceDocument.parmDocumentNumber();
                    }
                }
            }

            return sourceDocumentId;
        }

]]></Source>
					</Method>
					<Method>
						<Name>sourceDocumentType</Name>
						<Source><![CDATA[
        display enumName sourceDocumentType(SourceDocumentsPendingAcountingView _sourceDocumentsPendingAcountingView)
        {
            enumName                documentTypeName;
            SourceDocumentClassId   sourceDocumentClassId;
            SourceDocument          sourceDocument;
            AccountingEvent         accountingEvent;
            Object                  object;

            accountingEvent = AccountingEvent::find(_sourceDocumentsPendingAcountingView.AccountingEvent);
            sourceDocument = SourceDocument::newFromSourceDocumentHeader(SourceDocumentHeader::find(accountingEvent.SourceDocumentHeader));
            object = sourceDocument as Object;
            sourceDocumentClassId = classIdGet(object);

            select sourceDocumentTmpTypeInformation
                where sourceDocumentTmpTypeInformation.ClassId == sourceDocumentClassId;

            documentTypeName = sourceDocumentTmpTypeInformation.EnumTranslatedName;

            return documentTypeName;
        }

]]></Source>
					</Method>
					<Method>
						<Name>buildErrorLogMessageDisplay</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void buildErrorLogMessageDisplay(boolean useMultiSelect)
        {
            SourceDocumentsPendingAcountingView documentsPending;
            MultiSelectionHelper helper;

            infolog.clear();

            if (useMultiSelect)
            {
                helper = MultiSelectionHelper::construct();
                helper.parmDatasource(sourceDocumentsPendingAcountingView_ds);
                documentsPending = helper.getFirst();
            }
            else
            {
                documentsPending = sourceDocumentsPendingAcountingView_ds.cursor();
            }

            setPrefix("@SourceDocumentAccountingFramework:JournalizationErrorPrefix");

            while (documentsPending.RecId != 0)
            {
                if (documentsPending.DocumentCurrentState == AccountingEventState::Error)
                {

                    SourceDocument sourceDocument;
                    SubledgerJournalErrorLog subledgerJournalErrorLog;
                    SourceDocumentLineSubledgerJourErrorLog sourceDocumentLineSubledgerJourErrorLog;

                    changecompany(documentsPending.DocumentDataAreaId)
                    {
                        sourceDocument = SourceDocument::newFromSourceDocumentHeader(SourceDocumentHeader::find(documentsPending.SourceDocumentHeader));
                
                        setPrefix(strFmt("@SourceDocumentAccountingFramework:DocumentNumber", sourceDocument.parmDocumentNumber()));

                        while select LabelId, Parameters, SourceDocumentHeader, AccountingEvent from subledgerJournalErrorLog
                            where subledgerJournalErrorLog.SourceDocumentHeader == documentsPending.SourceDocumentHeader &&
                                subledgerJournalErrorLog.AccountingEvent == documentsPending.AccountingEvent
                        {
                            error(SubledgerJournalErrorLog::displayMessage(subledgerJournalErrorLog.LabelId, subledgerJournalErrorLog.Parameters));
                        }
                    }
                }

                if (useMultiSelect)
                {
                    documentsPending = helper.getNext();
                }
                else
                {
                    break;
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayErrorLog</Name>
						<Source><![CDATA[
        display str displayErrorLog(SourceDocumentsPendingAcountingView _sourceDocumentsPendingAcountingView)
        {
            enumName                documentTypeName;
            SourceDocumentClassId   sourceDocumentClassId;
            SourceDocument          sourceDocument;
            AccountingEvent         accountingEvent;
            Object                  object;

            accountingEvent = AccountingEvent::find(_sourceDocumentsPendingAcountingView.AccountingEvent);
            
            if (_sourceDocumentsPendingAcountingView.DocumentCurrentState == AccountingEventState::Error)
            {
                return "@SYS15457";
            }

            return '';
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>ProcessDocuments</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Process documents that is marked for processing accounting
        /// </summary>
        public void clicked()
        {
            super();

            guid executionId = newGuid();

            SourceDocumentsPendingAcountingView documentsPending;

            MultiSelectionHelper helper = MultiSelectionHelper::construct();
            helper.parmDatasource(sourceDocumentsPendingAcountingView_ds);
            documentsPending = helper.getFirst();

            numberOfDocumentsToProcess = 0;

            SourceDocumentHeaderRecIdTmp sourceDocumentHeaderRecIdTmp;
            RecordInsertList sourceDocumentHeaderRecIdTmpList = new RecordInsertList(
                tableNum(SourceDocumentHeaderRecIdTmp),
                true,
                true,
                true,
                true,
                true,
                sourceDocumentHeaderRecIdTmp);
                    
            while (documentsPending.RecId != 0)
            {
                if (documentsPending.AccountingEventType == AccountingEventType::PendingJournalized)
                {
                    sourceDocumentHeaderRecIdTmp.SourceDocumentHeaderRecId = documentsPending.SourceDocumentHeader;
                    sourceDocumentHeaderRecIdTmpList.add(sourceDocumentHeaderRecIdTmp);
                    numberOfDocumentsToProcess = numberOfDocumentsToProcess + 1;
                    sourceDocumentHeaderRecIdTmp.clear();
                }

                documentsPending = helper.getNext();
            }

            if (numberOfDocumentsToProcess > 0)
            {
                sourceDocumentHeaderRecIdTmpList.insertDatabase();
                SourceDocumentAccountingFrameworkContract contract = SourceDocumentAccountingFrameworkContract::construct();
                contract.parmAccountingEventRecId(documentsPending.AccountingEvent);
                contract.parmDocumentDataAreaId(documentsPending.DocumentDataAreaId);
                contract.parmSourceDocumentAccountingStatus(SourceDocumentAccountingStatus::Completed);
                contract.parmSourceDocumentHeaderRecId(documentsPending.SourceDocumentHeader);
                contract.parmExecutionId(executionId);
                contract.parmSourceDocumentHeaderRecIdTmp(sourceDocumentHeaderRecIdTmp);
                SourceDocumentAccountingProcessorTaskBuilder::createRecordForProcessing(contract);
            }

            this.scheduleTasks(executionId);

            info(strFmt("@SourceDocumentAccountingFramework:DocumentsSubmittedForProcessing", "@SourceDocumentAccountingFramework:Journalization"));

            sourceDocumentsPendingAcountingView_ds.research();
            sourceDocumentsPendingAcountingView_ds.refresh();
        }

]]></Source>
					</Method>
					<Method>
						<Name>scheduleTasks</Name>
						<Source><![CDATA[
        private void scheduleTasks(ProcessExecutionId _executionId)
        {
            taskCount = SourceDocumentParameters::determineMaxBatchSession();

            if (taskCount > numberOfDocumentsToProcess)
            {
                taskCount = numberOfDocumentsToProcess;
            }

            BatchHeader header = BatchHeader::construct();

            // Set the recurrence data to execute every minute and other alert parameters for batch job
            header.parmAlerts(BatchJobEnded, BatchJobError, BatchJobCancelled, PopUpMessageAlert, EmailAlert);
            header.addUserAlerts(curUserId(),BatchJobEnded, BatchJobError, BatchJobCancelled, PopUpMessageAlert, EmailAlert);
            header.parmStartDateTime(DateTimeUtil::getSystemDateTime());
            header.parmCritical(NoYes::Yes);
            header.parmLogLevel(BatchLogLevel::Error);

            SysOperationServiceController transferController = new SysOperationServiceController();
            transferController.parmClassName(classStr(SubledgerJournalTransferOperation));
            transferController.parmMethodName(methodStr(SubledgerJournalTransferOperation, performTransferOperation));
            transferController.parmExecutionMode(SysOperationExecutionMode::Synchronous);
            header.addTask(transferController);

            if (numberOfDocumentsToProcess != 0)
            {
                for (int counter = 1; counter <= taskCount; counter++)
                {
                    SysOperationServiceController sourceDocumentProcessorController = new SysOperationServiceController();
                    sourceDocumentProcessorController.parmClassName(literalStr(SourceDocumentAccountingStateProcessor));
                    sourceDocumentProcessorController.parmMethodName(literalStr(ProcessSourceDocumentTask));
                    sourceDocumentProcessorController.parmExecutionMode(SysOperationExecutionMode::Synchronous);

                    SourceDocumentAccountingProcessorContract contract = sourceDocumentProcessorController.getDataContractObject() as SourceDocumentAccountingProcessorContract;
                    contract.parmProcessExecutionId(_executionId);
                    contract.parmSourceLinkRecid(0);

                    header.addTask(sourceDocumentProcessorController);
                    header.addDependency(transferController, sourceDocumentProcessorController, BatchDependencyStatus::FinishedOrError);
                }
            }
            else
            {
                //We need at least one thread so that we can execute transfer process
                taskCount = 1;
            }

            header.parmCaption(strFmt("@Subledger:DynamicsAccountingFrameworkProcessorBatchTaskCaption", "@SourceDocumentAccountingFramework:Journalization", int642Str(taskCount)));
            header.save();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EditDistributions</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Edit the distributions for a document that has not been journalized yet
        /// </summary>
        public void clicked()
        {
            super();

            SourceDocumentsPendingAcountingView documentsPending;

            documentsPending = sourceDocumentsPendingAcountingView_ds.cursor();

            if (documentsPending.DocumentCurrentState != AccountingEventState::Complete)
            {
                CustInvoiceTable custInvoiceTable;

                select firstonly custInvoiceTable where custInvoiceTable.SourceDocumentHeader == documentsPending.SourceDocumentHeader;

                Args args = new Args();
                args.record(custInvoiceTable);
                args.menuItemName(menuItemDisplayStr(AccountingDistributionsDocumentView));
                args.menuItemType(MenuItemType::Display);
        
                AccDistFormDisplay::main(args);
            }

        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ResetAllDistributions</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Reset the distributions for all the source documents that are selected
        /// </summary>
        public void clicked()
        {
            super();

            if (Box::yesNo("@Subledger:Subledger_MessageNotification_ResetConfirmation", DialogButton::No) == DialogButton::No)
            {
                return;
            }

            guid executionId = newGuid();

            SourceDocumentsPendingAcountingView documentsPending;

            MultiSelectionHelper helper = MultiSelectionHelper::construct();
            helper.parmDatasource(sourceDocumentsPendingAcountingView_ds);
            documentsPending = helper.getFirst();

            numberOfDocumentsToProcess = 0;

            SourceDocumentHeaderRecIdTmp sourceDocumentHeaderRecIdTmp;
            RecordInsertList sourceDocumentHeaderRecIdTmpList = new RecordInsertList(
                tableNum(SourceDocumentHeaderRecIdTmp),
                true,
                true,
                true,
                true,
                true,
                sourceDocumentHeaderRecIdTmp);

            while (documentsPending.RecId != 0)
            {
                if (documentsPending.AccountingEventType == AccountingEventType::PendingJournalized)
                {
                    sourceDocumentHeaderRecIdTmp.SourceDocumentHeaderRecId = documentsPending.SourceDocumentHeader;
                    sourceDocumentHeaderRecIdTmpList.add(sourceDocumentHeaderRecIdTmp);
                    numberOfDocumentsToProcess = numberOfDocumentsToProcess + 1;
                    sourceDocumentHeaderRecIdTmp.clear();
                }

                documentsPending = helper.getNext();
            }

            if (numberOfDocumentsToProcess > 0)
            {
                sourceDocumentHeaderRecIdTmpList.insertDatabase();
                SourceDocumentAccountingFrameworkContract contract = SourceDocumentAccountingFrameworkContract::construct();
                contract.parmAccountingEventRecId(documentsPending.AccountingEvent);
                contract.parmDocumentDataAreaId(documentsPending.DocumentDataAreaId);
                contract.parmSourceDocumentAccountingStatus(SourceDocumentAccountingStatus::InProcess);
                contract.parmSourceDocumentHeaderRecId(documentsPending.SourceDocumentHeader);
                contract.parmExecutionId(executionId);
                contract.parmSourceDocumentHeaderRecIdTmp(sourceDocumentHeaderRecIdTmp);
                SourceDocumentAccountingProcessorTaskBuilder::createRecordForProcessing(contract);

                taskCount = SourceDocumentParameters::determineMaxBatchSession();

                if (taskCount > numberOfDocumentsToProcess)
                {
                    taskCount = numberOfDocumentsToProcess;
                }

                BatchHeader header = BatchHeader::construct();

                // Set the recurrence data to execute every minute and other alert parameters for batch job
                header.parmAlerts(BatchJobEnded, BatchJobError, BatchJobCancelled, PopUpMessageAlert, EmailAlert);
                header.addUserAlerts(curUserId(),BatchJobEnded, BatchJobError, BatchJobCancelled, PopUpMessageAlert, EmailAlert);
                header.parmStartDateTime(DateTimeUtil::getSystemDateTime());
                header.parmCritical(NoYes::Yes);
                header.parmLogLevel(BatchLogLevel::Error);

                for (int counter = 1; counter <= taskCount; counter++)
                {
                    SysOperationServiceController sourceDocumentProcessorController = new SysOperationServiceController();
                    sourceDocumentProcessorController.parmClassName(literalStr(SourceDocumentAccountingStateProcessor));
                    sourceDocumentProcessorController.parmMethodName(literalStr(ProcessSourceDocumentTask));
                    sourceDocumentProcessorController.parmExecutionMode(SysOperationExecutionMode::Synchronous);

                    SourceDocumentAccountingProcessorContract sourceDocumentAccountingProcessorContract = sourceDocumentProcessorController.getDataContractObject() as SourceDocumentAccountingProcessorContract;
                    sourceDocumentAccountingProcessorContract.parmProcessExecutionId(executionId);
                    sourceDocumentAccountingProcessorContract.parmSourceLinkRecid(0);

                    header.addTask(sourceDocumentProcessorController);
                }

                header.parmCaption(strFmt("@Subledger:DynamicsAccountingFrameworkProcessorBatchTaskCaption", "@SourceDocumentAccountingFramework:DistributionReset", int642Str(taskCount)));
                header.save();
            }

            info(strFmt("@SourceDocumentAccountingFramework:DocumentsSubmittedForProcessing", "@SourceDocumentAccountingFramework:DistributionReset"));

            sourceDocumentsPendingAcountingView_ds.research();
            sourceDocumentsPendingAcountingView_ds.refresh();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ShowError</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Show error message for selected records
        /// </summary>
        public void clicked()
        {
            super();
            sourceDocumentsPendingAcountingView_ds.buildErrorLogMessageDisplay(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DocumentId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        /// Link back to source document
        /// </summary>
        public void jumpRef()
        {
            super();
            SourceDocumentsPendingAcountingView document = sourceDocumentsPendingAcountingView_ds.cursor();
            
            SourceDocumentHeader sourceDoc = SourceDocumentHeader::find(document.SourceDocumentHeader);
            Args args = new Args();
            args.caller(element);
            args.record(sourceDoc);

            if (sourceDoc.TypeEnumName ==  enumId2Name(enumNum(SourceDocument_CustomerInvoice)))
            {
                switch (sourceDoc.TypeEnumValue)
                {
                    case SourceDocument_CustomerInvoice::CustomerFreeTextInvoice:
                        args.name(formStr(CustFreeInvoice));
                        break;
                    default:
                        warning("@SourceDocumentAccountingFramework:UnableToNavigateToOriginalDocument");
                        break;
                }
            }
            else
            {
                warning("@SourceDocumentAccountingFramework:UnableToNavigateToOriginalDocument");
            }

            FormRun formRun = classFactory.formRunClass(args);
            formRun.init();
            formRun.run();
            formRun.wait();
            formRun.detach();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ViewLog</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        /// Verify if the text is error then display error message
        /// </summary>
        public void jumpRef()
        {
            super();
            sourceDocumentsPendingAcountingView_ds.buildErrorLogMessageDisplay(false);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>SourceDocumentsPendingAcountingView</Name>
			<Table>SourceDocumentsPendingAcountingView</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountingEvent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountingEventState</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountingEventType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentHeader</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceRelationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubledgerJournalEntryStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VoucherDataAreaId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@Subledger:SourceDocumentPendingAccountingView</Caption>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<StatusBarStyle xmlns="">Simple</StatusBarStyle>
		<Style xmlns="">SimpleList</Style>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>DocumentProcessingMenu</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ProcessDocuments</Name>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<MultiSelect>Yes</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
								<Text>@SourceDocumentAccountingFramework:ProcessDocument</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>EditDistributions</Name>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<MultiSelect>No</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
								<Text>@SYS323891</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ResetAllDistributions</Name>
								<Type>Button</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<MultiSelect>Yes</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
								<Text>@Subledger:Subledger_EntityActionButton_Reset</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ShowError</Name>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<MultiSelect>Yes</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
								<Text>@SourceDocumentAccountingFramework:ShowJournalizationError</Text>
							</AxFormControl>
						</Controls>
						<DataSource>SourceDocumentsPendingAcountingView</DataSource>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<DataSource>SourceDocumentsPendingAcountingView</DataSource>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CustomFilterGroup</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>DocumentsPendingProcessing</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
									<Value>DocumentAccountingProcessorState</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>DocumentsPendingProcessing</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SourceDocumentType</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>sourceDocumentType</DataMethod>
						<DataSource>SourceDocumentsPendingAcountingView</DataSource>
						<Label>@SYS317515</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocumentId</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>documentId</DataMethod>
						<DataSource>SourceDocumentsPendingAcountingView</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>AccountingDate</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>2013265918</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Date</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>AccountingDate</DataField>
						<DataSource>SourceDocumentsPendingAcountingView</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Company</Name>
						<AllowEdit>No</AllowEdit>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>DocumentDataAreaId</DataField>
						<DataSource>SourceDocumentsPendingAcountingView</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>DocumentAccountingProcessorState</Name>
						<AllowEdit>No</AllowEdit>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>DocumentCurrentState</DataField>
						<DataSource>SourceDocumentsPendingAcountingView</DataSource>
						<Label>@SourceDocumentAccountingFramework:SourceDocumentAccountingStateProcessor</Label>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>ViewLog</Name>
						<AllowEdit>No</AllowEdit>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>displayErrorLog</DataMethod>
						<DataSource>SourceDocumentsPendingAcountingView</DataSource>
						<Label>@SourceDocumentAccountingFramework:ExecutionLog</Label>
					</AxFormControl>
				</Controls>
				<AlternateRowShading>No</AlternateRowShading>
				<DataSource>SourceDocumentsPendingAcountingView</DataSource>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>