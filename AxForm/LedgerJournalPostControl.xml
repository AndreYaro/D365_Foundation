<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>LedgerJournalPostControl</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class LedgerJournalPostControl extends FormRun
{
    #ResAppl
    #FormTreeControl
    #KeyPressed

    Common common;
    ImageListAppl_checkbox checkBoxImages;
    LedgerJournalName ledgerJournalName;
    LedgerJournalPostControlManager ledgerJournalPostControlManager;
    Map currentUsersPostControls;
    Map currentUserGroupsPostControls;
    str treeNodeNameDisplayFormat;

}
]]></Source>
			</Method>
			<Method>
				<Name>activate</Name>
				<Source><![CDATA[
    public void activate(boolean _active)
    {
        super(_active);

        if (_active)
        {
            appl.setDefaultCompany(ledgerJournalName.company());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides to save the posting restriction setup data to the disk.
    /// </summary>
    /// <remarks>
    /// This method is called both when the OK button on the form is clicked
    /// and when the close button on the form is clicked.
    /// </remarks>
    public void closeOk()
    {
        DialogButton userChoiceOnMessageBox;

        switch (setupTypeRadioButtonCtrl.selection())
        {
            case LedgerJournalPostControlSetupType::None:
                userChoiceOnMessageBox = Box::okCancel("@SYS116333", DialogButton::Cancel);
                if (userChoiceOnMessageBox == DialogButton::Ok)
                {
                    LedgerJournalPostControlManager::removeLedgerJournalPostControl(ledgerJournalName.JournalName);
                    super();
                }
                // Else do NOT call super.  Calling super will cause the form to close.
                // We need to leave the form open.
                break;
            default:
                ledgerJournalPostControlManager.saveLedgerJournalPostControl(
                    currentUsersPostControls,
                    currentUserGroupsPostControls);
                super();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides to initialize LedgerJournalPostControl form.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// LedgerJournalPostControl form is not opened up from a parent form.
    /// </exception>
    public void init()
    {
        if (!element.args().record())
        {
            throw error(Error::missingParameter(this));
        }

        common = element.args().record();

        if (common.TableId == tablenum(LedgerJournalName))
        {
            ledgerJournalName = common;
        }
        else
        {
            Debug::assert(false);
        }

        super();

        treeNodeNameDisplayFormat = '%1 - %2';

        checkBoxImages = new ImageListAppl_checkbox();
        userTreeCtrl.setStateImagelist(checkBoxImages.imageList());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPostControlSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes LedgerJournalPostControl form internal data management
    /// members.
    /// </summary>
    public void initPostControlSetup()
    {
        if (ledgerJournalPostControlManager == null)
        {
            // LedgerJournalPostControlManager only holds onto LedgerJournalName's JournalName and JournalType by value.
            // Therefore, it won't be affected by the parent record cursor's change.
            ledgerJournalPostControlManager = LedgerJournalPostControlManager::newWithLedgerJournalName(ledgerJournalName);
            ledgerJournalPostControlManager.resetLedgerJournalPostControl();
        }

        if (currentUserGroupsPostControls == null)
        {
            currentUserGroupsPostControls = new Map(Types::String, Types::Class);
        }

        if (currentUsersPostControls == null)
        {
            currentUsersPostControls = new Map(Types::String, Types::Class);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides to set initial posting restriction setup type radio button
    /// and the user tree.
    /// </summary>
    public void run()
    {
        str formTitleCaption;

        super();

        // Must reset ledger journal post control before determining the form should open up with
        // By user, By user group, or no posting restrictions setting.
        this.initPostControlSetup();

        if (LedgerJournalPostControlManager::hasPostControlSetup(ledgerJournalName.JournalName))
        {
            if (LedgerJournalPostControlManager::isPostControlSetupByUserGroup(ledgerJournalName.JournalName))
            {
                setupTypeRadioButtonCtrl.selection(LedgerJournalPostControlSetupType::UserGroup);
            }
            else
            {
                setupTypeRadioButtonCtrl.selection(LedgerJournalPostControlSetupType::User);
            }
        }
        else
        {
            setupTypeRadioButtonCtrl.selection(LedgerJournalPostControlSetupType::None);
        }

        userTreeCtrl.initTree();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>SetupTypeRadioButtonCtrl</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        /// <summary>
        /// Overrides to enable/disable and redraw the user tree control
        /// based on the posting restriction setup type value.
        /// </summary>
        /// <returns>
        /// An integer.
        /// </returns>
        public int selectionChange()
        {
            int ret;

            userTreeCtrl.initTree();

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UserTreeCtrl</Name>
				<Type>Tree</Type>
				<Methods>
					<Method>
						<Name>cascadeStateCheckedToUserTreeItems</Name>
						<Source><![CDATA[
        private void cascadeStateCheckedToUserTreeItems(UserGroupId _userGroupId, FormTreeItem _treeItem, boolean _controlEnabled)
        {
            int userGroupTreeItemIdx;
            int userTreeItemIdx;
            FormTreeItem userTreeItem;
            UserId userId;

            userGroupTreeItemIdx = this.getRoot();

            while (userGroupTreeItemIdx != 0)
            {
                if (_treeItem.idx() == userGroupTreeItemIdx)
                {
                    userTreeItemIdx = this.getChild(userGroupTreeItemIdx);
                    while (userTreeItemIdx)
                    {
                        userTreeItem = this.getItem(userTreeItemIdx);
                        if (userTreeItem)
                        {
                            userTreeItem.stateChecked(_controlEnabled);
                            this.setItem(userTreeItem);
                            // Update the currentUsersPostControlInfos list.
                            userId = this.getIdFromTreeItemData(userTreeItem);
                            // Note: user name is not persisted to LedgerJournalPostControlUser table.
                            this.saveUserPostControlInMemory(userId, _userGroupId, _controlEnabled);
                        }

                        userTreeItemIdx = this.getNextSibling(userTreeItemIdx);
                    }

                    break;
                }

                userGroupTreeItemIdx = this.getNextSibling(userGroupTreeItemIdx);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>checkBoxStatusChanging</Name>
						<Source><![CDATA[
        /// <summary>
        /// Updates the posting control values in response to a check box changing on the tree control.
        /// </summary>
        /// <param name="_formTreeItem">
        /// The tree item whose check box status has been updated.
        /// </param>
        /// <param name="_controlEnabled">
        /// The state that the check box has changed to.  true if the check box is marked; otherwise, false.
        /// </param>
        private void checkBoxStatusChanging(FormTreeItem _formTreeItem, boolean _controlEnabled)
        {
            // A user group tree item is marked.
            if (this.getIsUserGroupFromTreeItemData(_formTreeItem))
            {
                UserGroupId userGroupId = this.getIdFromTreeItemData(_formTreeItem);
                LedgerJournalPostControlUserGroupInfo userGroupPostControlInfo = currentUserGroupsPostControls.lookup(userGroupId);
                userGroupPostControlInfo.parmControlEnabled(_controlEnabled);

                // Cascade user group state checked status to user nodes.
                this.cascadeStateCheckedToUserTreeItems(userGroupId, _formTreeItem, _controlEnabled);
            }
            else
            {
                this.saveUserPostControlInMemory(
                    this.getIdFromTreeItemData(_formTreeItem),
                    '',
                    _controlEnabled);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>createPostControlUserGroupInfo</Name>
						<Source><![CDATA[
        private LedgerJournalPostControlUserGroupInfo createPostControlUserGroupInfo(
            UserGroupId _userGroupId,
            UserGroupName _userGroupName,
            NoYes _controlEnabled)
        {
            LedgerJournalPostControlUserGroupInfo ledgerJournalPostControlUserGroupInfo;

            ledgerJournalPostControlUserGroupInfo = new LedgerJournalPostControlUserGroupInfo();
            ledgerJournalPostControlUserGroupInfo.parmUserGroupId(_userGroupId);
            ledgerJournalPostControlUserGroupInfo.parmUserGroupName(_userGroupName);
            ledgerJournalPostControlUserGroupInfo.parmLedgerJournalNameId(ledgerJournalName.JournalName);
            ledgerJournalPostControlUserGroupInfo.parmControlEnabled(_controlEnabled);
            ledgerJournalPostControlUserGroupInfo.parmLastSetupTimestamp(DateTimeUtil::utcNow());

            return ledgerJournalPostControlUserGroupInfo;
        }

]]></Source>
					</Method>
					<Method>
						<Name>createPostControlUserInfo</Name>
						<Source><![CDATA[
        private LedgerJournalPostControlUserInfo createPostControlUserInfo(
            UserId _userId,
            UserName _userName,
            UserGroupId _enabledByUserGroupId,
            NoYes _enabledByUserGroup,
            NoYes _controlEnabled)
        {
            LedgerJournalPostControlUserInfo ledgerJournalPostControlUserInfo;

            ledgerJournalPostControlUserInfo = new LedgerJournalPostControlUserInfo();
            ledgerJournalPostControlUserInfo.parmUserId(_userId);
            ledgerJournalPostControlUserInfo.parmUserName(_userName);
            ledgerJournalPostControlUserInfo.parmLedgerJournalNameId(ledgerJournalName.JournalName);
            ledgerJournalPostControlUserInfo.parmEnabledByUserGroupId(_enabledByUserGroupId);
            ledgerJournalPostControlUserInfo.parmEnabledByUserGroup(_enabledByUserGroup);
            ledgerJournalPostControlUserInfo.parmControlEnabled(_controlEnabled);

            return ledgerJournalPostControlUserInfo;
        }

]]></Source>
					</Method>
					<Method>
						<Name>createTreeItemData</Name>
						<Source><![CDATA[
        str createTreeItemData(boolean _isGroup, str _id)
        {
            // The string should container whether it contains user group data
            // and the user/user group ID.
            str treeItemData;

            treeItemData = strfmt('%1%2', (_isGroup? '1': '0') , _id);

            return treeItemData;
        }

]]></Source>
					</Method>
					<Method>
						<Name>expanding</Name>
						<Source><![CDATA[
        /// <summary>
        /// Overrides to intercept the event when a tree item on the user tree
        /// control is expanding.
        /// </summary>
        /// <param name="_idx">
        /// The current expanding tree item index.
        /// </param>
        /// <param name="_action">
        /// The form tree expand action.
        /// </param>
        /// <param name="_data">
        /// Any data needed for the expanding event.
        /// </param>
        /// <returns>
        /// false.
        /// </returns>
        public boolean expanding(int _idx, FormTreeExpand _action, anytype _data)
        {
            FormTreeItem    userGroupTreeItem;
            FormTreeItem    userTreeItem;
            TreeItemIdx     userTreeItemIdx;
            List usersPostControls;
            ListEnumerator usersPostControlsEnumerator;
            LedgerJournalPostControlUserInfo userPostControlInfo;

            if (_action == FormTreeExpand::Expand)
            {
                userGroupTreeItem = this.getItem(_idx);

                if (!userGroupTreeItem.stateExpandedOnce())
                {
                    usersPostControls = ledgerJournalPostControlManager.getUsersWithPostControls(this.getIdFromTreeItemData(userGroupTreeItem));
                    usersPostControlsEnumerator = usersPostControls.getEnumerator();

                    while (usersPostControlsEnumerator.moveNext())
                    {
                        userPostControlInfo = usersPostControlsEnumerator.current();
                        userTreeItemIdx = SysFormTreeControl::addTreeItem(
                            this,
                            strfmt(treeNodeNameDisplayFormat, userPostControlInfo.parmUserId(), userPostControlInfo.parmUserName()),
                            _idx,
                            this.createTreeItemData(false, userPostControlInfo.parmUserId()),
                            checkBoxImages.image(#ImageCheckNone),
                            false);
                        userTreeItem = this.getItem(userTreeItemIdx);
                        // mark/unmark the user tree item according to the persisted post contorl info
                        userTreeItem.stateChecked(userPostControlInfo.parmControlEnabled());
                        this.updateUserTreeItem(userTreeItem);
                    }
                }
                else
                {
                    userTreeItemIdx = this.getChild(_idx);

                    while (userTreeItemIdx)
                    {
                        userTreeItem = this.getItem(userTreeItemIdx);
                        this.updateUserTreeItem(userTreeItem);
                        userTreeItemIdx = this.getNextSibling(userTreeItemIdx);
                    }
                }
            }

            return super(_idx, _action, _data);
        }

]]></Source>
					</Method>
					<Method>
						<Name>getIdFromTreeItemData</Name>
						<Source><![CDATA[
        str getIdFromTreeItemData(FormTreeItem _treeItem)
        {
            str s = _treeItem.data();
            return substr(s, 2, strlen(s));
        }

]]></Source>
					</Method>
					<Method>
						<Name>getIsUserGroupFromTreeItemData</Name>
						<Source><![CDATA[
        boolean getIsUserGroupFromTreeItemData(FormTreeItem _treeItem)
        {
            str s = _treeItem.data();

            s = substr(s, 1, 1);
            if (s == '0')
            {
                return false;
            }
            else
            {
                return true;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>initTree</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initializes the user tree control based on current posting restrictions
        /// setup type.
        /// </summary>
        /// <remarks>
        /// This method will add the first level tree items to the user tree control.
        /// </remarks>
        /// <exception cref="Exception::Error">
        /// Ledger journal post control setup type value is not supported.
        /// </exception>
        void initTree()
        {
            this.deleteAll();

            boolean allowEdit = FormSecurity::getMenuItemAccessRight(element) > AccessRight::View;

            switch (setupTypeRadioButtonCtrl.selection())
            {
                case LedgerJournalPostControlSetupType::UserGroup:
                    this.visible(true);
                    element.initPostControlSetup();
                    this.initUserGroupTree();
                    this.allowEdit(allowEdit);
                    break;
                case LedgerJournalPostControlSetupType::User:
                    this.visible(true);
                    element.initPostControlSetup();
                    this.initUserTree();
                    this.allowEdit(allowEdit);
                    break;
                default:
                    this.visible(false);
                    break;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>initUserGroupTree</Name>
						<Source><![CDATA[
        void initUserGroupTree()
        {
            TreeItemIdx rootItemIdx;
            FormTreeItem rootItem;
            List userGroupsPostControls;
            ListEnumerator userGroupsPostControlsEnumerator;
            LedgerJournalPostControlUserGroupInfo userGroupPostControlInfo;
            LedgerJournalPostControlUserGroupInfo inMemoryUserGroupPostControlInfo;

            userGroupsPostControls = ledgerJournalPostControlManager.getUserGroupsWithPostControls();
            userGroupsPostControlsEnumerator = userGroupsPostControls.getEnumerator();

            while (userGroupsPostControlsEnumerator.moveNext())
            {
                userGroupPostControlInfo = userGroupsPostControlsEnumerator.current();
                rootItemIdx = SysFormTreeControl::addTreeItem(
                    this,
                    strfmt(treeNodeNameDisplayFormat, userGroupPostControlInfo.parmUserGroupId(), userGroupPostControlInfo.parmUserGroupName()),
                    0,
                    this.createTreeItemData(true, userGroupPostControlInfo.parmUserGroupId()),
                    checkBoxImages.image(#ImageCheckNone),
                    true);

                rootItem = this.getItem(rootItemIdx);

                // Mark/unmark the checkbox according to the control enabled setting on disk.
                if (userGroupPostControlInfo.parmControlEnabled())
                {
                    rootItem.stateChecked(true);
                    this.expanding(rootItemIdx, FormTreeExpand::Expand, '');
                    rootItem.stateExpandedOnce(true);
                }
                else
                {
                    rootItem.stateChecked(false);
                }

                // UserTreeCtrl.initTree is called by UserTreeCtrl.redrawTree.  Therefore, the
                // user group might have been set up with different setup type.  We need to
                // reapply that in-memory setting.
                if (!currentUserGroupsPostControls.exists(userGroupPostControlInfo.parmUserGroupId()))
                {
                    currentUserGroupsPostControls.insert(userGroupPostControlInfo.parmUserGroupId(), userGroupPostControlInfo);
                }
                else
                {
                    // If the user group posting restriction was set up once, then reapply that user
                    // group's posting restriction settings to current root form tree item.
                    inMemoryUserGroupPostControlInfo = currentUserGroupsPostControls.lookup(userGroupPostControlInfo.parmUserGroupId());
                    rootItem.stateChecked(
                        ((inMemoryUserGroupPostControlInfo.parmControlEnabled() == NoYes::Yes)? true : false));
                }

                this.setItem(rootItem);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>initUserTree</Name>
						<Source><![CDATA[
        void initUserTree()
        {
            TreeItemIdx rootItemIdx;
            FormTreeItem rootItem;
            List userGroupsPostControls;
            List usersPostControls;
            ListEnumerator userGroupsPostControlsEnumerator;
            ListEnumerator usersPostControlsEnumerator;
            LedgerJournalPostControlUserGroupInfo userGroupPostControlInfo;
            LedgerJournalPostControlUserInfo userPostControlInfo;
            LedgerJournalPostControlUserInfo inMemoryUserPostControlInfo;

            // No in-memory user group setup.  This happens at the first time the user
            // enters the setup form.
            if (currentUserGroupsPostControls.elements() == 0)
            {
                // We still need to get user group post controls because we need to update
                // their setup time stamp.
                userGroupsPostControls = ledgerJournalPostControlManager.getUserGroupsWithPostControls();
                userGroupsPostControlsEnumerator = userGroupsPostControls.getEnumerator();

                while (userGroupsPostControlsEnumerator.moveNext())
                {
                    userGroupPostControlInfo = userGroupsPostControlsEnumerator.current();
                    currentUserGroupsPostControls.insert(userGroupPostControlInfo.parmUserGroupId(), userGroupPostControlInfo);
                }
            }

            usersPostControls = ledgerJournalPostControlManager.getUsersWithPostControls();
            usersPostControlsEnumerator = usersPostControls.getEnumerator();

            while (usersPostControlsEnumerator.moveNext())
            {
                userPostControlInfo = usersPostControlsEnumerator.current();
                rootItemIdx = SysFormTreeControl::addTreeItem(
                    this,
                    strfmt(treeNodeNameDisplayFormat, userPostControlInfo.parmUserId(), userPostControlInfo.parmUserName()),
                    0,
                    this.createTreeItemData(false, userPostControlInfo.parmUserId()),
                    checkBoxImages.image(#ImageCheckNone),
                    false);

                rootItem = this.getItem(rootItemIdx);

                // Mark/unmark the checkbox according to the control enabled setting on disk.
                if (userPostControlInfo.parmControlEnabled())
                {
                    rootItem.stateChecked(true);
                }
                else
                {
                    rootItem.stateChecked(false);
                }

                // UserTreeCtrl.initTree is called by UserTreeCtrl.redrawTree.  Therefore, the
                // user group might have been set up with different setup type.  We need to
                // reapply that in-memory setting.
                if (!currentUsersPostControls.exists(userPostControlInfo.parmUserId()))
                {
                    currentUsersPostControls.insert(userPostControlInfo.parmUserId(), userPostControlInfo);
                }
                else
                {
                    inMemoryUserPostControlInfo = currentUsersPostControls.lookup(userPostControlInfo.parmUserId());
                    rootItem.stateChecked(inMemoryUserPostControlInfo.parmControlEnabled());
                }

                this.setItem(rootItem);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>saveUserPostControlInMemory</Name>
						<Source><![CDATA[
        private void saveUserPostControlInMemory(UserId _userId, UserGroupId _userGroupId, boolean _controlEnabled)
        {
            LedgerJournalPostControlUserInfo userPostControlInfo;

            if (!currentUsersPostControls.exists(_userId))
            {
                userPostControlInfo = this.createPostControlUserInfo(
                    _userId,
                    '',
                    _userGroupId,
                    (_userGroupId == ''? NoYes::No : NoYes::Yes),
                    (_controlEnabled ? NoYes::Yes : NoYes::No));
                currentUsersPostControls.insert(_userId, userPostControlInfo);
            }
            else
            {
                userPostControlInfo = currentUsersPostControls.lookup(_userId);
                // Must update LedgerJournalPostControlUserInfo before updating
                // expanded user tree items because the update process uses this
                // LedgerJournalPostControlUserInfo.
                userPostControlInfo.parmControlEnabled(_controlEnabled);
                userPostControlInfo.parmEnabledByUserGroup(
                    (_userGroupId == ''? NoYes::No : NoYes::Yes));
                userPostControlInfo.parmEnabledByUserGroupId(_userGroupId);
            }

            // User may already has post control setup in current setup session.
            // Update the same user's state checked status on other user groups.
            this.updateExpandedTreeItems(_userId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>updateExpandedTreeItems</Name>
						<Source><![CDATA[
        void updateExpandedTreeItems(UserId _userId)
        {
            int userGroupItemIdx;
            int userItemIdx;
            FormTreeItem treeItem;

            // We only need to update other user tree items if the marked/unmarked tree item
            // is a user tree item that belongs to a user group tree item.
            if (setupTypeRadioButtonCtrl.selection() == LedgerJournalPostControlSetupType::UserGroup)
            {
                userGroupItemIdx = this.getRoot();
                while (userGroupItemIdx != 0)
                {
                    treeItem = this.getItem(userGroupItemIdx);

                    if (treeItem.stateExpanded())
                    {
                        userItemIdx = this.getChild(userGroupItemIdx);

                        while (userItemIdx)
                        {
                            treeItem = this.getItem(userItemIdx);
                            if (this.getIdFromTreeItemData(treeItem) == _userId)
                            {
                                this.updateUserTreeItem(treeItem);
                                break;
                            }

                            userItemIdx = this.getNextSibling(userItemIdx);
                        }
                    }

                    userGroupItemIdx = this.getNextSibling(userGroupItemIdx);
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>updateUserTreeItem</Name>
						<Source><![CDATA[
        private void updateUserTreeItem(FormTreeItem _treeItem)
        {
            LedgerJournalPostControlUserInfo userPostControlInfo;

            str id = this.getIdFromTreeItemData(_treeItem);

            Debug::assert(currentUsersPostControls != null);

            if (currentUsersPostControls.exists(id))
            {
                userPostControlInfo = currentUsersPostControls.lookup(id);
                Debug::assert(userPostControlInfo != null);
                _treeItem.stateChecked(userPostControlInfo.parmControlEnabled());
            }

            this.setItem(_treeItem);
        }

]]></Source>
					</Method>
					<Method>
						<Name>checkedStateChanged</Name>
						<Source><![CDATA[
        public void checkedStateChanged(int _Idx, FormTreeCheckedState _newState)
        {
            super(_Idx, _newState);

            FormTreeItem formTreeItem = this.getItem(_Idx);
            if (formTreeItem)
            {
                this.checkBoxStatusChanging(formTreeItem, _newState);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OkButtonCtrl</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            element.closeOk();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CancelButtonCtrl</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            element.closeCancel();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@SYS113937</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<StatusBarStyle xmlns="">Simple</StatusBarStyle>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>StaticText</Name>
				<ElementPosition>1073741823</ElementPosition>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<FilterExpression>%1</FilterExpression>
				<Top>0</Top>
				<TopMode>TopEdge</TopMode>
				<Type>StaticText</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Text>@SYS113939</Text>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Setup</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>ToolbarList</Pattern>
				<PatternVersion>1.2</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>SetupType</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Pattern>CustomFilters</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRadioButtonControl">
								<Name>SetupTypeRadioButtonCtrl</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>RadioButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Caption>@SYS116454</Caption>
								<Columns>3</Columns>
								<EnumType>LedgerJournalPostControlSetupType</EnumType>
								<FrameType>None</FrameType>
								<Selection>2</Selection>
								<Items />
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<FrameType>None</FrameType>
						<Style>CustomFilter</Style>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTreeControl">
						<Name>UserTreeCtrl</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Tree</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<CheckBox>Yes</CheckBox>
					</AxFormControl>
				</Controls>
				<FrameType>None</FrameType>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ExitButtons</Name>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoLeft</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>OkButtonCtrl</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<NeededPermission>Update</NeededPermission>
						<Type>Button</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Text>@SYS5473</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>CancelButtonCtrl</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<LeftMode>AutoRight</LeftMode>
						<Type>Button</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Text>@SYS57717</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>