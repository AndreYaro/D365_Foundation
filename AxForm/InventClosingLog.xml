<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>InventClosingLog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class InventClosingLog extends FormRun
{
    #MACROLIB.resAppl

    InventClosingLogTmp inventClosingLogTmpTable;
    InventClosing inventClosing;
    [FormObservable]
    ImageListAppl imageListAppl;

    private QueryBuildRange qbrSeverity;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        inventClosing = element.args().record();
        
        super();

        imageListAppl = new ImageListAppl_Infolog();
        InventClosingLog_Severity.imageList(imageListAppl.imageList());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupSeverities</Name>
				<Source><![CDATA[
    private void lookupSeverities(FormStringControl _control)
    {
        SysTableLookup SysTableLookup = SysTableLookup::newParameters(tableNum(InventClosingLogTmp), _control);

        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tablenum(InventClosingLogTmp));
        queryBuildDataSource.addGroupByField(fieldnum(InventClosingLogTmp, Severity));

        sysTableLookup.addLookupfield(fieldnum(InventClosingLogTmp, Severity), true);

        sysTableLookup.parmQuery(query);
        sysTableLookup.parmTmpBuffer(inventClosingLogTmpTable);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insetLogMessages</Name>
				<Source><![CDATA[
    private void insetLogMessages()
    {
        InventClosingLog inventClosingLog;

        boolean shouldSummarizeInfolog = inventClosing.ShouldSummarizeInfolog;

        ttsbegin;

        while select inventClosingLog where inventClosingLog.Voucher == inventClosing.Voucher && inventClosingLog.TransDate == inventClosing.TransDate
        {
            container infologData;
        	infologData = shouldSummarizeInfolog && inventClosingLog.InfologDataSummary ? inventClosingLog.InfologDataSummary : inventClosingLog.InfologData;
            int lenOfInfoLogData = conLen(InfologData);
            LogId logId = inventClosingLog.LogId;
            LogType logType = inventClosingLog.LogType;

            for (int i = 2; i <= lenOfInfoLogData; i++)
            {
                container infologLine = conPeek(InfologData, i);
                Exception severityValue = conPeek(infologLine, 1);

                str fullMessage = conPeek(infologLine, 2);

                container infos = element.splitFullMessageIntoStageInfoPrefixAndLogMessage(fullMessage);
                str stageInfo = conPeek(infos, 1);
                str prefix = conPeek(infos, 2);
                str logMessage = conPeek(infos, 3);

                container prefixAndItemId = element.getItemNumberOutOfPrefix(prefix, logId, logType);
                prefix = conPeek(prefixAndItemId, 1);
                str itemId = conPeek(prefixAndItemId, 2);

                stageInfo = element.removeStartAndEndBlank(stageInfo);
                prefix = element.removeStartAndEndBlank(prefix);
                logMessage = element.removeStartAndEndBlank(logMessage);
                prefix = strReplace(prefix, '\t', '/');

                if (itemId == "" && match("is being paused because of an error", logMessage))
                {
                    continue;
                }

                inventClosingLogTmpTable.clear();
                inventClosingLogTmpTable.LogId = logId;
                inventClosingLogTmpTable.LogType = logType;
                inventClosingLogTmpTable.ItemId = itemId;
                inventClosingLogTmpTable.Voucher = inventClosingLog.Voucher;
                inventClosingLogTmpTable.TransDate = inventClosingLog.TransDate;
                inventClosingLogTmpTable.Severity = severityValue;
                inventClosingLogTmpTable.StageInfo = stageInfo;
                inventClosingLogTmpTable.InventTransInfo = prefix;
                inventClosingLogTmpTable.LogMessage = logMessage;
                inventClosingLogTmpTable.FullMessage = fullMessage;
                inventClosingLogTmpTable.doInsert();
            }
        }
            
        ttscommit;

        InventClosingLogTmp.setTmpData(inventClosingLogTmpTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitFullMessageIntoStageInfoPrefixAndLogMessage</Name>
				<Source><![CDATA[
    private container splitFullMessageIntoStageInfoPrefixAndLogMessage(str _fullMessage)
    {
        int fullMsgLen = strLen(_fullMessage);
        int firstBlank = strScan(_fullMessage, '\t', 1, fullMsgLen);
        int lastBlank = strScan(_fullMessage, '\t', fullMsgLen, -fullMsgLen);

        str stageInfo = subStr(_fullMessage, 1, firstBlank);
        str prefix = subStr(_fullMessage, firstBlank + 1, lastBlank - firstBlank);
        str logMessage = subStr(_fullMessage, lastBlank + 1, fullMsgLen);

        return [stageInfo, prefix, logMessage];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemNumberOutOfPrefix</Name>
				<Source><![CDATA[
    private container getItemNumberOutOfPrefix(str _prefix, str _logId, LogType _logType)
    {
        if (!match("Item number", _prefix))
        {
            if (_logType == LogType::Item || _logType == LogType::Prod)
            {
                return [_prefix, _logId];
            }

            return [_prefix, ""];
        }

        int prefixLen = strLen(_prefix);
        int startOfItemNumebr = strScan(_prefix, "Item number", 1, prefixLen);
        int firstBlankAfterItemNumebr = strScan(_prefix, '\t', startOfItemNumebr, prefixLen);
        str itemNumber = subStr(_prefix, startOfItemNumebr, firstBlankAfterItemNumebr - startOfItemNumebr + 1);

        int firstColon = strScan(itemNumber, ':', 1, strLen(itemNumber));

        str itemId = strLTrim(subStr(itemNumber, firstColon + 1, strLen(itemNumber) - firstColon -1));
        str prefix = _prefix;

        while (strLen(prefix) != 0 && startOfItemNumebr != 0)
        {
            prefix = strDel(prefix, startOfItemNumebr, strLen(itemNumber));
            startOfItemNumebr = strScan(prefix, itemNumber, 1, strLen(prefix));
        }

        return [prefix, itemId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeStartAndEndBlank</Name>
				<Source><![CDATA[
    private str removeStartAndEndBlank(str _words)
    {
        if (strLen(_words) == 0)
        {
            return _words;
        }

        str ret = _words;

        int retLen = strLen(ret);
        int fistSlash = strScan(ret, '\t', 1, retLen);
        while (retLen != 0 && fistSlash != 0 && fistSlash == 1)
        {
            ret = strDel(ret, fistSlash, 1);
            retLen = strLen(ret);
            fistSlash = strScan(ret, '\t', 1, retLen);
        }
        
        retLen = strLen(ret);
        int lastSlash = strScan(ret, '\t', retLen, -retLen);
        while (retLen != 0 && lastSlash != 0 && lastSlash == retLen)
        {
            ret = strDel(ret, lastSlash, 1);
            retLen = strLen(ret);
            lastSlash = strScan(ret, '\t', retLen, -retLen);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>InventClosingLogTmp</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            element.insetLogMessages();
            super();

            qbrSeverity = this.queryBuildDataSource().addRange(fieldNum(InventClosingLogTmp, Severity));
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            if (Severity.valueStr() != "")
            {
                qbrSeverity.value(Severity.valueStr());
            }
            else
            {
                this.query().clearOrderBy();
                this.query().dataSourceTable(tableNum(InventClosingLogTmp)).addOrderByField(fieldNum(InventClosingLogTmp, Severity), SortOrder::Descending);
            }

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>showSeverity</Name>
						<Source><![CDATA[
        display ImageRes showSeverity(InventClosingLogTmp _inventClosingLogTmp)
        {
            switch(_inventClosingLogTmp.Severity)
            {
                case Exception::Info:
                    return imageListAppl.image(#ImageInfo);
                case Exception::Warning:
                    return imageListAppl.image(#ImageWarning);
                default:
                    return imageListAppl.image(#ImageError);
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Severity</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>initialize</Name>
						<Source><![CDATA[
        protected void initialize()
        {
            super();
            Severity.text("");
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            element.lookupSeverities(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            InventClosingLogTmp.clear();
            InventClosingLogTmp_ds.filter(fieldNum(InventClosingLogTmp, Severity), queryValue(this.valueStr()));

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>InventClosingLogTmp</Name>
			<Table>InventClosingLogTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HelpURL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LogId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LogMessage</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LogType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Prefix</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Severity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SCM:InventClosingLog</Caption>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Pattern xmlns="">ListPage</Pattern>
		<PatternVersion xmlns="">UX7 1.0</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">ListPage</Style>
		<TitleDataSource xmlns="">InventClosingLogTmp</TitleDataSource>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>GroupView</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>LogFilter</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Logs</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Severity</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<FilterDataSource>InventClosingLogTmp</FilterDataSource>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@SCM:InventClosingLogTmpSeverity</Label>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Logs</Name>
				<AllowEdit>No</AllowEdit>
				<Type>Grid</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormImageControl">
						<Name>InventCLosingLog_Severity</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Image</Type>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>showSeverity</DataMethod>
						<DataSource>InventClosingLogTmp</DataSource>
						<Label>@SCM:InventClosingLogTmpSeverity</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>InventClosingLog_Item</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>ItemId</DataField>
						<DataSource>InventClosingLogTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>InventClosingLog_StageInfo</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>StageInfo</DataField>
						<DataSource>InventClosingLogTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>InventClosingLog_InventTransInfo</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>InventTransInfo</DataField>
						<DataSource>InventClosingLogTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>InventClosingLog_LogMeaasge</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>LogMessage</DataField>
						<DataSource>InventClosingLogTmp</DataSource>
					</AxFormControl>
				</Controls>
				<DataSource>InventClosingLogTmp</DataSource>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>