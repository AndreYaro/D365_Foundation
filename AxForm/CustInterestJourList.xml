<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>CustInterestJourList</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
    [Form]
    public class CustInterestJourList extends FormRun
    {
        CustInterestAdjustmentAction custInterestAdjustmentAction;
        CustInterestAdjustmentType custInterestAdjustmentType;
        boolean closeFromOKCancelButton;
        AccountNum accountNum;
        QueryBuildRange adjustmentStatusRange;
        QueryBuildRange feeAdjustmentStatusRange;
        QueryBuildRange accountNumRange;
        QueryBuildRange statusRange;
        RecordSortedList selectedInterestNote;
        QueryBuildRange custBillingClassificationRange;
        SysLookupMultiSelectCtrl msCtrl;
}
]]></Source>
			</Method>
			<Method>
				<Name>applyDateRange</Name>
				<Source><![CDATA[
    public void applyDateRange(QueryBuildRange _updatedDateRange)
    {
        CustParameters custParameters;

        custParameters = CustParameters::find();
        if (custInterestAdjustmentAction == CustInterestAdjustmentAction::Waive)
        {
            if (custParameters.MinimumWaiveDays && !custParameters.MaximumWaiveDays)
            {
                _updatedDateRange.value(SysQueryRangeUtil::lessThanDate((-1 * custParameters.MinimumWaiveDays)+1));
            }
            else if (custParameters.MaximumWaiveDays && !custParameters.MinimumWaiveDays)
            {
                _updatedDateRange.value(SysQueryRangeUtil::greaterThanDate((-1 * custParameters.MaximumWaiveDays)+1));
            }
            else if (custParameters.MinimumWaiveDays && custParameters.MaximumWaiveDays)
            {
                _updatedDateRange.value(SysQuery::range(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) - custParameters.MaximumWaiveDays, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) - custParameters.MinimumWaiveDays));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    public boolean canClose()
    {
        boolean ret;

        if (closeFromOKCancelButton)
        {
            ret = super();
        }
        else
        {
            info("@SYS322881");
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotes</Name>
				<Source><![CDATA[
    public Notes getNotes()
    {
        return notesStringEdit.valueStr();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedInterestNotes</Name>
				<Source><![CDATA[
    public RecordSortedList getSelectedInterestNotes()
    {
        return selectedInterestNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        element.parmCustInterestAdjustmentAction(element.args().parmEnum());

        CustTable custTable = element.args().record();
        element.parmAccountNum(custTable.AccountNum);

        super();

        filterBillingClassification.visible(CustParameters::isBillingClassificationEnabled());

        selectedInterestNote = new RecordSortedList(tableNum(CustInterestJour));
        selectedInterestNote.sortOrder(fieldNum(CustInterestJour, InterestNote));
        commandButtonAdjust.helpText("@SYS330133");
        switch (custInterestAdjustmentAction)
        {
            case CustInterestAdjustmentAction::Waive:
                commandButtonAdjust.text("@SYS313600");
                markCheckBox.label("@SYS313600");

                if (custInterestAdjustmentType == CustInterestAdjustmentType::InterestNote)
                {
                    element.design().caption("@SYS322825");
                    markCheckBox.helpText("@SYS330123");
                    supplementalInstruction.text("@SYS322781");
                    custInterestJour_Fee.visible(false);
                }
                else if (custInterestAdjustmentType == CustInterestAdjustmentType::InterestFees)
                {
                    element.design().caption("@SYS328007");
                    markCheckBox.helpText("@SYS330137");
                    supplementalInstruction.text("@SYS328667");
                    sumInterestAmountFeeInclTax.visible(false);
                    unSettledAmount.visible(false);
                }
                break;

            case CustInterestAdjustmentAction::ReInstate:
                commandButtonAdjust.text("@SYS313608");
                markCheckBox.label("@SYS313608");
                if (custInterestAdjustmentType == CustInterestAdjustmentType::InterestNote)
                {
                    element.design().caption("@SYS328012");
                    markCheckBox.helpText("@SYS330134");
                    supplementalInstruction.text("@SYS322796");
                    custInterestJour_Fee.visible(false);
                }
                else if (custInterestAdjustmentType == CustInterestAdjustmentType::InterestFees)
                {
                    element.design().caption("@SYS328008");
                    markCheckBox.helpText("@SYS330138");
                    supplementalInstruction.text("@SYS328668");
                    sumInterestAmountFeeInclTax.visible(false);
                    unSettledAmount.visible(false);
                }
                break;

            case CustInterestAdjustmentAction::Reverse:
                commandButtonAdjust.text("@SYS22850");
                markCheckBox.label("@SYS22850");
                markCheckBox.helpText("@SYS330135");
                supplementalInstruction.text("@SYS322799");
                element.design().caption("@SYS328011");
                break;
        }

        custInterestJour_FeeWriteOffAmount.visible(custInterestAdjustmentType == CustInterestAdjustmentType::InterestFees);
        sumWriteoffAmount.visible(custInterestAdjustmentType == CustInterestAdjustmentType::InterestNote);

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            element.updateDesign();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountNum</Name>
				<Source><![CDATA[
    public AccountNum parmAccountNum(AccountNum _accountNum = accountNum)
    {
        accountNum = _accountNum;

        return accountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInterestAdjustmentAction</Name>
				<Source><![CDATA[
    public CustInterestAdjustmentAction parmCustInterestAdjustmentAction(CustInterestAdjustmentAction _custInterestAdjustmentAction = custInterestAdjustmentAction)
    {
        custInterestAdjustmentAction = _custInterestAdjustmentAction;

        return custInterestAdjustmentAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    void updateDesign()
    {
        commandButtonAdjust.enabled( selectedInterestNote.len()>0 );
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>CustInterestJour</Name>
				<Methods>
					<Method>
						<Name>checkAllPrevious</Name>
						<Source><![CDATA[
        private void checkAllPrevious(CustInterestJour _custInterestJour, boolean _isMarked)
        {
            boolean showInfo = false;
            CustInterestTrans existingCustInterestTrans;
            CustInterestTrans otherCustInterestTrans;
            CustInterestJour otherCustInterestJour;

            // These select statements do not limit the transactions considered based on their existing
            // adjustment status since the adjustment process will handle that.

            while select CustTransId from existingCustInterestTrans
                where existingCustInterestTrans.InterestNote == _custInterestJour.InterestNote
            {
                // Find other interest notes that also contain the transactions being adjusted
                // as part of this interest note.
                while select otherCustInterestJour
                    where otherCustInterestJour.InterestNote != _custInterestJour.InterestNote
                        && otherCustInterestJour.ToDate > _custInterestJour.ToDate
                    exists join otherCustInterestTrans
                        where otherCustInterestTrans.CustTransId == existingCustInterestTrans.CustTransId
                            && otherCustInterestTrans.InterestNote == otherCustInterestJour.InterestNote
                            && otherCustInterestTrans.AdjustmentStatus != CustInterestAdjustmentStatus::Reverse
                {
                    if (_isMarked && !selectedInterestNote.find(otherCustInterestJour))
                    {
                        selectedInterestNote.ins(otherCustInterestJour);
                        showInfo = true;
                    }
                    else if (!_isMarked && selectedInterestNote.find(otherCustInterestJour))
                    {
                        selectedInterestNote.del(otherCustInterestJour);
                    }
                }
            }

            if (showInfo)
            {
                info("@SYS329108");
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            accountNumRange.value(element.parmAccountNum());
            statusRange.value(int642str(enum2int(PrintPostCancel::Posted)));

            if (custInterestAdjustmentType == CustInterestAdjustmentType::InterestNote)
            {
                switch (custInterestAdjustmentAction)
                {
                    case CustInterestAdjustmentAction::Waive:
                        adjustmentStatusRange.value(strFmt(' ( %1 == %2 ) || ( (%3.%4 == %2) && (%3.%5 != 0) ) ',
                                                            fieldStr(CustInterestTrans, AdjustmentStatus),
                                                            enum2int(CustInterestAdjustmentStatus::None),
                                                            tableStr(CustInterestJour),
                                                            fieldStr(CustInterestJour, FeeAdjustmentStatus),
                                                            fieldStr(CustInterestJour, Fee)));
                        break;

                    case CustInterestAdjustmentAction::ReInstate:
                        adjustmentStatusRange.value(strFmt(' ( %1 == %2 ) || ( (%3.%4 == %2) && (%3.%5 != 0) ) ',
                                                            fieldStr(CustInterestTrans, AdjustmentStatus),
                                                            enum2int(CustInterestAdjustmentStatus::Waive),
                                                            tableStr(CustInterestJour),
                                                            fieldStr(CustInterestJour, FeeAdjustmentStatus),
                                                            fieldStr(CustInterestJour, Fee)));
                        break;

                    case CustInterestAdjustmentAction::Reverse:
                        adjustmentStatusRange.value(strFmt(' ( %1 != %2 ) || ( (%3.%4 != %2) && (%3.%5 != 0) ) ',
                                                            fieldStr(CustInterestTrans, AdjustmentStatus),
                                                            enum2int(CustInterestAdjustmentStatus::Reverse),
                                                            tableStr(CustInterestJour),
                                                            fieldStr(CustInterestJour, FeeAdjustmentStatus),
                                                            fieldStr(CustInterestJour, Fee)));
                        break;
                }
            }
            else
            {
                switch (custInterestAdjustmentAction)
                {
                    case CustInterestAdjustmentAction::Waive:
                        feeAdjustmentStatusRange.value(strFmt(' ( %1 == %2 ) && ( %3 != 0 ) ',
                                                            fieldStr(CustInterestJour, FeeAdjustmentStatus),
                                                            enum2int(CustInterestAdjustmentStatus::None),
                                                            fieldStr(CustInterestJour, Fee)));
                        break;

                    case CustInterestAdjustmentAction::ReInstate:
                        feeAdjustmentStatusRange.value(strFmt(' ( %1 == %2 ) && ( %3 != 0 ) ',
                                                            fieldStr(CustInterestJour, FeeAdjustmentStatus),
                                                            enum2int(CustInterestAdjustmentStatus::Waive),
                                                            fieldStr(CustInterestJour, Fee)));
                        break;

                    case CustInterestAdjustmentAction::Reverse:
                        feeAdjustmentStatusRange.value(strFmt(' ( %1 != %2 ) && ( %3 != 0 ) ',
                                                            fieldStr(CustInterestJour, FeeAdjustmentStatus),
                                                            enum2int(CustInterestAdjustmentStatus::Reverse),
                                                            fieldStr(CustInterestJour, Fee)));
                        break;
                }
            }

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            QueryBuildDataSource dsCustInterestTrans;
            QueryBuildRange updatedDateRange;
            QueryBuildDataSource dsCustBillingClassification;

            super();

            switch (tableName2id(element.args().parm()))
            {
                case tableNum(CustInterestJour):
                    custInterestAdjustmentType = CustInterestAdjustmentType::InterestNote;
                    break;

                case tableNum(CustInterestFee):
                    custInterestAdjustmentType = CustInterestAdjustmentType::InterestFees;
                    break;

                case tableNum(CustInterestTrans):
                    custInterestAdjustmentType = CustInterestAdjustmentType::InterestTransaction;
                    break;
            }

            accountNumRange = custInterestJour_ds.query().dataSourceTable(tableNum(CustInterestJour)).addRange(fieldNum(CustInterestJour, AccountNum));
            statusRange = custInterestJour_ds.query().dataSourceTable(tableNum(CustInterestJour)).addRange(fieldNum(CustInterestJour, Status));
            updatedDateRange = custInterestJour_ds.query().dataSourceTable(tableNum(CustInterestJour)).addRange(fieldNum(CustInterestJour, Updated));
            element.applyDateRange(updatedDateRange);

            if (CustParameters::isBillingClassificationEnabled())
            {
                dsCustBillingClassification = custInterestJour_ds.query().dataSourceTable(tableNum(CustInterestJour)).addDataSource(tableNum(CustBillingClassification));
                dsCustBillingClassification.joinMode(JoinMode::OuterJoin);
                dsCustBillingClassification.relations(true);
                custBillingClassificationRange = dsCustBillingClassification.addRange(fieldNum(CustBillingClassification, BillingClassification));
                custInterestJour_ds.object(fieldNum(CustInterestJour, CustBillingClassification)).visible(true);
            }
            else
            {
                custInterestJour_ds.object(fieldNum(CustInterestJour, CustBillingClassification)).visible(false);
            }

            if (custInterestAdjustmentType == CustInterestAdjustmentType::InterestNote)
            {
                dsCustInterestTrans = custInterestJour_ds.query().dataSourceTable(tableNum(CustInterestJour)).addDataSource(tableNum(CustInterestTrans));
                dsCustInterestTrans.joinMode(JoinMode::ExistsJoin);
                dsCustInterestTrans.relations(true);
                adjustmentStatusRange = dsCustInterestTrans.addRange(fieldNum(CustInterestTrans, AdjustmentStatus));
            }
            else
            {
                feeAdjustmentStatusRange = custInterestJour_ds.query().dataSourceTable(tableNum(CustInterestJour)).addRange(fieldNum(CustInterestJour, FeeAdjustmentStatus));
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>markLine</Name>
						<Source><![CDATA[
        edit NoYes markLine(boolean _set, CustInterestJour _custInterestJour, NoYes _value)
        {
            if (_set)
            {
                if (_value)
                {
                    selectedInterestNote.ins(_custInterestJour);

                    this.checkWaivedTransaction(_custInterestJour);

                    if (custInterestAdjustmentAction == CustInterestAdjustmentAction::Reverse)
                    {
                        this.checkAllPrevious(_custInterestJour, _value);
                    }
                }
                else
                {
                    if (custInterestAdjustmentAction == CustInterestAdjustmentAction::Reverse)
                    {
                        // If other transactions have been marked that are related to this one, they should also
                        // be removed from the list.
                        this.checkAllPrevious(_custInterestJour, _value);
                    }

                    selectedInterestNote.del(_custInterestJour);
                }

                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                {
                    element.updateDesign();
                }
            }

            return selectedInterestNote.find(_custInterestJour);
        }

]]></Source>
					</Method>
					<Method>
						<Name>checkWaivedTransaction</Name>
						<Source><![CDATA[
        private void checkWaivedTransaction(CustInterestJour _custInterestJour)
        {
            CustInterestTrans custInterestTrans;
            boolean transactionWaived;

            while select InterestNote, AdjustmentStatus from custInterestTrans
                where custInterestTrans.InterestNote == _custInterestJour.InterestNote &&
                    custInterestTrans.AdjustmentStatus == CustInterestAdjustmentStatus::Waive
            {
                transactionWaived = true;
            }
            if (transactionWaived && custInterestAdjustmentAction == CustInterestAdjustmentAction::Reverse)
            {
               info ("@SYS329317");
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>filterBillingClassification</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Performs a lookup for the <c>BillingClassification</c> field of the <c>CustBillingClassification</c> table.
        /// </summary>
        public void lookup()
        {
            CustBillingClassification::custBillingClassificationLookup(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Filters interest notes by selecting the <c>BillingClassification</c> field value.
        /// </summary>
        /// <returns>
        /// The value from a call to super is returned.
        /// </returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                QueryBuildDataSource dsCustInterestJour = custInterestJour_ds.query().dataSourceTable(tableNum(CustInterestJour));
                dsCustInterestJour.clearRange(fieldNum(CustInterestJour, CustBillingClassification));
                dsCustInterestJour.addRange(fieldNum(CustInterestJour, CustBillingClassification)).value(int642Str(CustBillingClassification::findBillingClassification(this.text()).RecId));
                custInterestJour_ds.executeQuery();
                element.updateDesign();

                if (!custInterestJour.RecId)
                {
                    commandButtonAdjust.enabled(false);
                    throw error("@SPS1063");
                }
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CommandButtonAdjust</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            closeFromOKCancelButton = true;
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CommandButton1</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            closeFromOKCancelButton = true;
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>CustInterestJour</Name>
			<Table>CustInterestJour</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Block</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Canceled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustBillingClassification</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Fee</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FeeAdjustmentStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FeeLastAdjustmentInvoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FeeVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FeeWriteOffAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FromDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GiroAccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GiroType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterestCalcAccountChoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterestNote</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterestNoteDocument_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LanguageId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NoteIssueDate_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Notes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumberSequenceTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostalAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingProfile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Printed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Status</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWriteCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ToDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Updated</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<BackgroundColor xmlns="">WindowBackground</BackgroundColor>
		<Caption xmlns="">@SYS322825</Caption>
		<DialogSize xmlns="">Full</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<WindowResize xmlns="">Dynamic</WindowResize>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>SupplementalInstruction</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1207959549</ElementPosition>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<FilterExpression>%1</FilterExpression>
				<Type>StaticText</Type>
				<VerticalSpacing>15</VerticalSpacing>
				<VerticalSpacingMode>Fixed</VerticalSpacingMode>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Text>@SYS322801</Text>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<ElementPosition>536870911</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>ToolbarList</Pattern>
				<PatternVersion>1.2</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneControl">
						<Name>InterestNoteActionPane</Name>
						<ElementPosition>858993458</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ActionPane</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>ButtonGroup</Name>
								<ElementPosition>715827882</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Left>0</Left>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>OpenInterestNoteMenuItemButton</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<DataSource>CustInterestJour</DataSource>
										<MenuItemName>CustInterestNote</MenuItemName>
										<Text>@SYS330131</Text>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>Vertical</ArrangeMethod>
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
						<AlignChildren>No</AlignChildren>
						<ArrangeMethod>Vertical</ArrangeMethod>
						<Style>Strip</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>CustomFilterGroup</Name>
						<Pattern>CustomFilters</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>Group</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>filterBillingClassification</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ConfigurationKey>PublicSector</ConfigurationKey>
								<ElementPosition>1006632957</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SPS371</Label>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<FrameType>None</FrameType>
						<Style>CustomFilter</Style>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>Grid</Name>
						<ElementPosition>1288490187</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Grid</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>MarkCheckBox</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>473490316</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<BackgroundColor>WindowBackground</BackgroundColor>
								<DataMethod>markLine</DataMethod>
								<DataSource>CustInterestJour</DataSource>
								<Label>@SYS12714</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>CustInterestJour_FromDate</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>710235474</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>FromDate</DataField>
								<DataSource>CustInterestJour</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>CustInterestJour_ToDate</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>946980632</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>ToDate</DataField>
								<DataSource>CustInterestJour</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>CustBillingClassification</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ReferenceGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<DataSource>CustInterestJour</DataSource>
								<ReferenceField>CustBillingClassification</ReferenceField>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>sumInterestAmountFeeInclTax</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1183725790</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>sumInterestAmountFeeInclTax</DataMethod>
								<DataSource>CustInterestJour</DataSource>
								<Label>@SYS322785</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>sumWaivedAmount</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1415499923</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>sumWaivedAmount</DataMethod>
								<DataSource>CustInterestJour</DataSource>
								<Label>@SYS322787</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>unSettledAmount</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1647274056</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@FieldDescriptions_AccountsReceivable:CustInterestJourList_unSettledAmount</HelpText>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>unSettledAmount</DataMethod>
								<DataSource>CustInterestJour</DataSource>
								<Label>@SYS322789</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>CustInterestJour_Fee</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1796715555</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>Fee</DataField>
								<DataSource>CustInterestJour</DataSource>
								<Label>@SYS57614</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CustInterestJour_InterestNote</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1946157054</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>InterestNote</DataField>
								<DataSource>CustInterestJour</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>CustInterestJour_FeeWriteOffAmount</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2013265918</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>FeeWriteOffAmount</DataField>
								<DataSource>CustInterestJour</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>sumWriteoffAmount</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2080374782</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@FieldDescriptions_AccountsReceivable:CustInterestJourList_sumWriteoffAmount</HelpText>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>sumWriteoffAmount</DataMethod>
								<DataSource>CustInterestJour</DataSource>
								<Label>@SYS316545</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
						</Controls>
						<DataSource>CustInterestJour</DataSource>
						<ShowRowLabels>No</ShowRowLabels>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>FooterGroup</Name>
						<Pattern>FillText</Pattern>
						<PatternVersion>UX7 1.0</PatternVersion>
						<Type>Group</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>NotesStringEdit</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Alignment>Left</Alignment>
								<ExtendedDataType>CustInterestAdjustmentNote</ExtendedDataType>
								<LabelPosition>Above</LabelPosition>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>CommitButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoLeft</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CommandButtonAdjust</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<MultiSelect>Yes</MultiSelect>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CommandButton1</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<LeftMode>AutoRight</LeftMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
						<MultiSelect>Yes</MultiSelect>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>