<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>InventMarking</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class InventMarking extends FormRun
{
    Map         mapMarkNow;
    [FormObservable]
    ImageListAppl               imageListAppl;
    #ResAppl

    Map                         mapCollection;
    Map                         mapInventDimInventTrans;

    boolean                     interCompanyMarkingAllowed;

    private static const int CurrentVersion = 1;

}
]]></Source>
			</Method>
			<Method>
				<Name>autoMark</Name>
				<Source><![CDATA[
    void autoMark()
    {
        TmpInventTransMark  tmp;

        InventTrans         inventTransThis;
        InventDim           inventDimThis;
        InventDimParm       inventDimParm;
        PdsBatchDispCheck_Reserve    pdsBatchDispCheck = PdsBatchDispCheck_Reserve::construct();

        if (pdsBatchDispCheck.validateTransCheck(InventTrans::findByInventTransOrigin(InventTransOrigin.RecId)))
        {
            if (! mapMarkNow)
            {
                element.clearMarkNow();
            }

            if (mapMarkNow.elements())
            {
                return;
            }

            tmp.setTmpData(tmpInventTransMark);

            while select tmp
                where tmp.SortEnum  == NoYes::No                 &&
                      tmp.QtyMarked != 0                         &&
                      tmp.TransType != InventTransType::SummedUp &&
                      tmp.TransType != InventTransType::WHSWork
            {
                if (tmp.Qty == 0 || tmp.Qty * tmp.QtyRemain < 0)
                {
                    element.markTmp(tmp,NoYes::Yes);
                }
            }

            if (! mapMarkNow.elements() && inventTrans_ds.qtyRemain(inventTrans))
            {
                inventDimParm.initFromInventDim(inventDim);

                while select forceplaceholders InventDimId
                    from  inventTransThis
                    where inventTransThis.InventTransOrigin == inventTransOrigin.RecId
                       && inventTransThis.StatusIssue       <= StatusIssue::ReservOrdered
                #InventDimExistsJoin(inventTransThis.inventDimId,inventDimThis,inventDim,inventDimParm)
                {
                    while select tmp
                        index DimIdIdx
                        where tmp.InventDimId   == inventTransThis.InventDimId  &&
                              tmp.QtyMarkNow    == 0                            &&
                              tmp.QtyRemain     != 0                            &&
                              tmp.TransType     != InventTransType::SummedUp    &&
                              tmp.TransType     != InventTransType::WHSWork
                    {
                        element.markTmp(tmp,NoYes::Yes,true,inventTrans.openQty());

                        if (! inventTrans_ds.qtyRemain(inventTrans))
                        {
                            break;
                        }
                    }

                    if (! inventTrans_ds.qtyRemain(inventTrans))
                    {
                        break;
                    }
                }

                if (inventTrans_ds.qtyRemain(inventTrans))
                {
                    while select tmp
                        index SortIdx
                        where tmp.QtyRemain != 0                         &&
                              tmp.TransType != InventTransType::SummedUp &&
                              tmp.TransType != InventTransType::WHSWork
                    {
                        element.markTmp(tmp,NoYes::Yes,true,inventTrans_ds.qtyRemain(inventTrans));

                        if (! inventTrans_ds.qtyRemain(inventTrans))
                        {
                            break;
                        }
                    }
                }
            }

            inventTrans_ds.refresh();

            tmpInventTransMark_ds.executeQuery();
            tmpInventTransMark_ds.active();

            markNow.setFocus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearMarkNow</Name>
				<Source><![CDATA[
    void clearMarkNow()
    {
        mapCollection   = null;

        mapMarkNow      = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Record);

        element.setQtyMarkNow(0);

        inventTrans_ds.setCurrent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        SalesLine       salesLine;
        SalesPrice      salesPrice;
        Object          callerForm;

        if (element.args().dataset() == tableNum(SalesLine))
        {
            ttsbegin;
            salesLine  = SalesLine::findRecId(element.args().record().RecId,true);
            salesPrice = SalesLineType::construct(salesLine).interCompanyCalcSalesPrice();
            if (salesLine.SalesPrice != salesPrice)
            {
                salesLine.SalesPrice = salesPrice;
                salesLine.LineAmount = salesLine.calcLineAmount();
                salesLine.update(true);
            }
            ttscommit;

            callerForm = element.args().caller();
            if (callerForm && formHasMethod(callerForm,identifierStr(doRefresh)))
            {
                callerForm.doRefresh(true);
            }
        }

        super();

        xSysLastValue::saveLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        element.updateMarking();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, PreReserveAndMatchReservations.value()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     ret;
        boolean     reserveAndMatchReservationsValue = false;

        Version version = conPeek(_packedClass, 1);

        switch (version)
        {
            case CurrentVersion:
                [version, reserveAndMatchReservationsValue] = _packedClass;
                ret = true;
                break;

            default :
                ret = false;
                break;
        }

        PreReserveAndMatchReservations.value(reserveAndMatchReservationsValue);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        //needed to support XSysLastValue
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    public IdentifierName lastValueDesignName()
    {
        return strFmt('%1-%2', int2Str(enum2int(this.getInventTransTypeForCaller())), this.canCallerBeReserved());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    IdentifierName lastValueElementName()
    {
        return formStr(InventMarking);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    public UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    public UserId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCallerBeReserved</Name>
				<Source><![CDATA[
    private boolean canCallerBeReserved()
    {
        InventTransOrigin inventTransOriginLoc = this.getInventTransOriginFromCaller();

        if (!inventTransOriginLoc.RecId && InventMarkingWithoutInventTransErrorFlight::instance().isEnabled())
        {
            return false;
        }

        InventMovement movementCaller = inventTransOriginLoc.inventMovement(InventDirection::None, false);

        return (movementCaller 
            && movementCaller.canBeReserved()
            && movementCaller.transSign() < 0);              
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispModType</Name>
				<Source><![CDATA[
    public PdsDispModuleType dispModType()
    {
        PdsDispModuleType  modType = PdsDispModuleType::Planning;

        switch (inventTransOrigin.ReferenceCategory)
        {
            case InventTransType::Sales:
                modType = PdsDispModuleType::Sales;
                break;

            case InventTransType::ProdLine:
                modType = PdsDispModuleType::Production;
                break;

            case InventTransType::TransferOrderShip:
                modType = PdsDispModuleType::Transfer;
                break;

            case InventTransType::WMSOrder:
                modType = PdsDispModuleType::Transfer;
                break;
        }

        return modType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doApply</Name>
				<Source><![CDATA[
    public void doApply()
    {
        if (mapMarkNow && mapMarkNow.elements())
        {
            element.updateMarking();

            inventTransOrigin_ds.executeQuery();
            inventTransOrigin_ds.active();

            markNow.setFocus();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonsActive</Name>
				<Source><![CDATA[
    void enableButtonsActive()
    {
        okCommandButton.   enabled(  interCompanyMarkingAllowed);
        buttonAutoMark.    enabled(  mapMarkNow && ! mapMarkNow.elements() && tmpInventTransMark.RecId && interCompanyMarkingAllowed ? true : false);
        applyCommandButton.enabled(  mapMarkNow && mapMarkNow.elements()   && tmpInventTransMark.RecId);
        referenceButton.enabled(tmpInventTransMark.TransType == InventTransType::QuarantineOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    public ItemId getItemId()
    {
        return this.getInventTransOriginFromCaller().ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransOriginFromCaller</Name>
				<Source><![CDATA[
    private InventTransOrigin getInventTransOriginFromCaller()
    {
        Common common = element.args().record();
        InventTransId inventTransId = common.(fieldName2id(element.args().dataset(),fieldStr(InventTransOrigin,InventTransId)));

        return InventTransOrigin::findByInventTransId(inventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransTypeForCaller</Name>
				<Source><![CDATA[
    private InventTransType getInventTransTypeForCaller()
    {
        return this.getInventTransOriginFromCaller().ReferenceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQtyMarkNow</Name>
				<Source><![CDATA[
    public InventQty getQtyMarkNow(InventTrans _inventTrans)
    {
        // Mark now information is temporarily stored in the CostAmountPosted field in the form
        _inventTrans.checkInvalidFieldAccess(false);

        return _inventTrans.CostAmountPosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        QueryBuildDataSource    qbdsTmpInventTransMark;

        mapMarkNow = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Record);

        super();
        XSysLastValue::getLast(this);
        qbdsTmpInventTransMark = tmpInventTransMark_ds.query().dataSourceTable(tableNum(InventTransOrigin));
        qbdsTmpInventTransMark.clearLinks();
        qbdsTmpInventTransMark.addLink(fieldNum(TmpInventTransMark,InventTransOrigin),fieldNum(InventTransOrigin,RecId), tmpInventTransMark_DS.name());

        imageListAppl   = new ImageListAppl_InventSettlement();
        windowMarkingStatus.imageList(imageListAppl.imageList());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMaps</Name>
				<Source><![CDATA[
    public void initMaps(
        InventTrans _inventTrans,
        InventDim   _inventDim)
    {
        if (!mapCollection)
        {
            mapCollection = new Map(Types::String, Types::Class);
        }     

        str mapKey = element.mapKey(_inventTrans, _inventDim);
        if (!mapCollection.exists(mapKey))
        {
            InventTransMarkCollection collection = TmpInventTransMark::markingCollection(inventTransOrigin, _inventDim, _inventTrans.Qty);
            mapCollection.insert(mapKey, collection);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapKey</Name>
				<Source><![CDATA[
    public str mapKey(
        InventTrans _inventTrans,
        InventDim   _inventDim)
    {
        return _inventDim.mapKey()+'#'+enum2str(inventTrans.direction());
    }

]]></Source>
			</Method>
			<Method>
				<Name>markTmp</Name>
				<Source><![CDATA[
    void markTmp(
        TmpInventTransMark  _tmp,
        NoYes               _markNow,
        boolean             _setMax     = false,
        InventQty           _qtyMax     = 0)
    {
        InventQty   qtyMax;

        element.setQtyMarkNow(element.getQtyMarkNow(inventTrans) + _tmp.QtyMarkNow);

        if (_markNow)
        {
            if (inventTrans.Qty < 0)
            {
                qtyMax = min(_tmp.QtyRemain,-inventTrans_ds.qtyRemain(inventTrans));
            }
            else
            {
                qtyMax = min(-_tmp.QtyRemain,inventTrans_ds.qtyRemain(inventTrans));
                qtyMax = -qtyMax;
            }

            if (! _setMax)
            {
                _tmp.QtyMarkNow = _tmp.QtyMarked ? - _tmp.QtyMarked : qtyMax;
            }
            else
            {
                if (abs(_qtyMax) < abs(qtyMax))
                {
                    qtyMax = -_qtyMax;
                }
                _tmp.QtyMarkNow = qtyMax;
            }
        }
        else
        {
            _tmp.QtyRemain += _tmp.QtyMarkNow;
            _tmp.QtyMarkNow = 0;
        }

        _tmp.QtyRemain -= _tmp.QtyMarkNow;
        _tmp.update();

        if (mapMarkNow.exists(_tmp.RecId))
        {
            mapMarkNow.remove(_tmp.RecId);
        }

        if (_tmp.QtyMarkNow)
        {
            mapMarkNow.insert(_tmp.RecId,_tmp);
        }

        element.setQtyMarkNow(element.getQtyMarkNow(inventTrans) - _tmp.QtyMarkNow);

        inventTrans_ds.setCurrent();

        if (_tmp.RecId == tmpInventTransMark.RecId)
        {
            tmpInventTransMark.data(_tmp);
            tmpInventTransMark_ds.setCurrent();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyMarked</Name>
				<Source><![CDATA[
    public InventQtyMarked qtyMarked(
        InventTrans _inventTrans,
        InventDim   _inventDim)
    {
        element.initMaps(_inventTrans,_inventDim);
        InventTransMarkCollection collection = mapCollection.lookup(element.mapKey(_inventTrans,_inventDim));
        return collection.parmQtyMarked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCaller</Name>
				<Source><![CDATA[
    void refreshCaller()
    {
        Common common = element.args().record();
        if (common.RecId)
        {
            if (FormDataUtil::isFormDataSource(common))
            {
                FormDataSource common_ds = FormDataUtil::getFormDataSource(common);
                if (common_ds)
                {
                    common_ds.reread();
                    common_ds.refresh();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        markNow.setFocus();

        PreReserveAndMatchReservations.enabled(element.canCallerBeReserved());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQtyMarkNow</Name>
				<Source><![CDATA[
    public void setQtyMarkNow(InventQty _qtyMarkNow)
    {
        // Mark now information is temporarily stored in the CostAmountPosted field in the form
        inventTrans.CostAmountPosted = _qtyMarkNow;

        if (mapInventDimInventTrans)
        {
            // Update the temporary value to the map
            mapInventDimInventTrans.insert(InventDim, inventTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpInventTransMarkBuild</Name>
				<Source><![CDATA[
    public void tmpInventTransMarkBuild()
    {
        InventTransMarkCollection collection;

        element.initMaps(inventTrans, inventDim);
        str mapKey = element.mapKey(inventTrans, inventDim);

        if (mapCollection.exists(mapKey))
        {
            collection = mapCollection.lookup(mapKey);
        }
        else
        {
            return;
        }

        delete_from tmpInventTransMark;
        collection.insertCollectionToTmpTable(tmpInventTransMark);

        element.setQtyMarkNow(0);
        inventTrans_ds.setCurrent();

        tmpInventTransMark_ds.executeQuery();

        inventTrans_ds.refresh();

        if (! tmpInventTransMark.RecId)
        {
            element.enableButtonsActive();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateLinkedPOItemReq</Name>
				<Source><![CDATA[
    protected boolean mustValidateLinkedPOItemReq()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarking</Name>
				<Source><![CDATA[
    void updateMarking()
    {
        if (element.mustValidateLinkedPOItemReq())
        {
            element.validateLinkedPOItemReq();
        }

        if (inventTransOrigin.RecId && mapMarkNow && mapMarkNow.elements())
        {
            TmpInventTransMark::updateTmpMark(inventTransOrigin.RecId, inventDim, inventTrans.Qty, mapMarkNow.pack(), true, PreReserveAndMatchReservations.value());

            element.refreshCaller();
        }

        element.clearMarkNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLinkedPOItemReq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines no purchase order is associated with it for item requirement before marking inventory transactions.
    /// </summary>
    private void validateLinkedPOItemReq()
    {
        if (ProjPreventInventMarkingChangeForPOLinkedToIR::instance().isEnabled())
        {
            if (InventTransOrigin.ReferenceCategory == InventTransType::Sales)
            {
                SalesLine salesLineLoc = SalesLine::findInventTransId(InventTransOrigin.InventTransId);
                if (salesLineLoc.isItemReqReferenced())
                {
                    PurchLine purchLineLoc = PurchLine::findInventTransId(salesLineLoc.InventRefTransId);

                    if (purchLineLoc)
                    {
                        throw Error(strFmt('@Proj:InventoryMarkingIR', salesLineLoc.InventTransId, purchLineLoc.InventTransId));
                    }
                }
            }
            else if (InventTransOrigin.ReferenceCategory == InventTransType::Purch)
            {
                PurchLine purchLineLoc = PurchLine::findInventTransId(InventTransOrigin.InventTransId);
                if (purchLineLoc.isPurchLineLinkedToItemRequirement())
                {
                    throw Error(strFmt('@Proj:InventoryMarkingPO', purchLineLoc.InventTransId, purchLineLoc.InventRefTransId));
                }
            }
        }
        else
        {
            if ((InventTransOrigin.ReferenceCategory == InventTransType::Sales && TmpInventTransMark.TransType == InventTransType::Purch)
                || (InventTransOrigin.ReferenceCategory == InventTransType::Purch && TmpInventTransMark.TransType == InventTransType::Sales))
            {
                SalesTable salesTableProj;
                PurchId purchId;

                if (InventTransOrigin.ReferenceCategory == InventTransType::Sales)
                {
                    salesTableProj = SalesTable::find(InventTransOrigin.ReferenceId);
                    purchId = TmpInventTransMark.TransRefId;
                }
                else
                {
                    salesTableProj = SalesTable::find(TmpInventTransMark.TransRefId);
                    purchId = InventTransOrigin.ReferenceId;
                }

                if (salesTableProj.SalesType == SalesType::ItemReq && salesTableProj.ProjId != '')
                {
                    InventTrans inventTransItemReq;

                    select firstonly RecId from inventTransItemReq
                    where inventTransItemReq.inventTransOrigin == InventTransOrigin.RecId
                       && inventTransItemReq.MarkingRefInventTransOrigin == TmpInventTransMark.InventTransOrigin;
     
                    if (inventTransItemReq)
                    {
                        InventTrans inventTransPurch;

                        select firstonly RecId from inventTransPurch
                        where inventTransPurch.inventTransOrigin == TmpInventTransMark.InventTransOrigin
                           && inventTransPurch.MarkingRefInventTransOrigin == InventTransOrigin.RecId;

                        if (inventTransPurch)
                        {
                            throw Error(strFmt('@Proj:InventoryMarkingItemReq', purchId));
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>InventTrans</Name>
				<Methods>
					<Method>
						<Name>leave</Name>
						<Source><![CDATA[
        public boolean leave()
        {
            boolean ret;

            if (mapMarkNow && mapMarkNow.elements())
            {
                if (Box::yesNo("@SYS73942",DialogButton::Yes) == DialogButton::Yes)
                {
                    element.updateMarking();

                    inventTrans_ds.active();
                }
                else
                {
                    element.clearMarkNow();
                }
            }

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            return true;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            return;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            QueryBuildDataSource    qbs_Origin;
            QueryBuildDataSource    qbs_Trans;
            QueryBuildDataSource    qbs_InventTable;
            QueryBuildDataSource    qbs_Product;

            super();

            // Add dynalink to limit values by InventTransId field
            qbs_Origin     = inventTransOrigin_q.dataSourceTable(tableNum(InventTransOrigin));
            qbs_Origin.clearDynalinks();
            qbs_Origin.addDynalink(fieldNum(InventTransOrigin, InventTransId),element.args().record(),fieldName2id(element.args().dataset(),fieldStr(InventTransOrigin,InventTransId)));

            // Add group by fields
            qbs_Origin.addGroupByField(fieldNum(InventTransOrigin,ItemId));
            qbs_Origin.addGroupByField(fieldNum(InventTransOrigin,ReferenceCategory));
            qbs_Origin.addGroupByField(fieldNum(InventTransOrigin,ReferenceId));
            qbs_Origin.addGroupByField(fieldNum(InventTransOrigin,InventTransId));
            qbs_Origin.addGroupByField(fieldNum(InventTransOrigin,RecId));

            // Add InventTrans datasource table ranges and more
            qbs_Trans = inventTransOrigin_q.dataSourceTable(tableNum(InventTrans));
            qbs_Trans.addGroupByField(fieldNum(InventTrans, InventTransOrigin));    // Used by some internal client methods
            // <GEERU>
            qbs_Trans.addGroupByField(fieldNum(InventTrans, Storno_RU));
            // </GEERU>

            // Add ranges
            qbs_Trans.addRange(fieldNum(InventTrans,ValueOpen)).value(queryValue(InventTransOpen::Yes));

            qbs_Trans.addRange(fieldNum(InventTrans,TransChildType)).value(queryValue(InventTransChildType::None));
            qbs_Trans.addRange(fieldNum(InventTrans,PackingSlipReturned)).value(queryValue(NoYes::No));

            // Add aggregation fields
            qbs_Trans.fields().addField(fieldNum(InventTrans,Qty),SelectionField::Sum);
            qbs_Trans.fields().addField(fieldNum(InventTrans,QtySettled),SelectionField::Sum);

            // Extend query to group InventTrans records by direction (issues and receipts)
            InventTransDirection::queryAddGroupByDirection(qbs_Trans);
            qbs_InventTable = qbs_Trans.addDataSource(tableNum(InventTable));
            qbs_InventTable.relations(true);
            qbs_InventTable.joinMode(JoinMode::ExistsJoin);
            qbs_InventTable.fetchMode(QueryFetchMode::One2One);
            qbs_Product = qbs_InventTable.addDataSource(tableNum(EcoResProduct));
            qbs_Product.relations(true);
            qbs_Product.joinMode(JoinMode::ExistsJoin);
            qbs_Product.fetchMode(QueryFetchMode::One2One);
            qbs_Product.addRange(fieldNum(EcoResProduct, PdsCWProduct)).value(queryValue(NoYes::No));
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            element.tmpInventTransMarkBuild();

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>qtyRemain</Name>
						<Source><![CDATA[
        display InventQtyRemain qtyRemain(InventTrans _inventTrans)
        {
            return _inventTrans.openQty() - element.qtyMarked(_inventTrans,inventDim) - element.getQtyMarkNow(_inventTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>qtyMarked</Name>
						<Source><![CDATA[
        display InventQtyMarked qtyMarked(InventTrans _inventTrans)
        {
            return element.qtyMarked(_inventTrans,inventDim);
        }

]]></Source>
					</Method>
					<Method>
						<Name>qtyMarkNow</Name>
						<Source><![CDATA[
        display InventQtyMarkNow qtyMarkNow(InventTrans _inventTrans)
        {
            return element.getQtyMarkNow(_inventTrans);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TmpInventTransMark</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            InventQty   qtyMax;

            if (tmpInventTransMark.RecId)
            {
                element.setQtyMarkNow(element.getQtyMarkNow(inventTrans) + tmpInventTransMark.orig().QtyMarkNow);
                tmpInventTransMark.QtyRemain += tmpInventTransMark.orig().QtyMarkNow;
            }

            if (tmpInventTransMark.QtyMarked * tmpInventTransMark.QtyMarkNow < 0)
            {
                if (abs(tmpInventTransMark.QtyMarked) < abs(tmpInventTransMark.QtyMarkNow))
                {
                    tmpInventTransMark.QtyMarkNow = -tmpInventTransMark.QtyMarked;
                }
            }
            else if (tmpInventTransMark.QtyRemain * tmpInventTransMark.QtyMarkNow < 0)
            {
                tmpInventTransMark.QtyMarkNow = 0;
            }
            else
            {
                if (inventTrans.Qty < 0)
                {
                    qtyMax = min(tmpInventTransMark.QtyRemain,-inventTrans_ds.qtyRemain(inventTrans));
                }
                else
                {
                    qtyMax = min(-tmpInventTransMark.QtyRemain,inventTrans_ds.qtyRemain(inventTrans));
                    qtyMax = - qtyMax;
                }

                if (abs(qtyMax) < abs(tmpInventTransMark.QtyMarkNow))
                {
                    tmpInventTransMark.QtyMarkNow = qtyMax;
                }
            }

            element.setQtyMarkNow(element.getQtyMarkNow(inventTrans) - tmpInventTransMark.QtyMarkNow);
            tmpInventTransMark.QtyRemain -= tmpInventTransMark.QtyMarkNow;

            super();

            if (mapMarkNow.exists(tmpInventTransMark.RecId))
            {
                mapMarkNow.remove(tmpInventTransMark.RecId);
            }

            if (tmpInventTransMark.QtyMarkNow)
            {
                mapMarkNow.insert(tmpInventTransMark.RecId,tmpInventTransMark);
            }

            tmpInventTransMark_ds.setCurrent();
            inventTrans_ds.setCurrent();
            inventTrans_ds.refresh();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            element.enableButtonsActive();

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            QueryBuildDataSource    qbs;
            QueryBuildRange         qbrTransType;

            super();

            qbs = tmpInventTransMark_q.dataSourceTable(tableNum(TmpInventTransMark));
            qbs.clearDynalinks();
            qbs.sortClear();

            qbrTransType = qbs.addRange(fieldNum(TmpInventTransMark, TransType));

            qbrTransType.value(
            // Filter Work transactions.
            strFmt('!%1,!%2', InventTransType::SummedUp, InventTransType::WHSWork)
            );

            qbrTransType.status(RangeStatus::Hidden);

            qbs.addSortIndex(indexNum(TmpInventTransMark,SortIdx));
        }

]]></Source>
					</Method>
					<Method>
						<Name>markNow</Name>
						<Source><![CDATA[
        edit NoYes markNow(
            boolean                 _set,
            TmpInventTransMark      _tmp,
            NoYes                   _markNow)
        {
            PdsBatchDispCheck_Reserve    pdsBatchDispCheck = PdsBatchDispCheck_Reserve::construct();

            if (_set && _tmp.RecId == tmpInventTransMark.RecId)
            {
                pdsBatchDispCheck.parmBatch(InventBatch::find(InventDim::find(tmpInventTransMark.InventDimId).InventBatchId,
                                                              inventTransOrigin.ItemId));
                if (pdsBatchDispCheck.checkNotRestrict(element.dispModType()))
                {
                    element.markTmp(tmpInventTransMark,_markNow);

                    tmpInventTransMark_ds.active();
                    inventTransOrigin_ds.refresh();
                }
                else
                {
                    element.clearMarkNow();

                    tmpInventTransMark_ds.active();
                    inventTransOrigin_ds.refresh();
                }
            }

            return _tmp.QtyMarkNow ? NoYes::Yes : NoYes::No;
        }

]]></Source>
					</Method>
					<Method>
						<Name>markingStatus</Name>
						<Source><![CDATA[
        display ImageRes markingStatus(TmpInventTransMark _tmpInventTransMark)
        {
            if (! _tmpInventTransMark.RecId || ! _tmpInventTransMark.QtyMarked)
            {
                return -1;
            }

            if (_tmpInventTransMark.Qty == 0)
            {
                return imageListAppl.image(#Image_InventMarkingError);
            }

            if (_tmpInventTransMark.Qty * _tmpInventTransMark.QtyRemain < 0)
            {
                return imageListAppl.image(#Image_InventMarkingWarning);
            }

            return imageListAppl.image(#Image_InventMarkingOK);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>qtyMarkNow</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                PdsBatchDispCheck_Reserve    pdsBatchDispCheck = PdsBatchDispCheck_Reserve::construct();
                boolean ret = super();

                if (ret)
                {
                    pdsBatchDispCheck.parmBatch(InventBatch::find(InventDim::find(tmpInventTransMark.InventDimId).InventBatchId,
                                                                      inventTransOrigin.ItemId));
                    ret = pdsBatchDispCheck.checkNotRestrict(element.dispModType());
                }
                return ret;
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                tmpInventTransMark_ds.write();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>InventDim</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            return;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            return true;
        }

]]></Source>
					</Method>
					<Method>
						<Name>qtyRemain</Name>
						<Source><![CDATA[
        display InventQtyRemain qtyRemain(InventDim _InventDim)
        {
            InventTrans inventTransLocal = mapInventDimInventTrans.lookup(_InventDim);
            return inventTransLocal.openQty() - element.qtyMarked(inventTransLocal, _InventDim) - element.getQtyMarkNow(inventTransLocal);
        }

]]></Source>
					</Method>
					<Method>
						<Name>qtyMarked</Name>
						<Source><![CDATA[
        display InventQtyMarked qtyMarked(InventDim _InventDim)
        {
            InventTrans inventTransLocal = mapInventDimInventTrans.lookup(_InventDim);
            return element.qtyMarked(inventTransLocal, _InventDim);
        }

]]></Source>
					</Method>
					<Method>
						<Name>qtyMarkNow</Name>
						<Source><![CDATA[
        display InventQtyMarkNow qtyMarkNow(InventDim _InventDim)
        {
            return element.getQtyMarkNow(mapInventDimInventTrans.lookup(_InventDim));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>InventTransOrigin</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            return;
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        public void linkActive()
        {
            InventQuarantineOrder   quarantineOrder;
            TmpInventTransMark      tmpInventTransMarkCaller;
            QueryBuildDataSource    qbs;

            InventLocationId        locationId;

            if (element.args()
            &&  element.args().record())
            {
                interCompanyMarkingAllowed = TradeInterCompany::markingAllowed(element.args().record());
                if (!interCompanyMarkingAllowed)
                {
                    warning("@SYS94313");
                }
            }
            else
            {
                interCompanyMarkingAllowed = true;
            }
            if (PdsGlobal::pdsIsCWItem(element.getItemId()))
            {
                warning("@PDS2015");
                interCompanyMarkingAllowed = false;
            }
            tmpInventTransMark_ds.allowEdit(interCompanyMarkingAllowed);

            if (element.args()                                              &&
                element.args().caller()                                     &&
                element.args().caller().name()  == formStr(InventMarking)   &&
                element.args().dataset()        == tableNum(TmpInventTransMark))  // the form has called itself
            {
                tmpInventTransMarkCaller = element.args().record().data();
                if (tmpInventTransMarkCaller.TransType == InventTransType::QuarantineOrder)  // lotId alone will find 4 transactions
                {
                    qbs = this.query().dataSourceTable(tableNum(InventTrans));

                    if (tmpInventTransMarkCaller.Qty < 0)
                    {
                        SysQuery::findOrCreateRange(qbs,fieldNum(InventTrans,StatusIssue)).value(queryValue(StatusIssue::None));
                    }
                    else
                    {
                        SysQuery::findOrCreateRange(qbs,fieldNum(InventTrans,StatusReceipt)).value(queryValue(StatusReceipt::None));
                    }
                    quarantineOrder = InventQuarantineOrder::find(tmpInventTransMarkCaller.TransRefId);

                    if (InventDim::find(tmpInventTransMarkCaller.InventDimId).InventLocationId != InventDim::find(quarantineOrder.InventDimId).InventLocationId)
                    {
                        locationId = InventDim::find(quarantineOrder.InventDimId).InventLocationId;
                    }
                    else
                    {
                        locationId = InventDim::find(quarantineOrder.InventDimIdQuarantine).InventLocationId;
                    }

                    qbs = this.query().dataSourceTable(tableNum(InventDim));
                    SysQuery::findOrCreateRange(qbs,fieldNum(InventDim,InventLocationId)).value(queryValue(locationId));
                }
            }

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            QueryBuildDataSource    qbsDim;
            TmpInventTransMark      tmpInventTransMarkCaller;

            qbsDim = this.query().dataSourceTable(tableNum(InventDim));
            qbsDim.sortClear();

            if (element.args() && element.args().dataset() == tableNum(TmpInventTransMark))
            {
                tmpInventTransMarkCaller = element.args().record() as TmpInventTransMark;
                InventDim::queryAddSortFinancialInvent(InventDimGroupSetup::newItemId(InventTransOrigin::find(tmpInventTransMarkCaller.InventTransOrigin).ItemId), qbsDim);
            }
            else
            {
                InventDim::queryAddSortFinancialInvent(InventDimGroupSetup::newItemId(ReqCalc::argsItemId(element.args())),qbsDim);
            }

            element.setQtyMarkNow(0);

            super();

            if (! inventTransOrigin.InventTransId)
            {
                element.tmpInventTransMarkBuild();
            }

            // Save current cursor.
            InventTrans currentInventDim;
            currentInventDim.data(inventDim);

            mapInventDimInventTrans = new Map(Types::Record, Types::Record);
            QueryRun localQueryRun;
            localQueryRun = new queryRun(this.query());
            localQueryRun.reset();
            while (localQueryRun.next())
            {
                InventTrans localInventTrans = localQueryRun.get(tableNum(InventTrans));
                InventDim localInventDim = localQueryRun.get(tableNum(InventDim));
                mapInventDimInventTrans.insert(localInventDim, localInventTrans);
            }
            
            // Restore cursor position.
            InventDim_ds.positionToRecord(currentInventDim);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>InventTransOriginMark</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            return;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>ButtonAutoMark</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.autoMark();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>InventTrans</Name>
			<Table>InventTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountAdjustment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountOperations</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountPosted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSecCurAdjustment_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSecCurPhysical_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSecCurPosted_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSettled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountSettledSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountStd</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountStdSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateClosed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateClosedSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateExpected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateFinancial</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateInvent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DatePhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GroupRefId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GroupRefType_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyInventDimTransferred</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimFixed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventDimIdSales_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransOriginDelivery_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransOriginSales_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransOriginTransit_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceReturned</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkingRefInventTransOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackingSlipId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackingSlipReturned</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWSettled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PickingRouteID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjAdjustRefId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjCategoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Qty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QtySettled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QtySettledSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnInventTransOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RevenueAmountPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShippingDateConfirmed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShippingDateRequested</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StatusIssue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StatusReceipt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Storno_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StornoPhysical_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAmountPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TimeExpected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransChildRefId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransChildType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValueOpen</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValueOpenSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VoucherPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NonFinancialTransferInventClosing</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DelayActive>No</DelayActive>
			<JoinSource>InventTransOrigin</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TmpInventTransMark</Name>
			<Table>TmpInventTransMark</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CostValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustVendAc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateExpected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateFinancial</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DatePhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackingSlipId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Qty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QtyMarked</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>qtyMarkNow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QtyRemain</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SortDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SortEnum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SortInventUpdType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SortText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransRefId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransType</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoSearch>No</AutoSearch>
			<LinkType>Passive</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventDim</Name>
			<Table>InventDim</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>configId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventBatchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventColorId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventVersionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventGtdId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventOwnerId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventProfileId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventSerialId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSiteId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSizeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStyleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LicensePlateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SHA1Hash</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSPalletId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>InventTrans</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventTransOrigin</Name>
			<Table>InventTransOrigin</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemInventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Party</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventTransOriginMark</Name>
			<Table>InventTransOrigin</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemInventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Party</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TmpInventTransMark</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS1287</Caption>
		<DialogSize xmlns="">Full</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<Height xmlns="">0</Height>
		<HeightMode xmlns="">Column</HeightMode>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">DialogDoubleTabs</Pattern>
		<PatternVersion xmlns="">1.3</PatternVersion>
		<StatusBarStyle xmlns="">SimpleWithoutClose</StatusBarStyle>
		<Style xmlns="">Dialog</Style>
		<TitleDataSource xmlns="">InventTrans</TitleDataSource>
		<Width xmlns="">0</Width>
		<WidthMode xmlns="">Column</WidthMode>
		<WindowResize xmlns="">Dynamic</WindowResize>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ControlMarking</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>PreReserveAndMatchReservations</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<HelpText>Marking will be based on a pre-reservation done against the selected transaction quantities. This process will attempt to match the issue transaction status against the receipt transaction status across multiple order line transactions, but the pre-reservation will only be attempted against the transactions which are not already marked.</HelpText>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@SCM:InventMarkingFormPreReserveOption</Label>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>MarkingTab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>MarkingTabPage</Name>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>GridMovement</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>InventTransOrigin_ReferenceCategory</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_AccountsPayable:InventMarking_InventTransOrigin_ReferenceCategory</HelpText>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ReferenceCategory</DataField>
										<DataSource>InventTransOrigin</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InventTransOrigin_ReferenceId</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ReferenceId</DataField>
										<DataSource>InventTransOrigin</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InventTransOrigin_InventTransId</Name>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>InventTransId</DataField>
										<DataSource>InventTransOrigin</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>InventTrans_Storno_RU</Name>
										<ElementPosition>1946157054</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>Storno_RU</DataField>
										<DataSource>InventTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>InventTrans_Qty</Name>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>openQty</DataMethod>
										<DataSource>InventTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
										<RotateSign>Yes</RotateSign>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>qtyRemain</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>qtyRemain</DataMethod>
										<DataSource>InventDim</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
										<RotateSign>Yes</RotateSign>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>qtyMarked</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>2113929214</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>qtyMarked</DataMethod>
										<DataSource>InventDim</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
										<RotateSign>Yes</RotateSign>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>qtyMarkNow</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>2130706430</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_AccountsPayable:InventMarking_qtyMarkNow</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>qtyMarkNow</DataMethod>
										<DataSource>InventDim</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
										<RotateSign>Yes</RotateSign>
									</AxFormControl>
								</Controls>
								<DataSource>InventTransOrigin</DataSource>
								<ShowRowLabels>No</ShowRowLabels>
								<VisibleRows>4</VisibleRows>
								<VisibleRowsMode>Fixed</VisibleRowsMode>
							</AxFormControl>
						</Controls>
						<Caption>@SCM:MarkingTransaction</Caption>
						<FastTabExpanded>Yes</FastTabExpanded>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>MarkedTab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>MarkedTabPage</Name>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>MarkedActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>AutoButtonGroup</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>ButtonAutoMark</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>2013265918</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@SYS85657</HelpText>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<Text>@SCM:AutoMark</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>ReferenceButtonGroup</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>ReferenceButton</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@SYS35169</HelpText>
												<Type>MenuFunctionButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<DataSource>TmpInventTransMark</DataSource>
												<MenuItemName>InventMarking</MenuItemName>
												<Text>@SYS81755</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>MarkedGrid</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>TmpInventTransMark_TransType</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_AccountsPayable:InventMarking_TmpInventTransMark_TransType</HelpText>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransType</DataField>
										<DataSource>TmpInventTransMark</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpInventTransMark_TransRefId</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransRefId</DataField>
										<DataSource>TmpInventTransMark</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InventTransOriginMark_InventTransId</Name>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>InventTransId</DataField>
										<DataSource>InventTransOriginMark</DataSource>
										<LookupButton>Never</LookupButton>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>TmpInventTransMark_Storno_RU</Name>
										<CountryRegionCodes>RU</CountryRegionCodes>
										<ElementPosition>1946157054</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataMethod>storno_RU</DataMethod>
										<DataSource>TmpInventTransMark</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpInventTransMark_Qty</Name>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Qty</DataField>
										<DataSource>TmpInventTransMark</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpInventTransMark_QtyRemain</Name>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>QtyRemain</DataField>
										<DataSource>TmpInventTransMark</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpInventTransMark_QtyMarked</Name>
										<ElementPosition>2113929214</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>QtyMarked</DataField>
										<DataSource>TmpInventTransMark</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TmpInventTransMark_qtyMarkNow</Name>
										<ElementPosition>2125463550</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_AccountsPayable:InventMarking_TmpInventTransMark_qtyMarkNow</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>qtyMarkNow</DataField>
										<DataSource>TmpInventTransMark</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>markNow</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2136997886</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_AccountsPayable:InventMarking_markNow</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataMethod>markNow</DataMethod>
										<DataSource>TmpInventTransMark</DataSource>
										<Label>@SYS73806</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormImageControl">
										<Name>WindowMarkingStatus</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2143289342</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Height>12</Height>
										<HeightMode>Auto</HeightMode>
										<Type>Image</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>15</Width>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackStyle>Transparent</BackStyle>
										<DataMethod>markingStatus</DataMethod>
										<DataSource>TmpInventTransMark</DataSource>
										<Label>@SYS1287</Label>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
								</Controls>
								<DataSource>TmpInventTransMark</DataSource>
								<ShowRowLabels>No</ShowRowLabels>
							</AxFormControl>
						</Controls>
						<Caption>@SYS97050</Caption>
						<FastTabExpanded>Yes</FastTabExpanded>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>MarkingInfoGroup</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>GroupInventDim</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@FieldDescriptions_AccountsPayable:InventMarking_GroupInventDim</HelpText>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>TmpInventTransMark_CustVendAc</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Left>0</Left>
								<LeftMode>LeftEdge</LeftMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>CustVendAc</DataField>
								<DataSource>TmpInventTransMark</DataSource>
								<LabelPosition>Above</LabelPosition>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>TmpInventTransMark_SortText</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_AccountsPayable:InventMarking_TmpInventTransMark_SortText</HelpText>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>SortText</DataField>
								<DataSource>TmpInventTransMark</DataSource>
								<Label>@SYS53630</Label>
								<LabelPosition>Above</LabelPosition>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>costPrice</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Left>0</Left>
								<LeftMode>RightEdge</LeftMode>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>costPrice</DataMethod>
								<DataSource>TmpInventTransMark</DataSource>
								<LabelPosition>Above</LabelPosition>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
						<AlignChildren>No</AlignChildren>
						<Caption>@SYS53627</Caption>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>GroupInfo</Name>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>custVendName</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>custVendName</DataMethod>
								<DataSource>TmpInventTransMark</DataSource>
								<LabelPosition>Above</LabelPosition>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>TmpInventTransMark_DateExpected</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_AccountsPayable:InventMarking_TmpInventTransMark_DateExpected</HelpText>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>DateExpected</DataField>
								<DataSource>TmpInventTransMark</DataSource>
								<LabelPosition>Above</LabelPosition>
								<LookupButton>Never</LookupButton>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>TmpInventTransMark_DatePhysical</Name>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_AccountsPayable:InventMarking_TmpInventTransMark_DatePhysical</HelpText>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>DatePhysical</DataField>
								<DataSource>TmpInventTransMark</DataSource>
								<LabelPosition>Above</LabelPosition>
								<LookupButton>Never</LookupButton>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>TmpInventTransMark_PackingSlipId</Name>
								<ElementPosition>1979711486</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>PackingSlipId</DataField>
								<DataSource>TmpInventTransMark</DataSource>
								<Label>@GLS222769</Label>
								<LabelPosition>Above</LabelPosition>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>TmpInventTransMark_DateFinancial</Name>
								<ElementPosition>2080374782</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_AccountsPayable:InventMarking_TmpInventTransMark_DateFinancial</HelpText>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>DateFinancial</DataField>
								<DataSource>TmpInventTransMark</DataSource>
								<LabelPosition>Above</LabelPosition>
								<LookupButton>Never</LookupButton>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>TmpInventTransMark_InvoiceId</Name>
								<ElementPosition>2113929214</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>InvoiceId</DataField>
								<DataSource>TmpInventTransMark</DataSource>
								<LabelPosition>Above</LabelPosition>
							</AxFormControl>
						</Controls>
						<Columnspace>35</Columnspace>
						<ColumnspaceMode>Fixed</ColumnspaceMode>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Top>0</Top>
				<TopMode>BottomEdge</TopMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OkCommandButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>ApplyCommandButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Apply</Command>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelCommandButton</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>