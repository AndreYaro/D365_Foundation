<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RPayPeriodTimeTable</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
    #Timeconstants
    public class RPayPeriodTimeTable extends FormRun
    {
        FormTabControl            ctrlTab;
        FormTabControl            ctrlListTab;
        FormListControl           lstDays;
        FormListControl           lstGroup;
        QueryBuildRange           criteriaOpen;
        WeekDay                   focusWeekDay;
        Imagelist                 imagelist;
        Map                       mapUnit;
        Map                       mapColumn;
}
]]></Source>
			</Method>
			<Method>
				<Name>clearMembersLists</Name>
				<Source><![CDATA[
    void clearMembersLists(FormListControl _list)
    {
        int column;
        ;

        for (column = _list.getColumnCount() - 1; column > 0; column--)
        {
            _list.deleteColumn(column);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGroupMap</Name>
				<Source><![CDATA[
    void createGroupMap()
    {
        RPayTimeLine           rPayTimeLine;
        RPayTimeGroupMember    rPayTimeGroupMember;
        str                    keyValue;
        real                   hour;
        ;
        while select Weekday, ToTime, FromTime from  rPayTimeLine
                  where rPayTimeLine.PayTimeId == payTimeTable.PayTimeId
              join TimeGroup from rPayTimeGroupMember
                  where rPayTimeGroupMember.PayCalendarTimeCode == rPayTimeLine.PayCalendarTimeCode

        {
            keyValue = int2str(rPayTimeLine.Weekday) + '.' + rPayTimeGroupMember.TimeGroup;

            hour = (rPayTimeLine.ToTime - rPayTimeLine.FromTime) / #SecondsPerHour;

            if (mapUnit.exists(keyValue))
            {
                mapUnit.insert(keyValue, hour + mapUnit.lookup(keyValue));
            }
            else
            {
                mapUnit.insert(keyValue, hour);
            }

            if (mapColumn.exists(rPayTimeGroupMember.TimeGroup))
            {
                mapColumn.insert(rPayTimeGroupMember.TimeGroup,
                                 hour + mapColumn.lookup(rPayTimeGroupMember.TimeGroup));
            }
            else
            {
                mapColumn.insert(rPayTimeGroupMember.TimeGroup, hour);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTimeMap</Name>
				<Source><![CDATA[
    void createTimeMap()
    {
        RPayTimeLine           rPayTimeLine;
        str                    keyValue;
        real                   hour;
        ;

        while select PayCalendarTimeCode, Weekday, ToTime, FromTime from rPayTimeLine
            where rPayTimeLine.PayTimeId == payTimeTable.PayTimeId
        {
            keyValue = int2str(rPayTimeLine.Weekday) + '.' + rPayTimeLine.PayCalendarTimeCode;

            hour = (rPayTimeLine.ToTime - rPayTimeLine.FromTime) / #secondsPerHour;

            if (mapUnit.exists(keyValue))
            {
                mapUnit.insert(keyValue, hour + mapUnit.lookup(keyValue));
            }
            else
            {
                mapUnit.insert(keyValue, hour);
            }

            if (mapColumn.exists(rPayTimeLine.PayCalendarTimeCode))
            {
                mapColumn.insert(rPayTimeLine.PayCalendarTimeCode,
                                 hour + mapColumn.lookup(rPayTimeLine.PayCalendarTimeCode));
            }
            else
            {
                mapColumn.insert(rPayTimeLine.PayCalendarTimeCode, hour);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>curPayTimeId</Name>
				<Source><![CDATA[
    RPayTimeId curPayTimeId()
    {
        return payTimeTable.PayTimeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>curPayTypeId</Name>
				<Source><![CDATA[
    int curPayTypeId()
    {
        return extendedTypeNum(RPayPeriodTimeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>curWeekDay</Name>
				<Source><![CDATA[
    WeekDay curWeekDay()
    {
        return focusWeekDay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doResearch</Name>
				<Source><![CDATA[
    #define.Value2(2)
    public void doResearch(Object _object = null)
    {
        int tabIdx = 1;
        ;
        if (classNum(RPayTimeCopyDay) == classIdGet(_object))
        {
            tabIdx = #Value2;
            element.updateMembersLists();
        }

        this.dataSource(tabIdx).research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOwnColumn</Name>
				<Source><![CDATA[
    int getOwnColumn(FormListControl      _listControl,
                     str                  _txtColumn)
    {
        int column;
        ;

        for (column = _listControl.getColumnCount() - 1; column > 0; column--)
        {
            if (_listControl.getColumn(column).text() == _txtColumn)
            {
                break;
            }
        }
        return column;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    #ResAppl
    void init()
    {
        FormListColumn          formListColumn;
        ;
        super();

        ctrlTab        = tab;
        //lstDays        = listDays;
        //lstGroup       = listGroup;

        //ctrlListTab    = listTab;

        formListColumn = new FormListColumn("@GLS105289", 0, 40);
        lstDays.addColumn(1,  formListColumn);
        lstGroup.addColumn(1, formListColumn);

        imagelist      = new Imagelist(Imagelist::smallIconWidth(), Imagelist::smallIconHeight());
        imagelist.add(new Image(3116));
        imagelist.add(new Image(#ImageReportSum));

        lstDays.width(250);
        lstGroup.width(250);

        focusWeekDay = 1;

        this.setButtons();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtons</Name>
				<Source><![CDATA[
    void setButtons()
    {
        payTimeCopyDay.enabled(ctrlTab.tab() == 2 && payTimeTable.Periodicity > 1);
        //upButton.enabled(focusWeekDay <= payTimeTable.Periodicity && focusWeekDay > 1);
        //downButton.enabled(focusWeekDay < payTimeTable.Periodicity);

        payTimeLine_ds.allowCreate(focusWeekDay <= payTimeTable.Periodicity ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMembersLists</Name>
				<Source><![CDATA[
    void updateMembersLists()
    {
        int                    column,i;
        MapIterator            iterator;
        str                    keyValue;
        FormListItem           formListItem;
        FormListColumn         formListColumn;
        FormListControl        frmList;
        ;
        mapUnit   = new Map(Types::String, Types::Real);
        mapColumn = new Map(Types::String, Types::Real);

        if (ctrlListTab.tab() == 1)
        {
            frmList = lstDays;
            this.createTimeMap();
        }
        else
        {
            frmList = lstGroup;
            this.createGroupMap();
        }

        frmList.lockWindowUpdate(true);
        frmList.deleteAll();

        formListItem = new FormListItem("@SYS9242", 1);
        formListItem.data(payTimeTable.Periodicity + 1);
        frmList.addItem(formListItem);

        iterator = new MapIterator(mapColumn);

        while (iterator.more())
        {
            keyValue = iterator.key();
            column = this.getOwnColumn(frmList, ctrlListTab.tab() == 1 ?
                                                RPayCalendarTimeTable::find(keyValue).ShortName :
                                                RPayTimeGroupTable::find(keyValue).ShortName);

            if (! column)
            {
                column = frmList.getColumnCount();
                formListColumn = new FormListColumn(ctrlListTab.tab() == 1 ?
                                                    RPayCalendarTimeTable::find(keyValue).ShortName :
                                                    RPayTimeGroupTable::find(keyValue).ShortName, column);
                formListColumn.format(FormListFormat::Right);
                formListColumn.text(ctrlListTab.tab() == 1 ?
                                    RPayCalendarTimeTable::find(keyValue).ShortName :
                                    RPayTimeGroupTable::find(keyValue).ShortName);
                formListColumn.width(50);
                frmList.addColumn(column, formListColumn);
            }
            formListItem = new FormListItem(num2str(iterator.value(), 2, 2, 1, 0));
            formListItem.subItem(column);
            frmList.setItem(formListItem);

            iterator.next();
        }

        for (i = payTimeTable.Periodicity; i > 0; i--)
        {
            formListItem = new FormListItem(int2str(i), 0);

            if (i == focusWeekDay)
            {
                formListItem.stateFocus(true);
                formListItem.stateSelected(true);
            }

            formListItem.data(i);
            frmList.addItem(formListItem);

            iterator = new MapIterator(mapColumn);

            while (iterator.more())
            {
                column = this.getOwnColumn(frmList, ctrlListTab.tab() == 1 ?
                                                    RPayCalendarTimeTable::find(iterator.key()).ShortName :
                                                    RPayTimeGroupTable::find(iterator.key()).ShortName);

                keyValue = int2str(i) + '.' + iterator.key();
                if (mapUnit.exists(keyValue))
                {
                    formListItem = new FormListItem(num2str(mapUnit.lookup(keyValue), 2, 2, 1, 0));
                    formListItem.subItem(column);
                    frmList.setItem(formListItem);
                }

                iterator.next();
            }
        }

        frmList.lockWindowUpdate(false);
        this.setButtons();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>PayTimeTable</Name>
				<Methods>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            super();
            payTimeTable.PeriodType = RPayPeriodType::Period;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            this.query().dataSourceNo(1).addRange(fieldNum(RPayTimeTable, PeriodType)).value(queryValue(RPayPeriodType::Period));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>PayTimeLine</Name>
				<Methods>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            super();

            element.clearMembersLists(lstDays);
            element.clearMembersLists(lstGroup);
            element.updateMembersLists();
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            payTimeLine.Weekday = focusWeekDay;
            super();

            element.updateMembersLists();
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            criteriaOpen.value(int2str(focusWeekDay));
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            this.cacheAddMethod(tableMethodStr(RPayTimeLine, shortName));

            criteriaOpen  = this.query().dataSourceNo(1).addRange(fieldNum(RPayTimeLine, Weekday));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>PayCalendarTimeCode</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                payTimeLine_ds.cacheCalculateMethod(tableMethodStr(RPayTimeLine, shortName));
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Tab</Name>
				<Type>Tab</Type>
				<Methods>
					<Method>
						<Name>tabChanged</Name>
						<Source><![CDATA[
        void tabChanged(int _fromTab, int _toTab)
        {
            super(_fromTab, _toTab);
            /*
            if (_toTab == #Value2)
            {
                element.clearMembersLists(lstDays);
                element.clearMembersLists(lstGroup);
                element.updateMembersLists();
            }

            element.setButtons();
            */
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>PayTimeTable</Name>
			<Table>RPayTimeTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Holiday</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PayTimeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PeriodFrequency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Periodicity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PeriodType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<Index>TimeIdx</Index>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>PayTimeLine</Name>
			<Table>RPayTimeLine</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FromTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PayCalendarTimeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PayTimeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ToTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Weekday</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>PayTimeTable</JoinSource>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@RUP990</Caption>
		<DataSource xmlns="">PayTimeTable</DataSource>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Pattern xmlns="">Task</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<TitleDataSource xmlns="">PayTimeTable</TitleDataSource>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>357913941</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>PayTimeCopy</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>RPayTimeCopy</MenuItemName>
								<MenuItemType>Action</MenuItemType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>PayTimeCopyDay</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>RPayTimeCopyDay</MenuItemName>
								<MenuItemType>Action</MenuItemType>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Overview</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>MRPTimeTable</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>MRPTimeTable_PayTime</Name>
										<ElementPosition>613566756</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>PayTimeId</DataField>
										<DataSource>PayTimeTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>MRPTimeTable_Name</Name>
										<ElementPosition>920350134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>250</Width>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Name</DataField>
										<DataSource>PayTimeTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>PayTimeTable_PeriodFrequency</Name>
										<ElementPosition>1227133512</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>PeriodFrequency</DataField>
										<DataSource>PayTimeTable</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>PayTimeTable_Periodicity</Name>
										<ElementPosition>1533916890</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<AllowNegative>No</AllowNegative>
										<DataField>Periodicity</DataField>
										<DataSource>PayTimeTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>PayTimeTable_Holiday</Name>
										<ElementPosition>1840700268</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>Holiday</DataField>
										<DataSource>PayTimeTable</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>PayTimeTable</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS9039</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>