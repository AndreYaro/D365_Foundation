<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BudgetControlConfiguration</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BudgetControlConfiguration extends FormRun implements OfficeIGeneratedWorkbookCustomExporter
{
    const RecId ZeroRecId = 0;

    LedgerRecId primaryLedgerRecId;

    BudgetControlDimensionsListPanel controlDimensionsListPanel;

    BudgetControlRuleManager budgetControlRuleManager;
    DimensionExpressionController budgetControlRuleExpressionController;

    BudgetControlGroupManager budgetControlGroupManager;
    DimensionExpressionController budgetControlGroupExpressionController;

    boolean allowEdit;
    boolean isActive;

    boolean draftExists;
    boolean activeExists;

    boolean isViewActiveMode;

    boolean isSelectingNewRule;
    boolean isRuleNew;
    boolean isRuleCriteriaBuilderControlUpdating;

    boolean isSelectingNewGroupMember;
    boolean isGroupMemberNew;
    boolean isBudgetGroupMemberCriteriaBuilderControlUpdating;

    Map groupMemberTreeIdx;
    Set parentGroupMembers;
    boolean isSelectingTreeItem;

    [FormObservable]
    BudgetCycleTimeSpanName budgetGroup_BudgetCycleTimeSpanName;

    [FormObservable]
    boolean isBudgetGroupsTreeRootNodeSelected;

    // Map used to cache the selected budget cycle time span for each budget control budget cycle.
    Map selectedBudgetCycleTimeSpans;

}
]]></Source>
			</Method>
			<Method>
				<Name>addBudgetGroupsTreeItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the budget group member to the tree control as a child of the specified parent tree item.
    /// </summary>
    /// <param name="_parentTreeItemIdx">
    /// The parent tree item index.
    /// </param>
    /// <param name="_budgetGroupMember">
    /// The <c>BudgetGroupMember</c> record.
    /// </param>
    /// <remarks>
    /// The method will call itself for all the child <c>BudgetGroupMember</c> records
    /// of the specified <c>BudgetGroupMember</c> record.
    /// </remarks>
    public void addBudgetGroupsTreeItem(TreeItemIdx _parentTreeItemIdx, BudgetGroupMember _budgetGroupMember)
    {
        // Determine whether the member being added is a parent.
        // This will set the initial tree item expandable state.
        boolean isParent;

        if (parentGroupMembers && parentGroupMembers.in(_budgetGroupMember.RecId))
        {
            isParent = true;
        }

        treeItemIdx treeItemIdx = SysFormTreeControl::addTreeItem(
            budgetGroupsTree,
            _budgetGroupMember.Name,
            _parentTreeItemIdx,
            _budgetGroupMember.RecId,
            0,
            isParent);

        // Add the tree item index to the map.
        groupMemberTreeIdx.insert(_budgetGroupMember.RecId, treeItemIdx);

        if (isParent)
        {
            BudgetGroupMember treeGroupMember;

            while select treeGroupMember
                order by Name
                where treeGroupMember.ParentBudgetGroupMember == _budgetGroupMember.RecId
            {
                // Add the child group member to the tree.
                this.addBudgetGroupsTreeItem(treeItemIdx, treeGroupMember);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    public boolean canClose()
    {
        boolean canClose = super();

        // The group member does not fire a leaveRecord.
        canClose = canClose && budgetGroupMember_ds.leaveRecord();

        return canClose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        if (allowEdit &&
            BudgetControlConfigurationManager::isConfigurationEditPermitted(budgetControlConfiguration.RecId))
        {
            // The current user is still in control of the draft configuration.
            // Clear the in use fields to release the edit lock.
            BudgetControlConfigurationManager::clearInUse(budgetControlConfiguration.RecId);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBudgetGroupsTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the tree control with the <c>BudgetGroupMember</c> records
    /// for the current <c>BudgetControlConfiguration</c> record.
    /// </summary>
    public void fillBudgetGroupsTree()
    {
        // Initialize the group member tree index map.
        // Key: BudgetGroupMember.RecId, Value: budgetGroupsTree TreeItemIdx.
        groupMemberTreeIdx = new Map(Types::Int64, Types::Integer);

        // Reset the tree.
        budgetGroupsTree.deleteAll();

        // Determine whether the configuration has any budget groups.
        // This will set the initial tree item expandable state.
        boolean configurationHasBudgetGroups = BudgetGroup::existByBudgetControlConfiguration(budgetControlConfiguration.RecId);

        // Create the read only empty root node for the primary ledger.
        TreeItemIdx rootTreeItemIdx = SysFormTreeControl::addTreeItem(
            budgetGroupsTree,
            Ledger::name(primaryLedgerRecId),
            FormTreeAdd::Root,
            0,
            0,
            configurationHasBudgetGroups);

        // Add the root index to the map.
        groupMemberTreeIdx.insert(0, rootTreeItemIdx);

        if (configurationHasBudgetGroups)
        {
            // Initialize the parent group members set.
            this.initParentBudgetGroupMembers();

            BudgetGroup treeGroup;
            BudgetGroupMember treeGroupMember;

            while select treeGroupMember
                order by BudgetGroup, Name
                where treeGroupMember.ParentBudgetGroupMember == 0
                exists join treeGroup
                    where treeGroup.RecId == treeGroupMember.BudgetGroup
                        && treeGroup.BudgetControlConfiguration == budgetControlConfiguration.RecId
            {
                // Add the item and all the sub-items of the item.
                this.addBudgetGroupsTreeItem(rootTreeItemIdx, treeGroupMember);
            }
        }

        // Select the active records tree item.
        element.selectBudgetGroupsTreeItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedBudgetCycleTimeSpan</Name>
				<Source><![CDATA[
    public BudgetCycleTimeSpan getSelectedBudgetCycleTimeSpan(RecId _budgetControlBudgetCycleRecId = 0)
    {
        RecId budgetControlBudgetCycleRecId;
        BudgetCycleTimeSpan budgetCycleTimeSpan;

        if (prmisDefault(_budgetControlBudgetCycleRecId))
        {
            budgetControlBudgetCycleRecId = budgetControlBudgetCycle.RecId;
        }
        else
        {
            budgetControlBudgetCycleRecId = _budgetControlBudgetCycleRecId;
        }

        if (selectedBudgetCycleTimeSpans.exists(budgetControlBudgetCycleRecId))
        {
            budgetCycleTimeSpan = selectedBudgetCycleTimeSpans.lookup(budgetControlBudgetCycleRecId);
        }

        return budgetCycleTimeSpan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataEntityContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ExportToExcelDataEntityContext</c> that specifies what should be exported for the specified menu item.
    /// </summary>
    /// <param name="_menuItem">The menu item.</param>
    /// <returns>
    /// Returns the <c>ExportToExcelDataEntityContext</c> that specifies what should be exported for the specified menu item; otherwise, null.
    /// </returns>
    public ExportToExcelDataEntityContext getDataEntityContext(OfficeGeneratedExportMenuItem _menuItem)
    {
        BudgetControlConfigurationStatus configurationStatus = this.getStatus();

        if (configurationStatus == BudgetControlConfigurationStatus::Active
            && !isViewActiveMode
            && Box::yesNo("@Budget:BudgetControlConfiguration_OpenInOfficeCreateDraftPrompt", DialogButton::Yes) == DialogButton::Yes)
        {
            this.createDraftConfiguration();

            budgetControlConfiguration_DS.selectionChanged();

            configurationStatus = this.getStatus();
        }

        return BudgetControlConfigurationEntityHelper::getExportToExcelDataEntityContext(_menuItem, curExt(), configurationStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>customizeMenuOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Customizes the options used to populate the Office Menu.
    /// </summary>
    /// <param name = "_menuOptions">The menu options to be customized.</param>
    public void customizeMenuOptions(OfficeMenuOptions _menuOptions)
    {
        BudgetControlConfigurationEntityHelper::customizeOfficeMenuOptions(_menuOptions, !isViewActiveMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        #SysSystemDefinedButtons

        // Prevent caller records from initializing the form.
        element.args().record(null);

        // Get the primary ledger.
        primaryLedgerRecId = Ledger::current();

        if (!primaryLedgerRecId)
        {
            throw error(strfmt("@SYS19096", this.name(), tablestr(Ledger)));
        }

        // Get the active configuration state.
        activeExists = BudgetControlConfiguration::existActiveForPrimaryLedger(primaryLedgerRecId);

        if (element.args().menuItemName() == menuitemDisplayStr(BudgetControlConfigurationViewActive)
            || !hasTableAccess(tablenum(BudgetControlConfiguration), AccessType::Add))
        {
            // Form has been opened for view active configuration mode
            // or the user only has view access to the configuration.
            isViewActiveMode = true;
        }
        else
        {
            isViewActiveMode = false;

            // Cleanup invalid user groups for the message levels setup.
            BudgetControlUserGroupManager::cleanupForDeletedUserGroups();
        }

        // Create the dimension attributes list panel.
        controlDimensionsListPanel = BudgetControlDimensionsListPanel::newForm(
            element,
            element.controlId(formcontrolstr(BudgetControlConfiguration, DimensionAttributesList)));

        super();

        // Hide the show filters button as this form is patterned after TOC forms that should not display them.
        element.control(element.controlId(#SystemDefinedShowFiltersButton)).visible(false);

        // Initialize the dimension attributes list panel.
        controlDimensionsListPanel.init();

        // Initialize the rule expression controller.
        budgetControlRuleExpressionController = DimensionExpressionController::newForExpressionBuilder(ruleCriteriaBuilder);
        ruleCriteriaBuilder.onRemovedExpression += eventhandler(this.onRuleCriteriaBuilderControlRemovedRow);
        ruleCriteriaBuilder.onRemovingExpression += eventhandler(this.onRuleCriteriaBuilderControlRemovingRow);

        // Initialize the group member expression controller.
        budgetControlGroupExpressionController = DimensionExpressionController::newForExpressionBuilder(budgetGroupMemberCriteriaBuilder);
        budgetGroupMemberCriteriaBuilder.onRemovedExpression += eventhandler(this.onBudgetGroupMemberCriteriaBuilderControlRemovedRow);
        budgetGroupMemberCriteriaBuilder.onRemovingExpression += eventhandler(this.onBudgetGroupMemberCriteriaBuilderControlRemovingRow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParentBudgetGroupMembers</Name>
				<Source><![CDATA[
    public void initParentBudgetGroupMembers()
    {
        parentGroupMembers = new Set(Types::Int64);

        BudgetGroup childBudgetGroup;
        BudgetGroupMember childBudgetGroupMember;

        while select ParentBudgetGroupMember from childBudgetGroupMember
            group by ParentBudgetGroupMember
            where childBudgetGroupMember.ParentBudgetGroupMember != 0
            exists join childBudgetGroup
                where childBudgetGroup.RecId == childBudgetGroupMember.BudgetGroup
                    && childBudgetGroup.BudgetControlConfiguration == budgetControlConfiguration.RecId
        {
            parentGroupMembers.add(childBudgetGroupMember.ParentBudgetGroupMember);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSelectedBudgetCycleTimeSpans</Name>
				<Source><![CDATA[
    public void initSelectedBudgetCycleTimeSpans()
    {
        BudgetCycleTimeSpan localBudgetCycleTimeSpan;
        BudgetCycle localBudgetCycle;
        BudgetControlBudgetCycle localBudgetControlBudgetCycle;

        selectedBudgetCycleTimeSpans = new Map(Types::Int64, Types::Record);

        while select RecId from localBudgetControlBudgetCycle
            where localBudgetControlBudgetCycle.BudgetControlConfiguration == budgetControlConfiguration.RecId
            join RecId from localBudgetCycle
                where localBudgetCycle.RecId == localBudgetControlBudgetCycle.BudgetCycle
                join localBudgetCycleTimeSpan
                    where localBudgetCycleTimeSpan.RecId == localBudgetCycle.BudgetCycleTimeSpan
        {
            element.setSelectedBudgetCycleTimeSpan(localBudgetControlBudgetCycle.RecId, localBudgetCycleTimeSpan);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetGroupsTreeRootNodeSelected</Name>
				<Source><![CDATA[
    public boolean isBudgetGroupsTreeRootNodeSelected()
    {
        boolean isRoot = false;

        if (budgetGroupsTree.getSelection() == budgetGroupsTree.getRoot())
        {
            isRoot = true;
        }

        isBudgetGroupsTreeRootNodeSelected = isRoot;

        return isBudgetGroupsTreeRootNodeSelected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyMainAccountsTab</Name>
				<Source><![CDATA[
    /// <summary>
    /// Based on the current budget control configuration this method
    /// refreshes the main account datasource and other form elements based on
    /// the current configuration record since the main account datasource handles
    /// the control configuration restriction programmatically.
    /// </summary>
    public void modifyMainAccountsTab()
    {
        Query query = mainAccount_DS.query();

        QueryBuildDataSource mainAccount_qbds = query.dataSourceTable(tablenum(MainAccount));
        mainAccount_qbds.clearRange(fieldnum(MainAccount, RecId));

        if (BudgetControlDimensionAttribute::isMainAccountInBudgetControlDimAttrbs(budgetControlConfiguration.RecId))
        {
            // Cleanup the main account records.
            BudgetControlConfigurationManager::cleanupControlMainAccounts(budgetControlConfiguration.RecId);

            // Add a range to cause the query to return nothing.
            mainAccount_qbds.addRange(fieldnum(MainAccount, RecId)).value(SysQuery::value(ZeroRecId));

            mainAccount_DS.allowEdit(false);
            mainAccountsSelectButtonGroup.enabled(false);
            mainAccountsFilterButtonGroup.enabled(false);
        }
        else
        {
            if (allowEdit)
            {
                mainAccount_DS.allowEdit(true);
                mainAccountsSelectButtonGroup.enabled(true);
                mainAccountsFilterButtonGroup.enabled(true);
            }
            else
            {
                // For active control configuration show the details only in read only mode.
                mainAccount_DS.allowEdit(false);
                mainAccountsSelectButtonGroup.enabled(false);
                mainAccountsFilterButtonGroup.enabled(false);
            }
        }

        // Call execute query to retrieve the records based on the new query ranges.
        mainAccount_DS.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAllowEditForGroupValidationFailure</Name>
				<Source><![CDATA[
    public void resetAllowEditForGroupValidationFailure()
    {
        if (allowEdit
            && !BudgetControlConfigurationManager::isConfigurationEditPermitted(budgetControlConfiguration.RecId))
        {
            // The allow edit state has changed since it was last checked.
            // Update the state of the current data source record,
            // otherwise the calling data source validate method will be executed again.
            if (BudgetGroupMember::exist(budgetGroupMember.RecId))
            {
                // Research the current state of the record attempted to be updated.
                budgetGroupMember_ds.research(true);
            }
            // else, new records not committed were removed by the user who unlocked the configuration.

            // Reset the form and all dependent data.
            allowEdit = false;
            budgetControlConfiguration_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAllowEditForRuleValidationFailure</Name>
				<Source><![CDATA[
    public void resetAllowEditForRuleValidationFailure()
    {
        if (allowEdit
            && !BudgetControlConfigurationManager::isConfigurationEditPermitted(budgetControlConfiguration.RecId))
        {
            // The allow edit state has changed since it was last checked.
            // Update the state of the current data source record,
            // otherwise the calling data source validate method will be executed again.
            if (BudgetControlRule::exist(budgetControlRule.RecId))
            {
                // Research the current state of the record attempted to be updated.
                budgetControlRule_ds.research(true);
            }
            // else, new records not committed were removed by the user who unlocked the configuration.

            // Reset the form and all dependent data.
            allowEdit = false;
            budgetControlConfiguration_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAllowEditForValidationFailure</Name>
				<Source><![CDATA[
    public void resetAllowEditForValidationFailure(FormDataSource _formDataSourceValidated)
    {
        if (allowEdit &&
            !BudgetControlConfigurationManager::isConfigurationEditPermitted(budgetControlConfiguration.RecId))
        {
            // The allow edit state has changed since it was last checked.
            // Update the state of the current data source record,
            // otherwise the calling data source validate method will be executed again.
            if (_formDataSourceValidated.cursor().RecId)
            {
                // Read the current state of the record attempted to be updated.
                _formDataSourceValidated.reread();
            }
            else
            {
                // Remove the uncommitted record.
                _formDataSourceValidated.delete();
            }

            // Reset the form and all dependent data.
            allowEdit = false;
            budgetControlConfiguration_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDraftConfiguration</Name>
				<Source><![CDATA[
    private void createDraftConfiguration()
    {
        if (!BudgetControlConfiguration::existDraftForPrimaryLedger(primaryLedgerRecId))
        {
            // Get the current draft configuration RecId if one exists.
            // There may not have been a draft configuration when the form was opened.
            BudgetControlConfigurationRecId draftControlConfigurationRecId = BudgetControlConfigurationManager::getDraftConfigurationRecIdCacheDisabled(primaryLedgerRecId);

            if (draftControlConfigurationRecId)
            {
                // Validate that the user can edit the draft configuration.
                BudgetControlConfigurationManager::validateConfigurationEditPermitted(draftControlConfigurationRecId);
            }
            else
            {
                // No other user has created a draft configuration during the time the form was open.
                // Edit the active configuration for the primary ledger.
                BudgetControlConfigurationManager::createDraftConfiguration(primaryLedgerRecId);
            }
        }

        budgetControlConfiguration_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetBudgetGroupMemberCriteriaBuilder</Name>
				<Source><![CDATA[
    private void resetBudgetGroupMemberCriteriaBuilder()
    {
        isGroupMemberNew = false;

        // Call apply to reset the pending changes state of the control.
        budgetGroupMemberCriteriaBuilder.apply();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetBudgetGroupsTree</Name>
				<Source><![CDATA[
    public void resetBudgetGroupsTree()
    {
        if (groupMemberTreeIdx)
        {
            // The groupMemberTreeIdx is filled the first time when the budget groups page is viewed.
            // Only reset the tree if it has been viewed before.
            this.fillBudgetGroupsTree();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetRuleCriteriaBuilder</Name>
				<Source><![CDATA[
    private void resetRuleCriteriaBuilder()
    {
        isRuleNew = false;

        // Call apply to reset the pending changes state of the control.
        ruleCriteriaBuilder.apply();
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectBudgetGroupsTreeItem</Name>
				<Source><![CDATA[
    public void selectBudgetGroupsTreeItem()
    {
        if (groupMemberTreeIdx
            && groupMemberTreeIdx.exists(budgetGroupMember.RecId))
        {
            TreeItemIdx treeItemIdx = groupMemberTreeIdx.lookup(budgetGroupMember.RecId);

            // Select the item as it is the current data source record.
            budgetGroupsTree.select(treeItemIdx);

            // Expand the parent item to show the selected item.
            SysFormTreeControl::expandTree(budgetGroupsTree, budgetGroupsTree.getParent(treeItemIdx), 1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the AllowEdit property on the data sources.
    /// </summary>
    public void setAllowEdit()
    {
        // Allow the edit of the records only when editing draft.
        budgetControlConfiguration_ds.allowEdit(allowEdit);
        budgetOverrideUserGroupOption_ds.allowEdit(allowEdit);
        budgetControlBudgetCycle_ds.allowEdit(allowEdit);
        budgetControlBudgetCycle_ds.allowCreate(allowEdit);
        userGroupInfo_ds.allowEdit(allowEdit);
        budgetControlSourceIntegratorEnabledTmp_ds.allowEdit(allowEdit);

        // Allow the delete of the records only when editing draft.
        budgetOverrideUserGroupOption_ds.allowDelete(allowEdit);
        budgetControlBudgetCycle_ds.allowDelete(allowEdit);

        // The other data sources have unique setAllowEdit methods
        // or have the properties set at the data source level.

        // Enable the dimension attributes list.
        dimensionAttributesList.enabled(allowEdit);

        // Enable the user group options buttons.
        userGroupButtonGroup.enabled(allowEdit);

        // Enable the user group message levels buttons.
        userGroupMessageLevelsSelectButtonGroup.enabled(allowEdit);

        if (isViewActiveMode)
        {
            // Do not enable the maintain buttons when opened in view active configuration mode.
            createDraftButton.enabled(false);
            restoreButton.enabled(false);
            unlockButton.visible(false);

            element.setConfigurationViewEditMode(false);
        }
        else
        {
            // Enable the maintain buttons.
            createDraftButton.enabled(!draftExists);
            restoreButton.enabled(draftExists && allowEdit && activeExists);
            unlockButton.visible(draftExists && !allowEdit);

            element.setConfigurationViewEditMode(allowEdit);
        }

        // Enable the activation buttons.
        activateConfigurationButton.enabled(allowEdit);

        this.setVisibleEnableBudgetControl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowEditForBudgetGroup</Name>
				<Source><![CDATA[
    public void setAllowEditForBudgetGroup()
    {
        if (allowEdit)
        {
            // The configuration is editable.
            newBudgetGroupMemberButton.enabled(true);

            if (element.isBudgetGroupsTreeRootNodeSelected())
            {
                // The root ledger item is not editable.
                budgetGroup_ds.allowEdit(false);
                budgetGroup_ds.allowDelete(false);
                budgetGroupMember_ds.allowEdit(false);
                budgetGroupMember_ds.allowDelete(false);

                budgetControlGroupExpressionController.setEnabled(false);
                budgetControlGroupExpressionController.clearExpressions();

                deleteBudgetGroupMemberButton.enabled(false);
                budgetGroupsPermissionButton.enabled(false);
            }
            else
            {
                budgetGroup_ds.allowDelete(true);
                budgetGroupMember_ds.allowDelete(true);

                budgetGroup_ds.allowEdit(true);
                budgetGroupMember_ds.allowEdit(true);

                budgetControlGroupExpressionController.setEnabled(true);

                deleteBudgetGroupMemberButton.enabled(true);

                if (budgetGroupMember.ParentBudgetGroupMember)
                {
                    // Only first level group members are allowed to edit the group properties.
                    budgetGroup_Interval.allowEdit(false);
                    budgetGroup_TimeSpan.allowEdit(false);
                    budgetGroupProperties_OverrideResponsibleUser.allowEdit(false);
                    budgetGroupProperties_ThresholdPercent.allowEdit(false);
                    budgetGroupsPermissionButton.enabled(false);
                }
                else
                {
                    // The first level group member is allowed to edit the group properties.
                    budgetGroup_Interval.allowEdit(true);
                    budgetGroup_TimeSpan.allowEdit(true);
                    budgetGroupProperties_OverrideResponsibleUser.allowEdit(true);
                    budgetGroupProperties_ThresholdPercent.allowEdit(true);
                    budgetGroupsPermissionButton.enabled(true);
                }
            }
        }
        else
        {
            // Show a read only page.
            budgetGroup_ds.allowEdit(false);
            budgetGroup_ds.allowDelete(false);
            budgetGroupMember_ds.allowEdit(false);
            budgetGroupMember_ds.allowDelete(false);
            budgetControlGroupExpressionController.setEnabled(false);

            // Disable the buttons.
            newBudgetGroupMemberButton.enabled(false);
            deleteBudgetGroupMemberButton.enabled(false);

            if (budgetGroup)
            {
                if (element.isBudgetGroupsTreeRootNodeSelected())
                {
                    budgetGroupsPermissionButton.enabled(false);
                    budgetControlGroupExpressionController.clearExpressions();
                }
                else
                {
                    // The first level group member can always view the permissions regardless of configuration.
                    budgetGroupsPermissionButton.enabled(!budgetGroupMember.ParentBudgetGroupMember);
                }
            }
            else
            {
                budgetGroupsPermissionButton.enabled(false);
                budgetControlGroupExpressionController.clearExpressions();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowEditForControlRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the AllowEdit property on the control rule form fields.
    /// </summary>
    public void setAllowEditForControlRule()
    {
        if (allowEdit)
        {
            budgetControlRule_ds.allowDelete(true);
            budgetControlRule_ds.allowEdit(true);

            // Enable the buttons.
            rulesNewButton.enabled(true);

            if (budgetControlRule)
            {
                budgetControlRuleExpressionController.setEnabled(true);

                rulesDeleteButton.enabled(true);
            }
            else
            {
                budgetControlRuleExpressionController.setEnabled(false);

                rulesDeleteButton.enabled(false);
            }
        }
        else
        {
            // Show a read only page.
            budgetControlRule_ds.allowEdit(false);
            budgetControlRule_ds.allowDelete(false);

            budgetControlRuleExpressionController.setEnabled(false);

            // Disable the buttons.
            rulesNewButton.enabled(false);
            rulesDeleteButton.enabled(false);
        }

        if (budgetControlRule)
        {
            // Permissions can be viewed regardless of configuration.
            rulesPermissionButton.enabled(true);
        }
        else
        {
            rulesPermissionButton.enabled(false);
            budgetControlRuleExpressionController.clearExpressions();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExpressionAvailableDimensionAttributes</Name>
				<Source><![CDATA[
    public void setExpressionAvailableDimensionAttributes()
    {
        List availableDimensionAttributes = BudgetControlDimensionAttribute::getDimensionAttributes(budgetControlConfiguration.RecId);
        budgetControlRuleExpressionController.loadAvailableDimensionAttributes(availableDimensionAttributes);
        budgetControlGroupExpressionController.loadAvailableDimensionAttributes(availableDimensionAttributes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetGroupsTreeItemText</Name>
				<Source><![CDATA[
    public void setBudgetGroupsTreeItemText()
    {
        // Set the text of the selected tree item to the selected member name.
        FormTreeItem selectedTreeItem = budgetGroupsTree.getItem(budgetGroupsTree.getSelection());

        if (selectedTreeItem)
        {
            selectedTreeItem.text(budgetGroupMember.Name);

            // Set the item to update the display.
            budgetGroupsTree.setItem(selectedTreeItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the status for the configuration.
    /// </summary>
    public BudgetControlConfigurationStatus getStatus()
    {
        BudgetControlConfigurationStatus status;

        if (!isViewActiveMode)
        {
            if (draftExists && allowEdit)
            {
                status = BudgetControlConfigurationStatus::Draft;
            }
            else
            {
                status = BudgetControlConfigurationStatus::Active;
            }
        }
        else
        {
            // When opened in view active configuration mode.
            // Display the status as active regardless of configuration state.
            status = BudgetControlConfigurationStatus::Active;
        }

        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the caption for the configuration.
    /// </summary>
    public void setCaption()
    {
        BudgetControlConfigurationStatus status = this.getStatus();

        if (budgetControlConfiguration.RecId == 0)
        {
            element.design().caption("@SYS314452");
        }
        else
        {
            if (draftExists && !allowEdit)
            {
                element.design().caption(strFmt("@SYS76785", "@SYS314452", strFmt("@Budget:BudgetControlConfigurationLockedByUser", budgetControlConfiguration.InUseBy)));
            }
            else
            {
                element.design().caption(strfmt("@SYS76785", "@SYS314452", status));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConfigurationViewEditMode</Name>
				<Source><![CDATA[
    public void setConfigurationViewEditMode(boolean _allowEdit)
    {
        if (_allowEdit)
        {
            element.viewEditModeHelper().setViewEditMode(ViewEditMode::Edit);
        }
        else
        {
            element.viewEditModeHelper().setViewEditMode(ViewEditMode::View);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFundsAvailableCalcText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the budget funds available calculation text.
    /// </summary>
    public void setFundsAvailableCalcText()
    {
        fundsAvailableCalcText.text(budgetControlConfiguration.budgetFundsAvailableCalculationText());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSelectedBudgetCycleTimeSpan</Name>
				<Source><![CDATA[
    public void setSelectedBudgetCycleTimeSpan(recId _budgetControlBudgetCycleRecId, BudgetCycleTimeSpan _budgetCycleTimeSpan)
    {
        selectedBudgetCycleTimeSpans.insert(_budgetControlBudgetCycleRecId, _budgetCycleTimeSpan);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSumAmountsEditByUseApportionment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the editing of Sum Amounts group
    /// </summary>
    /// <remarks>
    /// If use only apportionment is selected, then the Sum Amounts group is disabled.
    /// </remarks>
    public void setSumAmountsEditByUseApportionment()
    {
        sumAmounts.enabled(!budgetControlConfiguration.UseApportionedAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleEnableBudgetControl</Name>
				<Source><![CDATA[
    public void setVisibleEnableBudgetControl()
    {
        if (Ledger::isLedgerBudgetControlEnabled(primaryLedgerRecId))
        {
            enableBudgetControlButton.visible(false);

            disableBudgetControlButton.visible(true);
            disableBudgetControlButton.enabled(!isViewActiveMode);

            enableBudgetControlState.text("@SYS340811");
        }
        else
        {
            enableBudgetControlButton.visible(true);
            enableBudgetControlButton.enabled(!isViewActiveMode);

            disableBudgetControlButton.visible(false);

            enableBudgetControlState.text("@SYS340812");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllowEdit</Name>
				<Source><![CDATA[
    public boolean validateAllowEdit()
    {
        boolean isValid = BudgetControlConfigurationManager::validateConfigurationEditPermitted(budgetControlConfiguration.RecId);

        if (!isValid)
        {
            // The user no longer has an edit lock on the configuration.
            this.resetAllowEditForValidationFailure(budgetControlConfiguration_ds);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onRuleCriteriaBuilderControlRemovedRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the expression builder removed expression event.
    /// </summary>
    /// <param name = "_expressionBuilder">
    /// The dimension expression builder control raising the event.
    /// </param>
    protected void onRuleCriteriaBuilderControlRemovedRow(DimensionExpressionBuilder _expressionBuilder)
    {
        isRuleCriteriaBuilderControlUpdating = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onBudgetGroupMemberCriteriaBuilderControlRemovedRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the expression builder removed expression event.
    /// </summary>
    /// <param name = "_expressionBuilder">
    /// The dimension expression builder control raising the event.
    /// </param>
    protected void onBudgetGroupMemberCriteriaBuilderControlRemovedRow(DimensionExpressionBuilder _expressionBuilder)
    {
        isBudgetGroupMemberCriteriaBuilderControlUpdating = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onRuleCriteriaBuilderControlRemovingRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the expression builder removing expression event.
    /// </summary>
    /// <param name = "_expressionBuilder">
    /// The dimension expression builder control raising the event.
    /// </param>
    protected void onRuleCriteriaBuilderControlRemovingRow(DimensionExpressionBuilder _expressionBuilder)
    {
        isRuleCriteriaBuilderControlUpdating = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onBudgetGroupMemberCriteriaBuilderControlRemovingRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the expression builder removing expression event.
    /// </summary>
    /// <param name = "_expressionBuilder">
    /// The dimension expression builder control raising the event.
    /// </param>
    protected void onBudgetGroupMemberCriteriaBuilderControlRemovingRow(DimensionExpressionBuilder _expressionBuilder)
    {
        isBudgetGroupMemberCriteriaBuilderControlUpdating = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnabledMaintainCarryforwardAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Manages the enabled state of the MaintainCarryforwardAmounts control.
    /// </summary>
    public void setEnabledMaintainCarryforwardAmounts()
    {
        // Maintain carry-forward is only enabled if:
        //  Include carry-forward amounts is marked and
        //  Maintain carry-forward is not marked or only a draft configuration exists.
        maintainCarryforwardAmounts.enabled(budgetControlConfiguration.IncludeCarryforwardAmounts && (!budgetControlConfiguration.MaintainCarryforwardAmounts || !activeExists));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIntegratorEditAllowed</Name>
				<Source><![CDATA[
    private boolean isIntegratorEditAllowed(AccessType _accessType)
    {
        return allowEdit
            && element.validateAllowEdit()
            && hasTableAccess(tablenum(BudgetControlSourceIntegratorEnabled), _accessType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openAdditionalFilteringDialog</Name>
				<Source><![CDATA[
    internal void openAdditionalFilteringDialog(boolean _canEditQuery)
    {
        if (element.isIntegratorEditAllowed(AccessType::Edit) || !_canEditQuery)
        {
            BudgetControlSourceIntegrator currentSourceIntegrator = budgetControlSourceIntegratorEnabledTmp.BudgetControlSourceIntegrator;
            BudgetControlSourceIntegratorEnabled currentIntegrator = BudgetControlSourceIntegratorEnabled::findByConfigurationSourceIntegrator(
                budgetControlConfiguration.RecId,
                currentSourceIntegrator);

            Query originalQuery;

            if (currentIntegrator.BudgetControlSourceIntegratorQuery)
            {
                originalQuery = new Query(currentIntegrator.BudgetControlSourceIntegratorQuery);
            }
            else
            {
                BudgetControlIIntegratorFilterable filterable = BudgetControlIntegratorFilterableFactory::getInstance(currentSourceIntegrator);
                if (filterable)
                {
                    originalQuery = new Query();
                    originalQuery.addDataSource(filterable.getTableId());
                }
            }

            if (originalQuery)
            {
                SysQueryRun sysQueryRun = new SysQueryRun(originalQuery);
                sysQueryRun.promptLoadLastUsedQuery(true);
                sysQueryRun.promptAllowSave(false);
                sysQueryRun.promptShowSorting(false);
                sysQueryRun.promptSaveQueryPrUser(false);
                sysQueryRun.promptAllowAddDataSource(false);
                sysQueryRun.promptAllowAddRange(QueryAllowAdd::AllFields);
                sysQueryRun.userUpdate(_canEditQuery);

                if (sysQueryRun.prompt() && _canEditQuery)
                {
                    Query updatedQuery = sysQueryRun.query();
                    if (SysQuery::queryHasRangesOrFilters(updatedQuery))
                    {
                        boolean isQueryChanged = !originalQuery.equal(updatedQuery);
                        if (isQueryChanged)
                        {
                            this.setSourceIntegratorQuery(updatedQuery);
                        }
                    }
                    else
                    {
                        warning("@Budget:IntegratorFilteringNoValidCriteriaWarning");
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFilteringForCurrentIntegrator</Name>
				<Source><![CDATA[
    internal void deleteFilteringForCurrentIntegrator()
    {
        if (element.isIntegratorEditAllowed(AccessType::Delete)
            && Box::yesNo("@SYS320415", DialogButton::No) == DialogButton::Yes)
        {
            this.setSourceIntegratorQuery(null);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceIntegratorQuery</Name>
				<Source><![CDATA[
    internal void setSourceIntegratorQuery(Query _query)
    {
        BudgetControlSourceIntegrator sourceIntegrator = budgetControlSourceIntegratorEnabledTmp.BudgetControlSourceIntegrator;

        boolean isSet = BudgetControlConfigurationManager::setSourceIntegratorQuery(
            budgetControlConfiguration.RecId,
            budgetControlSourceIntegratorEnabledTmp.BudgetControlSourceIntegrator,
            _query);

        if (isSet)
        {
            this.refreshBudgetControlSourceIntegratorEnabledTmp(sourceIntegrator);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshBudgetControlSourceIntegratorEnabledTmp</Name>
				<Source><![CDATA[
    internal void refreshBudgetControlSourceIntegratorEnabledTmp(BudgetControlSourceIntegrator _sourceIntegrator)
    {
        budgetControlSourceIntegratorEnabledTmp_ds.executeQuery();
        budgetControlSourceIntegratorEnabledTmp_ds.positionToRecordByValue(
            fieldnum(BudgetControlSourceIntegratorEnabledTmp, BudgetControlSourceIntegrator),
            enum2str(_sourceIntegrator));
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>BudgetControlConfiguration</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            QueryBuildRange qbrIsActive;
            QueryBuildDataSource qbdsConfiguration;

            // Reset the IsActive range.
            qbdsConfiguration = this.query().dataSourceTable(tablenum(BudgetControlConfiguration));
            qbdsConfiguration.clearRange(fieldnum(BudgetControlConfiguration, IsActive));

            draftExists = BudgetControlConfiguration::existDraftForPrimaryLedger(primaryLedgerRecId);
            NoYes isActiveRangeValue = !draftExists || isViewActiveMode;

            qbrIsActive = qbdsConfiguration.addRange(fieldnum(BudgetControlConfiguration, IsActive));
            qbrIsActive.value(SysQuery::value(enum2int(isActiveRangeValue)));
            qbrIsActive.status(RangeStatus::Hidden);

            if (activeExists)
            {
                BudgetControlConfiguration activeControlConfiguration = BudgetControlConfiguration::findActiveByPrimaryLedger(primaryLedgerRecId);

                // Set the Activated date and Activated by.
                lastActivatedDate.dateTimeValue(activeControlConfiguration.ModifiedDateTime);
                lastActivatedBy.text(activeControlConfiguration.ModifiedBy);
            }

            // Reset the criteria managers to force a reload of the expression builder controls upon selection changed.
            budgetControlRuleManager = null;
            element.resetRuleCriteriaBuilder();
            budgetControlRuleExpressionController.clearExpressions();

            budgetControlGroupManager = null;
            element.resetBudgetGroupMemberCriteriaBuilder();
            budgetControlGroupExpressionController.clearExpressions();

            super();

            this.queryRun().query(this.query());
        }

]]></Source>
					</Method>
					<Method>
						<Name>setInUse</Name>
						<Source><![CDATA[
        public void setInUse()
        {
            if (allowEdit)
            {
                ttsbegin;

                // Set the configuration to in use by the current user.
                budgetControlConfiguration.InUseBy = curuserid();
                budgetControlConfiguration.InUseSinceDateTime = DateTimeUtil::utcNow();
                budgetControlConfiguration.doUpdate();

                ttscommit;

                budgetControlConfiguration_ds.setCurrent();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged()
        {
            super();

            // Initialize the selected budget cycle time spans cache.
            element.initSelectedBudgetCycleTimeSpans();

            controlDimensionsListPanel.setBudgetControlConfiguration(budgetControlConfiguration.RecId);
            controlDimensionsListPanel.fill();

            // Can only edit the configuration if it is draft and not in use by another user.
            allowEdit = BudgetControlConfigurationManager::isConfigurationEditPermitted(budgetControlConfiguration.RecId);

            if (allowEdit)
            {
                this.setInUse();
            }

            isActive = budgetControlConfiguration.IsActive;

            element.setAllowEdit();
            element.setCaption();
            element.setFundsAvailableCalcText();

            element.setEnabledMaintainCarryforwardAmounts();

            element.modifyMainAccountsTab();

            // Set the initial state for the rules and budget groups.
            // If there are no rules or budget groups defined the active methods will not run for those data sources.
            element.setAllowEditForControlRule();
            element.setAllowEditForBudgetGroup();

            // Reset the budget groups tree to reflect the structure of the selected configuration.
            element.resetBudgetGroupsTree();

            // Fill the available dimension attributes for the expression builders.
            element.setExpressionAvailableDimensionAttributes();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean isValid = super();

            if (isValid)
            {
                if (!BudgetControlConfigurationManager::validateBudgetCycleTimeSpan(budgetControlConfiguration.DefaultBudgetCycleTimeSpan))
                {
                    // Since we have to clear the default budget cycle timespan field if the validation fails,
                    // this validation stays in the form datasource instead of table.

                    // When the validation of time span fails clear the values.
                    budgetControlConfiguration.DefaultBudgetCycleTimeSpan = 0;
                    budgetControlConfiguration_ds.rereadReferenceDataSources();
                    isValid = false;
                }
            }
            else
            {
                // The validation may have failed due to the user no longer having the edit lock.
                element.resetAllowEditForValidationFailure(budgetControlConfiguration_ds);
            }

            return isValid;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            // Do not allow the configuration to be created or deleted directly by the user.
            // The edit and restore actions must be used.
            budgetControlConfiguration_ds.allowCreate(false);
            budgetControlConfiguration_ds.allowDelete(false);

            super();

            // Add the primary ledger range to the configuration.
            QueryBuildRange qbrPrimaryLedger = this.query().dataSourceTable(tablenum(BudgetControlConfiguration)).addRange(fieldnum(BudgetControlConfiguration, PrimaryLedger));
            qbrPrimaryLedger.value(SysQuery::value(primaryLedgerRecId));
            qbrPrimaryLedger.status(RangeStatus::Hidden);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>DefaultBudgetCycleTimeSpan</DataField>
						<Methods>
							<Method>
								<Name>resolveReference</Name>
								<Source><![CDATA[
            public Common resolveReference(FormReferenceControl _formReferenceControl)
            {
                Common resolvedRecord;
                BudgetCycleTimeSpan budgetCycleTimeSpan;

                BudgetCycleTimeSpanName name = _formReferenceControl.filterValue(AbsoluteFieldBinding::construct(
                    fieldstr(BudgetCycleTimeSpan, Name),
                    tablestr(BudgetCycleTimeSpan))).value();

                while select budgetCycleTimeSpan
                    where budgetCycleTimeSpan.Name == name
                {
                    if (resolvedRecord)
                    {
                        // If the select returns more than one record set the record to null.
                        // The record can't be resolved.
                        resolvedRecord = null;
                        break;
                    }

                    resolvedRecord = budgetCycleTimeSpan.data();
                }

                return resolvedRecord;
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                Common lookupRecord = BudgetCycleTimeSpan::lookupBudgetCycleTimeSpan(_formReferenceControl);

                return lookupRecord;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>DimensionHierarchyAccountStructure</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean isValid = super();

                if (isValid
                    && BudgetControlConfigurationManager::isAccountStructureDimensionsInUse(budgetControlConfiguration.RecId, budgetControlConfiguration.DimensionHierarchyAccountStructure)
                    && Box::yesNo("@SYS328001", DialogButton::Yes) == DialogButton::No)
                {
                    isValid = false;
                }

                return isValid;
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                // Cleanup the control dimension attributes no longer available.
                BudgetControlConfigurationManager::cleanupControlDimensionAttributes(budgetControlConfiguration.RecId, budgetControlConfiguration.DimensionHierarchyAccountStructure);

                controlDimensionsListPanel.setAccountStructure(budgetControlConfiguration.DimensionHierarchyAccountStructure);
                controlDimensionsListPanel.fill();
            }

]]></Source>
							</Method>
							<Method>
								<Name>resolveReference</Name>
								<Source><![CDATA[
            public Common resolveReference(FormReferenceControl _formReferenceControl)
            {
                Name accountStructureName = _formReferenceControl.filterValue(AbsoluteFieldBinding::construct(
                    fieldstr(DimensionHierarchy, Name),
                    tablestr(DimensionHierarchy))).value();

                Common resolvedRecord = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::AccountStructure, accountStructureName);

                return resolvedRecord;
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                Common lookupRecord = BudgetPrimaryLedgerDimensionAttribute::lookupAccountStructure(_formReferenceControl, budgetControlConfiguration.DimensionHierarchyAccountStructure);

                return lookupRecord;
            }

]]></Source>
							</Method>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            public void jumpRef()
            {
                DimensionHierarchyHelper::jumpRefAccountStructure(budgetControlConfiguration.DimensionHierarchyAccountStructure, element);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SubtractActualExpenditures</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.setFundsAvailableCalcText();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SubtractDraftEncumbranceReductions</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.setFundsAvailableCalcText();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SubtractDraftEncumbrances</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.setFundsAvailableCalcText();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SubtractDraftPreencumbrances</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.setFundsAvailableCalcText();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SubtractEncumbrances</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.setFundsAvailableCalcText();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SubtractPreencumbrances</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.setFundsAvailableCalcText();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SubtractUnpostedActualExpenditures</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.setFundsAvailableCalcText();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SumAmendments</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.setFundsAvailableCalcText();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SumDraftAmendments</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.setFundsAvailableCalcText();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SumDraftTransfersIn</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.setFundsAvailableCalcText();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SumDraftTransfersOut</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.setFundsAvailableCalcText();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SumOriginalBudget</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.setFundsAvailableCalcText();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SumPreliminaryBudget</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.setFundsAvailableCalcText();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SumTransfers</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.setFundsAvailableCalcText();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>UseApportionedAmount</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                // Method to enable/disable Sum Amounts group based on Use Apportionment
                element.setSumAmountsEditByUseApportionment();
                element.setFundsAvailableCalcText();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>BudgetControlRule</Name>
				<Methods>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            if (element.validateAllowEdit()
                && Box::yesNo("@SYS320415", DialogButton::No) == DialogButton::Yes)
            {
                // The deletion of the selected rule was confirmed.
                // Reread to revert any pending changes and ensure the current values are loaded from the manager class.
                budgetControlRule_ds.reread();

                BudgetControlRuleManager::delete(budgetControlRule.RecId);

                // Reset the pending changes state of the control.
                element.resetRuleCriteriaBuilder();

                budgetControlRule_ds.research();

                // The expression builder changes data source context and loses the current focus with the above research call.
                // Ensure the grid is focused again.
                rulesGrid.setFocus();

                // Reset the state in case there are no longer any records.
                element.setAllowEditForControlRule();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            // Save the rule and criteria before calling super to avoid any criteria reset
            // that may occur if the super invokes a selection change event.
            this.saveBudgetControlRule();

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>saveBudgetControlRule</Name>
						<Source><![CDATA[
        public void saveBudgetControlRule()
        {
            if (allowEdit
                && budgetControlRuleManager)
            {
                budgetControlRuleManager.parmName(budgetControlRule.Name);
                budgetControlRuleManager.parmDescription(budgetControlRule.Description);
                budgetControlRuleManager.parmBudgetInterval(budgetControlRule.Interval);
                budgetControlRuleManager.parmBudgetCycleTimeSpan(budgetControlRule.BudgetCycleTimeSpan);
                budgetControlRuleManager.parmBudgetResponsibleUser(budgetControlRule.OverrideResponsibleUser);
                budgetControlRuleManager.parmBudgetThresholdPercent(budgetControlRule.ThresholdPercent);
                budgetControlRuleManager.parmExpressionCriteriaCollection(budgetControlRuleExpressionController.getExpressionCriteriaCollection());

                budgetControlRuleManager.save();

                // Reset the pending changes state of the control.
                element.resetRuleCriteriaBuilder();

                // Reread to ensure the current values from the manager class.
                budgetControlRule_ds.reread();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateBudgetControlRule</Name>
						<Source><![CDATA[
        public boolean validateBudgetControlRule()
        {
            boolean isValid = true;

            if (allowEdit
                && budgetControlRuleManager
                && element.validateAllowEdit())
            {
                budgetControlRuleManager.parmName(budgetControlRule.Name);
                budgetControlRuleManager.parmDescription(budgetControlRule.Description);
                budgetControlRuleManager.parmBudgetInterval(budgetControlRule.Interval);
                budgetControlRuleManager.parmBudgetCycleTimeSpan(budgetControlRule.BudgetCycleTimeSpan);
                budgetControlRuleManager.parmBudgetResponsibleUser(budgetControlRule.OverrideResponsibleUser);
                budgetControlRuleManager.parmBudgetThresholdPercent(budgetControlRule.ThresholdPercent);
                budgetControlRuleManager.parmExpressionCriteriaCollection(budgetControlRuleExpressionController.getExpressionCriteriaCollection());

                // Validate the rule.
                isValid = budgetControlRuleManager.validate();

                if (isValid)
                {
                    // Validate whether the time span is still valid since it is possible that the time span might have
                    // been deleted or the time span may not have any budget cycles before persisting the rule.
                    // Since we have to clear the budget cycle time span field if the validation fails,
                    // this validation stays separately outside the validate() of rule manager.
                    isValid = BudgetControlConfigurationManager::validateBudgetCycleTimeSpan(budgetControlRuleManager.parmBudgetCycleTimeSpan());

                    if (!isValid)
                    {
                        // Clear the values on validation fail.
                        budgetControlRule.BudgetCycleTimeSpan = 0;
                        budgetControlRule_ds.rereadReferenceDataSources();
                    }
                }
            }

            return isValid;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean isValid = super();

            isValid = isValid && this.validateBudgetControlRule();

            return isValid;
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged()
        {
            super();

            if (budgetControlRule)
            {
                if (!budgetControlRuleManager || budgetControlRuleManager.parmName() != budgetControlRule.Name)
                {
                    // Clear the is new state by default until the expression builder is loaded.
                    isRuleNew = false;

                    budgetControlRuleManager = BudgetControlRuleManager::construct(budgetControlRule.RecId);

                    // Load the rule expression controller.
                    budgetControlRuleExpressionController.loadExpressions(
                        budgetControlRuleManager.parmExpressionCriteriaCollection());

                    if (isSelectingNewRule)
                    {
                        // Once the new selection is loaded set the form state to new to force an initial save.
                        isSelectingNewRule = false;
                        isRuleNew = true;
                    }
                }
            }
            else
            {
                // Reset the rule manager to clear the expression controller.
                budgetControlRuleManager = null;
                budgetControlRuleExpressionController.clearExpressions();
            }

            element.setAllowEditForControlRule();
        }

]]></Source>
					</Method>
					<Method>
						<Name>leaveRecord</Name>
						<Source><![CDATA[
        public boolean leaveRecord(boolean _forceUpdate = false)
        {
            boolean canLeaveRecord = super(_forceUpdate);

            if (canLeaveRecord && !isRuleCriteriaBuilderControlUpdating)
            {
                if (isRuleNew || ruleCriteriaBuilder.hasPendingChanges())
                {
                    canLeaveRecord = budgetControlRule_DS.validateWrite();

                    if (canLeaveRecord)
                    {
                        budgetControlRule_DS.write();
                    }
                }
            }

            return canLeaveRecord;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>BudgetCycleTimeSpan</DataField>
						<Methods>
							<Method>
								<Name>resolveReference</Name>
								<Source><![CDATA[
            public Common resolveReference(FormReferenceControl _formReferenceControl)
            {
                Common resolvedRecord;
                BudgetCycleTimeSpan budgetCycleTimeSpan;

                BudgetCycleTimeSpanName name = _formReferenceControl.filterValue(AbsoluteFieldBinding::construct(
                    fieldstr(BudgetCycleTimeSpan, Name),
                    tablestr(BudgetCycleTimeSpan))).value();

                while select budgetCycleTimeSpan
                    where budgetCycleTimeSpan.Name == name
                {
                    if (resolvedRecord)
                    {
                        // If the select returns more than one record set the record to null.
                        // The record can't be resolved.
                        resolvedRecord = null;
                        break;
                    }

                    resolvedRecord = budgetCycleTimeSpan.data();
                }

                return resolvedRecord;
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                Common lookupRecord = BudgetCycleTimeSpan::lookupBudgetCycleTimeSpan(_formReferenceControl);

                return lookupRecord;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>BudgetOverrideUserGroupOption</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean isValid = super();

            if (!isValid)
            {
                // The validation may have failed due to the user no longer having the edit lock.
                element.resetAllowEditForValidationFailure(budgetOverrideUserGroupOption_ds);
            }

            return isValid;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateDelete</Name>
						<Source><![CDATA[
        public boolean validateDelete()
        {
            boolean isValid = super();

            if (!isValid)
            {
                // The validation may have failed due to the user no longer having the edit lock.
                element.resetAllowEditForValidationFailure(budgetOverrideUserGroupOption_ds);
            }

            return isValid;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>MainAccount</Name>
				<Methods>
					<Method>
						<Name>editBudgetControlMainAccount</Name>
						<Source><![CDATA[
        public edit NoYes editBudgetControlMainAccount(boolean _set, MainAccount _mainAccount, NoYes _addToBudgetControlMainAccount)
        {
            NoYes                       hasBudgetControlMainAccount = NoYes::No;
            BudgetControlMainAccount    budgetControlMainAccountLocal;

            if (hasTableAccess(tablenum(BudgetControlMainAccount)))
            {
                select firstonly RecId from budgetControlMainAccountLocal
                    where budgetControlMainAccountLocal.MainAccount == _mainAccount.RecId
                        && budgetControlMainAccountLocal.BudgetControlConfiguration == budgetControlConfiguration.RecId;

                if (budgetControlMainAccountLocal)
                {
                    // If the main account is already included for budget control then mark the checkbox.
                    hasBudgetControlMainAccount = NoYes::Yes;
                }
            }

            if (_set && element.validateAllowEdit())
            {
                if (_addToBudgetControlMainAccount == NoYes::Yes && !budgetControlMainAccountLocal)
                {
                    if (hasTableAccess(tablenum(BudgetControlMainAccount), AccessType::Add))
                    {
                        // Insert new budget control main account records if the checkbox is marked.
                        ttsbegin;

                        budgetControlMainAccountLocal.MainAccount = mainAccount.RecId;
                        budgetControlMainAccountLocal.BudgetControlConfiguration = budgetControlConfiguration.RecId;
                        budgetControlMainAccountLocal.insert();

                        ttscommit;

                        hasBudgetControlMainAccount = NoYes::Yes;
                    }
                }
                else if (_addToBudgetControlMainAccount == NoYes::No && budgetControlMainAccountLocal)
                {
                    if (hasTableAccess(tablenum(BudgetControlMainAccount), AccessType::Delete))
                    {
                        // Delete the budget control main account records if the checkbox is unmarked.
                        ttsbegin;

                        delete_from budgetControlMainAccountLocal
                            where budgetControlMainAccountLocal.MainAccount == mainAccount.RecId
                                && budgetControlMainAccountLocal.BudgetControlConfiguration == budgetControlConfiguration.RecId;

                        ttscommit;

                        hasBudgetControlMainAccount = NoYes::No;
                    }
                }
            }

            return hasBudgetControlMainAccount;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            Query                   query;
            QueryBuildDataSource    mainAccount_qbds;

            super();

            query = mainAccount_DS.query();

            mainAccount_qbds = query.dataSourceTable(tablenum(MainAccount));
            mainAccount_qbds.clearRange(fieldnum(MainAccount, LedgerChartOfAccounts));
            mainAccount_qbds.addRange(fieldnum(MainAccount, LedgerChartOfAccounts)).value(
                SysQuery::value(LedgerChartOfAccounts::current()));
            mainAccount_qbds.findRange(fieldnum(MainAccount, LedgerChartOfAccounts)).status(RangeStatus::Hidden);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>BudgetGroupMember</Name>
				<Methods>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            if (element.validateAllowEdit()
                && Box::yesNo("@SYS320415", DialogButton::No) == DialogButton::Yes)
            {
                // The deletion of the selected group member was confirmed.
                // Reread to revert any pending changes and ensure the current values are loaded from the manager class.
                budgetGroup_ds.reread();
                budgetGroupMember_ds.reread();

                BudgetControlGroupManager::deleteBudgetGroupMember(budgetGroupMember.RecId);

                // Reset the pending changes state of the control.
                element.resetBudgetGroupMemberCriteriaBuilder();

                budgetGroup_ds.research(true);

                if (!budgetGroupMember)
                {
                    // The last group was deleted.
                    // Update the form as the active method will not run.
                    element.setAllowEditForBudgetGroup();

                    budgetControlGroupExpressionController.clearExpressions();
                }

                // Regenerate the tree to correctly remove the item and fix parent properties.
                element.fillBudgetGroupsTree();

                // The expression builder changes data source context and loses the current focus with the above research call.
                // Ensure the tree is focused again.
                budgetGroupsTree.setFocus();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>saveBudgetGroupMember</Name>
						<Source><![CDATA[
        public void saveBudgetGroupMember()
        {
            if (allowEdit
                && budgetControlGroupManager)
            {
                budgetControlGroupManager.parmName(budgetGroupMember.Name);
                budgetControlGroupManager.parmDescription(budgetGroupMember.Description);
                budgetControlGroupManager.parmBudgetInterval(budgetGroup.Interval);
                budgetControlGroupManager.parmBudgetCycleTimeSpan(budgetGroup.BudgetCycleTimeSpan);
                budgetControlGroupManager.parmBudgetResponsibleUser(budgetGroup.OverrideResponsibleUser);
                budgetControlGroupManager.parmBudgetThresholdPercent(budgetGroup.ThresholdPercent);
                budgetControlGroupManager.parmExpressionCriteriaCollection(budgetControlGroupExpressionController.getExpressionCriteriaCollection());

                budgetControlGroupManager.save();

                // Reset the pending changes state of the control.
                element.resetBudgetGroupMemberCriteriaBuilder();

                // Reread to ensure the current values from the manager class.
                budgetGroup_ds.reread();
                budgetGroupMember_ds.reread();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateBudgetGroupMember</Name>
						<Source><![CDATA[
        public boolean validateBudgetGroupMember()
        {
            boolean isValid = true;

            if (allowEdit
                && budgetControlGroupManager
                && element.validateAllowEdit())
            {
                budgetControlGroupManager.parmName(budgetGroupMember.Name);
                budgetControlGroupManager.parmDescription(budgetGroupMember.Description);
                budgetControlGroupManager.parmBudgetInterval(budgetGroup.Interval);
                budgetControlGroupManager.parmBudgetCycleTimeSpan(budgetGroup.BudgetCycleTimeSpan);
                budgetControlGroupManager.parmBudgetResponsibleUser(budgetGroup.OverrideResponsibleUser);
                budgetControlGroupManager.parmBudgetThresholdPercent(budgetGroup.ThresholdPercent);
                budgetControlGroupManager.parmExpressionCriteriaCollection(budgetControlGroupExpressionController.getExpressionCriteriaCollection());

                // Validate the group member.
                isValid = budgetControlGroupManager.validate();

                if (isValid)
                {
                    // Validate whether the time span is still valid since it is possible that the time span might have
                    // been deleted or the time span may not have any budget cycles before persisting the group.
                    // Since we have to clear the budget cycle time span field if the validation fails,
                    // this validation stays separately outside the validate() of group manager.
                    isValid = BudgetControlConfigurationManager::validateBudgetCycleTimeSpan(budgetControlGroupManager.parmBudgetCycleTimeSpan());

                    if (!isValid)
                    {
                        // Clear the values on validation fail.
                        budgetGroup.BudgetCycleTimeSpan = 0;
                        budgetGroup_ds.rereadReferenceDataSources();
                    }
                }
            }

            return isValid;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            // Save the group member and criteria before calling super to avoid any criteria reset
            // that may occur if the super invokes a selection change event.
            this.saveBudgetGroupMember();

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged()
        {
            super();

            if (!element.isBudgetGroupsTreeRootNodeSelected())
            {
                // Only child nodes or new nodes from the tree root node need to be reloaded.
                // Select the tree item before the form state is updated.
                element.selectBudgetGroupsTreeItem();

                element.setAllowEditForBudgetGroup();

                if (budgetGroupMember)
                {
                    if (!budgetControlGroupManager || budgetControlGroupManager.parmName() != budgetGroupMember.Name)
                    {
                        // Clear the is new state by default until the expression builder is loaded.
                        isGroupMemberNew = false;

                        budgetControlGroupManager = BudgetControlGroupManager::construct(budgetGroupMember.RecId);

                        // Load the group member expression controller.
                        budgetControlGroupExpressionController.loadExpressions(
                            budgetControlGroupManager.parmExpressionCriteriaCollection());

                        if (isSelectingNewGroupMember)
                        {
                            // Once the new selection is loaded set the form state to new to force an initial save.
                            isSelectingNewGroupMember = false;
                            isGroupMemberNew = true;
                        }
                    }

                    element.setBudgetGroupsTreeItemText();
                }
                else
                {
                    // Reset the group manager to clear the expression controller.
                    budgetControlGroupManager = null;
                    budgetControlGroupExpressionController.clearExpressions();
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean isValid = super();

            isValid = isValid && this.validateBudgetGroupMember();

            return isValid;
        }

]]></Source>
					</Method>
					<Method>
						<Name>leaveRecord</Name>
						<Source><![CDATA[
        public boolean leaveRecord(boolean _forceUpdate = false)
        {
            boolean canLeaveRecord = super(_forceUpdate);

            if (canLeaveRecord && !isBudgetGroupMemberCriteriaBuilderControlUpdating)
            {
                if (isGroupMemberNew || budgetGroupMemberCriteriaBuilder.hasPendingChanges())
                {
                    canLeaveRecord = budgetGroupMember_DS.validateWrite();

                    if (canLeaveRecord)
                    {
                        budgetGroupMember_DS.write();
                    }
                }
            }

            return canLeaveRecord;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editName</Name>
						<Source><![CDATA[
        public edit BudgetGroupMemberName editName(boolean _set, BudgetGroupMember _budgetGroupMember, BudgetGroupMemberName _name)
        {
            BudgetGroupMemberName name;

            if (!element.isBudgetGroupsTreeRootNodeSelected())
            {
                if (_set)
                {
                    _budgetGroupMember.Name = _name;
                }

                name = _budgetGroupMember.Name;
            }

            return name;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editDescription</Name>
						<Source><![CDATA[
        public edit Description editDescription(boolean _set, BudgetGroupMember _budgetGroupMember, Description _description)
        {
            Description description;

            if (!element.isBudgetGroupsTreeRootNodeSelected())
            {
                if (_set)
                {
                    _budgetGroupMember.Description = _description;
                }

                description = _budgetGroupMember.Description;
            }

            return description;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>Name</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.setBudgetGroupsTreeItemText();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>BudgetGroup</Name>
				<Methods>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged()
        {
            super();

            budgetGroup_BudgetCycleTimeSpanName = BudgetCycleTimeSpan::find(budgetGroup.BudgetCycleTimeSpan).Name;
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            // The budget group is only deleted if budget group member shown is the last member
            // of the budget group.  The member delete will delete the group for that case.
            budgetGroupMember_ds.delete();
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            // Save the group member and criteria before calling super to avoid any criteria reset
            // that may occur if the super invokes a selection change event.
            budgetGroupMember_ds.saveBudgetGroupMember();

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean isValid = super();

            isValid = isValid && budgetGroupMember_ds.validateBudgetGroupMember();

            return isValid;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editInterval</Name>
						<Source><![CDATA[
        public edit BudgetInterval editInterval(boolean _set, BudgetGroup _budgetGroup, BudgetInterval _interval)
        {
            BudgetInterval budgetInterval;

            if (!element.isBudgetGroupsTreeRootNodeSelected())
            {
                if (_set)
                {
                    _budgetGroup.Interval = _interval;
                }

                budgetInterval = _budgetGroup.Interval;
            }

            return budgetInterval;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editTimeSpan</Name>
						<Source><![CDATA[
        public edit BudgetCycleTimeSpanName editTimeSpan(boolean _set, BudgetGroup _budgetGroup, BudgetCycleTimeSpanName _timeSpanName)
        {
            BudgetCycleTimeSpanName timeSpan;

            if (!element.isBudgetGroupsTreeRootNodeSelected())
            {
                if (_set)
                {
                    budgetGroup_BudgetCycleTimeSpanName = _timeSpanName;
                }

                timeSpan = budgetGroup_BudgetCycleTimeSpanName;
            }

            return timeSpan;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editOverrideResponsibleUser</Name>
						<Source><![CDATA[
        public edit BudgetResponsibleUser editOverrideResponsibleUser(boolean _set, BudgetGroup _budgetGroup, BudgetResponsibleUser _overrideResponsibleUser)
        {
            BudgetResponsibleUser overrideResponsibleUser;

            if (!element.isBudgetGroupsTreeRootNodeSelected())
            {
                if (_set)
                {
                    _budgetGroup.OverrideResponsibleUser = _overrideResponsibleUser;
                }

                overrideResponsibleUser = _budgetGroup.OverrideResponsibleUser;
            }

            return overrideResponsibleUser;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editThresholdPercent</Name>
						<Source><![CDATA[
        public edit BudgetThresholdPercent editThresholdPercent(boolean _set, BudgetGroup _budgetGroup, BudgetThresholdPercent _thresholdPercent)
        {
            BudgetThresholdPercent thresholdPercent;

            if (!element.isBudgetGroupsTreeRootNodeSelected())
            {
                if (_set)
                {
                    _budgetGroup.ThresholdPercent = _thresholdPercent;
                }

                thresholdPercent = _budgetGroup.ThresholdPercent;
            }

            return thresholdPercent;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>BudgetControlBudgetCycle</Name>
				<Methods>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            super(_append);

            // Clear the selected budget cycle time span cache for the new record.
            // Perform this action after the super call to ensure any write calls are processed
            // which need to update the budget cycle time span cache prior to resetting it.
            element.setSelectedBudgetCycleTimeSpan(0, null);
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            if (budgetControlBudgetCycle.RecId == 0)
            {
                // Clear the selected budget cycle time span cache for the record.
                // Perform this action ahead of the super call to ensure the display reflects the changes.
                selectedBudgetCycleTimeSpans.remove(budgetControlBudgetCycle.RecId);
            }

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            super();

            if (!selectedBudgetCycleTimeSpans.exists(budgetControlBudgetCycle.RecId)
                && selectedBudgetCycleTimeSpans.exists(0))
            {
                // This is the first save of the record.
                // Update the selected budget cycle time span to point to the saved record ID.
                element.setSelectedBudgetCycleTimeSpan(
                    budgetControlBudgetCycle.RecId,
                    element.getSelectedBudgetCycleTimeSpan(0));

                selectedBudgetCycleTimeSpans.remove(0);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>jumpRefBudgetModel</Name>
						<Source><![CDATA[
        public void jumpRefBudgetModel()
        {
            BudgetModel budgetModelLocal;

            if (budgetControlBudgetCycle.BudgetModelId)
            {
                budgetModelLocal = BudgetModel::find(HeadingSub::Heading, budgetControlBudgetCycle.BudgetModelId);
            }

            // Pass the budgetModel record, so that the BudgetModel form
            // highlights it as an active record
            BudgetModel::jumpRefBudgetModel(budgetModelLocal, this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean isValid = super();

            if (isValid)
            {
                // Since we have to clear the budget cycle and time span fields if the validation fails,
                // this validation stays in the form datasource instead of table.
                isValid = budgetControlBudgetCycle.vaidateBudgetCycle();

                if (isValid)
                {
                    // Since we have to clear the budget model field if the validation fails,
                    // this validation stays in the form datasource instead of table.
                    isValid = budgetControlBudgetCycle.validateBudgetModel();

                    if (!isValid)
                    {
                        // Clear the budget model field on validation fail.
                        budgetControlBudgetCycle_BudgetModel.text('');
                        budgetControlBudgetCycle.BudgetModelId = '';
                        budgetControlBudgetCycle.BudgetModelSubModelId = '';
                        budgetControlBudgetCycle.BudgetModelDataAreaId = '';
                    }
                }
                else
                {
                    // Clear the value of the selected budget cycle and times span values on validation fail.
                    budgetControlBudgetCycle.BudgetCycle = 0;
                    budgetControlBudgetCycle_ds.rereadReferenceDataSources();
                    element.setSelectedBudgetCycleTimeSpan(budgetControlBudgetCycle.RecId, null);
                }
            }
            else
            {
                // The validation may have failed due to the user no longer having the edit lock.
                element.resetAllowEditForValidationFailure(budgetControlBudgetCycle_ds);
            }

            return isValid;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateDelete</Name>
						<Source><![CDATA[
        public boolean validateDelete()
        {
            boolean isValid = super();

            if (!isValid)
            {
                // The validation may have failed due to the user no longer having the edit lock.
                element.resetAllowEditForValidationFailure(budgetControlBudgetCycle_ds);
            }

            return isValid;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateSelectedBudgetCycleTimeSpan</Name>
						<Source><![CDATA[
        public boolean validateSelectedBudgetCycleTimeSpan(BudgetCycleTimeSpanName _budgetCycleTimeSpanName)
        {
            boolean isValid = true;
            BudgetCycleTimeSpan budgetCycleTimeSpan = element.getSelectedBudgetCycleTimeSpan();

            if (isValid
                && _budgetCycleTimeSpanName
                && _budgetCycleTimeSpanName != budgetCycleTimeSpan.Name)
            {
                // The lookup was not used to enter the value.
                // Validate that the value can be resolved.
                select count(RecId) from budgetCycleTimeSpan
                    where budgetCycleTimeSpan.Name == _budgetCycleTimeSpanName;

                if (budgetCycleTimeSpan.RecId > 1)
                {
                    // The name is not unique.
                    isValid = checkFailed(strfmt("@SYS316757", tablepname(BudgetCycleTimeSpan)));
                }
                else if (budgetCycleTimeSpan.RecId == 0)
                {
                    // The budget cycle time span does not exist.
                    isValid = checkFailed(strfmt("@SYS320416", _budgetCycleTimeSpanName, fieldpname(BudgetCycleTimeSpan, Name), tablepname(BudgetCycleTimeSpan)));
                }
            }

            return isValid;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editBudgetCycleTimeSpan</Name>
						<Source><![CDATA[
        public edit BudgetCycleTimeSpanName editBudgetCycleTimeSpan(boolean _set, BudgetControlBudgetCycle _budgetControlBudgetCycle, BudgetCycleTimeSpanName _budgetCycleTimeSpanName)
        {
            BudgetCycleTimeSpanName budgetCycleTimeSpanName;
            BudgetCycleTimeSpan budgetCycleTimeSpan = element.getSelectedBudgetCycleTimeSpan(_budgetControlBudgetCycle.RecId);

            if (_set)
            {
                budgetCycleTimeSpanName = _budgetCycleTimeSpanName;

                if (this.validateSelectedBudgetCycleTimeSpan(budgetCycleTimeSpanName))
                {
                    if (!budgetCycleTimeSpanName)
                    {
                        // Clear the selected budget cycle time span.
                        element.setSelectedBudgetCycleTimeSpan(0, null);
                    }
                    else if (budgetCycleTimeSpanName != budgetCycleTimeSpan.Name)
                    {
                        // The lookup was not used to enter the value.
                        // Get the unique budget cycle time span.  Validation will fail if it is not unique in this case.
                        select firstonly budgetCycleTimeSpan
                            where budgetCycleTimeSpan.Name == _budgetCycleTimeSpanName;

                        element.setSelectedBudgetCycleTimeSpan(_budgetControlBudgetCycle.RecId, budgetCycleTimeSpan);
                    }
                }
            }
            else
            {
                budgetCycleTimeSpanName = budgetCycleTimeSpan.Name;
            }

            return  budgetCycleTimeSpanName;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>BudgetCycle</DataField>
						<Methods>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            public void jumpRef()
            {
                Args args = new Args();

                MenuFunction menuFunction = new MenuFunction(menuitemdisplaystr(BudgetCycleTimeSpan), MenuItemType::Display);

                if (budgetControlBudgetCycle)
                {
                    args.record(budgetControlBudgetCycle);
                }

                menuFunction.run(args);
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if (budgetControlBudgetCycle.BudgetCycle)
                {
                    // Update the selected budget cycle time span for the selected budget cycle.
                    element.setSelectedBudgetCycleTimeSpan(
                        budgetControlBudgetCycle.RecId,
                        BudgetCycleTimeSpan::find(BudgetCycle::find(budgetControlBudgetCycle.BudgetCycle).BudgetCycleTimeSpan));
                }
            }

]]></Source>
							</Method>
							<Method>
								<Name>resolveReference</Name>
								<Source><![CDATA[
            public Common resolveReference(FormReferenceControl _formReferenceControl)
            {
                Common resolvedRecord;

                BudgetCycleTimeSpan budgetCycleTimeSpan = element.getSelectedBudgetCycleTimeSpan();

                BudgetCycleName name = _formReferenceControl.filterValue(AbsoluteFieldBinding::construct(
                    fieldstr(BudgetCycle, Name),
                    tablestr(BudgetCycle))).value();

                if (budgetCycleTimeSpan)
                {
                    // Filter the lookup for the selected budget cycle time span.
                    resolvedRecord = BudgetCycle::findByNameAndTimeSpan(name, budgetCycleTimeSpan.RecId);
                }
                else
                {
                    BudgetCycle budgetCycleLocal;

                    while select budgetCycleLocal
                        where budgetCycleLocal.Name == name
                    {
                        if (resolvedRecord)
                        {
                            // If the select returns more than one record set the record to null.
                            // The record can't be resolved.
                            resolvedRecord = null;
                            break;
                        }

                        resolvedRecord = budgetCycleLocal.data();
                    }
                }

                return resolvedRecord;
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                Common lookupRecord = BudgetCycle::lookupBudgetCycle(_formReferenceControl, element.getSelectedBudgetCycleTimeSpan().RecId);

                return lookupRecord;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>UserGroupInfo</Name>
				<Methods>
					<Method>
						<Name>editUserGroupSuppressWarnings</Name>
						<Source><![CDATA[
        public edit NoYes editUserGroupSuppressWarnings(boolean _set, UserGroupInfo _userGroupInfo, NoYes _addToUserGroupSuppressWarnings)
        {
            NoYes hasUserGroupSuppressWarnings = NoYes::No;

            if (hasTableAccess(tablenum(BudgetControlUserGroupSuppressWarnings)))
            {
                BudgetControlUserGroupSuppressWarnings userGroupSuppressWarnings;

                select firstonly RecId
                    from userGroupSuppressWarnings
                        where userGroupSuppressWarnings.UserGroupInfo == _userGroupInfo.id
                            && userGroupSuppressWarnings.BudgetControlConfiguration == budgetControlConfiguration.RecId;

                if (userGroupSuppressWarnings)
                {
                    // If the user group is already included for budget control then mark the checkbox.
                    hasUserGroupSuppressWarnings = NoYes::Yes;
                }
            }

            if (_set && element.validateAllowEdit())
            {
                hasUserGroupSuppressWarnings = BudgetControlConfigurationManager::setUserGroupSuppressWarnings(
                    budgetControlConfiguration.RecId,
                    _userGroupInfo.id,
                    _addToUserGroupSuppressWarnings);
            }

            return hasUserGroupSuppressWarnings;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>BudgetControlSourceIntegratorEnabledTmp</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            this.queryBuildDataSource().addOrderByField(fieldnum(BudgetControlSourceIntegratorEnabledTmp, BudgetControlSourceIntegratorValue), SortOrder::Ascending);
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            budgetControlSourceIntegratorEnabledTmp.setTmpData(BudgetControlConfigurationManager::getSourceIntegratorEnabledTmp(budgetControlConfiguration.RecId));

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged()
        {
            super();

            if (BudgetControlSourceIntegratorEnabled::isModifyEnabledAllowed(budgetControlConfiguration.RecId, budgetControlSourceIntegratorEnabledTmp.BudgetControlSourceIntegrator))
            {
                sourceIntegratorIsEnabled.allowEdit(true);
            }
            else
            {
                sourceIntegratorIsEnabled.allowEdit(false);
            }

            if (budgetControlSourceIntegratorEnabledTmp.IsEnabled
                && BudgetControlSourceIntegratorEnabled::isModifyDoBudgetCheckOnEntryAllowed(budgetControlSourceIntegratorEnabledTmp.BudgetControlSourceIntegrator))
            {
                sourceIntegratorDoBudgetCheckOnEntry.allowEdit(true);
            }
            else
            {
                sourceIntegratorDoBudgetCheckOnEntry.allowEdit(false);
            }

            boolean isFilterable = budgetControlSourceIntegratorEnabledTmp.IsEnabled
                && BudgetControlIntegratorFilterableFactory::getInstance(budgetControlSourceIntegratorEnabledTmp.BudgetControlSourceIntegrator);

            boolean isFilteringViewable = isFilterable && budgetControlSourceIntegratorEnabledTmp.isIntegratorFiltered();
            boolean isFilteringEnabled = element.isIntegratorEditAllowed(AccessType::Edit) && isFilterable;
            boolean isFilteringDeleteEnabled = isFilteringEnabled && budgetControlSourceIntegratorEnabledTmp.isIntegratorFiltered();

            ViewFilteringButton.enabled(isFilteringViewable);
            AddEditFilteringButton.enabled(isFilteringEnabled);
            DeleteFilteringButton.enabled(isFilteringDeleteEnabled);

        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>DoBudgetCheckOnEntry</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                boolean doCheckOnEntry = budgetControlSourceIntegratorEnabledTmp.DoBudgetCheckOnEntry;
                BudgetControlSourceIntegrator sourceIntegrator = budgetControlSourceIntegratorEnabledTmp.BudgetControlSourceIntegrator;

                if (allowEdit
                    && element.validateAllowEdit()
                    && hasTableAccess(tablenum(BudgetControlSourceIntegratorEnabled), AccessType::Edit))
                {
                    boolean isSet = BudgetControlConfigurationManager::setSourceIntegratorDoBudgetCheckOnEntry(
                        budgetControlConfiguration.RecId,
                        budgetControlSourceIntegratorEnabledTmp.BudgetControlSourceIntegrator,
                        doCheckOnEntry);

                    if (isSet)
                    {
                        budgetControlSourceIntegratorEnabledTmp_ds.executeQuery();
                        budgetControlSourceIntegratorEnabledTmp_ds.positionToRecordByValue(
                            fieldnum(BudgetControlSourceIntegratorEnabledTmp, BudgetControlSourceIntegrator),
                            enum2str(sourceIntegrator));
                    }
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>IsEnabled</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                boolean isIntegratorEnabled = budgetControlSourceIntegratorEnabledTmp.IsEnabled;
                BudgetControlSourceIntegrator sourceIntegrator = budgetControlSourceIntegratorEnabledTmp.BudgetControlSourceIntegrator;

                if (((isIntegratorEnabled && hasTableAccess(tablenum(BudgetControlSourceIntegratorEnabled), AccessType::Add))
                    || (!isIntegratorEnabled && hasTableAccess(tablenum(BudgetControlSourceIntegratorEnabled), AccessType::Delete)))
                    && element.validateAllowEdit())
                {
                    boolean isSet = BudgetControlConfigurationManager::setSourceIntegratorEnabled(
                        budgetControlConfiguration.RecId,
                        sourceIntegrator,
                        isIntegratorEnabled);

                    if (isSet)
                    {
                        budgetControlSourceIntegratorEnabledTmp_ds.executeQuery();
                        budgetControlSourceIntegratorEnabledTmp_ds.positionToRecordByValue(
                            fieldnum(BudgetControlSourceIntegratorEnabledTmp, BudgetControlSourceIntegrator),
                            enum2str(sourceIntegrator));
                    }
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>CreateDraftButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.createDraftConfiguration();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RestoreButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (!isActive
                && BudgetControlConfigurationManager::validateConfigurationEditPermitted(budgetControlConfiguration.RecId))
            {
                if (Box::yesNo("@Budget:ControlConfigurationConfirmRestoreActive", DialogButton::Yes) == DialogButton::Yes)
                {
                    // The current user is still in control of the draft configuration.
                    // Restore the active configuration for the primary ledger.
                    // When no active configuration exists the draft configuration will be deleted.
                    BudgetControlConfigurationManager::restoreActiveConfiguration(primaryLedgerRecId);

                    // Execute the datasource queries to reset the state of the form.
                    budgetControlConfiguration_ds.executeQuery();
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UnlockButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            if (!isActive
                && budgetControlConfiguration.InUseBy != '')
            {
                // Get the current draft configuration RecId.  The form may not have the current draft configuration loaded.
                BudgetControlConfigurationRecId draftControlConfigurationRecId = BudgetControlConfigurationManager::getDraftConfigurationRecIdCacheDisabled(primaryLedgerRecId);

                if (draftControlConfigurationRecId
                    && !BudgetControlConfigurationManager::isConfigurationEditPermitted(draftControlConfigurationRecId))
                {
                    // A draft configuration exists that is locked for editing.
                    BudgetControlConfiguration draftControlConfiguration = BudgetControlConfiguration::find(draftControlConfigurationRecId);

                    if (Box::yesNo(strfmt("@SYS329735", draftControlConfiguration.InUseBy), DialogButton::No) == DialogButton::Yes)
                    {
                        // Unlock the draft configuration.
                        BudgetControlConfigurationManager::clearInUse(draftControlConfigurationRecId);

                        // Remove any new rules and groups that were in the process of being created.
                        // They were not validated and the current user will not be able to know the intended criteria to fix them.
                        BudgetControlRuleManager::deleteRuleForInUseChange(draftControlConfigurationRecId);
                        BudgetControlGroupManager::deleteBudgetGroupMemberForInUseChange(draftControlConfigurationRecId);

                        budgetControlConfiguration_ds.executeQuery();
                    }
                }
                else
                {
                    // The draft configuration was restored or activated during the time the form was open,
                    // or the edit lock has been released.
                    budgetControlConfiguration_ds.executeQuery();
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UserGroupOptionsPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();

            // Research to get the new records that were defaulted by the rules or budget group settings.
            budgetOverrideUserGroupOption_ds.research();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DeleteUserGroupButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            userGroupOptionsGrid.setFocus();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FundsAvailableCalcPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();

            if (budgetControlConfiguration.UseApportionedAmount)
            {
                element.setSumAmountsEditByUseApportionment();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>IncludeCarryForwardAmounts</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isModified = super();

            if (isModified)
            {
                element.setFundsAvailableCalcText();
                element.setEnabledMaintainCarryforwardAmounts();
            }

            return isModified;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MaintainCarryforwardAmounts</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (maintainCarryforwardAmounts.checked() && Box::yesNo("@Budget:MaintainCarryforwardOptionEnable", DialogButton::No) != DialogButton::Yes)
            {
                maintainCarryforwardAmounts.checked(false);
            }

            super();

            element.setEnabledMaintainCarryforwardAmounts();

            if (maintainCarryforwardAmounts.checked())
            {
                Box::info("@Budget:MaintainCarryforwardRecommendDataMaintenance");
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ViewFilteringButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void clicked()
        {
            super();

            element.openAdditionalFilteringDialog(false);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AddEditFilteringButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void clicked()
        {
            super();

            element.openAdditionalFilteringDialog(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DeleteFilteringButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void clicked()
        {
            super();

            element.deleteFilteringForCurrentIntegrator();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SourceIntegratorIsEnabled</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void clicked()
        {
            // IsEnabled hasn't been changed yet. IsEnabled = true means it is going to be disabled.
            boolean isDisabling = budgetControlSourceIntegratorEnabledTmp.IsEnabled;
            boolean canEdit = (isDisabling && hasTableAccess(tablenum(BudgetControlSourceIntegratorEnabled), AccessType::Delete) && element.validateAllowEdit());
            boolean isDisablingIntegratorWithFilter = isDisabling && budgetControlSourceIntegratorEnabledTmp.isIntegratorFiltered();

            if (canEdit 
                && isDisablingIntegratorWithFilter
                && Box::yesNo("@Budget:IntegratorConfigurationDisablingFilteredMessage", DialogButton::No) == DialogButton::No)
            {
                // The user does not want to disable the integrator.
                return;
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DeleteBudgetModelsButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            budgetModelsGrid.setFocus();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetCycleTimeSpanLookup</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            Args args = new Args();

            MenuFunction menuFunction = new MenuFunction(menuitemdisplaystr(BudgetCycleTimeSpan), MenuItemType::Display);

            args.lookupRecord(element.getSelectedBudgetCycleTimeSpan());

            menuFunction.run(args);
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Args budgetCycleTimeSpanLookupArgs = new Args(formstr(BudgetCycleTimeSpanLookup));
            budgetCycleTimeSpanLookupArgs.caller(element);

            FormRun budgetCycleTimeSpanFormLookup = ClassFactory::formRunClassOnClient(budgetCycleTimeSpanLookupArgs);

            budgetCycleTimeSpanFormLookup.init();

            budgetCycleTimeSpanLookup.performFormLookup(budgetCycleTimeSpanFormLookup);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetControlBudgetCycle_BudgetModel</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Query query = new Query();

            // Create an instance of the SysTableLookup class.
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tablenum(BudgetModel), this);

            // Add fields to be shown in the lookup form.
            sysTableLookup.addLookupfield(fieldnum(BudgetModel, ModelId), true);
            sysTableLookup.addLookupfield(fieldnum(BudgetModel, Txt));

            // Restrict to only Header budget models (no submodels).
            QueryBuildDataSource budgetModel_qbds = query.addDataSource(tablenum(BudgetModel));
            budgetModel_qbds.addRange(fieldnum(BudgetModel, Type)).value(int2str(enum2int(HeadingSub::Heading)));

            // Restrict the lookup only for budget models which do not have submodels.
            QueryBuildDataSource budgetSubModel_qbds = budgetModel_qbds.addDataSource(tablenum(BudgetModel));
            budgetSubModel_qbds.joinMode(JoinMode::NoExistsJoin);
            budgetSubModel_qbds.addLink(fieldnum(BudgetModel, ModelId),fieldnum(BudgetModel, ModelId));
            budgetSubModel_qbds.addRange(fieldnum(BudgetModel, Type)).value(int2str(enum2int(HeadingSub::SubModel)));

            sysTableLookup.parmQuery(query);

            // Perform the lookup.
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RulesPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>allowPageDeactivate</Name>
						<Source><![CDATA[
        public boolean allowPageDeactivate()
        {
            boolean allowPageDeactivate = super();

            allowPageDeactivate = allowPageDeactivate && budgetControlRule_ds.leaveRecord();

            return allowPageDeactivate;
        }

]]></Source>
					</Method>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            // Get the up to date records from the table because there is a possibility
            // that some control rules might have been removed because of the change
            // in control dimensions or account structure.
            budgetControlRuleManager = null;
            budgetControlRule_DS.research(true);

            // Fill the available dimension attributes for the expression builders.
            element.setExpressionAvailableDimensionAttributes();

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RulesNewButton</Name>
				<Type>DropDialogButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (element.validateAllowEdit())
            {
                if (!BudgetControlDimensionAttribute::existByBudgetControlConfiguration(budgetControlConfiguration.RecId))
                {
                    // No control dimension attributes have been defined.
                    throw error("@SYS321377");
                }

                if (budgetControlRule_ds.leaveRecord())
                {
                    element.resetRuleCriteriaBuilder();

                    super();
                }
            }

            rulesGrid.setFocus();
        }

]]></Source>
					</Method>
					<Method>
						<Name>dialogClosed</Name>
						<Source><![CDATA[
        public void dialogClosed(xFormRun _formRun)
        {
            super(_formRun);

            if (_formRun.closedOk())
            {
                BudgetControlICreateRule budgetControlICreateRule = _formRun as BudgetControlICreateRule;

                if (budgetControlICreateRule)
                {
                    // Create a budget control rule for the entered name and description.
                    BudgetControlRule newControlRule = BudgetControlRuleManager::createBudgetControlRule(
                        budgetControlConfiguration.RecId,
                        budgetControlICreateRule.getName(),
                        budgetControlICreateRule.getDescription());

                    budgetControlRule_ds.research();

                    // Find the new rule.
                    budgetControlRule_ds.positionToRecord(newControlRule);

                    isSelectingNewRule = true;
                }
            }

            // Ensure the grid is focused.
            rulesGrid.setFocus();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RulesDeleteButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            budgetControlRule_ds.delete();

            rulesGrid.setFocus();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RulesPermissionButton</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (budgetControlRule_ds.leaveRecord())
            {
                super();
            }

            rulesGrid.setFocus();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MainAccountsPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            element.modifyMainAccountsTab();

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MainAccountsSelectAllButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (element.validateAllowEdit())
            {
                // Copy the current record details since we have to highlight the selected record after enabling
                // all the main accounts.
                MainAccount currentMainAccount;
                currentMainAccount.data(mainAccount);

                MainAccount mainAccountLocal = mainAccount_DS.getFirst() as MainAccount;

                ttsbegin;

                while (mainAccountLocal != null)
                {
                    if (!BudgetControlMainAccount::existByMainAccountConfiguration(mainAccountLocal.RecId, budgetControlConfiguration.RecId))
                    {
                        BudgetControlMainAccount budgetControlMainAccountLocal;
                        budgetControlMainAccountLocal.MainAccount = mainAccountLocal.RecId;
                        budgetControlMainAccountLocal.BudgetControlConfiguration = budgetControlConfiguration.RecId;
                        budgetControlMainAccountLocal.insert();
                    }

                    mainAccountLocal = mainAccount_DS.getNext() as MainAccount;
                }

                ttscommit;

                super();

                mainAccount_DS.research();
                mainAccount_DS.positionToRecord(currentMainAccount);
                mainAccount_DS.refresh();
            }

            // Ensure focus is not lost with the clicked event.
            mainAccountsGrid.setFocus();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MainAccountsClearAllButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (element.validateAllowEdit())
            {
                // Copy the current record details since we have to highlight the selected record after removing
                // all the budget control main accounts.
                MainAccount currentMainAccount;
                currentMainAccount.data(mainAccount);

                MainAccount mainAccountLocal = mainAccount_DS.getFirst() as MainAccount;

                ttsbegin;

                while (mainAccountLocal != null)
                {
                    BudgetControlMainAccount budgetControlMainAccountLocal;

                    delete_from budgetControlMainAccountLocal
                        where budgetControlMainAccountLocal.MainAccount == mainAccountLocal.RecId
                            && budgetControlMainAccountLocal.BudgetControlConfiguration == budgetControlConfiguration.RecId;

                    mainAccountLocal = mainAccount_DS.getNext() as MainAccount;
                }

                ttscommit;

                super();

                mainAccount_DS.research();
                mainAccount_DS.positionToRecord(currentMainAccount);
                mainAccount_DS.refresh();
            }

            // Ensure focus is not lost with the clicked event.
            mainAccountsGrid.setFocus();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetGroupsPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>allowPageDeactivate</Name>
						<Source><![CDATA[
        public boolean allowPageDeactivate()
        {
            boolean allowPageDeactivate = super();

            allowPageDeactivate = allowPageDeactivate && budgetGroupMember_ds.leaveRecord();

            return allowPageDeactivate;
        }

]]></Source>
					</Method>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            // Get the up to date records from the table because there is a possibility
            // that some budget groups might have been removed because of the change
            // in control dimensions or account structure.
            budgetGroup_DS.research(true);

            // Fill the available dimension attributes for the expression builders.
            element.setExpressionAvailableDimensionAttributes();

            super();

            element.fillBudgetGroupsTree();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>NewBudgetGroupMemberButton</Name>
				<Type>DropDialogButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (element.validateAllowEdit())
            {
                if (!BudgetControlRule::existByBudgetControlConfiguration(budgetControlConfiguration.RecId))
                {
                    // No rules have been defined.
                    throw error("@SYS321378");
                }

                if (budgetGroupMember_ds.leaveRecord())
                {
                    element.resetBudgetGroupMemberCriteriaBuilder();

                    super();
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>dialogClosed</Name>
						<Source><![CDATA[
        public void dialogClosed(xFormRun _formRun)
        {
            super(_formRun);

            if (_formRun.closedOk())
            {
                BudgetControlICreateGroupMember budgetControlICreateGroupMember = _formRun as BudgetControlICreateGroupMember;

                if (budgetControlICreateGroupMember)
                {
                    recId groupRecId;
                    recId parentGroupMemberRecId;

                    if (element.isBudgetGroupsTreeRootNodeSelected())
                    {
                        // The selected item is the root item which is not a committed group member.
                        // Set the group and parent group member to 0 to create a new group and group member with no parent.
                        groupRecId = 0;
                        parentGroupMemberRecId = 0;
                    }
                    else
                    {
                        // The group member is being added as a child to the selected group member.
                        groupRecId = budgetGroupMember.BudgetGroup;
                        parentGroupMemberRecId = budgetGroupMember.RecId;
                    }

                    // Create the group member for the entered name and description.
                    BudgetGroupMember newGroupMember = BudgetControlGroupManager::createBudgetGroupMember(
                        budgetControlConfiguration.RecId,
                        groupRecId,
                        parentGroupMemberRecId,
                        budgetControlICreateGroupMember.getName(),
                        budgetControlICreateGroupMember.getDescription());

                    TreeItemIdx parentTreeItem = budgetGroupsTree.getSelection();

                    if (!parentTreeItem)
                    {
                        // When there is no active selection the node must be added to the root node.
                        parentTreeItem = budgetGroupsTree.getRoot();
                    }

                    // Add the new group member to the tree.
                    element.addBudgetGroupsTreeItem(parentTreeItem, newGroupMember);

                    budgetGroup_ds.research();

                    // Find the new group member.
                    // Find will select the correct tree item when the active method is called.
                    budgetGroupMember_ds.positionToRecord(newGroupMember);

                    element.selectBudgetGroupsTreeItem();

                    isSelectingNewGroupMember = true;
                }
            }

            // Ensure the tree is focused.
            budgetGroupsTree.setFocus();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DeleteBudgetGroupMemberButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            budgetGroupMember_ds.delete();

            budgetGroupsTree.setFocus();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetGroupsPermissionButton</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (budgetGroupMember_ds.leaveRecord())
            {
                super();
            }

            budgetGroupsTree.setFocus();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetGroupsTree</Name>
				<Type>Tree</Type>
				<Methods>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged(FormTreeItem _oldItem, FormTreeItem _newItem, FormTreeSelect _how)
        {
            super(_oldItem, _newItem, _how);

            if (!isSelectingTreeItem)
            {
                if (!budgetGroupMember_ds.leaveRecord())
                {
                    isSelectingTreeItem = true;

                    // Select the old item again as it was not valid and could not be saved.
                    budgetGroupsTree.select(_oldItem.idx());

                    isSelectingTreeItem = false;
                }
                else if (_newItem.data())
                {
                    if (!_oldItem.data())
                    {
                        // The old item was the root node and needs to force a reset to ensure the latest state is loaded.
                        budgetControlGroupManager = null;
                    }

                    // Get the budget group member for the selected node.
                    budgetGroupMember_ds.positionToRecord(BudgetGroupMember::find(_newItem.data()));
                }
                else
                {
                    // The new item is the root item for the ledger.
                    // Disable the controls.
                    element.setAllowEditForBudgetGroup();
                    element.resetBudgetGroupMemberCriteriaBuilder();
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetGroup_TimeSpan</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            SysTableLookup lookup = SysTableLookup::newParameters(tableNum(BudgetCycleTimeSpan), this);

            // Add the fields to be shown in the lookup form.
            lookup.addLookupfield(fieldnum(BudgetCycleTimeSpan, Name));
            lookup.addLookupfield(fieldnum(BudgetCycleTimeSpan, FiscalCalendar));
            lookup.addSelectionField(fieldNum(BudgetCycleTimeSpan, Name));

            // Perform the lookup.
            lookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                BudgetCycleTimeSpan budgetCycleTimeSpan;
                select firstonly count(RecId) from budgetCycleTimeSpan
                    where budgetCycleTimeSpan.Name == this.text();

                if (budgetCycleTimeSpan.RecId > 1)
                {
                    ret = checkFailed(strFmt("@SYS316757", tablePName(BudgetCycleTimeSpan)));
                }
                else if (budgetCycleTimeSpan.RecId == 0)
                {
                    ret = checkFailed(strFmt(
                        "@SYS304909",
                        this.text(),
                        fieldPName(BudgetCycleTimeSpan, Name),
                        tablePName(BudgetCycleTimeSpan)));
                }
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                BudgetCycleTimeSpan budgetCycleTimeSpan;
                select firstonly budgetCycleTimeSpan
                    where budgetCycleTimeSpan.Name == this.text();

                budgetGroup.BudgetCycleTimeSpan = budgetCycleTimeSpan.RecId;
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UserGroupMessageLevelsPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();

            // Research to get any new user groups.
            userGroupInfo_ds.research();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UserGroupMessageLevelsSelectAllButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (element.validateAllowEdit())
            {
                // Copy the current record details since we have to highlight the selected record after including all user groups.
                UserGroupInfo currentUserGroupInfo;
                currentUserGroupInfo.data(userGroupInfo);

                UserGroupInfo userGroupInfoLocal = userGroupInfo_DS.getFirst() as UserGroupInfo;

                ttsbegin;

                while (userGroupInfoLocal != null)
                {
                    if (!BudgetControlUserGroupSuppressWarnings::existByUserGroupAndConfiguration(userGroupInfoLocal.id, budgetControlConfiguration.RecId))
                    {
                        BudgetControlUserGroupSuppressWarnings userGroupSuppressWarnings;
                        userGroupSuppressWarnings.UserGroupInfo = userGroupInfoLocal.id;
                        userGroupSuppressWarnings.BudgetControlConfiguration = budgetControlConfiguration.RecId;
                        userGroupSuppressWarnings.insert();
                    }

                    userGroupInfoLocal = userGroupInfo_DS.getNext() as UserGroupInfo;
                }

                ttscommit;

                super();

                userGroupInfo_DS.research();
                userGroupInfo_DS.positionToRecord(currentUserGroupInfo);
                userGroupInfo_DS.refresh();
            }

            userGroupMessageLevelsGrid.setFocus();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UserGroupMessageLevelsClearAllButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (element.validateAllowEdit())
            {
                // Copy the current record details since we have to highlight the selected record after removing all user groups.
                UserGroupInfo currentUserGroupInfo;
                currentUserGroupInfo.data(userGroupInfo);

                UserGroupInfo userGroupInfoLocal = userGroupInfo_DS.getFirst() as UserGroupInfo;

                ttsbegin;

                while (userGroupInfoLocal != null)
                {
                    BudgetControlUserGroupSuppressWarnings userGroupSuppressWarnings;

                    delete_from userGroupSuppressWarnings
                        where userGroupSuppressWarnings.UserGroupInfo == userGroupInfoLocal.id
                            && userGroupSuppressWarnings.BudgetControlConfiguration == budgetControlConfiguration.RecId;

                    userGroupInfoLocal = userGroupInfo_DS.getNext() as UserGroupInfo;
                }

                ttscommit;

                super();

                userGroupInfo_DS.research();
                userGroupInfo_DS.positionToRecord(currentUserGroupInfo);
                userGroupInfo_DS.refresh();
            }

            userGroupMessageLevelsGrid.setFocus();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ActivatePage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();

            activateConfigurationButton.setFocus();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ActivateConfigurationButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (!isActive
                && BudgetControlConfigurationManager::confirmBudgetFundsAvailableCalcChanged(budgetControlConfiguration.RecId)
                && BudgetControlConfigurationManager::confirmSourceIntegratorDisabled(budgetControlConfiguration.RecId))
            {
                BudgetControlConfigurationActivate::activateDraft(budgetControlConfiguration.RecId);

                draftExists = BudgetControlConfiguration::existDraftForPrimaryLedger(primaryLedgerRecId);

                if (!draftExists)
                {
                    activeExists = BudgetControlConfiguration::existActiveForPrimaryLedger(primaryLedgerRecId);
                    budgetControlConfiguration_ds.executeQuery();
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EnableBudgetControlButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            BudgetControlConfigurationSetLedgerEnablement::setEnablement(primaryLedgerRecId, true);
            element.setVisibleEnableBudgetControl();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DisableBudgetControlButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (Box::yesNo("@SYS316666", DialogButton::No) == DialogButton::Yes)
            {
                BudgetControlConfigurationSetLedgerEnablement::setEnablement(primaryLedgerRecId, false);
                element.setVisibleEnableBudgetControl();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>BudgetControlConfiguration</Name>
			<Table>BudgetControlConfiguration</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DefaultBudgetCycleTimeSpan</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultInterval</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultResponsibleUser</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultThresholdPercent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DimensionHierarchyAccountStructure</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IncludeCarryforwardAmounts</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InUseBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InUseSinceDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsActive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MaintainCarryforwardAmounts</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryLedger</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubtractActualExpenditures</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubtractDraftEncumbranceReductions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubtractDraftEncumbrances</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubtractDraftPreencumbrances</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubtractEncumbrances</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubtractPreencumbrances</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubtractUnpostedActualExpenditures</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SumAmendments</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SumDraftAmendments</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SumDraftTransfersIn</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SumDraftTransfersOut</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SumOriginalBudget</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SumPreliminaryBudget</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SumTransfers</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseApportionedAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WarnOnOverBudgetThreshold</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>BudgetControlRule</Name>
			<Table>BudgetControlRule</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BudgetControlConfiguration</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetCycleTimeSpan</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Interval</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OverrideResponsibleUser</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TemporaryBudgetControlRule</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ThresholdPercent</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>BudgetControlConfiguration</JoinSource>
			<AllowCreate>No</AllowCreate>
			<Index>BudgetControlConfigurationNameIdx</Index>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>BudgetOverrideUserGroupOption</Name>
			<Table>BudgetOverrideUserGroupOption</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BudgetControlConfiguration</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultOverBudgetOption</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UserGroupInfo</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>BudgetControlConfiguration</JoinSource>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>MainAccount</Name>
			<Table>MainAccount</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountCategoryRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AdjustmentMethod_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CloseType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Closing</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ConsolidationMainAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DebitCreditBalanceDemand</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DebitCreditCheck</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DebitCreditProposal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeAdjusted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeAdjustmentRateType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FinancialReportingExchangeRateType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FinancialReportingTranslationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InflationAdjustment_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerChartOfAccounts</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MainAccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MainAccountTemplate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MandatoryPaymentReference</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Monetary</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OpeningAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentMainAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentMainAccount_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RepomoType_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingAccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SRUCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransferYearEndAccount_ES</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Type</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UnitOfMeasure</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UserInfoId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidateCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidatePosting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidateUser</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>BudgetGroupMember</Name>
			<Table>BudgetGroupMember</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BudgetGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentBudgetGroupMember</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TemporaryBudgetGroupMember</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>BudgetGroup</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<Index>BudgetGroupNameIdx</Index>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>BudgetGroup</Name>
			<Table>BudgetGroup</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BudgetControlConfiguration</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetCycleTimeSpan</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Interval</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Ordinal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OverrideResponsibleUser</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TemporaryBudgetGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ThresholdPercent</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>BudgetControlConfiguration</JoinSource>
			<AllowCreate>No</AllowCreate>
			<Index>BudgetControlConfigurationOrdinalIdx</Index>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>BudgetControlBudgetCycle</Name>
			<Table>BudgetControlBudgetCycle</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BudgetControlConfiguration</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetCycle</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetModelDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetModelId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetModelSubModelId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetModelType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>BudgetControlConfiguration</JoinSource>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>UserGroupInfo</Name>
			<Table>UserGroupInfo</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>id</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>BudgetControlSourceIntegratorEnabledTmp</Name>
			<Table>BudgetControlSourceIntegratorEnabledTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BudgetControlConfiguration</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetControlSourceIntegrator</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetControlSourceIntegratorValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DoBudgetCheckOnEntry</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsEnabled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsFiltered</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>BudgetControlConfiguration</JoinSource>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS314452</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<SetCompany xmlns="">No</SetCompany>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>MaintainButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>CreateDraftButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<NeededPermission>Manual</NeededPermission>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@Budget:ControlConfigurationCreateDraft</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>RestoreButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<NeededPermission>Manual</NeededPermission>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@Budget:RestoreActiveVersion</Text>
							</AxFormControl>
						</Controls>
						<DataSource>BudgetControlConfiguration</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>UnlockButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>UnlockButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<NeededPermission>Manual</NeededPermission>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@SYS329736</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>TOCGroup</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ParametersPage</Name>
						<ElementPosition>330382098</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ParametersHeader</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>ParametersHeaderMainInstruction</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>StaticText</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColorRGB>
											<Red>15</Red>
											<Green>0</Green>
											<Blue>0</Blue>
										</BackgroundColorRGB>
										<ColorScheme>RGB</ColorScheme>
										<FontSize>13</FontSize>
										<ForegroundColorRGB>
											<Red>0</Red>
											<Green>51</Green>
											<Blue>153</Blue>
										</ForegroundColorRGB>
										<Style>MainInstruction</Style>
										<Text>@SYS315202</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>ParametersHeaderSupplemental</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>StaticText</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS315203</Text>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>No</AllowUserSetup>
								<FrameType>None</FrameType>
								<Style>TOCTitleContainer</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ParametersBody</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>DimensionsAttributes</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormReferenceGroupControl">
												<Name>AccountStructure</Name>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_AccountStructure</HelpText>
												<Type>ReferenceGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>AccountStructure_Name</Name>
														<DataRelationPath>DimensionHierarchy</DataRelationPath>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
													</AxFormControl>
												</Controls>
												<DataSource>BudgetControlConfiguration</DataSource>
												<ReferenceField>DimensionHierarchyAccountStructure</ReferenceField>
												<ReplacementFieldGroup>Identification</ReplacementFieldGroup>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>DimensionAttributesList</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls />
												<FrameType>None</FrameType>
											</AxFormControl>
										</Controls>
										<Caption>@SYS315204</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>DefaultProperties</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>DefaultInterval</Name>
												<ElementPosition>613566756</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_DefaultInterval</HelpText>
												<Type>ComboBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>DefaultInterval</DataField>
												<DataSource>BudgetControlConfiguration</DataSource>
												<Items />
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormReferenceGroupControl">
												<Name>DefaultBudgetCycleTimeSpan</Name>
												<ElementPosition>920350134</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_DefaultBudgetCycleTimeSpan</HelpText>
												<Type>ReferenceGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>DefaultBudgetCycleTimeSpan_Name</Name>
														<DataRelationPath>BudgetCycleTimeSpan</DataRelationPath>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
													</AxFormControl>
												</Controls>
												<DataSource>BudgetControlConfiguration</DataSource>
												<ReferenceField>DefaultBudgetCycleTimeSpan</ReferenceField>
												<ReplacementFieldGroup>Name</ReplacementFieldGroup>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>DefaultResponsibleUser</Name>
												<ElementPosition>1227133512</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_DefaultResponsibleUser</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>DefaultResponsibleUser</DataField>
												<DataSource>BudgetControlConfiguration</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>BudgetThresholdGroup</Name>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>DefaultThresholdPercent</Name>
														<ElementPosition>1533916890</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_DefaultThresholdPercent</HelpText>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>DefaultThresholdPercent</DataField>
														<DataSource>BudgetControlConfiguration</DataSource>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>WarnOnOverBudgetThreshold</Name>
														<ElementPosition>1840700268</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_WarnOnOverBudgetThreshold</HelpText>
														<Type>CheckBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>WarnOnOverBudgetThreshold</DataField>
														<DataSource>BudgetControlConfiguration</DataSource>
													</AxFormControl>
												</Controls>
												<Breakable>No</Breakable>
											</AxFormControl>
										</Controls>
										<ColumnsMode>Fill</ColumnsMode>
										<Caption>@SYS315205</Caption>
										<DataSource>BudgetControlConfiguration</DataSource>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS315232</Caption>
						<DataSource>BudgetControlConfiguration</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>UserGroupOptionsPage</Name>
						<ElementPosition>495573147</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>UserGroupOptionsHeader</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>UserGroupOptionsHeaderMainInstruction</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>StaticText</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColorRGB>
											<Red>15</Red>
											<Green>0</Green>
											<Blue>0</Blue>
										</BackgroundColorRGB>
										<ColorScheme>RGB</ColorScheme>
										<FontSize>13</FontSize>
										<ForegroundColorRGB>
											<Red>0</Red>
											<Green>51</Green>
											<Blue>153</Blue>
										</ForegroundColorRGB>
										<Style>MainInstruction</Style>
										<Text>@SYS315206</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>UserGroupOptionsHeaderSupplemental</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>StaticText</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS315207</Text>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>No</AllowUserSetup>
								<FrameType>None</FrameType>
								<Style>TOCTitleContainer</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>UserGroupOptionsBody</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Pattern>ToolbarList</Pattern>
								<PatternVersion>1.2</PatternVersion>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneControl">
										<Name>UserGroupOptionsActionPane</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ActionPane</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>UserGroupButtonGroup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormCommandButtonControl">
														<Name>NewUserGroupButton</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<NeededPermission>Manual</NeededPermission>
														<Type>CommandButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<Command>New</Command>
														<NormalImage>New</NormalImage>
														<Primary>Yes</Primary>
														<Text>@SYS60080</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCommandButtonControl">
														<Name>DeleteUserGroupButton</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<NeededPermission>Manual</NeededPermission>
														<Type>CommandButton</Type>
														<FormControlExtension
															i:nil="true" />
														<Command>DeleteRecord</Command>
														<NormalImage>Delete</NormalImage>
														<SaveRecord>No</SaveRecord>
														<Text>@SYS313687</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<DataSource>BudgetOverrideUserGroupOption</DataSource>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
										<DataSource>BudgetOverrideUserGroupOption</DataSource>
										<Style>Strip</Style>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>UserGroupOptionsGrid</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Grid</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>UserGroupOptionsUserGroup</Name>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>UserGroupOptions_UserGroupInfo</Name>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_UserGroupOptions_UserGroupInfo</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>UserGroupInfo</DataField>
														<DataSource>BudgetOverrideUserGroupOption</DataSource>
														<Label>@SYS12006</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>UserGroupOptions_UserGroupDisplayName</Name>
														<AllowEdit>No</AllowEdit>
														<ElementPosition>1610612733</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_UserGroupOptions_UserGroupDisplayName</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>displayUserGroupName</DataMethod>
														<DataSource>BudgetOverrideUserGroupOption</DataSource>
													</AxFormControl>
												</Controls>
												<BackgroundColor>WindowBackground</BackgroundColor>
												<DataGroup>UserGroup</DataGroup>
												<DataSource>BudgetOverrideUserGroupOption</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>OverbudgetOptionGroup</Name>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>UserGroup_DefaultOverBudgetOption</Name>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_UserGroup_DefaultOverBudgetOption</HelpText>
														<Type>ComboBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>DefaultOverBudgetOption</DataField>
														<DataSource>BudgetOverrideUserGroupOption</DataSource>
														<Items />
													</AxFormControl>
												</Controls>
												<BackgroundColor>WindowBackground</BackgroundColor>
												<DataGroup>OverbudgetOption</DataGroup>
												<DataSource>BudgetOverrideUserGroupOption</DataSource>
											</AxFormControl>
										</Controls>
										<DataSource>BudgetOverrideUserGroupOption</DataSource>
										<MultiSelect>No</MultiSelect>
										<ShowRowLabels>No</ShowRowLabels>
									</AxFormControl>
								</Controls>
								<DataSource>BudgetOverrideUserGroupOption</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS315243</Caption>
						<DataSource>BudgetOverrideUserGroupOption</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>FundsAvailableCalcPage</Name>
						<ElementPosition>660764196</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FundsAvailableCalcHeader</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>FundsAvailableCalcHeaderMainInstruction</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>StaticText</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColorRGB>
											<Red>15</Red>
											<Green>0</Green>
											<Blue>0</Blue>
										</BackgroundColorRGB>
										<ColorScheme>RGB</ColorScheme>
										<FontSize>13</FontSize>
										<ForegroundColorRGB>
											<Red>0</Red>
											<Green>51</Green>
											<Blue>153</Blue>
										</ForegroundColorRGB>
										<Style>MainInstruction</Style>
										<Text>@SYS315208</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>FundsAvailableCalcHeaderSupplemental</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>StaticText</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS315209</Text>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>No</AllowUserSetup>
								<FrameType>None</FrameType>
								<Style>TOCTitleContainer</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FundsAvailableCalcBody</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SumSubtractAmounts</Name>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>SumAmounts</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>275</Width>
												<WidthMode>Manual</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>SumAmounts_SumOriginalBudget</Name>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_SumAmounts_SumOriginalBudget</HelpText>
														<Type>CheckBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>SumOriginalBudget</DataField>
														<DataSource>BudgetControlConfiguration</DataSource>
														<Style>Checkbox</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>SumAmounts_SumPreliminaryBudget</Name>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_SumAmounts_SumPreliminaryBudget</HelpText>
														<Type>CheckBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>SumPreliminaryBudget</DataField>
														<DataSource>BudgetControlConfiguration</DataSource>
														<Style>Checkbox</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>SumAmounts_SumAmendments</Name>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_SumAmounts_SumAmendments</HelpText>
														<Type>CheckBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>SumAmendments</DataField>
														<DataSource>BudgetControlConfiguration</DataSource>
														<Style>Checkbox</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>SumAmounts_SumDraftAmendments</Name>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_SumAmounts_SumDraftAmendments</HelpText>
														<Type>CheckBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>SumDraftAmendments</DataField>
														<DataSource>BudgetControlConfiguration</DataSource>
														<Style>Checkbox</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>SumAmounts_SumTransfers</Name>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_SumAmounts_SumTransfers</HelpText>
														<Type>CheckBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>SumTransfers</DataField>
														<DataSource>BudgetControlConfiguration</DataSource>
														<Style>Checkbox</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>SumAmounts_SumDraftTransfersIn</Name>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_SumAmounts_SumDraftTransfersIn</HelpText>
														<Type>CheckBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>SumDraftTransfersIn</DataField>
														<DataSource>BudgetControlConfiguration</DataSource>
														<Style>Checkbox</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>SumAmounts_SumDraftTransfersOut</Name>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_SumAmounts_SumDraftTransfersOut</HelpText>
														<Type>CheckBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>SumDraftTransfersOut</DataField>
														<DataSource>BudgetControlConfiguration</DataSource>
														<Style>Checkbox</Style>
													</AxFormControl>
												</Controls>
												<DataGroup>AvailableBudgetSum</DataGroup>
												<DataSource>BudgetControlConfiguration</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>SubtractAmounts</Name>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>SubtractAmounts_SubtractActualExpenditures</Name>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_SubtractAmounts_SubtractActualExpenditures</HelpText>
														<Type>CheckBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>SubtractActualExpenditures</DataField>
														<DataSource>BudgetControlConfiguration</DataSource>
														<Style>Checkbox</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>SubtractAmounts_SubtractUnpostedActualExpenditures</Name>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_SubtractAmounts_SubtractUnpostedActualExpenditures</HelpText>
														<Type>CheckBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>SubtractUnpostedActualExpenditures</DataField>
														<DataSource>BudgetControlConfiguration</DataSource>
														<Style>Checkbox</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>SubtractAmounts_SubtractEncumbrances</Name>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_SubtractAmounts_SubtractEncumbrances</HelpText>
														<Type>CheckBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>SubtractEncumbrances</DataField>
														<DataSource>BudgetControlConfiguration</DataSource>
														<Style>Checkbox</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>SubtractAmounts_SubtractDraftEncumbrances</Name>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_SubtractAmounts_SubtractDraftEncumbrances</HelpText>
														<Type>CheckBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>SubtractDraftEncumbrances</DataField>
														<DataSource>BudgetControlConfiguration</DataSource>
														<Style>Checkbox</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>SubtractAmounts_SubtractDraftEncumbranceReductions</Name>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_SubtractAmounts_SubtractDraftEncumbranceReductions</HelpText>
														<Type>CheckBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>SubtractDraftEncumbranceReductions</DataField>
														<DataSource>BudgetControlConfiguration</DataSource>
														<Style>Checkbox</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>SubtractAmounts_SubtractPreencumbrances</Name>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_SubtractAmounts_SubtractPreencumbrances</HelpText>
														<Type>CheckBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>SubtractPreencumbrances</DataField>
														<DataSource>BudgetControlConfiguration</DataSource>
														<Style>Checkbox</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>SubtractAmounts_SubtractDraftPreencumbrances</Name>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_SubtractAmounts_SubtractDraftPreencumbrances</HelpText>
														<Type>CheckBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>SubtractDraftPreencumbrances</DataField>
														<DataSource>BudgetControlConfiguration</DataSource>
														<Style>Checkbox</Style>
													</AxFormControl>
												</Controls>
												<DataGroup>AvailableBudgetSubtract</DataGroup>
												<DataSource>BudgetControlConfiguration</DataSource>
											</AxFormControl>
										</Controls>
										<Columns>2</Columns>
										<TopMargin>5</TopMargin>
										<TopMarginMode>Fixed</TopMarginMode>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>AdditionalAmounts</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>CarryfowardAmounts</Name>
												<ElementPosition>858993458</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>275</Width>
												<WidthMode>Manual</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>IncludeCarryForwardAmounts</Name>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_IncludeCarryForwardAmounts</HelpText>
														<Type>CheckBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>IncludeCarryforwardAmounts</DataField>
														<DataSource>BudgetControlConfiguration</DataSource>
														<Style>Checkbox</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>MaintainCarryforwardAmounts</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Enabled>No</Enabled>
														<HelpText>@FieldDescriptions_Budgeting:MaintainCarryforwardStatus</HelpText>
														<Type>CheckBox</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>MaintainCarryforwardAmounts</DataField>
														<DataSource>BudgetControlConfiguration</DataSource>
														<Style>Checkbox</Style>
													</AxFormControl>
												</Controls>
												<Caption>@Budget:ControlConfigurationCarryforwardAmounts</Caption>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>Apportionments</Name>
												<ElementPosition>1342177278</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>UseApportionedAmount</Name>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>CheckBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>UseApportionedAmount</DataField>
														<DataSource>BudgetControlConfiguration</DataSource>
														<Style>Checkbox</Style>
													</AxFormControl>
												</Controls>
												<Caption>@SPS383</Caption>
											</AxFormControl>
										</Controls>
										<Columns>2</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>FundsAvailableCalc</Name>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Pattern>FillText</Pattern>
										<PatternVersion>UX7 1.0</PatternVersion>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>fundsAvailableCalcText</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>StaticText</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
											</AxFormControl>
										</Controls>
										<TopMargin>5</TopMargin>
										<TopMarginMode>Fixed</TopMarginMode>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS129907</Caption>
						<DataSource>BudgetControlConfiguration</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>IntegratorsPage</Name>
						<ElementPosition>825955245</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>IntegratorsHeader</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>IntegratorsHeaderMainInstruction</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>StaticText</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColorRGB>
											<Red>15</Red>
											<Green>0</Green>
											<Blue>0</Blue>
										</BackgroundColorRGB>
										<ColorScheme>RGB</ColorScheme>
										<FontSize>13</FontSize>
										<ForegroundColorRGB>
											<Red>0</Red>
											<Green>51</Green>
											<Blue>153</Blue>
										</ForegroundColorRGB>
										<Style>MainInstruction</Style>
										<Text>@Budget:ControlConfigurationTurnOnItegratorsMainInstruction</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>IntegratorsHeaderSupplemental</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>StaticText</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Text>@Budget:ControlConfigurationTurnOnItegratorsSecondaryInstruction</Text>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>No</AllowUserSetup>
								<FrameType>None</FrameType>
								<Style>TOCTitleContainer</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>IntegratorsBody</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Pattern>ToolbarList</Pattern>
								<PatternVersion>1.2</PatternVersion>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneControl">
										<Name>IntegratorsActionPane</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ActionPane</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>IntegratorsFilteringButtonGroup</Name>
												<Type>ButtonGroup</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>ViewFilteringButton</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
														<NormalImage>View</NormalImage>
														<Text>@Budget:IntegratorFilteringView</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>AddEditFilteringButton</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
														<NormalImage>Add</NormalImage>
														<Text>@Budget:IntegratorFilteringAddEdit</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>DeleteFilteringButton</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<NormalImage>Delete</NormalImage>
														<Text>@Budget:IntegratorFilteringDelete</Text>
													</AxFormControl>
												</Controls>
											</AxFormControl>
										</Controls>
										<Style>Strip</Style>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>IntegratorsGrid</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Grid</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SourceIntegratorValue</Name>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>BudgetControlSourceIntegratorValue</DataField>
												<DataSource>BudgetControlSourceIntegratorEnabledTmp</DataSource>
												<Label>@Budget:ControlConfigurationIntegrator</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>SourceIntegratorIsEnabled</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>CheckBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>IsEnabled</DataField>
												<DataSource>BudgetControlSourceIntegratorEnabledTmp</DataSource>
												<Label>@Budget:ControlConfigurationIntegratorInclude</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>SourceIntegratorDoBudgetCheckOnEntry</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>CheckBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>DoBudgetCheckOnEntry</DataField>
												<DataSource>BudgetControlSourceIntegratorEnabledTmp</DataSource>
												<Label>@Budget:ControlConfigurationIntegratorDoCheckOnEntry</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>IsFiltered</Name>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<Alignment>Center</Alignment>
												<DataField>IsFiltered</DataField>
												<DataSource>BudgetControlSourceIntegratorEnabledTmp</DataSource>
												<Label>@Budget:IntegratorIsFilteredLabel</Label>
											</AxFormControl>
										</Controls>
										<DataSource>BudgetControlSourceIntegratorEnabledTmp</DataSource>
										<MultiSelect>No</MultiSelect>
										<ShowRowLabels>No</ShowRowLabels>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@Budget:ControlConfigurationTurnOnIntegrators</Caption>
						<DataSource>BudgetControlConfiguration</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>BudgetModelsPage</Name>
						<ElementPosition>1156337343</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>BudgetModelsHeader</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>BudgetModelsHeaderMainInstruction</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>StaticText</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColorRGB>
											<Red>15</Red>
											<Green>0</Green>
											<Blue>0</Blue>
										</BackgroundColorRGB>
										<ColorScheme>RGB</ColorScheme>
										<FontSize>13</FontSize>
										<ForegroundColorRGB>
											<Red>0</Red>
											<Green>51</Green>
											<Blue>153</Blue>
										</ForegroundColorRGB>
										<Style>MainInstruction</Style>
										<Text>@SYS315215</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>BudgetModelsHeaderSupplemental</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>StaticText</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS315216</Text>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>No</AllowUserSetup>
								<FrameType>None</FrameType>
								<Style>TOCTitleContainer</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>BudgetModelsBody</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Pattern>ToolbarList</Pattern>
								<PatternVersion>1.2</PatternVersion>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneControl">
										<Name>BudgetModelsActionPane</Name>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ActionPane</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>BudgetModelsMaintainButtonGroup</Name>
												<Type>ButtonGroup</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormCommandButtonControl">
														<Name>NewBudgetModelsButton</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<NeededPermission>Manual</NeededPermission>
														<Type>CommandButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<Command>New</Command>
														<NormalImage>New</NormalImage>
														<Primary>Yes</Primary>
														<Text>@SYS60080</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCommandButtonControl">
														<Name>DeleteBudgetModelsButton</Name>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<NeededPermission>Manual</NeededPermission>
														<Type>CommandButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<Command>DeleteRecord</Command>
														<NormalImage>Delete</NormalImage>
														<Primary>Yes</Primary>
														<SaveRecord>No</SaveRecord>
														<Text>@SYS313687</Text>
													</AxFormControl>
												</Controls>
												<DataSource>BudgetControlBudgetCycle</DataSource>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
										<DataSource>BudgetControlBudgetCycle</DataSource>
										<Style>Strip</Style>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>BudgetModelsGrid</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Grid</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BudgetCycleTimeSpanLookup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>613566756</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_BudgetCycleTimeSpanLookup</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editBudgetCycleTimeSpan</DataMethod>
												<DataSource>BudgetControlBudgetCycle</DataSource>
												<DisplayLength>50</DisplayLength>
												<DisplayLengthMode>Fixed</DisplayLengthMode>
												<Label>@SYS314453</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormReferenceGroupControl">
												<Name>BudgetControlBudgetCycle_BudgetCycle</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>920350134</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_BudgetControlBudgetCycle_BudgetCycle</HelpText>
												<Type>ReferenceGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>BudgetControlBudgetCycle_BudgetCycle_Name</Name>
														<DataRelationPath>BudgetCycle</DataRelationPath>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
													</AxFormControl>
												</Controls>
												<DataSource>BudgetControlBudgetCycle</DataSource>
												<Label>@SYS314460</Label>
												<ReferenceField>BudgetCycle</ReferenceField>
												<ReplacementFieldGroup>Name</ReplacementFieldGroup>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>BudgetModels_CycleStartDate</Name>
												<ElementPosition>1227133512</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_BudgetModels_CycleStartDate</HelpText>
												<Type>Date</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>displayStartDate</DataMethod>
												<DataSource>BudgetControlBudgetCycle</DataSource>
												<DisplayLength>20</DisplayLength>
												<DisplayLengthMode>Fixed</DisplayLengthMode>
												<Label>@SYS314464</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>BudgetModels_CycleEndDate</Name>
												<ElementPosition>1533916890</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_BudgetModels_CycleEndDate</HelpText>
												<Type>Date</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>displayEndDate</DataMethod>
												<DataSource>BudgetControlBudgetCycle</DataSource>
												<DisplayLength>20</DisplayLength>
												<DisplayLengthMode>Fixed</DisplayLengthMode>
												<Label>@SYS320411</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BudgetControlBudgetCycle_BudgetModel</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1840700268</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_BudgetControlBudgetCycle_BudgetModel</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editBudgetModel</DataMethod>
												<DataSource>BudgetControlBudgetCycle</DataSource>
												<DisplayLength>20</DisplayLength>
												<DisplayLengthMode>Fixed</DisplayLengthMode>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
										<DataSource>BudgetControlBudgetCycle</DataSource>
										<MultiSelect>No</MultiSelect>
										<ShowRowLabels>No</ShowRowLabels>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS315249</Caption>
						<DataSource>BudgetControlBudgetCycle</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>RulesPage</Name>
						<ElementPosition>1321528392</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>RulesHeader</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>RulesHeaderMainInstruction</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>StaticText</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColorRGB>
											<Red>15</Red>
											<Green>0</Green>
											<Blue>0</Blue>
										</BackgroundColorRGB>
										<ColorScheme>RGB</ColorScheme>
										<FontSize>13</FontSize>
										<ForegroundColorRGB>
											<Red>0</Red>
											<Green>51</Green>
											<Blue>153</Blue>
										</ForegroundColorRGB>
										<Style>MainInstruction</Style>
										<Text>@SYS315217</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>RulesHeaderSupplemental</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>StaticText</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS315218</Text>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>No</AllowUserSetup>
								<FrameType>None</FrameType>
								<Style>TOCTitleContainer</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>RulesBody</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Pattern>NestedSimpleListDetails</Pattern>
								<PatternVersion>UX7 1.1</PatternVersion>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneControl">
										<Name>RulesActionPane</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ActionPane</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>RulesMaintainButtonGroup</Name>
												<ElementPosition>858993458</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormDropDialogButtonControl">
														<Name>RulesNewButton</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>DropDialogButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataSource>BudgetControlConfiguration</DataSource>
														<MenuItemName>BudgetControlCreateRule</MenuItemName>
														<NeedsRecord>Yes</NeedsRecord>
														<NormalImage>New</NormalImage>
														<Primary>Yes</Primary>
														<SaveRecord>No</SaveRecord>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>RulesDeleteButton</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<NeededPermission>Manual</NeededPermission>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<NormalImage>Delete</NormalImage>
														<Primary>Yes</Primary>
														<SaveRecord>No</SaveRecord>
														<Text>@SYS14425</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<DataSource>BudgetControlRule</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>RulesPermissionButtonGroup</Name>
												<ElementPosition>1717986916</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>RulesPermissionButton</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>MenuFunctionButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataSource>BudgetControlRule</DataSource>
														<MenuItemName>BudgetControlRuleUserGroupOption</MenuItemName>
														<NormalImage>Permission</NormalImage>
														<SaveRecord>No</SaveRecord>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<DataSource>BudgetControlRule</DataSource>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
										<DataSource>BudgetControlRule</DataSource>
										<Style>Strip</Style>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>RulesDetailsBody</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>RulesGridContainer</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>858993458</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormGridControl">
														<Name>RulesGrid</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Skip>Yes</Skip>
														<Type>Grid</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>SizeToContent</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>BudgetControlRuleGrid_Name</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>1073741822</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_BudgetControlRuleGrid_Name</HelpText>
																<Type>String</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataField>Name</DataField>
																<DataSource>BudgetControlRule</DataSource>
																<Label>@SYS314446</Label>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>BudgetControlRuleGrid_Description</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>1610612733</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>String</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<Width>130</Width>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataField>Description</DataField>
																<DataSource>BudgetControlRule</DataSource>
																<Label>@SYS104939</Label>
															</AxFormControl>
														</Controls>
														<AlternateRowShading>No</AlternateRowShading>
														<DataSource>BudgetControlRule</DataSource>
														<MultiSelect>No</MultiSelect>
														<ShowRowLabels>No</ShowRowLabels>
														<Style>List</Style>
													</AxFormControl>
												</Controls>
												<RightMargin>0</RightMargin>
												<RightMarginMode>Fixed</RightMarginMode>
												<FrameType>None</FrameType>
												<ViewEditMode>View</ViewEditMode>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>RulesDetailsContainer</Name>
												<ElementPosition>1717986916</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>RulesDetailsHeader</Name>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Group</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>BudgetControlRule_Name</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>1073741822</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_BudgetControlRule_Name</HelpText>
																<Type>String</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataField>Name</DataField>
																<DataSource>BudgetControlRule</DataSource>
																<Label>@SYS314446</Label>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>BudgetControlRule_Description</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>1610612733</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>String</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataField>Description</DataField>
																<DataSource>BudgetControlRule</DataSource>
																<Label>@SYS104939</Label>
															</AxFormControl>
														</Controls>
														<ColumnsMode>Fill</ColumnsMode>
														<FrameType>None</FrameType>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>RulesDetailsSettings</Name>
														<Pattern>Custom</Pattern>
														<Type>Group</Type>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormTabControl">
																<Name>RulesDetailsFastTab</Name>
																<Type>Tab</Type>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormTabPageControl">
																		<Name>RulesDetailsCriteriaFastTabPage</Name>
																		<Pattern>DimensionExpressionBuilder</Pattern>
																		<PatternVersion>1.0</PatternVersion>
																		<Type>TabPage</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormContainerControl">
																				<Name>RuleCriteriaBuilder</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<NeededPermission>Update</NeededPermission>
																				<Type>Container</Type>
																				<FormControlExtension>
																					<Name>DimensionExpressionBuilder</Name>
																					<ExtensionComponents />
																					<ExtensionProperties>
																						<AxFormControlExtensionProperty>
																							<Name>parmControllerClassName</Name>
																							<Type>ExtendedDataType</Type>
																							<TypeName>ClassName</TypeName>
																							<Value>BudgetDimensionExpressionBuilderController</Value>
																						</AxFormControlExtensionProperty>
																					</ExtensionProperties>
																				</FormControlExtension>
																				<Controls />
																			</AxFormControl>
																		</Controls>
																		<HideIfEmpty>No</HideIfEmpty>
																		<Caption>@SYS8815</Caption>
																		<DataSource>BudgetControlRule</DataSource>
																		<FastTabExpanded>Yes</FastTabExpanded>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormTabPageControl">
																		<Name>RulesDetailsPropertiesFastTabPage</Name>
																		<Type>TabPage</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormComboBoxControl">
																				<Name>BudgetControlRule_Interval</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ElementPosition>715827882</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_BudgetControlRule_Interval</HelpText>
																				<Type>ComboBox</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>Interval</DataField>
																				<DataSource>BudgetControlRule</DataSource>
																				<Label>@SYS320385</Label>
																				<Items />
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormReferenceGroupControl">
																				<Name>BudgetControlRule_BudgetCycleTimeSpan</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ElementPosition>1073741823</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_BudgetControlRule_BudgetCycleTimeSpan</HelpText>
																				<Type>ReferenceGroup</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls>
																					<AxFormControl xmlns=""
																						i:type="AxFormStringControl">
																						<Name>BudgetControlRule_BudgetCycleTimeSpan_Name</Name>
																						<DataRelationPath>BudgetCycleTimeSpan</DataRelationPath>
																						<FilterExpression>%1</FilterExpression>
																						<HeightMode>Auto</HeightMode>
																						<Type>String</Type>
																						<VerticalSpacing>-1</VerticalSpacing>
																						<WidthMode>Auto</WidthMode>
																						<FormControlExtension
																							i:nil="true" />
																					</AxFormControl>
																				</Controls>
																				<DataSource>BudgetControlRule</DataSource>
																				<ReferenceField>BudgetCycleTimeSpan</ReferenceField>
																				<ReplacementFieldGroup>Name</ReplacementFieldGroup>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormStringControl">
																				<Name>BudgetControlRule_OverrideResponsibleUser</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ElementPosition>1431655764</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_BudgetControlRule_OverrideResponsibleUser</HelpText>
																				<Type>String</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>OverrideResponsibleUser</DataField>
																				<DataSource>BudgetControlRule</DataSource>
																				<Label>@SYS320388</Label>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormRealControl">
																				<Name>BudgetControlRule_ThresholdPercent</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ElementPosition>1789569705</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_BudgetControlRule_ThresholdPercent</HelpText>
																				<Type>Real</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>ThresholdPercent</DataField>
																				<DataSource>BudgetControlRule</DataSource>
																				<Label>@SYS320389</Label>
																				<NoOfDecimals>-1</NoOfDecimals>
																			</AxFormControl>
																		</Controls>
																		<ColumnsMode>Fill</ColumnsMode>
																		<HideIfEmpty>No</HideIfEmpty>
																		<Caption>@SYS320384</Caption>
																		<DataSource>BudgetControlRule</DataSource>
																		<FastTabExpanded>Yes</FastTabExpanded>
																	</AxFormControl>
																</Controls>
																<DataSource>BudgetControlRule</DataSource>
																<Style>FastTabs</Style>
															</AxFormControl>
														</Controls>
														<FrameType>None</FrameType>
													</AxFormControl>
												</Controls>
												<RightMargin>5</RightMargin>
												<RightMarginMode>Fixed</RightMarginMode>
												<TopMargin>5</TopMargin>
												<TopMarginMode>Fixed</TopMarginMode>
												<FrameType>None</FrameType>
											</AxFormControl>
										</Controls>
										<Columns>2</Columns>
										<Columnspace>0</Columnspace>
										<ColumnspaceMode>Fixed</ColumnspaceMode>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<DataSource>BudgetControlRule</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS315217</Caption>
						<DataSource>BudgetControlRule</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>MainAccountsPage</Name>
						<ElementPosition>1486719441</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>MainAccountsHeader</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>MainAccountsHeaderMainInstruction</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>StaticText</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColorRGB>
											<Red>15</Red>
											<Green>0</Green>
											<Blue>0</Blue>
										</BackgroundColorRGB>
										<ColorScheme>RGB</ColorScheme>
										<FontSize>13</FontSize>
										<ForegroundColorRGB>
											<Red>0</Red>
											<Green>51</Green>
											<Blue>153</Blue>
										</ForegroundColorRGB>
										<Style>MainInstruction</Style>
										<Text>@SYS315219</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>MainAccountsHeaderSupplemental</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>StaticText</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS315220</Text>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>No</AllowUserSetup>
								<FrameType>None</FrameType>
								<Style>TOCTitleContainer</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>MainAccountsBody</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Pattern>ToolbarList</Pattern>
								<PatternVersion>1.2</PatternVersion>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneControl">
										<Name>MainAccountsActionPane</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ActionPane</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>MainAccountsSelectButtonGroup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>MainAccountsSelectAllButton</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<NeededPermission>Manual</NeededPermission>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<Text>@SYS28958</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>MainAccountsClearAllButton</Name>
														<ElementPosition>1610612733</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<NeededPermission>Manual</NeededPermission>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<Text>@SYS88470</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<DataSource>MainAccount</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>MainAccountsFilterButtonGroup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormCommandButtonControl">
														<Name>MainAccountsFilterButton</Name>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<NeededPermission>Manual</NeededPermission>
														<Type>CommandButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<Command>AdvancedFilterAndSort</Command>
														<Text>@SYS11584</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<DataSource>MainAccount</DataSource>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
										<DataSource>MainAccount</DataSource>
										<Style>Strip</Style>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>MainAccountsFilterGroup</Name>
										<Pattern>CustomFilters</Pattern>
										<PatternVersion>1.1</PatternVersion>
										<Type>Group</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl>
												<Name>MainAccountsQuickFilter</Name>
												<FormControlExtension>
													<Name>QuickFilterControl</Name>
													<ExtensionComponents />
													<ExtensionProperties>
														<AxFormControlExtensionProperty>
															<Name>targetControlName</Name>
															<Type>String</Type>
															<Value>MainAccountsGrid</Value>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>defaultColumnName</Name>
															<Type>String</Type>
															<Value>MainAccount_MainAccountId</Value>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>placeholderText</Name>
															<Type>String</Type>
														</AxFormControlExtensionProperty>
													</ExtensionProperties>
												</FormControlExtension>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>HorizontalLeft</ArrangeMethod>
										<FrameType>None</FrameType>
										<Style>CustomFilter</Style>
										<ViewEditMode>Edit</ViewEditMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>MainAccountsGrid</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Grid</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>SelectMainAccount</Name>
												<ElementPosition>715827882</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editBudgetControlMainAccount</DataMethod>
												<DataSource>MainAccount</DataSource>
												<Label>@Budget:BudgetControlConfigurationSelectMainAccount</Label>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>MainAccount_MainAccountId</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_MainAccount_MainAccountId</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>MainAccountId</DataField>
												<DataSource>MainAccount</DataSource>
												<Label>@SYS129344</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>MainAccount_Name</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_MainAccount_Name</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>Name</DataField>
												<DataSource>MainAccount</DataSource>
												<Label>@SYS7399</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>MainAccount_Type</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>1789569705</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_MainAccount_Type</HelpText>
												<Type>ComboBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>Type</DataField>
												<DataSource>MainAccount</DataSource>
												<Label>@SYS27730</Label>
												<Items />
											</AxFormControl>
										</Controls>
										<DataSource>MainAccount</DataSource>
										<MultiSelect>No</MultiSelect>
										<ShowRowLabels>No</ShowRowLabels>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS315219</Caption>
						<DataSource>MainAccount</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>BudgetGroupsPage</Name>
						<ElementPosition>1651910490</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>BudgetGroupsHeader</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>BudgetGroupsHeaderMainInstruction</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>StaticText</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColorRGB>
											<Red>15</Red>
											<Green>0</Green>
											<Blue>0</Blue>
										</BackgroundColorRGB>
										<ColorScheme>RGB</ColorScheme>
										<FontSize>13</FontSize>
										<ForegroundColorRGB>
											<Red>0</Red>
											<Green>51</Green>
											<Blue>153</Blue>
										</ForegroundColorRGB>
										<Style>MainInstruction</Style>
										<Text>@SYS315222</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>BudgetGroupsHeaderSupplemental</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>StaticText</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS315223</Text>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>No</AllowUserSetup>
								<FrameType>None</FrameType>
								<Style>TOCTitleContainer</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>BudgetGroupsBody</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Pattern>NestedSimpleListDetails</Pattern>
								<PatternVersion>UX7 1.1</PatternVersion>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneControl">
										<Name>BudgetGroupsActionPane</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ActionPane</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>MaintainBudgetGroupsButtonGroup</Name>
												<ElementPosition>858993458</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormDropDialogButtonControl">
														<Name>NewBudgetGroupMemberButton</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>DropDialogButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataSource>BudgetControlConfiguration</DataSource>
														<MenuItemName>BudgetControlCreateGroupMember</MenuItemName>
														<NeedsRecord>Yes</NeedsRecord>
														<NormalImage>New</NormalImage>
														<Primary>Yes</Primary>
														<SaveRecord>No</SaveRecord>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>DeleteBudgetGroupMemberButton</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<NeededPermission>Manual</NeededPermission>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<NormalImage>Delete</NormalImage>
														<Primary>Yes</Primary>
														<SaveRecord>No</SaveRecord>
														<Text>@SYS313687</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<DataSource>BudgetGroupMember</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>BudgetGroupsPermissionButtonGroup</Name>
												<ElementPosition>1717986916</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>BudgetGroupsPermissionButton</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>MenuFunctionButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataSource>BudgetGroupMember</DataSource>
														<MenuItemName>BudgetControlGroupUserGroupOption</MenuItemName>
														<NormalImage>Permission</NormalImage>
														<SaveRecord>No</SaveRecord>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<DataSource>BudgetGroupMember</DataSource>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
										<DataSource>BudgetGroupMember</DataSource>
										<Style>Strip</Style>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>BudgetGroupsDetailsBody</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>BudgetGroupsTreeContainer</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>858993458</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormTreeControl">
														<Name>BudgetGroupsTree</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>SizeToAvailable</HeightMode>
														<Type>Tree</Type>
														<VerticalSpacingMode>Fixed</VerticalSpacingMode>
														<FormControlExtension
															i:nil="true" />
														<BackStyle>Transparent</BackStyle>
														<LinesAtRoot>No</LinesAtRoot>
														<TrackSelect>Yes</TrackSelect>
													</AxFormControl>
												</Controls>
												<RightMargin>0</RightMargin>
												<RightMarginMode>Fixed</RightMarginMode>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>BudgetGroupsDetailsContainer</Name>
												<ElementPosition>1717986916</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>BudgetGroupsDetailsHeader</Name>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Group</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>BudgetGroupMember_Name</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>1073741822</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_BudgetGroupMember_Name</HelpText>
																<Type>String</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataMethod>editName</DataMethod>
																<DataSource>BudgetGroupMember</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>BudgetGroupMember_Description</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>1610612733</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>String</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataMethod>editDescription</DataMethod>
																<DataSource>BudgetGroupMember</DataSource>
																<Label>@sys35878</Label>
															</AxFormControl>
														</Controls>
														<ColumnsMode>Fill</ColumnsMode>
														<DataSource>BudgetGroupMember</DataSource>
														<FrameType>None</FrameType>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>BudgetGroupsDetailsSettings</Name>
														<Pattern>Custom</Pattern>
														<Type>Group</Type>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormTabControl">
																<Name>BudgetGroupsDetailsFastTab</Name>
																<Type>Tab</Type>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormTabPageControl">
																		<Name>BudgetGroupsDetailsCriteriaFastTabPage</Name>
																		<Pattern>DimensionExpressionBuilder</Pattern>
																		<PatternVersion>1.0</PatternVersion>
																		<Type>TabPage</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormContainerControl">
																				<Name>BudgetGroupMemberCriteriaBuilder</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<NeededPermission>Update</NeededPermission>
																				<Type>Container</Type>
																				<FormControlExtension>
																					<Name>DimensionExpressionBuilder</Name>
																					<ExtensionComponents />
																					<ExtensionProperties>
																						<AxFormControlExtensionProperty>
																							<Name>parmControllerClassName</Name>
																							<Type>ExtendedDataType</Type>
																							<TypeName>ClassName</TypeName>
																							<Value>BudgetDimensionExpressionBuilderController</Value>
																						</AxFormControlExtensionProperty>
																					</ExtensionProperties>
																				</FormControlExtension>
																				<Controls />
																			</AxFormControl>
																		</Controls>
																		<HideIfEmpty>No</HideIfEmpty>
																		<Caption>@SYS320383</Caption>
																		<DataSource>BudgetGroupMember</DataSource>
																		<FastTabExpanded>Yes</FastTabExpanded>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormTabPageControl">
																		<Name>BudgetGroupsDetailsPropertiesFastTabPage</Name>
																		<Pattern>FieldsFieldGroups</Pattern>
																		<PatternVersion>1.1</PatternVersion>
																		<Type>TabPage</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormComboBoxControl">
																				<Name>BudgetGroup_Interval</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ElementPosition>715827882</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<Type>ComboBox</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<FormControlExtension
																					i:nil="true" />
																				<DataMethod>editInterval</DataMethod>
																				<DataSource>BudgetGroup</DataSource>
																				<Label>@SYS328525</Label>
																				<Items />
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormStringControl">
																				<Name>BudgetGroup_TimeSpan</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_BudgetGroup_TimeSpan</HelpText>
																				<Type>String</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataMethod>editTimeSpan</DataMethod>
																				<DataSource>BudgetGroup</DataSource>
																				<Label>@SYS314460</Label>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormStringControl">
																				<Name>BudgetGroupProperties_OverrideResponsibleUser</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ElementPosition>1431655764</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_BudgetGroupProperties_OverrideResponsibleUser</HelpText>
																				<Type>String</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<FormControlExtension
																					i:nil="true" />
																				<DataMethod>editOverrideResponsibleUser</DataMethod>
																				<DataSource>BudgetGroup</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormRealControl">
																				<Name>BudgetGroupProperties_ThresholdPercent</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ElementPosition>1789569705</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_BudgetGroupProperties_ThresholdPercent</HelpText>
																				<Type>Real</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<FormControlExtension
																					i:nil="true" />
																				<DataMethod>editThresholdPercent</DataMethod>
																				<DataSource>BudgetGroup</DataSource>
																				<NoOfDecimals>-1</NoOfDecimals>
																			</AxFormControl>
																		</Controls>
																		<ColumnsMode>Fill</ColumnsMode>
																		<Caption>@SYS302911</Caption>
																		<DataSource>BudgetGroup</DataSource>
																		<FastTabExpanded>Yes</FastTabExpanded>
																	</AxFormControl>
																</Controls>
																<DataSource>BudgetGroupMember</DataSource>
																<Style>FastTabs</Style>
															</AxFormControl>
														</Controls>
														<FrameType>None</FrameType>
													</AxFormControl>
												</Controls>
												<RightMargin>5</RightMargin>
												<RightMarginMode>Fixed</RightMarginMode>
												<TopMargin>5</TopMargin>
												<TopMarginMode>Fixed</TopMarginMode>
												<FrameType>None</FrameType>
											</AxFormControl>
										</Controls>
										<Columns>2</Columns>
										<Columnspace>0</Columnspace>
										<ColumnspaceMode>Fixed</ColumnspaceMode>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS328447</Caption>
						<DataSource>BudgetGroupMember</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>UserGroupMessageLevelsPage</Name>
						<ElementPosition>1817101539</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>UserGroupMessageLevelsHeader</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>UserGroupMessageLevelsHdrMainInstruction</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Skip>Yes</Skip>
										<Type>StaticText</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Style>MainInstruction</Style>
										<Text>@SYS331880</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>UserGroupMessageLevelsHdrSupplemental</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>StaticText</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS331872</Text>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>No</AllowUserSetup>
								<FrameType>None</FrameType>
								<Style>TOCTitleContainer</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>UserGroupMessageLevelsBody</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Pattern>ToolbarList</Pattern>
								<PatternVersion>1.2</PatternVersion>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneControl">
										<Name>UserGroupMessageLevelsActionPane</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ActionPane</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>UserGroupMessageLevelsSelectButtonGroup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>UserGroupMessageLevelsSelectAllButton</Name>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<NeededPermission>Manual</NeededPermission>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<Text>@SYS28958</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>UserGroupMessageLevelsClearAllButton</Name>
														<ElementPosition>1610612733</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<NeededPermission>Manual</NeededPermission>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<Text>@SYS88470</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<DataSource>UserGroupInfo</DataSource>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
										<DataSource>UserGroupInfo</DataSource>
										<Style>Strip</Style>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>UserGroupMessageLevelsGrid</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Grid</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>SelectUserGroup</Name>
												<ElementPosition>858993458</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editUserGroupSuppressWarnings</DataMethod>
												<DataSource>UserGroupInfo</DataSource>
												<Label>@Budget:BudgetControlConfigurationSelectUserGroup</Label>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>UserGroupInfo_Id</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>1288490187</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_UserGroupInfo_Id</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>id</DataField>
												<DataSource>UserGroupInfo</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>UserGroupInfo_Name</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>1717986916</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_Budgeting:BudgetControlConfiguration_UserGroupInfo_Name</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>name</DataField>
												<DataSource>UserGroupInfo</DataSource>
											</AxFormControl>
										</Controls>
										<DataSource>UserGroupInfo</DataSource>
										<MultiSelect>No</MultiSelect>
										<ShowRowLabels>No</ShowRowLabels>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS331878</Caption>
						<DataSource>UserGroupInfo</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ActivatePage</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ActivateBody</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ActivateConfigurationInstruction</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Pattern>FillText</Pattern>
										<PatternVersion>UX7 1.0</PatternVersion>
										<Type>Group</Type>
										<VerticalSpacingMode>Fixed</VerticalSpacingMode>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>ActivateConfigurationSupplemental</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1288490187</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>StaticText</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS315225</Text>
											</AxFormControl>
										</Controls>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ActivateConfigurationAction</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>ActivateConfigurationButton</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<NeededPermission>Manual</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS50567</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>ActivateConfigurationActivity</Name>
												<ElementPosition>1717986916</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormDateTimeControl">
														<Name>LastActivatedDate</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Skip>Yes</Skip>
														<Type>DateTime</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DisplayOption>Date</DisplayOption>
														<Label>@SYS315235</Label>
														<ViewEditMode>View</ViewEditMode>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>LastActivatedBy</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612733</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Skip>Yes</Skip>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS315234</Label>
														<ViewEditMode>View</ViewEditMode>
													</AxFormControl>
												</Controls>
												<Columns>2</Columns>
												<Columnspace>5</Columnspace>
												<ColumnspaceMode>Fixed</ColumnspaceMode>
												<FrameType>None</FrameType>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>HorizontalLeft</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<Caption>@SYS315224</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>EnableBudgetControl</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>EnableBudgetControlInstruction</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Pattern>FillText</Pattern>
										<PatternVersion>UX7 1.0</PatternVersion>
										<Type>Group</Type>
										<VerticalSpacingMode>Fixed</VerticalSpacingMode>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>EnableBudgetControlSupplemental</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1288490187</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>StaticText</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS315227</Text>
											</AxFormControl>
										</Controls>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>EnableBudgetControlAction</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>EnableBudgetControlButton</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<NeededPermission>Manual</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS327332</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>DisableBudgetControlButton</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<NeededPermission>Manual</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Big>Yes</Big>
												<Text>@SYS327330</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>EnableBudgetControlState</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1717986916</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>StaticText</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Text></Text>
											</AxFormControl>
										</Controls>
										<Columns>2</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<Caption>@SYS315226</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ConfigurationChangeHistory</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>BudgetControlConfigurationChangeHistory</Name>
										<Type>MenuFunctionButton</Type>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>BudgetControlConfigurationChangeHistory</MenuItemName>
										<Text>@SYS23056</Text>
									</AxFormControl>
								</Controls>
								<Caption>@Budget:ConfigurationChangeHistory</Caption>
							</AxFormControl>
						</Controls>
						<Caption>@SYS315201</Caption>
						<DataSource>BudgetControlConfiguration</DataSource>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Style>VerticalTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>