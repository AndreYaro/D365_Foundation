<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailExternalIdentitySelect</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;
using Microsoft.Dynamics.ApplicationPlatform.XppServices.Instrumentation;
using Microsoft.Dynamics.AX.Security.DirectoryHelper;
using Microsoft.Dynamics.AX.Security.GraphAPIHelper;

[Form]
public class RetailExternalIdentitySelect extends FormRun
{
    #Admin

    SysUserMSODSImportHelper _helper;
    container allowedAppsForMSGraphMigration;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        RetailExternalIdentityUtils util = new RetailExternalIdentityUtils();
        allowedAppsForMSGraphMigration = util.GetAllowedAppsForMSGraphMigration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogErrorMessage</Name>
				<Source><![CDATA[
    private void LogErrorMessage(System.Exception ex, str methodName = '')
    {
        str errorMessage = null;
        System.Exception innerException;

        if (ex != null)
        {
            innerException = ex.get_InnerException();
        }

        if (innerException != null)
        {
            errorMessage = innerException.Message;
        }
        else
        {
            errorMessage = ex.Message;
        }

        if (!System.String::IsNullOrWhiteSpace(errorMessage))
        {
            ApplicationEventSource::EventWriteRetailExternalIdentitySelectFailure(methodName, errorMessage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hide and show some elements in the form depending on the combobox selection.
    /// </summary>
    /// <param name = "searchMode">The result selectino from combobox.</param>
    private void SetView(RetailAADSearchType searchMode)
    {
        QuickFilter.visible(searchMode == RetailAADSearchType::FilterAADWorkers);
        Email.visible(searchMode == RetailAADSearchType::SearchByPrincipleId);
        searchEmailButton.visible(searchMode == RetailAADSearchType::SearchByPrincipleId);
        Email.textChange();

        if (searchMode == RetailAADSearchType::FilterAADWorkers)
        {
            this.RefreshExternalIdentityList();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SearchByEmail</Name>
				<Source><![CDATA[
    private void SearchByEmail(str userEmail)
    {
        System.Exception ex;
        System.Reflection.MethodInfo methodInfo;
        str callerAppId = GraphAPIClient::GetCallerApplicationId();
        boolean migrateToMicrosoftGraph = RetailExternalIdentitySelectMicrosoftGraphMigrationFlight::instance().isEnabled() 
            && (EnableMSGraphMigrationForAllAppIdsFlight::instance().isEnabled() || (conFind(allowedAppsForMSGraphMigration, callerAppId) != 0));
        str infoMessage = strFmt('class: %1, method: %2, callerAppId: %3', 'RetailExternalIdentitySelect', 'SearchByEmail', callerAppId);

        if (System.String::IsNullOrWhiteSpace(userEmail))
        {
            return;
        }

        delete_from RetailExternalUserTmp;

        try
        {
            if(migrateToMicrosoftGraph)
            {
                IDirectoryClient directoryClient = DirectoryClientProvider::GetDirectoryClient();
                // Search user by principal email.
                Microsoft.Dynamics.AX.Security.DirectoryHelper.User user = directoryClient.GetUserByUserPrincipalName(userEmail, true);

                SystemRuntimeEventSource::EventWriteADGraphToMSGraphMigration('GetUserByUserPrincipalName', true, infoMessage, null, null, null);

                if (user != null)
                {
                    this.InsertUserRow_V2(user);
                }

                // Search users by alternate email.
                System.Collections.IEnumerator enumerator = directoryClient.GetUsersByAlternateEmail(userEmail).GetEnumerator();

                SystemRuntimeEventSource::EventWriteADGraphToMSGraphMigration('GetUsersByAlternateEmail', true, infoMessage, null, null, null);

                while (enumerator.MoveNext())
                {
                    user = enumerator.Current;
                    this.InsertUserRow_V2(user);
                }
            }
            else
            {
                SystemRuntimeEventSource::EventWriteADGraphToMSGraphMigration('', false, infoMessage, null, null, null);

                GraphAPIClient graphAPIClient = SysUserMSODSImportHelper::getGraphAPIClient();
                // Search user by principal email.
                Microsoft.Azure.ActiveDirectory.GraphClient.IUser user = graphAPIClient.GetUserByUserPrincipalName(userEmail);

                if (user != null)
                {
                    this.InsertUserRow_V1(user);
                }

                // Search users by alternate email.
                System.Type type = graphAPIClient.GetType();
                methodInfo = type.GetMethod('GetUsersByAlternateEmail');

                if (methodInfo != null)
                {
                    System.Object[] parameters = new System.Object[1]();
                    parameters.SetValue(userEmail, 0);

                    CLRObject users = new CLRObject("System.Collections.Generic.List`1[Microsoft.Azure.ActiveDirectory.GraphClient.IUser]");
                    users = methodInfo.Invoke(graphAPIClient, parameters);
                    CLRObject enumerator = users.GetEnumerator();

                    while (enumerator.MoveNext())
                    {
                        user = enumerator.get_Current();
                        this.InsertUserRow_V1(user);
                    }
                }
            }

            RetailExternalUserTmp_DS.executeQuery();
        }
        catch (Exception::CLRError)
        {
            if(migrateToMicrosoftGraph)
            {
                SystemRuntimeEventSource::EventWriteADGraphToMSGraphMigration('', false, infoMessage, CLRInterop::getLastException().get_Message(), CLRInterop::getLastException().GetType(), CLRInterop::getLastException().toString());
            }
            this.LogErrorMessage(CLRInterop::getLastException(), funcName());
            error("@ApplicationFoundation:GraphAPIErrorMsg");

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InsertUserRow_V1</Name>
				<Source><![CDATA[
    private void InsertUserRow_V1(Microsoft.Azure.ActiveDirectory.GraphClient.IUser user)
    {
        Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObject userDirectoryObject = user;

        RetailExternalUserTmp.clear();
        ttsbegin;
        RetailExternalUserTmp.ExternalDisplayName = user.DisplayName;
        RetailExternalUserTmp.ExternalId = ''; //userDirectoryObject.ObjectId;
        RetailExternalUserTmp.ExternalSubId = (userDirectoryObject) ? userDirectoryObject.ObjectId : '';
        RetailExternalUserTmp.UPN = user.UserPrincipalName;
        RetailExternalUserTmp.Alias = this.parseAliasFromUpn(user.UserPrincipalName);
        RetailExternalUserTmp.AlternateEmails = this.getDelimitedStringFromList(user.OtherMails.GetEnumerator());
        RetailExternalUserTmp.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InsertUserRow_V2</Name>
				<Source><![CDATA[
    private void InsertUserRow_V2(Microsoft.Dynamics.AX.Security.DirectoryHelper.User user)
    {

        RetailExternalUserTmp.clear();
        ttsbegin;
        RetailExternalUserTmp.ExternalDisplayName = user.DisplayName;
        RetailExternalUserTmp.ExternalId = ''; //userDirectoryObject.ObjectId;
        System.Guid externalIdentitySubId = user.ObjectID;
        RetailExternalUserTmp.ExternalSubId = externalIdentitySubId.ToString();
        RetailExternalUserTmp.UPN = user.UserPrincipalName;
        RetailExternalUserTmp.Alias = this.parseAliasFromUpn(user.UserPrincipalName);
        RetailExternalUserTmp.AlternateEmails = this.getDelimitedStringFromList(user.OtherMails.GetEnumerator());
        RetailExternalUserTmp.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RefreshExternalIdentityList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh the list of external identities
    /// </summary>
    private void RefreshExternalIdentityList()
    {
        // get list of AAD users
        System.Collections.IEnumerator enumerator;
        str callerAppId = GraphAPIClient::GetCallerApplicationId();
        boolean migrateToMicrosoftGraph = RetailExternalIdentitySelectMicrosoftGraphMigrationFlight::instance().isEnabled()
            && (EnableMSGraphMigrationForAllAppIdsFlight::instance().isEnabled() || (conFind(allowedAppsForMSGraphMigration, callerAppId) != 0));
        str infoMessage = strFmt('class: %1, method: %2, callerAppId: %3', 'RetailExternalIdentitySelect', 'RefreshExternalIdentityList', callerAppId);

        delete_from RetailExternalUserTmp;

        try
        {
            if(migrateToMicrosoftGraph)
            {
                IDirectoryClient directoryClient = DirectoryClientProvider::GetDirectoryClient();
                Microsoft.Dynamics.AX.Security.DirectoryHelper.User user;
                var users = directoryClient.ListUsers();
                
				SystemRuntimeEventSource::EventWriteADGraphToMSGraphMigration('ListUsers', true, infoMessage, null, null, null);
                
				enumerator = users.GetEnumerator();

                while (enumerator.MoveNext())
                {
                    user = enumerator.Current;
                    this.InsertUserRow_V2(user);
                }
            }
            else
            {
                SystemRuntimeEventSource::EventWriteADGraphToMSGraphMigration('', false, infoMessage, null, null, null);

                GraphAPIClient graphAPIClient = SysUserMSODSImportHelper::getGraphAPIClient();
                Microsoft.Azure.ActiveDirectory.GraphClient.IUser user;
                var users = graphAPIClient.ListUsers();
                enumerator = users.GetEnumerator();

                while (enumerator.MoveNext())
                {
                    user = enumerator.Current;
                    this.InsertUserRow_V1(user);
                }
            }

            RetailExternalUserTmp_DS.executeQuery();
        }
        catch(Exception::CLRError)
        {
            if(migrateToMicrosoftGraph)
            {
                SystemRuntimeEventSource::EventWriteADGraphToMSGraphMigration('ListUsers', false, 'class: RetailExternalIdentitySelect, method: RefreshExternalIdentityList', CLRInterop::getLastException().get_Message(), CLRInterop::getLastException().GetType(), CLRInterop::getLastException().toString());
            }
            this.LogErrorMessage(CLRInterop::getLastException(), funcName());
            error("@ApplicationFoundation:GraphAPIErrorMsg");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseAliasFromUpn</Name>
				<Source><![CDATA[
    private str parseAliasFromUpn(str upn)
    {
        str alias;

        List parts = Global::strSplit(upn, '@');
        if (!parts.empty())
        {
            ListIterator iterator = new ListIterator(parts);
            iterator.begin();
            alias = iterator.value();
        }

        return alias;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDelimitedStringFromList</Name>
				<Source><![CDATA[
    private str getDelimitedStringFromList(CLRObject enumerator)
    {
        str delimitedString;

        while (enumerator.moveNext())
        {
            delimitedString = enumerator.get_Current();
            delimitedString += ',';
        }

        return substr(delimitedString, 0, strLen(delimitedString) - 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserInSystem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is the given user already assisgned
    /// </summary>
    /// <param name = "_externalName">External identity name.</param>
    /// <param name = "_externalId">External identity ID.</param>
    /// <returns></returns>
    public boolean isUserInSystem(str _externalName, guid _externalId, guid _externalSubId)
    {
        boolean isExist = false;
        RetailStaffTable staff;

        staff = RetailStaffTable::findByExternalIdentity(_externalId, _externalSubId);

        if (staff)
        {
            isExist = true;
        }

        return isExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// When the dialog is closed via the OK button.
    /// </summary>
    public void closeOk()
    {
        this.SaveSelectedUser();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>SaveSelectedUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save the selected External/AAD User
    /// </summary>
    private void SaveSelectedUser()
    {
        FormRun             f;
        Object              caller;
        RetailExternalUserTmp selectedUser;

        caller = this.args().caller();
        if (!caller || !(caller is FormRun))
        {
            return;
        }
        else
        {
            f = (caller as FormRun);

            if (f.name() != formStr(HcmWorker)
                && f.name() != formStr(HcmWorkerV2))
            {
                return;
            }
        }

        // Set the External Identity used to update the caller
        selectedUser = RetailExternalUserTmp_DS.cursor();

        // Retrieve the calling form's RetailStaffTable buffer via its data source
        FormDataSource retailStaffTable_ds = f.dataSource(formDataSourceStr(HcmWorker, RetailStaffTable)) as FormDataSource;
        RetailStaffTable retailStaffTable = retailStaffTable_ds.cursor();

        // Make sure there is no other worker who has been associated with the same UPN
        RetailStaffTable retailWorker;
        select firstonly retailWorker
            where retailWorker.ExternalIdentityName == selectedUser.UPN &&
                retailWorker.RecId != retailStaffTable.RecId;

        if (retailWorker.RecId != 0)
        {
            throw error(strFmt("@Retail:RetailExternalIdentityUPNAlreadyBeenUsed", selectedUser.UPN, retailWorker.staffId));
        }

        // Set form to edit mode
        if (f.inViewMode())
        {
            f.design().viewEditMode(ViewEditMode::Edit);
        }

        // Update the caller's buffer accordingly
        retailStaffTable.ExternalIdentityName = selectedUser.UPN;
        retailStaffTable.ExternalIdentityId = selectedUser.ExternalId;
        retailStaffTable.ExternalIdentitySubId = selectedUser.ExternalSubId;
        retailStaffTable.ExternalIdentityAlias = selectedUser.Alias;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        // Default the combobox and View mode to search-by-email.
        UserAADSearchType.selection(RetailAADSearchType::SearchByPrincipleId);
        this.SetView(RetailAADSearchType::SearchByPrincipleId);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>UserAADSearchType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        /// <summary>
        /// Event when combobox selection is changed.
        /// </summary>
        /// <returns>The value of the selection.</returns>
        public int selectionChange()
        {
            int ret;
            ret = super();
            element.SetView(UserAADSearchType.selection());
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Email</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>textChange</Name>
						<Source><![CDATA[
        /// <summary>
        /// Event when text value is changed.
        /// </summary>
        public void textChange()
        {
            super();
            searchEmailButton.enabled(!System.String::IsNullOrWhiteSpace(Email.text()));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>searchEmailButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Event when user clicks the button.
        /// </summary>
        public void clicked()
        {
            super();
            element.SearchByEmail(Email.text());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>RetailExternalUserTmp</Name>
			<Table>RetailExternalUserTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Alias</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AlternateEmails</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExternalDisplayName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExternalId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExternalSubId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UPN</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@RET:MenuItemDisplayRetailExternalIdentitySelect</Caption>
		<DataSource xmlns="">RetailExternalUserTmp</DataSource>
		<DialogSize xmlns="">Medium</DialogSize>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<WindowType xmlns="">Slider</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ContentSectionGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>FilterGroup</Name>
						<Type>Group</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>UserAADSearchType</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ComboBox</Type>
								<FormControlExtension
									i:nil="true" />
								<EnumType>RetailAADSearchType</EnumType>
								<Items />
							</AxFormControl>
							<AxFormControl>
								<Name>QuickFilter</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<FormControlExtension>
									<Name>QuickFilterControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>targetControlName</Name>
											<Type>String</Type>
											<Value>ListGrid</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>defaultColumnName</Name>
											<Type>String</Type>
											<Value>ListGrid_ExternalDisplayName</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>placeholderText</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Email</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>searchEmailButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@Retail:RetailAADSearchButton</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<FrameType>None</FrameType>
						<Style>CustomFilter</Style>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>ListGrid</Name>
						<Type>Grid</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ListGrid_ExternalDisplayName</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>ExternalDisplayName</DataField>
								<DataSource>RetailExternalUserTmp</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ListGrid_Alias</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>Alias</DataField>
								<DataSource>RetailExternalUserTmp</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ListGrid_UPN</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>UPN</DataField>
								<DataSource>RetailExternalUserTmp</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ListGrid_AlternateEmailIs</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>AlternateEmails</DataField>
								<DataSource>RetailExternalUserTmp</DataSource>
							</AxFormControl>
						</Controls>
						<DataGroup>DisplayFields</DataGroup>
						<DataSource>RetailExternalUserTmp</DataSource>
						<MultiSelect>No</MultiSelect>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>DialogCommitContainer</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>commandButtonOk</Name>
						<Type>CommandButton</Type>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>commandButtonCancel</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>