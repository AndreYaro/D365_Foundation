<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailRichMediaAttributeValue</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
    [Form]
    public class RetailRichMediaAttributeValue extends FormRun
    {
        #define.BackSlashChar(@'\')
        #define.ForwardSlashChar(@'/')
        #define.ColonChar(':')

        TableId tableId;
        EcoResTextValue attributeValue;
        RetailRichMediaType mediaType;
        RecId defaultRecId;
        FormDataSource callingControlDataSource;
        System.Uri assetPickerUrl;

        Map urlTemplateMap;
        CatalogTranslation catalogTranslation;
        CustTable   custTable;
        RetailCustTable   retailCustTable;
        HcmWorker   hcmWorker;
        RetailStaffTable    retailStaffTable;
        FormRun caller;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        RetailSharedParameters retailSharedParameters = RetailSharedParameters::find();
        str imageXml;
        str url;

        super();

        tableId = element.args().dataset();
        caller = element.args().caller();
        switch (tableId)
        {
            case tableNum(EcoResTextValue):
                attributeValue = element.args().record();
                break;

            case tableNum(catalogTranslation):
                catalogTranslation = element.args().record();
                break;

            case tableNum(CustTable):
                custTable = element.args().record();
                break;

            case tableNum(HcmWorker):
                hcmWorker = element.args().record();
                break;

            default:
                throw error("@RET810");
        }

        // Resetting the record, so the title will not include the attribute's value
        element.args().record(null);
        mediaType = element.args().parmEnum();

        if (element.args().callerFormControl())
        {
            callingControlDataSource = element.args().callerFormControl().dataSourceObject();
        }

        // Disabling editing if opened in View mode
        if (element.args().openMode() == OpenMode::View)
        {
            RetailRichMediaTmp_ds.allowCreate(false);
            RetailRichMediaTmp_ds.allowDelete(false);
            RetailRichMediaTmp_ds.allowEdit(false);
            element.design().viewEditMode(ViewEditMode::View);
        }

        if (mediaType == RetailRichMediaType::Videos)
        {
            RetailRichMediaTmp_AltText.visible(false);
            element.design().caption("@RET490342") ;
            PickAssetButton.text("@RET490343");
        }
        if (mediaType == RetailRichMediaType::Images)
        {
            element.design().caption("@RET490341") ;
            PickAssetButton.text("@RET260608");
        }

        urlTemplateMap = element.args().parmObject();

        // attributeValue.RecId is 0. it has only TextValue.
        // RetailCatalogProductAttributeFormHelper.editButtonClicked, set the TextValue in editorTextValue.TextValue.
        if (attributeValue.TextValue)
        {
            imageXml = attributeValue.TextValue;
        }

        //CatalogTranslation.
        if (catalogTranslation)
        {
            imageXml = catalogTranslation.Image? catalogTranslation.Image: RetailAttributeHelper::getDefaultTextValue(retailSharedParameters.CatalogDefaultAttributeGroup, retailSharedParameters.ImagesAttributeType);

            urlTemplateMap = RetailRichMediaHelper::getUrlTemplateMapByCatalog(catalogTranslation);
        }

        //Customer
        if (custTable)
        {
            retailCustTable = RetailCustTable::find(custTable.AccountNum, true);

            imageXml = retailCustTable.Image ? retailCustTable.Image: RetailAttributeHelper::getDefaultTextValue(retailSharedParameters.CustomerDefaultAttributeGroup, retailSharedParameters.ImagesAttributeType);

            urlTemplateMap = RetailRichMediaHelper::getUrlTemplateMapByCustomer(custTable);
        }

        // Worker
        if (hcmWorker)
        {
            retailStaffTable = RetailStaffTable::find(hcmWorker.PersonnelNumber, true);

            imageXml = retailStaffTable.Image? retailStaffTable.Image: RetailAttributeHelper::getDefaultTextValue(retailSharedParameters.WorkerDefaultAttributeGroup, retailSharedParameters.ImagesAttributeType);

            urlTemplateMap = RetailRichMediaHelper::getUrlTemplateMapByWorker(retailStaffTable);
        }

        defaultRecId = RetailRichMediaEncoder::Decode(imageXml, retailRichMediaTmp);

        url = retailSharedParameters.SharepointAssetPickerUrl;
        if (url)
        {
            System.Uri::TryCreate(url, System.UriKind::Absolute, byRef assetPickerUrl);

            if (!CLRInterop::isNull(assetPickerUrl))
            {
                url = assetPickerUrl.get_AbsoluteUri();

                if (!strEndsWith(url,#ForwardSlashChar))
                {
                    url += #ForwardSlashChar;
                }

                // recreate it with proper ending forwardslash.
                // it seems to be an issue when we combine an url not nding with a forward slash with a relative url
                System.Uri::TryCreate(url, System.UriKind::Absolute, byRef assetPickerUrl);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshControls</Name>
				<Source><![CDATA[
    public void refreshControls()
    {
        PickAssetButton.enabled(!element.inViewMode() && !CLRInterop::isNull(assetPickerUrl));
        OpenInBrowserButton.enabled(!CLRInterop::isNull(assetPickerUrl) && strLen(retailRichMediaTmp.Url) > 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveData</Name>
				<Source><![CDATA[
    public void saveData()
    {
        str imageXml;
        common destinationTable;

        imageXml = RetailRichMediaEncoder::Encode(retailRichMediaTmp, defaultRecId);

        //EcoResAttributeValue
        if (tableId == tableNum(EcoResTextValue))
        {
            if (caller && formHasMethod(caller, identifierStr(onRichMediaChange)))
            {
                caller.onRichMediaChange();
            }
            attributeValue.TextValue = imageXml;
            destinationTable = attributeValue;
        }

        //CatalogTranslation
        if (catalogTranslation)
        {
            catalogTranslation.Image = imageXml;
            destinationTable = catalogTranslation;
        }

        // Customer
        if (custTable)
        {
            if (!retailCustTable)
            {
                retailCustTable.initValue();
                retailCustTable.accountNum = custTable.AccountNum;
                retailCustTable.insert();
            }
            retailCustTable.Image = imageXml;
            destinationTable = retailCustTable;
        }

        // Worker
        if (hcmWorker)
        {
            if (!retailStaffTable)
            {
                retailStaffTable.initValue();
                retailStaffTable.staffId = hcmWorker.PersonnelNumber;
                retailStaffTable.insert();
            }
            retailStaffTable.Image = imageXml;
            destinationTable = retailStaffTable;
        }

        // update Image to destination table.
        if (destinationTable)
        {
            ttsBegin;

            destinationTable.update();

            ttsCommit;

            if (callingControlDataSource)
            {
                callingControlDataSource.reread();
                callingControlDataSource.refresh();
            }
        }

        RetailRichMediaTmp_DS.research();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>RetailRichMediaTmp</Name>
				<Methods>
					<Method>
						<Name>isDefault</Name>
						<Source><![CDATA[
        edit RetailRichMediaIsDefault isDefault(boolean _set, RetailRichMediaTmp record, RetailRichMediaIsDefault _noYes)
        {
            if (_set)
            {
                if (_noYes == NoYes::Yes)
                {
                    defaultRecId = record.RecId;
                    RetailRichMediaTmp_DS.write();

                    RetailRichMediaTmp_DS.research();
                }
            }

            return defaultRecId == record.RecId;
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            boolean defaultRecordDeleted;
            if (defaultRecId == retailRichMediaTmp.RecId)
            {
                defaultRecordDeleted = true;
            }

            super();

            if (defaultRecordDeleted)
            {
                defaultRecId = retailRichMediaTmp.RecId;
            }
            element.saveData();
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged()
        {
            super();

            element.refreshControls();
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            super();

            element.saveData();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>PickAssetButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            FileUploadTemporaryStorageResult result;

            if (mediaType == RetailRichMediaType::Images)
            {
                result = File::GetFileFromUser(classstr(ImageFileUploadTemporaryStorageStrategy));
            }
            else if (mediaType == RetailRichMediaType::Videos)
            {
                result = File::GetFileFromUser(classstr(VideoFileUploadTemporaryStorageStrategy));
            }

            if (result && result.getUploadStatus())
            {
                retailRichMediaTmp.Url = result.getDownloadUrl();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OpenInBrowserButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            str url;
            System.Uri relativeUrl;
            System.Uri absoluteUrl;

            url = RetailRichMediaHelper::expandUrlTemplate(retailRichMediaTmp.Url, urlTemplateMap);

            if (System.Uri::TryCreate(url, System.UriKind::Relative, byRef relativeUrl)
                && !CLRInterop::isNull(assetPickerUrl)
                && System.Uri::TryCreate(assetPickerUrl, relativeUrl, byRef absoluteUrl))
            {
                if (absoluteUrl.get_IsFile())
                {
                    url = absoluteUrl.get_LocalPath();
                    url = System.Web.HttpUtility::UrlDecode(url);
                    url = '"' + url + '"';
                }
                else
                {
                    url = absoluteUrl.get_AbsoluteUri();
                }
            }

            new Browser().Navigate(url);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>RetailRichMediaTmp</Name>
			<Table>RetailRichMediaTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AltText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Url</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@RET490149</Caption>
		<DataSource xmlns="">RetailRichMediaTmp</DataSource>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">SimpleList</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>429496729</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>PickAssetButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@RET490161</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>OpenInBrowserButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@RET260211</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FilterGroup</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>imageQuickFilter</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>RetailRichMediaTmp_Url</Name>
						<ElementPosition>858993458</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>Url</DataField>
						<DataSource>RetailRichMediaTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>RetailRichMediaTmp_AltText</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1288490187</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>AltText</DataField>
						<DataSource>RetailRichMediaTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>isDefault</Name>
						<ElementPosition>1717986916</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<BackgroundColor>WindowBackground</BackgroundColor>
						<DataMethod>isDefault</DataMethod>
						<DataSource>RetailRichMediaTmp</DataSource>
						<Label>@RET490091</Label>
					</AxFormControl>
				</Controls>
				<AlternateRowShading>No</AlternateRowShading>
				<DataSource>RetailRichMediaTmp</DataSource>
				<MultiSelect>No</MultiSelect>
				<ShowRowLabels>No</ShowRowLabels>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>