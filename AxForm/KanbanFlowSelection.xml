<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>KanbanFlowSelection</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class KanbanFlowSelection extends FormRun
{
    LeanRuleData                    leanRuleData;
    KanbanFlowsCollection           kanbanFlowsCollection;

    // we don't use a datasource for this form, because we need to be
    // constantly able to change it without persisting anything. so
    // in order not to add a datasource with overrides on most persistence
    // methods that would do nothing, we just have free controls bound
    // through display/edit methods to this buffer
    KanbanFlow                      kanbanFlow;

    KanbanTmpFlow                   recordToSelect;
}
]]></Source>
			</Method>
			<Method>
				<Name>editPlanActivityNameFirst</Name>
				<Source><![CDATA[
    /// <summary>
    /// An edit method for the FirstPlanActivityName of the first <c>PlanActivity</c>.
    /// </summary>
    /// <param name="_set">
    /// The parameter that identifies if the value is to be set or retrieved.
    /// </param>
    /// <param name="_firstPlanActivityName">
    /// The name of the <c>PlanActivity</c> that is to be set or retrieved.
    /// </param>
    /// <returns>
    /// The PlanActivityName of the first <c>PlanActivity</c>.
    /// </returns>
    /// <remarks>
    /// Forwards the call to KanbanFlow.editPlanActivityNameFirst
    /// </remarks>
    public edit FirstPlanActivityName editPlanActivityNameFirst(boolean _set, FirstPlanActivityName _firstPlanActivityName)
    {
        return kanbanFlow.editPlanActivityNameFirst(_set, _firstPlanActivityName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPlanActivityNameLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// An edit method for the FirstPlanActivityName of the last <c>PlanActivity</c>.
    /// </summary>
    /// <param name="_set">
    /// The parameter that identifies if the value is to be set or retrieved.
    /// </param>
    /// <param name="_lastPlanActivityName">
    /// The name of the <c>PlanActivity</c> that is to be set or retrieved.
    /// </param>
    /// <returns>
    /// The PlanActivityName of the first <c>PlanActivity</c>.
    /// </returns>
    /// <remarks>
    /// Forwards the call to KanbanFlow.editPlanActivityNameLast
    /// </remarks>
    public edit LastPlanActivityName editPlanActivityNameLast(boolean _set, LastPlanActivityName _lastPlanActivityName)
    {
        return kanbanFlow.editPlanActivityNameLast(_set, _lastPlanActivityName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstActivityPlanName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the <c>PlanReference</c> that the first
    /// <c>KanbanFlow</c> activity belongs to.
    /// </summary>
    /// <returns>
    /// The name of the <c>PlanReference</c> that the first
    /// <c>KanbanFlow</c> activity belongs to; otherwise empty string.
    /// </returns>
    public display PlanName firstActivityPlanName()
    {
        return kanbanFlow.firstActivityPlanName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstActivityVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the version number of the <c>Plan</c> that the first
    /// <c>KanbanFlow</c> activity belongs to.
    /// </summary>
    /// <returns>
    /// The version number of the <c>Plan</c> that the first
    /// <c>KanbanFlow</c> activity belongs to; otherwise 0.
    /// </returns>
    public display PlanVersionNum firstActivityVersion()
    {
        return kanbanFlow.firstActivityVersion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateFlows</Name>
				<Source><![CDATA[
    public void generateFlows()
    {
        LeanProductionFlowTraverser traverser;

        // update collection data
        traverser = LeanProductionFlowTraverser::newPlanPlanActivity(PlanPlanActivity::find(kanbanFlow.FirstPlanPlanActivity),
                                                                     PlanPlanActivity::find(kanbanFlow.LastPlanPlanActivity),
                                                                     leanRuleData.leanKanbanType(), false, true);

        kanbanFlowsCollection = traverser.generateAllFlows();

        if (kanbanFlowsCollection.kanbanFlowsCount() == 0)
        {
            warning("@SYS310322");
        }
        else
        {
            // repopulate the temp table and refresh the grid
            element.refreshGrid();

            // refresh the data source
            kanbanTmpFlow_ds.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        // check input arguments
        if (!leanRuleData)
        {
            throw error(Error::missingParameter(this.args().caller()));
        }

        super();

        // initialize the kanban flow
        kanbanFlow = leanRuleData.kanbanFlow();

        // load all existing routes between the source and destination
        this.loadExistingFlows();

        // if there's already a selected but non-existent yet flow, add it to the results
        if (leanRuleData.kanbanFlow().RecId == 0 &&
            leanRuleData.parmKanbanFlowWrapper().isFlowDefined())
        {
            // the isFlowDefined() condition above guarantees that this call is absolutely safe
            kanbanFlowsCollection.addKanbanFlowWrapper(leanRuleData.parmKanbanFlowWrapper());
        }

        this.refreshGrid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastActivityPlanName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the <c>PlanReference</c> that the last
    /// <c>KanbanFlow</c> activity belongs to.
    /// </summary>
    /// <returns>
    /// The name of the <c>PlanReference</c> that the last
    /// <c>KanbanFlow</c> activity belongs to; otherwise empty string.
    /// </returns>
    public display PlanName lastActivityPlanName()
    {
        return kanbanFlow.lastActivityPlanName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastActivityVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the version number of the <c>Plan</c> that the last
    /// <c>KanbanFlow</c> activity belongs to.
    /// </summary>
    /// <returns>
    /// The version number of the <c>Plan</c> that the last
    /// <c>KanbanFlow</c> activity belongs to; otherwise 0.
    /// </returns>
    public display PlanVersionNum lastActivityVersion()
    {
        return kanbanFlow.lastActivityVersion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadExistingFlows</Name>
				<Source><![CDATA[
    public void loadExistingFlows()
    {
        // find all existing flows between given first and last activity
        if (kanbanFlow.FirstPlanPlanActivity &&
            kanbanFlow.LastPlanPlanActivity)
        {
            // get all existing flows for the currently selected source and destination
            kanbanFlowsCollection = KanbanFlow::findAllFlows(kanbanFlow.FirstPlanPlanActivity, kanbanFlow.LastPlanPlanActivity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanRuleData</Name>
				<Source><![CDATA[
    public LeanRuleData parmLeanRuleData(LeanRuleData _leanRuleData = leanRuleData)
    {
        leanRuleData = _leanRuleData;

        return leanRuleData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshGrid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the temp table with the data in the kanbanFlowsCollection member.
    /// </summary>
    public void refreshGrid()
    {
        ListEnumerator      flowListEnumerator;
        KanbanFlowWrapper   kanbanFlowWrapper;
        KanbanFlow          inFlow = leanRuleData.kanbanFlow();
        int                 idx = 0;

        // clean up the table
        delete_from kanbanTmpFlow;

        // get an enumerator over the flows list
        flowListEnumerator = kanbanFlowsCollection.kanbanFlowsList().getEnumerator();

        // go over all the resulting flows and add those to the temp table
        while (flowListEnumerator.moveNext())
        {
            ++idx;
            kanbanFlowWrapper = flowListEnumerator.current();

            // populate the buffer's fields
            kanbanTmpFlow.Index = idx;
            kanbanTmpFlow.Label = kanbanFlowWrapper.relationsNames2Str();

            kanbanTmpFlow.insert();

            // if the rule already has a kanban flow and this kanban flow is visible
            // within the grid, then it should be preselected by default
            if (inFlow.RecId != 0 &&
                (inFlow.RecId == kanbanFlowWrapper.parmKanbanFlow().RecId))
            {
                recordToSelect.data(kanbanTmpFlow);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedKanbanFlow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the currently selected kanban flow.
    /// </summary>
    /// <returns>
    /// A KanbanFlowsCollection instance that contains the currently selected KanbanFlow.
    /// </returns>
    public KanbanFlowsCollection selectedKanbanFlow()
    {
        if (kanbanTmpFlow.Index > 0)
        {
            // remove all other flows
            kanbanFlowsCollection.removeAllFlowsExcept(kanbanTmpFlow.Index);
        }

        return kanbanFlowsCollection;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>KanbanTmpFlow</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            super();

            if (recordToSelect)
            {
                kanbanTmpFlow_ds.findRecord(recordToSelect);
                recordToSelect.clear();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            Query query;
            QueryBuildDataSource qbds;
            super();

            // order the fields by the length of the Label column (i.e. by the length of the flows)
            query = this.query();
            qbds = query.dataSourceTable(tableNum(KanbanTmpFlow));
            qbds.addOrderByField(fieldNum(KanbanTmpFlow, Label));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>firstPlanPlanActivity</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // show the lookup form
            LeanProductionFlowActivityLookupParm::lookup(this,this.text(), KanbanFlowElementRole::Source, leanRuleData, true);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            // refresh the grid when the selection has changed
            element.loadExistingFlows();
            element.refreshGrid();
            kanbanTmpFlow_ds.research(true);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>lastPlanPlanActivity</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // show the lookup form
            LeanProductionFlowActivityLookupParm::lookup(this,this.text(), KanbanFlowElementRole::Destination, leanRuleData, true);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            // refresh the grid when the selection has changed
            element.loadExistingFlows();
            element.refreshGrid();
            kanbanTmpFlow_ds.research(true);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>btnGenerateFlows</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            element.generateFlows();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>btnOK</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            KanbanFlowWrapper       kanbanFlowWrapper             = leanRuleData.parmKanbanFlowWrapper();
            KanbanFlowsCollection   selectedKanbanFlowsCollection = element.selectedKanbanFlow();

            if (selectedKanbanFlowsCollection &&
                selectedKanbanFlowsCollection.kanbanFlowsCount() > 0)
            {
                kanbanFlowWrapper.initFromKanbanFlowWrapper(selectedKanbanFlowsCollection.getKanbanFlowWrapper());
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>KanbanTmpFlow</Name>
			<Table>KanbanTmpFlow</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Label</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Index</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DelayActive>No</DelayActive>
			<LinkType>Passive</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS134771</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<Height xmlns="">0</Height>
		<HeightMode xmlns="">Column</HeightMode>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">Dialog</Style>
		<Width xmlns="">0</Width>
		<WidthMode xmlns="">Column</WidthMode>
		<WindowResize xmlns="">Dynamic</WindowResize>
		<WindowType xmlns="">Slider</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Header</Name>
				<ElementPosition>1288490187</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>groupSource</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>firstPlanPlanActivity</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>editPlanActivityNameFirst</DataMethod>
								<Label>@SYS105020</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>firstPlanActivityPlanName</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>firstActivityPlanName</DataMethod>
								<Label>@SYS131795</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormIntegerControl">
								<Name>firstPlanActivityVersion</Name>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Integer</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>firstActivityVersion</DataMethod>
							</AxFormControl>
						</Controls>
						<Breakable>No</Breakable>
						<Caption>@SYS304707</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>groupDestination</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>lastPlanPlanActivity</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>editPlanActivityNameLast</DataMethod>
								<Label>@SYS105020</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>lastPlanActivityPlanName</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>lastActivityPlanName</DataMethod>
								<Label>@SYS131795</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormIntegerControl">
								<Name>lastPlanActivityVersion</Name>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Integer</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>lastActivityVersion</DataMethod>
							</AxFormControl>
						</Controls>
						<Breakable>No</Breakable>
						<Caption>@SYS130343</Caption>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Content</Name>
				<ElementPosition>1717986916</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>ToolbarList</Pattern>
				<PatternVersion>1.2</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneControl">
						<Name>actionPaneKanbanFlow</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ActionPane</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>ButtonGroup</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Left>0</Left>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>btnGenerateFlows</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@SYS134773</HelpText>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS310066</Text>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>Vertical</ArrangeMethod>
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
						<AlignChildren>No</AlignChildren>
						<ArrangeMethod>Vertical</ArrangeMethod>
						<DataSource>KanbanTmpFlow</DataSource>
						<Style>Strip</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>gridKanbanFlows</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Grid</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>KanbanTmpFlow_Label</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>Label</DataField>
								<DataSource>KanbanTmpFlow</DataSource>
							</AxFormControl>
						</Controls>
						<DataSource>KanbanTmpFlow</DataSource>
					</AxFormControl>
				</Controls>
				<FrameType>None</FrameType>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>Buttons</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoLeft</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>btnOK</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>btnCancel</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>