<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BudgetPlanAllocate</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BudgetPlanAllocate extends FormRun
{
    FormDataSource                  budgetPlanLineActiveView_ds;
    BudgetPlanAllocateController    allocateController;
    BudgetPlanAllocateContract      allocateContract;
    BudgetPlanAllocateForm          budgetPlanAllocateForm;

}
]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        Set selectedLines = element.getSelectedBudgetPlanLineSet();
        budgetPlanAllocateForm.parmAllocateContract().parmSelectedPlanLines(selectedLines.pack());
        if (budgetPlanAllocateForm.validate())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedBudgetPlanLineSet</Name>
				<Source><![CDATA[
    public Set getSelectedBudgetPlanLineSet()
    {
        Set                      selectedPlanLines = new Set(Types::Int64);
        Set                      budgetPlanLinesSet;
        SetEnumerator            budgetPlanLinesSetEnumerator;
        BudgetPlanLineActiveView selectedBudgetPlanLineActiveView;

        if (budgetPlanLineActiveView_ds)
        {
            if (budgetPlanLineActiveView_ds.anyMarked())
            {
                for (selectedBudgetPlanLineActiveView = budgetPlanLineActiveView_ds.getFirst(1);
                     selectedBudgetPlanLineActiveView;
                     selectedBudgetPlanLineActiveView = budgetPlanLineActiveView_ds.getNext())
                {
                    budgetPlanLinesSet = BudgetPlanActiveView::getPlanLinesFromLineActiveView(
                                                selectedBudgetPlanLineActiveView.RecId,
                                                budgetPlanAllocateForm.parmAllocateContract().parmSourceBudgetPlanScenarioRecId());
                    budgetPlanLinesSetEnumerator = budgetPlanLinesSet.getEnumerator();

                    while (budgetPlanLinesSetEnumerator.moveNext())
                    {
                        selectedPlanLines.add(budgetPlanLinesSetEnumerator.current());
                    }
                }
            }
            else
            {
                selectedPlanLines = BudgetPlanActiveView::getPlanLinesFromLineActiveView(
                                            budgetPlanAllocateForm.parmBudgetPlanLineActiveView().RecId,
                                            budgetPlanAllocateForm.parmAllocateContract().parmSourceBudgetPlanScenarioRecId());
            }
        }

        return selectedPlanLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        BudgetPlanHeader        parentBudgetPlanHeader;
        BudgetPlanningProcess   budgetPlanningProcess;
        SysOperationDialog      dialog = element.args().caller();

        allocateController = dialog.controller();
        allocateContract = allocateController.getDataContractObject();
        budgetPlanAllocateForm = BudgetPlanAllocateForm::newFromForm(this);

        Common recordContext = allocateController.parmArgs().record();
        switch (recordContext.TableId)
        {
            case tablenum(BudgetPlanLineActiveView):
                budgetPlanAllocateForm.parmBudgetPlanLineActiveView(recordContext as BudgetPlanLineActiveView);
                budgetPlanLineActiveView_ds = FormDataUtil::getFormDataSource(recordContext);
                parentBudgetPlanHeader      = BudgetPlanHeader::find(budgetPlanAllocateForm.parmBudgetPlanLineActiveView().BudgetPlanHeader);
                allocateContract.parmCurrentLayoutRecId(parentBudgetPlanHeader.Layout);
                break;

            case tablenum(BudgetPlanHeader):
                parentBudgetPlanHeader = recordContext as BudgetPlanHeader;
                break;

            default:
                throw error("@Budget:InvalidBufferError");
        }
        budgetPlanAllocateForm.parmCanAddLinesOnParent(BudgetPlan::canAddBudgetPlanLine(parentBudgetPlanHeader.RecId));
        allocateContract.parmParentBudgetPlanHeaderRecId(parentBudgetPlanHeader.RecId);
        allocateContract.parmFactor(multiplyBy.realValue());

        budgetPlanningProcess = BudgetPlanningProcess::find(parentBudgetPlanHeader.BudgetPlanningProcess);

        allocateContract.parmLegalEntityRecId(Ledger::primaryForLegalEntity(budgetPlanningProcess.Ledger));

        if (!allocateContract.parmLegalEntityRecId())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        budgetPlanAllocateForm.parmAllocateContract(allocateContract);
        budgetPlanAllocateForm.setControlsVisibility();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>AllocationMethod</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        public int selectionChange()
        {
            boolean isModified = super();

            budgetPlanAllocateForm.allocationMethodSelectionChange(isModified);

            return isModified;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            return budgetPlanAllocateForm.validateBudgetPlanAllocateType(this.selection()) && super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LedgerAllocateKey_Key</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            budgetPlanAllocateForm.jumpRefAllocateKey();
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            budgetPlanAllocateForm.lookupAllocateKey();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isModified = super();

            budgetPlanAllocateForm.modifiedAllocateKey(isModified);

            return isModified;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            return super() && budgetPlanAllocateForm.validateAllocateKey(this.text());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LedgerAllocationRule</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            budgetPlanAllocateForm.lookupLedgerAllocationRule();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isModified = super();

            budgetPlanAllocateForm.modifiedLedgerAllocationRule(isModified);

            return isModified;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            return super() && budgetPlanAllocateForm.validateLedgerAllocationRule(this.text());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetAllocationTerm_Name</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            budgetPlanAllocateForm.jumpRefAllocationTerm();
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            budgetPlanAllocateForm.lookupAllocationTerm();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isModified = super();

            budgetPlanAllocateForm.modifiedAllocationTerm(isModified);

            return isModified;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            return super() && budgetPlanAllocateForm.validateAllocationTerm(this.text());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SourceBudgetPlanDocumentNumber</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            budgetPlanAllocateForm.lookupSourceDocumentNumber();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isModified = super();

            budgetPlanAllocateForm.modifiedSourceDocumentNumber(isModified);

            return isModified;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            return super() && budgetPlanAllocateForm.validateSourceBudgetPlanDocumentNumber(this.valueStr());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SourceScenarioName</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            budgetPlanAllocateForm.lookupSourceScenario();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isModified = super();

            budgetPlanAllocateForm.modifiedSourceScenario(isModified);

            return isModified;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            return budgetPlanAllocateForm.validateSourceBudgetPlanScenario(this.text()) && super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BasisScenarioName</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            budgetPlanAllocateForm.lookupBasisScenario();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isModified = super();

            budgetPlanAllocateForm.modifiedBasisScenario(isModified);

            return isModified;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            return budgetPlanAllocateForm.validateSourceBudgetPlanScenario(this.text()) && super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TargetScenarioName</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            budgetPlanAllocateForm.lookupTargetScenario();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isModified = super();

            budgetPlanAllocateForm.modifiedTargetScenario(isModified);

            return isModified;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            return budgetPlanAllocateForm.validateTargetBudgetPlanScenario(SourceScenarioName.text(), this.text()) && super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MultiplyBy</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isModified = super();

            budgetPlanAllocateForm.modifiedFactor(isModified);

            return isModified;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AppendLines</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isModified = super();

            budgetPlanAllocateForm.modifiedAppendLines(isModified);

            return isModified;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateByEffectiveDate_LedgerAllocationRule</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isModified = super();

            budgetPlanAllocateForm.modifiedUseSourceEffectiveDate(isModified);

            return isModified;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@Budget:AllocateCaption</Caption>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>AllocateDialogContentGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Allocation</Name>
						<ElementPosition>1102374936</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>10</VerticalSpacing>
						<VerticalSpacingMode>Fixed</VerticalSpacingMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>AllocationMethod</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<EnumType>BudgetPlanAllocateType</EnumType>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>LedgerAllocateKey_Key</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>LedgerAllocateKeyId</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>LedgerAllocationRule</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1503238551</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>BudgetPlanningAllocationRuleId</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>BudgetAllocationTerm_Name</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1717986916</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>BudgetAllocationTermId</ExtendedDataType>
								<Label>@Budget:AllocationTermNameLabel</Label>
							</AxFormControl>
						</Controls>
						<Caption>@Budget:AllocationGroupCaption</Caption>
						<Style>DialogContent</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>SourceScenario</Name>
						<ElementPosition>1467447156</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SourceBudgetPlanDocumentNumber</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@Budget:BudgetPlanDocumentNumber</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SourceScenarioName</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@Budget:ScenarioNameLabel</Label>
							</AxFormControl>
						</Controls>
						<Caption>@Budget:SourceScenarioGroupCaption</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>BasisScenario</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1637456278</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>10</VerticalSpacing>
						<VerticalSpacingMode>Fixed</VerticalSpacingMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>BasisScenarioName</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@Budget:ScenarioNameLabel</Label>
							</AxFormControl>
						</Controls>
						<Caption>@Budget:BasisScenarioGroupCaption</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>TargetScenario</Name>
						<ElementPosition>1807465401</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>10</VerticalSpacing>
						<VerticalSpacingMode>Fixed</VerticalSpacingMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>TargetScenarioName</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@Budget:ScenarioNameLabel</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>MultiplyBy</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@Budget:ScenarioMultiplyByLabel</Label>
								<NoOfDecimals>-1</NoOfDecimals>
								<RealValue>1</RealValue>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>AppendLines</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>CheckBox</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@Budget:BudgetPlanAllocateAppendToPlan</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>AllocateByEffectiveDate_LedgerAllocationRule</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>CheckBox</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@Budget:UseSourceEffectiveDatesInAllocation</Label>
							</AxFormControl>
						</Controls>
						<Caption>@Budget:TargetScenarioGroupCaption</Caption>
						<Style>DialogContent</Style>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Left>0</Left>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OkButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<LeftMode>RightEdge</LeftMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Alignment>Center</Alignment>
						<AutoRefreshData>Yes</AutoRefreshData>
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<Text>@Budget:AllocateCommandButtonText</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>