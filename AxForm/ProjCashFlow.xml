<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProjCashFlow</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
// The form for the Cash Flow
public class ProjCashFlow extends FormRun
{
    ProjCashFlow        projCashFlow;
    ResourceRecId       resourceRecId;
    ResourceCategoryRecId   resourceCategoryRecId;
    ItemId              itemId;
    SMASubscriptionId   subscriptionId;
    SMASubscriptionGroupId subscriptionGroupId;

    ProjCategoryId      categoryId;
    ProjCategoryGroupId categoryGroupId;
    ProjId              projId;
    ProjWipId           projWipId;
    ProjSortValue       sortCode;
    ProjSort            sortingId;

    ProjGroupId         projGroupId;
    ProjInvoiceProjId   projInvoiceProjId;
    CustAccount         custAccount;
    ProjTransIdBase     transId;
    boolean             sorting;

    ProjTable           projTable;
    boolean             showSubProjects;

    TmpProjCashFlowExcelPivot   tmpExcelExport;

    private boolean enableProjMultipleContractLinesForProjectFeature = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

}
]]></Source>
			</Method>
			<Method>
				<Name>calculateRequest</Name>
				<Source><![CDATA[
    // Method used to calculate the results from the user
    void calculateRequest()
    {
        ProjCashFlowCalc projCashFlowCalc;

        // Initialise the cash flow calculate class
        projCashFlowCalc = new ProjCashFlowCalc(cashFlow_DataSource);

        // Set the params
        element.getCashFlowObject();

        // Send the param class to the server for calculations
        projCashFlowCalc.parmProjCashFlowCon(projCashFlow.pack());

        // Set the Trans id in the cash flow calculate class
        this.setTransId();

        // Set the trans id in the calculate class
        projCashFlowCalc.paramTransId(transId);

        // Set the empty Excel export temp table
        projCashFlowCalc.parmTmpExcelExport(tmpExcelExport);

        // Invoke the calculatations
        projCashFlowCalc.run();

        // Re read the data source
        cashFlow_DataSource_ds.research();

        element.setDeviationSumAmounts();

        // Enable the forecast and transaction buttons
        element.makeButtonsVisible(true);

        // Copy calculated Excel export temp table
        tmpExcelExport.setTmpData(projCashFlowCalc.parmTmpExcelExport());
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTmpProjCashFlow</Name>
				<Source><![CDATA[
    // This method will clear the existing data source and get the form to the start
    // condition
    void clearTmpProjCashFlow()
    {
        select cashFlow_DataSource;
        if (cashFlow_DataSource)
        {
            cashFlow_DataSource.delete();
            cashFlow_DataSource.clear();
            cashFlow_DataSource_ds.research();
        }

        // Delete Excel export temp table
        delete_from tmpExcelExport;

        // Disable the buttons
        element.makeButtonsVisible(false);

        // Reset deviation/sum field
        element.setDeviationSumAmounts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashFlowObject</Name>
				<Source><![CDATA[
    // Returns the cash flow object used for sending it to the server after serialization
    ProjCashFlow getCashFlowObject()
    {
        // Param class
        projCashFlow = new ProjCashFlow();

       // Set the variables in the param class
        projCashFlow.parmActualBudget(actualBudgetDeviationSum.selection());
        projCashFlow.parmIncludedExpectedPayment(inclExpectedPayment.value());
        projCashFlow.parmIncludedPaidPayment(inclPaidPayment.value());
        projCashFlow.parmForecastModelId(forecastModel.valueStr());

        projCashFlow.parmExpenses(expenses.value());
        projCashFlow.parmFee(fee.value());
        projCashFlow.parmHour(hour.value());
        projCashFlow.parmItem(item.value());
        projCashFlow.parmOnAcc(onAccount.value());

        projCashFlow.parmFixedPrice(fixedPrice.value());
        projCashFlow.parmInternalCost(internalCost.value());
        projCashFlow.parmTimeMaterial(timeMaterial.value());
        projCashFlow.parmInvestment(investment.value());
        projCashFlow.parmTimeProject(timeProjects.value());

        projCashFlow.parmMinimumCostPaymentDate(minimumPayDate.dateValue());
        projCashFlow.parmMinimumSalesPaymentDate(minimumSalesPayDate.dateValue());
        projCashFlow.parmDaysAddedToCostPayment(addDays.value());
        projCashFlow.parmDaysAddedToSalesPayment(addDaysToSalesDate.value());

        projCashFlow.parmPaymentBreakDate(paymentBreakDate.dateValue());
        projCashFlow.parmPaymentFromDate(paymentFromDate.dateValue());
        projCashFlow.parmPaymentToDate(paymentToDate.dateValue());
        projCashFlow.parmProjectBreakDate(projBreakDate.dateValue());
        projCashFlow.parmProjectFromDate(projFromDate.dateValue());
        projCashFlow.parmProjectToDate(projToDate.dateValue());

        projCashFlow.parmResource(resourceRecId);
        projCashFlow.parmResourceCategory(resourceCategoryRecId);
        projCashFlow.parmitemId(itemId);
        projCashFlow.parmSubscriptionId(subscriptionId);
        projCashFlow.parmSubscriptionGroupId(subscriptionGroupId);
        projCashFlow.parmCategoryId(categoryId);
        projCashFlow.parmCategoryGroupId(categoryGroupId);
        projCashFlow.parmProjId(projId);
        projCashFlow.parmProjTree(includeSubprojects.value());
        projCashFlow.parmProjWIPId(projWipId);

        projCashFlow.parmProjGroupId(projGroupId);
        projCashFlow.parmProjInvoiceProjId(projInvoiceProjId);
        projCashFlow.parmCustAccount(custAccount);

        switch (sortCode)
        {
            case ProjSortValue::Sorting1:
                projCashFlow.parmSorting1(sortingId);
                break;

            case ProjSortValue::Sorting2:
                projCashFlow.parmSorting2(sortingId);
                break;

            case ProjSortValue::Sorting3:
                projCashFlow.parmSorting3(sortingId);
                break;
        }

        return projCashFlow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    // Set the initial settings
    public void init()
    {
        FormRun callerForm = element.args().caller();

        if (element.args().dataset() ==  tableNum(ProjSorting))
        {
            sorting = true;
        }

        if (element.args().dataset() ==  tableNum(ProjTable))
        {
            projTable = element.args().record();

            if (ProjTable::child(projTable.ProjId))
            {
                showSubProjects = true;
            }
        }

        super();

        // Default actual settings
        element.setActual(true);
        element.setBudget(false);
        element.setSum(false);
        element.setDeviation(false);
        projBreakDate.visible(false);
        paymentBreakDate.visible(false);
        direct_MenuForecast.enabled(false);
        direct_MenuTransaction.enabled(false);
        forecastModel.visible(false);
        dataContinued.visible(false);

        // Set the payment types
        inclExpectedPayment.enabled(true);
        inclPaidPayment.enabled(true);
        inclExpectedPayment.value(true);
        inclPaidPayment.value(true);

        // Hidden items for ProjOps
        if (ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
        {
            Transaction_Item.visible(false);
            Item.visible(false);

            Transaction_Item.enabled(false);
            Item.enabled(false);
        }

        // Is statistics form opened from Subscription
        if  (callerForm
         && (callerForm.name() == formStr(SMASubscriptionTable)))
        {
            // Disable the actual vs budget selection
            actualBudgetDeviationSum.enabled(false);
        }

        includeSubprojects.visible(showSubProjects);

        element.setButtonVisibility();
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeButtonsVisible</Name>
				<Source><![CDATA[
    // Enable the buttons (Forecast and Transaction)
    void makeButtonsVisible(boolean _visible = false)
    {
        direct_MenuForecast.enabled(_visible);
        direct_MenuTransaction.enabled(_visible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActual</Name>
				<Source><![CDATA[
    // This method sets the visibility of all the elements related to actual values
    void setActual(boolean visible)
    {
        actualHeader.visible(visible);
        actual_CashInflow.visible(visible);
        actual_CashOutflow.visible(visible);
        actual_Netcashflow.visible(visible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudget</Name>
				<Source><![CDATA[
    // This method sets the visibility of elements related to the budget values
    void setBudget(boolean visible)
    {
        budgetHeader.visible(visible);
        budget_CashInFlow.visible(visible);
        budget_CashOutFlow.visible(visible);
        budget_NetCashFlow.visible(visible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the visibility of transaction, forecast and export to excel buttons.
    /// </summary>
    private void setButtonVisibility()
    {
        AccessRight     menuItemAccessRight;
        SecurityRights  securityRights;

        securityRights = SecurityRights::construct();

        // Hour transaction button
        menuItemAccessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(projTransEmpl));

        if (menuItemAccessRight == AccessRight::NoAccess)
        {
            transaction_Hour.visible(false);
        }

        // Expenses transaction button
        menuItemAccessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(projTransCost));

        if (menuItemAccessRight == AccessRight::NoAccess)
        {
            transaction_Expenses.visible(false);
        }

        // Item transaction button
        menuItemAccessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(projTransItem));

        if (menuItemAccessRight == AccessRight::NoAccess)
        {
            transaction_Item.visible(false);
        }

        // Fee transaction button
        menuItemAccessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(projTransRevenue));

        if (menuItemAccessRight == AccessRight::NoAccess)
        {
            transaction_Fee.visible(false);
        }

        // On-Account transaction button
        menuItemAccessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(projTransOnAcc));

        if (menuItemAccessRight == AccessRight::NoAccess)
        {
            transaction_Onaccount.visible(false);
        }

        // Hour forecast button
        menuItemAccessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(projForecastEmpl));

        if (menuItemAccessRight == AccessRight::NoAccess)
        {
            forecast_Hour.visible(false);
        }

        // Expenses forecast button
        menuItemAccessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(projForecastCost));

        if (menuItemAccessRight == AccessRight::NoAccess)
        {
            forecast_Expenses.visible(false);
        }

        // Item forecast button
        menuItemAccessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(forecastSales));

        if (menuItemAccessRight == AccessRight::NoAccess)
        {
            forecast_Item.visible(false);
        }

        // Fee forecast button
        menuItemAccessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(projForecastRevenue));

        if (menuItemAccessRight == AccessRight::NoAccess)
        {
            forecast_Fee.visible(false);
        }

        // On-account forecast button
        menuItemAccessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuitemDisplayStr(projForecastOnAcc));

        if (menuItemAccessRight == AccessRight::NoAccess)
        {
            forecast_Onaccount.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeviation</Name>
				<Source><![CDATA[
    // This method sets the visibility of elements related to the deviation values
    void setDeviation(boolean visible)
    {
        deviationHeader.visible(visible);
        deviationSum_CashInFlow.visible(visible);
        deviationSum_CashOutFlow.visible(visible);
        deviationSum_NetCashFlow.visible(visible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeviationSumAmounts</Name>
				<Source><![CDATA[
    private void setDeviationSumAmounts()
    {
        if (actualBudgetDeviationSum.selection() == ProjActualBudget::Deviation)
        {
            deviationSum_CashInFlow.realValue(cashFlow_DataSource.Deviation_CashInFlow);
            deviationSum_CashOutFlow.realValue(cashFlow_DataSource.Deviation_CashOutFlow);
            deviationSum_NetCashFlow.realValue(cashFlow_DataSource.Deviation_NetCashFlow);
        }
        else if (actualBudgetDeviationSum.selection() == ProjActualBudget::Sum_)
        {
            deviationSum_CashInFlow.realValue(cashFlow_DataSource.Sum_CashInFlow);
            deviationSum_CashOutFlow.realValue(cashFlow_DataSource.Sum_CashOutFlow);
            deviationSum_NetCashFlow.realValue(cashFlow_DataSource.Sum_NetCashFlow);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSum</Name>
				<Source><![CDATA[
    // This method sets the visibility of elements related to the sum values
    void setSum(boolean visible)
    {
        // We need to change the labels of the deviation groups to sum
        if (visible)
        {
            deviationHeader.text("@SYS36723");
        }
        else
        {
            deviationHeader.text("@SYS78417");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransId</Name>
				<Source><![CDATA[
    // This method will get the trans id from the link table
    void setTransId()
    {
        tmpCashFlowLink.Resource               = resourceRecId;
        tmpCashFlowLink.ResourceCategory       = resourceCategoryRecId;
        tmpCashFlowLink.ItemId                 = itemId;
        tmpCashFlowLink.smaSubscriptionId      = subscriptionId;
        tmpCashFlowLink.smaSubscriptionGroupId = subscriptionGroupId;

        tmpCashFlowLink.CategoryId        = categoryId;
        tmpCashFlowLink.CategoryGroupId   = categoryGroupId;

        tmpCashFlowLink.ProjId            = projId;
        tmpCashFlowLink.ProjWipId         = projWipId;
        tmpCashFlowLink.SortingId         = sortingId;

        tmpCashFlowLink.ProjGroupId       = projGroupId;
        tmpCashFlowLink.ProjInvoiceProjId = projInvoiceProjId;
        tmpCashFlowLink.CustAccount       = custAccount;

        tmpCashFlowLink.insert();

        transId                           = tmpCashFlowLink.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    // Validation method
    public boolean validate()
    {
        boolean ret;

        ret = true;

        // No project type selected
        if (!element.enableProjMultipleContractLinesForProjectFeature &&
            !(fixedPrice.value() ||
              timeMaterial.value() ||
              internalCost.value() ||
              investment.value() ||
              timeProjects.value()))
        {
            ret = checkFailed("@SYS91026");
        }

        // No transaction type selected
        if (!(hour.value() || expenses.value() || fee.value() || item.value() || onAccount.value()))
        {
            ret = checkFailed("@SYS91027");
        }

        // Wrong date interval
        if ((projFromDate.dateValue() > projToDate.dateValue()) ||
                (paymentFromDate.dateValue() > paymentToDate.dateValue()))
        {
            // Invalid date interval
            ret = checkFailed("@SYS91020");
        }

        // One of the payment types must be included
        if (actualBudgetDeviationSum.selection() != ProjActualBudget::Budget)
        {
            if (!(inclExpectedPayment.value() || inclPaidPayment.value()))
            {
                ret = checkFailed("@SYS101986");
            }
        }

        // If budget is selected then forecast model id must be selected
        if (actualBudgetDeviationSum.selection() == ProjActualBudget::Budget)
        {
            if (forecastModel.valueStr() == '')
            {
                ret = checkFailed("@SYS87707");
            }
        }

        // Minimum date should be less than the To date
        if (minimumPayDate.dateValue() > paymentToDate.dateValue())
        {
            //ret = checkFailed('Minimum cost date should be less than Payment To date');
            ret = checkFailed("@SYS91020");
        }
        if (minimumSalesPayDate.dateValue() > paymentToDate.dateValue())
        {
            //ret = checkFailed('Minimum sales date should be less than Payment To date');
            ret = checkFailed("@SYS91020");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>CashFlow_DataSource</Name>
				<Methods>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        // This method will be used to control the UI and the flow of the Cash Flow
        // from the other forms
        // This method is automatically invoked by Axapta framework whenever this data source is loaded
        // from other forms
        // This class is inspired from a similar class in the ProjStatistics class
        // It has been used as Cash Flow is similar to the ProjStatistics
        public void linkActive()
        {
            HcmWorker               hcmWorker;
            ResourceView            resource;
            ResourceCategoryView    resourceCategory;
            SMASubscriptionTable    smaSubscriptionTable;
            SMASubscriptionGroup    smaSubscriptionGroup;

            InventTable             inventTable;

            ProjCategory            projCategory;
            ProjCategoryGroup       projCategoryGroup;

            ProjWIPTable            projWIPTable;
            ProjSorting             projSorting;
            ProjGroup               projGroup;
            ProjInvoiceTable        projInvoiceTable;
            CustTable               custTable;
            ProjGrantView           projGrantView;
            ProjGrant               projGrant;
            ResResourcesListView    resourceListView;

            // Set all elements to not visible
            this.fixedPrice(false,false);
            this.timeMaterial(false,false);
            this.internalCost(false,false);
            this.investment(false,false);
            this.timeProject(false,false);

            if (element.enableProjMultipleContractLinesForProjectFeature)
            {
                FixedPrice.visible(false);
                TimeMaterial.visible(false);
                InternalCost.visible(false);
                Investment.visible(false);
                TimeProjects.visible(false);
            }

            this.hour(false,false);
            this.expenses(false,false);
            this.fee(false,false);
            this.item(false,false);
            this.onAccount(false,false);

            // This switch decides where the form is being invoked
            // The cases corresponds to the data source that has been set on the forms
            switch (element.args().dataset())
            {
                // From the Subscription option in menu
                case(tableNum(SMASubscriptionTable)):
                    smaSubscriptionTable    = element.args().record();
                    subscriptionId          = smaSubscriptionTable.SubscriptionId;
                    this.linkFromSMASubscriptionTable();
                    break;

                // From the Subscription group option in menu
                case(tableNum(SMASubscriptionGroup)):
                    smaSubscriptionGroup    = element.args().record();
                    subscriptionGroupId     = smaSubscriptionGroup.GroupId;
                    this.linkFromSMASubscriptionGroup();
                    break;

                // From the Employee option in menu
                case(tableNum(HcmWorker)):
                    hcmWorker           = element.args().record();
                    resourceRecId       = ResourceFacade::findByWorker(hcmWorker.RecId);
                    this.linkFromResource();
                    break;

                // From the Resource option in menu
                case(tableNum(ResourceView)):
                    resource            = element.args().record();
                    resourceRecId       = resource.RecId;
                    this.linkFromResource();
                    break;

                // From the Resource list option in menu
                case(tableNum(ResResourcesListView)):
                    resourceListView   = element.args().record();
                    resourceRecId      = resourceListView.Resource;
                    this.linkFromResource();
                    break;

                // From the ResourceCategory option in menu
                case(tableNum(ResourceCategoryView)):
                    resourceCategory            = element.args().record();
                    resourceCategoryRecId       = resourceCategory.RecId;
                    this.linkFromResourceCategory();
                    break;

                // From the Item option in menu
                case(tableNum(InventTable)):
                    inventTable         = element.args().record();
                    itemId              = inventTable.ItemId;
                    this.linkFromInventTable();
                    break;

                // From the Category option in menu
                case(tableNum(ProjCategory)):
                    projCategory        = element.args().record();
                    categoryId          = projCategory.CategoryId;
                    this.linkFromProjCategory(projCategory);
                    break;

                // From the Category group option in menu
                case(tableNum(ProjCategoryGroup)):
                    projCategoryGroup   = element.args().record();
                    categoryGroupId     = projCategoryGroup.CategoryGroupId;
                    this.linkFromProjCateogryGroup(projCategoryGroup);
                    break;

                // From the Projects option in menu
                case(tableNum(ProjTable)):
                    projTable           = element.args().record();
                    projId              = projTable.ProjId;
                    this.linkFromProjTable(projTable);
                    break;

                case(tableNum(ProjGrantView)):
                    projGrantView           = element.args().record();
                    projTable               = ProjTable::find(projGrantView.ProjId);
                    this.linkFromProjTable(projTable);
                    break;

                case(tableNum(ProjGrant)):
                    projGrant               = element.args().record();
                    select firstonly ProjId from projGrantView
                    where projGrantView.GrantId == projGrant.GrantId;
                    projTable               = ProjTable::find(projGrantView.ProjId);
                    this.linkFromProjTable(projTable);
                    break;

                // From the Projects WIP option in menu
                case(tableNum(ProjWIPTable)):
                    projWIPTable        = element.args().record();
                    projWipId           = projWIPTable.ProjId;
                    this.linkFromProjWIPTable(projWIPTable);
                    break;

                case(tableNum(ProjSorting)):
                    projSorting         = element.args().record();
                    sortCode            = projSorting.SortCode;
                    sortingId           = projSorting.SortingId;
                    this.linkFromProjSorting();
                    break;

                // From the Projects group option in menu
                case(tableNum(ProjGroup)):
                    projGroup           = element.args().record();
                    projGroupId         = projGroup.ProjGroupId;
                    this.linkFromProjGroup(projGroup);
                    break;

                // From the Invoice option in menu
                case(tableNum(ProjInvoiceTable)):
                    projInvoiceTable    = element.args().record();
                    projInvoiceProjId   = projInvoiceTable.ProjInvoiceProjId;
                    this.linkFromInvoiceProject(projInvoiceTable);
                    break;

                // From the Customers option in menu
                case(tableNum(CustTable)):
                    custTable           = element.args().record();
                    custAccount         = custTable.AccountNum;
                    this.linkFromCustTable();
                    break;
            }

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkFromCustTable</Name>
						<Source><![CDATA[
        // Method to handle the invocation from customer
        void linkFromCustTable()
        {
            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                this.fixedPrice(true,true);
                this.timeMaterial(true,true);
                this.internalCost(true,true);
                this.investment(true,true);
                this.timeProject(false,false);
            }

            this.hour(true,true);
            this.expenses(true,true);
            this.fee(true,true);
            this.item(true,true);
            this.onAccount(true,true);
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkFromProjSorting</Name>
						<Source><![CDATA[
        // Method to handle the invocation from Sorting
        void linkFromProjSorting()
        {
            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                this.fixedPrice(true,true);
                this.timeMaterial(true,true);
                this.internalCost(true,true);
                this.investment(true,true);
                this.timeProject(true,true);
            }

            this.hour(true,true);
            this.expenses(true,true);
            this.fee(true,true);
            this.item(true,true);
            this.onAccount(true,true);
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkFromProjGroup</Name>
						<Source><![CDATA[
        // Method to handle the invocation from project group
        void linkFromProjGroup(ProjGroup    _projGroup)
        {
            // The switch to set the UI elements as per the project type
            switch (_projGroup.ProjType)
            {
                case ProjType::TimeMaterial:
                    timeMaterial.value(true);
                    this.hour(true,true);
                    this.expenses(true,true);
                    this.item(true,true);
                    this.fee(true,true);
                    this.onAccount(true,true);
                    break;

                case ProjType::FixedPrice:
                    fixedPrice.value(true);
                    this.hour(true,true);
                    this.expenses(true,true);
                    this.item(true,true);
                    this.fee(true,true);
                    this.onAccount(true,true);
                    break;

                case ProjType::Investment:
                    investment.value(true);
                    this.hour(true,true);
                    this.expenses(true,true);
                    this.item(true,true);
                    break;

                case ProjType::Cost:
                    internalCost.value(true);
                    this.hour(true,true);
                    this.expenses(true,true);
                    this.item(true,true);
                    break;

                case ProjType::Internal:
                    internalCost.value(true);
                    this.hour(true,true);
                    this.expenses(true,true);
                    this.item(true,true);
                    break;

                case ProjType::Time:
                    timeProjects.value(true);
                    this.hour(true,false);
                    break;

                case ProjType::None:
                    this.hour(true,true);
                    this.expenses(true,true);
                    this.item(true,true);
                    this.fee(true,true);
                    this.onAccount(true,true);
                    break;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkFromProjWIPTable</Name>
						<Source><![CDATA[
        // Method to handle the invocation from WIP table
        void linkFromProjWIPTable(ProjWIPTable  _projWIPTable)
        {
            this.hour(true,true);
            this.expenses(true,true);
            this.item(true,true);

            ProjTable projTableLocal = _projWIPTable.projTable();
            
            if (element.enableProjMultipleContractLinesForProjectFeature)
            {
                if (projTableLocal.ProjInvoiceProjId)
                {
                    if (ProjMultipleContractLinesForProjectFeatureHelper::findBillingMethodContractLineForHourExpenseItemTransType(projTableLocal.ProjId, projTableLocal.ProjInvoiceProjId, ProjContractBillingMethod::FixedPrice))
                    {
                        this.onAccount(true);
                    }

                    if (ProjMultipleContractLinesForProjectFeatureHelper::isTransTypeIncludedByBillingMethod(projTableLocal.ProjId, projTableLocal.ProjInvoiceProjId, ProjTransType::Revenue, ProjContractBillingMethod::FixedPrice))
                    {
                        this.fee(true);
                        this.onAccount(true);
                    }
                }
            }
            else
            {
                if (projTableLocal.Type == ProjType::FixedPrice)
                {
                    this.fixedPrice(true,false);
                    this.investment(false,false);
                    this.fee(true,true);
                    this.onAccount(true,true);
                }
                else if (projTableLocal.Type == ProjType::Investment)
                {
                    this.fixedPrice(false,false);
                    this.investment(true,false);
                    this.onAccount(false, false);
                }
                this.internalCost(false,false);
                this.timeProject(false,false);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkFromProjCateogryGroup</Name>
						<Source><![CDATA[
        // Method to handle the invocation from category
        void linkFromProjCateogryGroup(ProjCategoryGroup    _projCategoryGroup)
        {
            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                this.fixedPrice(true);
                this.timeMaterial(true);
                this.investment(true);
                this.internalCost(true);
                this.timeProject(false,false);
            }

            transaction_Hour.enabled(false);
            transaction_Expenses.enabled(false);
            transaction_Fee.enabled(false);
            transaction_OnAccount.enabled(false);
            transaction_Item.enabled(false);
            forecast_Hour.enabled(false);
            forecast_Expenses.enabled(false);
            forecast_Fee.enabled(false);
            forecast_OnAccount.enabled(false);
            forecast_Item.enabled(false);

            // Set the UI elements as per the category type
            switch (_projCategoryGroup.CategoryType)
            {
                case ProjCategoryType::Revenue:
                    this.fee(true,true);
                    transaction_Fee.enabled(true);
                    forecast_Fee.enabled(true);
                    break;

                case ProjCategoryType::Hour:
                    this.hour(true,true);

                    if (!element.enableProjMultipleContractLinesForProjectFeature)
                    {
                        this.timeProject(true,true);
                    }

                    transaction_Hour.enabled(true);
                    forecast_Hour.enabled(true);
                    break;

                case ProjCategoryType::Cost:
                    this.expenses(true,true);
                    transaction_Expenses.enabled(true);
                    forecast_Expenses.enabled(true);
                    break;

                case ProjCategoryType::Item:
                    this.item(true,true);
                    transaction_Item.enabled(true);
                    forecast_Item.enabled(true);
                    break;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkFromProjCategory</Name>
						<Source><![CDATA[
        // Method to handle the invocation from project category
        void linkFromProjCategory(ProjCategory _projCategory)
        {
            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                this.fixedPrice(true);
                this.timeMaterial(true);
                this.investment(true);
                this.internalCost(true);
                this.timeProject(false,false);
            }

            transaction_Hour.enabled(false);
            transaction_Expenses.enabled(false);
            transaction_Fee.enabled(false);
            transaction_OnAccount.enabled(false);
            transaction_Item.enabled(false);
            forecast_Hour.enabled(false);
            forecast_Expenses.enabled(false);
            forecast_Fee.enabled(false);
            forecast_OnAccount.enabled(false);
            forecast_Item.enabled(false);

            // Switch as per category
            switch (_projCategory.CategoryType)
            {
                case ProjCategoryType::Revenue:
                    this.fee(true,true);

                    if (!element.enableProjMultipleContractLinesForProjectFeature)
                    {
                        this.timeMaterial(true,false);
                        this.internalCost(false,false);
                        this.investment(false,false);

                        if (_projCategory.SetupEstimate)
                        {
                            this.fixedPrice(true,false);
                        }
                        else
                        {
                            this.fixedPrice(false,false);
                        }
                    }

                    transaction_Fee.enabled(true);
                    forecast_Fee.enabled(true);
                    break;

                case ProjCategoryType::Hour:
                    this.hour(true,true);

                    if (!element.enableProjMultipleContractLinesForProjectFeature)
                    {
                        this.timeProject(true,true);
                    }

                    transaction_Hour.enabled(true);
                    forecast_Hour.enabled(true);
                    break;

                case ProjCategoryType::Cost:
                    this.expenses(true,true);
                    transaction_Expenses.enabled(true);
                    forecast_Expenses.enabled(true);
                    break;

                case ProjCategoryType::Item:
                    this.item(true,true);
                    transaction_Item.enabled(true);
                    forecast_Item.enabled(true);
                    break;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkFromProjTable</Name>
						<Source><![CDATA[
        // Method to handle the invocation from project
        void linkFromProjTable(ProjTable _projTable)
        {
            ProjTable projTableCheck;
            boolean showChild;
            
            if (element.args().dataset() != tableNum(ProjGrantView))
            {
                showChild = includeSubprojects.value();
            }

            projId = _projTable.ProjId;

            this.fixedPrice(false,false);
            this.timeMaterial(false,false);
            this.investment(false,false);
            this.internalCost(false,false);
            this.timeProject(false,false);

            this.fee(false,false);
            this.hour(false,false);
            this.expenses(false,false);
            this.item(false,false);
            this.onAccount(false,false);

            if (element.enableProjMultipleContractLinesForProjectFeature)
            {
                this.hour(true);
                this.expenses(true);
                this.item(true);

                if (showChild)
                {
                    PSAContractLineItems contractLine;
                    ProjId projIdFilter = projId + '*';
            
                    select firstonly projTableCheck
                        where projTableCheck.ProjId like projIdFilter
                            exists join contractLine
                                where contractLine.ProjInvoiceProjId == projTableCheck.ProjInvoiceProjId &&
                                        (contractLine.IncludeHourTrans == NoYes::Yes ||
                                         contractLine.IncludeExpenseTrans == NoYes::Yes ||
                                         contractLine.IncludeItemTrans == NoYes::Yes);
                    if (projTableCheck)
                    {
                        this.onAccount(true);
                    }

                    select firstonly projTableCheck
                        where projTableCheck.ProjId like projIdFilter
                            exists join contractLine
                                where contractLine.ProjInvoiceProjId == projTableCheck.ProjInvoiceProjId &&
                                        contractLine.IncludeFeeTrans == NoYes::Yes;
                    if (projTableCheck)
                    {
                        this.fee(true);
                        this.onAccount(true);
                    }
                }
                else if (_projTable.ProjInvoiceProjId)
                {
                    if (ProjMultipleContractLinesForProjectFeatureHelper::getProjContractLineByContractIdTransType(_projTable.ProjId, _projTable.ProjInvoiceProjId, ProjTransType::Cost) ||
                        ProjMultipleContractLinesForProjectFeatureHelper::getProjContractLineByContractIdTransType(_projTable.ProjId, _projTable.ProjInvoiceProjId, ProjTransType::Hour) ||
                        ProjMultipleContractLinesForProjectFeatureHelper::getProjContractLineByContractIdTransType(_projTable.ProjId, _projTable.ProjInvoiceProjId, ProjTransType::Item))
                    {
                        this.onAccount(true);
                    }

                    if (ProjMultipleContractLinesForProjectFeatureHelper::getProjContractLineByContractIdTransType(_projTable.ProjId, _projTable.ProjInvoiceProjId, ProjTransType::Revenue))
                    {
                        this.fee(true);
                        this.onAccount(true);
                    }
                }
            }
            else
            {
                if (showChild)
                {
                    ProjId projIdFilter  = projId + '*';

                    select firstonly projTableCheck
                       where projTableCheck.ProjId like projIdFilter
                          && projTableCheck.Type    == ProjType::TimeMaterial;

                    if (projTableCheck)
                    {
                        this.timeMaterial(true);

                        this.fee(true);
                        this.hour(true);
                        this.expenses(true);
                        this.item(true);
                        this.onAccount(true);
                    }
                    else
                    {
                        this.timeMaterial(false, false);
                    }

                    select firstonly projTableCheck
                       where projTableCheck.ProjId like projIdFilter
                          && projTableCheck.Type    == ProjType::FixedPrice;

                    if (projTableCheck)
                    {
                        this.fixedPrice(true);

                        this.fee(true);
                        this.hour(true);
                        this.expenses(true);
                        this.item(true);
                        this.onAccount(true);
                    }
                    else
                    {
                        this.fixedPrice(false, false);
                    }

                    select firstonly projTableCheck
                       where projTableCheck.ProjId like projIdFilter
                          && projTableCheck.Type    == ProjType::Investment;

                    if (projTableCheck)
                    {
                        this.investment(true);

                        this.hour(true);
                        this.expenses(true);
                        this.item(true);
                    }
                    else
                    {
                        this.investment(false, false);
                    }

                    select firstonly projTableCheck
                       where  projTableCheck.ProjId like projIdFilter
                          && (projTableCheck.Type    == ProjType::Internal
                          ||  projTableCheck.Type    == ProjType::Cost);

                    if (projTableCheck)
                    {
                        this.internalCost(true);

                        this.hour(true);
                        this.expenses(true);
                        this.item(true);
                    }
                    else
                    {
                        this.internalCost(false, false);
                    }

                    select firstonly projTableCheck
                       where projTableCheck.ProjId like projIdFilter
                          && projTableCheck.Type    == ProjType::Time;

                    if (projTableCheck)
                    {
                        this.timeProject(true);
                        this.hour(true);
                    }
                    else
                    {
                        this.timeProject(false, false);
                    }
                }
                else
                {
                    switch (_projTable.Type)
                    {
                        case ProjType::TimeMaterial:
                            this.timeMaterial(true,false);
                            this.fee(true);
                            this.hour(true);
                            this.expenses(true);
                            this.item(true);
                            this.onAccount(true);
                            break;

                        case ProjType::FixedPrice:
                            this.fixedPrice(true,false);
                            this.hour(true);
                            this.expenses(true);
                            this.item(true);
                            this.fee(true);
                            this.onAccount(true);
                            break;

                        case ProjType::Investment:
                            this.investment(true,false);
                            this.hour(true);
                            this.expenses(true);
                            this.item(true);
                            break;

                        case ProjType::Cost:
                            this.internalCost(true,false);
                            this.hour(true);
                            this.expenses(true);
                            this.item(true);
                            break;

                        case ProjType::Internal:
                            this.internalCost(true,false);
                            this.hour(true);
                            this.expenses(true);
                            this.item(true);
                            break;

                        case ProjType::Time:
                            this.timeProject(true,false);
                            this.hour(true,false);
                            break;
                    }
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkFromInventTable</Name>
						<Source><![CDATA[
        // Method to handle the invocation from inventory
        void linkFromInventTable()
        {
            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                this.fixedPrice(true,true);
                this.timeMaterial(true,true);
                this.internalCost(true,true);
                this.investment(true,true);
                this.timeProject(false,false);
            }

            this.hour(false,false);
            this.expenses(false,false);
            this.fee(false,false);
            this.item(true,true);
            this.onAccount(false,false);
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkFromSMASubscriptionGroup</Name>
						<Source><![CDATA[
        // Method to handle the invocation from subscription group
        void linkFromSMASubscriptionGroup()
        {
            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                this.timeMaterial(true, false);
            }

            transaction_Hour.enabled(false);
            transaction_Expenses.enabled(false);
            transaction_OnAccount.enabled(false);
            transaction_Item.enabled(false);
            direct_MenuForecast.enabled(false);
            forecast_Fee.enabled(false);
            forecast_Hour.enabled(false);
            forecast_Expenses.enabled(false);
            forecast_Onaccount.enabled(false);
            forecast_Item.enabled(false);

            this.hour(false,false);
            this.expenses(false,false);
            this.onAccount(false,false);
            this.item(false,false);
            this.fee(true,true);
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkFromSMASubscriptionTable</Name>
						<Source><![CDATA[
        // Method to handle the invocation from subscription
        void linkFromSMASubscriptionTable()
        {
            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                this.timeMaterial(true, false);
            }

            transaction_Hour.enabled(false);
            transaction_Expenses.enabled(false);
            transaction_OnAccount.enabled(false);
            transaction_Item.enabled(false);
            direct_MenuForecast.enabled(false);
            forecast_Fee.enabled(false);
            forecast_Hour.enabled(false);
            forecast_Expenses.enabled(false);
            forecast_Onaccount.enabled(false);
            forecast_Item.enabled(false);

            this.hour(false,false);
            this.expenses(false,false);
            this.onAccount(false,false);
            this.item(false,false);
            this.fee(true,true);
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkFromInvoiceProject</Name>
						<Source><![CDATA[
        // Method to handle the invocation from invoice
        void linkFromInvoiceProject(ProjInvoiceTable _projInvoiceTable)
        {
            projInvoiceProjId   = _projInvoiceTable.ProjInvoiceProjId;

            if (element.enableProjMultipleContractLinesForProjectFeature)
            {
                this.expenses(true);
                this.hour(true);
                this.item(true);

                if (projInvoiceProjId)
                {
                    if (ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForHourExpenseItemTransType(projInvoiceProjId))
                    {
                        this.onAccount(true);
                    }

                    if (ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForRevenueTransType(projInvoiceProjId))
                    {
                        this.fee(true);
                        this.onAccount(true);
                    }
                }
            }
            else
            {
                this.fixedPrice(true);
                this.timeMaterial(true);
                this.investment(true);
                this.internalCost(true);
                this.timeProject(true);
            
                this.fee(false,false);
                this.hour(false,false);
                this.expenses(false,false);
                this.item(false,false);
                this.onAccount(false,false);

                ProjTable projTableCheck;
            
                select firstonly projTableCheck
                    where projTableCheck.ProjInvoiceProjId == projInvoiceProjId
                        && projTableCheck.Type    == ProjType::TimeMaterial;

                if (projTableCheck)
                {
                    this.fee(true);
                    this.hour(true);
                    this.expenses(true);
                    this.item(true);
                    this.onAccount(true);
                }

                select firstonly projTableCheck
                    where projTableCheck.ProjInvoiceProjId == projInvoiceProjId
                        && projTableCheck.Type              == ProjType::FixedPrice;

                if (projTableCheck)
                {
                    this.fee(true);
                    this.hour(true);
                    this.expenses(true);
                    this.item(true);
                    this.onAccount(true);
                }

                select firstonly projTableCheck
                    where projTableCheck.ProjInvoiceProjId == projInvoiceProjId
                        && projTableCheck.Type              == ProjType::Investment;

                if (projTableCheck)
                {
                    this.hour(true);
                    this.expenses(true);
                    this.item(true);
                }

                select firstonly projTableCheck
                    where projTableCheck.ProjInvoiceProjId == projInvoiceProjId
                        && (projTableCheck.Type             == ProjType::Internal
                  ||  projTableCheck.Type             == ProjType::Cost);

                if (projTableCheck)
                {
                    this.hour(true);
                    this.expenses(true);
                    this.item(true);
                }

                select firstonly projTableCheck
                    where projTableCheck.ProjInvoiceProjId == projInvoiceProjId
                        && projTableCheck.Type              == ProjType::Time;

                if (projTableCheck)
                {
                    this.timeProject(true);
                    this.hour(true);
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>timeProject</Name>
						<Source><![CDATA[
        // Method to set the Time Project
        void timeProject(
            boolean     value,
            boolean     enabled = true)

        {
            timeProjects.value(value);
            timeProjects.enabled(enabled);
        }

]]></Source>
					</Method>
					<Method>
						<Name>fixedPrice</Name>
						<Source><![CDATA[
        void fixedPrice(boolean     value, boolean     enabled = true)
        {
            fixedPrice.value(value);
            fixedPrice.enabled(enabled);
        }

]]></Source>
					</Method>
					<Method>
						<Name>onAccount</Name>
						<Source><![CDATA[
        void onAccount(
            boolean     value,
            boolean     enabled = true)
        {
            onAccount.enabled(enabled);
            onAccount.value(value);
        }

]]></Source>
					</Method>
					<Method>
						<Name>internalCost</Name>
						<Source><![CDATA[
        void internalCost(
            boolean     value,
            boolean     enabled = true)
        {
            internalCost.value(value);
            internalCost.enabled(enabled);
        }

]]></Source>
					</Method>
					<Method>
						<Name>fee</Name>
						<Source><![CDATA[
        void fee(
            boolean     value,
            boolean     enabled = true)
        {
            fee.enabled(enabled);
            fee.value(value);
        }

]]></Source>
					</Method>
					<Method>
						<Name>hour</Name>
						<Source><![CDATA[
        void hour(
            boolean     value,
            boolean     enabled = true)
        {
            hour.enabled(enabled);
            hour.value(value);
        }

]]></Source>
					</Method>
					<Method>
						<Name>expenses</Name>
						<Source><![CDATA[
        void expenses(
            boolean     value,
            boolean     enabled = true)
        {
            expenses.enabled(enabled);
            expenses.value(value);
        }

]]></Source>
					</Method>
					<Method>
						<Name>item</Name>
						<Source><![CDATA[
        void item(
            boolean     value,
            boolean     enabled = true)
        {
            item.enabled(enabled);
            item.value(value);
        }

]]></Source>
					</Method>
					<Method>
						<Name>investment</Name>
						<Source><![CDATA[
        void investment(
            boolean     value,
            boolean     enabled = true)
        {
            investment.value(value);
            investment.enabled(enabled);
        }

]]></Source>
					</Method>
					<Method>
						<Name>timeMaterial</Name>
						<Source><![CDATA[
        void timeMaterial(
            boolean     value,
            boolean     enabled = true)
        {
            timeMaterial.value(value);
            timeMaterial.enabled(enabled);
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkFromResource</Name>
						<Source><![CDATA[
        /// <summary>
        /// Method to handle the invocation from resource
        /// </summary>
        void linkFromResource()
        {
            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                this.fixedPrice(true);
                this.timeMaterial(true);
                this.investment(true);
                this.internalCost(true);
                this.timeProject(true);
            }

            this.fee(true);
            this.hour(true);
            this.expenses(true);
            this.item(false,false);
            this.onAccount(false,false);

            transaction_OnAccount.enabled(false);
            transaction_Item.enabled(false);
            forecast_Onaccount.enabled(false);
            forecast_Item.enabled(false);
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkFromResourceCategory</Name>
						<Source><![CDATA[
        /// <summary>
        /// Method to handle the invocation from resource category
        /// </summary>
        void linkFromResourceCategory()
        {
            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                this.fixedPrice(true);
                this.timeMaterial(true);
                this.investment(true);
                this.internalCost(true);
                this.timeProject(true);
            }

            this.fee(false,false);
            this.hour(true);
            this.expenses(false,false);
            this.item(false,false);
            this.onAccount(false,false);

            transaction_OnAccount.enabled(false);
            transaction_Item.enabled(false);
            forecast_Onaccount.enabled(false);
            forecast_Item.enabled(false);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Direct_Calculate</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        // Calculate results
        void clicked()
        {
            if (! element.validate())
            {
                return;
            }

            element.calculateRequest();

            parametersTab.collapse();
            generalCashFlowGroup.expand();
            inflowTab.expand();
            outflowTab.expand();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Forecast_Hour</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        // Invoke forms on click event
        void clicked()
        {
            Args args;

            args = new Args();
            // Add the table to the records section
            args.record(cashFlow_Datasource);
            args.parmObject(element.getCashFlowObject());

            new MenuFunction(menuitemDisplayStr(projForecastEmpl), MenuItemType::Display).run(args);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Forecast_Expenses</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        // Invoke forms on click event
        void clicked()
        {
            Args args;

            args = new Args();
            // Add the table to the records section
            args.record(cashFlow_Datasource);
            args.parmObject(element.getCashFlowObject());

            new MenuFunction(menuitemDisplayStr(projForecastCost), MenuItemType::Display).run(args);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Forecast_Item</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        // Invoke forms on click event
        void clicked()
        {
            Args args;

            args = new Args();
            // Add the table to the records section
            args.record(cashFlow_Datasource);
            args.parmObject(element.getCashFlowObject());

            new MenuFunction(menuitemDisplayStr(forecastSales), MenuItemType::Display).run(args);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Forecast_Fee</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        // Invoke forms on click event
        void clicked()
        {
            Args args;

            args = new Args();
            // Add the table to the records section
            args.record(cashFlow_Datasource);
            args.parmObject(element.getCashFlowObject());

            new MenuFunction(menuitemDisplayStr(projForecastRevenue), MenuItemType::Display).run(args);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Forecast_Onaccount</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        // Invoke forms on click event
        void clicked()
        {
            Args args;

            args = new Args();
            // Add the table to the records section
            args.record(cashFlow_Datasource);
            args.parmObject(element.getCashFlowObject());

            // Open the forecast on account
            // new MenuFunction(menuitemdisplaystr(projForecastOnAcc), MenuItemType::Display).run();
            new MenuFunction(menuitemDisplayStr(projForecastOnAcc), MenuItemType::Display).run(args);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Transaction_Hour</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        // Invoke forms on click event
        void clicked()
        {
            Args args;

            args = new Args();
            // Add the table to the records section
            args.record(cashFlow_Datasource);
            args.parmObject(element.getCashFlowObject());

            new MenuFunction(menuitemDisplayStr(projTransEmpl), MenuItemType::Display).run(args);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Transaction_Expenses</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        // Invoke forms on click event
        void clicked()
        {
            Args args;

            args = new Args();
            // Add the table to the records section
            args.record(cashFlow_Datasource);
            args.parmObject(element.getCashFlowObject());

            // The transaction cost form
            new MenuFunction(menuitemDisplayStr(projTransCost), MenuItemType::Display).run(args);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Transaction_Item</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        // Invoke forms on click event
        void clicked()
        {
            Args args;

            args = new Args();
            // Add the table to the records section
            args.record(cashFlow_Datasource);
            args.parmObject(element.getCashFlowObject());

            new MenuFunction(menuitemDisplayStr(projTransItem), MenuItemType::Display).run(args);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Transaction_Fee</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        // Invoke forms on click event
        void clicked()
        {
            Args args;

            args = new Args();
            // Add the table to the records section
            args.record(cashFlow_Datasource);
            args.parmObject(element.getCashFlowObject());

            new MenuFunction(menuitemDisplayStr(projTransRevenue), MenuItemType::Display).run(args);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Transaction_Onaccount</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        // Invoke forms on click event
        void clicked()
        {
            Args args;

            args = new Args();
            // Add the table to the records section
            args.record(cashFlow_Datasource);
            args.parmObject(element.getCashFlowObject());

            new MenuFunction(menuitemDisplayStr(projTransOnAcc), MenuItemType::Display).run(args);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TimeMaterial</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        // Clear the variables on click event
        public void clicked()
        {
            super();

            element.clearTmpProjCashFlow();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FixedPrice</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        // Clear the variables on click event
        public void clicked()
        {
            super();

            element.clearTmpProjCashFlow();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Investment</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        // Clear the variables on click event
        public void clicked()
        {
            super();

            element.clearTmpProjCashFlow();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>InternalCost</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        // Clear the variables on click event
        public void clicked()
        {
            super();

            element.clearTmpProjCashFlow();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TimeProjects</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        // Clear the variables on click event
        public void clicked()
        {
            super();

            element.clearTmpProjCashFlow();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProjFromDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        // Clear the variables on modified
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.clearTmpProjCashFlow();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProjBreakDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        // Clear the variables on modified
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.clearTmpProjCashFlow();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProjToDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        // Clear the variables on modified
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.clearTmpProjCashFlow();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ActualBudgetDeviationSum</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        // When the Actual/Budget selection is modified
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.clearTmpProjCashFlow();

            deviationSum_CashInFlow.realValue(0.00);
            deviationSum_CashOutFlow.realValue(0.00);
            deviationSum_NetCashFlow.realValue(0.00);

            // The selection will change the display of the elements
            switch (actualBudgetDeviationSum.selection())
            {
                // Actual selected
                case ProjActualBudget::Actual:
                    element.setActual(true);
                    element.setBudget(false);
                    element.setSum(false);
                    element.setDeviation(false);
                    projBreakDate.visible(false);
                    paymentBreakDate.visible(false);
                    // Reset some elements to be edited
                    inclExpectedPayment.allowEdit(true);
                    inclPaidPayment.allowEdit(true);

                    if (inclExpectedPayment.value())
                    {
                        expectedPayDate.enabled(true);
                        expectedCostPayDate.enabled(true);
                    }
                    else
                    {
                        expectedPayDate.enabled(false);
                        expectedCostPayDate.enabled(false);
                    }

                    forecastModel.visible(false);
                    dataContinued.visible(false);
                    break;

                // Budget selected
                case ProjActualBudget::Budget:
                    element.setActual(false);
                    element.setBudget(true);
                    element.setSum(false);
                    element.setDeviation(false);
                    projBreakDate.visible(false);
                    paymentBreakDate.visible(false);
                    // Set some elements to be not allowed to be edited
                    inclExpectedPayment.allowEdit(false);
                    inclPaidPayment.allowEdit(false);
                    inclExpectedPayment.value(false);
                    inclPaidPayment.value(false);
                    expectedPayDate.enabled(false);
                    expectedCostPayDate.enabled(false);
                    minimumPayDate.dateValue(dateNull());
                    minimumSalesPayDate.dateValue(dateNull());
                    addDays.value(0);
                    addDaysToSalesDate.value(0);
                    forecastModel.visible(true);
                    dataContinued.visible(true);
                    break;

                // Sum selected
                case ProjActualBudget::Sum_:
                    element.setActual(true);
                    element.setBudget(true);
                    element.setSum(true);
                    element.setDeviation(true);
                    // Handle the special condition to handle the deviation on general tab
                    deviationHeader.visible(true);
                    deviationSum_CashInFlow.visible(true);
                    deviationSum_CashOutFlow.visible(true);
                    deviationSum_NetCashFlow.visible(true);
                    projBreakDate.visible(true);
                    paymentBreakDate.visible(true);
                    // Reset some elements to be edited
                    inclExpectedPayment.allowEdit(true);
                    inclPaidPayment.allowEdit(true);

                    if (inclExpectedPayment.value())
                    {
                        expectedPayDate.enabled(true);
                        expectedCostPayDate.enabled(true);
                    }
                    else
                    {
                        expectedPayDate.enabled(false);
                        expectedCostPayDate.enabled(false);
                    }
                    forecastModel.visible(true);
                    dataContinued.visible(true);
                    break;

                // Deviation selected
                case ProjActualBudget::Deviation:
                    element.setActual(true);
                    element.setBudget(true);
                    element.setSum(false);
                    element.setDeviation(true);
                    projBreakDate.visible(false);
                    paymentBreakDate.visible(false);
                    // Reset some elements to be edited
                    inclExpectedPayment.allowEdit(true);
                    inclPaidPayment.allowEdit(true);

                    if (inclExpectedPayment.value())
                    {
                        expectedPayDate.enabled(true);
                        expectedCostPayDate.enabled(true);
                    }
                    else
                    {
                        expectedPayDate.enabled(false);
                        expectedCostPayDate.enabled(false);
                    }
                    forecastModel.visible(true);
                    dataContinued.visible(true);
                    break;
            }

            // Clear the data source contents
            element.clearTmpProjCashFlow();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>IncludeSubprojects</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            element.clearTmpProjCashFlow();

            if (projTable)
            {
                cashFlow_DataSource_ds.linkFromProjTable(projTable);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>InclPaidPayment</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            element.clearTmpProjCashFlow();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>InclExpectedPayment</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        // Clear the variables on click
        public void clicked()
        {
            super();

            element.clearTmpProjCashFlow();

            // Disable the minimum dates and add days to payment
            if (inclExpectedPayment.value())
            {
                expectedPayDate.enabled(true);
                expectedCostPayDate.enabled(true);
            }
            else
            {
                expectedPayDate.enabled(false);
                expectedCostPayDate.enabled(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Hour</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        // Clear the variables on click
        public void clicked()
        {
            super();

            element.clearTmpProjCashFlow();

            if (hour.value())
            {
                transaction_Hour.enabled(true);
                forecast_Hour.enabled(true);
            }
            else
            {
                transaction_Hour.enabled(false);
                forecast_Hour.enabled(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Expenses</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        // Clear the variables on click
        public void clicked()
        {
            super();

            element.clearTmpProjCashFlow();

            if (expenses.value())
            {
                transaction_Expenses.enabled(true);
                forecast_Expenses.enabled(true);
            }
            else
            {
                transaction_Expenses.enabled(false);
                forecast_Expenses.enabled(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Item</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        // Clear the variables on click
        public void clicked()
        {
            super();

            element.clearTmpProjCashFlow();

            if (item.value())
            {
                transaction_Item.enabled(true);
                forecast_Item.enabled(true);
            }
            else
            {
                transaction_Item.enabled(false);
                forecast_Item.enabled(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Fee</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        // Clear the variables on click
        public void clicked()
        {
            super();

            element.clearTmpProjCashFlow();

            if (fee.value())
            {
                transaction_Fee.enabled(true);
                forecast_Fee.enabled(true);
            }
            else
            {
                transaction_Fee.enabled(false);
                forecast_Fee.enabled(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OnAccount</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        // Clear the variables on click
        public void clicked()
        {
            super();

            element.clearTmpProjCashFlow();

            if (onAccount.value())
            {
                transaction_OnAccount.enabled(true);
                forecast_OnAccount.enabled(true);
            }
            else
            {
                transaction_OnAccount.enabled(false);
                forecast_OnAccount.enabled(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PaymentFromDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        // Clear the variables on modified
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.clearTmpProjCashFlow();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PaymentBreakDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        // Clear the variables on modified
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.clearTmpProjCashFlow();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PaymentToDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        // Clear the variables on modified
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.clearTmpProjCashFlow();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ForecastModel</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AddDaysToSalesDate</Name>
				<Type>Integer</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        // Clear the variables on modified
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.clearTmpProjCashFlow();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MinimumSalesPayDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        // Clear the variables on modified
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.clearTmpProjCashFlow();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AddDays</Name>
				<Type>Integer</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        // Clear the variables on modified
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.clearTmpProjCashFlow();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MinimumPayDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        // Clear the variables on modified
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.clearTmpProjCashFlow();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>CashFlow_DataSource</Name>
			<Table>TmpProjCashFlow</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Actual_Cashinflow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Actual_Cashoutflow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Actual_Netcashflow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Budget_CashInFlow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Budget_CashOutFlow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Budget_NetCashFlow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetCashOutflowValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetNetCashFlowValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetSalesCashInflow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashOutflowValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashPaidHourValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashPaidIExpensesValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashPaidItemValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Deviation_CashInFlow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Deviation_CashOutFlow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Deviation_NetCashFlow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeviationCashOutflowValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeviationNetCashFlowValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeviationSalesCashInflow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoicedOnaccountValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoicedRevenueValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NetCashFlowValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesCashInflow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Sum_CashInFlow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Sum_CashOutFlow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Sum_NetCashFlow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SumCashOutflowValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SumDeviation_CashInFlow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SumNetCashFlowValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SumSalesCashInflow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>tmpCashFlowLink</Name>
			<Table>TmpProjCashFlowLink</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CategoryGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>categoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>custAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>itemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>projGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>projId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>projInvoiceProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>projWipId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Resource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMASubscriptionGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMASubscriptionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>sortingId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Worker</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS83369</Caption>
		<Pattern xmlns="">SimpleDetails-FastTabsContainer</Pattern>
		<PatternVersion xmlns="">1.4</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<StatusBarStyle xmlns="">Simple</StatusBarStyle>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>Direct_Calculate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>CommandButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS1085</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>Direct_MenuForecast</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>Forecast_Hour</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS5269</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>Forecast_Expenses</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS82720</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>Forecast_Item</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>LogisticsBasic</ConfigurationKey>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS14428</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>Forecast_Fee</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS9154</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>Forecast_Onaccount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS50040</Text>
									</AxFormControl>
								</Controls>
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS59002</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>Direct_MenuTransaction</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>Transaction_Hour</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS5269</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>Transaction_Expenses</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS82720</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>Transaction_Item</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>LogisticsBasic</ConfigurationKey>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS14428</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>Transaction_Fee</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS9154</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>Transaction_Onaccount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS50040</Text>
									</AxFormControl>
								</Controls>
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS28005</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1610612734</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ParametersTab</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ProjectTypes</Name>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>TimeMaterial</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS70232</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>FixedPrice</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS3237</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>Investment</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS78353</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>InternalCost</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS78366</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>TimeProjects</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS81306</Label>
									</AxFormControl>
								</Controls>
								<Caption>@SYS101796</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ProjectDate</Name>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ProjFromDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>TransDate</ExtendedDataType>
										<Label>@SYS24050</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ProjBreakDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>TransDate</ExtendedDataType>
										<Label>@SYS83773</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ProjToDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>TransDate</ExtendedDataType>
										<Label>@SYS80934</Label>
									</AxFormControl>
								</Controls>
								<Caption>@SYS54242</Caption>
								<FramePosition>Inside</FramePosition>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Data</Name>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ActualBudgetDeviationSum</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<EnumType>ProjActualBudget</EnumType>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>IncludeSubprojects</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1342177278</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS321414</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>InclPaidPayment</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS101813</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>InclExpectedPayment</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS101786</Label>
									</AxFormControl>
								</Controls>
								<Caption>@SYS7403</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>IncludedTransactionTypes</Name>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>Hour</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS5269</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>Expenses</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS82720</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>Item</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>LogisticsBasic</ConfigurationKey>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS14428</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>Fee</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS9154</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>OnAccount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS7659</Label>
									</AxFormControl>
								</Controls>
								<Caption>@SYS101797</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>PaymentDate</Name>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>PaymentFromDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>TransDate</ExtendedDataType>
										<Label>@SYS80661</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>PaymentBreakDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>TransDate</ExtendedDataType>
										<Label>@SYS83773</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>PaymentToDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>TransDate</ExtendedDataType>
										<Label>@SYS80934</Label>
									</AxFormControl>
								</Controls>
								<Caption>@SYS75144</Caption>
								<FramePosition>Inside</FramePosition>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>DataContinued</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ForecastModel</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>ProjForecastModelId</ExtendedDataType>
									</AxFormControl>
								</Controls>
								<Caption>@SYS55057</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ExpectedPayDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>AddDaysToSalesDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_AccountsReceivable:ProjCashFlow_AddDaysToSalesDate</HelpText>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS101788</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>MinimumSalesPayDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_AccountsReceivable:ProjCashFlow_MinimumSalesPayDate</HelpText>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>TransDate</ExtendedDataType>
										<Label>@SYS101789</Label>
									</AxFormControl>
								</Controls>
								<Caption>@SYS101798</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ExpectedCostPayDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>AddDays</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_AccountsReceivable:ProjCashFlow_AddDays</HelpText>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS101788</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>MinimumPayDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_AccountsReceivable:ProjCashFlow_MinimumPayDate</HelpText>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>TransDate</ExtendedDataType>
										<Label>@SYS101789</Label>
									</AxFormControl>
								</Controls>
								<Caption>@SYS101799</Caption>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@Proj:CalculateParameters</Caption>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>GeneralCashFlowGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>TabPageTabularFields</Pattern>
						<PatternVersion>1.0</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CashActualFlow</Name>
								<ElementPosition>1879048190</ElementPosition>
								<ExtendedStyle>tabularFields</ExtendedStyle>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>TableCaption</Name>
										<ExtendedStyle>tabularFields_title</ExtendedStyle>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Group</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<AllowUserSetup>No</AllowUserSetup>
										<ArrangeMethod>None</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ColumnTitles</Name>
										<ExtendedStyle>tabularFields_rowHeader</ExtendedStyle>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>CashFlowHeader</Name>
												<AllowEdit>No</AllowEdit>
												<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
												<Type>StaticText</Type>
												<FormControlExtension
													i:nil="true" />
												<Text></Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>ActualHeader</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
												<Type>StaticText</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS60110</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>BudgetHeader</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
												<Type>StaticText</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS15436</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>DeviationHeader</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
												<Type>StaticText</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS78417</Text>
											</AxFormControl>
										</Controls>
										<AllowUserSetup>No</AllowUserSetup>
										<ArrangeMethod>None</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>InflowsGroup</Name>
										<ExtendedStyle>tabularFields_row</ExtendedStyle>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>Cashflow_CashInflows</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>1073741823</ElementPosition>
												<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
												<FilterExpression>%1</FilterExpression>
												<Type>StaticText</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS101790</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>Actual_Cashinflow</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>Actual_Cashinflow</DataField>
												<DataSource>CashFlow_DataSource</DataSource>
												<Label>@Proj:ActualCashInflows</Label>
												<NoOfDecimals>-1</NoOfDecimals>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>Budget_CashInFlow</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>Budget_CashInFlow</DataField>
												<DataSource>CashFlow_DataSource</DataSource>
												<Label>@Proj:BudgetCashInflows</Label>
												<NoOfDecimals>-1</NoOfDecimals>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>DeviationSum_CashInFlow</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Label>@Proj:DeviationCashInflows</Label>
												<NoOfDecimals>-1</NoOfDecimals>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
										</Controls>
										<AllowUserSetup>No</AllowUserSetup>
										<ArrangeMethod>None</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>OutflowsGroup</Name>
										<ExtendedStyle>tabularFields_row</ExtendedStyle>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>Cashflow_CashOutflows</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>1610612734</ElementPosition>
												<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
												<FilterExpression>%1</FilterExpression>
												<Type>StaticText</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS101792</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>Actual_Cashoutflow</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>Actual_Cashoutflow</DataField>
												<DataSource>CashFlow_DataSource</DataSource>
												<Label>@Proj:ActualCashOutflows</Label>
												<NoOfDecimals>-1</NoOfDecimals>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>Budget_CashOutFlow</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>Budget_CashOutFlow</DataField>
												<DataSource>CashFlow_DataSource</DataSource>
												<Label>@Proj:BudgetCashOutflows</Label>
												<NoOfDecimals>-1</NoOfDecimals>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>DeviationSum_CashOutFlow</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Label>@Proj:DeviationCashOutflows</Label>
												<NoOfDecimals>-1</NoOfDecimals>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
										</Controls>
										<AllowUserSetup>No</AllowUserSetup>
										<ArrangeMethod>None</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>NetGroup</Name>
										<ExtendedStyle>tabularFields_row</ExtendedStyle>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>Cashflow_Netcashflow</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>1879048190</ElementPosition>
												<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
												<FilterExpression>%1</FilterExpression>
												<Type>StaticText</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS101794</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>Actual_Netcashflow</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>Actual_Netcashflow</DataField>
												<DataSource>CashFlow_DataSource</DataSource>
												<Label>@Proj:ActualNetCashFlows</Label>
												<NoOfDecimals>-1</NoOfDecimals>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>Budget_NetCashFlow</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>Budget_NetCashFlow</DataField>
												<DataSource>CashFlow_DataSource</DataSource>
												<Label>@Proj:BudgetNetCashFlows</Label>
												<NoOfDecimals>-1</NoOfDecimals>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>DeviationSum_NetCashFlow</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Label>@Proj:DeviationNetCashFlows</Label>
												<NoOfDecimals>-1</NoOfDecimals>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
										</Controls>
										<AllowUserSetup>No</AllowUserSetup>
										<ArrangeMethod>None</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>TableFooter</Name>
										<ExtendedStyle>tabularFields_rowFooter</ExtendedStyle>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<AllowUserSetup>No</AllowUserSetup>
										<ArrangeMethod>None</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>Restricted</AllowUserSetup>
								<ArrangeMethod>None</ArrangeMethod>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@Proj:GeneralCashFlow</Caption>
						<FastTabExpanded>Yes</FastTabExpanded>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>InflowTab</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>TabPageTabularFields</Pattern>
						<PatternVersion>1.0</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>InflowTable</Name>
								<ExtendedStyle>tabularFields</ExtendedStyle>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>InflowTitle</Name>
										<ExtendedStyle>tabularFields_title</ExtendedStyle>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Group</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<AllowUserSetup>No</AllowUserSetup>
										<ArrangeMethod>None</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>InflowColumnHeaders</Name>
										<ExtendedStyle>tabularFields_rowHeader</ExtendedStyle>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>InflowLabelHeader</Name>
												<AllowEdit>No</AllowEdit>
												<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
												<Type>StaticText</Type>
												<FormControlExtension
													i:nil="true" />
												<Text></Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>InflowAmount</Name>
												<AllowEdit>No</AllowEdit>
												<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
												<Type>StaticText</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@Proj:CashFlowAmount</Text>
											</AxFormControl>
										</Controls>
										<AllowUserSetup>No</AllowUserSetup>
										<ArrangeMethod>None</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>InflowInvoicedRevenueValue</Name>
										<ExtendedStyle>tabularFields_row</ExtendedStyle>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>InvoicedRevenueValueLabel</Name>
												<AllowEdit>No</AllowEdit>
												<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
												<Type>StaticText</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS55366</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>InvoicedRevenueValue</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>InvoicedRevenueValue</DataField>
												<DataSource>CashFlow_DataSource</DataSource>
												<Label>@SYS55366</Label>
												<NoOfDecimals>-1</NoOfDecimals>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
										</Controls>
										<AllowUserSetup>No</AllowUserSetup>
										<ArrangeMethod>None</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>InflowInvoicedOnaccountValue</Name>
										<ExtendedStyle>tabularFields_row</ExtendedStyle>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>InvoicedOnaccountValueLabel</Name>
												<AllowEdit>No</AllowEdit>
												<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
												<Type>StaticText</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS101805</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>InvoicedOnaccountValue</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>InvoicedOnaccountValue</DataField>
												<DataSource>CashFlow_DataSource</DataSource>
												<Label>@SYS101805</Label>
												<NoOfDecimals>-1</NoOfDecimals>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
										</Controls>
										<AllowUserSetup>No</AllowUserSetup>
										<ArrangeMethod>None</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>InflowFooter</Name>
										<ExtendedStyle>tabularFields_rowFooter</ExtendedStyle>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<AllowUserSetup>No</AllowUserSetup>
										<ArrangeMethod>None</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>Restricted</AllowUserSetup>
								<ArrangeMethod>None</ArrangeMethod>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS101800</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>OutflowTab</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>TabPageTabularFields</Pattern>
						<PatternVersion>1.0</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>OutflowTable</Name>
								<ExtendedStyle>tabularFields</ExtendedStyle>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>OutflowTitle</Name>
										<ExtendedStyle>tabularFields_title</ExtendedStyle>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Group</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<AllowUserSetup>No</AllowUserSetup>
										<ArrangeMethod>None</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>OutflowColumnHeaders</Name>
										<ExtendedStyle>tabularFields_rowHeader</ExtendedStyle>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>OutflowLabelHeader</Name>
												<AllowEdit>No</AllowEdit>
												<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
												<Type>StaticText</Type>
												<FormControlExtension
													i:nil="true" />
												<Text></Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>OutflowAmount</Name>
												<AllowEdit>No</AllowEdit>
												<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
												<Type>StaticText</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@Proj:CashFlowAmount</Text>
											</AxFormControl>
										</Controls>
										<AllowUserSetup>No</AllowUserSetup>
										<ArrangeMethod>None</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>OutflowCashPaidHourValue</Name>
										<ExtendedStyle>tabularFields_row</ExtendedStyle>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>CashPaidHourLabel</Name>
												<AllowEdit>No</AllowEdit>
												<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
												<Type>StaticText</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS101808</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>CashPaidHourValue</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>858993458</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>CashPaidHourValue</DataField>
												<DataSource>CashFlow_DataSource</DataSource>
												<Label>@SYS101808</Label>
												<NoOfDecimals>-1</NoOfDecimals>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
										</Controls>
										<AllowUserSetup>No</AllowUserSetup>
										<ArrangeMethod>None</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>OutflowCashPaidExpensesValue</Name>
										<ExtendedStyle>tabularFields_row</ExtendedStyle>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>CashPaidExpensesLabel</Name>
												<AllowEdit>No</AllowEdit>
												<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
												<Type>StaticText</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS101810</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>CashPaidIExpensesValue</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1288490187</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>CashPaidIExpensesValue</DataField>
												<DataSource>CashFlow_DataSource</DataSource>
												<Label>@SYS101810</Label>
												<NoOfDecimals>-1</NoOfDecimals>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
										</Controls>
										<AllowUserSetup>No</AllowUserSetup>
										<ArrangeMethod>None</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>OutflowCashPaidItemValue</Name>
										<ExtendedStyle>tabularFields_row</ExtendedStyle>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>CashPaidItemLabel</Name>
												<AllowEdit>No</AllowEdit>
												<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
												<Type>StaticText</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS101811</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>CashPaidItemValue</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ConfigurationKey>LogisticsBasic</ConfigurationKey>
												<ElementPosition>1717986916</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>CashPaidItemValue</DataField>
												<DataSource>CashFlow_DataSource</DataSource>
												<Label>@SYS101811</Label>
												<NoOfDecimals>-1</NoOfDecimals>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
										</Controls>
										<AllowUserSetup>No</AllowUserSetup>
										<ArrangeMethod>None</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>OutflowFooter</Name>
										<ExtendedStyle>tabularFields_rowFooter</ExtendedStyle>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<AllowUserSetup>No</AllowUserSetup>
										<ArrangeMethod>None</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>Restricted</AllowUserSetup>
								<ArrangeMethod>None</ArrangeMethod>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS101801</Caption>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>