<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailInstanceAttributeValues</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class RetailInstanceAttributeValues extends FormRun
{
    private Map attributeDefinitions;
    private RefRecId instanceRecId;
    private RefRecId currentAttrDefinitionRecId;
    private RefRecId currentAttributeValueRecId;
    private str currentAttributeName;
    private AttributeDataType currentAttributeDataType;
    private boolean isCurrentAttributeFixedList;
    private boolean hasBoundedValue;
    private anytype lowerBoundValue;
    private anytype upperBoundValue;
    private str currentUoMSymbol;
    private RefRecId currentUoMRecId;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new instance of RetailInstanceAttributeValues form.
    /// </summary>
    public void init()
    {
        TableId tableId;
        super();

        this.setVisibilityForAllControlValues(false);
        tableId = element.args().record().TableId;

        switch (tableId)
        {
            // This form currently can show and edit attributes on Customer and Sales Order.
            case tableNum(CustTable):
                element.design().caption("@Retail:RetailInstanceCustAttrTitle");
                break;
            case tableNum(SalesTable):
                element.design().caption("@Retail:RetailInstanceSalesOrderAttrTitle");
                break;
            case tableNum(SalesLine):
                element.design().caption("@Retail:RetailInstanceSalesLineAttrTitle");
                break;
            case tableNum(RetailPricingSimulatorSalesTransaction):
                element.design().caption("@RetailPricing:RetailInstancePriceSimulatorSalesTransactionAttrTitle");
                break;
            case tableNum(RetailPricingSimulatorSalesLine):
                element.design().caption("@RetailPricing:RetailInstancePriceSimulatorSalesLineAttrTitle");
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Methods to be executed when user clicks different record on attribute grid.
    /// </summary>
    public void selectionChanged()
    {
        this.setVisibilityForAllControlValues(false);
        this.populateValueOnSelectedRow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save the attribute value.
    /// </summary>
    public void saveAttributeValue()
    {
        // No need to save if there is no current attribute definition record identifier.
        if (currentAttrDefinitionRecId == 0)
        {
            return;
        }

        if (currentAttributeValueRecId > 0)
        {
            // Attribute value record identifier found, save value with existing record identifier.
            this.updateAttributeValue();
        }
        else
        {
            // Attribute value record identifier is not found, save value by inserting new record identifier.
            this.insertAttributeValue();
        }

        // update the attribute values grid form
        RetailInstanceAttributeValuesTmp::refreshAttributeValue(currentAttrDefinitionRecId, instanceRecId);

        // refresh the UI form.
        RetailInstanceAttributeValuesTmp_ds.reread();
        RetailInstanceAttributeValuesTmp_ds.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value to be written to the table.
    /// </summary>
    /// <param name = "_currentValue">The value to be validated.</param>
    /// <returns>True if validation successful, false otherwise.</returns>
    public boolean validateValue(anytype _currentValue)
    {
        boolean result = true;

        if (hasBoundedValue)
        {
            str errorMessage = RetailAttributeHelper::validateBoundaryValue(
                _currentValue, currentAttributeDataType, lowerBoundValue, upperBoundValue, currentAttributeName);

            if (errorMessage != '')
            {
                warning(errorMessage);
                result = false;
            }
        }
        
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save new attribute value to the database.
    /// This value is not exists so a new row will be inserted to the attribute value table.
    /// </summary>
    protected void insertAttributeValue()
    {
        EcoResTextValue ecoResTextValue;
        EcoResBooleanValue ecoResBooleanValue;
        EcoResIntValue ecoResIntValue;
        EcoResFloatValue ecoResFloatValue;
        EcoResDateTimeValue ecoResDateTimeValue;
        EcoResAttributeValue ecoResAttributeValue;
        RefRecId attrValueRecId;

        ttsbegin;

        switch (currentAttributeDataType)
        {
            case AttributeDataType::Text:
                ecoResTextValue.initValue();

                if (isCurrentAttributeFixedList)
                {
                    // if attribute is fixed list, get the value from combo box.
                    ecoResTextValue.TextValue = enumerationValueField.valueStr();
                }
                else
                {
                    // otherwise, get value from textfield.
                    ecoResTextValue.TextValue = textValueField.text();
                }

                ecoResTextValue.insert();
                attrValueRecId = ecoResTextValue.RecId;
                break;
            case AttributeDataType::Integer:
                ecoResIntValue.initValue();
                ecoResIntValue.IntValue = intValueField.value();
                ecoResIntValue.IntUnitOfMeasure = currentUoMRecId;
                ecoResIntValue.insert();
                attrValueRecId = ecoResIntValue.RecId;
                break;
            case AttributeDataType::Decimal:
                ecoResFloatValue.initValue();
                ecoResFloatValue.FloatValue = decimalValueField.realValue();
                ecoResFloatValue.FloatUnitOfMeasure = currentUoMRecId;
                ecoResFloatValue.insert();
                attrValueRecId = ecoResFloatValue.RecId;
                break;
            case AttributeDataType::DateTime:
                ecoResDateTimeValue.initValue();
                ecoResDateTimeValue.DateTimeValue = dateTimeField.dateTimeValue();
                ecoResDateTimeValue.insert();
                attrValueRecId = ecoResDateTimeValue.RecId;
                break;
            case AttributeDataType::TrueFalse:
                ecoResBooleanValue.initValue();
                ecoResBooleanValue.BooleanValue = booleanValueCheckBox.value() == 1;
                ecoResBooleanValue.insert();
                attrValueRecId = ecoResBooleanValue.RecId;
                break;
        }

        // insert data to EcoResAttributeValue table.
        ecoResAttributeValue.initValue();
        ecoResAttributeValue.InstanceValue = instanceRecId;
        ecoResAttributeValue.Attribute = currentAttrDefinitionRecId;
        ecoResAttributeValue.Value = attrValueRecId;
        ecoResAttributeValue.insert();

        ttscommit;

        // Save the newly created value record identifier.
        currentAttributeValueRecId = attrValueRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save existing attribute value that is currently selected to the database.
    /// Since this is existing value, the record identifier should exists.
    /// </summary>
    protected void updateAttributeValue()
    {
        EcoResTextValue ecoResTextValue;
        EcoResBooleanValue ecoResBooleanValue;
        EcoResIntValue ecoResIntValue;
        EcoResFloatValue ecoResFloatValue;
        EcoResDateTimeValue ecoResDateTimeValue;
        EcoResAttributeValue ecoResAttributeValue;
        anytype newValue;

        ttsbegin;

        switch (currentAttributeDataType)
        {
            case AttributeDataType::TrueFalse:
                newValue = booleanValueCheckBox.value() == 1;
                update_recordset ecoResBooleanValue
                    setting BooleanValue = newValue
                    where ecoResBooleanValue.RecId == currentAttributeValueRecId;
                break;
            case AttributeDataType::Text:

                if (isCurrentAttributeFixedList)
                {
                    newValue = enumerationValueField.valueStr();
                }
                else
                {
                    newValue = textValueField.text();
                }

                select count(RecId) from ecoResAttributeValue
                    where ecoResAttributeValue.Value == currentAttributeValueRecId;

                // If existing EcoResTextValue is used by other attributes, create new EcoResTexValue and update EcoResAttributeValue with this value 
                // else update existing EcoResTextValue record with new value.
                if (ecoResAttributeValue.RecId > 1)
                {
                    select firstOnly ecoResTextValue 
                        where ecoResTextValue.TextValue == newValue;

                    // Insert EcoResTextValue if it doesn't exist.
                    if (!ecoResTextValue)
                    {
                        ecoResTextValue.initValue();
                        ecoResTextValue.TextValue = newValue;
                        ecoResTextValue.insert();
                    }

                    update_recordset ecoResAttributeValue
                        setting Value = ecoResTextValue.RecId
                        where ecoResAttributeValue.InstanceValue == instanceRecId
                        && ecoResAttributeValue.Attribute == currentAttrDefinitionRecId;

                    // Save the newly created value record identifier.
                    currentAttributeValueRecId = ecoResTextValue.RecId;
                }
                else 
                {
                    update_recordset ecoResTextValue
                    setting TextValue = newValue
                    where ecoResTextValue.RecId == currentAttributeValueRecId;
                }
                break;
            case AttributeDataType::Integer:
                newValue = intValueField.value();
                update_recordset ecoResIntValue
                    setting IntValue = newValue, IntUnitOfMeasure = currentUoMRecId
                    where ecoResIntValue.RecId == currentAttributeValueRecId;
                break;
            case AttributeDataType::Decimal:
                newValue = decimalValueField.realValue();
                update_recordset ecoResFloatValue
                    setting FloatValue = newValue, FloatUnitOfMeasure = currentUoMRecId
                    where ecoResFloatValue.RecId == currentAttributeValueRecId;
                break;
            case AttributeDataType::DateTime:
                newValue = dateTimeField.dateTimeValue();
                update_recordset ecoResDateTimeValue
                    setting DateTimeValue = newValue
                    where ecoResDateTimeValue.RecId == currentAttributeValueRecId;
                break;
            default:
                break;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateValueOnSelectedRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate existing value (if any) on the selected row or the specified row.
    /// </summary>
    /// <param name = "_specifyAttrDefinitionRecId">The specified row RecId.</param>
    protected void populateValueOnSelectedRow(RefRecId _specifyAttrDefinitionRecId = 0)
    {
        EcoResAttributeValue erav;
        EcoResValue ecoResValue;
        Map attributeDefinitionDetails;     
        anytype defaultValue;
        RefRecId tempCurrentAttrDefinitionRecId;

        if (attributeDefinitions.elements() == 0)
        {
            // No need to populate anything if there is no attributes associated with the attribute group.
            return;
        }

        currentAttrDefinitionRecId = _specifyAttrDefinitionRecId ? _specifyAttrDefinitionRecId : RetailInstanceAttributeValuesTmp.AttributeRecId;
        attributeDefinitionDetails = attributeDefinitions.lookup(currentAttrDefinitionRecId);
        currentAttributeDataType = attributeDefinitionDetails.lookup(RetailAttributeHelper::AttributeDefinitionTypeKey);
        isCurrentAttributeFixedList = attributeDefinitionDetails.lookup(RetailAttributeHelper::AttributeDefinitionIsFixedListKey);
        hasBoundedValue = attributeDefinitionDetails.lookup(RetailAttributeHelper::AttributeDefinitionTypeBoundedRecIdKey) > 0;
        currentAttributeName = attributeDefinitionDetails.lookup(RetailAttributeHelper::AttributeDefinitionNameKey);
        currentUoMRecId = attributeDefinitionDetails.lookup(RetailAttributeHelper::AttributeDefinitionUoMRecIdKey);
        currentUoMSymbol = attributeDefinitionDetails.lookup(RetailAttributeHelper::AttributeDefinitionUoMSymbolKey);

        //Get the attribute's rec id which is imported through DMF
        //Retail attributes form should display imported attribute values if there are any
        //else display attribute definition values/user setup values
        tempCurrentAttrDefinitionRecId = RetailInstanceAttributeValuesTmp::getImportedAttribRecId(currentAttrDefinitionRecId,instanceRecId);   
        currentAttrDefinitionRecId = tempCurrentAttrDefinitionRecId ? tempCurrentAttrDefinitionRecId :currentAttrDefinitionRecId; 

        ecoResValue.disableCache(true);  // Disable cache to avoid issues where table is updated via Data Entity.
        select firstonly RecId from ecoResValue
            order by ecoResValue.RecId
            join erav
        where ecoResValue.RecId == erav.Value
        && erav.Attribute == currentAttrDefinitionRecId
        && erav.InstanceValue == instanceRecId;

        defaultValue = this.setBoundValuesFromAttributeDataType(ecoResValue);

        currentAttributeValueRecId = ecoResValue.RecId;

        // Autosave nonexisting value / value not yet saved on table,
        // if they have default value.
        if (ecoResValue.RecId == 0 && defaultValue != null)
        {
            this.saveAttributeValue();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBoundValuesFromAttributeDataType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets upper and lower bound fields based on <c>AttributeDataType</c>
    /// </summary>
    /// <param name = "_ecoResValue">
    ///     An attribute type table buffer.
    /// </param>
    /// <returns>
    ///     Attribute definition details.
    /// </returns>
    protected anytype setBoundValuesFromAttributeDataType(EcoResValue _ecoResValue)
    {
        anytype defaultValue;
        EcoResBooleanValue ecoResBooleanValue;
        EcoResTextValue ecoResTextValue;
        EcoResDateTimeValue ecoResDateTimeValue;
        EcoResIntValue ecoResIntValue;
        Set attrEnumerationDetailsSet;
        EcoResFloatValue ecoResFloatValue;
        Map attributeDefinitionDetails = attributeDefinitions.lookup(currentAttrDefinitionRecId);
        SetEnumerator attrEnumerationDetailsEnumerator;
        Map attrEnumerationValueMap;

        _ecoResValue.disableCache(true); // Disable cache to avoid issues where table is updated via Data Entity.
        switch (currentAttributeDataType)
        {
            case AttributeDataType::TrueFalse:
                defaultValue = attributeDefinitionDetails.lookup(RetailAttributeHelper::AttributeDefinitionDefaultBooleanValueKey);
                ecoResBooleanValue.disableCache(true); // Disable cache to avoid issues where table is updated via Data Entity.
                select firstonly BooleanValue from ecoResBooleanValue
                    where ecoResBooleanValue.RecId == _ecoResValue.RecId;
                booleanValueCheckBox.value(ecoResBooleanValue.RecId > 0 ? ecoResBooleanValue.BooleanValue : defaultValue);
                booleanValueCheckBox.visible(true);
                break;
            case AttributeDataType::Text:
                defaultValue = attributeDefinitionDetails.lookup(RetailAttributeHelper::AttributeDefinitionDefaultTextValueKey);
                ecoResTextValue.disableCache(true); // Disable cache to avoid issues where table is updated via Data Entity.
                select firstonly TextValue from ecoResTextValue
                    where ecoResTextValue.RecId == _ecoResValue.RecId;

                if (!isCurrentAttributeFixedList)
                {
                    textValueField.text(ecoResTextValue.RecId > 0 ? ecoResTextValue.TextValue : defaultValue);
                    textValueField.visible(true);
                }
                else
                {
                    enumerationValueField.clear();

                    attrEnumerationDetailsSet = attributeDefinitionDetails.lookup(RetailAttributeHelper::AttributeDefinitionEnumerationValuesKey);
                    attrEnumerationDetailsEnumerator = attrEnumerationDetailsSet.getEnumerator();

                    while (attrEnumerationDetailsEnumerator.moveNext())
                    {
                        // Add possible enumeration values on dropdown UI.
                        attrEnumerationValueMap = attrEnumerationDetailsEnumerator.current();
                        enumerationValueField.add(attrEnumerationValueMap.lookup(RetailAttributeHelper::AttrEnumDefinitionTextValueKey));
                    }

                    enumerationValueField.selectText(ecoResTextValue.RecId > 0 ? ecoResTextValue.TextValue : defaultValue);
                    enumerationValueField.visible(true);
                }

                break;
            case AttributeDataType::Integer:
                defaultValue = attributeDefinitionDetails.lookup(RetailAttributeHelper::AttributeDefinitionDefaultIntValueKey);
                lowerBoundValue = attributeDefinitionDetails.lookup(RetailAttributeHelper::AttributeDefinitionLowerBoundIntValueKey);
                upperBoundValue = attributeDefinitionDetails.lookup(RetailAttributeHelper::AttributeDefinitionUpperBoundIntValueKey);
                ecoResIntValue.disableCache(true); // Disable cache to avoid issues where table is updated via Data Entity.
                select firstonly IntValue from ecoResIntValue
                    where ecoResIntValue.RecId == _ecoResValue.RecId;
                intValueField.value(ecoResIntValue.RecId > 0 ? ecoResIntValue.IntValue : defaultValue);
                intUoM.text(currentUoMSymbol);
                intGroup.visible(true);
                break;
            case AttributeDataType::Decimal:
                defaultValue = attributeDefinitionDetails.lookup(RetailAttributeHelper::AttributeDefinitionDefaultFloatValueKey);
                lowerBoundValue = attributeDefinitionDetails.lookup(RetailAttributeHelper::AttributeDefinitionLowerBoundFloatValueKey);
                upperBoundValue = attributeDefinitionDetails.lookup(RetailAttributeHelper::AttributeDefinitionUpperBoundFloatValueKey);
                ecoResFloatValue.disableCache(true); // Disable cache to avoid issues where table is updated via Data Entity.
                select firstonly FloatValue from ecoResFloatValue
                    where ecoResFloatValue.RecId == _ecoResValue.RecId;
                decimalValueField.realValue(ecoResFloatValue.RecId > 0 ? ecoResFloatValue.FloatValue : defaultValue);
                decimalUoM.text(currentUoMSymbol);
                decimalGroup.visible(true);
                break;
            case AttributeDataType::DateTime:
                defaultValue = attributeDefinitionDetails.lookup(RetailAttributeHelper::AttributeDefinitionDefaultDateTimeValueKey);
                lowerBoundValue = attributeDefinitionDetails.lookup(RetailAttributeHelper::AttributeDefinitionLowerBoundDateTimeValueKey);
                upperBoundValue = attributeDefinitionDetails.lookup(RetailAttributeHelper::AttributeDefinitionUpperBoundDateTimeValueKey);
                ecoResDateTimeValue.disableCache(true); // Disable cache to avoid issues where table is updated via Data Entity.
                select firstonly DateTimeValue from ecoResDateTimeValue
                    where ecoResDateTimeValue.RecId == _ecoResValue.RecId;
                dateTimeField.dateTimeValue(ecoResDateTimeValue.RecId > 0 ? ecoResDateTimeValue.DateTimeValue : defaultValue);
                dateTimeField.visible(true);
                break;
        }

        return defaultValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateValueOnUnassignedRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate existing value (if any) on the unassigned row.
    /// </summary>
    private void populateValueOnUnassignedRow()
    {
        MapEnumerator attrDefinitionEnumerator = attributeDefinitions.getEnumerator();

        RefRecId currentAttrDefinitionRecIdCopy = currentAttrDefinitionRecId;
        while (attrDefinitionEnumerator.moveNext())
        {
            Map attributeDefinitionDetails = attributeDefinitions.lookup(attrDefinitionEnumerator.currentKey());
            RefRecId attrDefinitionRecId = attributeDefinitionDetails.lookup(RetailAttributeHelper::AttributeDefinitionRecIdKey);
            RetailInstanceAttributeValuesTmp riavRecId;
            RetailInstanceAttributeValuesTmp riav;

            select firstonly RecId from riavRecId
                where riavRecId.AttributeRecId == attrDefinitionRecId;

            select riav
                where riav.RecId == riavRecId.RecId;

            if (riav && !riav.AttributeValueString)
            {
                this.populateValueOnSelectedRow(riav.AttributeRecId);
            }            
        }
        currentAttrDefinitionRecId = currentAttrDefinitionRecIdCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForAllControlValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visible for all control values (text, datetime, boolean, int, decimal).
    /// </summary>
    /// <param name = "_visible">Boolean flag to set the controls visible or not visible.</param>
    private void setVisibilityForAllControlValues(boolean _visible)
    {
        booleanValueCheckBox.visible(_visible);
        textValueField.visible(_visible);
        intGroup.visible(_visible);
        dateTimeField.visible(_visible);
        decimalGroup.visible(_visible);
        enumerationValueField.visible(_visible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the referenced <c>RetailInstanceAttributeValuesTmp</c> table records on form close.
    /// </summary>
    public void close()
    {
        RetailInstanceAttributeValuesTmp riav;

        super();

        if (instanceRecId)
        {
            container attrRef = riav.getAttributeReferenceFromAll(instanceRecId);

            delete_from riav
            where riav.RefRecId == any2Int64(conpeek(attrRef, 2))
                && riav.RefTableId == any2Int(conpeek(attrRef, 1));
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>EcoResAttribute</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initialize a new instance of RetailInstanceAttributeValuesTmp data source.
        /// </summary>
        public void init()
        {
            Common commonTable;

            super();

            if (!isConfigurationkeyEnabled(configurationKeyNum(Retail)))
            {
                return;
            }

            commonTable = element.args().record();

            switch (commonTable.TableId)
            {
                case tableNum(CustTable):
                    this.initCustomerAttributes(commonTable);
                    break;
                case tableNum(SalesTable):
                    if (RetailSalesOrderAttributesFetchesFromCallCenterChannelToggle::instance().IsEnabled())
                    {
                        this.initSalesOrderAttributesFromSalesChannel(commonTable);
                    }
                    else
                    {
                        this.initSalesOrderAttributes(commonTable);
                    }
                    break;
                case tableNum(SalesLine):
                    if (RetailSalesOrderAttributesFetchesFromCallCenterChannelToggle::instance().IsEnabled())
                    {
                        this.initSalesLineAttributesFromSalesChannel(commonTable);
                    }
                    else
                    {
                        this.initSalesLineAttributes(commonTable);
                    }
                    break;
                case tableNum(RetailPricingSimulatorSalesTransaction):
                    this.initRetailPricingSimulatorSalesTransactionAttributes(commonTable);
                    break;
                case tableNum(RetailPricingSimulatorSalesLine):
                    this.initRetailPricingSimulatorSalesLineAttributes(commonTable);
                    break;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        /// <summary>
        /// Method called when user selection of a row is changed.
        /// </summary>
        public void selectionChanged()
        {
            super();
            element.selectionChanged();
        }

]]></Source>
					</Method>
					<Method>
						<Name>initCustomerAttributes</Name>
						<Source><![CDATA[
        /// <summary>
        /// Instiantiate attributes on a customer.
        /// </summary>
        /// <param name = "_customerTable">The row of the CustTable table.</param>
        private void initCustomerAttributes(CustTable _customerTable)
        {
            RetailParameters rp;
            CustomerInstanceValue civ;
            Set attributeGroupRecIdSet = new Set(Types::Int64);

            // For attributes on customer, attribute group is on the RetailParameters table
            // column CustomerAttributeGroup.
            select firstonly CustomerAttributeGroup from rp
                where rp.DataAreaId == _customerTable.DataAreaId;

            attributeGroupRecIdSet.add(rp.CustomerAttributeGroup);

            // Get the customer instance value
            civ = CustomerInstanceValue::findOrCreate(_customerTable.AccountNum, _customerTable.DataAreaId);

            this.initAttributeValues(attributeGroupRecIdSet, civ.RecId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>initSalesOrderAttributes</Name>
						<Source><![CDATA[
        /// <summary>
        /// Instantiate attributes on a sales order.
        /// This method is kept for backward compatibility and the initSalesOrderAttributesFromSalesChannel method should be used.
        /// </summary>
        /// <param name = "_salesTable">The row of the SalesTable table.</param>
        private void initSalesOrderAttributes(SalesTable _salesTable)
        {
            RetailSalesTableInstanceValue rstiv;
            RetailChannelAttributeGroup rcag;
            RetailChannelTable rct;
            Set channelAttrGroupSet = new Set(Types::Int64);

            // Get the sales table instance value
            rstiv = RetailSalesTableInstanceValue::findOrCreate(_salesTable.SalesId, _salesTable.DataAreaId);

            // Get the attribute group identifiers associated with
            // sales table InventLocationId.
            while select AttributeGroup from rcag
                join rct
                where rcag.Channel == rct.RecId
                && rct.InventLocation == _salesTable.InventLocationId
                && rcag.Modifier == RetailChannelAttributeModifier::SalesOrder
                && (
                    rcag.AttributeAppliesToModifier == RetailAttributeAppliesToModifier::Default
                    || rcag.AttributeAppliesToModifier == RetailAttributeAppliesToModifier::Header
                )
            {
                if (!channelAttrGroupSet.in(rcag.AttributeGroup))
                {
                    // Check for duplicate item before inserting to Set collection.
                    channelAttrGroupSet.add(rcag.AttributeGroup);
                }
            }

            this.initAttributeValues(channelAttrGroupSet, rstiv.RecId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>initSalesOrderAttributesFromSalesChannel</Name>
						<Source><![CDATA[
        /// <summary>
        /// Instantiate attributes on a sales order.
        /// </summary>
        /// <param name = "_salesTable">The row of the SalesTable table.</param>
        private void initSalesOrderAttributesFromSalesChannel(SalesTable _salesTable)
        {
            RetailSalesTableInstanceValue rstiv;
            RetailChannelAttributeGroup rcag;
            RetailChannelTable rct;
            Set channelAttrGroupSet = new Set(Types::Int64);

            // Get the sales table instance value
            rstiv = RetailSalesTableInstanceValue::findOrCreate(_salesTable.SalesId, _salesTable.DataAreaId);

            // Get the attribute group identifiers associated with
            // sales table Retail channel.
            while select AttributeGroup from rcag
                join rct
                where rcag.Channel == rct.RecId
                && rct.RecId == _salesTable.RetailChannelTable
                && rcag.Modifier == RetailChannelAttributeModifier::SalesOrder
                && (rcag.AttributeAppliesToModifier == RetailAttributeAppliesToModifier::Default
                    || rcag.AttributeAppliesToModifier == RetailAttributeAppliesToModifier::Header)
            {
                if (!channelAttrGroupSet.in(rcag.AttributeGroup))
                {
                    // Check for duplicate item before inserting to Set collection.
                    channelAttrGroupSet.add(rcag.AttributeGroup);
                }
            }

            this.initAttributeValues(channelAttrGroupSet, rstiv.RecId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>initSalesLineAttributes</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initialize attributes on sales lines.
        /// This method is kept for backward compatibility and the initSalesLineAttributesFromSalesChannel method should be used.
        /// </summary>
        /// <param name = "_salesLine">The sales line record.</param>
        private void initSalesLineAttributes(SalesLine _salesLine)
        {
            RetailSalesTableInstanceValue rstiv;
            RetailChannelAttributeGroup rcag;
            RetailChannelTable rct;
            InventDim inventDim;
            Set channelAttrGroupSet = new Set(Types::Int64);

            // Get the sales table instance value
            rstiv = RetailSalesTableInstanceValue::findOrCreate(_salesLine.SalesId, _salesLine.DataAreaId, _salesLine.LineNum);

            // Get the attribute group identifiers associated with
            // sales table InventLocationId.
            while select AttributeGroup from rcag
                join rct
                where rcag.Channel == rct.RecId
                join inventDim
                where inventDim.inventDimId == _salesLine.InventDimId
                && rct.InventLocation == inventDim.InventLocationId
                && rcag.Modifier == RetailChannelAttributeModifier::SalesOrder
                && (
                    rcag.AttributeAppliesToModifier == RetailAttributeAppliesToModifier::Default
                    || rcag.AttributeAppliesToModifier == RetailAttributeAppliesToModifier::Lines
                )
            {
                if (!channelAttrGroupSet.in(rcag.AttributeGroup))
                {
                    // Check for duplicate attribute group before inserting to collection.
                    channelAttrGroupSet.add(rcag.AttributeGroup);
                }
            }

            this.initAttributeValues(channelAttrGroupSet, rstiv.RecId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>initSalesLineAttributesFromSalesChannel</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initialize attributes on sales lines.
        /// </summary>
        /// <param name = "_salesLine">The sales line record.</param>
        private void initSalesLineAttributesFromSalesChannel(SalesLine _salesLine)
        {
            RetailSalesTableInstanceValue rstiv;
            RetailChannelAttributeGroup rcag;
            RetailChannelTable rct;
            Set channelAttrGroupSet = new Set(Types::Int64);

            // Get the sales table instance value
            rstiv = RetailSalesTableInstanceValue::findOrCreate(_salesLine.SalesId, _salesLine.DataAreaId, _salesLine.LineNum);

            // Get the attribute group identifiers associated with
            // sales table Retail channel.
            while select AttributeGroup from rcag
                join rct
                where rcag.Channel == rct.RecId
                && rct.RecId == _salesLine.salesTable().RetailChannelTable
                && rcag.Modifier == RetailChannelAttributeModifier::SalesOrder
                && (rcag.AttributeAppliesToModifier == RetailAttributeAppliesToModifier::Default
                    || rcag.AttributeAppliesToModifier == RetailAttributeAppliesToModifier::Lines)
            {
                if (!channelAttrGroupSet.in(rcag.AttributeGroup))
                {
                    // Check for duplicate attribute group before inserting to collection.
                    channelAttrGroupSet.add(rcag.AttributeGroup);
                }
            }

            this.initAttributeValues(channelAttrGroupSet, rstiv.RecId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>initAttributeValues</Name>
						<Source><![CDATA[
        /// <summary>
        /// Instantiate list of attribute definitions and atttribute values.
        /// </summary>
        /// <param name = "_attributeGroupSet">Collection of attribute group identifiers.</param>
        /// <param name = "_instanceRecId">Record identifier of instance value.</param>
        protected void initAttributeValues(Set _attributeGroupSet, RefRecId _instanceRecId)
        {
            SetEnumerator attrGroupSetEnumerator = _attributeGroupSet.getEnumerator();
            instanceRecId = _instanceRecId;
            RefRecId attrDefinitionRecId;

            // Get list of attribute definitions.
            attributeDefinitions = RetailAttributeHelper::getAttributeDefinitionsByAttributeGroups(_attributeGroupSet);

            // Instantiate the form table to fill attribute definitions and attribute values.
            RetailInstanceAttributeValuesTmp::initAttributeValues(attributeDefinitions, _instanceRecId);
            element.populateValueOnUnassignedRow();
        }

]]></Source>
					</Method>
					<Method>
						<Name>initRetailPricingSimulatorSalesTransactionAttributes</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initialize attributes on price simulator sales transaction.
        /// </summary>
        /// <param name = "_transaction">The price simulator sales transaction record.</param>
        private void initRetailPricingSimulatorSalesTransactionAttributes(RetailPricingSimulatorSalesTransaction _transaction)
        {
            RetailPricingSimulatorInstanceValue instanceValue = RetailPricingSimulatorInstanceValue::findOrCreate(_transaction.RecId);
            this.initAttributeValuesByPricingPropertyLevel(RetailPricingPropertyLevel::Header, instanceValue.RecId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>initRetailPricingSimulatorSalesLineAttributes</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initialize attributes on price simulator sales line.
        /// </summary>
        /// <param name = "_line">The price simulator sales line record.</param>
        private void initRetailPricingSimulatorSalesLineAttributes(RetailPricingSimulatorSalesLine _line)
        {
            RetailPricingSimulatorInstanceValue instanceValue = RetailPricingSimulatorInstanceValue::findOrCreate(_line.RetailPricingSimulatorSalesTransaction, _line.SalesLineNum);
            this.initAttributeValuesByPricingPropertyLevel(RetailPricingPropertyLevel::Line, instanceValue.RecId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>initAttributeValuesByPricingPropertyLevel</Name>
						<Source><![CDATA[
        /// <summary>
        /// Instantiate list of attribute definitions and atttribute values for pricing properties.
        /// </summary>
        /// <param name = "_propertyLevel">The pricing property level.</param>
        /// <param name = "_instanceRecId">Record identifier of instance value.</param>
        protected void initAttributeValuesByPricingPropertyLevel(RetailPricingPropertyLevel _propertyLevel, RefRecId _instanceRecId)
        {
            instanceRecId = _instanceRecId;

            // Get list of attribute definitions.
            attributeDefinitions = RetailPricingSimulatorAttributeHelper::getAttributeDefinitionsByPricingPropertyLevel(_propertyLevel);

            // Instantiate the form table to fill attribute definitions and attribute values.
            RetailInstanceAttributeValuesTmp::initAttributeValues(attributeDefinitions, _instanceRecId);
            element.populateValueOnUnassignedRow();
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// Filters the attributes in the form.
        /// The attributes created from either sales order, sales line, customer, price simulator forms.
        /// </summary>
        public void executeQuery()
        {
            if (instanceRecId)
            {
                QueryBuildDataSource qbds;
                RetailInstanceAttributeValuesTmp riavt;
                container attrRef = riavt.getAttributeReferenceFromAll(instanceRecId);

                qbds = RetailInstanceAttributeValuesTmp_ds.query().dataSourceTable(tableNum(RetailInstanceAttributeValuesTmp));
                qbds.addRange(fieldNum(RetailInstanceAttributeValuesTmp, RefRecId)).value(queryValue(any2Int64(conpeek(attrRef, 2))));
                qbds.addRange(fieldNum(RetailInstanceAttributeValuesTmp, RefTableId)).value(queryValue(any2Int(conpeek(attrRef, 1))));
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>EcoResAttributeType</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        /// Query initialization.
        /// </summary>
        public void init()
        {
            QueryBuildDataSource qbds;

            super();

            qbds = EcoResAttributeType_ds.query().dataSourceTable(tableNum(EcoResAttributeType));
            qbds.addLink(fieldNum(EcoResAttribute, AttributeType), fieldNum(EcoResAttributeType, RecId));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>RetailInstanceAttributeValuesTmp</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        /// Query initialization.
        /// </summary>
        public void init()
        {
            QueryBuildDataSource qbds;

            super();

            qbds = RetailInstanceAttributeValuesTmp_ds.query().dataSourceTable(tableNum(RetailInstanceAttributeValuesTmp));
            qbds.addLink(fieldNum(EcoResAttribute, RecId), fieldNum(RetailInstanceAttributeValuesTmp, AttributeRecId));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>BooleanValueCheckBox</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets the value whether the control is modified.
        /// </summary>
        /// <returns>True if control is modified, false otherwise.</returns>
        public boolean modified()
        {
            boolean ret;
        
            ret = super();

            if (ret)
            {
                element.saveAttributeValue();
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TextValueField</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets the value whether the control is modified.
        /// </summary>
        /// <returns>True if control is modified, false otherwise.</returns>
        public boolean modified()
        {
            boolean ret;
        
            ret = super();

            if (ret)
            {
                element.saveAttributeValue();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>IntValueField</Name>
				<Type>Integer</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets the value whether the control is modified.
        /// </summary>
        /// <returns>True if control is modified, false otherwise.</returns>
        public boolean modified()
        {
            boolean ret;
        
            ret = super();

            if (ret)
            {
                element.saveAttributeValue();
            }
        
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Validates the value.
        /// </summary>
        /// <returns>True if value is valid, false otherwise.</returns>
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                // If base class validation success, custom  validate the value on this form.
                ret = element.validateValue(this.value());
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DateTimeField</Name>
				<Type>DateTime</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets the value whether the control is modified.
        /// </summary>
        /// <returns>True if control is modified, false otherwise.</returns>
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
            if (ret)
            {
                element.saveAttributeValue();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Validates the value.
        /// </summary>
        /// <returns>True if value is valid, false otherwise.</returns>
        public boolean validate()
        {
            boolean ret;
        
            ret = super();
        
            if (ret)
            {
                // If base class validation success, custom  validate the value on this form.
                ret = element.validateValue(this.dateTimeValue());
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DecimalValueField</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets the value whether the control is modified.
        /// </summary>
        /// <returns>True if control is modified, false otherwise.</returns>
        public boolean modified()
        {
            boolean ret;
    
            ret = super();

            if (ret)
            {
                element.saveAttributeValue();
            }
    
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Validates the value.
        /// </summary>
        /// <returns>True if value is valid, false otherwise.</returns>
        public boolean validate()
        {
            boolean ret;
        
            ret = super();
        
            if (ret)
            {
                // If base class validation success, custom  validate the value on this form.
                ret = element.validateValue(this.realValue());
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EnumerationValueField</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets the value whether the control is modified.
        /// </summary>
        /// <returns>True if control is modified, false otherwise.</returns>
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
    
            if (ret)
            {
                element.saveAttributeValue();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>EcoResAttribute</Name>
			<Table>EcoResAttribute</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AttributeModifier</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AttributeType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>EcoResAttributeType</Name>
			<Table>EcoResAttributeType</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsEnumeration</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsHidden</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>EcoResAttribute</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>RetailInstanceAttributeValuesTmp</Name>
			<Table>RetailInstanceAttributeValuesTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AttributeRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AttributeValueString</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>EcoResAttribute</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@Retail:RetailInstanceAttributeValuesDefaultCaption</Caption>
		<Pattern xmlns="">SimpleListDetails</Pattern>
		<PatternVersion xmlns="">1.3</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">SimpleListDetails</Style>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>GridContainer</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>AttributeNameFilter</Name>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>AttributeNameGrid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>AttributeNameGrid</Name>
						<AllowEdit>No</AllowEdit>
						<Type>Grid</Type>
						<WidthMode>SizeToContent</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Grid_AttributeName</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>Name</DataField>
								<DataSource>EcoResAttribute</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Grid_AttributeValue</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>AttributeValueString</DataField>
								<DataSource>RetailInstanceAttributeValuesTmp</DataSource>
							</AxFormControl>
						</Controls>
						<DataSource>EcoResAttribute</DataSource>
						<MultiSelect>No</MultiSelect>
						<ShowRowLabels>No</ShowRowLabels>
						<Style>List</Style>
					</AxFormControl>
				</Controls>
				<FrameType>None</FrameType>
				<Style>SidePanel</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DetailsHeader</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Details_AttributeName</Name>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>Name</DataField>
						<DataSource>EcoResAttribute</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>Details_AttributeDataType</Name>
						<FilterExpression>%1</FilterExpression>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>DataType</DataField>
						<DataSource>EcoResAttributeType</DataSource>
						<Label>@SYS40150</Label>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Details_AttributeTypeName</Name>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>Name</DataField>
						<DataSource>EcoResAttributeType</DataSource>
						<Label>@SYS333319</Label>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>AttributeValueTab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ValueTab</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>BooleanValueCheckBox</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>Auto</HeightMode>
								<Type>CheckBox</Type>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Label>@Retail:AttrValueBooleanLabel</Label>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>TextValueField</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Label>@Retail:AttrValueTextLabel</Label>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>IntGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>IntValueField</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HeightMode>Auto</HeightMode>
										<Type>Integer</Type>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@Retail:AttrValueIntLabel</Label>
										<ViewEditMode>Edit</ViewEditMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>IntUoM</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@Retail:AttrValueUoMLabel</Label>
									</AxFormControl>
								</Controls>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateTimeControl">
								<Name>DateTimeField</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>Auto</HeightMode>
								<Type>DateTime</Type>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Label>@Retail:AttrValueDateTimeLabel</Label>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>DecimalGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>DecimalValueField</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@Retail:AttrValueDecimalLabel</Label>
										<ViewEditMode>Edit</ViewEditMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>DecimalUoM</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@Retail:AttrValueUoMLabel</Label>
									</AxFormControl>
								</Controls>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>EnumerationValueField</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>Auto</HeightMode>
								<Type>ComboBox</Type>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ViewEditMode>Edit</ViewEditMode>
								<Items />
							</AxFormControl>
						</Controls>
						<Caption>@SYS310213</Caption>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>