<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BankAutomationStatementUnmatchedCardFormPart</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BankAutomationStatementUnmatchedCardFormPart extends FormRun
{
    boolean isWarning;
    boolean isOnFocus;

}
]]></Source>
			</Method>
			<Method>
				<Name>refreshStatisticsContent</Name>
				<Source><![CDATA[
    internal void refreshStatisticsContent()
    {
        if (UnmatchedAmount && UnmatchedAmountNormalLines && UnmatchedAmountWarningLines)
        {
            BankStmtISOAccountStatement statementRecord;
            AmountCur statementUnmatchedAmount;
            NumberOfRecords statementUnmatchedLines;

            FormRun formRun = element.args().caller();
            isOnFocus = false;

            if (formRun != null)
            {
                FormDataSource statmentDS = formRun.dataSource(formDataSourceStr(BankAutomationStatementForm, BankStmtISOAccountStatement));
                statementRecord = statmentDS.cursor();

                if (statementRecord.existUnmatchedBankStmtISOReportEntry())
                {
                    statementUnmatchedAmount = statementRecord.calcUnmatchedAmount();
                    statementUnmatchedLines = statementRecord.calcUnmatchedLines();
                }
                else
                {
                    statementUnmatchedAmount = 0;
                    statementUnmatchedLines = 0;
                }
                if (statementUnmatchedAmount != 0 || statementUnmatchedLines != 0)
                {
                    isWarning = true;
                    UnmatchedAmountWarningLines.text(strFmt("@Bank:SpaceConcatenateString", any2Str(statementUnmatchedLines), statementUnmatchedLines > 1 ? "@Bank:Lines": "@Bank:Line"));
                }
                else
                {
                    isWarning = false;
                    UnmatchedAmountNormalLines.text(strFmt("@Bank:SpaceConcatenateString", any2Str(0), "@Bank:Line"));
                }
                UnmatchedAmount.text(strFmt("@Bank:SpaceConcatenateString", strFmt("%1", statementUnmatchedAmount), statementRecord.AccountCurrency));
                this.setWarningHeadingVisible();
                this.setWarningLinesVisible();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
        this.refreshStatisticsContent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWarningHeadingVisible</Name>
				<Source><![CDATA[
    private void setWarningHeadingVisible()
    {
        UnmatchedAmountWarningHeading.visible(isWarning && !isOnFocus);
        UnmatchedAmountNormalHeading.visible(!isWarning && !isOnFocus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWarningLinesVisible</Name>
				<Source><![CDATA[
    private void setWarningLinesVisible()
    {
        UnmatchedAmountWarningLines.visible(isWarning);
        UnmatchedAmountNormalLines.visible(!isWarning);
    }

]]></Source>
			</Method>
			<Method>
				<Name>focusOnCard</Name>
				<Source><![CDATA[
    internal void focusOnCard(boolean _focus)
    {
        if (UnmatchedViewButton && UnmatchedAmountHeadingOnFocus && UnmatchedAmountWarningHeading && UnmatchedAmountNormalHeading && UnmatchedAmountWarningLines && UnmatchedAmountNormalLines)
        {
            UnmatchedViewButton.enabled(!_focus);
            UnmatchedAmountHeadingOnFocus.visible(_focus);
            isOnFocus = _focus;
            this.setWarningHeadingVisible();
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>UnmatchedViewButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            FormRun formRun = element.args().caller();
            if (formRun)
            {
                BankAutomationStatementFormView formView = formRun.getFormView();
                formView.switchMatchingStatusFormPart(BankAutomationStatementFormViewMatchingStatusType::Unmatched);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Pattern xmlns="">Custom</Pattern>
		<Style xmlns="">FormPart</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>UnmatchedAmountCard</Name>
				<AllowEdit>No</AllowEdit>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ExtendedStyle>BusinessCard</ExtendedStyle>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStaticTextControl">
						<Name>UnmatchedAmountNormalHeading</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Enabled>No</Enabled>
						<ExtendedStyle>staticText_defaultBoldFont</ExtendedStyle>
						<Type>StaticText</Type>
						<FormControlExtension
							i:nil="true" />
						<Text>@Bank:Unmatched</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStaticTextControl">
						<Name>UnmatchedAmountWarningHeading</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Enabled>No</Enabled>
						<ExtendedStyle>staticText_defaultBoldFont</ExtendedStyle>
						<Type>StaticText</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Text>@Bank:Unmatched</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStaticTextControl">
						<Name>UnmatchedAmountHeadingOnFocus</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Enabled>No</Enabled>
						<ExtendedStyle>staticText_defaultBoldFont</ExtendedStyle>
						<Type>StaticText</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Text>@Bank:Unmatched</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStaticTextControl">
						<Name>UnmatchedAmountNormalLines</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Enabled>No</Enabled>
						<ExtendedStyle>Heading</ExtendedStyle>
						<Type>StaticText</Type>
						<FormControlExtension
							i:nil="true" />
						<Text>@Bank:ZeroLine</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStaticTextControl">
						<Name>UnmatchedAmountWarningLines</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Enabled>No</Enabled>
						<ExtendedStyle>Heading</ExtendedStyle>
						<Type>StaticText</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Text>@Bank:ZeroLine</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStaticTextControl">
						<Name>UnmatchedAmount</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Enabled>No</Enabled>
						<Type>StaticText</Type>
						<FormControlExtension
							i:nil="true" />
						<Text></Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>UnmatchedViewButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Button</Type>
						<FormControlExtension
							i:nil="true" />
						<Text>@Bank:ViewUnmatched</Text>
					</AxFormControl>
				</Controls>
				<AllowUserSetup>No</AllowUserSetup>
				<ArrangeMethod>None</ArrangeMethod>
				<Style>Card</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>