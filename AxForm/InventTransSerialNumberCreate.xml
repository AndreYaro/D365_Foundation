<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>InventTransSerialNumberCreate</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
    [Form]
public class InventTransSerialNumberCreate extends FormRun implements InventTransSerialNumberCreateInterface
    {
        SerialNumberFormat          serialNumberFormat;
        NoYes                       serialNumberFormatOnly;
        SerialNumberIntervalStart   serialNumberIntervalStart;
        SerialNumberIntervalEnd     serialNumberIntervalEnd;
        int                         numOfRecords;
        InventQty                   qty;
        int                         qtySplit;

        #DEFINE.SymbolNumerals('#')
}
]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    boolean canClose()
    {
        boolean ret;

        ret = super();

        if (element.closedOk() && !element.checkValues())
        {
            return false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFormat</Name>
				<Source><![CDATA[
    boolean checkFormat()
    {
        int countSymbols;
        SerialNumberFormat tmpTxt = serialNumberFormat;

        if (!serialNumberFormat)
        {
            return true;
        }

        while (true)
        {
            int x = strFind(tmpTxt,#SymbolNumerals, 999, -999);
            if (x)
            {
                countSymbols++;
                tmpTxt  = strPoke(tmpTxt,'+',x);
            }
            else
            {
                break;
            }
        }
        if (countSymbols < strLen(int2str(serialNumberIntervalEnd)) && serialNumberIntervalEnd)
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValues</Name>
				<Source><![CDATA[
    boolean checkValues()
    {
        if (serialNumberIntervalStart > serialNumberIntervalEnd)
        {
            Box::warning("@SYS53167","@SYS18245");
            return false;
        }
        if (serialNumberIntervalEnd-serialNumberIntervalStart+1 != qtySplit)
        {
            if (serialNumberIntervalEnd != 0 && serialNumberIntervalStart != 0)
            {
                Box::warning("@SYS53167","@SYS18245");
                return false;
            }
        }
        if (!element.checkFormat())
        {
            Box::warning("@SYS53168","@SYS18245");
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        WMSJournalTransUpdateSerialId   wmsJournalTransUpdateSerialId;

        super();

        if (element.args().dataset() == tableNum(WMSJournalTrans))
        {
            wmsJournalTransUpdateSerialId = element.args().caller();
            wmsJournalTransUpdateSerialId.parmSerialNumberIntervalStart(serialNumberIntervalStart);
            wmsJournalTransUpdateSerialId.parmSerialNumberIntervalEnd(serialNumberIntervalEnd);
            wmsJournalTransUpdateSerialId.parmSerialNumberFormat(serialNumberFormat);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        TmpInventTransWMS           tmpInventTransRegister;
        InventTrans                 inventTrans;
        WMSJournalTrans             wmsJournalTrans;

        super();

        if (element.args().dataset() == tablenum(TmpInventTransWMS))
        {
            tmpInventTransRegister.data(element.args().record());
            qty = tmpInventTransRegister.InventQty;
        }
        else if (element.args().dataset() == tablenum(InventTrans))
        {
            inventTrans = element.args().record().data();
            qty = inventTrans.Qty;
        }
        else if (element.args().dataset() == tablenum(WMSJournalTrans))
        {
            wmsJournalTrans = element.args().record() as WMSJournalTrans;
            if (wmsJournalTrans.pdsSplitByCWQty())
            {
                qty = wmsJournalTrans.PdsCWQty;
            }
            else
            {
                qty = wmsJournalTrans.Qty;
            }
        }
        else
        {
            throw error(strfmt("@SYS22494",element.name(),tablestr(TmpInventTransWMS),tablestr(InventTrans)));
        }

        element.setQtySplit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        if (qty > 0)
        {
            serialNumberIntervalStart   = 1;
            serialNumberIntervalEnd     = qtySplit;
        }
        super();
        ctrlInfo.text(strFmt("@SYS53158",qty,qtySplit));
    }

]]></Source>
			</Method>
			<Method>
				<Name>serialNumberFormat</Name>
				<Source><![CDATA[
    public edit SerialNumberFormat serialNumberFormat(
        boolean             _set,
        SerialNumberFormat  _serialNumberMask)
    {
        if (_set)
        {
            serialNumberFormat = _serialNumberMask;
        }
        return serialNumberFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serialNumberFormatOnly</Name>
				<Source><![CDATA[
    public edit NoYes serialNumberFormatOnly(
        boolean   _set,
        NoYes     _serialNumberFormatOnly)
    {
        if (_set)
        {
            serialNumberFormatOnly = _serialNumberFormatOnly;
        }

        return serialNumberFormatOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serialNumberIntervalEnd</Name>
				<Source><![CDATA[
    public edit SerialNumberIntervalEnd serialNumberIntervalEnd(
        boolean                 _set,
        SerialNumberIntervalEnd _serialNumberIntervalEnd)
    {
        if (_set)
        {
            serialNumberIntervalEnd = _serialNumberIntervalEnd;
        }
        return serialNumberIntervalEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serialNumberIntervalStart</Name>
				<Source><![CDATA[
    public edit SerialNumberIntervalStart serialNumberIntervalStart(
        boolean                     _set,
        SerialNumberIntervalStart   _serialNumberIntervalStart)
    {
        if (_set)
        {
            serialNumberIntervalStart = _serialNumberIntervalStart;
        }
        return serialNumberIntervalStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQtySplit</Name>
				<Source><![CDATA[
    void setQtySplit()
    {
        int tmpSplit = real2int(round(qty,1));

        if (tmpSplit >= qty)
        {
            qtySplit = tmpSplit;
        }
        else
        {
            qtySplit = tmpSplit+1;
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>ctrlSerialNumberIntervalStart</Name>
				<Type>Integer</Type>
				<Methods>
					<Method>
						<Name>leave</Name>
						<Source><![CDATA[
        boolean leave()
        {
            boolean             ret;

            ret = super();

            if (serialNumberIntervalStart > 0)
            {
                serialNumberIntervalEnd = serialNumberIntervalStart+qtySplit-1;
                ctrlSerialNumberIntervalEnd.textChange();
                ctrlSerialNumberIntervalEnd.update();
            }
            if (serialNumberIntervalStart == 0 && serialNumberIntervalEnd != 0)
            {
                serialNumberIntervalEnd = serialNumberIntervalStart+qtySplit-1;
                ctrlSerialNumberIntervalEnd.textChange();
                ctrlSerialNumberIntervalEnd.update();
            }
            if (serialNumberIntervalEnd < 0)
            {
                serialNumberIntervalEnd = 0;
                ctrlSerialNumberIntervalEnd.textChange();
                ctrlSerialNumberIntervalEnd.update();
            }
            if (serialNumberIntervalStart < 0)
            {
                serialNumberIntervalStart = 1;
                serialNumberIntervalEnd = serialNumberIntervalStart+qtySplit-1;
                this.textChange();
                this.update();
                return false;
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ctrlSerialNumberIntervalEnd</Name>
				<Type>Integer</Type>
				<Methods>
					<Method>
						<Name>leave</Name>
						<Source><![CDATA[
        boolean leave()
        {
            boolean             ret;

            ret = super();

            if (serialNumberIntervalEnd > 0)
            {
                serialNumberIntervalStart  = serialNumberIntervalEnd-qtySplit+1;
                ctrlSerialNumberIntervalStart.textChange();
                ctrlSerialNumberIntervalStart.update();
            }
            if (serialNumberIntervalEnd == 0 && serialNumberIntervalStart != 0)
            {
                serialNumberIntervalStart = serialNumberIntervalEnd-qtySplit+1;
                if (serialNumberIntervalStart <0)
                {
                    serialNumberIntervalStart = 0;
                    serialNumberIntervalEnd = serialNumberIntervalStart+qtySplit-1;
                    this.textChange();
                    this.update();
                }
                ctrlSerialNumberIntervalStart.textChange();
                ctrlSerialNumberIntervalStart.update();
            }
            if (serialNumberIntervalStart < 0)
            {
                serialNumberIntervalStart = 0;
                serialNumberIntervalEnd = serialNumberIntervalStart+qtySplit-1;
                this.textChange();
                this.update();
                ctrlSerialNumberIntervalStart.textChange();
                ctrlSerialNumberIntervalStart.update();
            }
            if (serialNumberIntervalEnd < 0)
            {
                serialNumberIntervalEnd = serialNumberIntervalStart+qtySplit-1;
                this.textChange();
                this.update();
                return false;
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@SYS18245</Caption>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<StatusBarStyle xmlns="">SimpleWithoutClose</StatusBarStyle>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>ctrlInfo</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1073741823</ElementPosition>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<FilterExpression>%1</FilterExpression>
				<Type>StaticText</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Text>@SYS2595</Text>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FrameGroup</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>InfoGroup</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>IntervalStartEndGroup</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormIntegerControl">
								<Name>ctrlSerialNumberIntervalStart</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Integer</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>SerialNumberIntervalStart</DataMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormIntegerControl">
								<Name>ctrlSerialNumberIntervalEnd</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Integer</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>SerialNumberIntervalEnd</DataMethod>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>TemplateGroup</Name>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SerialNumberFormat</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>SerialNumberFormat</DataMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>SerialNumberFormatOnly</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>SerialNumberFormatOnly</DataMethod>
								<Label>@SYS59355</Label>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Top>0</Top>
				<TopMode>BottomEdge</TopMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>