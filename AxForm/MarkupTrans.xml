<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>MarkupTrans</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class MarkupTrans extends FormRun
{
    #Retail
    QueryBuildRange         transTableId;
    QueryBuildRange         transRecId;

    TableId                 callerTableId;
    RecId                   callerRecId;
    Common                  caller;
    MarkupModule            moduleType;
    HeadingLine             headingLine;

    // For use by the "connected" field
    boolean useConnected; // is the connected field used at all?
    boolean isConnectedTo; // is the connected field a "to" or a "from" field?
    int connectedType; // is the connected field at the header(3), subheader (2) or line (1) level?

    FormMenuButtonControl   ledgerTransButton;
    boolean skipRefresh;

    boolean deleteAllJournalLines;
    boolean recreateTax;
    boolean updateDistributions;

    [FormObservable]
    boolean callerHasVendorInvoice; // Cached value which determines whether the caller is connected to a vendor invoice.

    // <GSA>
    boolean        isPOHasBankLC;
    boolean        isCountryRegion_SA;
    boolean        isBankLCImportChargeFeatureEnabled_SA;
    BankLCRefRecId bankLCRefRecId;
    // <GSA>

    [FormObservable]
    boolean                             isCallerDatasourceEditable;

    boolean                 allowEditMarkupTrans;
    boolean                 countryRegion_RU;

    boolean                 isMarkupTrans_INEnabled;
    boolean                 isIndiaTaxMarked;
    boolean                 countryRegion_IN;
    // Misc charge override need to save values off depending on whether it is a misc charge override,
    // or the user is turning off an override.
    // These values will be used to write an order event.
    MCROrderEventType           mcrOrderEventTypeMisc;
    RetailInformationSubcodeId  retailInformationSubcodeId;
    RetailInfocodeId            retailInfocodeId;
    UserId                      chargeOverrideUserIdMisc;
    SalesIdBase                 salesId;
    boolean                     addMiscCharge;
    boolean                     allowDeletes;
    SalesId                     recapSalesId;
    NoYes                       enableOrderPriceControl;
    boolean                     mcrCallCenterInUse;
    boolean                     tradeBrokerConfig;
    boolean                     mcrProcessEvent;
    Map                         estimatedAmountCache;

}
]]></Source>
			</Method>
			<Method>
				<Name>canConnect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the Connect button should be enabled.
    /// </summary>
    /// <returns>
    /// true if the Connect button should be enabled; otherwise, false.
    /// </returns>
    public boolean canConnect()
    {
        // Cannot connect if not editable
        if (!markupTrans_ds.allowEdit())
        {
            return false;
        }

        // Cannot connect if misc charge was allocated from header
        if (markupTrans.OrigRecId && markupTrans.OrigTableId == tableNum(VendInvoiceInfoTable))
        {
            return false;
        }

        // Cannot connect non-PO invoice/lines
        switch (markupTrans.TransTableId)
        {
            case tableNum(VendInvoiceInfoTable):
                return !VendInvoiceInfoTable::findRecId(markupTrans.TransRecId).isNonPO();

            case tableNum(VendInvoiceInfoSubTable):
                return !VendInvoiceInfoSubTable::findRecId(markupTrans.TransRecId).isNonPO();

            case tableNum(VendInvoiceInfoLine):
                return !VendInvoiceInfoLine::findRecId(markupTrans.TransRecId).isNonPO();

            default:
                return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the total values displayed on the purchase orders form.
    /// </summary>
    /// <remarks>
    /// If it is needed for any other form, add a method called markupTransFormClosed on that form.
    /// </remarks>
    public void close()
    {
        FormRun  callerFormObject;

        super();

        callerFormObject = element.args().caller() as FormRun;

        if (callerFormObject && formHasMethod(callerFormObject, identifierStr(markupTransFormClosed)))
        {
            callerFormObject.markupTransFormClosed();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMarkupTableQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for the <c>MarkupTable</c> data source.
    /// </summary>
    /// <returns>The <c>Query</c> object including ranges.</returns>
    protected Query buildMarkupTableQuery()
    {
        Query                query                = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(MarkupTable));

        queryBuildDataSource.addRange(fieldNum(MarkupTable, ModuleType)).value(enum2str(markupTrans.ModuleType));
        queryBuildDataSource.addRange(fieldNum(MarkupTable, CustomPaymType_RU)).value(SysQuery::valueEmptyString());

        // <GBR>
        if (   BrazilParameters::isEnabled()
            && markupTrans.ModuleType == MarkupModuleType::Vend
            && !markupTrans.isForeignVendor_BR())
        {
            queryBuildDataSource.addRange(fieldNum(MarkupTable, MarkupClassification_BR)).value(SysQuery::valueNot(MarkupClassification_BR::SISCOMEX));
        }
        // </GBR>
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupCodeLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create lookup adding lookup fields for the <c>MarkupCode</c> form control.
    /// </summary>
    /// <param name = "_formControl">The <c>FormControl</c> for which to add a lookup for.</param>
    /// <returns>The <c>SysTableLookup</c> object.</returns>
    protected SysTableLookup markupCodeLookup(FormControl _formControl)
    {
        Query           query           = this.buildMarkupTableQuery();
        SysTableLookup  sysTableLookup  = SysTableLookup::newParameters(tableNum(MarkupTable), _formControl);

        sysTableLookup.addLookupfield(fieldNum(MarkupTable, MarkupCode));
        sysTableLookup.addLookupfield(fieldNum(MarkupTable, Txt));
        sysTableLookup.addLookupfield(fieldNum(MarkupTable, ModuleType));

        sysTableLookup.parmQuery(query);

        return sysTableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configLCControls_SA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable/disable controls on this form
    /// </summary>
    /// <param name = "_callerFrom">the caller form</param>
    public void configLCControls_SA(FormRun _callerFrom)
    {
        // <GSA>
        PurchTable purchTable;
        PurchLine  purchLine;

        if (_callerFrom)
        {
            if (_callerFrom.name() == formStr(PurchTable))
            {
                if (callerTableId == tableNum(PurchTable))
                {
                    purchTable = PurchTable::findRecId(callerRecId);
                }
                else if (callerTableId == tableNum(PurchLine))
                {
                    purchLine = PurchLine::findRecId(callerRecId);
                    if (purchLine)
                    {
                        purchTable = purchLine.purchTable();
                    }
                }

                if (purchTable
                    && purchTable.isMarkedForBankLC())
                {
                    isPOHasBankLC  = BankLCImport::existByPurchTable(purchTable.PurchId);
                    bankLCRefRecId = BankLCImport::findByPurchTable(purchTable.PurchId).RecId;
                    markupTrans_DS.allowCreate(!isPOHasBankLC);
                    dropDialogButtonAllocation_SA.visible(isPOHasBankLC
                        && callerTableId == tableNum(PurchTable));
                }
            }
        }
        // </GSA>
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTransFromVendInvoiceInfoListPageAllowEdit</Name>
				<Source><![CDATA[
    void markupTransFromVendInvoiceInfoListPageAllowEdit()
    {
        if (element.args().callerName() == formStr(VendInvoiceInfoListPage))
        {
            boolean markupTransAllowEdit = MarkupTrans::markupAllowed(element.args().record());

            markupTrans_ds.allowEdit(markupTransAllowEdit);
            markupTrans_ds.allowCreate(markupTransAllowEdit);
            markupTrans_ds.allowDelete(markupTransAllowEdit);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankLCRefRecId_SA</Name>
				<Source><![CDATA[
    /// <summary>
    /// parm BankLCRefRecId for <c>BankLCImportAllocateMarupTrans_SA</c>
    /// </summary>
    /// <param name = "_bankLCRefRecId">recId to parm</param>
    /// <returns>BankLCRefRecId</returns>
    // <GSA>
    public BankLCRefRecId parmBankLCRefRecId_SA(BankLCRefRecId _bankLCRefRecId = bankLCRefRecId)
    {
        bankLCRefRecId = _bankLCRefRecId;
        return bankLCRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configMarkupTransFieldsForLC_SA</Name>
				<Source><![CDATA[
    // </GSA>

    /// <summary>
    /// Enable/disable controls on this form
    /// </summary>
    public void configMarkupTransFieldsForLC_SA()
    {
        // <GSA>
        MarkupTable markupTableLocal;

        if (isPOHasBankLC)
        {
            markupTableLocal = MarkupTable::find(markupTrans.ModuleType, markupTrans.MarkupCode);

            markupTrans_DS.object(fieldNum(MarkupTrans, MarkupCode)).allowEdit(!markupTableLocal.IsLetterOfCredit_SA);
            markupTrans_DS.object(fieldNum(MarkupTrans, MarkupCategory)).allowEdit(!markupTableLocal.IsLetterOfCredit_SA);
            markupTrans_DS.object(fieldNum(MarkupTrans, Value)).allowEdit(!markupTableLocal.IsLetterOfCredit_SA);
            markupTrans_DS.object(fieldNum(MarkupTrans, CurrencyCode)).allowEdit(!markupTableLocal.IsLetterOfCredit_SA);
        }
        // </GSA>
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableAccountingDistributionButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the ButtonDistributeAmount button's display menu item to point to the correct form.
    /// </summary>
    /// <remarks>
    /// Display menuitem name changed depending on the caller menuitem of this form.
    /// </remarks>
    public void enableAccountingDistributionButton()
    {
        if (markupTrans.SourceDocumentLine == 0)
        {
            buttonDistributeAmount.visible(element.isDistributeAmountButtonVisible());
            buttonDistributeAmount.enabled(false);
            return;
        }

        if (element.args())
        {
            switch (element.args().menuItemName())
            {
                case menuitemDisplayStr(MarkupTrans_HeadingSales):
                    buttonDistributeAmount.menuItemName(menuitemDisplayStr(AccountingDistCustFreeInvoice));
                    break;

                case menuitemDisplayStr(MarkupTrans_LinePurchReq):
                    buttonDistributeAmount.menuItemName(menuitemDisplayStr(AccountingDistMarkupTransReq));
                    break;

                case menuitemDisplayStr(MarkupTrans_HeadingPurchTable):
                    buttonDistributeAmount.menuItemName(menuitemDisplayStr(AccountingDistMarkupTransPO));
                    break;

                case menuitemDisplayStr(MarkupTrans_LinePurchTable):
                    buttonDistributeAmount.menuItemName(menuitemDisplayStr(AccountingDistMarkupTransPO));
                    break;

                case menuitemDisplayStr(MarkupTrans_LineProj):
                    buttonDistributeAmount.menuItemName(menuitemDisplayStr(AccountingDistMarkupTransPO));
                    break;

                case menuitemDisplayStr(MarkupTrans_HeadingProj):
                    buttonDistributeAmount.menuItemName(menuitemDisplayStr(AccountingDistMarkupTransPO));
                    break;

                case menuitemDisplayStr(MarkupTrans_HeadingPurchParm):
                    buttonDistributeAmount.menuItemName(menuitemDisplayStr(AccountingDistMarkupTransInv));
                    break;

                case menuitemDisplayStr(MarkupTrans_HeadingPurchParmSub):
                    buttonDistributeAmount.menuItemName(menuitemDisplayStr(AccountingDistMarkupTransInv));
                    break;

                case menuitemDisplayStr(MarkupTrans_LinePurchParm):
                    buttonDistributeAmount.menuItemName(menuitemDisplayStr(AccountingDistMarkupTransInv));
                    break;

                default :
                    if (element.args().menuItemName() == menuitemDisplayStr(MarkupTrans_LineSales) &&
                        SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
                    {
                        buttonDistributeAmount.menuItemName(menuitemDisplayStr(AccountingDistCustFreeInvoice));
                    }
                    else
                    {
                        buttonDistributeAmount.enabled(false);
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableFieldsActive_IN</Name>
				<Source><![CDATA[
    void enableFieldsActive_IN()
    {
        MarkupTable     markupTable;

        markupTable = markupTrans.markupTable();

        if (markupTrans.Value < 0)
        {
            markupTrans_ds.object(fieldNum(MarkupTrans, NotionalCharges_IN)).enabled(false);
            markupTrans_ds.object(fieldNum(MarkupTrans, NotionalPct_IN)).enabled(false);
        }
        else
        {
            markupTrans_ds.object(fieldNum(MarkupTrans, NotionalCharges_IN)).enabled(TaxParameters::find().Customs_IN);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInterCompanyAndCategoryPercent</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void checkInterCompanyAndCategoryPercent()
    {
        if (AutoChargesSetupSequenceCompoundFeature::instance().IsEnabled() 
            && (callerTableId == tableNum(SalesTable) || callerTableId == tableNum(PurchTable)))
        {
            MarkupTrans localMarkupTrans;
            select firstonly RecId from localMarkupTrans
                where localMarkupTrans.TransRecId == callerRecId
                && localMarkupTrans.TransTableId == callerTableId
                && localMarkupTrans.InterCompanyCompanyId
                && localMarkupTrans.InterCompanyRefRecId
                && localMarkupTrans.MarkupCategory == MarkupCategory::Percent;
            if (localMarkupTrans.RecId)
            {
                checkFailed("@SCM:IntercompanySalesOrderChargePercentError");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enablePosition</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void enablePosition(boolean _allowEdit, boolean _visible)
    {
        if (AutoChargesSetupSequenceCompoundFeature::instance().isEnabled())
        {
            markupTrans_ds.object(fieldNum(MarkupTrans, Position)).allowEdit(_allowEdit);
            markupTrans_ds.object(fieldNum(MarkupTrans, Position)).skip(!_allowEdit);
            markupTrans_ds.object(fieldNum(MarkupTrans, Position)).visible(_visible);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableSequence</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void enableSequence(boolean _allowEdit, boolean _visible)
    {
        if (AutoChargesSetupSequenceCompoundFeature::instance().isEnabled())
        {
            markupTrans_ds.object(fieldNum(MarkupTrans, Sequence)).allowEdit(_allowEdit);
            markupTrans_ds.object(fieldNum(MarkupTrans, Sequence)).skip(!_allowEdit);
            markupTrans_ds.object(fieldNum(MarkupTrans, Sequence)).visible(_visible);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableCompound</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void enableCompound(boolean _allowEdit, boolean _visible)
    {
        if (AutoChargesSetupSequenceCompoundFeature::instance().isEnabled())
        {
            markupTrans_ds.object(fieldNum(MarkupTrans, IsCompound)).allowEdit(_allowEdit);
            markupTrans_ds.object(fieldNum(MarkupTrans, IsCompound)).skip(!_allowEdit);
            markupTrans_ds.object(fieldNum(MarkupTrans, IsCompound)).visible(_visible);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableSpecificUnitSymbol</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void enableSpecificUnitSymbol(boolean _allowEdit, boolean _visible)
    {
        if (AutoChargesSetupLineLevelUnitOfMeasureFeature::instance().isEnabled())
        {
            markupTrans_ds.object(fieldNum(MarkupTrans, SpecificUnitSymbol)).allowEdit(_allowEdit);
            markupTrans_ds.object(fieldNum(MarkupTrans, SpecificUnitSymbol)).visible(_visible);
            markupTrans_ds.object(fieldNum(MarkupTrans, SpecificUnitSymbol)).skip(!_allowEdit);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void  init(FormRun callerForm = null)
    {
        #JmgConstants
        List params = strSplit(element.args().parm(), ',');
        ListEnumerator enumParams = params.getEnumerator();
        #ISOCountryRegionCodes
        GoodsInRouteJour_RU     goodsInRouteJour;
        GoodsInRouteTrans_RU    goodsInRouteTrans;
        boolean                 isHeaderCharge;

        // Process one parameter
        void processParam(str param)
        {
            List paramParts = strSplit(param, '='); // parameters are of the form "<name>=<value>"
            ListEnumerator enumParam = paramParts.getEnumerator();
            str paramName;
            str paramValue;

            if (paramParts.elements() == 2)
            {
                enumParam.moveNext();
                paramName = strLwr(strRTrim(strLTrim(enumParam.current())));
                enumParam.moveNext();
                paramValue = strLwr(strRTrim(strLTrim(enumParam.current())));
                switch (paramName)
                {
                    case 'useconnected':
                        useConnected = paramValue == 'true';
                        break;
                    case 'isconnectedto':
                        isConnectedTo = paramValue == 'true';
                        break;
                    case 'connectedtype':
                        connectedType = str2int(paramValue);
                        break;
                }
            }
        }

        //Initializing cache used for edit field editEstimatedAmount on the MarkupTrans datasource
        estimatedAmountCache = new Map(Types::Int64, Types::Real);

        isIndiaTaxMarked = TaxParameters::checkTaxParameters_IN();
        isMarkupTrans_INEnabled = SysExtensionSerializerExtensionMap::isExtensionEnabled(tableNum(MarkupTrans_IN));

        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        countryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);

        super();

        if (!element.args().record())
        {
            warning("@SYS4205");
			element.close();
		}

        transTableId    = markupTrans_ds.query().dataSourceTable(tableNum(MarkupTrans)).addRange(fieldNum(MarkupTrans, TransTableId));
        transRecId      = markupTrans_ds.query().dataSourceTable(tableNum(MarkupTrans)).addRange(fieldNum(MarkupTrans, TransRecId));
        headingLine     = element.args().parmEnum();

        callerTableId   = element.args().record().TableId;
        callerRecId     = element.args().record().RecId;
        caller          = element.args().record();

        allowDeletes = true;    // unless later changed, deletes should be allowed.

        this.mcrInitMarkup();

        moduleType      = markupTrans.initModuleType(callerTableId);

        if (countryRegion_RU)
        {
            switch (callerTableId)
            {
                case tableNum(CustInvoiceJour)  :
                case tableNum(CustInvoiceTrans) :
                case tableNum(VendInvoiceJour)  :
                case tableNum(VendInvoiceTrans) :
                case tableNum(GoodsInRouteJour_RU):
                case tableNum(GoodsInRouteTrans_RU):
                    allowEditMarkupTrans = false;
                    break;
                default                         :
                    allowEditMarkupTrans = true;
            }
        }
        transTableId.value  (queryValue(callerTableId));
        transRecId.value    (queryValue(callerRecId));
        
        switch (callerTableId)
        {
            case tableNum(GoodsInRouteJour_RU):
                goodsInRouteJour = element.args().record();
                transTableId.value  (queryValue(tableNum(CustInvoiceJour)));
                if (goodsInRouteJour.Cancel)
                {
                    transRecId.value    (queryValue(goodsInRouteJour.cancelCustInvoiceJour().RecId));
                }
                else
                {
                    transRecId.value    (queryValue(goodsInRouteJour.custInvoiceJour().RecId));
                }
                break;

            case tableNum(GoodsInRouteTrans_RU):
                goodsInRouteTrans = element.args().record();
                transTableId.value  (queryValue(tableNum(CustInvoiceTrans)));
                if (goodsInRouteTrans.goodsInRouteJour().Cancel)
                {
                    transRecId.value    (queryValue(goodsInRouteTrans.custInvoiceTransCancel().RecId));
                }
                else
                {
                    transRecId.value    (queryValue(goodsInRouteTrans.custInvoiceTrans().RecId));
                }
                markupTrans_ds.query().dataSourceTable(tableNum(MarkupTrans)).addRange(fieldNum(MarkupTrans, GoodsInRouteId_RU)).value(goodsInRouteTrans.GoodsInRouteId);
                break;

            case tableNum(CustInvoiceJour):
                markupTrans_ds.query().dataSourceTable(tableNum(MarkupTrans)).addRange(fieldNum(MarkupTrans, Voucher)).value(SysQuery::valueNotEmptyString());
                break;

            case tableNum(CustInvoiceLine):
                if (BrazilParameters::isEnabled())
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00050, funcName());
                }
                break;

            case tableNum(PurchTable):
            case tableNum(PurchLine):
                markupTrans_ds.query().dataSourceTable(tableNum(MarkupTrans)).addRange(fieldNum(MarkupTrans, SourceDocumentLine)).value(SysQuery::valueNotEmptyString());
                break;

            case tableNum(SalesTable):
            case tableNum(SalesLine):
            case tableNum(SalesQuotationTable):
            case tableNum(SalesQuotationLine):
                isHeaderCharge = headingLine == HeadingLine::Heading;
                break;
        }

        element.checkInterCompanyAndCategoryPercent();

        element.enablePosition(isHeaderCharge, isHeaderCharge);
        element.enableCompound(isHeaderCharge, isHeaderCharge);
        element.enableSequence(isHeaderCharge, isHeaderCharge);
        element.enableSpecificUnitSymbol(!isHeaderCharge, !isHeaderCharge);

        skipRefresh = false;

        deleteAllJournalLines = false;

        // Need to make sure deletes are only allowed during the approriate situations.
        markupTrans_ds.allowDelete(allowDeletes);

        if (callerTableId == tableNum(InventTransferLine))
        {
            markupTrans_ds.allowEdit(false);
            markupTrans_ds.allowCreate(false);
        }

        useConnected = false;
        // Process all parameters
        while (enumParams.moveNext())
        {
            processParam(enumParams.current());
        }

        markupTrans_UseInMatching.visible(useConnected && VendParameters::find().editUseInvoiceMatching());
        markupConnectedTo.visible(useConnected && isConnectedTo && connectedType <= 2);
        markupConnectButton.visible(markupConnectedTo.visible());
        markupConnectedFrom.visible(useConnected && !isConnectedTo);
        InvoiceMatching.visible(markupTrans_UseInMatching.visible() || markupConnectedTo.visible() || markupConnectedFrom.visible());

        markupTrans_CurrencyCode.extendedDataType(MarkupTrans::currencyCodeExtendedTypeId(element.args().record()));

        markupTrans_ds.object(fieldNum(MarkupTrans, Keep)).visible(moduleType != MarkupModuleType::Vend
                                                                    && !(useConnected && isConnectedTo));

        markupAllowEdit.visible(callerTableId == tableNum(PurchTable) || callerTableId == tableNum(PurchLine));

        // <GSA>
        isCountryRegion_SA = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoSA]);
        if (isCountryRegion_SA)
        {
            isBankLCImportChargeFeatureEnabled_SA = BankLCImportChargeFeatureChecker_SA::construct().checkFeatureEnabled(false);

            if (isBankLCImportChargeFeatureEnabled_SA)
            {
                this.configLCControls_SA(callerForm);
            }
        }
        // </GSA>

        this.enableAccountingDistributionButton();

        if (countryRegion_IN)
        {
            element.updateDesign_IN();
        }

        // <GTE>
        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            TransTaxInformation.visible(true);
        }
        // </GTE>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            element.updateDesign_MX();
        }
 
        // When coming from recap, show the item field and do not allow creates
        if (element.args().parm() == RetailCharges::getMiscChargesExchangeParm())
        {
            mcrItem.visible(true);
        }

        // Only show restocking fee flag when looking at misc charges from the return workbench.
        if (element.args().parm() == RetailCharges::getMiscChargesReturnParm())
        {
            if (element.args().parm() == RetailCharges::getMiscChargesReturnParm())
            {
                mcrItem.visible(true);
            }
        }

        if (element.args().caller() && element.args().caller() is CustIFreeInvoice)
        {
            //When payments are enabled on the Free Text Invoice form,
            //disable the Keep field.
            //This is to keep the misc. charge from being deleted during posting
            //because it is needed in the total sales amount calculation
            //that occurs in the payment over/under validation just after posting.
            if (mcrCallCenterInUse
                && RetailMCRChannelTable::findForCurrentUser())
            {
                markupTrans_ds.object(fieldNum(MarkupTrans, Keep)).enabled(false);
            }
        }

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            SalesTax_TaxGroup.visible(false);
            SalesTax_TaxItemGroup.visible(false);
        }

        if (Tax::isTaxIntegrationEnabledForTable(callerTableId))
        {
            MarkupTrans_ds.object(fieldNum(MarkupTrans, TaxGroup)).allowEdit(false);
            MarkupTrans_ds.object(fieldNum(MarkupTrans, TaxItemGroup)).allowEdit(false);
            MarkupTrans_ds.object(fieldNum(MarkupTrans, OverrideSalesTax)).visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDistributeAmountButtonVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the distribute amounts button should be visible.
    /// </summary>
    /// <returns>
    /// true if the distribute amounts button should be enabled; otherwise, false.
    /// </returns>
    public boolean isDistributeAmountButtonVisible()
    {
        switch (callerTableId)
        {
            case tableNum(SalesTable):
            case tableNum(SalesLine):
            case tableNum(SalesQuotationTable):
            case tableNum(SalesQuotationLine):
            case tableNum(CustQuotationJour):
            case tableNum(CustQuotationTrans):
            case tableNum(CustQuotationConfirmJour):
            case tableNum(CustQuotationConfirmTrans):
            case tableNum(CustConfirmJour):
            case tableNum(CustConfirmTrans):
            case tableNum(CustInvoiceJour):
            case tableNum(CustInvoiceTrans):
                return false;

            default :
                return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisableForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Disables controls to prevent the user from exiting.
    /// </summary>
    /// <remarks>
    ///     If we are leaving the form and it is required that the user
    ///     enter something on another form prior to additional changes on this
    ///     form, this method can be called to lock down the markup transaction form.
    /// </remarks>
    void mcrDisableForm()
    {
        // disable markup trans data source
        markupTrans_ds.allowEdit(false);
        markupTrans_ds.allowCreate(false);
        markupTrans_ds.allowDelete(false);
        // Tabs on the form.
        Transact.allowEdit(false);
        ChargesLinesDetails.allowEdit(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrEnableForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Enables controls when entering the form.
    /// </summary>
    /// <remarks>
    ///     If the user is coming back to MarkupTrans from another form
    ///     this method can be called to unlock the MarkupTrans form.
    /// </remarks>
    void mcrEnableForm()
    {
        // enable markup trans data source
        markupTrans_ds.allowEdit(true);
        markupTrans_ds.allowCreate(true);

        // At times, deletes should not be allowed
        markupTrans_ds.allowDelete(allowDeletes);

        // Tabs on the form.
        Transact.allowEdit(true);
        ChargesLinesDetails.allowEdit(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInitMarkup</Name>
				<Source><![CDATA[
    private void mcrInitMarkup()
    {
        SalesLine              salesLine;
        SalesTable             salesTable;
        RetailMCRChannelTable  retailMCRChannelTable;
        boolean                quoteCaller = false;
        MCROrderEventSetup     mcrOrderEventSetup;

        mcrCallCenterInUse = MCROrderParameters::isCallCenterEnabledAndInUse();
        tradeBrokerConfig  = isConfigurationkeyEnabled(configurationKeyNum(TradeBroker));

        markupTrans_ds.object(fieldNum(MarkupTrans, mcrReasonCode)).visible(false);
        markupTrans_ds.object(fieldNum(MarkupTrans, mcrInstallmentEligible)).visible(true);

        mcrProcessEvent = false;

        if (mcrCallCenterInUse)
        {
            switch (callerTableId)
            {
                case tableNum(SalesTable) :
                    salesTable = element.args().record();
                    break;

                case tableNum(SalesLine) :
                    salesLine = element.args().record();
                    salesTable = salesLine.salesTable();
                    break;

                case tableNum(SalesQuotationTable) :
                    quoteCaller = true;
                    break;

                // Don't want to insert an event for quotes but do want to show all the same fields
                case tableNum(SalesQuotationLine):
                    quoteCaller = true;
                    break;
            }

            if (salesTable)
            {
                if (#MCRPriceOverrideEnabled)
                {
                    retailMCRChannelTable = RetailMCRChannelTable::findChannelBySalesTable(salesTable);
                    enableOrderPriceControl = retailMCRChannelTable.mcrEnableOrderPriceControl;
                    retailInfocodeId = retailMCRChannelTable.mcrPriceOverrideRetailInfocodeId;
                }

                salesId = salesTable.SalesId;

                // if charges are for a sales order then we should allow the user
                // to overrirde whether or not the charge is eligible for an installment plan.
                markupTrans_ds.object(fieldNum(MarkupTrans, mcrInstallmentEligible)).visible(true);

                // Check to see if any events setup before checking the 3 levels of setup.
                if (MCROrderEventSetup::isEventInUse())
                {
                    mcrOrderEventSetup = MCROrderEventSetup::find();
                    if (salesLine)
                    {
                        if (mcrOrderEventSetup.LineMiscChargeOverride)
                        {
                            mcrProcessEvent = true;
                        }
                    }
                    else if (mcrOrderEventSetup.HeaderMiscChargeOverride)
                    {
                        mcrProcessEvent = true;
                    }
                }
            }
            else if (quoteCaller)
            {
                if (#MCRPriceOverrideEnabled)
                {
                    retailMCRChannelTable = RetailMCRChannelTable::findForCurrentUser();
                    enableOrderPriceControl = retailMCRChannelTable.mcrEnableOrderPriceControl;
                    retailInfocodeId = retailMCRChannelTable.mcrPriceOverrideRetailInfocodeId;
                }

                allowDeletes = false;
            }
        }

        markupTrans_MCRMiscChargeOverride.visible(false);
        markupTrans_MCROriginalMiscChargeValue.visible(false);
        if (#MCRPriceOverrideEnabled)
        {
            // Only show overrides if channel using order price control.
            markupTrans_MCRMiscChargeOverride.visible(enableOrderPriceControl);
            markupTrans_MCROriginalMiscChargeValue.visible(enableOrderPriceControl);

            if (enableOrderPriceControl && retailInfocodeId != "")
            {
                markupTrans_ds.object(fieldNum(MarkupTrans, mcrReasonCode)).visible(true);
                mcrOverride.visible(true);
            }
        }

        if (RetailParameters::isRetailAutoChargesEnabledAndInUse())
        {
            chargeOverrides.visible(true);
            salesLineDetails.visible(true);
            isOverriddenLine.visible(true);
            isProrated.visible(true);
            chargeLevel.visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrMiscChargeAdd</Name>
				<Source><![CDATA[
    void mcrMiscChargeAdd()
    {
        if (mcrCallCenterInUse)
        {
            // Load these values so that the appropriate values go into the order event.
            mcrOrderEventTypeMisc  = MCROrderEventType::MiscChargeAdd;
            retailInformationSubcodeId = "";
            retailInfocodeId = "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrMiscChargeOverrideNo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Recalculates the total miscellaneous charge amount and creates a miscellaneous charge overrided turned off order event.
    /// </summary>
    void mcrMiscChargeOverrideNo()
    {
        if (#MCRPriceOverrideEnabled)
        {
            if (mcrCallCenterInUse)
            {
                markupTrans.mcrMiscChargeOverride = NoYes::No;
                markupTrans.Value = markupTrans.mcrOriginalMiscChargeValue;
                // Load these values so that the appropriate values go into the order event.
                mcrOrderEventTypeMisc  = MCROrderEventType::MiscChargeOverrideTurnedOff;
                retailInformationSubcodeId = "";
                retailInfocodeId = "";
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrMiscChargeOverrideYes</Name>
				<Source><![CDATA[
    void mcrMiscChargeOverrideYes(RetailInformationSubcodeId _retailInformationSubcodeId)
    {
        if (#MCRPriceOverrideEnabled)
        {
            if (mcrCallCenterInUse)
            {
                // write the reason code to the line when the user enters it.
                markupTrans.mcrReasonCode = _retailInformationSubcodeId;
                markupTrans.mcrRetailInfocodeId = RetailMCRChannelTable::findForCurrentUser().mcrPriceOverrideRetailInfocodeId;

                markupTrans.mcrMiscChargeOverride = NoYes::Yes;
                // Load these values so that the appropriate values go into the order event.
                mcrOrderEventTypeMisc  = MCROrderEventType::MiscChargeOverrideTurnedOn;
                retailInformationSubcodeId = _retailInformationSubcodeId;
                retailInfocodeId = markupTrans.mcrRetailInfocodeId;
                //Sets the miscellaneous charge override flag when the overriding a miscellaneous charge.
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshLinesAfterChargeAllocation</Name>
				<Source><![CDATA[
    internal void refreshLinesAfterChargeAllocation()
    {
        Object callerForm = element.args().caller();
        if (formHasMethod(callerForm, identifierStr(refreshLinesAfterChargeAllocation)))
        {
            callerForm.refreshLinesAfterChargeAllocation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCustInvoiceLine_IN</Name>
				<Source><![CDATA[
    void refreshCustInvoiceLine_IN()
    {
        Object callerForm = element.args().caller();

        if (callerForm)
        {
            if (callerForm is CustIFreeInvoice)
            {
                callerForm.refreshCustInvoiceLine_IN();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshPurchLine_IN</Name>
				<Source><![CDATA[
    void refreshPurchLine_IN()
    {
        Object callerForm = element.args().caller();

        if (callerForm)
        {
            if (callerForm.name() == formStr(PurchTable))
            {
                callerForm.refreshPurchLine_IN();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshPurchParmLine_IN</Name>
				<Source><![CDATA[
    void refreshPurchParmLine_IN()
    {
        Object callerForm = element.args().caller();

        if (callerForm)
        {
            if (callerForm.name() == formStr(PurchEditLines))
            {
                callerForm.refreshPurchParmLine_IN();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshSalesLine_IN</Name>
				<Source><![CDATA[
    void refreshSalesLine_IN()
    {
        Object callerForm = element.args().caller();

        if (callerForm)
        {
            if (callerForm.name() == formStr(SalesTable))
            {
                callerForm.refreshSalesLine_IN();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshSalesQuotationLine_IN</Name>
				<Source><![CDATA[
    void refreshSalesQuotationLine_IN()
    {
        Object callerForm = element.args().caller();

        if (callerForm)
        {
            if (callerForm.name() == formStr(SalesQuotationTable))
            {
                callerForm.refreshSalesQuotationLine_IN();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reReadMarkupds_IN</Name>
				<Source><![CDATA[
    public void reReadMarkupds_IN()
    {
        markupTrans_ds.reread();
        markupTrans_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshVendInvoiceInfoLine_IN</Name>
				<Source><![CDATA[
    public void refreshVendInvoiceInfoLine_IN()
    {
        Object callerForm = element.args().caller();

        if (callerForm)
        {
            if (callerForm.name() == formStr(VendEditInvoice))
            {
                callerForm.refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        if (callerTableId == tableNum(VendInvoiceTrans))
        {
            buttonLedgerTransactVoucher.visible(true);
        }

        if (countryRegion_RU)
        {
            if (callerTableId == tableNum(PurchTable) ||
                callerTableId == tableNum(PurchLine)  ||
                callerTableId == tableNum(SalesTable) ||
                callerTableId == tableNum(SalesLine))
            {
                allocated_RU.visible(false);
                postedTax_RU.visible(false);
            }

            switch (callerTableId)
            {
                case tableNum(VendInvoiceJour):
                case tableNum(VendInvoiceTrans):
                case tableNum(CustInvoiceJour):
                case tableNum(CustInvoiceTrans):
                case tableNum(GoodsInRouteJour_RU):
                case tableNum(GoodsInRouteTrans_RU):
                    buttonLedgerTransactVoucher.visible(true);
                    break;
                default:
                    break;
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>toggleMarkupTrans_ds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows intercepting the <c>active</c> method of <c>markupTrans_ds</c>
    /// </summary>
    /// <param name = "_markupTrans_ds">The <c>markupTrans_ds</c> data source</param>
    delegate void toggleMarkupTrans_ds(FormDataSource _markupTrans_ds)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unaffectedWarning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a message if a connected MarkupTrans record is modified or deleted.
    /// </summary>
    public void unaffectedWarning()
    {
        Common parent;
        PurchTable purchTable;
        PurchLine purchLine;
        PurchId purchId;

        if (useConnected && !isConnectedTo && strLen(markupConnectedFrom.valueStr()) > 0)
        {
            parent = markupTrans.parentRecord();
            switch (parent.TableId)
            {
                case tableNum(PurchTable):
                    purchTable = parent;
                    purchId = purchTable.PurchId;
                    break;
                case tableNum(PurchLine):
                    purchLine = parent;
                    purchId = purchLine.PurchId;
                    break;
                default:
                    return;
            }
            warning(strFmt("@SYS119357", markupConnectedFrom.valueStr(), purchId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAfterMarkupTransAllocatedFromLC_SA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh data source and update MarkupTrans after allocating from shipment of bank LC
    /// </summary>
    /// // <GSA>
    public void updateAfterMarkupTransAllocatedFromLC_SA()
    {
        MarkupTrans localMarkupTrans;
        markupTrans_ds.research();
        if (element.args().record())
        {
            localMarkupTrans = element.args().record() as MarkupTrans;
            localMarkupTrans.reread();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCallerDatasourceForDistributions</Name>
				<Source><![CDATA[
    // </GSA>

    void updateCallerDatasourceForDistributions()
    {
        // update the calling form's datasource.
        MarkupTrans::updateCallerDatasource(element.args().record());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isChargeOnBOE</Name>
				<Source><![CDATA[
    private boolean isChargeOnBOE()
    {
        boolean result;
        Object callerForm = element.args().caller();
        if (callerForm.name() == formStr(PurchEditLines))
        {
            result = callerForm.isChargeOnBOEEnabled();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign_IN</Name>
				<Source><![CDATA[
    void updateDesign_IN()
    {
        NoYesId miscChargesMarked;
        PurchLine purchLine;
        PurchTable purchTable;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        PurchParmLine purchParmLine;
        VendInvoiceTrans vendInvoiceTrans;

        miscChargesMarked = LedgerParameters::find().Miscellaneouscharges_IN;
        Allocation_IN.visible(miscChargesMarked);
        allocation_IN.visible(miscChargesMarked);

        TaxInfo_IN.visible(
            isIndiaTaxMarked &&
            (callerTableId == tableNum(SalesTable) ||
             callerTableId == tableNum(SalesLine) ||
             callerTableId == tableNum(SalesQuotationTable) ||
             callerTableId == tableNum(SalesQuotationLine) ||
             callerTableId == tableNum(CustInvoiceJour) ||
             callerTableId == tableNum(CustInvoiceTrans)));

        markupDivision_IN.visible(miscChargesMarked
                                 && (callerTableId == tableNum(PurchTable) || callerTableId == tableNum(PurchLine)
                                 || callerTableId == tableNum(VendInvoiceInfoSubTable) || callerTableId == tableNum(VendInvoiceInfoTable)
                                 || callerTableId == tableNum(VendInvoiceInfoLine)));

        if (!miscChargesMarked)
        {
            allocateMarkup_IN.visible(false);
        }
        else
        {
            switch (callerTableId)
            {
                case tableNum(PurchTable):
                case tableNum(PurchParmSubTable):
                case tableNum(PurchLine):
                case tableNum(VendInvoiceJour):
                case tableNum(VendInvoiceTrans):
                case tableNum(PurchParmLine):
                case tableNum(VendInvoiceInfoLine):
                case tableNum(PurchRFQCaseTable):
                case tableNum(PurchRFQCaseLine):
                case tableNum(PurchRFQTable):
                case tableNum(PurchRFQLine):
                case tableNum(PurchReqLine):
                    allocateMarkup_IN.visible(false);
                    break;
                case tableNum(SalesTable):
                case tableNum(SalesLine):
                case tableNum(CustInvoiceJour):
                case tableNum(CustInvoiceTrans):
                case tableNum(SalesQuotationTable):
                case tableNum(SalesQuotationLine) :
                case tableNum(CustInvoiceTable) :
                case tableNum(SalesBasket):
                case tableNum(SalesBasketLine):
                // The 'Allocation' button is made invisible if the Misc. charges form is opened from the below mentioned tables
                case tableNum(CustomsExportAssessableValue_IN):
                case tableNum(CustomsExportOrderLine_IN):
                    markupTrans_ds.object(fieldNum(MarkupTrans, MarkUpAllocateAfter_IN)).visible(false);
                    allocateMarkup_IN.visible(false);
                    break;
                case tableNum(CustomsImportAssessableValue_IN):
                case tableNum(TmpIndirectTaxInquiryTable_IN):
                case tableNum(TmpVATInquiryTable_IN):
                case tableNum(TmpSalesTaxInquiryTable_IN):
                case tableNum(TmpCustomsInquiryTable_IN):
                case tableNum(TmpServiceTaxInquiryTable_IN):
                case tableNum(TmpExciseInquiryTable_IN):
                case tableNum(CustomsVendBOEJour_IN):
                case tableNum(CustomsVendBOETrans_IN):
                    allocateMarkup_IN.visible(false);
                    break;
            }
        }

        if (TaxParameters::find().Customs_IN  || TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            switch (callerTableId)
            {
                case tableNum(SalesTable):
                case tableNum(SalesLine):
                case tableNum(CustInvoiceJour):
                case tableNum(CustInvoiceTrans):
                case tableNum(SalesQuotationTable):
                case tableNum(SalesQuotationLine) :
                case tableNum(CustInvoiceTable) :
                case tableNum(CustInvoiceLine) :
                case tableNum(SalesBasket):
                case tableNum(SalesBasketLine):
                case tableNum(CustomsExportAssessableValue_IN):
                case tableNum(CustomsExportOrderLine_IN):
                case tableNum(CustomsImportAssessableValue_IN):
                case tableNum(PurchRFQCaseTable):
                case tableNum(PurchRFQCaseLine):
                case tableNum(PurchRFQTable):
                case tableNum(PurchRFQLine):
                case tableNum(PurchReqLine):
                case tableNum(CustConfirmTrans):
                case tableNum(VendInvoiceInfoTable):
                    markupTrans_ds.object(fieldNum(MarkupTrans, NotionalPct_IN)).visible(false);
                    markupTrans_ds.object(fieldNum(MarkupTrans, NotionalCharges_IN)).visible(false);
                    markupTrans_ds.object(fieldNum(MarkupTrans, CustomsAssessableValue_IN)).visible(true);
                    break;
                case tableNum(VendInvoiceJour):
                case tableNum(PurchParmSubTable):
                case(tableNum(VendInvoiceInfoSubLine)):
                    markupTrans_ds.object(fieldNum(MarkupTrans, NotionalPct_IN)).visible(false);
                    markupTrans_ds.object(fieldNum(MarkupTrans, NotionalCharges_IN)).visible(false);
                    markupTrans_ds.object(fieldNum(MarkupTrans, CustomsAssessableValue_IN)).visible(false);
                    break;
                case tableNum(PurchParmTable):
                    if (this.isChargeOnBOE())
                    {
                        purchTable = PurchParmTable::findRecId(callerRecId).purchTable();
                        allocateMarkup_IN.visible(false);
                    }
                    else
                    {
                        markupTrans_ds.object(fieldNum(MarkupTrans, NotionalPct_IN)).visible(false);
                        markupTrans_ds.object(fieldNum(MarkupTrans, NotionalCharges_IN)).visible(false);
                        markupTrans_ds.object(fieldNum(MarkupTrans, CustomsAssessableValue_IN)).visible(false);
                    }
                    break;
                case tableNum(PurchLine):
                    purchLine   = PurchLine::findRecId(callerRecId);
                    purchTable  = purchLine.purchTable();
                    break;
                case tableNum(VendInvoiceTrans):
                    vendInvoiceTrans    = VendInvoiceTrans::findRecId(callerRecId);
                    purchTable          = PurchTable::find(vendInvoiceTrans.PurchId);
                    break;
                case tableNum(PurchParmLine):
                    purchParmLine   = PurchParmLine::findRecId(callerRecId);
                    purchTable      = purchParmLine.purchTable();
                    break;
                case tableNum(VendInvoiceInfoLine):
                    vendInvoiceInfoLine = VendInvoiceInfoLine::findRecId(callerRecId);
                    purchTable          = vendInvoiceInfoLine.purchTable();
                    break;
                case tableNum(PurchTable):
                    purchTable = PurchTable::findRecId(callerRecId);
                    break;
                case tableNum(VendInvoiceInfoSubTable):
                    purchTable = PurchTable::find(VendInvoiceInfoSubTable::findRecId(callerRecId).OrigPurchId);
                    break;
                case tableNum(CustomsVendBOEJour_IN):
                    purchTable = PurchTable::find(CustomsVendBOEJour_IN::find(callerRecId).PurchId);
                    break;
                case tableNum(CustomsVendBOETrans_IN):
                    purchTable = PurchTable::find(CustomsVendBOETrans_IN::find(callerRecId).OrigPurchId);
                    break;
            }

            if (purchTable)
            {
                // <GTE>
                if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() && purchTable.purchTable_W().CustomsImportOrder_IN == NoYes::No)
                {
                    markupTrans_ds.object(fieldNum(MarkupTrans, NotionalPct_IN)).visible(false);
                    markupTrans_ds.object(fieldNum(MarkupTrans, NotionalCharges_IN)).visible(false);
                    markupTrans_ds.object(fieldNum(MarkupTrans, CustomsAssessableValue_IN)).visible(true);
                }
                // </GTE>
                else
                {
                    markupTrans_ds.object(fieldNum(MarkupTrans, NotionalPct_IN)).visible(miscChargesMarked);
                    markupTrans_ds.object(fieldNum(MarkupTrans, NotionalCharges_IN)).visible(miscChargesMarked);
                    markupTrans_ds.object(fieldNum(MarkupTrans, CustomsAssessableValue_IN)).visible(false);
                }
            }
            
            // <GTE>
            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() && callerTableId != tableNum(PurchRFQCaseLine))
            {
                TaxInfo_IN.visible(false);
            }
            // </GTE>
        }
        else
        {
            markupTrans_ds.object(fieldNum(MarkupTrans, NotionalPct_IN)).visible(false);
            markupTrans_ds.object(fieldNum(MarkupTrans, NotionalCharges_IN)).visible(false);
            markupTrans_ds.object(fieldNum(MarkupTrans, CustomsAssessableValue_IN)).visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign_MX</Name>
				<Source><![CDATA[
    void updateDesign_MX()
    {
        EInvoice_MX.visible(
            callerTableId == tableNum(SalesTable) ||
            callerTableId == tableNum(SalesLine) ||
            callerTableId == tableNum(SalesQuotationTable) ||
            callerTableId == tableNum(SalesQuotationLine) ||
            callerTableId == tableNum(CustInvoiceJour) ||
            callerTableId == tableNum(CustInvoiceTrans) ||
            callerTableId == tableNum(ProjInvoiceJour) ||
            callerTableId == tableNum(ProjInvoiceItem));

        EInvoiceWithholdingTax_MX.visible(
            callerTableId == tableNum(PurchTable) ||
            callerTableId == tableNum(PurchLine) ||
            callerTableId == tableNum(VendInvoiceInfoTable) ||
            callerTableId == tableNum(VendInvoiceInfoLine) ||
            callerTableId == tableNum(VendInvoiceJour) ||
            callerTableId == tableNum(VendInvoiceTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDisableEditAndCreateOnMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the edition and creation of <c>MarkupTrans</c> record should be disabled.
    /// </summary>
    /// <returns>
    /// true, if the edition and creation of <c>MarkupTrans</c> record should be disabled; otherwise, false.
    /// </returns>
    protected boolean shouldDisableEditAndCreateOnMarkupTrans()
    {
        return markupTrans.TransTableId == tableNum(InventTransferLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableTaxInformationWhenCreateItemToLedgerCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disable tax information when create charges code as item to ledger account type.
    /// </summary>
    protected void disableTaxInformationWhenCreateItemToLedgerCharge()
    {
        if(countryRegion_IN
           && markupTrans.markupTable().CustType == MarkupType::Item
           && markupTrans.markupTable().VendType == MarkupType::LedgerAccount)
        {
            TransTaxInformation.enabled(false);
        }
        else
        {
            TransTaxInformation.enabled(true);
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>MarkupTrans</Name>
				<Methods>
					<Method>
						<Name>isPurchRFQCaseTableListPageEditable</Name>
						<Source><![CDATA[
        /// <summary>
        /// Checks if charges can be edited.
        /// </summary>
        /// <param name="_purchRFQCaseTable">
        /// The <c>PurchRFQCaseTable</c> record for which <c>MarkupTrans</c> form is opened.
        /// </param>
        /// <returns>
        /// true when the record that the charges relate to can be edited; otherwise, false.
        /// </returns>
        public boolean isPurchRFQCaseTableListPageEditable(PurchRFQCaseTable _purchRFQCaseTable)
        {
            boolean allowEdit;

            if (_purchRFQCaseTable)
            {
                if (PurchRFQParameters::isRFQAmendmentEnabled())
                {
                    allowEdit = _purchRFQCaseTable.StatusHigh == PurchRFQStatus::Created
                                    || _purchRFQCaseTable.isAmended == NoYes::Yes;
                }
                else
                {
                    allowEdit = _purchRFQCaseTable.checkUpdate(false);
                }
            }

            return allowEdit;
        }

]]></Source>
					</Method>
					<Method>
						<Name>isPurchRFQReplyTableListPageEditable</Name>
						<Source><![CDATA[
        /// <summary>
        /// Checks if charges can be edited.
        /// </summary>
        /// <param name="_purchRFQTable">
        /// The <c>PurchRFQTable</c> record for which <c>MarkupTrans</c> form is opened.
        /// </param>
        /// <returns>
        /// true when the record that the charges relate to can be edited; otherwise, false.
        /// </returns>
        public boolean isPurchRFQReplyTableListPageEditable(PurchRFQTable _purchRFQTable)
        {
            return _purchRFQTable && _purchRFQTable.checkUpdate(false);
        }

]]></Source>
					</Method>
					<Method>
						<Name>setSalesTaxControlsEnabled_IN</Name>
						<Source><![CDATA[
        public void setSalesTaxControlsEnabled_IN()
        {
            if ((callerTableId == tableNum(SalesTable)
                || callerTableId == tableNum(SalesLine)
                || callerTableId == tableNum(SalesQuotationTable)
                || callerTableId == tableNum(SalesQuotationLine))
                && MarkupTable_IN::isAllowTax(MarkupModuleType::Cust, markupTrans.MarkupCode))
            {
                markupTrans_ds.object(fieldNum(MarkupTrans, TaxGroup)).allowEdit(true);
                markupTrans_ds.object(fieldNum(MarkupTrans, TaxItemGroup)).allowEdit(true);
            }
            else
            {
                markupTrans_ds.object(fieldNum(MarkupTrans, TaxGroup)).allowEdit(false);
                markupTrans_ds.object(fieldNum(MarkupTrans, TaxItemGroup)).allowEdit(false);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged()
        {
            MarkupKeep markupKeep;

            super();

            if (markupTrans_ds.getPosition() > 0 && markupTrans.SourceDocumentLine != 0)
            {
                // The datasource has an active record.
                buttonDistributeAmount.enabled(true);
            }
            else
            {
                // There are no records loaded by the datasource.
                buttonDistributeAmount.enabled(false);
            }

            if (countryRegion_RU)
            {
                //refresh fields with precalculated tax
                markupKeep = markupTrans.Keep;
                markupTrans_ds.reread();

                markupTrans.Keep = markupKeep;
                markupTrans_ds.refresh();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>isSalesTableListPageEditable</Name>
						<Source><![CDATA[
        /// <summary>
        /// Checks is Misc Charges can be edited.
        /// </summary>
        /// <param name="_salesTable">
        /// The SalesTable record used in result calculation.
        /// </param>
        /// <returns>
        /// true when the order that the charges relate to can be edited; otherwise, false.
        /// </returns>
        /// <remarks>
        /// Called from MarkupTrans form.
        /// </remarks>

        public boolean isSalesTableListPageEditable(SalesTable _salesTable)
        {
            return _salesTable && _salesTable.checkUpdate(false,false);
        }

]]></Source>
					</Method>
					<Method>
						<Name>checkFieldsAreChanged</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets the boolean variables if the fields are changed.
        /// </summary>
        private void checkFieldsAreChanged()
        {
            MarkupTrans originalMarkup;

            originalMarkup = markupTrans.orig();

            deleteAllJournalLines = (markupTrans.MarkupCategory != originalMarkup.MarkupCategory) ||
                                    (markupTrans.MarkupCode     != originalMarkup.MarkupCode)     ||
                                    (markupTrans.CurrencyCode   != originalMarkup.CurrencyCode)   ||
                                    (markupTrans.Value          != originalMarkup.Value)          ||
                                    (markupTrans.TaxGroup       != originalMarkup.TaxGroup)       ||
                                    (markupTrans.TaxItemGroup   != originalMarkup.TaxItemGroup)   ||
                                    (markupTrans.OverrideSalesTax != originalMarkup.OverrideSalesTax);

            if (deleteAllJournalLines)
            {
                recreateTax = true;
            }

            if (markupTrans.RecId != 0)
            {
                updateDistributions = (markupTrans.Value        != originalMarkup.Value) ||
                                      (markupTrans.CurrencyCode != originalMarkup.CurrencyCode);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        void delete()
        {
            Object                  formDataSourceObject;
            MarkupUseInMatching     markupUseInMatching = markupTrans.useInMatching();
            boolean                 updateCaller = (markupTrans.RecId != 0);

            super();

            skipRefresh = markupTrans_ds.totalNumberOfRows() <= 1;

            if (!updateCaller)
            {
                // No reason to update the calling datasource if markupTrans was never inserted
                return;
            }

            if (element.args().parmObject() == null)
            {
                MarkupTrans::updateCallerDatasource(element.args().record(),markupUseInMatching);
            }
            else
            {
                // When this from is called from MarkupTransInquiry, it gathers and summarizes misc
                // charge information.  It needs to get the correct VendInvoiceInfo* row as the record that
                // is passed to this form.  Because the VendInvoiceInfo* row is not apart of the form
                // data sources, refreshing it will not refresh any of the linked data sources.
                // In order to solve this problem, the VendInvoiceInfoTable data source is passed that
                // is a form data source.  We can now invoke the refresh on it.
                formDataSourceObject = element.args().parmObject() as FormDataSource;
                if (formDataSourceObject)
                {
                    if (formDataSourceHasMethod(formDataSourceObject, identifierStr(setTouched)))
                    {
                        formDataSourceObject.setTouched();
                    }
                    if (formDataSourceHasMethod(formDataSourceObject, identifierStr(markupTransMatchingChanged)))
                    {
                        formDataSourceObject.markupTransMatchingChanged();
                    }
                }
            }

            // <GIN>
            this.refreshDataSourceOnDeletion_IN();
            // </GIN>
        }

]]></Source>
					</Method>
					<Method>
						<Name>refreshDataSourceOnDeletion_IN</Name>
						<Source><![CDATA[
        /// <summary>
        /// Refresh form data source When delete markupTrans record.
        /// </summary>
        void refreshDataSourceOnDeletion_IN()
        {
            if (countryRegion_IN && TaxParameters::checkTaxParameters_IN())
            {
                if (LedgerParameters::find().Miscellaneouscharges_IN)
                {
                    markupTrans.updateAssessableValue_IN(callerTableId, callerRecId);
                    switch (callerTableId)
                    {
                        case  tableNum(PurchLine):
                            element.refreshPurchLine_IN();
                            break;
                        case  tableNum(PurchParmLine):
                            element.refreshPurchParmLine_IN();
                            break;
                        case  tableNum(SalesLine):
                            element.refreshSalesLine_IN();
                            break;
                        case  tableNum(SalesQuotationLine):
                            element.refreshSalesQuotationLine_IN();
                            break;
                        case  tableNum(CustInvoiceLine):
                            element.refreshCustInvoiceLine_IN();
                            break;
                        case tableNum(VendInvoiceInfoLine):
                            element.refreshVendInvoiceInfoLine_IN();
                            break;
                    }
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        void create(boolean append = false)
        {
            Common common;
            Common orig;
            FormDataSource formDataSource;
            SalesLine localSalesLine;

            super(append);
            // set the add global variable to true on create.
            addMiscCharge = true;

            if (element.args().caller() && element.args().caller() is CustIFreeInvoice)
            {
                // CustFreeInvoice saves the record prior to opening MarkupTrans form
                return;
            }

            common = element.args().record();
            // Update the calling record to make sure recent values are written to database for defaulting on MarkupTrans records.
            if (common && element.args().parmObject() == null && FormDataUtil::isFormDataSource(common))
            {
                if (element.args().record().TableId == tableNum(SalesLine)
                    && (mcrCallCenterInUse
                    || tradeBrokerConfig))
                {
                    localSalesLine = element.args().record() as SalesLine;
                    
                    ttsbegin;
                    localSalesLine.updateWithoutUpdatingDeliveryScheduleLines();
                    ttscommit;

                    // Reset the MarkupTrans.LineNum field after the broker charges have been deleted and recreated.
                    markupTrans.LineNum = MarkupTrans::lastLineNum(common.TableId, common.RecId) + 1;
                }
                else
                {
                    formDataSource  = FormDataUtil::getFormDataSource(common);
                    orig            = common.orig();
                    if (formDataSource && !common.equal(orig))
                    {
                        formDataSource.write();
                    }
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>editingAllowedOrChargeOnBOE</Name>
						<Source><![CDATA[
        private boolean editingAllowedOrChargeOnBOE()
        {
            return markupTrans.editingAllowed(callerHasVendorInvoice, isCallerDatasourceEditable) || element.isChargeOnBOE();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        int  active()
        {
            int  ok;
            boolean allowEdit = this.editingAllowedOrChargeOnBOE();

            SalesLine               salesLine;
            PurchLine               purchLine;
            VendInvoiceTrans        vendInvoiceTrans;
            CustomJournalTrans_RU   customJournalTrans;
            CustomJournalTable_RU   customJournalTable;
            boolean                 allowEditDelete;

            FormRun     formRun;

            ok = super();

            element.disableTaxInformationWhenCreateItemToLedgerCharge();

            // disable editing if the line is a broker fee.
            if (markupTrans.mcrBrokerContractFee
                && (mcrCallCenterInUse
                || tradeBrokerConfig))
            {
                markupTrans_ds.allowEdit(false);
                markupTrans_ds.allowDelete(false);
            }
            else
            {
                markupTrans_ds.allowEdit(allowEdit);
                markupTrans_ds.allowDelete(allowEdit);
            }

            markupTrans_ds.allowCreate(allowEdit);

            if (!markupTrans.interCompanyCreateAllowed())
            {
                markupTrans_ds.allowCreate  (false);
            }

            if (!markupTrans.markupTable().allowEditCurrency())
            {
                markupTrans_ds.object(fieldNum(MarkupTrans, CurrencyCode)).allowEdit(false);
            }
            else
            {
                markupTrans_ds.object(fieldNum(MarkupTrans, CurrencyCode)).allowEdit(true);
            }
            // The Override Misc charge flag will only be enabled when it is on. That way the user can turn it off.  If
            // it is off, the only way it can be turned on is by the system.
            if (mcrCallCenterInUse
                || tradeBrokerConfig)
            {
                if (markupTrans.mcrMiscChargeOverride == NoYes::Yes)
                {
                    markupTrans_MCRMiscChargeOverride.allowEdit(NoYes::Yes);
                    mcrOrderEventTypeMisc = MCROrderEventType::MiscChargeOverrideTurnedOn;
                }
                else
                {
                    markupTrans_MCRMiscChargeOverride.allowEdit(NoYes::No);
                    mcrOrderEventTypeMisc = MCROrderEventType::MiscChargeOverrideTurnedOff;
                }

                markupTrans_ds.object(fieldNum(MarkupTrans, MarkupCategory)).allowEdit(true);

                //Removed the code to allow editing of keep flag and removed that field from the grid.
                //If markupCategory is percent it should always be on, otherwise it should always be off.
                //moved to validateWrite of the table.
                retailInformationSubcodeId = "";
                chargeOverrideUserIdMisc = "";
            }

            if (useConnected && isConnectedTo && connectedType <= 2)
            {
                markupConnectButton.enabled(element.canConnect());
                markupConnectedTo.text(markupTrans.connectedTo());
            }

            if (countryRegion_RU)
            {
                switch (markupTrans.TransTableId)
                {
                    case (tableNum(SalesLine)) :
                        select firstonly customJournalTrans
                            join RecId from salesLine
                            where salesLine.TableId         == markupTrans.TransTableId                     &&
                                  salesLine.RecId           == markupTrans.TransRecId                       &&
                                  salesLine.InventTransId   == customJournalTrans.SalesPurchInventTransId   &&
                                  salesLine.SalesId         == customJournalTrans.SalesPurchId;
                        break;
                    case (tableNum(PurchLine)) :
                        select firstonly customJournalTrans
                            join RecId from purchLine
                            where purchLine.TableId         == markupTrans.TransTableId                     &&
                                  purchLine.RecId           == markupTrans.TransRecId                       &&
                                  purchLine.InventTransId   == customJournalTrans.SalesPurchInventTransId   &&
                                  purchLine.PurchId         == customJournalTrans.SalesPurchId;
                        break;
                    case (tableNum(VendInvoiceTrans)) :
                        select firstonly customJournalTrans
                            join RecId from vendInvoiceTrans
                            where vendInvoiceTrans.TableId          == markupTrans.TransTableId                     &&
                                  vendInvoiceTrans.RecId            == markupTrans.TransRecId                       &&
                                  vendInvoiceTrans.InventTransId    == customJournalTrans.SalesPurchInventTransId   &&
                                  vendInvoiceTrans.InvoiceId        == customJournalTrans.InvoiceId                 &&
                                  vendInvoiceTrans.InvoiceDate      == customJournalTrans.InvoiceDate;
                        break;
                }

                customJournalTable = customJournalTrans.customJournalTable();

                if (markupTrans.markupTable().CustomPaymType_RU == CustomPaymType_RU::Empty)
                {
                    if (markupTrans.RecId && customJournalTable.CustomJournalStatus == CustomJournalStatus_RU::Posted && customJournalTable.DlvTermId)
                    {
                        allowEditDelete = markupTrans_ds.allowEdit() && !MarkupDlvTermConnection_RU::exist(customJournalTable.DlvTermId, markupTrans.MarkupCode);
                    }
                    else
                    {
                        allowEditDelete = markupTrans_ds.allowEdit() && true;
                    }
                }
                else
                {
                    allowEditDelete = false;
                }

                markupTrans_ds.allowEdit(allowEditDelete);
                markupTrans_ds.allowDelete(allowEditDelete);
            }
            else if (element.shouldDisableEditAndCreateOnMarkupTrans())
            {
                markupTrans_ds.allowEdit(false);
                markupTrans_ds.allowCreate(false);
            }

            // <GSA>
            if (isBankLCImportChargeFeatureEnabled_SA)
            {
                element.configMarkupTransFieldsForLC_SA();
            }
            // </GSA>

            if (isIndiaTaxMarked)
            {
                markupTrans_ds.setSalesTaxControlsEnabled_IN();
                markupTrans_ds.object(fieldNum(MarkupTrans, NotionalPct_IN)).enabled(markupTrans.NotionalCharges_IN);
                element.enableFieldsActive_IN();
                if (element.args().dataset() == tableNum(CustomsExportAssessableValue_IN) ||
                    element.args().dataset() == tableNum(CustomsImportAssessableValue_IN))
                {
                    markupTrans_ds.allowEdit    (false);
                    markupTrans_ds.allowDelete  (false);
                    markupTrans_ds.allowCreate  (false);
                }

                markupTrans_IN_ds.allowCreate(markupTrans_ds.allowCreate());
                markupTrans_IN_ds.allowEdit(markupTrans_ds.allowEdit());
                markupTrans_IN_ds.allowDelete(markupTrans_ds.allowDelete());
            }

            if (BrazilParameters::isEnabled())
            {
                formRun = element.args().caller();
                if (formRun && formRun.name() == formStr(PurchTable))
                {
                    if (markupTrans.isSiscomex_BR())
                    {
                        markupTrans_ds.object(fieldNum(MarkupTrans, CurrencyCode)).allowEdit(false);
                    }
                }
            }

            if (Tax::isTaxIntegrationEnabledForTable(markupTrans.TransTableId))
            {
                markupTrans_ds.object(fieldNum(MarkupTrans, TaxGroup)).allowEdit(markupTrans.OverrideSalesTax == NoYes::Yes);
                markupTrans_ds.object(fieldNum(MarkupTrans, TaxItemGroup)).allowEdit(markupTrans.OverrideSalesTax == NoYes::Yes);
            }

            element.toggleMarkupTrans_ds(markupTrans_ds);

            element.markupTransFromVendInvoiceInfoListPageAllowEdit();

            return ok;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editEstimatedAmount</Name>
						<Source><![CDATA[
        edit AmountCur editEstimatedAmount(boolean set, MarkupTrans _markupTrans, AmountCur _amount)
        {
            MonetaryDocumentLineMap monetaryDocumentLine;

            if (!set)
            {
                if (!estimatedAmountCache.exists(_markupTrans.RecId))
                {
                    // Reuse persisted calculated charge amount instead of recalculating
                    if (_markupTrans.CalculatedAmount != 0)
                    {
                        _amount = _markupTrans.getCalculatedAmountRepresentable();
                        estimatedAmountCache.insert(_markupTrans.RecId, _amount);
                        return _amount;
                    }

                    monetaryDocumentLine = MonetaryDocumentLineMap::initFromCommon(caller);

                    if (!monetaryDocumentLine)
                    {
                        // The edit field does not make any sense to show in this context, since we do not calculate it
                        // and persisted calculation doesn't exist.
                        editEstimatedAmount.allowEdit(false);
                        editEstimatedAmount.visible(false);
                        return 0;
                    }
                    else
                    {
                        _amount = Markup::calcMarkupAmount(_markupTrans,
                                                           monetaryDocumentLine.Qty,
                                                           monetaryDocumentLine.LineAmount,
                                                           0,
                                                           caller.MonetaryDocumentLineMap::inclTax(),
                                                           NoYes::No,                                   // Default value
                                                           _markupTrans.CurrencyCode,                   // Default value
                                                           _markupTrans.TransDate,                      // Default value
                                                           0,                                           // Default value
                                                           0,                                           // Default value
                                                           null,                                        // Default value
                                                           false,                                       // Default value
                                                           0,                                           // Default value
                                                           '',                                          // Default value
                                                           false,                                       // Default value
                                                           false);                                      // Not default value : _isIntercompanyMarkup false we don't want to generate intercompany charges
                    }

                    estimatedAmountCache.insert(_markupTrans.RecId, _amount);
                }
                else
                {
                    _amount = estimatedAmountCache.lookup(_markupTrans.RecId);
                }
            }
            else
            {
                // Since markup amount was changed by user, let's convert the charge into a fixed charge, and copy over the amount to become the value
                // Changing these fields will automatically trigger clearing the calculated amount cache
                _markupTrans.MarkupCategory = MarkupCategory::Fixed;
                _markupTrans.Keep = NoYes::No;
                _markupTrans.Value = _amount;
            }

            return  _amount;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        //  When calling from the sales order recap screen. Build the
        //  query so that the misc charges for both the sales header
        //  and sales lines will come in.
        public void executeQuery()
        {
            Query                   query;
            QueryBuildDataSource    queryBuildDataSource;
            QueryBuildRange         queryBuildRange;
            Common                  common;
            str                     recIds;

            if (skipRefresh)
            {
                skipRefresh = false;
            }

            // Added check for the return recap form also.
            if ((element.args().parm() == RetailCharges::getMiscChargesExchangeParm()
                || element.args().parm() == RetailCharges::getMiscChargesReturnParm())
                && mcrCallCenterInUse)
            {
                this.query().dataSourceNo(1).clearRanges();
                // Get all the markupTrans recIds for the
                // sales header and lines.
                common = element.args().record();
                recIds = MarkupTrans::mcrGetSalesRecs(element.args().record());

                query = new Query();
                queryBuildDataSource = query.addDataSource(tableNum(MarkupTrans));
                queryBuildRange  = queryBuildDataSource.addRange(fieldNum(MarkupTrans, RecId));
                // If no RecIds for markupTrans are associated with the sales order, passing in an empty
                // string was causing there to be no filter on recId and returning all records.
                if (recIds)
                {
                    queryBuildRange.value(recIds);
                }
                else
                {
                    queryBuildRange.value(SysQuery::valueEmptyString());
                }

                queryBuildDataSource.orderMode(OrderMode::OrderBy);
                queryBuildDataSource.addSortField(fieldNum(MarkupTrans, TransTableId), SortOrder::Descending);

                this.query(query);
            }
            
            if (AutoChargesSetupSequenceCompoundFeature::instance().isEnabled())
            {
                markupTrans_ds.query().dataSourceTable(tableNum(MarkupTrans)).addSortField(fieldNum(MarkupTrans, Position), SortOrder::Ascending);
                markupTrans_ds.query().dataSourceTable(tableNum(MarkupTrans)).addSortField(fieldNum(MarkupTrans, Sequence), SortOrder::Ascending);
            }

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initializes the <c>MarkupTrans</c> form data source.
        /// </summary>
        public void init()
        {
            QueryBuildRange rangeIsDeleted;

            super();

            rangeIsDeleted = this.query().dataSourceTable(tableNum(MarkupTrans)).addRange(fieldNum(MarkupTrans, IsDeleted));
            rangeIsDeleted.value(SysQuery::value(NoYes::No));
            rangeIsDeleted.status(RangeStatus::Hidden);

            markupTrans_ds.cacheAddMethod(tableMethodStr(MarkupTrans, connectedTo));
            if (mcrCallCenterInUse
                || tradeBrokerConfig)
            {
                markupTrans_ds.cacheAddMethod(tableMethodStr(MarkupTrans, mcrDisplayLineItem));
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        void  write()
        {
            Object                  formDataSourceObject;
            CustInvoiceTable        custInvoiceTable;
            PurchTable              purchTable;
            PurchLine               purchLine;
            PurchReqTable           purchReqTable;
            PurchReqLine            purchReqLine;
            MarkupValue             overrideMiscCharge, originalMiscCharge;
            CurrencyCode            currencyCode;
            MCROrderEventTable      orderEventTable;
            boolean                 miscChargeValueChanged;
            InventTransId           inventTransId = "";

            switch (markupTrans.TransTableId)
            {
                case tableNum(CustInvoiceTable):
                    custInvoiceTable = CustInvoiceTable::findRecId(markupTrans.TransRecId);
                    break;
                case tableNum(PurchTable):
                    purchTable = PurchTable::findRecId(markupTrans.TransRecId);
                    break;
                case tableNum(PurchLine):
                    purchLine = PurchLine::findRecId(markupTrans.TransRecId);
                    break;
                case tableNum(PurchReqLine):
                    purchReqLine = PurchReqLine::find(markupTrans.TransRecId);
                    purchReqTable = purchReqLine.purchReqTable();
                    break;

                default:
                    break;
            }

            markupTrans_ds.checkFieldsAreChanged();

            boolean isCalcWHTInInvoiceWithChargeEnabled = TaxWithholdingGlobalFeature::isCalcWHTInInvoiceWithChargeEnabled();

            if (recreateTax)
            {
                switch (markupTrans.TransTableId)
                {
                    case tableNum(PurchTable):
                        PurchTableType purchTableTypeLoc = purchTable.type();
                        purchTableTypeLoc.deleteTaxUncommitted();
                        if (isCalcWHTInInvoiceWithChargeEnabled)
                        {
                            purchTableTypeLoc.deleteTaxWithholdUncommitted();
                        }
                        break;
                    case tableNum(PurchLine):
                        PurchLineType purchLineTypeLoc = purchLine.type();
                        purchLineTypeLoc.deleteTaxUncommitted();
                        if (!markupTrans.TaxGroup || !markupTrans.TaxItemGroup)
                        {
                            purchLineTypeLoc.deleteChargeTaxUncommited(markupTrans);
                        }
                        if (isCalcWHTInInvoiceWithChargeEnabled)
                        {
                            purchLineTypeLoc.deleteTaxWithholdUncommitted();
                        }
                        break;
                    case tableNum(CustInvoiceTable):
                        TaxUncommitted::deleteForDocumentHeader(callerTableId, callerRecId, true);
                        break;
                    case tableNum(CustInvoiceLine):
                        if (SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
                        {
                            custInvoiceTable = CustInvoiceLine::find(markupTrans.TransRecId).custInvoiceTable();
                            TaxUncommitted::deleteForDocumentHeader(custInvoiceTable.TableId,custInvoiceTable.RecId, true);
                        }
                        break;
                    case tableNum(PurchReqLine):
                        TaxUncommitted::deleteForDocumentHeader(purchReqTable.TableId, purchReqTable.RecId, true);
                        break;
                    case tableNum(VendInvoiceInfoTable):
                        if (isCalcWHTInInvoiceWithChargeEnabled)
                        {
                            VendInvoiceInfoTable vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(markupTrans.TransRecId);
                            TaxWithholdUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId, vendInvoiceInfoTable.RecId);
                        }
                        TaxUncommitted::deleteForDocumentHeader(callerTableId, callerRecId, true);
                        break;
                    case tableNum(VendInvoiceInfoSubTable):
                        if (isCalcWHTInInvoiceWithChargeEnabled)
                        {
                            VendInvoiceInfoTable vendInvoiceInfoTable = VendInvoiceInfoSubTable::findRecId(markupTrans.TransRecId).vendInvoiceInfoTable();
                            TaxWithholdUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId, vendInvoiceInfoTable.RecId);
                        }
                        TaxUncommitted::deleteForDocumentHeader(callerTableId, callerRecId, true);
                        break;
                    case tableNum(VendInvoiceInfoLine):
                        if (isCalcWHTInInvoiceWithChargeEnabled)
                        {
                            VendInvoiceInfoTable vendInvoiceInfoTable = VendInvoiceInfoLine::findRecId(markupTrans.TransRecId).vendInvoiceInfoTable();
                            TaxWithholdUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId, vendInvoiceInfoTable.RecId);
                        }
                        TaxUncommitted::deleteForDocumentHeader(callerTableId, callerRecId, true);
                        break;
                    default:
                        TaxUncommitted::deleteForDocumentHeader(callerTableId, callerRecId, true);
                        break;
                }

                recreateTax = false;
            }
            if (mcrCallCenterInUse)
            {
                if (markupTrans.orig().Value != markupTrans.Value)
                {
                    miscChargeValueChanged = true;
                }
                //write the most recent reason code to the markuptrans table.
                if (mcrOrderEventTypeMisc && miscChargeValueChanged)
                {
                    markupTrans.mcrRetailInfocodeId = retailInfocodeId;
                    markupTrans.mcrReasonCode = retailInformationSubcodeId;
                }
            }

            try
            {
                super();
                if (isMarkupTrans_INEnabled)
                {
                    markupTrans_IN.SysExtensionSerializerExtensionMap::insertAfterBaseTable(markupTrans);
                }
            }
            catch (Exception::Error)
            {
                if (!markupTrans.RecId)
                {
                    markupTrans.SourceDocumentLine = 0;
                }
            }

            element.unaffectedWarning();
            this.reread();
            skipRefresh = true;

            if ((element.args().parm() == RetailCharges::getMiscChargesExchangeParm()
                || element.args().parm() == RetailCharges::getMiscChargesReturnParm())
                && mcrCallCenterInUse)
            {
                this.executeQuery();
            }

            if (markupTrans.TransTableId == tableNum(VendInvoiceInfoTable) ||
                markupTrans.TransTableId == tableNum(VendInvoiceInfoSubTable) ||
                markupTrans.TransTableId == tableNum(VendInvoiceInfoLine))
            {
                VendInvoiceInfoMarkupMatchingTolerance::createIfAbsent(markupTrans);
            }

            if (element.args().parmObject() == null)
            {
                MarkupTrans::updateCallerDatasource(element.args().record(),
                                                    markupTrans.useInMatching(),
                                                    deleteAllJournalLines);

                if (Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationUtils::getBusinessProcessBySourceHeadingTable(markupTrans.TransTableId, markupTrans.TransRecId)))
                {
                    MarkupTrans_ds.reread();
                    MarkupTrans_ds.refresh();
                }

                // The record is updated and the need for SubLedger journal lines
                // to be deleted has been notified to the caller.
                deleteAllJournalLines = false;
            }
            else
            {
                // When this from is called from MarkupTransInquiry, it gathers and summarizes misc
                // charge information.  It needs to get the correct VendInvoiceInfo* row as the record that
                // is passed to this form.  Because the VendInvoiceInfo* row is not apart of the form
                // data sources, refreshing it will not refresh any of the linked data sources.
                // In order to solve this problem, the VendInvoiceInfoTable data source is passed that
                // is a form data source.  We can now invoke the refresh on it.
                formDataSourceObject = element.args().parmObject() as FormDataSource;
                if (formDataSourceObject)
                {
                    if (formDataSourceHasMethod(formDataSourceObject, identifierStr(setTouched)))
                    {
                        formDataSourceObject.setTouched();
                    }
                    if (formDataSourceHasMethod(formDataSourceObject, identifierStr(markupTransMatchingChanged)))
                    {
                        formDataSourceObject.markupTransMatchingChanged();
                    }
                }
            }

            if (updateDistributions)
            {
                switch (markupTrans.TransTableId)
                {
                    case tableNum(CustInvoiceTable):
                        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(markupTrans);
                        break;
                    default:
                        break;
                }

                updateDistributions = false;
            }
            // Write the order event for override price. If an event around misc charges occured and reason code was assigned meaning that the price changed.
            if (addMiscCharge)
            {
                mcrOrderEventTypeMisc = MCROrderEventType::MiscChargeAdd;
                addMiscCharge = false;
            }
            if (mcrProcessEvent && mcrOrderEventTypeMisc && miscChargeValueChanged)
            {
                if (mcrOrderEventTypeMisc == MCROrderEventType::MiscChargeOverrideTurnedOn ||
                    mcrOrderEventTypeMisc == MCROrderEventType::MiscChargeOverrideTurnedOff)
                {
                    originalMiscCharge = markupTrans.mcrOriginalMiscChargeValue;
                    overrideMiscCharge = markupTrans.Value;
                }
                // if an add
                if (mcrOrderEventTypeMisc == MCROrderEventType::MiscChargeAdd)
                {
                    originalMiscCharge = markupTrans.Value;
                    overrideMiscCharge = 0;
                }

                currencyCode       = markupTrans.CurrencyCode;

                // set the table id and rec id in the order event table so that the misc charge record is tied to the
                // appropriate event.
                orderEventTable.setTableAndRecId(markupTrans.TableId,markupTrans.RecId);

                if (markupTrans.TransTableId == tableNum(SalesLine))
                {
                    inventTransId = SalesLine::findRecId(markupTrans.TransRecId).InventTransId;
                }
                orderEventTable.insertPriceChange(salesId, mcrOrderEventTypeMisc,
                                            chargeOverrideUserIdMisc, originalMiscCharge,
                                            currencyCode, overrideMiscCharge,
                                            retailInformationSubcodeId, inventTransId);

                // Need to refresh.
                markupTrans_ds.research();
            }

            if (countryRegion_IN
                && TaxParameters::checkTaxParameters_IN())
            {
                if (LedgerParameters::find().Miscellaneouscharges_IN)
                {
                    markupTrans.updateAssessableValue_IN();
                    switch (callerTableId)
                    {
                        case  tableNum(PurchLine):
                            element.refreshPurchLine_IN();
                            break;
                        case  tableNum(SalesLine):
                            element.refreshSalesLine_IN();
                            break;
                        case  tableNum(SalesQuotationLine):
                            element.refreshSalesQuotationLine_IN();
                            break;
                        case  tableNum(CustInvoiceLine):
                            element.refreshCustInvoiceLine_IN();
                            break;
                        case  tableNum(PurchParmLine):
                            element.refreshPurchParmLine_IN();
                            break;
                        case  tableNum(VendInvoiceInfoLine):
                            element.refreshVendInvoiceInfoLine_IN();
                    }
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        void  initValue()
        {
            CustInvoiceTable custInvoiceTable;
            SalesTable      salesTableLocal;

            markupTrans_ds.allowEdit(true);

            markupTrans.TransTableId    = callerTableId;
            markupTrans.TransRecId      = callerRecId;

            super();

            markupTrans.ModuleCategory  = headingLine;
            markupTrans.ModuleType      = moduleType;

            if (callerTableId == tableNum(CustInvoiceTable))
            {
                custInvoiceTable = element.args().record();
                markupTrans.TaxGroup = custInvoiceTable.TaxGroup;
                markupTrans.TaxItemGroup = custInvoiceTable.TaxItemGroup;
                MarkupTrans.OverrideSalesTax = custInvoiceTable.OverrideSalesTax;
            }
            // if a plan is associated and system set up
            // to allocate the charge to the plan then set the
            // eligible field.
            if (mcrCallCenterInUse)
            {
                if (MCROrderParameters::find().InstallPlanApplyMiscCharge == MCRInstallPlanApplyMiscCharge::InstallPlan)
                {
                    markupTrans.mcrInstallmentEligible = NoYes::Yes;
                }
                // not installment eligible if a return sales order
                switch (callerTableId)
                {
                    case tableNum(SalesLine):
                        salesTableLocal = SalesLine::findRecId(callerRecId).salesTable();
                        break;
                    case tableNum(SalesTable):
                        salesTableLocal = SalesTable::findRecId(callerRecId);
                        break;
                }
                if (salesTableLocal && salesTableLocal.SalesType == SalesType::ReturnItem)
                {
                    markupTrans.mcrInstallmentEligible = NoYes::No;
                }
                // Need to know what misc charges were added by the user.
                markupTrans.mcrMarkupTransCreatedBy = MCRMarkupTransCreatedBy::User;

                if (element.args().caller() && element.args().caller() is CustIFreeInvoice)
                {
                    //When payments are enabled on the Free Text Invoice form,
                    //set the Keep flag to true.
                    //This is to keep the misc. charge from being deleted during posting
                    //because it is needed in the total sales amount calculation
                    //that occurs in the payment over/under validation just after posting.
                    if (RetailMCRChannelTable::findForCurrentUser())
                    {
                        markupTrans.Keep = NoYes::Yes;
                    }
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>isCallerDatasourceEditable</Name>
						<Source><![CDATA[
        /// <summary>
        /// Determines if modifications can be made in the form.
        /// </summary>
        /// <param name="_callerDataSource">
        /// Datasource from calling form.
        /// </param>
        /// <param name="_callerRecord">
        /// Record from calling form.
        /// </param>
        /// <returns>
        /// true if form should be editable.
        /// </returns>
        boolean isCallerDatasourceEditable(FormDataSource _callerDataSource, Common _callerRecord)
        {
            SysElementName  formName;
            boolean         dataSourceEditable  = _callerDataSource.allowEdit();

            CustInvoiceLine         custInvoiceLine;
            SourceDocumentLineItem  sourceDocumentLineItem;

            if (_callerDataSource.formRun())
            {
                formName = _callerDataSource.formRun().name();
            }
            switch (formName)
            {
                case formStr(SalesTableListPage):
                    dataSourceEditable = this.isSalesTableListPageEditable(_callerRecord);
                    break;
                case formStr(SalesQuotationListPage),
                    formStr(ReturnTableListPage):
                    dataSourceEditable = true;
                    break;
                case formStr(PurchReqTable) :
                    if (element.args().caller() &&
                        element.args().caller() is FormRun &&
                        formHasMethod(element.args().caller(), identifierStr(allowEditMarkupTrans)))
                    {
                        dataSourceEditable = element.args().caller().allowEditMarkupTrans();
                    }
                    break;
                case formStr(PurchRFQCaseTableListPage),
                         formStr(PurchRFQCaseTable):
                    if (_callerRecord.TableId == tableNum(PurchRFQCaseTable))
                    {
                        dataSourceEditable = this.isPurchRFQCaseTableListPageEditable(_callerRecord);
                    }
                    break;
                case formStr(PurchRFQReplyTableListPage):
                    dataSourceEditable = this.isPurchRFQReplyTableListPageEditable(_callerRecord);
                    break;
                case formStr(CustFreeInvoice):
                    if (dataSourceEditable && element.args().record().TableId == tableNum(CustInvoiceLine))
                    {
                        custInvoiceLine = element.args().record() as CustInvoiceLine;
                        sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLineImplementation(custInvoiceLine);
                        dataSourceEditable = sourceDocumentLineItem.parmIsDocumentLineEditable();
                    }
                    break;
                default:
                    if (!dataSourceEditable &&
                        element.args().caller() &&
                        element.args().caller() is FormRun &&
                        formHasMethod(element.args().caller(), identifierStr(allowEditMarkupTrans)))
                    {
                        dataSourceEditable = element.args().caller().allowEditMarkupTrans();
                    }
            }
            return dataSourceEditable && MarkupTrans::markupAllowed(_callerRecord);
        }

]]></Source>
					</Method>
					<Method>
						<Name>mcrInitFromCaller</Name>
						<Source><![CDATA[
        void mcrInitFromCaller()
        {
            switch (callerTableId)
            {
                // Do not allow delete when launched from sales table or sales line.
                // The user should use the override functionality and set the misc
                // charge to 0.  This way an event is logged.
                case tableNum(SalesTable):
                    markupTrans.initFromSalesTable(element.args().record());
                    this.allowDelete(false);
                    allowDeletes = false;
                    break;
                case tableNum(SalesLine):
                    markupTrans.initFromSalesLine(element.args().record());
                    this.allowDelete(false);
                    allowDeletes = false;
                    break;
                case tableNum(PurchTable):
                    markupTrans.initFromPurchTable(element.args().record());
                    break;
                case tableNum(PurchLine):
                    markupTrans.initFromPurchLine(element.args().record());
                    break;
                case tableNum(VendInvoiceJour):
                    markupTrans.initFromVendInvoiceJour(element.args().record());
                    break;
                case tableNum(VendInvoiceTrans):
                    markupTrans.initFromVendInvoiceTrans(element.args().record());
                    break;
                case tableNum(CustInvoiceTable):
                    markupTrans.initFromCustInvoiceTable(element.args().record());
                    break;
                case tableNum(SalesBasket):
                    markupTrans.initFromSalesBasket(element.args().record());
                    break;
                case tableNum(SalesBasketLine):
                    markupTrans.initFromSalesBasketLine(element.args().record());
                    break;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        void  linkActive()
        {
            SalesTable          salesTableLocal;
            SalesLine           salesLine;
            Common              callerRecord = element.args().record();
            FormDataSource      callerDataSource = FormDataUtil::getFormDataSource(callerRecord);

            GoodsInRouteJour_RU  goodsInRouteJour;
            GoodsInRouteTrans_RU goodsInRouteTrans;

            if (countryRegion_RU)
            {
                isCallerDatasourceEditable = allowEditMarkupTrans && this.isCallerDatasourceEditable(callerDataSource, callerRecord);
            }
            else
            {
                isCallerDatasourceEditable = this.isCallerDatasourceEditable(callerDataSource, callerRecord);
            }

            markupTrans_ds.allowEdit(isCallerDatasourceEditable);
            markupTrans_ds.allowCreate(isCallerDatasourceEditable);

            markupTrans_ds.allowDelete(allowDeletes && isCallerDatasourceEditable);
            markupConnectButton.enabled(element.canConnect());

            if (callerRecord.RecId)
            {
                [callerTableId, callerRecId] = MarkupTrans::resetCallerReferenceFromRFQJourToRFQTable(callerRecord.TableId, callerRecord.RecId);

                // When coming from the recap or return recap do not assign these as this is a
                // view/modify only mode and these will not change.
                if (mcrCallCenterInUse
                    || tradeBrokerConfig)
                {
                    if (element.args().parm() != RetailCharges::getMiscChargesExchangeParm() && element.args().parm() != RetailCharges::getMiscChargesReturnParm())
                    {
                        transTableId.value  (queryValue(callerTableId));
                        transRecId.value    (queryValue(callerRecId));
                    }
                    if (element.args().parm() == RetailCharges::getMiscChargesExchangeParm() || element.args().parm() == RetailCharges::getMiscChargesReturnParm())
                    {
                        markupTrans_ds.allowCreate(false);
                    }
                }

                callerHasVendorInvoice = MarkupTrans::hasVendorInvoice(callerTableId, callerRecId);

                switch (callerTableId)
                {
                    case tableNum(SalesTable):
                        salesTableLocal = callerRecord as SalesTable;
                        markupTrans_ds.object(fieldNum(MarkupTrans, Keep)).enabled(!salesTableLocal.isInterCompanyOrder());
                        break;
                    case tableNum(SalesLine):
                        salesLine = callerRecord as SalesLine;
                        markupTrans_ds.object(fieldNum(MarkupTrans, Keep)).enabled(!salesLine.isInterCompanyOrder());
                        break;
                    case tableNum(GoodsInRouteJour_RU):
                        goodsInRouteJour = element.args().record();
                        transTableId.value  (queryValue(tableNum(CustInvoiceJour)));
                        if (goodsInRouteJour.Cancel)
                        {
                            transRecId.value    (queryValue(goodsInRouteJour.cancelCustInvoiceJour().RecId));
                        }
                        else
                        {
                            transRecId.value    (queryValue(goodsInRouteJour.custInvoiceJour().RecId));
                        }
                        break;
                    case tableNum(GoodsInRouteTrans_RU):
                        goodsInRouteTrans = element.args().record();
                        transTableId.value  (queryValue(tableNum(CustInvoiceTrans)));
                        if (goodsInRouteTrans.goodsInRouteJour().Cancel)
                        {
                            transRecId.value    (queryValue(goodsInRouteTrans.custInvoiceTransCancel().RecId));
                        }
                        else
                        {
                            transRecId.value    (queryValue(goodsInRouteTrans.custInvoiceTrans().RecId));
                        }
                        markupTrans_ds.query().dataSourceTable(tableNum(MarkupTrans)).addRange(fieldNum(MarkupTrans, GoodsInRouteId_RU)).value(goodsInRouteTrans.GoodsInRouteId);
                        break;
                }

                // Making ONLY viewing allowed for specific callers
                if (MarkupTrans::allowOnlyView(callerTableId) && element.isChargeOnBOE() == false)
                {
                    markupTrans_ds.allowEdit(false);
                    markupTrans_ds.allowCreate(false);
                    markupTrans_ds.allowDelete(false);
                    markupTrans_ds.insertIfEmpty(false);
                    markupConnectButton.enabled(false);
                }
            }
            // Do not allow creates if the user is coming from the sales order recap or return recap
            if (element.args().parm() == RetailCharges::getMiscChargesExchangeParm() || element.args().parm() == RetailCharges::getMiscChargesReturnParm())
            {
                markupTrans_ds.allowCreate(false);
            }

            // <GSA>
            if (isBankLCImportChargeFeatureEnabled_SA)
            {
                element.configLCControls_SA(element.args().caller() as FormRun);
            }
            // </GSA>

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>markupAllowEdit</Name>
						<Source><![CDATA[
        [SysClientCacheDataMethodAttribute(false)]
        public display MarkupAllowEdit markupAllowEdit(MarkupTrans _markupTrans)
        {
            return this.editingAllowedOrChargeOnBOE();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateDelete</Name>
						<Source><![CDATA[
        public boolean validateDelete()
        {
            element.unaffectedWarning();
            return super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret = super();

            // Markup grid row changed, let's clear the calculated amount cache
            if (estimatedAmountCache.exists(markupTrans.RecId))
            {
                estimatedAmountCache.remove(markupTrans.RecId);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>CurrencyCode</DataField>
						<Methods>
							<Method>
								<Name>dataChanged</Name>
								<Source><![CDATA[
            public void dataChanged()
            {
                super();

                // Markup currency code was changed, let's clear the calculated amount cache
                if (estimatedAmountCache.exists(markupTrans.RecId))
                {
                    estimatedAmountCache.remove(markupTrans.RecId);
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>MarkupCategory</DataField>
						<Methods>
							<Method>
								<Name>dataChanged</Name>
								<Source><![CDATA[
            public void dataChanged()
            {
                super();

                // Markup category was changed, let's clear the calculated amount cache
                if (estimatedAmountCache.exists(markupTrans.RecId))
                {
                    estimatedAmountCache.remove(markupTrans.RecId);
                }

                // Do not allow Proportional category to be used for other than for purchase orders
                if (moduleType != MarkupModuleType::Vend
                    && markupTrans.MarkupCategory == MarkupCategory::Proportional)
                {
                    Box::stop("@SCM:ProportionalChargeCategoryError");
                    markupTrans.MarkupCategory = MarkupCategory::Fixed;
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>MarkupCode</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                if (   markupTrans.ModuleType == MarkupModuleType::Cust
                    && element.args().parm() != RetailCharges::getMiscChargesReturnParm()
                    && (mcrCallCenterInUse || tradeBrokerConfig))
                {
                    MarkupTable::mcrLookupSalesCodes(_formControl);
                }
                else
                {
                    SysTableLookup sysTableLookup = element.markupCodeLookup(_formControl);
                    sysTableLookup.performFormLookup();
                }
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                boolean disableCurrencyCode = false;
                FormRun formRun;
                // Moved init from caller call above super so that when go to main table
                // is selected on a blank record it sets the module type on the record.
                // Before, the module type was always defaulting to the invent, so if a
                // record was added through go to main table it was of module type invent.
                if (mcrCallCenterInUse
                    || tradeBrokerConfig)
                {
                    markupTrans_ds.mcrInitFromCaller();
                }

                super();

                markupTrans.initFromCaller(callerTableId, element.args().record());

                if (BrazilParameters::isEnabled())
                {
                    formRun = element.args().caller();
                    if (formRun && formRun.name() == formStr(PurchTable))
                    {
                        disableCurrencyCode = markupTrans.setCurrencyCode_BR();
                    }
                }

                if (!markupTrans.markupTable().allowEditCurrency()
                || disableCurrencyCode
                )
                {
                    markupTrans_ds.object(fieldNum(MarkupTrans, CurrencyCode)).allowEdit(false);
                }
                else
                {
                    markupTrans_ds.object(fieldNum(MarkupTrans, CurrencyCode)).allowEdit(true);
                }
                if (isIndiaTaxMarked)
                {
                    markupTrans_ds.setSalesTaxControlsEnabled_IN();
                }

                if (Tax::isTaxIntegrationEnabledForTable(markupTrans.TransTableId))
                {
                    markupTrans_ds.object(fieldNum(MarkupTrans, TaxGroup)).allowEdit(markupTrans.OverrideSalesTax == NoYes::Yes);
                    markupTrans_ds.object(fieldNum(MarkupTrans, TaxItemGroup)).allowEdit(markupTrans.OverrideSalesTax == NoYes::Yes);
                }
            }

]]></Source>
							</Method>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;
                // <GSA>
                MarkupTable markupTable;
                // </GSA>

                ret = super();

                // <GSA>
                markupTable = MarkupTable::find(markupTrans.ModuleType, markupTrans.MarkupCode);

                if (markupTable.IsLetterOfCredit_SA)
                {
                    // The bank document Misc. Charges code is not allowed.
                    ret = checkFailed("@SYS332266");
                }

                if (ret)
                {
                    if (isPOHasBankLC)
                    {
                        if (markupTable.VendType != MarkupType::CustVend)
                        {
                            // The order is marked as Letter of credit. The Misc. Charges code's credit type must be Vender.
                            ret = checkFailed("@SYS332267");
                        }
                    }
                }
                // </GSA>

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>MCRMiscChargeOverride</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                boolean                             currentUserPermission;
                Args                                args;
                MarkupTrans                         markupTransLocal;
                container                           userIdReasonCode;

                #define.Cancel('Cancel')

                super();

                // if the user is trying to take Price Override off, then check for permissions.
                if (!markupTrans.mcrMiscChargeOverride
                    && enableOrderPriceControl)
                {
                    element.mcrMiscChargeOverrideNo();
                    chargeOverrideUserIdMisc = curUserId();
                }

                markupTrans_ds.executeQuery();
                markupTrans_ds.refresh();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>NotionalCharges_IN</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if (markupTrans.NotionalCharges_IN == NoYes::No)
                {
                    markupTrans.NotionalPct_IN          = 0;
                    markupTrans_ds.object(fieldNum(MarkupTrans, NotionalPct_IN)).enabled(false);
                }
                else
                {
                    markupTrans_ds.object(fieldNum(MarkupTrans, NotionalPct_IN)).enabled(true);
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>OverrideSalesTax</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                MarkupTrans_ds.object(fieldNum(MarkupTrans, TaxGroup)).allowEdit(markupTrans.OverrideSalesTax == NoYes::Yes);
                MarkupTrans_ds.object(fieldNum(MarkupTrans, TaxItemGroup)).allowEdit(markupTrans.OverrideSalesTax == NoYes::Yes);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Value</DataField>
						<Methods>
							<Method>
								<Name>dataChanged</Name>
								<Source><![CDATA[
            public void dataChanged()
            {
                super();

                // Markup value was changed, let's clear the calculated amount cache
                if (estimatedAmountCache.exists(markupTrans.RecId))
                {
                    estimatedAmountCache.remove(markupTrans.RecId);
                }
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                boolean                               currentUserPermission;
                MarkupTrans                           markupTransLocal;
                Args                                  args;
                container                             userIdReasonCode;
                RetailInformationSubcodeId            retailInformationSubcodeIdLocal;
                boolean                               override;

                #define.Cancel('Cancel')

                super();

                if (countryRegion_IN)
                {
                    if ((LedgerParameters::find().Miscellaneouscharges_IN   ||
                        TaxParameters::find().Customs_IN)                   &&
                        markupTrans.Value < 0)
                    {
                        markupTrans.NotionalCharges_IN      = NoYes::No;
                        markupTrans.NotionalPct_IN          = 0;
                    }

                    element.enableFieldsActive_IN();
                }
                // Only run the override logic if launched from salesTable or SalesLine
                if (enableOrderPriceControl)
                {
                    // if record in update mode
                    if (markupTrans.RecId)
                    {
                        element.mcrDisableForm();
                        MCROverrideLogin_OverrideMiscCharge mcrOverrideLogin_OverrideMiscCharge = new MCROverrideLogin_OverrideMiscCharge();
                        retailInformationSubcodeIdLocal = mcrOverrideLogin_OverrideMiscCharge.launchPriceOverrideReasonCode(markupTrans, NoYes::Yes);
                        if (retailInformationSubcodeIdLocal != #Cancel)
                        {
                            element.mcrMiscChargeOverrideYes(retailInformationSubcodeIdLocal);
                        }
                        // Clear the misc charge values when the user cancels
                        else
                        {
                            markupTrans.mcrMiscChargeOverride = NoYes::No;
                            markupTrans.mcrReasonCode = '';
                            markupTrans.mcrRetailInfocodeId = '';
                            markupTrans.Value = markupTrans.orig().Value;
                        }
                        element.mcrEnableForm();
                    }
                    else
                    {
                        element.mcrMiscChargeAdd();
                    }

                    chargeOverrideUserIdMisc = curUserId();

                    // The Override misc charge flag will only be enabled when it is on. That way the user can turn it off.  If
                    // it is off, the only way it can be turned on is by the system.
                    if (markupTrans.mcrMiscChargeOverride == NoYes::Yes)
                    {
                        markupTrans_MCRMiscChargeOverride.allowEdit(NoYes::Yes);
                    }
                    else
                    {
                        markupTrans_MCRMiscChargeOverride.allowEdit(NoYes::No);
                    }

                    markupTrans_ds.refresh();
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>MarkupTrans_IN</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            if (isMarkupTrans_INEnabled &&
                markupTrans_IN.MarkupTrans != 0)
            {
                // no-op because a record with an empty FK is not valid
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            if (isMarkupTrans_INEnabled &&
                isIndiaTaxMarked)
            {
                this.linkType(FormLinkType::OuterJoin);
            }
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>CompanyLocation</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                markupTrans_IN_ds.object(fieldNum(MarkupTrans_IN, TaxInformation)).modified();
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                return TaxInformation_IN::locationLookup(_formReferenceControl, CompanyInfo::current());
            }

]]></Source>
							</Method>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            public void jumpRef()
            {
                TaxInformation_IN::jumpRefLocationAddressForm(markupTrans_IN.CompanyLocation, this);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>TaxInformation</DataField>
						<Methods>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                return TaxInformation_IN::lookup(_formReferenceControl, markupTrans_IN.CompanyLocation);
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                taxInformation_IN_DS.linkActive();
            }

]]></Source>
							</Method>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            public void jumpRef()
            {
                TaxInformation_IN::jumpRef(markupTrans_IN.TaxInformation, this);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>ButtonDistributeAmount</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (callerTableId == tableNum(PurchTable))
            {
                if (markupTrans.MarkupCategory != MarkupCategory::Fixed || markupTrans.markupCustTypeItem())
                {
                    throw error("@SYS136030");
                }
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateMarkup_IN</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();
            markupTrans_ds.research();
            element.refreshPurchLine_IN();
            element.refreshVendInvoiceInfoLine_IN();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MarkupConnectButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Responds when the <c>MarkupConnectButton</c> form button is clicked.
        /// </summary>
        void clicked()
        {
            Args args = new Args();
            MenuFunction mf;
            super();
            switch (headingLine)
            {
                case HeadingLine::Heading:
                    mf = new MenuFunction(menuitemDisplayStr(MarkupTrans_ConnectPurchTable), MenuItemType::Display);
                    break;
                case HeadingLine::Line:
                    mf = new MenuFunction(menuitemDisplayStr(MarkupTrans_ConnectPurchLine), MenuItemType::Display);
                    break;
            }
            args.record(markupTrans);
            mf.run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MarkupDivision_IN</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            FormRun formRun;
            Args    args  = new Args();

            args.caller(element);
            args.record(element.args().record());

            formRun = new MenuFunction(menuitemDisplayStr(MarkupDivision_IN), MenuItemType::Display).create(args);
            formRun.run();

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MarkupTrans_MarkupCode1</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.disableTaxInformationWhenCreateItemToLedgerCharge();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MarkupTrans_MarkupCategory1</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            FieldId fieldId = fieldNum(MarkupTrans, MarkupCategory);

            if (RetailChargeOverrideAuditing::promptForChargeOverrideReasonCode(markupTrans, fieldId))
            {
                RetailChargeOverrideAuditing::setChargeWasOverridden(markupTrans);
            }
            else
            {
                // If they need to input a reason code and don't, then don't let them override the value.
                markupTrans.MarkupCategory = str2Enum(markupTrans.MarkupCategory, markupTrans.PreviousOverriddenFieldValue);
            }
        
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;
        
            ret = super();

            markupTrans.PreviousOverriddenFieldValue = enum2Str(markupTrans.MarkupCategory);
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MarkupTrans_Value1</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>enter</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Stores the original miscellaneous charge value when modified.
        /// </summary>
        public void enter()
        {
            super();
            if (!markupTrans.mcrMiscChargeOverride)
            {
                markupTrans.mcrOriginalMiscChargeValue = this.realValue();
            }

            RetailChargeOverrideAuditing::setPreviousChargeValue(markupTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            FieldId fieldId = fieldNum(MarkupTrans, Value);

            if (RetailChargeOverrideAuditing::promptForChargeOverrideReasonCode(markupTrans, fieldId))
            {
                RetailChargeOverrideAuditing::setChargeWasOverridden(markupTrans);
            }
            else 
            {
                // If they need to input a reason code and don't, then don't let them override the value.
                markupTrans.Value = markupTrans.PreviousValue;
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SalesTax_TaxGroup</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            markupTrans.previousOverriddenFieldValue = markupTrans.TaxGroup;

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            FieldId fieldId = fieldNum(MarkupTrans, TaxGroup);

            if (RetailChargeOverrideAuditing::promptForChargeOverrideReasonCode(markupTrans, fieldId))
            {
                RetailChargeOverrideAuditing::setChargeWasOverridden(markupTrans);
            }
            else
            {
                // If they need to input a reason code and don't, then don't let them override the value.
                markupTrans.TaxGroup = markupTrans.PreviousOverriddenFieldValue;
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SalesTax_TaxItemGroup</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            markupTrans.previousOverriddenFieldValue = markupTrans.TaxItemGroup;

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            FieldId fieldId = fieldNum(MarkupTrans, TaxItemGroup);

            if (RetailChargeOverrideAuditing::promptForChargeOverrideReasonCode(markupTrans, fieldId))
            {
                RetailChargeOverrideAuditing::setChargeWasOverridden(markupTrans);
            }
            else
            {
                // If they need to input a reason code and don't, then don't let them override the value.
                markupTrans.TaxItemGroup = markupTrans.PreviousOverriddenFieldValue;
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MarkupTrans_MCRReasonCode</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            RetailMCRChannelTable::lookupReasonCodes(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<AllowPreLoading>No</AllowPreLoading>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>MarkupTrans</Name>
			<Table>MarkupTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BankLCImportChargeAllocation_SA</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CalculatedAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CalculatedAmountMST_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CalculatedProratedAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrectedMarkupTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustInvoiceLineIdRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustInvoiceLineTemplate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustomsAssessableValue_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustVendPosted_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchrateSecond_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchRate_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FacturedAmount_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FromAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GoodsInRouteId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GoodsInRouteToDelivery_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyCompanyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyInvoiceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyMarkupUseValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyMarkupValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyRefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanySkipUpdate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsAdvancedLineProrated</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsAutoCharge</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsCompound</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsDeleted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsModified</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsOverriddenLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsOverriddenProratedLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsTieredCharge</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemPosted_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Keep</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkUpAllocateAfter_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkupAutoLineRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkupAutoTableRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkupCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkupClassification_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkupCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRBrokerContractFee</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRCouponMarkup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRInstallmentEligible</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRMarkupTransCreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRMiscChargeOverride</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCROriginalMiscChargeValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRReasonCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRRetailInfocodeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRSavedRecID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRSavedTableID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModuleCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModuleType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NotionalCharges_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NotionalPct_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrigRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrigTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OverrideSalesTax</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackedExtensions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Position</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Posted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreviousOverriddenFieldValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreviousValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailShippingPromotionDiscount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SATProductCode_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SATUnitCode_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Sequence</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SkipInFreeInvoices_IT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SpecificUnitSymbol</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAmountExciseMST_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAmountExcise_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAmountMST_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAmountVATMST_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAmountVAT_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAutogenerated</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxExemptPriceInclusiveOriginalPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxExemptPriceInclusiveReductionAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxValueVAT_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxVATType_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdItemGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWriteCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ToAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Value</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATDocumentType_RU</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WithholdingTypeCode_MX</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>MarkupTrans_IN</Name>
			<Table>MarkupTrans_IN</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CompanyLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkupTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxInformation</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>MarkupTrans</JoinSource>
			<LinkType>Passive</LinkType>
			<AllowCheck>No</AllowCheck>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TaxInformation_IN</Name>
			<Table>TaxInformation_IN</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Commissionarate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Division</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ECCNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExciseLTUCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GSTIN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IECRegistrationNumberTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsPrimary</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ManECCRegistrationNumberTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Range</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegistrationLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesTaxRegistrationNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>STCRegistrationNumberTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TAN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TIN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TraderECCRegistrationNumberTable</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>MarkupTrans_IN</JoinSource>
			<LinkType>Active</LinkType>
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS313570</Caption>
		<DataSource xmlns="">MarkupTrans</DataSource>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<Style xmlns="">SimpleList</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>536870911</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ButtonDistributeAmount</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1207959549</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>MarkupTrans</DataSource>
								<MenuItemName>AccountingDistCustFreeInvoice</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ButtonLedgerTransactVoucher</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1308622845</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>LedgerTransVoucher1</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>AllocateMarkup_IN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>IN</CountryRegionCodes>
								<ElementPosition>1409286141</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Left>0</Left>
								<LeftMode>RightEdge</LeftMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>MarkupTrans</DataSource>
								<MenuItemName>MarkupAllocation</MenuItemName>
								<MenuItemType>Action</MenuItemType>
								<NeedsRecord>Yes</NeedsRecord>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>MarkupConnectButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1543503869</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SYS120069</HelpText>
								<NeededPermission>Create</NeededPermission>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS120070</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDropDialogButtonControl">
								<Name>DropDialogButtonAllocation_SA</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>DropDialogButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>BankLCImportAllocateMarkupTrans_SA</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>MarkupDivision_IN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>IN</CountryRegionCodes>
								<ElementPosition>2013265918</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@GLS220897</HelpText>
								<Left>0</Left>
								<LeftMode>RightEdge</LeftMode>
								<Type>CommandButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@GLS220881</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TransTaxInformation</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<DataSource>MarkupTrans</DataSource>
								<MenuItemName>TransTaxInformation</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<DataSource>MarkupTrans</DataSource>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ChargesFilter</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Skip>Yes</Skip>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterCharges</Name>
						<Skip>Yes</Skip>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Transact</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Transact</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormIntegerControl">
						<Name>MarkupTrans_Position</Name>
						<Type>Integer</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>Position</DataField>
						<DataSource>MarkupTrans</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormIntegerControl">
						<Name>MarkupTrans_Sequence</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Integer</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>Sequence</DataField>
						<DataSource>MarkupTrans</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>MarkupTrans_IsCompound</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>IsCompound</DataField>
						<DataSource>MarkupTrans</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>MarkupTrans_MarkupCode1</Name>
						<ElementPosition>76695844</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@FieldDescriptions_AccountsPayable:MarkupTrans_MarkupTrans_MarkupCode1</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>MarkupCode</DataField>
						<DataSource>MarkupTrans</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>MarkupTrans_Txt</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@FieldDescriptions_AccountsPayable:MarkupTrans_MarkupTrans_Txt</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>Txt</DataField>
						<DataSource>MarkupTrans</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>MarkupTrans_MarkupCategory1</Name>
						<ElementPosition>153391688</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>MarkupCategory</DataField>
						<DataSource>MarkupTrans</DataSource>
						<Selection>255</Selection>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>MarkupTrans_SpecificUnitSymbol</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>SpecificUnitSymbol</DataField>
						<DataSource>MarkupTrans</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>MarkupTrans_CustomsAssessableValue_IN</Name>
						<ElementPosition>306783378</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<BackgroundColor>WindowBackground</BackgroundColor>
						<DataField>CustomsAssessableValue_IN</DataField>
						<DataSource>MarkupTrans</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>MCRItem</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>477218588</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>MCRDisplayLineItem</DataMethod>
						<DataSource>MarkupTrans</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>MarkupTrans_NotionalCharges_IN</Name>
						<ElementPosition>613566756</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<BackgroundColor>WindowBackground</BackgroundColor>
						<DataField>NotionalCharges_IN</DataField>
						<DataSource>MarkupTrans</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>MarkupTrans_Keep</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>715827882</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@FieldDescriptions_AccountsPayable:MarkupTrans_MarkupTrans_Keep</HelpText>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<BackgroundColor>WindowBackground</BackgroundColor>
						<DataField>Keep</DataField>
						<DataSource>MarkupTrans</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>MarkupTrans_NotionalPct_IN</Name>
						<ElementPosition>766958445</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>NotionalPct_IN</DataField>
						<DataSource>MarkupTrans</DataSource>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>MarkupTrans_Value1</Name>
						<ElementPosition>1789569705</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@FieldDescriptions_AccountsPayable:MarkupTrans_MarkupTrans_Value1</HelpText>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>Value</DataField>
						<DataSource>MarkupTrans</DataSource>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>markupAllowEdit</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1717986916</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@FieldDescriptions_AccountsPayable:MarkupTrans_markupAllowEdit</HelpText>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>markupAllowEdit</DataMethod>
						<DataSource>MarkupTrans</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>MarkupTrans_CurrencyCode</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@FieldDescriptions_AccountsPayable:MarkupTrans_MarkupTrans_CurrencyCode</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>CurrencyCode</DataField>
						<DataSource>MarkupTrans</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>editEstimatedAmount</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Real</Type>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>editEstimatedAmount</DataMethod>
						<DataSource>MarkupTrans</DataSource>
						<Label>@SCM:CalculatedAmount</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>GoodsInRoute_RU</Name>
						<CountryRegionCodes>RU</CountryRegionCodes>
						<ElementPosition>1879048189</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>GoodsInRoute_RU_GoodsInRouteToDelivery_RU</Name>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>GoodsInRouteToDelivery_RU</DataField>
								<DataSource>MarkupTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>GoodsInRoute_RU_GoodsInRouteId_RU</Name>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>GoodsInRouteId_RU</DataField>
								<DataSource>MarkupTrans</DataSource>
							</AxFormControl>
						</Controls>
						<DataGroup>GoodsInRoute_RU</DataGroup>
						<DataSource>MarkupTrans</DataSource>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>MCRType</Name>
						<ElementPosition>1879048189</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>MarkupTrans_MCRInstallmentEligible</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<DataField>MCRInstallmentEligible</DataField>
								<DataSource>MarkupTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>MarkupTrans_MCRBrokerContractFee</Name>
								<ElementPosition>1789569705</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>MCRBrokerContractFee</DataField>
								<DataSource>MarkupTrans</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS81228</Caption>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Allocated_RU</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<CountryRegionCodes>RU</CountryRegionCodes>
						<ElementPosition>2013265917</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>Allocated_RU_CustVendPosted_RU</Name>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>CustVendPosted_RU</DataField>
								<DataSource>MarkupTrans</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>Allocated_RU_ItemPosted_RU</Name>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>ItemPosted_RU</DataField>
								<DataSource>MarkupTrans</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
						</Controls>
						<DataGroup>Allocated_RU</DataGroup>
						<DataSource>MarkupTrans</DataSource>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SalesTax_TaxGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@FieldDescriptions_AccountsPayable:MarkupTrans_SalesTax_TaxGroup</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>TaxGroup</DataField>
						<DataSource>MarkupTrans</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SalesTax_TaxItemGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@FieldDescriptions_AccountsPayable:MarkupTrans_SalesTax_TaxItemGroup</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>TaxItemGroup</DataField>
						<DataSource>MarkupTrans</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>PostedTax_RU</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<CountryRegionCodes>RU</CountryRegionCodes>
						<ElementPosition>1789569705</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>PostedTax_RU_TaxAmountVAT_RU</Name>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>TaxAmountVAT_RU</DataField>
								<DataSource>MarkupTrans</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>PostedTax_RU_TaxValueVAT_RU</Name>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>TaxValueVAT_RU</DataField>
								<DataSource>MarkupTrans</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>PostedTax_RU_TaxVATType_RU</Name>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>TaxVATType_RU</DataField>
								<DataSource>MarkupTrans</DataSource>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>PostedTax_RU_TaxAmountExcise_RU</Name>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>TaxAmountExcise_RU</DataField>
								<DataSource>MarkupTrans</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
						</Controls>
						<DataGroup>PrecalculatedTaxes_RU</DataGroup>
						<DataSource>MarkupTrans</DataSource>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>IsOverriddenLine</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ConfigurationKey>Retail</ConfigurationKey>
						<Type>CheckBox</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataField>IsOverriddenLine</DataField>
						<DataSource>MarkupTrans</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>IsProrated</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ConfigurationKey>Retail</ConfigurationKey>
						<Type>CheckBox</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataField>IsAdvancedLineProrated</DataField>
						<DataSource>MarkupTrans</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>ChargeLevel</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ConfigurationKey>Retail</ConfigurationKey>
						<Type>ComboBox</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataField>ModuleCategory</DataField>
						<DataSource>MarkupTrans</DataSource>
						<Label>@RetailAutoCharge:MarkupTransFormChargeLevelLabel</Label>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>OverrideSalesTax</Name>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>OverrideSalesTax</DataField>
						<DataSource>MarkupTrans</DataSource>
					</AxFormControl>
				</Controls>
				<DataSource>MarkupTrans</DataSource>
				<ShowRowLabels>No</ShowRowLabels>
				<Style>Tabular</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ChargesLinesDetails</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>MCROverride</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>MarkupTrans_MCROriginalMiscChargeValue</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<DataField>MCROriginalMiscChargeValue</DataField>
								<DataSource>MarkupTrans</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>MarkupTrans_MCRMiscChargeOverride</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<DataField>MCRMiscChargeOverride</DataField>
								<DataSource>MarkupTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>MarkupTrans_MCRReasonCode</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<DataField>MCRReasonCode</DataField>
								<DataSource>MarkupTrans</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS38978</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Ledger</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Ledger_Voucher</Name>
								<ElementPosition>715827882</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_AccountsPayable:MarkupTrans_Ledger_Voucher</HelpText>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>Voucher</DataField>
								<DataSource>MarkupTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>Ledger_TransDate</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_AccountsPayable:MarkupTrans_Ledger_TransDate</HelpText>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>TransDate</DataField>
								<DataSource>MarkupTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>Ledger_Posted</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_AccountsPayable:MarkupTrans_Ledger_Posted</HelpText>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>Posted</DataField>
								<DataSource>MarkupTrans</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>Value_CalculatedAmount</Name>
								<ElementPosition>1789569705</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_AccountsPayable:MarkupTrans_Value_CalculatedAmount</HelpText>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>CalculatedAmount</DataField>
								<DataSource>MarkupTrans</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
						</Controls>
						<Breakable>No</Breakable>
						<Caption>@SYS335898</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>InvoiceMatching</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>MarkupTrans_UseInMatching</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_AccountsPayable:MarkupTrans_MarkupTrans_UseInMatching</HelpText>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<BackgroundColor>WindowBackground</BackgroundColor>
								<DataMethod>UseInMatching</DataMethod>
								<DataSource>MarkupTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>MarkupConnectedTo</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_AccountsPayable:MarkupTrans_MarkupConnectedTo</HelpText>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>connectedTo</DataMethod>
								<DataSource>MarkupTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>MarkupConnectedFrom</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>connectedFrom</DataMethod>
								<DataSource>MarkupTrans</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS335897</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Intercompany</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>MarkupTrans_InterCompanyCompanyId</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_AccountsPayable:MarkupTrans_MarkupTrans_InterCompanyCompanyId</HelpText>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>InterCompanyCompanyId</DataField>
								<DataSource>MarkupTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>MarkupTrans_InterCompanyInvoiceId</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_AccountsPayable:MarkupTrans_MarkupTrans_InterCompanyInvoiceId</HelpText>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>InterCompanyInvoiceId</DataField>
								<DataSource>MarkupTrans</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS335896</Caption>
						<DataSource>MarkupTrans</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Allocation_IN</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<CountryRegionCodes>IN</CountryRegionCodes>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>Allocation_IN_MarkUpAllocateAfter_IN</Name>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>MarkUpAllocateAfter_IN</DataField>
								<DataSource>MarkupTrans</DataSource>
								<Items />
							</AxFormControl>
						</Controls>
						<DataGroup>Allocation_IN</DataGroup>
						<DataSource>MarkupTrans</DataSource>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>TaxInfo_IN</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<CountryRegionCodes>IN</CountryRegionCodes>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>MarkupTrans_IN_CompanyLocation</Name>
								<ElementPosition>572662304</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ReferenceGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>MarkupTrans_IN_CompanyLocation_Description</Name>
										<DataRelationPath>LogisticsLocation</DataRelationPath>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
								</Controls>
								<DataSource>MarkupTrans_IN</DataSource>
								<Label>@SYS33556</Label>
								<ReferenceField>CompanyLocation</ReferenceField>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>MarkupTrans_IN_CompanyAddress</Name>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displayAddress</DataMethod>
								<DataSource>MarkupTrans_IN</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>MarkupTrans_IN_TaxInformation</Name>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ReferenceGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>MarkupTrans_IN_TaxInformation_Name</Name>
										<DataRelationPath>TaxInformation_IN</DataRelationPath>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
								</Controls>
								<DataSource>MarkupTrans_IN</DataSource>
								<ReferenceField>TaxInformation</ReferenceField>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>TaxInformation_IN_STCRegistrationNumberTable</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ReferenceGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TaxInformation_IN_STCRegistrationNumberTable_RegistrationNumber</Name>
										<DataRelationPath>STCRegistrationNumberTable</DataRelationPath>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
								</Controls>
								<DataSource>TaxInformation_IN</DataSource>
								<ReferenceField>STCRegistrationNumberTable</ReferenceField>
							</AxFormControl>
						</Controls>
						<Caption>@SYS33652</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>EInvoice_MX</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>EInvoice_MX_SATProductCode_MX</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>SATProductCode_MX</DataField>
								<DataSource>MarkupTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>EInvoice_MX_SATUnitCode_MX</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>SATUnitCode_MX</DataField>
								<DataSource>MarkupTrans</DataSource>
							</AxFormControl>
						</Controls>
						<DataGroup>EInvoice_MX</DataGroup>
						<DataSource>MarkupTrans</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>EInvoiceWithholdingTax_MX</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CFDIWithholding_MX_WithholdingTypeCode_MX</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>WithholdingTypeCode_MX</DataField>
								<DataSource>MarkupTrans</DataSource>
							</AxFormControl>
						</Controls>
						<DataGroup>CFDIWithholding_MX</DataGroup>
						<DataSource>MarkupTrans</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ChargeOverrides</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ConfigurationKey>Retail</ConfigurationKey>
						<Type>Group</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>OverrideUser</Name>
								<AllowEdit>No</AllowEdit>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>latestOverrideUser</DataMethod>
								<DataSource>MarkupTrans</DataSource>
								<Label>@RetailAutoCharge:MarkupTransFormOverrideUserLabel</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>OverrideReason</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>latestOverrideReason</DataMethod>
								<DataSource>MarkupTrans</DataSource>
								<Label>@RetailAutoCharge:MarkupTransFormOverrideReasonLabel</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateTimeControl">
								<Name>OverrideTime</Name>
								<Type>DateTime</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>latestOverrideTime</DataMethod>
								<DataSource>MarkupTrans</DataSource>
								<Label>@RetailAutoCharge:MarkupTransFormOverrideTimeLabel</Label>
							</AxFormControl>
						</Controls>
						<Breakable>No</Breakable>
						<Caption>@RetailAutoCharge:MarkupTransFormOverrideGroupLabel</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>SalesLineDetails</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ConfigurationKey>Retail</ConfigurationKey>
						<Type>Group</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>LineNum</Name>
								<AllowEdit>No</AllowEdit>
								<ConfigurationKey>Retail</ConfigurationKey>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>salesLineNum</DataMethod>
								<DataSource>MarkupTrans</DataSource>
								<Label>@RetailAutoCharge:MarkupTransFormSalesLineNumLabel</Label>
							</AxFormControl>
						</Controls>
						<Caption>@RetailAutoCharge:MarkupTransFormSalesLineDetails</Caption>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>
