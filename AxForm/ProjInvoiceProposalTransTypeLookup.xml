<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProjInvoiceProposalTransTypeLookup</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ProjInvoiceProposalTransTypeLookup extends FormRun implements ProjInvoiceITransSelectionParams
{
    boolean canClose;
    ProjInvoiceITransSelectionParams params;

}
]]></Source>
			</Method>
			<Method>
				<Name>getTmpEntryForType</Name>
				<Source><![CDATA[
    private ProjInvoiceProposalTmpTransType getTmpEntryForType(ProjInvoiceProposalTransSelectionTypes _type)
    {
        ProjInvoiceProposalTmpTransType tmpTransType;

        tmpTransType.setTmpData(ProjInvoiceProposalTmpTransType);
        select tmpTransType
            where tmpTransType.TransType == _type;

        return tmpTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTypeSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not the given <c>ProjInvoiceProposalTransSelectionTypes</c> is selected.
    /// </summary>
    /// <param name = "_type">The <c>ProjInvoiceProposalTransSelectionTypes</c> enumeration value.</param>
    /// <returns>true if is selected; otherwise, false.</returns>
    protected boolean isTypeSelected(ProjInvoiceProposalTransSelectionTypes _type)
    {
        var tmpEntry = this.getTmpEntryForType(_type);
        return tmpEntry.Selected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyCurrentSelection</Name>
				<Source><![CDATA[
    private void modifyCurrentSelection()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQueryCostTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves whether expense transactions should be queried.
    /// </summary>
    /// <returns>true to query the transactions, false otherwise</returns>
    public boolean isQueryCostTrans()
    {
        return this.isTypeSelected(ProjInvoiceProposalTransSelectionTypes::Cost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQueryEmplTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves whether hour transactions should be queried.
    /// </summary>
    /// <returns>true to query the transactions, false otherwise</returns>
    public boolean isQueryEmplTrans()
    {
        return this.isTypeSelected(ProjInvoiceProposalTransSelectionTypes::Hour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQueryItemTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves whether item transactions should be queried.
    /// </summary>
    /// <returns>true to query the transactions, false otherwise</returns>
    public boolean isQueryItemTrans()
    {
        return this.isTypeSelected(ProjInvoiceProposalTransSelectionTypes::Item);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQueryOnAccTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves whether on account transactions should be queried.
    /// </summary>
    /// <returns>true to query the transactions, false otherwise</returns>
    public boolean isQueryOnAccTrans()
    {
        return this.isTypeSelected(ProjInvoiceProposalTransSelectionTypes::OnAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQueryRevenueTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves whether fee transactions should be queried.
    /// </summary>
    /// <returns>true to query the transactions, false otherwise</returns>
    public boolean isQueryRevenueTrans()
    {
        return this.isTypeSelected(ProjInvoiceProposalTransSelectionTypes::Revenue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQuerySalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves whether sales line transactions should be queried.
    /// </summary>
    /// <returns>true to query the transactions, false otherwise</returns>
    public boolean isQuerySalesLine()
    {
        return this.isTypeSelected(ProjInvoiceProposalTransSelectionTypes::SalesOrderLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQuerySubscriptionTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves whether subscription transactions should be queried.
    /// </summary>
    /// <returns>true to query the transactions, false otherwise</returns>
    public boolean isQuerySubscriptionTrans()
    {
        return this.isTypeSelected(ProjInvoiceProposalTransSelectionTypes::Subscription);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales update type to query for sales order lines.
    /// </summary>
    /// <returns>The <c>SalesUpdate</c> value to be used for sales order lines.</returns>
    public SalesUpdate getSalesUpdate()
    {
        var tmpEntry = this.getTmpEntryForType(ProjInvoiceProposalTransSelectionTypes::SalesOrderLine);
        return tmpEntry.SalesUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedParams</Name>
				<Source><![CDATA[
    public ProjInvoiceProposalCreateLinesParams getSelectedParams()
    {
        return params;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransTypeList</Name>
				<Source><![CDATA[
    public void initTransTypeList()
    {
        ProjInvoiceProposalTmpTransType.TransType = ProjInvoiceProposalTransSelectionTypes::Cost;
        ProjInvoiceProposalTmpTransType.SalesUpdate = any2Enum(-1);
        ProjInvoiceProposalTmpTransType.Selected = params.isQueryCostTrans();
        ProjInvoiceProposalTmpTransType.insert();

        ProjInvoiceProposalTmpTransType.TransType = ProjInvoiceProposalTransSelectionTypes::Hour;
        ProjInvoiceProposalTmpTransType.Selected = params.isQueryEmplTrans();
        ProjInvoiceProposalTmpTransType.insert();

        ProjInvoiceProposalTmpTransType.TransType = ProjInvoiceProposalTransSelectionTypes::Item;
        ProjInvoiceProposalTmpTransType.Selected = params.isQueryItemTrans();
        ProjInvoiceProposalTmpTransType.insert();

        ProjInvoiceProposalTmpTransType.TransType = ProjInvoiceProposalTransSelectionTypes::OnAccount;
        ProjInvoiceProposalTmpTransType.Selected = params.isQueryOnAccTrans();
        ProjInvoiceProposalTmpTransType.insert();

        ProjInvoiceProposalTmpTransType.TransType = ProjInvoiceProposalTransSelectionTypes::Revenue;
        ProjInvoiceProposalTmpTransType.Selected = params.isQueryRevenueTrans();
        ProjInvoiceProposalTmpTransType.insert();

        ProjInvoiceProposalTmpTransType.TransType = ProjInvoiceProposalTransSelectionTypes::SalesOrderLine;
        ProjInvoiceProposalTmpTransType.Selected = params.isQuerySalesLine();
        ProjInvoiceProposalTmpTransType.SalesUpdate = params.getSalesUpdate();
        ProjInvoiceProposalTmpTransType.insert();

        ProjInvoiceProposalTmpTransType.TransType = ProjInvoiceProposalTransSelectionTypes::Subscription;
        ProjInvoiceProposalTmpTransType.SalesUpdate = any2Enum(-1);
        ProjInvoiceProposalTmpTransType.Selected = params.isQuerySubscriptionTrans();
        ProjInvoiceProposalTmpTransType.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        canClose = false;
        super();

        params = element.args().caller() as ProjInvoiceITransSelectionParams;

        if (!params)
        {
            throw error(error::missingParameter(element));
        }

        this.initTransTypeList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        if (canClose)
        {
            super();
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>ProjInvoiceProposalTmpTransType</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();
            if (ProjInvoiceProposalTmpTransType.TransType == ProjInvoiceProposalTransSelectionTypes::SalesOrderLine)
            {
                ProjInvoiceProposalTmpTransType_SalesUpdate.viewEditMode(ViewEditMode::Edit);
            }
            else
            {
                ProjInvoiceProposalTmpTransType_SalesUpdate.viewEditMode(ViewEditMode::View);
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>OKButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            canClose = true;
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>ProjInvoiceProposalTmpTransType</Name>
			<Table>ProjInvoiceProposalTmpTransType</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesUpdate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Selected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransType</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<HeightMode xmlns="">SizeToContent</HeightMode>
		<Pattern xmlns="">Custom</Pattern>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">Lookup</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<WidthMode xmlns="">SizeToAvailable</WidthMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>TransTypeGrid</Name>
				<HeightMode>SizeToContent</HeightMode>
				<Type>Grid</Type>
				<WidthMode>SizeToContent</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>ProjInvoiceProposalTmpTransType_Selected</Name>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>Selected</DataField>
						<DataSource>ProjInvoiceProposalTmpTransType</DataSource>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>ProjInvoiceProposalTmpTransType_TransType</Name>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>TransType</DataField>
						<DataSource>ProjInvoiceProposalTmpTransType</DataSource>
						<ViewEditMode>View</ViewEditMode>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>ProjInvoiceProposalTmpTransType_SalesUpdate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>SalesUpdate</DataField>
						<DataSource>ProjInvoiceProposalTmpTransType</DataSource>
						<Items />
					</AxFormControl>
				</Controls>
				<DataSource>ProjInvoiceProposalTmpTransType</DataSource>
				<HighlightActive>No</HighlightActive>
				<MultiSelect>No</MultiSelect>
				<Style>Tabular</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>LookupActions</Name>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ActionsButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>OKButton</Name>
								<Type>CommandButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Command>OK</Command>
								<MultiSelect>Yes</MultiSelect>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalRight</ArrangeMethod>
						<Style>DialogCommitContainer</Style>
					</AxFormControl>
				</Controls>
				<FrameType>None</FrameType>
				<Style>DialogCommit</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>