<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ResWorkflowDropDialogForm</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
[SysObsolete('Resource Request Workflow is deprecated', false, 5\6\2023)]
public class ResWorkflowDropDialogForm extends FormRun implements WorkflowIDropDialog
{
    private Common                      record;
    private FormRun                     caller;
    private WorkflowDropDialog          workflowDropDialog;
    private str                         approvalFieldName;
    private Map                         selectedRequestLinesMap;
    private WorkflowWorkItemQueueName   workflowQueue;
    private WorkflowUser                workflowUser;
    private WorkflowComment             workflowComment;
    private WorkflowWorkItemActionType  workflowItemActionType;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        str workflowType = workflowtypestr(ResRequest);

        if (!ResRequestHelper::isWorkflowEnabled())
        {
            throw error(strFmt("@Res:WorkflowNotEnabled", workflowType));
        }

        ResRequestHelper::validateWorkflowConfiguration();

        record = element.args().record();
        caller = element.args().caller();

        approvalFieldName = fieldStr(ResRequest, ApprovalStatus);
        if (element.args().parm())
        {
            // If the menu item has been set, don't use the default approval field name.
            approvalFieldName = element.args().parm();
        }

        super();

        // Create the workflow drop dialog class which manages population of the workflow buttons and text on this drop dialog form.
        workflowDropDialog = WorkflowDropDialog::construct(this);
        workflowDropDialog.updateControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserSelectedRequestLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set user selected <c>ResRequestLine</c> map with ResRequestLine.Hour as key,
    /// and container as value which has [ResRequestLine.RecId, resource rec ID, activity resource rec ID].
    /// </summary>
    /// <param name = "_selectedRequestLineMap">User selected <c>ResRequestLine</c> map.</param>
    /// <returns>User selected <c>ResRequestLine</c> map.</returns>
    public Map getUserSelectedRequestLines(Map _selectedRequestLinesMap = selectedRequestLinesMap)
    {
        selectedRequestLinesMap = _selectedRequestLinesMap;
        return selectedRequestLinesMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows the workflow drop dialog classes to set the caption based on context of the workflow.
    /// </summary>
    /// <param name = "_caption">Dialog caption.</param>
    public void setCaption(str _caption)
    {
        const str captionFormat = '%1 %2';
        ResRequest request = record as ResRequest;

        this.design().caption(strFmt(captionFormat, _caption, request.RequestId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPromotedActionButton1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the first promoted action button that the workflow drop dialog classes will use to bind the "most used" action menu item (i.e. Approve).
    /// </summary>
    /// <returns>FormFunctionButtonControl.</returns>
    public FormFunctionButtonControl getPromotedActionButton1()
    {
        return PromotedAction1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPromotedActionButton2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the second promoted action button that the workflow drop dialog classes will use to bind the "second most used" action menu item (i.e. Reject).
    /// </summary>
    /// <returns>FormFunctionButtonControl</returns>
    public FormFunctionButtonControl getPromotedActionButton2()
    {
        return PromotedAction2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOverflowMenuButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the menu button used for the overflow actions (i.e. Delegate, View History).
    /// </summary>
    /// <returns><c>FormMenuButtonControl</c> class.</returns>
    public FormMenuButtonControl getOverflowMenuButton()
    {
        return OverflowActions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInstructionTextControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns static text control where the workflow message context will be added by the workflow drop dialog classes.
    /// </summary>
    /// <returns><c>FormStaticTextControl</c> class.</returns>
    public FormStaticTextControl getInstructionTextControl()
    {
        return InstructionText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the record for which the workflow drop dialog classes will load workflow information.
    /// </summary>
    /// <returns>The common table buffer.</returns>
    public Common getRecord()
    {
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the record is ready to be submitted to workflow.
    /// </summary>
    /// <returns>True if workflow can be submitted; otherwise false.</returns>
    public boolean canSubmitToWorkflow()
    {
        DictTable dictTable = new DictTable(record.TableId);
        DictField dictField = dictTable.fieldObject(fieldName2Id(record.TableId, approvalFieldName));
        ResApprovalStatus status = record.(dictField.id());

        return ResRequestHelper::canSubmitToWorkflow(status);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadWorkflowConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the workflow version to enable the submission for.
    /// </summary>
    /// <returns><c>WorkflowVersionTable</c> record.</returns>
    public Common loadWorkflowConfiguration()
    {
        return Workflow::findWorkflowConfigurationToActivate(record, caller.design().workflowType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCallingForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the calling form (i.e. the drop dialog form).
    /// </summary>
    /// <returns><c>FormRun</c> object.</returns>
    public FormRun getCallingForm()
    {
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveWorkflowWorkItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// The workflow action menu items (Approve, Reject, etc.) call this FormRun method to retrieve the active workflow work item that was loaded onto the form.
    /// Since the calling form is now the drop dialog form (not the main form), this method is overridden to ensure we are passing the correct work item.
    /// </summary>
    /// <returns><c>WorkflowWorkItemTable</c> record.</returns>
    public Common getActiveWorkflowWorkItem()
    {
        return workflowDropDialog.getActiveWorkflowWorkItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveWorkflowTrackingStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// The Workflow history menu item calls this FormRun method to understand which workflow history record to load.
    /// Since the calling form is now the drop dialog form (not the main form), this method is overridden to ensure we are passing the correct.
    /// workflow history.
    /// </summary>
    /// <returns><c>WorkflowWorkItemTable</c> record.</returns>
    public Common getActiveWorkflowTrackingStatus()
    {
        return workflowDropDialog.getActiveWorkflowTrackingStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveWorkflowConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// The Submit workflow action menu item classes call this FormRun method to retrieve the workflow configuration to use when Sumbit is clicked.
    /// Since the calling form is now the drop dialog form (not the main form), this method is overridden to ensure we are passing the correct workflow configuration.
    /// </summary>
    /// <returns><c>WorkflowWorkItemTable</c> record.</returns>
    public Common getActiveWorkflowConfiguration()
    {
        return workflowDropDialog.getActiveWorkflowConfiguration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkflowControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Existing workflow action menu item classes call FormRun.updateWorkflowControls to refresh the controls after completing the action.
    /// It can be overridden here to ensure that the main form is also refreshed because a work item may have been completed.
    /// </summary>
    public void updateWorkflowControls()
    {
        if (formHasMethod(caller, identifierStr(refreshWorkflowIcon)))
        {
            caller.refreshWorkflowIcon();
        }

        super();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="" />
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@Res:ResourceRequest</Caption>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Pattern xmlns="">Custom</Pattern>
		<Style xmlns="">DropDialog</Style>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>InstructionText</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>StaticText</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ContentGroup</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<ColumnsMode>Fill</ColumnsMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormMenuFunctionButtonControl">
						<Name>PromotedAction1</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>MenuFunctionButton</Type>
						<FormControlExtension
							i:nil="true" />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormMenuFunctionButtonControl">
						<Name>PromotedAction2</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>MenuFunctionButton</Type>
						<FormControlExtension
							i:nil="true" />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormMenuButtonControl">
						<Name>OverflowActions</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>MenuButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<Text>@SYS332419</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>