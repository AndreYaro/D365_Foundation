<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>PriceDiscTable</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class PriceDiscTable extends FormRun implements SysIFilterConsumerForm, SysIFilterEventHandler
{
    #resAppl

    boolean                 isRelation;
    QueryBuildRange         blockPriceType;
    QueryBuildRange         blockCode;
    // <GEERU>
    QueryBuildRange         blockAgreement;
    // </GEERU>
    QueryBuildRange         blockCodeOrderedItems;

    FormDesign              formDesign;

    CustTable               custTable;
    VendTable               vendTable;
    InventTable             inventTable;
    SalesTable              salesTable;
    SalesQuotationTable     salesQuotationTable;
    PurchTable              purchTable;
    PurchRFQTable           purchRFQTable;
    PriceDiscGroup          priceDiscGroup;
    // <GEERU>
    AgreementHeaderExt_RU   agreementHeaderExt;
    AgreementHeader         agreementHeader;
    // </GEERU>

    ModuleInventCustVend    module;
    PriceType               relationType;
    PriceDiscPartyCodeType     accountCode;
    PriceDiscProductCodeType   itemCode;
    CustVendRel             accountRelation;
    ItemRelation            itemRelation;
    UnitOfMeasureSymbol     unitID;
    CurrencyCode            currencyCode;
    // <GEERU>
    RetailLabelChangeJournalTrans retailLabelChangeJournalTrans;
    AgreementHeaderExtRecId_RU agreementHeaderExtRecId;
    boolean                 calledFromSalesPurchAgreement;
    boolean                 countryRegion_RU;
    #ISOCountryRegionCodes
    // </GEERU>

    InventDimParm           inventDimParmPriceSetup;
    InventDimParm           inventDimParmPriceWarning;

    InventDimCtrl_Frm       inventDimFormSetup;
    // Need sales line buffer for when we show sales price and line
    // disc based on sales lines.
    SalesLine               mcrSalesLine;
    PurchLine               mcrPurchLine;
    PriceDiscTable          tmpPriceDiscTable;
    priceDiscTable          mcrPriceDiscTable;
    boolean                 mcrCallCenterConfig;
    boolean                 tradeBrokerConfig;
    boolean                 tamPromotionsManagementconfig;
    PriceDiscICallerParameters priceDiscCallerParams;

}
]]></Source>
			</Method>
			<Method>
				<Name>accountItemGroupRelation</Name>
				<Source><![CDATA[
    str  accountItemGroupRelation()
    {
        switch (relationType)
        {
            case PriceType::PricePurch,
                 PriceType::PriceSales :

                return element.priceGroup();

            case PriceType::LineDiscPurch,
                 PriceType::LineDiscSales :

                return element.lineDisc();

            case PriceType::MultiLineDiscPurch,
                 PriceType::MultiLineDiscSales :

                return element.multiLineDisc();

            case PriceType::EndDiscSales,
                 PriceType::EndDiscPurch :

                return element.endDisc();
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountRelation</Name>
				<Source><![CDATA[
    CustVendRel  accountRelation()
    {
        // <GEERU>
        SalesAgreementHeader salesAgreementHeader;
        PurchAgreementHeader purchAgreementHeader;
        // </GEERU>
        switch (module)
        {
            case ModuleInventCustVend::Cust :
                if (salesTable.RecId)
                {
                    return salesTable.CustAccount;
                }

                if (salesQuotationTable.RecId)
                {
                    return salesQuotationTable.CustAccount;
                }

                if (custTable.RecId)
                {
                    return custTable.AccountNum;
                }
                // <GEERU>
                if (countryRegion_RU && agreementHeader)
                {
                    salesAgreementHeader = agreementHeader as SalesAgreementHeader;
                    return salesAgreementHeader.CustAccount;
                }
                // </GEERU>
                break;

            case ModuleInventCustVend::Vend :
                if (purchTable.RecId)
                {
                    return purchTable.OrderAccount;
                }

                if (vendTable.RecId)
                {
                    return vendTable.AccountNum;
                }
                // <GEERU>
                if (countryRegion_RU && agreementHeader)
                {
                    purchAgreementHeader = agreementHeader as PurchAgreementHeader;
                    return purchAgreementHeader.VendAccount;
                }
                // </GEERU>
                break;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>addItemDiscountGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds discount groups applicable for an item.
    /// </summary>
    /// <param name="_inventTableModule">
    /// An inventory module parameters record representing the item (either on sales or purchase side).
    /// </param>
    /// <param name="_itemGroups">
    /// Set of discount groups found.
    /// </param>
    private void addItemDiscountGroups(InventTableModule _inventTableModule, Set _itemGroups)
    {
        if (_inventTableModule && _itemGroups)
        {
            if (_inventTableModule.LineDisc && !_itemGroups.in(_inventTableModule.LineDisc))
            {
                _itemGroups.add(_inventTableModule.LineDisc);
            }

            if (_inventTableModule.MultiLineDisc && !_itemGroups.in(_inventTableModule.MultiLineDisc))
            {
                _itemGroups.add(_inventTableModule.MultiLineDisc);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendInventCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends further filtering criteria to a filter string for items.
    /// </summary>
    /// <param name="_inventSet">
    /// Set of identifiers by which to filter.
    /// </param>
    /// <param name="_tableGroupAll">
    /// Type of the identifiers (Table or Group).
    /// </param>
    /// <param name="_criteria">
    /// The input string to which to append further criteria.
    /// </param>
    /// <returns>
    /// Filter string for items.
    /// </returns>
    private str appendInventCriteria(Set _inventSet, PriceDiscProductCodeType _productCodeType, str _criteria)
    {
        SetEnumerator   inventSetEnumerator;

        if (_inventSet.elements())
        {
            inventSetEnumerator = _inventSet.getEnumerator();

            while (inventSetEnumerator.moveNext())
            {
                if (_criteria)
                {
                    _criteria += ' || ';
                }

                _criteria += this.createCriteriaToAppendForItem(inventSetEnumerator.current(), _productCodeType);
            }
        }

        return _criteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCriteriaToAppendForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the criteria to append for the given item.
    /// </summary>
    /// <param name = "_itemId">The item id of the item to add the criteria for.</param>
    /// <param name = "_productCodeType">A <c>PriceDiscProductCodeType</c> value.</param>
    /// <returns>A string with the criteria to be appended.</returns>
    /// <remarks>The criteria to be added should be a filter to be added as an OR clause.</returns>
    [Replaceable]
    protected str createCriteriaToAppendForItem(ItemRelation _itemId, PriceDiscProductCodeType _productCodeType)
    {
        str criteria = strFmt('((%1.%2==%3) && (%1.%4=="%5"))',
                                  priceDiscTable_ds.queryBuildDataSource().name(),
                                  fieldStr(PriceDiscTable, ItemCode),
                                  any2int(_productCodeType),
                                  fieldStr(PriceDiscTable, ItemRelation),
                                  queryValue(_itemId));

        return criteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSearchFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the filter for trade agreeements either by item, customer or vendor depending on where the View Trade Agreeements
    /// </summary>
    /// <param name="_relationType">
    ///     An outcome of the <c>PriceType</c>enumeration
    /// </param>
    /// <returns>
    ///     A string containing the generated filter.
    /// </returns>
    protected str buildSearchFilter(PriceType _relationType)
    {
        Set                 groupsToAdd = new Set(Types::String);
        SetEnumerator       groupsToAddEnumerator;
        str                 filter;

        switch (module)
        {
            case ModuleInventCustVend::Invent :
                if (PriceDiscGroup.RecId)
                {
                    filter = strFmt('(((%1.%2==%3) && (%1.%4=="%5"))',
                                        priceDiscTable_ds.queryBuildDataSource().name(),
                                        fieldStr(PriceDiscTable, ItemCode),
                                        any2int(itemCode),
                                        fieldStr(PriceDiscTable, ItemRelation),
                                        itemRelation ? queryValue(itemRelation) : itemRelation);
                }
                else
                {
                    filter = strFmt('((((%1.%2==%3) && (%1.%4=="%5")) || (%1.%2==%6))',
                                        priceDiscTable_ds.queryBuildDataSource().name(),
                                        fieldStr(PriceDiscTable, ItemCode),
                                        any2int(itemCode),
                                        fieldStr(PriceDiscTable, ItemRelation),
                                        itemRelation ? queryValue(itemRelation) : itemRelation,
                                        any2int(TableGroupAll::All));
                }

                InventTableModule   inventTableModulePurch = inventTable.inventTableModulePurch();
                if (inventTableModulePurch)
                {
                    if (inventTableModulePurch.LineDisc && _relationType == PriceType::LineDiscPurch)
                    {
                        groupsToAdd.add(inventTableModulePurch.LineDisc);
                    }

                    if (inventTableModulePurch.MultiLineDisc && _relationType == PriceType::MultiLineDiscPurch)
                    {
                        groupsToAdd.add(inventTableModulePurch.MultiLineDisc);
                    }
                }

                InventTableModule   inventTableModuleSales = inventTable.inventTableModuleSales();
                if (inventTableModuleSales)
                {
                    if (inventTableModuleSales.LineDisc && _relationType == PriceType::LineDiscSales)
                    {
                        groupsToAdd.add(inventTableModuleSales.LineDisc);
                    }

                    if (inventTableModuleSales.MultiLineDisc && _relationType == PriceType::MultiLineDiscSales)
                    {
                        groupsToAdd.add(inventTableModuleSales.MultiLineDisc);
                    }
                }

                this.buildingFilterGroupsToAddForInvent(groupsToAdd, _relationType, inventTable);

                groupsToAddEnumerator = groupsToAdd.getEnumerator();

                while (groupsToAddEnumerator.moveNext())
                {
                    filter += strFmt(' || ((%1.%2==%3) && (%1.%4=="%5")',
                                        priceDiscTable_ds.queryBuildDataSource().name(),
                                        fieldStr(PriceDiscTable, ItemCode),
                                        any2int(TableGroupAll::GroupId),
                                        fieldStr(PriceDiscTable, ItemRelation),
                                        queryValue(groupsToAddEnumerator.current()));

                    if (_relationType == PriceType::PricePurch
                        || _relationType == PriceType::PriceSales)
                    {
                        // As prices can only be setup for ItemCode==Table, the item relation should be specified.
                        filter += strFmt(' && (%1.%2=="%3")',
                                            priceDiscTable_ds.queryBuildDataSource().name(),
                                            fieldStr(PriceDiscTable, ItemRelation),
                                            itemRelation ? queryValue(itemRelation) : itemRelation);
                    }
                    filter += ')';
                }
                filter += ')';

                break;

            case ModuleInventCustVend::Vend:
            case ModuleInventCustVend::Cust:
                if (PriceDiscGroup.RecId)
                {
                    filter += strFmt('(((%1.%2==%3) && (%1.%4=="%5"))',
                                        priceDiscTable_ds.queryBuildDataSource().name(),
                                        fieldStr(PriceDiscTable, AccountCode),
                                        any2int(accountCode),
                                        fieldStr(PriceDiscTable, AccountRelation),
				                        accountRelation ? queryValue(accountRelation): accountRelation);
                }
                else
                {
                    filter += strFmt('((((%1.%2==%3) && (%1.%4=="%5")) || (%1.%2==%6))',
                                        priceDiscTable_ds.queryBuildDataSource().name(),
                                        fieldStr(PriceDiscTable, AccountCode),
                                        any2int(accountCode),
                                        fieldStr(PriceDiscTable, AccountRelation),
                                        accountRelation ? queryValue(accountRelation): accountRelation,
                                        any2int(TableGroupAll::All));
                }

                switch (module)
                {
                    case ModuleInventCustVend::Vend:
                        if (vendTable.PriceGroup && _relationType == PriceType::PricePurch)
                        {
                            groupsToAdd.add(vendTable.PriceGroup);
                        }

                        if (vendTable.EndDisc && _relationType == PriceType::EndDiscPurch)
                        {
                            groupsToAdd.add(vendTable.EndDisc);
                        }

                        if (vendTable.MultiLineDisc && _relationType == PriceType::MultiLineDiscPurch)
                        {
                            groupsToAdd.add(vendTable.MultiLineDisc);
                        }

                        if (vendTable.LineDisc && _relationType == PriceType::LineDiscPurch)
                        {
                            groupsToAdd.add(vendTable.LineDisc);
                        }

                        this.buildingFilterGroupsToAddForVend(groupsToAdd, _relationType, vendTable);
                        break;

                    case ModuleInventCustVend::Cust:
                        if (custTable.PriceGroup && _relationType == PriceType::PriceSales)
                        {
                            groupsToAdd.add(custTable.PriceGroup);
                        }

                        if (custTable.EndDisc && _relationType == PriceType::EndDiscSales)
                        {
                            groupsToAdd.add(custTable.EndDisc);
                        }

                        if (custTable.MultiLineDisc && _relationType == PriceType::MultiLineDiscSales)
                        {
                            groupsToAdd.add(custTable.MultiLineDisc);
                        }

                        if (custTable.LineDisc && _relationType == PriceType::LineDiscSales)
                        {
                            groupsToAdd.add(custTable.LineDisc);
                        }
                        this.buildingFilterGroupsToAddForCust(groupsToAdd, _relationType, custTable);
                        break;
                }

                groupsToAddEnumerator = groupsToAdd.getEnumerator();
                while (groupsToAddEnumerator.moveNext())
                {
                    filter += strFmt(' || ((%1.%2==%3) && (%1.%4=="%5"))',
                                        priceDiscTable_ds.queryBuildDataSource().name(),
                                        fieldStr(PriceDiscTable, AccountCode),
                                        any2int(TableGroupAll::GroupId),
                                        fieldStr(PriceDiscTable, AccountRelation),
                                        queryValue(groupsToAddEnumerator.current()));
                }
                filter += ')';

                // If "view discounts" form is invoked for a sales or purchase order
                // also filter discounts by items in the order
                if (this.isLineFilterEnabled())
                {
                    this.buildOrderLineFilter(_relationType);
                }

                break;
        }

        return filter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSearchFilterDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for building a search filter for the given module.
    /// </summary>
    /// <param name = "_module">A <c>ModuleInventCustVend</c> value.</param>
    /// <param name = "_priceType">A <c>PriceType</c> value.</param>
    /// <param name = "_priceDiscGroup">A <c>PriceDiscGroup</c> record.</param>
    /// <param name = "_priceDiscTableName">The name of the table on which the filter is being built.</param>
    /// <param name = "result">Subscribers can use this to provide the search filter string.</param>
    delegate void buildSearchFilterDelegate(ModuleInventCustVend _module, PriceType _priceType, PriceDiscGroup _priceDiscGroup, str _priceDiscTableName, EventHandlerResult result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildingFilterGroupsToAddForVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for getting the <c>VendTable</c> field names for the given <c>PriceType</c>.
    /// </summary>
    /// <param name = "_groupsToAdd">A set to which the filter groups should be added.</param>
    /// <param name = "_priceType">A <c>PriceType</c> value.</param>
    /// <param name = "_vendTable">A <c>VendTable</c> object.</param>
    delegate void buildingFilterGroupsToAddForVend(Set _groupsToAdd, PriceType _priceType, VendTable _vendTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildingFilterGroupsToAddForCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for getting the <c>CustTable</c> field names for the given <c>PriceType</c>.
    /// </summary>
    /// <param name = "_groupsToAdd">A set to which the filter groups should be added.</param>
    /// <param name = "_priceType">A <c>PriceType</c> value.</param>
    /// <param name = "_custTable">A <c>CustTable</c> object.</param>
    delegate void buildingFilterGroupsToAddForCust(Set _groupsToAdd, PriceType _priceType, CustTable _custTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildingFilterGroupsToAddForInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for getting the <c>InventTable</c> field names for the given <c>PriceType</c>.
    /// </summary>
    /// <param name = "_groupsToAdd">A set to which the filter groups should be added.</param>
    /// <param name = "_priceType">A <c>PriceType</c> value.</param>
    /// <param name = "_inventTable">A <c>InventTable</c> object.</param>
    delegate void buildingFilterGroupsToAddForInvent(Set _groupsToAdd, PriceType _priceType, InventTable _inventTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildOrderLineFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// If View Trade Agreements form is invoked for a sales order or sales quotation or purchase order, trade agreeemnts are also
    /// filtered by items in the order lines (in addition to filtering by customer or vendor for which
    /// the order has been created).
    /// </summary>
    /// <param name = "_relationType">A <c>PriceType</c> value.</param>
    protected void buildOrderLineFilter(PriceType _relationType)
    {
        Set itemGroupsToAdd  = new Set(Types::String);
        Set itemsToAdd = new Set(Types::String);

        this.addFilterValues(itemsToAdd, itemGroupsToAdd, _relationType);

        this.addLineFilter(itemsToAdd, itemGroupsToAdd, _relationType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilterValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the filter values to the given sets.
    /// </summary>
    /// <param name = "_itemsToAdd">Set of items.</param>
    /// <param name = "_itemGroupsToAdd">Set of discount groups.</param>
    /// <param name = "_relationType">A <c>PriceType</c> value.</param>
    protected void addFilterValues(Set _itemsToAdd, Set _itemGroupsToAdd, PriceType _relationType)
    {
        // Only item based lines are considered
        if (salesTable)
        {
            this.addSalesItems(_itemsToAdd, _itemGroupsToAdd, _relationType);
        }
        else if (salesQuotationTable)
        {
            this.addSalesQuotationItems(_itemsToAdd, _itemGroupsToAdd, _relationType);
        }
        else if (purchTable)
        {
            this.addPurchItems(_itemsToAdd, _itemGroupsToAdd, _relationType);
        }
        else if (priceDiscCallerParams)
        {
            this.addItemFromPriceDiscCallerParams(_itemsToAdd, _itemGroupsToAdd, _relationType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSalesItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds sales order items to the set to be used for filters.
    /// </summary>
    /// <param name = "_itemsToAdd">Set of items.</param>
    /// <param name = "_itemGroupsToAdd">Set of discount groups.</param>
    /// <param name = "_relationType">A <c>PriceType</c> value.</param>
    protected void addSalesItems(Set _itemsToAdd, Set _itemGroupsToAdd, PriceType _relationType)
    {
        SalesLine salesLine;

        while select * from salesLine
                where salesLine.SalesId == salesTable.SalesId
                    && salesLine.ItemId
        {
            this.addSalesLineItem(_itemsToAdd, _itemGroupsToAdd, _relationType, salesLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSalesQuotationItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds sales quotation items to the set to be used for filters.
    /// </summary>
    /// <param name = "_itemsToAdd">Set of items.</param>
    /// <param name = "_itemGroupsToAdd">Set of discount groups.</param>
    /// <param name = "_relationType">A <c>PriceType</c> value.</param>
    protected void addSalesQuotationItems(Set _itemsToAdd, Set _itemGroupsToAdd, PriceType _relationType)
    {
        SalesQuotationLine salesQuotationLine;

        while select * from salesQuotationLine
                where salesQuotationLine.QuotationId == salesQuotationTable.QuotationId
                    && salesQuotationLine.ItemId
        {
            this.addSalesQuotationLineItem(_itemsToAdd, _itemGroupsToAdd, _relationType, salesQuotationLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPurchItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds purchase order items to the set to be used for filters.
    /// </summary>
    /// <param name = "_itemsToAdd">Set of items.</param>
    /// <param name = "_itemGroupsToAdd">Set of discount groups.</param>
    /// <param name = "_relationType">A <c>PriceType</c> value.</param>
    protected void addPurchItems(Set _itemsToAdd, Set _itemGroupsToAdd, PriceType _relationType)
    {
        PurchLine purchLine;

        while select * from purchLine
                where purchLine.PurchId == purchTable.PurchId
                    && purchLine.IsDeleted == NoYes::No
                    && purchLine.ItemId
        {
            this.addPurchLineItem(_itemsToAdd, _itemGroupsToAdd, _relationType, purchLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSalesLineItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an item for the sales line, to the set to be used for filters.
    /// </summary>
    /// <param name = "_itemsToAdd">Set of items.</param>
    /// <param name = "_itemGroupsToAdd">Set of discount groups.</param>
    /// <param name = "_relationType">A <c>PriceType</c> value.</param>
    /// <param name = "_salesLine">A <c>SalesLine</c> record.</param>
    protected void addSalesLineItem(Set _itemsToAdd, Set _itemGroupsToAdd, PriceType _relationType, SalesLine _salesLine)
    {
        ItemId itemId = this.retrieveSalesItemId(_relationType, _salesLine);

        if (!_itemsToAdd.in(itemId))
        {
            _itemsToAdd.add(itemId);
            this.addItemDiscountGroups(_salesLine.inventTable().inventTableModuleSales(), _itemGroupsToAdd);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSalesItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item for the sales line and the given parameters.
    /// </summary>
    /// <param name = "_relationType">A <c>PriceType</c> value.</param>
    /// <param name = "_salesLine">A <c>SalesLine</c> record.</param>
    /// <returns>An <c>ItemId</c> value.</returns>
    [Replaceable]
    protected ItemId retrieveSalesItemId(PriceType _relationType, SalesLine _salesLine)
    {
        return _salesLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPurchLineItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an item for the purchase line, to the set to be used for filters.
    /// </summary>
    /// <param name = "_itemsToAdd">Set of items.</param>
    /// <param name = "_itemGroupsToAdd">Set of discount groups.</param>
    /// <param name = "_relationType">A <c>PriceType</c> value.</param>
    /// <param name = "_purchLine">A <c>PurchLine</c> record.</param>
    protected void addPurchLineItem(Set _itemsToAdd, Set _itemGroupsToAdd, PriceType _relationType, PurchLine _purchLine)
    {
        ItemId itemId = this.retrievePurchItemId(_relationType, _purchLine);

        if (!_itemsToAdd.in(itemId))
        {
            _itemsToAdd.add(itemId);
            this.addItemDiscountGroups(_purchLine.inventTable().inventTableModulePurch(), _itemGroupsToAdd);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrievePurchItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item for the purchase line and the given parameters.
    /// </summary>
    /// <param name = "_relationType">A <c>PriceType</c> value.</param>
    /// <param name = "_purchLine">A <c>PurchLine</c> record.</param>
    /// <returns>An <c>ItemId</c> value.</returns>
    [Replaceable]
    protected ItemId retrievePurchItemId(PriceType _relationType, PurchLine _purchLine)
    {
        return _purchLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSalesQuotationLineItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an item for the sales quotation line, to the set to be used for filters.
    /// </summary>
    /// <param name = "_itemsToAdd">Set of items.</param>
    /// <param name = "_itemGroupsToAdd">Set of discount groups.</param>
    /// <param name = "_relationType">A <c>PriceType</c> value.</param>
    /// <param name = "_salesQuotationLine">A <c>SalesQuotationLine</c> record.</param>
    protected void addSalesQuotationLineItem(Set _itemsToAdd, Set _itemGroupsToAdd, PriceType _relationType, SalesQuotationLine _salesQuotationLine)
    {
        ItemId itemId = this.retrieveSalesQuotationItemId(_relationType, _salesQuotationLine);

        if (!_itemsToAdd.in(itemId))
        {
            _itemsToAdd.add(itemId);
            this.addItemDiscountGroups(_salesQuotationLine.inventTable().inventTableModuleSales(), _itemGroupsToAdd);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSalesQuotationItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item for the sales line and the given parameters.
    /// </summary>
    /// <param name = "_relationType">A <c>PriceType</c> value.</param>
    /// <param name = "_salesQuotationLine">A <c>SalesQuotationLine</c> record.</param>
    /// <returns>An <c>ItemId</c> value.</returns>
    [Replaceable]
    protected ItemId retrieveSalesQuotationItemId( PriceType _relationType, SalesQuotationLine _salesQuotationLine)
    {
        return _salesQuotationLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addItemFromPriceDiscCallerParams</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an item based on the item id in the caller parameters, to the set to be used for filters.
    /// </summary>
    /// <param name = "_itemsToAdd">Set of items.</param>
    /// <param name = "_itemGroupsToAdd">Set of discount groups.</param>
    /// <param name = "_relationType">A <c>PriceType</c> value.</param>
    protected void addItemFromPriceDiscCallerParams(Set _itemsToAdd, Set _itemGroupsToAdd, PriceType _relationType)
    {
        InventTable localInventTable = InventTable::find(priceDiscCallerParams.parmItemId());
        _itemsToAdd.add(this.retrieveItemIdFromPriceDiscCallerParams(_relationType));
        this.addItemDiscountGroups(localInventTable.inventTableModuleSales(), _itemGroupsToAdd);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveItemIdFromPriceDiscCallerParams</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the itemid from the caller parameters.
    /// </summary>
    /// <param name = "_relationType">A <c>PriceType</c> value.</param>
    /// <returns>An <c>ItemId</c> value.</returns>
    [Replaceable]
    protected ItemId retrieveItemIdFromPriceDiscCallerParams(PriceType _relationType)
    {
        return InventTable::find(priceDiscCallerParams.parmItemId()).ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLineFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add line filter to the item code query range based on the given sets.
    /// </summary>
    /// <param name = "_itemsToAdd">Set of items.</param>
    /// <param name = "_itemGroupsToAdd">Set of discount groups.</param>
    /// <param name = "_relationType">A <c>PriceType</c> value.</param>
    protected void addLineFilter(Set _itemsToAdd, Set _itemGroupsToAdd, PriceType _relation)
    {
        str filter = this.getLineFilter(_itemsToAdd, _itemGroupsToAdd, _relation);

        if (filter)
        {
            blockCodeOrderedItems.value(filter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line filter to the item code query range based on the given sets.
    /// </summary>
    /// <param name = "_itemsToAdd">Set of items.</param>
    /// <param name = "_itemGroupsToAdd">Set of discount groups.</param>
    /// <param name = "_relationType">A <c>PriceType</c> value.</param>
    /// <returns>A string with the line filter.</returns>
    protected str getLineFilter(Set _itemsToAdd, Set _itemGroupsToAdd, PriceType _relation)
    {
        str filter = '';

        filter = this.appendInventCriteria(_itemsToAdd, PriceDiscProductCodeType::Table, filter);

        filter = this.appendInventCriteria(_itemGroupsToAdd, PriceDiscProductCodeType::GroupId, filter);

        if (filter)
        {
            filter += ' || ';
        }

        // add filter criteria for trade agreements that apply for all items
        filter += strFmt('(%1.%2==%3)',
                  priceDiscTable_ds.queryBuildDataSource().name(),
                  fieldStr(PriceDiscTable, ItemCode),
                  any2int(PriceDiscProductCodeType::All));
        
        return filter;    
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildViewAllAgreementFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the filter used to view all trade agreements for a specific product.
    /// </summary>
    /// <param name="_module">
    ///     An outcome the ModuleSalesPurch enumeration specifying the module in question.
    /// </param>
    /// <returns>
    ///     A string containing the generated filter.
    /// </returns>
    private str buildViewAllAgreementFilter(ModuleSalesPurch _module)
    {
        str viewAllAgreementFilter;

        void buildFilter(Set _relationTypes)
        {
            if (this.simplifyQueryOnViewAllAgreementsFilter())
            {
                viewAllAgreementFilter += this.buildSimplifiedQueryOnViewAllAgreementsFilter(_relationTypes);
            }
            else
            {
                SetEnumerator relationTypesEnumerator;
                int i = 0;

                relationTypesEnumerator = _relationTypes.getEnumerator();
                while (relationTypesEnumerator.moveNext())
                {
                    if (i > 0)
                    {
                        viewAllAgreementFilter += ') || (';
                    }
                    i++;
                    viewAllAgreementFilter += strFmt('((%1.%2 == %3) && ',
                                                    priceDiscTable_ds.queryBuildDataSource().name(),
                                                    fieldStr(PriceDiscTable, Relation),
                                                    queryValue(enum2int(relationTypesEnumerator.current())));
                    viewAllAgreementFilter += this.buildSearchFilter(relationTypesEnumerator.current());
                    viewAllAgreementFilter += ')';
                }
            }
        }

        viewAllAgreementFilter = '(';

        Set priceTypes = PriceTypesForSearch::retrievePriceTypesForModuleSalesPurch(_module);
        buildFilter(priceTypes);

        viewAllAgreementFilter += ')';

        return viewAllAgreementFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>simplifyQueryOnViewAllAgreementsFilter</Name>
				<Source><![CDATA[
    private boolean simplifyQueryOnViewAllAgreementsFilter()
    {
        if (module == ModuleInventCustVend::Invent && PriceDiscTableInventViewAllAgreementQueryPerformanceFlight::instance().isEnabled())
        {
            InventTableModule inventTableModulePurch = inventTable.inventTableModulePurch();
            InventTableModule inventTableModuleSales = inventTable.inventTableModuleSales();

            return (!inventTableModulePurch && !inventTableModuleSales)
                || (!inventTableModulePurch.LineDisc && !inventTableModulePurch.MultiLineDisc && !inventTableModuleSales.LineDisc && !inventTableModuleSales.MultiLineDisc);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSimplifiedQueryOnViewAllAgreementsFilter</Name>
				<Source><![CDATA[
    private str buildSimplifiedQueryOnViewAllAgreementsFilter(Set _relationTypes)
    {
        SetEnumerator relationTypesEnumerator = _relationTypes.getEnumerator();
        Set groupsToAdd = new Set(Types::String);
        str filter = ' ( ';
        int i = 0;

        while (relationTypesEnumerator.moveNext())
        {
            if (i > 0)
            {
                filter += ' || ';
            }

            filter += strFmt('(%1.%2 == %3)',
                               priceDiscTable_ds.queryBuildDataSource().name(),
                               fieldStr(PriceDiscTable, Relation),
                               queryValue(enum2int(relationTypesEnumerator.current())));

            this.buildingFilterGroupsToAddForInvent(groupsToAdd, relationTypesEnumerator.current(), inventTable);

            i++;
        }

        filter += ' ) && ';

        if (PriceDiscGroup.RecId)
        {
            filter += strFmt('((%1.%2==%3) && (%1.%4=="%5"))',
                                priceDiscTable_ds.queryBuildDataSource().name(),
                                fieldStr(PriceDiscTable, ItemCode),
                                any2int(itemCode),
                                fieldStr(PriceDiscTable, ItemRelation),
                                itemRelation ? queryValue(itemRelation) : itemRelation);
        }
        else
        {
            filter += strFmt('(((%1.%2==%3) && (%1.%4=="%5")) || (%1.%2==%6))',
                                 priceDiscTable_ds.queryBuildDataSource().name(),
                                 fieldStr(PriceDiscTable, ItemCode),
                                 any2int(itemCode),
                                 fieldStr(PriceDiscTable, ItemRelation),
                                 itemRelation ? queryValue(itemRelation) : itemRelation,
                                 any2int(TableGroupAll::All));
        }

        return filter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    PriceGroupId  endDisc()
    {
        switch (module)
        {
            case ModuleInventCustVend::Invent :
                return '';

            case ModuleInventCustVend::Cust :
                if (salesTable.RecId)
                {
                    return salesTable.EndDisc;
                }

                if (salesQuotationTable.RecId)
                {
                    return salesQuotationTable.EndDisc;
                }

                if (custTable.RecId)
                {
                    return custTable.EndDisc;
                }

                return priceDiscGroup.GroupId;

            case ModuleInventCustVend::Vend :
                if (purchTable.RecId)
                {
                    return purchTable.EndDisc;
                }

                if (vendTable.RecId)
                {
                    return vendTable.EndDisc;
                }

                return priceDiscGroup.GroupId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void  init()
    {
        xArgs arguments = element.args();

        mcrCallCenterConfig = isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter));
        tradeBrokerConfig   = isConfigurationkeyEnabled(configurationKeyNum(TradeBroker));
        tamPromotionsManagementconfig   = isConfigurationkeyEnabled(configurationKeyNum(TAMPromotionsManagement));

        super();

        //if type is trade promotion, do not allow edit/delete/create
        if (priceDiscTable.MCRPriceDiscGroupType == MCRPriceDiscGroupType::TradePromotion)
        {
            InventDim_ds.allowEdit(false);
            InventDim_ds.allowCreate(false);
            InventDim_ds.allowDelete(false);
        }

        if (!element.args().record() || !element.args().parmEnumType())
        {
            isRelation = false;
            element.design().caption("@SYS135276");
        }
        else
        {
            isRelation = true;
            relationType = element.args().parmEnum();
            element.design().caption(strfmt('%1',relationType));
        }

        // <GEERU>
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        element.initParameters();

        if (isRelation)
        {
            element.initRelation();
        }

        priceDiscTable_ds.queryBuildDataSource().clearRanges();
        priceDiscTable_ds.queryBuildDataSource().clearDynalinks();

        if (element.args().menuItemName() == menuItemDisplayStr(RetailPricingDiscountActiveTradeAgreement))
        {
            str formatedDateRange = strFmt('(((%1 <= %3) || (%1 == %4)) && ((%2 >= %3) || (%2 == %4)))',
                                            fieldStr(PriceDiscTable, FromDate),
                                            fieldStr(PriceDiscTable, ToDate),
                                            date2StrXpp(SysQueryRangeUtil::currentDate()),
                                            date2StrXpp(dateNull()));

            QueryBuildRange dateRange = PriceDiscTable_ds.queryBuildDataSource().addRange(fieldNum(PriceDiscTable, FromDate));
            dateRange.value(formatedDateRange);
            
            if (PriceDiscTableUseOpenRangesFlight::instance().isEnabled())
            {
                dateRange.status(RangeStatus::Open);
            }
            else
            {
                dateRange.status(RangeStatus::Hidden);
            }

            QueryBuildRange relationRange = PriceDiscTable_ds.queryBuildDataSource().addRange(fieldNum(PriceDiscTable, Relation));
            relationRange.value(
                strFmt('%1,%2,%3,%4',
                    enum2str(PriceType::PriceSales),
                    enum2str(PriceType::LineDiscSales),
                    enum2str(PriceType::MultiLineDiscSales),
                    enum2str(PriceType::EndDiscSales)));
        }

        if (PriceDiscTableReinitRangeFlight::instance().isEnabled())
        {
            blockPriceType = SysQuery::findOrCreateRange(priceDiscTable_ds.queryBuildDataSource(), fieldnum(PriceDiscTable, Relation));
        }
        else
        {
            blockPriceType = priceDiscTable_ds.queryBuildDataSource().addRange(fieldNum(PriceDiscTable, Relation));
        }

        if (PriceDiscTableUseOpenRangesFlight::instance().isEnabled())
        {
            blockPriceType.status(RangeStatus::Open);
        }
        else
        {
            blockPriceType.status(RangeStatus::Hidden);
        }

        // <GEERU>
        if (countryRegion_RU)
        {
            blockAgreement = priceDiscTable_ds.queryBuildDataSource().addRange(fieldNum(PriceDiscTable, AgreementHeaderExt_RU));
            blockAgreement.status(RangeStatus::Hidden);
        }
        // </GEERU>
        switch (module)
        {
            case ModuleInventCustVend::Invent :
                blockCode       = priceDiscTable_ds.queryBuildDataSource().addRange(fieldnum(PriceDiscTable, ItemCode));
                break;

            default :
                blockCode       = priceDiscTable_ds.queryBuildDataSource().addRange(fieldnum(PriceDiscTable, AccountCode));

                // if price agreements are looked up for a purchase/sales order or sales quotations
                // also filter by ordered items
                if (this.isLineFilterEnabled())
                {
                    blockCodeOrderedItems = priceDiscTable_ds.queryBuildDataSource().addRange(fieldnum(PriceDiscTable, ItemCode));
                    
                    if (PriceDiscTableUseOpenRangesFlight::instance().isEnabled())
                    {
                        blockCodeOrderedItems.status(RangeStatus::Open);
                    }
                    else
                    {
                        blockCodeOrderedItems.status(RangeStatus::Hidden);
                    }
                }

                break;
        }

        if (PriceDiscTableUseOpenRangesFlight::instance().isEnabled())
        {
            blockCode.status(RangeStatus::Open);
        }
        else
        {
            blockCode.status(RangeStatus::Hidden);
        }

        element.updateDesign(InventDimFormDesignUpdate::Init);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAgreement_RU</Name>
				<Source><![CDATA[
    void initAgreement_RU()
    {
        SalesAgreementHeader salesAgreementHeader;
        PurchAgreementHeader purchAgreementHeader;

        switch (agreementHeader.moduleType())
        {
            case ModuleSalesPurch::Sales:
                salesAgreementHeader = agreementHeader as SalesAgreementHeader;
                accountRelation      = salesAgreementHeader.CustAccount;
                break;
            case ModuleSalesPurch::Purch:
                purchAgreementHeader = agreementHeader as PurchAgreementHeader;
                accountRelation      = purchAgreementHeader.VendAccount;
                break;
        }
        currencyCode = agreementHeader.Currency;
        calledFromSalesPurchAgreement = true;

        agreementHeaderExtRecId = agreementHeaderExt.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustTable</Name>
				<Source><![CDATA[
    void  initCustTable()
    {
        accountRelation = custTable.AccountNum;
        currencyCode    = custTable.Currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTable</Name>
				<Source><![CDATA[
    void  initFromCustTable()
    {
        element.initCustTable();

        priceDiscTable.Currency = currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    void  initFromInventTable()
    {
        element.initInventTable();
        priceDiscTable.UnitId = unitID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTable</Name>
				<Source><![CDATA[
    void  initFromVendTable()
    {
        element.initVendTable();

        priceDiscTable.Currency = currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTable</Name>
				<Source><![CDATA[
    void  initInventTable()
    {
        itemRelation = inventTable.ItemId;

        if (PriceTypeTradeAgreementMapping::newPriceTypeTradeAgreementMapping(relationType).partyRoleModule() == ModuleInventCustVend::Vend)
        {
            unitID = inventTable.purchUnitId();
        }
        else
        {
            unitID = inventTable.salesUnitId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveRelationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>PriceType</c> relation based on the given module.
    /// </summary>
    /// <param name = "_module">
    /// The <c>ModuleInventCustVend</c> value.
    /// </param>
    /// <returns>
    /// The <c>PriceType</c> relation based on the given module.
    /// </returns>
    protected PriceType retrieveRelationType(ModuleInventCustVend _module)
    {
        ModuleInventCustVend custVend;

        if (_module == ModuleInventCustVend::Invent)
        {
            if ((relationType == PriceType::LineDiscPurch) || (relationType == PriceType::MultiLineDiscPurch))
            {
                custVend = ModuleInventCustVend::Vend;
            }
            else
            {
                custVend = ModuleInventCustVend::Cust;
            }
        }
        else
        {
            custVend = module;
        }

        return PriceGroupTypeTradeAgreementMapping::newPriceGroupTypeTradeAgreementMapping(priceDiscGroup.type).priceDiscType(custVend);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    void  initParameters()
    {
        ModuleInventCustVend        custVend;
        tableId                     callerTableId;

        if (priceDiscGroup.RecId)
        {
            priceDiscGroup = element.args().record();
            relationType = this.retrieveRelationType(module);
        }

        currencyCode = Ledger::accountingCurrency(CompanyInfo::current());
        if (element.args().record())
        {
            this.initFromCallerTable(element.args().record().TableId);
        }
        else if (element.args().caller() is PriceDiscICallerParameters)
        {
            this.initFromPriceDiscCallerParams(element.args().caller());
        }

        if ((!isRelation && module == ModuleInventCustVend::Vend) ||
            (element.args().menuItemName() == menuitemDisplayStr(PriceDiscTable_PurchAction)))
        {
            custVendName.label("@SYS27875");
        }

        // <GEERU>
        if (countryRegion_RU)
        {
            priceDiscTable_AgreementHeaderExt_RU.visible(calledFromSalesPurchAgreement);
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPriceDiscGroup</Name>
				<Source><![CDATA[
    void  initPriceDiscGroup()
    {
        if (module == ModuleInventCustVend::Invent)
        {
            itemCode = PriceDiscProductCodeType::GroupId;
        }
        else
        {
            accountCode = PriceDiscPartyCodeType::GroupId;
        }

        currencyCode = Ledger::accountingCurrency(CompanyInfo::current());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchRFQTable</Name>
				<Source><![CDATA[
    void  initPurchRFQTable()
    {
        vendTable       = VendTable::find(purchRFQTable.VendAccount);
        accountRelation = vendTable.AccountNum;
        currencyCode    = vendTable.Currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchTable</Name>
				<Source><![CDATA[
    void  initPurchTable()
    {
        vendTable       = purchTable.vendTable_OrderAccount();
        accountRelation = vendTable.AccountNum;
        currencyCode    = vendTable.Currency;
        // <GEERU>
        if (PurchParameters::find().AgreementPriceDisc_RU)
        {
            agreementHeaderExtRecId       = purchTable.PurchTable_RU().AgreementHeaderExt_RU;
            calledFromSalesPurchAgreement = true;
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecord</Name>
				<Source><![CDATA[
    void  initRecord()
    {
        if (priceDiscTable.ItemCode == PriceDiscProductCodeType::All)
        {
            priceDiscTable_ds.object(fieldNum(PriceDiscTable, ItemRelation)).skip(true);
            priceDiscTable_ds.object(fieldNum(PriceDiscTable, ItemRelation)).allowEdit(false);
        }
        else
        {
            priceDiscTable_ds.object(fieldNum(PriceDiscTable, ItemRelation)).skip(false);
            priceDiscTable_ds.object(fieldNum(PriceDiscTable, ItemRelation)).allowEdit(true);
        }

        if (priceDiscTable.Relation == PriceType::PriceSales ||
            priceDiscTable.Relation == PriceType::LineDiscSales ||
            priceDiscTable.Relation == PriceType::MultiLineDiscSales ||
            priceDiscTable.Relation == PriceType::EndDiscSales)
        {
            priceDiscTable_ds.object(fieldNum(PriceDiscTable, GenericCurrency)).skip(false);
            priceDiscTable_ds.object(fieldNum(PriceDiscTable, GenericCurrency)).allowEdit(true);
        }
        else
        {
            priceDiscTable_ds.object(fieldNum(PriceDiscTable, GenericCurrency)).skip(true);
            priceDiscTable_ds.object(fieldNum(PriceDiscTable, GenericCurrency)).allowEdit(false);
        }

        if (priceDiscTable.AccountCode == PriceDiscPartyCodeType::All)
        {
            priceDiscTable_ds.object(fieldNum(PriceDiscTable, AccountRelation)).skip(true);
            priceDiscTable_ds.object(fieldNum(PriceDiscTable, AccountRelation)).allowEdit(false);
        }
        else
        {
            priceDiscTable_ds.object(fieldNum(PriceDiscTable, AccountRelation)).skip(false);
            priceDiscTable_ds.object(fieldNum(PriceDiscTable, AccountRelation)).allowEdit(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelation</Name>
				<Source><![CDATA[
    void  initRelation()
    {
        boolean canShowCalculationid = false;

        priceDiscTable_ds.object(fieldnum(PriceDiscTable, ItemCode)).visible    (true);
        priceDiscTable_ds.object(fieldnum(PriceDiscTable, ItemRelation)).visible(true);
        priceDiscTable_ds.object(fieldnum(PriceDiscTable, UnitId)).visible      (true);
        priceDiscTable_ds.object(fieldnum(PriceDiscTable, PriceUnit)).visible   (true);
        priceDiscTable_ds.object(fieldnum(PriceDiscTable, Markup)).visible      (true);
        itemName.visible(true);
        custVendName.visible(true);
        percent.visible(true);

        switch (module)
        {
            case ModuleInventCustVend::Invent :

                switch (relationType)
                {
                    case PriceType::PricePurch,
                         PriceType::PriceSales :

                        itemCode = PriceDiscProductCodeType::Table;
                        break;

                    case PriceType::LineDiscPurch,
                         PriceType::LineDiscSales :

                        if (priceDiscGroup.RecId)
                        {
                            itemCode = PriceDiscProductCodeType::GroupId;
                        }
                        else
                        {
                            itemCode = PriceDiscProductCodeType::Table;
                        }
                        break;

                    case PriceType::MultiLineDiscPurch,
                         PriceType::MultiLineDiscSales :

                        itemCode = PriceDiscProductCodeType::GroupId;
                        break;

                    case PriceType::EndDiscPurch,
                         PriceType::MCRPostageDisc,
                         PriceType::EndDiscSales :

                        itemCode = PriceDiscProductCodeType::All;
                        break;
                }

                priceDiscTable_ds.object(fieldnum(PriceDiscTable, ItemCode)).visible         (false);
                priceDiscTable_ds.object(fieldnum(PriceDiscTable, ItemRelation)).visible     (false);
                itemName.visible(false);
                priceDiscTable_ds.object(fieldnum(PriceDiscTable, UnitId)).visible             (true);
                break;

            case ModuleInventCustVend::Cust :
                itemCode = PriceTypeTradeAgreementMapping::newPriceTypeTradeAgreementMapping(relationType).priceDiscProductCodeType();
                priceDiscTable_ds.object(fieldnum(PriceDiscTable, AccountCode)).visible      (false);
                priceDiscTable_ds.object(fieldnum(PriceDiscTable, AccountRelation)).visible  (false);
                custVendName.visible(false);
                delivery.visible                        (false);
                break;

            case ModuleInventCustVend::Vend :
                itemCode = PriceTypeTradeAgreementMapping::newPriceTypeTradeAgreementMapping(relationType).priceDiscProductCodeType();
                priceDiscTable_ds.object(fieldnum(PriceDiscTable, AccountCode)).visible      (false);
                priceDiscTable_ds.object(fieldnum(PriceDiscTable, AccountRelation)).visible  (false);
                custVendName.visible(false);
                delivery.visible                        (false);
                break;
        }

        switch (relationType)
        {
            case PriceType::PricePurch,
                 PriceType::PriceSales :

                priceDiscTable_Amount.label         ("@SYS11865");
                priceDiscTable_Amount.helpText      ("@SYS79486");
                prices.visible(true);
                priceDiscTable_ds.object(fieldnum(PriceDiscTable, PriceUnit)).visible    (true);
                priceDiscTable_ds.object(fieldnum(PriceDiscTable, Markup)).visible       (true);
                priceDiscTable_ds.object(fieldnum(PriceDiscTable, ItemCode)).visible     (false);
                percent.visible                     (false);
                delivery.visible                    (true);
                break;

            case PriceType::LineDiscPurch,
                 PriceType::LineDiscSales :

                priceDiscTable_Amount.label         ("@SYS11829");
                priceDiscTable_Amount.helpText      ("@SYS79487");
                prices.visible(false);
                priceDiscTable_ds.object(fieldnum(PriceDiscTable, PriceUnit)).visible    (false);
                priceDiscTable_ds.object(fieldnum(PriceDiscTable, Markup)).visible       (false);
                percent.visible                     (true);
                delivery.visible                    (false);
                break;

            case PriceType::MultiLineDiscPurch,
                 PriceType::MultiLineDiscSales :

                priceDiscTable_Amount.label         ("@SYS11829");
                priceDiscTable_Amount.helpText      ("@SYS79488");
                priceDiscTable_ds.object(fieldnum(PriceDiscTable, UnitId)).visible         (false);
                prices.visible(false);
                priceDiscTable_ds.object(fieldnum(PriceDiscTable, PriceUnit)).visible    (false);
                priceDiscTable_ds.object(fieldnum(PriceDiscTable, Markup)).visible       (false);
                percent.visible                     (true);
                delivery.visible                    (false);
                break;

            case PriceType::EndDiscPurch,
                 PriceType::MCRPostageDisc,
                 PriceType::EndDiscSales :

                priceDiscTable_QuantityAmountFrom.label ("@SYS134594");
                priceDiscTable_QuantityAmountTo.label("@SYS134595");
                priceDiscTable_Amount.label         ("@SYS11829");
                priceDiscTable_Amount.helpText      ("@SYS79489");
                priceDiscTable_ds.object(fieldnum(PriceDiscTable, ItemCode)).visible     (false);
                priceDiscTable_ds.object(fieldnum(PriceDiscTable, ItemRelation)).visible (false);
                itemName.visible(false);
                priceDiscTable_ds.object(fieldnum(PriceDiscTable, UnitId)).visible         (false);
                prices.visible(false);
                priceDiscTable_ds.object(fieldnum(PriceDiscTable, PriceUnit)).visible    (false);
                priceDiscTable_ds.object(fieldnum(PriceDiscTable, Markup)).visible       (false);
                percent.visible                     (true);
                delivery.visible                    (false);
                break;
        }

        switch (relationType)
        {
            case PriceType::PricePurch,
                 PriceType::LineDiscPurch,
                 PriceType::MultiLineDiscPurch,
                 PriceType::EndDiscPurch :

                priceDiscTable_Currency.extendedDataType(extendedtypenum(VendCurrencyCode));
                priceDiscTable_ds.object(fieldnum(PriceDiscTable, CalendarDays)).visible       (true);
                // <GEERU>
                inventBailee_RU.visible(false);
                // </GEERU>
                custVendName.label("@SYS27875");
                break;

            case PriceType::PriceSales,
                 PriceType::LineDiscSales,
                 PriceType::MultiLineDiscSales,
                 PriceType::MCRPostageDisc,
                 PriceType::EndDiscSales:

                priceDiscTable_Currency.extendedDataType(extendedtypenum(CustCurrencyCode));
                priceDiscTable_ds.object(fieldnum(PriceDiscTable, CalendarDays)).visible       (false);
                // <GEERU>
                inventBailee_RU.visible(true);
                // </GEERU>
                custVendName.label("@SYS27874");
                break;
        }

        switch (relationType)
        {
            case PriceType::LineDiscSales :
                priceDiscTable_ds.object(fieldnum(PriceDiscTable, ItemCode)).visible     (true);
            //no break
            case PriceType::PriceSales :
                priceDiscTable_ds.object(fieldnum(PriceDiscTable, ItemRelation)).visible (true);
                break;
            default:
                break;
        }
        canShowCalculationid = (relationType    == PriceType::PricePurch
                                && (module      == ModuleInventCustVend::Invent
                                    || module   == ModuleInventCustVend::Vend));

        PriceDiscTable_PDSCalculationId.visible(canShowCalculationid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRetailLabelChangeJournalTrans</Name>
				<Source><![CDATA[
    private void initRetailLabelChangeJournalTrans()
    {
        itemRelation = retailLabelChangeJournalTrans.ItemId;
        inventTable = InventTable::find(itemRelation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesQuotationTable</Name>
				<Source><![CDATA[
    void  initSalesQuotationTable()
    {
        custTable       = salesQuotationTable.custTable_CustAccount();
        accountRelation = custTable.AccountNum;
        currencyCode    = custTable.Currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesTable</Name>
				<Source><![CDATA[
    void  initSalesTable()
    {
        custTable       = salesTable.custTable_CustAccount();
        accountRelation = custTable.AccountNum;
        currencyCode    = custTable.Currency;
        // <GEERU>
        if (SalesParameters::find().AgreementPriceDisc_RU)
        {
            agreementHeaderExtRecId       = salesTable.salesTable_RU().AgreementHeaderExt_RU;
            calledFromSalesPurchAgreement = true;
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendTable</Name>
				<Source><![CDATA[
    void  initVendTable()
    {
        accountRelation = vendTable.AccountNum;
        currencyCode    = vendTable.Currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimSetupObject</Name>
				<Source><![CDATA[
    Object inventDimSetupObject()
    {
        return inventDimFormSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    ItemId itemId()
    {
        return priceDiscTable.itemId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDisc</Name>
				<Source><![CDATA[
    PriceGroupId  lineDisc()
    {
        switch (module)
        {
            case ModuleInventCustVend::Invent :
                if (priceDiscGroup.RecId)
                {
                    return priceDiscGroup.GroupId;
                }

                if (PriceTypeTradeAgreementMapping::newPriceTypeTradeAgreementMapping(relationType).partyRoleModule() == ModuleInventCustVend::Vend)
                {
                    return inventTable.purchLineDisc();
                }

                return inventTable.salesLineDisc();

            case ModuleInventCustVend::Cust :
                if (salesTable.RecId)
                {
                    return salesTable.LineDisc;
                }

                if (salesQuotationTable.RecId)
                {
                    return salesQuotationTable.LineDisc;
                }

                if (custTable.RecId)
                {
                    return custTable.LineDisc;
                }

                return priceDiscGroup.GroupId;

            case ModuleInventCustVend::Vend :
                if (purchTable.RecId)
                {
                    return purchTable.LineDisc;
                }

                if (vendTable.RecId)
                {
                    return vendTable.LineDisc;
                }

                return priceDiscGroup.GroupId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInitSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the price discount form to the sales line customer and customer currency values of the calling sales order.
    /// </summary>
    /// <remarks>
    ///     When the price discount form is called from the sales line
    ///     trade discout link, this code will get executed so that the customer account
    ///     will be based on the sales Line cust account value and the currency will be
    ///     based on the sales line customer's currency.
    /// </remarks>
    void  mcrInitSalesLine()
    {
        custTable       = CustTable::find(mcrSalesLine.CustAccount);
        currencyCode    = custTable.currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSetPriceDiscDSProperties</Name>
				<Source><![CDATA[
    private void mcrSetPriceDiscDSProperties(boolean _value = false)
    {
        PriceDiscTable_ds.allowCreate(_value);
        PriceDiscTable_ds.allowDelete(_value);
        PriceDiscTable_ds.allowEdit(_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>multiLineDisc</Name>
				<Source><![CDATA[
    PriceGroupId multiLineDisc()
    {
        switch (module)
        {
            case ModuleInventCustVend::Invent :
                if (priceDiscGroup.RecId)
                {
                    return priceDiscGroup.GroupId;
                }

                if (PriceTypeTradeAgreementMapping::newPriceTypeTradeAgreementMapping(relationType).partyRoleModule() == ModuleInventCustVend::Vend)
                {
                    return inventTable.purchMultiLineDisc();
                }

                return inventTable.salesMultiLineDisc();

            case ModuleInventCustVend::Cust :
                if (salesTable.RecId)
                {
                    return salesTable.MultiLineDisc;
                }

                if (salesQuotationTable.RecId)
                {
                    return salesQuotationTable.MultiLineDisc;
                }

                if (custTable.RecId)
                {
                    return custTable.MultiLineDisc;
                }

                return priceDiscGroup.GroupId;

            case ModuleInventCustVend::Vend :
                if (purchTable.RecId)
                {
                    return purchTable.MultiLineDisc;
                }

                if (vendTable.RecId)
                {
                    return vendTable.MultiLineDisc;
                }

                return priceDiscGroup.GroupId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceGroup</Name>
				<Source><![CDATA[
    PriceGroupId  priceGroup()
    {
        switch (module)
        {
            case ModuleInventCustVend::Invent :
                return '';

            case ModuleInventCustVend::Cust :
                if (salesTable.RecId)
                {
                    return salesTable.PriceGroupId;
                }

                if (salesQuotationTable.RecId)
                {
                    return salesQuotationTable.PriceGroupId;
                }

                if (custTable.RecId)
                {
                    return custTable.PriceGroup;
                }

                return priceDiscGroup.GroupId;

            case ModuleInventCustVend::Vend :
                if (purchTable.RecId)
                {
                    return purchTable.PriceGroupId;
                }

                if (vendTable.RecId)
                {
                    return vendTable.PriceGroup;
                }

                return priceDiscGroup.GroupId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSelect</Name>
				<Source><![CDATA[
    void  reSelect()
    {
        str filter;

        priceDiscTable_ds.object(fieldNum(PriceDiscTable, AccountCode)).allowEdit(true);
        priceDiscTable_ds.object(fieldNum(PriceDiscTable, AccountCode)).skip(false);
        priceDiscTable_ds.object(fieldNum(PriceDiscTable, AccountRelation)).allowEdit(true);
        priceDiscTable_ds.object(fieldNum(PriceDiscTable, AccountRelation)).skip(false);
        priceDiscTable_ds.object(fieldNum(PriceDiscTable, ItemCode)).allowEdit(true);
        priceDiscTable_ds.object(fieldNum(PriceDiscTable, ItemCode)).skip(false);
        priceDiscTable_ds.object(fieldNum(PriceDiscTable, ItemRelation)).allowEdit(true);
        priceDiscTable_ds.object(fieldNum(PriceDiscTable, ItemRelation)).skip(false);

        priceDiscTable_ds.object(fieldNum(PriceDiscTable, ItemCode)).allowEdit(false);
        priceDiscTable_ds.object(fieldNum(PriceDiscTable, ItemCode)).skip(true);
        priceDiscTable_ds.object(fieldNum(PriceDiscTable, AccountCode)).allowEdit(false);
        priceDiscTable_ds.object(fieldNum(PriceDiscTable, AccountCode)).skip(false);

        switch (module)
        {
            case ModuleInventCustVend::Invent :
                priceDiscTable_ds.object(fieldNum(PriceDiscTable, UnitId)).allowEdit(false);
                priceDiscTable_ds.object(fieldNum(PriceDiscTable, UnitId)).skip(true);

                switch (itemCode)
                {
                    case PriceDiscProductCodeType::Table :
                        itemRelation = inventTable.ItemId;
                        priceDiscTable_ds.object(fieldNum(PriceDiscTable, UnitId)).allowEdit(true);
                        priceDiscTable_ds.object(fieldNum(PriceDiscTable, UnitId)).skip(false);
                        break;

                    case PriceDiscProductCodeType::GroupId :
                        itemRelation = element.accountItemGroupRelation();
                        break;

                    case PriceDiscProductCodeType::All :
                        itemRelation = '';
                        break;
                }

                switch (relationType)
                {
                    case PriceType::PricePurch,
                         PriceType::PriceSales :

                         priceDiscTable_ds.object(fieldNum(PriceDiscTable, AccountCode)).allowEdit(true);
                        priceDiscTable_ds.object(fieldNum(PriceDiscTable, AccountCode)).skip(false);
                        accountCode = PriceDiscPartyCodeType::Table;
                        break;

                    case PriceType::LineDiscPurch,
                         PriceType::LineDiscSales :

                         priceDiscTable_ds.object(fieldNum(PriceDiscTable, AccountCode)).allowEdit(true);
                        priceDiscTable_ds.object(fieldNum(PriceDiscTable, AccountCode)).skip(false);
                        accountCode = PriceDiscPartyCodeType::Table;
                        break;

                    case PriceType::MultiLineDiscPurch,
                         PriceType::MultiLineDiscSales :

                        priceDiscTable_ds.object(fieldNum(PriceDiscTable, AccountCode)).allowEdit(true);
                        priceDiscTable_ds.object(fieldNum(PriceDiscTable, AccountCode)).skip(false);
                        accountCode = PriceDiscPartyCodeType::GroupId;
                        break;

                    case PriceType::EndDiscPurch,
                         PriceType::MCRPostageDisc,
                         PriceType::EndDiscSales :

                        priceDiscTable_ds.object(fieldNum(PriceDiscTable, AccountCode)).allowEdit(true);
                        priceDiscTable_ds.object(fieldNum(PriceDiscTable, AccountCode)).skip(false);
                        accountCode = PriceDiscPartyCodeType::All;
                        break;
                }
                break;

            default :
                switch (accountCode)
                {
                    case PriceDiscPartyCodeType::Table :
                        accountRelation = element.accountRelation();
                        break;

                    case PriceDiscPartyCodeType::GroupId :
                        accountRelation = element.accountItemGroupRelation();
                        break;

                    case PriceDiscPartyCodeType::All :
                        accountRelation = '';
                        break;
                }

                switch (relationType)
                {
                    case PriceType::PricePurch,
                         PriceType::PriceSales :

                        priceDiscTable_ds.object(fieldNum(PriceDiscTable, ItemCode)).allowEdit(false);
                        priceDiscTable_ds.object(fieldNum(PriceDiscTable, ItemCode)).skip(true);
                        itemCode = PriceDiscProductCodeType::Table;
                        break;

                    case PriceType::LineDiscPurch,
                         PriceType::LineDiscSales :

                        priceDiscTable_ds.object(fieldNum(PriceDiscTable, ItemCode)).allowEdit(true);
                        priceDiscTable_ds.object(fieldNum(PriceDiscTable, ItemCode)).skip(false);
                        itemCode = PriceDiscProductCodeType::Table;
                        break;

                    case PriceType::MultiLineDiscPurch,
                         PriceType::MultiLineDiscSales  :

                        priceDiscTable_ds.object(fieldNum(PriceDiscTable, ItemCode)).allowEdit(true);
                        priceDiscTable_ds.object(fieldNum(PriceDiscTable, ItemCode)).skip(false);
                        itemCode = PriceDiscProductCodeType::GroupId;
                        break;

                    case PriceType::EndDiscPurch,
                         PriceType::MCRPostageDisc,
                         PriceType::EndDiscSales :

                        priceDiscTable_ds.object(fieldNum(PriceDiscTable, ItemCode)).allowEdit(false);
                        priceDiscTable_ds.object(fieldNum(PriceDiscTable, ItemCode)).skip(true);
                        itemCode = PriceDiscProductCodeType::All;
                        break;
                }
                break;
        }

        // <GEERU>
        if (countryRegion_RU)
        {
            blockAgreement.value(queryValue(agreementHeaderExtRecId));
            if (calledFromSalesPurchAgreement && !agreementHeaderExt.RecId)
            {
                blockAgreement.value(blockAgreement.value() + ',' + SysQuery::valueEmptyString());
            }
        }
        // </GEERU>

        if (isRelation)
        {
            if (PriceDiscTableReinitRangeFlight::instance().isEnabled())
            {
                blockPriceType = SysQuery::findOrCreateRange(priceDiscTable_ds.queryBuildDataSource(), fieldnum(PriceDiscTable, Relation));
            }
            blockPriceType.value(queryValue(relationType));
            filter = this.buildSearchFilter(relationType);
        }
        else
        {
            switch (element.args().menuItemName())
            {
                case menuitemDisplayStr(PriceDiscTable_Sales):
                case menuitemDisplayStr(PriceDiscTable_SalesAction):
                    filter = this.buildViewAllAgreementFilter(ModuleSalesPurch::Sales);
                    break;

                case menuitemDisplayStr(PriceDiscTable_Purch):
                case menuitemDisplayStr(PriceDiscTable_PurchAction):
                    filter = this.buildViewAllAgreementFilter(ModuleSalesPurch::Purch);
                    break;
            }
        }

        if (PriceDiscTableReinitRangeFlight::instance().isEnabled())
        {
            switch (module)
            {
                case ModuleInventCustVend::Invent :
                    blockCode = SysQuery::findOrCreateRange(PriceDiscTable_ds.queryBuildDataSource(), fieldnum(PriceDiscTable, ItemCode));
                    break;

                default :
                    blockCode = SysQuery::findOrCreateRange(priceDiscTable_ds.queryBuildDataSource(), fieldnum(PriceDiscTable, AccountCode));

                    // if price agreements are looked up for a purchase/sales order or sales quotations
                    // also filter by ordered items
                    if (this.isLineFilterEnabled())
                    {
                        blockCodeOrderedItems = SysQuery::findOrCreateRange(priceDiscTable_ds.queryBuildDataSource(), fieldnum(PriceDiscTable, ItemCode));
                    }

                    break;
            }
        }
        blockCode.value(filter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    boolean salesPrice()
    {
        switch (module)
        {
            case ModuleInventCustVend::Cust :   return true;
            case ModuleInventCustVend::Invent:
                if (relationType == PriceType::EndDiscSales ||
                    relationType == PriceType::LineDiscSales ||
                    relationType == PriceType::MultiLineDiscSales ||
                    relationType == PriceType::MCRPostageDisc ||
                    relationType == PriceType::PriceSales)
                    return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    void updateDesign(InventDimFormDesignUpdate mode)
    {
        InventDimParm   inventDimParmVisible;
        InventDimParm   inventDimParmEnabled;

        InventDimGroupSetup         inventDimGroupSetup;

        switch (mode)
        {
            case InventDimFormDesignUpdate::Init          :
            case InventDimFormDesignUpdate::LinkActive    :
                if (!inventDimFormSetup)
                {
                    inventDimFormSetup  = InventDimCtrl::newFromForm(element);
                }
                inventDimFormSetup.parmSkipOnHandLookUp(true);

                if (itemCode == PriceDiscProductCodeType::Table)
                {
                    inventDimParmVisible.initPriceDiscDimAllGrp();
                    inventDimParmFixed.enabled(true);
                    inventDimFormSetup.parmDimParmVisibleGrid(inventDimParmVisible);
                }
                else
                {
                    inventDimParmVisible.clear();
                    inventDimParmFixed.enabled(false);
                    inventDimFormSetup.parmDimParmVisibleGrid(inventDimParmVisible,true);
                }

            case InventDimFormDesignUpdate::Active        :
                inventDimFormSetup.formActiveSetup();
                if (itemCode == PriceDiscProductCodeType::Table && priceDiscTable.ItemRelation)
                {
                    //Diviating from the common pattern using InventDimGroupSetup::newItemId(....) to allow the form to load with incomplete dimension settings on the product.
                    inventDimGroupSetup = InventDimGroupSetup::newDimensionGroups(inventTable.productDimensionGroup(),
                                                                                  inventTable.storageDimensionGroup(),
                                                                                  inventTable.trackingDimensionGroup());
                    inventDimGroupSetup.inventDimParmActive(inventDimParmEnabled);
                    if (PriceTypeTradeAgreementMapping::newPriceTypeTradeAgreementMapping(relationType).partyRoleModule() == ModuleInventCustVend::Vend)
                    {
                        inventDimGroupSetup.inventDimParmActivePurchPrice(inventDimParmPriceSetup);
                    }
                    else
                    {
                        inventDimGroupSetup.inventDimParmActiveSalesPrice(inventDimParmPriceSetup);
                    }
                    inventDimParmPriceWarning.initFromInventDim(inventDim);
                    inventDimParmPriceWarning = InventDimParm::xorParms(inventDimParmPriceWarning, inventDimParmPriceSetup);
                }
                else
                {
                    inventDimParmEnabled.clear();
                    inventDimParmPriceSetup.clear();
                }

                inventDimFormSetup.parmDimParmEnabled(inventDimParmEnabled);
                inventDimFormSetup.formSetControls(true);

                if (relationType == PriceType::EndDiscPurch 
                    || relationType == PriceType::EndDiscSales
                    || relationType == PriceType::MCRPostageDisc)
                {
                    inventDimFormSetup.hideAll();
                    inventDimParmFixed.enabled(false);
                }
                break;

            case InventDimFormDesignUpdate::FieldChange   :
                inventDimFormSetup.formActiveSetup();

                if (itemCode == PriceDiscProductCodeType::Table && priceDiscTable.ItemRelation)
                {
                    //Diviating from the common pattern using InventDimGroupSetup::newItemId(....) to allow the form to load with incomplete dimension settings on the product.
                    inventDimGroupSetup = InventDimGroupSetup::newDimensionGroups(inventTable.productDimensionGroup(),
                                                                                  inventTable.storageDimensionGroup(),
                                                                                  inventTable.trackingDimensionGroup());
                    inventDimGroupSetup.inventDimParmActive(inventDimParmEnabled);
                }
                else
                {
                    inventDimParmEnabled.clear();
                }
                inventDimFormSetup.parmDimParmEnabled(inventDimParmEnabled);
                inventDimFormSetup.formSetControls(false);
                break;

            default :
                throw error(strfmt("@SYS54195",funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineFilterEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether line filter is enabled, or not.
    /// </summary>
    /// <returns>
    /// true, if line filter is enabled; otherwise, false.
    /// </returns>
    protected boolean isLineFilterEnabled()
    {
        return salesTable || salesQuotationTable || purchTable || priceDiscCallerParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPriceDiscCallerParams</Name>
				<Source><![CDATA[
    private void initFromPriceDiscCallerParams(PriceDiscICallerParameters _caller)
    {
        priceDiscCallerParams = _caller;
        module = ModuleInventCustVend::Cust;

        custTable       = CustTable::find(_caller.parmCustAccount());
        accountRelation = custTable.AccountNum;
        currencyCode    = custTable.Currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCallerTable</Name>
				<Source><![CDATA[
    protected void initFromCallerTable(TableId _callerTableId)
    {
        switch (_callerTableId)
        {
            case tablenum(SalesTable) :
                salesTable      = element.args().record();
                module          = ModuleInventCustVend::Cust;
                element.initSalesTable();
                break;

            case tablenum(SalesQuotationTable) :
                salesQuotationTable = element.args().record();
                module              = ModuleInventCustVend::Cust;
                element.initSalesQuotationTable();
                break;

            case tablenum (SalesLine) :
                mcrSalesLine       = element.args().record();
                module          = ModuleInventCustVend::Cust;
                element.mcrInitSalesLine();
                break;

            case tablenum(CustTable) :
                custTable       = element.args().record();
                module          = ModuleInventCustVend::Cust;
                element.initCustTable();
                break;

            case tablenum(PurchTable) :
                purchTable      = element.args().record();
                module          = ModuleInventCustVend::Vend;
                element.initPurchTable();
                break;

            case tablenum(PurchRFQTable) :
            case tablenum(PurchRFQReplyTable) :
                if (_callerTableId == tablenum(PurchRFQReplyTable))
                {
                    PurchRFQReplyTable rfqReplyTable = element.args().record();
                    purchRFQTable = rfqReplyTable.purchRFQTable();
                }
                else
                    purchRFQTable = element.args().record();

                module          = ModuleInventCustVend::Vend;
                element.initPurchRFQTable();
                break;

            case tablenum(VendTable) :
                vendTable       = element.args().record();
                module          = ModuleInventCustVend::Vend;
                element.initVendTable();
                break;

            case tablenum(InventTable)  :
            case tablenum(BOMCalcTrans) :
            case tablenum(BOMCalcTransDetailUnionAll) :
            case tablenum(ProdCalcTrans) :
                if (_callerTableId == tablenum(InventTable))
                {
                    inventTable     = element.args().record();
                }
                else if (_callerTableId == tablenum(BOMCalcTrans))
                {
                    BOMCalcTrans bomCalcTrans    = element.args().record();
                    inventTable     = InventTable::find(bomCalcTrans.Resource);
                }
                else if (_callerTableId == tablenum(BOMCalcTransDetailUnionAll))
                {
                    BOMCalcTransDetailUnionAll bomCalcTransDetailUnionAll    = element.args().record();
                    inventTable                   = InventTable::find(bomCalcTransDetailUnionAll.Resource);
                }
                else if (_callerTableId == tablenum(ProdCalcTrans))
                {
                    ProdCalcTrans prodCalcTrans   = element.args().record();
                    inventTable     = InventTable::find(prodCalcTrans.Resource);
                }
                else
                {
                    throw error("@SYS18626");
                }

                module          = ModuleInventCustVend::Invent;
                element.initInventTable();
                break;

            case tablenum(PriceDiscGroup) :
                priceDiscGroup  = element.args().record();
                module          = priceDiscGroup.Module;
                element.initPriceDiscGroup();
                break;
            // <GEERU>
            case tableNum(SalesAgreementHeaderExt_RU):
            case tableNum(PurchAgreementHeaderExt_RU):
                agreementHeaderExt = element.args().record();
                agreementHeader    = AgreementHeader::find(agreementHeaderExt.AgreementHeader);
                module             = (agreementHeader.moduleType() == ModuleSalesPurch::Sales) ? ModuleInventCustVend::Cust
                                                                                                : ModuleInventCustVend::Vend;
                element.initAgreement_RU();
                break;
            // </GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerDatasourceOnQueryingEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Register the data source to which the filter should be applied.
    /// </summary>
    public void registerDatasourceOnQueryingEvent()
    {
        PriceDiscTable_DS.OnQueryExecuting += eventhandler(this.parmFilterFormQueryEventHandler().applyFilter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onFilterChanged</Name>
				<Source><![CDATA[
	/// <summary>
    /// Event handler to react on a filter change.
    /// </summary>
    public void onFilterChanged()
    {
		PriceDiscTable_DS.executeQuery();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>PriceDiscTable</Name>
				<Methods>
					<Method>
						<Name>itemName</Name>
						<Source><![CDATA[
        // This is itentionally left locally on the form because a migration causes too many RPC calls as call backs are needed to retreive the InventDim record
        display Name itemName()
        {
            Name name;
            switch (priceDiscTable.ItemCode)
            {
                case  PriceDiscProductCodeType::Table:
                    name = InventTable::find(priceDiscTable.ItemRelation).itemName(inventDim);
                    break;
                case  PriceDiscProductCodeType::GroupId:
                    name = PriceDiscGroup::name(ModuleInventCustVend::Invent,priceDiscTable.priceGroupType(),priceDiscTable.ItemRelation);
                    break;
            }
            return name;
        }

]]></Source>
					</Method>
					<Method>
						<Name>inventDim</Name>
						<Source><![CDATA[
        InventDim inventDim()
        {
            return inventDim;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;

            priceDiscTable.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            priceDiscTable.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;

            super();

            if (priceDiscTable.InventDimId != inventDim.InventDimId)
            {
                inventDim.data(InventDim::find(priceDiscTable.InventDimId));
                inventDim_ds.setCurrent();
            }

            priceDiscTable_ds.reread();
            priceDiscTable_ds.refresh();
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        void  linkActive()
        {
            PriceType  oldRelationType;

            oldRelationType = relationType;

            element.initParameters();

            if (oldRelationType != relationType)
            {
                element.initRelation();
                element.initRecord();
            }

            element.updateDesign(InventDimFormDesignUpdate::LinkActive);

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        void  initValue()
        {
            super();

            priceDiscTable.Module           = PriceTypeTradeAgreementMapping::newPriceTypeTradeAgreementMapping(relationType).partyRoleModule();
            priceDiscTable.Relation         = relationType;
            priceDiscTable.accountCode      = accountCode;
            priceDiscTable.itemCode         = itemCode;
            priceDiscTable.accountRelation  = accountRelation;
            priceDiscTable.itemRelation     = itemRelation;
            priceDiscTable.Currency         = currencyCode;
            priceDiscTable.UnitId           = unitID;
            // <GEERU>
            if (countryRegion_RU)
            {
                priceDiscTable.AgreementHeaderExt_RU = agreementHeaderExtRecId;
            }
            // </GEERU>
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        int  active()
        {
            int ok;

            ok = super();

            element.initRecord();

            element.updateDesign(InventDimFormDesignUpdate::Active);

            pdsCalculationTable.enabled((priceDiscTable.Module == ModuleInventCustVend::Vend
                || PriceDiscTable.Module == ModuleInventCustVend::Cust) && PriceDiscTable.PDSCalculationId);

            return ok;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            element.reSelect();

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>AccountCode</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            void  modified()
            {
                super();

                element.initRecord();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>AccountRelation</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            void  modified()
            {
                super();

                if (priceDiscTable.AccountCode == PriceDiscPartyCodeType::Table)
                {
                    if (PriceTypeTradeAgreementMapping::newPriceTypeTradeAgreementMapping(relationType).partyRoleModule() == ModuleInventCustVend::Vend)
                    {
                        vendTable = VendTable::find(priceDiscTable.AccountRelation);
                        element.initFromVendTable();
                    }
                    else
                    {
                        custTable = CustTable::find(priceDiscTable.AccountRelation);
                        element.initFromCustTable();
                    }
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>AgreementHeaderExt_RU</DataField>
						<Methods>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            public void jumpRef()
            {
                priceDiscTable.jumpRefAgreement_RU();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>FromDate</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                //validate the from date is before the two date
                if (PriceDiscTable.ToDate != datenull())
                {
                    if (PriceDiscTable.ToDate < PriceDiscTable.FromDate)
                    {
                        PriceDiscTable.FromDate = PriceDiscTable.orig().FromDate;
                        error("@MCR22774");
                        return;
                    }
                }
                super();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ItemCode</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            void  modified()
            {
                super();

                element.initRecord();
                element.updateDesign(InventDimFormDesignUpdate::FieldChange);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ItemRelation</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            void  modified()
            {
                super();

                if (priceDiscTable.ItemCode == PriceDiscProductCodeType::Table)
                {
                    inventTable = InventTable::find(priceDiscTable.ItemRelation);
                    element.initFromInventTable();
                }
                element.updateDesign(InventDimFormDesignUpdate::FieldChange);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>PriceUnit</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                PriceUnit oldPriceUnit;
                PriceUnit newPriceUnit;

                super();
                //  If the price unit is changed, covert the market price, market factor, and amount to match.
                oldPriceUnit = PriceDiscTable.orig().priceUnit();
                newPriceUnit = PriceDiscTable.priceUnit();
                ttsBegin;
                if (PriceDiscTable.RecId !=  0)
                {
                    PriceDiscTable.update();
                }
                ttsCommit;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ToDate</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                if (PriceDiscTable.ToDate < PriceDiscTable.FromDate)
                {
                    PriceDiscTable.ToDate = PriceDiscTable.orig().ToDate;
                    error("@MCR22774");
                    return;
                }
                super();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>UnitId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                //  If the unit is changed, convert the market price, market factor, and amount to match.

                ttsBegin;
                if (PriceDiscTable.RecId !=  0)
                {
                    PriceDiscTable.update();
                }
                ttsCommit;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>InventDim</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            //    super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            inventDim.data(InventDim::find(priceDiscTable.InventDimId));

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>PriceDiscAdm</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();
            priceDiscTable_ds.research();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>PriceDiscTable</Name>
			<Table>PriceDiscTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountRelation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Agreement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AgreementHeaderExt_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AllocateMarkup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Amount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CalendarDays</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Currency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeliveryTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DisregardLeadTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FromDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GenericCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventBaileeFreeDays_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemRelation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Markup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MaximumRetailPrice_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRFixedAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRMerchandisingEventID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRPriceDiscGroupType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Module</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalPriceDiscAdmTransRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PDSCalculationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Percent1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Percent2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriceUnit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QuantityAmountFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QuantityAmountTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>relation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SearchAgain</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ToDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UnitId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventDim</Name>
			<Table>InventDim</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>configId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventBatchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventColorId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventGtdId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventOwnerId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventProfileId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventSerialId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSiteId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSizeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStyleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventVersionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LicensePlateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SHA1Hash</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSPalletId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DelayActive>No</DelayActive>
			<JoinSource>PriceDiscTable</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<AllowFormCompanyChange xmlns="">Yes</AllowFormCompanyChange>
		<Caption xmlns="">@SYS13768</Caption>
		<Height xmlns="">0</Height>
		<HeightMode xmlns="">Column</HeightMode>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<StatusBarStyle xmlns="">Simple</StatusBarStyle>
		<Style xmlns="">SimpleList</Style>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Width xmlns="">0</Width>
		<WidthMode xmlns="">Column</WidthMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonsLine</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>ButtonLineInventory</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SYS69645</HelpText>
								<Type>MenuButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>InventDimParmFixed</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>InventDimParmFixed</MenuItemName>
										<SaveRecord>No</SaveRecord>
									</AxFormControl>
								</Controls>
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<SaveRecord>No</SaveRecord>
								<Text>@SYS981</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>PDSCalculationTable</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>PriceDiscTable</DataSource>
								<MenuItemName>PDSCalculationTable</MenuItemName>
								<Text>@PSC311</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>PriceDiscAdm</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>PriceDiscTable</DataSource>
								<MenuItemName>PriceDiscCreateJournal</MenuItemName>
								<MenuItemType>Action</MenuItemType>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FilterGroup</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>PriceDiscTable_relation</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>relation</DataField>
						<DataSource>PriceDiscTable</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>PriceDiscTable_Currency</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>Currency</DataField>
						<DataSource>PriceDiscTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>PriceDiscTable_AccountCode</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1714631473</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>AccountCode</DataField>
						<DataSource>PriceDiscTable</DataSource>
						<Selection>255</Selection>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>PriceDiscTable_AccountRelation</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1818650212</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>AccountRelation</DataField>
						<DataSource>PriceDiscTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>PriceDiscTable_ItemCode</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1922668951</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>ItemCode</DataField>
						<DataSource>PriceDiscTable</DataSource>
						<Selection>255</Selection>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>PriceDiscTable_ItemRelation</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2026687690</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>ItemRelation</DataField>
						<DataSource>PriceDiscTable</DataSource>
						<Label>@SYS7407</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormReferenceGroupControl">
						<Name>PriceDiscTable_AgreementHeaderExt_RU</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2122317822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ReferenceGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>PriceDiscTable_AgreementHeaderExt_RU_AgreementId</Name>
								<DataRelationPath>AgreementHeaderExt_RU</DataRelationPath>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
							</AxFormControl>
						</Controls>
						<DataSource>PriceDiscTable</DataSource>
						<ReferenceField>AgreementHeaderExt_RU</ReferenceField>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Inventorydimensions</Name>
						<ElementPosition>2130706430</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Inventorydimensions_configId</Name>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>configId</DataField>
								<DataSource>InventDim</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Inventorydimensions_InventSizeId</Name>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>InventSizeId</DataField>
								<DataSource>InventDim</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Inventorydimensions_InventColorId</Name>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>InventColorId</DataField>
								<DataSource>InventDim</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Inventorydimensions_InventStyleId</Name>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>InventStyleId</DataField>
								<DataSource>InventDim</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Inventorydimensions_InventVersionId</Name>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>InventVersionId</DataField>
								<DataSource>InventDim</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Inventorydimensions_InventSiteId</Name>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>InventSiteId</DataField>
								<DataSource>InventDim</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Inventorydimensions_InventLocationId</Name>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>InventLocationId</DataField>
								<DataSource>InventDim</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Inventorydimensions_inventBatchId</Name>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>inventBatchId</DataField>
								<DataSource>InventDim</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Inventorydimensions_wMSLocationId</Name>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>wMSLocationId</DataField>
								<DataSource>InventDim</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Inventorydimensions_inventSerialId</Name>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>inventSerialId</DataField>
								<DataSource>InventDim</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Inventorydimensions_InventStatusId</Name>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>InventStatusId</DataField>
								<DataSource>InventDim</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Inventorydimensions_LicensePlateId</Name>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>LicensePlateId</DataField>
								<DataSource>InventDim</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Inventorydimensions_InventOwnerId_RU</Name>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>InventOwnerId_RU</DataField>
								<DataSource>InventDim</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Inventorydimensions_InventProfileId_RU</Name>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>InventProfileId_RU</DataField>
								<DataSource>InventDim</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Inventorydimensions_InventGtdId_RU</Name>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>InventGtdId_RU</DataField>
								<DataSource>InventDim</DataSource>
							</AxFormControl>
						</Controls>
						<BackgroundColor>WindowBackground</BackgroundColor>
						<DataGroup>InventoryDimensions</DataGroup>
						<DataSource>InventDim</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>PriceDiscTable_UnitId</Name>
						<ElementPosition>2139095038</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>UnitId</DataField>
						<DataSource>PriceDiscTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>PriceDiscTable_FromDate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2141541715</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Date</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>FromDate</DataField>
						<DataSource>PriceDiscTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>PriceDiscTable_ToDate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2143988392</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Date</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>ToDate</DataField>
						<DataSource>PriceDiscTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>PriceDiscTable_QuantityAmountFrom</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2146435070</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>QuantityAmountFrom</DataField>
						<DataSource>PriceDiscTable</DataSource>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>PriceDiscTable_QuantityAmountTo</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2146959358</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>QuantityAmountTo</DataField>
						<DataSource>PriceDiscTable</DataSource>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>PriceDiscTable_Amount</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2147221502</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>Amount</DataField>
						<DataSource>PriceDiscTable</DataSource>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>PriceDiscTable_PriceUnit</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2147245333</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>PriceUnit</DataField>
						<DataSource>PriceDiscTable</DataSource>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>PriceDiscTable_Percent1</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2147269164</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>Percent1</DataField>
						<DataSource>PriceDiscTable</DataSource>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>PriceDiscTable_MaximumRetailPrice_IN</Name>
						<ElementPosition>2147287038</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>MaximumRetailPrice_IN</DataField>
						<DataSource>PriceDiscTable</DataSource>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>PriceDiscTable_PDSCalculationId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2147287038</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>PDSCalculationId</DataField>
						<DataSource>PriceDiscTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>PriceDiscTable_MCRFixedAmountCur</Name>
						<ElementPosition>2147292995</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>MCRFixedAmountCur</DataField>
						<DataSource>PriceDiscTable</DataSource>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>PriceDiscTable_SearchAgain</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2147459812</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>SearchAgain</DataField>
						<DataSource>PriceDiscTable</DataSource>
					</AxFormControl>
				</Controls>
				<DataSource>PriceDiscTable</DataSource>
				<Style>Tabular</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DiscAgreement</Name>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Names</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>custVendName</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>custVendName</DataMethod>
								<DataSource>PriceDiscTable</DataSource>
								<Label>@SYS27874</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ItemName</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>ItemName</DataMethod>
								<DataSource>PriceDiscTable</DataSource>
								<Label>@SYS5398</Label>
							</AxFormControl>
						</Controls>
						<DataSource>PriceDiscTable</DataSource>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Prices</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>Prices_PriceUnit</Name>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>PriceUnit</DataField>
								<DataSource>PriceDiscTable</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>Prices_Markup</Name>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>Markup</DataField>
								<DataSource>PriceDiscTable</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
						</Controls>
						<DataGroup>Prices</DataGroup>
						<DataSource>PriceDiscTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>MCRPlannedOrderGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1342177278</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>MCRPlannedOrderItemPrice</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>PriceCur</ExtendedDataType>
								<Label>@SYS97652</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
						</Controls>
						<Caption>@SYS25536</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Percent</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>Percent_Percent1</Name>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>Percent1</DataField>
								<DataSource>PriceDiscTable</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>Percent_Percent2</Name>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>Percent2</DataField>
								<DataSource>PriceDiscTable</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
						</Controls>
						<DataGroup>Percent</DataGroup>
						<DataSource>PriceDiscTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Delivery</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormIntegerControl">
								<Name>Delivery_DeliveryTime</Name>
								<FilterExpression>%1</FilterExpression>
								<Type>Integer</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>DeliveryTime</DataField>
								<DataSource>PriceDiscTable</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>Delivery_CalendarDays</Name>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>CalendarDays</DataField>
								<DataSource>PriceDiscTable</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>Delivery_DisregardLeadTime</Name>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>DisregardLeadTime</DataField>
								<DataSource>PriceDiscTable</DataSource>
							</AxFormControl>
						</Controls>
						<LeftMargin>5</LeftMargin>
						<LeftMarginMode>Fixed</LeftMarginMode>
						<DataGroup>Delivery</DataGroup>
						<DataSource>PriceDiscTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Currency</Name>
						<ElementPosition>2013265918</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>PriceDiscTable_GenericCurrency</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<BackgroundColor>WindowBackground</BackgroundColor>
								<DataField>GenericCurrency</DataField>
								<DataSource>PriceDiscTable</DataSource>
							</AxFormControl>
						</Controls>
						<DataGroup>Currency</DataGroup>
						<DataSource>PriceDiscTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>InventBailee_RU</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2080374782</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormIntegerControl">
								<Name>InventBailee_RU_InventBaileeFreeDays_RU</Name>
								<FilterExpression>%1</FilterExpression>
								<Type>Integer</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>InventBaileeFreeDays_RU</DataField>
								<DataSource>PriceDiscTable</DataSource>
							</AxFormControl>
						</Controls>
						<DataGroup>InventBailee_RU</DataGroup>
						<DataSource>PriceDiscTable</DataSource>
					</AxFormControl>
				</Controls>
				<AlignChildren>No</AlignChildren>
				<ColumnsMode>Fill</ColumnsMode>
				<Caption>@SYS19789</Caption>
				<DataSource>PriceDiscTable</DataSource>
				<FrameType>None</FrameType>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>