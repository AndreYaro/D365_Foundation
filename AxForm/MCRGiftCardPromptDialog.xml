<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>MCRGiftCardPromptDialog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class MCRGiftCardPromptDialog extends FormRun
{
    [FormObservable]
    AmountCur                               availBalance;
    AmountCur                               paymAmount;
    MCRCreateFreeTextInvoiceGiftCard        freeTextInvoiceGC;
    MCRCustPaymTable                        custPaymTable;
    CustInvoiceTable                        custInvoiceTable;
    AmountCur                               amountToAdd;
    RetailGiftCardTable                     retailGiftCardTable;
    CustAccount                             custAccount;
    RetailGiftCardId                        retailGiftCardId;
    boolean                                 mcrGiftCardPoliciesEnabled;
}
]]></Source>
			</Method>
			<Method>
				<Name>addToBalanceUpdateRemaining</Name>
				<Source><![CDATA[
    void addToBalanceUpdateRemaining()
    {
        AmountCur   amountAdded;
        // set these new values in the controls
        amountAdded = MCRGiftCard::availableBalance(retailGiftCardTable.EntryId) + AddAmount.realValue();

        NewBalance.realValue(amountAdded);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearFormValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Clears the form values when a serial number is deemed invalid.
    /// </summary>
    void clearFormValues()
    {
        GiftCertAvailableBalance.realValue(0.0);
        NewBalance.realValue(0.0);
        CustomerAccount.text("");
        CustomerAddress.text("");
        CustomerName.text("");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGiftCertAvailableBalance</Name>
				<Source><![CDATA[
    public display AmountCur getGiftCertAvailableBalance()
    {
        return availBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        Args                args;

        args = this.args();
        availBalance = 0;
        paymAmount = 0;

        super();

        // If this form is being called from the work bench then
        // retrieve the record using the passed in serial number.
        if (args.record() && args.record().TableId == tableNum(RetailGiftCardTable))
        {
            retailGiftCardTable = args.record();
            if (retailGiftCardTable.mcrGiftCardType != MCRGiftCardType::Physical)
            {
                throw error(strFmt("@MCR10663", element.name()));
            }
        }

        mcrGiftCardPoliciesEnabled = RetailParameters::find().UseGiftCardPolicies;

        GiftCardPolicy.visible(mcrGiftCardPoliciesEnabled);

        if (args.record())
        {
            element.initFormValues(true);
            element.initPolicyDescription();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the form with values once the gift card serial number
    ///     has been validated.
    /// </summary>
    /// <param name="called">
    ///     A boolean value indicating if the gift card record is being passed in.
    /// </param>
    void initFormValues(boolean called = false)
    {
        RetailGiftCardId    retailGiftCardIdLocal;
        CustInvoiceAccount  invoiceAccount;

        if (retailGiftCardTable)
        {
            invoiceAccount = MCRGiftCard::invoiceAccount(retailGiftCardTable.EntryId);
            if (called == true)
            {
                // If the gift card record is being passed in then set the
                // serial number to the masked value of the passed in value
                // and disable the control.
                retailGiftCardIdLocal = retailGiftCardTable.EntryId;
                serialNum.text(MCRGiftCard::maskCardNum(retailGiftCardTable.EntryId));
                serialNum.enabled(false);
            }
            else
            {
                serialNum.text(MCRGiftCard::maskCardNum(retailGiftCardTable.EntryId));
            }
            giftCertAvailableBalance.realValue(MCRGiftCard::availableBalance(retailGiftCardTable.EntryId));
            newBalance.realValue(giftCertAvailableBalance.realValue());
            currencyCode.text(retailGiftCardTable.CurrencyCode);
            customerAccount.text(invoiceAccount);
            element.setCustomerInformation(invoiceAccount);
            element.initPolicyDescription();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPaymentsOnCancel</Name>
				<Source><![CDATA[
    void processPaymentsOnCancel()
    {
        element.deleteCustInvoice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPaymentsonOK</Name>
				<Source><![CDATA[
    void processPaymentsonOK()
    {
        MCRCustPaymTotals    custPaymTotals;
        boolean              processPayments;
        RetailGiftCardTransactions retailGiftCardTransactions;

        //<GEERU>
        RetailGiftCardPost_RU   retailGiftCardPost_RU;
        boolean                 processGiftCardsAsPrepayments_RU = RetailParameters::find().ProcessGiftCardsAsPrepayments_RU;
        DimensionDefault        customerDimension;
        DimensionDefault        channelDimension;
        MCRCustPaymTable        mcrCustPaymTable;
        LedgerJournalTable      ledgerJournalTable;
        CreditCardVerificationNumber cvv;
        //</GEERU>

        try
        {
            if (RetailPaymentsCvvPromptFlight::instance().isEnabled())
            {
                MCRCustPaymTable mcrCustPaymTableLocal = MCRCustPaymTable::findByRefRecIDRefTableID(custInvoiceTable.RecId, custInvoiceTable.TableId);

                if (CreditCardProcessCvvHelper::isCvvRequired(mcrCustPaymTableLocal, null))
                {
                    // Gets the credit card verification value.
                    cvv = mcrCustPaymTotals::checkCVV(mcrCustPaymTableLocal, null);

                    CreditCardProviderProcess creditCardProviderProcess = CreditCardProviderProcess::construct();
                    creditCardProviderProcess.parmCardVerificationValue(cvv);
                }
            }

        ttsbegin;

        custPaymTotals = MCRCustPaymTotals::construct(custInvoiceTable.TableId, custInvoiceTable.RecId);

        if (custPaymTotals)
        {
            custPaymTotals.parmCreditCardCvv(cvv);
            processPayments = custPaymTotals.processPayments(MCRProcessPaymAction::PostAll);
        }

        if (processPayments)
        {
            element.setCustomerInformation(custAccount);

            // If the payments are in order , then add the amount to the gift card
            // If there is an error in the payment record then delete the invoice lines
            // that were created.
            // if payments have been validated and posted
            // update the gift card remaining amount and the original amount
            changecompany(retailGiftCardTable.company())
            {
                retailGiftCardTransactions.selectForUpdate(true);
                retailGiftCardTransactions.CardNumber = retailGiftCardTable.EntryId;
                retailGiftCardTransactions.Operation = RetailGiftCardOperation::AddTo;
                retailGiftCardTransactions.TransDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone()));
                retailGiftCardTransactions.TransTime = DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone()));
                retailGiftCardTransactions.Amount = amountToAdd;
                retailGiftCardTransactions.mcrInvoiceAccount = custAccount;
                retailGiftCardTransactions.Channel = MCRCustPaymTable::findByRefRecIDRefTableID(custInvoiceTable.RecId, custInvoiceTable.TableId).Channel;
                if (retailGiftCardTransactions.validateWrite())
                {
                    retailGiftCardTransactions.insert();
                }
                else
                {
                    throw error("@SYS104318");
                }

                    //<GEERU>
                    if (!processGiftCardsAsPrepayments_RU)
                    {
                    //</GEERU>
                // post the free text
                freeTextInvoiceGC.postFreeTextInvoice();
                    //<GEERU>
                    }
                    //</GEERU>
                }

                //<GEERU>
                if (processGiftCardsAsPrepayments_RU)
                {
                    customerDimension = CustTable::find(retailGiftCardTransactions.mcrInvoiceAccount).DefaultDimension;
                    channelDimension = RetailMCRChannelTable::findRecId(retailGiftCardTransactions.Channel).DefaultDimension;

                    retailGiftCardPost_RU = RetailGiftCardPost_RU::construct();

                    retailGiftCardPost_RU.createGiftCardJournalLines(
                        retailGiftCardTransactions.CardNumber,
                        retailGiftCardTransactions.mcrInvoiceAccount,
                        retailGiftCardTransactions.TransDate,
                        retailGiftCardTable.currencyCode,
                        retailGiftCardTransactions.Amount,
                        LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(customerDimension, channelDimension)
                    );

                    retailGiftCardPost_RU.post();

                    if (custInvoiceTable.RecId)
                    {
                        ledgerJournalTable = retailGiftCardPost_RU.giftCardJournal();

                        // Update payment references and delete free text invoice
                        update_recordSet mcrCustPaymTable
                            setting RefTableId = ledgerJournalTable.TableId,
                                    RefRecId   = ledgerJournalTable.RecId
                            where mcrCustPaymTable.RefTableId == custInvoiceTable.TableId
                               && mcrCustPaymTable.RefRecId == custInvoiceTable.RecId;

                        custInvoiceTable.delete();
                    }
            }
                //</GEERU>
        }
        else
        {
                throw error("@MCR10915");
            }
            ttsCommit;
        }
        catch(Exception::Error)
        {
            ttsAbort;

            // need to delete the custinvoicetable record and the
            // line that was created
            custInvoiceTable.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptForPayments</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Displays the prompt for payment form with the appropriate values.
    /// </summary>
    void promptForPayments()
    {
        Args                            custPaymTableArgs;
        FormRun                         custPaymTableFormRun;
        CustInvoiceLine                 custInvoiceLine;

        // Check to ensure that there is a customer account
        amountToAdd = addAmount.realValue();
        if (custAccount == "")
        {
            if (customerAccount.valueStr() == "")
            {
                throw error("@MCR35027");
            }
            else
            {
                custAccount = customerAccount.valueStr();
            }
        }
        if (amountToAdd == 0)
        {
            throw error("@MCR35028");
        }

        if (! this.checkAllowPaymentByPolicies())
        {
            return;
        }

        ttsBegin;
        // Delete the existing CustInvoiceTable and payments if the custAccount is changed.
        if (custInvoiceTable.RecId != 0 && custInvoiceTable.custTable_InvoiceAccount().AccountNum != custAccount)
        {
            element.deleteCustInvoice();
        }

        // Before creating the payment record, create the free text invoice if not existed yet
        if (custInvoiceTable.RecId == 0)
        {
        freeTextInvoiceGC = MCRCreateFreeTextInvoiceGiftCard::construct(retailGiftCardTable.RecId, amountToAdd, custAccount);
        freeTextInvoiceGC.createFreeTextInvoiceGiftCard();
        custInvoiceTable = freeTextInvoiceGC.getCustInvoiceTableRecord();
        }

        // Update amount if changed
        select forUpdate firstOnly AmountCur from custInvoiceLine
            where custInvoiceLine.ParentRecId == custInvoiceTable.RecId;
        if (custInvoiceLine.AmountCur != amountToAdd)
        {
            custInvoiceLine.AmountCur = amountToAdd;
            custInvoiceLine.doUpdate();
        }
        ttsCommit;

        custPaymTableArgs = new Args();
        custPaymTableArgs.name(formStr(MCRCustPaymTable));
        custPaymTableArgs.record(custInvoiceTable);
        custPaymTableArgs.parm(customerAccount.valueStr());
        custPaymTableFormRun = classfactory.formRunClass(custPaymTableArgs);
        custPaymTableFormRun.run();
        custPaymTableFormRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustomerInformation</Name>
				<Source><![CDATA[
    void setCustomerInformation(AccountNum _custAccount)
    {
        CustTable custTable;
        custTable = CustTable::find(_custAccount);
        CustomerName.text(custTable.Name());
        CustomerAddress.text(custTable.Address());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllowPaymentByPolicies</Name>
				<Source><![CDATA[
    private boolean checkAllowPaymentByPolicies()
    {
        boolean enabled = true;

        if (!mcrGiftCardPoliciesEnabled)
        {
            return true;
        }

        if (!addAmount.realValue())
        {
            enabled = false;
        }

        if (enabled && retailGiftCardTable)
        {
            enabled = retailGiftCardTable.checkPolicy(RetailGiftCardOperation::AddTo, addAmount.realValue());
        }

        return enabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCustInvoice</Name>
				<Source><![CDATA[
    void deleteCustInvoice()
    {
        ttsbegin;
        custInvoiceTable.delete();
        custInvoiceTable.clear();
        if (custPaymTable && custPaymTable.Status == MCRCustPaymStatus::NotSubmitted)
        {
            custPaymTable.delete();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPolicyDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form with description of Gift card policy
    /// </summary>
    private void initPolicyDescription()
    {
        if (mcrGiftCardPoliciesEnabled)
        {
            if (retailGiftCardTable.company() == curext())
            {
                GiftCardPolicy.text(retailGiftCardTable.policyDescription());
            }
            else
            {
                changeCompany(retailGiftCardTable.company())
                {
                    GiftCardPolicy.text(retailGiftCardTable.policyDescription());
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>SerialNum</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean             ret;
            str                 giftCardCompany;
            container           conCompanies;
            str                 giftCardAddCompany;

            ret = super();

            retailGiftCardId = serialNum.text();

            if (retailGiftCardId != "")
            {
                retailGiftCardTable = RetailGiftCardTable::find(retailGiftCardId);
                if (retailGiftCardTable.RecId != 0)
                {
                    SerialNum.text(MCRGiftCard::maskCardNum(retailGiftCardId));
                    element.initFormValues();
                }
                else
                {
                    // If cross company is setup add to gift card in the GiftCardCompany
                    giftCardCompany = RetailParameters::find().GiftCardCompany;
                    if (giftCardCompany != curext())
                    {
                        conCompanies = [giftCardCompany];
                        retailGiftCardTable = RetailGiftCardTable::findCrossCompany(retailGiftCardId, conCompanies);
                        giftCardAddCompany = conPeek(conCompanies, 1);
                        if (retailGiftCardTable)
                        {
                            SerialNum.text(MCRGiftCard::maskCardNum(retailGiftCardId));
                            element.initFormValues();
                        }
                        else
                        {
                            element.clearFormValues();
                            throw error("@MCR34385");
                        }
                    }
                    else
                    {
                        element.clearFormValues();
                        throw error("@MCR34385");
                    }
                }
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AddAmount</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            element.addToBalanceUpdateRemaining();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CustomerAccount</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            CustTable::lookupCustomer(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (CustomerAccount.valueStr() != "")
            {
                custAccount = CustomerAccount.valueStr();
                element.setCustomerInformation(custAccount);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OKButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            if (!MCRCustPaymTotals::construct(custInvoiceTable.TableId, custInvoiceTable.RecId))
            {
                checkfailed("@MCR10915");
            }
            else
            {
                super();
                element.processPaymentsonOK();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CancelButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();
            element.processPaymentsOnCancel();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Payments</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();
            element.promptForPayments();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<BackgroundColor xmlns="">WindowBackground</BackgroundColor>
		<Caption xmlns="">@MCR34105</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SerialNum</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>536870910</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Label>@RET4429</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CurrencyCode</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>805306365</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>CurrencyCode</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>GiftCertAvailableBalance</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741820</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Skip>Yes</Skip>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS96103</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>AddAmount</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1342177275</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Label>@MCR34101</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>NewBalance</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612730</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS79460</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Customer</Name>
						<ElementPosition>1879048185</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CustomerAccount</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>CustAccount</ExtendedDataType>
								<Label>@SYS24704</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CustomerName</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>CustName</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CustomerAddress</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>Addressing</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>PolicyGroup</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>GiftCardPolicy</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>RetailGiftCardPolicies</ExtendedDataType>
								<MultiLine>Yes</MultiLine>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>DialogCommitContainer</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>Payments</Name>
						<ElementPosition>2013265915</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Button</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Text>@SYS58091</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>