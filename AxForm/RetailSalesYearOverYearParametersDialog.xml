<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailSalesYearOverYearParametersDialog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
/// <summary>
/// This dialog displays the from date, to date and the store parameters for retail reports.
/// </summary>
[Form]
public class RetailSalesYearOverYearParametersDialog extends FormRun
{
    RetailYearOverReportParameters params;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read the passed parameters and set the values in the UI.
    /// </summary>
    public void init()
    {
        super();
        this.populateYears();

        Args args = element.args();

        if (args)
        {
            params = args.parmObject();
            if (params)
            {
                ReportFromYear.selectText(int2Str(params.FromYear()));
                ReportToYear.selectText(int2Str(params.ToYear()));
                ReportStoreId.text(params.StoreId());

                if (System.String::IsNullOrEmpty(params.StoreId()))
                {
                    ReportStoreId.text("@Retail:RetailReportDefaultStoreDisplay");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateYears</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetch years from database and populate in the combo boxed for from year and to year.
    /// </summary>
    private void populateYears()
    {
        try
        {
            Connection Con = new Connection();
            Statement Stmt = Con.createStatement();
            ResultSet R =Stmt.executeQuery(@"
                            select distinct DATEPART(YYYY, year) as YearPart
                            from BIDATEDIMENSIONSVIEW
                            order by YearPart");

            ReportFromYear.clear();
            ReportToYear.clear();

            for (int i = 0;R.next(); i++ )
            {
                str year = R.getString(1);
                ReportFromYear.insert(year, i);
                ReportToYear.insert(year, i);
            }
        }
        catch (Exception::CLRError)
        {
            SRSProxy::handleClrException(Exception::Error);
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>ReportFromYear</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// This method validates the years entered.
        /// </summary>
        /// <returns>Value returned by base class method.</returns>
        public boolean modified()
        {
            boolean ret;
            ret = super();

            int fromYear = str2Int(ReportFromYear.valueStr());
            int toYear = str2Int(ReportToYear.valueStr());

            // If from date > to date, then set the the to date = from date.
            if (fromYear > toYear)
            {
                ReportToYear.text(int2Str(fromYear));
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReportToYear</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// This method validates the years entered.
        /// </summary>
        /// <returns>Value returned by base class method.</returns>
        public boolean modified()
        {
            boolean ret;
            ret = super();

            int fromYear = str2Int(ReportFromYear.valueStr());
            int toYear = str2Int(ReportToYear.valueStr());

            // If from date > to date, then set the the from date = to date.
            if (fromYear > toYear)
            {
                ReportFromYear.text(int2Str(toYear));
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReportStoreId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// This method gets the operating unit number for the selected store.
        /// </summary>
        public boolean modified()
        {
            boolean ret;
            ret = super();

            params.OperatingUnitNumber(this.getOperatingUnitNumber(ReportStoreId.text()));

            // If a store with the store number is found, set it to blank.
            if (System.String::IsNullOrEmpty(params.OperatingUnitNumber()))
            {
                ReportStoreId.text("@Retail:RetailReportDefaultStoreDisplay");
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>getOperatingUnitNumber</Name>
						<Source><![CDATA[
        private str getOperatingUnitNumber(str storeNumber)
        {
            RetailStoreView store;
            select firstonly store where store.StoreNum == storeNumber;
            str opUnitNumber;

            // If a store with the store number is found, return the operating unit number.
            if (store != null)
            {
                opUnitNumber = store.OperatingUnitNum;
            }

            return opUnitNumber;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OkButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// When the button is clicked, close the dialog and update the report.
        /// </summary>
        public void clicked()
        {
            super();
            int a  = params.FromYear();
            str s = ReportFromYear.valueStr();
            params.FromYear(str2Int(ReportFromYear.valueStr()));
            params.ToYear(str2Int(ReportToYear.valueStr()));
            params.StoreId(ReportStoreId.text());
            element.args().parmObject(params);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@Retail:ReportParametersCaption</Caption>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CustomFilterGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>ReportFromYear</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@Retail:ReportFromCalendarYear</Label>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>ReportToYear</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@Retail:ReportToCalendarYear</Label>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>ReportStoreId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>RetailStoreId</ExtendedDataType>
						<Label>@Retail:RetailReportStoreNumber</Label>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>DialogCommitSection</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OkButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<Text>@Retail:RetailReportOKButton</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
						<Text>@Retail:RetailReportCancelButton</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>