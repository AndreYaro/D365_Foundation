<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>AccountingSourceExplorerParameters</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class AccountingSourceExplorerParameters extends FormRun
{
    AccountingSourceExplorerBalanceParameters   accountingSourceExplorerBalanceParameters;

}
]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        FormRun             callingFormRun;
        Object              callingForm;
        boolean             isValid = true;
        FiscalCalendarRecId calendarRecId;
        TransDate           toOpeningStartDate, fromOpeningStartDate;
        TransDate           fromDate = StartDate.dateValue();
        TransDate           toDate = EndDate.dateValue();

        calendarRecId = Ledger::fiscalCalendar(CompanyInfo::current());

        fromOpeningStartDate = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId, fromDate);
        toOpeningStartDate = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId, toDate);

        if (!fromOpeningStartDate)
        {
            isValid = checkFailed("@SYS97591");
        }

        if (!toOpeningStartDate)
        {
            isValid = checkFailed("@SYS97592");
        }

        if (isValid && (fromOpeningStartDate > toOpeningStartDate))
        {
            isValid = checkFailed(strfmt("@SYS55013",
                date2StrUsr(fromOpeningStartDate, DateFlags::FormatAll),
                date2StrUsr(toOpeningStartDate, DateFlags::FormatAll)));
        }

        if (isValid && (fromOpeningStartDate != toOpeningStartDate))
        {
            isValid = checkFailed(strfmt("@SYS28745", year(fromOpeningStartDate), year(toOpeningStartDate)));
        }

        if (isValid)
        {
            // Only save the parameters when valid, so on reopen the parameters match what is displayed in the form
            accountingSourceExplorerBalanceParameters.parmDateCode(DateCode.valueStr());
            accountingSourceExplorerBalanceParameters.parmStartDate(fromDate);
            accountingSourceExplorerBalanceParameters.parmEndDate(toDate);
            accountingSourceExplorerBalanceParameters.parmDimensionFocus(null);
            accountingSourceExplorerBalanceParameters.parmVoucherFrom(VoucherFrom.valueStr());
            accountingSourceExplorerBalanceParameters.parmVoucherTo(VoucherTo.valueStr());
            accountingSourceExplorerBalanceParameters.parmMainAccountNum(MainAccountFrom.valueStr());
            accountingSourceExplorerBalanceParameters.parmMainAccountNumTo(MainAccountTo.valueStr());
            accountingSourceExplorerBalanceParameters.parmGeneralJournalAccountEntry(0);
            accountingSourceExplorerBalanceParameters.parmProcessPendingReferenceIdentities(true);
            accountingSourceExplorerBalanceParameters.saveLastValue(formStr(AccountingSourceExplorerParameters));

            callingFormRun = this.args().caller() as FormRun;
            if (callingFormRun != null && formHasMethod(callingFormRun, identifierStr(refresh)))
            {
                callingForm = callingFormRun;
                callingForm.refresh();
            }

            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        Object caller;
        FormRun callerForm;

        super();

        caller = this.args().caller();
        callerForm = caller as FormRun;

        if (formHasMethod(caller, identifierStr(getBalanceParameters)))
        {
            accountingSourceExplorerBalanceParameters = caller.getBalanceParameters();
        }

        if (accountingSourceExplorerBalanceParameters == null)
        {
            accountingSourceExplorerBalanceParameters = AccountingSourceExplorerBalanceParameters::construct();
            accountingSourceExplorerBalanceParameters.loadLastValue(formStr(AccountingSourceExplorerParameters));
        }

        DateCode.text(accountingSourceExplorerBalanceParameters.parmDateCode());
        StartDate.dateValue(accountingSourceExplorerBalanceParameters.parmStartDate());
        EndDate.dateValue(accountingSourceExplorerBalanceParameters.parmEndDate());
        VoucherFrom.text(accountingSourceExplorerBalanceParameters.parmVoucherFrom());
        VoucherTo.text(accountingSourceExplorerBalanceParameters.parmVoucherTo());
        MainAccountFrom.text(accountingSourceExplorerBalanceParameters.parmMainAccountNum());
        MainAccountTo.text(accountingSourceExplorerBalanceParameters.parmMainAccountNumTo());
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>DateCode</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            LedgerPeriodCode ledgerPeriodCode;
            boolean isModified;

            isModified = super();

            if (isModified)
            {
                if (DateCode.valueStr() != '')
                {
                    ledgerPeriodCode = LedgerPeriodCode::find(DateCode.valueStr());

                    if (ledgerPeriodCode)
                    {
                        startDate.dateValue(ledgerPeriodCode.fromDate());
                        endDate.dateValue(ledgerPeriodCode.toDate());
                    }
                    else
                    {
                        DateCode.text('');
                    }
                }
            }

            return isModified;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>StartDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isModified;

            isModified = super();

            DateCode.text('');

            return isModified;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EndDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isModified;

            isModified = super();

            DateCode.text('');

            return isModified;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<BackgroundColor xmlns="">WindowBackground</BackgroundColor>
		<Caption xmlns="">@SourceDocumentation:AccountingSourceExplorerParameters</Caption>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">DropDialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">DropDialog</Style>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>FilterFieldsGroup</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>DateCode</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>920350134</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>DateCode</ExtendedDataType>
								<Label>@SYS22526</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>StartDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1227133512</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>FromDate</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>EndDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1533916890</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>ToDate</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>VoucherFrom</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>Voucher</ExtendedDataType>
								<Label>@SYS76112</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>VoucherTo</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>Voucher</ExtendedDataType>
								<Label>@SYS76113</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>MainAccountFrom</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>MainAccountNum</ExtendedDataType>
								<Label>@SYS305875</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>MainAccountTo</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>MainAccountNum</ExtendedDataType>
								<Label>@SYS335462</Label>
							</AxFormControl>
						</Controls>
						<Breakable>No</Breakable>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>DialogCommitButton</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OkButton</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Skip>Yes</Skip>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<Text>@SYS2934</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>