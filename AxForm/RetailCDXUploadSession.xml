<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailCDXUploadSession</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
using ApplicationEventSource = Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource;

[Form]
public class RetailCDXUploadSession extends FormRun
{
    QueryBuildRange dateRange;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiate start and end date.
    /// </summary>
    public void init()
    {
        super();

        this.displayUploadSessionWarningMessages();
        EndDateField.dateValue(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) + 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayUploadSessionWarningMessages</Name>
				<Source><![CDATA[
    internal void displayUploadSessionWarningMessages()
    {
        if (RetailCdxFeatureControl::IsDisplayUploadSessionWarningMessagesDisabled())
        {
            return;
        }

        System.Diagnostics.Stopwatch timer = new System.Diagnostics.Stopwatch();
        timer.Start();

        const int MaxWarningCount = 5;
        const int DateTimeLimitInMinutes = 15;
        utcdatetime createdDateTimeLimit = DateTimeUtil::addMinutes(DateTimeUtil::utcNow(), -1 * DateTimeLimitInMinutes);

        RetailCDXDataGroup retailCDXDataGroup;
        RetailConnSchedule retailConnSchedule;

        RetailCDXUploadSession retailCDXUploadSessionLocal;
        RetailConnDatabaseProfile retailConnDatabaseProfile;
        RetailCDXScheduleDataGroup retailCDXScheduleDataGroup;
        RetailConnScheduleJobMapping retailConnScheduleMapping;
        RetailConnSchedulerJobTable retailConnSchedulerJobTable;
        RetailConnSchedulerJobLine retailConnSchedulerJobLine;
        RetailConnSchedulerSubjobTable retailConnSchedulerSubjobTable;

        int warningCount;
        int uploadRecordCount;

        // Datagroups with upload sessions older than 15min still in 'Uploaded' status
        while select DataGroup, JobId from retailCDXUploadSessionLocal
            group by DataGroup, JobId
            where retailCDXUploadSessionLocal.Status == RetailCDXUploadSessionStatus::Uploaded
                && retailCDXUploadSessionLocal.CreatedDateTime < createdDateTimeLimit
        {
            boolean hasAnyActiveSchedule = false;
            RetailConnJobId uploadSessionJobId = retailCDXUploadSessionLocal.JobId;
            RetailCDXDataGroupRefRecId dataGroupRecId = retailCDXUploadSessionLocal.DataGroup;

            // traverse active schedules for upload job
            while select RecId, Name, Active, BatchJobId
            from retailConnSchedule
                where retailConnSchedule.Active == NoYes::Yes
                    && retailConnSchedule.ScheduleType == RetailCDXDownloadUpload::Upload
            exists join retailCDXScheduleDataGroup
                where retailCDXScheduleDataGroup.Schedule == retailConnSchedule.RecId
                    && retailCDXScheduleDataGroup.DataGroup == dataGroupRecId
            exists join retailConnScheduleMapping
                where retailConnScheduleMapping.ScheduleRecId == retailConnSchedule.RecId
            exists join retailConnSchedulerJobTable
                where retailConnSchedulerJobTable.JobId == retailConnScheduleMapping.SchedulerJobId
                    && retailConnSchedulerJobTable.JobId == uploadSessionJobId
            {
                hasAnyActiveSchedule = true;

                // if there is a schedule and it's active, check if it has a recurrent batch job
                BatchJob batchJob;

                select firstonly RecId, Status, Caption, StartDateTime from batchJob
                    where batchJob.RecId == retailConnSchedule.BatchJobId;

                if (!batchJob)
                {
                    warning(strFmt("@Retail:UploadSessionWarningNoBatchJob", retailConnSchedule.Name));
                    warningCount++;
                }
                else if (batchJob.Status != BatchStatus::Executing && batchJob.Status != BatchStatus::Waiting)
                {
                    warning(strFmt("@Retail:UploadSessionBatchJobStatusWarning", retailConnSchedule.Name, batchJob.RecId, batchJob.Caption));
                    warningCount++;
                }
                else if (batchJob.Status == BatchStatus::Executing && batchJob.StartDateTime < createdDateTimeLimit)
                {
                    info(strFmt("@Retail:UploadSessionBatchJobStatusConfigInfo", batchJob.Caption, batchJob.RecId, retailConnSchedule.Name, DateTimeLimitInMinutes));
                    warningCount++;
                }

                if (warningCount >= MaxWarningCount)
                {
                    break;
                }
            }

            if (!hasAnyActiveSchedule)
            {
                boolean hasAnyInactiveSchedule = false;

                // traverse inactive schedules for upload job
                while select RecId, Name, Active, BatchJobId
                from retailConnSchedule
                    where retailConnSchedule.Active == NoYes::No
                        && retailConnSchedule.ScheduleType == RetailCDXDownloadUpload::Upload
                exists join retailCDXScheduleDataGroup
                    where retailCDXScheduleDataGroup.Schedule == retailConnSchedule.RecId
                        && retailCDXScheduleDataGroup.DataGroup == dataGroupRecId
                exists join retailConnScheduleMapping
                    where retailConnScheduleMapping.ScheduleRecId == retailConnSchedule.RecId
                exists join retailConnSchedulerJobTable
                    where retailConnSchedulerJobTable.JobId == retailConnScheduleMapping.SchedulerJobId
                        && retailConnSchedulerJobTable.JobId == uploadSessionJobId
                {
                    hasAnyInactiveSchedule = true;

                    warning(strFmt("@Retail:UploadSessionWarningNoActiveScheduleForDatabaseGroup", retailCDXDataGroup.Name, retailConnSchedule.Name));
                    warningCount++;
                }

                if (!hasAnyInactiveSchedule)
                {
                    warning(strFmt("@Retail:UploadSessionWarningNoScheduleForDatabaseGroup", retailCDXDataGroup.Name));
                    warningCount++;
                }
            }

            if (warningCount >= MaxWarningCount)
            {
                break;
            }
        }

        timer.Stop();
        ApplicationEventSource::EventWriteRetailCdxUploadSessionDisplayWarningMessage(formStr(RetailCdxUploadSession), funcName(), warningCount, timer.ElapsedMilliseconds);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>RetailCDXUploadSession</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
            this.queryBuildDataSource().addSortField(fieldnum(RetailCDXUploadSession, DateCreated), SortOrder::Descending);

            if (RetailCDXUploadDownloadSessionDataStoreReinitRangeFlight::instance().isEnabled())
            {
                dateRange = SysQuery::findOrCreateRange(RetailCDXUploadSession_ds.queryBuildDataSource(), fieldnum(RetailCDXUploadSession, ModifiedDateTime));
            }
            else
            {
                dateRange = this.queryBuildDataSource().addRange(fieldNum(RetailCDXUploadSession, ModifiedDateTime));
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            RetailCDXUploadSession_DS.allowDelete(RetailCDXUploadSession.Status == RetailCDXUploadSessionStatus::Applied ||
                                 RetailCDXUploadSession.Status == RetailCDXUploadSessionStatus::Canceled);

            boolean hasPackage = !System.String::IsNullOrEmpty(RetailCDXUploadSession.UploadPath);

            DownloadBtn.enabled(hasPackage);

            // can only rerun when Local upload sesssion ID is not 0.
            btnRerun.enabled(RetailCDXUploadSession.LocalUploadSessionId);

            // only canceled upload sessions can be reapplied
            btnReapply.enabled(retailCDXUploadSession.Status == RetailCDXUploadSessionStatus::Canceled || retailCDXUploadSession.Status == RetailCDXUploadSessionStatus::Applied);

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// Filter entries based on uploaded dates.
        /// </summary>
        public void executeQuery()
        {
            date start = StartDateField.dateValue();
            date end = EndDateField.dateValue();
            dateRange.value(SysQuery::range(start, end));
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayUploadSessionRerunType</Name>
						<Source><![CDATA[
        /// <summary>
        /// To display Upload session rerun type
        /// </summary>
        /// <param name = "_retailCDXUploadSession">Retail cdx upload session</param>
        /// <returns>Upload session rerun type</returns>
        display str displayUploadSessionRerunType(RetailCDXUploadSession _retailCDXUploadSession)
        {
            return (_retailCDXUploadSession.Rerun == RetailCDXUploadSessionRerun::None ? '' : enum2Str(_retailCDXUploadSession.UploadSessionRerunType));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>btnCancel</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            RetailCDXUploadSession uploadSessionTable;

            super();

            ttsbegin;

            for (uploadSessionTable = RetailCDXUploadSession_DS.getFirst(true) ? RetailCDXUploadSession_DS.getFirst(true) : RetailCDXUploadSession_DS.cursor();
              uploadSessionTable;
              uploadSessionTable = RetailCDXUploadSession_DS.getNext())
            {
                uploadSessionTable.Status = RetailCDXUploadSessionStatus::Canceled;
                uploadSessionTable.update();
            }

            ttscommit;

            RetailCDXUploadSession_DS.research(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DownloadBtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            RetailConnDatabaseProfile db;
            select Name from db where db.RecId == RetailCDXUploadSession.DataStore;

            str timestamp = date2Str(
                DateTimeUtil::date(RetailCDXUploadSession.ModifiedDateTime),
                321, // year-month-day
                DateDay::Digits2,
                DateSeparator::Hyphen,
                DateMonth::Digits2,
                DateSeparator::Hyphen,
                DateYear::Digits4
            );

            str fileName = strFmt(
                "%1_%2_%3_%4.zip", // file name is DataGroupName_JobId_SessionId_Date.zip
                db.Name,
                RetailCDXUploadSession.JobId,
                RetailCDXUploadSession.UploadSessionId,
                timestamp
            );

            RetailConnDatabaseProfile dataStore;
            select DataGroup from dataStore where dataStore.RecId == RetailCDXUploadSession.DataStore;
            
            System.Exception ex;
            RetailCDXFilePathOrGuid url;

            try
            {
                    url = RetailCDXPackageStore::getPackageLink(
                    dataStore.DataGroup,
                    RetailCDXDownloadUpload::Upload,
                    RetailCDXUploadSession.UploadPath,
                    10 // Current set the timeout as 10 minutes.
                );
            }
            catch (ex)
            {
                ApplicationEventSource::EventWriteRetailCDXPackageStoreDownloadPackageLinkError(ex.Message, ex.GetType().ToString(), ex.ToString());
                throw Global::error(strfmt("@Retail:DownloadLinkGenerationFailed"));
            }

            System.IO.Stream stream = File::UseFileFromURL(url);
            File::SendFileToUser(stream, fileName);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>StartDateField</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Validate date.
        /// </summary>
        /// <returns></returns>
        public boolean modified()
        {
            boolean ret;
            date start = StartDateField.dateValue();
            date end = EndDateField.dateValue();

            if (start > end)
            {
                EndDateField.dateValue(start);
            }

            ret = super();
            RetailCDXUploadSession_DS.executeQuery();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EndDateField</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Validate date.
        /// </summary>
        /// <returns></returns>
        public boolean modified()
        {
            boolean ret;
            date start = StartDateField.dateValue();
            date end = EndDateField.dateValue();

            if (start > end)
            {
                StartDateField.dateValue(end);
            }

            ret = super();
            RetailCDXUploadSession_DS.executeQuery();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RetailCDXUploadSession_BatchJobId</Name>
				<Type>Int64</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        /// Jump the reference of batch Job to batch job history.
        /// </summary>
        public void jumpRef()
        {
            if (RetailCDXUploadSession.Status == RetailCDXUploadSessionStatus::Available || RetailCDXUploadSession.Status == RetailCDXUploadSessionStatus::Started)
            {
                BatchJob batchJob;
                select firstonly batchJob where batchJob.RecId == RetailCDXUploadSession.BatchJobId;

                Args args = new Args();
                args.record(batchJob);
                var menuFunction = new MenuFunction(menuItemDisplayStr(BatchJob), MenuItemType::Display);
                menuFunction.run(args);
            }

            else
            {
                Args args = new Args();
                RefRecId batchJobID = RetailCDXUploadSession.BatchJobId;
                // As the BatchJobHistory record is created after CDX code finishes, this is the best estimate we can have.
                BatchJobHistory batchJobHistory;

                select firstOnly batchJobHistory
                    order by batchJobHistory.CreatedDateTime asc
                        where batchJobHistory.BatchJobId == batchJobID
                        && batchJobHistory.CreatedDateTime >= RetailCDXUploadSession.ModifiedDateTime;
            
                args.record(batchJobHistory);
                args.caller(this);
                args.parm(formStr(RetailCDXUploadSession));
                new MenuFunction(menuitemDisplayStr(BatchJobHistory), MenuItemType::Display).run(args);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>RetailCDXUploadSession</Name>
			<Table>RetailCDXUploadSession</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BatchJobId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CheckSum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataStore</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateCreated</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateUploaded</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileSize</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JobId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LocalUploadSessionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Message</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Rerun</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RerunFor</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RowsAffected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Schedule</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Status</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TryCount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UploadPath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UploadSessionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UploadSessionRerunType</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@REX4160373</Caption>
		<DataSource xmlns="">RetailCDXUploadSession</DataSource>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">SimpleList</Style>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>btnGroup</Name>
						<ElementPosition>1789569705</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>btnRerun</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@Retail:RetailCDXUploadSessionRerunHelpText</HelpText>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>RetailCDXUploadSessionRerun</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>btnCancel</Name>
								<ElementPosition>1789569705</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@REX4161333</HelpText>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MultiSelect>Yes</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
								<Text>@REX4161332</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>btnReapply</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@Retail:RetailCDXUploadSessionReapplyHelpText</HelpText>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>RetailCDXUploadSessionReapply</MenuItemName>
								<MenuItemType>Action</MenuItemType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>DownloadBtn</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<MultiSelect>No</MultiSelect>
								<Text>@SYS135605</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Body</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>StartDateField</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Date</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@RET129</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>EndDateField</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Date</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@RET100</Label>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<Columnspace>0</Columnspace>
				<ColumnspaceMode>Fixed</ColumnspaceMode>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<AllowEdit>No</AllowEdit>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>RetailCDXUploadSession_JobId</Name>
						<ElementPosition>572662304</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>JobId</DataField>
						<DataSource>RetailCDXUploadSession</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormReferenceGroupControl">
						<Name>RetailCDXUploadSession_DataStore</Name>
						<ElementPosition>858993458</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ReferenceGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>RetailCDXUploadSession_DataStore_Name</Name>
								<DataRelationPath>DataStore</DataRelationPath>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
							</AxFormControl>
						</Controls>
						<DataSource>RetailCDXUploadSession</DataSource>
						<ReferenceField>DataStore</ReferenceField>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormInt64Control">
						<Name>RetailCDXUploadSession_UploadSessionId</Name>
						<ElementPosition>1288490187</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Int64</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>UploadSessionId</DataField>
						<DataSource>RetailCDXUploadSession</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormInt64Control">
						<Name>RetailCDXUploadSession_BatchJobId</Name>
						<Type>Int64</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>BatchJobId</DataField>
						<DataSource>RetailCDXUploadSession</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>RetailCDXUploadSession_Status</Name>
						<ElementPosition>1395864369</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>Status</DataField>
						<DataSource>RetailCDXUploadSession</DataSource>
						<Label>@Retail:StatusLabel</Label>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormIntegerControl">
						<Name>RetailCDXUploadSession_TryCount</Name>
						<Type>Integer</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>TryCount</DataField>
						<DataSource>RetailCDXUploadSession</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormIntegerControl">
						<Name>RetailCDXUploadSession_RowsAffected</Name>
						<ElementPosition>1503238551</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Integer</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>RowsAffected</DataField>
						<DataSource>RetailCDXUploadSession</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>RetailCDXUploadSession_Message</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>Message</DataField>
						<DataSource>RetailCDXUploadSession</DataSource>
						<DisplayHeight>1</DisplayHeight>
						<DisplayHeightMode>Fixed</DisplayHeightMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateTimeControl">
						<Name>RetailCDXUploadSession_DateCreated</Name>
						<ElementPosition>1682195521</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>DateTime</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>DateCreated</DataField>
						<DataSource>RetailCDXUploadSession</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateTimeControl">
						<Name>RetailCDXUploadSession_DateUploaded</Name>
						<ElementPosition>1646404127</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>DateTime</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>DateUploaded</DataField>
						<DataSource>RetailCDXUploadSession</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormInt64Control">
						<Name>RetailCDXUploadSession_FileSize</Name>
						<ElementPosition>1717986915</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Int64</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>FileSize</DataField>
						<DataSource>RetailCDXUploadSession</DataSource>
						<Label>@Retail:CDXFileSize</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>RetailCDXUploadSession_Rerun</Name>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>Rerun</DataField>
						<DataSource>RetailCDXUploadSession</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormInt64Control">
						<Name>RetailCDXUploadSession_RerunFor</Name>
						<Type>Int64</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>RerunFor</DataField>
						<DataSource>RetailCDXUploadSession</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>RetailCDXUploadSession_UploadSessionRerunType</Name>
						<Type>ComboBox</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataField>UploadSessionRerunType</DataField>
						<DataSource>RetailCDXUploadSession</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>RetailCDXUploadSession_DispUploadSessionRerunType</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>displayUploadSessionRerunType</DataMethod>
						<DataSource>RetailCDXUploadSession</DataSource>
						<Label>@Retail:RetailCDXUploadSessionRerunTypeLabel</Label>
					</AxFormControl>
				</Controls>
				<AlternateRowShading>No</AlternateRowShading>
				<DataSource>RetailCDXUploadSession</DataSource>
				<GridLinesStyle>Vertical</GridLinesStyle>
				<ShowRowLabels>No</ShowRowLabels>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>