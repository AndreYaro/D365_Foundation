<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProjBudgetAllocation</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
    [Form]
    public class ProjBudgetAllocation extends FormRun
    {
        ProjBudget              projBudget;

        ProjBudgetTransType     transactionTypes;
        FiscalYearName          projYearsToDisplay;
        boolean                 isEditMode;
        Map                     enumValue2ComboBoxItemMap;

        #define.CurrentVersion(2)
        #localmacro.CurrentList
            transactionTypes,
            projYearsToDisplay
        #endmacro
}
]]></Source>
			</Method>
			<Method>
				<Name>allowEditAllocationLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets allow edit property on the allocation amount field
    /// </summary>
    public void allowEditAllocationLines()
    {
        projBudgetAllocationLine_ds.allowEdit(isEditMode && !allProjects.value() && !allActivities.value() && !allCategories.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowedTrasactionsTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// load the transction types based on <c>projBudgetLineType</c>.
    /// </summary>
    /// <param name="projBudgetLineType">
    /// indicate the type of transaction.
    /// </param>
    public void allowedTrasactionsTypes(ProjBudgetLineType projBudgetLineType)
    {
        Set                 allowedTrasactionsTypes;
        SysDictEnum         sysDictEnum;
        SetEnumerator       allowedEnumValueEnumerator;
        int                 allowedEnumValue,comboBoxItemNumber;

        allowedTrasactionsTypes = new Set(Types::Enum);

        if (ProjBudgetLineType::Cost == projBudgetLineType)
        {
            allowedTrasactionsTypes.add(ProjBudgetTransType::HourCosts);
            allowedTrasactionsTypes.add(ProjBudgetTransType::ExpenseCosts);
            allowedTrasactionsTypes.add(ProjBudgetTransType::ItemCosts);
        }
        else if (ProjBudgetLineType::Revenue == projBudgetLineType)
        {
            allowedTrasactionsTypes.add(ProjBudgetTransType::HourRevenues);
            allowedTrasactionsTypes.add(ProjBudgetTransType::ExpenseRevenues);
            allowedTrasactionsTypes.add(ProjBudgetTransType::ItemRevenues);
            allowedTrasactionsTypes.add(ProjBudgetTransType::Fees);
        }
        else
        {
            allowedTrasactionsTypes.add(ProjBudgetTransType::HourCosts);
            allowedTrasactionsTypes.add(ProjBudgetTransType::ExpenseCosts);
            allowedTrasactionsTypes.add(ProjBudgetTransType::ItemCosts);
            allowedTrasactionsTypes.add(ProjBudgetTransType::HourRevenues);
            allowedTrasactionsTypes.add(ProjBudgetTransType::ExpenseRevenues);
            allowedTrasactionsTypes.add(ProjBudgetTransType::ItemRevenues);
            allowedTrasactionsTypes.add(ProjBudgetTransType::Fees);
        }
        sysDictEnum = new SysDictEnum(enumNum(ProjBudgetTransType));
        transactionType.label(sysDictEnum.label());
        transactionType.helpText(sysDictEnum.help());

        allowedEnumValueEnumerator = allowedTrasactionsTypes.getEnumerator();
        transactionType.clear();

        comboBoxItemNumber = 0;
        while (allowedEnumValueEnumerator.moveNext())

        {
            allowedEnumValue = allowedEnumValueEnumerator.current();
            transactionType.item(comboBoxItemNumber);
            transactionType.add(sysDictEnum.value2Name(allowedEnumValue));
            enumValue2ComboBoxItemMap.insert(comboBoxItemNumber,allowedEnumValue);
            comboBoxItemNumber++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBudgetTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method is used to display the total budget
    /// </summary>
    /// <returns>
    /// Total allocated amount
    /// </returns>
    /// <remarks>
    /// Method calculates the total allocated budget for the whole period based on the category, project and activity filtering
    /// </remarks>
    display AmountCur calculateBudgetTotals()
    {
        ProjBudgetAllocationLine lineSummary;
        AmountCur                ret;

        if (projBudgetAllocationLine_OriginalAllocationAmount.visible())
        {
            for (lineSummary = projBudgetAllocationLineSummary_ds.getFirst();
                 lineSummary;
                 lineSummary = projBudgetAllocationLineSummary_ds.getNext())
            {
                ret += lineSummary.OriginalAllocationAmount;
            }
        }
        else if (projBudgetAllocationLine_NewAmendmentAmount.visible())
        {
            for (lineSummary = projBudgetAllocationLineSummary_ds.getFirst();
                 lineSummary;
                 lineSummary = projBudgetAllocationLineSummary_ds.getNext())
            {
                ret += lineSummary.UncommittedRevisions;
            }
        }
        else if (projBudgetAllocationLine_TotalAllocationAmount.visible())
        {
            for (lineSummary = projBudgetAllocationLineSummary_ds.getFirst();
                 lineSummary;
                 lineSummary = projBudgetAllocationLineSummary_ds.getNext())
            {
                ret += lineSummary.TotalAllocationAmount;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    public boolean canClose()
    {
        boolean ret;

        ret = super();

        ret = ret & this.validateTotalAllocatedAmount();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves value of form controls in the <c>xSysLastValue</c> before closing the form.
    /// </summary>
    public void close()
    {
        super();

        xSysLastValue::saveLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query for <c>ProjBudgetAllocationLine</c> datasource.
    /// </summary>
    /// <param name="_forSummary">
    /// A Boolean value that indicates whether a query generated for summary; optional.
    /// </param>
    /// <returns>
    /// A <c>Query</c> type object.
    /// </returns>
    public Query createQuery(boolean _forSummary = false)
    {
        Query                   query;
        ProjBudgetLine          projBudgetLineLocal;
        QueryBuildDataSource    projBudgetAllocationLineDataSource;
        QueryBuildDataSource    projBudgetLineDataSource;
        QueryBuildDataSource    projBudgetDataSource;
        QueryBuildDataSource    fiscalCalendarYearDataSource;
        QueryBuildDataSource    fiscalCalendarPeriodDataSource;
        recId                   fiscalCalendar;
        recId                   fiscalCalendarYearRecID;
        ProjBudgetLineType      projBudgetLineType;
        ProjTransType           projTransType;
        QueryBuildDataSource    qbds;

        query = new Query();

        this.getControlValue();

        projTransType       = ProjBudgetLine::getProjTransType(transactionTypes);

        projBudgetLineType  = ProjBudgetLine::convertProjTransType2ProjBudgetLineType(transactionTypes);

        select firstonly RecId,ProjAllocationMethod from projBudgetLineLocal
            where projBudgetLineLocal.ProjTransType == projTransType
            && projBudgetLineLocal.ProjBudgetLineType == projBudgetLineType
            && projBudgetLineLocal.ProjBudget == projBudget.RecId
            && (allCategories.checked() || projBudgetLineLocal.CategoryId == categoryId.valueStr())
            && (allProjects.checked() || projBudgetLineLocal.ProjId == projectId.valueStr())
            && (allActivities.checked() || projBudgetLineLocal.ActivityNumber == activityNumber.valueStr());

        fiscalCalendar = Ledger::fiscalCalendar(CompanyInfo::current());

        fiscalCalendarYearRecID = FiscalCalendarYear::findByCalendarYearName(fiscalCalendar,projYearsToDisplay).RecId;

        projBudgetAllocationLineDataSource = query.addDataSource(tableNum(ProjBudgetAllocationLine));

        if (fiscalCalendarYearRecID ||  projYearsToDisplay == '')
        {
            if (!_forSummary)
            {
                if (projBudgetLineLocal.ProjAllocationMethod == ProjAllocationMethod::Periods)
                {
                    fiscalCalendarPeriodDataSource  = projBudgetAllocationLineDataSource.addDataSource(tableNum(FiscalCalendarPeriod));
                    fiscalCalendarPeriodDataSource.joinMode(JoinMode::InnerJoin);
                    fiscalCalendarPeriodDataSource.fetchMode(QueryFetchMode::One2One);
                    fiscalCalendarPeriodDataSource.addLink(fieldNum(ProjBudgetAllocationLine,FiscalCalendarPeriod),fieldNum(FiscalCalendarPeriod,RecId));

                    if (projYearsToDisplay != '')
                    {
                        fiscalCalendarPeriodDataSource.addRange(fieldNum(FiscalCalendarPeriod,FiscalCalendarYear)).value(queryValue(fiscalCalendarYearRecID));
                    }

                    fiscalCalendarYearDataSource  = fiscalCalendarPeriodDataSource.addDataSource(tableNum(FiscalCalendarYear));
                    fiscalCalendarYearDataSource.joinMode(JoinMode::OuterJoin);
                    fiscalCalendarYearDataSource.fetchMode(QueryFetchMode::One2One);
                    fiscalCalendarYearDataSource.addLink(fieldNum(FiscalCalendarPeriod,FiscalCalendarYear),fieldNum(FiscalCalendarYear,RecId));
                }
                else
                {
                    fiscalCalendarYearDataSource  = projBudgetAllocationLineDataSource.addDataSource(tableNum(FiscalCalendarYear));
                    fiscalCalendarYearDataSource.joinMode(JoinMode::InnerJoin);
                    fiscalCalendarYearDataSource.fetchMode(QueryFetchMode::One2One);
                    fiscalCalendarYearDataSource.addLink(fieldNum(ProjBudgetAllocationLine,FiscalCalendarYear),fieldNum(FiscalCalendarYear,RecId));

                    if (projYearsToDisplay != '')
                    {
                        projBudgetAllocationLineDataSource.addRange(fieldNum(ProjBudgetAllocationLine,FiscalCalendarYear)).value(queryValue(fiscalCalendarYearRecID));
                    }
                }
            }
            else
            {
                if (projBudgetLineLocal.ProjAllocationMethod == ProjAllocationMethod::Periods)
                {
                  fiscalCalendarPeriodDataSource  = query.dataSourceTable(tableNum(ProjBudgetAllocationLine)).addDataSource(tableNum(FiscalCalendarPeriod));
                  fiscalCalendarPeriodDataSource.joinMode(JoinMode::InnerJoin);
                  fiscalCalendarPeriodDataSource.fetchMode(QueryFetchMode::One2One);
                  fiscalCalendarPeriodDataSource.addLink(fieldNum(ProjBudgetAllocationLine,FiscalCalendarPeriod),fieldNum(FiscalCalendarPeriod,RecId));
                  fiscalCalendarPeriodDataSource.addGroupByField(fieldNum(FiscalCalendarPeriod,FiscalCalendarYear));

                  fiscalCalendarPeriodDataSource.addSelectionField(fieldNum(FiscalCalendarPeriod, FiscalCalendarYear),SelectionField::Max);
                  projBudgetAllocationLineDataSource.addSelectionField(fieldNum(ProjBudgetAllocationLine,FiscalCalendarPeriod), SelectionField::Min);
                }
                else
                {
                  projBudgetAllocationLineDataSource.addGroupByField(fieldNum(ProjBudgetAllocationLine, FiscalCalendarYear));
                  projBudgetAllocationLineDataSource.addSelectionField(fieldNum(ProjBudgetAllocationLine, FiscalCalendarYear));
                }
            }

            if ((allCategories.checked() || allProjects.checked() || allActivities.checked()))
            {
                if (!_forSummary)
                {
                    projBudgetAllocationLineDataSource.addSelectionField(fieldNum(ProjBudgetAllocationLine,FiscalCalendarPeriod));
                    projBudgetAllocationLineDataSource.addSelectionField(fieldNum(ProjBudgetAllocationLine,FiscalCalendarYear));
                    projBudgetAllocationLineDataSource.addSelectionField(fieldNum(ProjBudgetAllocationLine,Quarter));
                    if (projBudgetLineLocal.ProjAllocationMethod == ProjAllocationMethod::Periods)
                    {
                        fiscalCalendarPeriodDataSource.addSelectionField(fieldNum(FiscalCalendarPeriod,Name));
                        fiscalCalendarPeriodDataSource.addGroupByField(fieldNum(FiscalCalendarPeriod,Name));
                        fiscalCalendarPeriodDataSource.addSelectionField(fieldNum(FiscalCalendarPeriod,StartDate));
                        fiscalCalendarPeriodDataSource.addGroupByField(fieldNum(FiscalCalendarPeriod,StartDate));
                        fiscalCalendarPeriodDataSource.addOrderByField(fieldNum(FiscalCalendarPeriod,StartDate),SortOrder::Ascending);
                    }

                    projBudgetAllocationLineDataSource.addGroupByField(fieldNum(ProjBudgetAllocationLine,FiscalCalendarPeriod));
                    projBudgetAllocationLineDataSource.addGroupByField(fieldNum(ProjBudgetAllocationLine,FiscalCalendarYear));
                    projBudgetAllocationLineDataSource.addGroupByField(fieldNum(ProjBudgetAllocationLine,Quarter));

                    projBudgetAllocationLineDataSource.addSelectionField(fieldNum(ProjBudgetAllocationLine,OriginalAllocationAmount),SelectionField::Sum);
                    projBudgetAllocationLineDataSource.addSelectionField(fieldNum(ProjBudgetAllocationLine,UncommittedRevisions),SelectionField::Sum);
                    projBudgetAllocationLineDataSource.addSelectionField(fieldNum(ProjBudgetAllocationLine,TotalAllocationAmount),SelectionField::Sum);
                    projBudgetAllocationLineDataSource.orderMode(OrderMode::GroupBy);
                }
                // Now adding the ProjBudgetLine data source
                projBudgetLineDataSource = projBudgetAllocationLineDataSource.addDataSource(tableNum(ProjBudgetLine));
                projBudgetLineDataSource.joinMode(JoinMode::ExistsJoin);
                projBudgetLineDataSource.fetchMode(QueryFetchMode::One2One);
                projBudgetLineDataSource.addRange(fieldNum(ProjBudgetLine,ProjTransType)).value(queryValue(projTransType));
                projBudgetLineDataSource.addRange(fieldNum(ProjBudgetLine,ProjBudgetLineType)).value(queryValue(projBudgetLineType));

                if (!allCategories.checked())
                {
                    projBudgetLineDataSource.addRange(fieldNum(ProjBudgetLine, CategoryId)).value(queryValue(categoryId.valueStr()));
                }
                if (!allProjects.checked())
                {
                    projBudgetLineDataSource.addRange(fieldNum(ProjBudgetLine, ProjId)).value(queryValue(projectId.valueStr()));
                }
                if (!allActivities.checked())
                {
                    projBudgetLineDataSource.addRange(fieldNum(ProjBudgetLine, ActivityNumber)).value(queryValue(activityNumber.valueStr()));
                }
                projBudgetLineDataSource.addLink(fieldNum(ProjBudgetAllocationLine,ProjBudgetLine),fieldNum(ProjBudgetLine,RecId));

                // Now adding the projbudget data source
                projBudgetDataSource = projBudgetLineDataSource.addDataSource(tableNum(ProjBudget));
                projBudgetDataSource.joinMode(JoinMode::ExistsJoin);
                projBudgetDataSource.fetchMode(QueryFetchMode::One2One);
                projBudgetDataSource.addLink(fieldNum(ProjBudgetLine,ProjBudget), fieldNum(ProjBudget, RecId));
                projBudgetDataSource.addRange(fieldNum(ProjBudget, RecId)).value(queryValue(projBudget.RecId));
            }
            else
            {
                if (!_forSummary)
                {
                    projBudgetAllocationLineDataSource.addSelectionField(fieldNum(ProjBudgetAllocationLine,FiscalCalendarPeriod));
                    projBudgetAllocationLineDataSource.addSelectionField(fieldNum(ProjBudgetAllocationLine,FiscalCalendarYear));
                }
                projBudgetAllocationLineDataSource.addRange(fieldNum(ProjBudgetAllocationLine,ProjBudgetLine)).value(queryValue(projBudgetLineLocal.RecId));
            }

            if (_forSummary)
            {
                projBudgetAllocationLineDataSource.addSelectionField(fieldNum(ProjBudgetAllocationLine,OriginalAllocationAmount), SelectionField::Sum);
                projBudgetAllocationLineDataSource.addSelectionField(fieldNum(ProjBudgetAllocationLine,UncommittedRevisions), SelectionField::Sum);
                projBudgetAllocationLineDataSource.addSelectionField(fieldNum(ProjBudgetAllocationLine,TotalAllocationAmount), SelectionField::Sum);
            }

            if (projBudgetLineLocal.ProjAllocationMethod == ProjAllocationMethod::Periods)
            {
                qbds = query.dataSourceTable(tableNum(FiscalCalendarPeriod));
                if (qbds)
                {
                    qbds.addOrderByField(fieldNum(FiscalCalendarPeriod,StartDate),SortOrder::Ascending);
                }
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the value of project budget allocation group controls.
    /// </summary>
    public void getControlValue()
    {
        transactionTypes   = enumValue2ComboBoxItemMap.lookup(transactionType.selection());
        projYearsToDisplay = projBudgetAllocationLineSummary_ds.getAllocationYearName(projBudgetAllocationLineSummary);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMapKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// get the combo box index of selected transaction type.
    /// </summary>
    /// <returns>
    /// index of the combo box.
    /// </returns>
    public int getMapKey()
    {
        int key;
        MapEnumerator er;

        er = enumValue2ComboBoxItemMap.getEnumerator();
        while (er.moveNext())
        {
            if ( er.currentValue() == transactionTypes)
            {
                key = er.currentKey();
                break;
            }
        }
        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToAllocateAmount</Name>
				<Source><![CDATA[
    real getToAllocateAmount(AmountCur _differenceAmount = 0)
    {
        real                        amount;
        real                        allocatedAmount;
        real                        budgetAmount;
        ProjBudgetLine              projBudgetLineLocal;
        ProjBudgetLineType          projBudgetLineType;
        ProjTransType               projTransType;
        ProjBudgetAllocationLine    projBudgetAllocationLineLocal;
        boolean                     currentSelectionHaveAllocation;

        projTransType       = ProjBudgetLine::getProjTransType(transactionTypes);
        projBudgetLineType  = ProjBudgetLine::convertProjTransType2ProjBudgetLineType(transactionTypes);

        if (allCategories.checked() || allProjects.checked() || allActivities.checked())
        {
        // If allocations are summarized To Allocate amount should be 0
            return 0;
        }
        else
        {
            projBudgetAllocationLineLocal = ProjBudgetAllocationLine::find(projBudgetAllocationLine.RecId);

            if (projBudgetAllocationLineLocal)
            {
                select firstonly RecId, TotalBudget, UncommittedRevisions, OriginalBudget from projBudgetLineLocal
                where projBudgetLineLocal.RecId == projBudgetAllocationLineLocal.ProjBudgetLine;

                currentSelectionHaveAllocation = true;
            }
        }

        if (currentSelectionHaveAllocation && projBudgetLineLocal.RecId)
        {
            allocatedAmount = ProjBudgetAllocationLine::getAllocatedTotals(projBudgetLineLocal.RecId, !isEditMode);

            switch (projBudget.BudgetState)
            {
                case ProjBudgetState::Created :
                    budgetAmount = projBudgetLineLocal.OriginalBudget;
                    break;

                case ProjBudgetState::Committed :
                    budgetAmount = projBudgetLineLocal.TotalBudget;
                    break;

                case ProjBudgetState::Amendment :
                    if (isEditMode)
                    {
                        budgetAmount = projBudgetLineLocal.UncommittedRevisions;
                    }
                    else
                    {
                        budgetAmount = projBudgetLineLocal.TotalBudget - projBudgetLineLocal.UncommittedRevisions;
                    }
                    break;
            }

            amount = budgetAmount - allocatedAmount + _differenceAmount;
        }
        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value form controls from the <c>xSysLastValue</c>.
    /// </summary>
    public void init()
    {
        ProjBudgetLine                  projBudgetLine;
        ProjBudgetAllocationLine        localProjBudgetAllocationLine;
        ProjBudgetAllocationActionType  projBudgetAllocationActionType;

        super();

        enumValue2ComboBoxItemMap = new Map(Types::Integer, Types::Integer);
        if (element.args().dataset() == tableNum(ProjBudgetLine))
        {
            projBudgetLine =  element.args().record();
            projBudget = ProjBudget::find(projBudgetLine.ProjBudget);
            this.allowedTrasactionsTypes(projBudgetLine.ProjBudgetLineType);
            projectId.text(projBudgetLine.ProjId);
            activityNumber.text(projBudgetLine.ActivityNumber);
        }
        else
        {
            projBudget = element.args().record();

            projBudget = ProjBudget::find(projBudget.RecId);

            select firstonly projBudgetLine
            join ProjBudgetLine from localProjBudgetAllocationLine
            where projBudgetLine.ProjBudget == projBudget.RecId
               && localProjBudgetAllocationLine.ProjBudgetLine == projBudgetLine.RecId;

            projectId.text(projBudget.RootProjId);
            activityNumber.text('');

            this.allowedTrasactionsTypes(2);

            allCategories.value(1);
            allActivities.enabled(false);
            allActivities.value(1);
            allProjects.value(1);
        }
        projBudgetAllocationActionType = element.args().parmEnum();

        if (projBudgetAllocationActionType == ProjBudgetAllocationActionType::Editable && projBudget.BudgetWorkflowStatus == ProjBudgetWorkflowStatus::Submitted)
        {
            isEditMode = false;
        }
        else if (projBudgetAllocationActionType == ProjBudgetAllocationActionType::Editable)
        {
            isEditMode = true;
        }

        xSysLastValue::getLast(this);

        categoryId.text(projBudgetLine.CategoryId);

        transactionTypes = ProjBudgetLine::convertProjTransType2ProjBudgetTransType(projBudgetLine.ProjTransType,projBudgetLine.ProjBudgetLineType);

        this.setControlValue();

        this.updateFields();

        element.updateAllCategories();
        element.updateAllActivities();
        element.updateAllProjects();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the default value of form controls.
    /// </summary>
    void initParmDefault()
    {
        transactionType.selection(ProjBudgetTransType::ExpenseCosts);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the data area ID.
    /// </summary>
    /// <returns>
    /// An object of <c>DataAreaID</c> type that determines the data area ID.
    /// </returns>
    dataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the design name of the object.
    /// </summary>
    /// <returns>
    /// An object of <c>Identifiername</c> type that determines the design name of the object.
    /// </returns>
    private identifierName lastValueDesignName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the identifier name of the object.
    /// </summary>
    /// <returns>
    /// An object of <c>Identifiername</c> type that determines the name of the object.
    /// </returns>
    private identifierName lastValueElementName()
    {
        return this.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the type of element.
    /// </summary>
    /// <returns>
    /// An object <c>UtilElementType</c> type defining the type of object.
    /// </returns>
    private UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the current user ID.
    /// </summary>
    /// <returns>
    /// The user ID of the current user.
    /// </returns>
    private userId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        this.getControlValue();

        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives the value of project budget allocation group controls and assign them in respective field.
    /// </summary>
    public void setControlValue()
    {
        transactionType.selection(this.getMapKey());
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version     = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAllActivities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables Activity Number filter and sets allow edit property on the allocation amount
    /// </summary>
    public void updateAllActivities()
    {
        activityNumber.enabled(!allActivities.value());
        element.allowEditAllocationLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAllCategories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables Caetgory Id filter and sets allow edit property on the allocation amount
    /// </summary>
    public void updateAllCategories()
    {
        categoryID.enabled(!allCategories.value());
        element.allowEditAllocationLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAllProjects</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables Project Id filter and sets allow edit property on the allocation amount
    /// </summary>
    public void updateAllProjects()
    {
        projectId.enabled(!allProjects.value());
        element.allowEditAllocationLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the control of project budget allocation grid on the basis of supplied parameter.
    /// </summary>
    void updateFields()
    {
        ProjBudgetLine projBudgetLineLocal;

        this.getControlValue();

        // since allocation method is same for all the category with in a transaction type.
        select firstonly ProjAllocationMethod
        from projBudgetLineLocal
        where projBudgetLineLocal.ProjTransType == ProjBudgetLine::getProjTransType(transactionTypes)
        &&    projBudgetLineLocal.ProjBudgetLineType == ProjBudgetLine::convertProjTransType2ProjBudgetLineType(transactionTypes)
        &&    projBudgetLineLocal.ProjBudget == projBudget.RecId;

        switch (projBudgetLineLocal.ProjAllocationMethod)
        {
            case ProjAllocationMethod::Quarter:
                projBudgetAllocationLine_Quarter.visible(true);
                allocationPeriodName.visible(false);
                break;

            case ProjAllocationMethod::Periods:
                allocationPeriodName.visible(true);
                projBudgetAllocationLine_Quarter.visible(false);
                break;
            default:
                 projBudgetAllocationLine_Quarter.visible(false);
                 allocationPeriodName.visible(true);
        }

        switch (projBudget.BudgetState)
        {
            case ProjBudgetState::Created :
                projBudgetAllocationLine_OriginalAllocationAmount.visible(true);
                projBudgetAllocationLine_NewAmendmentAmount.visible(false);
                projBudgetAllocationLine_TotalAllocationAmount.visible(false);
                ///summary grid
                originalAllocationAmountSummary.visible(true);
                newAmendmentAmountSummary.visible(false);
                totalAllocationAmountSummary.visible(false);
            break;

            case ProjBudgetState::Committed :
                projBudgetAllocationLine_OriginalAllocationAmount.visible(false);
                projBudgetAllocationLine_NewAmendmentAmount.visible(false);
                projBudgetAllocationLine_TotalAllocationAmount.visible(true);
                ///summary grid
                originalAllocationAmountSummary.visible(false);
                newAmendmentAmountSummary.visible(false);
                totalAllocationAmountSummary.visible(true);
            break;

            case ProjBudgetState::Amendment :
                projBudgetAllocationLine_OriginalAllocationAmount.visible(false);
                ///summary grid
                originalAllocationAmountSummary.visible(false);

                if (isEditMode)
                {
                    projBudgetAllocationLine_TotalAllocationAmount.visible(false);
                    projBudgetAllocationLine_NewAmendmentAmount.visible(true);
                    ///summary grid
                    totalAllocationAmountSummary.visible(false);
                    newAmendmentAmountSummary.visible(true);
                }
                else
                {
                    projBudgetAllocationLine_TotalAllocationAmount.visible(true);
                    projBudgetAllocationLine_NewAmendmentAmount.visible(false);
                    ////Summary grid
                    totalAllocationAmountSummary.visible(true);
                    newAmendmentAmountSummary.visible(false);
                }
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTotalAllocatedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the currently selected amount totals
    /// </summary>
    /// <returns>
    /// true if the to allocate amount is zero, otherwise, false.
    /// </returns>
    public boolean validateTotalAllocatedAmount()
    {
        boolean check = true;

        real    chkAmount;

        chkAmount = toAllocate.realValue();

        if (chkAmount && isEditMode)
        {
            check = checkFailed(strFmt("@SYS309602", chkAmount));
        }

        return check;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>ProjBudgetAllocationLine</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            // stopping the execution of default query.
            projBudgetAllocationLine_ds.query(element.createQuery());

            super();
            toAllocate.realValue(element.getToAllocateAmount());
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>OriginalAllocationAmount</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Updates the <c>toAllocate</c> control field value.
            /// </summary>
            public void modified()
            {
                super();

                toAllocate.realValue(element.getToAllocateAmount(projBudgetAllocationLine.orig().OriginalAllocationAmount - projBudgetAllocationLine.OriginalAllocationAmount));
                groupTransactionType.allowEdit(!toAllocate.realValue());
                groupCategories.allowEdit(!toAllocate.realValue());
                groupProjects.allowEdit(!toAllocate.realValue());
                groupActivities.allowEdit(!toAllocate.realValue());
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>UncommittedRevisions</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Updates the <c>toAllocate</c> control field value.
            /// </summary>
            public void modified()
            {
                super();

                toAllocate.realValue(element.getToAllocateAmount(projBudgetAllocationLine.orig().UncommittedRevisions - projBudgetAllocationLine.UncommittedRevisions));
                groupTransactionType.allowEdit(!toAllocate.realValue());
                groupCategories.allowEdit(!toAllocate.realValue());
                groupProjects.allowEdit(!toAllocate.realValue());
                groupActivities.allowEdit(!toAllocate.realValue());
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>ProjBudgetAllocationLineSummary</Name>
				<Methods>
					<Method>
						<Name>getAllocationYearName</Name>
						<Source><![CDATA[
        public display Name getAllocationYearName(ProjBudgetAllocationLine _projBudgetAllocationLine)
        {
            Name name;

            if (projBudgetAllocationLine.FiscalCalendarPeriod !=0)
            {
                name = FiscalCalendarYear::find(FiscalCalendarPeriod::find(_projBudgetAllocationLine.FiscalCalendarPeriod).FiscalCalendarYear).yearName();
            }
            else
            {
                name = FiscalCalendarYear::find(_projBudgetAllocationLine.FiscalCalendarYear).yearName();
            }

            return name;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            this.query(element.createQuery(true));

            super();

            groupTransactionType.allowEdit(!toAllocate.realValue());
            groupCategories.allowEdit(!toAllocate.realValue());
            groupProjects.allowEdit(!toAllocate.realValue());
            groupActivities.allowEdit(!toAllocate.realValue());
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>TransactionType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        /// <summary>
        /// Updates the design of UI on the change of transaction type.
        /// </summary>
        /// <returns>
        /// A value return from super method.
        /// </returns>
        public int selectionChange()
        {
            int ret;

            ret = super();

            allProjects.value(1);

            categoryId.text('');
            projectId.text(projBudget.RootProjId);
            activityNumber.text('');

            categoryId.enabled(false);
            projectId.enabled(false);
            activityNumber.enabled(false);

            budgetTotal.realValue(0);

            element.getControlValue();

            element.updateFields();

            projBudgetAllocationLine.clear();

            allCategories.value(1);
            allActivities.value(1);
            allCategories.enabled(true);
            allActivities.enabled(true);

            projbudgetAllocationLine_ds.executeQuery();
            projBudgetAllocationLineSummary_ds.executeQuery();

            element.allowEditAllocationLines();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CategoryId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Filters the look up of category ID on the basis of selected transaction type.
        /// </summary>
        public void lookup()
        {
            element.getControlValue();

            ProjBudgetLine::lookupTransCategories(this, transactionTypes, projBudget.RecId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Creates the query to fetch data for the selected fiscal year name.
        /// </summary>
        /// <returns>
        /// A value return from super method.
        /// </returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                if (ret)
                {
                    projBudgetAllocationLine_ds.executeQuery();
                    projBudgetAllocationLineSummary_ds.executeQuery();
                }
            }
            else
            {
                element.setControlValue();
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllCategories</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Creates the query to fetch data for the all category.
        /// </summary>
        public void clicked()
        {
            super();

            projBudgetAllocationLine.clear();

            element.updateAllCategories();

            projBudgetAllocationLine_ds.executeQuery();
            projBudgetAllocationLineSummary_ds.executeQuery();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProjectId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Filters the look up of project id on the projects and subprojects of the budget.
        /// </summary>
        public void lookup()
        {
            ProjTable::lookupProjIdHierarchy(this, '', projBudget.RootProjId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            activityNumber.text('');

            if (ret)
            {
                if (ret)
                {
                    projBudgetAllocationLine_ds.executeQuery();
                    projBudgetAllocationLineSummary_ds.executeQuery();
                }
            }
            else
            {
                element.setControlValue();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllProjects</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Creates the query to fetch data for the all projects.
        /// </summary>
        public void clicked()
        {
            super();

            projBudgetAllocationLine.clear();

            element.updateAllProjects();

            allActivities.enabled(!allProjects.value());
            allActivities.value(1);
            activityNumber.enabled(false);

            projBudgetAllocationLine_ds.executeQuery();
            projBudgetAllocationLineSummary_ds.executeQuery();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ActivityNumber</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Filters the look up of activity number on the basis of selected project id.
        /// </summary>
        public void lookup()
        {
            if (projectId.valueStr() == '')
            {
                throw warning("@SYS327809");
            }
            HierarchyTreeTable::lookupHierarchyTree(this, ProjTable::find(projectId.valueStr()));
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                projBudgetAllocationLine_ds.executeQuery();
                projBudgetAllocationLineSummary_ds.executeQuery();
            }
            else
            {
                element.setControlValue();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllActivities</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Creates the query to fetch data for the all activities.
        /// </summary>
        public void clicked()
        {
            super();

            projBudgetAllocationLine.clear();

            element.updateAllActivities();

            projBudgetAllocationLine_ds.executeQuery();
            projBudgetAllocationLineSummary_ds.executeQuery();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>ProjBudgetAllocationLine</Name>
			<Table>ProjBudgetAllocationLine</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CarryForwardAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CarryForwardTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommittedRevisions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FiscalCalendarPeriod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FiscalCalendarYear</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalAllocationAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjBudgetLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Quarter</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReductionAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalAllocationAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UncommittedRevisions</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>ProjBudgetAllocationLineSummary</JoinSource>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ProjBudgetAllocationLineSummary</Name>
			<Table>ProjBudgetAllocationLine</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CarryForwardAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CarryForwardTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommittedRevisions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FiscalCalendarPeriod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FiscalCalendarYear</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalAllocationAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjBudgetLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Quarter</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReductionAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalAllocationAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UncommittedRevisions</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<LinkType>Active</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<AllowFormCompanyChange xmlns="">Yes</AllowFormCompanyChange>
		<Caption xmlns="">@SYS300558</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Height xmlns="">0</Height>
		<HeightMode xmlns="">Column</HeightMode>
		<MaximizeBox xmlns="">No</MaximizeBox>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Width xmlns="">0</Width>
		<WidthMode xmlns="">Column</WidthMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>HeaderText</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1073741822</ElementPosition>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<FilterExpression>%1</FilterExpression>
				<Type>StaticText</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<FontSize>16</FontSize>
				<ForegroundColor>MenuText</ForegroundColor>
				<Text>@Proj:BudgetAllocationInstr</Text>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FilterGroup</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>GroupTransactionType</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>805306367</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>TransactionType</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ComboType>List</ComboType>
								<Label>@SYS10614</Label>
								<Items />
							</AxFormControl>
						</Controls>
						<Style>CustomFilter</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>GroupCategories</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CategoryId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>CategoryId</ExtendedDataType>
								<Label>@SYS69410</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>AllCategories</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS134312</Label>
							</AxFormControl>
						</Controls>
						<Style>CustomFilter</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>GroupProjects</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ProjectId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>ProjId</ExtendedDataType>
								<Label>@SYS80304</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>AllProjects</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS106633</Label>
							</AxFormControl>
						</Controls>
						<Style>CustomFilter</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>GroupActivities</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ActivityNumber</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
								<Label>@SYS38381</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>AllActivities</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS327815</Label>
							</AxFormControl>
						</Controls>
						<Style>CustomFilter</Style>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ContentSection</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>ToolbarListDouble</Pattern>
				<PatternVersion>1.2</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>Grid</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Left>0</Left>
						<LeftMode>Manual</LeftMode>
						<Type>Grid</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>getAllocationYearName</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>805306366</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>getAllocationYearName</DataMethod>
								<DataSource>ProjBudgetAllocationLineSummary</DataSource>
								<Label>@SYS107162</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>OriginalAllocationAmountSummary</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1207959549</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>OriginalAllocationAmount</DataField>
								<DataSource>ProjBudgetAllocationLineSummary</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>TotalAllocationAmountSummary</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612732</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>TotalAllocationAmount</DataField>
								<DataSource>ProjBudgetAllocationLineSummary</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>NewAmendmentAmountSummary</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2013265918</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>UncommittedRevisions</DataField>
								<DataSource>ProjBudgetAllocationLineSummary</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
						</Controls>
						<DataSource>ProjBudgetAllocationLineSummary</DataSource>
						<MultiSelect>No</MultiSelect>
						<ShowRowLabels>No</ShowRowLabels>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>AllocationViewGrid</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Left>0</Left>
						<LeftMode>Manual</LeftMode>
						<Type>Grid</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>AllocationPeriodStartDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>805306366</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>getAllocationPeriodStartDate</DataMethod>
								<DataSource>ProjBudgetAllocationLine</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>AllocationPeriodName</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1207959549</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>getAllocationPeriodName</DataMethod>
								<DataSource>ProjBudgetAllocationLine</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>ProjBudgetAllocationLine_Quarter</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612732</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>Quarter</DataField>
								<DataSource>ProjBudgetAllocationLine</DataSource>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>ProjBudgetAllocationLine_TotalAllocationAmount</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2013265918</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>TotalAllocationAmount</DataField>
								<DataSource>ProjBudgetAllocationLine</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>ProjBudgetAllocationLine_OriginalAllocationAmount</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2080374782</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>OriginalAllocationAmount</DataField>
								<DataSource>ProjBudgetAllocationLine</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>ProjBudgetAllocationLine_NewAmendmentAmount</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2113929214</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>UncommittedRevisions</DataField>
								<DataSource>ProjBudgetAllocationLine</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
						</Controls>
						<DataSource>ProjBudgetAllocationLine</DataSource>
						<MultiSelect>No</MultiSelect>
						<ShowRowLabels>No</ShowRowLabels>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>FormGroupControl1</Name>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>BudgetTotal</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_ProjectManagementAndAccounting:ProjBudgetAllocation_BudgetTotal</HelpText>
								<Left>0</Left>
								<LeftMode>RightEdge</LeftMode>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>calculateBudgetTotals</DataMethod>
								<Label>@SYS327814</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>ToAllocate</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_ProjectManagementAndAccounting:ProjBudgetAllocation_ToAllocate</HelpText>
								<Left>0</Left>
								<LeftMode>RightEdge</LeftMode>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS327813</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
					</AxFormControl>
				</Controls>
				<Caption>@SYS300558</Caption>
				<FrameType>None</FrameType>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoLeft</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Ok</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Cancel</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>