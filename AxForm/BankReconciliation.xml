<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BankReconciliation</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BankReconciliation extends FormRun implements BankIReconciliationForm
{
    private BankAccountStatement bankAccountStatement;
    private QueryBuildRange criteriaOpen;
    private QueryBuildRange accountStatementDate;
    private QueryBuildRange accountStatement;
    private QueryBuildRange reconciled;
    private BankTransTypeGroup bankTransTypeGroup;
    private Map taxAmountCache;
    private Map custVendAccountCache;

    [FormObservable]
    private Map bankAccountTransMap;

    private NumberSeqFormHandler numberSeqFormHandler;

}
]]></Source>
			</Method>
			<Method>
				<Name>bankAccountStatement</Name>
				<Source><![CDATA[
    public BankAccountStatement bankAccountStatement()
    {
        return bankAccountStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookRefresh</Name>
				<Source><![CDATA[
    private void bookRefresh()
    {
        FormRun callerForm = element.args().caller();

        if (callerForm)
        {
            callerForm.bookRefresh();
        }

        bankAccountTrans_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReconcileBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Can reconcile the bank account.
    /// </summary>
    /// <returns>True when the account can be reconciled; otherwise false.</returns>
    protected boolean canReconcileBankAccount()
    {
        boolean ret;

        if(BankSimpleReconcileValidateStatementFlight::instance().isEnabled())
        {
            AmountCur diffAmountOrig = diffCleared.realValue();
            element.updateAmountCleared();

            if (diffAmountOrig != diffCleared.realValue())
            {
                bankAccountTrans_ds.research();
                return checkFailed("@Bank:BankStatementCannotBeReconciled");
            }
        }

        if (diffCleared.realValue() == 0 && !bankAccountStatement.ReconcileDate)
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        if (numberSeqFormHandler)
        {
            numberSeqFormHandler.formMethodClose();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        BankAccountTrans_LedgerAccountNum.parmPostingType(LedgerPostingType::LedgerJournal);

        if (element.args().dataset() == tablenum(BankAccountStatement))
        {
            bankAccountStatement = element.args().record();
			bankAccountStatement.reread();
            if (bankAccountStatement.RecId == 0)
            {
                throw error(Error::missingRecord(this.name()));
            }

            element.setFormCaption();
        }
        else
        {
            throw error(Error::missingRecord(this.name()));
        }

        bankTransTypeGroup = new BankTransTypeGroup(bankAccountStatement);
        taxAmountCache = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Real);
        custVendAccountCache = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Class);

        if (!LedgerParameters::find().AcknowledgementDate_IT)
        {
            bankAccountTrans_AcknowledgementDate.visible(false);
        }

        Overview_Grid.setFocus();

        if (FeatureStateProvider::isFeatureEnabled(BankBridgingVendorTransactionDetailsFeature::instance()))
        {
            BankAccountTrans_ClearedDate.visible(true);
        }

        element.setSummarization();
        element.setMarUnmarkEnabledStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormCaption</Name>
				<Source><![CDATA[
    private void setFormCaption()
    {
        if(BankParameters::find().AllowEditBankAccountStatement)
        {
            element.design().caption(strFmt("@CashManagement:BankAccountStatementReconciliationCaption", enum2Str(bankAccountStatement.getStatementStatus())));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBankAccountStatement</Name>
				<Source><![CDATA[
    private void newBankAccountStatement()
    {
        endingBalance.realValue(bankAccountStatement.EndingBalance);
        openingBalance.realValue(bankAccountStatement.openingBalance());
        diffCleared.realValue(endingBalance.realValue() - openingBalance.realValue());

        if (bankAccountStatement.ReconcileDate)
        {
            accountStatement.value(strfmt('(%1 == "%2")',
                fieldstr(BankAccountTrans, AccountStatement),
                bankAccountStatement.AccountStatementNum));

            accountStatementDate.value(strfmt('(%1 == %2)',
                fieldstr(BankAccountTrans, AccountStatementDate),
                date2StrXpp(bankAccountStatement.AccountStatementDate)));

            reconciled.value(SysQuery::value(NoYes::Yes));
        }
        else
        {
            accountStatement.value(strfmt('( (%1 == "%2") || (%3 == "" ) )',
                fieldstr(BankAccountTrans, AccountStatement),
                bankAccountStatement.AccountStatementNum,
                fieldstr(BankAccountTrans, AccountStatement)));

            accountStatementDate.value( strfmt('( (%1 == %2) || (%3 == %4) )',
                fieldstr(BankAccountTrans, AccountStatementDate),
                date2StrXpp(bankAccountStatement.AccountStatementDate),
                fieldstr(BankAccountTrans, AccountStatementDate),
                0));

            reconciled.value(SysQuery::value(NoYes::No));
        }

        accountStatement.status(RangeStatus::Hidden);
        accountStatementDate.status(RangeStatus::Hidden);
        reconciled.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowCorrection</Name>
				<Source><![CDATA[
    private void setAllowCorrection(BankAccountTrans _bankAccountTrans = bankAccountTrans)
    {
        if (_bankAccountTrans.Manual)
        {
            bankAccountTrans_ds.object(fieldnum(BankAccountTrans, AmountCorrect)).allowEdit(false);
            BankAccountTrans_AmountCorrected.allowEdit(false);
            DimensionEntryControl.allowEdit(NoYes::Yes);
        }
        else
        {
            bankAccountTrans_ds.object(fieldnum(BankAccountTrans, AmountCorrect)).allowEdit(_bankAccountTrans.Included);
            BankAccountTrans_AmountCorrected.allowEdit(_bankAccountTrans.Included);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowEdit</Name>
				<Source><![CDATA[
    private void setAllowEdit()
    {
        // Allow the edit of Included only if the bankAccountTrans is not manual
        // and is not an already included pending cancellation
        bankAccountTrans_ds.object(fieldnum(BankAccountTrans, Included)).allowEdit(
            !bankAccountTrans.Manual
                && (bankAccountTrans.Included == NoYes::Yes || bankAccountTrans.CancelPending == NoYes::No));

        bankAccountTrans_ds.object(fieldnum(BankAccountTrans, Included)).skip(bankAccountTrans.Manual);
        bankAccountTrans_ds.object(fieldnum(BankAccountTrans, AmountCur)).allowEdit(bankAccountTrans.Manual);
        bankAccountTrans_ds.object(fieldnum(BankAccountTrans, BankTransAmountCur)).allowEdit(bankAccountTrans.Manual);
        bankAccountTrans_ds.object(fieldnum(BankAccountTrans, BankTransCurrencyCode)).allowEdit(bankAccountTrans.Manual);
        bankAccountTrans_ds.object(fieldnum(BankAccountTrans, TransDate)).allowEdit(bankAccountTrans.Manual);

        if (LedgerParameters::find().AcknowledgementDate_IT)
        {
            bankAccountTrans_ds.object(fieldnum(BankAccountTrans, AcknowledgementDate)).allowEdit(bankAccountTrans.Manual);
        }

        bankAccountTrans_ds.object(fieldnum(BankAccountTrans, LedgerDimension)).allowEdit(bankAccountTrans.Manual);
        bankAccountTrans_ds.object(fieldnum(BankAccountTrans, Txt)).allowEdit(bankAccountTrans.Manual);
        bankAccountTrans_ds.object(fieldnum(BankAccountTrans, TaxGroup)).allowEdit(bankAccountTrans.Manual);
        bankAccountTrans_ds.object(fieldnum(BankAccountTrans, TaxItemGroup)).allowEdit(bankAccountTrans.Manual);

        bankAccountTrans_ds.allowDelete((bankAccountTrans.Manual && !bankAccountTrans.Reconciled));
        bankAccountTrans_ds.allowEdit(!bankAccountTrans.Reconciled);
        bankAccountTrans_ds.allowCreate(!bankAccountTrans.Reconciled);

        element.setAllowCorrection();
        cheques.enabled(bankAccountTrans.ChequeNum != '');
        bankDeposit.enabled(bankAccountTrans.DepositNum != '');

        bankAccountTrans_ds.object(fieldNum(BankAccountTrans, SummarizationId)).allowEdit(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlVisibility</Name>
				<Source><![CDATA[
    private void setControlVisibility()
    {
        if (FeatureStateProvider::isFeatureEnabled(BankManualBankTransPickLatestExchRateByTransDateFeature::instance()))
        {
            Amount_AmountMST.visible(!bankAccountTrans.Manual);
            Amount_AmountReportingCurrency.visible(!bankAccountTrans.Manual);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSummarization</Name>
				<Source><![CDATA[
    private void setSummarization()
    {
        PaymentSummarizationDetails.enabled(bankAccountTrans.SummarizationId != '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonAccess</Name>
				<Source><![CDATA[
    public void setButtonAccess()
    {
        bankAccountReconcile.enabled(diffCleared.realValue() == 0 && !bankAccountStatement.ReconcileDate);
        bankMarkChequeReconcile.enabled(!bankAccountStatement.ReconcileDate);
        cheques.enabled(bankAccountTrans.RecId != 0);
        buttonVoucher.enabled(bankAccountTrans.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerAccountNum</Name>
				<Source><![CDATA[
    private void setLedgerAccountNum(BankAccountTrans _bankAccountTrans)
    {
        _bankAccountTrans.LedgerDimension = BankTransType::find(_bankAccountTrans.BankTransType).LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAmountCleared</Name>
				<Source><![CDATA[
    private void updateAmountCleared()
    {
        AmountCur clearedAmount;
        AmountCur missingAmount;

        clearedAmount = bankTransTypeGroup.createBankGroupSums();
        tmpBankTransTypeSum.setTmpData(bankTransTypeGroup.bankTransTypeSum());
        tmpBankTransTypeSum_ds.research();

        missingAmount = (endingBalance.realValue() - openingBalance.realValue() - clearedAmount);
        diffCleared.realValue(missingAmount);

        element.setButtonAccess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankAccountTransCanBeClear</Name>
				<Source><![CDATA[
    private void checkBankAccountTransCanBeClear()
    {
        if(BankSimpleReconcileValidateStatementFlight::instance().isEnabled())
        {
            bankAccountStatement.reread();
            if (bankAccountStatement.ReconcileDate)
            {
                throw error("@Bank:BankAccountTransNotAllowMarkCleared");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markUnmarkAllSelected</Name>
				<Source><![CDATA[
    private void markUnmarkAllSelected(boolean _mark = true)
    {
        this.checkBankAccountTransCanBeClear();

        BankAccountTrans bankAccountTransLocal = bankAccountTrans_ds.getFirst(true);
        while (bankAccountTransLocal)
        {
            boolean shouldUpdate;
            if (_mark)
            {
                shouldUpdate = !bankAccountTransLocal.Manual && !bankAccountTransLocal.Included && bankAccountTransLocal.CancelPending == NoYes::No;
            }
            else
            {
                shouldUpdate = !bankAccountTransLocal.Manual && bankAccountTransLocal.Included;
            }
            if (shouldUpdate)
            {
                bankAccountTransLocal.Included = !bankAccountTransLocal.Included;
                element.includedModified(bankAccountTransLocal);
                bankAccountTransLocal.write();
                element.setAllowCorrection(bankAccountTransLocal);
            }
            bankAccountTransLocal = bankAccountTrans_ds.getNext();
        }
        element.updateAmountCleared();
        bankAccountTrans_ds.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>includedModified</Name>
				<Source><![CDATA[
    private void includedModified(BankAccountTrans _bankAccountTrans = bankAccountTrans)
    {
        _bankAccountTrans.AccountStatement = _bankAccountTrans.Included ? bankAccountStatement.AccountStatementNum : '';
        _bankAccountTrans.AccountStatementDate = _bankAccountTrans.Included ? bankAccountStatement.AccountStatementDate : dateNull();
        if (FeatureStateProvider::isFeatureEnabled(BankBridgingVendorTransactionDetailsFeature::instance()))
        {
            _bankAccountTrans.ClearedDate = _bankAccountTrans.AccountStatementDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarUnmarkEnabledStatus</Name>
				<Source><![CDATA[
    private void setMarUnmarkEnabledStatus()
    {
        MarkUnmark.enabled(!element.bankAccountStatement().ReconcileDate && bankAccountTrans_ds.getFirst(true) != null);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>BankAccountTrans</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;

            ret = super();

            if (numberSeqFormHandler && bankAccountTrans.Manual)
            {
                numberSeqFormHandler.formMethodDataSourceValidateWrite();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>cursorNotify</Name>
						<Source><![CDATA[
        public void cursorNotify(int _event)
        {
            BankAccountTrans trans;
            Set setRecId;

            super(_event);

            if (_event == 0 || _event == 1)
            {
                trans = bankAccountTrans_ds.getFirst(0, false);
                while (trans)
                {
                    if (!taxAmountCache.exists(trans.RecId))
                    {
                        if (!setRecId)
                        {
                            setRecId = new Set(typeName2Type(extendedTypeStr(recId)));
                        }
                        setRecId.add(trans.RecId);
                    }

                    trans = bankAccountTrans_ds.getNext();
                }

                if (setRecId)
                {
                    taxAmountCache = Map::create(BankAccountTrans::taxAmountDisplayCache(setRecId.pack(), taxAmountCache.pack()));
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>taxAmount</Name>
						<Source><![CDATA[
        public TaxAmount taxAmount(BankAccountTrans _bankAccountTrans)
        {
            BankAccountTrans trans;

            if (!bankAccountTransMap)
            {
                bankAccountTransMap = new Map(typeName2Type(extendedTypeStr(recId)), Types::Record);
            }

            if (taxAmountCache.exists(_bankAccountTrans.RecId))
            {
                if (bankAccountTransMap.exists(_bankAccountTrans.RecId))
                {
                    trans = bankAccountTransMap.lookup(_bankAccountTrans.RecId);

                    if (_bankAccountTrans.TransDate != trans.TransDate
                        || _bankAccountTrans.AmountCur != trans.AmountCur
                        || _bankAccountTrans.TaxGroup != trans.TaxGroup
                        || _bankAccountTrans.TaxItemGroup != trans.TaxItemGroup)
                    {
                        bankAccountTransMap.insert(_bankAccountTrans.RecId, _bankAccountTrans);
                        taxAmountCache.insert(_bankAccountTrans.RecId, _bankAccountTrans.taxAmount());
                    }
                }
                else
                {
                    bankAccountTransMap.insert(_bankAccountTrans.RecId, _bankAccountTrans);
                }
            }
            else
            {
                taxAmountCache.insert(_bankAccountTrans.RecId, _bankAccountTrans.taxAmount());
                bankAccountTransMap.insert(_bankAccountTrans.RecId, _bankAccountTrans);
            }
            return taxAmountCache.lookup(_bankAccountTrans.RecId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            if (ret)
            {
                element.setAllowEdit();
                element.setSummarization();
                element.setControlVisibility();
            }
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean append = false)
        {
            if (!numberSeqFormHandler)
            {
                numberSeqFormHandler = NumberSeqFormHandler::newForm(
                    BankParameters::numRefBankReconcileVoucher().NumberSequenceId,
                    element,
                    bankAccountTrans_ds,
                    fieldnum(BankAccountTrans, Voucher));

                if (!numberSeqFormHandler.parmNumberSequenceId())
                {
                    numberSeqFormHandler = null;
                    throw error(strfmt("@SYS26165", "@SYS24040"));
                }
            }

            if (numberSeqFormHandler)
            {
                numberSeqFormHandler.formMethodDataSourceCreatePre();
            }

            super(append);

            bankAccountTrans_bankTransTypeGrid.setFocus();
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            Voucher curVoucher;

            if (bankAccountTrans.Manual)
            {
                curVoucher = bankAccountTrans.Voucher;
            }

            super();

            if (curVoucher)
            {
                if (numberSeqFormHandler && curVoucher == numberSeqFormHandler.lastUncommitedNumber())
                {
                    numberSeqFormHandler.formMethodDataSourceDelete();
                }
                else
                {
                    NumberSeq::releaseNumber(BankParameters::numRefBankReconcileVoucher().NumberSequenceId, curVoucher);
                }
            }

            element.updateAmountCleared();
        }

]]></Source>
					</Method>
					<Method>
						<Name>reapplyFilters</Name>
						<Source><![CDATA[
        /// <summary>
        /// Reapplies filters after the user modifies the filter.
        /// </summary>
        public void reapplyFilters()
        {
            if (this.queryRun() != null)
            {
                Query initQuery = new Query(this.query());

                // The queries can become different after the user modifies the ranges on the filter pane.
                // In order to keep those modifications, we have to update executed query.
                Query updatedQuery = new Query(this.queryRun().query());
                this.query(updatedQuery);
                this.addOrUpdateQueryRanges();

                this.executeQuery();

                // The filter pane reset removes the difference between queryRun and query. In order for the
                // reset to work, since they are now equivalent, we have to set the query back to the initial value
                // and then set the range values for the current quick filter controls.
                this.query(initQuery);
                this.addOrUpdateQueryRanges();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            switch (allCleared.selection())
            {
                case AllNotCleared::All:
                    criteriaOpen.value(SysQuery::valueUnlimited());
                    break;

                case AllNotCleared::NotCleared:
                    criteriaOpen.value(queryValue(NoYes::No));
                    break;

                case AllNotCleared::Cleared:
                    criteriaOpen.value(queryValue(NoYes::Yes));
                    break;
            }

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            this.addOrUpdateQueryRanges();
        }

]]></Source>
					</Method>
					<Method>
						<Name>addOrUpdateQueryRanges</Name>
						<Source><![CDATA[
        private void addOrUpdateQueryRanges()
        {
            QueryBuildDataSource qbds = this.query().dataSourceNo(1);

            criteriaOpen = SysQuery::findOrCreateRange(qbds, fieldnum(BankAccountTrans, Included));
            accountStatementDate = SysQuery::findOrCreateRange(qbds, fieldnum(BankAccountTrans, AccountStatementDate));
            accountStatement = SysQuery::findOrCreateRange(qbds, fieldnum(BankAccountTrans, AccountStatement));
            reconciled = SysQuery::findOrCreateRange(qbds, fieldnum(BankAccountTrans, Reconciled));

            SysQuery::findOrCreateRange(qbds, fieldnum(BankAccountTrans, TransDate));
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            super();

            if (numberSeqFormHandler)
            {
                numberSeqFormHandler.formMethodDataSourceCreate();
            }

            date systemDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

            bankAccountTrans.TransDate = (bankAccountStatement.AccountStatementDate <= systemDate) ?
                bankAccountStatement.AccountStatementDate : systemDate;
            bankAccountTrans.CurrencyCode = bankAccountStatement.CurrencyCode;
            bankAccountTrans.Manual = NoYes::Yes;
            bankAccountTrans.Included = NoYes::Yes;
            bankAccountTrans.AccountStatement = bankAccountStatement.AccountStatementNum;
            bankAccountTrans.AccountStatementDate = bankAccountStatement.AccountStatementDate;
            bankAccountTrans.AcknowledgementDate = bankAccountTrans.TransDate;

            if (BankSimpleReconciliationDefaultFinancialDimensionFlight::instance().isEnabled())
            {
                BankAccountTable bankAccountTable = BankAccountTable::find(bankAccountStatement.AccountId);
                if (bankAccountTable)
                {
                    bankAccountTrans.DefaultDimension = bankAccountTable.DefaultDimension;
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        public void linkActive()
        {
            if (numberSeqFormHandler)
            {
                numberSeqFormHandler.formMethodDataSourceLinkActive();
            }

            element.newBankAccountStatement();

            super();

            element.updateAmountCleared();
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            boolean beforeIncluded = bankAccountTrans.orig().Included;
            AmountCur beforeAmountCur = bankAccountTrans.orig().AmountCur;
            AmountCur beforeAmountCorrect = bankAccountTrans.orig().AmountCorrect;
            BankTransactionType beforeBankTransType = bankAccountTrans.orig().BankTransType;

            ttsbegin;

            super();

            if (numberSeqFormHandler && bankAccountTrans.Manual)
            {
                numberSeqFormHandler.formMethodDataSourceWrite();
            }

            if (beforeAmountCur != bankAccountTrans.AmountCur
                || beforeAmountCorrect != bankAccountTrans.AmountCorrect
                || beforeBankTransType != bankAccountTrans.BankTransType
                || beforeIncluded != bankAccountTrans.Included)
            {
                element.updateAmountCleared();
            }

            ttscommit;
        }

]]></Source>
					</Method>
					<Method>
						<Name>findRelatedCustVendAccountInfo</Name>
						<Source><![CDATA[
        private CustVendAccountInfo findRelatedCustVendAccountInfo(BankAccountTrans _bankAccountTrans)
        {
            CustVendAccountInfo relatedCustVendAccountInfo;

            if (custVendAccountCache.exists(_bankAccountTrans.RecId))
            {
                relatedCustVendAccountInfo = custVendAccountCache.lookup(_bankAccountTrans.RecId);
            }
            else
            {
                relatedCustVendAccountInfo = _bankAccountTrans.findRelatedCustVendAccountInfo();
                custVendAccountCache.insert(_bankAccountTrans.RecId, relatedCustVendAccountInfo);
            }

            return relatedCustVendAccountInfo;
        }

]]></Source>
					</Method>
					<Method>
						<Name>custVendAccountNum</Name>
						<Source><![CDATA[
        public display CustVendAC custVendAccountNum(BankAccountTrans _bankAccountTrans)
        {
            return this.findRelatedCustVendAccountInfo(_bankAccountTrans).AccountNum;
        }

]]></Source>
					</Method>
					<Method>
						<Name>custVendAccountName</Name>
						<Source><![CDATA[
        public display DirPartyName custVendAccountName(BankAccountTrans _bankAccountTrans)
        {
            return this.findRelatedCustVendAccountInfo(_bankAccountTrans).AccountName;
        }

]]></Source>
					</Method>
					<Method>
						<Name>custVendAccountType</Name>
						<Source><![CDATA[
        public display BankReconciliationRelatedPartyType custVendAccountType(BankAccountTrans _bankAccountTrans)
        {
            return this.findRelatedCustVendAccountInfo(_bankAccountTrans).AccountType;
        }

]]></Source>
					</Method>
					<Method>
						<Name>markChanged</Name>
						<Source><![CDATA[
        public void markChanged()
        {
            super();
            element.setMarUnmarkEnabledStatus();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>AmountCorrect</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.setLedgerAccountNum(bankAccountTrans);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>AmountCur</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                bankAccountTrans.calcAmountMST();
                bankAccountTrans.calcAmountReportingCurrency();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>BankTransType</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.setLedgerAccountNum(bankAccountTrans);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Included</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.includedModified(bankAccountTrans);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>LedgerDimension</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if (!BankSimpleReconciliationDefaultFinancialDimensionFlight::instance().isEnabled())
                {
                    if (bankAccountTrans.Manual)
                    {
                        bankAccountTrans.DefaultDimension = MainAccountLegalEntity::findByMainAccountLegalEntity(
                        LedgerDimensionFacade::getMainAccountFromLedgerDimension(bankAccountTrans.LedgerDimension).RecId,
                        CompanyInfo::current()).DefaultDimension;
                    }
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>TransDate</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if (bankAccountTrans.AmountCur)
                {
                    bankAccountTrans.calcAmountMST();
                    bankAccountTrans.calcAmountReportingCurrency();
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>BankAccountReconcile</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (element.canReconcileBankAccount())
            {
                super();

                element.bookRefresh();
                
                element.newBankAccountStatement();

                bankAccountTrans_ds.executeQuery();
                element.setFormCaption();
                MarkUnmark.enabled(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BankMarkChequeReconcile</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            bankAccountTrans_ds.research();

            element.updateAmountCleared();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ToggleTransactionSummaryButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            this.toggleTransactionSummaryVisible();
        }

]]></Source>
					</Method>
					<Method>
						<Name>toggleTransactionSummaryVisible</Name>
						<Source><![CDATA[
        private void toggleTransactionSummaryVisible()
        {
            transactionSummary.visible(!transactionSummary.visible());

            if (transactionSummary.visible())
            {
                this.text("@CashManagement:HideClearedTransactionSummary");
            }
            else
            {
                this.text("@CashManagement:ShowClearedTransactionSummary");
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllCleared</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                bankAccountTrans_ds.reapplyFilters();
            }

            element.setButtonAccess();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MarkSelectedButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            element.markUnmarkAllSelected(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UnmarkSelectedButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            element.markUnmarkAllSelected(false);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BankAccountTrans_Included</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.checkBankAccountTransCanBeClear();

            super();

            bankAccountTrans_ds.write();
            element.setAllowCorrection();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BankAccountTrans_ClearedDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Validates the ClearedDate field.
        /// </summary>
        /// <returns>False when bank statement date is later than cleared date.</returns>
        public boolean validate()
        {
            boolean ret;
            
            ret = super();

            if (this.dateValue() > bankAccountStatement.AccountStatementDate)
            {
                ret = checkFailed("@CashManagement:BankAccountClearedDateError");
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TabFinancialDimensions</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            tabFinancialDimensions.allowEdit(bankAccountTrans.Included == NoYes::Yes);
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>BankAccountTrans</Name>
			<Table>BankAccountTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyAmountCorrect_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>AccountStatement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>AccountStatementDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AcknowledgementDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCorrect</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>AmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPaymentRegistrationNum_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTransAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTransCurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTransType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Cancel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CancelPending</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CentralBankPurposeCode_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CentralBankPurposeText_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>ChequeNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ClearedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrespondentCountry_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>DepositNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Included</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerTransType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Manual</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>PaymentMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>PaymReference</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonRefRecID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Reconciled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyAmount_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyAmountCorrect_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<Index>AcctTransDate</Index>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TmpBankTransTypeSum</Name>
			<Table>TmpBankTransTypeSum</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountStatementDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTransactionTypeGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ClearedAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Lines</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<Index>Group</Index>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<ArrangeMethod xmlns="">HorizontalLeft</ArrangeMethod>
		<Caption xmlns="">@SYS23703</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>19884107</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>BankAccountReconcile</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>143165576</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>BankAccountTrans</DataSource>
								<MenuItemName>BankAccountReconcile</MenuItemName>
								<MenuItemType>Action</MenuItemType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>BankMarkChequeReconcile</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>715827882</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>BankAccountTrans</DataSource>
								<MenuItemName>BankMarkChequeReconcile</MenuItemName>
								<MenuItemType>Action</MenuItemType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ToggleTransactionSummaryButton</Name>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@CashManagement:ShowClearedTransactionSummary</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>BankDeposit</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>954437176</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>BankAccountTrans</DataSource>
								<MenuItemName>BankDeposit</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>Cheques</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1193046470</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>BankAccountTrans</DataSource>
								<MenuItemName>BankChequeTable</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ButtonVoucher</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1670265058</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>BankAccountTrans</DataSource>
								<MenuItemName>LedgerTransVoucher1</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>Printout</Name>
								<ElementPosition>1908874352</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>BankReconciliationSummary</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>BankReconciliationSummary</MenuItemName>
										<MenuItemType>Output</MenuItemType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>BankReconciliation</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>BankReconciliation</MenuItemName>
										<MenuItemType>Output</MenuItemType>
									</AxFormControl>
								</Controls>
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS920</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>PaymentSummarizationDetails</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<DataSource>BankAccountTrans</DataSource>
								<MenuItemName>BankTransSummarizationLine</MenuItemName>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>GroupDetails</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>CustomFilter</Name>
						<Pattern>CustomFilters</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>Group</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>AllCleared</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>39768214</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_AllReconciled</HelpText>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<EnumType>AllNotCleared</EnumType>
								<Label>@SYS50991</Label>
								<Items />
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<FrameType>None</FrameType>
						<Style>CustomFilter</Style>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabControl">
						<Name>Tab</Name>
						<AlignControl>No</AlignControl>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Tab</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormTabPageControl">
								<Name>Overview</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Height>0</Height>
								<HeightMode>SizeToAvailable</HeightMode>
								<Pattern>ToolbarList</Pattern>
								<PatternVersion>1.2</PatternVersion>
								<Type>TabPage</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneControl">
										<Name>Overview_ActionPane</Name>
										<Type>ActionPane</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>NewDelete</Name>
												<Type>ButtonGroup</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormCommandButtonControl">
														<Name>NewButton</Name>
														<Type>CommandButton</Type>
														<FormControlExtension
															i:nil="true" />
														<Command>New</Command>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCommandButtonControl">
														<Name>DeleteButton</Name>
														<Type>CommandButton</Type>
														<FormControlExtension
															i:nil="true" />
														<Command>DeleteRecord</Command>
													</AxFormControl>
												</Controls>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>MarkUnmark</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>ButtonGroup</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>MarkSelectedButton</Name>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<MultiSelect>Yes</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<Text>@CashManagement:MarkAsCleared</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>UnmarkSelectedButton</Name>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<MultiSelect>Yes</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<Text>@CashManagement:UnmarkSelected</Text>
													</AxFormControl>
												</Controls>
											</AxFormControl>
										</Controls>
										<DataSource>BankAccountTrans</DataSource>
										<Style>Strip</Style>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>Overview_Grid</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Grid</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>BankAccountTrans_Included</Name>
												<ElementPosition>390451572</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_BankAccountTrans_Included</HelpText>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<BackgroundColor>WindowBackground</BackgroundColor>
												<DataField>Included</DataField>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>Manual</Name>
												<AllowEdit>No</AllowEdit>
												<Type>CheckBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>Manual</DataField>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BankAccountTrans_bankTransTypeGrid</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>585677358</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_BankAccountTrans_bankTransTypeGrid</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>BankTransType</DataField>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>BankAccountTrans_TransDateGrid</Name>
												<ElementPosition>780903144</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_BankAccountTrans_TransDateGrid</HelpText>
												<Type>Date</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>TransDate</DataField>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>BankAccountTrans_AcknowledgementDate</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>976128930</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_BankAccountTrans_AcknowledgementDate</HelpText>
												<Type>Date</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>AcknowledgementDate</DataField>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>BankAccountTrans_ClearedDate</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Date</Type>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<DataField>ClearedDate</DataField>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BankAccountTrans_ChequeNum</Name>
												<ElementPosition>1171354716</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>ChequeNum</DataField>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BankAccountTrans_DepositNum</Name>
												<ElementPosition>1366580502</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_BankAccountTrans_DepositNum</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>DepositNum</DataField>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>BankAccountTrans_AmountCurGrid</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>2119521619</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_BankAccountTrans_AmountCurGrid</HelpText>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>AmountCur</DataField>
												<DataSource>BankAccountTrans</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>BankAccountTrans_AmountCorrected</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>2141891239</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_BankAccountTrans_AmountCorrected</HelpText>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>CorrectedAmountCur</DataMethod>
												<DataSource>BankAccountTrans</DataSource>
												<Label>@SYS53245</Label>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>BankAccountTrans_AmountCorrectGrid</Name>
												<ElementPosition>2136298834</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_BankAccountTrans_AmountCorrectGrid</HelpText>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>AmountCorrect</DataField>
												<DataSource>BankAccountTrans</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormSegmentedEntryControl">
												<Name>BankAccountTrans_LedgerAccountNum</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_BankAccountTrans_LedgerAccountNum</HelpText>
												<Type>SegmentedEntry</Type>
												<FormControlExtension>
													<Name>SegmentedEntryControl</Name>
													<ExtensionComponents />
													<ExtensionProperties>
														<AxFormControlExtensionProperty>
															<Name>parmControllerClassName</Name>
															<Type>String</Type>
															<Value>LedgerDimensionDefaultAccountController</Value>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmAccountTypeEnumName</Name>
															<Type>String</Type>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmIsDefaultAccount</Name>
															<Type>Enum</Type>
															<TypeName>boolean</TypeName>
															<Value>False</Value>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmValidateBlockedForManualEntry</Name>
															<Type>Enum</Type>
															<TypeName>NoYes</TypeName>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmLockMainAccountSegment</Name>
															<Type>Enum</Type>
															<TypeName>NoYes</TypeName>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmPostingType</Name>
															<Type>Enum</Type>
															<TypeName>LedgerPostingType</TypeName>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmIncludeTotalAccounts</Name>
															<Type>Enum</Type>
															<TypeName>NoYes</TypeName>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmIncludeFinancialAccounts</Name>
															<Type>Enum</Type>
															<TypeName>NoYes</TypeName>
														</AxFormControlExtensionProperty>
													</ExtensionProperties>
												</FormControlExtension>
												<DataSource>BankAccountTrans</DataSource>
												<ReferenceField>LedgerDimension</ReferenceField>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>CustVendAccountType</Name>
												<Type>ComboBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>custVendAccountType</DataMethod>
												<DataSource>BankAccountTrans</DataSource>
												<Items />
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>CustVendAccountNum</Name>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>custVendAccountNum</DataMethod>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>CustVendAccountName</Name>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>custVendAccountName</DataMethod>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BankAccountTrans_SummarizationId</Name>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>SummarizationId</DataField>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
										</Controls>
										<DataSource>BankAccountTrans</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@SYS9039</Caption>
								<DataSource>BankAccountTrans</DataSource>
								<Scrollbars>Auto</Scrollbars>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormTabPageControl">
								<Name>General</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>TabPage</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Bank</Name>
										<ElementPosition>613566756</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Bank_AccountId</Name>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>AccountId</DataField>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Bank_BankTransType</Name>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_Bank_BankTransType</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>BankTransType</DataField>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>Bank_Manual</Name>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_Bank_Manual</HelpText>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>Manual</DataField>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
										</Controls>
										<DataGroup>Bank</DataGroup>
										<DataSource>BankAccountTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Amount</Name>
										<ElementPosition>920350134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Amount_CurrencyCode</Name>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_Amount_CurrencyCode</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>CurrencyCode</DataField>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>Amount_AmountCur</Name>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_Amount_AmountCur</HelpText>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>AmountCur</DataField>
												<DataSource>BankAccountTrans</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>Amount_AmountMST</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_Amount_AmountMST</HelpText>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>AmountMST</DataField>
												<DataSource>BankAccountTrans</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>Amount_AmountReportingCurrency</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_Amount_AmountReportingCurrency</HelpText>
												<Type>Real</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>AmountReportingCurrency</DataField>
												<DataSource>BankAccountTrans</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Amount_BankTransCurrencyCode</Name>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_Amount_BankTransCurrencyCode</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>BankTransCurrencyCode</DataField>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>Amount_BankTransAmountCur</Name>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_Amount_BankTransAmountCur</HelpText>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>BankTransAmountCur</DataField>
												<DataSource>BankAccountTrans</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
										</Controls>
										<DataGroup>Amount</DataGroup>
										<DataSource>BankAccountTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Payment</Name>
										<ElementPosition>1227133512</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Payment_PaymentMode</Name>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_Payment_PaymentMode</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>PaymentMode</DataField>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Payment_PaymReference</Name>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_Payment_PaymReference</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>PaymReference</DataField>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Payment_ChequeNum</Name>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>ChequeNum</DataField>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Payment_DepositNum</Name>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_Payment_DepositNum</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>DepositNum</DataField>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Payment_SummarizationId</Name>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>SummarizationId</DataField>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Payment_M_displayBankCashDueAnnouncement_RU</Name>
												<AllowEdit>No</AllowEdit>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>displayBankCashDueAnnouncement_RU</DataMethod>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
										</Controls>
										<DataGroup>Payment</DataGroup>
										<DataSource>BankAccountTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Voucher</Name>
										<ElementPosition>1533916890</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Voucher_Voucher</Name>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_Voucher_Voucher</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>Voucher</DataField>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>Voucher_TransDate</Name>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_Voucher_TransDate</HelpText>
												<Type>Date</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>TransDate</DataField>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BankAccountTrans_ManualTxt</Name>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_BankAccountTrans_ManualTxt</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>Txt</DataField>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
										</Controls>
										<Caption>@SYS12371</Caption>
										<DataSource>BankAccountTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SalesTax</Name>
										<ElementPosition>1840700268</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SalesTax_TaxGroup</Name>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>TaxGroup</DataField>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SalesTax_TaxItemGroup</Name>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>TaxItemGroup</DataField>
												<DataSource>BankAccountTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>RealEdit</Name>
												<ElementPosition>1717986916</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_RealEdit</HelpText>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>taxAmount</DataMethod>
												<DataSource>BankAccountTrans</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
										</Controls>
										<Caption>@SYS75137</Caption>
										<DataSource>BankAccountTrans</DataSource>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<Caption>@SYS2952</Caption>
								<DataSource>BankAccountTrans</DataSource>
								<Scrollbars>Auto</Scrollbars>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormTabPageControl">
								<Name>TabFinancialDimensions</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Pattern>DimensionEntryControl</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>TabPage</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormContainerControl">
										<Name>DimensionEntryControl</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Container</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension>
											<Name>DimensionEntryControl</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>parmControllerClassName</Name>
													<Type>ExtendedDataType</Type>
													<TypeName>ClassName</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmControlLabelText</Name>
													<Type>String</Type>
													<Value>@SYS138487</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmEnumerationName</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmDataSourceName</Name>
													<Type>String</Type>
													<Value>BankAccountTrans</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmValueSetReferenceField</Name>
													<Type>String</Type>
													<Value>DefaultDimension</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmEnumValueSetReferenceField</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
										<Controls />
									</AxFormControl>
								</Controls>
								<HideIfEmpty>No</HideIfEmpty>
								<Caption>@SYS101181</Caption>
								<Scrollbars>Auto</Scrollbars>
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Balance</Name>
						<AllowEdit>No</AllowEdit>
						<ExtendedStyle>tabularFields</ExtendedStyle>
						<Pattern>TabularFields</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>BalanceCaption</Name>
								<ExtendedStyle>tabularFields_title</ExtendedStyle>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<AllowUserSetup>No</AllowUserSetup>
								<ArrangeMethod>None</ArrangeMethod>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>BalanceHeaders</Name>
								<ExtendedStyle>tabularFields_rowHeader</ExtendedStyle>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>OpeningBalanceHeader</Name>
										<AllowEdit>No</AllowEdit>
										<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
										<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_OpeningBalanceHeader</HelpText>
										<Type>StaticText</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS53035</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>EndingBalanceHeader</Name>
										<AllowEdit>No</AllowEdit>
										<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
										<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_EndingBalanceHeader</HelpText>
										<Type>StaticText</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS50986</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>DiffClearedHeader</Name>
										<AllowEdit>No</AllowEdit>
										<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
										<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_DiffClearedHeader</HelpText>
										<Type>StaticText</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS53063</Text>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>No</AllowUserSetup>
								<ArrangeMethod>None</ArrangeMethod>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>BalanceRow</Name>
								<ExtendedStyle>tabularFields_row</ExtendedStyle>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>OpeningBalance</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>AmountCur</ExtendedDataType>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>EndingBalance</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>AmountCur</ExtendedDataType>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>DiffCleared</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>AmountCur</ExtendedDataType>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>No</AllowUserSetup>
								<ArrangeMethod>None</ArrangeMethod>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>BalanceFooter</Name>
								<ExtendedStyle>tabularFields_rowFooter</ExtendedStyle>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<AllowUserSetup>No</AllowUserSetup>
								<ArrangeMethod>None</ArrangeMethod>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<AllowUserSetup>Restricted</AllowUserSetup>
						<ArrangeMethod>None</ArrangeMethod>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>TransactionSummary</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>ToolbarList</Pattern>
				<PatternVersion>1.2</PatternVersion>
				<Type>Group</Type>
				<Visible>No</Visible>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>TypeSums</Name>
						<ExtendedStyle>cardList</ExtendedStyle>
						<Type>Grid</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>TransactionSummaryCard</Name>
								<ExtendedStyle>BusinessCard</ExtendedStyle>
								<Pattern>BusinessCardThreeFields</Pattern>
								<PatternVersion>1.0</PatternVersion>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpBankTransTypeSum_BankTransactionTypeGroup</Name>
										<ExtendedStyle>Heading</ExtendedStyle>
										<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_TmpBankTransTypeSum_BankTransactionTypeGroup</HelpText>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>BankTransactionTypeGroup</DataField>
										<DataSource>TmpBankTransTypeSum</DataSource>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>GroupName</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_CashAndBankManagement:BankReconciliation_GroupName</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>Yes</CacheDataMethod>
										<DataMethod>groupName</DataMethod>
										<DataSource>TmpBankTransTypeSum</DataSource>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>GroupLinesAndClearedAmount</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>Yes</CacheDataMethod>
										<ChangeCase>UpperCase</ChangeCase>
										<DataMethod>groupLinesAndClearedAmount</DataMethod>
										<DataSource>TmpBankTransTypeSum</DataSource>
										<Label>@CashManagement:Cleared</Label>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>None</ArrangeMethod>
								<Style>Card</Style>
							</AxFormControl>
						</Controls>
						<DataSource>TmpBankTransTypeSum</DataSource>
						<MultiSelect>No</MultiSelect>
						<Style>List</Style>
					</AxFormControl>
				</Controls>
				<Caption>@CashManagement:ClearedTransactionSummary</Caption>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>