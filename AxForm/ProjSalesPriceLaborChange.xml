<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProjSalesPriceLaborChange</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ProjSalesPriceLaborChange extends FormRun
{
    container con;
    boolean massUpdate;
    ProjHourSalesPrice passedBuff; // The table buffer of the single passed

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class variables
    /// </summary>
    public void init()
    {
        super();

        // Initialize container with the RecIds of the selected records
        str multipleRecords = element.args().parm();
        if (multipleRecords)
        {
            con = str2con(multipleRecords, ',');
            if (conlen(con) > 1)
            {
                massUpdate = true;
            }
            else
            {
                select forupdate passedBuff where passedBuff.RecId == conPeek(con,1);
                if (passedBuff)
                {
                    // Default the ProjSalesPricing field to the sales price of the passed record
                    ProjSalesPricing.RealValue(passedBuff.ProjSalesPricing);
                }
                massUpdate = false;
            }

            element.setFieldAccess();
        }

        // Default the TransDate field control to today's date
        TransDate.dateValue(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateModifiedPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates adjusted price based on user selection
    /// </summary>
    /// <param name = "originalPrice">
    ///     The original price to be adjusted
    /// </param>
    /// <returns>
    ///     The adjusted price
    /// </returns>
    private real calculateModifiedPrice(real originalPrice)
    {
        real modifiedPrice;
        switch (UpdatePrice.selection())
        {
            case ProjUpdatePrice::Increase:
                modifiedPrice = originalPrice + (originalPrice * PercentChange.realValue()) / 100;
                break;
            case ProjUpdatePrice::Decrease:
                modifiedPrice = originalPrice - (originalPrice * PercentChange.realValue()) / 100;
                break;
        }
        return modifiedPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyMassPriceChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies price change to the passed records or inserts new records with new prices
    /// </summary>
    private void applyMassPriceChange()
    {
        ProjHourSalesPrice projHourSalesPrice1;
        ProjHourSalesPrice projHourSalesPrice2;
        real modifiedPrice;

        date selectedDate = TransDate.dateValue();

        try
        {
            ttsbegin;

            // Fetch the passed records based on RecIds. For each record, if there exists no record
            // based on the selected date, create one with the modified price, otherwise,
            // update the existing record with the modified price.
            for (int i = 1; i <= conlen(con); i++)
            {
                select forupdate projHourSalesPrice1 where projHourSalesPrice1.RecId == conPeek(con,i);

                if (projHourSalesPrice1)
                {
                    modifiedPrice = this.calculateModifiedPrice(projHourSalesPrice1.ProjSalesPricing);

                    projHourSalesPrice2 = ProjHourSalesPrice::findByExactDate(projHourSalesPrice1.ProjId,
                                                                                projHourSalesPrice1.Resource,
                                                                                projHourSalesPrice1.CategoryId,
                                                                                selectedDate,
                                                                                projHourSalesPrice1.CurrencyId,
                                                                                projHourSalesPrice1.ProjValidFor,
                                                                                projHourSalesPrice1.ProjPriceGroup,
                                                                                projHourSalesPrice1.PSACustAccount,
                                                                                projHourSalesPrice1.PSAProjInvoiceProjId,
                                                                                projHourSalesPrice1.ResourceCategory,
                                                                                true);

                    if (!projHourSalesPrice2)
                    {
                        ProjHourSalesPrice tempBuff;
                        tempBuff.ProjId = projHourSalesPrice1.ProjId;
                        tempBuff.Resource = projHourSalesPrice1.Resource;
                        tempBuff.CategoryId = projHourSalesPrice1.CategoryId;
                        tempBuff.CurrencyId = projHourSalesPrice1.CurrencyId;
                        tempBuff.TransDate = selectedDate;
                        tempBuff.ProjValidFor = projHourSalesPrice1.ProjValidFor;
                        tempBuff.ProjPriceGroup = projHourSalesPrice1.ProjPriceGroup;
                        tempBuff.PSACustAccount = projHourSalesPrice1.PSACustAccount;
                        tempBuff.PSAProjInvoiceProjId = projHourSalesPrice1.PSAProjInvoiceProjId;
                        tempBuff.ProjSalesPriceModel = projHourSalesPrice1.ProjSalesPriceModel;
                        tempBuff.ProjSalesPricing = modifiedPrice;
                        tempBuff.ResourceCategory = projHourSalesPrice1.ResourceCategory;

                        // Throw an error to abort the transaction if any of the inserts fail
                        if (!tempBuff.validateField(fieldnum(ProjHourSalesPrice, ProjSalesPricing))
                            || !tempBuff.validateWrite())
                        {
                            throw Exception::Error;
                        }
                        tempBuff.insert();
                    }
                    else
                    {
                        projHourSalesPrice2.ProjSalesPricing = modifiedPrice;

                        // Throw an error to abort the transaction if any of the updates fail
                        if (!projHourSalesPrice2.validateField(fieldnum(ProjHourSalesPrice, ProjSalesPricing))
                            || !projHourSalesPrice2.validateWrite())
                        {
                            throw Exception::Error;
                        }
                        ProjHourSalesPrice2.update();
                    }
                }
            }
            ttscommit;
        }
        catch
        {
            ttsabort;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applySinglePriceChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies price change to the passed record or inserts a new record
    /// </summary>
    private void applySinglePriceChange()
    {
        ProjHourSalesPrice projHourSalesPrice;
        date selectedDate = TransDate.dateValue();

        if (passedBuff)
        {
            try
            {
                ttsbegin;
                if (passedBuff.TransDate != selectedDate)
                {
                    // The effective date of the passed record is different than the selected date
                    // in the TransDate control. Therefore, create a new record with the selected date
                    // in the TransDate control and the updated price in the ProjSalesPricing control.
                    ProjHourSalesPrice tempBuff;
                    tempBuff.ProjId = passedBuff.ProjId;
                    tempBuff.Resource = passedBuff.Resource;
                    tempBuff.CategoryId = passedBuff.CategoryId;
                    tempBuff.CurrencyId = passedBuff.CurrencyId;
                    tempBuff.TransDate = selectedDate;
                    tempBuff.ProjValidFor = passedBuff.ProjValidFor;
                    tempBuff.ProjPriceGroup = passedBuff.ProjPriceGroup;
                    tempBuff.PSACustAccount = passedBuff.PSACustAccount;
                    tempBuff.PSAProjInvoiceProjId = passedBuff.PSAProjInvoiceProjId;
                    tempBuff.ProjSalesPriceModel = passedBuff.ProjSalesPriceModel;
                    tempBuff.ProjSalesPricing = ProjSalesPricing.RealValue();
                    tempBuff.ResourceCategory = passedBuff.ResourceCategory;

                    // Throw an error to abort the transaction if the insert fails
                    if (!tempBuff.validateField(fieldnum(ProjHourSalesPrice, ProjSalesPricing))
                                || !tempBuff.validateWrite())
                    {
                        throw Exception::Error;
                    }
                    tempBuff.insert();
                }
                else
                {
                    // The effective date of the passed record is the same as the selected date,
                    // therefore, update the price of the record with the specfied price in the
                    // ProjSalesPricing control.
                    passedBuff.ProjSalesPricing = ProjSalesPricing.RealValue();

                    // Throw an error to abort the transaction if the update fails
                    if (!passedBuff.validateField(fieldnum(ProjHourSalesPrice, ProjSalesPricing))
                                || !passedBuff.validateWrite())
                    {
                        throw Exception::Error;
                    }
                    passedBuff.update();
                }
                ttscommit;
            }
            catch
            {
                ttsabort;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldAccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets field access based on the number of records passed to the current form
    /// </summary>
    private void setFieldAccess()
    {
        if (massUpdate)
        {
            // More than one record passed
            UpdatePrice.enabled(true);
            UpdatePrice.visible(true);
            PercentChange.enabled(true);
            PercentChange.visible(true);
            ProjSalesPricing.enabled(false);
            ProjSalesPricing.visible(false);
        }
        else
        {
            // Single record passed
            UpdatePrice.enabled(false);
            UpdatePrice.visible(false);
            PercentChange.enabled(false);
            PercentChange.visible(false);
            ProjSalesPricing.enabled(true);
            ProjSalesPricing.visible(true);
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>OKButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Applies price changes
        /// </summary>
        public void clicked()
        {
            if (massUpdate)
            {
                element.applyMassPriceChange();
            }
            else
            {
                element.applySinglePriceChange();
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@SYS25118</Caption>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FieldGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>TransDate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Date</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>TransDate</ExtendedDataType>
						<Label>@SYS50168</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>UpdatePrice</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Enabled>No</Enabled>
						<Type>ComboBox</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<EnumType>ProjUpdatePrice</EnumType>
						<Label>@Res:ChangePrice</Label>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>PercentChange</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Enabled>No</Enabled>
						<Type>Real</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS71272</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>ProjSalesPricing</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Enabled>No</Enabled>
						<Type>Real</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS5755</Label>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>CommitButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<Text>@SYS80052</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>