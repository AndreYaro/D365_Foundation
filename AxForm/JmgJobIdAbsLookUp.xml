<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>JmgJobIdAbsLookUp</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
    [Form]
    public class JmgJobIdAbsLookUp extends FormRun
    {
        FormStringControl   callerControl;
}
]]></Source>
			</Method>
			<Method>
				<Name>analyzeTmpQuery</Name>
				<Source><![CDATA[
    container analyzeTmpQuery(TmpSysQuery tmpquery)
    {
    #Define.UsrFldIDAdd(65536)

        tableId                 inTableId       = tmpquery.Table_Id;
        JmgJourRegTypeEnum      jourRegType;
        JmgJobRef               jobRef          = '';
        JmgStampTypeEnum        stamptype;
        JmgModuleEnum           module;
        JmgIpcCategory          ipcCategory;
        ProjTable               projTab;
        ProdTable               prodTab;
        Range                   wrkRange;

        Integer                 fldidModule;
        Integer                 fldidJobRef;
        Integer                 fldidJourReg;
        Integer                 fldidStampType;

        boolean                 limitModule     = false;
        boolean                 limitJobRef     = false;
        boolean                 limitJourReg    = false;
        boolean                 limitStampType  = false;
        boolean                 limitType       = false;

        switch (inTableId)
        {
            case tablenum(JmgStampJournalTrans) :
                fldidModule     = fieldnum(JmgStampJournalTrans,Module);
                fldidJobRef     = fieldnum(JmgStampJournalTrans,JobRef);
                fldidJourReg    = fieldnum(JmgStampJournalTrans,JourRegType);
                fldidStampType  = fieldnum(JmgStampJournalTrans,StampType);
                break;
            case tablenum(JmgStampTrans) :
                fldidModule     = fieldnum(JmgStampTrans,Module);
                fldidJobRef     = fieldnum(JmgStampTrans,JobRef);
                fldidJourReg    = fieldnum(JmgStampTrans,JourRegType);
                fldidStampType  = fieldnum(JmgStampTrans,StampType);
                break;
            case tablenum(JmgIpcActivity) :
                fldidJobRef     = fieldnum(JmgIpcActivity,Category);
                fldidStampType  = fieldnum(JmgIpcActivity,Type);
                limitModule     = true;
                module          = JmgModuleEnum::IPC;
                break;
            case tablenum(JmgIpcCategory) :
                fldidJobRef     = fieldnum(JmgIpcCategory,Category);
                fldidStampType  = fieldnum(JmgIpcCategory,Type);
                limitModule     = true;
                module          = JmgModuleEnum::IPC;
                break;
        }
        tmpquery.setTmpData(this.args().record());

        while select tmpquery
              where (tmpquery.Table_Id == inTableId) &&
                    (tmpquery.RangeValue)
        {
            wrkRange = tmpquery.RangeValue;

            if ((fldidModule) && ((tmpquery.Field_Id mod #UsrFldIDAdd) == fldidModule) && (!limitModule))
            {
                limitModule     = true;
                module          = str2enum(module,wrkRange);
            }
            else if ((fldidJobRef) && ((tmpquery.Field_Id  mod #UsrFldIDAdd) == fldidJobRef) && (!limitJobRef))
            {
                limitJobRef     = true;
                jobRef          = wrkRange;
            }
            else if ((fldidJourReg) && ((tmpquery.Field_Id  mod #UsrFldIDAdd) == fldidJourReg) && (!limitJourReg))
            {
                limitJourReg    = true;
                jourRegType     = str2enum(jourRegType,wrkRange);
            }
            else if ((fldidStampType) && ((tmpquery.Field_Id  mod #UsrFldIDAdd) == fldidStampType) && (!limitStampType))
            {
                limitStampType  = true;
                stamptype       = str2enum(stamptype,wrkRange);
            }
        }

        if (! limitJourReg)
        {
            if (limitModule)
            {
                switch (module)
                {
                    case JmgModuleEnum::IPC :
                        switch (stamptype)
                        {
                            case JmgStampTypeEnum::Work :
                                jourRegType = JmgJourRegTypeEnum::IndActivity;
                                break;
                            case JmgStampTypeEnum::Absence :
                                jourRegType = JmgJourRegTypeEnum::Absence;
                                break;
                            case JmgStampTypeEnum::Break :
                                jourRegType = JmgJourRegTypeEnum::BreakReg;
                                break;
                        }
                        limitJourReg        = true;
                        limitType           = true;
                        break;
                    case JmgModuleEnum::PROD :
                        jourRegType = JmgJourRegTypeEnum::MrpQueueBefore;
                        break;

                    case JmgModuleEnum::PROJ :
                        jourRegType = JmgJourRegTypeEnum::PrjProject;
                        break;
                }
            }
            else
            {
                if (limitJobRef)
                {
                    select firstonly Type,RecId from ipcCategory where ipcCategory.Category == jobRef;
                    if (ipcCategory)
                    {
                        switch (ipcCategory.Type)
                        {
                            case JmgStampTypeEnum::Work :
                                jourRegType     = JmgJourRegTypeEnum::IndActivity;
                                limitJourReg    = true;
                                break;
                            case JmgStampTypeEnum::Absence :
                                jourRegType     = JmgJourRegTypeEnum::Absence;
                                limitJourReg    = true;
                                break;
                            case JmgStampTypeEnum::Break :
                                jourRegType     = JmgJourRegTypeEnum::BreakReg;
                                limitJourReg    = true;
                                break;
                        }
                    }
                    else
                    {
                        select firstonly RecId from prodTab where prodTab.ProdId == jobRef;
                        if (prodTab)
                        {
                            jourRegType         = JmgJourRegTypeEnum::MrpQueueBefore;
                        }
                        else
                        {
                            select firstonly RecId from projTab where projTab.ProjId == jobRef;
                            if (projTab)
                            {
                                jourRegType         = JmgJourRegTypeEnum::PrjProject;
                            }
                        }
                    }
                }
            }
        }
        else if ((jourRegType == JmgJourRegTypeEnum::Absence) || (jourRegType ==JmgJourRegTypeEnum::BreakReg))
            limitType = true;

        return [(!(limitJourReg || limitJobRef || limitType)),(!limitJourReg),jourRegType,limitJobRef,jobRef,limitType];
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        if (! element.args().caller())
        {
            element.form().design().frame(FormFrame::Standard);
        }

        super();
        element.selectMode(hrmAbsenceCode_JmgJobId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        boolean             filterLookup    = false;
        HRMAbsenceCode      absenceCode;
        if (element.args().caller())
        {
            callerControl   = SysTableLookup::getCallerStringControl(element.args());
        }

        filterLookup = SysTableLookup::filterLookupPreRun(callerControl,hrmAbsenceCode_JmgJobId,hrmAbsenceCode_DS);

        this.setupRanges();

        super();

        if (callerControl)
        {
            SysTableLookup::filterLookupPostRun(filterLookup,callerControl.text(),hrmAbsenceCode_JmgJobId,hrmAbsenceCode_DS);
            if (!filterLookup)
            {
                absenceCode = HRMAbsenceCode::findByJobId(callerControl.text());

                if (absenceCode)
                {
                    hrmAbsenceCode_DS.positionToRecord(absenceCode);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupJmgParametersRanges</Name>
				<Source><![CDATA[
    private QueryBuildDataSource setupJmgParametersRanges(QueryBuildDataSource _qbdsHRMAbsenceCode)
    {
        QueryBuildDataSource qbdsHRMAbsenceCode = _qbdsHRMAbsenceCode;
        QueryBuildDataSource qbdsHRMAbsenceCodeGroup = qbdsHRMAbsenceCode.addDataSource(tableNum(HRMAbsenceCodeGroup));
        qbdsHRMAbsenceCodeGroup.relations(true);
        qbdsHRMAbsenceCodeGroup.joinMode(JoinMode::InnerJoin);
    
        switch (callerControl.dataFieldName())
        {
            case fieldStr(JmgParameters, AbsenceJobID):
                qbdsHRMAbsenceCodeGroup.addRange(fieldNum(HRMAbsenceCodeGroup, JmgAbsenceFlex)).value('0');
                break;
        }
    
        return qbdsHRMAbsenceCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupRanges</Name>
				<Source><![CDATA[
    void setupRanges()
    {
        QueryBuildDataSource    qbdsHRMAbsenceCode = hrmAbsenceCode_DS.query().dataSourceTable(tablenum(HRMAbsenceCode));

        tableId                 inTableId       = this.args().dataset();
        JmgStampTransMap        inTransMap;
        JmgIpcCategory          ipcCategory;
        JmgIpcActivity          ipcActivity;

        tableName               inTableName     = tableid2name(inTableId);
        TmpSysQuery             tmpquery;
        boolean                 limitTmpQuery   = false;
        boolean                 limitType       = false;
        boolean                 limitJobRef     = false;
        JmgJourRegTypeEnum      jourRegType;
        JmgJobRef               jobRef;
        JmgJobId                limitjobId;
        boolean                 showAll         = true;

        QueryBuildRange         wrkqbr;
        boolean                 showtabs        = true;

        qbdsHRMAbsenceCode.clearRanges();
        qbdsHRMAbsenceCode.clearDynalinks();

        switch (inTableId)
        {
            case tableNum(JmgParameters):
                qbdsHRMAbsenceCode = this.setupJmgParametersRanges(qbdsHRMAbsenceCode);
                break;

            case tablenum(JmgStampJournalTrans) :
            case tablenum(JmgStampTrans)        :
            case tablenum(JmgStampTransMap)     :
                inTransMap.data(this.args().record());
                showAll         = false;
                limitType       = true;
                jourRegType     = inTransMap.JourRegType;
                jobRef          = inTransMap.JobRef;
                limitJobRef     = (jobRef != '');
                break;
            case tablenum(JmgIpcCategory)   :
                ipcCategory.data(this.args().record());
                showAll         = false;
                limitType       = true;
                jourRegType     = (ipcCategory.Type == JmgStampTypeEnum::Absence) ? JmgJourRegTypeEnum::Absence     :
                                  (ipcCategory.Type == JmgStampTypeEnum::Break)   ? JmgJourRegTypeEnum::BreakReg    : JmgJourRegTypeEnum::IndActivity;
                jobRef          = ipcCategory.Category;
                limitJobRef     = true;
                break;
            case tablenum(JmgIpcActivity)   :
                ipcActivity.data(this.args().record());
                showAll         = false;
                limitType       = true;
                jourRegType     = (ipcActivity.Type == JmgStampTypeEnum::Absence) ? JmgJourRegTypeEnum::Absence     :
                                  (ipcActivity.Type == JmgStampTypeEnum::Break)   ? JmgJourRegTypeEnum::BreakReg    : JmgJourRegTypeEnum::IndActivity;
                jobRef          = ipcActivity.Category;
                limitJobRef     = true;
                break;
            case tablenum(TmpSysQuery)   :
                tmpquery.setTmpData(this.args().record());
                select firstonly tmpquery
                    where ((tmpquery.Table_Id == tablenum(JmgStampJournalTrans))    ||
                           (tmpquery.Table_Id == tablenum(JmgStampTrans))           ||
                           (tmpquery.Table_Id == tablenum(JmgIpcActivity))          ||
                           (tmpquery.Table_Id == tablenum(JmgIpcCategory))          ) &&
                          (tmpquery.RangeValue);
                if (tmpquery)
                    [showAll,limitTmpQuery,jourRegType,limitJobRef,jobRef,limitType] = element.analyzeTmpQuery(tmpquery);
                break;
        }

        if (showAll && (! inTableId) && element.args().parm())
        {
            jobRef          = element.args().parm();
            limitJobRef     = true;
            showAll         = false;
    //        element.selectMode(HRMAbsenceCode_hrmAbsenceCodeId);
        }

        if (!showAll)
        {
            switch (jourRegType)
            {
                case JmgJourRegTypeEnum::Absence        :
                    if (limitJobRef)
                    {
                        wrkqbr      = qbdsHRMAbsenceCode.addRange(fieldnum(HRMAbsenceCode, HrmAbsenceCodeGroupId));
                        wrkqbr.status(RangeStatus::Hidden);
                        wrkqbr.value(queryValue(jobRef));
                    }
                    break;
                default :
                    if (limitJobRef)
                    {
                        wrkqbr      = qbdsHRMAbsenceCode.addRange(fieldnum(HRMAbsenceCode, HrmAbsenceCodeGroupId));
                        wrkqbr.status(RangeStatus::Hidden);
                        wrkqbr.value(queryValue(jobRef));
                    }
            }
        }

        if (! limitjobId)
        {
            qbdsHRMAbsenceCode.addRange(fieldnum(HRMAbsenceCode,JmgJobId)).value(SysQuery::valueNotEmptyString());
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="" />
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>HRMAbsenceCode</Name>
			<Table>HRMAbsenceCode</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>backgroundColor</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>foreColor</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>hrmAbsenceCodeGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>hrmAbsenceCodeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JmgAbsenceLetterCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JmgAbsenceMethodEnum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JmgAbsencePayCType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JmgAbsencePayQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JmgColIndex</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JmgContinousAbsence</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>jmgIconId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JmgIncludeInReport</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JmgJobId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JmgSignIn</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>maxDaysPeriod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>maxDaysPeriodActive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>maxDaysPeriodCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>maxDaysPeriodQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>maxInSerie</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>maxInSerieActive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>maxInSeriePeriodCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>maxInSeriePeriodQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>maxInSerieWorkingdays</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>maxSeriesPeriod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>maxSeriesPeriodActive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>maxSeriesPeriodCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>maxSeriesPeriodQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>maxSeriesPeriodWorkingdays</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoNotify>No</AutoNotify>
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<BottomMargin xmlns="">0</BottomMargin>
		<BottomMarginMode xmlns="">Fixed</BottomMarginMode>
		<Frame xmlns="">Border</Frame>
		<HeightMode xmlns="">SizeToContent</HeightMode>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<LeftMargin xmlns="">0</LeftMargin>
		<LeftMarginMode xmlns="">Fixed</LeftMarginMode>
		<Pattern xmlns="">LookupGridOnly</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<RightMargin xmlns="">0</RightMargin>
		<RightMarginMode xmlns="">Fixed</RightMarginMode>
		<Style xmlns="">Lookup</Style>
		<TopMargin xmlns="">0</TopMargin>
		<TopMarginMode xmlns="">Fixed</TopMarginMode>
		<WidthMode xmlns="">SizeToAvailable</WidthMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>HRMAbsenceCodeGrid</Name>
				<AllowEdit>No</AllowEdit>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToContent</HeightMode>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>HRMAbsenceCode_hrmAbsenceCodeGroupId</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>hrmAbsenceCodeGroupId</DataField>
						<DataSource>HRMAbsenceCode</DataSource>
						<LabelAlignment>Right</LabelAlignment>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>HRMAbsenceCode_hrmAbsenceCodeId</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>hrmAbsenceCodeId</DataField>
						<DataSource>HRMAbsenceCode</DataSource>
						<LabelAlignment>Right</LabelAlignment>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>HRMAbsenceCode_description</Name>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>description</DataField>
						<DataSource>HRMAbsenceCode</DataSource>
						<LabelAlignment>Right</LabelAlignment>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>HRMAbsenceCode_JmgJobId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2013265918</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>JmgJobId</DataField>
						<DataSource>HRMAbsenceCode</DataSource>
						<LabelAlignment>Right</LabelAlignment>
					</AxFormControl>
				</Controls>
				<DataSource>HRMAbsenceCode</DataSource>
				<MultiSelect>No</MultiSelect>
				<ShowRowLabels>No</ShowRowLabels>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>