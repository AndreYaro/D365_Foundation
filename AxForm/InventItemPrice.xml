<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>InventItemPrice</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
using Microsoft.Dynamics.Platform.Integration.Office;

[Form]
public class InventItemPrice extends FormRun implements BOMCalcIRunnable, OfficeIGeneratedWorkbookCustomExporter
{
    const int SimulatedPrices   = 1;
    const int ActivePrices      = 2;

    InventDimParm       validDimParm;
    InventDimCtrl_Frm   inventDimFormSetup;
    BOMDesignerBOMCalc  bomDesignerBOMCalc;
    boolean             isBOM;

    [FormObservableAttribute]
    boolean             isCalledFromVersion;

    boolean isCalcInvoked;

    QueryBuildDataSource  queryBuildDataSourceActive;
    QueryBuildDataSource  queryBuildDataSourceCurrentActive;

    FieldName           excelFilterField;
    anytype             excelFilterValue;

}
]]></Source>
			</Method>
			<Method>
				<Name>customizeMenuOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Customizes the options used to populate the Office Menu.
    /// </summary>
    /// <param name = "_menuOptions">The menu options to be customized.</param>
    public void customizeMenuOptions(OfficeMenuOptions _menuOptions)
    {
        List customMenuItems = _menuOptions.customMenuItems();

        if (excelFilterValue)
        {
            SecurityRights securityRights = SecurityRights::construct();

            if (securityRights.hasDataServiceAccess(tableStr(InventItemPendingPriceEntity), StatementType::Select))
            {
                OfficeGeneratedExportMenuItem exportPending = OfficeGeneratedExportMenuItem::construct(tableStr(InventItemPendingPriceEntity), tableStr(InventItemPendingPriceEntity));
                exportPending.displayName("@SYS108619");
                customMenuItems.addEnd(exportPending);
            }

            if (securityRights.hasDataServiceAccess(tableStr(InventItemPriceEntity), StatementType::Select))
            {
                OfficeGeneratedExportMenuItem exportActive = OfficeGeneratedExportMenuItem::construct(tableStr(InventItemPriceEntity), tableStr(InventItemPriceEntity));
                exportActive.displayName(strFmt("@SCM:ViewInExcel", "@SCM:DataEntityItemPrices"));

                customMenuItems.addEnd(exportActive);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityFieldIdForMappedDatasourceField</Name>
				<Source><![CDATA[
    private FieldId getEntityFieldIdForMappedDatasourceField(
                        TableId _dataEntityId,
                        TableId _datasourceId,
                        FieldId _datasourceFieldId)
    {
        DictDataEntity dictDataEntity = new DictDataEntity(_dataEntityId);

        int fieldCount = 1;

        while (fieldCount <= dictDataEntity.fieldCnt())
        {
            DictDataEntityField dataEntityField = new DictDataEntityField(dictDataEntity.id(), dictDataEntity.fieldCnt2Id(fieldCount));

            if (dataEntityField
                && !dataEntityField.isSystem())
            {
                TableId mappedTableId = tableName2Id(dataEntityField.dataSource());

                if (mappedTableId == _datasourceId && dataEntityField.dataField())
                {
                    FieldId mappedFieldId = fieldName2Id(mappedTableId, dataEntityField.dataField());

                    if (mappedFieldId
                        && mappedFieldid == _datasourceFieldId)
                    {
                        return dataEntityField.id();
                    }
                }
            }

            fieldCount++;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFilterExpression</Name>
				<Source><![CDATA[
    private FilterNode buildFilterExpression(
                        FormDataSource              _dataSource,
                        TableId                     _dataEntityId,
                        TableId                     _dataEntityDataSourceTableId,
                        ExportToExcelFilterTreeBuilder  _filterBuilder)
    {
        QueryBuildDataSource qbds = _dataSource.query().dataSourceNo(1);
        FilterNode filterExpression;

        for (int rangeIndex = 1; rangeIndex <= qbds.rangeCount(); rangeIndex++)
        {
            QueryBuildRange qbr = qbds.range(rangeIndex);

            if (qbr.value())
            {
                TableId rangeTable = qbr.dataSource().table();
                if (rangeTable == _dataSource.table())
                {
                    int entityFieldId = this.getEntityFieldIdForMappedDatasourceField(_dataEntityId, _dataEntityDataSourceTableId, fieldName2Id(_dataEntityDataSourceTableId, qbr.fieldName()));

                    if (entityFieldId)
                    {
                        if (!filterExpression)
                        {
                            filterExpression = _filterBuilder.areEqual(fieldId2Name(_dataEntityId, entityFieldId), qbr.value());
                        }
                        else
                        {
                            filterExpression = _filterBuilder.and(filterExpression, _filterBuilder.areEqual(fieldId2Name(_dataEntityId, entityFieldId), qbr.value()));
                        }
                    }
                }
            }
        }

        return filterExpression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataEntityContext</Name>
				<Source><![CDATA[
    public ExportToExcelDataEntityContext getDataEntityContext(OfficeGeneratedExportMenuItem _menuItem)
    {
        ExportToExcelDataEntityContext context = null;

        TableId         dataEntityId,
                        dataEntityDataSourceTableId;

        switch (_menuItem.id())
        {
            case tableStr(InventItemPendingPriceEntity):
                dataEntityId = tableNum(InventItemPendingPriceEntity);
                dataEntityDataSourceTableId = tableNum(InventItemPriceSim);
                break;

            case tableStr(InventItemPriceEntity):
                dataEntityId = tableNum(InventItemPriceEntity);
                dataEntityDataSourceTableId = tableNum(InventItemPrices);
                break;
        }

        var dataEntityName = tableId2Name(dataEntityId);

        context = ExportToExcelDataEntityContext::construct(dataEntityName, identifierStr(ExportToExcel));

        ListEnumerator enumerator = context.entities().getEnumerator();
        while (enumerator.moveNext())
        {
            ExportToExcelDataEntityInfo entity = enumerator.current();

            if (entity.entityName() == dataEntityName)
            {
                ExportToExcelFilterTreeBuilder filterBuilder = new ExportToExcelFilterTreeBuilder(dataEntityName);
                FilterNode filterExpression = filterBuilder.areEqual(fieldStr(common, dataAreaId), curExt());
                FilterNode tempFilter;

                if (excelFilterValue)
                {
                    filterExpression = filterBuilder.and(filterExpression, filterBuilder.areEqual(fieldId2Name(dataEntityId, this.getEntityFieldIdForMappedDatasourceField(dataEntityId, dataEntityDataSourceTableId, fieldName2Id(dataEntityDataSourceTableId, excelFilterField))), excelFilterValue));
                }

                switch (_menuItem.id())
                {
                    case tableStr(InventItemPendingPriceEntity):
                        tempFilter = this.buildFilterExpression(ItemPriceSimulated_DS, dataEntityId, dataEntityDataSourceTableId, filterBuilder);
                        if (tempFilter != null)
                        {
                            filterExpression = filterBuilder.and(filterExpression, tempFilter);
                        }
                        break;

                    case tableStr(InventItemPriceEntity):
                        tempFilter = this.buildFilterExpression(ItemPriceSimulated_DS, dataEntityId, dataEntityDataSourceTableId, filterBuilder);
                        if (tempFilter != null)
                        {
                            filterExpression = filterBuilder.and(filterExpression, tempFilter);
                        }
                        tempFilter = this.buildFilterExpression(ItemPriceActivated_DS, dataEntityId, dataEntityDataSourceTableId, filterBuilder);
                        if (tempFilter != null)
                        {
                            filterExpression = filterBuilder.and(filterExpression, tempFilter);
                        }
                        break;
                }

                entity.filter(filterExpression);
            }
        }

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentBOMId</Name>
				<Source><![CDATA[
    BOMId parentBOMId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentRouteId</Name>
				<Source><![CDATA[
    RouteId parentRouteId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLine</Name>
				<Source><![CDATA[
    SalesLine salesLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQuotationLine</Name>
				<Source><![CDATA[
    SalesQuotationLine salesQuotationLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serviceOrderLine</Name>
				<Source><![CDATA[
    SMAServiceOrderLine serviceOrderLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowModify</Name>
				<Source><![CDATA[
    boolean allowModify(CostingVersionId _costingVersionId)
    {
        boolean modify = true;

        if (CostingVersion::blocked(_costingVersionId, CostingVersionStatus::Pending))
        {
            modify = false;
        }

        if (modify &&
            CostingVersion::find(_costingVersionId).CostingType == CostingVersionCostingType::Conversion)
        {
            if (element.args().dataset() != tableNum(InventStdCostConvItem) &&
                element.args().dataset() != tableNum(CostingVersion))
            {
                modify = false;
            }
            else
            {
                if (InventStdCostConv::findCostingVersion(_costingVersionId).Status != InventStdCostConvStatus::Planned)
                {
                    modify = false;
                }
            }
        }

        return modify;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomDesignerBOMCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a handle to the BOM designer if calculation is called from it.
    /// </summary>
    /// <returns>
    /// A BOMDesignerBOMCalc object.
    /// </returns>
    BOMDesignerBOMCalc bomDesignerBOMCalc()
    {
        return bomDesignerBOMCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costingVersion</Name>
				<Source><![CDATA[
    CostingVersion costingVersion()
    {
        CostingVersion          costingVersion;
        InventStdCostConvItem   inventStdCostConvItem;

        switch (element.args().dataset())
        {
            case tableNum(CostingVersion):
                costingVersion = element.args().record();
                break;

            case tableNum(InventStdCostConvItem):
                inventStdCostConvItem = element.args().record();
                costingVersion = CostingVersion::find(inventStdCostConvItem.inventStdCostConv().CostingVersionId);
                break;
        }
        return costingVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtons</Name>
				<Source><![CDATA[
    void enableButtons()
    {
        #SysSystemDefinedButtons

        FormCommandButtonControl newButton;
        FormCommandButtonControl deleteButton;

        boolean isStandardPriceKept = itemPriceActivated.isStdCostPrice() && (itemPriceActivated.StdCostVoucher != '');

        newButton = this.control(this.controlId(#SystemDefinedNewButton)) as FormCommandButtonControl;
        deleteButton = this.control(this.controlId(#SystemDefinedDeleteButton)) as FormCommandButtonControl;

        if (overviewSimulatedPrices.isActivePage())
        {
            inventPriceItemActivation.enabled(itemPriceSimulated.allowActivation(false));
            inventItemCostGroupRollup.enabled(itemPriceSimulated.isStdCostPrice());
            standardCost.enabled(false);
            bomCalc.enabled(true);
            newButton.enabled(true);
            deleteButton.enabled(true);
            this.design().viewEditMode(ViewEditMode::Auto);
        }
        else
        {
            inventPriceItemActivation.enabled(false);
            inventItemCostGroupRollup.enabled(itemPriceActivated.isStdCostPrice());
            standardCost.enabled(itemPriceActivated.isStdCostPrice());
            inventSettlementRecord.enabled(isStandardPriceKept);
            ledgerTransVoucher.enabled(isStandardPriceKept);
            bomCalc.enabled(false);
            newButton.enabled(false);
            deleteButton.enabled(false);
            this.design().viewEditMode(ViewEditMode::View);
        }

        element.setBOMEnable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableInventDimSimFields</Name>
				<Source><![CDATA[
    void enableInventDimSimFields()
    {
        InventTable                             inventTable;
        InventDimGroupFieldSetupEnumerator      enumerator;
        InventDimGroupFieldSetup                inventDimGroupFieldSetup;
        FieldId                                 inventDimFieldId;

        inventTable = InventTable::find(element.parentItemId());
        if (!inventTable)
        {
            return;
        }

        enumerator = InventDimGroupSetup::newInventTable(inventTable).getFieldSetupEnumerator();
        while (enumerator.moveNext())
        {
            inventDimGroupFieldSetup = enumerator.current();
            inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();

            if (inventDimGroupFieldSetup.isProductDimension())
            {
                inventDimSim_ds.object(inventDimFieldId).allowEdit(inventTable.ItemDimCostPrice && element.args().dataset() != tableNum(InventDimCombination));
            }
            else
            {
                if (inventDimFieldId == fieldNum(InventDim, InventSiteId))
                {
                    inventDimSim_ds.object(inventDimFieldId).allowEdit(CostingVersion::find(itemPriceSimulated.VersionId).InventSiteId ? false : true);
                }
                else
                {
                    inventDimSim_ds.object(inventDimFieldId).allowEdit(false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPlanningItemId</Name>
				<Source><![CDATA[
    public ItemId findPlanningItemId(ItemId _coProductItemId)
    {
        InventTable inventTable = PmfFormulaCoByHelper::findFormulaPlanningItem(_coProductItemId);
        ItemId      itemId;

        if (inventTable.PmfProductType == PmfProductType::MainItem)
        {
            itemId = inventTable.ItemId;
        }

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveDataSource</Name>
				<Source><![CDATA[
    InventItemPriceMap getActiveDataSource()
    {
        InventItemPriceMap  inventItemPriceMap;

        if (overviewSimulatedPrices.isActivePage())
        {
            inventItemPriceMap = itemPriceSimulated;
        }
        else
        {
            inventItemPriceMap = itemPriceActivated;
        }
        return inventItemPriceMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        if (! element.args().dataset() && classIdGet(element.args().caller()) != classNum(BOMDesignerBOMCalc))
        {
            throw error(Error::missingFormActiveBuffer(element.name()));
        }

        if(!this.InitializeFromCallerDataset())
        {
            throw error(Error::missingRecord(funcName()));
        }
        
        element.updateDesign(InventDimFormDesignUpdate::Init);
        element.enableButtons();
        element.setQueryJoinMode();
        validDimParm.setAllProductDimensions();
        validDimParm.InventSiteIdFlag = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InitializeFromCallerDataset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes form from caller dataset.
    /// </summary>
    /// <returns>true if form is initialized; otherwise, false.</returns>
    protected boolean InitializeFromCallerDataset()
    {
        QueryBuildRange qbr;
        InventStdCostConvItem   inventStdCostConvItem;
        boolean isInitialized = false;
        switch (element.args().dataset())
        {
            case tableNum(InventTable),
                tableNum(PmfFormulaCoBy),
                tableNum(InventDimCombination) :
                Tab.tab(ActivePrices);

                inventItemPriceSim_ItemId.visible(false);
                itemPriceSimulated_DS.object(fieldNum(InventItemPriceSim, ItemId)).allowEdit(false);

                inventItemPrice_ItemId.visible(false);
                itemPriceActivated_DS.object(fieldNum(InventItemPrice, ItemId)).allowEdit(false);
                isCalledFromVersion = false;

                QuickFilterActivated.parmDefaultColumnControl(InventItemPrice_PriceType.name());
                QuickFilterSimulated.parmDefaultColumnControl(InventItemPriceSim_PriceType.name());

                excelFilterField = fieldStr(InventItemPriceSim, ItemId);
                excelFilterValue = element.args().record().getFieldValue(fieldStr(InventTable, ItemId));
                isInitialized = true;
                break;

            case tableNum(InventItemPendingPriceStaging) :
                InventItemPendingPriceStaging stagingRecord = element.args().record();
                CostingVersion costingversion = CostingVersion::find(stagingRecord.CostingVersionId);
                element.args().record(costingversion);

                qbr = SysQuery::findOrCreateRange(itemPriceSimulated_ds.query().dataSourceTable(tableNum(InventItemPriceSim)), fieldNum(InventItemPriceSim, ItemId));
                qbr.value(queryValue(stagingRecord.ItemNumber));
                qbr.status(RangeStatus::Hidden);

                qbr = SysQuery::findOrCreateRange(itemPriceActivated_ds.query().dataSourceTable(tableNum(InventItemPrice)), fieldNum(InventItemPrice, ItemId));
                qbr.value(queryValue(stagingRecord.ItemNumber));
                qbr.status(RangeStatus::Hidden);
            // fall through to costing version below

            case tableNum(CostingVersion) :
                costingType.visible(true);
                costingTypeActiveGrid.visible(false);
                costingTypeSimulatedGrid.visible(false);
                inventItemPriceSim_VersionId.visible(false);
                itemPriceSimulated_DS.index(indexNum(InventItemPriceSim, ItemIdx));
                itemPriceSimulated_DS.object(fieldNum(InventItemPriceSim, VersionId)).allowEdit(false);

                inventItemPrice_VersionId.visible(false);
                itemPriceActivated_DS.index(indexNum(InventItemPrice, ItemIdx));    // The sort order is set directly by the index.
                itemPriceActivated_DS.object(fieldNum(InventItemPrice, VersionId)).allowEdit(false);
                isCalledFromVersion = true;

                excelFilterField = fieldStr(InventItemPriceSim, VersionId);
                excelFilterValue = element.args().record().getFieldValue(fieldStr(CostingVersion, VersionId));
                isInitialized = true;
                break;

            case tableNum(InventStdCostConvItem):
                inventItemPriceSim_VersionId.visible(false);
                itemPriceSimulated_DS.object(fieldNum(InventItemPriceSim, VersionId)).allowEdit(false);
                itemPriceSimulated_DS.object(fieldNum(InventItemPriceSim, ItemId)).allowEdit(false);

                inventItemPrice_VersionId.visible(false);
                itemPriceActivated_DS.index(indexNum(InventItemPrice, ItemIdx));    // The sort order is set directly by the index.
                itemPriceActivated_DS.object(fieldNum(InventItemPrice, VersionId)).allowEdit(false);
                itemPriceActivated_DS.object(fieldNum(InventItemPrice, ItemId)).allowEdit(false);

                inventStdCostConvItem = element.args().record();
                qbr = itemPriceSimulated_DS.query().dataSourceName(itemPriceSimulated_DS.name()).addRange(fieldNum(InventItemPriceSim, VersionId));
                qbr.value(queryValue(inventStdCostConvItem.inventStdCostConv().CostingVersionId));
                qbr.status(RangeStatus::Locked);

                qbr = itemPriceActivated_DS.query().dataSourceName(itemPriceActivated_DS.name()).addRange(fieldNum(InventItemPrice, VersionId));
                qbr.value(queryValue(inventStdCostConvItem.inventStdCostConv().CostingVersionId));
                qbr.status(RangeStatus::Locked);

                qbr = itemPriceCurrentActive_DS.query().dataSourceName(itemPriceCurrentActive_DS.name()).addRange(fieldNum(InventItemPriceCurrentActive, VersionId));
                qbr.value(queryValue(inventStdCostConvItem.inventStdCostConv().CostingVersionId));
                qbr.status(RangeStatus::Locked);
                isCalledFromVersion = false;
                isInitialized = true;
                break;

            default :
                bomDesignerBOMCalc = element.args().caller() as BOMDesignerBOMCalc;

                if (bomDesignerBOMCalc)
                {
                    qbr = SysQuery::findOrCreateRange(itemPriceSimulated_ds.query().dataSourceTable(tableNum(InventItemPriceSim)), fieldNum(InventItemPriceSim, ItemId));
                    qbr.value(queryValue(bomDesignerBOMCalc.parmItemId()));

                    inventItemPriceSim_ItemId.visible(false);
                    itemPriceSimulated_DS.object(fieldNum(InventItemPriceSim, ItemId)).allowEdit(false);

                    inventItemPrice_ItemId.visible(false);
                    itemPriceActivated_DS.object(fieldNum(InventItemPrice, ItemId)).allowEdit(false);
                    isCalledFromVersion = false;

                    QuickFilterActivated.parmDefaultColumnControl(InventItemPrice_PriceType.name());
                    QuickFilterSimulated.parmDefaultColumnControl(InventItemPriceSim_PriceType.name());

                    excelFilterField = fieldStr(InventItemPriceSim, ItemId);
                    excelFilterValue = bomDesignerBOMCalc.parmItemId();
                    isInitialized = true;
                }
                
        }

        return isInitialized;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimCombinationQuery</Name>
				<Source><![CDATA[
    public str inventDimCombinationQuery(boolean _simulatedPrice)
    {
        InventDim                   inventDim;
        InventTable                 inventTable;
        InventDimCombination        inventDimCombination;
        QueryBuildDataSource        qbdsInventItemPriceMap;
        QueryBuildDataSource        qbdsInventItemPriceMapExistsJoin;
        QueryBuildRange             queryBuildRange;
        Query                       inventDimQuery;
        QueryBuildDataSource        qbdsInventDim;
        QueryRun                    queryRunInventDim;
        str                         rangeStr;

        InventDimGroupFieldSetupEnumerator      enumerator;
        InventDimGroupFieldSetup                inventDimGroupFieldSetup;
        FieldId                                 inventDimFieldId;

        if (element.args().dataset() != tableNum(InventDimCombination))
        {
            return SysQuery::valueEmptyString();
        }

        inventDimCombination = element.args().record();
        inventTable = InventTable::find(inventDimCombination.ItemId);
        inventDim = InventDim::find(inventDimCombination.InventDimId);

        qbdsInventItemPriceMap = _simulatedPrice ? itemPriceSimulated_ds.query().dataSourceTable(tableNum(InventItemPriceSim)) :
                                                itemPriceActivated_ds.query().dataSourceTable(tableNum(InventItemPrice));
        // Remove the dynalink by InventDimId
        qbdsInventItemPriceMap.clearDynalinks();
        qbdsInventItemPriceMap.addDynalink(_simulatedPrice ? fieldNum(InventItemPriceSim, ItemId) : fieldNum(InventItemPrice, ItemId),
                                    inventDimCombination,
                                    fieldNum(InventDimCombination, ItemId));

        // Create a query, fetching InventDim records, whose InventDimIds are used in InventItemPriceSim/InventItemPrice for this item (if any)
        inventDimQuery = new Query();
        qbdsInventDim = inventDimQuery.addDataSource(tableNum(InventDim));
        qbdsInventItemPriceMapExistsJoin = qbdsInventDim.addDataSource(_simulatedPrice ? tableNum(InventItemPriceSim) : tableNum(InventItemPrice));
        qbdsInventItemPriceMapExistsJoin.joinMode(JoinMode::ExistsJoin);
        qbdsInventItemPriceMapExistsJoin.addLink(fieldNum(InventDim, InventDimId), _simulatedPrice ? fieldNum(InventItemPriceSim, InventDimId) : fieldNum(InventItemPrice, InventDimId));
        qbdsInventItemPriceMapExistsJoin.addRange(_simulatedPrice ? fieldNum(InventItemPriceSim, ItemId) : fieldNum(InventItemPrice, ItemId)).value(inventTable.ItemId);

        // Add ranges for each of the active product dimensions
        enumerator = EcoResProductDimGroupSetup::newInventTable(inventTable).getFieldSetupEnumerator();
        while (enumerator.moveNext())
        {
            inventDimGroupFieldSetup = enumerator.current();
            inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();
            if (inventDimGroupFieldSetup.isActive() && inventDimGroupFieldSetup.isProductDimension())
            {
                inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();
                queryBuildRange = qbdsInventDim.addRange(inventDimFieldId);
                if (inventDim.(inventDimFieldId))
                {
                    queryBuildRange.value(inventDim.(inventDimFieldId));
                }
                else
                {
                    queryBuildRange.value(SysQuery::valueEmptyString());
                }
            }
        }

        // Run the query and compose a string of found InventDimIds
        rangeStr = '';
        queryRunInventDim = new QueryRun(inventDimQuery);
        while (queryRunInventDim.next())
        {
            inventDim = queryRunInventDim.get(tableNum(InventDim));
            rangeStr += strFmt("%1,", inventDim.InventDimId);
        }

        return rangeStr ? rangeStr : SysQuery::valueEmptyString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFinancialState</Name>
				<Source><![CDATA[
    public boolean isFinancialState()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentInventParameters</Name>
				<Source><![CDATA[
    public InventDimParm currentInventParameters()
    {
        return validDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimSetupObject</Name>
				<Source><![CDATA[
    Object inventDimSetupObject()
    {
        return inventDimFormSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentInventDimId</Name>
				<Source><![CDATA[
    InventDimId parentInventDimId()
    {
        InventDimId             inventDimId;

        if (element.args().dataset() == tableNum(InventDimCombination))
        {
            InventDimCombination inventDimCombination = element.args().record();
            inventDimId = inventDimCombination.InventDimId;
        }
        else
        {
            inventDimId = InventTable::getInventDimId(this.parentItemId());
        }

        // add a default inventory site
        if (this.parentItemId())
        {
            InventDim inventDim = InventDim::find(inventDimId);

            if (!inventDim.InventSiteId)
            {
                InventTable inventTable = InventTable::find(this.parentItemId());

                if (inventTable.inventInventSiteId())
                {
                    inventDim.InventSiteId  = inventTable.inventInventSiteId();

                    inventDimId             = InventDim::findOrCreate(inventDim).InventDimId;
                }
            }
        }

        return inventDimId ? inventDimId : InventDim::inventDimIdBlank();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentItemId</Name>
				<Source><![CDATA[
    ItemId parentItemId()
    {
        InventTable     inventTable;
        ItemId          itemId;
        PmfFormulaCoBy  pmfFormulaCoBy;
        boolean         isCoProduct;

        switch (element.args().dataset())
        {
            case tableNum(InventTable):
                inventTable = element.args().record();
                itemId = inventTable.ItemId;

                isCoProduct = inventTable.PmfProductType == PmfProductType::Co_Product;
                break;
            case tableNum(InventItemPrice):
                InventItemPrice inventItemPrice = element.args().record();
                inventTable = InventTable::find(inventItemPrice.ItemId);
                break;

            case tableNum(InventDimCombination):
                InventDimCombination inventDimCombination = element.args().record();
                itemId = inventDimCombination.ItemId;

                isCoProduct = InventTable::find(itemId).PmfProductType == PmfProductType::Co_Product;
                break;

            case tableNum(PmfFormulaCoBy):
                pmfFormulaCoBy = element.args().record();

                itemId = pmfFormulaCoBy.ItemId;
                isCoProduct = InventTable::find(itemId).PmfProductType == PmfProductType::Co_Product;
                break;
            default:
                itemId = this.getActiveDataSource().ItemId;

                isCoProduct = InventTable::find(itemId).PmfProductType == PmfProductType::Co_Product;
                break;
        }

        if (isCalcInvoked
            && isCoProduct)
        {
            ItemId planningItemId = element.findPlanningItemId(itemId);
            if (planningItemId)
            {
                itemId = planningItemId;
            }
        }

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCostingVersion</Name>
				<Source><![CDATA[
    void refreshCostingVersion()
    {
        Object callerForm = element.args().caller();
        CostingVersionIRefreshable refreshableForm = callerForm as CostingVersionIRefreshable;

        if (refreshableForm)
        {
            refreshableForm.refreshCostingVersion();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshInventTableModule</Name>
				<Source><![CDATA[
    void refreshInventTableModule()
    {
        Object callerForm = element.args().caller();
        InventTableModuleIRefreshable refreshableForm = callerForm as InventTableModuleIRefreshable;

        if (refreshableForm)
        {
            refreshableForm.refreshInventTableModule();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        element.enableInventDimSimFields();

        if (bomDesignerBOMCalc && itemPriceSimulated_DS.allowCreate() && new DictTable(tableNum(InventItemPriceSim)).rights() >= AccessType::Add)
        {
            bomCalc.clicked();
        }

        if (overviewActivatedPrices.isActivePage() && itemPriceActivated_ds.numberOfRowsLoaded() == 0)
        {
            Tab.tab(SimulatedPrices);
            element.enableButtons();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBOMEnable</Name>
				<Source><![CDATA[
    void setBOMEnable()
    {
        InventTable     parentInventTable   = InventTable::find(this.parentItemId());
        PriceCalcId     priceCalcId         = this.getActiveDataSource().PriceCalcId;
        boolean         hasCalculatedPrice;

        if (priceCalcId)
        {
            hasCalculatedPrice = true;
        }

        calculationTransact.enabled(hasCalculatedPrice);
        bomCalcTransPrint.enabled(hasCalculatedPrice);

        isBOM =  parentInventTable.isBOMAllowed();

        if (hasCalculatedPrice)
        {
            warningsLog.enabled(BOMCalcTable::find(this.getActiveDataSource().PriceCalcId).isInfolog());
        }
        else
        {
            warningsLog.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFromDate</Name>
				<Source><![CDATA[
    void setFromDate()
    {
        if (itemPriceSimulated.VersionId)
        {
            itemPriceSimulated_ds.object(fieldnum(InventItemPriceSim, FromDate)).allowEdit(CostingVersion::find(itemPriceSimulated.VersionId).DefaultDate ? false : true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceAllocateMarkup</Name>
				<Source><![CDATA[
    void setPriceAllocateMarkup()
    {
        CostingVersion costingVersion;

        if (itemPriceSimulated.VersionId)
        {
            costingVersion = CostingVersion::find(itemPriceSimulated.VersionId);

            if (costingVersion.CostingType == CostingVersionCostingType::Standard
            || costingVersion.CostingType == CostingVersionCostingType::Conversion)
            {
                itemPriceSimulated_ds.object(fieldnum(InventItemPriceSim, PriceAllocateMarkup)).allowEdit(false);
            }
            else
            {
                itemPriceSimulated_ds.object(fieldnum(InventItemPriceSim, PriceAllocateMarkup)).allowEdit(!(costingVersion.RecordRestrict && costingVersion.PriceAllocateMarkup));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryJoinMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the join mode for the current active price datasource.
    /// </summary>
    public void setQueryJoinMode()
    {
        var queryBuildDataSourceCurrentActiveLocal = ItemPriceCurrentActive_QR ?
                                                            ItemPriceCurrentActive_QR.query().datasourcename(ItemPriceCurrentActive_DS.name()) :
                                                            ItemPriceCurrentActive_Q.datasourcename(ItemPriceCurrentActive_DS.name());

        switch (filterActivePrice.value())
        {
            case NoYes::Yes:
                queryBuildDataSourceCurrentActiveLocal.enabled(true);
                queryBuildDataSourceCurrentActiveLocal.joinMode(JoinMode::ExistsJoin);
                break;

            default:
                queryBuildDataSourceCurrentActiveLocal.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSiteId</Name>
				<Source><![CDATA[
    void setSiteId()
    {
        if (itemPriceSimulated.VersionId)
        {
            inventDimSim.InventSiteId = CostingVersion::find(itemPriceSimulated.VersionId).InventSiteId;
            inventDimSim_ds.object(fieldNum(InventDim, InventSiteId)).allowEdit(inventDimSim.InventSiteId ? false : true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParmEnabled</Name>
				<Source><![CDATA[
    protected InventDimParm initInventDimParmEnabled(ItemId _itemId)
    {
        InventDimParm inventDimParmEnabled;
        inventDimParmEnabled.setActiveSiteAndProductDimensions(InventDimGroupSetup::newItemId(_itemId));
        return inventDimParmEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParmVisible</Name>
				<Source><![CDATA[
    protected InventDimParm initInventDimParmVisible(ItemId _itemId)
    {
        InventDimParm inventDimParmVisible;
        inventDimParmVisible.setActiveSiteAndProductDimensions(InventDimGroupSetup::newItemId(_itemId));
        return inventDimParmVisible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    void updateDesign(InventDimFormDesignUpdate _mode)
    {
        InventDimParm   inventDimParmVisible;
        InventDimParm   inventDimParmEnabled;

        switch (_mode)
        {
            case InventDimFormDesignUpdate::Init          :
            case InventDimFormDesignUpdate::LinkActive    :
                if (!inventDimFormSetup)
                {
                    inventDimFormSetup  = InventDimCtrl::newFromForm(element);
                }
                inventDimFormSetup.parmSkipOnHandLookUp(true);
                inventDimParmVisible = this.initInventDimParmVisible(itemPriceSimulated.ItemId);
                inventDimFormSetup.parmDimParmVisibleGrid(inventDimParmVisible);

            // do continue
            case InventDimFormDesignUpdate::Active        :
                inventDimFormSetup.formActiveSetup();
                inventDimParmEnabled = this.initInventDimParmEnabled(itemPriceSimulated.ItemId);
                inventDimFormSetup.parmDimParmEnabled(inventDimParmEnabled);
                inventDimFormSetup.formSetControls(true);
                break;

            case InventDimFormDesignUpdate::FieldChange   :
                inventDimFormSetup.formActiveSetup();
                inventDimParmEnabled = this.initInventDimParmEnabled(itemPriceSimulated.ItemId);
                inventDimFormSetup.parmDimParmEnabled(inventDimParmEnabled);
                inventDimFormSetup.formSetControls(false);
                break;

            default :
                throw error(strFmt("@SYS54195", funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>costingVersionCostingType</Name>
				<Source><![CDATA[
    display CostingVersionCostingType costingVersionCostingType()
    {
        CostingVersion costingVersion = element.args().record();
        return costingVersion.CostingType;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>ItemPriceSimulated</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            itemPriceSimulated.InventDimId = InventDim::findOrCreate(inventDimSim).InventDimId;

            boolean ret = super();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            super();

            if (itemPriceSimulated.isFieldSet(fieldNum(InventItemPriceSim, VersionId)))
            {
                itemPriceSimulated.defaultRow();
            }

            itemPriceSimulated.UnitID = itemPriceSimulated.displayUnitId();
            itemPriceSimulated.PriceUnit = 1;

            element.setFromDate();
            element.setPriceAllocateMarkup();

            if (element.args().dataset() == tableNum(InventDimCombination))
            {
                InventDimCombination inventDimCombination = element.args().record();
                if (InventTable::find(inventDimCombination.ItemId).ItemDimCostPrice)
                {
                    inventDimSim.data(InventDim::find(inventDimCombination.InventDimId));
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            super();
            element.enableButtons();
            element.refreshCostingVersion();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
            this.cacheAddMethod(tableMethodStr(InventItemPriceSim, displayBOMLog));
            this.cacheAddMethod(tableMethodStr(InventItemPriceSim, displayUnitId));
            this.cacheAddMethod(tableMethodStr(InventItemPriceSim, displayItemName));
            this.cacheAddMethod(tableMethodStr(InventItemPriceSim, displayVersionName));
            this.cacheAddMethod(tableMethodStr(InventItemPriceSim, blocked));
            this.cacheAddMethod(tableMethodStr(InventItemPriceSim, displayBOMId));
            this.cacheAddMethod(tableMethodStr(InventItemPriceSim, displayRouteId));
            this.cacheAddMethod(tableMethodStr(InventItemPriceSim, displayProfitSet));

            if (element.args().dataset() != tableNum(CostingVersion))
            {
                this.query().dataSourceName(this.name()).addSortField(fieldNum(InventItemPriceSim, FromDate), SortOrder::Descending);
            }

            if (element.args().dataset() == tableNum(InventDimCombination))
            {
                this.query().dataSourceName(this.name()).addRange(fieldNum(InventItemPriceSim, InventDimId)).value(element.inventDimCombinationQuery(true));
            }

            if (element.args().dataset() == tableNum(PmfFormulaCoBy))
            {
                this.query().dataSourceName(this.name()).addRange(fieldNum(InventItemPriceSim, ItemId)).value(element.parentItemId());
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            itemPriceSimulated.InventDimId = InventDim::findOrCreate(inventDimSim).InventDimId;
            super();
            element.refreshCostingVersion();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            element.updateDesign(InventDimFormDesignUpdate::Active);

            itemPriceSimulated_DS.allowEdit(element.allowModify(itemPriceSimulated.VersionId) && itemPriceSimulated.PriceCalcId == '');
            itemPriceSimulated_DS.allowDelete(element.allowModify(itemPriceSimulated.VersionId));

            element.enableInventDimSimFields();
            element.enableButtons();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        public void linkActive()
        {
            CostingVersion          costingVersion;
            InventStdCostConvItem   inventStdCostConvItem;
            QueryBuildRange         queryBuildRange;

            if (element.args().dataset() == tableNum(CostingVersion))
            {
                costingVersion = element.args().record();
                itemPriceSimulated_DS.allowCreate(element.allowModify(costingVersion.VersionId));
            }
            if (element.args().dataset() == tableNum(InventStdCostConvItem))
            {
                inventStdCostConvItem = element.args().record();
                itemPriceSimulated_DS.allowCreate(element.allowModify(inventStdCostConvItem.inventStdCostConv().CostingVersionId));
            }

            super();

            element.updateDesign(InventDimFormDesignUpdate::LinkActive);

            if (element.args().dataset() == tableNum(InventDimCombination))
            {
                queryBuildRange = SysQuery::findOrCreateRange(itemPriceSimulated_ds.query().dataSourceTable(tableNum(InventItemPriceSim)),
                                                              fieldNum(InventItemPriceSim, InventDimId));
                queryBuildRange.value(element.inventDimCombinationQuery(true));
                itemPriceSimulated_ds.executeQuery();

                queryBuildRange = SysQuery::findOrCreateRange(itemPriceActivated_ds.query().dataSourceTable(tableNum(InventItemPrice)),
                                                              fieldNum(InventItemPrice, InventDimId));
                queryBuildRange.value(element.inventDimCombinationQuery(false));
                itemPriceActivated_ds.executeQuery();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayName</Name>
						<Source><![CDATA[
        public display Name displayName(InventItemPriceSim _buffer)
        {
            if (isCalledFromVersion)
            {
                return _buffer.displayItemName();
            }
            else
            {
                return _buffer.displayVersionName();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayCostingType</Name>
						<Source><![CDATA[
        public display CostingVersionCostingType displayCostingType(InventItemPriceSim _buffer)
        {
            return _buffer.costingVersion().CostingType;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>ItemId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.updateDesign(InventDimFormDesignUpdate::FieldChange);
                itemPriceSimulated.UnitID = itemPriceSimulated.displayUnitId();

                element.enableInventDimSimFields();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Price</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                itemPriceSimulated.UnitID = itemPriceSimulated.displayUnitId();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>PriceUnit</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                itemPriceSimulated.UnitID = itemPriceSimulated.displayUnitId();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>VersionId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.enableInventDimSimFields();
                element.setFromDate();
                element.setPriceAllocateMarkup();
                element.setSiteId();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>InventDimSim</Name>
				<Methods>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            super();
            element.setSiteId();
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            inventDimSim_DS.allowEdit(element.allowModify(itemPriceSimulated.VersionId) && itemPriceSimulated.PriceCalcId == '');

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>ItemPriceActivated</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            element.enableButtons();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            this.cacheAddMethod(tableMethodStr(InventItemPrice, displayBOMLog));
            this.cacheAddMethod(tableMethodStr(InventItemPrice, displayUnitId));
            this.cacheAddMethod(tableMethodStr(InventItemPrice, displayItemName));
            this.cacheAddMethod(tableMethodStr(InventItemPrice, displayVersionName));
            this.cacheAddMethod(tableMethodStr(InventItemPrice, blocked));
            this.cacheAddMethod(tableMethodStr(InventItemPrice, displayBOMId));
            this.cacheAddMethod(tableMethodStr(InventItemPrice, displayRouteId));
            this.cacheAddMethod(tableMethodStr(InventItemPrice, displayProfitSet));

            queryBuildDataSourceActive = this.query().dataSourceName(this.name());

            queryBuildDataSourceActive.addSortField(fieldNum(InventItemPrice, ActivationDate), SortOrder::Descending);
            queryBuildDataSourceActive.addSortField(fieldNum(InventItemPrice, CreatedDateTime), SortOrder::Descending);

            if (element.args().dataset() != tableNum(CostingVersion))
            {
                queryBuildDataSourceActive.addSortField(fieldNum(InventItemPrice, ItemId), SortOrder::Ascending);
                queryBuildDataSourceActive.addSortField(fieldNum(InventItemPrice, InventDimId), SortOrder::Ascending);
                queryBuildDataSourceActive.addSortField(fieldNum(InventItemPrice, PriceType), SortOrder::Ascending);
            }

            if (element.args().dataset() == tableNum(InventDimCombination))
            {
                queryBuildDataSourceActive.addRange(fieldNum(InventItemPrice, InventDimId)).value(element.inventDimCombinationQuery(false));
            }

            if (element.args().dataset() == tableNum(PmfFormulaCoBy))
            {
                queryBuildDataSourceActive.addRange(fieldNum(InventItemPrice, ItemId)).value(element.parentItemId());
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayName</Name>
						<Source><![CDATA[
        public display Name displayName(InventItemPrice _buffer)
        {
            if (isCalledFromVersion)
            {
                return _buffer.displayItemName();
            }
            else
            {
                return _buffer.displayVersionName();
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>ItemPriceCurrentActive</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            queryBuildDataSourceCurrentActive = this.query().dataSourceName(this.name());

            if (element.args().dataset() != tableNum(CostingVersion))
            {
                queryBuildDataSourceCurrentActive.addSortField(fieldNum(InventItemPriceCurrentActive, MaxActivationDate), SortOrder::Descending);
                queryBuildDataSourceCurrentActive.addSortField(fieldNum(InventItemPriceCurrentActive, MaxCreatedDateTime), SortOrder::Descending);
            }

            if (element.args().dataset() == tableNum(InventDimCombination))
            {
                queryBuildDataSourceCurrentActive.addRange(fieldNum(InventItemPriceCurrentActive, InventDimId)).value(element.inventDimCombinationQuery(false));
            }

            if (element.args().dataset() == tableNum(PmfFormulaCoBy))
            {
                queryBuildDataSourceCurrentActive.addRange(fieldNum(InventItemPriceCurrentActive, ItemId)).value(element.parentItemId());
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>BOMCalc</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args            args = new Args();
            MenuFunction    menuFunction;
            BOMCalcTable    tmpBOMCalcTable;
            QueryBuildRange queryBuildRange;

            Tab.tab(SimulatedPrices);

            isCalcInvoked = true;

            menuFunction = new MenuFunction(this.menuItemName(), this.menuItemType());
            args.caller(element);
            args.record(tmpBOMCalcTable);
            menuFunction.run(args);

            isCalcInvoked = false;

            if (element.args().dataset() == tableNum(InventDimCombination))
            {
                queryBuildRange = SysQuery::findOrCreateRange(itemPriceSimulated_ds.query().dataSourceTable(tableNum(InventItemPriceSim)),
                                                              fieldNum(InventItemPriceSim, InventDimId));
                queryBuildRange.value(element.inventDimCombinationQuery(true));
            }

            itemPriceSimulated_ds.executeQuery();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CalculationTransact</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args            args = new Args();
            MenuFunction    menuFunction;

            menuFunction = new MenuFunction(this.menuItemName(), this.menuItemType());
            args.caller(element);
            args.record(element.getActiveDataSource());
            menuFunction.run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BOMCalcTransPrint</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args                    args                = new Args();
            MenuFunction            menuFunction;
            BOMCalcTable            tmpBOMCalcTable;

            menuFunction = new MenuFunction(this.menuItemName(), this.menuItemType());

            tmpBOMCalcTable         = BOMCalcTable::find(element.getActiveDataSource().PriceCalcId);

            args.caller(element);
            args.record(tmpBOMCalcTable);
            menuFunction.run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>InventItemCostGroupRollup</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args            args = new Args();
            MenuFunction    menuFunction;

            args.caller(element);
            if (overviewSimulatedPrices.isActivePage())
            {
                args.record(itemPriceSimulated);
            }
            else
            {
                args.record(itemPriceActivated);
            }

            menuFunction = new MenuFunction(menuitemDisplayStr(InventItemCostGroupRollup), MenuItemType::Display);
            menuFunction.run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>InventPriceItemActivation</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            QueryBuildRange queryBuildRange;

            setPrefix("@CostManagement:ActivationOfPendingPrice_FailureMessagePrefix");

            super();
            element.refreshInventTableModule();
            element.refreshCostingVersion();

            if (element.args().dataset() == tableNum(InventDimCombination))
            {
                queryBuildRange = SysQuery::findOrCreateRange(itemPriceSimulated_ds.query().dataSourceTable(tableNum(InventItemPriceSim)),
                                                              fieldNum(InventItemPriceSim, InventDimId));
                queryBuildRange.value(element.inventDimCombinationQuery(true));

                queryBuildRange = SysQuery::findOrCreateRange(itemPriceActivated_ds.query().dataSourceTable(tableNum(InventItemPrice)),
                                                              fieldNum(InventItemPrice, InventDimId));
                queryBuildRange.value(element.inventDimCombinationQuery(false));
                itemPriceSimulated_ds.executeQuery();
                itemPriceSimulated_ds.refresh();
                itemPriceActivated_ds.executeQuery();
                itemPriceActivated_ds.refresh();
            }
            else
            {
                itemPriceSimulated_ds.research();
                itemPriceActivated_ds.research();
            }

            element.enableButtons();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>WarningsLog</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            BOMCalcTable::find(element.getActiveDataSource().PriceCalcId).showInfolog();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Tab</Name>
				<Type>Tab</Type>
				<Methods>
					<Method>
						<Name>tabChange</Name>
						<Source><![CDATA[
        public boolean tabChange(int _FromTab)
        {
            // When switching tabs from Simulated to Activated, ItemPriceSimulated.validateWrite() is called
            // only after the tab has already been changed(!) and ItemPriceActivated datasource got focus.
            // In order to force validateWrite execution earlier, ItemPriceSimulated_ds.leaveRecord() is called here,
            // which initiates validation (if necessary) and allows/avoids super(_FromTab) call based on the result.
            return (_fromTab == SimulatedPrices ? itemPriceSimulated_ds.leaveRecord() : true) && super(_fromTab);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OverviewSimulatedPrices</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();
            element.enableButtons();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>InventItemPriceSim_VersionId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
       
            CostingVersion costingVersion = CostingVersion::find(element.getActiveDataSource().VersionId);
            if (costingVersion.CostingType == CostingVersionCostingType::Conversion)
            {
                ret = checkFailed("@SYS120283");
            }
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OverviewActivatedPrices</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();
            element.enableButtons();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FilterActivePrice</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.setQueryJoinMode();
            ItemPriceActivated_ds.research();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>ItemPriceSimulated</Name>
			<Table>InventItemPriceSim</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FromDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Markup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkupSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Price</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriceAllocateMarkup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriceCalcId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriceQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriceSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriceType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriceUnit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UnitID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VersionId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventDimSim</Name>
			<Table>InventDim</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>configId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventBatchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventColorId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventGtdId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventOwnerId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventProfileId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventSerialId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSiteId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSizeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStyleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventVersionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LicensePlateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SHA1Hash</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSPalletId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>ItemPriceSimulated</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ItemPriceActivated</Name>
			<Table>InventItemPrice</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivationDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostingType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Markup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkupSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Price</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriceAllocateMarkup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriceCalcId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriceQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriceSecCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriceType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriceUnit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StdCostTransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StdCostVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UnitID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VersionId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventDimActive</Name>
			<Table>InventDim</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>configId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventBatchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventColorId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventGtdId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventOwnerId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventProfileId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventSerialId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSiteId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSizeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStyleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventVersionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LicensePlateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SHA1Hash</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSPalletId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>ItemPriceActivated</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ItemPriceCurrentActive</Name>
			<Table>InventItemPriceCurrentActive</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MaxActivationDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MaxCreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriceType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VersionId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>ItemPriceActivated</JoinSource>
			<LinkType>ExistJoin</LinkType>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS97652</Caption>
		<Pattern xmlns="">SimpleDetails-StandardTabsContainer</Pattern>
		<PatternVersion xmlns="">1.5</PatternVersion>
		<ShowDeleteButton xmlns="">Yes</ShowDeleteButton>
		<ShowNewButton xmlns="">Yes</ShowNewButton>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>536870911</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>BOMCalc</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>BOMCalc</MenuItemName>
								<MenuItemType>Action</MenuItemType>
								<Text>@SCM:CalculateItemCost</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>CalculationTransact</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>BOMCalcTrans</MenuItemName>
								<SaveRecord>No</SaveRecord>
								<Text>@SCM:ViewCalculationDetails</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>BOMCalcTransPrint</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2013265918</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>BOMCalcTransPrint</MenuItemName>
								<MenuItemType>Output</MenuItemType>
								<Text>@SCM:ReportCalculationDetails</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>InventItemCostGroupRollup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2113929214</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>InventItemCostGroupRollup</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>InventPriceItemActivation</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2126512126</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>InventPriceItemActivation</MenuItemName>
								<MenuItemType>Action</MenuItemType>
								<MultiSelect>Yes</MultiSelect>
								<Text>@SCM:ActivatePrices</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>StandardCost</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2139095038</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>InventSettlementRecord</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<DataSource>ItemPriceActivated</DataSource>
										<MenuItemName>InventSettlementRecord</MenuItemName>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>LedgerTransVoucher</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2145386494</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<DataSource>ItemPriceActivated</DataSource>
										<MenuItemName>LedgerTransVoucher1</MenuItemName>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>StdCostTransactions</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>MenuFunctionButton</Type>
										<FormControlExtension
											i:nil="true" />
										<DataSource>ItemPriceActivated</DataSource>
										<MenuItemName>InventCostTrans</MenuItemName>
									</AxFormControl>
								</Controls>
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<SaveRecord>No</SaveRecord>
								<Text>@SYS104353</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>WarningsLog</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2143289342</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@FieldDescriptions_CostManagement:InventItemPrice_WarningsLog</HelpText>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS2515</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>InventDimParmFixed</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>InventCostDimParmFixed</MenuItemName>
								<SaveRecord>No</SaveRecord>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
						<Caption>@SYS300939</Caption>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>HeaderGroup</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>CostingType</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ComboBox</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>CostingVersionCostingType</DataMethod>
						<Items />
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>OverviewSimulatedPrices</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FilterGroupSimulated</Name>
								<Pattern>CustomFilters</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl>
										<Name>QuickFilterSimulated</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<FormControlExtension>
											<Name>QuickFilterControl</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>targetControlName</Name>
													<Type>String</Type>
													<Value>GridSimulated</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>defaultColumnName</Name>
													<Type>String</Type>
													<Value>InventItemPriceSim_ItemId</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>placeholderText</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
								<FrameType>None</FrameType>
								<Style>CustomFilter</Style>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>GridSimulated</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>CostingTypeSimulatedGrid</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayCostingType</DataMethod>
										<DataSource>ItemPriceSimulated</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>InventItemPriceSim_PriceType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>378967701</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>PriceType</DataField>
										<DataSource>ItemPriceSimulated</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InventItemPriceSim_ItemId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>252645134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<PreviewPartRef>ItemPriceCalculationIdentificationPreview</PreviewPartRef>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ItemId</DataField>
										<DataSource>ItemPriceSimulated</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InventItemPriceSim_VersionId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>505290268</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>VersionId</DataField>
										<DataSource>ItemPriceSimulated</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>NameSim</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>631612835</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayName</DataMethod>
										<DataSource>ItemPriceSimulated</DataSource>
										<Label>@SYS80991</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>InventDimSimGrid</Name>
										<ElementPosition>757935402</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimSimGrid_configId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>configId</DataField>
												<DataSource>InventDimSim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimSimGrid_InventSizeId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventSizeId</DataField>
												<DataSource>InventDimSim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimSimGrid_InventColorId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventColorId</DataField>
												<DataSource>InventDimSim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimSimGrid_InventStyleId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventStyleId</DataField>
												<DataSource>InventDimSim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimSimGrid_InventVersionId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventVersionId</DataField>
												<DataSource>InventDimSim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimSimGrid_InventSiteId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@FieldDescriptions_CostManagement:InventItemPrice_InventDimSimGrid_InventSiteId</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventSiteId</DataField>
												<DataSource>InventDimSim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimSimGrid_InventLocationId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventLocationId</DataField>
												<DataSource>InventDimSim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimSimGrid_inventBatchId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>inventBatchId</DataField>
												<DataSource>InventDimSim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimSimGrid_wMSLocationId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>wMSLocationId</DataField>
												<DataSource>InventDimSim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimSimGrid_inventSerialId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>inventSerialId</DataField>
												<DataSource>InventDimSim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimSimGrid_InventStatusId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventStatusId</DataField>
												<DataSource>InventDimSim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimSimGrid_LicensePlateId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>LicensePlateId</DataField>
												<DataSource>InventDimSim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimSimGrid_InventOwnerId_RU</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventOwnerId_RU</DataField>
												<DataSource>InventDimSim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimSimGrid_InventProfileId_RU</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventProfileId_RU</DataField>
												<DataSource>InventDimSim</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimSimGrid_InventGtdId_RU</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventGtdId_RU</DataField>
												<DataSource>InventDimSim</DataSource>
											</AxFormControl>
										</Controls>
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataGroup>InventoryDimensions</DataGroup>
										<DataSource>InventDimSim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>InventItemPriceSim_Price</Name>
										<ElementPosition>884257969</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_CostManagement:InventItemPrice_InventItemPriceSim_Price</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Price</DataField>
										<DataSource>ItemPriceSimulated</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>InventItemPriceSim_PriceUnit</Name>
										<ElementPosition>1010580536</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>PriceUnit</DataField>
										<DataSource>ItemPriceSimulated</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>InventItemPriceSim_Markup</Name>
										<ElementPosition>1136903103</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_CostManagement:InventItemPrice_InventItemPriceSim_Markup</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Markup</DataField>
										<DataSource>ItemPriceSimulated</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>InventItemPriceSim_PriceQty</Name>
										<ElementPosition>1263225670</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_CostManagement:InventItemPrice_InventItemPriceSim_PriceUnit</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>PriceQty</DataField>
										<DataSource>ItemPriceSimulated</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>ItemPriceSimulated_PriceAllocateMarkup</Name>
										<ElementPosition>1389548237</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_CostManagement:InventItemPrice_ItemPriceSimulated_PriceAllocateMarkup</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>PriceAllocateMarkup</DataField>
										<DataSource>ItemPriceSimulated</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InventItemPriceSim_UnitID</Name>
										<ElementPosition>1515870804</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_CostManagement:InventItemPrice_InventItemPriceSim_UnitID</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>UnitID</DataField>
										<DataSource>ItemPriceSimulated</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>InventItemPriceSim_FromDate</Name>
										<ElementPosition>1642193371</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_CostManagement:InventItemPrice_InventItemPriceSim_FromDate</HelpText>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>FromDate</DataField>
										<DataSource>ItemPriceSimulated</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>BlockedSim</Name>
										<ElementPosition>1768515938</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_CostManagement:InventItemPrice_BlockedSim</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataMethod>blocked</DataMethod>
										<DataSource>ItemPriceSimulated</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>CalculatedSim</Name>
										<ElementPosition>1894838505</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_CostManagement:InventItemPrice_CalculatedSim</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataMethod>displayCalculated</DataMethod>
										<DataSource>ItemPriceSimulated</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>LogSim</Name>
										<ElementPosition>2021161072</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_CostManagement:InventItemPrice_LogSim</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataMethod>displayBOMLog</DataMethod>
										<DataSource>ItemPriceSimulated</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>ItemPriceSimulated</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS121349</Caption>
						<DataSource>ItemPriceSimulated</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>OverviewActivatedPrices</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FormGroupActivated</Name>
								<Pattern>CustomFilters</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl>
										<Name>QuickFilterActivated</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<FormControlExtension>
											<Name>QuickFilterControl</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>targetControlName</Name>
													<Type>String</Type>
													<Value>GridActivated</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>defaultColumnName</Name>
													<Type>String</Type>
													<Value>InventItemPrice_ItemId</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>placeholderText</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>FilterActivePrice</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@SCM:ShowLatestOnlyCaption</Label>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
								<FrameType>None</FrameType>
								<Style>CustomFilter</Style>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>GridActivated</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>CostingTypeActiveGrid</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>CostingType</DataField>
										<DataSource>ItemPriceActivated</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>InventItemPrice_PriceType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>378967701</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>PriceType</DataField>
										<DataSource>ItemPriceActivated</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InventItemPrice_ItemId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>252645134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<PreviewPartRef>ItemPriceCalculationIdentificationPreview</PreviewPartRef>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ItemId</DataField>
										<DataSource>ItemPriceActivated</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InventItemPrice_VersionId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>505290268</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>VersionId</DataField>
										<DataSource>ItemPriceActivated</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Name</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>631612835</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayName</DataMethod>
										<DataSource>ItemPriceActivated</DataSource>
										<Label>@SYS80991</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>InventDimActiveGrid</Name>
										<ElementPosition>757935402</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimActiveGrid_configId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>configId</DataField>
												<DataSource>InventDimActive</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimActiveGrid_InventSizeId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventSizeId</DataField>
												<DataSource>InventDimActive</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimActiveGrid_InventColorId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventColorId</DataField>
												<DataSource>InventDimActive</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimActiveGrid_InventStyleId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventStyleId</DataField>
												<DataSource>InventDimActive</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimActiveGrid_InventVersionId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventVersionId</DataField>
												<DataSource>InventDimActive</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimActiveGrid_InventSiteId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@FieldDescriptions_CostManagement:InventItemPrice_InventDimActiveGrid_InventSiteId</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventSiteId</DataField>
												<DataSource>InventDimActive</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimActiveGrid_InventLocationId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventLocationId</DataField>
												<DataSource>InventDimActive</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimActiveGrid_inventBatchId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>inventBatchId</DataField>
												<DataSource>InventDimActive</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimActiveGrid_wMSLocationId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>wMSLocationId</DataField>
												<DataSource>InventDimActive</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimActiveGrid_inventSerialId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>inventSerialId</DataField>
												<DataSource>InventDimActive</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimActiveGrid_InventStatusId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventStatusId</DataField>
												<DataSource>InventDimActive</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimActiveGrid_LicensePlateId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>LicensePlateId</DataField>
												<DataSource>InventDimActive</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimActiveGrid_InventOwnerId_RU</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventOwnerId_RU</DataField>
												<DataSource>InventDimActive</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimActiveGrid_InventProfileId_RU</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventProfileId_RU</DataField>
												<DataSource>InventDimActive</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InventDimActiveGrid_InventGtdId_RU</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventGtdId_RU</DataField>
												<DataSource>InventDimActive</DataSource>
											</AxFormControl>
										</Controls>
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataGroup>InventoryDimensions</DataGroup>
										<DataSource>InventDimActive</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>InventItemPrice_Price</Name>
										<ElementPosition>884257969</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_CostManagement:InventItemPrice_InventItemPrice_Price</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Price</DataField>
										<DataSource>ItemPriceActivated</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>InventItemPrice_PriceUnit</Name>
										<ElementPosition>1010580536</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>PriceUnit</DataField>
										<DataSource>ItemPriceActivated</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>InventItemPrice_Markup</Name>
										<ElementPosition>1136903103</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_CostManagement:InventItemPrice_InventItemPrice_Markup</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Markup</DataField>
										<DataSource>ItemPriceActivated</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>InventItemPrice_PriceQty</Name>
										<ElementPosition>1263225670</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>PriceQty</DataField>
										<DataSource>ItemPriceActivated</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>ItemPriceActivated_PriceAllocateMarkup</Name>
										<ElementPosition>1389548237</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_CostManagement:InventItemPrice_ItemPriceActivated_PriceAllocateMarkup</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>PriceAllocateMarkup</DataField>
										<DataSource>ItemPriceActivated</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InventItemPrice_UnitID</Name>
										<ElementPosition>1515870804</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_CostManagement:InventItemPrice_InventItemPrice_UnitID</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>UnitID</DataField>
										<DataSource>ItemPriceActivated</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ItemPriceActivated_ActivationDate</Name>
										<ElementPosition>1642193371</ElementPosition>
										<EnableFormRef>No</EnableFormRef>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ActivationDate</DataField>
										<DataSource>ItemPriceActivated</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>Blocked</Name>
										<ElementPosition>1768515938</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_CostManagement:InventItemPrice_Blocked</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataMethod>blocked</DataMethod>
										<DataSource>ItemPriceActivated</DataSource>
										<Label>@SYS103795</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>Calculated</Name>
										<ElementPosition>1894838505</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_CostManagement:InventItemPrice_Calculated</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataMethod>displayCalculated</DataMethod>
										<DataSource>ItemPriceActivated</DataSource>
										<Label>@SYS22050</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>Log</Name>
										<ElementPosition>2021161072</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_CostManagement:InventItemPrice_Log</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataMethod>displayBOMLog</DataMethod>
										<DataSource>ItemPriceActivated</DataSource>
										<Label>@SYS2515</Label>
									</AxFormControl>
								</Controls>
								<DataSource>ItemPriceActivated</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS109230</Caption>
						<DataSource>ItemPriceActivated</DataSource>
					</AxFormControl>
				</Controls>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>