<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ResEditFulfillmentDialog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ResEditFulfillmentDialog extends FormRun
{
    #TimeConstants

    ResPlannedResourcesDataController   controller;
    ActivityResourceRecId               plannedActivityResource;
    ResourceRecId                       selectedStaffedResource;
    ActivityResourceId                  activityResourceId;
    ActivityRecId                       rootActivity;
    AVTimeframeType                     timeFrameType;
    ProjId                              projectId;
    Map                                 fulfillmentStartDateTimeMap;
    Map                                 fulfillmentEndDateTimeMap;
    Map                                 fulfillmentDurationMap;    
    Map                                 hoursToBeFulfillMap;
    Map                                 specifyFulfillHoursMap;
    Map                                 remainingHoursPerActivityMap;
    Map                                 resourceWorkingDayMap;
    Map                                 extendFulfillmentStatusMap;
    SysEmailRecipients                  projectManagerEmailAddress;
    HcmWorkerName                       projectManagerName;
    boolean                             hasWBSTask;
    ResExtendFulfillment                globalExtendFulfillmentStatus;
    CalendarId                          activityCalendarId;

    private const real RoundingConstant = 0.1;

}
]]></Source>
			</Method>
			<Method>
				<Name>PlannedResourceController</Name>
				<Source><![CDATA[
    public ResPlannedResourcesDataController PlannedResourceController(ResPlannedResourcesDataController _controller = controller)
    {
        controller = _controller;
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        fulfillmentStartDateTimeMap = new Map (Types::Int64, Types::UtcDateTime);
        fulfillmentEndDateTimeMap = new Map (Types::Int64, Types::UtcDateTime);
        fulfillmentDurationMap = new Map (Types::Int64, Types::Integer);
        hoursToBeFulfillMap = new Map(Types::Int64, Types::Real);
        specifyFulfillHoursMap = new Map(Types::Int64, Types::Class);
        remainingHoursPerActivityMap = new Map(Types::Int64, Types::Real);
        resourceWorkingDayMap = new Map(Types::Date, Types::Enum);
        extendFulfillmentStatusMap = new Map(Types::Int64, Types::Real);
        globalExtendFulfillmentStatus = ResExtendFulfillment::No;

        if (element.args())
        {
            if (!controller)
            {
                controller = element.args().caller() as ResPlannedResourcesDataController;
                timeFrameType = controller.parmAvControl().timescale();
                plannedActivityResource = controller.parmPlannedActivityResource();
                selectedStaffedResource = controller.parmStaffedResource();
                projectId = ActivityResourceFacade::getProjectId(plannedActivityResource);
                rootActivity = ProjWBS::getRootActivityRecId(projectId);
                
                ActivityResourceRecId activityResource = ActivityResourceFacade::findByProjResource(projectId, selectedStaffedResource);
                if (activityResource)
                {
                    activityResourceId = strFmt(ResUtil::activityResourceIdStrFormat, int642Str(rootActivity),
                    int642Str(selectedStaffedResource), activityResource);
                }
                else
                {
                    activityResourceId = strFmt(ResUtil::activityResourceIdStrFormat, '0', int642Str(selectedStaffedResource), '0');
                }
            }
        }

        super();

        if (controller)
        {
            Name projectName = ProjTable::find(projectId).Name;
            element.design().caption(strFmt("@Res:EditFulfillmentTitle", 
                ResourceFacade::getName(selectedStaffedResource),
                projectId,
                projectName));

            boolean hourTimeFrameType = (timeFrameType == AVTimeframeType::Hour) ? true : false;

            if (hourTimeFrameType)
            {
                PeriodStartDateTimeStr.label("@Res:Hour");
                RequestStartDateStr.label("@Res:RequestStartDateTime");
                RequestEndDateStr.label("@Res:RequestEndDateTime");
            }
            else if (timeFrameType != AVTimeframeType::Day)
            {
                str timeFrameTypeStr = strLwr(enum2Str(timeFrameType));
                PeriodStartDateTimeStr.label(strFmt("@Res:StartDateOf", timeFrameTypeStr));
                FulfillHoursTable_DaysLength.visible(true);
            }

            FulfillmentStartDateTimeControl.visible(hourTimeFrameType);
            FulfillmentEndDateTimeControl.visible(hourTimeFrameType);
            FulfillmentStartDateControl.visible(!hourTimeFrameType);
            FulfillmentEndDateControl.visible(!hourTimeFrameType);

            HcmWorkerRecId projectManagerWorker = ProjTable::find(ActivityFacade::getProjId(rootActivity)).WorkerResponsible;
            projectManagerName = HcmWorker::find(projectManagerWorker).name();
            projectManagerEmailAddress = ResExtendFulfillmentManager::getWorkerEmailAddress(projectManagerWorker);

            if (projectManagerName && projectManagerEmailAddress)
            {
                FormInstruction.text(strFmt("@Res:EmailCanBeSentNotification", projectManagerName, projectManagerEmailAddress));
            }
            else if (projectManagerName)
            {
                FormInstruction.text(strFmt("@Res:EmailCannotBeSentDueToMissingEmail", projectManagerName));
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>initFulfillHoursGrid</Name>
				<Source><![CDATA[
    private void initFulfillHoursGrid()
    {
        ResActivityResourceActivitiesView activitiesView;

        while select activitiesView
            where activitiesView.ActivityResource == plannedActivityResource
        {
            this.setupFulfillHoursGridOperation(activitiesView, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupFulfillHoursGridOperation</Name>
				<Source><![CDATA[
    private void setupFulfillHoursGridOperation(ResActivityResourceActivitiesView _activitiesView, boolean _calledByInitMethod)
    {
        ttsbegin;
        utcdatetime activityFulfillmentStartDateTime = this.getfulFillmentStartDateTime(_activitiesView);
        utcdatetime activityFulfillmentEndDateTime = this.getfulFillmentEndDateTime(_activitiesView);

        if (timeFrameType != AVTimeframeType::Hour)
        {
            activityFulfillmentStartDateTime = DateTimeUtil::newDateTime(DateTimeUtil::Date(activityFulfillmentStartDateTime), 0);
            activityFulfillmentEndDateTime = DateTimeUtil::newDateTime(DateTimeUtil::Date(activityFulfillmentEndDateTime), #LastSecondOfTheDay);
        }

        if (timeFrameType != AVTimeframeType::Hour && timeFrameType != AVTimeframeType::Day)
        {
            // Update resource working day map
            if (ResUtil::isPerformanceEnhancementFeatureEnabled(true))
            {
                ResUtil::updateWorkingDayMapByActivityResourceId(resourceWorkingDayMap, activityResourceId, activityFulfillmentStartDateTime, activityFulfillmentEndDateTime);
            }
            else
            {
                ResRollup::updateWorkingDayMapByActivityResourceId(resourceWorkingDayMap, activityResourceId, activityFulfillmentStartDateTime, activityFulfillmentEndDateTime);
            }
        }

        utcdatetime periodStartDateTime = AVTimeframe::getTimeframe(activityFulfillmentStartDateTime, timeFrameType).start();
        utcdatetime periodEndDateTime = AVTimeframe::getTimeframe(activityFulfillmentStartDateTime, timeFrameType).end();
        utcdatetime lastSecondOfActivityFulfillmentEndDateTime = DateTimeUtil::newDateTime(DateTimeUtil::Date(activityFulfillmentEndDateTime), #LastSecondOfTheDay);

        ResCommitType commitType = _activitiesView.CommitType;
        ResExtendFulfillment activityExtendFulfillmentStatus = ResExtendFulfillment::No;

        // Remove existing records if the updated activity fulfillment start and end date does not includes the existing records range.
        if (!_calledByInitMethod)
        {
            activityExtendFulfillmentStatus = this.getExtendFulfillmentPerActivity(_activitiesView);
            this.removeFulfillHoursByFulfillmentDates(activityFulfillmentStartDateTime, activityFulfillmentEndDateTime, _activitiesView.Activity, commitType, activityExtendFulfillmentStatus);
        }

        utcdatetime requestStartDateTime = this.getRequestStartDateTime(_activitiesView);
        utcdatetime requestEndDateTime = this.getRequestEndDateTime(_activitiesView);
        if (timeFrameType != AVTimeframeType::Hour)
        {
            requestStartDateTime = DateTimeUtil::newDateTime(DateTimeUtil::Date(requestStartDateTime), 0);
            requestEndDateTime = DateTimeUtil::newDateTime(DateTimeUtil::Date(requestEndDateTime), #LastSecondOfTheDay);
        }
        
        utcdatetime beginningSecondOfActivityFulfillmentEndDateTime = DateTimeUtil::newDateTime(DateTimeUtil::Date(activityFulfillmentEndDateTime), 0);

        if (_calledByInitMethod)
        {
            if (!activityCalendarId)
            {
                activityCalendarId = WorkCalendarTable::findByRecId(ActivityFacade::getCalendar(_activitiesView.Activity)).CalendarId;
            }

            Days duration = WorkCalendarCalculator::calcDuration(
                DateTimeUtil::date(requestStartDateTime),
                DateTimeUtil::date(requestEndDateTime),
                activityCalendarId);
            fulfillmentDurationMap.insert(_activitiesView.Activity, duration);
        }

        while (periodStartDateTime <= lastSecondOfActivityFulfillmentEndDateTime)
        {
            FulfillHoursTable.clear();

            boolean recordExists = false;

            if (!_calledByInitMethod)
            {
                FulfillHoursTable = this.getFulfillHoursByStartDate(periodStartDateTime, _activitiesView.Activity, commitType);
                if (FulfillHoursTable.RecId)
                {
                    recordExists = true;
                }
            }

            FulfillHoursTable.ExtendFulfillment = activityExtendFulfillmentStatus;

            ResSpecifyFulfillHoursContext specifyFulfillHoursContext = new ResSpecifyFulfillHoursContext();

            specifyFulfillHoursContext.parmActivity(_activitiesView.Activity);
            specifyFulfillHoursContext.parmPeriodStartDateTime(periodStartDateTime);
            specifyFulfillHoursContext.parmCommitType(commitType);

            utcdatetime actualStartDateTime = activityFulfillmentStartDateTime > periodStartDateTime ? activityFulfillmentStartDateTime : periodStartDateTime;
            utcdatetime actualEndDateTime = activityFulfillmentEndDateTime < periodEndDateTime ? activityFulfillmentEndDateTime : periodEndDateTime;

            // Get the entire day instead of the specific hour if the time frame type is not hour.
            if (timeFrameType != AVTimeframeType::Hour)
            {
                actualStartDateTime = DateTimeUtil::newDateTime(DateTimeUtil::date(actualStartDateTime), 0);
                actualEndDateTime = DateTimeUtil::newDateTime(DateTimeUtil::date(actualEndDateTime), #LastSecondOfTheDay);
            }

            utcdatetime originalActualStartDateTime;
            utcdatetime originalActualEndDateTime;
            int originalDaysLength;
            if (recordExists)
            {
                originalActualStartDateTime = FulfillHoursTable.ActualStartDateTime;
                originalActualEndDateTime = FulfillHoursTable.ActualEndDateTime;
                originalDaysLength = FulfillHoursTable.DaysLength;
            }

            FulfillHoursTable.ActualStartDateTime = actualStartDateTime;
            FulfillHoursTable.ActualEndDateTime = actualEndDateTime;
            specifyFulfillHoursContext.parmActualStartDateTime(actualStartDateTime);
            specifyFulfillHoursContext.parmActualEndDateTime(actualEndDateTime);

            real resourceCapacity;
            real resourceRemainingCapacity;
            int numberOfWorkingDays = 1;
            boolean isWBSTask = !ActivityFacade::isRootActivity(_activitiesView.Activity);

            if (timeFrameType == AVTimeframeType::Hour || timeFrameType == AVTimeframeType::Day)
            {
                if (ResUtil::isPerformanceEnhancementFeatureEnabled(true))
                {
                    resourceCapacity = this.getCalendarCapacity(activityResourceId, periodStartDateTime, timeframeType);
                    resourceRemainingCapacity = this.getRemainingCapacity(isWBSTask, resourceCapacity, activityResourceId, periodStartDateTime, timeFrameType);
                }
                else
                {
                    ResRollup rollup = ResRollup::findByActivityResourceId(activityResourceId, periodStartDateTime, timeframeType);
                    resourceCapacity = rollup.Capacity;
                    resourceRemainingCapacity = rollup.Remaining;
                }
            }
            else
            {
                if (ResUtil::isPerformanceEnhancementFeatureEnabled(true))
                {
                    resourceCapacity = this.getCalendarCapacity(activityResourceId, periodStartDateTime, timeframeType);
                    resourceRemainingCapacity = this.getRemainingCapacity(isWBSTask, resourceCapacity, activityResourceId, periodStartDateTime, timeFrameType);
                    numberOfWorkingDays = this.getNumberOfWorkingDays(activityResourceId, actualStartDateTime, actualEndDateTime);
                }
                else
                {
                    utcdatetime rollupStartDay = AVTimeframe::getTimeframe(actualStartDateTime, AVTimeframeType::Day).start();
                    utcdatetime rollupEndDay = AVTimeframe::getTimeframe(actualEndDateTime, AVTimeframeType::Day).End();
                    [resourceCapacity, resourceRemainingCapacity, numberOfWorkingDays] =
                        ResRollup::getSumOfCapacityRemainingCapacityAndWorkingDaysByActivityResourceId(activityResourceId, rollupStartDay, rollupEndDay);
                }
            }

            specifyFulfillHoursContext.parmFulfillDaysCount(numberOfWorkingDays);
            FulfillHoursTable.DaysLength = numberOfWorkingDays;
            FulfillHoursTable.Capacity = resourceCapacity;

            real requestedHous;
            ResReservationType reservationType;
            if (_activitiesView.ActivityNumberActivityName)
            {
                requestedHous = ResAssignment::getAssignmentHours(_activitiesView.ActivityResource, _activitiesView.Activity, _activitiesView.CommitType, periodStartDateTime, periodEndDateTime);
                reservationType = ResReservationType::Assignment;
            }
            else
            {
                requestedHous = ResBooking::getExclusiveBookingHours(_activitiesView.ActivityResource, _activitiesView.Activity, _activitiesView.CommitType, periodStartDateTime, periodEndDateTime);
                reservationType = ResReservationType::Booking;
            }
            FulfillHoursTable.RequestedHours = requestedHous;

            if (!recordExists)
            {
                FulfillHoursTable.ReservedHours = requestedHous;
            }

            specifyFulfillHoursContext.parmReservation(reservationType);
            FulfillHoursTable.ReservationType = reservationType;

            real otherActivityFulfillHours = element.getOtherActivityFullfilledHours(activityView.Activity, commitType, periodStartDateTime, actualStartDateTime, actualEndDateTime);
                
            if (_activitiesView.CommitType == commitType)
            {
                FulfillHoursTable.RemainingCapacity = resourceRemainingCapacity - FulfillHoursTable.ReservedHours - otherActivityFulfillHours;
            }
            else
            {
                FulfillHoursTable.RemainingCapacity = resourceRemainingCapacity;
            }
            specifyFulfillHoursContext.parmFulfillHours(FulfillHoursTable.ReservedHours);

            if (recordExists)
            {
                FulfillHoursTable.update();
                if (specifyFulfillHoursMap.exists(FulfillHoursTable.RecId))
                {
                    specifyFulfillHoursMap.remove(FulfillHoursTable.RecId);
                }
                specifyFulfillHoursMap.insert(FulfillHoursTable.RecId, specifyFulfillHoursContext);
            }
            else
            {
                FulfillHoursTable.Activity = _activitiesView.Activity;
                FulfillHoursTable.ActivityResource = plannedActivityResource;
                FulfillHoursTable.StartDateTime = periodStartDateTime;
                FulfillHoursTable.EndDateTime = periodEndDateTime;

                if ((requestStartDateTime > actualEndDateTime) || (requestEndDateTime < actualStartDateTime))
                {
                    // If user has updated the fulfillment dates range to be outside of the requested dates range, then set the requested date range to be date time min value.
                    FulfillHoursTable.RequestStartDateTime = DateTimeUtil::minValue();
                    FulfillHoursTable.RequestEndDateTime = DateTimeUtil::minValue();
                }
                else
                {
                    FulfillHoursTable.RequestStartDateTime = requestStartDateTime > actualStartDateTime ? requestStartDateTime : actualStartDateTime;
                    FulfillHoursTable.RequestEndDateTime = requestEndDateTime < actualEndDateTime ? requestEndDateTime : actualEndDateTime;
                }

                FulfillHoursTable.CommitType = commitType;
                
                FulfillHoursTable.insert();
                specifyFulfillHoursMap.insert(FulfillHoursTable.RecId, specifyFulfillHoursContext);
            }

            real originalFulfillHours = recordExists ? FulfillHoursTable.ReservedHours : 0;
            originalActualStartDateTime = recordExists ? originalActualStartDateTime : FulfillHoursTable.ActualStartDateTime;
            originalActualEndDateTime = recordExists ? originalActualEndDateTime : FulfillHoursTable.ActualEndDateTime;
            originalDaysLength = recordExists ? originalDaysLength : FulfillHoursTable.DaysLength;
            element.updateRemainingHoursForOtherActivities(FulfillHoursTable.RecId, FulfillHoursTable.Activity, FulfillHoursTable.StartDateTime, 
                originalFulfillHours, originalActualStartDateTime, originalActualEndDateTime, originalDaysLength);
            periodStartDateTime = ResUtil::getNextDateTimeByTimeScale(periodStartDateTime, timeFrameType);
            periodEndDateTime = ResUtil::getNextDateTimeByTimeScale(periodEndDateTime, timeFrameType);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendarCapacity</Name>
				<Source><![CDATA[
    private real getCalendarCapacity(ActivityResourceId _collectionKey, utcdatetime _periodStartDateTime, AVTimeFrameType _timeFrameType)
    {
        real calendarCapacity;
        
        ResourceRecId resource = ResUtil::getResourceRecId(_collectionKey);
        ActivityResourcerecId activityResource = ResUtil::getActivityResourceRecId(_collectionKey);
        utcdatetime periodEndDateTime = AVTimeframe::getTimeframe(_periodStartDateTime, _timeFrameType).end();

        if (resource)
        {
            calendarCapacity = round(ResourceFacade::getCalendarCapacity(resource, _periodStartDateTime, periodEndDateTime) / #SecondsPerHour, RoundingConstant);
        }
        else if (activityResource)
        {
            CalendarRecId calendar = ActivityResourceFacade::getCalendar(activityResource);
            calendarCapacity = round(ResUtil::getCalendarCapacity(calendar, _periodStartDateTime, periodEndDateTime) / #SecondsPerHour, RoundingConstant);
        }

        return calendarCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingCapacity</Name>
				<Source><![CDATA[
    private real getRemainingCapacity(boolean _isWBSTask, real _calendarCapacity, ActivityResourceId _collectionKey, utcdatetime _periodStartDateTime, AVTimeFrameType _timeFrameType)
    {
        real scheduledCapacity;
        ResourceRecId resource = ResUtil::getResourceRecId(_collectionKey);
        ActivityResourcerecId activityResource = ResUtil::getActivityResourceRecId(_collectionKey);

        if (resource)
        {
            if (activityResource && _isWBSTask)
            {
                scheduledCapacity = round (ResUtil::getAssignmentScheduledCapacity(resource, activityResource, _periodStartDateTime, _timeFrameType) / #SecondsPerHour, RoundingConstant);
            }
            else
            {
                scheduledCapacity = round(ResUtil::getAvailabilityScheduledCapacity(resource, _periodStartDateTime, _timeFrameType) / #SecondsPerHour, RoundingConstant);
            }
        }
        else if (activityResource)
        {
            if (_isWBSTask)
            {
                scheduledCapacity = round(ResUtil::getAssignmentScheduledCapacity(resource, activityResource, _periodStartDateTime, _timeFrameType) / #SecondsPerHour, RoundingConstant);
            }
            else
            {
                scheduledCapacity = round(ResUtil::getActivityScheduledCapacity(activityResource, _periodStartDateTime, _timeFrameType) / #SecondsPerHour, RoundingConstant);
            }
        }

        return _calendarCapacity - scheduledCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfWorkingDays</Name>
				<Source><![CDATA[
    private int getNumberOfWorkingDays(ActivityResourceId _collectionKey, utcdatetime _startDateTime, utcdatetime _endDateTime)
    {
        int numberOfWorkingDays;

        utcdatetime startDayDateTime = AVTimeframe::getTimeframe(_startDateTime, AVTimeframeType::Day).start();
        utcdatetime endDayDateTime = AVTimeframe::getTimeframe(_endDateTime, AVTimeframeType::Day).End();

        ResourceRecId resource = ResUtil::getResourceRecId(_collectionKey);
        ActivityResourcerecId activityResource = ResUtil::getActivityResourceRecId(_collectionKey);

        if (resource)
        {
            numberOfWorkingDays = ResourceFacade::getNumberOfWorkingDays(resource, startDayDateTime, endDayDateTime);
        }
        else if (activityResource)
        {
            CalendarRecId calendar = ActivityResourceFacade::getCalendar(activityResource);
            numberOfWorkingDays = ResUtil::getNumberOfWorkingDaysByCalendar(calendar, startDayDateTime, endDayDateTime);
        }

        return numberOfWorkingDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFulfillHoursByFulfillmentDates</Name>
				<Source><![CDATA[
    private void removeFulfillHoursByFulfillmentDates(utcdatetime _activityFulfillmentStartDateTime, 
        utcdatetime _activityFulfillmentEndDateTime, ActivityRecId _activity, ResCommitType _commitType, ResExtendFulfillment _extendFulfillment)
    {
        utcdatetime earliestPeriodStartDateTime = AVTimeframe::getTimeframe(_activityFulfillmentStartDateTime, timeFrameType).start();
        utcdatetime latestPeriodStartDateTime = AVTimeframe::getTimeframe(_activityFulfillmentEndDateTime, timeFrameType).start();

        ttsbegin;

        List fulfillHoursList = new List(Types::Class);

        // Loop through all records which will not be displayed in the FulfillHoursTable grid due to user upated the propose fulfillment dates.
        while select forupdate FulFillHoursTable
            where FulfillHoursTable.Activity == _activity
                && FulfillHoursTable.CommitType == _commitType
                && (FulfillHoursTable.StartDateTime < earliestPeriodStartDateTime
                    || FulfillHoursTable.StartDateTime > latestPeriodStartDateTime)
        {
            // Update extend fulfillment for those record which have requested hours not equal zero because these records won't be deleted.
            if (FulfillHoursTable.RequestedHours != 0)
            {
                element.updateResourceExtendFulfillment(FulfillHoursTable, _extendFulfillment);
            }
            // Update remaining hours for FulfillhoursTable records and other recrods with the same start date time.
            real originalFulfillHours = FulfillHoursTable.ReservedHours;
            real fulfillHours = 0;
            this.updateFulfillHourFromMap(FulfillHoursTable.RecId, fulfillHours);            

            if (ActivityView.CommitType == ResCommitType::HardBook)
            {
                element.updateResourceFulfillCapacityAndRemainingCapacity(FulfillHoursTable, fulfillHours, (FulfillHoursTable.RemainingCapacity + originalFulfillHours));

                ResSpecifyFulfillHoursContext specifyFulfillHoursContext = new ResSpecifyFulfillHoursContext();
                specifyFulfillHoursContext.parmSpecifyResourceHoursRecId(FulfillHoursTable.RecId);
                specifyFulfillHoursContext.parmActivity(FulfillHoursTable.Activity);
                specifyFulfillHoursContext.parmPeriodStartDateTime(FulfillHoursTable.StartDateTime);
                specifyFulfillHoursContext.parmFulfillHours(originalFulfillHours);
                specifyFulfillHoursContext.parmActualStartDateTime(FulfillHoursTable.ActualStartDateTime);
                specifyFulfillHoursContext.parmActualEndDateTime(FulfillHoursTable.ActualEndDateTime);
                specifyFulfillHoursContext.parmFulfillDaysCount(FulfillHoursTable.DaysLength);
                fulfillHoursList.addEnd(specifyFulfillHoursContext);
            }
        }

        if (ActivityView.CommitType == ResCommitType::HardBook)
        {
            // The call to update other activities remaining hour cannot be executed within the FulfillHoursTable while loop since it will also loop through the same table.
            // Hence it will loop through a list instead.
            this.updateRemaingHoursForOtherActivitiesByList(fulfillHoursList);
        }

        // Delete the records which are outside the range of propose fulfillment dates and requested hours not equal to zero.
        // Reason why we need to keep the records with requested not equal to zero is due to these records will be needed to calculate
        // the total requested hours compare to the total fulfill hours in ResProjTeamController.CustomAssign() method.
        delete_from FulFillHoursTable
            where FulfillHoursTable.RequestedHours == 0
                && FulfillHoursTable.Activity == _activity
                && FulfillHoursTable.CommitType == _commitType
                && (FulfillHoursTable.StartDateTime < earliestPeriodStartDateTime
                    || FulfillHoursTable.StartDateTime > latestPeriodStartDateTime);

        ttscommit;                
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFulfillHoursByStartDate</Name>
				<Source><![CDATA[
    private ResTmpSpecifyResourceHours getFulfillHoursByStartDate(utcdatetime _periodStartDateTime, ActivityRecId _activity, ResCommitType _commitType)
    {
        select firstonly forupdate FulfillHoursTable
            where FulfillHoursTable.Activity == _activity
                && FulfillHoursTable.CommitType == _commitType
                && FulfillHoursTable.StartDateTime == _periodStartDateTime;

        return FulfillHoursTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOtherActivityFullfilledHours</Name>
				<Source><![CDATA[
    private real getOtherActivityFullfilledHours(ActivityRecId _thisActivity, ResCommitType _commitType, 
        utcdatetime _startPeriodDateTime, utcdatetime _actualStartDateTime, utcdatetime _actualEndDateTime)
    {
        real otherActivityFulfillHours;
        
        if (timeFrameType == AVTimeframeType::Hour || timeFrameType == AVTimeframeType::Day)
        {
            MapEnumerator specifyFulFillHoursMapEnum = specifyFulfillHoursMap.getEnumerator();
            while (specifyFulfillHoursMapEnum.moveNext())
            {
                ResSpecifyFulfillHoursContext specifyFulfillHoursContext = specifyFulfillHoursMapEnum.currentValue();
                if (specifyFulfillHoursContext.parmActivity() != _thisActivity &&
                    specifyFulfillHoursContext.parmCommitType() == _commitType &&
                    specifyFulfillHoursContext.parmPeriodStartDateTime() == _startPeriodDateTime &&
                    specifyFulfillHoursContext.parmReservation() == ResReservationType::Assignment)
                {
                    otherActivityFulfillHours += specifyFulfillHoursContext.parmFulfillHours();
                }
            }
        }
        else
        {
            Set thisActivityActualDatesSet = new Set (Types::Date);
            date actualStartDate = DateTimeUtil::date(_actualStartDateTime);
            date actualEndDate = DateTimeUtil::date(_actualEndDateTime);

            if (actualEndDate >= actualStartDate)
            {
                date tempDate = actualStartDate;
                while (tempDate <= actualEndDate)
                {
                    if (resourceWorkingDayMap.exists(tempDate) && resourceWorkingDayMap.lookup(tempDate) == ResExtendFulfillment::Yes)
                    {
                        thisActivityActualDatesSet.add(tempDate);
                    }
                    tempDate++;
                }
            }

            MapEnumerator specifyFulFillHoursMapEnum = specifyFulfillHoursMap.getEnumerator();
            while (specifyFulfillHoursMapEnum.moveNext())
            {
                ResSpecifyFulfillHoursContext specifyFulfillHoursContext = specifyFulfillHoursMapEnum.currentValue();
                if (specifyFulfillHoursContext.parmActivity() != _thisActivity &&
                    specifyFulfillHoursContext.parmCommitType() == _commitType &&
                    specifyFulfillHoursContext.parmPeriodStartDateTime() == _startPeriodDateTime &&
                    specifyFulfillHoursContext.parmReservation() == ResReservationType::Assignment)
                {
                    if (specifyFulfillHoursContext.parmActualStartDateTime() == _actualStartDateTime
                        && specifyFulfillHoursContext.parmActualEndDateTime() == _actualEndDateTime)
                    {
                        otherActivityFulfillHours += specifyFulfillHoursContext.parmFulfillHours();
                    }
                    else if ((specifyFulfillHoursContext.parmFulfillDaysCount() != 0) && 
                        (_actualEndDateTime >= specifyFulfillHoursContext.parmActualStartDateTime()) &&
                        (specifyFulfillHoursContext.parmActualEndDateTime() >= _actualStartDateTime))
                    {
                        //In case of over lapping, find out which days are overlapped.
                        int overlapDaysNum;
                        date contextActualStartDate = DateTimeUtil::date(specifyFulfillHoursContext.parmActualStartDateTime());
                        date contextActualEndDate = DateTimeUtil::date(specifyFulfillHoursContext.parmActualEndDateTime());

                        date contextTempDate = contextActualStartDate;
                        while (contextActualEndDate >= contextTempDate)
                        {
                            if (thisActivityActualDatesSet.in(contextTempDate))
                            {
                                overlapDaysNum++;
                            }
                            contextTempDate++;
                        }

                        otherActivityFulfillHours += (specifyFulfillHoursContext.parmFulfillHours() / specifyFulfillHoursContext.parmFulfillDaysCount()) * overlapDaysNum;
                    }
                }
            }
        }
        
        return otherActivityFulfillHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRemainingHoursForOtherActivities</Name>
				<Source><![CDATA[
    private void updateRemainingHoursForOtherActivities(RecId _specifyResourceHoursRecId, ActivityRecId _activity, utcdatetime _periodStartDateTime, 
        real _originalFulfillhours, utcdatetime _originalActualStartDateTime, utcdatetime _originalActualEndDateTime, int _originalFulFillDaysCount)
    {
        // Create a buffer from the temp table so that when select records in buffer won't change the position of the record in the grid.
        ResTmpSpecifyResourceHours fulfillHoursTableBuffer;
        fulfillHoursTableBuffer.linkPhysicalTableInstance(FulfillHoursTable);

        ResSpecifyFulfillHoursContext thisSpecifyFulfillHoursContext;

        MapEnumerator specifyFulFillHoursMapEnum = specifyFulfillHoursMap.getEnumerator();
        while (specifyFulfillHoursMapEnum.moveNext())
        {
            // Find the first matching ResSpecifyFulfillHoursContext class instance from the map and use this class parameter values afterward.
            thisSpecifyFulfillHoursContext = specifyFulfillHoursMapEnum.currentValue();
            if (thisSpecifyFulfillHoursContext.parmActivity() == _activity &&
                thisSpecifyFulfillHoursContext.parmPeriodStartDateTime() == _periodStartDateTime &&
                thisSpecifyFulfillHoursContext.parmReservation() == ResReservationType::Assignment)
            {
                break;
            }
        }

        if (timeFrameType == AVTimeframeType::Hour || timeFrameType == AVTimeframeType::Day)
        {
            // If this is hour or day time frame, the update of remaining capacity for other activities with the same start date time will be simple.
            ttsbegin;
            while select forupdate fulfillHoursTableBuffer
                where fulfillHoursTableBuffer.StartDateTime == thisSpecifyFulfillHoursContext.parmPeriodStartDateTime()
                    && fulfillHoursTableBuffer.Activity != thisSpecifyFulfillHoursContext.parmActivity()
                    && fulfillHoursTableBuffer.ReservationType == ResReservationType::Assignment
            {
                fulfillHoursTableBuffer.RemainingCapacity = fulfillHoursTableBuffer.RemainingCapacity + _originalFulfillhours - thisSpecifyFulfillHoursContext.parmFulfillHours();
                fulfillHoursTableBuffer.update();
            }
            ttscommit;
        }
        else
        {
            // If the time frame is not hour or day, then the remaining capacity for other activities will be more complex. 
            // If the other activity which has the same actual start date and actual end date, then the remaining hours will be deducted by the fulfill hours.
            // Else the calculation of remaining capacity will be depending on the number of overlapping days with capacity * ratio of fulfilled (reserved) hours.
            boolean actualDatesChanged;
            Set originalThisActivityActualDatesSet;
            date originalActualStartDate;
            date originalActualEndDate;

            if (_originalActualStartDateTime != thisSpecifyFulfillHoursContext.parmActualStartDateTime() ||
                _originalActualEndDateTime != thisSpecifyFulfillHoursContext.parmActualEndDateTime())
            {
                actualDatesChanged = true;
                originalThisActivityActualDatesSet = new Set (Types::Date);
                originalActualStartDate = DateTimeUtil::date(_originalActualStartDateTime);
                originalActualEndDate = DateTimeUtil::date(_originalActualEndDateTime);

                if (originalActualEndDate >= originalActualStartDate)
                {
                    date tempDate = originalActualStartDate;
                    while (tempDate <= originalActualEndDate)
                    {
                        if (resourceWorkingDayMap.exists(tempDate) && resourceWorkingDayMap.lookup(tempDate) == ResExtendFulfillment::Yes)
                        {
                            originalThisActivityActualDatesSet.add(tempDate);
                        }
                        tempDate++;
                    }
                }
            }
            
            Set thisActivityActualDatesSet = new Set (Types::Date);
            date actualStartDate = DateTimeUtil::date(thisSpecifyFulfillHoursContext.parmActualStartDateTime());
            date actualEndDate = DateTimeUtil::date(thisSpecifyFulfillHoursContext.parmActualEndDateTime());

            if (actualEndDate >= actualStartDate)
            {
                date tempDate = actualStartDate;
                while (tempDate <= actualEndDate)
                {
                    if (resourceWorkingDayMap.exists(tempDate) && resourceWorkingDayMap.lookup(tempDate) == ResExtendFulfillment::Yes)
                    {
                        thisActivityActualDatesSet.add(tempDate);
                    }
                    tempDate++;
                }
            }
        
            ttsbegin;
            while select forupdate fulfillHoursTableBuffer
                where fulfillHoursTableBuffer.StartDateTime == thisSpecifyFulfillHoursContext.parmPeriodStartDateTime()
                    && fulfillHoursTableBuffer.Activity != thisSpecifyFulfillHoursContext.parmActivity()
                    && fulfillHoursTableBuffer.DaysLength != 0
                    && fulfillHoursTableBuffer.ReservationType == ResReservationType::Assignment
            {
                if (fulfillHoursTableBuffer.ActualStartDateTime == thisSpecifyFulfillHoursContext.parmActualStartDateTime()
                        && fulfillHoursTableBuffer.ActualEndDateTime == thisSpecifyFulfillHoursContext.parmActualEndDateTime())
                {
                    fulfillHoursTableBuffer.RemainingCapacity = fulfillHoursTableBuffer.RemainingCapacity + _originalFulfillhours - thisSpecifyFulfillHoursContext.parmFulfillHours();
                }
                else
                {
                    //In case of over lapping, find out which days are overlapped.
                    date curActualStartDate = DateTimeUtil::date(fulfillHoursTableBuffer.ActualStartDateTime);
                    date curActualEndDate = DateTimeUtil::date(fulfillHoursTableBuffer.ActualEndDateTime);

                    if (actualDatesChanged && _originalFulFillDaysCount != 0)
                    {
                        int originalOverlapDaysNum;
                        date originalTempDate = curActualStartDate;
                        while (curActualEndDate >= originalTempDate)
                        {
                            if (originalThisActivityActualDatesSet.in(originalTempDate))
                            {
                                originalOverlapDaysNum++;
                            }
                            originalTempDate++;
                        }
                        fulfillHoursTableBuffer.RemainingCapacity += (_originalFulfillhours / _originalFulFillDaysCount) * originalOverlapDaysNum;
                    }

                    int overlapDaysNum;
                    date tempDate = curActualStartDate;
                    while (curActualEndDate >= tempDate)
                    {
                        if (thisActivityActualDatesSet.in(tempDate))
                        {
                            overlapDaysNum++;
                        }
                        tempDate++;
                    }

                    if (thisSpecifyFulfillHoursContext.parmFulfillDaysCount() != 0)
                    {
                        real fulFillHoursByRatio = (thisSpecifyFulfillHoursContext.parmFulfillHours() / thisSpecifyFulfillHoursContext.parmFulfillDaysCount()) * overlapDaysNum;

                        if (actualDatesChanged)
                        {
                            fulfillHoursTableBuffer.RemainingCapacity -= fulFillHoursByRatio;
                        }
                        else
                        {
                            real originalFulFillHoursByRatio = (_originalFulfillhours / thisSpecifyFulfillHoursContext.parmFulfillDaysCount()) * overlapDaysNum;
                            fulfillHoursTableBuffer.RemainingCapacity = fulfillHoursTableBuffer.RemainingCapacity + originalFulFillHoursByRatio - fulFillHoursByRatio;
                        }
                    }
                    else
                    {
                        fulfillHoursTableBuffer.RemainingCapacity = 0;
                    }
                }
                fulfillHoursTableBuffer.update();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRemaingHoursForOtherActivitiesByList</Name>
				<Source><![CDATA[
    private void updateRemaingHoursForOtherActivitiesByList(List _fulfillHoursList)
    {
        // Execute updateRemainingHoursForOtherActivities to go through all the records in the list.
        ListEnumerator fulfillHoursListEnum = _fulfillHoursList.getEnumerator();
        while (fulfillHoursListEnum.moveNext())
        {
            ResSpecifyFulfillHoursContext specifyFulfillHoursContext = fulfillHoursListEnum.current();
            this.updateRemainingHoursForOtherActivities(
                specifyFulfillHoursContext.parmSpecifyResourceHoursRecId(),
                specifyFulfillHoursContext.parmActivity(),
                specifyFulfillHoursContext.parmPeriodStartDateTime(),
                specifyFulfillHoursContext.parmFulfillHours(),
                specifyFulfillHoursContext.parmActualStartDateTime(),
                specifyFulfillHoursContext.parmActualEndDateTime(),
                specifyFulfillHoursContext.parmFulfillDaysCount());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fulfillAllByPlannedResourceRequest</Name>
				<Source><![CDATA[
    private void fulfillAllByPlannedResourceRequest()
    {
        List fulfillHoursList = new List(Types::Class);

        utcdatetime earliestPeriodStartDateTime = AVTimeframe::getTimeframe(element.getfulFillmentStartDateTime(ActivityView), timeFrameType).start();
        utcdatetime latestPeriodStartDateTime = AVTimeframe::getTimeframe(element.getfulFillmentEndDateTime(ActivityView), timeFrameType).end();

        ResTmpSpecifyResourceHours fulfillHoursTableBuffer;
        fulfillHoursTableBuffer.linkPhysicalTableInstance(FulfillHoursTable);        
        
        while select forupdate ReservedHours, RequestedHours, RemainingCapacity, ActualStartDateTime, 
            ActualEndDateTime, DaysLength, StartDateTime, Activity, RecId from fulfillHoursTableBuffer
            where fulfillHoursTableBuffer.Activity == ActivityView.Activity
                && fulfillHoursTableBuffer.StartDateTime >= earliestPeriodStartDateTime
                && fulfillHoursTableBuffer.EndDateTime <= latestPeriodStartDateTime
        {
            real originalFulfillHours = fulfillHoursTableBuffer.ReservedHours;
            real fulfillHours = fulfillHoursTableBuffer.RequestedHours;
            this.updateFulfillHourFromMap(fulfillHoursTableBuffer.RecId, fulfillHours);
            
            if (ActivityView.CommitType == ResCommitType::HardBook)
            {
                this.updateResourceFulfillCapacityAndRemainingCapacity(fulfillHoursTableBuffer, fulfillHours, (fulfillHoursTableBuffer.RemainingCapacity + originalFulfillHours - fulfillHours));

                ResSpecifyFulfillHoursContext specifyFulfillHoursContext = new ResSpecifyFulfillHoursContext();
                specifyFulfillHoursContext.parmSpecifyResourceHoursRecId(fulfillHoursTableBuffer.RecId);
                specifyFulfillHoursContext.parmActivity(fulfillHoursTableBuffer.Activity);
                specifyFulfillHoursContext.parmPeriodStartDateTime(fulfillHoursTableBuffer.StartDateTime);
                specifyFulfillHoursContext.parmFulfillHours(originalFulfillHours);
                specifyFulfillHoursContext.parmActualStartDateTime(fulfillHoursTableBuffer.ActualStartDateTime);
                specifyFulfillHoursContext.parmActualEndDateTime(fulfillHoursTableBuffer.ActualEndDateTime);
                specifyFulfillHoursContext.parmFulfillDaysCount(fulfillHoursTableBuffer.DaysLength);
                fulfillHoursList.addEnd(specifyFulfillHoursContext);
            }
            else
            {
                this.updateResourceFulfillCapacity(fulfillHoursTableBuffer, fulfillHours);
            }
        }

        if (ActivityView.CommitType == ResCommitType::HardBook)
        {
            // The call to update other activities remaining hour cannot be executed within the FulfillHoursTable while loop since it will also loop through the same table.
            // Hence it will loop through a list instead.
            this.updateRemaingHoursForOtherActivitiesByList(fulfillHoursList);
        }

        int activityViewRowIndex = ActivityView_DS.getPosition();
        ActivityView_DS.research(true);
        ActivityView_DS.setPosition(activityViewRowIndex);
        FulfillHoursTable_DS.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelAllFulfillmentByActivity</Name>
				<Source><![CDATA[
    private void cancelAllFulfillmentByActivity()
    {
        List fulfillHoursList = new List(Types::Class);

        ResTmpSpecifyResourceHours fulfillHoursTableBuffer;
        fulfillHoursTableBuffer.linkPhysicalTableInstance(FulfillHoursTable);

        while select forupdate ReservedHours, RemainingCapacity, ActualStartDateTime, ActualEndDateTime, 
            DaysLength, StartDateTime, Activity, RecId from fulfillHoursTableBuffer
            where fulfillHoursTableBuffer.Activity == ActivityView.Activity
        {
            real originalFulfillHours = fulfillHoursTableBuffer.ReservedHours;
            real fulfillHours = 0;
            this.updateFulfillHourFromMap(fulfillHoursTableBuffer.RecId, fulfillHours);

            if (ActivityView.CommitType == ResCommitType::HardBook)
            {
                this.updateResourceFulfillCapacityAndRemainingCapacity(fulfillHoursTableBuffer, fulfillHours, (fulfillHoursTableBuffer.RemainingCapacity + originalFulfillHours));
                
                ResSpecifyFulfillHoursContext specifyFulfillHoursContext = new ResSpecifyFulfillHoursContext();
                specifyFulfillHoursContext.parmSpecifyResourceHoursRecId(fulfillHoursTableBuffer.RecId);
                specifyFulfillHoursContext.parmActivity(fulfillHoursTableBuffer.Activity);
                specifyFulfillHoursContext.parmPeriodStartDateTime(fulfillHoursTableBuffer.StartDateTime);
                specifyFulfillHoursContext.parmFulfillHours(originalFulfillHours);
                specifyFulfillHoursContext.parmActualStartDateTime(fulfillHoursTableBuffer.ActualStartDateTime);
                specifyFulfillHoursContext.parmActualEndDateTime(fulfillHoursTableBuffer.ActualEndDateTime);
                specifyFulfillHoursContext.parmFulfillDaysCount(fulfillHoursTableBuffer.DaysLength);
                fulfillHoursList.addEnd(specifyFulfillHoursContext);
            }
            else
            {
                this.updateResourceFulfillCapacity(fulfillHoursTableBuffer, fulfillHours);
            }            
        }
        
        if (ActivityView.CommitType == ResCommitType::HardBook)
        {
            // The call to update other activities remaining hour cannot be executed within the FulfillHoursTable while loop since it will also loop through the same table.
            // Hence it will loop through a list instead.
            this.updateRemaingHoursForOtherActivitiesByList(fulfillHoursList);
        }

        int activityViewRowIndex = ActivityView_DS.getPosition();
        ActivityView_DS.research(true);
        ActivityView_DS.setPosition(activityViewRowIndex);
        FulfillHoursTable_DS.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalRemainingFulfillHours</Name>
				<Source><![CDATA[
    private real getTotalRemainingFulfillHours()
    {
        real totalRemainingFulfillhours;

        MapEnumerator remainingHoursPerActivityMapEnum = remainingHoursPerActivityMap.getEnumerator();
        while (remainingHoursPerActivityMapEnum.moveNext())
        {
            totalRemainingFulfillhours += remainingHoursPerActivityMapEnum.currentValue();
        }

        return totalRemainingFulfillhours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingFulfillHours</Name>
				<Source><![CDATA[
    private real getRemainingFulfillHours(ResActivityResourceActivitiesView _record)
    {
        real hoursToBeFulfill = element.getHoursToBeFulfilled(_record);
        real hoursHaveBeenFulfill;
        real remainingFulfillHours;

        MapEnumerator specifyFulfillHoursMapEnum = specifyFulfillHoursMap.getEnumerator();
        while (specifyFulfillHoursMapEnum.moveNext())
        {
            ResSpecifyFulfillHoursContext specifyFulfillHoursContext = specifyFulfillHoursMapEnum.currentValue();
            if (specifyFulfillHoursContext.parmActivity() == _record.Activity &&
                specifyFulfillHoursContext.parmCommitType() == _record.CommitType)
            {
                hoursHaveBeenFulfill += specifyFulfillHoursContext.parmFulfillHours();
            }
        }

        remainingFulfillHours = hoursToBeFulfill - hoursHaveBeenFulfill;

        if (!remainingHoursPerActivityMap.exists(_record.Activity))
        {
            remainingHoursPerActivityMap.insert(_record.Activity, remainingFulfillHours);
        }
        else
        {
            remainingHoursPerActivityMap.remove(_record.Activity);
            remainingHoursPerActivityMap.insert(_record.Activity, remainingFulfillHours);
        }

        TotalRemainingHours.realValue(element.getTotalRemainingFulfillHours());
        return remainingFulfillHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHoursToBeFulfilled</Name>
				<Source><![CDATA[
    private real getHoursToBeFulfilled(ResActivityResourceActivitiesView _record)
    {
        real hoursToBeFulfill;

        if (hoursToBeFulfillMap.exists(_record.Activity))   
        {
            hoursToBeFulfill = hoursToBeFulfillMap.lookup(_record.Activity);
        }
        else
        {
            hoursToBeFulfill = ActivityResourceFacade::getReservedHoursByActivity(plannedActivityResource, _record.Activity);
            hoursToBeFulfillMap.insert(_record.Activity, hoursToBeFulfill);
        }

        return hoursToBeFulfill;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityStartDateTime</Name>
				<Source><![CDATA[
    private utcdatetime getActivityStartDateTime(ResActivityResourceActivitiesView _record)
    {
        return DateTimeUtil::newDateTime(_record.Start, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityEndDateTime</Name>
				<Source><![CDATA[
    private utcdatetime getActivityEndDateTime(ResActivityResourceActivitiesView _record)
    {
        return DateTimeUtil::newDateTime(_record.End, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequestStartDateTime</Name>
				<Source><![CDATA[
    private utcdatetime getRequestStartDateTime(ResActivityResourceActivitiesView _record)
    {
        return _record.MinHour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequestEndDateTime</Name>
				<Source><![CDATA[
    private utcdatetime getRequestEndDateTime(ResActivityResourceActivitiesView _record)
    {
        return _record.MaxHour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequestStartDate</Name>
				<Source><![CDATA[
    private date getRequestStartDate(ResActivityResourceActivitiesView _record)
    {
        return DateTimeUtil::date(this.getRequestStartDateTime(_record));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequestEndDate</Name>
				<Source><![CDATA[
    private date getRequestEndDate(ResActivityResourceActivitiesView _record)
    {
        return DateTimeUtil::date(this.getRequestEndDateTime(_record));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getfulFillmentStartDateTime</Name>
				<Source><![CDATA[
    private utcdatetime getfulFillmentStartDateTime(ResActivityResourceActivitiesView _record)
    {
        utcdatetime fulfillmentStartDateTime;

        if (!fulfillmentStartDateTimeMap.exists(_record.activity))
        {
            fulfillmentStartDateTime = this.getRequestStartDateTime(_record);
            fulfillmentStartDateTimeMap.insert(_record.activity, fulfillmentStartDateTime);
        }
        else
        {
            fulfillmentStartDateTime = fulfillmentStartDateTimeMap.lookup(_record.activity);
        }

        return fulfillmentStartDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getfulFillmentEndDateTime</Name>
				<Source><![CDATA[
    private utcdatetime getfulFillmentEndDateTime(ResActivityResourceActivitiesView _record)
    {
        utcdatetime fulfillmentEndDateTime;

        if (!fulfillmentEndDateTimeMap.exists(_record.activity))
        {
            fulfillmentEndDateTime = this.getRequestEndDateTime(_record);
            fulfillmentEndDateTimeMap.insert(_record.activity, fulfillmentEndDateTime);
        }
        else
        {
            fulfillmentEndDateTime = fulfillmentEndDateTimeMap.lookup(_record.activity);
        }

        return fulfillmentEndDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getfulFillmentStartDate</Name>
				<Source><![CDATA[
    private date getfulFillmentStartDate(ResActivityResourceActivitiesView _record)
    {
        return DateTimeUtil::date(this.getfulFillmentStartDateTime(_record));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getfulFillmentEndDate</Name>
				<Source><![CDATA[
    private date getfulFillmentEndDate(ResActivityResourceActivitiesView _record)
    {
        return DateTimeUtil::date(this.getfulFillmentEndDateTime(_record));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDetailDateTime</Name>
				<Source><![CDATA[
    private str getDetailDateTime(utcdatetime _targetDateTime)
    {
        str detailDateTime;

        date targetdate = datetimeUtil::date(_targetDateTime);

        if (timeFrameType == AVTimeframeType::Hour)
        {
            detailDateTime = strFmt("@Res:FullDateFormatWithTime",
                dayName(dayOfWk(targetdate)),
                date2StrUsr(targetdate, DateFlags::FormatAll),
                time2Str(DateTimeUtil::time(_targetDateTime), TimeSeparator::Auto, TimeFormat::Auto));
        }
        else
        {
            detailDateTime = strFmt("@Res:FullDateFormat",
                dayName(dayOfWk(targetdate)),
                date2StrUsr(targetdate, DateFlags::FormatAll));
        }

        return detailDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFulfillHourFromMap</Name>
				<Source><![CDATA[
    private void updateFulfillHourFromMap(RecId _fulfillHoursTableRecId, real _updatedFulfillHours)
    {
        if (specifyFulfillHoursMap.exists(_fulfillHoursTableRecId))
        {
            ResSpecifyFulFillHoursContext specifyFulFillHoursContext = specifyFulfillHoursMap.lookup(_fulfillHoursTableRecId);
            specifyFulFillHoursContext.parmFulfillHours(_updatedFulfillHours);
            specifyFulfillHoursMap.remove(_fulfillHoursTableRecId);
            specifyFulfillHoursMap.insert(_fulfillHoursTableRecId, specifyFulFillHoursContext);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalFulfillHoursPerActivity</Name>
				<Source><![CDATA[
    private real calculateTotalFulfillHoursPerActivity(ActivityRecId _activity, ResCommitType _commitType)
    {
        real fulFillHoursTotal;
        MapEnumerator specifyFulfillHoursMapEnum = specifyFulfillHoursMap.getEnumerator();

        while (specifyFulfillHoursMapEnum.moveNext())
        {
            ResSpecifyFulFillHoursContext specifyFulFillHoursContext = specifyFulfillHoursMapEnum.currentValue();
            if (specifyFulFillHoursContext.parmActivity() == _activity &&
                specifyFulFillHoursContext.parmCommitType() == _commitType)
            {
                fulFillHoursTotal += specifyFulFillHoursContext.parmFulfillHours();
            }
        }

        return fulFillHoursTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateResourceFulfillCapacity</Name>
				<Source><![CDATA[
    private void updateResourceFulfillCapacity(ResTmpSpecifyResourceHours _fulfillHoursTable, real _fulfillCapacity)
    {
        ttsbegin;
        _fulfillHoursTable.selectForUpdate();
        _fulfillHoursTable.ReservedHours = _fulfillCapacity;
        _fulfillHoursTable.update();
        FulfillHoursTable_DS.reread();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateResourceRemainingCapacity</Name>
				<Source><![CDATA[
    private void updateResourceRemainingCapacity(ResTmpSpecifyResourceHours _fulfillHoursTable, real _updatedRemainingCapacity)
    {
        ttsbegin;
        _fulfillHoursTable.selectForUpdate();
        _fulfillHoursTable.RemainingCapacity = _updatedRemainingCapacity;
        _fulfillHoursTable.update();
        FulfillHoursTable_DS.reread();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateResourceFulfillCapacityAndRemainingCapacity</Name>
				<Source><![CDATA[
    private void updateResourceFulfillCapacityAndRemainingCapacity(ResTmpSpecifyResourceHours _fulfillHoursTable, real _fulfillCapacity, real _updatedRemainingCapacity)
    {
        ttsbegin;
        _fulfillHoursTable.selectForUpdate();
        _fulfillHoursTable.ReservedHours = _fulfillCapacity;
        _fulfillHoursTable.RemainingCapacity = _updatedRemainingCapacity;
        _fulfillHoursTable.update();
        FulfillHoursTable_DS.reread();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateResourceExtendFulfillment</Name>
				<Source><![CDATA[
    private void updateResourceExtendFulfillment(ResTmpSpecifyResourceHours _fulfillHoursTable, ResExtendFulfillment _extendFulfillment)
    {
        ttsbegin;
        _fulfillHoursTable.selectForUpdate();
        _fulfillHoursTable.ExtendFulfillment = _extendFulfillment;
        _fulfillHoursTable.update();
        FulfillHoursTable_DS.reread();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtendFulfillmentPerActivity</Name>
				<Source><![CDATA[
    private ResExtendFulfillment getExtendFulfillmentPerActivity(ResActivityResourceActivitiesView _record)
    {
        ResExtendFulfillment activityExtendFulfillmentStatus = ResExtendFulfillment::No;

        if (timeFrameType == AVTimeframeType::Hour)
        {
            utcdatetime requestStartDateTime = element.getRequestStartDateTime(_record);
            utcdatetime requestEndDateTime = element.getRequestEndDateTime(_record);
            utcdatetime fulfillmentStartDateTime = element.getFulFillmentStartDateTime(_record);
            utcdatetime fulFillmentEndDateTime = element.getfulFillmentEndDateTime(_record);
            activityExtendFulfillmentStatus = (((fulfillmentStartDateTime < requestStartDateTime) ||
                    (fulfillmentStartDateTime > requestEndDateTime) ||
                    (fulFillmentEndDateTime < requestStartDateTime) ||
                    (fulFillmentEndDateTime > requestEndDateTime)) ? ResExtendFulfillment::Yes : ResExtendFulfillment::No);
        }
        else
        {
            date requestStartDate = element.getRequestStartDate(_record);
            date requestEndDate = element.getRequestEndDate(_record);
            date fulfillmentStartDate = element.getFulFillmentStartDate(_record);
            date fulFillmentEndDate = element.getfulFillmentEndDate(_record);
            activityExtendFulfillmentStatus = (((fulfillmentStartDate < requestStartDate) ||
                    (fulfillmentStartDate > requestEndDate) ||
                    (fulFillmentEndDate < requestStartDate) ||
                    (fulFillmentEndDate > requestEndDate)) ? ResExtendFulfillment::Yes : ResExtendFulfillment::No);
        }

        if (extendFulfillmentStatusMap.exists(_record.Activity))
        {
            extendFulfillmentStatusMap.remove(_record.Activity);
        }
        extendFulfillmentStatusMap.insert(_record.Activity, activityExtendFulfillmentStatus);

        this.setGlobalExtendFulfillmentStatus();

        return activityExtendFulfillmentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGlobalExtendFulfillmentStatus</Name>
				<Source><![CDATA[
    private void setGlobalExtendFulfillmentStatus()
    {
        globalExtendFulfillmentStatus = ResExtendFulfillment::No;

        MapEnumerator extendFulfillmentStatusMapEnum = extendFulfillmentStatusMap.getEnumerator();

        while (extendFulfillmentStatusMapEnum.moveNext())
        {
            if (extendFulfillmentStatusMapEnum.currentValue() == ResExtendFulfillment::Yes)
            {
                globalExtendFulfillmentStatus = ResExtendFulfillment::Yes;
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExtendFulfillHasNoRemainingHours</Name>
				<Source><![CDATA[
    private boolean validateExtendFulfillHasNoRemainingHours()
    {
        // Validate if there is any activity being set as extend fulfillment with remaining to fulfill hours not equal to zero.
        boolean valid = true; 

        if (globalExtendFulfillmentStatus == ResExtendFulfillment::Yes)
        {
            MapEnumerator extendFulfillmentStatusMapEnum = extendFulfillmentStatusMap.getEnumerator();

            while (extendFulfillmentStatusMapEnum.moveNext())
            {
                if (extendFulfillmentStatusMapEnum.currentValue() == ResExtendFulfillment::Yes)
                {
                    ResActivityResourceActivitiesView activitiesView;
                    select Activity, CommitType, ActivityNumberActivityName, ProjName from activitiesView
                        where activitiesView.Activity == extendFulfillmentStatusMapEnum.currentKey()
                            && activitiesView.ActivityResource == plannedActivityResource;

                    if (activitiesView.Activity && (element.getRemainingFulfillHours(ActivityView) != 0))
                    {
                        str activityName = ActivityView.ActivityNumberActivityName ? ActivityView.ActivityNumberActivityName : ActivityView.ProjName;
                        error(strFmt("@Res:RemainingToFulfillIsNotZeroForExtendFulfillErrorMessage", activityName));
                        valid = false;
                        break;
                    }
                }
            }
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    public boolean canClose()
    {
        boolean canClose;
    
        canClose = super();
    
        if (element.closedOk() && canClose)
        {
            if (controller)
            {
                canClose = element.validateExtendFulfillHasNoRemainingHours();

                if (canClose)
                {
                    ResIProjTeamController teamControler = ResProjTeamController::getInstanceFromActivityRecId(rootActivity);
                    teamControler.customAssign(plannedActivityResource, selectedStaffedResource, FulfillHoursTable, ExtendProposalMemo.valueStr(),
                        true, projectManagerEmailAddress, true, controller.control().timescale());
                }
            }
        }

        return canClose;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>ActivityView</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            QueryBuildDataSource ActivityViewDS = this.query().dataSourceTable(tableNum(ResActivityResourceActivitiesView));
            ActivityViewDS.addOrderByField(fieldnum(ResActivityResourceActivitiesView, MinHour), SortOrder::Ascending);
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            if (controller)
            {
                QueryBuildDataSource ActivityViewDS = this.query().dataSourceTable(tableNum(ResActivityResourceActivitiesView));
                SysQuery::findOrCreateRange(ActivityViewDS, fieldNum(ResActivityResourceActivitiesView, ActivityResource)).value(queryValue(plannedActivityResource));
            }

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged()
        {
            if (ActivityView.ProjId && ActivityView.ProjName && ActivityView.ActivityNumberActivityName)
            {
                FulfillHoursTabPageControl.caption(strFmt("@Res:SpecifyResourceHoursForProjectTaskByTimescale",
                    ResourceFacade::getName(selectedStaffedResource),
                    strLwr(enum2Str(timeFrameType)),
                    ActivityView.ProjId,
                    ActivityView.ProjName,
                    ActivityView.ActivityNumberActivityName));
            }
            else
            {
                FulfillHoursTabPageControl.caption(strFmt("@Res:SpecifyResourceHoursForProjectByTimescale",
                    ResourceFacade::getName(selectedStaffedResource),
                    strLwr(enum2Str(timeFrameType)),
                    ActivityView.ProjId,
                    ActivityView.ProjName));
            }
            super();

            if (timeFrameType == AVTimeframeType::Hour)
            {
                utcdatetime currentStartDateTime = FulfillmentStartDateTimeControl.dateTimeValue();
                utcdatetime currentEndDateTime = FulfillmentEndDateTimeControl.dateTimeValue();

                utcdatetime targetStartDateTime = element.getfulFillmentStartDateTime(ActivityView);
                utcdatetime targetEndDateTime = element.getfulFillmentEndDateTime(ActivityView);

                if (currentStartDateTime != targetStartDateTime || currentEndDateTime != targetEndDateTime)
                {
                    FulfillmentStartDateTimeControl.dateTimeValue(targetStartDateTime);
                    FulfillmentEndDateTimeControl.dateTimeValue(targetEndDateTime);

                    FulfillHoursTable_ds.research();
                }
            }
            else
            {
                date currentStartDate = FulfillmentStartDateControl.dateValue();
                date currentEndDate = FulfillmentEndDateControl.dateValue();
                
                date targetStartDate = element.getfulFillmentStartDate(ActivityView);
                date targetEndDate = element.getfulFillmentEndDate(ActivityView);

                if (currentStartDate != targetStartDate || currentEndDate != targetEndDate)
                {
                    FulfillmentStartDateControl.dateValue(targetStartDate);
                    FulfillmentEndDateControl.dateValue(targetEndDate);

                    FulfillHoursTable_ds.research();
                }
            }

            
        }

]]></Source>
					</Method>
					<Method>
						<Name>getDetailActivityStartDateTime</Name>
						<Source><![CDATA[
        display str getDetailActivityStartDateTime(ResActivityResourceActivitiesView _record)
        {
            utcdatetime activityStartDateTime = element.getActivityStartDateTime(_record);
            return element.getDetailDateTime(activityStartDateTime);
        }

]]></Source>
					</Method>
					<Method>
						<Name>getDetailActivityEndDateTime</Name>
						<Source><![CDATA[
        display str getDetailActivityEndDateTime(ResActivityResourceActivitiesView _record)
        {
            utcdatetime activityEndDateTime = element.getActivityEndDateTime(_record);
            return element.getDetailDateTime(activityEndDateTime);
        }

]]></Source>
					</Method>
					<Method>
						<Name>getDetailRequestStartDateTime</Name>
						<Source><![CDATA[
        display str getDetailRequestStartDateTime(ResActivityResourceActivitiesView _record)
        {
            utcdatetime requestStartDateTime = element.getRequestStartDateTime(_record);
            return element.getDetailDateTime(requestStartDateTime);
        }

]]></Source>
					</Method>
					<Method>
						<Name>getDetailRequestEndDateTime</Name>
						<Source><![CDATA[
        display str getDetailRequestEndDateTime(ResActivityResourceActivitiesView _record)
        {
            utcdatetime requestEndDateTime = element.getRequestEndDateTime(_record);
            return element.getDetailDateTime(requestEndDateTime);
        }

]]></Source>
					</Method>
					<Method>
						<Name>getHoursToBeFulfilled</Name>
						<Source><![CDATA[
        display Qty getHoursToBeFulfilled(ResActivityResourceActivitiesView _record)
        {
            return element.getHoursToBeFulfilled(_record);
        }

]]></Source>
					</Method>
					<Method>
						<Name>getRemainingFulfillHours</Name>
						<Source><![CDATA[
        display Qty getRemainingFulfillHours(ResActivityResourceActivitiesView _record)
        {
            return element.getRemainingFulfillHours(_record);
        }

]]></Source>
					</Method>
					<Method>
						<Name>getTotalFulfillPerActivity</Name>
						<Source><![CDATA[
        display Qty getTotalFulfillPerActivity(ResActivityResourceActivitiesView _record)
        {
            return element.calculateTotalFulfillHoursPerActivity(_record.Activity, _record.commitType);
        }

]]></Source>
					</Method>
					<Method>
						<Name>getExtendFulfillment</Name>
						<Source><![CDATA[
        display ResExtendFulfillment getExtendFulfillment(ResActivityResourceActivitiesView _record)
        {
            return extendFulfillmentStatusMap.exists(_record.Activity) ? extendFulfillmentStatusMap.lookup(_record.Activity) : ResExtendFulfillment::No;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>FulfillHoursTable</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            if (controller)
            {
                element.initFulfillHoursGrid();
            }

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            utcdatetime earliestPeriodStartDateTime = AVTimeframe::getTimeframe(element.getfulFillmentStartDateTime(ActivityView), timeFrameType).start();
            utcdatetime latestPeriodStartDateTime = AVTimeframe::getTimeframe(element.getfulFillmentEndDateTime(ActivityView), timeFrameType).end();

            Query fulfillHoursTableQuery = FulfillHoursTable_ds.query();
            QueryBuildDataSource fulfillHoursTableDS = fulfillHoursTableQuery.dataSourceNo(1);
            
            SysQuery::findOrCreateRange(fulfillHoursTableDS, fieldNum(ResTmpSpecifyResourceHours, Activity)).value(queryValue(ActivityView.Activity));
            SysQuery::findOrCreateRange(fulfillHoursTableDS, fieldnum(ResTmpSpecifyResourceHours, StartDateTime)).value(queryRange(earliestPeriodStartDateTime, dateMax() + 1));
            SysQuery::findOrCreateRange(fulfillHoursTableDS, fieldnum(ResTmpSpecifyResourceHours, EndDateTime)).value(queryRange(dateNull(), latestPeriodStartDateTime));
            
            fulfillHoursTableDS.sortClear();
            fulfillHoursTableDS.addOrderByField(fieldnum(ResTmpSpecifyResourceHours, StartDateTime), SortOrder::Ascending);

            QueryRun queryRun = new QueryRun(fulfillHoursTableQuery);
            this.queryRun(queryRun);

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>getDetailPeriodStartDateTime</Name>
						<Source><![CDATA[
        display str getDetailPeriodStartDateTime(ResTmpSpecifyResourceHours _record)
        {
            return element.getDetailDateTime(_record.StartDateTime);
        }

]]></Source>
					</Method>
					<Method>
						<Name>getDetailRequestStartDateTime</Name>
						<Source><![CDATA[
        display str getDetailRequestStartDateTime(ResTmpSpecifyResourceHours _record)
        {
            return element.getDetailDateTime(_record.RequestStartDateTime);
        }

]]></Source>
					</Method>
					<Method>
						<Name>getDetailRequestEndDateTime</Name>
						<Source><![CDATA[
        display str getDetailRequestEndDateTime(ResTmpSpecifyResourceHours _record)
        {
            return element.getDetailDateTime(_record.RequestEndDateTime);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>FulfillmentStartDateTimeControl</Name>
				<Type>DateTime</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();

            if (ret)
            {
                if (fulfillmentStartDateTimeMap.exists(ActivityView.Activity))
                {
                    fulfillmentStartDateTimeMap.remove(ActivityView.Activity);
                }
                fulfillmentStartDateTimeMap.insert(ActivityView.Activity, this.dateTimeValue());

                // Update the end date time control value by duration.
                utcdatetime endDateTime = DateTimeUtil::newDateTime(
                    WorkCalendarCalculator::findEndDateForStartDateAndDuration(
                        DateTimeUtil::date(FulfillmentStartDateTimeControl.dateTimeValue()),
                        fulfillmentDurationMap.lookup(ActivityView.Activity),
                        ActivityCalendarId), 
                    #LastSecondOfTheDay);

                if (fulfillmentEndDateTimeMap.exists(ActivityView.Activity))
                {
                    fulfillmentEndDateTimeMap.remove(ActivityView.Activity);
                }
                fulfillmentEndDateTimeMap.insert(ActivityView.Activity, endDateTime);
                FulfillmentEndDateTimeControl.dateTimeValue(endDateTime);
                
                element.setupFulfillHoursGridOperation(ActivityView, false);
                int activityViewRowIndex = ActivityView_DS.getPosition();
                // This statement has to be placed after get position because it loop through all records in ActivityView
                ExtendProposalMemo.enabled(globalExtendFulfillmentStatus == ResExtendFulfillment::Yes ? true : false);
                ActivityView_DS.research(true);
                ActivityView_DS.setPosition(activityViewRowIndex);
                FulfillHoursTable_DS.research();
            }
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FulfillmentEndDateTimeControl</Name>
				<Type>DateTime</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
    
            if (ret)
            {
                if (fulfillmentEndDateTimeMap.exists(ActivityView.Activity))
                {
                    fulfillmentEndDateTimeMap.remove(ActivityView.Activity);
                }
                fulfillmentEndDateTimeMap.insert(ActivityView.Activity, this.dateTimeValue());

                element.setupFulfillHoursGridOperation(ActivityView, false);
                int activityViewRowIndex = ActivityView_DS.getPosition();
                // This statement has to be placed after get position because it loop through all records in ActivityView
                ExtendProposalMemo.enabled(globalExtendFulfillmentStatus == ResExtendFulfillment::Yes ? true : false);
                ActivityView_DS.research(true);
                ActivityView_DS.setPosition(activityViewRowIndex);
                FulfillHoursTable_DS.research();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;
        
            ret = super();
        
            if (ret)
            {
                if (this.dateTimeValue() < element.getfulFillmentStartDateTime(ActivityView))
                {
                    warning("@Res:FulfillmentEndDateTimeComparisonWarning");
                    ret = false;
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FulfillmentStartDateControl</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
    
            if (ret)
            {
                if (fulfillmentStartDateTimeMap.exists(ActivityView.Activity))
                {
                    fulfillmentStartDateTimeMap.remove(ActivityView.Activity);
                }
                utcdatetime fulfillmentStartDateTime = DateTimeUtil::newDateTime(this.dateValue(), 0);
                fulfillmentStartDateTimeMap.insert(ActivityView.Activity, fulfillmentStartDateTime);
    
                // Update the end date time control value by duration.
                utcdatetime endDateTime = DateTimeUtil::newDateTime(
                    WorkCalendarCalculator::findEndDateForStartDateAndDuration(
                        FulfillmentStartDateControl.dateValue(),
                        fulfillmentDurationMap.lookup(ActivityView.Activity),
                        ActivityCalendarId), 
                    #LastSecondOfTheDay);

                if (fulfillmentEndDateTimeMap.exists(ActivityView.Activity))
                {
                    fulfillmentEndDateTimeMap.remove(ActivityView.Activity);
                }
                fulfillmentEndDateTimeMap.insert(ActivityView.Activity, endDateTime);
                FulfillmentEndDateControl.dateValue(DateTimeUtil::date(endDateTime));

                element.setupFulfillHoursGridOperation(ActivityView, false);
                int activityViewRowIndex = ActivityView_DS.getPosition();
                // This statement has to be placed after get position because it loop through all records in ActivityView
                ExtendProposalMemo.enabled(globalExtendFulfillmentStatus == ResExtendFulfillment::Yes ? true : false);
                ActivityView_DS.research(true);
                ActivityView_DS.setPosition(activityViewRowIndex);
                FulfillHoursTable_DS.research();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FulfillmentEndDateControl</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
    
            if (ret)
            {
                if (fulfillmentEndDateTimeMap.exists(ActivityView.Activity))
                {
                    fulfillmentEndDateTimeMap.remove(ActivityView.Activity);
                }
                utcdatetime fulfillmentEndDateTime = DateTimeUtil::newDateTime(this.dateValue(), #LastSecondOfTheDay);
                fulfillmentEndDateTimeMap.insert(ActivityView.Activity, fulfillmentEndDateTime);

                element.setupFulfillHoursGridOperation(ActivityView, false);
                int activityViewRowIndex = ActivityView_DS.getPosition();
                // This statement has to be placed after get position because it loop through all records in ActivityView
                ExtendProposalMemo.enabled(globalExtendFulfillmentStatus == ResExtendFulfillment::Yes ? true : false);
                ActivityView_DS.research(true);
                ActivityView_DS.setPosition(activityViewRowIndex);
                FulfillHoursTable_DS.research();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;
        
            ret = super();
        
            if (ret)
            {
                if (this.dateValue() < element.getfulFillmentStartDate(ActivityView))
                {
                    warning("@Res:FulfillmentEndDateComparisonWarning");
                    ret = false;
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FulfillAllByRequest</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.fulfillAllByPlannedResourceRequest();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CancelAllFulfillment</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.cancelAllFulfillmentByActivity();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FulfillHoursTable_ReservedHours</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            
            real originalFulfillHours = FulfillHoursTable.ReservedHours;
            utcdatetime originalActualStartDate = FulfillHoursTable.ActualStartDateTime;
            utcdatetime originalActualEndDate = FulfillHoursTable.ActualEndDateTime;
            int originalFulfillDaysCount = FulfillHoursTable.DaysLength;
            
            ret = super();
            if (ret)
            {
                element.updateFulfillHourFromMap(FulfillHoursTable.RecId, FulfillHoursTable.ReservedHours);
                if (ActivityView.CommitType == ResCommitType::HardBook)
                {
                    element.updateResourceRemainingCapacity(FulfillHoursTable, 
                        (FulfillHoursTable.RemainingCapacity + originalFulfillHours - FulfillHoursTable.ReservedHours));
                    
                    element.updateRemainingHoursForOtherActivities(FulfillHoursTable.RecId, 
                        FulfillHoursTable.Activity, FulfillHoursTable.StartDateTime, 
                        originalFulfillHours, originalActualStartDate, 
                        originalActualEndDate, originalFulfillDaysCount);
                }
    
                int activityViewRowIndex = ActivityView_DS.getPosition();
                ActivityView_DS.research(true);
                ActivityView_DS.setPosition(activityViewRowIndex);
            }
    
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;
            
            ret = super();
        
            if (ret)
            {
                real originalFulfillHours = FulfillHoursTable.ReservedHours;
                if (this.realValue() > originalFulfillHours)
                {
                    real activityHoursToBeFulfill = element.getRemainingFulfillHours(ActivityView);
                    real potentialRemainingFulFillHours = activityHoursToBeFulfill + originalFulfillHours - this.realValue();
                    if (potentialRemainingFulFillHours < 0)
                    {
                        error(strFmt("@Res:WarningRemainingFulFillHoursLessThanZero", num2Str(this.realValue() - abs(potentialRemainingFulFillHours), -1, -1, DecimalSeparator::Auto, ThousandSeparator::Auto)));
                        ret = false;
                    }
                }
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>ActivityView</Name>
			<Table>ResActivityResourceActivitiesView</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Activity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActivityName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActivityNumberActivityName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActivityResource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommitType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>End</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Start</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>FulfillHoursTable</Name>
			<Table>ResTmpSpecifyResourceHours</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Activity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActivityResource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActualEndDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActualStartDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Capacity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CollectionKey</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommitType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DaysLength</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemainingCapacity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequestedHours</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequestEndDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequestStartDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReservationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReservedHours</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Resource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StartDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaskName</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@Res:EmailCannotBeSentDueToMissingWorker</Caption>
		<DialogSize xmlns="">Full</DialogSize>
		<Pattern xmlns="">DialogFastTabs</Pattern>
		<PatternVersion xmlns="">1.0</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>InstructionGroupControl</Name>
				<Pattern>FillText</Pattern>
				<PatternVersion>UX7 1.0</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStaticTextControl">
						<Name>FormInstruction</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>StaticText</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Text>@Res:EmailCannotBeSentDueToMissingWorker</Text>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>ActivityTabControl</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ActivityTabPageControl</Name>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>ActivityGrid</Name>
								<AllowEdit>No</AllowEdit>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ActivityView_ProjId</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjId</DataField>
										<DataSource>ActivityView</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ActivityView_ProjName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjName</DataField>
										<DataSource>ActivityView</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ActivityView_ActivityNumberActivityName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ActivityNumberActivityName</DataField>
										<DataSource>ActivityView</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ActivityStartDateStr</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>getDetailActivityStartDateTime</DataMethod>
										<DataSource>ActivityView</DataSource>
										<Label>@Res:ActivityStartDate</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ActivityEndDateStr</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>getDetailActivityEndDateTime</DataMethod>
										<DataSource>ActivityView</DataSource>
										<Label>@Res:ActivityEndDate</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RequestStartDateStr</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>getDetailRequestStartDateTime</DataMethod>
										<DataSource>ActivityView</DataSource>
										<Label>@Res:RequestStartDate</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RequestEndDateStr</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>getDetailRequestEndDateTime</DataMethod>
										<DataSource>ActivityView</DataSource>
										<Label>@Res:RequestEndDate</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>HoursToBeFulfill</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>getHoursToBeFulfilled</DataMethod>
										<DataSource>ActivityView</DataSource>
										<Label>@Res:HoursToBeFulfill</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>RemainingFulfillHours</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>getRemainingFulfillHours</DataMethod>
										<DataSource>ActivityView</DataSource>
										<Label>@Res:RemainingFulfillHours</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ExtendFulfillment</Name>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>getExtendFulfillment</DataMethod>
										<DataSource>ActivityView</DataSource>
										<Label>@Res:ExtendFulfillment</Label>
										<Items />
									</AxFormControl>
								</Controls>
								<DataSource>ActivityView</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>TotalRemainingHoursGroupControl</Name>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ExtendProposalMemo</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Enabled>No</Enabled>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>ResExtendFulfillmentNotification</ExtendedDataType>
										<Label>@Res:ExtendFulfillmentNotificationGuide</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TotalRemainingHours</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@Res:TotalRemainingHours</Label>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
							</AxFormControl>
						</Controls>
						<Caption>@Res:ActivitiesInThisRequests</Caption>
						<FastTabExpanded>Yes</FastTabExpanded>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>FulfillHoursTabPageControl</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FulfillmentDates</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>FulfillmentStartDateTimeControl</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>DateTime</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@Res:FulfillmentStartDateTime</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>FulfillmentEndDateTimeControl</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>DateTime</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@Res:FulfillmentEndDateTime</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>FulfillmentStartDateControl</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Date</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@Res:FulfillmentStartDate</Label>
										<ViewEditMode>Edit</ViewEditMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>FulfillmentEndDateControl</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Date</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@Res:FulfillmentEndDate</Label>
										<ViewEditMode>Edit</ViewEditMode>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActivityFulfillmentActionPaneControl</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>ActivityFulfillmentButtonGroupControl</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>FulfillAllByRequest</Name>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@Res:FulfillAllByRequest</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>CancelAllFulfillment</Name>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@Res:CancelAllFulfillment</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>FulfillHoursGrid</Name>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PeriodStartDateTimeStr</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>getDetailPeriodStartDateTime</DataMethod>
										<DataSource>FulfillHoursTable</DataSource>
										<Label>@SYS80056</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RequestStartDateTimePerPeriodStr</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>getDetailRequestStartDateTime</DataMethod>
										<DataSource>FulfillHoursTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RequestEndDateTimePerPeriodStr</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>getDetailRequestEndDateTime</DataMethod>
										<DataSource>FulfillHoursTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>FulfillHoursTable_DaysLength</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Integer</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>DaysLength</DataField>
										<DataSource>FulfillHoursTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>FulfillHoursTable_Capacity</Name>
										<AllowEdit>No</AllowEdit>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Capacity</DataField>
										<DataSource>FulfillHoursTable</DataSource>
										<Label>@Res:ResourceCapacity</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>FulfillHoursTable_RequestedHours</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>RequestedHours</DataField>
										<DataSource>FulfillHoursTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>FulfillHoursTable_RemainingCapacity</Name>
										<AllowEdit>No</AllowEdit>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>RemainingCapacity</DataField>
										<DataSource>FulfillHoursTable</DataSource>
										<Label>@Res:RemainingCapacity</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>FulfillHoursTable_ReservedHours</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<AllowNegative>No</AllowNegative>
										<DataField>ReservedHours</DataField>
										<DataSource>FulfillHoursTable</DataSource>
										<Label>@Res:HoursToFufill</Label>
									</AxFormControl>
								</Controls>
								<DataSource>FulfillHoursTable</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>TotalFulFillHoursGroupControl</Name>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TotalFulfillPerActivity</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>getTotalFulfillPerActivity</DataMethod>
										<DataSource>ActivityView</DataSource>
										<Label>@Res:TotalFulfilledHoursPerActivity</Label>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
							</AxFormControl>
						</Controls>
						<Caption>@Res:SpecifyResourceHoursByTimescale</Caption>
						<FastTabExpanded>Yes</FastTabExpanded>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Left>0</Left>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>