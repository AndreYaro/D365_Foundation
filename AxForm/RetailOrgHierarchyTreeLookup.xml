<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailOrgHierarchyTreeLookup</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class RetailOrgHierarchyTreeLookup extends FormRun
{
    RetailOrgHierarchyTreeDatasource    hierarchyTree;
    boolean                             canSelect;
    FormControl                         callingControl;
    RecId                               selectedHierarchyId;
    RefRecId                            currentNodeId;
    HierarchyPurpose                    hierarchyPurposeFilterValue = HierarchyPurpose::NotSet;

}
]]></Source>
			</Method>
			<Method>
				<Name>hideHierarchyTypeSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hides the hierarchy type selection dropdown control.
    /// </summary>
    /// <remarks>
    /// In such scenario the hierarchy type will be defaulted to the hierachy type of the prior selected node, or
    /// if that is not provided it will be set to the default hierachy type of the specified hierarchy purpose.
    /// </remarks>
    public void hideHierarchyTypeSelection()
    {
        HierarchySelector.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndAddHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the dropdown on the form with the names of existing organization hierarchies and selects the node specified by currentNodeId.
    /// </summary>
    public void checkAndAddHierarchy()
    {
        RetailOrgHierarchyView  orgHierarchies;

        while select orgHierarchies
            where (hierarchyPurposeFilterValue == HierarchyPurpose::NotSet) ||
                  (orgHierarchies.HierarchyPurpose == hierarchyPurposeFilterValue) // If hierarchy purpose is not set (i.e. if user did not provide a purpose) then show all.
        {
            if (!orgHierarchies.isDraftHierarchy() && orgHierarchies.isHierarchyCurrent())
            {
                HierarchySelector.add(orgHierarchies.Name);
            }
        }

        if (currentNodeId > 0) // if a prior selected node value is passed then expand the tree control to that node.
        {
            select orgHierarchies
                join OMHierarchyRelationship
                where OMHierarchyRelationship.HierarchyType == orgHierarchies.RecId &&
                        OMHierarchyRelationship.RecId == currentNodeId;

            HierarchySelector.selectText(orgHierarchies.Name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeSelect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the text property of the calling filter control to the selected node's Name and
    /// executes callback methods to allow the caller to retrieve the OMHierarchyRelationship Recid of the selected node.
    /// </summary>
    /// <param name = "_selectString">Name of the selected node.</param>
    /// <remarks>
    /// OMHierarchyRelationship Recid can be used to figure out the ominternalorganization and the hierarchy-type (tree) of the selected node.
    /// </remarks>
    public void closeSelect(str _selectString)
    {
        if (ctrlFormTree.getRoot() && canSelect)
        {
            // If the caller of the calling filter control implements a callback method, execute the callbackmethod here.
            // This is used to return the OMHierarchyRelationship recid of the selected node.
            if (callingControl.formRun() is IRetailOrgHierarchyLookupCallback)
            {
                IRetailOrgHierarchyLookupCallback filterCallback = callingControl.formRun() as IRetailOrgHierarchyLookupCallback;
                filterCallback.executeOrgHierarchyLookupCallback(callingControl, currentNodeId);
            }

            // If the lookup form (i.e. RetailOrgHierarchyTreeLookup) is invoked using RetailOrgHierarchyTreeLookup.instanceLookup
            // then return the currentNode by setting it to the selectedNodeId variable of the RetailOrgHierarchyTreeLookup instance.
            if (element.args() && element.args().parmObject() is RetailOrgHierarchyTreeLookup)
            {
                RetailOrgHierarchyTreeLookup lookupInstance = element.args().parmObject() as RetailOrgHierarchyTreeLookup;
                lookupInstance.selectedNodeId(currentNodeId);
            }

            // Set the text of the filter control to the Name of the selecte node.
            if (callingControl is FormStringControl)
            {
                FormStringControl callingFilterControl = callingControl as FormStringControl;
                callingFilterControl.text(_selectString); //Note that this bypasses the control's validation and modified methods.
                callingFilterControl.modified();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeSelectRecord</Name>
				<Source><![CDATA[
    public void closeSelectRecord(Common _selectedRecord)
    {
        if (ctrlFormTree.getRoot() && canSelect)
        {
            super(_selectedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        callingControl = element.args().caller();
        currentNodeId = str2int64(element.args().lookupValue());

        if (element.args().parmEnum())
        {
            hierarchyPurposeFilterValue = element.args().parmEnum();
        }

        super();
        canSelect = false;

        // populate dropdown with organization hierarchies
        element.checkAndAddHierarchy();

        // For retail reporting, if the hierarchy selection feature is enabled,
        //		select the default hierarchy when the form's loaded for the first time (when no node is selected before),
        //      user can change to their selection later.
        if (hierarchyPurposeFilterValue == HierarchyPurpose::RetailReporting
                && currentNodeId == 0
                && RetailEnableSelectingOrgHierarchyForChannelReportingFlight::instance().isEnabled())
        {
            RetailOrgHierarchyView defaultHierarchyView = this.getDefaulthierarchyView(HierarchyPurpose::RetailReporting);
            if (defaultHierarchyView.RecId > 0)
            {
                HierarchySelector.selectText(defaultHierarchyView.Name);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        OMOperatingUnit                     root = null;
        OMHierarchyRelationship             relationship;
        RetailOrgHierarchyView              selectedHierarchy;

        canSelect = false;

        select Name, RecId from selectedHierarchy
        where selectedHierarchy.Name  == HierarchySelector.valueStr();

        if (hierarchyPurposeFilterValue == HierarchyPurpose::RetailReporting)
        {
            // For retail reporting, if the hierarchy selection feature is disabled or hierarchy selector is not visible,
            //      show only the default hierarchy in channel selection filter.
            if (!RetailEnableSelectingOrgHierarchyForChannelReportingFlight::instance().isEnabled() || HierarchySelector.visible() == false)
            {
                // Find out default hierachy id
                RetailOrgHierarchyView defaultHierarchyView = this.getDefaulthierarchyView(HierarchyPurpose::RetailReporting);
                if (defaultHierarchyView.RecId > 0)
                {
                    selectedHierarchy = defaultHierarchyView;
                }
            }
        }

        // Display tree only if hierarchy exists.
        if (selectedHierarchy.RecId)
        {
            select root
                join relationship
                where relationship.ParentOrganization == 0 &&
                      relationship.HierarchyType == selectedHierarchy.RecId;

            // Org hierarchy tree view.
            hierarchyTree = new RetailOrgHierarchyTreeDatasource(OmHierarchyRelationship_ds,
                                                                 ctrlFormTree,
                                                                 fieldNum(OMHierarchyRelationship, ChildOrganization),
                                                                 fieldNum(OMHierarchyRelationship, ParentOrganization),
                                                                 NoYes::No);
            if (root.RecId)
            {
                OMHierarchyRelationship hierarchyRelationship;
                hierarchyTree.initRoot(root.Name, relationship.RecId, hierarchyTree.image());

                if (currentNodeId > 0)
                {
                    // If we have selected relationship, try to find such node and select it.
                    select hierarchyRelationship
                        where hierarchyRelationship.RecId == currentNodeId;

                    if (hierarchyRelationship.HierarchyType == selectedHierarchy.RecId)
                    {
                        hierarchyTree.expandAndSelect(hierarchyRelationship);
                    }
                }
                else // else select the root node
                {
                    select hierarchyRelationship
                        where hierarchyRelationship.HierarchyType == selectedHierarchy.RecId &&
                              hierarchyRelationship.ParentOrganization == 0;

                    hierarchyTree.expandAndSelect(hierarchyRelationship);
                }
            }
            canSelect = false;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultHierarchyView</Name>
				<Source><![CDATA[
    private RetailOrgHierarchyView getDefaultHierarchyView(RetailHierarchyPurpose _hierarchyPurpose)
    {
        RetailOrgHierarchyView defaultHierarchyView;
        RecId defualtHierarchyViewRecid = defaultHierarchyView.getDefaultHierarchy(any2Int(_hierarchyPurpose));

        if (defualtHierarchyViewRecid > 0)
        {
            select Name, RecId from defaultHierarchyView
                where defaultHierarchyView.RecId == defualtHierarchyViewRecid;
        }

        return defaultHierarchyView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectAndExit</Name>
				<Source><![CDATA[
    void selectAndExit()
    {
        int idxSelection;
        FormTreeItem formTreeItem;

        if (!ctrlFormTree || !ctrlFormTree.getRoot())
        {
            return;
        }

        idxSelection = ctrlFormTree.getSelection();

        if (idxSelection == 0)
        {
            canSelect = false;
            return;
        }

        formTreeItem = ctrlFormTree.getItem(idxSelection);
        currentNodeId = formTreeItem.data();

        select OMHierarchyRelationship
            where OMHierarchyRelationship.RecId == currentNodeId;

        canSelect = true;

        element.closeSelect(formTreeItem.text());
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>HierarchySelector</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.run();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CtrlFormTree</Name>
				<Type>Tree</Type>
				<Methods>
					<Method>
						<Name>expanding</Name>
						<Source><![CDATA[
        boolean expanding(int _idx, FormTreeExpand _action, anytype _data)
        {
            boolean ret;

            ret = super(_idx, _action, _data);

            if (hierarchyTree)
            {
                hierarchyTree.expanding(_idx, _action, _data);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OKButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.selectAndExit();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>OMHierarchyRelationship</Name>
			<Table>OMHierarchyRelationship</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ChildOrganization</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentOrganization</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidTo</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>OMHierarchyType</Name>
			<Table>OMHierarchyType</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RelationshipType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<AlwaysOnTop xmlns="">Yes</AlwaysOnTop>
		<Caption xmlns="">@SYS332975</Caption>
		<HeightMode xmlns="">SizeToContent</HeightMode>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">LookupGridOnly</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<Scrollbars xmlns="">Yes</Scrollbars>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">Lookup</Style>
		<WidthMode xmlns="">SizeToAvailable</WidthMode>
		<WindowResize xmlns="">Fixed</WindowResize>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Header</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>CustomFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacingMode>Fixed</VerticalSpacingMode>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>HierarchySelector</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS41044</Label>
						<Items />
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTreeControl">
				<Name>CtrlFormTree</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tree</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Actions</Name>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>OKButton</Name>
								<Type>CommandButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Command>OK</Command>
								<DefaultButton>Yes</DefaultButton>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>CancelButton</Name>
								<Type>CommandButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Command>Cancel</Command>
								<SaveRecord>No</SaveRecord>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalRight</ArrangeMethod>
						<Style>DialogCommitContainer</Style>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>None</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>DialogCommit</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>