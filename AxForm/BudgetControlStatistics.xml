<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BudgetControlStatistics</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BudgetControlStatistics extends FormRun
{
    BudgetControlStatisticsManager budgetControlStatsManager;

    FiscalCalendarRecId currentFiscalCalendarRecId;
    BudgetCycle budgetCycle;
    recId   budgetGroupRecId;

    BudgetCheckResultErrorWarningDetail budgetCheckResultErrorWarningDetail;
    DimensionAttributeValueCombination dimensionAttribValueCombination;

    Args    budgetControlLedgerDimLookupArgs;
    Args    budgetCycleLookupArgs;

    MainAccount mainAccount;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the BudgetControlStatisticsManager class.
    /// Initializes the form when called from other forms or inquiries.
    /// </summary>
    public void init()
    {
        #SysSystemDefinedButtons

        super();

        // User access to filters on the grid headers and custom filters replaces the need for the filter pane.
        FormCommandButtonControl showFiltersButton = this.control(this.controlId(#SystemDefinedShowFiltersButton)) as FormCommandButtonControl;
        showFiltersButton.visible(false);

        if (element.args())
        {
            BudgetControlRule budgetControlRule;

            if (element.args().dataset() && element.args().record())
            {
                switch (element.args().dataset())
                {
                    case tableNum(BudgetCheckResultErrorWarningDetail):
                        budgetCheckResultErrorWarningDetail = element.args().record() as BudgetCheckResultErrorWarningDetail;

                        BudgetSourceIntegrator budgetSourceIntegrator = BudgetSourceIntegrator::newBudgetSourceIntegratorFromBudgetSource(
                            BudgetSource::find(budgetCheckResultErrorWarningDetail.BudgetSource));

                        // Get the transaction date from budget source integrator.
                        TransDate transactionDate = budgetSourceIntegrator.getBudgetSourceTrackingDate();

                        budgetControlRule = BudgetControlLedgerDimensionHelper::findBudgetControlRuleByLedgerDimension(
                            budgetCheckResultErrorWarningDetail.PrimaryLedger,
                            budgetCheckResultErrorWarningDetail.BudgetSourceLedgerDimension);

                        budgetCycle = BudgetCycle::findBudgetCycleByDate(budgetControlRule.BudgetCycleTimeSpan, transactionDate);

                        budgetCycleLookup.text(budgetCycle.Name);
                        budgetCycleLookup.modified();

                        dimensionAttribValueCombination = DimensionAttributeValueCombination::find(budgetCheckResultErrorWarningDetail.BudgetControlLedgerDimension);
                        ledgerDimensionValues.text(dimensionAttribValueCombination.DisplayValue);
                        LedgerDimensionValues.modified();

                        break;

                    default:
                        Debug::assert(false);
                }
            }
            else if (element.args().parmObject())
            {
                BudgetControlStatisticsRequest budgetControlStatisticsRequest = element.args().parmObject();

                if (budgetControlStatisticsRequest.parmBudgetCycleRecId())
                {
                    budgetCycle = BudgetCycle::find(budgetControlStatisticsRequest.parmBudgetCycleRecId());

                    // Set the lookup args for the modified method to select and initialize the budget cycle settings.
                    budgetCycleLookupArgs = new Args();
                    budgetCycleLookupArgs.record(budgetCycle);

                    budgetCycleLookup.text(budgetCycle.Name);
                    budgetCycleLookup.modified();
                }

                if (budgetControlStatisticsRequest.parmBudgetControlLedgerDimension())
                {
                    ledgerDimensionValues.text(DimensionAttributeValueCombination::find(budgetControlStatisticsRequest.parmBudgetControlLedgerDimension(), false).DisplayValue);
                    ledgerDimensionValues.modified();
                }
                else
                {
                    if (budgetControlStatisticsRequest.parmBudgetGroupName())
                    {
                        budgetControlStatisticsValueOptionButton.selection(BudgetControlStatisticsValueOption::BudgetGroup);
                        budgetControlStatisticsValueOptionButton.modified();
                        budgetGroupLookup.text(budgetControlStatisticsRequest.parmBudgetGroupName());
                        budgetGroupLookup.modified();
                    }
                }

                if (budgetControlStatisticsRequest.parmIncludeCarryForward())
                {
                    CarryForwardAmountsRadioButton.selection(budgetControlStatisticsRequest.parmIncludeCarryForward());
                }
            }
            else
            {
                BudgetControlConfiguration budgetControlConfiguration = BudgetControlConfiguration::findActiveByPrimaryLedger(Ledger::current());

                if (budgetControlConfiguration.DefaultBudgetCycleTimeSpan)
                {
                    budgetCycle = BudgetCycle::findBudgetCycleByDate(budgetControlConfiguration.DefaultBudgetCycleTimeSpan, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

                    if (BudgetControlBudgetCycle::existByCycleNameAndConfiguration(budgetCycle.Name, budgetControlConfiguration.RecId))
                    {
                        // Set the lookup args for the modified method to select and initialize the budget cycle settings.
                        budgetCycleLookupArgs = new Args();
                        budgetCycleLookupArgs.record(budgetCycle);

                        budgetCycleLookup.text(budgetCycle.Name);
                        budgetCycleLookup.modified();
                    }
                }
            }
        }

        budgetControlStatsManager = new BudgetControlStatisticsManager();

        if (updateTotalsButton.enabled())
        {
            this.updateBudgetTmpControlStatistics(false);
        }

        if (BudgetControlDimensionAttribute::isMainAccountInBudgetControlDimAttrbs(
                BudgetControlConfiguration::findActiveByPrimaryLedger(Ledger::current()).RecId))
        {
            mainAccountLookup.enabled(false);
        }

        budgetFundsAvailableExpressionStatic.text(budgetControlStatsManager.getBudgetAvailableExpression());
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            element.setApportionmentFields();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setApportionmentFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the visibility of apportionment fields on the form based on the <c>UseOnlyApportionment</c> checkbox in <c>BudgetParameters</c> table.
    /// </summary>
    public void setApportionmentFields()
    {
        boolean isUseOnlyApportionment;

        isUseOnlyApportionment = BudgetControlConfiguration::findActiveByPrimaryLedger(Ledger::current()).UseApportionedAmount;
        totalApportionmentAmountMST.visible(isUseOnlyApportionment);
        apportionmentsButton.visible(isUseOnlyApportionment);

        if (!isUseOnlyApportionment)
        {
            element.hidePart(identifierStr(BudgetControlApportionments));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hidePart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hide a part from FactBox pane.
    /// </summary>
    /// <param name="form">
    /// The form that the part belongs to.
    /// </param>
    /// <param name="partName">
    /// The name of the part.
    /// </param>
    public void hidePart(str _partName)
    {
        int i;
        PartList partList;
        FormPartReferenceControl formPart;

        partList = new PartList(element);

        // For each part in the form
        for (i = 1; i <= partList.partCount(); i++)
        {
            formPart = partList.getPartControlById(i);

            str formPartName = formPart.name();
            // Part name matches so hide the part
            if (strContains(formPartName, _partName))
            {
                formPart.visible(false);
                return;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>task</Name>
				<Source><![CDATA[
    public int task(int _taskId)
    {
        #task
        int ret;

        switch (_taskId)
        {
            case #taskPrint :
            case #taskPrintPreview :
                ret = 0;
                break;

            default :
                ret = super(_taskId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetTmpControlStatistics</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method takes the parameters set on the form and updates the totals
    /// </summary>
    public void updateBudgetTmpControlStatistics(boolean _getBudgetPeriodBalancesFromCache = true)
    {
        BudgetTmpControlStatistics currentBudgetTmpControlStatistics;
        boolean includeAllAccounts = true;

        if (mainAccountLookup.text() != '')
        {
            includeAllAccounts = false;
        }

        boolean includeCarryForwardAmounts = false;

        if (CarryForwardAmountsRadioButton.selection() == BudgetControlStatisticsCarryForwardOption::Included)
        {
            includeCarryForwardAmounts = true;
        }

        if (dimensionAttribValueCombination.RecId != 0 || budgetGroupRecId != 0)
        {
            currentBudgetTmpControlStatistics = budgetControlStatsManager.fillBudgetTmpControlStatistics(Ledger::current(),
                                                                                                         budgetModelLookup.text(),
                                                                                                         periodSelection.selection(),
                                                                                                         balanceType.selection(),
                                                                                                         budgetCycle.RecId,
                                                                                                         dimensionAttribValueCombination.RecId,
                                                                                                         budgetGroupRecId,
                                                                                                         mainAccount.RecId,
                                                                                                         includeAllAccounts,
                                                                                                         includeCarryForwardAmounts,
                                                                                                         _getBudgetPeriodBalancesFromCache);
        }

        budgetTmpControlStatistics.setTmpData(currentBudgetTmpControlStatistics);
        budgetTmpControlStatistics_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpdateTotalsButtonVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks that the appropriate parameters have been set and enables/disables the UpdateTotalsButton
    /// </summary>
    public void setUpdateTotalsButtonVisibility()
    {
        if (budgetCycle.RecId != 0 && (dimensionAttribValueCombination.RecId != 0 || budgetGroupRecId != 0))
        {
            UpdateTotalsButton.enabled(true);
        }
        else
        {
            UpdateTotalsButton.enabled(false);
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>UpdateTotalsButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            int activeRowPosition;

            activeRowPosition = budgetTmpControlStatistics_DS.getPosition();

            element.updateBudgetTmpControlStatistics(false);

            // Reset the position to the same one as before.
            budgetTmpControlStatistics_DS.setPosition(activeRowPosition);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetCycleLookup</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            FormRun budgetCycleFormLookup;

            budgetCycleLookupArgs = new Args(formStr(BudgetCycleLookup));
            budgetCycleLookupArgs.caller(this);
            budgetCycleLookupArgs.parmEnum(NoYes::No);

            budgetCycleFormLookup = ClassFactory::formRunClassOnClient(budgetCycleLookupArgs);

            budgetCycleFormLookup.init();

            budgetCycleLookup.performFormLookup(budgetCycleFormLookup);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            BudgetControlConfiguration  budgetControlConfiguration;
            BudgetControlBudgetCycle    budgetControlBudgetCycle;
            BudgetCycleName             budgetCycleName;
            BudgetModel                 budgetModel;
            boolean ret;

            ret = super();

            budgetCycle = null;
            budgetCycleName = budgetCycleLookup.text();

            if (budgetCycleName == '')
            {
                budgetCycle = null;
            }
            else if (budgetCycleLookupArgs != null &&
                    budgetCycleLookupArgs.dataset() == tableNum(BudgetCycle) &&
                    budgetCycleLookupArgs.record() != null)
            {
                budgetCycle = budgetCycleLookupArgs.record() as BudgetCycle;
                budgetCycleLookupArgs.record(null);
            }
            else
            {
                select firstonly * from budgetCycle
                    where budgetCycle.Name == budgetCycleName
                    exists join budgetControlBudgetCycle
                        where budgetControlBudgetCycle.BudgetCycle == budgetCycle.RecId
                    exists join budgetControlConfiguration
                        where budgetControlConfiguration.RecId == budgetControlBudgetCycle.BudgetControlConfiguration &&
                            budgetControlConfiguration.PrimaryLedger == Ledger::current() &&
                            budgetControlConfiguration.IsActive == true;
            }

            budgetModelLookup.text('');
            dimensionAttribValueCombination = null;
            ledgerDimensionValues.text('');
            budgetGroupRecId = 0;
            budgetGroupLookup.text('');
            mainAccount = null;
            mainAccountLookup.text('');

            if (budgetCycle)
            {
                select firstonly ModelId from budgetModel
                    where budgetModel.Blocked == NoYes::No
                    exists join budgetControlBudgetCycle
                        where budgetModel.ModelId == budgetControlBudgetCycle.BudgetModelId &&
                            budgetControlBudgetCycle.BudgetCycle == budgetCycle.RecId
                    exists join budgetControlConfiguration
                        where budgetControlConfiguration.RecId == budgetControlBudgetCycle.BudgetControlConfiguration &&
                            budgetControlConfiguration.PrimaryLedger == Ledger::current() &&
                            budgetControlConfiguration.IsActive == true;

                budgetModelLookup.text(budgetModel.ModelId);
            }
            else if (budgetCycleName == '')
            {
                budgetModelLookup.allowEdit(false);
            }
            else
            {
                budgetModelLookup.allowEdit(false);
                ret = checkFailed(strFmt("@SYS315908", budgetCycleName, fieldPName(BudgetCycle, Name), tablePName(BudgetCycle)));
            }

            element.setUpdateTotalsButtonVisibility();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetControlStatisticsValueOptionButton</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (BudgetControlStatisticsValueOptionButton.selection() == BudgetControlStatisticsValueOption::DimensionValues)
            {
                ledgerDimensionValues.visible(true);
                budgetGroupLookup.visible(false);
                budgetGroupRecId = 0;
                budgetGroupLookup.text('');
            }
            else
            {
                ledgerDimensionValues.visible(false);
                budgetGroupLookup.visible(true);
                dimensionAttribValueCombination = null;
                ledgerDimensionValues.text('');
            }

            mainAccount = null;
            mainAccountLookup.text('');

            element.setUpdateTotalsButtonVisibility();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LedgerDimensionValues</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            FormRun budgetLedgerDimensionLookup;

            budgetControlLedgerDimLookupArgs = new Args(formStr(BudgetLedgerDimensionLookup));
            budgetControlLedgerDimLookupArgs.caller(this);
            budgetControlLedgerDimLookupArgs.record(budgetCycle);

            budgetLedgerDimensionLookup = ClassFactory::formRunClassOnClient(budgetControlLedgerDimLookupArgs);

            budgetLedgerDimensionLookup.init();

            ledgerDimensionValues.performFormLookup(budgetLedgerDimensionLookup);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            DimensionDisplayValue controlDimensionDisplayValue;

            ret = super();

            dimensionAttribValueCombination = null;
            mainAccount = null;
            mainAccountLookup.text('');

            if (ledgerDimensionValues.text() == '')
            {
                dimensionAttribValueCombination = null;
            }
            else if (budgetControlLedgerDimLookupArgs != null &&
                 budgetControlLedgerDimLookupArgs.dataset() == tableNum(DimensionAttributeValueCombination) &&
                 budgetControlLedgerDimLookupArgs.record() != null)
            {
                dimensionAttribValueCombination = budgetControlLedgerDimLookupArgs.record() as DimensionAttributeValueCombination;
                budgetControlLedgerDimLookupArgs.record(null);
            }
            else
            {
                controlDimensionDisplayValue = ledgerDimensionValues.text();

                if (controlDimensionDisplayValue)
                {
                    // Find the first DAVC which matches the display value when the user types in a dimension value and tabs off.
                    dimensionAttribValueCombination = BudgetControlStatisticsManager::getLedgerDimensionBudgetControl(controlDimensionDisplayValue);
                    if (dimensionAttribValueCombination == null)
                    {
                        ret = checkFailed(strFmt("@SYS315908", controlDimensionDisplayValue, fieldpname(DimensionAttributeValueCombination, DisplayValue), tablepname(DimensionAttributeValueCombination)));
                    }
                }
            }

            if (dimensionAttribValueCombination)
            {
                RecId activeBudgetCycleTimeSpanRecId = BudgetControlRuleLedgerDimension::getActiveBudgetCycleTimeSpanRecId(Ledger::current(), dimensionAttribValueCombination.RecId);

                if (activeBudgetCycleTimeSpanRecId != budgetCycle.BudgetCycleTimeSpan)
                {
                    // The combination is not valid for the selected budget cycle and active budget control configuration.
                    checkFailed(strFmt("@Budget:ControlStatisticsDimensionValuesParameterError", budgetModelLookup.text()));

                    dimensionAttribValueCombination = null;
                    ledgerDimensionValues.text('');
                }
            }

            element.setUpdateTotalsButtonVisibility();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetGroupLookup</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Query                   query          = new Query();
            QueryBuildDataSource    budgetGroup_qbds;
            QueryBuildDataSource    budgetGroupMember_qbds;
            QueryBuildDataSource    budgetControlConfiguration_qbds;

            // Create an instance of SysTableLookup where 'this'
            // is the current form control.
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(BudgetGroupMember), this);

            // Add fields to be shown in the lookup form.
            sysTableLookup.addLookupfield(fieldNum(BudgetGroupMember, Name));
            sysTableLookup.addLookupfield(fieldNum(BudgetGroupMember, Description));

            // Limit and arrange the data selection.
            budgetGroupMember_qbds = query.addDataSource(tableNum(BudgetGroupMember));
            budgetGroupMember_qbds.addRange(fieldNum(BudgetGroupMember, ParentBudgetGroupMember)).value(SysQuery::valueEmptyString());
            budgetGroup_qbds = budgetGroupMember_qbds.addDataSource(tableNum(BudgetGroup));
            budgetGroup_qbds.joinMode(JoinMode::InnerJoin);
            budgetGroup_qbds.addLink(fieldNum(BudgetGroupMember, BudgetGroup), fieldNum(BudgetGroup, RecId));
            budgetControlConfiguration_qbds = budgetGroup_qbds.addDataSource(tableNum(BudgetControlConfiguration));
            budgetControlConfiguration_qbds.joinMode(JoinMode::InnerJoin);
            budgetControlConfiguration_qbds.addLink(fieldNum(BudgetGroup, BudgetControlConfiguration), fieldNum(BudgetControlConfiguration, RecId));
            budgetControlConfiguration_qbds.addRange(fieldNum(BudgetControlConfiguration, PrimaryLedger)).value(SysQuery::value(Ledger::current()));
            budgetControlConfiguration_qbds.addRange(fieldNum(BudgetControlConfiguration, IsActive)).value(int2str(enum2int(NoYes::Yes)));

            // Restrict to the active configuration groups and dates for the selected budget cycle.
            BudgetGroupLedgerDimension::addActiveGroupBudgetCycleRangesToQuery(query, budgetCycle);

            sysTableLookup.parmQuery(query);

            // Perform the lookup.
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            BudgetGroupMember           budgetGroupMember;
            BudgetGroup                 budgetGroup;
            BudgetControlConfiguration  budgetControlConfiguration;
            boolean ret;
            BudgetGroupMemberName   budgetGroupName;

            ret = super();

            mainAccount = null;
            mainAccountLookup.text('');

            budgetGroupName = budgetGroupLookup.text();

            select firstonly BudgetGroup
                from budgetGroupMember
                    where budgetGroupMember.Name == budgetGroupName
                    && budgetGroupMember.ParentBudgetGroupMember == 0
                join *
                    from budgetGroup
                        where budgetGroup.RecId == budgetGroupMember.BudgetGroup
                join RecId
                    from budgetControlConfiguration
                        where budgetControlConfiguration.PrimaryLedger == Ledger::current()
                            && budgetControlConfiguration.RecId == budgetGroup.BudgetControlConfiguration;

            budgetGroupRecId = budgetGroupMember.BudgetGroup;

            if (budgetGroup && budgetGroup.BudgetCycleTimeSpan != budgetCycle.BudgetCycleTimeSpan)
            {
                // The budget group is not valid for the selected budget cycle and active budget control configuration.
                ret = checkFailed(strFmt("@Budget:ControlStatisticsBudgetGroupParameterError", budgetModelLookup.text()));
            }
            else if (budgetGroupRecId == 0)
            {
                ret = checkFailed(strFmt("@SYS315908", budgetGroupName, fieldPName(BudgetGroupMember, Name), tablePName(BudgetGroupMember)));
            }

            element.setUpdateTotalsButtonVisibility();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MainAccountLookup</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Query                   query = new Query();
            QueryBuildDataSource    mainAccountBuildDataSource;
            QueryBuildDataSource    ledgerChartOfAccountsBuildDataSource;
            QueryBuildDataSource    ledgerBuildDataSource;

            QueryBuildDataSource    budgetSourceTrackingDetailDataSource;
            QueryBuildDataSource    sourceLedgerDimensionDataSource;
            QueryBuildDataSource    budgetGroupLedgerDimensionDataSource;

            // Create an instance of SysTableLookup where 'this'
            // is the current form control.
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(MainAccount), this);

            // Add fields to be shown in the lookup form.
            sysTableLookup.addLookupfield(fieldNum(MainAccount, MainAccountId));
            sysTableLookup.addLookupMethod(tableMethodStr(MainAccount, localizedName));

            // Limit and arrange the data selection.
            mainAccountBuildDataSource = query.addDataSource(tableNum(MainAccount));

            // Restrict to main accounts that have been part of a budget check.
            sourceLedgerDimensionDataSource = mainAccountBuildDataSource.addDataSource(tableNum(DimensionAttributeValueCombination));
            sourceLedgerDimensionDataSource.joinMode(JoinMode::ExistsJoin);
            sourceLedgerDimensionDataSource.addLink(fieldNum(MainAccount, RecId), fieldNum(DimensionAttributeValueCombination, MainAccount));

            budgetSourceTrackingDetailDataSource = sourceLedgerDimensionDataSource.addDataSource(tableNum(BudgetSourceTrackingDetail));
            budgetSourceTrackingDetailDataSource.joinMode(JoinMode::ExistsJoin);
            budgetSourceTrackingDetailDataSource.addLink(fieldNum(DimensionAttributeValueCombination, RecId), fieldNum(BudgetSourceTrackingDetail, BudgetSourceLedgerDimension));

            // Restrict to the active configuration rules and dates for the selected budget cycle.
            BudgetControlRuleLedgerDimension::addActiveRuleBudgetCycleRangesToQuery(query, budgetCycle);

            if (dimensionAttribValueCombination)
            {
                // Restrict to main accounts that contributed to the selected budget control balance.
                budgetSourceTrackingDetailDataSource.addRange(fieldNum(BudgetSourceTrackingDetail, BudgetControlLedgerDimension)).value(
                    SysQuery::value(dimensionAttribValueCombination.RecId));
            }
            else if (budgetGroupRecId)
            {
                // Restrict to main accounts that contributed to the selected budget group balance.
                budgetGroupLedgerDimensionDataSource = budgetSourceTrackingDetailDataSource.addDataSource(tableNum(BudgetGroupLedgerDimension));
                budgetGroupLedgerDimensionDataSource.joinMode(JoinMode::ExistsJoin);
                budgetGroupLedgerDimensionDataSource.addLink(fieldNum(BudgetSourceTrackingDetail, BudgetControlLedgerDimension), fieldNum(BudgetGroupLedgerDimension, BudgetControlLedgerDimension));

                budgetGroupLedgerDimensionDataSource.addRange(fieldNum(BudgetGroupLedgerDimension, BudgetGroup)).value(
                    SysQuery::value(budgetGroupRecId));
            }
            else
            {
                ledgerChartOfAccountsBuildDataSource = mainAccountBuildDataSource.addDataSource(tableNum(LedgerChartOfAccounts));
                ledgerChartOfAccountsBuildDataSource.joinMode(JoinMode::ExistsJoin);
                ledgerChartOfAccountsBuildDataSource.addLink(fieldNum(MainAccount, LedgerChartOfAccounts), fieldNum(LedgerChartOfAccounts, RecId));

                ledgerBuildDataSource = ledgerChartOfAccountsBuildDataSource.addDataSource(tableNum(Ledger));
                ledgerBuildDataSource.joinMode(JoinMode::ExistsJoin);
                ledgerBuildDataSource.addLink(fieldNum(LedgerChartOfAccounts, RecId), fieldNum(Ledger, ChartOfAccounts));
                ledgerBuildDataSource.addRange(fieldNum(Ledger, RecId)).value(SysQuery::value(Ledger::current()));
            }

            sysTableLookup.parmQuery(query);

            // Perform the lookup.
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            mainAccount = MainAccount::findByMainAccountId(mainAccountLookup.text());

            if (mainAccountLookup.text() != "" && mainAccount == null)
            {
                ret = checkFailed(strFmt("@SYS315908", mainAccountLookup.text(), fieldPName(MainAccount, MainAccountId), tablePName(MainAccount)));
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PeriodSelection</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Makes changes to the form based on the Period selection that is selected.
        /// </summary>
        /// <returns>
        /// The result of the super call.
        /// </returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BalanceType</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Makes changes to the form based on the Balance type that is selected.
        /// </summary>
        /// <returns>
        /// The result of the super call.
        /// </returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>BudgetTmpControlStatistics</Name>
			<Table>BudgetTmpControlStatistics</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActualAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmendmentAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApportionmentAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetControlLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetCycle</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetModel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetModelSubModel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetModelType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CarryForwardActualExpenditureAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CarryForwardBudgetAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CarryForwardEncumbranceAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CarryForwardEncumbranceReliefAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DimensionFocus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DraftAmendmentAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DraftEncumbranceAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DraftEncumbranceReductionAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DraftPreEncumbranceAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DraftTransferInAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DraftTransferOutAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EncumbranceAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EncumbranceReductionReliefAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EncumbranceReliefAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>includeAllAccounts</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IncludeCarryforward</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsApportionmentVisible</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MainAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalBudgetAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PeriodEndDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PeriodStartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreEncumbranceAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreEncumbranceReliefAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreliminaryAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryLedger</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalActualAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalApportionmentAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalEncumbrancesAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalFundsAvailableAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalPreEncumbranceAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalRevisedBudgetAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransferAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UnpostedActualAmountMST</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoNotify>No</AutoNotify>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<BottomMargin xmlns="">0</BottomMargin>
		<BottomMarginMode xmlns="">Fixed</BottomMarginMode>
		<Caption xmlns="">@Budget:BudgetControlStatisticsByPeriodCaption</Caption>
		<Height xmlns="">600</Height>
		<LeftMargin xmlns="">0</LeftMargin>
		<LeftMarginMode xmlns="">Fixed</LeftMarginMode>
		<Pattern xmlns="">Custom</Pattern>
		<RightMargin xmlns="">0</RightMargin>
		<RightMarginMode xmlns="">Fixed</RightMarginMode>
		<SetCompany xmlns="">No</SetCompany>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<StatusBarStyle xmlns="">Simple</StatusBarStyle>
		<Style xmlns="">SimpleList</Style>
		<TitleDataSource xmlns="">BudgetTmpControlStatistics</TitleDataSource>
		<TopMargin xmlns="">0</TopMargin>
		<TopMarginMode xmlns="">Fixed</TopMarginMode>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Width xmlns="">960</Width>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>UpdateTotalsButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Enabled>No</Enabled>
								<NeededPermission>Read</NeededPermission>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<DefaultButton>Yes</DefaultButton>
								<Text>@Budget:BudgetInquiryUpdateTotalsButton</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>RevisedBudgetInquiryButton</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>BudgetTmpControlStatistics</DataSource>
								<MenuItemName>BudgetControlRevisedBudget</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ActualExpendituresInquiryButton</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>BudgetTmpControlStatistics</DataSource>
								<MenuItemName>BudgetControlActualExpenditures</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ApportionmentsButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1342177278</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>BudgetTmpControlStatistics</DataSource>
								<MenuItemName>BudgetControlApportionments</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>EncumbrancesButton</Name>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>BudgetTmpControlStatistics</DataSource>
								<MenuItemName>BudgetControlEncumbrances</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>PreEncumbrancesInquiryButton</Name>
								<ElementPosition>2013265918</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>BudgetTmpControlStatistics</DataSource>
								<MenuItemName>BudgetControlPreEncumbrances</MenuItemName>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<DataSource>BudgetTmpControlStatistics</DataSource>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>FiltersAndGridTab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>FiltersTabPage</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ParametersGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SelectBudgetCycle</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BudgetCycleLookup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>BudgetCycleName</ExtendedDataType>
												<Label>@SYS314460</Label>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BudgetModelLookup</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS1966</Label>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>Auto</ArrangeMethod>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SelectDimensionValues</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>BudgetControlStatisticsValueOptionButton</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>RadioButton</Type>
												<FormControlExtension
													i:nil="true" />
												<Caption>@Budget:DimensionDetail</Caption>
												<EnumType>BudgetControlStatisticsValueOption</EnumType>
												<Items />
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>LedgerDimensionValues</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS152256</Label>
												<LabelPosition>Above</LabelPosition>
												<LookupButton>Always</LookupButton>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BudgetGroupLookup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS127618</Label>
												<LabelPosition>Above</LabelPosition>
												<Mandatory>Yes</Mandatory>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>MainAccountLookup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_Budgeting:BudgetControlStatistics_MainAccountLookup</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS129344</Label>
												<LookupButton>Always</LookupButton>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>Auto</ArrangeMethod>
										<Breakable>No</Breakable>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRadioButtonControl">
										<Name>PeriodSelection</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_Budgeting:BudgetControlStatistics_PeriodSelection</HelpText>
										<Type>RadioButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Caption>@SYS129873</Caption>
										<EnumType>BudgetControlStatisticsPeriodOption</EnumType>
										<Selection>1</Selection>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRadioButtonControl">
										<Name>BalanceType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_Budgeting:BudgetControlStatistics_BalanceType</HelpText>
										<Type>RadioButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>BudgetControlStatisticsBalanceType</ExtendedDataType>
										<Selection>1</Selection>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRadioButtonControl">
										<Name>CarryForwardAmountsRadioButton</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>RadioButton</Type>
										<FormControlExtension
											i:nil="true" />
										<Caption>@Budget:CarryForwardAmountsInTotals</Caption>
										<EnumType>BudgetControlStatisticsCarryForwardOption</EnumType>
										<Items />
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalWrap</ArrangeMethod>
								<ColumnsMode>Fill</ColumnsMode>
							</AxFormControl>
						</Controls>
						<Caption>@Budget:BudgetInquiryParametersTabPage</Caption>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>DetailsGridTabPage</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>PeriodBalanceDetails</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>BudgetTmpControlStatistics_PeriodStartDate</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_Budgeting:BudgetControlStatistics_BudgetTmpControlStatistics_PeriodStartDate</HelpText>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>PeriodStartDate</DataField>
										<DataSource>BudgetTmpControlStatistics</DataSource>
										<DisplayLength>20</DisplayLength>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TotalFundsAvailable</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_Budgeting:BudgetControlStatistics_TotalFundsAvailable</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TotalFundsAvailableAmountMST</DataField>
										<DataSource>BudgetTmpControlStatistics</DataSource>
										<DisplayLength>100</DisplayLength>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TotalApportionmentAmountMST</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1744830462</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TotalApportionmentAmountMST</DataField>
										<DataSource>BudgetTmpControlStatistics</DataSource>
										<DisplayLength>100</DisplayLength>
										<Label>@SPS382</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TotalRevisedBudget</Name>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_Budgeting:BudgetControlStatistics_TotalRevisedBudget</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TotalRevisedBudgetAmountMST</DataField>
										<DataSource>BudgetTmpControlStatistics</DataSource>
										<DisplayLength>100</DisplayLength>
										<Label>@SYS129880</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TotalActuals</Name>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_Budgeting:BudgetControlStatistics_TotalActuals</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TotalActualAmountMST</DataField>
										<DataSource>BudgetTmpControlStatistics</DataSource>
										<DisplayLength>100</DisplayLength>
										<IMEMode>Disabled</IMEMode>
										<Label>@SYS302069</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>totalEncumbrances</Name>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_Budgeting:BudgetControlStatistics_totalEncumbrances</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TotalEncumbrancesAmountMST</DataField>
										<DataSource>BudgetTmpControlStatistics</DataSource>
										<DisplayLength>100</DisplayLength>
										<Label>@SYS127637</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TotalPreEncumbrances</Name>
										<ElementPosition>2113929214</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_Budgeting:BudgetControlStatistics_TotalPreEncumbrances</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TotalPreEncumbranceAmountMST</DataField>
										<DataSource>BudgetTmpControlStatistics</DataSource>
										<DisplayLength>100</DisplayLength>
										<Label>@SYS127639</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<DataSource>BudgetTmpControlStatistics</DataSource>
								<MultiSelect>No</MultiSelect>
								<ShowRowLabels>No</ShowRowLabels>
							</AxFormControl>
						</Controls>
						<Caption>@Budget:BudgetInquiryResultsTabPage</Caption>
						<FastTabExpanded>Always</FastTabExpanded>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>BudgetFundsAvailableCalculation</Name>
				<ElementPosition>1879048190</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Pattern>FillText</Pattern>
				<PatternVersion>UX7 1.0</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStaticTextControl">
						<Name>budgetFundsAvailableExpressionStatic</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>StaticText</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Text></Text>
					</AxFormControl>
				</Controls>
				<FrameType>None</FrameType>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts>
		<AxFormPartReference xmlns="">
			<Name>BudgetControlBalances</Name>
			<DataSource>BudgetTmpControlStatistics</DataSource>
			<DataSourceRelation>SelfLink</DataSourceRelation>
			<ElementPosition>306783378</ElementPosition>
			<IsLinked>Yes</IsLinked>
			<MenuItemName>BudgetControlBalancesPart</MenuItemName>
		</AxFormPartReference>
		<AxFormPartReference xmlns="">
			<Name>BudgetControlBalancesActuals</Name>
			<DataSource>BudgetTmpControlStatistics</DataSource>
			<DataSourceRelation>SelfLink</DataSourceRelation>
			<ElementPosition>613566756</ElementPosition>
			<IsLinked>Yes</IsLinked>
			<MenuItemName>BudgetControlBalancesActualsPart</MenuItemName>
		</AxFormPartReference>
		<AxFormPartReference xmlns="">
			<Name>BudgetControlApportionments</Name>
			<DataSource>BudgetTmpControlStatistics</DataSource>
			<DataSourceRelation>SelfLink</DataSourceRelation>
			<ElementPosition>920350134</ElementPosition>
			<MenuItemName>BudgetControlApportionmentsPart</MenuItemName>
		</AxFormPartReference>
		<AxFormPartReference xmlns="">
			<Name>BudgetControlBalancesCarryforward</Name>
			<DataSource>BudgetTmpControlStatistics</DataSource>
			<DataSourceRelation>SelfLink</DataSourceRelation>
			<ElementPosition>1227133512</ElementPosition>
			<IsLinked>Yes</IsLinked>
			<MenuItemName>BudgetControlBalancesCarryforwardPart</MenuItemName>
		</AxFormPartReference>
		<AxFormPartReference xmlns="">
			<Name>BudgetControlBalancesEncumbrances</Name>
			<DataSource>BudgetTmpControlStatistics</DataSource>
			<DataSourceRelation>SelfLink</DataSourceRelation>
			<ElementPosition>1533916890</ElementPosition>
			<IsLinked>Yes</IsLinked>
			<MenuItemName>BudgetControlBalancesEncumbrancesPart</MenuItemName>
		</AxFormPartReference>
		<AxFormPartReference xmlns="">
			<Name>BudgetControlBalancesPreEncumbrances</Name>
			<DataSource>BudgetTmpControlStatistics</DataSource>
			<DataSourceRelation>SelfLink</DataSourceRelation>
			<ElementPosition>1840700268</ElementPosition>
			<IsLinked>Yes</IsLinked>
			<MenuItemName>BudgetControlBalancesPreEncumbrancesPart</MenuItemName>
		</AxFormPartReference>
	</Parts>
</AxForm>