<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>CustVendPaymFormat</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class CustVendPaymFormat extends FormRun
{
    ModuleCustVend                      module;
    CustVendPaymFormatCtrl              paymFormatCtrl;
    boolean                             norwayEnabled;

    SysListPanelSet_CustVendFileFormat  sysListPanelExport;
    SysListPanelSet_CustVendFileFormat  sysListPanelImport;
    SysListPanelSet_CustVendFileFormat  sysListPanelReturn;
    SysListPanelSet_CustVendFileFormat  sysListPanelRemittance;
    SysListPanelSet_CustVendFileFormat  sysListPanelFileAnalyze;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        #ISOCountryRegionCodes

        norwayEnabled = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]);

        sysListPanelExport = SysListPanelSet_CustVendFileFormat::newForm(element,
            element.controlId(formControlStr(CustVendPaymFormat, TabExport)),
            false,
            false);

        sysListPanelImport = SysListPanelSet_CustVendFileFormat::newForm(element,
            element.controlId(formControlStr(CustVendPaymFormat, TabImport)),
            false,
            false);

        sysListPanelReturn = SysListPanelSet_CustVendFileFormat::newForm(element,
            element.controlId(formControlStr(CustVendPaymFormat, TabReturn)),
            false,
            false);

        sysListPanelRemittance = SysListPanelSet_CustVendFileFormat::newForm(element,
            element.controlId(formControlStr(CustVendPaymFormat, TabRemittance)),
            false,
            false);

        if (norwayEnabled)
        {
            sysListPanelFileAnalyze = SysListPanelSet_CustVendFileFormat::newForm(element,
                                                               element.controlId(formControlStr(CustVendPaymFormat, TabFileAnalyze)),
                                                               false,
                                                               false);
        }

        element.args().lookupRecord(null);

        super();

        sysListPanelExport.parmBankFormat(BankFormat::Export);
        sysListPanelImport.parmBankFormat(BankFormat::Import);
        sysListPanelReturn.parmBankFormat(BankFormat::ReturnFormat);
        sysListPanelRemittance.parmBankFormat(BankFormat::Remittance);

        if (norwayEnabled)
        {
            sysListPanelFileAnalyze.parmBankFormat(BankFormat::FileAnalyze);
        }

        sysListPanelExport.init();
        sysListPanelImport.init();
        sysListPanelReturn.init();
        sysListPanelRemittance.init();
        if (norwayEnabled)
        {
            sysListPanelFileAnalyze.init();
        }
        module = element.args().parmEnum();

        sysListPanelExport.parmModule(module);
        sysListPanelImport.parmModule(module);
        sysListPanelReturn.parmModule(module);
        sysListPanelRemittance.parmModule(module);

        if (norwayEnabled)
        {
            sysListPanelFileAnalyze.parmModule(module);
        }
        if (module == ModuleCustVend::Cust)
        {
            tabImport.visible(true);
        }

        paymFormatCtrl = CustVendPaymFormatCtrl::contruct(module);

        if (norwayEnabled)
        {
            paymFormatCtrl.setControls(sysListPanelExport.parmViewAvailable(),       sysListPanelExport.parmViewSelected(),
                                       sysListPanelImport.parmViewAvailable(),       sysListPanelImport.parmViewSelected(),
                                       sysListPanelReturn.parmViewAvailable(),       sysListPanelReturn.parmViewSelected(),
                                       sysListPanelRemittance.parmViewAvailable(),   sysListPanelRemittance.parmViewSelected(),
                                       sysListPanelFileAnalyze.parmViewAvailable(),  sysListPanelFileAnalyze.parmViewSelected());
        }
        else
        {
            paymFormatCtrl.setControls(sysListPanelExport.parmViewAvailable(),       sysListPanelExport.parmViewSelected(),
                                       sysListPanelImport.parmViewAvailable(),       sysListPanelImport.parmViewSelected(),
                                       sysListPanelReturn.parmViewAvailable(),       sysListPanelReturn.parmViewSelected(),
                                       sysListPanelRemittance.parmViewAvailable(),   sysListPanelRemittance.parmViewSelected());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        int                         i;
        container                   members;
        container                   available;

        container                   exportClasses;
        container                   importClasses;
        container                   returnClasses;
        container                   remittanceClasses;
        container                   fileAnalyzeClasses;
        container                   exportNames;
        container                   importNames;
        container                   returnNames;
        container                   remittanceNames;
        container                   fileAnalyzeNames;

        CustVendPaymModeClassId     classId;
        #ISOCountryRegionCodes

        super();

        if (norwayEnabled)
        {
            [exportClasses,
             exportNames,
             importClasses,
             importNames,
             returnClasses,
             returnNames,
             remittanceClasses,
             remittanceNames,
             fileAnalyzeClasses,
             fileAnalyzeNames] = paymFormatCtrl.allAvailableFormats();
        }
        else
        {
            [exportClasses,
             exportNames,
             importClasses,
             importNames,
             returnClasses,
             returnNames,
             remittanceClasses,
             remittanceNames] = paymFormatCtrl.allAvailableFormats();
        }

        for (i = 1; i <= conlen(exportClasses); i++)
        {
            classId = conpeek(exportClasses, i);
        }

        for (i = 1; i <= conlen(importClasses); i++)
        {
            classId = conpeek(importClasses, i);
        }

        for (i = 1; i <= conlen(returnClasses); i++)
        {
            classId = conpeek(returnClasses, i);
        }

        for (i = 1; i <= conlen(remittanceClasses); i++)
        {
            classId = conpeek(remittanceClasses, i);
        }

        if (norwayEnabled)
        {
            for (i = 1; i <= conlen(fileAnalyzeClasses); i++)
            {
                classId = conpeek(fileAnalyzeClasses, i);
            }
        }

        sysListPanelExport.parmAllowedSet(new Set(Types::Integer));
        sysListPanelExport.parmInSet(new Set(Types::Integer));
        members     = paymFormatCtrl.selectedFormats(BankFormat::Export);
        available   = exportClasses;

        for (i=conlen(members);i;i--)
        {
            sysListPanelExport.parmInSet().add(conpeek(members,i));
        }

        for (i=conlen(available);i;i--)
        {
            sysListPanelExport.parmAllowedSet().add(conpeek(available,i));
        }
        sysListPanelExport.fill();

        sysListPanelImport.parmAllowedSet(new Set(Types::Integer));
        sysListPanelImport.parmInSet(new Set(Types::Integer));
        members     = paymFormatCtrl.selectedFormats(BankFormat::Import);
        available   = importClasses;

        for (i=conlen(members);i;i--)
        {
            sysListPanelImport.parmInSet().add(conpeek(members,i));
        }

        for (i=conlen(available);i;i--)
        {
            sysListPanelImport.parmAllowedSet().add(conpeek(available,i));
        }
        sysListPanelImport.fill();

        sysListPanelReturn.parmAllowedSet(new Set(Types::Integer));
        sysListPanelReturn.parmInSet(new Set(Types::Integer));
        members     = paymFormatCtrl.selectedFormats(BankFormat::ReturnFormat);
        available   = returnClasses;

        for (i=conlen(members);i;i--)
        {
            sysListPanelReturn.parmInSet().add(conpeek(members,i));
        }

        for (i=conlen(available);i;i--)
        {
            sysListPanelReturn.parmAllowedSet().add(conpeek(available,i));
        }
        sysListPanelReturn.fill();

        sysListPanelRemittance.parmAllowedSet(new Set(Types::Integer));
        sysListPanelRemittance.parmInSet(new Set(Types::Integer));
        members     = paymFormatCtrl.selectedFormats(BankFormat::Remittance);
        available   = remittanceClasses;

        for (i=conlen(members);i;i--)
        {
            sysListPanelRemittance.parmInSet().add(conpeek(members,i));
        }

        for (i=conlen(available);i;i--)
        {
            sysListPanelRemittance.parmAllowedSet().add(conpeek(available,i));
        }
        sysListPanelRemittance.fill();

        if (norwayEnabled)
        {
            sysListPanelFileAnalyze.parmAllowedSet(new Set(Types::Integer));
            sysListPanelFileAnalyze.parmInSet(new Set(Types::Integer));
            members     = paymFormatCtrl.selectedFormats(BankFormat::FileAnalyze);
            available   = fileAnalyzeClasses;

            for (i=conlen(members);i;i--)
            {
                sysListPanelFileAnalyze.parmInSet().add(conpeek(members,i));
            }

            for (i=conlen(available);i;i--)
            {
                sysListPanelFileAnalyze.parmAllowedSet().add(conpeek(available,i));
            }
            sysListPanelFileAnalyze.fill();
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@SYS67302</Caption>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">SimpleDetails-StandardTabsContainer</Pattern>
		<PatternVersion xmlns="">1.5</PatternVersion>
		<StatusBarStyle xmlns="">None</StatusBarStyle>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabExport</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS26056</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabImport</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS31100</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabReturn</Name>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS101134</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabRemittance</Name>
						<ElementPosition>2013265918</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS57964</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabFileAnalyze</Name>
						<ElementPosition>2080374782</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS119478</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>