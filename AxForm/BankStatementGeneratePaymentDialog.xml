<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BankStatementGeneratePaymentDialog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BankStatementGeneratePaymentDialog extends FormRun
{
    private FormRun callerForm;
    private str callerFormName;
    private List bankStmtISOReportEntryRecIdList;
    private BankAccountTable bankAccountTable;
    private boolean isCustPay;

    boolean isFinTagConfigurationSetForCurrent = FinTagConfiguration::isFinTagConfigurationSet(curExt());

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
        callerForm = this.args().caller();
        callerFormName = this.args().callerName();
        bankAccountTable = element.args().record();
        bankStmtISOReportEntryRecIdList = element.args().parmObject();
        if (BankStmtGeneratePaymentFinTagFlight::instance().isEnabled())
        {
            this.initFinancialTags();
        }
        FinancialDimensionTabPage.visible(BankStmtGeneratePaymentFinDimensionFlight::instance().isEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFinancialTags</Name>
				<Source><![CDATA[
    private void initFinancialTags()
    {
        if (isFinTagConfigurationSetForCurrent)
        {
            FinTagReferenceGroupController::registerReferenceGroup(
                FinTagReferenceGroupControllerContract::construct(FinTag_GenPay));
            FinTagReferenceGroupController::registerReferenceGroup(
                FinTagReferenceGroupControllerContract::construct(FinTagOffset_GenPay));
        }
        else
        {
            FinancialTagTab.visible(false);
            FinTag_GenPay.visible(false);
            FinTagOffset_GenPay.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultTransactionTxt</Name>
				<Source><![CDATA[
    private void setDefaultTransactionTxt()
    {
        /// When generating payment for one line, use the AdditionalEntryInformation field as default description;
        /// When multiple lines are selected, on dialog UI there is still one single entry for journal description, so all the posted journal lines will share one common description.
        /// If the selected statement lines have different default descriptions, it is conflicting to choose one, therefore there is no default logic for multiple lines.
        if (bankStmtISOReportEntryRecIdList.elements() == 1)
        {
            ListEnumerator enumerator = bankStmtISOReportEntryRecIdList.getEnumerator();
            enumerator.moveNext();

            BankStmtISOReportEntry statementLine = BankStmtISOReportEntry::find(enumerator.current());
            BankStatementLinePaymentInformation.Txt = statementLine.AdditionalEntryInformation;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGeneratePaymentButtonEnabled</Name>
				<Source><![CDATA[
    private void setGeneratePaymentButtonEnabled()
    {
        boolean canEnable = BankStatementLinePaymentInformation.CustAccount || BankStatementLinePaymentInformation.VendAccount;
        canEnable = canEnable && (BankPaymentTransDateType.selection() == BankPaymentTransDateType::BookingDate || BankStatementLinePaymentInformation.TransDate);
        OK.enabled(canEnable);
        Settle.enabled(canEnable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymModeBankTransType</Name>
				<Source><![CDATA[
    private void setPaymModeBankTransType(PaymMode _paymMode = null, boolean _isInit = true)
    {
        PaymMode paymMode;
        BankTransactionType bankTransType;
        if (element.isCustPay)
        {
            paymMode = _isInit ? CustTable::find(CustAccount.valueStr()).PaymMode : _paymMode;
            if (paymMode)
            {
                CustPaymModeTable paymModeTable = CustPaymModeTable::find(paymMode);
                if (paymModeTable.FurtherPosting == NoYes::No)
                {
                    bankTransType = paymModeTable.BankTransType;
                }
                else
                {
                    paymMode = null;
                }
            }
        }
        else
        {
            paymMode = _isInit ? VendTable::find(VendAccount.valueStr()).PaymMode : _paymMode;
            if (paymMode)
            {
                VendPaymModeTable paymModeTable = VendPaymModeTable::find(paymMode);
                if (paymModeTable.FurtherPosting == NoYes::No)
                {
                    bankTransType = paymModeTable.BankTransType;
                }
                else
                {
                    paymMode = null;
                }
            }
        }

        BankStatementLinePaymentInformation.PaymMode = paymMode;
        BankStatementLinePaymentInformation.BankTransType = bankTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultFinancialDimensions</Name>
				<Source><![CDATA[
    private void setDefaultFinancialDimensions()
    {
        if (element.isCustPay)
        {
            BankStatementLinePaymentInformation.DefaultDimension = CustTable::find(CustAccount.valueStr()).DefaultDimension;
        }
        else
        {
            BankStatementLinePaymentInformation.DefaultDimension = VendTable::find(VendAccount.valueStr()).DefaultDimension;
        }
        BankStatementLinePaymentInformation.DefaultDimensionOffset = bankAccountTable.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        BankStatementLinePaymentInformation.Posted = Posting.value() == 1 ? NoYes::Yes : NoYes::No;
        BankStatementPaymentJournalGenerator::generatePaymentForStmtLineList(
            bankAccountTable,
            bankStmtISOReportEntryRecIdList,
            BankPaymentType.selection(),
            BankStatementLinePaymentInformation);

        BankReconciliationMatchingMatchProcessor::processMatchForGeneratedPayment(bankAccountTable.AccountID, bankStmtISOReportEntryRecIdList);

        element.refreshForm();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshForm</Name>
				<Source><![CDATA[
    private void refreshForm()
    {
        if (callerForm && callerFormName == formStr(BankAutomationReconciliationWorksheet))
        {
            BankAutomationReconciliationWorksheetFormView worksheetFormView = callerForm.getFormView();
            worksheetFormView.refreshHeader();
            worksheetFormView.performFormRefresh();
            worksheetFormView.setGenerateDialogButton();
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>BankStatementLinePaymentInformation</Name>
				<Methods>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            super(_append);

            element.setDefaultTransactionTxt();

        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>BankPaymentType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            element.isCustPay = this.selection() == BankPaymentType::CustPayment;

            CustAccount.visible(element.isCustPay);
            VendAccount.visible(!element.isCustPay);
            PaymModeControl.visible(true);
            CustAccount.mandatory(element.isCustPay);
            VendAccount.mandatory(!element.isCustPay);
            BankStatementLinePaymentInformation.VendAccount = null;
            BankStatementLinePaymentInformation.CustAccount = null;
            BankStatementLinePaymentInformation.PaymMode = null;
            BankStatementLinePaymentInformation.BankTransType = null;
            OK.enabled(false);
            Settle.enabled(false);
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CustAccount</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            element.setPaymModeBankTransType();
            if (BankStmtGeneratePaymentFinDimensionFlight::instance().isEnabled())
            {
                element.setDefaultFinancialDimensions();
            }
            element.setGeneratePaymentButtonEnabled();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>VendAccount</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            element.setPaymModeBankTransType();
            if (BankStmtGeneratePaymentFinDimensionFlight::instance().isEnabled())
            {
                element.setDefaultFinancialDimensions();
            }
            element.setGeneratePaymentButtonEnabled();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PaymModeControl</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (element.isCustPay)
            {
                Query query = new Query();
                QueryBuildDataSource qbds = query.addDataSource(tablenum(CustPaymModeTable));
                qbds.addRange(fieldNum(CustPaymModeTable, FurtherPosting)).value(queryValue(NoYes::No));
                SysTableLookup sysTableLookup = SysTableLookup::newParameters(tablenum(CustPaymModeTable), this);
                sysTableLookup.addLookupfield(fieldnum(CustPaymModeTable, PaymMode));
                sysTableLookup.addLookupfield(fieldnum(CustPaymModeTable, Name));
                sysTableLookup.parmQuery(query);
                sysTableLookup.performFormLookup();
            }
            else
            {
                Query query = new Query();
                QueryBuildDataSource qbds = query.addDataSource(tablenum(VendPaymModeTable));
                qbds.addRange(fieldNum(VendPaymModeTable, FurtherPosting)).value(queryValue(NoYes::No));
                SysTableLookup sysTableLookup = SysTableLookup::newParameters(tablenum(VendPaymModeTable), this);
                sysTableLookup.addLookupfield(fieldnum(VendPaymModeTable, PaymMode));
                sysTableLookup.addLookupfield(fieldnum(VendPaymModeTable, Name));
                sysTableLookup.parmQuery(query);
                sysTableLookup.performFormLookup();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            element.setPaymModeBankTransType(this.text(), false);
            element.setGeneratePaymentButtonEnabled();
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret = super();
            PaymMode paymMode = this.text();
            if (ret && paymMode)
            {
                if (element.isCustPay)
                {
                    CustPaymModeTable paymModeTable = CustPaymModeTable::find(paymMode);
                    if (!paymModeTable || paymModeTable.FurtherPosting)
                    {
                        ret = checkFailed(strFmt("@CashManagement:BankStatementGeneratePaymentDialogPaymModeError", this.text(), this.label(), tablepname(CustPaymModeTable)));
                    }
                }
                else
                {
                    VendPaymModeTable paymModeTable = VendPaymModeTable::find(paymMode);
                    if (!paymModeTable || paymModeTable.FurtherPosting)
                    {
                        ret = checkFailed(strFmt("@CashManagement:BankStatementGeneratePaymentDialogPaymModeError", this.text(), this.label(), tablepname(VendPaymModeTable)));
                    }
                }
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BankPaymentTransDateType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            if (this.selection() == BankPaymentTransDateType::SpecificDate)
            {
                TransDate.visible(true);
                TransDate.mandatory(true);
            }
            else
            {
                TransDate.visible(false);
                TransDate.mandatory(false);
                BankStatementLinePaymentInformation.TransDate = dateNull();
            }

            element.setGeneratePaymentButtonEnabled();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TransDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            element.setGeneratePaymentButtonEnabled();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Settle</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            Args args;
            switch (BankPaymentType.selection())
            {
                case BankPaymentType::CustPayment:
                    CustTable custTable = CustTable::find(BankStatementLinePaymentInformation.CustAccount);

                    args = new Args(formstr(CustOpenTrans));
                    args.record(custTable);
                    args.caller(element);
                    args.parmObject(element.bankStmtISOReportEntryRecIdList);

                    new menufunction(menuItemDisplayStr(CustOpenTrans), MenuItemType::Display).run(args);
                    break;

                case BankPaymentType::VendPayment:
                    VendTable vendTable = VendTable::find(BankStatementLinePaymentInformation.VendAccount);

                    args = new Args(formstr(VendOpenTrans));
                    args.record(vendTable);
                    args.caller(element);
                    args.parmObject(element.bankStmtISOReportEntryRecIdList);

                    new menufunction(menuItemDisplayStr(VendOpenTransAction), MenuItemType::Display).run(args);
                    break;

                default:
                    break;
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>BankStatementLinePaymentInformation</Name>
			<Table>BankStatementLinePaymentInformation</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BankStmtISOReportEntry</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTransType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimensionOffset</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FinTag</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FinTagOffset</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JournalNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerJournalTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Posted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendAccount</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@CashManagement:BankStatementGeneratePostPaymentMenuLabel</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Pattern xmlns="">DialogFastTabs</Pattern>
		<PatternVersion xmlns="">1.0</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>ParametersTab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>PaymentTabPage</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>PaymentFirstLine</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>BankPaymentType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<Width>150</Width>
										<WidthMode>Manual</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<EnumType>BankPaymentType</EnumType>
										<HideFirstEntry>Yes</HideFirstEntry>
										<ViewEditMode>Edit</ViewEditMode>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CustAccount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>CustAccount</DataField>
										<DataSource>BankStatementLinePaymentInformation</DataSource>
										<Label>@SYS7149</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>VendAccount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>VendAccount</DataField>
										<DataSource>BankStatementLinePaymentInformation</DataSource>
										<Label>@SYS14048</Label>
										<ViewEditMode>Edit</ViewEditMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PaymModeControl</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>PaymMode</DataField>
										<DataSource>BankStatementLinePaymentInformation</DataSource>
										<Label>@SYS21698</Label>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>Posting</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Enabled>No</Enabled>
								<Type>CheckBox</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS5943</Label>
								<Value>1</Value>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>TransDateGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>BankPaymentTransDateType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@CashManagement:BankStatementGeneratePaymentDialogDateHelpText</HelpText>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<EnumType>BankPaymentTransDateType</EnumType>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>TransDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Date</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransDate</DataField>
										<DataSource>BankStatementLinePaymentInformation</DataSource>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
								</Controls>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>TransactionTxt</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>Txt</DataField>
								<DataSource>BankStatementLinePaymentInformation</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS55132</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>BankTabPage</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>BankGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BankTransTypeControl</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>BankTransType</DataField>
										<DataSource>BankStatementLinePaymentInformation</DataSource>
										<Label>@SYS71565</Label>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>@SYS22173</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>FinancialDimensionTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormTabControl">
								<Name>FinancialDimensionTab</Name>
								<Type>Tab</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormTabPageControl">
										<Name>FinancialDimension</Name>
										<Type>TabPage</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormContainerControl">
												<Name>DimensionEntryControl1</Name>
												<Type>Container</Type>
												<FormControlExtension>
													<Name>DimensionEntryControl</Name>
													<ExtensionComponents />
													<ExtensionProperties>
														<AxFormControlExtensionProperty>
															<Name>parmControllerClassName</Name>
															<Type>ExtendedDataType</Type>
															<TypeName>ClassName</TypeName>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmControlLabelText</Name>
															<Type>String</Type>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmEnumerationName</Name>
															<Type>String</Type>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmDataSourceName</Name>
															<Type>String</Type>
															<Value>BankStatementLinePaymentInformation</Value>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmValueSetReferenceField</Name>
															<Type>String</Type>
															<Value>DefaultDimension</Value>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmEnumValueSetReferenceField</Name>
															<Type>String</Type>
														</AxFormControlExtensionProperty>
													</ExtensionProperties>
												</FormControlExtension>
												<Controls />
											</AxFormControl>
										</Controls>
										<Caption>@SYS334441</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormTabPageControl">
										<Name>FinancialDimensionOffset</Name>
										<Type>TabPage</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormContainerControl">
												<Name>DimensionEntryControl1Copy1</Name>
												<Type>Container</Type>
												<FormControlExtension>
													<Name>DimensionEntryControl</Name>
													<ExtensionComponents />
													<ExtensionProperties>
														<AxFormControlExtensionProperty>
															<Name>parmControllerClassName</Name>
															<Type>ExtendedDataType</Type>
															<TypeName>ClassName</TypeName>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmControlLabelText</Name>
															<Type>String</Type>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmEnumerationName</Name>
															<Type>String</Type>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmDataSourceName</Name>
															<Type>String</Type>
															<Value>BankStatementLinePaymentInformation</Value>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmValueSetReferenceField</Name>
															<Type>String</Type>
															<Value>DefaultDimensionOffset</Value>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmEnumValueSetReferenceField</Name>
															<Type>String</Type>
														</AxFormControlExtensionProperty>
													</ExtensionProperties>
												</FormControlExtension>
												<Controls />
											</AxFormControl>
										</Controls>
										<Caption>@SYS11162</Caption>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>@SYS101181</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>FinancialTagTab</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormTabControl">
								<Name>FinTagTab</Name>
								<Type>Tab</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormTabPageControl">
										<Name>FinancialTags</Name>
										<Type>TabPage</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormReferenceGroupControl">
												<Name>FinTag_GenPay</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<PreviewPartRef>FinTagPreviewPart</PreviewPartRef>
												<Type>ReferenceGroup</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls />
												<HideIfEmpty>No</HideIfEmpty>
												<DataSource>BankStatementLinePaymentInformation</DataSource>
												<ReferenceField>FinTag</ReferenceField>
												<ReplacementFieldGroup>DisplayValue</ReplacementFieldGroup>
											</AxFormControl>
										</Controls>
										<Caption>@SYS334441</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormTabPageControl">
										<Name>FinancialTagsOffset</Name>
										<Type>TabPage</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormReferenceGroupControl">
												<Name>FinTagOffset_GenPay</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<PreviewPartRef>FinTagPreviewPart</PreviewPartRef>
												<Type>ReferenceGroup</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls />
												<HideIfEmpty>No</HideIfEmpty>
												<DataSource>BankStatementLinePaymentInformation</DataSource>
												<ReferenceField>FinTagOffset</ReferenceField>
												<ReplacementFieldGroup>DisplayValue</ReplacementFieldGroup>
											</AxFormControl>
										</Controls>
										<Caption>@SYS11162</Caption>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>@FinTag:FinTag_Label</Caption>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>Settle</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Enabled>No</Enabled>
						<Type>Button</Type>
						<FormControlExtension
							i:nil="true" />
						<DefaultButton>Yes</DefaultButton>
						<SaveRecord>No</SaveRecord>
						<Text>@CashManagement:SettleTransactions</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OK</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Enabled>No</Enabled>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<SaveRecord>No</SaveRecord>
						<Text>@Bank:GeneratePayment</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Cancel</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>