<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>JmgRegistrationTouchReportFeedback</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
[SysObsolete('The Job card device has been deprecated, please use Production Floor Execution instead', false, 03\03\2022)]
public class JmgRegistrationTouchReportFeedback extends FormRun
{
    private JmgRegistrationTouchForm        controller;
    private JmgJobBundleProdFeedbackForm    prodFeedbackForm;
    private boolean                         approveClose;
    private JmgJobTable                     jmgJobTable;
    private boolean                         licensePlateRequired;
    private boolean                         licensePlateEnabled;

}
]]></Source>
			</Method>
			<Method>
				<Name>approveClicked</Name>
				<Source><![CDATA[
    private void approveClicked()
    {
        okButton.setFocus();
        try
        {
            using(var activityContext = JmgRegistrationInstrumentationActivities::initFormParms(JmgInstrumentationLogger::createLogger(formStr(JmgRegistrationTouchReportFeedback)).registration().reportFeedback(), formStr(JmgRegistrationTouch)))
            {
                jmgTmpJobBundleProdFeedback.write(); // save modified data to the temporary table
                approveClose = prodFeedbackForm.canClose(jmgTmpJobBundleProdFeedback);

                if (approveClose)
                {
                    prodFeedbackForm.onClose(jmgTmpJobBundleProdFeedback);
                    element.close();
                }
                else
                {
                    throw Exception::Error;
                }
            }
        }
        catch (Exception::Error)
        {
            Box::stop("@SCM:JobFeedbackError");
            approveClose = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelClicked</Name>
				<Source><![CDATA[
    private void cancelClicked()
    {
        approveClose = false;
        element.close();
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        if (approveClose)
        {
            element.args().parmEnum(NoYes::No);

            controller.invokeRefresh(jmgJobTable.JobId);
        }
        else
        {
            element.args().parmEnum(NoYes::Yes);
            prodFeedbackForm.cancel();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        if (!SysDictClass::isEqualOrSuperclass(classidget(element.args().parmObject()), classnum(JmgJobBundle)))
        {
            throw error(strfmt("@SYS22862", formstr(JmgJobBundleProdFeedback)));
        }

        FormRun formRun = element.args().caller();

        boolean calledFromTouchRegistrationForm = formRun && (formRun.name() == formstr(JmgRegistrationTouch));

        if (calledFromTouchRegistrationForm)
        {
            controller = formRun.registrationFormClass();
        }

        super();

        prodFeedbackForm = new JmgJobBundleProdFeedbackForm(element.args().parmObject(), element.args().parmEnum());

        JmgTmpJobBundleProdFeedback localJmgTmpJobBundleProdFeedback = prodFeedbackForm.getTmpJobBundleProdFeedback();
        jmgJobTable = JmgJobTable::find(localJmgTmpJobBundleProdFeedback.JobId);

        localJmgTmpJobBundleProdFeedback.GoodNow = controller.suggestedGoodQuantity(jmgJobTable.JobId);

        var jobTypeIsProcess = localJmgTmpJobBundleProdFeedback.JobType == RouteJobType::Process;
        var jobTypeIsSetup   = localJmgTmpJobBundleProdFeedback.JobType == RouteJobType::Setup;
        if (jobTypeIsProcess || jobTypeIsSetup)
        {
            // The content group should be editable only for process jobs
            JobStatusRadioBtn.enabled(true);
            // Set to default value if it is editable.
            localJmgTmpJobBundleProdFeedback.ReportAsFinished = JmgParameters::find().DefaultReportAsFinish;
        }
        else
        {
            JobStatusRadioBtn.enabled(false);
            localJmgTmpJobBundleProdFeedback.ReportAsFinished = JmgFeedbackStatus::Completed;
        }

        localJmgTmpJobBundleProdFeedback.update();

        // The feedback should be editable only for process jobs
        TotalRequestedGroup.enabled(jobTypeIsProcess);
        AlreadyCompletedGroup.enabled(jobTypeIsProcess);
        GoodQuantityGroup.enabled(jobTypeIsProcess);
        ErrorQuantityGroup.enabled(jobTypeIsProcess);
        ErrorSpecificationRadioBtn.enabled(jobTypeIsProcess);

        // The Go to job button should be visible only when the user is trying to report progress while being in the context of
        // another job - e.g. when the user is trying to start another job and is asked to complete the already running job
        GoToJobButton.visible(
            calledFromTouchRegistrationForm &&
            (formRun.activeJobId() != localJmgTmpJobBundleProdFeedback.JobId));

        jmgTmpJobBundleProdFeedback.setTmpData(localJmgTmpJobBundleProdFeedback);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWhsLicensePlateId</Name>
				<Source><![CDATA[
    private void setWhsLicensePlateId()
    {
        LicensePlateGroup.visible(licensePlateRequired);
        licensePlateEnabled = licensePlateRequired && jmgTmpJobBundleProdFeedback.GoodNow > 0;

        WHSLicensePlateId.enabled(licensePlateEnabled);

        if (licensePlateEnabled &&
            !jmgTmpJobBundleProdFeedback.WHSLicensePlate && 
            JmgRegistrationSetup::findConfigurationForCurrentUser(NoYes::Yes).GenerateLP)
        {
            jmgTmpJobBundleProdFeedback.WHSLicensePlate = WHSLicensePlate::generateLicensePlateId(jmgJobTable.ItemId, InventTable::find(jmgJobTable.ItemId).inventTableModuleInvent().UnitId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFocus</Name>
				<Source><![CDATA[
    public void setFocus()
    {
        if (jmgTmpJobBundleProdFeedback.JobType == RouteJobType::Process &&
            jmgTmpJobBundleProdFeedback.RouteOprPriority == RouteOprPriority::Primary)
        {
            ErrorQuantity.enabled(true);
            ErrorQuantity.skip(false);
            GoodQuantity.enabled(true);
            GoodQuantity.skip(false);
            GoodQuantity.setFocus();
        }
        else
        {
            ErrorQuantity.enabled(false);
            ErrorQuantity.skip(true);
            GoodQuantity.enabled(false);
            GoodQuantity.skip(true);
            JmgTmpJobBundleProdFeedback.GoodNow = 0;
            licensePlateRequired = false;
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>JmgTmpJobBundleProdFeedback</Name>
				<Methods>
					<Method>
						<Name>totalQuantityRequested</Name>
						<Source><![CDATA[
        public display RouteOprQtyToOpr totalQuantityRequested()
        {
            return jmgJobTable.CalcQty;
        }

]]></Source>
					</Method>
					<Method>
						<Name>totalQuantityCompleted</Name>
						<Source><![CDATA[
        public display JmgQtyGood totalQuantityCompleted()
        {
            return jmgJobTable.goodQuantity();
        }

]]></Source>
					</Method>
					<Method>
						<Name>errorQuantity</Name>
						<Source><![CDATA[
        public edit ProdReportedError errorQuantity(boolean _set, JmgTmpJobBundleProdFeedback _jmgTmpErrorSpecification, Qty _value)
        {
            if (_set)
            {
                JmgTmpErrorSpecification jmgTmpErrorSpecification = JmgErrorSpecificationForm::decodeErrorSpecification(_jmgTmpErrorSpecification.ErrorSpecification);
                if (!jmgTmpErrorSpecification.PdsCWQtyError)
                {
                    jmgTmpErrorSpecification.PdsCWQtyError = PdsCatchWeight::cwQty(jmgJobTable.ItemId, _value);
                }
                _jmgTmpErrorSpecification.ErrorSpecification = JmgErrorSpecificationForm::encodeValue(jmgTmpErrorSpecification.ErrorCause, _value, jmgTmpErrorSpecification.PdsCWQtyError);
            }

            return _jmgTmpErrorSpecification.errorNow();
        }

]]></Source>
					</Method>
					<Method>
						<Name>errorCause</Name>
						<Source><![CDATA[
        public edit ProdErrorCause errorCause(boolean _set, JmgTmpJobBundleProdFeedback _jmgTmpErrorSpecification, ProdErrorCause _value)
        {
            if (_set)
            {
                Qty errQty = JmgErrorSpecificationForm::decodeErrorSpecification(_jmgTmpErrorSpecification.ErrorSpecification).QtyError;
                _jmgTmpErrorSpecification.ErrorSpecification = JmgErrorSpecificationForm::encodeValue(_value, errQty, 0);
            }

            return JmgErrorSpecificationForm::decodeErrorSpecification(_jmgTmpErrorSpecification.ErrorSpecification).ErrorCause;
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret = super();

            CaptionProductionOrder.visible(true);
            CaptionProductionOrder.text(strfmt("@SCM:JmgRegistrationTouch_CaptionProductionOrder", JmgTmpJobBundleProdFeedback.JobRef));
            licensePlateRequired = JmgTmpJobBundleProdFeedback.checkWhsLicensePlateEnabledForJob();

            element.setFocus();
            element.setWhsLicensePlateId();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;
        
            ret = super();
        
            if (ret && licensePlateEnabled && jmgTmpJobBundleProdFeedback.WHSLicensePlate)
            {
                ret = prodFeedbackForm.checkWHSWorkTableWithSameLicensePlate(jmgTmpJobBundleProdFeedback);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>GoodNow</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                prodFeedbackForm.quantityChanged(jmgTmpJobBundleProdFeedback, true);
                element.setWhsLicensePlateId();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>GoToJobButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            if (controller)
            {
                controller.parmMoveToJobId(JmgTmpJobBundleProdFeedback.JobId);

                if (!controller.focusOnJob(JmgJobTable::find(JmgTmpJobBundleProdFeedback.JobId)))
                {
                    Box::stop("@SCM:CouldNotOpenJob");
                }
            }

            element.cancelClicked();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OKButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (!jmgTmpJobBundleProdFeedback_ds.validateWrite())
            {
                return;
            }

            super();
            element.approveClicked();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CancelButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();
            element.cancelClicked();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<IsObsolete>Yes</IsObsolete>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>JmgTmpJobBundleProdFeedback</Name>
			<Table>JmgTmpJobBundleProdFeedback</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CalcQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ErrorSpecification</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GoodNow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JmgTermRegRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JobDescription</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JobId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JobRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JobType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWCalcQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWGoodNow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWQtyError</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWQtyGood</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProdJournalIdBOM</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QtyError</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QtyGood</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportAsFinished</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RouteOprPriority</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WHSLicensePlate</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SCM:ShopFloorReportProgress</Caption>
		<DefaultAction xmlns="">OKButton</DefaultAction>
		<Pattern xmlns="">Custom</Pattern>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ContentGroup</Name>
				<ExtendedStyle>tabularFields</ExtendedStyle>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>TableCaptionGroup</Name>
						<ExtendedStyle>tabularFields_title</ExtendedStyle>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Group</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<AllowUserSetup>No</AllowUserSetup>
						<ArrangeMethod>None</ArrangeMethod>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>TableRowHeaderGroup</Name>
						<ExtendedStyle>tabularFields_rowHeader</ExtendedStyle>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>CaptionProductionOrder</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ExtendedStyle>staticText_defaultFont</ExtendedStyle>
								<Type>StaticText</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Text></Text>
							</AxFormControl>
						</Controls>
						<AllowUserSetup>No</AllowUserSetup>
						<ArrangeMethod>None</ArrangeMethod>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>TotalRequestedGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ExtendedStyle>tabularFields_row</ExtendedStyle>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>TotalRequestedLabel</Name>
								<AllowEdit>No</AllowEdit>
								<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@SCM:TotalRequested</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>TotalRequestedQty</Name>
								<AllowEdit>No</AllowEdit>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>totalQuantityRequested</DataMethod>
								<DataSource>JmgTmpJobBundleProdFeedback</DataSource>
								<Label>@SCM:TotalRequested</Label>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
						</Controls>
						<AllowUserSetup>No</AllowUserSetup>
						<ArrangeMethod>None</ArrangeMethod>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>AlreadyCompletedGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ExtendedStyle>tabularFields_row</ExtendedStyle>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>AlreadyCompletedLabel</Name>
								<AllowEdit>No</AllowEdit>
								<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@SCM:AlreadyCompleted</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>AlreadyCompletedQty</Name>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>totalQuantityCompleted</DataMethod>
								<DataSource>JmgTmpJobBundleProdFeedback</DataSource>
								<Label>@SCM:AlreadyCompleted</Label>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
						</Controls>
						<AllowUserSetup>No</AllowUserSetup>
						<ArrangeMethod>None</ArrangeMethod>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>GoodQuantityGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ExtendedStyle>tabularFields_row</ExtendedStyle>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>GoodQuantityLabel</Name>
								<AllowEdit>No</AllowEdit>
								<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@SYS4638</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>GoodQuantity</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>GoodNow</DataField>
								<DataSource>JmgTmpJobBundleProdFeedback</DataSource>
								<Label>@SYS4638</Label>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
						</Controls>
						<AllowUserSetup>No</AllowUserSetup>
						<ArrangeMethod>None</ArrangeMethod>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ErrorQuantityGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ExtendedStyle>tabularFields_row</ExtendedStyle>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>ErrorQuantityLabel</Name>
								<AllowEdit>No</AllowEdit>
								<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@SYS2083</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>ErrorQuantity</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>errorQuantity</DataMethod>
								<DataSource>JmgTmpJobBundleProdFeedback</DataSource>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
						</Controls>
						<AllowUserSetup>No</AllowUserSetup>
						<ArrangeMethod>None</ArrangeMethod>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>JobStatusGroup</Name>
						<ExtendedStyle>tabularFields_row</ExtendedStyle>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRadioButtonControl">
								<Name>JobStatusRadioBtn</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>RadioButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Caption>@SYS39777</Caption>
								<DataField>ReportAsFinished</DataField>
								<DataSource>JmgTmpJobBundleProdFeedback</DataSource>
								<Selection>2</Selection>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRadioButtonControl">
								<Name>ErrorSpecificationRadioBtn</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>RadioButton</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>errorCause</DataMethod>
								<DataSource>JmgTmpJobBundleProdFeedback</DataSource>
								<HideFirstEntry>Yes</HideFirstEntry>
								<Items />
							</AxFormControl>
						</Controls>
						<AllowUserSetup>No</AllowUserSetup>
						<ArrangeMethod>None</ArrangeMethod>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>TableRowFooterGroup</Name>
						<ExtendedStyle>tabularFields_rowFooter</ExtendedStyle>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<AllowUserSetup>No</AllowUserSetup>
						<ArrangeMethod>None</ArrangeMethod>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>LicensePlateGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>LicensePlateLabel</Name>
								<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@WAX359</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>WHSLicensePlateId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>WHSLicensePlate</DataField>
								<DataSource>JmgTmpJobBundleProdFeedback</DataSource>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<AllowUserSetup>Restricted</AllowUserSetup>
				<ArrangeMethod>None</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>GoToJobGroup</Name>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>GoToJobButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>GoToJobButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Height>60</Height>
								<HeightMode>Manual</HeightMode>
								<Type>Button</Type>
								<Width>250</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Text>@SCM:GoToJob</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>DialogCommitContainer</Name>
				<Type>ButtonGroup</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>OKButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Height>60</Height>
						<HeightMode>Manual</HeightMode>
						<Type>Button</Type>
						<Width>120</Width>
						<WidthMode>Manual</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Text>@SYS5473</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>CancelButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Height>60</Height>
						<HeightMode>Manual</HeightMode>
						<Type>Button</Type>
						<Width>120</Width>
						<WidthMode>Manual</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<SaveRecord>No</SaveRecord>
						<Text>@SYS50163</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>