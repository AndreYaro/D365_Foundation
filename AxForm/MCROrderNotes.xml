<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>MCROrderNotes</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
/// <summary>
///     The <c>MCROrderNotes</c> form performs some document handling to add the functionality of order notes.
/// </summary>
public final class MCROrderNotes extends FormRun
{
    Common                  refRecord;
    Common                  curViewRecord;

    SalesLine               salesLine;
    SalesTable              salesTable;

    CustTable               custTable;
    InventTable             inventTable;
    InventDimCombination    inventDimCombination;

    MCRHistSalesLine        mcrHistSalesLine;
    MCRHistSalesTable       mcrHistSalesTable;
    smmBusRelTable          smmBusRelTable;

    boolean                 mcrCallCenterEnabled;

    FormRun                 formRun;
    str                     formName;
    str                     formParm;

    Map                     viewCategoryMap;
    int                     viewCategoryCount;

    private boolean addProductVariantOption = MCROrderNotesProductVariantFlight::instance().isEnabled();
    private boolean notesForProspectWithStatusAsPendingFlight = NotesForProspectWithStatusAsPendingFlight::instance().isEnabled();

    const str mcrCustFraud = 'MCRCustFraud';
}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        refRecord = element.args().record();

        if (element.args().caller())
        {
            formRun = element.args().caller();
            formName = formRun.name();
            formParm = element.args().parm();
        }

        if (!refRecord)
        {
            throw error("@SYS22539");
        }

        mcrCallCenterEnabled = isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter));

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToViewCategory</Name>
				<Source><![CDATA[
    private void addToViewCategory(MCROrderNoteViewCategory _category)
    {
        ViewCategory.add(enum2str(_category));
        viewCategoryMap.insert(viewCategoryCount, _category);
        viewCategoryCount++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets up element variables and validate the record passed into form.
    /// </summary>
    public void run()
    {
        super();

        element.design().caption("@MCR12175");

        viewCategoryMap = new Map(Types::Integer, Types::Enum);
        viewCategoryCount = 0;

        switch (refRecord.TableId)
        {
            case (tableNum(CustTable)):
                custTable = refRecord;
                this.addToViewCategory(MCROrderNoteViewCategory::All);
                this.addToViewCategory(MCROrderNoteViewCategory::CustTable);
                if (formParm == mcrCustFraud
                    && mcrCallCenterEnabled)
                {
                    // Order notes is being called from button for manual customer
                    // Fraud notes.
                    this.addToViewCategory(MCROrderNoteViewCategory::CustomerFraud);
                }
                break;

            case (tableNum(smmBusRelTable)):
                custTable = CustTable::findByPartyRecId(smmBusRelTable::findRec(refRecord.RecId).Party);

                if (notesForProspectWithStatusAsPendingFlight)
                {
                    smmBusRelTable = refRecord;

                    if (custTable)
                    {
                        this.addToViewCategory(MCROrderNoteViewCategory::CustTable);
                    }
                    else
                    {
                        this.addToViewCategory(MCROrderNoteViewCategory::smmBusRelTable);
                    }
                }
                else
                {
                    if (!custTable)
                    {
                        throw error("@SYS22539");
                    }

                    this.addToViewCategory(MCROrderNoteViewCategory::CustTable);
                }

                this.addToViewCategory(MCROrderNoteViewCategory::All);
                break;

            case (tableNum(SalesTable)):
                salesTable = refRecord;
                custTable = salesTable.custTable_CustAccount();

                this.addToViewCategory(MCROrderNoteViewCategory::All);
                this.addToViewCategory(MCROrderNoteViewCategory::CustTable);
                this.addToViewCategory(MCROrderNoteViewCategory::SalesTable);

                if (mcrCallCenterEnabled)
                {
                    if (formName != formstr(MCRSalesOrderRecap))
                    {
                        this.addToViewCategory(MCROrderNoteViewCategory::CustomerFraud);
                    }
                    else
                    {
                        this.addToViewCategory(MCROrderNoteViewCategory::OrderFraud);
                    }
                }
                break;

            case (tableNum(SalesLine)):
                salesLine = refRecord;
                inventTable = salesLine.inventTable();
                salesTable = salesLine.salesTable();
                custTable = salesTable.custTable_CustAccount();
                this.addToViewCategory(MCROrderNoteViewCategory::All);
                this.addToViewCategory(MCROrderNoteViewCategory::InventTable);
                this.addToViewCategory(MCROrderNoteViewCategory::CustTable);
                this.addToViewCategory(MCROrderNoteViewCategory::SalesTable);
                this.addToViewCategory(MCROrderNoteViewCategory::SalesLine);
                if (addProductVariantOption)
                {
                    inventDimCombination = InventDimCombination::findVariantId(salesLine.RetailVariantId);
                    this.addToViewCategory(MCROrderNoteViewCategory::ProductVariant);
                }
                break;

            case (tableNum(InventTable)):
                inventTable = refRecord;
                this.addToViewCategory(MCROrderNoteViewCategory::All);
                this.addToViewCategory(MCROrderNoteViewCategory::InventTable);
                break;

            // If passed record is a histroy record, set local variables
            case (tableNum(MCRHistSalesTable)):
                mcrHistSalesTable = refRecord;
                custTable = CustTable::find(mcrHistSalesTable.CustAccount);

                this.addToViewCategory(MCROrderNoteViewCategory::CustTable);
                this.addToViewCategory(MCROrderNoteViewCategory::MCRHistSalesTable);
                break;

            case (tableNum(MCRHistSalesLine)):
                mcrHistSalesLine = refRecord;
                inventTable = MCRHistSalesLine.inventTable();
                custTable = CustTable::find(mcrHistSalesLine.CustAccount);

                this.addToViewCategory(MCROrderNoteViewCategory::InventTable);
                this.addToViewCategory(MCROrderNoteViewCategory::CustTable);
                this.addToViewCategory(MCROrderNoteViewCategory::MCRHistSalesLine);
                break;

            default:
                throw error(strfmt("@MCR10663", element.name()));
        }

        element.setViewCategory(refRecord.TableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setViewCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Note category ComboBox.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID is used to determine which enum value to set the combobox to.
    /// </param>
    void setViewCategory(TableId _tableId = refRecord.TableId)
    {
        switch (_tableId)
        {
            case (tableNum(CustTable)):
            case (tableNum(smmBusRelTable)):
                if (formParm != mcrCustFraud
                    || !mcrCallCenterEnabled)
                {
                    if (notesForProspectWithStatusAsPendingFlight)
                    {
                        if (custTable)
                        {
                            ViewCategory.selectText(enum2str(MCROrderNoteViewCategory::CustTable));
                        }
                        else
                        {
                            ViewCategory.selectText(enum2str(MCROrderNoteViewCategory::smmBusRelTable));
                        }
                    }
                    else
                    {
                        ViewCategory.selectText(enum2str(MCROrderNoteViewCategory::CustTable));
                    }
                }
                else
                {
                    ViewCategory.selectText(enum2str(MCROrderNoteViewCategory::CustomerFraud));
                }
                break;

            case (tableNum(SalesTable)):
                // If the form was loaded from the sales order form but call center is
                // not enabled do not select order fraud, it will not be an option
                if (formName != formstr(MCRSalesOrderRecap)
                    || !mcrCallCenterEnabled)
                {
                    ViewCategory.selectText(enum2str(MCROrderNoteViewCategory::SalesTable));
                }
                else
                {
                    ViewCategory.selectText(enum2str(MCROrderNoteViewCategory::OrderFraud));
                }
                break;

            case (tableNum(SalesLine)):
                ViewCategory.selectText(enum2str(MCROrderNoteViewCategory::SalesLine));
                break;

            case (tableNum(MCRHistSalesLine)):
                ViewCategory.selectText(enum2str(MCROrderNoteViewCategory::SalesLine));
                break;

            case (tableNum(MCRHistSalesTable)):
                ViewCategory.selectText(enum2str(MCROrderNoteViewCategory::SalesTable));
                break;

            case (tableNum(InventTable)):
                ViewCategory.selectText(enum2str(MCROrderNoteViewCategory::InventTable));
                break;

            case (tableNum(InventDimCombination)):
                if (addProductVariantOption)
                {
                    ViewCategory.selectText(enum2str(MCROrderNoteViewCategory::ProductVariant));
                    break;
                }
            default:
                throw error(strfmt("@SYS19306", funcname()));
        }

        ViewCategory.selectionChange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkViewCategorySelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasource based on view category selection.
    /// </summary>
    /// <returns>
    /// true if the datasource has been set; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    protected final boolean checkViewCategorySelection()
    {
        boolean isSelection = true;

        switch (ViewCategory.getSelection())
        {
            case MCROrderNoteViewCategory::CustTable:
            case MCROrderNoteViewCategory::CustomerFraud:
                curViewRecord = custTable;
                break;
            case MCROrderNoteViewCategory::SalesTable:
            case MCROrderNoteViewCategory::OrderFraud:
                curViewRecord = salesTable;
                break;
            case MCROrderNoteViewCategory::SalesLine:
                curViewRecord = salesLine;
                break;
            case MCROrderNoteViewCategory::InventTable:
                curViewRecord = inventTable;
                break;
            case MCROrderNoteViewCategory::All:
                curViewRecord = null;
                break;
            // Need to include all possible options
            case MCROrderNoteViewCategory::MCRHistSalesLine:
                curViewRecord = mcrHistSalesLine;
                break;
            case MCROrderNoteViewCategory::MCRHistSalesTable:
                curViewRecord = mcrHistSalesTable;
                break;
            case MCROrderNoteViewCategory::ProductVariant:
                if (addProductVariantOption)
                {
                    curViewRecord = inventDimCombination;
                    break;
                }
            case MCROrderNoteViewCategory::smmBusRelTable:
                if (notesForProspectWithStatusAsPendingFlight)
                {
                    curViewRecord = smmBusRelTable;
                }
                break;
            default:
                isSelection = false;
        }

        return isSelection;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>DocuRef</Name>
				<Methods>
					<Method>
						<Name>refItemId</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Displays the item ID of referenced record if the record is a sales line or item record,
        ///     otherwise displays blank.
        /// </summary>
        /// <param name="_docuRef">
        /// The document handling record that references the item ID.
        /// </param>
        /// <returns>
        /// The item ID of referenced record if the record is a sales line or item record,
        ///     otherwise displays blank.
        /// </returns>
        public display ItemId refItemId(DocuRef _docuRef)
        {
            SalesLine   salesLineLocal;
            InventTable inventTableLocal;
            Common      common = _docuRef.refCommon();
            ItemId      itemId;

            switch (common.TableId)
            {
                case (tableNum(SalesLine)):
                    salesLineLocal = common;
                    itemId = salesLineLocal.ItemId;
                    break;
                case (tableNum(InventTable)):
                    inventTableLocal = common;
                    itemId = inventTableLocal.ItemId;
                    break;
            }

            return itemId;
        }

]]></Source>
					</Method>
					<Method>
						<Name>refNoteCategory</Name>
						<Source><![CDATA[
        public display str refNoteCategory(DocuRef _docuRef)
        {
            str docuRefTableId = this.getTableIdFromDocuRef(_docuRef);
            
            if (docuRefTableId)
            {
                return docuRefTableId;
            }
            else
            {
                throw error(strfmt("@SYS19306", funcname()));
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>getTableIdFromDocuRef</Name>
						<Source><![CDATA[
        public str getTableIdFromDocuRef(DocuRef _docuRef)
        {    
            switch (DocuRef::GetRootTableID(_docuRef.RefTableId))
            {
                case(tablenum(CustTable)):
                    return enum2str(MCROrderNoteViewCategory::CustTable);
                case(tablenum(SalesTable)):
                    return enum2str(MCROrderNoteViewCategory::SalesTable);
                case(tablenum(SalesLine)):
                    return enum2str(MCROrderNoteViewCategory::SalesLine);
                case(tablenum(InventTable)):
                    return enum2str(MCROrderNoteViewCategory::InventTable);
                case(tablenum(MCRHistSalesTable)):
                    return enum2str(MCROrderNoteViewCategory::MCRHistSalesTable);
                case(tablenum(MCRHistSalesLine)):
                    return enum2str(MCROrderNoteViewCategory::MCRHistSalesLine);
                case(tablenum(InventDimCombination)):
                    if (addProductVariantOption)
                    {
                        return enum2str(MCROrderNoteViewCategory::ProductVariant);
                    }
                case(tablenum(smmBusRelTable)):
                    if (notesForProspectWithStatusAsPendingFlight)
                    {
                        return enum2str(MCROrderNoteViewCategory::smmBusRelTable);
                    }
                default:
                    return '';
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets the view category to refer to the type of record that was passed in to the form.
        /// </summary>
        /// <param name="_append">
        /// Indicates whether the record that is being created should be added to the end of the grid; optional.
        /// </param>
        public void create(boolean _append = false)
        {
            if (ViewCategory.getSelection() == MCROrderNoteViewCategory::All)
            {
                element.setViewCategory(refRecord.TableId);
            }

            super(_append);

            DocuRef.RefRecId = curViewRecord.RecId;
            DocuRef.RefCompanyId = curViewRecord.DataAreaId;
            DocuRef.RefTableId = curViewRecord.TableId;

            // init from fraud type ID if order or customer fraud
            if (mcrCallCenterEnabled
               && (ViewCategory.getSelection() == MCROrderNoteViewCategory::OrderFraud
               || ViewCategory.getSelection() == MCROrderNoteViewCategory::CustomerFraud))
            {
                DocuType docuType = DocuType::find(MCROrderParameters::find().MCRFraudCommentTypeId);
                DocuRef.TypeId    = docuType.TypeId;
                DocuRef.Name      = docuType.Name;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Validates that the type ID field is specified.
        /// </summary>
        /// <returns>
        /// true if the write is valid; otherwise, false.
        /// </returns>
        public boolean validateWrite()
        {
            boolean ret;

            if (DocuRef.TypeId == "")
            {
                checkFailed(strfmt("@SYS26332",
                    FieldId2pName(DocuRef.TableId, FieldNum(DocuRef, TypeId))));
                return false;
            }

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Sets up datasource.
        /// </summary>
        public void init()
        {
            Query                   query;
            QueryBuildDataSource    queryBuildDataSourceDocuRef;
            QueryBuildDataSource    queryBuildDataSourceDocuType;

            super();

            query = new Query();

            queryBuildDataSourceDocuRef  = query.addDataSource(tableNum(DocuRef));
            queryBuildDataSourceDocuRef.addRange(FieldNum(DocuRef, RefCompanyId)).value(curExt());
            queryBuildDataSourceDocuRef.addRange(FieldNum(DocuRef, RefRecId));
            // Set to filter "Simple note"s which are base Axapta.
            queryBuildDataSourceDocuType = queryBuildDataSourceDocuRef.addDataSource(tableNum(DocuType));
            queryBuildDataSourceDocuType.addLink(FieldNum(DocuRef, TypeId), FieldNum(DocuType, TypeId));
            queryBuildDataSourceDocuType.addRange(FieldNum(DocuType, ActionClassId)).value(queryValue(ClassNum(DocuActionNote)));

            this.query(query);

            this.cacheAddMethod(tableMethodStr(DocuRef,refTablename));
            this.cacheAddMethod(identifierStr(refItemId));
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            MCROrderNoteViewCategory    mcrOrderNoteViewCategory;
            QueryBuildDataSource        queryBuildDataSourceDocuRef;
            QueryBuildRange             rangeRefRecId;
            str                         queryBuildString;
            CustTable                   custTableBuffer;
            SalesLine                   salesLineLocal;

            str buildClause(Common common)
            {
                str orClause;
                if (queryBuildString)
                {
                    orClause = ' || ';
                }
                orClause += strfmt('((%1 == %2) && (%3 == %4) && (%5 == "%6"))',
                                          fieldStr(DocuRef, RefRecId),
                                          common.RecId,
                                          fieldStr(DocuRef, RefTableId),
                                          common.TableId,
                                          fieldStr(DocuRef, RefCompanyId),
                                          common.dataAreaId);
                return orClause;
            }

            mcrOrderNoteViewCategory = Viewcategory.getSelection();

            if ( mcrOrderNoteViewCategory == MCROrderNoteViewCategory::InventTable
                || mcrOrderNoteViewCategory == MCROrderNoteViewCategory::All)
            {
                queryBuildString = buildClause(inventTable);
            }

            if ( addProductVariantOption
                && (mcrOrderNoteViewCategory == MCROrderNoteViewCategory::ProductVariant || mcrOrderNoteViewCategory == MCROrderNoteViewCategory::All)
                && salesLine.RetailVariantId)
            {
                queryBuildString = buildClause(InventDimCombination::findVariantId(salesLine.RetailVariantId));
            }

            if (  mcrOrderNoteViewCategory == MCROrderNoteViewCategory::SalesLine
                || mcrOrderNoteViewCategory == MCROrderNoteViewCategory::All)
            {
                switch (refRecord.TableId)
                {
                    case tableNum(SalesLine):
                        queryBuildString += buildClause(refRecord);
                        if (mcrOrderNoteViewCategory == MCROrderNoteViewCategory::All)
                        {
                            queryBuildString += buildClause(inventTable);
                        }
                        break;
                    case tableNum(SalesTable):
                        while select salesLineLocal
                            where salesLineLocal.SalesId == salesTable.SalesId
                        {
                            queryBuildString += buildClause(salesLineLocal);
                            queryBuildString += buildClause(salesLineLocal.inventTable());
                        }
                        break;
                }
            }

            if (  mcrOrderNoteViewCategory == MCROrderNoteViewCategory::SalesTable
                || mcrOrderNoteViewCategory == MCROrderNoteViewCategory::OrderFraud
                || mcrOrderNoteViewCategory == MCROrderNoteViewCategory::All)
            {
                if (salesTable)
                {
                    queryBuildString += buildClause(salesTable);
                }
            }

            if (  mcrOrderNoteViewCategory == MCROrderNoteViewCategory::CustTable
                || mcrOrderNoteViewCategory == MCROrderNoteViewCategory::CustomerFraud
                || mcrOrderNoteViewCategory == MCROrderNoteViewCategory::All)
            {
                if (custTable)
                {
                    queryBuildString += buildClause(custTable);
                    while select custTableBuffer where
                        custTableBuffer.MCRMergedRoot == custTable.AccountNum
                    {
                        queryBuildString += buildClause(custTableBuffer);
                    }
                }
            }
            if (mcrOrderNoteViewCategory == MCROrdernoteviewcategory::MCRHistSalesLine)
            {
                querybuildstring += buildclause(mcrHistSalesLine);
            }
            if (mcrOrderNoteViewCategory == MCROrdernoteviewcategory::MCRHistSalesTable)
            {
                querybuildstring += buildclause(mcrHistSalesTable);
            }

            if (notesForProspectWithStatusAsPendingFlight)
            {
                if (mcrOrderNoteViewCategory == MCROrderNoteViewCategory::smmBusRelTable
                || mcrOrderNoteViewCategory == MCROrderNoteViewCategory::All)
                {
                    if (smmBusRelTable)
                    {
                        querybuildstring += buildclause(smmBusRelTable);
                    }
                }
            }

            queryBuildDataSourceDocuRef = this.query().dataSourceTable(tableNum(DocuRef));
            queryBuildDataSourceDocuRef.clearRange(fieldNum(DocuREf, TypeId));
            if (mcrOrderNoteViewCategory == MCROrderNoteViewCategory::OrderFraud
              || mcrOrderNoteViewCategory == MCROrderNoteViewCategory::CustomerFraud)
            {
                queryBuildDataSourceDocuRef.addRange(fieldNum(DocuRef, TypeId)).value(MCROrderParameters::find().MCRFraudCommentTypeId);
            }
            else
            {
                if (mcrOrderNoteViewCategory == MCROrderNoteViewCategory::CustTable)
                {
                    // If this is just customer, don't show fraud notes
                    queryBuildDataSourceDocuRef.addRange(fieldNum(DocuREf, TypeId)).value(SysQuery::valueNot(MCROrderParameters::find().MCRFraudCommentTypeId));
                }
            }
            rangeRefRecId = queryBuildDataSourceDocuRef.rangeField(FieldNum(DocuRef, RefRecId));
            rangeRefRecId.value(queryBuildString);
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Update custTable.
        /// </summary>
        public void linkActive()
        {
            custTable = element.salesTable.custTable_CustAccount();

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>TypeId</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            /// <summary>
            /// Overrides the lookup so that only simple notes will be allowed to be chosen as the type.
            /// </summary>
            /// <param name="_formControl">
            /// The form control of the lookup.
            /// </param>
            /// <param name="_filterStr">
            /// The filter string of the lookup.
            /// </param>
            public void lookup(FormControl _formControl, str _filterStr)
            {
                DocuType::lookupDocuTypeNote(_formControl);
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            ///     Sets fields that are hidden from the user.
            /// </summary>
            public void modified()
            {
                super();

                DocuRef.Name = DocuType::find(DocuRef.TypeId).Name;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>ViewCategory</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>getSelection</Name>
						<Source><![CDATA[
        /// <summary>
        /// Converts the text in this ComboBox to an enum.
        /// </summary>
        /// <returns>
        /// The enum value of the text in the combobox.
        /// </returns>
        MCROrderNoteViewCategory getSelection()
        {
            if (!viewCategoryMap)
            {
                return 0;
            }

            return viewCategoryMap.lookup(ViewCategory.selection());
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        /// <summary>
        /// Refreshes the datasource upon changing view category.
        /// </summary>
        /// <returns>
        /// The value of the new selection.
        /// </returns>
        public int selectionChange()
        {
            int ret;

            boolean isSelection = element.checkViewCategorySelection();

            if (!isSelection)
            {
                throw error(strfmt("@SYS19306", funcname()));
            }

            ret = super();

            DocuRef_ds.executeQuery();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>DocuRef</Name>
			<Table>DocuRef</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActualCompanyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Author</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContactPersonId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocuTemplate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EncyclopediaItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanySkipUpdate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Notes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Party</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefCompanyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Restriction</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>smmEMailEntryID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>smmEMailStoreID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>smmTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TypeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValueRecId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@MCR12545</Caption>
		<Pattern xmlns="">SimpleListDetails</Pattern>
		<PatternVersion xmlns="">1.3</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">SimpleListDetails</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>268435455</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>NavigationListGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilter</Name>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>NotesGrid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>CustomFilterGroup</Name>
						<ElementPosition>536870911</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>ViewCategory</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@MCR4410267</Label>
								<Items />
							</AxFormControl>
						</Controls>
						<FrameType>None</FrameType>
						<Style>CustomFilter</Style>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>NotesGrid</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Grid</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToContent</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Name</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>Name</DataField>
								<DataSource>DocuRef</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>TypeId</Name>
								<ElementPosition>306783378</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>TypeId</DataField>
								<DataSource>DocuRef</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>RefNoteCategory</Name>
								<ElementPosition>1677721598</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>refNoteCategory</DataMethod>
								<DataSource>DocuRef</DataSource>
								<Label>@MCR4410267</Label>
							</AxFormControl>
						</Controls>
						<DataSource>DocuRef</DataSource>
						<MultiSelect>No</MultiSelect>
						<ShowRowLabels>No</ShowRowLabels>
						<Style>List</Style>
					</AxFormControl>
				</Controls>
				<FrameType>None</FrameType>
				<Style>SidePanel</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DetailsHeaderGroup</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>DetailsTabs</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>GeneralTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Identification</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_TypeId</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>TypeId</DataField>
										<DataSource>DocuRef</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_Name</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Name</DataField>
										<DataSource>DocuRef</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>Identification_Restriction</Name>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Restriction</DataField>
										<DataSource>DocuRef</DataSource>
										<Items />
									</AxFormControl>
								</Controls>
								<Caption>@SYS5711</Caption>
								<DataGroup>NoteIdentification</DataGroup>
								<DataSource>DocuRef</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Identification2</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification2_RefNoteCategory</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>refNoteCategory</DataMethod>
										<DataSource>DocuRef</DataSource>
										<Label>@SCM:NoteCategory</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification2_RefItemId</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>refItemId</DataMethod>
										<DataSource>DocuRef</DataSource>
									</AxFormControl>
								</Controls>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Modify</Name>
								<ElementPosition>805306366</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>MCRModify_modifiedBy</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>modifiedBy</DataField>
										<DataSource>DocuRef</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>MCRModify_modifiedDateTime</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>DateTime</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>modifiedDateTime</DataField>
										<DataSource>DocuRef</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>MCRModify</DataGroup>
								<DataSource>DocuRef</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Create</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Create_createdBy</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>createdBy</DataField>
										<DataSource>DocuRef</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>Create_createdDateTime</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>DateTime</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>createdDateTime</DataField>
										<DataSource>DocuRef</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>Create</DataGroup>
								<DataSource>DocuRef</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS2952</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>NoteTabPage</Name>
						<Pattern>FillText</Pattern>
						<PatternVersion>UX7 1.0</PatternVersion>
						<Type>TabPage</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Note</Name>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>String</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>Notes</DataField>
								<DataSource>DocuRef</DataSource>
								<MultiLine>Yes</MultiLine>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
						</Controls>
						<Caption>@SYS43</Caption>
						<FastTabExpanded>Yes</FastTabExpanded>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>