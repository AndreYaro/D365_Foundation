<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>WHSManifestShipmentContainers</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class WHSManifestShipmentContainers extends FormRun
{
    WHSContainerTable           containerTable;
    WHSCloseContainerProfile    closeContainerProfile;
    WHSShipmentTable            shipment;
    Args                        callerArgs;

}
]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        super();

        if (this.closedOk())
        {
            if (callerArgs.parmEnumType() == enumNum(WHSShipmentManifestType))
            {
                switch (callerArgs.parmEnum())
                {
                    case WHSShipmentManifestType::Container:
                        element.manifestContainer();
                        break;

                    case WHSShipmentManifestType::Shipment:
                        shipment.manifest(closeContainerProfile.ManifestRequirementsForShipment, ContainerTrackingId.text(), Weight.realValue(), whsWeightUOM.text());
                        break;

                    case WHSShipmentManifestType::ContainerGroup:
                        element.manifestContainerGroup();
                        break;

                    default:
                        throw error(strFmt("@SYS54195", funcName()));
                }
            }

            FormObjectSet containerTableDataSource = containerTable.dataSource();

            if (containerTableDataSource)
            {
                containerTableDataSource.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>manifestContainer</Name>
				<Source><![CDATA[
    private void manifestContainer()
    {
        if (closeContainerProfile.ManifestRequirementsForContainer == WHSManifestRequirement::TransportationManagement)
        {
            containerTable.manifestContainer(true, Weight.realValue());
        }
        else
        if (closeContainerProfile.ManifestRequirementsForContainer == WHSManifestRequirement::Manual)
        {
            containerTable.manifestContainerManual(true, ContainerTrackingId.text(), whsWeightUOM.text(), Weight.realValue());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>manifestContainerGroup</Name>
				<Source><![CDATA[
    private void manifestContainerGroup()
    {
        if (closeContainerProfile.ManifestRequirementsForContainerGroup == WHSManifestRequirementContainerGroup::Manual)
        {
            WHSContainerTable::manifestContainerGroupManual(ContainerGroupingLicensePlateId.text(), ContainerTrackingId.text(), whsWeightUOM.text(), Weight.realValue());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        callerArgs = element.args();

        if (callerArgs.dataset() != tableNum(WHSContainerTable))
        {
            throw error("@WAX1921");
        }

        containerTable = callerArgs.record();
        closeContainerProfile = WHSCloseContainerProfile::find(containerTable.CloseContainerProfileId);

        super();

        shipment = WHSShipmentTable::find(containerTable.ShipmentId);

        ShipmentId.text(shipment.ShipmentId);

        // Use weight if it is already specified on the container
        if (containerTable.WeightUOM)
        {
            WHSWeightUOM.text(containerTable.WeightUOM);
        }
        else
            // If not, take the default UOM from the container packing policy
        {
            whsWeightUOM.text(closeContainerProfile.WeightUOM);
        }

        if (callerArgs.parmEnumType() == enumNum(WHSShipmentManifestType) && callerArgs.parmEnum() == WHSShipmentManifestType::Shipment)
        {
            RecIdCount totalContainersInShipment = shipment.totalClosedContainersInShipment();

            if (!totalContainersInShipment)
            {
                throw error("@WAX:ThereAreNoContainersToManifestOnTheShipment");
            }

            SystemWeight.visible(false);

            UnmanifestedContainersOnShipment.value(totalContainersInShipment);
        }
        else if (callerArgs.parmEnumType() == enumNum(WHSShipmentManifestType) && callerArgs.parmEnum() == WHSShipmentManifestType::ContainerGroup)
        {
            if (!WHSContainerTable::isContainerManifestRequirementMetForGroup(containerTable.ContainerGroupingLicensePlateId))
            {
                throw error("@WAX:ManifestRequirementsForTheGroupAreNotMet");
            }

            SystemWeight.visible(false);
            ContainerGroupingLicensePlateId.visible(true);
            ContainerGroupingLicensePlateId.text(containerTable.ContainerGroupingLicensePlateId);
            TotalContainersInGroup.visible(true);
            TotalContainersInGroup.value(WHSContainerTable::totalContainersInContainerGroup(containerTable.ContainerGroupingLicensePlateId));

            UnmanifestedContainersOnShipment.visible(false);
        }
        else
        {
            UnmanifestedContainersOnShipment.visible(false);
        }

        if (closeContainerProfile.ManifestRequirementsForContainer == WHSManifestRequirement::TransportationManagement)
        {
            ContainerTrackingId.visible(false);
        }

        if (closeContainerProfile.ManifestRequirementsForShipment == WHSManifestRequirement::TransportationManagement)
        {
            ContainerTrackingId.visible(false);
            Weight.visible(false);
            Weight.realValue(containerTable.Weight);
            WHSWeightUOM.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    public boolean canClose()
    {
        boolean ret = super();

        if (this.closedOk())
        {
            if (ret && whsWeightUOM.visible() && !whsWeightUOM.text())
            {
                ret = checkFailed("@WAX:WeightUOMMustBeSpecified");
            }

            if (ret && ContainerTrackingId.visible() && !ContainerTrackingId.text())
            {
                ret = checkFailed("@WAX:ContainerTrackingIdMustBeSpecified");
            }

            if (ret && Weight.realValue() <= 0)
            {
                ret = checkFailed("@WAX:WeightMustBePositive");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>SystemWeight</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            weight.realValue(WHSContainerTable::find(containerTable.ShipmentId, containerTable.ContainerId).calculateWeight());

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>WHSWeightUOM</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret = super();

            ret = ret && UnitOfMeasure::findBySymbol(this.text());

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@WAX1019</Caption>
		<Frame xmlns="">Dialog</Frame>
		<MaximizeBox xmlns="">No</MaximizeBox>
		<MinimizeBox xmlns="">No</MinimizeBox>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">Dialog</Style>
		<UseCaptionFromMenuItem xmlns="">Yes</UseCaptionFromMenuItem>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<WindowResize xmlns="">Fixed</WindowResize>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>SystemWeight</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Text>@WAX2963</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<Style>Strip</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Shipment</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ShipmentId</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>WHSShipmentId</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<Caption>@WAX496</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ContainerGroup</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ContainerGroupingLicensePlateId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Enabled>No</Enabled>
								<Type>String</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>WHSContainerGroupingLicensePlateId</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormIntegerControl">
								<Name>TotalContainersInGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Enabled>No</Enabled>
								<Type>Integer</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Label>@WAX:TotalContainersInGroup</Label>
							</AxFormControl>
						</Controls>
						<Caption>@WAX:ContainerGroupingLabel</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ContainersOnShipment</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormInt64Control">
								<Name>UnmanifestedContainersOnShipment</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Skip>Yes</Skip>
								<Type>Int64</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@WAX:ContainersToBeManifested</Label>
							</AxFormControl>
						</Controls>
						<Caption>@WAX:ContainersForShipment</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>WeightGrp</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>Weight</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>Weight</ExtendedDataType>
								<NoOfDecimals>-1</NoOfDecimals>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>WHSWeightUOM</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
								<Label>@WAX2494</Label>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
						</Controls>
						<Breakable>No</Breakable>
						<Caption>@WAX:ContainerGrossWeight</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Tracking</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ContainerTrackingId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>ShipCarrierTrackingNum</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS116849</Caption>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>OkCancelButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>ButtonOK</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>ButtonCancel</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>