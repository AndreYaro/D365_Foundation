<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>VendSearchCriterion</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class VendSearchCriterion extends FormRun implements VendSearchICriterion
{
    VendSearchHelper            vendSearchHelper;
    EcoResCategoryHierarchy     procurementHierarchy;
    boolean                     onlyCurrentVendor;
    FormRun                     callerObject;
    SysLookupMultiSelectCtrl    lookupMultiSelectControlVendorGroup;
    SysLookupMultiSelectCtrl    lookupMultiSelectControlAddressState;
    SysLookupMultiSelectCtrl    lookupMultiSelectControlAddressCity;
    SysLookupMultiSelectCtrl    lookupMultiSelectControlAddressCountry;
    str                         searchExpression;
    boolean                     simplifiedSearchCriteria;
    DataAreaId                  dataAreaId;
    
    static str ValueDelimiter = ',';
    static str ExpressionDelimiter = ';';

}
]]></Source>
			</Method>
			<Method>
				<Name>addCategoryCriterionGroupDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds category and criterion group tables to existing data source.
    /// </summary>
    /// <param name="_qbdsVendReviewCriterionGroup">
    /// The data source to which the new tables are joined.
    /// </param>
    /// <param name="_recordsExists">
    /// Indicates whether user has selected procurement categories.
    /// </param>
    private void addCategoryCriterionGroupDataSource(QueryBuildDataSource _qbdsVendReviewCriterionGroup, boolean _recordsExists)
    {
        QueryBuildDataSource                qbdsVendReviewCategoryCriterionGroup;
        QueryBuildDataSource                qbdsEcoResCategory;
        QueryBuildRange                     qbrEcoResCategory, qbrEcoResCategoryHierarchy;
        VendTmpSearchCriteriaProcCategories vendorProcurementCategoryList;

        qbdsVendReviewCategoryCriterionGroup    = vendSearchHelper.addChildDataSouce(_qbdsVendReviewCriterionGroup,
                                                                                    tableNum(VendReviewCategoryCriterionGroup),
                                                                                    JoinMode::ExistsJoin);
        qbdsEcoResCategory                      = vendSearchHelper.addChildDataSouce(qbdsVendReviewCategoryCriterionGroup,
                                                                                    tableNum(EcoResCategory),
                                                                                    JoinMode::InnerJoin);

        if (_recordsExists == true)
        {
            vendorProcurementCategoryList.setTmp();
            vendorProcurementCategoryList.setTmpData(vendorProcurementCategory);

            // add range for each selected procurement category name
            while select EcoResCategory, Name from vendorProcurementCategoryList
            {
                qbrEcoResCategory = qbdsEcoResCategory.addRange(fieldNum(EcoResCategory, Name));
                qbrEcoResCategory.value(SysQuery::value(vendorProcurementCategoryList.Name));
            }
        }
        else
        {
            qbrEcoResCategoryHierarchy = qbdsEcoResCategory.addRange(fieldNum(EcoResCategory, CategoryHierarchy));
            qbrEcoResCategoryHierarchy.value(queryValue(EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Procurement).CategoryHierarchy));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCriteriaRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds range conditions to data sources for vendor evaluation criteria.
    /// </summary>
    /// <param name="_qbds">
    /// The data source to which the ranges to be added.
    /// </param>
    /// <returns>
    /// Returns true if ranges addition successful, false if could not be added.
    /// </returns>
    public boolean addCriteriaRanges(QueryBuildDataSource _qbds)
    {
        boolean                     recordsExists = false;
        QueryBuildRange             qbrCriteriaName;
        VendReviewCriterion         vendReviewCriterionList;

        // copy datasource buffer to preserve values in a grid
        vendReviewCriterionList.setTmp();
        vendReviewCriterionList.setTmpData(vendTmpReviewCriterion);

        // build ranges for name
        while select Name from vendReviewCriterionList
        {
            qbrCriteriaName = _qbds.addRange(fieldNum(VendReviewCriterion, Name));
            qbrCriteriaName.value(SysQuery::value(vendReviewCriterionList.Name));
            recordsExists = true;
        }

        return recordsExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCriterionGroupRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds range conditions to data sources for vendor evaluation criterion group.
    /// </summary>
    /// <param name="_qbds">
    /// The data source to which the ranges to be added.
    /// </param>
    /// <returns>
    /// Returns true if ranges addition successful, false if could not be added.
    /// </returns>
    public boolean addCriterionGroupRanges(QueryBuildDataSource _qbds)
    {
        boolean                     recordsExists = false;
        QueryBuildRange             qbrCriterionGroupName;
        VendReviewCriterionGroup    vendReviewCriterionGroupList;

        // copy datasource buffer to preserve values in a grid
        vendReviewCriterionGroupList.setTmp();
        vendReviewCriterionGroupList.setTmpData(vendTmpReviewCriterionGroup);

        // build ranges for name
        while select Name from vendReviewCriterionGroupList
        {
            qbrCriterionGroupName = _qbds.addRange(fieldNum(VendReviewCriterionGroup, Name));
            qbrCriterionGroupName.value(SysQuery::value(vendReviewCriterionGroupList.Name));
            recordsExists = true;
        }

        return recordsExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProcCategoryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the procurement category range condition to vendor query.
    /// </summary>
    /// <param name="_qbds">
    /// This is the data source table to which the ranges are added.
    /// </param>
    /// <returns>
    /// Returns a boolean, where true indicated ranges added successfully and false indicates ranges could not be added.
    /// </returns>
    public boolean addProcCategoryRanges(QueryBuildDataSource _qbds)
    {
        boolean                             recordsExists       = false;
        QueryBuildRange                     qbrProcCategoryName;
        VendTmpSearchCriteriaProcCategories vendorProcurementCategoryList;

        // copy datasource buffer to preserve values in a grid
        vendorProcurementCategoryList.setTmp();
        vendorProcurementCategoryList.setTmpData(vendorProcurementCategory);

        // build ranges
        while select Name from vendorProcurementCategoryList
        {
            qbrProcCategoryName = _qbds.addRange(fieldNum(EcoResCategory, Name));
            qbrProcCategoryName.value(SysQuery::value(vendorProcurementCategoryList.Name));
            recordsExists = true;
        }

        return recordsExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categories2text</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts records from category selection table to a semicolon separated list of categories.
    /// </summary>
    /// <returns>
    /// Semicolon separated list of categories.
    /// </returns>
    public str categories2text()
    {
        VendTmpSearchCriteriaProcCategories vendorProcurementCategoryList;
        TextBuffer                          categoryList                    = new TextBuffer();

        // copy datasource buffer to preserve values in a grid
        vendorProcurementCategoryList.setTmp();
        vendorProcurementCategoryList.setTmpData(vendorProcurementCategory);

        // build list of name
        while select EcoResCategory, Name from vendorProcurementCategoryList
        {
            categoryList.appendText(VendSearchAddCategoryValueDelimiterFlight::instance().isEnabled() ? ExpressionDelimiter : ValueDelimiter);
            categoryList.appendText(vendorProcurementCategoryList.Name);
        }
        // remove first delimiter
        if (categoryList.getText() != strMin())
        {
            categoryList.delete(1,1);
        }

        return categoryList.getText();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCompetency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the vendor evaluation criterion group grid and class attributes, in turn also invokes vendor evaluation criteria clear.
    /// </summary>
    public void clearCompetency()
    {
        //clears the competencies by setting it to blank string
        element.parmCriterionGroup(strMin(), true);

        //invokes clear skills as need to clear skills too on clear of competencies
        element.clearSkills();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearSkills</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the vendor evaluation criteria and class attributes.
    /// </summary>
    public void clearSkills()
    {
        //clears the skills by setting it to blank string
        element.parmCriterion(strMin(), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is forms overridden method which would be invoked on ok click of the form.
    /// </summary>
    /// <remarks>
    /// This method execute following series of actions
    ///     1. Iterates through the collection of data source selected.
    ///     2. For the selected data sources, it builds the data source specific queries.
    ///     3. Returns the queries build to search result form via invoking vendor specific method call.
    ///     4. Invokes result form's executeQuery method to fill the vendor specific grid accordingly.
    /// </remarks>
    public void closeOk()
    {
        super();

        element.parseSearchExpression();

        MenuFunction menuFunction;

        // open vendor Search result form
        if (VendVendorSearchResultsFeature::instance().isEnabled())
        {
            menuFunction = new MenuFunction(menuitemDisplayStr(VendVendorSearchResult), MenuItemType::Display);
        }
        else
        {
            menuFunction = new MenuFunction(menuitemDisplayStr(VendSearchResult), MenuItemType::Display);
        }
         
        Args args = new Args();
        FormRun formRun = menuFunction.create(args);
        Object returnObject = this.initializeVendorSearchResult(formRun);
        returnObject.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeVendorSearchResult</Name>
				<Source><![CDATA[
    protected Object initializeVendorSearchResult(FormRun _formRun)
    {
        Object returnObject = _formRun;
        returnObject.parmSimplifiedSearchResult(simplifiedSearchCriteria);
        returnObject.parmDataAreaId(dataAreaId);
        _formRun.init();
        _formRun.run();

        // set queries to search result form
        Map sourceMap = vendSearchHelper.getQueries(employeeThatAreVendors.value());
        MapEnumerator queryEnumerator = sourceMap.getEnumerator();
        while (queryEnumerator.moveNext())
        {
            Query query = queryEnumerator.currentValue();

            switch (queryEnumerator.currentKey())
            {
                case tableNum(VendTable):
                    returnObject.parmCurrentVendorQuery(query);
                    break;
                case tableNum(VendRequest):
                    returnObject.parmProspectiveVendorQuery(query);
                    break;
                case tableNum(VendRequestSignup):
                    returnObject.parmUnsolicitedVendorQuery(query);
                    break;
            }
        }

        // pass query parameters to vendor search result form
        returnObject.parmCurrentVendorSelected(currentVendors.value());
        returnObject.parmProspectiveVendorSelected(prospectiveVendors.value());
        returnObject.parmUnsolicitedVendorSelected(unsolicitedVendors.value());
        returnObject.parmEmployeesIncluded(employeeThatAreVendors.value());
        returnObject.parmAllLegalEntitiesIncluded(allLegalEntities.value());
        returnObject.parmSearchExpression(searchExpression);
        returnObject.parmCityControlContainer([lookupMultiSelectControlAddressCity.get(), lookupMultiSelectControlAddressCity.getSelectedFieldValues()]);
        returnObject.parmStateControlContainer([lookupMultiSelectControlAddressState.get(), lookupMultiSelectControlAddressState.getSelectedFieldValues()]);
        returnObject.parmCountryControlContainer([lookupMultiSelectControlAddressCountry.get(), lookupMultiSelectControlAddressCountry.getSelectedFieldValues()]);
        returnObject.parmVendorGroupControlContainer([lookupMultiSelectControlVendorGroup.get(), lookupMultiSelectControlVendorGroup.getSelectedFieldValues()]);

        if (callerObject 
            && (callerObject.name() == formStr(VendSearchResults)
                || callerObject.name() == formStr(VendVendorSearchResults)))
        {
            returnObject.parmParentObject(null);
        }
        else
        {
            returnObject.parmParentObject(callerObject);
        }

        return returnObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>criterion2text</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts records from vendor criteria selection table to a comma separated list of criteria.
    /// </summary>
    /// <returns>
    /// Comma separated list of vendor criteria.
    /// </returns>
    public str criterion2text()
    {
        VendReviewCriterion vendReviewCriterionList;
        TextBuffer          criterionList                = new TextBuffer();

        // copy datasource buffer to preserve values in a grid
        vendReviewCriterionList.setTmp();
        vendReviewCriterionList.setTmpData(vendTmpReviewCriterion);

        // build list of name
        while select RecId, Name from vendReviewCriterionList
        {
            criterionList.appendText(ValueDelimiter);
            criterionList.appendText(vendReviewCriterionList.Name);
        }
        // remove first delimiter
        if (criterionList.getText() != strMin())
        {
            criterionList.delete(1,1);
        }

        return criterionList.getText();
    }

]]></Source>
			</Method>
			<Method>
				<Name>criterionGroup2text</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts records from vendor criteria group selection table to a comma separated list of criteria group.
    /// </summary>
    /// <returns>
    /// Comma separated list of vendor criteria groups.
    /// </returns>
    public str criterionGroup2text()
    {
        VendReviewCriterionGroup vendReviewCriterionGroupList;
        TextBuffer               criterionGroupList                = new TextBuffer();

        // copy datasource buffer to preserve values in a grid
        vendReviewCriterionGroupList.setTmp();
        vendReviewCriterionGroupList.setTmpData(vendTmpReviewCriterionGroup);

        // build list of name
        while select RecId, Name from vendReviewCriterionGroupList
        {
            criterionGroupList.appendText(ValueDelimiter);
            criterionGroupList.appendText(vendReviewCriterionGroupList.Name);
        }
        // remove first delimiter
        if (criterionGroupList.getText() != strMin())
        {
            criterionGroupList.delete(1,1);
        }

        return criterionGroupList.getText();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCriterionGroupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a query for vendor evaluation criterion group depending on the selection of procurement category.
    /// </summary>
    /// <returns>
    /// The query object with specific data sources and ranges.
    /// </returns>
    public Query getCriterionGroupQuery()
    {
        Query                   query = new Query();

        boolean recordsExists = vendorProcurementCategory.EcoResCategory != 0;
        QueryBuildDataSource qbdsVendReviewCriterionGroup = query.addDataSource(tableNum(VendReviewCriterionGroup));

        element.addCategoryCriterionGroupDataSource(qbdsVendReviewCriterionGroup, recordsExists);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCriterionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a query for vendor evaluation criteria depending on the selection of procurement category and vendor evaluation criterion group.
    /// </summary>
    /// <returns>
    /// The query object with specific data sources and ranges.
    /// </returns>
    public Query getCriterionQuery()
    {
        Query                                           query = new Query();

        QueryBuildDataSource qbdsVendReviewCriterion = query.addDataSource(tableNum(VendReviewCriterion));
        QueryBuildDataSource qbdsVendReviewCriterionGroup = vendSearchHelper.addChildDataSouce(qbdsVendReviewCriterion, tableNum(VendReviewCriterionGroup), JoinMode::InnerJoin);

        if (element.addCriterionGroupRanges(qbdsVendReviewCriterionGroup) == false)
        {
            boolean recordsExists = vendorProcurementCategory.EcoResCategory != 0;
            element.addCategoryCriterionGroupDataSource(qbdsVendReviewCriterionGroup, recordsExists);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordCounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the map collection containing the count of records fetched for all selected data source vendors.
    /// </summary>
    /// <returns>
    /// Map containing the value of the counts.
    /// </returns>
    public Map getRecordCounts()
    {
        return vendSearchHelper.getRecordCounts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        if (VendSearchCriterionVendReviewConfigKeyDisabledErrorFlight::instance().isEnabled()
            && !isConfigurationkeyEnabled(configurationKeyNum(VendReview)))
        {
            throw error("@SCM:VendSearchCritetionConfigKeyError");
        }

        super();

        vendSearchHelper = new VendSearchHelper();
        lookupMultiSelectControlAddressCity     = SysLookupMultiSelectCtrl::construct(element, city, queryStr(VendSearchCity));
        lookupMultiSelectControlAddressState    = SysLookupMultiSelectCtrl::construct(element, state, queryStr(VendSearchState));
        lookupMultiSelectControlAddressCountry  = SysLookupMultiSelectCtrl::construct(element, countryRegion, queryStr(VendSearchCountry));
        lookupMultiSelectControlVendorGroup     = SysLookupMultiSelectCtrl::construct(element, vendorGroup, queryStr(VendSearchVendorGroup));

        // procurement hierarchy to be used for procurement category control
        procurementHierarchy = EcoResCategoryHierarchy::find(EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Procurement).CategoryHierarchy);

        onlyCurrentVendor = false;

        vendorProcurementCategory.setTmp();
        vendorProcurementCategory.clear();

        vendTmpReviewCriterionGroup.setTmp();
        vendTmpReviewCriterionGroup.clear();

        vendTmpReviewCriterion.setTmp();
        vendTmpReviewCriterion.clear();

        if (element.args() && element.args().caller())
        {
            callerObject = element.args().caller();
        }

        element.setFormAsPerCaller();
    }

]]></Source>
			</Method>
			<Method>
				<Name>manageCurrentVendors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Manages the current vendor selection.
    /// </summary>
    /// <param name="_isCurrentVendorSelected">
    /// A boolean value to indicate the current vendor selection.
    /// </param>
    public void manageCurrentVendors(boolean _isCurrentVendorSelected)
    {
        if (_isCurrentVendorSelected)
        {
            vendSearchHelper.addSearchSource(tableNum(VendTable));
        }
        else
        {
            vendSearchHelper.removeSearchSource(tableNum(VendTable));
        }
        // set controls
        vendorSpecificCriteria.allowEdit(_isCurrentVendorSelected);
        employeeThatAreVendors.enabled(_isCurrentVendorSelected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>manageProspectiveVendors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Manages the prospection vendor selection.
    /// </summary>
    /// <param name="_isProspectiveVendorSelected">
    /// A boolean value to indicate the prospection vendor selection.
    /// </param>
    public void manageProspectiveVendors(boolean _isProspectiveVendorSelected)
    {
        if (_isProspectiveVendorSelected)
        {
            vendSearchHelper.addSearchSource(tableNum(VendRequest));
        }
        else
        {
            vendSearchHelper.removeSearchSource(tableNum(VendRequest));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>manageUnsolicitedVendors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Manages the unsolicited vendor selection.
    /// </summary>
    /// <param name="_isUnsolicitedVendorSelected">
    /// A boolean value to indicate the unsolicited vendor selection.
    /// </param>
    public void manageUnsolicitedVendors(boolean _isUnsolicitedVendorSelected)
    {
        if (_isUnsolicitedVendorSelected)
        {
            vendSearchHelper.addSearchSource(tableNum(VendRequestSignup));
        }
        else
        {
            vendSearchHelper.removeSearchSource(tableNum(VendRequestSignup));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBidOnly</Name>
				<Source><![CDATA[
    public VendIgnoreNoYes parmBidOnly(VendIgnoreNoYes _bidOnly = bidOnly.selection())
    {
        if (!prmisdefault(_bidOnly))
        {
            bidOnly.selection(_bidOnly);
        }

        return _bidOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryStatus</Name>
				<Source><![CDATA[
    public VendCategoryStatus parmCategoryStatus(VendCategoryStatus _categoryStatus = categoryStatus.selection())
    {
        if (!prmisdefault(_categoryStatus))
        {
            categoryStatus.selection(_categoryStatus);
        }

        return _categoryStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCity</Name>
				<Source><![CDATA[
    public str parmCity(str _city = city.text(), boolean _set = false)
    {
        Query                   controlQuery;
        QueryRun                controlQueryRun;
        QueryBuildRange         controlRange;
        LogisticsAddressCity    addressCity;
        container               controlContainerId, controlContainerName;

        if (_set && _city != city.text())
        {
            if (!_city)
            {
                lookupMultiSelectControlAddressCity.set(conNull());
            }
            else if (!conLen(lookupMultiSelectControlAddressCity.getSelectedFieldValues()))
            {
                // change selection on multi select lookup control
                controlQuery = new Query(queryStr(VendSearchCity));
                controlQuery.allowCrossCompany(true);
                controlRange = SysQuery::findOrCreateRange(controlQuery.dataSourceName(tableStr(LogisticsAddressCity)),
                                                    fieldNum(LogisticsAddressCity, Name));
                controlRange.value(this.str2QueryValue(_city));

                controlQueryRun = new QueryRun(controlQuery);
                while (controlQueryRun.next())
                {
                    addressCity = controlQueryRun.get(tableNum(LogisticsAddressCity));
                    // avoid adding same name several times due to different company data
                    if (!conFind(controlContainerName,addressCity.Name))
                    {
                        controlContainerId      += addressCity.RecId;
                        controlContainerName    += addressCity.Name;
                    }
                }
                lookupMultiSelectControlAddressCity.set([controlContainerId, controlContainerName]);
            }
        }

        return city.text();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCountry</Name>
				<Source><![CDATA[
    public str parmCountry(str _countryRegion = countryRegion.text(), boolean _set = false)
    {
        Query                                       controlQuery;
        QueryRun                                    controlQueryRun;
        QueryBuildRange                             controlRange;
        LogisticsAddressCountryRegion				addressCountryRegionName;
        container                                   controlContainerId, controlContainerName;

        if (_set && _countryRegion != countryRegion.text())
        {
            if (!_countryRegion)
            {
                lookupMultiSelectControlAddressCountry.set(conNull());
            }
            else if (!conLen(lookupMultiSelectControlAddressCountry.getSelectedFieldValues()))
            {
                // change selection on multi select lookup control
                controlQuery = new Query(queryStr(VendSearchCountry));
                controlQuery.allowCrossCompany(true);
                controlRange = SysQuery::findOrCreateRange(controlQuery.dataSourceName(tableStr(LogisticsAddressCountryRegion)),
                                                    fieldNum(LogisticsAddressCountryRegion, CountryRegionId));
                controlRange.value(this.str2QueryValue(_countryRegion));

                controlQueryRun = new QueryRun(controlQuery);
                while (controlQueryRun.next())
                {
                    addressCountryRegionName    = controlQueryRun.get(tableNum(LogisticsAddressCountryRegion));
                    // avoid adding same name several times due to different company data
                    if (!conFind(controlContainerName,addressCountryRegionName.CountryRegionId))
                    {
                        controlContainerId      += addressCountryRegionName.RecId;
                        controlContainerName    += addressCountryRegionName.CountryRegionId;
                    }
                }
                lookupMultiSelectControlAddressCountry.set([controlContainerId, controlContainerName]);
            }
        }
        return countryRegion.text();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCriterion</Name>
				<Source><![CDATA[
    public str parmCriterion(str _criterion = criterionEdit.text(), boolean _set = false)
    {
        VendReviewCriterion                 vendReviewCriterions;
        VendReviewCriterion                 vendReviewCriterionsTmp;
        Query                               query;
        QueryRun                            queryRun;
        QueryBuildRange                     queryRange;

        if (_set && _criterion != criterionEdit.text())
        {
            vendReviewCriterionsTmp.setTmp();
            vendReviewCriterionsTmp.clear();
            if (_criterion)
            {
                query       = element.getCriterionQuery();
                queryRange  = SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(VendReviewCriterion)),
                                                    fieldNum(VendReviewCriterion, Name));
                queryRange.value(this.str2QueryValue(_criterion));

                queryRun = new QueryRun(query);
                while (queryRun.next())
                {
                    vendReviewCriterions    = queryRun.get(tableNum(VendReviewCriterion));
                    vendReviewCriterionsTmp.clear();
                    vendReviewCriterionsTmp.RecId   = vendReviewCriterions.RecId;
                    vendReviewCriterionsTmp.Name    = vendReviewCriterions.Name;
                    vendReviewCriterionsTmp.insert();
                }
            }
            vendTmpReviewCriterion.setTmpData(vendReviewCriterionsTmp);
            vendTmpReviewCriterion_ds.research();
            // reflect changes on UI
            criterionEdit.text(element.criterion2text());
        }

        return _criterion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCriterionGroup</Name>
				<Source><![CDATA[
    public str parmCriterionGroup(str _criterionGroup = criterionGroupEdit.text(), boolean _set = false)
    {
        VendReviewCriterionGroup    vendTmpCriterionGroup;
        VendReviewCriterionGroup    vendReviewCriterionGroup;
        Query                       query;
        QueryBuildDataSource        queryDataSource;
        QueryBuildRange             queryRange;

        if (_set && _criterionGroup != criterionGroupEdit.text())
        {
            vendTmpCriterionGroup.setTmp();
            vendTmpCriterionGroup.clear();

            if (_criterionGroup)
            {
                query           = element.getCriterionGroupQuery();
                queryDataSource = query.dataSourceTable(tableNum(VendReviewCriterionGroup));
                queryRange      = SysQuery::findOrCreateRange(queryDataSource,
                                                    fieldNum(VendReviewCriterionGroup, Name));
                queryRange.value(this.str2QueryValue(_criterionGroup));

                QueryRun queryRun = new QueryRun(query);
                while (queryRun.next())
                {
                    vendReviewCriterionGroup    = queryRun.get(tableNum(VendReviewCriterionGroup));
                    vendTmpCriterionGroup.clear();
                    vendTmpCriterionGroup.RecId = vendReviewCriterionGroup.RecId;
                    vendTmpCriterionGroup.Name  = vendReviewCriterionGroup.Name;
                    vendTmpCriterionGroup.insert();
                }
            }
            vendTmpReviewCriterionGroup.setTmpData(vendTmpCriterionGroup);
            vendTmpReviewCriterionGroup_ds.research();
            // reflect changes on UI
            criterionGroupEdit.text(element.criterionGroup2text());
        }

        return _criterionGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentVendor</Name>
				<Source><![CDATA[
    public boolean parmCurrentVendor()
    {
        return onlyCurrentVendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmDataAreaId(DataAreaId _dataAreaId = dataAreaId)
    {
        dataAreaId = _dataAreaId;

        return dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEthnicOrigin</Name>
				<Source><![CDATA[
    public str parmEthnicOrigin(str _ethnicOrgin = ethnicOrigin.text())
    {
        ethnicOrigin.text(_ethnicOrgin);
        return ethnicOrigin.text();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFemaleOwned</Name>
				<Source><![CDATA[
    public VendIgnoreNoYes parmFemaleOwned(VendIgnoreNoYes _femaleOwned = femaleOwned.selection())
    {
        femaleOwned.selection(_femaleOwned);
        return _femaleOwned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLocallyOwned</Name>
				<Source><![CDATA[
    public VendIgnoreNoYes parmLocallyOwned(VendIgnoreNoYes _locallyOwned = locallyOwned.selection())
    {
        locallyOwned.selection(_locallyOwned);
        return _locallyOwned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinorityOwned</Name>
				<Source><![CDATA[
    public VendIgnoreNoYes parmMinorityOwned(VendIgnoreNoYes _minorityOwned = minorityOwned.selection())
    {
        minorityOwned.selection(_minorityOwned);
        return _minorityOwned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmName</Name>
				<Source><![CDATA[
    public str parmName(str _nameContains = nameContains.valueStr())
    {
        nameContains.text(_nameContains);
        return nameContains.text();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOneTimeSupplier</Name>
				<Source><![CDATA[
    public VendIgnoreNoYes parmOneTimeSupplier(VendIgnoreNoYes _oneTimeSupplier = oneTimeSupplier.selection())
    {
        oneTimeSupplier.selection(_oneTimeSupplier);
        return _oneTimeSupplier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOwnerIsDisabled</Name>
				<Source><![CDATA[
    public VendIgnoreNoYes parmOwnerIsDisabled(VendIgnoreNoYes _ownerIsDisabled = ownerIsDisabled.selection())
    {
        ownerIsDisabled.selection(_ownerIsDisabled);
        return _ownerIsDisabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOwnerIsVeteran</Name>
				<Source><![CDATA[
    public VendIgnoreNoYes parmOwnerIsVeteran(VendIgnoreNoYes _ownerIsAServiceVeteran = ownerIsAServiceVeteran.selection())
    {
        ownerIsAServiceVeteran.selection(_ownerIsAServiceVeteran);
        return _ownerIsAServiceVeteran;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcurementCategory</Name>
				<Source><![CDATA[
    public str parmProcurementCategory(str _procurementCategories = categoriesEdit.text(), boolean _set = false)
    {
        Query           query;
        QueryBuildRange queryRange;
        VendTmpSearchCriteriaProcCategories   vendorProcurementCategoryLocal;
        EcoResCategory  ecoResCategory;

        if (_set &&_procurementCategories != categoriesEdit.text())
        {
            vendorProcurementCategoryLocal.setTmp();
            vendorProcurementCategoryLocal.clear();

            if (_procurementCategories)
            {
                query       = new Query(queryStr(ProcCategory));
                queryRange  = SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(EcoResCategory)),
                                                    fieldNum(EcoResCategory, Name));
                queryRange.value(this.str2QueryValue(_procurementCategories));
                QueryRun queryRun = new QueryRun(query);
                while (queryRun.next())
                {
                    ecoResCategory   = queryRun.get(tableNum(EcoResCategory));
                    vendorProcurementCategoryLocal.clear();
                    vendorProcurementCategoryLocal.EcoResCategory   = ecoResCategory.RecId;
                    vendorProcurementCategoryLocal.Name             = ecoResCategory.Name;
                    vendorProcurementCategoryLocal.insert();
                }
            }
            vendorProcurementCategory.setTmpData(vendorProcurementCategoryLocal);
            vendorProcurementCategory_ds.research();
            // reflect changes on UI
            categoriesEdit.text(element.categories2text());
            categoryStatus.enabled(categoriesEdit.text() != '');
        }

        return categoriesEdit.text();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSearchExpression</Name>
				<Source><![CDATA[
    public str parmSearchExpression(str _searchExpression = searchExpression)
    {
        searchExpression = _searchExpression;
        return searchExpression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSimplifiedSearchCriteria</Name>
				<Source><![CDATA[
    public boolean parmSimplifiedSearchCriteria(boolean _simplifiedSearchCriteria = simplifiedSearchCriteria)
    {
        simplifiedSearchCriteria = _simplifiedSearchCriteria;

        return simplifiedSearchCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSmallBusiness</Name>
				<Source><![CDATA[
    public VendIgnoreNoYes parmSmallBusiness(VendIgnoreNoYes _smallBusiness = smallBusiness.selection())
    {
        smallBusiness.selection(_smallBusiness);
        return _smallBusiness;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmState</Name>
				<Source><![CDATA[
    public str parmState(str _state = state.text(), boolean _set = false)
    {
        Query                   controlQuery;
        QueryBuildRange         controlRange;
        LogisticsAddressState   addressState;
        container               controlContainerId, controlContainerName;

        if (_set && _state != state.text())
        {
            if (!_state)
            {
                lookupMultiSelectControlAddressState.set(conNull());
            }
            else  if (!conLen(lookupMultiSelectControlAddressState.getSelectedFieldValues()))
            {
                // change selection on multi select lookup control
                controlQuery = new Query(queryStr(VendSearchState));
                controlQuery.allowCrossCompany(true);
                controlRange = SysQuery::findOrCreateRange(controlQuery.dataSourceName(tableStr(LogisticsAddressState)),
                                                    fieldNum(LogisticsAddressState, StateId));
                controlRange.value(this.str2QueryValue(_state));
                QueryRun controlQueryRun = new QueryRun(controlQuery);
                while (controlQueryRun.next())
                {
                    addressState            = controlQueryRun.get(tableNum(LogisticsAddressState));
                    // avoid adding same name several times due to different company data
                    if (!conFind(controlContainerName,addressState.StateId))
                    {
                        controlContainerId      += addressState.RecId;
                        controlContainerName    += addressState.StateId;
                    }
                }
                lookupMultiSelectControlAddressState.set([controlContainerId, controlContainerName]);
            }
        }

        return state.text();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendorGroup</Name>
				<Source><![CDATA[
    public str parmVendorGroup(str _vendorGroup = vendorGroup.text(), boolean _set = false)
    {
        Query           controlQuery;
        QueryBuildRange controlRange;
        VendGroup       vendGroup;
        container       controlContainerId, controlContainerName;

        if (_set && _vendorGroup != vendorGroup.text())
        {
            if (!_vendorGroup)
            {
                lookupMultiSelectControlVendorGroup.set(conNull());
            }
            else if (!conLen(lookupMultiSelectControlVendorGroup.getSelectedFieldValues()))
            {
                // change selection on multi select lookup control
                controlQuery = new Query(queryStr(VendSearchVendorGroup));
                controlRange = SysQuery::findOrCreateRange(controlQuery.dataSourceName(tableStr(VendGroup)),
                                                    fieldNum(VendGroup, VendGroup));
                controlRange.value(this.str2QueryValue(_vendorGroup));
                controlQuery.allowCrossCompany(allLegalEntities.checked());
                QueryRun controlQueryRun = new QueryRun(controlQuery);
                while (controlQueryRun.next())
                {
                    vendGroup               = controlQueryRun.get(tableNum(VendGroup));
                    controlContainerId      += vendGroup.RecId;
                    controlContainerName    += vendGroup.VendGroup;
                }
                lookupMultiSelectControlVendorGroup.set([controlContainerId, controlContainerName]);
            }
        }

        return vendorGroup.text();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendorHold</Name>
				<Source><![CDATA[
    public CustVendorBlocked parmVendorHold(CustVendorBlocked _vendorHold = vendorHold.selection())
    {
        vendorHold.selection(_vendorHold);
        return _vendorHold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseSearchExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the helper parse method to split the search expression and set the form attributes.
    /// </summary>
    public void parseSearchExpression()
    {
        vendSearchHelper.parseSearchExpression(this.parmSearchExpression(), element);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCategorySelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets categories selected from selection procurement category form.
    /// </summary>
    /// <param name="_selectedCategoryString">
    /// String containing selected value list
    /// </param>
    public void setCategorySelected(str _selectedCategoryString)
    {
        element.parmProcurementCategory(_selectedCategoryString, true);
        element.parmCriterionGroup(strMin(), true);
        element.parmCriterion(strMin(), true);
        vendSearchHelper.buildSearchExpression(element);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCriterionGroupSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets vendor criteria group from criteria group selection form.
    /// </summary>
    /// <param name="_selectedCriterionGroupString">
    /// String containing selected value list
    /// </param>
    public void setCriterionGroupSelected(str _selectedCriterionGroupString)
    {
        element.parmCriterionGroup(_selectedCriterionGroupString, true);
        element.parmCriterion(strMin(), true);
        vendSearchHelper.buildSearchExpression(element);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCriterionSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets vendor criteria from criteria selection form.
    /// </summary>
    /// <param name="_selectedCriterionString">
    /// String containing selected value list
    /// </param>
    public void setCriterionSelected(str _selectedCriterionString)
    {
        element.parmCriterion(_selectedCriterionString, true);
        vendSearchHelper.buildSearchExpression(element);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormAsPerCaller</Name>
				<Source><![CDATA[
    private void setFormAsPerCaller()
    {
        if (callerObject)
        {
            switch (callerObject.name())
            {
                case formStr(VendSearchResults):
                case formStr(VendVendorSearchResults):
                    // get parameters from vendor search result form
                    currentVendors.value(callerObject.parmCurrentVendorSelected());
                    prospectiveVendors.value(callerObject.parmProspectiveVendorSelected());
                    unsolicitedVendors.value(callerObject.parmUnsolicitedVendorSelected());

                    employeeThatAreVendors.value(callerObject.parmEmployeesIncluded());
                    allLegalEntities.value(callerObject.parmAllLegalEntitiesIncluded());

                    lookupMultiSelectControlAddressCity.set(callerObject.parmCityControlContainer());
                    lookupMultiSelectControlAddressState.set(callerObject.parmStateControlContainer());
                    lookupMultiSelectControlAddressCountry.set(callerObject.parmCountryControlContainer());
                    lookupMultiSelectControlVendorGroup.set(callerObject.parmVendorGroupControlContainer());

                    element.parmSearchExpression(callerObject.parmSearchExpression());

                    break;

                case formStr(VendTable),
                    formStr(VendTableListPage),
                    formStr(PurchRFQCaseTable):
                    onlyCurrentVendor = true;
                    break;
            }
        }

        // set controls
        search.visible(!onlyCurrentVendor);
        allLegalEntities.visible(!onlyCurrentVendor);
        employeeThatAreVendors.checked(!onlyCurrentVendor);

        element.manageCurrentVendors(currentVendors.value());
        element.manageProspectiveVendors(prospectiveVendors.value());
        element.manageUnsolicitedVendors(unsolicitedVendors.value());
        vendSearchHelper.parmIncludeEmployees(employeeThatAreVendors.value());
        vendSearchHelper.parmIncludeAllLegalEntity(allLegalEntities.value());
        vendorGroup.enabled(!allLegalEntities.value());
        vendorHold.enabled(!allLegalEntities.value());
        element.parseSearchExpression();
        categoryStatus.enabled(categoriesEdit.text() != '');

        if (simplifiedSearchCriteria)
        {
            element.setFormAsPerVendUnsolicitedVendor();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormAsPerVendUnsolicitedVendor</Name>
				<Source><![CDATA[
    public void setFormAsPerVendUnsolicitedVendor()
    {
        CurrentVendors.visible(false);
        ProspectiveVendors.visible(false);
        UnsolicitedVendors.visible(false);
        DiversityClassification.visible(false);
        ProcurementCategories.visible(false);
        VendorSpecificCriteria.visible(false);
        onlyCurrentVendor = false;
        nameContains.text(element.args().parm());
        this.parmName(element.args().parm());
        vendSearchHelper.buildSearchExpression(element);
    }

]]></Source>
			</Method>
			<Method>
				<Name>str2QueryValue</Name>
				<Source><![CDATA[
    private str str2QueryValue(str _str)
    {
        str ExpressionDelimiters = VendSearchAddCategoryValueDelimiterFlight::instance().isEnabled() ? ';':';,';

        if (_str)
        {
            List list = strSplit(_str, ExpressionDelimiters);
            ListEnumerator listEnumerator = list.getEnumerator();
            List resultList = new List(Types::String);

            while (listEnumerator.moveNext())
            {
                resultList.addEnd(queryValue(listEnumerator.current()));
            }

            return strList2str(resultList, ValueDelimiter);
        }

        return _str;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCriterion</Name>
				<Source><![CDATA[
    public str getCriterion()
    {
        return this.parmCriterion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCriterionGroup</Name>
				<Source><![CDATA[
    public str getCriterionGroup()
    {
        return element.parmCriterionGroup(criterionGroupEdit.text());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcurementCategory</Name>
				<Source><![CDATA[
    public str getProcurementCategory()
    {
        return element.parmProcurementCategory(categoriesEdit.text());
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>VendorProcurementCategory</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            vendorProcurementCategory.Name  = EcoResCategory::find(vendorProcurementCategory.EcoResCategory).Name;
            super();
            vendSearchHelper.buildSearchExpression(element);
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            super();
            element.clearCompetency();
            vendSearchHelper.buildSearchExpression(element);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>EcoResCategory</DataField>
						<Methods>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                return EcoResCategory::lookupCategoryHierarchy(_formReferenceControl, procurementHierarchy);
            }

]]></Source>
							</Method>
							<Method>
								<Name>resolveReference</Name>
								<Source><![CDATA[
            public Common resolveReference(FormReferenceControl _formReferenceControl)
            {
                Common tableBuffer = EcoResCategory::resolveCategoryHierarchy(_formReferenceControl,  procurementHierarchy);

                return tableBuffer.RecId? tableBuffer : null;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>VendTmpReviewCriterionGroup</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            super();
            vendSearchHelper.buildSearchExpression(element);
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            super();
            element.clearSkills();
            vendSearchHelper.buildSearchExpression(element);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>Name</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(VendReviewCriterionGroup), _formControl);
                sysTableLookup.addLookupfield(fieldNum(VendReviewCriterionGroup, Name));
                sysTableLookup.parmQuery(element.getCriterionGroupQuery());
                sysTableLookup.performFormLookup();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>VendTmpReviewCriterion</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            super();
            vendSearchHelper.buildSearchExpression(element);
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            super();
            vendSearchHelper.buildSearchExpression(element);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>Name</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(VendReviewCriterion), _formControl);
                sysTableLookup.addLookupfield(fieldNum(VendReviewCriterion, Name));
                sysTableLookup.addLookupfield(fieldNum(VendReviewCriterion, CriterionGroup));
                sysTableLookup.parmQuery(element.getCriterionQuery());
                sysTableLookup.performFormLookup();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>CurrentVendors</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.manageCurrentVendors(currentVendors.value());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProspectiveVendors</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.manageProspectiveVendors(prospectiveVendors.value());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UnsolicitedVendors</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.manageUnsolicitedVendors(unsolicitedVendors.value());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EmployeeThatAreVendors</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            vendSearchHelper.parmIncludeEmployees(employeeThatAreVendors.value());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllLegalEntities</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            vendSearchHelper.parmIncludeAllLegalEntity(allLegalEntities.value());

            vendorGroup.enabled(!allLegalEntities.value());
            vendorHold.enabled(!allLegalEntities.value());

            vendSearchHelper.buildSearchExpression(element);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>NameContains</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            vendSearchHelper.buildSearchExpression(element);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>City</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            vendSearchHelper.buildSearchExpression(element);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>State</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            vendSearchHelper.buildSearchExpression(element);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CountryRegion</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            vendSearchHelper.buildSearchExpression(element);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MinorityOwned</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            vendSearchHelper.buildSearchExpression(element);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FemaleOwned</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            vendSearchHelper.buildSearchExpression(element);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Smallbusiness</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            vendSearchHelper.buildSearchExpression(element);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LocallyOwned</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            vendSearchHelper.buildSearchExpression(element);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>VendorGroup</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            vendSearchHelper.buildSearchExpression(element);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>VendorHold</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            vendSearchHelper.buildSearchExpression(element);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CategoryStatus</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            vendSearchHelper.buildSearchExpression(element);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BidOnly</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            vendSearchHelper.buildSearchExpression(element);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OneTimeSupplier</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            vendSearchHelper.buildSearchExpression(element);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OwnerIsAServiceVeteran</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            vendSearchHelper.buildSearchExpression(element);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OwnerIsDisabled</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            vendSearchHelper.buildSearchExpression(element);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EthnicOrigin</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            Args            args        = new Args();
            MenuFunction menuFunction = new MenuFunction(menuitemDisplayStr(HcmEthnicOrigin), MenuItemType::Display);
            args.caller(element);
            menuFunction.run(args);
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            //Create an instance of SysTableLookup with the form control passed in
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(HcmEthnicOrigin), this);

            //Add the fields to be shown in the lookup form
            sysTableLookup.addLookupfield(fieldNum(HcmEthnicOrigin, EthnicOriginId), true);
            sysTableLookup.addLookupfield(fieldNum(HcmEthnicOrigin, Description), false);

            // Perform lookup
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            vendSearchHelper.buildSearchExpression(element);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>VendorProcurementCategory</Name>
			<Table>VendTmpSearchCriteriaProcCategories</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EcoResCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>VendTmpReviewCriterionGroup</Name>
			<Table>VendReviewCriterionGroup</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCheck>No</AllowCheck>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>VendTmpReviewCriterion</Name>
			<Table>VendReviewCriterion</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CriterionGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCheck>No</AllowCheck>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS316991</Caption>
		<DialogSize xmlns="">Full</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">DialogFastTabs</Pattern>
		<PatternVersion xmlns="">1.0</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<StatusBarStyle xmlns="">SimpleWithoutClose</StatusBarStyle>
		<Style xmlns="">Dialog</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tables</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1476395006</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>SearchTabPage</Name>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Search</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>CurrentVendors</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS317005</Label>
										<Value>1</Value>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>ProspectiveVendors</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>VendRequest</ConfigurationKey>
										<ElementPosition>1476395006</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS317006</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>UnsolicitedVendors</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>VendUnsolicitedRegistration</ConfigurationKey>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS317007</Label>
									</AxFormControl>
								</Controls>
								<Caption>@SYS115701</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Include</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>EmployeeThatAreVendors</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS316984</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>AllLegalEntities</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS316983</Label>
									</AxFormControl>
								</Controls>
								<Caption>@SYS40540</Caption>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS316993</Caption>
						<FastTabExpanded>Yes</FastTabExpanded>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>CommonCriteria</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ProcurementCategories</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>categoriesEdit</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>EcoResCategoryName</ExtendedDataType>
										<Label>@SYS133434</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>AddCategory</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>DynBackgroundBlue</BackgroundColor>
										<ButtonDisplay>ImageOnly</ButtonDisplay>
										<ForegroundColor>ButtonFace3D</ForegroundColor>
										<MenuItemName>VendSearchAddCategory</MenuItemName>
										<NormalImage>Add</NormalImage>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
								<Breakable>No</Breakable>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Identification</Name>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>NameContains</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS316996</Label>
									</AxFormControl>
								</Controls>
								<Caption>@SYS35583</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Location</Name>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>City</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>VendCity</ExtendedDataType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>State</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>VendState</ExtendedDataType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CountryRegion</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>VendCountryRegion</ExtendedDataType>
									</AxFormControl>
								</Controls>
								<Caption>@SYS33556</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>DiversityClassification</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>MinorityOwned</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>805306366</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_ProcurementAndSourcing:VendSearchCriterion_MinorityOwned</HelpText>
										<NeededPermission>Manual</NeededPermission>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<EnumType>VendIgnoreNoYes</EnumType>
										<Label>@SYS22704</Label>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>FemaleOwned</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1207959549</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_ProcurementAndSourcing:VendSearchCriterion_FemaleOwned</HelpText>
										<NeededPermission>Manual</NeededPermission>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<EnumType>VendIgnoreNoYes</EnumType>
										<Label>@SYS316997</Label>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>Smallbusiness</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612732</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_ProcurementAndSourcing:VendSearchCriterion_Smallbusiness</HelpText>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<EnumType>VendIgnoreNoYes</EnumType>
										<Label>@SYS114269</Label>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>LocallyOwned</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_ProcurementAndSourcing:VendSearchCriterion_LocallyOwned</HelpText>
										<NeededPermission>Manual</NeededPermission>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<EnumType>VendIgnoreNoYes</EnumType>
										<Label>@SYS114267</Label>
										<Items />
									</AxFormControl>
								</Controls>
								<Caption>@SYS316989</Caption>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<BackStyle>Transparent</BackStyle>
						<BackgroundColor>HighlightBackground</BackgroundColor>
						<Caption>@SYS316994</Caption>
						<FastTabExpanded>Yes</FastTabExpanded>
						<Scrollbars>Auto</Scrollbars>
						<TabAppearance>FlatSeparatedButtons</TabAppearance>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>VendorSpecificCriteria</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655763</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Evaluation</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Competencies</Name>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>criterionGroupEdit</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>Name</ExtendedDataType>
												<Label>@SYS312144</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>AddCriterionGroup</Name>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>MenuFunctionButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<BackgroundColor>DynBackgroundBlue</BackgroundColor>
												<ButtonDisplay>ImageOnly</ButtonDisplay>
												<ForegroundColor>ButtonFace3D</ForegroundColor>
												<MenuItemName>VendSearchAddReviewCriterionGroup</MenuItemName>
												<NormalImage>Add</NormalImage>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>HorizontalLeft</ArrangeMethod>
										<Breakable>No</Breakable>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Skills</Name>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>criterionEdit</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>Name</ExtendedDataType>
												<Label>@SYS312119</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>AddCriterion</Name>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>MenuFunctionButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<BackgroundColor>DynBackgroundBlue</BackgroundColor>
												<ButtonDisplay>ImageOnly</ButtonDisplay>
												<ForegroundColor>ButtonFace3D</ForegroundColor>
												<MenuItemName>VendSearchAddReviewCriterion</MenuItemName>
												<NormalImage>Add</NormalImage>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>HorizontalLeft</ArrangeMethod>
										<Breakable>No</Breakable>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<Caption>@SYS32115</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Details</Name>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>VendorGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DisplayLength>10</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
										<ExtendedDataType>VendVendorGroup</ExtendedDataType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>VendorHold</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1386916521</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_ProcurementAndSourcing:VendSearchCriterion_VendorHold</HelpText>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<EnumType>CustVendorBlocked</EnumType>
										<Label>@SYS128406</Label>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>CategoryStatus</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1700091219</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@SYS330498</HelpText>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<EnumType>VendCategoryStatus</EnumType>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>BidOnly</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_ProcurementAndSourcing:VendSearchCriterion_BidOnly</HelpText>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<EnumType>VendIgnoreNoYes</EnumType>
										<Label>@SYS114265</Label>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>OneTimeSupplier</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@SYS16864</HelpText>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<EnumType>VendIgnoreNoYes</EnumType>
										<Label>@SYS22531</Label>
										<Items />
									</AxFormControl>
								</Controls>
								<Caption>@SYS80118</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>DiversityClasification</Name>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>OwnerIsAServiceVeteran</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@SYS330500</HelpText>
										<NeededPermission>Manual</NeededPermission>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<EnumType>VendIgnoreNoYes</EnumType>
										<Label>@SYS184349</Label>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>OwnerIsDisabled</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@SYS330501</HelpText>
										<NeededPermission>Manual</NeededPermission>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<EnumType>VendIgnoreNoYes</EnumType>
										<Label>@SYS184351</Label>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>EthnicOrigin</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@SYS330502</HelpText>
										<NeededPermission>Manual</NeededPermission>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>HcmEthnicOriginId</ExtendedDataType>
									</AxFormControl>
								</Controls>
								<Caption>@SYS316989</Caption>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<BackStyle>Transparent</BackStyle>
						<BackgroundColor>WindowBackground</BackgroundColor>
						<Caption>@SYS316998</Caption>
						<FastTabExpanded>Yes</FastTabExpanded>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<Style>FastTabs</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>Buttons</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OK</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<Text>@SYS301992</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Cancel</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
						<Text>@SYS301993</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>