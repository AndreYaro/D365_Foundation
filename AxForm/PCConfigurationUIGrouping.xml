<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>PCConfigurationUIGrouping</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class PCConfigurationUIGrouping extends FormRun
{
    Imagelist       imagelist;

    int             root;
    Counter         child;

    PCProductConfigurationModel model;

    PCConfigurationControl      configurationControl;

    // lookup data structure, user when user changes node
    Map             treeNodeToUIControl;
    Map             treeNodeToRecord;
    int             treeNodeId;

    Common                                  activeRecord;

    //used to restore the selected node after moving up/down
    int                                     savedSelectionIdx;
    int64                                   savedSelectionRecId;
    int                                     savedSelectionTableId;

    PCComponentControl                      gParentComponentControl;
    PCComponentControl                      gComponentControl;
    PCClass                                 gComponent;
    PCSubComponent                          gSubComponent;
    EcoResCategoryAttribute                 gAttribute;
    PCComponentAttributeGroup               gAttributeGroup;
    PCComponentAttributeGroupCategoryAttr   gAttributeGroupRel;

    EcoResComponentControl          controlModifier;
    PCApplicationControlConstraint  constraintRel;
    PCExpressionConstraint          constraint;

}
]]></Source>
			</Method>
			<Method>
				<Name>addAttributeGroupTreeNode</Name>
				<Source><![CDATA[
    void addAttributeGroupTreeNode(PCComponentAttributeGroup _attributeGroup, Counter _root, PCComponentControl _parentComponentControl)
    {
        FormTreeItem    item;
        str             itemTxt;
        Counter         tmpChild;

        EcoResCategoryAttribute                 attribute;
        PCComponentAttributeGroupCategoryAttr   attributeGroup;

        itemTxt = _attributeGroup.getTranslatedName(SystemParameters::getSystemLanguageId());

        item = new FormTreeItem(strfmt("@SCM:PCAttributeGroupFormat", itemTxt));

        item.data(this.addToMap(_attributeGroup));

        tmpChild = tree.addItem(_root, FormTreeAdd::Last, item);

        //save the actual selected
        if ( (savedSelectionTableId      == _attributeGroup.TableId)  &&
            (savedSelectionRecId        == _attributeGroup.RecId)    &&
            (gComponentControl.RecId == _parentComponentControl.RecId))
        {
            savedSelectionIdx = tmpChild;
        }

        //have the map carrying the link from component control to map
        treeNodeToUIControl.insert(tmpChild, _parentComponentControl);

        while select attribute
            join RecId from attributeGroup
                order by uiOrder asc
                where   attributeGroup.CategoryAttribute        == attribute.RecId    &&
                        attributeGroup.ComponentAttributeGroup  == _attributeGroup.RecId
        {
            this.addAttributeTreeNode(attribute, tmpChild, _parentComponentControl);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAttributeTreeNode</Name>
				<Source><![CDATA[
    void addAttributeTreeNode(EcoResCategoryAttribute _attribute, Counter _root, PCComponentControl _parentComponentControl)
    {
        FormTreeItem    item;
        str             itemTxt;
        int             childNode;

        itemTxt = EcoResAttribute::find(_attribute.Attribute).Name;

        item = new FormTreeItem(itemTxt);

        item.data(this.addToMap(_attribute));

        childNode = tree.addItem(_root, FormTreeAdd::Last, item);

        //save the actual selected
        if ( (savedSelectionTableId      == _attribute.TableId)  &&
            (savedSelectionRecId        == _attribute.RecId)    &&
            (gComponentControl.RecId == _parentComponentControl.RecId))
        {
            savedSelectionIdx = childNode;
        }

        //have the map carrying the link from component control to map
        treeNodeToUIControl.insert(childNode, _parentComponentControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addComponentTreeNode</Name>
				<Source><![CDATA[
    void addComponentTreeNode(
        PCClass             _component,
        Counter             _root,
        PCComponentControl  _parentComponentControl = null,
        PCSubComponent      _subComponent = null)
    {
        FormTreeItem                            item;
        str                                     itemTxt;
        EcoResAttribute                         attribute;
        EcoResCategoryAttribute                 categoryAttribute;
        PCComponentAttributeGroup               attributeGroup;
        PCComponentAttributeGroupCategoryAttr   attributeGroupRel;
        PCComponentControl                      currentComponentControl;

        if ( (_subComponent && !_parentComponentControl)||
            (!_subComponent && _parentComponentControl))
        {
            throw error(Error::missingParameter(this));
        }

        // find UI control specific to model and component
        if (_parentComponentControl && _subComponent)
        {
            currentComponentControl = PCComponentControl::findBySubComponentAndParentControl(model.RecId, _subComponent.RecId, _parentComponentControl.RecId);
            itemTxt = strFmt(
                             "@GLS180408"
                             ,_subComponent.Name,_component.Name);
            item = new FormTreeItem(itemTxt);
            item.data(this.addToMap(_subComponent));
            item.stateBold(true);
        }
        else
        {
            currentComponentControl = PCComponentControl::findByRootComponent(model.RecId, _component.RecId);
            itemTxt = _component.Name;
            item = new FormTreeItem(itemTxt);
            item.data(this.addToMap(_component));
            item.stateBold(true);
        }

        child = tree.addItem(_root, FormTreeAdd::Last, item);

        //save the actual selected
        if ( (savedSelectionTableId      == _component.TableId)  &&
            (savedSelectionRecId        == _component.RecId)    &&
            (gComponentControl.RecId    == currentComponentControl.RecId))
        {
            savedSelectionIdx = child;
        }
        else if ( (activeRecord.TableId == _subComponent.TableId)&&
            (activeRecord.RecId == _subComponent.RecId)         &&
            (gComponentControl.RecId == currentComponentControl.RecId))
        {
            savedSelectionIdx = child;
        }

        //have the map carying the link from component control to map
        treeNodeToUIControl.insert(child, currentComponentControl);

        // select attribute UI group in the context of the current model
        while select attributeGroup
            order by uiOrder asc
            where attributeGroup.ComponentControl == currentComponentControl.RecId
        {
            this.addAttributeGroupTreeNode(attributeGroup, child, currentComponentControl);
        }

        // select attribute that are not members of a UI group in the context of the
        // current model
        while select categoryAttribute
            where   categoryAttribute.Category == _component.RecId
        exists join RecId from attribute
            where   categoryAttribute.Attribute == attribute.RecId
            notexists join attributeGroupRel
                where attributeGroupRel.CategoryAttribute == categoryAttribute.RecId
            join RecId from attributeGroup
                where attributeGroup.ComponentControl == currentComponentControl.RecId &&
                      attributeGroup.RecId            == attributeGroupRel.ComponentAttributeGroup
        {
            this.addAttributeTreeNode(categoryAttribute, child, currentComponentControl);
        }

        this.buildSubTree(_component,child, currentComponentControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToMap</Name>
				<Source><![CDATA[
    private int addToMap(Common _record)
    {
        treeNodeId++;

        treeNodeToRecord.insert(treeNodeId, _record);

        return treeNodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSubTree</Name>
				<Source><![CDATA[
    void buildSubTree(PCClass _component, Counter _root, PCComponentControl _parentComponentControl)
    {
        PCClass                 tmpComponent;
        PCSubComponent          subComponent;
        PCComponentControl      sortComponentControl;
        PCComponentControlSubComponent   subComponentControl;

        while select subComponent
            where subComponent.ParentComponentClass == _component.RecId
            join tmpComponent
                where tmpComponent.RecId == subComponent.ChildComponentClass
            join RecId from sortComponentControl order by uiOrder asc
                where sortComponentControl.ConfigurationControl   == configurationControl.RecId
            join RecId, ParentComponentControl from subComponentControl
                where   subComponentControl.SubComponent == subComponent.RecId
                &&      subComponentControl.ParentComponentControl == _parentComponentControl.RecId
                &&      sortComponentControl.RecId                  == subComponentControl.ComponentControl
        {
            this.addComponentTreeNode(tmpComponent,_root,_parentComponentControl, subComponent);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTree</Name>
				<Source><![CDATA[
    public void buildTree()
    {
        FormTreeItem item;
        PCClass rootClass = PCClass::find(model.RootComponentClass);
        PCComponentControl rootComponentControl = PCComponentControl::findByRootComponent(model.RecId, rootClass.RecId);

        savedSelectionRecId     = activeRecord.RecId;
        savedSelectionTableId   = activeRecord.TableId;
        savedSelectionIdx       = 0;

        tree.deleteAll();

        treeNodeToRecord.insert(0, model);

        item = new FormTreeItem(model.Name);
        item.stateBold(true);

        root = tree.addItem(FormTreeAdd::Root,FormTreeAdd::First, item);
        savedSelectionIdx = root;
        treeNodeToUIControl.insert(root, null);
        this.addComponentTreeNode(rootClass, root);

        tree.select(savedSelectionIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataBindAttributeControls</Name>
				<Source><![CDATA[
    public void dataBindAttributeControls()
    {
        PCComponentAttributeGroupCategoryAttr   attributeGroupRel;

        // find constraint related data
        select firstonly constraint
            join constraintRel
                where   constraintRel.ConditionExpressionConstraint == constraint.RecId
            join RecId from controlModifier
                where   controlModifier.CategoryAttribute   == gAttribute.RecId             &&
                        controlModifier.Modifier            == EcoResModifierType::Hidden   &&
                        controlModifier.RecId               == constraintRel.ComponentControl;

        select firstonly gAttributeGroup
            where gAttributeGroup.ComponentControl == gComponentControl.RecId
            join RecId from attributeGroupRel
                where   attributeGroupRel.ComponentAttributeGroup   == gAttributeGroup.RecId    &&
                        attributeGroupRel.CategoryAttribute         == gAttribute.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editAttributeGroup</Name>
				<Source><![CDATA[
    edit PCName editAttributeGroup(boolean _set, PCName _groupName)
    {
        if (_set)
        {
            // create or update relation between component attribute group and category attribute
            gAttributeGroup = PCComponentAttributeGroup::writeAttributeGrpToCatAttributeRel(gComponentControl.RecId, gAttribute.RecId, _groupName);

            ttsbegin;
            PCComponentAttributeGroupTranslation::createOrUpdateTranslation(gAttributeGroup.RecId,
                                                         _groupName,
                                                         SystemParameters::getSystemLanguageId()
                                                         );
            ttscommit;

            // Re-build tree
            element.buildTree();
        }

        return PCComponentAttributeGroupTranslation::findByAttributeGroupAndLanguage(gAttributeGroup.RecId, SystemParameters::getSystemLanguageId()).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCondition</Name>
				<Source><![CDATA[
    edit PCConstraintExpression editCondition(boolean _set, PCConstraintExpression _constraint)
    {
        if (_set)
        {
            ttsbegin;
            constraint = PCExpressionConstraint::find(constraint.RecId, true);
            constraint.Expression = _constraint;
            constraint.update();
            ttscommit;
        }

        return constraint.Expression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableControls</Name>
				<Source><![CDATA[
    public void enableControls()
    {
        boolean isAttributeInGroup;

        switch (activeRecord.TableId)
        {
            //root component
            case tableNum(PCClass):
                strAttributeGroup.visible(false);
                btnMoveUp.enabled(false);
                btnMoveDown.enabled(false);
                btnNewAttributeGroup.enabled(true);
                btnDelAttributeGroup.enabled(false);
                break;
            //children
            case tableNum(PCSubComponent):
                strAttributeGroup.visible(false);
                btnMoveUp.enabled(true);
                btnMoveDown.enabled(true);
                btnNewAttributeGroup.enabled(true);
                btnDelAttributeGroup.enabled(false);
                break;
            case tableNum(EcoResCategoryAttribute):
                isAttributeInGroup = gAttributeGroup.RecId != 0;
                strAttributeGroup.visible(true);
                btnMoveUp.enabled(isAttributeInGroup);
                btnMoveDown.enabled(isAttributeInGroup);
                btnNewAttributeGroup.enabled(false);
                btnDelAttributeGroup.enabled(false);
                break;
            case tableNum(PCComponentAttributeGroup):
                strAttributeGroup.visible(false);
                btnMoveUp.enabled(true);
                btnMoveDown.enabled(true);
                btnNewAttributeGroup.enabled(false);
                btnDelAttributeGroup.enabled(true);
                break;
            default:
                strAttributeGroup.visible(false);
                btnMoveUp.enabled(false);
                btnMoveDown.enabled(false);
                btnNewAttributeGroup.enabled(false);
                btnDelAttributeGroup.enabled(false);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandTree</Name>
				<Source><![CDATA[
    void expandTree(int idx)
    {
        int childidx;

        tree.expand(idx,FormTreeExpand::Expand);
        childidx = tree.getChild(idx);

        while ( childidx )
        {
            this.expandTree(childidx);
            childidx = tree.getNextSibling(childidx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findControlByNode</Name>
				<Source><![CDATA[
    public PCComponentControl findControlByNode(int _nodeIdx)
    {
        Common controlRecord;

        if (treeNodeToUIControl.exists(_nodeIdx))
        {
            controlRecord     = treeNodeToUIControl.lookup(_nodeIdx);
        }
        return controlRecord as PCComponentControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        treeNodeToRecord = new Map(Types::Integer, Types::Record);
        treeNodeToUIControl = new Map(Types::Integer, Types::Record);

        this.setArgsRecord();

        // ensure that UI controls records exists for the model and all of its components
        PCConfigurationUIGrouping::synchronizeUIControlWithModel(model);

        configurationControl = PCConfigurationControl::findByProductConfigurationModel(model.RecId);

        // hide controls
        strAttributeGroup.visible(false);

        // disable buttons
        btnMoveUp.enabled(false);
        btnMoveDown.enabled(false);
        btnNewAttributeGroup.enabled(false);
        btnDelAttributeGroup.enabled(false);

        this.buildTree();
        this.expandTree(root);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveElementUIOrder</Name>
				<Source><![CDATA[
    public void moveElementUIOrder(NoYes _moveUp)
    {
        switch (activeRecord.TableId)
        {
            case tableNum(PCSubComponent):
                gComponentControl.moveUIOrder(_moveUp);
                break;
            case tableNum(EcoResCategoryAttribute):
                gAttributeGroupRel.moveUIOrder(_moveUp);
                break;
            case tableNum(PCComponentAttributeGroup):
                gAttributeGroup.moveUIOrder(_moveUp);
                break;
        }

        element.buildTree();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setArgsRecord</Name>
				<Source><![CDATA[
    private void setArgsRecord()
    {
        if (element.args().record() == null)
        {
            throw error("@SYS191500");
        }
        else
        {
            model.data(element.args().record());
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>TestProductModelButton</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args args = new Args();

            args.caller(element);
            args.record(model);

            new MenuFunction(menuitemActionStr(PCTestProductModel), MenuItemType::Action).run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>btnNewAttributeGroup</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            PCComponentAttributeGroup               attributeGroup;
            PCComponentAttributeGroupTranslation    attributeGroupTranslation;
            PCName                      pcName;
            Dialog                      dialog = new Dialog("@SYS191485", element);
            DialogField                 dialogFieldVarGroup;

            super();

            dialogFieldVarGroup = dialog.addField(extendedTypeStr(PCName),"@SYS7399");
            dialogFieldVarGroup.fieldControl().mandatory(NoYes::Yes);

            if (dialog.run())
            {
                pcName = dialogFieldVarGroup.value();

                if (!pcName)
                {
                    warning(strFmt("@SYS26332", "@SYS7399"));
                    //
                    //at this point the dialog is already closed
                    //call again until the user cancels or puts a correct value
                    //
                    this.clicked();
                    return;
                }

                attributeGroupTranslation.Name = pcName;
                //this is a sub-component control
                if (gParentComponentControl)
                {
                    attributeGroup.ComponentControl = PCComponentControl::findBySubComponentAndParentControl(model.RecId, gSubComponent.RecId, gParentComponentControl.RecId ).RecId;
                }
                else
                {
                    attributeGroup.ComponentControl = PCComponentControl::findByRootComponent(model.RecId, gComponent.RecId ).RecId;
                }

                ttsbegin;
                attributeGroup.insert();
                attributeGroupTranslation.ComponentAttributeGroup   = attributeGroup.RecId;
                attributeGroupTranslation.Language                  = SystemParameters::getSystemLanguageId();
                attributeGroupTranslation.insert();
                ttscommit;

                element.buildTree();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>btnDelAttributeGroup</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            PCComponentAttributeGroup   deleteGroup;

            super();

            if (Box::yesNo(strFmt("@SYS191489", gAttributeGroup.getTranslatedName(SystemParameters::getSystemLanguageId())), DialogButton::No) == DialogButton::No)
            {
                return;
            }

            ttsbegin;
            deleteGroup = PCComponentAttributeGroup::find(gAttributeGroup.RecId, true);
            deleteGroup.delete();
            ttscommit;

            element.buildTree();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>btnMoveUp</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.moveElementUIOrder(NoYes::Yes);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>btnMoveDown</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.moveElementUIOrder(NoYes::No);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Tree</Name>
				<Type>Tree</Type>
				<Methods>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged(FormTreeItem _oldItem, FormTreeItem _newItem, FormTreeSelect _how)
        {
            int                 nodeIdx;
            PCComponentControl  closestComponentControl;

            super(_oldItem, _newItem, _how);

            nodeIdx = _newItem.idx();
            activeRecord = treeNodeToRecord.lookup(any2int(_newItem.data()));

            //gParentComponentControl
            // clear global data
            gParentComponentControl.clear();
            gComponentControl.clear();
            gComponent.clear();
            gSubComponent.clear();
            gAttribute.clear();
            gAttributeGroup.clear();
            gAttributeGroupRel.clear();

            //find the related component control or the one of the parent in case of attribute
            closestComponentControl = element.findControlByNode(nodeIdx);
            if (closestComponentControl)
            {
                //store it globally
                gComponentControl.data(closestComponentControl);
            }
            switch (activeRecord.TableId)
            {
                case tableNum(PCClass):
                    gComponentControl.data(element.findControlByNode(nodeIdx));
                    gComponent = PCClass::find(activeRecord.RecId);
                    strName.text(gComponent.Name);
                    break;
                case tableNum(PCSubComponent):
                    gParentComponentControl.data(element.findControlByNode(tree.getParent(nodeIdx)));
                    gSubComponent = PCSubComponent::find(activeRecord.RecId);
                    gComponent = PCClass::find(gSubComponent.ChildComponentClass);
                    strName.text(gSubComponent.Name);
                    break;
                case tableNum(EcoResCategoryAttribute):
                    gAttribute.data(activeRecord);
                    gAttributeGroupRel = PCComponentAttributeGroupCategoryAttr::findByConfigurationControlAndCategoryAtt(configurationControl.RecId, gAttribute.RecId);
                    strName.text(gAttribute.getAttributeName());
                    element.dataBindAttributeControls();
                    break;
                case tableNum(PCComponentAttributeGroup):
                    gAttributeGroup.data(activeRecord);
                    strName.text(gAttributeGroup.getTranslatedName(SystemParameters::getSystemLanguageId()));
                    break;
                case tableNum(PCProductConfigurationModel):
                    strName.text(model.Name);
                    break;
            }
            element.enableControls();
            strAttributeGroup.update();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>strAttributeGroup</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            super();

            PCComponentAttributeGroup::lookupAttributeGroupName(this, gComponentControl.RecId);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@SYS183829</Caption>
		<Pattern xmlns="">SimpleListDetails-Tree</Pattern>
		<PatternVersion xmlns="">1.3</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">SimpleListDetails</Style>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Width xmlns="">0</Width>
		<WidthMode xmlns="">Column</WidthMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>TestGroup</Name>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TestProductModelButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@SYS191540</HelpText>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>PCTestProductModel</MenuItemName>
								<MenuItemType>Action</MenuItemType>
								<Primary>Yes</Primary>
								<ShowShortCut>No</ShowShortCut>
								<Text>@SYS31561</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>AttributeGroup</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<LeftMode>AutoLeft</LeftMode>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>btnNewAttributeGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<NeededPermission>Create</NeededPermission>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
								<NormalImage>New</NormalImage>
								<Primary>Yes</Primary>
								<Text>@SYS191484</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>btnDelAttributeGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@SYS191488</HelpText>
								<NeededPermission>Create</NeededPermission>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
								<NormalImage>Delete</NormalImage>
								<Primary>Yes</Primary>
								<SaveRecord>No</SaveRecord>
								<Text>@SYS191487</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalRight</ArrangeMethod>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>MoveGroup</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>btnMoveUp</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@SYS191482</HelpText>
								<NeededPermission>Create</NeededPermission>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
								<NormalImage>Up</NormalImage>
								<Primary>Yes</Primary>
								<Text>@SYS74619</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>btnMoveDown</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@SYS191483</HelpText>
								<NeededPermission>Create</NeededPermission>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
								<NormalImage>Down</NormalImage>
								<Primary>Yes</Primary>
								<Text>@SYS74620</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>TreeGroup</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>858993458</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>300</Width>
				<WidthMode>Manual</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTreeControl">
						<Name>Tree</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Tree</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Border>SingleLine</Border>
					</AxFormControl>
				</Controls>
				<RightMargin>0</RightMargin>
				<RightMarginMode>Fixed</RightMarginMode>
				<FrameType>None</FrameType>
				<Style>SidePanel</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>VSplitter</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1288490187</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>Auto</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<Style>SplitterVerticalContainer</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>HeaderGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>strName</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>715827882</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@SYS191490</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS7399</Label>
						<ViewEditMode>View</ViewEditMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>strAttributeGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1789569705</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@SYS191497</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>editAttributeGroup</DataMethod>
						<Label>@SYS191496</Label>
						<LookupButton>Always</LookupButton>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
				<Style>DetailTitleContainer</Style>
				<ViewEditMode>View</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tabs</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Tab</Name>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SCM:GeneralTabPageLabel</Caption>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>
