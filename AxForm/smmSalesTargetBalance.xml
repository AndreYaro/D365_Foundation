<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>smmSalesTargetBalance</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class smmSalesTargetBalance extends FormRun
{
    smmSalesUnitMembers         salesUnitMembersCall;
    smmSalesTarget              salesTarget;

    [FormObservable]
    AmountMST                   totalAmount;

    FromDate                    fromDate;
    ToDate                      toDate;

    ProjPeriodId                projPeriodId;

}
]]></Source>
			</Method>
			<Method>
				<Name>calAmountForSalesUnit</Name>
				<Source><![CDATA[
    // Calculate amount for sales unit
    void calAmountForSalesUnit(smmSalesUnitMemberID _memberId)
    {
        smmSalesUnitMembers unitMembers;
        ProjPeriodLine  projPeriodLine;

        while select SalesPersonWorker, MemberId from unitMembers where unitMembers.ParentId == _memberId
        {
            if (unitMembers.SalesPersonWorker)
            {
                salesTarget = smmSalesTarget::find(unitMembers.MemberId);
                while select PeriodFrom, PeriodTo from projPeriodLine order by PeriodFrom
                    where projPeriodLine.PeriodId == projPeriodId && projPeriodLine.PeriodFrom >= fromDate
                    &&projPeriodLine.PeriodTo   <= toDate
                {
                    select firstonly forupdate tmpBudgetBalances where tmpBudgetBalances.Period == projPeriodLine.PeriodFrom;
                    tmpBudgetBalances.Period= projPeriodLine.PeriodFrom;
                    tmpBudgetBalances.Amount+= salesTarget.calcAmount(projPeriodLine.PeriodFrom,projPeriodLine.PeriodTo);
                    if (tmpBudgetBalances.RecId)
                    {
                        tmpBudgetBalances.update();
                    }
                    else
                    {
                        tmpBudgetBalances.insert();
                    }
                }
            }
            else
            {
                element.calAmountForSalesUnit(unitMembers.MemberId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        Object  callerForm;

        super();

        if (!element.args() || element.args().dataset() != tablenum(smmSalesUnitMembers) || !element.args().caller())
        {
            throw error("@SYS22996");
        }

        projPeriodId = smmParametersTable::find().PeriodId;

        if (!projPeriodId)
        {
            // Period must be selected in CRM parameters.
            throw error("@SYS97163");
        }

        salesUnitMembersCall = element.args().record();

        if (salesUnitMembersCall.SalesPersonWorker)
        {
            salesTarget = smmSalesTarget::find(salesUnitMembersCall.MemberId);
        }

        callerForm = element.args().caller();
        if (callerForm && callerForm is FormRun)
        {
            if (formHasMethod(callerForm, identifierstr(fromDate)))
            {
                fromDate = callerForm.fromDate();
            }
            if (formHasMethod(callerForm, identifierstr(toDate)))
            {
                toDate =callerForm.toDate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    void updateNow()
    {
        ProjPeriodLine          projPeriodLine;
        AmountMST               accBalance;

        ttsbegin;

        totalAmount = 0;

        delete_from tmpBudgetBalances;

        if (salesTarget)
        {
            while select PeriodFrom, PeriodTo from projPeriodLine
                order by PeriodFrom
                where projPeriodLine.PeriodId == projPeriodId && projPeriodLine.PeriodFrom >= fromDate
                &&    projPeriodLine.PeriodTo   <= toDate
            {
                tmpBudgetBalances.clear();
                tmpBudgetBalances.Period    = projPeriodLine.PeriodFrom;
                tmpBudgetBalances.Amount    = salesTarget.calcAmount(projPeriodLine.PeriodFrom,projPeriodLine.PeriodTo);
                tmpBudgetBalances.AccAmount = accBalance + tmpBudgetBalances.Amount;
                totalAmount += tmpBudgetBalances.Amount;
                tmpBudgetBalances.insert();
                accBalance = tmpBudgetBalances.AccAmount;
            }
        }
        else
        {
            while select PeriodFrom from projPeriodLine
                order by PeriodFrom
                where projPeriodLine.PeriodId == projPeriodId && projPeriodLine.PeriodFrom >= fromDate
                &&    projPeriodLine.PeriodTo   <= toDate
            {
                tmpBudgetBalances.clear();
                tmpBudgetBalances.Period    = projPeriodLine.PeriodFrom;
                tmpBudgetBalances.insert();
            }

            element.calAmountForSalesUnit(salesUnitMembersCall.MemberId);

            while select forupdate tmpBudgetBalances order by Period
            {
                accBalance += tmpBudgetBalances.Amount;
                tmpBudgetBalances.AccAmount = accBalance;
                totalAmount += tmpBudgetBalances.Amount;
                tmpBudgetBalances.update();
            }
        }

        ttscommit;

        tmpBudgetBalances_ds.executeQuery();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>TmpBudgetBalances</Name>
				<Methods>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        void linkActive()
        {
            super();

            salesUnitMembersCall = element.args().record();
            if (salesUnitMembersCall.SalesPersonWorker)
            {
                salesTarget = smmSalesTarget::find(salesUnitMembersCall.MemberId);
            }
            else
            {
                salesTarget = null;
            }

            if (salesUnitMembersCall.SalesUnitId != "" && salesUnitMembersCall.SalesPersonWorker != 0)
            {
                // Sales targets - Sales unit (%1) - %2
                element.design().caption(strfmt("@SYS96608", salesUnitMembersCall.SalesUnitId, salesUnitMembersCall.showName()));
            }
            else if (salesUnitMembersCall.SalesUnitId != "" && salesUnitMembersCall.SalesPersonWorker == 0)
            {
                // Sales targets - Sales unit (%1)
                element.design().caption(strfmt("@SalesAndMarketing:SalesTargetsWithSalesUnit", salesUnitMembersCall.SalesUnitId));
            }
            else
            {
                // Sales targets
                element.design().caption("@SYS80468");
            }

            element.updateNow();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            this.query().dataSourceNo(1).addSortField(fieldnum(TmpBudgetBalance, Period),SortOrder::Descending);
        }

]]></Source>
					</Method>
					<Method>
						<Name>sumInPercent</Name>
						<Source><![CDATA[
        display Percent sumInPercent(TmpBudgetBalance s)
        {
            return (totalAmount ? s.AccAmount / totalAmount * 100 : 0);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>TmpBudgetBalances</Name>
			<Table>TmpBudgetBalance</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Amount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostAmountAcc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWAccQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Period</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Qty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<Index>DateIdx</Index>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS1614</Caption>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">SimpleList</Style>
		<TitleDataSource xmlns="">TmpBudgetBalances</TitleDataSource>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ApplicationBar</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CustomFilterGroup</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Periods</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Periods</Name>
				<AllowEdit>No</AllowEdit>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>TmpBudgetBalances_Date</Name>
						<ElementPosition>715827882</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Date</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>Period</DataField>
						<DataSource>TmpBudgetBalances</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>TmpBudgetBalances_Amount</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>Amount</DataField>
						<DataSource>TmpBudgetBalances</DataSource>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>SumInPercent</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>SumInPercent</DataMethod>
						<DataSource>TmpBudgetBalances</DataSource>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>TmpBudgetBalances_AccAmount</Name>
						<ElementPosition>1789569705</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>AccAmount</DataField>
						<DataSource>TmpBudgetBalances</DataSource>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
				</Controls>
				<DataSource>TmpBudgetBalances</DataSource>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>