<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RHRMStaffLookup</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class RHRMStaffLookup extends FormRun
{
    Map                 map;
    Map                 tab2ComboBoxItemMap;
    boolean             canSelect;
    FormStringControl   callerControl;
    int                 curTab;

    StartDate           staffListDate;
    RHRMJournalType     journalType;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
            curTab
        #endmacro
}
]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    void close()
    {
        ;
        xSysLastValue::saveLast(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeSelect</Name>
				<Source><![CDATA[
    #define.Value2(2)
    void closeSelect(str p1)
    {
        ;

        if (canSelect || curTab != #Value2)
        {
            super(int642str(rhrmStaffList.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTree</Name>
				<Source><![CDATA[
    #define.Value2(2)
    void createTree()
    {
        int    root;
        ;

        if (curTab != #Value2 || linetree.getRoot())
            return;

        root = lineTree.add(FormTreeAdd::Root, FormTreeAdd::First, "@GLS106431", 1);

        this.fillTree(root);

        lineTree.expand(root);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPosition</Name>
				<Source><![CDATA[
    #define.Value2(2)
    void fillPosition(int _parentIdx, RpayHRMOrganizationId _rpayHRMOrganizationId)
    {
        FormTreeItem            formTreeItem;
        int                     itemIdx;
        RHRMStaffList           rhrmStaffListLocal;
        RHRMStaffListHistory    rhrmStaffListHistoryExists, rhrmStaffListHistoryNotExists;
        ;

        while select HcmTitle, TradeCategoryId, TableId, RecId from rhrmStaffListLocal
                where rhrmStaffListLocal.OrganizationId == _rpayHRMOrganizationId
        {
            if (journalType != RHRMJournalType::StaffList)
            {
                select firstonly rhrmStaffListHistoryExists
                   where (rhrmStaffListHistoryExists.StaffListRefRecId == rhrmStaffListLocal.RecId &&
                          rhrmStaffListHistoryExists.StaffListFactor &&
                          rhrmStaffListHistoryExists.StartDate <= staffListDate)
                notexists join rhrmStaffListHistoryNotExists
                    where rhrmStaffListHistoryNotExists.StaffListRefRecId == rhrmStaffListLocal.RecId &&
                          !rhrmStaffListHistoryNotExists.StaffListFactor &&
                          rhrmStaffListHistoryNotExists.StartDate > rhrmStaffListHistoryExists.StartDate;

                if (!rhrmStaffListHistoryExists)
                {
                    continue;
                }
            }

            formTreeItem = new FormTreeItem(rhrmStaffListLocal.titleId() + ' ' + rhrmStaffListLocal.TradeCategoryId,
                                            #Value2,
            0,
                                            rhrmStaffListLocal.TableId);

            itemIdx      = lineTree.addItem(_parentIdx,
                                            FormTreeAdd::Last,
                                            formTreeItem);

            map.insert(itemIdx, rhrmStaffListLocal.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTree</Name>
				<Source><![CDATA[
    void fillTree(int _parentIdx, RpayHRMOrganizationId   _rpayHRMOrganizationId = "")
    {
        FormTreeItem            formTreeItem;
        int                     itemIdx;
        RPayHRMOrganization     rPayHRMOrganization;

        boolean staffListChildren()
        {
            RHRMStaffList           rhrmStaffListLocal;
            RHRMStaffListHistory    rhrmStaffListHistoryExists, rhrmStaffListHistoryNotExists;
            RPayHRMOrganization     organization;

            select firstonly RecId from organization
                where organization.ParentOrganizationId == rPayHRMOrganization.HrmOrganizationId &&
                      organization.Active;

            if (organization.RecId)
            {
                return true;
            }

            if (journalType != RHRMJournalType::StaffList)
            {
                select firstonly RecId from rhrmStaffListLocal
                    where rhrmStaffListLocal.OrganizationId == rPayHRMOrganization.HrmOrganizationId
                exists join rhrmStaffListHistoryExists
                   where (rhrmStaffListHistoryExists.StaffListRefRecId == rhrmStaffListLocal.RecId &&
                          rhrmStaffListHistoryExists.StaffListFactor &&
                          rhrmStaffListHistoryExists.StartDate <= staffListDate)
                notexists join rhrmStaffListHistoryNotExists
                    where rhrmStaffListHistoryNotExists.StaffListRefRecId == rhrmStaffListLocal.RecId &&
                          !rhrmStaffListHistoryNotExists.StaffListFactor &&
                          rhrmStaffListHistoryNotExists.StartDate > rhrmStaffListHistoryExists.StartDate;
            }
            else
            {
                select firstonly RecId from rhrmStaffListLocal
                    where rhrmStaffListLocal.OrganizationId == rPayHRMOrganization.HrmOrganizationId;
            }

            return rhrmStaffListLocal.RecId ? true : false;
        }
        ;

        while select HrmOrganizationId, Description, TableId from rPayHRMOrganization
            where rPayHRMOrganization.ParentOrganizationId == _rpayHRMOrganizationId &&
                  rPayHRMOrganization.Active
        {
            formTreeItem = new FormTreeItem(rPayHRMOrganization.HrmOrganizationId + ", " + rPayHRMOrganization.Description,
                                            0,
                                            staffListChildren(),
                                            rPayHRMOrganization.TableId);

            itemIdx      = lineTree.addItem(_parentIdx,
                                            FormTreeAdd::Last,
                                            formTreeItem);

            map.insert(itemIdx, rPayHRMOrganization.HrmOrganizationId);

            this.fillTree(itemIdx, rPayHRMOrganization.HrmOrganizationId);
            this.fillPosition(itemIdx, rPayHRMOrganization.HrmOrganizationId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        boolean   filterLookup    = false;
        ;

        element.initFromOrder();

        super();

        xSysLastValue::getLast(this);
        callerControl = SysTableLookup::getCallerStringControl(element.args());

        tab.tab(curTab);

        if (callerControl.text() && callerControl.hasChanged())
        {
            filterLookup = true;
            rhrmStaffList_ds.autoSearch(false);
        }

        map  = new Map(Types::Integer, Types::String);
        this.setImageList();
        this.createTree();

        this.selectMode(organizationId);

        if (filterLookup)
        {
            rhrmStaffList_ds.research();
            organizationId.filter(callerControl.text());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromOrder</Name>
				<Source><![CDATA[
    void initFromOrder()
    {
        RHRMOrderTrans  rhrmOrderTrans;
        RHRMOrderTable  rhrmOrderTable;
        ;

        if ( element.args().dataset() == tableNum(RHRMOrderTrans) )
        {
            rhrmOrderTrans = element.args().record();
            rhrmOrderTable = RHRMOrderTable::find(rhrmOrderTrans.OrderTableRecId);

            staffListDate = rhrmOrderTrans.StartDate
                                ? rhrmOrderTrans.StartDate
                                : rhrmOrderTable.TransDate;

            journalType = rhrmOrderTable.JournalType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    private void initParmDefault()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    private DataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    private IdentifierName lastValueDesignName()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    private IdentifierName lastValueElementName()
    {
        return this.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    private UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    private UserId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setImageList</Name>
				<Source><![CDATA[
    #define.Value876(876)
    #define.Value848(848)
    #define.Value898(898)
    void setImageList()
    {
        Imagelist   imagelist;
        ;

        imagelist = new Imagelist(Imagelist::smallIconWidth(), Imagelist::smallIconHeight());
        imagelist.add(new Image(#Value898));
        imagelist.add(new Image(#Value848));
        imagelist.add(new Image(#Value876));

        lineTree.setImagelist(imagelist);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        // Generate view combobox based on tabs
        tab2ComboBoxItemMap = SysLookup::tab2ComboBox(Tab, switchView);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>RHRMStaffList</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            QueryBuildDataSource    qbds;
            QueryBuildDataSource    rhrmStaffListHistoryExistsDS;
            QueryBuildDataSource    rhrmStaffListHistoryNotExistsDS;
            QueryBuildRange         range;

            super();

            qbds = this.query().dataSourceTable(tableNum(RHRMStaffList));
            qbds.clearDynalinks();
            qbds.clearRanges();
            qbds.relations(false);

            if (journalType != RHRMJournalType::StaffList)
            {
                rhrmStaffListHistoryExistsDS = qbds.addDataSource(tableNum(RHRMStaffListHistory));
                rhrmStaffListHistoryExistsDS.joinMode(JoinMode::ExistsJoin);
                rhrmStaffListHistoryExistsDS.relations(true);

                rhrmStaffListHistoryNotExistsDS = rhrmStaffListHistoryExistsDS.addDataSource(tableNum(RHRMStaffListHistory));
                rhrmStaffListHistoryNotExistsDS.addLink(fieldNum(RHRMStaffListHistory, StaffListRefRecId), fieldNum(RHRMStaffListHistory, StaffListRefRecId));
                rhrmStaffListHistoryNotExistsDS.joinMode(JoinMode::NoExistsJoin);
                rhrmStaffListHistoryNotExistsDS.relations(true);

                range = SysQuery::findOrCreateRange(rhrmStaffListHistoryExistsDS, fieldNum(RHRMStaffListHistory, StartDate));
                range.value(queryRange(nextYr(dateNull()), staffListDate));

                range = SysQuery::findOrCreateRange(rhrmStaffListHistoryExistsDS, fieldNum(RHRMStaffListHistory, StaffListFactor));
                range.value("@GLS105367");

                range = SysQuery::findOrCreateRange(rhrmStaffListHistoryNotExistsDS, fieldNum(RHRMStaffListHistory, StaffListFactor));
                range.value(queryValue(0));

                range =  SysQuery::findOrCreateRange(rhrmStaffListHistoryNotExistsDS, fieldNum(RHRMStaffListHistory, StartDate));

                range.value('(' + fieldStr(RHRMStaffListHistory, StartDate) + ' > ' +
                      rhrmStaffListHistoryNotExistsDS.parentDataSource().name() + '.' + fieldStr(RHRMStaffListHistory, StartDate) + ')');
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>switchView</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            Tab.tabChanged(Tab.tabValue(), tab2ComboBoxItemMap.lookup(this.selection()));

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Tab</Name>
				<Type>Tab</Type>
				<Methods>
					<Method>
						<Name>tabChanged</Name>
						<Source><![CDATA[
        public void tabChanged(int _fromTab, int _toTab)
        {
            super(_fromTab, _toTab);
            curTab = _toTab;
            element.createTree();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LineTree</Name>
				<Type>Tree</Type>
				<Methods>
					<Method>
						<Name>expanding</Name>
						<Source><![CDATA[
        public boolean expanding(int _idx, FormTreeExpand _action, anytype _data)
        {
            boolean ret;

            canSelect = false;
            ret = super(_idx, _action, _data);

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        void selectionChanged(FormTreeItem      _oldItem,
                              FormTreeItem      _newItem,
                              FormTreeSelect    _how)
        {
            RHRMStaffList     rhrmStaffListLocal;

            super(_oldItem, _newItem, _how);

            switch (_newItem.data())
            {
                case tableNum(RHRMStaffList):
                    rhrmStaffListLocal = RHRMStaffList::find(map.lookup(_newItem.idx()));

                    canSelect = rhrmStaffListLocal.RecId != 0;

                    if (canSelect)
                    {
                        canSelect = rhrmStaffList_ds.positionToRecord(rhrmStaffListLocal);
                    }
                    break;

                default:
                    canSelect = false;
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>RHRMStaffList</Name>
			<Table>RHRMStaffList</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HcmTitle</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Note</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrganizationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RiseInWages1Rate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RiseInWages2Rate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RiseInWages3Rate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TradeCategoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WageRate</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Frame xmlns="">Border</Frame>
		<HeightMode xmlns="">SizeToContent</HeightMode>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Pattern xmlns="">LookupTab</Pattern>
		<PatternVersion xmlns="">1.0</PatternVersion>
		<Style xmlns="">Lookup</Style>
		<TitleDataSource xmlns="">RHRMStaffList</TitleDataSource>
		<WidthMode xmlns="">SizeToAvailable</WidthMode>
		<WindowResize xmlns="">Dynamic</WindowResize>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>View</Name>
				<Pattern>CustomFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>switchView</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<ShowLabel>No</ShowLabel>
						<Items />
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabGrid</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToContent</HeightMode>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>OrganizationId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>OrganizationId</DataField>
										<DataSource>RHRMStaffList</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>RHRMStaffList_HcmTitle</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>RHRMStaffList_HcmTitle_TitleId</Name>
												<DataRelationPath>HcmTitle</DataRelationPath>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
											</AxFormControl>
										</Controls>
										<DataSource>RHRMStaffList</DataSource>
										<ReferenceField>HcmTitle</ReferenceField>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RHRMStaffList_TradeCategoryId</Name>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TradeCategoryId</DataField>
										<DataSource>RHRMStaffList</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>RHRMStaffList</DataSource>
								<Style>Tabular</Style>
							</AxFormControl>
						</Controls>
						<Caption>@SYS9039</Caption>
						<DataSource>RHRMStaffList</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabTree</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormTreeControl">
								<Name>LineTree</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Tree</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
							</AxFormControl>
						</Controls>
						<Caption>@SYS26664</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ShowTabs>No</ShowTabs>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>