<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>LedgerSettlementsAutomationCriteria</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class LedgerSettlementsAutomationCriteria extends FormRun implements ProcessScheduleParametersIWrite, ProcessScheduleParametersIValidate, ProcessScheduleParametersIInitialize, ProcessScheduleIQueryable
{
    private LedgerSettlementsAutomationDimensionsListPanel ledgerDimensionsListPanel;
    private LedgerSettlementsAutomationMainAccountsListPanel mainAccountsListPanel;
    private LedgerSettlementsAutomationFinancialTagsListPanel financialTagsListPanel;
    private LedgerSettlementsAutomationCriteriaControls controls;
    private LedgerSettlementsAutomationCriteriaForm automationCriteriaForm;
    public ProcessScheduleSchedulingContract initialProcessScheduleSchedulingContract;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void init()
    {
        mainAccountsListPanel = LedgerSettlementsAutomationMainAccountsListPanel::newForm(element, element.controlId(formControlStr(LedgerSettlementsAutomationCriteria, groupCompositionMainAccounts)));
        ledgerDimensionsListPanel = LedgerSettlementsAutomationDimensionsListPanel::newForm(element, element.controlId(formControlStr(LedgerSettlementsAutomationCriteria, groupCompositionDimensions)));
        financialTagsListPanel = LedgerSettlementsAutomationFinancialTagsListPanel::newForm(element, element.controlId(formControlStr(LedgerSettlementsAutomationCriteria, groupCompositionFinancialTags)));

        super();

        RefRecId automationCriteriaRecId = 0;

        mainAccountsListPanel.init();
        if (automationCriteriaForm)
        {
            if (automationCriteriaForm.formInteraction.automationCriteria.RecId == 0)
            {
                LedgerSettlementsAutomationCriteria ledgerSettlementsAutomationCriteriaRecord;

                ProcessScheduleSchedulingContract formStateContract = automationCriteriaForm.formState.getProcessScheduleSchedulingContract();
                RefRecId processScheduleSeriesRecId = formStateContract.getProcessScheduleSeriesData().getSeriesRecId();
                // If we are manually creating an occurrence, we need to get the series RecId in order to fill the listpanels default contents.
                if (formStateContract.getProcessScheduleSeriesOccurrence() == ProcessScheduleSeriesOccurrence::Occurrence
                    && processScheduleSeriesRecId != 0)
                {
                    select firstonly RecId from ledgerSettlementsAutomationCriteriaRecord
                        where ledgerSettlementsAutomationCriteriaRecord.ProcessScheduleSeries == processScheduleSeriesRecId;
                    if (ledgerSettlementsAutomationCriteriaRecord)
                    {
                        automationCriteriaRecId = ledgerSettlementsAutomationCriteriaRecord.RecId;
                    }
                    mainAccountsListPanel.setLedgerSettlementsAutomationCriteria(automationCriteriaRecId);
                }
            }
            else
            {
                mainAccountsListPanel.setLedgerSettlementsAutomationCriteria(automationCriteriaForm.formInteraction.automationCriteria.RecId);
            }
            mainAccountsListPanel.fill();

            FormTabPageControl financialDimensionsTabControl = FinancialDimensionsTabPage;
            LedgerSettlementsAutomationCriteriaFormInteraction::setMainAccountsTab(
                financialDimensionsTabControl);
        }
        
        ledgerDimensionsListPanel.init();
        if (automationCriteriaForm)
        {
            // if automationCriteriaRecId is not blank, then we should use this value since it needed to be filled in order to fill the main accounts list panel earlier
            if (automationCriteriaRecId !=0)
            {
                ledgerDimensionsListPanel.setLedgerSettlementsAutomationCriteria(automationCriteriaRecId);
            }
            else
            {
                ledgerDimensionsListPanel.setLedgerSettlementsAutomationCriteria(automationCriteriaForm.formInteraction.automationCriteria.RecId);
            }
            ledgerDimensionsListPanel.fill();
        }
        
        financialTagsListPanel.init();
        if (automationCriteriaForm)
        {
            // if automationCriteriaRecId is not blank, then we should use this value since it needed to be filled in order to fill the financial tags list panel earlier
            if (automationCriteriaRecId !=0)
            {
                financialTagsListPanel.setLedgerSettlementsAutomationCriteria(automationCriteriaRecId);
            }
            else
            {
                financialTagsListPanel.setLedgerSettlementsAutomationCriteria(automationCriteriaForm.formInteraction.automationCriteria.RecId);
            }
            financialTagsListPanel.fill();
        }

        this.setSecurableControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSchedulingContract</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void setSchedulingContract(ProcessScheduleSchedulingContract _schedulingParameters)
    {
        initialProcessScheduleSchedulingContract = _schedulingParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForSeriesCreate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void initializeForSeriesCreate()
    {
        element.initialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForSeriesUpdate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void initializeForSeriesUpdate()
    {
        element.initialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForOccurrenceCreate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void initializeForOccurrenceCreate()
    {
        element.initialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForOccurrenceUpdate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void initializeForOccurrenceUpdate()
    {
        element.initialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize()
    {
        element.initAutomationCriteriaControls();
        element.initAutomationCriteriaForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSecurableControls</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void setSecurableControls()
    {
        AccessRight accessRight = FormSecurity::getMenuItemAccessRight(this);

        switch (accessRight)
        {
            case AccessRight::NoAccess:
            case AccessRight::View:
                groupCompositionDimensions.allowEdit(false);
                groupCompositionMainAccounts.allowEdit(false);
                groupCompositionFinancialTags.allowEdit(false);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAutomationCriteriaControls</Name>
				<Source><![CDATA[
    protected LedgerSettlementsAutomationCriteriaControls initAutomationCriteriaControls()
    {
        if (controls == null)
        {
            controls = LedgerSettlementsAutomationCriteriaControls::construct(LedgerSettlementsAutomationConstants::RegisteredTypeName) as LedgerSettlementsAutomationCriteriaControls;
            controls.automationCriteriaLS_ds = LedgerSettlementsAutomationCriteria_ds;
            controls.parametersTabControl = ParametersTab;
            controls.matchCriteriaDateTolerance = DateTolerance;
            controls.matchCriteriaDateToleranceDays = DateToleranceDays;
            controls.matchCriteriaPostingLayerControl = PostingLayerCB;
            controls.matchCriteriaDebitandCreditAmounts = DebitandCreditAmountsComboBox;
            controls.matchCriteriaPostingTypeControl = PostingTypeCB;
            
            // Any additional selection criteria will have to be added here
            controls.matchCriteriaFinancialDimensionsControl = FinancialDimensionsCB;
            controls.groupCompositionDimensions = GroupCompositionDimensions;
            controls.financialDimensionsTabControl = FinancialDimensionsTabPage;
            controls.ledgerDimensionsListPanel = ledgerDimensionsListPanel;

            controls.matchCriteriaMainAccountControl = MainAccountCB;
            controls.groupCompositionMainAccounts = GroupCompositionMainAccounts;
            controls.mainAccountsTabControl = MainAccountsTabPage;
            controls.mainAccountsListPanel = mainAccountsListPanel;

            controls.matchCriteriaFinancialTagsControl = FinancialTagsCB;
            controls.groupCompositionFinancialTags = GroupCompositionFinancialTags;
            controls.financialTagsTabControl = FinancialTagsTabPage;
            controls.financialTagsListPanel = financialTagsListPanel;
        }

        return controls;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAutomationCriteriaForm</Name>
				<Source><![CDATA[
    private void initAutomationCriteriaForm()
    {
        if (automationCriteriaForm == null)
        {
            automationCriteriaForm =
                LedgerSettlementsAutomationCriteriaForm::constructAutomationCriteriaForm(
                    LedgerSettlementsAutomationConstants::RegisteredTypeName,
                    initialProcessScheduleSchedulingContract,
                    controls) as LedgerSettlementsAutomationCriteriaForm;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createScheduleSeries</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void createScheduleSeries(ProcessScheduleSchedulingContract _schedulingParameters)
    {
        automationCriteriaForm.createScheduleSeries(_schedulingParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createScheduledOccurrence</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void createScheduledOccurrence(ProcessScheduleSchedulingContract _schedulingParameters)
    {
        automationCriteriaForm.createScheduledOccurrence(_schedulingParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateScheduleSeries</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void updateScheduleSeries(ProcessScheduleSchedulingContract _schedulingParameters)
    {
        automationCriteriaForm.updateScheduleSeries();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateScheduledOccurrence</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void updateScheduledOccurrence(ProcessScheduleSchedulingContract _schedulingParameters)
    {
        automationCriteriaForm.updateScheduledOccurrence();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean validate()
    {
        return automationCriteriaForm.validate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Query getOriginalQuery()
    {
        return automationCriteriaForm.getOriginalQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryForApplicationOrExtractionOfQueryCriteria</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Query getQueryForApplicationOrExtractionOfQueryCriteria()
    {
        return automationCriteriaForm.getQueryForApplicationOrExtraction();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>LedgerSettlementsAutomationCriteria</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// When writing to the LedgerSettlementsAutomationCriteria table, you must first write the "child" selections to the 
        /// LedgerSettlementsAutomationMatchSelection table for validation logic to work correctly.
        /// </summary>
        public void write()
        {
            FormDataSource dataSource = LedgerSettlementsAutomationCriteria_ds;
            RefRecId criteriaRecId = dataSource.cursor().RecId;

            if (criteriaRecId != 0)
            {
                ledgerDimensionsListPanel.commitSelectionToDatabase(criteriaRecId);
                mainAccountsListPanel.commitSelectionToDatabase(criteriaRecId);
                financialTagsListPanel.commitSelectionToDatabase(criteriaRecId);
            }
            
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>FinancialDimensionsCB</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            FormTabPageControl financialDimensionsTabControl = FinancialDimensionsTabPage;

            LedgerSettlementsAutomationCriteriaFormInteraction::setFinancialDimensionsTab(
                this,
                financialDimensionsTabControl,
                ledgerDimensionsListPanel);

            return super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FinancialTagsCB</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            FormTabPageControl financialTagsTabControl = FinancialTagsTabPage;
    
            LedgerSettlementsAutomationCriteriaFormInteraction::setFinancialTagsTab(
                this,
                financialTagsTabControl,
                financialTagsListPanel);
    
            return super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>LedgerSettlementsAutomationCriteria</Name>
			<Table>LedgerSettlementsAutomationCriteria</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DebitandCreditAmounts</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FinancialDimensions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MainAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingLayer</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProcessScheduleOccurrence</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProcessScheduleSeries</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tags</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@GeneralLedger:LedgerSettlementsMatchCriteria</Caption>
		<Pattern xmlns="">SimpleDetails-FastTabsContainer</Pattern>
		<PatternVersion xmlns="">1.4</PatternVersion>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>DefaultActionPane</Name>
				<Enabled>No</Enabled>
				<Type>ActionPane</Type>
				<Visible>No</Visible>
				<FormControlExtension
					i:nil="true" />
				<Controls />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>ParametersTab</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>MainAccountsTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>GroupCompositionMainAccounts</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@GeneralLedger:MainAccountTitle</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ParametersTabPage</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>MatchCriteria</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>DateTolerance</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>DateTolerance</DataField>
										<DataSource>LedgerSettlementsAutomationCriteria</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>DateToleranceDays</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Integer</Type>
										<FormControlExtension
											i:nil="true" />
										<AllowNegative>No</AllowNegative>
										<DataField>DateToleranceDays</DataField>
										<DataSource>LedgerSettlementsAutomationCriteria</DataSource>
										<ShowZero>Yes</ShowZero>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>MainAccountCB</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>MainAccount</DataField>
										<DataSource>LedgerSettlementsAutomationCriteria</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>PostingLayerCB</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Enabled>No</Enabled>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>PostingLayer</DataField>
										<DataSource>LedgerSettlementsAutomationCriteria</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>DebitandCreditAmountsComboBox</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>DebitandCreditAmounts</DataField>
										<DataSource>LedgerSettlementsAutomationCriteria</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>PostingTypeCB</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>PostingType</DataField>
										<DataSource>LedgerSettlementsAutomationCriteria</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>FinancialDimensionsCB</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>FinancialDimensions</DataField>
										<DataSource>LedgerSettlementsAutomationCriteria</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>FinancialTagsCB</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Tags</DataField>
										<DataSource>LedgerSettlementsAutomationCriteria</DataSource>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>@GeneralLedger:LedgerSettlementsAutomationMatchCriteria</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>FinancialDimensionsTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>GroupCompositionDimensions</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@GeneralLedger:LedgerSettlementsAutomationFinancialDimension</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>FinancialTagsTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>GroupCompositionFinancialTags</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@GeneralLedger:LedgerSettlementsAutomationFinancialTags</Caption>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>