<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>AdvancedLedgerEntryWFDropDialog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class AdvancedLedgerEntryWFDropDialog extends FormRun implements WorkflowIDropDialog
{
    private Common              record;
    private FormRun             caller;
    private WorkflowDropDialog  workflowDropDialog;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        record = element.args().record();
        caller = element.args().caller();

        super();

        workflowDropDialog = WorkflowDropDialog::construct(this);
        workflowDropDialog.updateControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows the workflow drop dialog classes to set the caption based on context of the workflow.
    /// </summary>
    /// <param name = "_caption"> The caption to set. </param>
    public void setCaption(str _caption)
    {
        this.design().caption(_caption);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPromotedActionButton1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the first promoted action button that the workflow drop dialog classes will use to bind the "most used" action menu item (i.e. Approve).
    /// </summary>
    /// <returns> The <c>FormFunctionButtonControl</c> control. </returns>
    public FormFunctionButtonControl getPromotedActionButton1()
    {
        return PromotedAction1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPromotedActionButton2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the second promoted action button that the workflow drop dialog classes will use to bind the "second most used" action menu item (i.e. Reject).
    /// </summary>
    /// <returns> The <c>FormFunctionButtonControl</c> control. </returns>
    public FormFunctionButtonControl getPromotedActionButton2()
    {
        return PromotedAction2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOverflowMenuButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the menu button used for the overflow actions (i.e. Request Change, Delegate, View History).
    /// </summary>
    /// <returns> The <c>FormMenuButtonControl</c> control. </returns>
    public FormMenuButtonControl getOverflowMenuButton()
    {
        return OverflowActions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInstructionTextControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns static text control where the workflow message context will be added by the workflow drop dialog classes.
    /// </summary>
    /// <returns> The <c>FormStaticTextControl</c> control. </returns>
    public FormStaticTextControl getInstructionTextControl()
    {
        return InstructionText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the record for which the workflow drop dialog classes will load workflow information.
    /// </summary>
    /// <returns> The <c>Common</c> record buffer. </returns>
    public Common getRecord()
    {
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the record is ready to be submitted to workflow.
    /// </summary>
    /// <returns> true, if the record can be submitted to workflow; otherwise, false. </returns>
    public boolean canSubmitToWorkflow()
    {
        return caller.canSubmitToWorkflow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadWorkflowConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the workflow version to enable the submission for the document.
    /// </summary>
    /// <returns> The <c>WorkflowVersionTable</c> record. </returns>
    public Common loadWorkflowConfiguration()
    {
        return Workflow::findWorkflowConfigurationToActivate(record, caller.design().workflowType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCallingForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the calling form (i.e. the drop dialog form). Used in the <c>WorkflowDropDialog</c> class.
    /// </summary>
    /// <returns> The calling <c>BudgetTransactionWorkflowDropDialog</c> form. </returns>
    public FormRun getCallingForm()
    {
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveWorkflowWorkItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// The workflow action menu items (Approve, Reject, etc.) call this FormRun method to retrieve the active workflow work item that was loaded onto the form.
    /// </summary>
    /// <returns> The <c>WorkflowWorkItemTable</c> record. </returns>
    /// <remarks> Since the calling form is now the drop dialog form (not the main form), this method is overridden to ensure we are passing the correct work item. </remarks>
    public Common getActiveWorkflowWorkItem()
    {
        return workflowDropDialog.getActiveWorkflowWorkItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveWorkflowTrackingStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// The Workflow history menu item calls this <c>FormRun</c> method to understand which workflow history record to load.
    /// </summary>
    /// <returns> The <c>WorkflowTrackingStatusTable</c> record. </returns>
    /// <remarks> Since the calling form is now the drop dialog form (not the main form), this method is overridden to ensure we are passing the correct workflow history. </remarks>
    public Common getActiveWorkflowTrackingStatus()
    {
        return workflowDropDialog.getActiveWorkflowTrackingStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveWorkflowConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// The Submit workflow action menu item classes call this <c>FormRun</c> method to retrieve the workflow configuration to use when Sumbit is clicked.
    /// </summary>
    /// <returns> The <c>WorkflowVersionTable</c> record. </returns>
    /// <remarks> Since the calling form is now the drop dialog form (not the main form), this method is overridden to ensure we are passing the correct workflow configuration. </remarks>
    public Common getActiveWorkflowConfiguration()
    {
        return workflowDropDialog.getActiveWorkflowConfiguration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkflowControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Existing workflow action menu item classes call FormRun.updateWorkflowControls to refresh the controls after completing the action.
    /// It can be overridden here to ensure that the main form is also refreshed because a work item may have been completed.
    /// </summary>
    public void updateWorkflowControls()
    {
        if (record is AdvancedLedgerEntryHeader)
        {
            caller.refreshWorkflowIcon();
        }

        super();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>AdvancedLedgerEntryHeader</Name>
			<Table>AdvancedLedgerEntryHeader</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountingDistributionTemplate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FiscalCalendarPeriod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JournalizingDefinition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonTableRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReverseDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReverseEntry</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentHeader</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkflowApprovalState</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkFlowStatus</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS110684</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<Style xmlns="">DropDialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>InstructionText</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<Type>StaticText</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormMenuFunctionButtonControl">
						<Name>PromotedAction1</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>MenuFunctionButton</Type>
						<FormControlExtension
							i:nil="true" />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormMenuFunctionButtonControl">
						<Name>PromotedAction2</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>MenuFunctionButton</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormMenuButtonControl">
						<Name>OverflowActions</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>MenuButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<Text>@SYS21706</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>