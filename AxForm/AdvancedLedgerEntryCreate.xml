<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>AdvancedLedgerEntryCreate</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
    [Form]
    public class AdvancedLedgerEntryCreate extends FormRun
    {
        boolean					isJournalizingDefinitionCodeValid;
        boolean					isTransactionCurrencyValid;
        boolean					isReasonCodeValid;
        NumberSeqFormHandler    numberSeqFormHandler;
        NumberSeq               numberSeq;
		AdvancedLedgerEntryHeader advancedLedgerEntryHeaderLocal;

}
]]></Source>
			</Method>
			<Method>
				<Name>closeCancel</Name>
				<Source><![CDATA[
    public void closeCancel()
    {
        if (TransactionNumber.text())
        {
            numberSeq.abort();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        Args                        args;
        JournalizingDefinition      journalizingDefinition;

        args = new Args();
        journalizingDefinition = JournalizingDefinition::find(journalizingDefinitionCode.text());

        if (this.validateAllFields())
        {
            try
            {
                infolog.setInfoLogLevel(SysInfologLevel::None);

                advancedLedgerEntryHeaderLocal.TransactionStatus         = AdvancedLedgerEntryTransactionStatus::Draft;
                advancedLedgerEntryHeaderLocal.AccountingDate            = accountingDate.dateValue();
                advancedLedgerEntryHeaderLocal.TransactionCurrency       = transactionCurrency.text();
                advancedLedgerEntryHeaderLocal.TransactionNumber         = transactionNumber.text();
                advancedLedgerEntryHeaderLocal.TransactionText           = transactionText.text();
                advancedLedgerEntryHeaderLocal.JournalizingDefinition    = journalizingDefinition.RecId;
                advancedLedgerEntryHeaderLocal.FiscalCalendarPeriod      = AdvancedLedgerEntryHeader_FiscalCalendarPeriod.value();

                if (reversingEntry_ReverseDate.dateValue() != dateNull())
                {
                    advancedLedgerEntryHeaderLocal.ReverseDate = reversingEntry_ReverseDate.dateValue();
                    advancedLedgerEntryHeaderLocal.ReverseEntry = true;
                }

                if (strLRTrim(reasonCode.text()) != "")
                {
                    advancedLedgerEntryHeaderLocal.editReasonCode(true, strLRTrim(reasonCode.text()));

                    if (strLRTrim(reasonComment.text()) != "")
                    {
                        advancedLedgerEntryHeaderLocal.editReasonComment(true, strLRTrim(reasonComment.text()));
                    }
                }

                if (advancedLedgerEntryHeaderLocal.validateWrite())
                {
                    // This reread is done to clear the changes made to ALEHeader.FiscalCalendarPeriod since we don't actually want to change that record.
                    // If this clear is not done then there can be errors that prevent the creation of future ALE's.
                    advancedLedgerEntryHeader_ds.reread();
                    advancedLedgerEntryHeaderLocal.insert();
                    numberSeq.used();
                }

                //Now Open the AdvancedLedgerEntry form.
                this.openAdvancedLedgerEntryForm(args, advancedLedgerEntryHeaderLocal);
                infolog.setInfoLogLevel(SysInfologLevel::All);

                super();
            }
            catch
            {
                okCommandButton.enabled(false);
                infolog.setInfoLogLevel(SysInfologLevel::All);
                warning(strFmt("@SYS54217", "@SYS324279"));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        NumberSequenceReference		numberSequenceReference;
        NumberSequenceTable			numberSequenceTable;
        boolean						isNumberSequenceValid;
        
        super();

        // Initializing setup for the form.
        okCommandButton.enabled(false);
        reversingEntry_ReverseDate.allowEdit(false);
        accountingDate.dateValue(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        this.setFiscalCalendarPeriod(accountingDate.dateValue());
        transactionCurrency.text(Ledger::accountingCurrency());

        // Initialized to false because Journalizing Definition is a required field.
        isJournalizingDefinitionCodeValid = false;

        // Initialized to true because Currency field is initialized to Company Currency by default.
        isTransactionCurrencyValid = true;

        // Initialized to true because Reason Code is not a required field.
        isReasonCodeValid = true;
        isNumberSequenceValid = true;

        okCommandButton.enabled(false);
        infolog.setInfoLogLevel(SysInfologLevel::None);

        this.validateAccountingDate();

        numberSequenceReference = LedgerParameters::numRefAdvancedLedgerEntryId();        

        if (!numberSequenceReference)
        {
            isNumberSequenceValid = false;
            warning(strFmt("@SPS1274", "@SPS1174", enum2str(NumberSeqModule::Ledger)));
        }
        else
        {
            numberSequenceTable = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);

            if (!numberSequenceTable)
            {
                // The number sequence that was selected for the advanced ledger entry number does not exist.
                isNumberSequenceValid = false;
                warning(strFmt("@SPS1274", numberSequenceReference.referenceLabel(), numberSequenceReference.referenceModuleLabel()));
            }
            else
            {
                if (!numberSequenceTable.Continuous)
                {
                    // The number sequence set up for advanced ledger entry number is not continuous.
                    isNumberSequenceValid = false;
                    warning(strFmt("@SPS1275", numberSequenceTable.NumberSequence));
                }

                if (numberSequenceTable.Blocked)
                {
                    // The number sequence set up for advanced ledger entry number on hold.
                    isNumberSequenceValid = false;
                    warning(strFmt("@SPS1276", numberSequenceTable.NumberSequence));
                }
            }
        }

        if (isNumberSequenceValid)
        {
            numberSeq = NumberSeq::newGetNum(numberSequenceReference, true);
            transactionNumber.text(numberSeq.num());
            transactionNumber.allowEdit(false);
        }

        infolog.setInfoLogLevel(SysInfologLevel::All);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and returns the <c>NumberSeqFormHandler</c> object.
    /// </summary>
    /// <returns>
    /// Returns the <c>NumberSeqFormHandler</c>.
    /// </returns>
    public NumberSeqFormHandler numberSeqFormHandler()
    {
        NumberSequenceReference numberSequenceReference;
        NumberSequenceTable numberSequenceTable;

        if (!numberSeqFormHandler)
        {
            numberSequenceReference = LedgerParameters::numRefAdvancedLedgerEntryId();
            numberSequenceTable = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);
            numberSeqFormHandler = NumberSeqFormHandler::newForm(
                numberSequenceTable.RecId,
                element,
                AdvancedLedgerEntryHeader_ds,
                fieldNum(AdvancedLedgerEntryHeader, TransactionNumber));
        }

        return numberSeqFormHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openAdvancedLedgerEntryForm</Name>
				<Source><![CDATA[
    private void openAdvancedLedgerEntryForm(
        Args                        _args,
        AdvancedLedgerEntryHeader   _advancedLedgerEntryHeader)
    {
        MenuFunction menuFunction;

        _args.name(formStr(AdvancedLedgerEntryCreate));
        _args.caller(this);
        _args.record(_advancedLedgerEntryHeader);

        menuFunction = new MenuFunction(menuitemDisplayStr(AdvancedLedgerEntryEdit), MenuItemType::Display);
        menuFunction.run(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFiscalCalendarPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Fiscal Calendar Period value.
    /// </summary>
    /// <param name="_accountingDate">
    /// The date value Of AccountingDate instance.
    /// </param>
    public void setFiscalCalendarPeriod(date _accountingDate)
    {
        AdvancedLedgerEntryHeader_FiscalCalendarPeriod.allowEdit(
                AdvancedLedgerEntryManager::doMultipleOpenPeriodsExist(_accountingDate));
        AdvancedLedgerEntryHeader_FiscalCalendarPeriod.value(AdvancedLedgerEntryManager::firstOpenPeriod(_accountingDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountingDate</Name>
				<Source><![CDATA[
    public boolean validateAccountingDate()
    {
        boolean isDateValid;

        if (accountingDate.dateValue() == dateNull())
        {
            warning(strFmt("@SYS26332", accountingDate.label()));
            isDateValid = false;
        }
        else if (!AdvancedLedgerEntryManager::validateAccountingDate(accountingDate.dateValue()))
        {
            warning("@SPS1716");
            okCommandButton.enabled(false);
            isDateValid = false;
        }
        else
        {
            isDateValid = true;
        }

        return isDateValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllFields</Name>
				<Source><![CDATA[
    public boolean validateAllFields()
    {
        boolean isValid;

        isValid = this.validateAccountingDate();
        isValid = isValid && this.validateJournalizingDefinitionCode();
        isValid = isValid && this.validateTransactionCurrency();
        isValid = isValid && this.validateReasonCode();

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalizingDefinitionCode</Name>
				<Source><![CDATA[
    public boolean validateJournalizingDefinitionCode()
    {
        infolog.setInfoLogLevel(SysInfologLevel::None);

        if (strLRTrim(JournalizingDefinitionCode.text()) == "")
        {
            warning(strFmt("@SYS26332", JournalizingDefinitionCode.label()));
            isJournalizingDefinitionCodeValid = false;
        }
        else if (!JournalizingDefinition::checkExistJournalizingDefinitionByModule(journalizingDefinitionCode.valueStr(), JournalizingDefinitionModuleId::GeneralLedger))
        {
            okCommandButton.enabled(false);
            isJournalizingDefinitionCodeValid = false;
            warning(strFmt("@SPS1702", journalizingDefinitionCode.valueStr(), JournalizingDefinitionModuleId::GeneralLedger));
        }
        else
        {
            isJournalizingDefinitionCodeValid = true;
        }

        infolog.setInfoLogLevel(SysInfologLevel::All);

        return isJournalizingDefinitionCodeValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMandatoryFieldsAll</Name>
				<Source><![CDATA[
    public void validateMandatoryFieldsAll()
    {
        // Validate if all mandatory fields are filled in, enable the default Continue Button
        if (strLRTrim(transactionNumber.text()) && accountingDate.dateValue() != dateNull() &&
            strLRTrim(transactionText.text()) && strLRTrim(journalizingDefinitionCode.text()) &&
            strLRTrim(transactionCurrency.text()))
        {
            if ((reversingEntry_ReverseEntry.checked() && reversingEntry_ReverseDate.dateValue() != dateNull())
                || reversingEntry_ReverseEntry.value() == 0)
            {
                if (isJournalizingDefinitionCodeValid && isTransactionCurrencyValid && isReasonCodeValid)
                {
                    okCommandButton.enabled(true);
                }
                else if (!isJournalizingDefinitionCodeValid)
                {
                    warning(strFmt("@SPS1702", journalizingDefinitionCode.valueStr(), JournalizingDefinitionModuleId::GeneralLedger));
                }
                else if (!isTransactionCurrencyValid)
                {
                    warning("@SYS134240");
                }
                else if (!isReasonCodeValid)
                {
                    warning("@SYS138238");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReasonCode</Name>
				<Source><![CDATA[
    public boolean validateReasonCode()
    {
        infolog.setInfoLogLevel(SysInfologLevel::None);

        if (strLRTrim(ReasonCode.text()) != "")
        {
            if (ReasonTable::find(strLRTrim(reasonCode.text())).RecId == 0)
            {
                warning(strFmt("@SYS138238", ReasonCode.text()));
                isReasonCodeValid = false;
            }
            else
            {
                isReasonCodeValid = true;
            }
        }
        else
        {
            isReasonCodeValid = true;
        }

        infolog.setInfoLogLevel(SysInfologLevel::All);

        return isReasonCodeValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransactionCurrency</Name>
				<Source><![CDATA[
    public boolean validateTransactionCurrency()
    {
        infolog.setInfoLogLevel(SysInfologLevel::None);

        if (strLRTrim(TransactionCurrency.text()) == "")
        {
            warning(strFmt("@SYS26332", TransactionCurrency.label()));
            isTransactionCurrencyValid = false;
        }
        else if (!AdvancedLedgerEntryManager::validateCurrency(TransactionCurrency.text()))
        {
            warning("@SYS134240");
            okCommandButton.enabled(false);
            isTransactionCurrencyValid = false;
        }
        else
        {
            isTransactionCurrencyValid = true;
        }

        infolog.setInfoLogLevel(SysInfologLevel::All);

        return isTransactionCurrencyValid;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>AdvancedLedgerEntryHeader</Name>
				<Methods />
				<Fields>
					<Field>
						<DataField>FiscalCalendarPeriod</DataField>
						<Methods>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                return AdvancedLedgerEntryManager::constructFiscalPeriodLookup(_formReferenceControl, AccountingDate.dateValue());
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>AccountingDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>leave</Name>
						<Source><![CDATA[
        public boolean leave()
        {
            boolean isValueValid;

            infolog.setInfoLogLevel(SysInfologLevel::None);

            isValueValid = super();

            isValueValid = element.validateAccountingDate();

            infolog.setInfoLogLevel(SysInfologLevel::All);

            element.validateMandatoryFieldsAll();

            if (isValueValid)
            {
                element.setFiscalCalendarPeriod(accountingDate.dateValue());
            }

            return isValueValid;
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isValid;

            isValid = super();

            return isValid;
        }

]]></Source>
					</Method>
					<Method>
						<Name>textChange</Name>
						<Source><![CDATA[
        public void textChange()
        {
            okCommandButton.enabled(false);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AdvancedLedgerEntryHeader_FiscalCalendarPeriod</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>lookupReference</Name>
						<Source><![CDATA[
        public Common lookupReference()
        {
            return AdvancedLedgerEntryManager::constructFiscalPeriodLookup(this, AccountingDate.dateValue());
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveReference</Name>
						<Source><![CDATA[
        public Common resolveReference()
        {
            FiscalCalendarPeriod    fiscalCalendarPeriodLocal;
            FiscalCalendarRecId     fiscalCalendarRecId;
            FiscalCalendarYear      fiscalCalendarYear;
            PeriodName              periodName;

            fiscalCalendarRecId = Ledger::fiscalCalendar(CompanyInfo::current());

            if (fiscalCalendarRecId)
            {
                fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(fiscalCalendarRecId, advancedLedgerEntryHeader.AccountingDate);

                if (fiscalCalendarYear)
                {
                    periodName = this.filterValue(AbsoluteFieldBinding::construct(fieldStr(FiscalCalendarPeriod, Name), tableStr(FiscalCalendarPeriod))).value();

                    fiscalCalendarPeriodLocal = FiscalCalendarPeriod::findByCalendarYearPeriod(fiscalCalendarYear.RecId, periodName);
                }
            }

            return fiscalCalendarPeriodLocal;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TransactionText</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>leave</Name>
						<Source><![CDATA[
        public boolean leave()
        {
            boolean ret;

            ret = super();

            infolog.setInfoLogLevel(SysInfologLevel::None);

            if (strLRTrim(this.text()) == "")
            {
                warning(strFmt("@SYS26332", this.label()));
            }

            infolog.setInfoLogLevel(SysInfologLevel::All);

            element.validateMandatoryFieldsAll();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Creates a lookup of transaction text field.
        /// </summary>
        public void lookup()
        {
            AdvancedLedgerEntryManager::lookupTransactionTxt(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.validateMandatoryFieldsAll();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>textChange</Name>
						<Source><![CDATA[
        public void textChange()
        {
            super();

            okCommandButton.enabled(false);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>JournalizingDefinitionCode</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>leave</Name>
						<Source><![CDATA[
        public boolean leave()
        {
            boolean ret;

            ret = super();

            element.validateJournalizingDefinitionCode();

            element.validateMandatoryFieldsAll();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            QueryBuildDataSource    queryBuildDataSource;
            SysTableLookup          lookup;
            QueryBuildRange         queryBuildRange;
            Query                   query;

            query = new Query();

            // Add the first data source to the query
            queryBuildDataSource = query.addDataSource(tableNum(JournalizingDefinition));

            // Add the range to this first data source
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(JournalizingDefinition, JournalizingDefinitionModuleValue));

            // Set the range
            queryBuildRange.value(enum2str(JournalizingDefinitionModuleId::GeneralLedger));

            lookup = SysTableLookup::newParameters(tableNum(JournalizingDefinition), this, true);
            lookup.parmQuery(query);

            // Add the fields to be shown in the lookup form.
            lookup.addLookupfield(fieldNum(JournalizingDefinition, JournalizingDefinitionCode));
            lookup.addLookupfield(fieldNum(JournalizingDefinition, JournalizingDefinitionDesc));
            lookup.addLookupfield(fieldNum(JournalizingDefinition, JournalizingDefinitionModuleValue));

            // Perform the lookup.
            lookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.validateJournalizingDefinitionCode();

            element.validateMandatoryFieldsAll();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>textChange</Name>
						<Source><![CDATA[
        public void textChange()
        {
            super();

            okCommandButton.enabled(false);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TransactionCurrency</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>leave</Name>
						<Source><![CDATA[
        public boolean leave()
        {
            boolean ret;

            ret = super();

            element.validateTransactionCurrency();

            element.validateMandatoryFieldsAll();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.validateTransactionCurrency();

            element.validateMandatoryFieldsAll();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>textChange</Name>
						<Source><![CDATA[
        public void textChange()
        {
            super();

            okCommandButton.enabled(false);
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Creates the lookup form on transaction currency.
        /// </summary>
        public void lookup()
        {
            AdvancedLedgerEntryHeader::lookupCurrency(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReasonCode</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Adds the 'Go to Main Table Form' option to the context menu for reason code field.
        /// </summary>
        public void jumpRef()
        {
            //Pass the account type of Ledger, so that the relevant form shows.
            ReasonTable::jumpRef(ReasonCodeAccountTypeAll::Ledger);
        }

]]></Source>
					</Method>
					<Method>
						<Name>leave</Name>
						<Source><![CDATA[
        public boolean leave()
        {
            boolean ret;

            ret = super();

            element.validateReasonCode();

            element.validateMandatoryFieldsAll();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            ReasonFormTable::reasonCodeLookup(
                this,
                LedgerJournalACType::Ledger,
                LedgerJournalACType::Ledger,
                true);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.validateReasonCode();

            element.validateMandatoryFieldsAll();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>textChange</Name>
						<Source><![CDATA[
        public void textChange()
        {
            isReasonCodeValid = false;

            okCommandButton.enabled(false);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReversingEntry_ReverseEntry</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isChecked;

            isChecked = reversingEntry_ReverseEntry.checked();
            reversingEntry_ReverseDate.allowEdit(isChecked);
            reversingEntry_ReverseDate.enabled(isChecked);

            if (isChecked)
            {
                reversingEntry_ReverseDate.dateValue(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            }
            else
            {
                reversingEntry_ReverseDate.dateValue(dateNull());
            }

            element.validateMandatoryFieldsAll();

            return super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReversingEntry_ReverseDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>leave</Name>
						<Source><![CDATA[
        public boolean leave()
        {
            boolean isValueValid;

            infolog.setInfoLogLevel(SysInfologLevel::None);

            isValueValid = super();

            if (reversingEntry_ReverseEntry.checked())
            {
                if (this.dateValue() == dateNull())
                {
                    warning(strFmt("@SYS26332", this.label()));
                    isValueValid = false;
                }
            }

            infolog.setInfoLogLevel(SysInfologLevel::All);

            element.validateMandatoryFieldsAll();

            return isValueValid;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>AdvancedLedgerEntryHeader</Name>
			<Table>AdvancedLedgerEntryHeader</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountingDistributionTemplate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FiscalCalendarPeriod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JournalizingDefinition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonTableRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReverseDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReverseEntry</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentHeader</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkflowApprovalState</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkFlowStatus</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoSearch>No</AutoSearch>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SPS1161</Caption>
		<DataSource xmlns="">AdvancedLedgerEntryHeader</DataSource>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Scrollbars xmlns="">No</Scrollbars>
		<Style xmlns="">Dialog</Style>
		<Width xmlns="">400</Width>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>TransactionNumber</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>424194300</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Bold>Normal</Bold>
						<Label>@SPS1270</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>AccountingDate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>589158750</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Date</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Bold>Normal</Bold>
						<ExtendedDataType>TransDate</ExtendedDataType>
						<Label>@SPS1227</Label>
						<Mandatory>Yes</Mandatory>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormReferenceGroupControl">
						<Name>AdvancedLedgerEntryHeader_FiscalCalendarPeriod</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>754123200</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ReferenceGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>AdvancedLedgerEntryHeader_FiscalCalendarPeriod_Name</Name>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
							</AxFormControl>
						</Controls>
						<ExtendedDataType>FiscalCalendarPeriodRecId</ExtendedDataType>
						<Label>@SYS127887</Label>
						<Mandatory>Yes</Mandatory>
						<ReplacementFieldGroup>FiscalPeriod</ReplacementFieldGroup>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>TransactionText</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>919087650</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Bold>Normal</Bold>
						<Label>@SPS1271</Label>
						<Mandatory>Yes</Mandatory>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>JournalizingDefinitionCode</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<DataRelationPath>JournalizingDefinition</DataRelationPath>
						<ElementPosition>1060485750</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Bold>Normal</Bold>
						<Label>@SPS1229</Label>
						<Mandatory>Yes</Mandatory>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>TransactionCurrency</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1272582900</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Bold>Normal</Bold>
						<Label>@SPS1295</Label>
						<LimitText>3</LimitText>
						<LimitTextMode>Fixed</LimitTextMode>
						<Mandatory>Yes</Mandatory>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>ReasonCode</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1484680050</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Bold>Normal</Bold>
						<Label>@SYS111246</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>ReasonComment</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1696777200</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Bold>Normal</Bold>
						<Label>@SYS114149</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Reversing_Entry</Name>
						<ElementPosition>1908874352</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>ReversingEntry_ReverseEntry</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SPS1235</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>ReversingEntry_ReverseDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Bold>Normal</Bold>
								<ExtendedDataType>TransDate</ExtendedDataType>
								<Label>@SPS1230</Label>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKCommandButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelCommandButtonControl</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>