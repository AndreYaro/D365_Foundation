<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BudgetPlanCreateDropDialog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
    [Form]
    public class BudgetPlanCreateDropDialog extends FormRun
    {
    BudgetPlanHeader        localBudgetPlanHeader;
    BudgetPlanHeader        callerBudgetPlanHeader;
    NumberSeqFormHandler    numberSeqFormHandler;
    NumberSequenceReference numberSequenceReference;

}
]]></Source>
			</Method>
			<Method>
				<Name>checkIsParentBudgetPlanRequired</Name>
				<Source><![CDATA[
    public boolean checkIsParentBudgetPlanRequired()
    {
        boolean returnValue = true;

        if (budgetPlanHeader_ds.object(fieldNum(BudgetPlanHeader, ParentBudgetPlanHeader)).allowEdit())
        {
            // Only validate if the parent budget plan field is enabled.
            returnValue = BudgetPlan::checkIsParentBudgetPlanRequired(budgetPlanHeader.BudgetPlanningProcess,
                budgetPlanHeader.BudgetingOrganization,
                budgetPlanHeader.ParentBudgetPlanHeader);
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        if (!budgetPlanHeader.RecId && budgetPlanHeader.DocumentNumber)
        {
            BudgetPlan::releaseBudgetPlanDocumentNumber(
                budgetPlanHeader.BudgetPlanningProcess,
                budgetPlanHeader.DocumentNumber);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        #Task

        Args         args;
        FormRun      formRun;
        MenuFunction budgetPlanMenuFunction;

        // If caller is a form
        formRun = element.args().caller();

        if (formRun)
        {
            if (formRun.form().name() == formStr(BudgetPlan))
            {
                // Refresh the budget plan detail page after calling the dialog form and successfully creating a record i.e. clicking CloseOk
                formRun.dataSource().refreshEx();
            }
        }

        super();

        // Open the BudgetPlan form and display the record the user just created.
        args = new Args();
        args.caller(element);
        args.lookupRecord(budgetPlanHeader_ds.cursor());

        budgetPlanMenuFunction = new MenuFunction(menuItemDisplayStr(BudgetPlanEdit), MenuItemType::Display);
        budgetPlanMenuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableCreateBudgetPlanButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the create BudgetPlan button.
    /// </summary>
    public void enableDisableCreateBudgetPlanButton()
    {
        boolean enabled;

        // Enable the create button only when these fields are filled in
        if (budgetPlanHeader.DocumentNumber
            && budgetPlanHeader.BudgetPlanningProcess
            && budgetPlanHeader.BudgetingOrganization
            && budgetPlanHeader.Name
            && budgetPlanHeader.BudgetPlanPreparer)
        {
            enabled = true;
        }

        createBudgetPlan.enabled(enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        budgetPlanHeader_ds.query().dataSourceTable(tableNum(BudgetPlanHeader)).clearDynalinks();

        if (!element.args().caller())
        {
            throw error(Error::missingFormActiveBuffer(element.name()));
        }

        switch (element.args().menuItemName())
        {
            case menuItemDisplayStr(BudgetPlanNew):
                if (element.args().record() is BudgetPlanHeader &&
                    element.args().record().isNewRecord())
                {
                    // in case if there is an unsaved record in the args, use it as a template
                    callerBudgetPlanHeader = element.args().record() as BudgetPlanHeader;
                }

                // Use default labels
                break;

            case menuItemDisplayStr(BudgetPlanChild):
                callerBudgetPlanHeader = element.args().record() as BudgetPlanHeader;

                if (!callerBudgetPlanHeader)
                {
                    throw error(Error::missingFormActiveBuffer(formStr(BudgetPlanCreateDropDialog)));
                }

                element.design().caption("@GLS70493");
                break;

            case menuItemDisplayStr(BudgetPlanCopy):
                callerBudgetPlanHeader = element.args().record() as BudgetPlanHeader;

                if (!callerBudgetPlanHeader)
                {
                    throw error(Error::missingFormActiveBuffer(formStr(BudgetPlanCreateDropDialog)));
                }

                element.design().caption("@GLS70494");
                createBudgetPlan.text("@GLS70495");
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqFormHandlerBudgetPlanId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>NumberSeqFormHandler</c> class for the budget plan identifier
    /// number sequence.
    /// </summary>
    /// <param name="_budgetPlanHeader_ds">
    /// The data source of the form where the number sequence is used.
    /// </param>
    /// <returns>
    /// An instance of the <c>NumberSeqFormHandler</c> class for the budget plan identifier number
    /// sequence.
    /// </returns>
    public NumberSeqFormHandler numberSeqFormHandlerBudgetPlanId(FormDataSource _budgetPlanHeader_ds)
    {
        boolean isValid;

        if (!numberSeqFormHandler)
        {
            if (!numberSequenceReference
                && budgetPlanHeader.BudgetPlanningProcess)
            {
                numberSequenceReference = BudgetPlan::getBudgetPlanNumberSeqBasedOnProcess(budgetPlanHeader.BudgetPlanningProcess);
                isValid = BudgetPlan::checkBudgetPlanNumberSequence(numberSequenceReference);
            }

            if (isValid)
            {
                numberSeqFormHandler = NumberSeqFormHandler::newForm(
                    numberSequenceReference.NumberSequenceId,
                    element,
                    _budgetPlanHeader_ds,
                    fieldNum(BudgetPlanHeader, DocumentNumber));
            }
        }

        return numberSeqFormHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the fields on the <c>BudgetPlanCreateDropDialog</c> form.
    /// </summary>
    public void setFieldVisibility()
    {
        FormDataObject organizationDataObject;
        FormDataObject parentDataObject;

        switch (element.args().menuItemName())
        {
            case menuItemDisplayStr(BudgetPlanNew):
                // No controls are disabled.
                break;

            case menuItemDisplayStr(BudgetPlanChild):
                BudgetPlanningProcess.allowEdit(false);

                parentDataObject = budgetPlanHeader_ds.object(fieldNum(BudgetPlanHeader, ParentBudgetPlanHeader));
                parentDataObject.allowEdit(false);
                break;

            case menuItemDisplayStr(BudgetPlanCopy):
                BudgetPlanningProcess.allowEdit(false);

                parentDataObject = budgetPlanHeader_ds.object(fieldNum(BudgetPlanHeader, ParentBudgetPlanHeader));
                parentDataObject.allowEdit(false);

                organizationDataObject = budgetPlanHeader_ds.object(fieldNum(BudgetPlanHeader, BudgetingOrganization));
                organizationDataObject.allowEdit(false);

                PlanNarrativeGroup.visible(true);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>BudgetPlanHeader</Name>
				<Methods>
					<Method>
						<Name>editBudgetPlanPriorityName</Name>
						<Source><![CDATA[
        public edit BudgetPlanPriorityName editBudgetPlanPriorityName(boolean _set, BudgetPlanPriorityName _budgetPlanPriorityName)
        {
            BudgetPlanPriorityName        budgetPlanPriorityName;
            BudgetPlanPriorityTranslation budgetPlanPriorityTranslation;

            if (hasTableAccess(tableNum(BudgetPlanPriority))
                && hasTableAccess(tableNum(BudgetPlanPriorityTranslation)))
            {
                if (_set)
                {
                    if (_budgetPlanPriorityName)
                    {
                        budgetPlanPriorityTranslation = BudgetPlanPriorityTranslation::findByLocalizedName(_budgetPlanPriorityName);

                        if (!budgetPlanPriorityTranslation.BudgetPlanPriority)
                        {
                            warning(strFmt("@SYS316757", "@GLS70080"));
                        }
                        else
                        {
                            budgetPlanHeader.BudgetPlanPriority = budgetPlanPriorityTranslation.BudgetPlanPriority;
                            budgetPlanPriorityName = budgetPlanPriorityTranslation.Name;
                        }
                    }
                    else
                    {
                        budgetPlanHeader.BudgetPlanPriority = 0;
                        budgetPlanPriorityName = _budgetPlanPriorityName;
                    }
                }
                else
                {
                    if (BudgetPlanPriority.text())
                    {
                        budgetPlanPriorityName = BudgetPlanPriorityTranslation::getLocalizedName(budgetPlanHeader.BudgetPlanPriority);
                    }
                }
            }

            return budgetPlanPriorityName;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editBudgetPlanningProcessName</Name>
						<Source><![CDATA[
        public edit BudgetPlanningProcessName editBudgetPlanningProcessName(boolean _set, BudgetPlanningProcessName _budgetPlanningProcessName)
        {
            BudgetPlanningProcessName        budgetPlanningProcessName;
            BudgetPlanningProcessTranslation budgetPlanningProcessTranslation;

            if (hasTableAccess(tableNum(BudgetPlanningProcess))
                && hasTableAccess(tableNum(BudgetPlanningProcessTranslation)))
            {
                if (_set)
                {
                    if (_budgetPlanningProcessName)
                    {
                        budgetPlanningProcessTranslation =
                            BudgetPlanningProcessTranslation::findByLocalizedName(_budgetPlanningProcessName);

                        if (!budgetPlanningProcessTranslation.BudgetPlanningProcess)
                        {
                            warning(strFmt("@SYS316757", "@GLS70076"));
                        }
                        else
                        {
                            budgetPlanHeader.BudgetPlanningProcess = budgetPlanningProcessTranslation.BudgetPlanningProcess;
                            budgetPlanningProcessName = budgetPlanningProcessTranslation.Name;
                        }
                    }
                    else
                    {
                        budgetPlanHeader.BudgetPlanningProcess = 0;
                        budgetPlanningProcessName = _budgetPlanningProcessName;
                    }
                }
                else
                {
                    budgetPlanningProcessName = BudgetPlanningProcessTranslation::getLocalizedName(budgetPlanHeader.BudgetPlanningProcess);
                }
            }

            return budgetPlanningProcessName;
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            super();

            switch (element.args().menuItemName())
            {
                case menuItemDisplayStr(BudgetPlanNew):
                    BudgetPlan::defaultRowForCreate(budgetPlanHeader, callerBudgetPlanHeader);

                    if (budgetPlanHeader.BudgetPlanningProcess)
                    {
                        numberSeqFormHandler = null;
                        if (element.numberSeqFormHandlerBudgetPlanId(budgetPlanHeader_ds))
                        {
                            numberSeqFormHandler.formMethodDataSourceCreatePre();
                            numberSeqFormHandler.formMethodDataSourceCreate();
                        }
                    }
                    break;

                case menuItemDisplayStr(BudgetPlanChild):
                    // Initialize Budget plan using the caller information
                    BudgetPlan::defaultRowForChild(callerBudgetPlanHeader, budgetPlanHeader);
                    if (element.numberSeqFormHandlerBudgetPlanId(budgetPlanHeader_ds))
                    {
                        numberSeqFormHandler.formMethodDataSourceCreatePre();
                        numberSeqFormHandler.formMethodDataSourceCreate();
                    }
                    break;

                case menuItemDisplayStr(BudgetPlanCopy):
                    // Initialize Budget plan using the caller information
                    BudgetPlan::defaultRowForCopy(callerBudgetPlanHeader, budgetPlanHeader);
                    if (element.numberSeqFormHandlerBudgetPlanId(budgetPlanHeader_ds))
                    {
                        numberSeqFormHandler.formMethodDataSourceCreatePre();
                        numberSeqFormHandler.formMethodDataSourceCreate();
                    }
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }

            element.setFieldVisibility();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        /// <summary>
        /// Validates the <c>BudgetPlanHeader</c> record.
        /// </summary>
        /// <returns>
        /// true if the <c>BudgetPlanHeader</c> record passes validation; otherwise false.
        /// </returns>
        public boolean validateWrite()
        {
            boolean isValid;

            isValid = super() && element.numberSeqFormHandlerBudgetPlanId(budgetPlanHeader_ds).formMethodDataSourceValidateWrite();

            isValid = isValid && element.checkIsParentBudgetPlanRequired();

            return isValid;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            element.numberSeqFormHandlerBudgetPlanId(budgetPlanHeader_ds).formMethodDataSourceWrite();

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            super(_append);

            localBudgetPlanHeader.data(budgetPlanHeader);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>BudgetingOrganization</DataField>
						<Methods>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                OMInternalOrganization budgetingOrganizationRecord;

                if (element.args().menuItemName() == menuItemDisplayStr(BudgetPlanChild))
                {
                    budgetingOrganizationRecord = BudgetPlan::lookupBudgetingOrganization(
                        _formReferenceControl,
                        budgetPlanHeader.BudgetPlanningProcess,
                        budgetPlanHeader.ParentBudgetPlanHeader);
                }
                else if (budgetPlanHeader.BudgetPlanningProcess)
                {
                    budgetingOrganizationRecord = BudgetPlan::lookupBudgetingOrganization(
                        _formReferenceControl,
                        budgetPlanHeader.BudgetPlanningProcess);
                }

                if (budgetPlanHeader.BudgetPlanningProcess)
                {
                    BudgetPlan::validateWorkerBelongsToPlanningHierarchy(budgetPlanHeader.BudgetPlanningProcess);
                }

                return budgetingOrganizationRecord;
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.enableDisableCreateBudgetPlanButton();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>BudgetPlanPreparer</DataField>
						<Methods>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                HcmWorker workerRecord;

                workerRecord = BudgetPlan::lookupWorker(_formReferenceControl);

                return workerRecord;
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.enableDisableCreateBudgetPlanButton();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Name</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.enableDisableCreateBudgetPlanButton();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ParentBudgetPlanHeader</DataField>
						<Methods>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                BudgetPlanHeader parentBudgetPlanHeaderRecord;

                if (budgetPlanHeader.BudgetPlanningProcess
                    && budgetPlanHeader.BudgetingOrganization)
                {
                    parentBudgetPlanHeaderRecord = BudgetPlan::lookupParentBudgetPlanHeader(
                        _formReferenceControl,
                        budgetPlanHeader.BudgetPlanningProcess,
                        budgetPlanHeader.BudgetingOrganization);
                }

                return parentBudgetPlanHeaderRecord;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>BudgetPlanningConfiguration</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            PlanningUserGroup.visible(BudgetPlanningConfiguration.UseBudgetPlanningUserGroups);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>BudgetPlanningProcess</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            BudgetPlan::lookupBudgetPlanningProcess(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isModified;

            isModified = super();

            element.enableDisableCreateBudgetPlanButton();

            if (localBudgetPlanHeader.BudgetPlanningProcess != budgetPlanHeader.BudgetPlanningProcess)
            {
                // Initialize to null only if the process value changed
                numberSeqFormHandler = null;
                numberSequenceReference = null;

                // Gets and sets the document number
                if (element.numberSeqFormHandlerBudgetPlanId(budgetPlanHeader_ds))
                {
                    numberSeqFormHandler.formMethodDataSourceCreate();
                }

                // Save the changed values
                localBudgetPlanHeader.data(budgetPlanHeader);

                // Call the modified event on the table buffer
                budgetPlanHeader.modifiedField(fieldNum(BudgetPlanHeader, BudgetPlanningProcess));
            }

            return isModified;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetPlanPriority</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            BudgetPlan::lookupBudgetPlanPriority(this, budgetPlanHeader.BudgetPlanningProcess);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CreateBudgetPlan</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            switch (element.args().menuItemName())
            {
                case menuItemDisplayStr(BudgetPlanNew):
                case menuItemDisplayStr(BudgetPlanChild):
                    // Do nothing
                    break;

                case menuItemDisplayStr(BudgetPlanCopy):
                    // Copy the budget plan along with lines
                    BudgetPlan::copyBudgetPlan(
                        callerBudgetPlanHeader.RecId,
                        budgetPlanHeader.RecId);
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>BudgetPlanHeader</Name>
			<Table>BudgetPlanHeader</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BudgetingOrganization</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetPlanningStage</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetPlanPreparer</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetPlanPriority</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Currency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InUseBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsDescriptionIncluded</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsHistorical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsRevenueSummaryIncluded</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Layout</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NeedsUpdate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentBudgetPlanHeader</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PlanningUserGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Rank</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RevenueSummary</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkflowStatus</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowDelete>No</AllowDelete>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>BudgetPlanningConfiguration</Name>
			<Table>BudgetPlanningConfiguration</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DimensionHierarchy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Key</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SecurityModel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseBudgetPlanningUserGroups</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<AllowFormCompanyChange xmlns="">Yes</AllowFormCompanyChange>
		<Caption xmlns="">@GLS70490</Caption>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>PlanGroup</Name>
						<ElementPosition>1288490187</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>BudgetPlanningProcess</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>715827882</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>editBudgetPlanningProcessName</DataMethod>
								<DataSource>BudgetPlanHeader</DataSource>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>BudgetingOrganization</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ReferenceGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BudgetingOrganization_Name</Name>
										<DataRelationPath>BudgetingOrganization</DataRelationPath>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
								</Controls>
								<DataSource>BudgetPlanHeader</DataSource>
								<ReferenceField>BudgetingOrganization</ReferenceField>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>ParentBudgetPlanHeader</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ReferenceGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ParentBudgetPlanHeader_Name</Name>
										<DataRelationPath>ParentBudgetPlanHeader</DataRelationPath>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
								</Controls>
								<DataSource>BudgetPlanHeader</DataSource>
								<ReferenceField>ParentBudgetPlanHeader</ReferenceField>
								<ReplacementFieldGroup>Name</ReplacementFieldGroup>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>BudgetPlanPreparer</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1789569705</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ReferenceGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BudgetPlanPreparer_DirPerson_FK_Name</Name>
										<DataRelationPath>BudgetPlanPreparer.DirPerson_FK</DataRelationPath>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
								</Controls>
								<DataSource>BudgetPlanHeader</DataSource>
								<ReferenceField>BudgetPlanPreparer</ReferenceField>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>PlanningUserGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1968526675</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>PlanningUserGroup</DataField>
								<DataSource>BudgetPlanHeader</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Currency</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>Currency</DataField>
								<DataSource>BudgetPlanHeader</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@GLS70097</Caption>
						<DataSource>BudgetPlanHeader</DataSource>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>DetailsGroup</Name>
						<ElementPosition>1717986916</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>DocumentNumber</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>DocumentNumber</DataField>
								<DataSource>BudgetPlanHeader</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Name</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>Name</DataField>
								<DataSource>BudgetPlanHeader</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>BudgetPlanPriority</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>editBudgetPlanPriorityName</DataMethod>
								<DataSource>BudgetPlanHeader</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@GLS70098</Caption>
						<DataSource>BudgetPlanHeader</DataSource>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>PlanNarrativeGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>BudgetPlanHeader_IsDescriptionIncluded</Name>
								<Type>CheckBox</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>IsDescriptionIncluded</DataField>
								<DataSource>BudgetPlanHeader</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>BudgetPlanHeader_IsRevenueSummaryIncluded</Name>
								<Type>CheckBox</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>IsRevenueSummaryIncluded</DataField>
								<DataSource>BudgetPlanHeader</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@Budget:BudgetPlanning_Narrative</Caption>
						<DataSource>BudgetPlanHeader</DataSource>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1193046470</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Left>0</Left>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CreateBudgetPlan</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<Enabled>No</Enabled>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<ShowShortCut>No</ShowShortCut>
						<Text>@GLS70491</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CommandCancel</Name>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<DataSource>BudgetPlanHeader</DataSource>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>