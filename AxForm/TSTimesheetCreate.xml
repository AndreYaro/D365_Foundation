<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>TSTimesheetCreate</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class TSTimesheetCreate extends FormRun
{
    ProjPeriodTimesheetWeek projPeriodTimesheetWeek;
    ProjPeriodLine          projPeriodLine;
    ProjParameters          projParameters;
    FormRun                 formCaller;
    boolean                 cancelFormInitialization = false;
    boolean                 calledFromEss = false;
    ResourceRecId           lastResourceSelectedByUser;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        lastResourceSelectedByUser
    #endmacro

}
]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        if (tsTimesheetTable_ds.validateWrite())
        {
            tsTimesheetTable_ds.write();

            if (tsTimesheetTable.RecId && CreateFromFavorites.checked())
            {
                TSTimesheetCreate::newStandard(TSTimesheetCmd::CreateFromFavorites,true,tsTimesheetTable).run();
            }
            
            super();

            TSITimesheetEntryMobile tsITimesheetEntryMobile = formCaller as TSITimesheetEntryMobile;
            // Open the timesheet form to allow the user to create lines
            if (formCaller.name() != formStr(TSTimesheetEntry) && !tsITimesheetEntryMobile)
            {
                FormName formName = formStr(TSTimesheetEntry);
                MenuItemName menuItemName = menuitemDisplayStr(TSTimesheetTableForEdit);

                Args args = new Args(formName);
                args.openMode(OpenMode::Edit);
                args.record(tsTimesheetTable);

                // Invoke the form
                MenuFunction menuFunction = new MenuFunction(menuItemName, MenuItemType::Display);

                if (menuFunction)
                {
                    menuFunction.openMode(OpenMode::Edit);
                }

                // Check access rights
                if (!menuFunction || !menuFunction.checkAccessRights())
                {
                    // Access rights are not sufficient to use this function.
                    throw error("@SYS81158");
                }

                if (calledFromEss)
                {
                    //If we are opening from ESS, we want to pass that information onto the Entry form
                    args.menuItemName(menuItemDisplayStr(TSTimesheetCreateFromEss));
                    args.caller(element.args().caller());
                    args.parm(element.args().parm());
                }

                FormRun formRun = classfactory.formRunClass(args);
                formRun.init();
                formRun.run();
                formRun.detach();

                var tsITimesheetEntry = formRun as TSITimesheetEntry;
                if (tsITimesheetEntry)
                {
                    tsITimesheetEntry.setNewTimesheetNbr(TSTimesheetTable.TimesheetNbr);
                }
            }

            var tsITimesheetEntry = formCaller as TSITimesheetEntry;
            if (tsITimesheetEntry)
            {
                tsITimesheetEntry.setNewTimesheetNbr(TSTimesheetTable.TimesheetNbr);
            }
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        if (element.args())
        {
            formCaller = element.args().caller();
        }

        if (!formCaller)
        {
            throw error(Error::missingParameter(null));
        }

        if (element.args() && element.args().menuItemName() == menuItemDisplayStr(TSTimesheetCreateFromEss))
        {
            calledFromEss = true;
        }

        cancelFormInitialization = (ResourceFacade::findByCurrentWorker() == 0 && !TSTimesheetHelper::userIsADelegateOfAnyResource());

        if (cancelFormInitialization)
        {
            // The form must close because the user is not a resource or a delegate.
            this.lifecycleHelper().cancelFormInitialization(Exception::Error, "@Timesheet:UserIsNotADelegateOrResourceHimself");
        }
        else
        {
            super();

            xSysLastValue::getLast(this);

            projParameters = ProjParameters::find();

            this.setControlVisibility();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFields</Name>
				<Source><![CDATA[
    public void initFields()
    {
        projPeriodLine = ProjPeriodLine::findFromPeriod(tsTimesheetTable.ProjPeriodId, tsTimesheetTable.PeriodFrom);
        str periodDates = TSTimesheetTable::startDateEndDate(projPeriodLine.PeriodFrom, projPeriodLine.PeriodTo);
        periodDateRange.text(periodDates);

        if (tsTimesheetTable.ProjPeriodTimesheetWeek != 0)
        {
            select firstonly projPeriodTimesheetWeek
                where projPeriodTimesheetWeek.RecId == tsTimesheetTable.ProjPeriodTimesheetWeek;
        }
        else
        {
            TSTimesheetLine tsTimesheetLineLocal;

            select firstonly projPeriodTimesheetWeek
                exists join tsTimesheetLineLocal
                    where tsTimesheetLineLocal.TimesheetNbr            == tsTimesheetTable.TimesheetNbr
                       && tsTimesheetLineLocal.ProjPeriodTimesheetWeek == projPeriodTimesheetWeek.RecId;
        }

        this.setDates();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets the visibility of controls.
    /// </summary>
    public void setControlVisibility()
    {
        CreateFromFavorites.visible(ResourceFacade::findByCurrentWorker() && projParameters.UseFavorites);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForChangeReason</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets the Change Reason field to visible and mandatory
    ///  depending on if timesheet resource is the current worker or not.
    /// </summary>
    public void setVisibilityForChangeReason()
    {
        if (projParameters.TimesheetChangeReason
            && TSTimesheetTable.Resource != ResourceFacade::findByCurrentWorker())
        {
            ChangeReason.visible(true);
            ChangeReason.mandatory(projParameters.TimesheetChangeReasonMandatory);
        }
        else
        {
            ChangeReason.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDates</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets the timesheet period dates for the new timesheet.
    /// </summary>
    public void setDates()
    {
        TSDate timesheetDate = dateFrom.dateValue();

        projPeriodLine = ProjPeriodLine::findFromPeriod(tsTimesheetTable.ProjPeriodId, timesheetDate);
        if (projPeriodLine.RecId != 0)
        {
            // Set timesheet period From and To dates and their text representation
            tsTimesheetTable.PeriodFrom = projPeriodLine.PeriodFrom;
            tsTimesheetTable.PeriodTo = projPeriodLine.PeriodTo;
            periodDateRange.text(TSTimesheetTable::startDateEndDate(tsTimesheetTable.PeriodFrom, tsTimesheetTable.PeriodTo));

            // Set timesheet week timesheetDate falls into
            projPeriodTimesheetWeek = ProjPeriodTimesheetWeek::findFromPeriod(projPeriodLine.PeriodId, timesheetDate);
            tsTimesheetTable.ProjPeriodTimesheetWeek = projPeriodTimesheetWeek.RecId;
        }
        else
        {
            tsTimesheetTable.PeriodFrom              = dateNull();
            tsTimesheetTable.PeriodTo                = dateNull();
            tsTimesheetTable.ProjPeriodTimesheetWeek = 0;

            periodDateRange.text('');
        }

        this.validateCanCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCanCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs validation on whether a timesheet may be created and prevents the user from creation, if validation fails.
    /// </summary>
    public void validateCanCreate()
    {
        boolean canCreate = tsTimesheetTable.Resource != 0
                            && tsTimesheetTable.ProjPeriodTimesheetWeek != 0
                            && projPeriodLine.RecId != 0;

        OK.enabled(canCreate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the timesheet create form.
    /// </summary>
    public void run()
    {
        if (!cancelFormInitialization)
        {
            // Form is not being cancelled; create the buffer.
            TSTimesheetTable_ds.create();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjPeriodLine</Name>
				<Source><![CDATA[
    private void setProjPeriodLine(ResourceRecId _resourceRecId)
    {
        if (_resourceRecId)
        {
            projPeriodLine = TSTimesheetTable::getValidResourcePeriod(_resourceRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormFields</Name>
				<Source><![CDATA[
    private void setFormFields(ResourceRecId _resourceRecId)
    {
        if (_resourceRecId)
        {
            tsTimesheetTable.Resource = _resourceRecId;

            if (projPeriodLine.RecId != 0)
            {
                tsTimesheetTable.ProjPeriodId = projPeriodLine.PeriodId;
                tsTimesheetTable.PeriodFrom = projPeriodLine.PeriodFrom;
                tsTimesheetTable.PeriodTo = projPeriodLine.PeriodTo;
                projPeriodTimesheetWeek = ProjPeriodTimesheetWeek::findFromPeriod(projPeriodLine.PeriodId);
                if (projPeriodTimesheetWeek.RecId == 0)
                {
                    warning("@SYS338882");
                }
                else
                {
                    tsTimesheetTable.ProjPeriodTimesheetWeek = projPeriodTimesheetWeek.RecId;
                }
            }
            TSDate  currentSystemDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            dateFrom.dateValue(max(currentSystemDate, tsTimesheetTable.PeriodFrom));

            element.initFields();
            element.validateCanCreate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        if (!cancelFormInitialization)
        {
            xSysLastValue::saveLast(this);
        }

        super();

        TSIFormRefreshData callerForm = element.args().caller() as TSIFormRefreshData;
        if (callerForm)
        {
            callerForm.refreshData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    private DataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    private IdentifierName lastValueDesignName()
    {
        return this.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    private IdentifierName lastValueElementName()
    {
        return this.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    private UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    private UserId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,Resource.value()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    private void initParmDefault()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion    :
                [version,#CurrentList,lastResourceSelectedByUser] = _packedClass;
                break;
            default :
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>TSTimesheetTable</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean result = projPeriodLine.RecId != 0 
                             && TSTimesheetTable::checkMaxTimesheets(tsTimesheetTable.PeriodFrom, tsTimesheetTable.Resource, true);

            if (result)
            {
                if (projParameters.TimesheetAuditTrail             
                    && projParameters.TimesheetChangeReasonMandatory
                    && !changeReason.text()                         
                    && tsTimesheetTable.Resource != ResourceFacade::findByCurrentWorker())
                {
                    result = checkFailed("@SYS4006050");
                }
            }

            if (result)
            {
				// We set the SDF header during the insert
				if (TSTimesheetTable.SourceDocumentHeader != 0)
				{
					result = super();
				}
            }
            return result;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            ttsBegin;
            super();

            if (projParameters.TimesheetAuditTrail)
            {
                TSTimesheetTableLog::createTableLog(
                                        tsTimesheetTable,
                                        ChangeReason.text(),
                                        TsTimesheetChangeType::Create);
            }
            ttsCommit;
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            TSResourceRecId resourceRecId;

            // The form design has been changed to retrieve the users last selected value
            // and accordingly below condition is added to check whether the current user is a delegate of last resource selected.                       
            if (lastResourceSelectedByUser && TSTimesheetHelper::isDelegateUserForResource(lastResourceSelectedByUser, curUserId()))
            {
                resourceRecId = lastResourceSelectedByUser;
            }
            else
            {
                resourceRecId = ResourceFacade::findByCurrentWorker();
            }

            element.setProjPeriodLine(resourceRecId);
        
            super();

            element.setFormFields(resourceRecId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>research</Name>
						<Source><![CDATA[
        public void research(boolean _retainPosition = false)
        {
            // do not call super()
        }

]]></Source>
					</Method>
					<Method>
						<Name>reread</Name>
						<Source><![CDATA[
        public void reread()
        {
            if (tsTimesheetTable.RecId)
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>Resource</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                // super() calls TSTimesheetTable::modifiedField() which updates PeriodFrom,
                // PeriodTo and ProjPeriodTimesheetWeek fields without respect to the date
                // that user has specified (dateFrom). That's why these fields are updated below.
                super();

                // Update project period with the period of the selected resource
                tsTimesheetTable.ProjPeriodId = ResourceFacade::getPeriodId(tsTimesheetTable.Resource);

                // Update timesheet PeriodFrom, PeriodTo and ProjPeriodTimesheetWeek
                element.setDates();
                element.setVisibilityForChangeReason();
                element.validateCanCreate();
            }

]]></Source>
							</Method>
							<Method>
								<Name>resolveReference</Name>
								<Source><![CDATA[
            /// <summary>
            /// Finds the ResourceWorkerView that is currently selected at the form control.
            /// </summary>
            /// <param name = "_formReferenceControl">Form control that contains the name of the resource worker view to be searched.</param>
            /// <returns>ResourceWorkerView that is currently selected.</returns>
            public Common resolveReference(FormReferenceControl _formReferenceControl)
            {
                var ret = ResourceReferenceResolver::resolveReferenceByName(_formReferenceControl);

                return ret != null && ret.RecId? ret : null;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Resource</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>lookupReference</Name>
						<Source><![CDATA[
        public Common lookupReference()
        {
            return TSResource::lookupDelegateResources(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();

            element.setProjPeriodLine(this.value());
            element.setFormFields(this.value());

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DateFrom</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        /// <summary>
        ///    Validates the from date.
        /// </summary>
        /// <returns>
        ///    true if the from date is valid; otherwise, false.
        /// </returns>
        public boolean validate()
        {
            boolean result = super();

            if (result)
            {
                result = tsTimesheetTable.validatePeriodDate(this.dateValue(), true);
            }

            if (!result)
            {
                tsTimesheetTable.PeriodFrom              = dateNull();
                tsTimesheetTable.PeriodTo                = dateNull();
                tsTimesheetTable.ProjPeriodTimesheetWeek = 0;
                periodDateRange.text('');
                Ok.enabled(false);
            }

            return result;
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Updates the periodDateRange field, enables or disables the ok button.
        /// </summary>
        /// <returns>True if modified is successful.</returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.setDates();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>TSTimesheetTable</Name>
			<Table>TSTimesheetTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ApprovalStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsWorkflowToBeResubmitted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PeriodFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PeriodTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjPeriodId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjPeriodTimesheetWeek</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentHeader</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TimesheetNbr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_Worker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Resource</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoNotify>No</AutoNotify>
			<AutoSearch>No</AutoSearch>
			<DelayActive>No</DelayActive>
			<LinkType>Passive</LinkType>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<AllowFormCompanyChange xmlns="">Yes</AllowFormCompanyChange>
		<BackgroundColor xmlns="">WindowBackground</BackgroundColor>
		<Caption xmlns="">@SYS184049</Caption>
		<DataSource xmlns="">TSTimesheetTable</DataSource>
		<DialogSize xmlns="">Medium</DialogSize>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<MaximizeBox xmlns="">No</MaximizeBox>
		<MinimizeBox xmlns="">No</MinimizeBox>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<StatusBarStyle xmlns="">Simple</StatusBarStyle>
		<Style xmlns="">Dialog</Style>
		<TitleDataSource xmlns="">TSTimesheetTable</TitleDataSource>
		<Width xmlns="">0</Width>
		<WidthMode xmlns="">Column</WidthMode>
		<WindowResize xmlns="">Fixed</WindowResize>
		<WorkflowDataSource xmlns="">TSTimesheetTable</WorkflowDataSource>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormReferenceGroupControl">
						<Name>Resource</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<FilterExpression>%1</FilterExpression>
						<Type>ReferenceGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<HideIfEmpty>No</HideIfEmpty>
						<DataSource>TSTimesheetTable</DataSource>
						<ReferenceField>Resource</ReferenceField>
						<ReplacementFieldGroup>AutoLookup</ReplacementFieldGroup>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>DateFrom</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1207959549</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Date</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>TSDate</ExtendedDataType>
						<Label>@SYS80056</Label>
						<Mandatory>Yes</Mandatory>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>PeriodDateRange</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1342177277</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>TSTimesheetPeriod</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>CreateFromFavorites</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS333662</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>ChangeReason</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1744830461</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS86426</Label>
						<Mandatory>Yes</Mandatory>
						<MultiLine>Yes</MultiLine>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OK</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<Enabled>No</Enabled>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>