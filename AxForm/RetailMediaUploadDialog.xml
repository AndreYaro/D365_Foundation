<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailMediaUploadDialog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class RetailMediaUploadDialog extends FormRun
{
    RetailRichMediaTmp retailRichMediaTmpTable;
    RetailFileUploadMediaStorageResult fileUploadResult;
    RetailMediaMasterEntity callerForm;
    RecId callerRecId;
    RefRecId catalogRecId;
    RetailInternalOrgRefRecId internalOrgRecId;
    RefRecId productRecId;

}
]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// The Form run method.
    /// </summary>
    public void run()
    {
        super();
        this.initForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// The Form initialize method.
    /// </summary>
    public void init()
    {
        super();
        retailRichMediaTmpTable = element.args().record();
        callerForm = element.args().parmEnum();

        str paramValue = element.args().parm();
        var list = Global::strSplit(paramValue, ':');
        ListIterator iterator = new ListIterator(list);
        int counter = 1;

        while (iterator.more())
        {
            if (counter == 1)
            {
                callerRecId = str2Int64(iterator.value());
            }
            else if (counter == 2)
            {
                catalogRecId = str2Int64(iterator.value());
            }
            else if (counter == 3)
            {
                internalOrgRecId = str2Int64(iterator.value());
            }
            else if (counter == 4)
            {
                productRecId = str2Int64(iterator.value());
            }

            counter++;
            iterator.next();
        }

        this.showMediaUsage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showMediaUsage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Show the media usage label.
    /// </summary>
    private void showMediaUsage()
    {
        str usage = enum2Str(callerForm);
        MediaUse.text(usage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the Form.
    /// </summary>
    private void initForm()
    {
        RetailImageResource_ds.create();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save the media data into media gallery table and the media association data in the mediagalleryandMasterentity table.
    /// In the media gallery table, we persist the thumbnail of the image which is used in the gallery form(in the left Card list).
    /// </summary>
    private void saveData()
    {
        str description = retailImageResource.Description;
        str fileName = retailImageResource.FileName;
        str mediaUrl = retailImageResource.ResourceUrl;
        int sizeInKb = RetailImageResource.SizeInKB;
        int imageHeight = RetailImageResource.Height;
        int imageWidth = RetailImageResource.Width;
        int resourceId = RetailImageResource.ResourceId;

        ttsbegin;
        retailImageResource.delete();
        resourceId = RetailMediaHelper::processMediaUploadedFromEntityPages(fileName, mediaUrl, sizeInKb, imageHeight, imageWidth, description, callerForm,
                                callerRecId, catalogRecId, internalOrgRecId, productRecId);

        this.InsertNewRecord(resourceId, mediaUrl);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InsertNewRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// insert a new record in the TempTable.
    /// </summary>
    /// <param name = "resourceId">The Media resource Identifier.</param>
    /// <param name = "resourceUrl">The Image URL</param>
    private void InsertNewRecord(int resourceId, str resourceUrl)
    {
        // first check whether the Image already exist in the current Media page image grid records.
        select firstonly retailRichMediaTmpTable
           where retailRichMediaTmpTable.Url == resourceUrl;

        if (!retailRichMediaTmpTable) // since the image doesn't exists in the current Media page image grid records hence add it.
        {
            retailRichMediaTmpTable.clear();
            retailRichMediaTmpTable.initValue();
            retailRichMediaTmpTable.AltText =  '';
            retailRichMediaTmpTable.Url = resourceUrl;
            retailRichMediaTmpTable.ImageId = resourceId;
            retailRichMediaTmpTable.IsDefault = 0;
            retailRichMediaTmpTable.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showImageByUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the image based on the passed url.
    /// </summary>
    /// <param name = "url">The media url.</param>
    private void showImageByUrl(str url)
    {
        if (url != null && RetailMediaHelper::IsAbsoluteURL(url))
        {
            ImageControl.imageLocation(SysImageLocation::URL);
            ImageControl.normalImage(url);
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>RetailImageResource</Name>
				<Methods />
				<Fields>
					<Field>
						<DataField>ResourceUrl</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                int urlLength = strLen(RetailImageResource.ResourceUrl);

                // Removes the escape character "\n" from trailing of URL if it exists
                if (strFind(RetailImageResource.ResourceUrl, "\n", urlLength, 1))
                {
                    RetailImageResource.ResourceUrl = strDel(RetailImageResource.ResourceUrl, urlLength, 1);
                }

                super();

                if (RetailMediaHelper::isAbsoluteURL(RetailImageResource.ResourceUrl))
                {
                    //Create the Thumbnail and Custom images.
                    RetailMediaHelper::updateGalleryWithCustomerHostedImageDetails(RetailImageResource.ResourceUrl, RetailImageResource);
                    element.showImageByUrl(retailImageResource.ResourceUrl);
                }
                else
                {
                    //info("Incorrect URL, Please provide a correct URL");
                    RetailImageResource.Height = 0;
                    RetailImageResource.Width = 0;
                    RetailImageResource.SizeInKB = 0;
                    RetailImageResource.FileName = '';
                }

                RetailImageResource_DS.reread();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>CommandButtonOk</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (RetailImageResource.ResourceUrl)
            {
                element.saveData();
            }

            element.close();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>RetailImageResource</Name>
			<Table>RetailImageResource</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Height</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InUse</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsCatalog</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsCustomer</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsExternallyHosted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsPos</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsProduct</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsUsedAnywhere</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsWorker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceUrl</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SharedStorageId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SizeInKB</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SmallImageBlob</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SmallImageSharedStorageId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SmallImageUrl</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ThumbnailBlob</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ThumbnailSharedStorageId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ThumbnailUrl</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Width</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<StartPosition>Last</StartPosition>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@RetailMediaGalleryLabels:UploadImage</Caption>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ContentGroupControl</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ContentGroupHeader</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormIntegerControl">
								<Name>RetailImageResource_ResourceId</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Integer</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>ResourceId</DataField>
								<DataSource>RetailImageResource</DataSource>
								<Label>@RetailMediaGalleryLabels:ResourceId</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>RetailImageResource_Description</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>Description</DataField>
								<DataSource>RetailImageResource</DataSource>
								<Label>@RetailMediaGalleryLabels:Description</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>MediaUse</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@RetailMediaGalleryLabels:ImageUse</Label>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ContentGroupImage</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>RetailImageResource_ResourceUrl</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>ResourceUrl</DataField>
								<DataSource>RetailImageResource</DataSource>
								<Label>@RetailMediaGalleryLabels:LocationUrl</Label>
							</AxFormControl>
						</Controls>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Caption>Details</Caption>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ImageGroupControl</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>ImagePreview</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormImageControl">
						<Name>ImageControl</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ExtendedStyle>card_imageSquare</ExtendedStyle>
						<Type>Image</Type>
						<FormControlExtension
							i:nil="true" />
					</AxFormControl>
				</Controls>
				<Caption>@RetailMediaGalleryLabels:Image</Caption>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>CommitButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CommandButtonOk</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CommandButtonCancel</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>