<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BudgetBalances</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BudgetBalances extends FormRun
{
    BudgetTransactionLine   budgetTransactionLine;
    BudgetCalculateBalance  budgetCalculateBalance;
    [FormObservable]
    AmountMST               totalAmount;

    BudgetTmpBalance        budgetTmpBalanceCacheExpense;
    AmountMST               totalAmountExpense;
    BudgetTmpBalance        budgetTmpBalanceCacheRevenue;
    AmountMST               totalAmountRevenue;

    [FormObservable]
    ApportionmentAmountMST  totalApportionmentAmount;
    ApportionmentAmountMST  totalApportionmentExpense;
    ApportionmentAmountMST  totalApportionmentRevenue;

}
]]></Source>
			</Method>
			<Method>
				<Name>calculatePeriodBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates budget transaction amounts by fiscal period.
    /// </summary>
    /// <remarks>
    /// The method will cache the BudgetTmpBalance records for each budget type
    /// so that they only need to be calculated once.
    /// </remarks>
    public void calculatePeriodBalances()
    {
        BudgetTmpBalance budgetTmpBalanceLocal;

        if (budgetCalculateBalance.parmBudgetType() == BudgetType::Expense)
        {
            if (!budgetTmpBalanceCacheExpense)
            {
                // Not in cache yet; calculate the balances for each period.
                budgetTmpBalanceCacheExpense = budgetCalculateBalance.calculatePeriodBalances();

                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                {
                    totalApportionmentExpense = budgetCalculateBalance.parmAccumulatedApportionmentAmount();
                }
            }

            budgetTmpBalanceLocal = budgetTmpBalanceCacheExpense;

            select firstonly AccumlatedRevisedAmount from budgetTmpBalanceCacheExpense order by Period desc;
            totalAmount = budgetTmpBalanceCacheExpense.AccumlatedRevisedAmount;
            totalAmountExpense = totalAmount;

            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                totalApportionmentAmount = totalApportionmentExpense;
            }
        }
        else
        {
            if (!budgetTmpBalanceCacheRevenue)
            {
                budgetTmpBalanceCacheRevenue = budgetCalculateBalance.calculatePeriodBalances();

                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                {
                    totalApportionmentRevenue = budgetCalculateBalance.parmAccumulatedApportionmentAmount();
                }
            }

            budgetTmpBalanceLocal = budgetTmpBalanceCacheRevenue;

            select firstonly AccumlatedRevisedAmount from budgetTmpBalanceCacheRevenue order by Period desc;
            totalAmount = budgetTmpBalanceCacheRevenue.AccumlatedRevisedAmount;
            totalAmountRevenue = totalAmount;

            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                totalApportionmentAmount = totalApportionmentRevenue;
            }
        }

        budgetTmpBalance.linkPhysicalTableInstance(budgetTmpBalanceLocal);
        budgetTmpBalance_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the BudgetBalances form.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// The form was called without a valid table buffer.
    /// </exception>
    public void init()
    {
        switch (element.args().dataset())
        {
            case tablenum(BudgetTransactionLine):
                budgetTransactionLine = element.args().record() as BudgetTransactionLine;
                break;
            default:
                throw error("@SYS18626");
        }

        super();

        budgetCalculateBalance = new BudgetCalculateBalance();

        // Use the ledger's fiscal calendar.
        budgetCalculateBalance.parmFiscalCalendarRecId(Ledger::fiscalCalendar());

        budgetCalculateBalance.parmCalculateLedgerAmounts(NoYes::No);

        // Always filter budget amounts by budget type.
        budgetCalculateBalance.parmFilterByBudgetType(NoYes::Yes);

        // Always include submodels in the calculation of period balances.
        budgetCalculateBalance.parmIncludeSubModels(NoYes::Yes);

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            element.setApportionmentFields();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setApportionmentFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visiblity of apportionment fields on the form based on the <c>UseOnlyApportionment</c> checkbox in <c>BudgetParameters</c>.
    /// </summary>
    public void setApportionmentFields()
    {
        boolean isUseOnlyApportionment;

        isUseOnlyApportionment = BudgetControlConfiguration::findActiveByPrimaryLedger(Ledger::current()).UseApportionedAmount;
        apportionments.visible(isUseOnlyApportionment);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>BudgetTmpBalance</Name>
				<Methods>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        /// <summary>
        /// Calculates the period budget balances when the when the form is initialized
        /// or the budget transaction line source record is changed by the caller.
        /// </summary>
        public void linkActive()
        {
            Query query;
            FiscalCalendarYear fiscalCalendarYear;

            // Find the fiscal year that the budget transaction date falls into.
            fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(Ledger::fiscalCalendar(), budgetTransactionLine.Date);

            // Use the start and end dates of the fiscal year that the budget transaction line's date falls in.
            budgetCalculateBalance.parmStartDate(fiscalCalendarYear.StartDate);
            budgetCalculateBalance.parmEndDate(fiscalCalendarYear.EndDate);

            budgetCalculateBalance.parmBudgetModelId(budgetTransactionLine.getBudgetTransactionHeader().BudgetModelId);
            budgetCalculateBalance.parmBudgetType(budgetTransactionLine.BudgetType);

            DimensionHierarchyId accountStructureId = DimensionHierarchy::getAccountStructureFromDimensionCombination(budgetTransactionLine.LedgerDimension).RecId;

            // Set the values of the form controls.
            BudgetModel.text(budgetCalculateBalance.parmBudgetModelId());
            DimensionValue.text(LedgerDimensionFacade::getDisplayValueForLedgerDimension(budgetTransactionLine.LedgerDimension));
            DimensionName.text(BudgetPrimaryLedgerDimensionAttribute::getBudgetDimensionAttributeValueDisplayNames(
                Ledger::current(),
                accountStructureId,
                budgetTransactionLine.LedgerDimension));
            BudgetType.selection(budgetCalculateBalance.parmBudgetType());

            // Clear the cache amounts when the budget transaction line is changed.
            budgetTmpBalanceCacheExpense.clear();
            budgetTmpBalanceCacheRevenue.clear();

            query = new Query(querystr(BudgetCalculateBalance));
            BudgetTransactionManager::addDimensionCriteriaForLedgerDimension(query, budgetTransactionLine.LedgerDimension, query.dataSourceTable(tablenum(BudgetTransactionLine)).name());
            budgetCalculateBalance.parmQuery(query);

            // Calculate the balances and populate the datasource.
            element.calculatePeriodBalances();

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>percentageRevisedBudget</Name>
						<Source><![CDATA[
        /// <summary>
        /// Displays a percent of the period revised budget balance in relation
        /// to the overall revised budget amount.
        /// </summary>
        /// <param name="_budgetTmpBalance">
        /// The BudgetTmpBalance record that contains the budget amounts.
        /// </param>
        /// <returns>
        /// The percentage of the period revised budget amount divided by the total amount
        /// for the fiscal year.
        /// </returns>
        display Percent percentageRevisedBudget(BudgetTmpBalance _budgetTmpBalance)
        {
            return (totalAmount ? _budgetTmpBalance.RevisedAmount / totalAmount * 100 : 0);
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets the visibility of apportionment fields on form based on budget parameter selection of use only apportionment.
        /// </summary>
        /// <returns>
        /// default int returned from super() call.
        /// </returns>
        public int active()
        {
            int ret;

            ret = super();

            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                element.setApportionmentFields();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>percentageApportionment</Name>
						<Source><![CDATA[
        /// <summary>
        /// Displays the percentage of the apportionment budget amount in relation to the overall accumulated budget amount.
        /// </summary>
        /// <param name="_budgetTmpBalance">
        /// The BudgetTmpBalance record that contains the budget and actual amounts.
        /// </param>
        /// <returns>
        /// The percentage of the period apportionment budget amount divided by the total accumulated amount
        /// for the fiscal year.
        /// </returns>
        display ApportionmentAmountPercent percentageApportionment(BudgetTmpBalance _budgetTmpBalance)
        {
            boolean                 isUseOnlyApportionment = false;
            ApportionmentAmountMST  apportionmentAmountPer = 0.0;

            isUseOnlyApportionment  = BudgetControlConfiguration::findActiveByPrimaryLedger(Ledger::current()).UseApportionedAmount;

            if (isUseOnlyApportionment && (totalApportionmentAmount != 0))
            {
                apportionmentAmountPer = _budgetTmpBalance.ApportionmentAmount / totalApportionmentAmount * 100;
            }
            else
            {
                apportionmentAmountPer = 0.0;
            }

            return apportionmentAmountPer;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// Ensures that the query is ordered by period start date.
        /// </summary>
        public void executeQuery()
        {
            QueryBuildDataSource BudgetTmpBalance_QBDS = this.query().dataSourceTable(tableNum(BudgetTmpBalance));

            BudgetTmpBalance_QBDS.addOrderByField(fieldNum(BudgetTmpBalance, Period), SortOrder::Ascending);

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>BudgetType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            budgetCalculateBalance.parmBudgetType(budgetType.selection());
            element.calculatePeriodBalances();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetModel</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        /// Enables the 'Go to Main Table Form' option of the context menu for Budget Model field.
        /// </summary>
        public void jumpRef()
        {
            BudgetModel budgetModelLocal = BudgetModel::find(HeadingSub::Heading, this.valueStr());

            BudgetModel::jumpRefBudgetModel(budgetModelLocal, this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>BudgetTmpBalance</Name>
			<Table>BudgetTmpBalance</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccumlatedRevisedAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccumulatedApportionment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApportionmentAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FiscalCalendarPeriodRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PercentOfBudget</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Period</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreliminaryAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RevisedAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SumPreliminaryBudget</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseOnlyApportionment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Variance</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VariancePercent</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<BottomMargin xmlns="">0</BottomMargin>
		<BottomMarginMode xmlns="">Fixed</BottomMarginMode>
		<Caption xmlns="">@SYS4217</Caption>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<LeftMargin xmlns="">0</LeftMargin>
		<LeftMarginMode xmlns="">Fixed</LeftMarginMode>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<RightMargin xmlns="">0</RightMargin>
		<RightMarginMode xmlns="">Fixed</RightMarginMode>
		<SetCompany xmlns="">No</SetCompany>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<StatusBarStyle xmlns="">Simple</StatusBarStyle>
		<Style xmlns="">SimpleList</Style>
		<TitleDataSource xmlns="">BudgetTmpBalance</TitleDataSource>
		<TopMargin xmlns="">0</TopMargin>
		<TopMarginMode xmlns="">Fixed</TopMarginMode>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ApplicationBar</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Top</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilter</Name>
						<Visible>No</Visible>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Periods</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>DimensionValueName</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>DimensionValue</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Skip>Yes</Skip>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>DimensionDisplayValue</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>DimensionName</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Skip>Yes</Skip>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>DimensionDisplayValue</ExtendedDataType>
								<Label>@SYS92116</Label>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>AmountBudgetModel</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>BudgetType</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<EnumType>BudgetType</EnumType>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>BudgetModel</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Skip>Yes</Skip>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>BudgetModelId</ExtendedDataType>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<BottomMargin>11</BottomMargin>
				<BottomMarginMode>Fixed</BottomMarginMode>
				<LeftMargin>11</LeftMargin>
				<LeftMarginMode>Fixed</LeftMarginMode>
				<RightMargin>11</RightMargin>
				<RightMarginMode>Fixed</RightMarginMode>
				<TopMargin>11</TopMargin>
				<TopMarginMode>Fixed</TopMarginMode>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Periods</Name>
				<AllowEdit>No</AllowEdit>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>Period</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Date</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>Period</DataField>
						<DataSource>BudgetTmpBalance</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>OriginalAmount</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@FieldDescriptions_Budgeting:BudgetBalances_OriginalAmount</HelpText>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>OriginalAmount</DataField>
						<DataSource>BudgetTmpBalance</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>RevisedAmount</Name>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@FieldDescriptions_Budgeting:BudgetBalances_RevisedAmount</HelpText>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>RevisedAmount</DataField>
						<DataSource>BudgetTmpBalance</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>AccumlatedRevisedAmount</Name>
						<ElementPosition>2013265918</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@FieldDescriptions_Budgeting:BudgetBalances_AccumlatedRevisedAmount</HelpText>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>AccumlatedRevisedAmount</DataField>
						<DataSource>BudgetTmpBalance</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>Percent</Name>
						<ElementPosition>2080374782</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@FieldDescriptions_Budgeting:BudgetBalances_Percent</HelpText>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>percentageRevisedBudget</DataMethod>
						<DataSource>BudgetTmpBalance</DataSource>
						<Label>@SYS28504</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Apportionments</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2113929214</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>Apportionment</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_Budgeting:BudgetBalances_Apportionment</HelpText>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>ApportionmentAmount</DataField>
								<DataSource>BudgetTmpBalance</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>AccumulatedApportionment</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_Budgeting:BudgetBalances_AccumulatedApportionment</HelpText>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>AccumulatedApportionment</DataField>
								<DataSource>BudgetTmpBalance</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>ApportionmentPercent</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_Budgeting:BudgetBalances_ApportionmentPercent</HelpText>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>percentageApportionment</DataMethod>
								<DataSource>BudgetTmpBalance</DataSource>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Auto</ArrangeMethod>
						<BackgroundColor>WindowBackground</BackgroundColor>
					</AxFormControl>
				</Controls>
				<DataSource>BudgetTmpBalance</DataSource>
				<GridLinesStyle>Vertical</GridLinesStyle>
				<MultiSelect>No</MultiSelect>
				<ShowRowLabels>No</ShowRowLabels>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>