<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>UnitOfMeasureConversionEditOrCreate</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class UnitOfMeasureConversionEditOrCreate extends FormRun
{
    EcoResProductLookup             productLookup;
    // Only used for holding info on the product master when the form is in product variant mode.
    EcoResProduct                   product;
    // Conversion type between Standard / Interclass / Intraclass
    UnitOfMeasureConversionType     conversionType;
    QueryBuildRange                 conversionRange;
    // Whether the form is opened in Edit or New mode
    OpenMode                        formOpenMode;

}
]]></Source>
			</Method>
			<Method>
				<Name>updateCallers</Name>
				<Source><![CDATA[
    public void updateCallers()
    {
        xArgs args = this.args();

        if (args && args.caller() is FormRun)
        {
            FormRun callerFormRun = args.caller() as FormRun;

            Common recordToFind = UnitOfMeasureConversion_ds.cursor();

            Args callerFormArgs = callerFormRun.args();
            
            if (callerFormArgs)
            {
                callerFormArgs.lookupRecord(recordToFind);
                callerFormRun.dataSource().research();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormStateForFormulaLayout</Name>
				<Source><![CDATA[
    public void updateFormStateForFormulaLayout(UnitOfMeasureFomulaLayout _formulaLayout)
    {
        QuickFormulaPreviewGroup.visible(_formulaLayout == UnitOfMeasureFomulaLayout::Advanced);
        FormulaGroup.visible(_formulaLayout == UnitOfMeasureFomulaLayout::Advanced);
        SimpleFormulaGroup.visible(_formulaLayout != UnitOfMeasureFomulaLayout::Advanced);
        FormulaLayout.selection(_formulaLayout);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupGroupVisibilityWhenProductViewModeChanged</Name>
				<Source><![CDATA[
    private void setupGroupVisibilityWhenProductViewModeChanged()
    {
        boolean isViewModeProductvariant = this.isViewModeProductVariant();
        this.setProductGroupVisibility(!isViewModeProductvariant);
        this.setProductVariantGroupVisibility(isViewModeProductvariant);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearDataAfterProductViewModeChanged</Name>
				<Source><![CDATA[
    private void clearDataAfterProductViewModeChanged()
    {
        UnitOfMeasureConversion.Product = 0;
        productLookup = null;

        if (!this.isViewModeProductVariant())
        {
            UnitOfMeasureConversion.Product = product.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        xArgs args = this.args();

        if (args)
        {
            if (args.parmEnumType() == enumNum(UnitOfMeasureConversionType))
            {
                conversionType = args.parmEnum();
            }

            formOpenMode = args.openMode();
        }

        super();

        this.updateFormStateForFormulaLayout(UnitOfMeasureFomulaLayout::Basic);

        if (formOpenMode == OpenMode::Edit)
        {
            if (args.record() && args.record() is UnitOfMeasureConversion)
            {
                UnitOfMeasureConversion conversionRecord = args.record();

                if (conversionRange)
                {
                    conversionRange.value(queryValue(conversionRecord.RecId));
                }

                this.updateFormTitleCaption(conversionRecord);
                this.switchToAdvancedFormulaLayoutForComplexConversion(conversionRecord);
            }
        }

        this.updateProductReferenceVisibility(formOpenMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProductAndFromUnitReferences</Name>
				<Source><![CDATA[
    public void defaultProductAndFromUnitReferences()
    {
        if (formOpenMode == OpenMode::New)
        {
            xArgs args = this.args();

            if (args && args.caller() is UnitOfMeasureIConversion)
            {
                var callerConversion = args.caller() as UnitOfMeasureIConversion;

                UnitOfMeasure fromUnit = callerConversion.selectedFromUnit();

                if (fromUnit)
                {
                    UnitOfMeasureConversion.FromUnitOfMeasure = fromUnit.RecId;
                }
                 
                if (conversionType != UnitOfMeasureConversionType::Standard)
                {
                    product = callerConversion.selectedProduct();

                    if (product)
                    {
                        if (EcoResProductUnitConverter::isProductUnitConversionPerVariantEnabled())
                        {
                            UnitOfMeasureConversion.Product = product.RecId;
                            this.definedViewOfProductAndProductVariantGroups();
                        }
                        else if (!product.isProductMasterWithProductVariantConversionEnabled())
                        {
                            UnitOfMeasureConversion.Product = product.RecId;
                        }
                    }
                }

                element.switchToAdvancedFormulaLayoutForComplexConversion(UnitOfMeasureConversion);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>definedViewOfProductAndProductVariantGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// The form view depends on product type and product settings
    /// </summary>
    private void definedViewOfProductAndProductVariantGroups()
    {
        // Nothing to do if we don't have a product
        if(product == null) 
        { 
            return; 
        }

        // Disable the controls to select a different product, since the page we are showing is specific to a product.
        UnitOfMeasureConversionStandard_Product.enabled(false);
        UnitOfMeasureConversionStandard_Product_ProductVariant.enabled(false);
       
        if (!product.isDistinctProductVariant() && !product.isProductMasterWithProductVariantConversionEnabled())
        {
            // If it's not a variant and it doesn't have variant UOM enabled then we force the form to be in UOM product mode.
            ProductViewMode.selection(UnitOfMeasureConversionEditOrCreateFormMode::Product);
            this.setupGroupVisibilityWhenProductViewModeChanged();
            ProductViewMode.enabled(false);
        }
        else if (product.isDistinctProductVariant())
        {
            // If we have a variant selected then we find out the parent product to setup the form.
            var productVariant = product as EcoResDistinctProductVariant;
            var productMaster = EcoResProductmaster::find(productVariant.ProductMaster);
            product = productMaster;

            if (productMaster.isProductMasterWithProductVariantConversionEnabled())
            {
                // Make sure the product variant mode is selected
                ProductViewMode.selection(UnitOfMeasureConversionEditOrCreateFormMode::ProductVariant);
                this.setupGroupVisibilityWhenProductViewModeChanged();
                // disallow the user to change mode or product variant if we opened the form with a product variant already specified.
                ProductViewMode.enabled(false);
                ProductVariantGroup.enabled(false);
                this.setProductGroupVisibility(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProductGroupVisibility</Name>
				<Source><![CDATA[
    private void setProductGroupVisibility(boolean _visible)
    {
        ProductGroup.visible(_visible);
        UnitOfMeasureConversionStandard_Product.mandatory(_visible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProductVariantGroupVisibility</Name>
				<Source><![CDATA[
    private void setProductVariantGroupVisibility(boolean _visible)
    {
        ProductVariantGroup.visible(_visible);
        UnitOfMeasureConversionStandard_Product_ProductVariant.mandatory(_visible);
        UnitOfMeasureConversionStandard_ProductVariant_VariantMode.mandatory(_visible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormTitleCaption</Name>
				<Source><![CDATA[
    public void updateFormTitleCaption(UnitOfMeasureConversion _conversionRecord)
    {
        if (conversionType != UnitOfMeasureConversionType::Standard)
        {
            product = EcoResProduct::find(_conversionRecord.Product);

            this.design().caption(strfmt("@SCM:UnitOfMeasureConversionEditWithProductPlaceholder", product.productNumber()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchToAdvancedFormulaLayoutForComplexConversion</Name>
				<Source><![CDATA[
    public void switchToAdvancedFormulaLayoutForComplexConversion(UnitOfMeasureConversion _conversionRecord)
    {
        boolean isConversionForTemperatureUnits = this.isConversionForTemperatureUnits(_conversionRecord);
        if (isConversionForTemperatureUnits || this.advancedLayoutFieldsSpecified(_conversionRecord))
        {
            element.updateFormStateForFormulaLayout(UnitOfMeasureFomulaLayout::Advanced);
        }
        this.showTemperatureOffsetsConditional(isConversionForTemperatureUnits);
    }

]]></Source>
			</Method>
			<Method>
				<Name>advancedLayoutFieldsSpecified</Name>
				<Source><![CDATA[
    private boolean advancedLayoutFieldsSpecified(UnitOfMeasureConversion _conversionRecord)
    {
        return _conversionRecord.Numerator != 1 || _conversionRecord.Denominator != 1 || _conversionRecord.InnerOffset != 0 || _conversionRecord.OuterOffset != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConversionForTemperatureUnits</Name>
				<Source><![CDATA[
    private boolean isConversionForTemperatureUnits(UnitOfMeasureConversion _conversionRecord)
    {
        // Temperature conversions are only applicable for standard conversions
        // If either Inner or Outer offset is set, it can only be on Temperatures, so return true
        // Otherwise check the type of the corresponding units, and if either of them is of class Temperature, return true
        return conversionType == UnitOfMeasureConversionType::Standard
            && (_conversionRecord.InnerOffset != 0 || _conversionRecord.OuterOffset != 0
                || UnitOfMeasure::isUnitOfClass(_conversionRecord.FromUnitOfMeasure, UnitOfMeasureClass::Temperature, true)
                || UnitOfMeasure::isUnitOfClass(_conversionRecord.ToUnitOfMeasure, UnitOfMeasureClass::Temperature, true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProductReferenceVisibility</Name>
				<Source><![CDATA[
    public void updateProductReferenceVisibility(OpenMode _formOpenMode)
    {
        if (conversionType == UnitOfMeasureConversionType::Standard || _formOpenMode == OpenMode::Edit)
        {
            ProductViewMode.visible(false);
            this.setProductGroupVisibility(false);
            this.setProductVariantGroupVisibility(false);
        }
        else
        {
            
            if (!EcoResProductUnitConverter::isProductUnitConversionPerVariantEnabled())
            {
                ProductViewMode.visible(false);
                this.setProductVariantGroupVisibility(false);
            }
            else
            {
                this.setupGroupVisibilityWhenProductViewModeChanged();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceUnitOfMeasure</Name>
				<Source><![CDATA[
    public Common lookupReferenceUnitOfMeasure(FormReferenceControl _formReferenceControl, UnitOfMeasureRecId _relatedUnitOfMeasureRecId)
    {
        Common ret;

        if (!_relatedUnitOfMeasureRecId)
        {
            ret = UnitOfMeasureLookup::lookupReference(_formReferenceControl, false);
        }
        else
        {
            ret = UnitOfMeasureLookup::lookupReferenceForUnitOfMeasureClass(
                _formReferenceControl,
                UnitOfMeasure::find(_relatedUnitOfMeasureRecId).UnitOfMeasureClass,
                false);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isViewModeProductVariant</Name>
				<Source><![CDATA[
    private boolean isViewModeProductVariant()
    {
        UnitOfMeasureConversionEditOrCreateFormMode selectedValue;
        selectedValue = str2Enum(selectedValue, ProductViewMode.valueStr());
        return selectedValue == UnitOfMeasureConversionEditOrCreateFormMode::ProductVariant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productLookup</Name>
				<Source><![CDATA[
    public EcoResProductLookup productLookup()
    {
        if (!productLookup)
        {
            if (!EcoResProductUnitConverter::isProductUnitConversionPerVariantEnabled())
            {
                if (product && product.isProductMasterWithProductVariantConversionEnabled())
                {
                    productLookup = EcoResProductLookup::newIncludeProductMasterVariantsOnly(product.RecId);
                }
                if (!productLookup)
                {
                    productLookup = EcoResProductLookup::newExcludeDistinctProductVariants();
                }
            }
            else
            {
                if(product && this.isViewModeProductVariant())
                {
                    productLookup = EcoResProductLookup::newIncludeProductMasterVariantsOnly(product.RecId);
                }
                else
                {
                    productLookup = EcoResProductLookup::newExcludeDistinctProductVariants();
                }
            }
        }

        return productLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTemperatureOffsetsConditional</Name>
				<Source><![CDATA[
    private void showTemperatureOffsetsConditional(boolean _showTemperatureFields)
    {
        if (_showTemperatureFields)
        {
            conversionStandardSeperator3.text(') * (');
        }
        else
        {
            conversionStandardSeperator3.text(') *');
        }

        conversionStandardSeparator4.visible(_showTemperatureFields);
        conversionStandard_InnerOffset.visible(_showTemperatureFields);
        conversionStandardSeparator5.visible(_showTemperatureFields);
        conversionStandard_OuterOffset.visible(_showTemperatureFields);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>UnitOfMeasureConversion</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            conversionRange = this.queryBuildDataSource().addRange(fieldNum(UnitOfMeasureConversion, RecId));
            conversionRange.status(RangeStatus::Hidden);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;

            ret = super();

            if (conversionType == UnitOfMeasureConversionType::Intraclass)
            {
                ret = ret && UnitOfMeasureConversion.validateIsIntraclassConversion();
            }
            else if (conversionType == UnitOfMeasureConversionType::Interclass)
            {
                ret = ret && UnitOfMeasureConversion.validateIsInterclassConversion();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            super();

            element.defaultProductAndFromUnitReferences();
        }

]]></Source>
					</Method>
					<Method>
						<Name>productMaster</Name>
						<Source><![CDATA[
        edit EcoResProductNumber productMaster(boolean _set, EcoResProductNumber _productNumber)
        {
            if(_set)
            {
                product = EcoResProduct::findByProductNumber(_productNumber);
            }
            return product.productNumber();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>FromUnitOfMeasure</DataField>
						<Methods>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                if (conversionType == UnitOfMeasureConversionType::Interclass)
                {
                    return super(_formReferenceControl);
                }

                return element.lookupReferenceUnitOfMeasure(_formReferenceControl, UnitOfMeasureConversion.ToUnitOfMeasure);
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.switchToAdvancedFormulaLayoutForComplexConversion(UnitOfMeasureConversion);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Product</DataField>
						<Methods>
							<Method>
								<Name>resolveReference</Name>
								<Source><![CDATA[
            public Common resolveReference(FormReferenceControl _formReferenceControl)
            {
                return element.productLookup().resolveReference(_formReferenceControl);
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                return element.productLookup().performLookup(_formReferenceControl);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ToUnitOfMeasure</DataField>
						<Methods>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                if (conversionType == UnitOfMeasureConversionType::Interclass)
                {
                    return super(_formReferenceControl);
                }

                return element.lookupReferenceUnitOfMeasure(_formReferenceControl, UnitOfMeasureConversion.FromUnitOfMeasure);
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.switchToAdvancedFormulaLayoutForComplexConversion(UnitOfMeasureConversion);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>ProductViewMode</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
    
            if(ret)
            {
                element.setupGroupVisibilityWhenProductViewModeChanged();
                element.clearDataAfterProductViewModeChanged();
            }
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UnitOfMeasureConversionStandard_Product_ProductVariant</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(EcoResProduct), this);
            sysTableLookup.addLookupField(fieldNum(EcoResProduct, DisplayProductNumber));
            sysTableLookup.addLookupField(fieldNum(EcoResProduct, SearchName));

            EcoResProductLookup ecoResProductLookup = EcoResProductLookup::newIncludeProductMasterWithUnitOfMeasureConversionsEnabled();
            Query query = ecoResProductLookup.lookupQuery();
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            if (ret)
            {
                UnitOfMeasureConversion.Product = 0;
                productLookup = null;
                UnitOfMeasureConversionStandard_ProductVariant_VariantMode.setFocus();
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FormulaLayout</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        public int selectionChange()
        {
            int ret;

            ret = super();

            UnitOfMeasureFomulaLayout newFormulaLayout = this.selection();

            if (newFormulaLayout == UnitOfMeasureFomulaLayout::Basic)
            {
                boolean advancedLayoutFieldsHaveValue = element.advancedLayoutFieldsSpecified(UnitOfMeasureConversion);
                boolean isConversionForTemperatureUnits = element.isConversionForTemperatureUnits(UnitOfMeasureConversion);

                if (advancedLayoutFieldsHaveValue || isConversionForTemperatureUnits)
                {
                    if (isConversionForTemperatureUnits)
                    {
                        warning("@SCM:UnitOfMeasureFormulaLayoutSimpleNotSupportedForTemperature");
                        newFormulaLayout = UnitOfMeasureFomulaLayout::Advanced;
                    }
                    else if (Box::yesNo("@SCM:UnitOfMeasureFormulaLayoutSwitchConfirmation", DialogButton::No) == DialogButton::Yes)
                    {
                        UnitOfMeasureConversion.initValue();
                    }
                    else
                    {
                        newFormulaLayout = UnitOfMeasureFomulaLayout::Advanced;
                    }
                }
            }

            element.updateFormStateForFormulaLayout(newFormulaLayout);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OKButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            element.updateCallers();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>UnitOfMeasureConversion</Name>
			<Table>UnitOfMeasureConversion</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Denominator</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Factor</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FromUnitOfMeasure</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InnerOffset</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Numerator</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OuterOffset</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Product</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Rounding</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ToUnitOfMeasure</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<Index>ConversionIdx</Index>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS190817</Caption>
		<Pattern xmlns="">DropDialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">DropDialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Content</Name>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ViewModeGroup</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>ProductViewMode</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ComboBox</Type>
								<FormControlExtension
									i:nil="true" />
								<EnumType>UnitOfMeasureConversionEditOrCreateFormMode</EnumType>
								<Label>@SCM:UnitOfMeasureCreateConversionFor</Label>
								<Items />
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ProductGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<PatternVersion>UX7 1.0</PatternVersion>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>UnitOfMeasureConversionStandard_Product</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<FilterExpression>%1</FilterExpression>
								<Type>ReferenceGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<DataSource>UnitOfMeasureConversion</DataSource>
								<Mandatory>Yes</Mandatory>
								<ReferenceField>Product</ReferenceField>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<ColumnsMode>Fill</ColumnsMode>
						<DataSource>UnitOfMeasureConversion</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ProductVariantGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<PatternVersion>UX7 1.0</PatternVersion>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>UnitOfMeasureConversionStandard_Product_ProductVariant</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>productMaster</DataMethod>
								<DataSource>UnitOfMeasureConversion</DataSource>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>UnitOfMeasureConversionStandard_ProductVariant_VariantMode</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<FilterExpression>%1</FilterExpression>
								<Type>ReferenceGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<DataSource>UnitOfMeasureConversion</DataSource>
								<Label>Product Variant</Label>
								<Mandatory>Yes</Mandatory>
								<ReferenceField>Product</ReferenceField>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<ColumnsMode>Fill</ColumnsMode>
						<DataSource>UnitOfMeasureConversion</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>QuickFormulaPreviewGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<PatternVersion>UX7 1.0</PatternVersion>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ConversionStandardQuickFormula</Name>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displayQuickFormulaWithLocalSeparators</DataMethod>
								<DataSource>UnitOfMeasureConversion</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<DataSource>UnitOfMeasureConversion</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>FormulaGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>ConversionStandard_Factor</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>Factor</DataField>
								<DataSource>UnitOfMeasureConversion</DataSource>
								<DisplayLength>15</DisplayLength>
								<DisplayLengthMode>Fixed</DisplayLengthMode>
								<NoOfDecimals>-1</NoOfDecimals>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>ConversionStandardSeparator1</Name>
								<ElementPosition>1879048190</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>StaticText</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>* (</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormIntegerControl">
								<Name>ConversionStandard_Numerator</Name>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Integer</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>Numerator</DataField>
								<DataSource>UnitOfMeasureConversion</DataSource>
								<DisplayLength>7</DisplayLength>
								<DisplayLengthMode>Fixed</DisplayLengthMode>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>ConversionStandardSeparator2</Name>
								<ElementPosition>1879048190</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>StaticText</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>/</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormIntegerControl">
								<Name>ConversionStandard_Denominator</Name>
								<ElementPosition>2080374782</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Integer</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>Denominator</DataField>
								<DataSource>UnitOfMeasureConversion</DataSource>
								<DisplayLength>7</DisplayLength>
								<DisplayLengthMode>Fixed</DisplayLengthMode>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>ConversionStandardSeperator3</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1879048190</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>StaticText</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>) *</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>ConversionStandard_FromUnitOfMeasure</Name>
								<ElementPosition>2126512126</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ReferenceGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ConversionStandard_FromUnitOfMeasure_Symbol</Name>
										<DataRelationPath>FromUnitOfMeasure</DataRelationPath>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
								</Controls>
								<DataSource>UnitOfMeasureConversion</DataSource>
								<ReferenceField>FromUnitOfMeasure</ReferenceField>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>ConversionStandardSeparator4</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1879048190</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>StaticText</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>+</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>ConversionStandard_InnerOffset</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2143289342</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<DataField>InnerOffset</DataField>
								<DataSource>UnitOfMeasureConversion</DataSource>
								<DisplayLength>15</DisplayLength>
								<DisplayLengthMode>Fixed</DisplayLengthMode>
								<NoOfDecimals>-1</NoOfDecimals>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>ConversionStandardSeparator5</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1879048190</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>StaticText</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>) +</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>ConversionStandard_OuterOffset</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2146435070</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<DataField>OuterOffset</DataField>
								<DataSource>UnitOfMeasureConversion</DataSource>
								<DisplayLength>15</DisplayLength>
								<DisplayLengthMode>Fixed</DisplayLengthMode>
								<NoOfDecimals>-1</NoOfDecimals>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>ConversionStandardSeparator6</Name>
								<ElementPosition>1879048190</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>StaticText</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>=</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>ConversionStandard_ToUnitOfMeasure</Name>
								<ElementPosition>2147155966</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ReferenceGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ConversionStandard_ToUnitOfMeasure_Symbol</Name>
										<DataRelationPath>ToUnitOfMeasure</DataRelationPath>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
								</Controls>
								<DataSource>UnitOfMeasureConversion</DataSource>
								<ReferenceField>ToUnitOfMeasure</ReferenceField>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<DataSource>UnitOfMeasureConversion</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>SimpleFormulaGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormIntegerControl">
								<Name>UnitOfMeasureConversionStandard_StaticOne</Name>
								<AllowEdit>No</AllowEdit>
								<Type>Integer</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS5437</Label>
								<ShowLabel>No</ShowLabel>
								<Value>1</Value>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>UnitOfMeasureConversionStandard_FromUnitOfMeasure</Name>
								<Type>ReferenceGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<DataSource>UnitOfMeasureConversion</DataSource>
								<ReferenceField>FromUnitOfMeasure</ReferenceField>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>ConversionStandardSeparatorForSimpleFormula</Name>
								<ElementPosition>1879048190</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>StaticText</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>=</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>UnitOfMeasureConversionStandard_Factor</Name>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>Factor</DataField>
								<DataSource>UnitOfMeasureConversion</DataSource>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>UnitOfMeasureConversionStandard_ToUnitOfMeasure</Name>
								<Type>ReferenceGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<DataSource>UnitOfMeasureConversion</DataSource>
								<ReferenceField>ToUnitOfMeasure</ReferenceField>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<DataSource>UnitOfMeasureConversion</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>RoundingGroup</Name>
						<PatternVersion>UX7 1.0</PatternVersion>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>ConversionStandard_Rounding</Name>
								<ElementPosition>2147352574</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>Rounding</DataField>
								<DataSource>UnitOfMeasureConversion</DataSource>
								<DisplayLength>8</DisplayLength>
								<DisplayLengthMode>Fixed</DisplayLengthMode>
								<Items />
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<DataSource>UnitOfMeasureConversion</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>FormulaLayoutGroup</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>FormulaLayout</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ComboBox</Type>
								<FormControlExtension
									i:nil="true" />
								<EnumType>UnitOfMeasureFomulaLayout</EnumType>
								<Items />
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<DataSource>UnitOfMeasureConversion</DataSource>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<DataSource>UnitOfMeasureConversion</DataSource>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>