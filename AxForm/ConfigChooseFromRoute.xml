<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ConfigChooseFromRoute</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public final class ConfigChooseFromRoute extends FormRun
{
    FieldId                                 fieldId;
    ItemId                                  routeItemId;
    EcoResItemConfigurationName             routeConfigId;
    Integer                                 level;
    Integer                                 levelGroupNum;
    Integer                                 routeItemNumOf;
    Set                                     configs;                // Set of possible configs. Shown in grid to the right
    ConfigValues                            configValues;
    ConfigChooseFromRouteTable              chooseFromRoute;
    ConfigChooseFromGroup                   curChooseFromGroup;
    EcoResTmpProductDimensionValueFilter    tmpProductDimensionValueFilter;

}
]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    boolean canClose()
    {
        boolean ret;

        ret = super();
        ret = ret && chooseFromRoute.canClose(this) ;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConfigActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// This function is just added to confirm with the caller class requirements.
    /// </summary>
    void setConfigActive()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>chosenConfig</Name>
				<Source><![CDATA[
    EcoResItemConfigurationName chosenConfig()
    {
        return routeConfigId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editItemBOMid</Name>
				<Source><![CDATA[
    edit ItemBOMId editItemBOMid(
        boolean     set,
        ItemBOMId   itemBOMId)
    {
        if (! chooseFromRoute)
        {
            return '';
        }

        if (set)
        {
            chooseFromRoute.lookup().initParmFirstItemBOMId(itemBOMId);
            element.reset();
            chooseFromRoute.hierarchyChoose().scan(chooseFromRoute.lookup().parmFirstItemId(), chooseFromRoute.lookup().parmFirstItemBOMId());
            element.fillTable();
        }

        return chooseFromRoute.lookup().parmFirstItemBOMId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editVersDate</Name>
				<Source><![CDATA[
    edit TransDate editVersDate(
        boolean     set,
        TransDate   versDate)
    {
        if (! chooseFromRoute)
        {
            return dateNull();
        }

        if (set)
        {
            chooseFromRoute.lookup().initParmVersDate(versDate);
            element.reset();
            chooseFromRoute.hierarchyChoose().scan(chooseFromRoute.lookup().parmFirstItemId(), chooseFromRoute.lookup().parmFirstItemBOMId());
            element.fillTable();
        }

        return chooseFromRoute.hierarchyChoose().parmVersDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editVersQty</Name>
				<Source><![CDATA[
    edit FromQty editVersQty(
        boolean     set,
        FromQty     fromQty)
    {
        if (set)
        {
            chooseFromRoute.lookup().initParmVersQty(fromQty);
            element.reset();
            chooseFromRoute.hierarchyChoose().scan(chooseFromRoute.lookup().parmFirstItemId(), chooseFromRoute.lookup().parmFirstItemBOMId());
            element.fillTable();
        }

        return chooseFromRoute.hierarchyChoose().parmVersQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTable</Name>
				<Source><![CDATA[
    void fillTable()
    {
        ConfigHierarchyChoose       choose = chooseFromRoute.hierarchyChoose();
        ConfigGroupId               parentGroupId;
        Integer                     rows;
        Counter                     curRow;
        ConfigValues                values  = chooseFromRoute.tmpSave().loadChoosenValues(routeItemNumOf,true);
        Counter                     configI;
        container                   c;
        ConfigGroup                 configGrp;
        BOMConfigRoute              configRoute;
        EcoResItemConfigurationName configId;
        FormTableCell               cell;
        Integer                     itemnum;
        Integer                     itemLevel,itemGroupNum;
        TmpConfigChooseFromRoute    tmpConfigChooseFromRouteLocal;
        boolean                     isSetCurChooseFromGroup=false;

        parentGroupId   = choose.numGroup2GroupId(routeItemNumOf);
        rows            = choose.levelGroupNumGroup(level,levelGroupNum);

        Integer selectedGroupNumber = this.presGroupNum();

        for (curRow=1; curRow<=rows; curRow++)
        {
            tmpConfigChooseFromRouteLocal.clear();
            tmpConfigChooseFromRouteLocal.GroupId             = choose.levelGroupNum2GroupId(level,levelGroupNum,curRow);
            tmpConfigChooseFromRouteLocal.GroupNumber         = choose.levelGroupNum2NumGroup(level,levelGroupNum,curRow);

            configGrp           = choose.numGroup2Group(tmpConfigChooseFromRouteLocal.GroupNumber);
            configRoute         = choose.numGroup2Route(tmpConfigChooseFromRouteLocal.GroupNumber);

            tmpConfigChooseFromRouteLocal.GroupName = configRoute
                ? configRoute.name()
                : configGrp.Name
                    ? configGrp.Name
                    : configGrp.ConfigGroupId;

            for (configI=1; configI<=conLen(values); configI++)
            {
                c = conPeek(values,configI);
                if (ConfigChoice::con2GroupNum(c) == tmpConfigChooseFromRouteLocal.GroupNumber)
                {
                    tmpConfigChooseFromRouteLocal.ItemId = ConfigChoice::con2ItemId(c);

                    configId    = ConfigChoice::con2ConfigId(c);
                    configId    = chooseFromRoute.tmpSave().convConfigId(configId);
                    tmpConfigChooseFromRouteLocal.ConfigId = configId;
                    break;
                }
            }

            if (!tmpConfigChooseFromRouteLocal.ItemId)
            {
                // When exactly one item for an empty group
                [itemLevel,itemGroupNum] = choose.numGroup2Derived(tmpConfigChooseFromRouteLocal.GroupNumber);
                if (itemLevel && itemGroupNum && choose.levelGroupCountItem(itemLevel,itemGroupNum) == 1)
                {
                    itemnum = choose.levelGroupNum2NumItem(itemLevel,itemGroupNum,1);
                    if (itemnum)
                    {
                        tmpConfigChooseFromRouteLocal.ItemId = choose.numItem2ItemId(itemnum);
                        isSetCurChooseFromGroup = true;
                    }
                }
            }

            tmpConfigChooseFromRouteLocal.insert();

            if (isSetCurChooseFromGroup)
            {
                this.setCurrentChooseFromGroupFromGroupNumberAndItemId(true, tmpConfigChooseFromRouteLocal.GroupNumber, tmpConfigChooseFromRouteLocal.ItemId);

                curChooseFromGroup.save(false);
                isSetCurChooseFromGroup = false;

            }
        }

        tmpConfigChooseFromRoute.setTmpData(tmpConfigChooseFromRouteLocal);
        tmpConfigChooseFromRoute_ds.research(true);
        tmpConfigChooseFromRoute_ds.positionToRecordByValue(fieldnum(TmpConfigChooseFromRoute, GroupNumber), int2Str(selectedGroupNumber));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTemporaryConfigurationFilterDataSourceForProductDimensionValues</Name>
				<Source><![CDATA[
    private void fillTemporaryConfigurationFilterDataSourceForProductDimensionValues(Set _dimValues)
    {
        if ( _dimValues)
        {
            // Cleans up the temp table from a previous query execution
            delete_from tmpProductDimensionValueFilter;

            // Fills the table with values from the set
            RecordInsertList tmpProductDimensionValueFiltersInsertList = 
                new RecordInsertList(tableNum(EcoResTmpProductDimensionValueFilter), true, true, true, true, true, tmpProductDimensionValueFilter);
            SetEnumerator se = _dimValues.getEnumerator();
            while (se.moveNext())
            {
                tmpProductDimensionValueFilter.clear();
                tmpProductDimensionValueFilter.Name = se.current();
                tmpProductDimensionValueFiltersInsertList.add(tmpProductDimensionValueFilter);
            }
            tmpProductDimensionValueFiltersInsertList.insertDatabase();

            // Links the datasource to the temporary table instance declared in this class
            EcoResTmpProductDimensionValueFilter.linkPhysicalTableInstance(tmpProductDimensionValueFilter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        super();

        if (classIdGet(element.args().caller()) != classNum(ConfigChooseFromRouteTable))
        {
            throw error(strFmt("@SYS22456",element.name(),classStr(ConfigChooseFromRouteTable)));
        }

        chooseFromRoute         = element.args().caller();
        routeItemNumOf          = chooseFromRoute.itemNum();

        this.reset();

        if (chooseFromRoute.itemNum() != 1)
        {
            subBOMgroup.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGroupChooseable</Name>
				<Source><![CDATA[
    boolean isGroupChooseable()
    {
        if (! element.presGroupNum())
        {
            return false;
        }

        return ! chooseFromRoute.tmpSave().isItemIncluded(
                    element.presGroupNum(),
                    element.presItemId(),
                    element.presConfigId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>presConfigId</Name>
				<Source><![CDATA[
    EcoResItemConfigurationName presConfigId()
    {
        return tmpConfigChooseFromRoute.ConfigId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>presGroupNum</Name>
				<Source><![CDATA[
    Integer presGroupNum()
    {
        return tmpConfigChooseFromRoute.GroupNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>presItemId</Name>
				<Source><![CDATA[
    ItemId presItemId()
    {
        return tmpConfigChooseFromRoute.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    void reset()
    {
        [level,levelGroupNum]   = chooseFromRoute.hierarchyChoose().numItem2Derived(routeItemNumOf);
        routeItemId             = chooseFromRoute.hierarchyChoose().numItem2ItemId(routeItemNumOf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        element.fillTable();

        super();

        element.design().caption(strFmt("@SYS24799",routeItemId,chooseFromRoute.level() div 2));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurChooseFromGroup</Name>
				<Source><![CDATA[
    void setCurChooseFromGroup(boolean forced)
    {
        this.setCurrentChooseFromGroupFromGroupNumberAndItemId(forced, this.presGroupNum(), this.presItemId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrentChooseFromGroupFromGroupNumberAndItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the current <c>ConfigChooseFromGroup</c> record based on the specified group number and item ID.
    /// </summary>
    /// <param name = "_forced">true if the current <c>ConfigChooseFromGroup</c> record should be set regardless of 
    /// whether it's already set or the current values for group number and item ID are identical; otherwise, false</param>
    /// <param name = "_groupNum">The group number to set</param>
    /// <param name = "_itemId">The item ID to set</param>
    public void setCurrentChooseFromGroupFromGroupNumberAndItemId(
        boolean _forced,
        Integer _groupNum,
        ItemId  _itemId)
    {
        if (_forced                                                      ||
            ! curChooseFromGroup                                        ||
            _groupNum     != curChooseFromGroup.groupNum()    ||
            _itemId       != curChooseFromGroup.itemId()
           )
            curChooseFromGroup = new ConfigChooseFromGroup(
                chooseFromRoute.lookup(),
                chooseFromRoute.hierarchyChoose(),
                chooseFromRoute.tmpSave(),
                TmpConfigChooseFromRoute_ItemId,
                chooseFromRoute,
                _groupNum,
                TmpConfigChooseFromRoute_ConfigId,
                _itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    void updateNow()
    {
        this.fillTable();
        ecoResConfiguration_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addExistsJoinWithTemporaryConfigurationValueFilterTable</Name>
				<Source><![CDATA[
    private void addExistsJoinWithTemporaryConfigurationValueFilterTable(Query _query)
    {
        QueryBuildDataSource configurationQbds = _query.dataSourceTable(tableNum(EcoResConfiguration));
        QueryBuildDataSource dimValuesQbds = configurationQbds.addDataSource(tableNum(EcoResTmpProductDimensionValueFilter));
        dimValuesQbds.addLink(fieldNum(EcoResConfiguration, Name), fieldNum(EcoResTmpProductDimensionValueFilter, Name));
        dimValuesQbds.joinMode(JoinMode::ExistsJoin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableTemporaryConfigurationValueFilterDatasource</Name>
				<Source><![CDATA[
    private void disableTemporaryConfigurationValueFilterDatasource(Query _query)
    {
        _query.dataSourceTable(tableNum(EcoResTmpProductDimensionValueFilter)).enabled(false);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>EcoResConfiguration</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        void executeQuery()
        {
            boolean                     found;
            container                   configsCon;

            configValues    = conNull();
            found           = false;

            Query configurationQuery = EcoResProductVariantDimValue::newProductVariantDim_ConfigId().getDimValuesQuery(
                    InventTable::itemProduct(routeItemId), null);

            element.addExistsJoinWithTemporaryConfigurationValueFilterTable(configurationQuery);

            if (routeItemId)
            {
                configValues    =   chooseFromRoute.tmpSave().loadChoosenValues(routeItemNumOf);
                configsCon      =   ConfigChoice::findConfig(routeItemId,configValues);

                if (configsCon)
                {
                    configs     =   Set::create(configsCon);
                }

                if (! configs)
                {
                    configs     =   new Set(Types::String);
                }

                if (! configs.elements() && conLen(configValues))
                {
                    configs.add(naStr());
                }
                else
                {
                    found  = true;
                }

                if (configs.elements())
                {
                    element.fillTemporaryConfigurationFilterDataSourceForProductDimensionValues(configs);
                }
                else
                {
                    // Show all configurations if there is no configuration value filter
                    element.disableTemporaryConfigurationValueFilterDatasource(configurationQuery);
                }
            }
            else
            {
                // In this case we do not need the temporary datasource as the query should show all configurations
                element.disableTemporaryConfigurationValueFilterDatasource(configurationQuery);
            }

            ecoResConfiguration_ds.query(configurationQuery);

            super();

            if (! found)
            {
                configs   = null;
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TmpConfigChooseFromRoute</Name>
				<Methods />
				<Fields>
					<Field>
						<DataField>ConfigId</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean     ret;
                ret     =   super();
                ret     =   ret && EcoResProductVariantDimValue::newProductVariantDim_ConfigId().checkExist(
                    InventTable::itemProduct(element.presItemid()), tmpConfigChooseFromRoute.ConfigId);

                return ret;
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                ConfigChooseDerived     chooseDerived;

                super();

                element.setCurChooseFromGroup(true);
                if (curChooseFromGroup.hasItemDerived())
                {
                    chooseDerived = curChooseFromGroup.derived();
                    chooseDerived.configId(tmpConfigChooseFromRoute.ConfigId);
                    chooseDerived.save();
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ItemId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.setCurChooseFromGroup(false);
                curChooseFromGroup.save();
            }

]]></Source>
							</Method>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;
                ConfigGroupId       groupId     = tmpConfigChooseFromRoute.GroupId;
                BOMId               bomNum      = chooseFromRoute.hierarchyChoose().numItem2BOMId(routeItemNumOf);

                ret = super();

                if (ret && ! groupId)
                {
                    ret = true;
                }

                if (ret && ! BOM::checkExistConfigValue(bomNum, groupId, tmpConfigChooseFromRoute.ItemId))
                {
                    ret = false;
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>SetupVersDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            setupItemBOMid.update();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SetupItemBOMid</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            InventTable::lookupBOMId(this, routeItemId, InventDim::findOrCreateBlank());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TmpConfigChooseFromRoute_ItemId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>enter</Name>
						<Source><![CDATA[
        public void enter()
        {
            super();
            this.allowEdit(element.isGroupChooseable());
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (!this.allowEdit())
            {
                return;
            }

            element.setCurChooseFromGroup(true);
            curChooseFromGroup.dialog();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TmpConfigChooseFromRoute_ConfigId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            ConfigChooseDerived chooseDerived;

            element.setCurChooseFromGroup(true);
            if (curChooseFromGroup.hasItemDerived())
            {
                chooseDerived = curChooseFromGroup.derived();
                chooseDerived.dialog();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OK</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            if (EcoResConfiguration.Name != '')
            {
                routeConfigId = EcoResConfiguration.Name;
            }
            else
            {
                if (! configValues)
                {
                    throw error("@SYS24922");
                }

                InventTable             inventTable = InventTable::find(routeItemId);
                int configurationCount = EcoResProductVariantDimValue::newProductVariantDim_ConfigId().getDimValuesCount(inventTable.Product);

                if (! configValues && configs.elements() == 0 && configurationCount > 1)
                {
                    throw error("@SYS24088");
                }

                EcoResModelingIdentical isReuseExistingConfigurationEnabled = EcoResProductMaster::find(inventTable.Product).modelingPolicy().isReuseExistingConfigurationEnabled();

                if (configs && configs.elements() > 1 && !isReuseExistingConfigurationEnabled)
                {
                    throw error("@SYS24083");
                }

                if (configs && configs.elements() == 1 && !isReuseExistingConfigurationEnabled)
                {
                    SetEnumerator se = configs.getEnumerator();
                    se.moveNext();
                    routeConfigId  = se.current();
                }
                else
                {
                    routeConfigId  = '';
                }
            }
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>EcoResConfiguration</Name>
			<Table>EcoResConfiguration</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoQuery>No</AutoQuery>
			<LinkType>Passive</LinkType>
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TmpConfigChooseFromRoute</Name>
			<Table>TmpConfigChooseFromRoute</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ConfigId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GroupName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GroupNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>EcoResTmpProductDimensionValueFilter</Name>
			<Table>EcoResTmpProductDimensionValueFilter</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>EcoResConfiguration</JoinSource>
			<LinkType>ExistJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS24075</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">DialogDoubleTabs</Pattern>
		<PatternVersion xmlns="">1.3</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<StatusBarStyle xmlns="">SimpleWithoutClose</StatusBarStyle>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>TabSelection</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabPageSelection</Name>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SubBOMgroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Pattern>CustomFilters</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>SetupVersDate</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@SYS5740</HelpText>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editVersDate</DataMethod>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SetupVersQty</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_InventoryManagement:ConfigChooseFromRoute_SetupVersQty</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editVersQty</DataMethod>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SetupItemBOMid</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editItemBOMid</DataMethod>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
								<FrameType>None</FrameType>
								<Style>CustomFilter</Style>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>ConfigChooseFromRouteGrid</Name>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpConfigChooseFromRoute_GroupName</Name>
										<AllowEdit>No</AllowEdit>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>GroupName</DataField>
										<DataSource>TmpConfigChooseFromRoute</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpConfigChooseFromRoute_ItemId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ItemId</DataField>
										<DataSource>TmpConfigChooseFromRoute</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpConfigChooseFromRoute_ConfigId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ConfigId</DataField>
										<DataSource>TmpConfigChooseFromRoute</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>TmpConfigChooseFromRoute</DataSource>
								<MultiSelect>No</MultiSelect>
							</AxFormControl>
						</Controls>
						<Caption>@SYS53393</Caption>
					</AxFormControl>
				</Controls>
				<ShowTabs>No</ShowTabs>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>TabConfiguration</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabPageConfiguration</Name>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>EcoResConfiguration_Name</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Skip>Yes</Skip>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Name</DataField>
										<DataSource>EcoResConfiguration</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>EcoResConfiguration</DataSource>
								<ShowRowLabels>No</ShowRowLabels>
							</AxFormControl>
						</Controls>
						<Caption>@SCM:ExistingConfiguration</Caption>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1610612734</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Top>0</Top>
				<TopMode>BottomEdge</TopMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OK</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CommandButton</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>
