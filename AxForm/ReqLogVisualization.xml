<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ReqLogVisualization</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ReqLogVisualization extends FormRun
{
    ReqPlanId shownPlanId;
    ReqCalcUpdate shownUpdateType;
    Common argsBuffer;
    ReqLog referenceRecord;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        #SysSystemDefinedButtons

        if (element.args())
        {
            if (element.args().record())
            {
                argsBuffer = element.args().record();
            }
            else if (element.args().caller() is SysIFilterProvider)
            {
                SysIFilterProvider callingFilterProvider = element.args().caller();

                ReqPlanId planId = SysFilterValueHelper::getFirstValueRecordFromFilter(callingFilterProvider.parmFilter());

                ReqProcessList processList;
                select firstonly processList
                    order by ProcessId desc
                    where processList.ReqPlanId == planId;

                argsBuffer = processList;

                if (!argsBuffer)
                {
                    ReqLog reqLog;

                    select firstonly reqLog
                        order by RecId desc
                        where reqLog.ReqPlanId == planId;

                    argsBuffer = reqLog;
                }

                element.args().record(argsBuffer);
            }
        }
        
        if (!argsBuffer)
        {
            throw error(Error::missingFormActiveBuffer(element.name()));
        }

        boolean autoRefresh;

        ReqProcessNumThreadsRequested threadsRequested;

        boolean parametersValidated = false;

        switch (argsBuffer.TableId)
        {
            case tableNum(ReqLog):
                {
                    ReqLog reqLog = argsBuffer;
                    parametersValidated = this.validateAndApplyParameters(reqLog.ReqPlanId, reqLog.ReqCalcUpdate, reqLog.MaxChildThreads);
                }
                break;
            case tableNum(ReqProcessList):
                {
                    ReqProcessList processList = argsBuffer;
                    parametersValidated = this.validateAndApplyParameters(processList.ReqPlanId, processList.ReqCalcUpdate, processList.MaxChildThreads);
                    autoRefresh = true;
                }
                break;
            case tableNum(ReqProcessTmpList):
                {
                    ReqProcessTmpList processList = argsBuffer;
                    parametersValidated = this.validateAndApplyParameters(processList.ReqPlanId, processList.ReqCalcUpdate, processList.MaxChildThreads);
                    autoRefresh = true;
                }
                break;
        }

        super();

        if (!parametersValidated)
        {
            element.closeCancel();
        }
        else
        {
            element.setupGanttControl();
            element.refreshData();
            RefreshTimer.enabled(autoRefresh);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndApplyParameters</Name>
				<Source><![CDATA[
    private boolean validateAndApplyParameters(ReqPlanId _planId, ReqCalcUpdate _updateType, ReqProcessNumThreadsRequested _threadsRequested)
    {
        shownPlanId = _planId;
        shownUpdateType = _updateType;

        if (!_threadsRequested)
        {
            return checkFailed("@SCM:ReqLogVisualizeSingleThreadedNotSupported");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupGanttControl</Name>
				<Source><![CDATA[
    private void setupGanttControl()
    {
        GanttControlConfiguration controlConfiguration = MRPGantt.parmConfiguration();

        controlConfiguration.parmUseCalendars(false);
        controlConfiguration.parmGridWidth(250);
        controlConfiguration.parmUseThemeColors(true);
        controlConfiguration.parmExplicitOrdering(true);

        List columns = new List(Types::Class);
        
        columns.addEnd(GanttControlColumn::newParameters('', 250, true));

        MRPGantt.parmColumns(columns);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshData</Name>
				<Source><![CDATA[
    private void refreshData()
    {
        GanttControlConfiguration controlConfiguration = MRPGantt.parmConfiguration();

        ReqLogVisualizationDataProvider provider = ReqLogVisualizationDataProvider::construct(argsBuffer, referenceRecord);
        provider.prepareData();
        
        MRPGantt.parmActivities(provider.getActivities());
        MRPGantt.parmLinks(provider.getLinks());
    
        controlConfiguration.parmFromDateTime(provider.getFromDateTime());
        controlConfiguration.parmToDateTime(provider.getToDatetime());
        int minuteResolutionGranularity = 1;
        int64 secondsElapsed = DateTimeUtil::getDifference(provider.getToDatetime(), provider.getFromDateTime());
        if (secondsElapsed > 30 * 60)
        {
            minuteResolutionGranularity = 5;
        }
        if (secondsElapsed > 150 * 60)
        {
            minuteResolutionGranularity = 10;
        }

        if(provider.isRunCompleted()) 
        {
            RefreshTimer.enabled(false);
        }

        controlConfiguration.parmTimeScales(GanttControlTimeScale::getTimeScalesFromMinorTimeScale(GanttTimescale::Minutes, minuteResolutionGranularity));

        MRPGantt.parmConfiguration(controlConfiguration);
    }

]]></Source>
			</Method>
			<Method>
				<Name>task</Name>
				<Source><![CDATA[
    public int task(int _task)
    {
        #Task

        int ret;
    
        ret = super(_task);

        if (_task == #taskRefresh)
        {
            element.refreshData();
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>ExpandAll</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            MRPGantt.expandAll();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CollapseAll</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            MRPGantt.collapseAll();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReqLogLookup</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>lookupReference</Name>
						<Source><![CDATA[
        public Common lookupReference()
        {
            SysReferenceTableLookup     sysRefTableLookup;
            Query                       lookupQuery = new Query();
            QueryBuildDataSource        lookupQueryDataSource;
 
            sysRefTableLookup = SysReferenceTableLookup::newParameters(tableNum(ReqLog), ReqLogLookup);
            sysRefTableLookup.addLookupfield(fieldNum(ReqLog, StartDateTime));
            sysRefTableLookup.addLookupfield(fieldNum(ReqLog, ReqLogId));
 
            // Construct the query's data source
            lookupQueryDataSource = lookupQuery.addDataSource(tableNum(ReqLog));
 
            // Add ranges to the query data source
            lookupQueryDataSource.addRange(fieldNum(ReqLog, ReqPlanId)).value(queryValue(shownPlanId));
            lookupQueryDataSource.addRange(fieldNum(ReqLog, reqCalcUpdate)).value(queryValue(shownUpdateType));

            lookupQueryDataSource.addSortField(fieldNum(ReqLog, ProcessId), SortOrder::Descending);

            // Pass the query to the lookup object
            sysRefTableLookup.parmQuery(lookupQuery);

            ReqLog tempReferenceRecord = sysRefTableLookup.performFormLookup();

            if (tempReferenceRecord.recId != 0)
            {
                element.referenceRecord =  tempReferenceRecord;
                element.refreshData();
            }

            return element.referenceRecord;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RefreshTimer</Name>
				<Type>Custom</Type>
				<Methods>
					<Method>
						<Name>elapsed</Name>
						<Source><![CDATA[
        public int elapsed()
        {
            int ret;
    
            ret = super();
    
            element.refreshData();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@SCM:ReqLogVisualizeTitle</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<Style xmlns="">Workspace</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ExpandCollapse</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ExpandAll</Name>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@GanttControl:GanttControlExpandAll</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>CollapseAll</Name>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@GanttControl:GanttControlCollapseAll</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ReferenceLogFilter</Name>
				<Pattern>CustomFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormReferenceGroupControl">
						<Name>ReqLogLookup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ReferenceGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<ExtendedDataType>ReqLogRefRecId</ExtendedDataType>
						<Label>@SCM:ReqLogVisualizeReference</Label>
						<ReplacementFieldGroup>AutoLookup</ReplacementFieldGroup>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>GanttGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormContainerControl">
						<Name>MRPGantt</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Container</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension>
							<Name>GanttControl</Name>
							<ExtensionComponents />
							<ExtensionProperties />
						</FormControlExtension>
						<Controls />
					</AxFormControl>
					<AxFormControl>
						<Name>RefreshTimer</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<FormControlExtension>
							<Name>TimerControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>interval</Name>
									<Type>Int32</Type>
									<Value>60</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>startOnFormCreation</Name>
									<Type>Enum</Type>
									<TypeName>NoYes</TypeName>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
				<FrameType>None</FrameType>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>