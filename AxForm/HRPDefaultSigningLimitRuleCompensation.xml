<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>HRPDefaultSigningLimitRuleCompensation</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class HRPDefaultSigningLimitRuleCompensation extends FormRun
{
    HRPDefaultLimitDetail   hrpDefaultLimitDetail;
    Object                  callerForm;
    boolean                 dataChanged = false;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepare form with data
    /// </summary>
    public void init()
    {
        HRPLimitParameters limitParameters;

        callerForm = element.args().caller();
        if (!element.args().caller() || !element.args().record())
        {
            // Form cannot be called directly.
            throw error("@SYS96590");
        }

        super();

        //get authority basis
        select firstonly SigningLimitBasedOn from limitParameters;
        HRPAuthorityBasis authorityBasis = limitParameters.SigningLimitBasedOn;

        //based on authority basis, adjust column headings
        this.setColumnHeadings(authorityBasis);

        HRPTmpDefaultSigningLimitRule hrpTmpDefaultSigningLimitRule = element.args().record() as HRPTmpDefaultSigningLimitRule;
        hrpTmpDefaultSigningLimitRule.reread();  //This call is necessary to resolve issues reading old data when moving between forms

        this.getLimitDetail(hrpTmpDefaultSigningLimitRule);
        this.getSelectedCompensation(hrpTmpDefaultSigningLimitRule.CompensationRecIdsContainer, authorityBasis);
        this.getAvailableCompensation(authorityBasis);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setColumnHeadings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the column headings based on authority basis.
    /// </summary>
    /// <param name = "_authorityBasis">
    /// The <c>HRPAuthorityBasis</c> enumeration value.
    /// </param>
    [Wrappable(true)]
    protected final void setColumnHeadings(HRPAuthorityBasis _authorityBasis)
    {
        if (_authorityBasis == HRPAuthorityBasis::Job)
        {
            SelectedData_Compensation.label("@SYS1066");
            AvailableData_Compensation.label("@SYS1066");
            FormInstruction.text(strfmt("@HCM:SelectSigningLimitTypeInstruction", "@HCM:Jobs"));
            element.design().caption("@HCM:JobSigningLimitRule");
        }
        else if (_authorityBasis == HRPAuthorityBasis::Compensation)
        {
            SelectedData_Compensation.label("@SYS310224");
            AvailableData_Compensation.label("@SYS310224");
            FormInstruction.text(strfmt("@HCM:SelectSigningLimitTypeInstruction", "@HCM:CompensationGrades"));
            element.design().caption("@HCM:CompensationSigningLimitRule");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedCompensation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records in <c>HRPDefaultSigningLimitRuleCompensationTmp</c> based on the selected compensation levels.
    /// </summary>
    /// <param name = "_recIdsContainer">
    /// A packed list containing record IDs for jobs or compensation levels.
    /// </param>
    /// <param name = "_authorityBasis">
    /// The <c>HRPAuthorityBasis</c> enumeration value.
    /// </param>
    [Wrappable(true)]
    protected final void getSelectedCompensation(Container _recIdsContainer, HRPAuthorityBasis _authorityBasis)
    {
        if (_authorityBasis == HRPAuthorityBasis::Job)
        {
            LimitRuleCompensationSelected.setTmpData(HRPDefaultSigningLimitRuleCompensationTmp::setLimitRuleJob(_recIdsContainer));
        }
        else if (_authorityBasis == HRPAuthorityBasis::Compensation)
        {
            LimitRuleCompensationSelected.setTmpData(HRPDefaultSigningLimitRuleCompensationTmp::setLimitRuleCompensation(_recIdsContainer));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvailableCompensation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records in <c>HRPDefaultSigningLimitRuleCompensationTmp</c> based on the remaining compensation.
    /// </summary>
    /// <param name = "_authorityBasis">
    /// The <c>HRPAuthorityBasis</c> enumeration value.
    /// </param>
    [Wrappable(true)]
    protected final void getAvailableCompensation(HRPAuthorityBasis _authorityBasis)
    {
        HcmJob hcmJobLocal;
        HcmCompensationLevel hcmCompensationLevel;

        if (_authorityBasis == HRPAuthorityBasis::Job)
        {
            LimitRuleCompensationAvailable.setTmpData(HRPDefaultSigningLimitRuleCompensationTmp::setLimitRuleJobRemaining(LimitRuleCompensationSelected));
        }
        else if (_authorityBasis == HRPAuthorityBasis::Compensation)
        {
            LimitRuleCompensationAvailable.setTmpData(HRPDefaultSigningLimitRuleCompensationTmp::setLimitRuleCompensationRemaining(LimitRuleCompensationSelected));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLimitDetail</Name>
				<Source><![CDATA[
    private void getLimitDetail(HRPTmpDefaultSigningLimitRule _hrpTmpDefaultSigningLimitRule)
    {
        RefRecId defaultLimitDetailRecId = HRPSigningLimitPolicyUtil::getDefaultLimitDetail(_hrpTmpDefaultSigningLimitRule.DefaultSigningLimitRule,
                                                        HRPLimitDocument::getLimitDocumentRecId(_hrpTmpDefaultSigningLimitRule.SigningLimitDocument),
                                                        HRPLimitType::Approval,
                                                        _hrpTmpDefaultSigningLimitRule.ApprovalAmount,
                                                        _hrpTmpDefaultSigningLimitRule.ApprovalCurrency);

        hrpDefaultLimitDetail = HRPDefaultLimitDetail::find(defaultLimitDetailRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLimitRuleCompensationSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>LimitRuleCompensationSelected</c> data source from the available <c>HRPDefaultSigningLimitRuleCompensationTmp</c> record.
    /// </summary>
    [Wrappable(true)]
    protected final void populateLimitRuleCompensationSelected()
    {
        LimitRuleCompensationSelected.Compensation = LimitRuleCompensationAvailable.Compensation;
        LimitRuleCompensationSelected.CompensationRecId = LimitRuleCompensationAvailable.CompensationRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLimitRuleCompensationAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>LimitRuleCompensationAvailable</c> data source from the selected <c>HRPDefaultSigningLimitRuleCompensationTmp</c> record.
    /// </summary>
    [Wrappable(true)]
    protected final void populateLimitRuleCompensationAvailable()
    {
        LimitRuleCompensationAvailable.Compensation = LimitRuleCompensationSelected.Compensation;
        LimitRuleCompensationAvailable.CompensationRecId = LimitRuleCompensationSelected.CompensationRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the <c>HRPDefaultSigningLimitRuleCompensationTmp</c> records based on the remaining compensation levels.
    /// </summary>
    /// <param name = "_selectedIds">
    /// The list containing the remaining compensation levels.
    /// </param>
    [Wrappable(true)]
    protected final void selectRecords(List _selectedIds)
    {
        ListEnumerator selectedIdsEnumerator = _selectedIds.getEnumerator();

        while (selectedIdsEnumerator.moveNext())
        {
            select firstonly CompensationRecId from LimitRuleCompensationAvailable
                where LimitRuleCompensationAvailable.CompensationRecId == selectedIdsEnumerator.current();

            if (LimitRuleCompensationAvailable)
            {
                ttsbegin;
                this.populateLimitRuleCompensationSelected();
                LimitRuleCompensationSelected.insert();

                LimitRuleCompensationAvailable.delete();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unselectRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unselects the <c>HRPDefaultSigningLimitRuleCompensationTmp</c> records based on the selected compensation level.
    /// </summary>
    /// <param name = "_selectedIds">
    /// The list containing the selected compensation levels.
    /// </param>
    [Wrappable(true)]
    protected final void unselectRecords(List _selectedIds)
    {
        ListEnumerator selectedIdsEnumerator = _selectedIds.getEnumerator();

        while (selectedIdsEnumerator.moveNext())
        {
            select firstonly CompensationRecId from LimitRuleCompensationSelected
                where LimitRuleCompensationSelected.CompensationRecId == selectedIdsEnumerator.current();

            if (LimitRuleCompensationSelected)
            {
                ttsbegin;
                this.populateLimitRuleCompensationAvailable();
                LimitRuleCompensationAvailable.insert();

                LimitRuleCompensationSelected.delete();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>AddButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            List selectedIds = new List(Types::Int64);

            super();

            if (LimitRuleCompensationAvailable_ds.anyMarked())
            {
                // there were marked row(s)
                HRPDefaultSigningLimitRuleCompensationTmp localAvailableLimitRuleCompensationTmp = LimitRuleCompensationAvailable_ds.getFirst(true);
                while (localAvailableLimitRuleCompensationTmp)
                {
                    selectedIds.addEnd(localAvailableLimitRuleCompensationTmp.CompensationRecId);
                    localAvailableLimitRuleCompensationTmp = LimitRuleCompensationAvailable_ds.getNext();
                }
            }
            else
            {
                selectedIds.addEnd(LimitRuleCompensationAvailable.CompensationRecId);
            }

            element.selectRecords(selectedIds);

            dataChanged = true;

            LimitRuleCompensationSelected_ds.research();
            LimitRuleCompensationAvailable_ds.research();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RemoveButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            List selectedIds = new List(Types::Int64);

            super();

            if (LimitRuleCompensationSelected_ds.anyMarked())
            {
                // there were marked row(s)
                HRPDefaultSigningLimitRuleCompensationTmp localSelectedLimitRuleCompensationTmp = LimitRuleCompensationSelected_ds.getFirst(true);
                while (localSelectedLimitRuleCompensationTmp)
                {
                    selectedIds.addEnd(localSelectedLimitRuleCompensationTmp.CompensationRecId);
                    localSelectedLimitRuleCompensationTmp = LimitRuleCompensationSelected_ds.getNext();
                }
            }
            else
            {
                selectedIds.addEnd(LimitRuleCompensationSelected.CompensationRecId);
            }

            element.unselectRecords(selectedIds);

            dataChanged = true;

            LimitRuleCompensationSelected_ds.research();
            LimitRuleCompensationAvailable_ds.research();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonOk</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            boolean isValid = true;
            HRPIDefaultSigningLImitRuleAssignment bsigningLImitRuleAssignment = callerForm as HRPIDefaultSigningLImitRuleAssignment ;

            if (dataChanged && bsigningLImitRuleAssignment)
            {
                List recIds = new List(Types::Int64);
                HRPDefaultSigningLimitRuleCompensationTmp newLimitRuleCompensationTmp;
                newLimitRuleCompensationTmp.setTmpData(limitRuleCompensationSelected);

                while select newLimitRuleCompensationTmp
                {
                    recIds.addEnd(newLimitRuleCompensationTmp.CompensationRecId);
                }

                bsigningLImitRuleAssignment.assignCompensationRecIds(recIds);
                isValid = bsigningLImitRuleAssignment.isAssignedCompensationValid();
            }

            if (isValid)
            {
                super();
                element.close();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonCancel</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.close();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>LimitRuleCompensationAvailable</Name>
			<Table>HRPDefaultSigningLimitRuleCompensationTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Compensation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompensationRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HRPDefaultLimitJobRule</Name>
			<Table>HRPDefaultLimitJobRule</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DefaultLimitDetail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Job</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources>
				<AxFormReferencedDataSource>
					<Name>HcmJob</Name>
					<Table>HcmJob</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>CreatedBy</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>CreatedDateTime</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>JobId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>MaximumPositions</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ModifiedBy</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ModifiedDateTime</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Partition</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<JoinSource>HRPDefaultLimitJobRule</JoinSource>
					<LinkType>OuterJoin</LinkType>
					<JoinRelation>HcmJob</JoinRelation>
				</AxFormReferencedDataSource>
			</ReferencedDataSources>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HRPDefaultLimitCompensationRule</Name>
			<Table>HRPDefaultLimitCompensationRule</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CompensationLevel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultLimitDetail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HRPDefaultLimit</Name>
			<Table>HRPDefaultLimit</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DefaultLimitDetail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources>
				<AxFormDataSourceDerived>
					<Name>HRPDefaultLimit_HRPDefaultLimitCompensationRule</Name>
					<Table>HRPDefaultLimitCompensationRule</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>CompensationLevel</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DefaultLimitDetail</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>InstanceRelationType</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Partition</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
				<AxFormDataSourceDerived>
					<Name>HRPDefaultLimit_HRPDefaultLimitJobRule</Name>
					<Table>HRPDefaultLimitJobRule</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>DefaultLimitDetail</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>InstanceRelationType</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Job</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Partition</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
			</DerivedDataSources>
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>LimitRuleCompensationSelected</Name>
			<Table>HRPDefaultSigningLimitRuleCompensationTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Compensation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompensationRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<DialogSize xmlns="">Medium</DialogSize>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">Dialog</Style>
		<UseCaptionFromMenuItem xmlns="">Yes</UseCaptionFromMenuItem>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>FormInstruction</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<Type>StaticText</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ListPanel</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>ListPanel</Pattern>
				<PatternVersion>1.3</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Lists</Name>
						<ExtendedStyle>listPanel</ExtendedStyle>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>AvailableGroup</Name>
								<ExtendedStyle>listPanel_availPanel</ExtendedStyle>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>AvailableData</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Grid</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>AvailableData_Compensation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>Compensation</DataField>
												<DataSource>LimitRuleCompensationAvailable</DataSource>
												<Label>@SYS309871</Label>
											</AxFormControl>
										</Controls>
										<DataSource>LimitRuleCompensationAvailable</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@HCM:AvailableCaption</Caption>
								<ViewEditMode>View</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>AddRemoveGroup</Name>
								<ExtendedStyle>listPanel_buttonPanel</ExtendedStyle>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>AddButton</Name>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>ImageOnly</ButtonDisplay>
										<MultiSelect>Yes</MultiSelect>
										<NormalImage>MoveRight</NormalImage>
										<Text>@SYS2318</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>RemoveButton</Name>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>ImageOnly</ButtonDisplay>
										<NormalImage>MoveLeft</NormalImage>
										<Text>@SYS311855</Text>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SelectedGroup</Name>
								<ExtendedStyle>listPanel_selPanel</ExtendedStyle>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>SelectedData</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Grid</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SelectedData_Compensation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>Compensation</DataField>
												<DataSource>LimitRuleCompensationSelected</DataSource>
												<Label>@SYS309872</Label>
											</AxFormControl>
										</Controls>
										<DataSource>LimitRuleCompensationSelected</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@HCM:SelectedCaption</Caption>
								<ViewEditMode>View</ViewEditMode>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>CommitButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>ButtonOk</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Button</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Text>@SYS5473</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>ButtonCancel</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Button</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Text>@SYS50163</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>