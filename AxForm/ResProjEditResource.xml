<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ResProjEditResource</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
/// <summary>
/// Product resource editing form.
/// </summary>
[Form]
public class ResProjEditResource extends FormRun
{
    #TimeConstants

    private ResResourceSchedulingController controller;
    private ResCharacteristicsController resourceCharacteristics;
    private ActivityResourceRecId activityResource;
    private ResourceRecId previousResource;
    private ProjId projectId;
    private QuotationId quotationId;
    private date previousStartDate;
    private date previousEndDate;

}
]]></Source>
			</Method>
			<Method>
				<Name>schedulingController</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set resource scheduling controller.
    /// </summary>
    /// <param name = "_controller">Resource scheduling controller.</param>
    /// <returns>Resource scheduling controller.</returns>
    public ResResourceSchedulingController schedulingController(ResResourceSchedulingController _controller = controller)
    {
        controller = _controller;
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize edit project resource form.
    /// </summary>
    public void init()
    {
        PSAProjSchedRole activityResourceRecord = this.args().record();
        activityResource = activityResourceRecord.RecId;
        previousResource = activityResourceRecord.Resource;
        previousStartDate = activityResourceRecord.PSARoleStartDate;
        previousEndDate = activityResourceRecord.PSARoleEndDate;
        projectId = activityResourceRecord.ProjId;
        quotationId = activityResourceRecord.QuotationId;

        super();

        ResUtil::validateResPerfDataUpgradeStatus();

        if (!controller)
        {
            controller = element.args().caller() as ResResourceSchedulingController;
        }

        resourceCharacteristics = ResCharacteristicsController::construct();
        resourceCharacteristics.requiringEntityType(ResCharacteristicReqEntityType::ActivityResource);
        resourceCharacteristics.requiringEntity(activityResource);
        resourceCharacteristics.retrieveRequirements();

        resourceCharacteristics.enableRoleSelection(false);
        resourceCharacteristics.searchCriteriaReady += eventhandler(element.saveCharacteristicRequirements);

        ResourceCategory.text(ResourceCategoryFacade::getId(activityResourceRecord.ResourceCategory));
        if (activityResourceRecord.Resource > 0)
        {
            Resource.text(ResourceFacade::getName(activityResourceRecord.Resource));
        }

        boolean hasReservation = ActivityResourceFacade::hasReservation(activityResource);
        Resource.allowEdit(!hasReservation);
        ResourceStartDate.allowEdit(!hasReservation);
        ResourceEndDate.allowEdit(!hasReservation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveCharacteristicRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save resource characteristic requirements for the activity resource.
    /// </summary>
    void saveCharacteristicRequirements()
    {
        ResSearchCriteria searchCriteria = resourceCharacteristics.searchCriteria();

        if (PSAProjSchedRole.ResourceCategory)
        {
            ResourceCategoryId resourceCategoryId = ResourceCategoryFacade::getId(PSAProjSchedRole.ResourceCategory);
            ResResourceCategorySearchCriteria criteriaItem = ResResourceCategorySearchCriteria::construct();
            criteriaItem.addResourceCategory(resourceCategoryId);
            searchCriteria.setCriteriaItem(criteriaItem);
            resourceCharacteristics.searchCriteria(searchCriteria);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadResourceCategoryCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Load resource category search criteria.
    /// </summary>
    void loadResourceCategoryCriteria()
    {
        resourceCharacteristics.searchCriteria(ResSearchCriteria::construct());
        resourceCharacteristics.requiringEntity(PSAProjSchedRole.ResourceCategory);
        resourceCharacteristics.requiringEntityType(ResCharacteristicReqEntityType::ResourceCategory);
        resourceCharacteristics.retrieveRequirements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRollUpStartDate</Name>
				<Source><![CDATA[
    private utcdatetime getRollUpStartDate(date _startDate)
    {
        // get rollup table cache start date by getting the smaller date
        date cacheStartDate = _startDate;
        if (projectId)
        {
            ProjTable project;
            select firstonly PSASchedEndDate from project
                where project.ProjId == projectId;
            if (project)
            {
                cacheStartDate = _startDate < project.PSASchedStartDate ? _startDate : project.PSASchedStartDate;
            }
        }
        else if (quotationId)
        {
            SalesQuotationTable quotation;
            select firstonly PSAESTProjEndDate from quotation
                where quotation.QuotationId == quotationId;
            if (quotation)
            {
                cacheStartDate = _startDate < quotation.PSAESTProjStartDate ? _startDate : quotation.PSAESTProjStartDate;
            }
        }
        return DateTimeUtil::newDateTime(cacheStartDate, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRollUpEndDate</Name>
				<Source><![CDATA[
    private utcdatetime getRollUpEndDate(date _endDate)
    {
        // get rollup table cache end date by getting the higher date
        date cacheEndDate = _endDate;
        if (projectId)
        {
            ProjTable project;
            select firstonly PSASchedEndDate from project
                where project.ProjId == projectId;
            if (project)
            {
                cacheEndDate = _endDate > project.PSASchedEndDate ? _endDate : project.PSASchedEndDate;
            }
        }
        else if (quotationId)
        {
            SalesQuotationTable quotation;
            select firstonly PSAESTProjEndDate from quotation
                where quotation.QuotationId == quotationId;
            if (quotation)
            {
                cacheEndDate = _endDate > quotation.PSAESTProjEndDate ? _endDate : quotation.PSAESTProjEndDate;
            }
        }
        return DateTimeUtil::newDateTime(cacheEndDate, #LastSecondOfTheDay);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>PSAProjSchedRole</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initialize project resource data source.
        /// </summary>
        public void init()
        {
            super();
            QueryBuildRange range = this.query().dataSourceTable(tablenum(PSAProjSchedRole)).addRange(fieldnum(PSAProjSchedRole,RecId));
            range.value(int642str(activityResource));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>RequiredCompentenciesBtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open resource competencies selection form.
        /// </summary>
        public void clicked()
        {
            super();
            resourceCharacteristics.showForm();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ResourceCategory</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open resource category lookup.
        /// </summary>
        public void lookup()
        {
            Args args = new Args(formStr(ProjRoleSelectionLookup));
            FormRun formRun;

            ProjRoleSelectionLookup lookupController = ProjRoleSelectionLookup::construct();
            lookupController.MultiSelect(false);
            lookupController.ShowAnyCategory(false);

            args.caller(lookupController);
            args.callerFormControl(this);
            formRun = classfactory.formRunClass(args);
            formRun.init();

            this.performFormLookup(formRun);
            formRun.wait();

            if (this.text())
            {
                boolean resourceCategoryHasChanged = PSAProjSchedRole.ResourceCategory != formRun.dataSource(0).cursor().RecId;
                PSAProjSchedRole.ResourceCategory = formRun.dataSource(0).cursor().RecId;

                if (resourceCategoryHasChanged)
                {
                    element.loadResourceCategoryCriteria();
                    element.saveCharacteristicRequirements();
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Resource</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open company resource lookup.
        /// </summary>
        public void lookup()
        {
            Args args;
            boolean isPerformanceEnhanced = ResUtil::isPerformanceEnhancementFeatureEnabled(true);
            if (isPerformanceEnhanced)
            {
                args = new Args(formStr(ResProjResourceSelectionLookupV2));
            }
            else
            {
                args = new Args(formStr(ResProjResourceSelectionLookup));
            }

            args.parmObject(resourceCharacteristics.searchCriteria());
            args.record(PSAProjSchedRole);

            FormRun lookupFormRun = ClassFactory::formRunClassOnClient(args);
            lookupFormRun.init();

            this.performFormLookup(lookupFormRun);
            lookupFormRun.wait();

            if (lookupFormRun.closedOk())
            {
                if (isPerformanceEnhanced)
                {
                    ResProjectResourceSchedulableDistinctView companyResource = lookupFormRun.dataSource(0).cursor();
                    PSAProjSchedRole.Resource = companyResource.Resource;
                    if (PSAProjSchedRole.Resource)
                    {
                        PSAProjSchedRole.Name = companyResource.Name;
                        this.text(companyResource.Name);
                    }
                }
                else
                {
                    ResCompanyResourceSchedulableDetailDistinctView companyResource = lookupFormRun.dataSource(0).cursor();
                    PSAProjSchedRole.Resource = companyResource.Resource;
                    if (PSAProjSchedRole.Resource)
                    {
                        PSAProjSchedRole.Name = companyResource.Name;
                        this.text(companyResource.Name);
                    }
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OkBtn</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Commits the updates on the project resource.
        /// </summary>
        public void clicked()
        {
            super();
            resourceCharacteristics.requiringEntityType(ResCharacteristicReqEntityType::ActivityResource);
            resourceCharacteristics.requiringEntity(activityResource);
            resourceCharacteristics.saveToRequirements();

            if (previousResource != PSAProjSchedRole.Resource ||
                PSAProjSchedRole.PSARoleStartDate != previousStartDate ||
                PSAProjSchedRole.PSARoleEndDate != previousEndDate)
            {
                date start = previousStartDate < PSAProjSchedRole.PSARoleStartDate
                        ? previousStartDate: PSAProjSchedRole.PSARoleStartDate;

                date end = previousEndDate > PSAProjSchedRole.PSARoleEndDate
                        ? previousEndDate: PSAProjSchedRole.PSARoleEndDate;

                ResActivityResourceDetailView projectResource;
                utcdatetime startDateTime;
                utcdatetime endDateTime;
                boolean isPerformanceEnhanced = ResUtil::isPerformanceEnhancementFeatureEnabled(ResEnableByDefaultPerfEnhancementFeatureFlight::instance().isEnabled());
                if (!isPerformanceEnhanced)
                {
                    // update roll-ups for the activity resource
                    select firstOnly Activity, ActivityResourceId from projectResource
                        where projectResource.ActivityResource == PSAProjSchedRole.RecId;

                    startDateTime = AVTimeframe::getTimeframe(
                        element.getRollUpStartDate(start), AVTimeframeType::Month).start();
                    endDateTime = AVTimeframe::getTimeframe(
                        element.getRollUpEndDate(end), AVTimeframeType::Month).end();
                }

                if (previousResource != PSAProjSchedRole.Resource)
                {
                    ProjValEmplProjSetup projValEmplProjSetupLoc;

                    ttsbegin;
                    select firstonly forupdate Resource, RecId from projValEmplProjSetupLoc
                        where projValEmplProjSetupLoc.Resource == previousResource &&
                            projValEmplProjSetupLoc.ProjId == projectId;

                    if (projValEmplProjSetupLoc.RecId)
                    {
                        projValEmplProjSetupLoc.Resource = PSAProjSchedRole.Resource;
                        projValEmplProjSetupLoc.update();
                    }
                    ttscommit;

                    // If resource was set to 0, then remove activity resource roll up
                    if (!isPerformanceEnhanced && previousResource == 0)
                    {
                        ActivityResourceId activityResourceId = strFmt(ResUtil::activityResourceIdStrFormat,
                            int642Str(projectResource.Activity), 0, int642Str(PSAProjSchedRole.RecId));
                        container updateRollUpArguments = [activityResourceId];
                        Global::runAsync(classNum(ResRollUpWriter),
                            staticMethodStr(ResRollUpWriter, removeRollUpForSpecificActivityResourceIdAsync), updateRollUpArguments);
                    }

                    if (PSAProjSchedRole.Resource)
                    {
                        // If resource was set to 0, then insert it to the ProjValEmplProjSetup table.
                        if (previousResource == 0)
                        {
                            projValEmplProjSetupLoc.clear();

                            projValEmplProjSetupLoc.ProjId = projectId;
                            projValEmplProjSetupLoc.Resource = PSAProjSchedRole.Resource;
                            projValEmplProjSetupLoc.insert();
                        }
                    }
                     
                    if (!ResUtil::isPerformanceEnhancementFeatureEnabled(ResEnableByDefaultPerfEnhancementFeatureFlight::instance().isEnabled()))
                    {
                        if (PSAProjSchedRole.Resource)
                        {
                            // update roll-ups for the newly allocated resource
                            container updateRollUpArguments = [projectResource.ActivityResourceId, startDateTime, endDateTime];
                            
                            Global::runAsync(classNum(ResRollUpWriter),
                                staticMethodStr(ResRollUpWriter, updateRollUpForSpecificActivityResourceIdAsync), updateRollUpArguments);

                            // delete roll-ups for the previous activity resource
                            ActivityResourceId previousActivityResourceId = strFmt(ResUtil::activityResourceIdStrFormat,
                                int642Str(projectResource.Activity), int642Str(previousResource), int642Str(PSAProjSchedRole.RecId));
                            container removeRolluUpArguments = [previousActivityResourceId];
                            Global::runAsync(classNum(ResRollUpWriter),
                                staticMethodStr(ResRollUpWriter, removeRollUpForSpecificActivityResourceIdAsync), removeRolluUpArguments);
                        }
                        else
                        {
                            // date changes only, update roll-ups with the new date range
                            container updateRollUpArguments = [projectResource.ActivityResourceId, startDateTime, endDateTime];
                            
                            Global::runAsync(classNum(ResRollUpWriter),
                            staticMethodStr(ResRollUpWriter, updateRollUpForSpecificActivityResourceIdAsync), updateRollUpArguments);
                        }
                    }
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>PSAProjSchedRole</Name>
			<Table>PSAProjSchedRole</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSARoleEndDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSARoleStartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QuotationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Resource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceLegalEntity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@Res:ProjectResource</Caption>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<WindowType xmlns="">Slider</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>ToolbarFields</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneControl">
						<Name>ActionPane</Name>
						<Type>ActionPane</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>ProjectResourceActions</Name>
								<Type>ButtonGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>RequiredCompentenciesBtn</Name>
										<HelpText>@Res:SpecifyResourceCharacteristics</HelpText>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<Style>Link</Style>
										<Text>@Res:ResourceCharacteristics</Text>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Style>Strip</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Content</Name>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>Group</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Name</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>Name</DataField>
								<DataSource>PSAProjSchedRole</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ResourceCategory</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@Res:Role</Label>
								<LookupOnly>Yes</LookupOnly>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Resource</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@Res:Resource</Label>
								<LookupOnly>Yes</LookupOnly>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>ResourceStartDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Date</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>PSARoleStartDate</DataField>
								<DataSource>PSAProjSchedRole</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>ResourceEndDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Date</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>PSARoleEndDate</DataField>
								<DataSource>PSAProjSchedRole</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>CommitButtons</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OkBtn</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelBtn</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>