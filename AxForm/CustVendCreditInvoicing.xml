<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>CustVendCreditInvoicing</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
    public class CustVendCreditInvoicing extends FormRun
    {
        Common                          callerTable;
        SalesTable                      salesTable;
        SalesLine                       salesLine;
        PurchTable                      purchTable;
        PurchLine                       purchLine;
        CustVendAC                      custVendAccount;
        CustInvoiceTable                custInvoiceTable;
        CustInvoiceLine                 custInvoiceLine;
        LedgerJournalTrans              ledgerJournalTrans;
        InventJournalTrans              inventJournalTrans;
        LedgerJournalACType             custVendAccountType;
        CustVendCreditInvoicingTable    custVendCreditInvoicingTable;
        CustVendCreditInvoicingLine     custVendCreditInvoicingLine;
        VendTrans                       vendTrans;
        CustTrans                       custTrans;
        ProjInvoiceItemDetail           projInvoiceItemDetail;
        ProjInvoiceOnAccDetail          projInvoiceOnAccDetail;
        ProjInvoiceEmplDetail           projInvoiceEmplDetail;
        ProjInvoiceRevenueDetail        projInvoiceRevenueDetail;
        ProjInvoiceCostDetail           projInvoiceCostDetail;
        RefRecId                        projRefRecId;
        boolean                         creditInvoicingDisabled;

        ReasonRefRecId                  reasonRefRecId;
        TransDate                       custVendCorrectedInvoiceDate;

        #ISOCountryRegionCodes

}
]]></Source>
			</Method>
			<Method>
				<Name>activate</Name>
				<Source><![CDATA[
    public void activate(boolean _active)
    {
        super(_active);

        if (!creditInvoicingDisabled)
        {
            this.callerTable(callerTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerTable</Name>
				<Source><![CDATA[
    protected void callerTable(Common _callerTable)
    {
        switch (callerTable.TableId)
        {
            case tablenum(SalesTable):
                salesTable          = _callerTable;
                custVendAccount     = salesTable.InvoiceAccount;
                custVendAccountType = LedgerJournalACType::Cust;
                this.controlCreditInvoicing(salesTable.SalesStatus == SalesStatus::Invoiced);
                break;

            case tablenum(SalesLine):
                salesLine           = _callerTable;
                custVendCorrectedInvoiceId.visible(false);
                custVendAccount     = SalesTable::find(salesLine.SalesId).InvoiceAccount;
                custVendAccountType = LedgerJournalACType::Cust;
                this.controlCreditInvoicing(salesLine.SalesStatus == SalesStatus::Invoiced);
                break;

            case tablenum(PurchTable):
                purchTable          = _callerTable;
                custVendAccount     = purchTable.InvoiceAccount;
                custVendAccountType = LedgerJournalACType::Vend;
                this.controlCreditInvoicing(purchTable.isInvoiced());
                break;

            case tablenum(PurchLine):
                purchLine           = _callerTable;
                custVendCorrectedInvoiceId.visible(false);
                custVendAccount     = PurchTable::find(purchLine.PurchId).InvoiceAccount;
                custVendAccountType = LedgerJournalACType::Vend;
                this.controlCreditInvoicing(purchLine.isInvoiced());
                break;

            case tablenum(CustInvoiceTable):
                custInvoiceTable    = _callerTable;
                custVendAccount     = custInvoiceTable.InvoiceAccount;
                custVendAccountType = LedgerJournalACType::Cust;
                this.controlCreditInvoicing(custInvoiceTable.Posted);
                break;

            case tablenum(CustInvoiceLine):
                custInvoiceLine     = _callerTable;
                custVendCorrectedInvoiceId.visible(false);
                custVendAccount     = CustInvoiceTable::findRecId(custInvoiceLine.ParentRecId).InvoiceAccount;
                custVendAccountType = LedgerJournalACType::Cust;
                this.controlCreditInvoicing(custInvoiceLine.custInvoiceTable().Posted);
                break;

            case tablenum(LedgerJournalTrans):
                ledgerJournalTrans  = _callerTable;
                custVendAccount     = ledgerJournalTrans.parmAccount();
                custVendAccountType = ledgerJournalTrans.AccountType;
                this.controlCreditInvoicing(ledgerJournalTrans.ledgerJournalTable().Posted);
                break;

            case tablenum(ProjInvoiceItemDetail):
                projInvoiceItemDetail             = _callerTable;
                custVendAccount             = ProjTable::find(projInvoiceItemDetail.projInvoiceItem().ProjId).CustAccount;
                custVendAccountType         = LedgerJournalACType::Project;
                custVendCorrectedInvoiceId.text(projInvoiceItemDetail.projInvoiceItem().ProjInvoiceId);
                custVendCorrectedInvoiceId.allowEdit(false);
                custVendCorrectedInvoiceDate = projInvoiceItemDetail.projInvoiceItem().InvoiceDate;
                break;

            case tablenum(ProjInvoiceOnAccDetail):
                projInvoiceOnAccDetail             = _callerTable;
                custVendAccount             = ProjTable::find(projInvoiceOnAccDetail.projInvoiceOnAcc().ProjId).CustAccount;
                custVendAccountType         = LedgerJournalACType::Project;
                custVendCorrectedInvoiceId.text(projInvoiceOnAccDetail.projInvoiceOnAcc().ProjInvoiceId);
                custVendCorrectedInvoiceId.allowEdit(false);
                custVendCorrectedInvoiceDate = projInvoiceOnAccDetail.projInvoiceOnAcc().InvoiceDate;
                break;

            case tablenum(ProjInvoiceCostDetail):
                projInvoiceCostDetail             = _callerTable;
                custVendAccount             = ProjTable::find(projInvoiceCostDetail.projInvoiceCost().ProjId).CustAccount;
                custVendAccountType         = LedgerJournalACType::Project;
                custVendCorrectedInvoiceId.text(projInvoiceCostDetail.projInvoiceCost().ProjInvoiceId);
                custVendCorrectedInvoiceId.allowEdit(false);
                custVendCorrectedInvoiceDate = projInvoiceCostDetail.projInvoiceCost().InvoiceDate;
                break;

            case tablenum(ProjInvoiceEmplDetail):
                projInvoiceEmplDetail             = _callerTable;
                custVendAccount             = ProjTable::find(projInvoiceEmplDetail.projInvoiceEmpl().ProjId).CustAccount;
                custVendAccountType         = LedgerJournalACType::Project;
                custVendCorrectedInvoiceId.text(projInvoiceEmplDetail.projInvoiceEmpl().ProjInvoiceId);
                custVendCorrectedInvoiceId.allowEdit(false);
                custVendCorrectedInvoiceDate = projInvoiceEmplDetail.projInvoiceEmpl().InvoiceDate;
                break;

            case tablenum(ProjInvoiceRevenueDetail):
                projInvoiceRevenueDetail          = _callerTable;
                custVendAccount             = ProjTable::find(projInvoiceRevenueDetail.projInvoiceRevenue().ProjId).CustAccount;
                custVendAccountType         = LedgerJournalACType::Project;
                custVendCorrectedInvoiceId.text(projInvoiceRevenueDetail.projInvoiceRevenue().ProjInvoiceId);
                custVendCorrectedInvoiceId.allowEdit(false);
                custVendCorrectedInvoiceDate = projInvoiceRevenueDetail.projInvoiceRevenue().InvoiceDate;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvoiceSelected</Name>
				<Source><![CDATA[
    public void checkInvoiceSelected()
    {
        Query                           qInvoicesForCorrection  = new Query();
        QueryRun                        qrInvoicesForCorrection;
        QueryBuildDataSource            dsCustTrans;
        QueryBuildDataSource            dsVendTrans;

        if (custVendCorrectedInvoiceId.allowEdit() && custVendCorrectedInvoiceId.valueStr())
        {
            switch (custVendAccountType)
            {
                case LedgerJournalACType::Cust:

                    dsCustTrans = qInvoicesForCorrection.addDataSource(tablenum(CustTrans));

                    new CustVendCreditInvoicingLookup().filterCustInvoicesForCorrection(
                        qInvoicesForCorrection,
                        callerTable,
                        custVendAccount,
                        custVendCorrectedInvoiceId.valueStr());

                    qrInvoicesForCorrection = new QueryRun(qInvoicesForCorrection);

                    if (!qrInvoicesForCorrection.next())
                    {
                        throw error(strfmt("@SYS99736", custVendCorrectedInvoiceId.valueStr()));
                    }
                    else
                    {
                        CustVendTrans custVendTrans = qrInvoicesForCorrection.getNo(1);
                        custVendCorrectedInvoiceDate = custVendTrans.TransDate;

                        CustVendCreditInvoicingHelper::checkTaxInvoiceOperation_ID(
                            reasonRefRecId,
                            CustInvoiceJour::findFromCustTrans(
                                custVendTrans.Invoice,
                                custVendTrans.TransDate,
                                custVendTrans.AccountNum));
                    }

                    break;

                case LedgerJournalACType::Vend:

                    dsVendTrans = qInvoicesForCorrection.addDataSource(tablenum(VendTrans));

                    new CustVendCreditInvoicingLookup().filterVendInvoicesForCorrection(
                        qInvoicesForCorrection,
                        callerTable,
                        custVendAccount,
                        custVendCorrectedInvoiceId.valueStr());

                    qrInvoicesForCorrection = new QueryRun(qInvoicesForCorrection);

                    if (!qrInvoicesForCorrection.next())
                    {
                        throw error(strfmt("@SYS99736", custVendCorrectedInvoiceId.valueStr()));
                    }
                    else
                    {
                        CustVendTrans custVendTrans = qrInvoicesForCorrection.getNo(1);
                        custVendCorrectedInvoiceDate = custVendTrans.TransDate;
                    }

                    break;
            }
        }

        if (custVendAccountType == LedgerJournalACType::Project
            && FeatureStateProvider::isFeatureEnabled(TaxInvoiceSerialNumberGenerateIndonesiaFeature::instance()))
        {
            ProjInvoiceJour projInvoiceJour = ProjInvoiceJour::find(custVendCorrectedInvoiceId.valueStr(), custVendCorrectedInvoiceDate);
            CustVendCreditInvoicingHelper::checkTaxInvoiceOperation_ID(reasonRefRecId, projInvoiceJour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlCreditInvoicing</Name>
				<Source><![CDATA[
    public void controlCreditInvoicing(boolean  _posted)
    {
        if (_posted)
        {
            custVendCorrectedInvoiceId.allowEdit(false);
            custVendCorrectiveReason.allowEdit(false);
            editReasonCode.allowEdit(false);
            editReasonComment.allowEdit(false);
            creditInvoicingDisabled = true;
        }
        else
        {
            custVendCorrectedInvoiceId.allowEdit(true);
            custVendCorrectiveReason.allowEdit(true);
            editReasonCode.allowEdit(true);
            editReasonComment.allowEdit(true);
            creditInvoicingDisabled = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reason code.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that specifies whether the a new reason code should be set.
    /// </param>
    /// <param name="_reasonCode">
    /// The new reason code when <paramref name="_set" /> is true.
    /// </param>
    /// <returns>
    /// The reason code of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonCode editReasonCode(boolean _set, ReasonCode _reasonCode)
    {
        ReasonCode reasonCode = _reasonCode;

        if (_set)
        {
            // If the ReasonRefRecID is 0, then create a new ReasonTableRef record; otherwise, update the existing record.
            if (reasonRefRecId == 0)
            {
                reasonRefRecId = ReasonTableRef::createFromCode(reasonCode);
            }
            else
            {
                reasonRefRecId = ReasonTableRef::updateCode(reasonCode, reasonRefRecId);
            }

            // Updated the reason comment with the default value for the updated reason code
            this.editReasonComment(_set,ReasonTable::find(reasonCode).Description);
        }
        else
        {
            reasonCode = ReasonTableRef::find(reasonRefRecId).Reason;
        }

        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the reason comment.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that specifies whether a new reason comment should be set.
    /// </param>
    /// <param name="_reasonComment">
    /// The new reason comment when <paramref name="_set" /> is true.
    /// </param>
    /// <returns>
    /// The reason comment of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonComment editReasonComment(boolean _set, ReasonComment _reasonComment)
    {
        ReasonComment reasonComment = _reasonComment;

        if (_set)
        {
            // If the ReasonRefRecID is 0, then create a new ReasonTableRef record
            // otherwise, update the existing record.
            if (reasonRefRecId == 0)
            {
                reasonRefRecId = ReasonTableRef::createFromComment(reasonComment);
            }
            else
            {
                reasonRefRecId = ReasonTableRef::updateComment(reasonComment,reasonRefRecId);
            }
        }

        if (reasonRefRecId)
        {
            reasonComment = ReasonTableRef::find(reasonRefRecId).ReasonComment;
        }

        return reasonComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        if (!element.args().dataset())
        {
            throw error("@SYS79604");
        }

        callerTable = element.args().record();

        super();

        boolean isESContext = SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoES ]);
        boolean isBEOrESContext = SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoBE, #isoES ]);

        CustVendCorrectiveReasonCode.visible(isESContext);

        if (CustVendCreditInvoicingEnableCorrectionMethodParameter_BEFlight::instance().isEnabled())
        {
            CustVendCorrectiveReasonMethod.visible(isBEOrESContext);
        }
        else
        {
            CustVendCorrectiveReasonMethod.visible(isESContext);
        }

        CustVendCorrectiveReason.visible(SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoES, #isoSE, #isoPL ]));
        editReasonCode.visible(!CustVendCorrectiveReason.visible());
        editReasonComment.visible(!CustVendCorrectiveReason.visible());

        this.callerTable(callerTable);

        switch (callerTable.TableId)
        {
            case tablenum(ProjInvoiceItemDetail):
            case tablenum(ProjInvoiceOnAccDetail):
            case tablenum(ProjInvoiceEmplDetail):
            case tablenum(ProjInvoiceRevenueDetail):
            case tablenum(ProjInvoiceCostDetail):
                custVendCreditInvoicingTable  = CustVendCreditInvoicingTable::findRefId(callerTable.TableId, projRefRecId);
                break;
            default:
                custVendCreditInvoicingTable = CustVendCreditInvoicingTable::findRefId(callerTable.TableId, callerTable.RecId);
                break;
        }

        custVendCreditInvoicingLine = CustVendCreditInvoicingLine::findRefId(callerTable.TableId, callerTable.RecId);

        if (custVendCreditInvoicingTable)
        {
            custVendCorrectedInvoiceId.text(custVendCreditInvoicingTable.CustVendCorrectedInvoiceId);
            custVendCorrectiveReason.text(custVendCreditInvoicingTable.CustVendCorrectiveReason);
            CustVendCorrectiveReasonCode.selection(custVendCreditInvoicingTable.CustVendCorrectiveReasonCode);
            CustVendCorrectiveReasonMethod.selection(custVendCreditInvoicingTable.CustVendCorrectiveReasonMethod);
        }

        if (custVendCreditInvoicingLine)
        {
            custVendCorrectiveReason.text(custVendCreditInvoicingLine.CustVendCorrectiveReason);
            CustVendCorrectiveReasonCode.selection(custVendCreditInvoicingLine.CustVendCorrectiveReasonCode);
            CustVendCorrectiveReasonMethod.selection(custVendCreditInvoicingLine.CustVendCorrectiveReasonMethod);
        }

        reasonRefRecID = custVendCreditInvoicingTable.ReasonRefRecID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projRelatedRecId</Name>
				<Source><![CDATA[
    void projRelatedRecId(RefRecId _recId)
    {
        projRefRecId = _recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCreditInvoicing</Name>
				<Source><![CDATA[
    public void updateCreditInvoicing()
    {
        ttsbegin;
        switch (callerTable.TableId)
        {
            case tablenum(ProjInvoiceItemDetail):
            case tablenum(ProjInvoiceOnAccDetail):
            case tablenum(ProjInvoiceEmplDetail):
            case tablenum(ProjInvoiceRevenueDetail):
            case tablenum(ProjInvoiceCostDetail):
                custVendCreditInvoicingTable = CustVendCreditInvoicingTable::findRefId(callerTable.TableId, projRefRecId, true);
            break;
            default:
                custVendCreditInvoicingTable = CustVendCreditInvoicingTable::findRefId(callerTable.TableId, callerTable.RecId, true);
                break;
        }

        int currentCorrectiveReasonCode = CustVendCorrectiveReasonCode.selection();
        int currentCorrectiveReasonMethod =  CustVendCorrectiveReasonMethod.selection();

        if (custVendCreditInvoicingTable)
        {
            if (custVendCorrectedInvoiceId.valueStr() != custVendCreditInvoicingTable.CustVendCorrectedInvoiceId
                || custVendCorrectiveReason.valueStr() != custVendCreditInvoicingTable.CustVendCorrectiveReason
                || reasonRefRecId != custVendCreditInvoicingTable.ReasonRefRecID
                || currentCorrectiveReasonCode != custVendCreditInvoicingTable.CustVendCorrectiveReasonCode
                || currentCorrectiveReasonMethod != custVendCreditInvoicingTable.CustVendCorrectiveReasonMethod)
            {
                if (!custVendCorrectedInvoiceId.valueStr()
                    && !custVendCorrectiveReason.valueStr()
                    && !reasonRefRecId
                    && !currentCorrectiveReasonCode
                    && !currentCorrectiveReasonMethod)
                {
                    custVendCreditInvoicingTable.delete();
                }
                else
                {
                    custVendCreditInvoicingTable.CustVendCorrectedInvoiceId = custVendCorrectedInvoiceId.valueStr();
                    custVendCreditInvoicingTable.CustVendCorrectiveReason = custVendCorrectiveReason.valueStr();
                    custVendCreditInvoicingTable.CustVendCorrectedInvoiceDate = custVendCorrectedInvoiceDate;
                    custVendCreditInvoicingTable.ReasonRefRecID = reasonRefRecId;
                    custVendCreditInvoicingTable.CustVendCorrectiveReasonCode = currentCorrectiveReasonCode;
                    custVendCreditInvoicingTable.CustVendCorrectiveReasonMethod = currentCorrectiveReasonMethod;
                    custVendCreditInvoicingTable.update();
                }
            }
        }
        else
        {
            custVendCreditInvoicingLine = CustVendCreditInvoicingLine::findRefId(callerTable.TableId, callerTable.RecId, true);

            if (custVendCreditInvoicingLine)
            {
                if (custVendCorrectiveReason.valueStr() != custVendCreditInvoicingLine.CustVendCorrectiveReason
                    || currentCorrectiveReasonCode != custVendCreditInvoicingLine.CustVendCorrectiveReasonCode
                    || currentCorrectiveReasonMethod != custVendCreditInvoicingLine.CustVendCorrectiveReasonMethod)
                {
                    if (!custVendCorrectiveReason.valueStr()
                        && !currentCorrectiveReasonCode
                        && !currentCorrectiveReasonMethod)
                    {
                        custVendCreditInvoicingLine.delete();
                    }
                    else
                    {
                        custVendCreditInvoicingLine.CustVendCorrectiveReason = custVendCorrectiveReason.valueStr();
                        custVendCreditInvoicingLine.CustVendCorrectiveReasonCode = currentCorrectiveReasonCode;
                        custVendCreditInvoicingLine.CustVendCorrectiveReasonMethod = currentCorrectiveReasonMethod;
                        custVendCreditInvoicingLine.update();
                    }
                }
            }
            else
            {
                if (custVendCorrectedInvoiceId.valueStr()
                    || custVendCorrectiveReason.valueStr()
                    || reasonRefRecId
                    || currentCorrectiveReasonCode
                    || currentCorrectiveReasonMethod)
                {
                    switch (callerTable.TableId)
                    {
                        case tablenum(SalesTable):
                        case tablenum(PurchTable):
                        case tablenum(LedgerJournalTrans):
                        case tablenum(CustInvoiceTable):
                            custVendCreditInvoicingTable.CustVendInvoiceAccount = custVendAccount;
                            custVendCreditInvoicingTable.AccountType = custVendAccountType;
                            custVendCreditInvoicingTable.CustVendCorrectedInvoiceId = custVendCorrectedInvoiceId.valueStr();
                            custVendCreditInvoicingTable.CustVendCorrectiveReason = custVendCorrectiveReason.valueStr();
                            custVendCreditInvoicingTable.CustVendCorrectiveReasonCode = currentCorrectiveReasonCode;
                            custVendCreditInvoicingTable.CustVendCorrectiveReasonMethod = currentCorrectiveReasonMethod;
                            custVendCreditInvoicingTable.RefTableId = callerTable.TableId;
                            custVendCreditInvoicingTable.RefRecId = callerTable.RecId;
                            custVendCreditInvoicingTable.CustVendCorrectedInvoiceDate = custVendCorrectedInvoiceDate;
                            custVendCreditInvoicingTable.ReasonRefRecID = reasonRefRecId;
                            custVendCreditInvoicingTable.insert();

                            break;
                        case tablenum(SalesLine):
                        case tablenum(PurchLine):
                        case tablenum(CustInvoiceLine):
                            custVendCreditInvoicingLine.CustVendInvoiceAccount     = custVendAccount;
                            custVendCreditInvoicingLine.AccountType                = custVendAccountType;
                            custVendCreditInvoicingLine.CustVendCorrectiveReason   = custVendCorrectiveReason.valueStr();
                            custVendCreditInvoicingLine.CustVendCorrectiveReasonCode = currentCorrectiveReasonCode;
                            custVendCreditInvoicingLine.CustVendCorrectiveReasonMethod = currentCorrectiveReasonMethod;
                            custVendCreditInvoicingLine.RefTableId                 = callerTable.TableId;
                            custVendCreditInvoicingLine.RefRecId                   = callerTable.RecId;
                            custVendCreditInvoicingLine.insert();
                            break;
                        case tablenum(ProjInvoiceItemDetail):
                        case tablenum(ProjInvoiceCostDetail):
                        case tablenum(ProjInvoiceEmplDetail):
                        case tablenum(ProjInvoiceRevenueDetail):
                        case tablenum(ProjInvoiceOnAccDetail):
                            custVendCreditInvoicingTable.CustVendInvoiceAccount     = custVendAccount;
                            custVendCreditInvoicingTable.AccountType                = custVendAccountType;
                            custVendCreditInvoicingTable.CustVendCorrectedInvoiceId = custVendCorrectedInvoiceId.valueStr();
                            custVendCreditInvoicingTable.CustVendCorrectiveReason   = custVendCorrectiveReason.valueStr();
                            custVendCreditInvoicingTable.CustVendCorrectiveReasonCode = currentCorrectiveReasonCode;
                            custVendCreditInvoicingTable.CustVendCorrectiveReasonMethod = currentCorrectiveReasonMethod;
                            custVendCreditInvoicingTable.RefTableId                 = callerTable.TableId;
                            custVendCreditInvoicingTable.RefRecId                   = projRefRecId;
                            custVendCreditInvoicingTable.CustVendCorrectedInvoiceDate = custVendCorrectedInvoiceDate;
                            custVendCreditInvoicingTable.ReasonRefRecID = reasonRefRecId;
                            custVendCreditInvoicingTable.insert();

                            break;
                    }
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>CustVendCorrectedInvoiceId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
                public void lookup()
        {
            CustVendTransData::correctedInvoiceLookup(custVendCorrectedInvoiceId, callerTable, custVendAccount, custVendAccountType);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CustVendCorrectiveReasonCode</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            CustVendCorrectiveReasonCode newValue = this.selection();

            if (newValue != CustVendCorrectiveReasonCode::None)
            {
                CustVendCorrectiveReason.text(strFmt('%1', newValue));
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>editReasonCode</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        /// Adds the 'Go to Main Table Form' option to the context menu for reason code field.
        /// </summary>
        public void jumpRef()
        {
            //Pass the account type of Fixed Assets, so that the relevant form shows.
            ReasonTable::jumpRef(ReasonCodeAccountTypeAll::Cust);
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Opens fitered reason code lookup.
        /// </summary>
        public void lookup()
        {
            ReasonFormTable::reasonCodeLookup(this,LedgerJournalACType::Cust,LedgerJournalACType::Cust,true);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Redraws the form as the reason code field is modified.
        /// </summary>
        /// <returns>
        /// A boolean indicating whether the field was modified or not.
        /// </returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OK</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
                void clicked()
        {
            if (!creditInvoicingDisabled)
            {
                element.checkInvoiceSelected();

                element.updateCreditInvoicing();
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@SYS99718</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<StatusBarStyle xmlns="">SimpleWithoutClose</StatusBarStyle>
		<Style xmlns="">Dialog</Style>
		<WindowResize xmlns="">Fixed</WindowResize>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ContentGroup1</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CustVendCorrectedInvoiceId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>805306367</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>CustVendCorrectedInvoiceId</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>CustVendCorrectiveReasonCode</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<EnumType>CustVendCorrectiveReasonCode</EnumType>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CustVendCorrectiveReason</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>CustVendCorrectiveReason</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>CustVendCorrectiveReasonMethod</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<EnumType>CustVendCorrectiveReasonMethod</EnumType>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>editReasonCode</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>editReasonCode</DataMethod>
						<Label>@SYS111246</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>editReasonComment</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>editReasonComment</DataMethod>
						<Label>@SYS114149</Label>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1879048190</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Top>0</Top>
				<TopMode>BottomEdge</TopMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OK</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Cancel</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>