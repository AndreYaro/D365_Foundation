<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>EcoResAttributeType</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class EcoResAttributeType extends FormRun implements OfficeIMenuCustomizer
{
    boolean             pcContext;
    // when one Bound is updated, should the other be updated as well (because it has been implicitly changed)?
    boolean             updateOtherBound;
}
]]></Source>
			</Method>
			<Method>
				<Name>createBoundedValue</Name>
				<Source><![CDATA[
    public void createBoundedValue()
    {
        EcoResIntValue newEcoResIntValue;
        EcoResFloatValue newEcoResFloatValue;
        EcoResCurrencyValue newEcoResCurrencyValue;
        EcoResDateTimeValue newEcoResDateTimeValue;
        EcoResBoundedAttributeTypeValue newEcoResBoundedAttributeTypeValue;
        UnitOfMeasure unitOfMeasure;
        #CatConstants


        switch (ecoResAttributeType.DataType)
        {
            case AttributeDataType::Integer:
                newEcoResBoundedAttributeTypeValue.clear();
                newEcoResBoundedAttributeTypeValue.AttributeType = ecoResAttributeType.RecId;

                // Lower bound
                newEcoResIntValue.clear();
                if (ecoResAttributeTypeUnitOfMeasure.RecId)
                {
                    unitOfMeasure = UnitOfMeasure::find(ecoResAttributeTypeUnitOfMeasure.DefaultUnitOfMeasure);
                    newEcoResIntValue.IntUnitOfMeasure = unitOfMeasure.RecId;
                }
                newEcoResIntValue.IntValue = #AttributeTypeLowerBoundDefaultValue;
                newEcoResIntValue.insert();
                newEcoResBoundedAttributeTypeValue.LowerBound = newEcoResIntValue.RecId;

                // Upper bound
                newEcoResIntValue.clear();
                if (ecoResAttributeTypeUnitOfMeasure.RecId)
                {
                    unitOfMeasure = UnitOfMeasure::find(ecoResAttributeTypeUnitOfMeasure.DefaultUnitOfMeasure);
                    newEcoResIntValue.IntUnitOfMeasure = unitOfMeasure.RecId;
                }
                newEcoResIntValue.IntValue = #AttributeTypeUpperBoundDefaultValue;
                newEcoResIntValue.insert();
                newEcoResBoundedAttributeTypeValue.UpperBound = newEcoResIntValue.RecId;

                newEcoResBoundedAttributeTypeValue.insert();

                break;
            case AttributeDataType::Decimal:
                newEcoResBoundedAttributeTypeValue.clear();
                newEcoResBoundedAttributeTypeValue.AttributeType = ecoResAttributeType.RecId;

                // Lower bound
                newEcoResFloatValue.clear();
                if (ecoResAttributeTypeUnitOfMeasure.RecId)
                {
                    unitOfMeasure = UnitOfMeasure::find(ecoResAttributeTypeUnitOfMeasure.DefaultUnitOfMeasure);
                    newEcoResFloatValue.FloatUnitOfMeasure = unitOfMeasure.RecId;
                }
                newEcoResFloatValue.FloatValue = #AttributeTypeLowerBoundDefaultValue;
                newEcoResFloatValue.insert();
                newEcoResBoundedAttributeTypeValue.LowerBound = newEcoResFloatValue.RecId;

                // Upper bound
                newEcoResFloatValue.clear();
                if (ecoResAttributeTypeUnitOfMeasure.RecId)
                {
                    unitOfMeasure = UnitOfMeasure::find(ecoResAttributeTypeUnitOfMeasure.DefaultUnitOfMeasure);
                    newEcoResFloatValue.FloatUnitOfMeasure = unitOfMeasure.RecId;
                }
                newEcoResFloatValue.FloatValue = #AttributeTypeUpperBoundDefaultValue;
                newEcoResFloatValue.insert();
                newEcoResBoundedAttributeTypeValue.UpperBound = newEcoResFloatValue.RecId;

                newEcoResBoundedAttributeTypeValue.insert();

                break;
            case AttributeDataType::DateTime:
                newEcoResBoundedAttributeTypeValue.clear();
                newEcoResBoundedAttributeTypeValue.AttributeType = ecoResAttributeType.RecId;

                // Lower bound
                newEcoResDateTimeValue.clear();
                newEcoResDateTimeValue.DateTimeValue = DateTimeUtil::minValue();
                newEcoResDateTimeValue.insert();
                newEcoResBoundedAttributeTypeValue.LowerBound = newEcoResDateTimeValue.RecId;

                // Upper bound
                newEcoResDateTimeValue.clear();
                newEcoResDateTimeValue.DateTimeValue = DateTimeUtil::maxValue();
                newEcoResDateTimeValue.insert();
                newEcoResBoundedAttributeTypeValue.UpperBound = newEcoResDateTimeValue.RecId;

                newEcoResBoundedAttributeTypeValue.insert();

                break;
            case AttributeDataType::Currency:
                newEcoResBoundedAttributeTypeValue.clear();
                newEcoResBoundedAttributeTypeValue.AttributeType = ecoResAttributeType.RecId;

                // Lower bound
                newEcoResCurrencyValue.clear();
                newEcoResCurrencyValue.CurrencyCode = CompanyInfoHelper::standardCurrency();
                newEcoResCurrencyValue.CurrencyValue = #AttributeTypeLowerBoundDefaultValue;
                newEcoResCurrencyValue.insert();
                newEcoResBoundedAttributeTypeValue.LowerBound = newEcoResCurrencyValue.RecId;

                // Upper bound
                newEcoResCurrencyValue.clear();
                newEcoResCurrencyValue.CurrencyCode = CompanyInfoHelper::standardCurrency();
                newEcoResCurrencyValue.CurrencyValue = #AttributeTypeUpperBoundDefaultValue;
                newEcoResCurrencyValue.insert();
                newEcoResBoundedAttributeTypeValue.UpperBound = newEcoResCurrencyValue.RecId;

                newEcoResBoundedAttributeTypeValue.insert();

                break;
            default:
                if (!this.createBoundedValueDefault())
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>customizeMenuOptions</Name>
				<Source><![CDATA[
    public void customizeMenuOptions(OfficeMenuOptions _menuOptions)
    {
        _menuOptions.dataEntityOptions().addEnd(OfficeMenuDataEntityOptions::construct(dataentityviewstr(EcoResProductAttributeEnumerationValueTypeV3Entity)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBoundedValueDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Create bounded values based for default <c>AttributeDataType</c>.
    /// </summary>
    [Replaceable]
    protected boolean createBoundedValueDefault()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIntegerSetValue</Name>
				<Source><![CDATA[
    public void createIntegerSetValue()
    {
        EcoResEnumerationAttributeTypeValue newEcoResIntegerSetAttributeTypeValue;
        EcoResIntValue newEcoResIntValue;

        ttsbegin;

        // Create enumeration
        newEcoResIntegerSetAttributeTypeValue = ecoResIntegerSetAttributeTypeValue_ds.cursor();
        newEcoResIntegerSetAttributeTypeValue.setNextOrdinalNumber();

        // Create Text Value
        newEcoResIntValue = ecoResValueIntegerSet_ds.cursor();
        newEcoResIntValue.IntValue = newEcoResIntegerSetAttributeTypeValue.OrdinalNumber;
        newEcoResIntValue.insert();

        // Init enumeration
        newEcoResIntegerSetAttributeTypeValue.Value = newEcoResIntValue.RecId;
        newEcoResIntegerSetAttributeTypeValue.insert();

        ttscommit;

        // Refresh UI - executeQuery does more than unnecessary, is more expensive,
        //   and has the side effect of not being able to keep current position
        ecoResIntegerSetAttributeTypeValue_ds.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcEnumerationValueUniqueCheckMaxRetries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the number of maximum retries when trying to fix a unique enumeration value in
    /// product configuration context.
    /// </summary>
    /// <returns>The number of maximum retries.</returns>
    protected int pcEnumerationValueUniqueCheckMaxRetries()
    {
        return 20;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEnumeration</Name>
				<Source><![CDATA[
    public void createEnumeration()
    {
        EcoResEnumerationAttributeTypeValue newEcoResEnumerationAttributeTypeValue;
        EcoResTextValue newEcoResTextValue;
        
        ttsbegin;

        // Create enumeration
        newEcoResEnumerationAttributeTypeValue = ecoResEnumerationAttributeTypeValue_ds.cursor();
        newEcoResEnumerationAttributeTypeValue.setNextOrdinalNumber();

        AttributeValueText newEnumerationTextValue = strFmt("%1", newEcoResEnumerationAttributeTypeValue.OrdinalNumber);

        if (pcContext)
        {
            int numberOfRetries;

            while (newEcoResEnumerationAttributeTypeValue.existDuplicate(newEnumerationTextValue)
                && numberOfRetries < this.pcEnumerationValueUniqueCheckMaxRetries())
            {
                newEnumerationTextValue = '_' + newEnumerationTextValue;
                numberOfRetries++;
            }
        }

        // Create Text Value
        newEcoResTextValue = ecoResValueEnumeration_ds.cursor();
        newEcoResTextValue.TextValue = newEnumerationTextValue;
        newEcoResTextValue.insert();

        // Init enumeration
        newEcoResEnumerationAttributeTypeValue.Value = newEcoResTextValue.RecId;
        if (newEcoResEnumerationAttributeTypeValue.checkDuplicate(newEcoResTextValue.TextValue))
        {
            newEcoResEnumerationAttributeTypeValue.insert();
        }

        ttscommit;

        // Refresh UI - executeQuery does more than unnecessary, is more expensive,
        //   and has the side effect of not being able to keep current position
        ecoResEnumerationAttributeTypeValue_ds.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCodeChanged</Name>
				<Source><![CDATA[
    public void currencyCodeChanged()
    {
        // Update the currency foreign key
        ecoResValueUpper_EcoResCurrencyValue.CurrencyCode = currencyCode.text();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyRangeTabPageSetVisible</Name>
				<Source><![CDATA[
    public void currencyRangeTabPageSetVisible(boolean _visible = true)
    {
        if (_visible)
        {
            if (!currencyRangeTabPage.visible())
            {
                element.makeVisible(currencyRangeTabPage);
                currencyRangeTabPage.expand();
            }
        }
        else
        {
            if (currencyRangeTabPage.visible())
            {
                currencyRangeTabPage.visible(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataTypeChanged</Name>
				<Source><![CDATA[
    public void dataTypeChanged()
    {
        boolean validateWrite = true;

        if (!ecoResAttributeType)
        {
            validateWrite = ((strLTrim(ecoResAttributeType.name) != '') & ecoResAttributeType_ds.validateWrite());

            if (validateWrite)
            {
                // Save the EcoResAttributeType new record
                ecoResAttributeType_ds.cursor().insert();
            }
        }

        if (validateWrite)
        {
            this.maintainUnitOfMeasure();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateRangeTabPageSetVisible</Name>
				<Source><![CDATA[
    public void dateRangeTabPageSetVisible(boolean _visible = true)
    {
        if (_visible)
        {
            if (!dateRangeTabPage.visible())
            {
                element.makeVisible(dateRangeTabPage);
                dateRangeTabPage.expand();
            }
        }
        else
        {
            if (dateRangeTabPage.visible())
            {
                dateRangeTabPage.visible(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>decimalRangeTabPageSetVisible</Name>
				<Source><![CDATA[
    public void decimalRangeTabPageSetVisible(boolean _visible = true)
    {
        if (_visible)
        {
            if (!decimalRangeTabPage.visible())
            {
                element.makeVisible(decimalRangeTabPage);
                decimalRangeTabPage.expand();
            }
        }
        else
        {
            if (decimalRangeTabPage.visible())
            {
                decimalRangeTabPage.visible(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBoundedValue</Name>
				<Source><![CDATA[
    public void deleteBoundedValue()
    {
        ecoResBoundedAttributeTypeValue.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enumerationTabPageSetVisible</Name>
				<Source><![CDATA[
    public void enumerationTabPageSetVisible(boolean _visible = true)
    {
        if (_visible)
        {
            if (!enumerationTabPage.visible())
            {
                element.makeVisible(enumerationTabPage);
                enumerationTabPage.expand();
            }
        }
        else
        {
            if (enumerationTabPage.visible())
            {
                enumerationTabPage.visible(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        xArgs args;
        QueryBuildDataSource    qbds;

        super();

        // if the form is opened from a Product Configuration form the solver values column
        // must be shown for text enums
        args = element.args();

        if (args != null && args.caller() != null)
        {
            pcContext = (args.caller().name() == formStr(PCProductConfigurationModelDetails)  ||
                         args.caller().name() == formStr(PCProductConfigurationModelListPage) ||
                         args.caller().name() == formStr(PCTableConstraintContentUserDef)     ||
                         args.caller().name() == formStr(PCGlobalTableConstraintEdit)         ||
                         args.caller().name() == formStr(PCProductConfigurationModelWorkspace)||
                         args.caller().name() == formStr(PCTableConstraintWizard));

            pcEditSolverValue.enabled(pcContext);
            pcEditSolverValue.visible(pcContext);
            pcEditSolverValue.mandatory(pcContext);
        }

        // add the OrdinalNumber field as a sort Field in the EcoResEnumerationAttributeTypeValue data source
        qbds = ecoResEnumerationAttributeTypeValue_ds.queryBuildDataSource();
        qbds.addSortField(fieldNum(EcoResEnumerationAttributeTypeValue, OrdinalNumber));

        // add the OrdinalNumber field as a sort Field in the EcoResIntegerSetAttributeTypeValue data source
        qbds = ecoResIntegerSetAttributeTypeValue_ds.queryBuildDataSource();
        qbds.addSortField(fieldNum(EcoResEnumerationAttributeTypeValue, OrdinalNumber));
    }

]]></Source>
			</Method>
			<Method>
				<Name>integerSetTabPageSetVisible</Name>
				<Source><![CDATA[
    public void integerSetTabPageSetVisible(boolean _visible = true)
    {
        if (_visible)
        {
            if (!integerSetTabPage.visible())
            {
                element.makeVisible(integerSetTabPage);
                integerSetTabPage.expand();
            }
        }
        else
        {
            if (integerSetTabPage.visible())
            {
                integerSetTabPage.visible(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>integerRangeTabPageSetVisible</Name>
				<Source><![CDATA[
    public void integerRangeTabPageSetVisible(boolean _visible = true)
    {
        if (_visible)
        {
            if (!integerRangeTabPage.visible())
            {
                element.makeVisible(integerRangeTabPage);
                integerRangeTabPage.expand();
            }
        }
        else
        {
            if (integerRangeTabPage.visible())
            {
                integerRangeTabPage.visible(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>maintainUnitOfMeasure</Name>
				<Source><![CDATA[
    protected void maintainUnitOfMeasure()
    {
        EcoResAttributeTypeUnitOfMeasure newEcoResAttributeTypeUnitOfMeasure;

        if (!ecoResAttributeTypeUnitOfMeasure)
        {
            switch (ecoResAttributeType.DataType)
            {
                case AttributeDataType::Integer:
                // Fall through
                case AttributeDataType::Decimal:
                    newEcoResAttributeTypeUnitOfMeasure.clear();
                    newEcoResAttributeTypeUnitOfMeasure.AttributeType = ecoResAttributeType.RecId;
                    newEcoResAttributeTypeUnitOfMeasure.insert();
                    break;
            }

            ecoResAttributeTypeUnitOfMeasure_ds.executeQuery();
        }
        else
        {
            this.deleteEcoResAttributeTypeUnitOfMeasure(ecoResAttributeType.DataType);
            ecoResAttributeTypeUnitOfMeasure_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEcoResAttributeTypeUnitOfMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes the contents of a table based on <c>AttributeDataType</c>.
    /// </summary>
    /// <param name = "_dataType">
    ///     An attribute data type.
    /// </param>
    protected void deleteEcoResAttributeTypeUnitOfMeasure(AttributeDataType _dataType)
    {
        switch (_dataType)
        {
            case AttributeDataType::Currency:
            // Fall through
            case AttributeDataType::DateTime:
            // Fall through
            case AttributeDataType::Text:
            // Fall through
            case AttributeDataType::TrueFalse:
            // Fall through
            case AttributeDataType::Reference:
                ecoResAttributeTypeUnitOfMeasure.delete();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeVisible</Name>
				<Source><![CDATA[
    private void makeVisible(FormControl _theControl)
    {
        // must call control.update() after making control visible to redraw new values
        // - data for the control may have changed while it was invisible
        //   (which hadn't triggered update/redraw)
        _theControl.visible(true);
        _theControl.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBoundedRangeState</Name>
				<Source><![CDATA[
    public void setBoundedRangeState()
    {
        if (ecoResBoundedAttributeTypeValue)
        {
            isBounded_CheckBox.enabled(true);
            isBounded_CheckBox.value(1);
        }
        else
        {
            isBounded_CheckBox.value(0);
        }

        // Enable / disable user controls based on EcoResAttributeType data type
        switch (ecoResAttributeType.DataType)
        {
            case AttributeDataType::Integer:
                if (GeneralGroup_IsEnumeration.value())
                {
                    GeneralGroup_IsEnumeration.enabled(true);
                    isBounded_CheckBox.value(false);
                    isBounded_CheckBox.enabled(false);
                    this.integerSetTabPageSetVisible(true);
                    this.integerRangeTabPageSetVisible(false);
                    this.decimalRangeTabPageSetVisible(false);
                    this.dateRangeTabPageSetVisible(false);
                    this.currencyRangeTabPageSetVisible(false);
                    break;
                }
                isBounded_CheckBox.enabled(true);
                if (isBounded_CheckBox.value())
                {
                    this.integerRangeTabPageSetVisible(true);
                    GeneralGroup_IsEnumeration.enabled(false);
                }
                else
                {
                    this.integerRangeTabPageSetVisible(false);
                    GeneralGroup_IsEnumeration.enabled(true);
                }
                this.integerSetTabPageSetVisible(false);
                this.decimalRangeTabPageSetVisible(false);
                this.dateRangeTabPageSetVisible(false);
                this.currencyRangeTabPageSetVisible(false);
                break;
            case AttributeDataType::Currency:
                isBounded_CheckBox.enabled(true);
                this.currencyRangeTabPageSetVisible(isBounded_CheckBox.value());

                this.integerRangeTabPageSetVisible(false);
                this.decimalRangeTabPageSetVisible(false);
                this.dateRangeTabPageSetVisible(false);
                this.integerSetTabPageSetVisible(false);
                break;
            case AttributeDataType::DateTime:
                isBounded_CheckBox.enabled(true);
                this.dateRangeTabPageSetVisible(isBounded_CheckBox.value());

                this.integerRangeTabPageSetVisible(false);
                this.decimalRangeTabPageSetVisible(false);
                this.currencyRangeTabPageSetVisible(false);
                this.integerSetTabPageSetVisible(false);
                break;
            case AttributeDataType::Decimal:
                isBounded_CheckBox.enabled(true);
                this.decimalRangeTabPageSetVisible(isBounded_CheckBox.value());

                this.integerRangeTabPageSetVisible(false);
                this.dateRangeTabPageSetVisible(false);
                this.currencyRangeTabPageSetVisible(false);
                this.integerSetTabPageSetVisible(false);
                break;
            default:
                isBounded_CheckBox.enabled(false);
                this.integerRangeTabPageSetVisible(false);
                this.decimalRangeTabPageSetVisible(false);
                this.dateRangeTabPageSetVisible(false);
                this.currencyRangeTabPageSetVisible(false);
                this.integerSetTabPageSetVisible(false);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnumerationState</Name>
				<Source><![CDATA[
    public void setEnumerationState()
    {
        if (AttributeDataTypeDiscriminator::checkAttributeDataTypeText(ecoResAttributeType.DataType))
        {
            generalGroup_IsEnumeration.enabled(true);
            this.enumerationTabPageSetVisible(ecoResAttributeType.IsEnumeration);
            this.integerSetTabPageSetVisible(false);
        }
        else if (AttributeDataTypeDiscriminator::checkAttributeDataTypeInteger(ecoResAttributeType.DataType))
        {         
            generalGroup_IsEnumeration.enabled(true);
            this.enumerationTabPageSetVisible(false);

            if (ecoResAttributeType.IsEnumeration)
            {
                this.integerSetTabPageSetVisible(true);
            }
            else
            {
                this.integerSetTabPageSetVisible(false);
            }
        }
        else
        {
            ecoResAttributeType.IsEnumeration = false;
            generalGroup_IsEnumeration.enabled(false);
            this.enumerationTabPageSetVisible(false);
            this.integerSetTabPageSetVisible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUnitOfMeasureState</Name>
				<Source><![CDATA[
    public void setUnitOfMeasureState(boolean _unitUpdated = false)
    {
        UnitOfMeasure unitOfMeasure;

        if (ecoResAttributeType.DataType == AttributeDataType::Integer ||
            ecoResAttributeType.DataType == AttributeDataType::Decimal)
        {
            unitOfMeasureGroup.visible(true);

            if (ecoResAttributeTypeUnitOfMeasure &&
                ecoResBoundedAttributeTypeValue)
            {
                if (_unitUpdated && ecoResAttributeTypeUnitOfMeasure.DefaultUnitOfMeasure)
                {
                    unitOfMeasure = UnitOfMeasure::find(ecoResAttributeTypeUnitOfMeasure.DefaultUnitOfMeasure);

                    // Set the unit of measure foreign keys
                    if (ecoResAttributeType.DataType == AttributeDataType::Integer)
                    {
                        if (ecoResValueLower_EcoResIntValue.RecId)
                        {
                            ecoResValueLower_EcoResIntValue.IntUnitOfMeasure = unitOfMeasure.RecId;
                            ecoResValueLower_EcoResIntValue.write();
                        }
                        if (ecoResValueUpper_EcoResIntValue.RecId)
                        {
                            ecoResValueUpper_EcoResIntValue.IntUnitOfMeasure = unitOfMeasure.RecId;
                            ecoResValueUpper_EcoResIntValue.write();
                        }
                    }
                    else if (ecoResAttributeType.DataType == AttributeDataType::Decimal)
                    {
                        if (ecoResValueLower_EcoResFloatValue.RecId)
                        {
                            ecoResValueLower_EcoResFloatValue.FloatUnitOfMeasure = unitOfMeasure.RecId;
                            ecoResValueLower_EcoResFloatValue.write();
                        }
                        if (ecoResValueUpper_EcoResFloatValue.RecId)
                        {
                            ecoResValueUpper_EcoResFloatValue.FloatUnitOfMeasure = unitOfMeasure.RecId;
                            ecoResValueLower_EcoResFloatValue.write();
                        }
                    }
                }
            }
        }
        else
        {
            unitOfMeasureGroup.visible(false);
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>EcoResAttributeType</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            QueryBuildDataSource qbds;
            QueryBuildRange qbr;

            super();

            qbds = ecoResAttributeType_ds.query().dataSourceTable(tableNum(EcoResAttributeType));

            if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
            {
                qbr = qbds.addRange(fieldNum(EcoResAttributeType, IsHidden));
                qbr.value(queryValue(NoYes::No));
                qbr.status(RangeStatus::Hidden);
                qbds.addRange(fieldNum(EcoResAttributeType, Name));
            }

            qbds.addOrderByField(fieldNum(EcoResAttributeType, Name));
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged()
        {
            super();

            ecoResBoundedAttributeTypeValue_ds.executeQuery();
            ecoResValueLower_ds.executeQuery();
            ecoResValueUpper_ds.executeQuery();
            element.setEnumerationState();
            element.setBoundedRangeState();
            element.setUnitOfMeasureState();

            if (generalGroup_Name.valueStr())
            {
                quickFilterControl.setFocus();
            }
            else
            {
                generalGroup_Name.setFocus();
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>DataType</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.dataTypeChanged();
                element.setEnumerationState();
                element.setUnitOfMeasureState();
                element.setBoundedRangeState();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>IsEnumeration</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.setEnumerationState();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>EcoResAttributeTypeUnitOfMeasure</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            super();

            element.setUnitOfMeasureState(true);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>EcoResBoundedAttributeTypeValue</Name>
				<Methods>
					<Method>
						<Name>runQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// runs the passed query object and returns the table buffer if data found.
        /// </summary>
        /// <param name="_q">
        /// query object to be run.
        /// </param>
        /// <param name="_tableId">
        /// table ID of a particular value table, for which queryRun object will get the data.
        /// </param>
        /// <returns>
        /// returns a table buffer of the given table if queryRun has data for it; othrwise null.
        /// </returns>
        private Common runQuery(Query _q, tableId _tableId)
        {
            QueryRun        queryRun;
            Common          common;

            queryRun        = new QueryRun(_q);
            if (queryRun.next())
            {
                common = queryRun.get(_tableId);
                return common;
            }
            return null;
        }

]]></Source>
					</Method>
					<Method>
						<Name>buildQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// Constructs a query dynamically based on the passed Table IDs and Field IDs
        /// </summary>
        /// <param name="_table1ToJoinToAttribute">
        /// tableid to join (EcoResAttributeDefaultValue or EcoResAttributeValue) with  EcoResAttribute
        /// </param>
        /// <param name="_table1FieldToMatchAttributeRecId">
        /// fieldid of the table1 to be linked with EcoResAttribute.RecId
        /// </param>
        /// <param name="_table1FieldToMatchTable2">
        /// field id of table1 to be linked with ( fieldNum(EcoResAttributeDefaultValue, Value) or fieldNum(EcoResAttributeValue, value) )
        /// </param>
        /// <param name="_table2ToJoinToTable1">
        /// specific *Value table id (EcoResCurrenyValue, EcoResDateTimeValue... etc) to be joined with table1
        /// </param>
        /// <param name="_table2FieldToMatchTable1">
        ///  *value table linkField id such as fieldNum(EcoResCurrencyValue, RecId) to be linked with table1
        /// </param>
        /// <param name="_rangeFieldId">
        /// fieldId of the *Value table. ex: fieldNum(EcoResCurrencyValue, Currencyvalue)
        /// </param>
        /// <param name="_lowerValue">
        /// user entered lower value for the specific type.
        /// </param>
        /// <param name="_upperValue">
        /// user entered upper value for the specific type.
        /// </param>
        /// <returns>
        /// returns the dynamic query to the caller.
        /// </returns>
        private Query buildQuery(tableId _table1ToJoinToAttribute,
                                fieldId _table1FieldToMatchAttributeRecId,
                                fieldId _table1FieldToMatchTable2,
                                tableId _table2ToJoinToTable1,
                                fieldId _table2FieldToMatchTable1,
                                fieldId _rangeFieldId,
                                anytype _lowerValue,
                                anytype _upperValue)
        {
            Query                   q;
            QueryBuildDataSource    qbdsAttribute, qbdsForTable1, qbdsForTable2;
            QueryBuildRange         range;

            q = new Query();
            qbdsAttribute = q.addDataSource(tableNum(EcoResAttribute));
            qbdsAttribute.addRange(fieldNum(EcoResAttribute, AttributeType)).value(queryValue(ecoResAttributeType.RecId));

            qbdsForTable1 = qbdsAttribute.addDataSource(_table1ToJoinToAttribute);
            qbdsForTable1.relations(false);
            qbdsForTable1.joinMode(JoinMode::InnerJoin);
            qbdsForTable1.addLink(fieldNum(EcoResAttribute, RecId), _table1FieldToMatchAttributeRecId);

            qbdsForTable2 = qbdsForTable1.addDataSource(_table2ToJoinToTable1);
            qbdsForTable2.joinMode(JoinMode::InnerJoin);
            qbdsForTable2.relations(false);
            qbdsForTable2.addLink(_table1FieldToMatchTable2, _table2FieldToMatchTable1);
            range = qbdsForTable2.addRange(_rangeFieldId);
            range.value( this.getLowerUpperRange(range, _lowerValue, _upperValue));
            return q;
        }

]]></Source>
					</Method>
					<Method>
						<Name>getLowerUpperRange</Name>
						<Source><![CDATA[
        /// <summary>
        /// Constructs the formatted range dynamically based on the passed range , lowerValue and upperValue
        /// </summary>
        /// <param name="_range">
        /// The <c>QueryBuildDataSource</c> object.
        /// </param>
        /// <param name="_lowerValue">
        /// lowerValue of AnyType to be part of the return string
        /// </param>
        /// <param name="_upperValue">
        /// lowerValue of AnyType to be part of the return string
        /// </param>
        /// <returns>
        /// return a formatted string like below
        /// ((EcoResCurrencyValue.CurrencyValue less than 10) Or (EcoResCurrencyValue.CurrencyValue greater than 20))
        /// </returns>
        private str getLowerUpperRange(QueryBuildRange _range, anytype _lowerValue, anytype _upperValue)
        {
            return strFmt(' ( (%1 < %2) || (%1 > %3) )',
                        _range.dataSource().name() + '.' + _range.fieldName(),
                        queryValue(_lowerValue),
                        queryValue(_upperValue));
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean                         lowerIncreased;
            boolean                         upperDecreased;
            boolean                         lowerGtUpper = false; // is Lower bound Greater Than Upper bound?
            str                             lowerValueError = "@SYS344144";
            str                             upperValueError = "@SYS344145";
            str                             summaryMsg;
            Query                           q;
            anytype                         anyTypeLowerValue, anyTypeUpperValue, anyTypeOrigLowerValue, anyTypeOrigUpperValue;
            anytype                         anyTypeDependentValue;// to store the existing violatng value of specific type
            anytype                         lowerBoundDefaultValue, upperBoundDefaultValue;
            TableId                         xValueTableId;  // EcoRes*Value table ID
            FieldId                         xValueRecIdFID; // EcoRes*Value table's RecId field ID
            FieldId                         xValueValueFID; // EcoRes*Value table's *Value field ID
            EcoResValue                     valueNotWithinBounds; // any value that's not within the Lower-Upper bounds
            #CatConstants

            boolean ret = false;

            /// <summary>
            ///    method builds two queries which looks like below:
            ///    First:Query  to check the violating values in EcoResAttributeDefaultValue
            ///    SELECT * FROM EcoResAttribute(EcoResAttribute_1) WHERE ((AttributeType = 5637144862))
            ///    JOIN * FROM EcoResAttributeDefaultValue(EcoResAttributeDefaultValue) ON EcoResAttribute.RecId = EcoResAttributeDefaultValue.Attribute
            ///    JOIN * FROM EcoResCurrencyValue(EcoResCurrencyValue) ON EcoResAttributeDefaultValue.Value = EcoResCurrencyValue.RecId
            ///    AND (((EcoResCurrencyValue.CurrencyValue < 10) || (EcoResCurrencyValue.CurrencyValue > 20)))
            ///
            ///    Second:Query : to check the violating values in EcoResAttributeValue
            ///    SELECT * FROM EcoResAttribute(EcoResAttribute) WHERE ((AttributeType = 5637144862))
            ///    JOIN * FROM EcoResAttributeValue(EcoResAttributeValue) ON EcoResAttribute.RecId = EcoResAttributeValue.Attribute
            ///    JOIN * FROM EcoResCurrencyValue(EcoResCurrencyValue) ON EcoResAttributeValue.Value = EcoResCurrencyValue.RecId
            ///    AND (((EcoResCurrencyValue_1.CurrencyValue < 10) || (EcoResCurrencyValue.CurrencyValue > 20)))
            /// </summary>
            /// <param name="_valueJoinTableId">
            /// table ID of the particular value table depending on current switch case
            /// </param>
            /// <param name="_valueTableLinkFieldId">
            /// field ID of the value table to match a record in EcoResAttributeDefaultValue or EcoResAttributeValue
            /// </param>
            /// <param name="_valueTableRangeFieldId">
            /// field Id of the value table which will add as range
            /// </param>
            /// <param name="_lowerValue">
            /// lowerValue of AnyType to be part of dynamic build query range value
            /// </param>
            /// <param name="_upperValue">
            /// lowerValue of AnyType to be part of dynamic build query range value
            /// </param>
            /// <returns>
            /// A buffer of the particular value table depending upon caller switch case data type
            /// </returns>
            Common checkBounds( tableId _valueJoinTableId,
                                fieldId _valueTableLinkFieldId,
                                fieldId _valueTableRangeFieldId,
                                anytype _lowerValue,
                                anytype _upperValue)
            {
                EcoResValue localValue;

                // build EcoResAttributeDefaultValue based query with specific passed  valueTable ID
                q = this.buildQuery(
                    tableNum(EcoResAttributeDefaultValue),
                    fieldNum(EcoResAttributeDefaultValue, Attribute),
                    fieldNum(EcoResAttributeDefaultValue, Value),
                    _valueJoinTableId,
                    _valueTableLinkFieldId, _valueTableRangeFieldId,
                    _lowerValue , _upperValue
                );
                localValue = this.runQuery(q, _valueJoinTableId);

                if (!localValue)
                {
                    // build EcoResAttributeValue based query with specific passed valueTable ID
                    q = this.buildQuery(
                        tableNum(EcoResAttributeValue),
                        fieldNum(EcoResAttributeValue, Attribute),
                        fieldNum(EcoResAttributeValue, Value),
                        _valueJoinTableId,
                        _valueTableLinkFieldId, _valueTableRangeFieldId,
                        _lowerValue , _upperValue
                    );
                    localValue = this.runQuery(q, _valueJoinTableId);
                }

                if (!localValue)
                {
                    localValue = EcoResAttributeType::pcCheckDefaultValueBounds(
                        ecoResAttributeType.DataType,
                        ecoResAttributeType.RecId,
                        _lowerValue,
                        _upperValue);
                }
                return localValue;
            }
            // sets value of Upper|Lower bound to match the other bound.
            // _setLower: true - set Lower; false - set Upper.
            void setValue(boolean _setLower)
            {
                switch (ecoResAttributeType.DataType)
                {
                    case AttributeDataType::Integer:
                        if (_setLower)
                        {
                            ecoResValueLower_EcoResIntValue.IntValue = ecoResValueUpper_EcoResIntValue.IntValue;
                        }
                        else
                        {
                            ecoResValueUpper_EcoResIntValue.IntValue = ecoResValueLower_EcoResIntValue.IntValue;
                        }
                        break;
                    case AttributeDataType::Currency:
                        if (_setLower)
                        {
                            ecoResValueLower_EcoResCurrencyValue.CurrencyValue = ecoResValueUpper_EcoResCurrencyValue.CurrencyValue;
                        }
                        else
                        {
                            ecoResValueUpper_EcoResCurrencyValue.CurrencyValue = ecoResValueLower_EcoResCurrencyValue.CurrencyValue;
                        }
                        break;
                    case AttributeDataType::Decimal:
                        if (_setLower)
                        {
                            ecoResValueLower_EcoResFloatValue.FloatValue = ecoResValueUpper_EcoResFloatValue.FloatValue;
                        }
                        else
                        {
                            ecoResValueUpper_EcoResFloatValue.FloatValue = ecoResValueLower_EcoResFloatValue.FloatValue;
                        }
                        break;
                    case AttributeDataType::DateTime:
                        if (_setLower)
                        {
                            ecoResValueLower_EcoResDateTimeValue.DateTimeValue = ecoResValueUpper_EcoResDateTimeValue.DateTimeValue;
                        }
                        else
                        {
                            ecoResValueUpper_EcoResDateTimeValue.DateTimeValue = ecoResValueLower_EcoResDateTimeValue.DateTimeValue;
                        }
                        break;
                }
            }
            // sets value for
            // - all anyTGype*Value vars and
            // - all xValue*ID vars
            // - all *BoundDefaultValue vars
            // returns true if values set (ie, the datatype can have bounds); false otherwise
            boolean setAnyTypeXValueId()
            {
                boolean canHaveBounds = true;
                // do *not* move out over here the assignment (of numeric value)
                // to lowerBoundDefaultValue+upperBoundDefaultValue
                // - that would fix their data type, causing type-mismatch error later
                //   in case AttributeDataType::DateTime.
                switch (ecoResAttributeType.DataType)
                {
                    case AttributeDataType::Integer:
                        // get bounds for the AttributeType
                        anyTypeLowerValue       =  ecoResValueLower_EcoResIntValue.IntValue;
                        anyTypeOrigLowerValue   =  ecoResValueLower_EcoResIntValue.orig().IntValue;
                        anyTypeUpperValue       =  ecoResValueUpper_EcoResIntValue.IntValue;
                        anyTypeOrigUpperValue   =  ecoResValueUpper_EcoResIntValue.orig().IntValue;
                        xValueTableId  = tableNum(EcoResIntValue);
                        xValueRecIdFID = fieldNum(EcoResIntValue, RecId)   ;
                        xValueValueFID = fieldNum(EcoResIntValue, IntValue);

                        lowerBoundDefaultValue  =  #AttributeTypeLowerBoundDefaultValue;
                        upperBoundDefaultValue  =  #AttributeTypeUpperBoundDefaultValue;
                        break;
                    case AttributeDataType::Currency:
                        anyTypeLowerValue       =  ecoResValueLower_EcoResCurrencyValue.CurrencyValue; // as EcoResIntValue;
                        anyTypeOrigLowerValue   =  ecoResValueLower_EcoResCurrencyValue.orig().CurrencyValue;
                        anyTypeUpperValue       =  ecoResValueUpper_EcoResCurrencyValue.CurrencyValue; // ecoResValueUpper as EcoResIntValue;
                        anyTypeOrigUpperValue   =  ecoResValueUpper_EcoResCurrencyValue.orig().CurrencyValue;
                        xValueTableId  = tableNum(EcoResCurrencyValue);
                        xValueRecIdFID = fieldNum(EcoResCurrencyValue, RecId)   ;
                        xValueValueFID = fieldNum(EcoResCurrencyValue, CurrencyValue);

                        lowerBoundDefaultValue  =  #AttributeTypeLowerBoundDefaultValue;
                        upperBoundDefaultValue  =  #AttributeTypeUpperBoundDefaultValue;
                        break;
                    case AttributeDataType::Decimal:
                        anyTypeLowerValue       =  ecoResValueLower_EcoResFloatValue.FloatValue;
                        anyTypeOrigLowerValue   =  ecoResValueLower_EcoResFloatValue.orig().FloatValue;
                        anyTypeUpperValue       =  ecoResValueUpper_EcoResFloatValue.FloatValue;
                        anyTypeOrigUpperValue   =  ecoResValueUpper_EcoResFloatValue.orig().FloatValue;
                        xValueTableId  = tableNum(EcoResFloatValue);
                        xValueRecIdFID = fieldNum(EcoResFloatValue, RecId)   ;
                        xValueValueFID = fieldNum(EcoResFloatValue, FloatValue);

                        lowerBoundDefaultValue  =  #AttributeTypeLowerBoundDefaultValue;
                        upperBoundDefaultValue  =  #AttributeTypeUpperBoundDefaultValue;
                        break;
                    case AttributeDataType::DateTime:
                        anyTypeLowerValue       =  ecoResValueLower_EcoResDateTimeValue.DateTimeValue;
                        anyTypeOrigLowerValue   =  ecoResValueLower_EcoResDateTimeValue.orig().DateTimeValue;
                        anyTypeUpperValue       =  ecoResValueUpper_EcoResDateTimeValue.DateTimeValue;
                        anyTypeOrigUpperValue   =  ecoResValueUpper_EcoResDateTimeValue.orig().DateTimeValue;
                        xValueTableId  = tableNum(EcoResDateTimeValue);
                        xValueRecIdFID = fieldNum(EcoResDateTimeValue, RecId)   ;
                        xValueValueFID = fieldNum(EcoResDateTimeValue, DateTimeValue);

                        lowerBoundDefaultValue  =  DateTimeUtil::minValue();
                        upperBoundDefaultValue  =  DateTimeUtil::maxValue();
                        break;
                    default:
                        canHaveBounds = false;
                        break;
                }
                return canHaveBounds;
            }

            ret = super();

            if (ret && (ecoResValueLower.RecId || ecoResValueUpper.RecId))
            {
                if (setAnyTypeXValueId())
                {
                    // we do not need to check further unless
                    // - either lower value exits and has been changed to larger value,
                    // - or upper value exists and has been changed to smaller value.
                    lowerIncreased = ( anyTypeOrigLowerValue < anyTypeLowerValue );
                    upperDecreased = ( anyTypeOrigUpperValue > anyTypeUpperValue );

                    if (lowerIncreased || upperDecreased)
                    {
                        if (anyTypeLowerValue > anyTypeUpperValue)
                        {
                            // if Lower and Upper both had default value,
                            //   and only one of them (eg, Lower) changed
                            //     then, set the other (eg, Upper) to same value (as, eg, Lower)
                            //
                            // This is necessary for this scenario:
                            // - user checks ValueRange - we create Lower & Upper record with default value (0).
                            // - user sets Lower to 10 -> don't want to throw error "lower=10 is gt upper=0".
                            if (     (anyTypeOrigLowerValue == lowerBoundDefaultValue)
                                &&  (anyTypeOrigUpperValue == upperBoundDefaultValue) )
                            {
                                if (anyTypeLowerValue == anyTypeOrigLowerValue) // LowerBound unchanged
                                {
                                    setValue(true); // set Lower to match Upper
                                    updateOtherBound = true; // this notifies Upper.write() to call Lower.write()
                                }
                                else if (anyTypeUpperValue == anyTypeOrigUpperValue) // UpperBound unchanged
                                {
                                    setValue(false); // set Upper to match Lower
                                    updateOtherBound = true; // this notifies Lower.write() to call Upper.write()
                                }
                                else
                                {
                                    lowerGtUpper = true;
                                }
                            }
                            else
                            {
                                lowerGtUpper = true;
                            }
                        }

                        if (lowerGtUpper)
                        {
                            warning("@SYS311293");
                            ret = false;
                        }
                        else
                        {
                            // find out if there is any existing values violating the new bounds
                            valueNotWithinBounds = checkbounds(
                                xValueTableId  ,
                                xValueRecIdFID ,
                                xValueValueFID ,
                                anyTypeLowerValue , anyTypeUpperValue
                            );

                            if (valueNotWithinBounds) // if we found any existing values violatng the new bounds
                            {
                                ret = false;
                                anyTypeDependentValue = valueNotWithinBounds.getValue();

                                if (lowerIncreased)
                                {
                                    summaryMsg = strFmt(lowerValueError, anyTypeOrigLowerValue, anyTypeLowerValue, anyTypeDependentValue);
                                }
                                else if (upperDecreased)
                                {
                                    summaryMsg = strFmt(upperValueError, anyTypeOrigUpperValue, anyTypeUpperValue, anyTypeDependentValue);
                                }

                                info(summaryMsg);
                            }
                        }
                    }
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>EcoResEnumerationAttributeTypeValue</Name>
				<Methods>
					<Method>
						<Name>validateDelete</Name>
						<Source><![CDATA[
        public boolean validateDelete()
        {
            boolean ret;

            ret = super();

            if (ret && pcContext)
            {
                ret = !PCModelingLibrary::isUsedAsDefaultValue(ecoResEnumerationAttributeTypeValue);
                if (!ret)
                {
                    //the field "Solver value" must be filled in
                    error("@SYS339491");
                }
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;

            ret = super() && ecoResEnumerationAttributeTypeValue.checkDuplicate(ecoResValueEnumeration.TextValue);

            if (ret && pcContext)
            {
                ret = (ecoResEnumerationAttributeTypeValue.editSolverValue(false, '') != '');
                if (!ret)
                {
                    //the field "Solver value" must be filled in
                    warning(strFmt("@SYS110217", "@SYS313119"));
                }
			}

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            super(_append);

            element.createEnumeration();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>EcoResValueLower</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            ttsBegin;
            super();

            if (updateOtherBound)
            {
                EcoResValueUpper.write();
                updateOtherBound = false;
            }

            element.currencyCodeChanged();
            ttsCommit;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;

            ret = super();
            ret = ecoResBoundedAttributeTypeValue_ds.validateWrite() && ret;

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            QueryBuildDataSource qbds;

            if (ecoResBoundedAttributeTypeValue)
            {
                qbds = ecoResValueLower_ds.query().dataSourceTable(tableNum(EcoResValue));
                qbds.clearDynalinks();
                qbds.clearRanges();
                qbds.addRange(fieldNum(EcoResValue, RecId)).value(queryValue(ecoResBoundedAttributeTypeValue.LowerBound));
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>EcoResValueUpper</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            ttsBegin;
            super();

            if (updateOtherBound)
            {
                EcoResValueLower.write();
                updateOtherBound = false;
            }

            element.currencyCodeChanged();
            ttsCommit;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;

            ret = super();
            ret = ecoResBoundedAttributeTypeValue_ds.validateWrite() && ret;

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            QueryBuildDataSource qbds;

            if (ecoResBoundedAttributeTypeValue)
            {
                qbds = ecoResValueUpper_ds.query().dataSourceTable(tableNum(EcoResValue));
                qbds.clearDynalinks();
                qbds.clearRanges();
                qbds.addRange(fieldNum(EcoResValue, RecId)).value(queryValue(ecoResBoundedAttributeTypeValue.UpperBound));
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>EcoResValueEnumeration</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            EcoResTextValueTranslation  ecoResTextValueTranslation;
            EcoResAttribute             ecoResAttribute;
            EcoResTextValue             ecoResTextValue;
            EcoResTextValue             ecoResTextValue_Orig = EcoResTextValue::find(ecoResEnumerationAttributeTypeValue.Value);
            EcoResAttributeValue        ecoResAttributeValue;
            EcoResProductInstanceValue  ecoResProductInstanceValue;
            EcoResTextValue             ecoResTextValue_New;

            super();

            ecoResTextValue_New = EcoResTextValue::find(ecoResEnumerationAttributeTypeValue.Value);

            update_recordSet ecoResTextValue
                setting TextValue = ecoResTextValue_New.TextValue
                where ecoResTextValue.TextValue                 == ecoResTextValue_Orig.TextValue
                    exists join ecoResAttributeValue
                        where ecoResAttributeValue.Value        == ecoResTextValue.RecId
                    exists join ecoResAttribute
                        where ecoResAttribute.RecId             == ecoResAttributeValue.Attribute
                           && ecoResAttribute.AttributeType     == ecoResAttributeType.RecId
                    exists join ecoResProductInstanceValue
                        where ecoResProductInstanceValue.RecId  == ecoResAttributeValue.InstanceValue;

            select firstonly forupdate TextValue from ecoResTextValueTranslation
                where ecoResTextValueTranslation.TextValueTable == ecoresvalueEnumeration.RecId
                    && ecoResTextValueTranslation.Language == SystemParameters::getSystemLanguageId();
            if (ecoResTextValueTranslation)
            {
                ecoResTextValueTranslation.TextValue = ecoresvalueEnumeration.TextValue;
                if (ecoResTextValueTranslation.validateWrite())
                {
                    ttsbegin;

                    ecoResTextValueTranslation.update();

                    ttscommit;
                }
            }
            else
            {
                ecoResTextValueTranslation.TextValueTable = ecoresvalueEnumeration.RecId;
                ecoResTextValueTranslation.Language = SystemParameters::getSystemLanguageId();
                ecoResTextValueTranslation.TextValue = ecoresvalueEnumeration.TextValue;
                if (ecoResTextValueTranslation.validateWrite())
                {
                    ecoResTextValueTranslation.insert();
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;
        
            ret = super() && ecoResEnumerationAttributeTypeValue.checkDuplicate(ecoResValueEnumeration.TextValue);
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>EcoResIntegerSetAttributeTypeValue</Name>
				<Methods>
					<Method>
						<Name>validateDelete</Name>
						<Source><![CDATA[
        public boolean validateDelete()
        {
            boolean ret;

            ret = super();

            if (ret && pcContext)
            {
                ret = !PCModelingLibrary::isUsedAsDefaultValue(ecoResEnumerationAttributeTypeValue);
                if (!ret)
                {
                    //the field "Solver value" must be filled in
                    error("@SYS339491");
                }
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            super(_append);
            element.createIntegerSetValue();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>IsBounded_CheckBox</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            if (isBounded_CheckBox.value())
            {
                // Save the record to make sure the record id is valid for
                // the bounded record creation
                isBounded_CheckBox.value(0);
                ecoResAttributeType_ds.write();
                isBounded_CheckBox.value(1);

                if (ecoResAttributeType.RecId)
                {
                    // Create EcoResAttributeTypeBoundedValue record structure
                    element.createBoundedValue();

                    // Refresh UI
                    ecoResBoundedAttributeTypeValue_ds.executeQuery();
                    element.setBoundedRangeState();
                    element.setUnitOfMeasureState();
                }
            }
            else
            {
                if (this.checkAttributeDataTypeIntegerValue())
                {
                    // Delete EcoResAttributeTypeBoundedValue record structure
                    element.deleteBoundedValue();

                    // Refresh UI
                    ecoResBoundedAttributeTypeValue_ds.executeQuery();
                    element.setBoundedRangeState();
                    element.setUnitOfMeasureState();
                }
                else
                {
                    isBounded_CheckBox.value(1);
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>checkAttributeDataTypeIntegerValue</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Checks if datatype is Integer type or unsupported type.
        /// </summary>
        /// <returns>
        ///     true if data type is of Integer type or supported type; Otherwise, false.
        /// </returns>
        protected boolean checkAttributeDataTypeIntegerValue()
        {
            return (ecoResAttributeType.DataType != AttributeDataType::Integer
                    || ecoResAttributeType.pcValidateChangeToUnsupported());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>IntegerSetUpButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            EcoResEnumerationAttributeTypeValue enumerationValue;

            super();

            enumerationValue = EcoResEnumerationAttributeTypeValue::find(ecoResIntegerSetAttributeTypeValue.RecId, true);

            enumerationValue.moveUp();
            ecoResIntegerSetAttributeTypeValue_ds.executeQuery();
            ecoResIntegerSetAttributeTypeValue_ds.positionToRecord(enumerationValue);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>IntegerSetDownButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            EcoResEnumerationAttributeTypeValue enumerationValue;

            super();

            enumerationValue = EcoResEnumerationAttributeTypeValue::find(ecoResIntegerSetAttributeTypeValue.RecId, true);

            enumerationValue.moveDown();
            ecoResIntegerSetAttributeTypeValue_ds.executeQuery();
            ecoResIntegerSetAttributeTypeValue_ds.positionToRecord(enumerationValue);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UpButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            EcoResEnumerationAttributeTypeValue enumerationValue;

            super();

            enumerationValue = EcoResEnumerationAttributeTypeValue::find(ecoResEnumerationAttributeTypeValue.RecId, true);

            enumerationValue.moveUp();
            ecoResEnumerationAttributeTypeValue_ds.research(false);
            ecoResEnumerationAttributeTypeValue_ds.positionToRecord(enumerationValue);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DownButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            EcoResEnumerationAttributeTypeValue enumerationValue;

            super();

            enumerationValue = EcoResEnumerationAttributeTypeValue::find(ecoResEnumerationAttributeTypeValue.RecId, true);

            enumerationValue.moveDown();
            ecoResEnumerationAttributeTypeValue_ds.research(false);
            ecoResEnumerationAttributeTypeValue_ds.positionToRecord(enumerationValue);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<AllowPreLoading>No</AllowPreLoading>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>EcoResAttributeType</Name>
			<Table>EcoResAttributeType</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsEnumeration</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsHidden</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>EcoResAttributeTypeUnitOfMeasure</Name>
			<Table>EcoResAttributeTypeUnitOfMeasure</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AttributeType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultUnitOfMeasure</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UnitOfMeasureClass</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>EcoResAttributeType</JoinSource>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>EcoResBoundedAttributeTypeValue</Name>
			<Table>EcoResBoundedAttributeTypeValue</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AttributeType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LowerBound</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UpperBound</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>EcoResAttributeType</JoinSource>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>EcoResEnumerationAttributeTypeValue</Name>
			<Table>EcoResEnumerationAttributeTypeValue</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AttributeType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrdinalNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Value</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>EcoResAttributeType</JoinSource>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>EcoResValueLower</Name>
			<Table>EcoResValue</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>createdTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Origin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>relationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>EcoResBoundedAttributeTypeValue</JoinSource>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources>
				<AxFormDataSourceDerived>
					<Name>EcoResValueLower_EcoResBooleanValue</Name>
					<Table>EcoResBooleanValue</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>BooleanValue</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
				<AxFormDataSourceDerived>
					<Name>EcoResValueLower_EcoResDateTimeValue</Name>
					<Table>EcoResDateTimeValue</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>DateTimeValue</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
				<AxFormDataSourceDerived>
					<Name>EcoResValueLower_EcoResFloatValue</Name>
					<Table>EcoResFloatValue</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>FloatUnitOfMeasure</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>FloatValue</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
				<AxFormDataSourceDerived>
					<Name>EcoResValueLower_EcoResIntValue</Name>
					<Table>EcoResIntValue</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>IntUnitOfMeasure</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>IntValue</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
				<AxFormDataSourceDerived>
					<Name>EcoResValueLower_EcoResTextValue</Name>
					<Table>EcoResTextValue</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TextValue</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
				<AxFormDataSourceDerived>
					<Name>EcoResValueLower_EcoResCurrencyValue</Name>
					<Table>EcoResCurrencyValue</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>CurrencyCode</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>CurrencyValue</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
				<AxFormDataSourceDerived>
					<Name>EcoResValueLower_EcoResReferenceValue</Name>
					<Table>EcoResReferenceValue</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RefFieldId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RefRecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RefTableId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
			</DerivedDataSources>
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>EcoResValueUpper</Name>
			<Table>EcoResValue</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>createdTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Origin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>relationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>EcoResBoundedAttributeTypeValue</JoinSource>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources>
				<AxFormDataSourceDerived>
					<Name>EcoResValueUpper_EcoResBooleanValue</Name>
					<Table>EcoResBooleanValue</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>BooleanValue</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
				<AxFormDataSourceDerived>
					<Name>EcoResValueUpper_EcoResDateTimeValue</Name>
					<Table>EcoResDateTimeValue</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>DateTimeValue</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
				<AxFormDataSourceDerived>
					<Name>EcoResValueUpper_EcoResFloatValue</Name>
					<Table>EcoResFloatValue</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>FloatUnitOfMeasure</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>FloatValue</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
				<AxFormDataSourceDerived>
					<Name>EcoResValueUpper_EcoResIntValue</Name>
					<Table>EcoResIntValue</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>IntUnitOfMeasure</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>IntValue</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
				<AxFormDataSourceDerived>
					<Name>EcoResValueUpper_EcoResTextValue</Name>
					<Table>EcoResTextValue</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TextValue</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
				<AxFormDataSourceDerived>
					<Name>EcoResValueUpper_EcoResCurrencyValue</Name>
					<Table>EcoResCurrencyValue</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>CurrencyCode</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>CurrencyValue</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
				<AxFormDataSourceDerived>
					<Name>EcoResValueUpper_EcoResReferenceValue</Name>
					<Table>EcoResReferenceValue</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RefFieldId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RefRecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RefTableId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
			</DerivedDataSources>
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>EcoResValueEnumeration</Name>
			<Table>EcoResTextValue</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>createdTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Origin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>relationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TextValue</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>EcoResEnumerationAttributeTypeValue</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>EcoResIntegerSetAttributeTypeValue</Name>
			<Table>EcoResEnumerationAttributeTypeValue</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AttributeType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrdinalNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Value</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>EcoResAttributeType</JoinSource>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>EcoResValueIntegerSet</Name>
			<Table>EcoResIntValue</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntUnitOfMeasure</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Origin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>EcoResIntegerSetAttributeTypeValue</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS310128</Caption>
		<DataSource xmlns="">EcoResAttributeType</DataSource>
		<Pattern xmlns="">SimpleListDetails</Pattern>
		<PatternVersion xmlns="">1.3</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">SimpleListDetails</Style>
		<WindowResize xmlns="">Dynamic</WindowResize>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>DomainActionPane</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>GridContainer</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>858993458</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
									<Value>EcoResAttributeType_Name</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>Grid</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Grid</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToContent</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>EcoResAttributeType_Name</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>Name</DataField>
								<DataSource>EcoResAttributeType</DataSource>
							</AxFormControl>
						</Controls>
						<AlternateRowShading>No</AlternateRowShading>
						<DataSource>EcoResAttributeType</DataSource>
						<GridLinesStyle>Vertical</GridLinesStyle>
						<MultiSelect>No</MultiSelect>
						<ShowRowLabels>No</ShowRowLabels>
						<Style>List</Style>
					</AxFormControl>
				</Controls>
				<RightMargin>0</RightMargin>
				<RightMarginMode>Fixed</RightMarginMode>
				<FrameType>None</FrameType>
				<Style>SidePanel</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DetailsHeader</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>GeneralGroup_Name</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>858993458</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>Name</DataField>
						<DataSource>EcoResAttributeType</DataSource>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>DomainTab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>GeneralTapPage</Name>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>EcoResAttributeTypeGroup</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>GeneralGroup_DataType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_ProductInformationManagement:EcoResAttributeType_GeneralGroup_DataType</HelpText>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>DataType</DataField>
										<DataSource>EcoResAttributeType</DataSource>
										<Items />
									</AxFormControl>
								</Controls>
								<DataSource>EcoResAttributeType</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>IsEnumerationGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>GeneralGroup_IsEnumeration</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_ProductInformationManagement:EcoResAttributeType_GeneralGroup_IsEnumeration</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>IsEnumeration</DataField>
										<DataSource>EcoResAttributeType</DataSource>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>IsBoundedGroup</Name>
								<ElementPosition>1476395006</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>IsBounded_CheckBox</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_ProductInformationManagement:EcoResAttributeType_IsBounded_CheckBox</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS310138</Label>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>UnitOfMeasureGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1811939326</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>GeneralGroup_DefaultUnitOfMeasure</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>GeneralGroup_DefaultUnitOfMeasure_Symbol</Name>
												<DataRelationPath>DefaultUnitOfMeasure</DataRelationPath>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
											</AxFormControl>
										</Controls>
										<DataSource>EcoResAttributeTypeUnitOfMeasure</DataSource>
										<Label>@SYS96151</Label>
										<ReferenceField>DefaultUnitOfMeasure</ReferenceField>
									</AxFormControl>
								</Controls>
								<DataGroup>General</DataGroup>
								<DataSource>EcoResAttributeTypeUnitOfMeasure</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS2952</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>IntegerRangeTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>IntegerLowerBoundGroup</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>IntegerRange_LowerBound</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>IntValue</DataField>
										<DataSource>EcoResValueLower_EcoResIntValue</DataSource>
										<FastTabSummary>Yes</FastTabSummary>
										<Label>@SYS310140</Label>
									</AxFormControl>
								</Controls>
								<DataSource>EcoResValueLower</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>IntegerUpperBoundGroup</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>IntegerRange_UpperBound</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>IntValue</DataField>
										<DataSource>EcoResValueUpper_EcoResIntValue</DataSource>
										<FastTabSummary>Yes</FastTabSummary>
										<Label>@SYS310141</Label>
									</AxFormControl>
								</Controls>
								<DataSource>EcoResValueUpper</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS310145</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>IntegerSetTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>IntegerSetActionPane</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneTabControl">
										<Name>IntegerSetActionPaneTab</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPaneTab</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>IntegerSetAddRemoveButtonGroup</Name>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Left>0</Left>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormCommandButtonControl">
														<Name>EnumerationAddButtonCopy1</Name>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>CommandButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Command>New</Command>
														<Text>@SYS310143</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCommandButtonControl">
														<Name>EnumerationRemoveButtonCopy1</Name>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>CommandButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Command>DeleteRecord</Command>
														<MultiSelect>Yes</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<Text>@SYS26394</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<Caption>@SYS310143</Caption>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>IntegerSetDownButtonGroup</Name>
												<ElementPosition>1476395006</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Left>0</Left>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>IntegerSetUpButton</Name>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@SYS328488</HelpText>
														<NeededPermission>Update</NeededPermission>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<MultiSelect>No</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<NormalImage>Up</NormalImage>
														<Text>@SYS305409</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>IntegerSetDownButton</Name>
														<ElementPosition>1610612733</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@SYS328489</HelpText>
														<NeededPermission>Update</NeededPermission>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<MultiSelect>No</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<NormalImage>Down</NormalImage>
														<Text>@SYS305401</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<DataSource>EcoResEnumerationAttributeTypeValue</DataSource>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
										<DataSource>EcoResIntegerSetAttributeTypeValue</DataSource>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>IntegerSetGrid</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>EcoResIntegerSetAttributeTypeValue_OrdinalNumber</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>OrdinalNumber</DataField>
										<DataSource>EcoResIntegerSetAttributeTypeValue</DataSource>
										<Label>@SYS310147</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>EcoResValueIntegerSet_IntValue</Name>
										<Type>Integer</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IntValue</DataField>
										<DataSource>EcoResValueIntegerSet</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>EcoResIntegerSetAttributeTypeValue</DataSource>
								<Style>Tabular</Style>
							</AxFormControl>
						</Controls>
						<Caption>@SYS310142</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>DecimalRangeTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>DecimalLowerBoundGroup</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>DecimalRange_LowerBound</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>FloatValue</DataField>
										<DataSource>EcoResValueLower_EcoResFloatValue</DataSource>
										<FastTabSummary>Yes</FastTabSummary>
										<Label>@SYS310140</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<DataSource>EcoResValueLower</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>DecimalUpperBoundGroup</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>DecimalRange_UpperBound</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>FloatValue</DataField>
										<DataSource>EcoResValueUpper_EcoResFloatValue</DataSource>
										<FastTabSummary>Yes</FastTabSummary>
										<Label>@SYS310141</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<DataSource>EcoResValueUpper</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS310145</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>DateRangeTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2013265918</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>DateTimeLowerBoundGroup</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>DateRange_LowerBound</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>DateTime</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>DateTimeValue</DataField>
										<DataSource>EcoResValueLower_EcoResDateTimeValue</DataSource>
										<FastTabSummary>Yes</FastTabSummary>
										<Label>@SYS310140</Label>
									</AxFormControl>
								</Controls>
								<DataSource>EcoResValueLower</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>DateTimeUpperBoundGroup</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>DateRange_UpperBound</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>DateTime</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>DateTimeValue</DataField>
										<DataSource>EcoResValueUpper_EcoResDateTimeValue</DataSource>
										<FastTabSummary>Yes</FastTabSummary>
										<Label>@SYS310141</Label>
									</AxFormControl>
								</Controls>
								<DataSource>EcoResValueUpper</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS310145</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>CurrencyRangeTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2080374782</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CurrencyCode</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>CurrencyCode</DataField>
								<DataSource>EcoResValueLower_EcoResCurrencyValue</DataSource>
								<FastTabSummary>Yes</FastTabSummary>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CurrencyLowerBoundGroup</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CurrencyRange_LowerBound</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyValue</DataField>
										<DataSource>EcoResValueLower_EcoResCurrencyValue</DataSource>
										<FastTabSummary>Yes</FastTabSummary>
										<Label>@SYS310140</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<DataSource>EcoResValueLower</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CurrencyUpperBoundGroup</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CurrencyRange_UpperBound</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyValue</DataField>
										<DataSource>EcoResValueUpper_EcoResCurrencyValue</DataSource>
										<FastTabSummary>Yes</FastTabSummary>
										<Label>@SYS310141</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<DataSource>EcoResValueUpper</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS310145</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>EnumerationTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2113929214</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>EnumerationActionPane</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneTabControl">
										<Name>EnumerationActionPaneTab</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPaneTab</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>AddRemoveButtonGroup</Name>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Left>0</Left>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormCommandButtonControl">
														<Name>EnumerationAddButton</Name>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@SYS328872</HelpText>
														<Type>CommandButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Command>New</Command>
														<Text>@SYS310143</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCommandButtonControl">
														<Name>EnumerationRemoveButton</Name>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@SYS328874</HelpText>
														<Type>CommandButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Command>DeleteRecord</Command>
														<MultiSelect>Yes</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<Text>@SYS26394</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<Caption>@SYS310143</Caption>
												<DataSource>EcoResEnumerationAttributeTypeValue</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>UpDownButtonGroup</Name>
												<ElementPosition>1476395006</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Left>0</Left>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>UpButton</Name>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<NeededPermission>Update</NeededPermission>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<MultiSelect>No</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<NormalImage>Up</NormalImage>
														<Text>@SYS305409</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>DownButton</Name>
														<ElementPosition>1610612733</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<NeededPermission>Update</NeededPermission>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<MultiSelect>No</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<NormalImage>Down</NormalImage>
														<Text>@SYS305401</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<DataSource>EcoResEnumerationAttributeTypeValue</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>TranslationButtonGroup</Name>
												<ElementPosition>1879048190</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Left>0</Left>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>TranslationCommandButton</Name>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>MenuFunctionButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataSource>EcoResEnumerationAttributeTypeValue</DataSource>
														<MenuItemName>EcoResAttributeTypeFixedListFormHelper</MenuItemName>
														<NeedsRecord>Yes</NeedsRecord>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
										<DataSource>EcoResEnumerationAttributeTypeValue</DataSource>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>EnumerationGrid</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>EcoResEnumerationAttributeTypeValue_OrdinalNumber</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>OrdinalNumber</DataField>
										<DataSource>EcoResEnumerationAttributeTypeValue</DataSource>
										<Label>@SYS310147</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>EcoResValueEnumeration_TextValue</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TextValue</DataField>
										<DataSource>EcoResValueEnumeration</DataSource>
										<Label>@SYS310148</Label>
										<Mandatory>Yes</Mandatory>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>pcEditSolverValue</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1879048190</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editSolverValue</DataMethod>
										<DataSource>EcoResEnumerationAttributeTypeValue</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>EcoResEnumerationAttributeTypeValue</DataSource>
								<Style>Tabular</Style>
							</AxFormControl>
						</Controls>
						<Caption>@SYS310142</Caption>
						<DataSource>EcoResEnumerationAttributeTypeValue</DataSource>
						<Scrollbars>Yes</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>