<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProjForecastCost</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public final class ProjForecastCost extends FormRun implements OfficeITemplateCustomExporter
{
    QueryBuildRange         criteriaReport;
    QueryBuildRange         criteriaExpand;

    QueryBuildRange         criteriaModelId;
    QueryBuildRange         criteriaControlId;
    QueryBuildRange         criteriaCostGroupId;

    QueryBuildDataSource    qb2;
    QueryBuildDataSource    qb3;

    ProjId                  projId;
    ForecastModelId         modelId;
    ProjCategoryId          categoryId;
    ResourceRecId           resourceRecId;

    ProjControlId           controlId;
    ProjCostGroupId         costGroupid;

    // Range projTable
    QueryBuildRange         criteriaWIPProjId;
    QueryBuildRange         criteriaProjId;

    QueryBuildRange         criteriaProjInvoiceProjId;
    QueryBuildRange         criteriaFixedPrice;
    QueryBuildRange         criteriaTimeMaterial;
    QueryBuildRange         criteriaInternal;
    QueryBuildRange         criteriaCost;
    QueryBuildRange         criteriaInvestment;
    QueryBuildRange         criteriaTime;
    QueryBuildRange         criteriaSorting1;
    QueryBuildRange         criteriaSorting2;
    QueryBuildRange         criteriaSorting3;
    QueryBuildRange         criteriaGroupId;
    QueryBuildRange         criteriaCustAccount;
    QueryBuildRange         criteriaActivityId;

    // Range projCategoryId
    QueryBuildRange         criteriaCategoryGroupId;

    // Range projCostTrans
    QueryBuildRange         criteriaResourceRecId;
    QueryBuildRange         criteriaTransDate;
    QueryBuildRange         criteriaCategoryId;
    QueryBuildRange         criteriaRecId;

    ProjStatistic           projStatistic;
    ProjCostControl         projCostControl;
    TransDate               ledgerFromDate;
    TransDate               ledgerToDate;

    ProjCashFlow            projCashFlow;

    boolean                 refreshCallerOnClose;
    boolean                 cdsLockingOptionForecasts;

    // Map for WBS Id and Task Id cache for project and activity combination
    Map                     wbsDataCacheMap = new Map(Types::String, Types::Container);

    private boolean enableProjMultipleContractLinesForProjectFeature = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

}
]]></Source>
			</Method>
			<Method>
				<Name>buildCaptionTextForActiveExpenseItem</Name>
				<Source><![CDATA[
    str buildCaptionTextForActiveExpenseItem()
    {
        str activeExpenseLabel;

        //If the "Show report transaction" checkbox is checked, include the reportType in the caption string
        if (ctrlShowDerived.value() == NoYes::Yes)
        {
            // Build the string with details of the current forcast expense item to use as label on the form caption
            activeExpenseLabel = strfmt("%1 - %2: %3, %4, %5: %6","@SYS342499","@SYS82923", projForecastCost.ModelId, date2StrUsr(projForecastCost.StartDate, DateFlags::FormatAll), "@SYS10223", projForecastCost.Report);
        }
        else
        {
            // Else include the ExpandID in the caption string
            // Build the string with details of the current forcast expense item to use as label on the form caption
            activeExpenseLabel = strfmt("%1 - %2: %3, %4, %5: %6","@SYS342499","@SYS82923", projForecastCost.ModelId, date2StrUsr(projForecastCost.StartDate, DateFlags::FormatAll), "@SYS21776", projForecastCost.ExpandId);
        }

        return activeExpenseLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryTable</Name>
				<Source><![CDATA[
    boolean categoryTable(ProjStatistic _projStatistic = projStatistic)
    {
        return (_projStatistic && _projStatistic.parmCategoryGroupId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryTableCashFlow</Name>
				<Source><![CDATA[
    boolean categoryTableCashFlow(ProjCashFlow _projCashFlow = projCashFlow)
    {
        return (_projCashFlow && _projCashFlow.parmCategoryGroupId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        FormRun caller;
        FormDataSource fds;

        if ( refreshCallerOnClose )
        {
            caller = element.args().caller();

            if ( caller )
            {
                fds = caller.dataSource(1);

                if ( fds )
                {
                    fds.research(true);
                }
            }
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doReFreshDatasource</Name>
				<Source><![CDATA[
    void doReFreshDatasource()
    {
        projForecastCost_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        this.setRefreshOnClose();

        boolean projOpsIntegrationEnabled = ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled();
        
        if (projOpsIntegrationEnabled)
        {
            this.form().design().showNewButton(AutoNoYes::No);
            this.form().design().showDeleteButton(AutoNoYes::No);
        }

        super();

        if (projOpsIntegrationEnabled)
        {
            ctrlManiButton.visible(false);
            ctrlManiButton.enabled(false);
            ctrlShowDerived.visible(false);
            TradeAgreement.visible(false);
            WBSID.visible(false);
            TaskName.visible(false);
            Derived.visible(false);
            ProjForecastCost_Resource.visible(false);
            Identification_ProjFundingSource.visible(false);
            Identification_Resource.visible(false);
            Allocation.visible(false);
            ProjForecastCost_ContractLineNum.visible(true);
            Identification_ContractLineNum.visible(true);
        }
 
        cdsLockingOptionForecasts = ProjCDSLockingOptionTable::get(ProjCDSLockingOption::Forecasts);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkProjCashFlow</Name>
				<Source><![CDATA[
    void linkProjCashFlow()
    {
        #define.star('*')

        modelId     = projCashFlow.parmForecastModelId();
        projId      = projCashFlow.parmProjId();
        categoryId  = projCashFlow.parmCategoryId();
        resourceRecId = projCashFlow.parmResource();

        if (projCashFlow.parmExpenses())
        {
            if (projCashFlow.parmProjectFromDate() || projCashFlow.parmProjectToDate())
            {
                criteriaTransDate.value(SysQuery::range(projCashFlow.parmProjectFromDate(), projCashFlow.parmProjectToDate()));
            }

            if (projCashFlow.parmForecastModelId())
            {
                criteriaModelId.value(projCashFlow.parmForecastModelId());
            }

            if (projCashFlow.parmResource())
            {
                criteriaResourceRecId.value(queryValue(projCashFlow.parmResource()));
            }

            if (projCashFlow.parmCategoryId())
            {
                criteriaCategoryId.value(projCashFlow.parmCategoryId());
            }

            if (element.categoryTableCashFlow(element.args().parmObject()))
            {
                criteriaCategoryGroupId.value(projCashFlow.parmCategoryGroupId());
            }

            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                if (projCashFlow.parmFixedPrice())
                {
                    criteriaFixedPrice.value(queryValue(ProjType::FixedPrice));
                }

                if (projCashFlow.parmTimeMaterial())
                {
                    criteriaTimeMaterial.value(queryValue(ProjType::TimeMaterial));
                }

                if (projCashFlow.parmInternalCost())
                {
                    criteriaInternal.value(queryValue(ProjType::Cost));
                }

                if (projCashFlow.parmInternalCost())
                {
                    criteriaCost.value(queryValue(ProjType::Internal));
                }

                if (projCashFlow.parmInvestment())
                {
                    criteriaInvestment.value(queryValue(ProjType::Investment));
                }

                if (projCashFlow.parmTimeProject())
                {
                    criteriaTime.value(queryValue(ProjType::Time));
                }
            }

            if (projCashFlow.parmSorting1())
            {
                criteriaSorting1.value(queryValue(projCashFlow.parmSorting1()));
            }

            if (projCashFlow.parmSorting2())
            {
                criteriaSorting2.value(queryValue(projCashFlow.parmSorting2()));
            }

            if (projCashFlow.parmSorting3())
            {
                criteriaSorting3.value(queryValue(projCashFlow.parmSorting3()));
            }

            if (projCashFlow.parmCustAccount())
            {
                criteriaCustAccount.value(queryValue(projCashFlow.parmCustAccount()));
            }

            if (projCashFlow.parmProjGroupId())
            {
                criteriaGroupId.value(queryValue(projCashFlow.parmProjGroupId()));
            }

            if (projCashFlow.parmProjTree())
            {
                criteriaProjId.value(projCashFlow.parmProjId()+ #star);
            }
            else
            {
                if (projCashFlow.parmProjId())
                {
                    criteriaProjId.value(queryValue(projCashFlow.parmProjId()));
                }
            }

            if (projCashFlow.parmProjWIPId())
            {
                criteriaWIPProjId.value(queryValue(projCashFlow.parmProjWIPId()));
            }

            if (projCashFlow.parmProjInvoiceProjId())
            {
                criteriaProjInvoiceProjId.value(queryValue(projCashFlow.parmProjInvoiceProjId()));
            }
        }
        else
        {
            criteriaProjId.value(queryValue(SysQuery::valueEmptyString()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkProjCostControl</Name>
				<Source><![CDATA[
    void linkProjCostControl()
    {
        #define.star('*')

        switch (projCostControl.parmModelType())
        {
            case ProjForecastModelType::Original:
                modelId     = projCostControl.parmOriginalForecastModelId();
                break;

            case ProjForecastModelType::Remaining:
                modelId     = projCostControl.parmRemainingForecastModelId();
                break;

            case ProjForecastModelType::Total:
                modelId     = projCostControl.parmTotalForecastModelId();
                break;
        }

        projId      = projCostControl.parmProjId();
        categoryId  = projCostControl.parmProjCategoryId();
        resourceRecId = projCostControl.parmResource();

        if (projCostControl.parmExpenses())
        {
            ledgerFromDate  = projCostControl.parmLedgerTransDateFrom();
            ledgerToDate    = projCostControl.parmLedgerTransDateTo();
            if (projCostControl.parmProjTransDateFrom() || projCostControl.parmProjTransDateTo())
            {
                criteriaTransDate.value(SysQuery::range(projCostControl.parmProjTransDateFrom(), projCostControl.parmProjTransDateTo()));
            }

            if (modelId)
            {
                criteriaModelId.value(modelId);
            }

            if (projCostControl.parmResource())
            {
                criteriaResourceRecId.value(queryValue(projCostControl.parmResource()));
            }

            if (projCostControl.parmProjCategoryId())
            {
                criteriaCategoryId.value(projCostControl.parmProjCategoryId());
            }

            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                if (projCostControl.parmFixedPrice())
                {
                    criteriaFixedPrice.value(queryValue(ProjType::FixedPrice));
                }

                if (projCostControl.parmTimeMaterial())
                {
                    criteriaTimeMaterial.value(queryValue(ProjType::TimeMaterial));
                }

                if (projCostControl.parmInternalCost())
                {
                    criteriaInternal.value(queryValue(ProjType::Cost));
                }

                if (projCostControl.parmInternalCost())
                {
                    criteriaCost.value(queryValue(ProjType::Internal));
                }

                if (projCostControl.parmInvestment())
                {
                    criteriaInvestment.value(queryValue(ProjType::Investment));
                }

                if (projCostControl.parmTime())
                {
                    criteriaTime.value(queryValue(ProjType::Time));
                }
            }

            if (projCostControl.parmProjSorting1())
            {
                criteriaSorting1.value(queryValue(projCostControl.parmProjSorting1()));
            }

            if (projCostControl.parmProjSorting2())
            {
                criteriaSorting2.value(queryValue(projCostControl.parmProjSorting2()));
            }

            if (projCostControl.parmProjSorting3())
            {
                criteriaSorting3.value(queryValue(projCostControl.parmProjSorting3()));
            }

            if (projCostControl.parmCustomerAccount())
            {
                criteriaCustAccount.value(queryValue(projCostControl.parmCustomerAccount()));
            }

            if (projCostControl.parmProjGroupId())
            {
                criteriaGroupId.value(queryValue(projCostControl.parmProjGroupId()));
            }

            if (projCostControl.parmProjTree())
            {
                criteriaProjId.value(projCostControl.parmProjId()+ #star);
            }
            else
            {
                if (projCostControl.parmProjId())
                {
                    criteriaProjId.value(queryValue(projCostControl.parmProjId()));
                }
            }

            if (projCostControl.parmProjWIPId())
            {
                criteriaWIPProjId.value(queryValue(projCostControl.parmProjWIPId()));
            }

            if (projCostControl.parmProjInvoiceProjId())
            {
                criteriaProjInvoiceProjId.value(queryValue(projCostControl.parmProjInvoiceProjId()));
            }
        }
        else
        {
            criteriaProjId.value(queryValue(SysQuery::valueEmptyString()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>costTypeCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks transaction type.
    /// </summary>
    /// <param name = "_projControlPeriodCostGroup">
    ///     A <c>ProjControlPeriodCostGroup</c> table buffer.
    /// </param>
    /// <returns>
    ///     true if transaction type is not of type cost; otherwise, false.
    /// </returns>
    public boolean costTypeCost(ProjControlPeriodCostGroup  _projControlPeriodCostGroup)
    {
        return (_projControlPeriodCostGroup.costType() != ProjCostType::Cost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkProjStatistic</Name>
				<Source><![CDATA[
    void linkProjStatistic()
    {
        #define.star('*')

        modelId     = projStatistic.parmForecastModelId();
        projId      = projStatistic.parmProjId();
        categoryId  = projStatistic.parmProjCategoryId();
        resourceRecId = projStatistic.parmResource();

        if (projStatistic.parmExpenses())
        {
            ledgerFromDate  = projStatistic.parmLedgerFromDate();
            ledgerToDate    = projStatistic.parmLedgerToDate();
            if (projStatistic.parmProjFromDate() || projStatistic.parmProjToDate())
            {
                criteriaTransDate.value(SysQuery::range(projStatistic.parmProjFromDate(), projStatistic.parmProjToDate()));
            }

            if (projStatistic.parmForecastModelId())
            {
                criteriaModelId.value(projStatistic.parmForecastModelId());
            }

            if (projStatistic.parmResource())
            {
                criteriaResourceRecId.value(queryValue(projStatistic.parmResource()));
            }

            if (projStatistic.parmProjCategoryId())
            {
                criteriaCategoryId.value(projStatistic.parmProjCategoryId());
            }

            if (element.categoryTable(element.args().parmObject()))
            {
                criteriaCategoryGroupId.value(projStatistic.parmCategoryGroupId());
            }


            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                if (projStatistic.parmFixedPrice())
                {
                    criteriaFixedPrice.value(queryValue(ProjType::FixedPrice));
                }

                if (projStatistic.parmTimeMaterial())
                {
                    criteriaTimeMaterial.value(queryValue(ProjType::TimeMaterial));
                }

                if (projStatistic.parmInternalCost())
                {
                    criteriaInternal.value(queryValue(ProjType::Cost));
                }

                if (projStatistic.parmInternalCost())
                {
                    criteriaCost.value(queryValue(ProjType::Internal));
                }

                if (projStatistic.parmInvestment())
                {
                    criteriaInvestment.value(queryValue(ProjType::Investment));
                }

                if (projStatistic.parmTime())
                {
                    criteriaTime.value(queryValue(ProjType::Time));
                }
            }

            if (projStatistic.parmSorting1())
            {
                criteriaSorting1.value(queryValue(projStatistic.parmSorting1()));
            }

            if (projStatistic.parmSorting2())
            {
                criteriaSorting2.value(queryValue(projStatistic.parmSorting2()));
            }

            if (projStatistic.parmSorting3())
            {
                criteriaSorting3.value(queryValue(projStatistic.parmSorting3()));
            }

            if (projStatistic.parmCustAccount())
            {
                criteriaCustAccount.value(queryValue(projStatistic.parmCustAccount()));
            }

            if (projStatistic.parmProjGroupId())
            {
                criteriaGroupId.value(queryValue(projStatistic.parmProjGroupId()));
            }

            if (projStatistic.parmProjTree())
            {
                criteriaProjId.value(projStatistic.parmProjId()+ #star);
            }
            else
            {
                if (projStatistic.parmProjId())
                {
                    criteriaProjId.value(queryValue(projStatistic.parmProjId()));
                }
            }

            if (projStatistic.parmProjWIPId())
            {
                criteriaWIPProjId.value(queryValue(projStatistic.parmProjWIPId()));
            }

            if (projStatistic.parmProjInvoiceProjId())
            {
                criteriaProjInvoiceProjId.value(queryValue(projStatistic.parmProjInvoiceProjId()));
            }
        }
        else
        {
            criteriaProjId.value(queryValue(SysQuery::valueEmptyString()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldAccessCategory</Name>
				<Source><![CDATA[
    void setFieldAccessCategory()
    {
        if (ProjCategory::find(projForecastCost.CategoryId).SetupEstimate)
        {
            projForecastCost_ds.object(fieldnum(ProjForecastCost, LinePropertyId)).allowEdit(false);
            projForecastCost.LinePropertyId=''; //22375
        }
        else
        {
            projForecastCost_ds.object(fieldnum(ProjForecastCost, LinePropertyId)).allowEdit(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldAccessLumpSum</Name>
				<Source><![CDATA[
    void setFieldAccessLumpSum()
    {
        if (projForecastCost.isProjLumpSum())
        {
            projForecastCost_ds.object(fieldnum(ProjForecastCost, Resource)).allowEdit(false);
            projForecastCost_ds.object(fieldnum(ProjForecastCost,Qty)).allowEdit(false);
        }
        else
        {
            projForecastCost_ds.object(fieldnum(ProjForecastCost, Resource)).allowEdit(true);
            projForecastCost_ds.object(fieldnum(ProjForecastCost,Qty)).allowEdit(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRefreshOnClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets refreshOnClose flag to true only if the caller's name
    /// is: ProjForecastListPage
    /// </summary>
    private void setRefreshOnClose()
    {
        FormRun         caller;

        refreshCallerOnClose = false;

        if (element.args() && element.args().caller())
        {
            caller = element.args().caller();
            refreshCallerOnClose = strCmp(caller.name(), formStr(ProjForecastListPage)) == 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjectExternallyManaged</Name>
				<Source><![CDATA[
    private boolean validateProjectExternallyManaged(ProjId _projId)
    {
        boolean ret = true;

        if (cdsLockingOptionForecasts)
        {
            if (Project::isProjectExternallyManaged(_projId))
            {
                ret = checkFailed(strfmt("@Proj:ProjCDSValueInvalidDueToExternal", "@Proj:ProjCDSForecasts"));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customizeMenuOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Customizes the options used to populate the Office Menu.
    /// </summary>
    /// <param name = "_menuOptions">The menu options to be customized.</param>
    public void customizeMenuOptions(OfficeMenuOptions _menuOptions)
    {
        var entityMenuOption = _menuOptions.getOptionsForEntity(tableStr(ProjForecastCostEntity));

        if (entityMenuOption)
        {
            entityMenuOption.includeDefault(false);
        }

        DocuTemplate docuTemplate = DocuTemplate::findTemplate(OfficeAppApplicationType::Excel, resourceStr(ProjForecastCostExcelTemplateV3));
        
        if (docuTemplate)
        {
            OfficeTemplateExportMenuItem menuItem = OfficeTemplateExportMenuItem::constructWithDocuTemplate(docuTemplate, docuTemplate.TemplateID);

            _menuOptions.customMenuItems().addEnd(menuItem);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveProjIdFromCaller</Name>
				<Source><![CDATA[
    private void retrieveProjIdFromCaller()
    {
        Object caller = element.args().caller();

        switch (element.args().dataset())
        {
            case tableNum(ProjBudget):
                ProjBudget projBudget = element.args().record();
                projId = projBudget.RootProjId;
                if (caller && formHasMethod(caller, 'selectedProjId'))
                {
                    projId = caller.selectedProjId();
                }
                break;

            case tableNum(ProjBudgetRevision):
                ProjBudgetRevision projBudgetRevision = element.args().record();
                projId = projBudgetRevision.rootProjId();
                if (caller && formHasMethod(caller, 'selectedProjId'))
                {
                    projId = caller.selectedProjId();
                }
                break;

            case(tableNum(ProjTable)):
                ProjTable projTable = element.args().record();
                projId = projTable.ProjId;
                break;

            case (tableNum(HierarchyTreeTable)):
                HierarchyTreeTable hierarchyTreeTable = element.args().record();
                smmActivities smmActivities = smmActivities::findWithRecId(hierarchyTreeTable.RefRecId);
                projTable = HierarchyTreeTable_Extension::findAssociation(smmActivities, tableNum(ProjTable));
                projId = projTable.ProjId;
                break;

            case(tableNum(ProjControlPeriodCostGroup)):
               ProjControlPeriodCostGroup projControlPeriodCostGroup = element.args().record();
               projId = projControlPeriodCostGroup.ProjId;
               break;

            case(tableNum(TmpProjStatistic)):
                ProjStatistic tmpProjStatistic = element.args().parmObject();
                projId = tmpProjStatistic.parmProjId();
                break;

            case(tableNum(TmpProjCashFlow)):
                ProjCashFlow tmpProjCashFlow = element.args().parmObject();
                projId = tmpProjCashFlow.parmProjId();
                break;

            case(tableNum(TmpProjCostControl)):
                ProjCostControl tmpProjCostControl = element.args().parmObject();
                projId = tmpProjCostControl.parmProjId();
                break;

            case tableNum(ProjInvoiceTable):
                ProjInvoiceTable projInvoiceTable = element.args().record();
                projId = projInvoiceTable.ProjInvoiceProjId;
                break;

            case tableNum(ProjWIPTable):
                ProjWIPTable projWIPTable = element.args().record();
                projId = projWIPTable.ProjId;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitialTemplateFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the set of initial filters to be applied to the template.
    /// </summary>
    /// <param name="_menuItem">The export template menu item.</param>
    /// <returns>
    /// The Map of filters to apply.
    /// Keyed by AOT entity name.
    /// Values are all Microsoft.Dynamics.Platform.Integration.Office.FilterNode intances.
    /// </returns>
    /// <remarks>
    /// The filters supplied here will override any filters currently in the template.
    /// If no filter is suppled for a given entity, any filters currently in the template are retained.
    /// </remarks>
    public Map getInitialTemplateFilters(OfficeTemplateExportMenuItem _menuItem)
    {
        str templateName = resourceStr(ProjForecastCostExcelTemplateV3);
                 
        DocuTemplate template = DocuTemplate::findTemplate(OfficeAppApplicationType::Excel, templateName);
        Map filtersToApply = new Map(Types::String, Types::Class);

        // Ensure the template was present
        if (template && template.TemplateID == templateName)
        {
            #define.star("*")

            str projforecastCostEntity = tableStr(ProjForecastCostEntity);
            ExportToExcelFilterTreeBuilder filterBuilder = new ExportToExcelFilterTreeBuilder(projforecastCostEntity);            
            if(ProjForecastFormsCallerIdentiferFlight::instance().isEnabled() && element.args().dataset())
            {
                this.retrieveProjIdFromCaller();
            }
            else
            {
                if(element.args().dataset() == tableNum(ProjTable))
                {
                    ProjTable projTable= element.args().record();
                    projId = projTable.ProjId;
                }
            }
           
            Microsoft.Dynamics.Platform.Integration.Office.FilterBinaryNode filter = filterBuilder.areEqual(fieldStr(ProjForecastCostEntity, ProjectID), projId + #star);
            filtersToApply.insert(projforecastCostEntity, filter);
        }

        return filtersToApply;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTemplateSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies any updates to the settings contained within the template for the specified menu item.
    /// </summary>
    /// <param name="_menuItem">The menu item.</param>
    /// <param name="_settingsManager">The <see cref="SettingsManager"/> to use when performing the updates.</param>
    void updateTemplateSettings(OfficeTemplateExportMenuItem _menuItem, Microsoft.Dynamics.Platform.Integration.Office.SettingsManager _settingsManager)
    {
        // No implementation details for this since we don't need to update the template settings
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>ProjForecastCost</Name>
				<Methods>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        void linkActive()
        {
            #define.star("*")

            Object caller;

            ProjInvoiceTable            projInvoiceTable;
            ProjWIPTable                projWIPTable;
            QueryBuildRange             rangeProjId;
            ProjBudget                  projBudget;
            ProjTable                   projTable;
            ProjBudgetRevision          projBudgetRevision;
            ProjControlPeriodCostGroup  projControlPeriodCostGroup;
            HierarchyTreeTable          hierarchyTreeTable;
            smmActivities               smmActivities;

            // Reset the Form Caption to just show the title of the primary datasource
            // If forcast expense items exists for the current project, the Active method will be called
            // and it will update the caption to include details of the forcast expanse item
            element.design().caption("@SYS342499");

            caller = element.args().caller();

            switch (element.args().dataset())
            {
                case tableNum(ProjBudget):
                    projBudget = element.args().record();
                    projId = projBudget.RootProjId;
                    if (caller && formHasMethod(caller, 'selectedProjId'))
                    {
                        projId = caller.selectedProjId();
                    }
                    criteriaProjId.value(queryValue(projId) + #star);
                    break;

                case tableNum(ProjBudgetRevision):
                    projBudgetRevision = element.args().record();
                    projId = projBudgetRevision.rootProjId();
                    if (caller && formHasMethod(caller, 'selectedProjId'))
                    {
                        projId = caller.selectedProjId();
                    }
                    criteriaProjId.value(queryValue(projId) + #star);
                    break;

                case(tableNum(ProjTable)):
                    projTable   = element.args().record();
                    projId      = projTable.ProjId;
                    criteriaProjId.value(projId + #star);

                    break;

                case (tableNum(HierarchyTreeTable)):
                    hierarchyTreeTable = element.args().record();

                    smmActivities = smmActivities::findWithRecId(hierarchyTreeTable.RefRecId);
                    criteriaActivityId.value(queryValue(smmActivities.ActivityNumber));

                    projTable = HierarchyTreeTable_Extension::findAssociation(smmActivities, tableNum(ProjTable));
                    criteriaProjId.value(projTable.ProjId);
                    break;

                case(tableNum(ProjControlPeriodCostGroup)):
                    projControlPeriodCostGroup  = element.args().record();
                    if (element.costTypeCost(projControlPeriodCostGroup))
                    {
                        element.close();
                    }

                    projId                      = projControlPeriodCostGroup.ProjId;
                    modelId                     = projControlPeriodCostGroup.projControlPeriod().ModelId;
                    costGroupid                 = projControlPeriodCostGroup.CostGroupId;
                    controlId                   = projControlPeriodCostGroup.ControlId;

                    criteriaWIPProjId.value(projId);

                    criteriaModelId.value(projControlPeriodCostGroup.projControlPeriod().ModelId);
                    criteriaControlId.value(projControlPeriodCostGroup.ControlId);

                    qb2.joinMode(JoinMode::ExistsJoin);
                    criteriaCostGroupId.value(projControlPeriodCostGroup.CostGroupId);
                    break;

                case(tableNum(TmpProjStatistic)):
                    // If linkActive is called again the criterias are changed and the form is closed
                    if (projStatistic)
                    {
                        element.close();
                    }
                    projStatistic = element.args().parmObject();
                    element.linkProjStatistic();

                    break;

                case(tableNum(TmpProjCashFlow)):
                    // If linkActive is called again the criterias are changed and the form is closed
                    if (projCashFlow)
                    {
                        element.close();
                    }
                    projCashFlow = element.args().parmObject();
                    element.linkProjCashFlow();
                    break;

                case(tableNum(TmpProjCostControl)):
                    // If linkActive is called again the criterias are changed and the form is closed
                    if (projCostControl)
                    {
                        element.close();
                    }
                    projCostControl = element.args().parmObject();
                    element.linkProjCostControl();
                    break;

                case tableNum(ProjInvoiceTable):
                    rangeProjId    = projForecastCost_ds.query().dataSourceTable(tableNum(ProjForecastCost)).findRange(fieldNum(ProjForecastCost,ProjId));

                    while (rangeProjId)
                    {
                        projForecastCost_ds.query().dataSourceTable(tableNum(ProjForecastCost)).clearRange(fieldNum(ProjForecastCost,ProjId));
                        rangeProjId    = projForecastCost_ds.query().dataSourceTable(tableNum(ProjForecastCost)).findRange(fieldNum(ProjForecastCost,ProjId));
                    }

                    projInvoiceTable   = element.args().record();

                    while select ProjId from projTable
                        where projTable.ProjInvoiceProjId   == projInvoiceTable.ProjInvoiceProjId
                    {
                        projForecastCost_ds.query().dataSourceTable(tableNum(ProjForecastCost)).addRange(fieldNum(ProjForecastCost,ProjId)).value(projTable.ProjId);
                    }
                    modelId = ProjParameters::find().ModelId;
                    break;

                case tableNum(ProjWIPTable)     :
                    rangeProjId    = projForecastCost_ds.query().dataSourceTable(tableNum(ProjForecastCost)).findRange(fieldNum(ProjForecastCost,ProjId));

                    while (rangeProjId)
                    {
                        projForecastCost_ds.query().dataSourceTable(tableNum(ProjForecastCost)).clearRange(fieldNum(ProjForecastCost,ProjId));
                        rangeProjId    = projForecastCost_ds.query().dataSourceTable(tableNum(ProjForecastCost)).findRange(fieldNum(ProjForecastCost,ProjId));
                    }

                    projWIPTable   =   element.args().record();

                    while select ProjId from projTable
                        where projTable.wipProject  == projWIPTable.ProjId
                    {
                        projForecastCost_ds.query().dataSourceTable(tableNum(ProjForecastCost)).addRange(fieldNum(ProjForecastCost,ProjId)).value(projTable.ProjId);
                    }
                    modelId = ProjParameters::find().ModelId;
                    break;
            }

            if (projId && cdsLockingOptionForecasts)
            {
                projForecastCost_ds.allowCreate(!Project::isProjectExternallyManaged(projId));
            }

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        void initValue()
        {
            projForecastCost.Resource     = resourceRecId;
            projForecastCost.CategoryId = categoryId;
            projForecastCost.ProjId     = projId;
            projForecastCost.ModelId    = modelId;

            projForecastCost.initFromProjTable(ProjTable::find(projForecastCost.ProjId));

            projForecastCost.Qty=1;

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        void init()
        {
            Query                       q = new Query();
            QueryBuildDataSource        qb_projTable;
            QueryBuildDataSource        qb_ProjCategory;
            QueryBuildDataSource        qb_projForecastTrans;

            ProjForecastCost            projForecastCostArg;

            super();
            
            projForecastCost_ds.autoQuery(false);

            qb_projForecastTrans = q.addDataSource(tableNum(ProjForecastCost));

            criteriaExpand      = qb_projForecastTrans.addRange(fieldNum(ProjForecastCost, ExpandId));
            criteriaReport      = qb_projForecastTrans.addRange(fieldNum(ProjForecastCost, Report));
            criteriaModelId     = qb_projForecastTrans.addRange(fieldNum(ProjForecastCost, ModelId));
            criteriaActivityId  = qb_projForecastTrans.addRange(fieldNum(ProjForecastEmpl, ActivityNumber));
            criteriaResourceRecId = qb_projForecastTrans.addRange(fieldNum(ProjForecastCost, Resource));
            criteriaTransDate   = qb_projForecastTrans.addRange(fieldNum(ProjForecastCost, StartDate));
            criteriaCategoryId  = qb_projForecastTrans.addRange(fieldNum(ProjForecastCost, CategoryId));
            criteriaProjId      = qb_projForecastTrans.addRange(fieldNum(ProjForecastCost, ProjId));
            criteriaActivityId  = qb_projForecastTrans.addRange(fieldNum(ProjForecastCost, ActivityNumber));
            criteriaRecId       = qb_projForecastTrans.addRange(fieldNum(ProjForecastCost, RecId));
            qb_projForecastTrans.addRange(fieldNum(ProjForecastCost, ProjForecastBudgetType)).value(queryValue(ProjForecastBudgetType::None));

            if (element.args().dataset() == tableNum(TmpProjStatistic) && element.categoryTable(element.args().parmObject()))
            {
                qb_ProjCategory = qb_projForecastTrans.addDataSource(tableNum(ProjCategory));
                qb_ProjCategory.addLink(fieldNum(ProjForecastCost, CategoryId), fieldNum(ProjCategory, CategoryId));
                qb_ProjCategory.fetchMode(0);
                qb_ProjCategory.joinMode(JoinMode::ExistsJoin);

                criteriaCategoryGroupId = qb_ProjCategory.addRange(fieldNum(ProjCategory, CategoryGroupId));
            }
            // Similar condition for ProjCashFlow
            else if (element.args().dataset() == tableNum(TmpProjCashFlow) && element.categoryTableCashFlow(element.args().parmObject()))
            {
                qb_ProjCategory = qb_projForecastTrans.addDataSource(tableNum(ProjCategory));
                qb_ProjCategory.addLink(fieldNum(ProjForecastCost, CategoryId), fieldNum(ProjCategory, CategoryId));
                qb_ProjCategory.fetchMode(0);
                qb_ProjCategory.joinMode(JoinMode::ExistsJoin);

                criteriaCategoryGroupId = qb_ProjCategory.addRange(fieldNum(ProjCategory, CategoryGroupId));
            }
            else if (element.args().dataset() == tableNum(ProjControlPeriodCostGroup))
            {
                qb2 = qb_projForecastTrans.addDataSource(tableNum(ProjTable));

                qb2.addLink(fieldNum(ProjForecastCost, ProjId), fieldNum(ProjTable, ProjId));

                criteriaWIPProjId = qb2.addRange(fieldNum(ProjTable, wipProject));

                qb2.fetchMode(0);

                qb3 = qb_projForecastTrans.addDataSource(tableNum(ProjControlCategory));

                qb3.addLink(fieldNum(ProjForecastCost, CategoryId), fieldNum(ProjControlCategory, CategoryId));

                criteriaControlId   = qb3.addRange(fieldNum(ProjControlCategory, ControlId));
                criteriaCostGroupId = qb3.addRange(fieldNum(ProjControlCategory, CostGroupId));

                qb3.fetchMode(0);
            }

            qb_projTable = qb_projForecastTrans.addDataSource(tableNum(ProjTable));
            qb_projTable.addLink(fieldNum(ProjForecastCost, ProjId), fieldNum(ProjTable, ProjId));
            qb_projTable.fetchMode(0);
            qb_projTable.joinMode(JoinMode::ExistsJoin);

            criteriaProjInvoiceProjId   = qb_projTable.addRange(fieldNum(ProjTable, ProjInvoiceProjId));
            criteriaWIPProjId           = qb_projTable.addRange(fieldNum(ProjTable, wipProject));
            
            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                criteriaFixedPrice          = qb_projTable.addRange(fieldNum(ProjTable, Type));
                criteriaTimeMaterial        = qb_projTable.addRange(fieldNum(ProjTable, Type));
                criteriaInternal            = qb_projTable.addRange(fieldNum(ProjTable, Type));
                criteriaCost                = qb_projTable.addRange(fieldNum(ProjTable, Type));
                criteriaInvestment          = qb_projTable.addRange(fieldNum(ProjTable, Type));
                criteriaTime                = qb_projTable.addRange(fieldNum(ProjTable, Type));
            }

            criteriaSorting1            = qb_projTable.addRange(fieldNum(ProjTable, SortingId), 1);
            criteriaSorting2            = qb_projTable.addRange(fieldNum(ProjTable, SortingId), 2);
            criteriaSorting3            = qb_projTable.addRange(fieldNum(ProjTable, SortingId), 3);
            criteriaGroupId             = qb_projTable.addRange(fieldNum(ProjTable, ProjGroupId));
            criteriaCustAccount         = qb_projTable.addRange(fieldNum(ProjTable, CustAccount));

            if ( element.args() && element.args().dataset() == tableNum(ProjForecastCost))
            {
                projForecastCostArg = element.args().record();
                projId = projForecastCostArg.ProjId;
                criteriaRecId.value(queryValue(projForecastCostArg.RecId));
            }

            this.query(q);
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        void executeQuery()
        {
            if (ctrlShowDerived.value() == NoYes::Yes)
            {
                criteriaReport.value(queryValue(NoYes::Yes));
                criteriaExpand.value('');
            }
            else
            {
                criteriaReport.value('');
                criteriaExpand.value('0');
            }

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        int active()
        {
            boolean         canEdit = !projForecastCost.derived();
            ForecastModel   forecastModel;
            int             ret;
            boolean         isBudgetForecast;
            #SysSystemDefinedButtons

            ret = super();

            // Set the Form Caption with the caption text used for the active forcast expense item
            element.design().caption(element.buildCaptionTextForActiveExpenseItem());

            if (canEdit && projForecastCost.ModelId)
            {
                forecastModel = ForecastModel::find(HeadingSub::Heading, projForecastCost.ModelId);
                if (forecastModel && forecastModel.Blocked)
                {
                    canEdit = false;
                }
            }

            boolean isExternallyManaged = Project::isProjectExternallyManaged(projForecastCost.ProjId);
            boolean lockFieldsForForecasts = cdsLockingOptionForecasts && isExternallyManaged;

            this.allowEdit(canEdit && !lockFieldsForForecasts);
            this.allowDelete(canEdit && !lockFieldsForForecasts);

            ctrlManiButton.enabled(canEdit && !lockFieldsForForecasts);
            element.setFieldAccessCategory();
            element.setFieldAccessLumpSum();
            ProjForecastTransferFromQuotationCost.enabled(!lockFieldsForForecasts);

            if (projForecastCost.ProjForecastBudgetType == ProjForecastBudgetType::None)
            {
                isBudgetForecast = true;
            }

            projForecastCost_ds.allowEdit(isBudgetForecast && !lockFieldsForForecasts);
            projForecastCost_ds.allowDelete(isBudgetForecast && !lockFieldsForForecasts);

            FormCommandButtonControl editButton = element.control(element.controlId(#SystemDefinedViewEditButton)) as FormCommandButtonControl;
            editButton.enabled(projForecastCost_ds.allowEdit());

            boolean projOpsIntegrationEnabled = ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled();
            if (projOpsIntegrationEnabled)
            {
                //disable edit for all fields except DefaultDimension
                allowEditFieldsOnFormDS_W(projForecastCost_ds, false);
                projForecastCost_ds.object(fieldNum(ProjForecastCost, DefaultDimension)).allowEdit(projForecastCost_ds.allowEdit());
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>wbsId</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Displays associated WBS ID for selected project activity number.
        /// </summary>
        /// <param name = "_projForecastCost">
        ///     The <c>ProjForecastCost</c> table buffer.
        /// </param>
        /// <return>
        ///     WBS ID.
        /// </return>
        public display ProjHierarchyPathId wbsId(ProjForecastCost _projForecastCost)
        {
            if (_projForecastCost.ProjId && _projForecastCost.ActivityNumber)
            {
                str wbsKey = _projForecastCost.ProjId + '-' + _projForecastCost.ActivityNumber;

                if (wbsDataCacheMap.exists(wbsKey))
                {
                    container wbsData = wbsDataCacheMap.lookup(wbsKey);
                    return conPeek(wbsData, 1);
                }
                else
                {
                    if(FeatureStateProvider::IsFeatureEnabled(ProjForecastListPageV2Feature::instance()))
                    {
                        ProjWBSActivityNumberView wbsActivityNumberView;

                        select firstonly WBSID, TaskName from wbsActivityNumberView
                            where wbsActivityNumberView.ProjId == _projForecastCost.ProjId && wbsActivityNumberView.ActivityNumber == _projForecastCost.ActivityNumber;

                        wbsDataCacheMap.insert(wbsKey, [wbsActivityNumberView.WBSID, wbsActivityNumberView.TaskName]);
                    
                        return wbsActivityNumberView.WBSID;
                    }
                    else
                    {
                        ProjWBSEstimatesView wbsEstimatesView;

                        select firstonly WBSID, TaskName from wbsEstimatesView
                            where wbsEstimatesView.ProjId == _projForecastCost.ProjId && wbsEstimatesView.ActivityNumber == _projForecastCost.ActivityNumber;

                        wbsDataCacheMap.insert(wbsKey, [wbsEstimatesView.WBSID, wbsEstimatesView.TaskName]);
                    
                        return wbsEstimatesView.WBSID;
                    }
                }
            }

            return '';
        }

]]></Source>
					</Method>
					<Method>
						<Name>wbsTaskName</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Displays associated WBS task name for selected project activity number.
        /// </summary>
        /// <param name = "_projForecastCost">
        ///     The <c>ProjForecastCost</c> table buffer.
        /// </param>
        /// <return>
        ///     WBS task name.
        /// </return>
        public display ProjTaskName wbsTaskName(ProjForecastCost _projForecastCost)
        {
            if (_projForecastCost.ProjId && _projForecastCost.ActivityNumber)
            {
                str wbsKey = _projForecastCost.ProjId + '-' + _projForecastCost.ActivityNumber;

                if (wbsDataCacheMap.exists(wbsKey))
                {
                    container wbsData = wbsDataCacheMap.lookup(wbsKey);
                    return conPeek(wbsData, 2);
                }
                else
                {
                    if(FeatureStateProvider::IsFeatureEnabled(ProjForecastListPageV2Feature::instance()))
                    {
                        ProjWBSActivityNumberView wbsActivityNumberView;

                        select firstonly WBSID, TaskName from wbsActivityNumberView
                            where wbsActivityNumberView.ProjId == _projForecastCost.ProjId && wbsActivityNumberView.ActivityNumber == _projForecastCost.ActivityNumber;

                        wbsDataCacheMap.insert(wbsKey, [wbsActivityNumberView.WBSID, wbsActivityNumberView.TaskName]);
                    
                        return wbsActivityNumberView.TaskName;
                    }
                    else
                    {
                        ProjWBSEstimatesView wbsEstimatesView;

                        select firstonly WBSID, TaskName from wbsEstimatesView
                            where wbsEstimatesView.ProjId == _projForecastCost.ProjId && wbsEstimatesView.ActivityNumber == _projForecastCost.ActivityNumber;

                        wbsDataCacheMap.insert(wbsKey, [wbsEstimatesView.WBSID, wbsEstimatesView.TaskName]);

                        return wbsEstimatesView.TaskName;
                    }
                }
            }

            return '';
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            if (!ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
            {
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>deleteMarked</Name>
						<Source><![CDATA[
        public void deleteMarked()
        {
            if (!ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>ActivityNumber</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                HierarchyTreeTable::lookupHierarchyTree(_formControl, ProjTable::find(projForecastCost.ProjId));
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>CategoryId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.setFieldAccessCategory();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ContractLineId</DataField>
						<Methods>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            public void jumpRef()
            {
                if (ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
                {
                    PSAContractLineItems contractLineItems = PSAContractLineItems::find(projForecastCost.ContractLineId);
                    if (contractLineItems)
                    {
                        ProjectOperationsDWHelper dw = ProjectOperationsDWHelper::construct();
                        dw.openProjectContractLineDetailsInCE(contractLineItems.ContractLineNum, contractLineItems.DataAreaId);
                    }
                }
                else
                {
                    super();
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ModelId</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                ForecastModel::lookupOpenModels(_formControl);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjAllocateId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if (projForecastCost.isProjLumpSum())
                {
                    projForecastCost.CostPrice=(projForecastCost.costAmount());
                    projForecastCost.Qty=1.00;
                    projForecastCost.Resource = 0;
                    projForecastCost_ds.object(fieldNum(ProjForecastCost, Resource)).allowEdit(false);
                    projForecastCost_ds.object(fieldNum(ProjForecastCost,Qty)).allowEdit(false);
                }
                else
                {
                    projForecastCost_ds.object(fieldNum(ProjForecastCost, Resource)).allowEdit(true);
                    projForecastCost_ds.object(fieldNum(ProjForecastCost,Qty)).allowEdit(true);
                }
                allocation_ProjAllocateId.setFocus();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjFundingSource</DataField>
						<Methods>
							<Method>
								<Name>resolveReference</Name>
								<Source><![CDATA[
            public Common resolveReference(FormReferenceControl _formReferenceControl)
            {
                return ProjFundingSource::resolveReferenceByContractFSName(_formReferenceControl, ProjTable::find(projForecastCost.ProjId).ProjInvoiceProjId);
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                return ProjFundingSource::lookupFundingSourceByContract(_formReferenceControl, ProjTable::find(projForecastCost.ProjId).ProjInvoiceProjId);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                projCostBudget_ActivityNumber.allowEdit(ProjTable::activityExists(projForecastCost.ProjId));
                identification_ActivityNumber.allowEdit(ProjTable::activityExists(projForecastCost.ProjId));

                // Clear funding source field
                projForecastCost_ds.clearReferenceData(fieldNum(ProjForecastCost, ProjFundingSource));
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                if (cdsLockingOptionForecasts)
                {
                    if (element.args().caller() && element.args().caller().name() == formstr(ProjTable))
                    {
                        ProjTable::lookupProjIdRestrictingExternal(_formControl, ProjForecastCost, NoYes::No, cdsLockingOptionForecasts);
                    }
                    else
                    {
                        ProjTable::lookupProjWIPProj(_formControl, ProjForecastCost.ProjId, cdsLockingOptionForecasts);
                    }

                    return;
                }

                if (element.args().dataset() == tableNum(ProjTable))
                {
                    ProjTable projTableLocal = element.args().record();

                    if (projTableLocal.RecId)
                    {
                        if (projTableLocal.WIPProject)
                        {
                            ProjTable::lookupProjWIPProj(_formControl, projTableLocal.ProjId, cdsLockingOptionForecasts);
                        }
                        else
                        {
                            ProjTable::lookupSelectedProjId(_formControl, _filterStr, projTableLocal.ProjId);
                        }

                        return;
                    }
                }

                ProjTable::lookupProjId(_formControl, ProjForecastCost);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Resource</DataField>
						<Methods>
							<Method>
								<Name>resolveReference</Name>
								<Source><![CDATA[
            public Common resolveReference(FormReferenceControl _formReferenceControl)
            {
                ResourceView ret;

                ret = super(_formReferenceControl);

                if (ret.RecId && !ResourceLookup::validateResource(ret.RecId, projForecastCost))
                {
                    ret = null;
                }

                return ret;
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                return ResourceLookup::lookupResource(_formReferenceControl, projForecastCost);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>ProjWBSEstimatesView</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            Query query = this.query();
            QueryBuildDataSource projWBSEstimateView = query.dataSourceTable(tableNum(ProjWBSEstimatesView));
            projWBSEstimateView.addRange(fieldNum(ProjWBSEstimatesView, ActivityNumber)).value(SysQuery::valueNotEmptyString());

            this.disableProjWBSEstimatesViewDataSource(projWBSEstimateView);
        }

]]></Source>
					</Method>
					<Method>
						<Name>disableProjWBSEstimatesViewDataSource</Name>
						<Source><![CDATA[
        /// <summary>
        /// ProjWBSEstimatesView datasource is deprecated, and WBS data is now rendered via display methods.
        /// </summary>
        protected void disableProjWBSEstimatesViewDataSource(QueryBuildDataSource _projWBSEstimateView)
        {
            _projWBSEstimateView.enabled(false);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>ctrlManiButton</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            projForecastCost_ds.research();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ctrlShowDerived</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        boolean modified()
        {
            boolean ret;

            ret = super();

            if (this.value())
            {
                criteriaExpand.value(strfmt('%1', ''));
            }
            else
            {
                criteriaExpand.value(strfmt('%1', 0));
            }

            if (this.value())
            {
                criteriaReport.value(strfmt('%1', ''));
            }
            else
            {
                criteriaReport.value(strfmt('%1', 0));
            }

            projForecastcost_ds.executeQuery();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProjectCostBudget_Project</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;
    
            ret = super();

            if (ret)
            {
                ret = element.validateProjectExternallyManaged(this.text());
            }
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Identification_ProjId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;
    
            ret = super();
    
            if (ret)
            {
                ret = element.validateProjectExternallyManaged(this.text());
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>ProjForecastCost</Name>
			<Table>ProjForecastCost</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Active</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AllocateMethod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CategoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContractLineId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostPaymDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CovStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EliminationDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpandId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Freq</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FreqCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LinePropertyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModelId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PeriodAllocateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjAllocateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjForecastBudgetType</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjFundingSource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Qty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Report</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Resource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesPaymDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Stop</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Worker</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<LinkType>Active</LinkType>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ProjWBSEstimatesView</Name>
			<Table>ProjWBSEstimatesView</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyTaskId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaskName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WBSID</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>ProjForecastCost</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS342499</Caption>
		<DataSource xmlns="">ProjForecastCost</DataSource>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Pattern xmlns="">Task</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>536870911</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ctrlManiButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>715827882</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataSource>ProjForecastCost</DataSource>
								<MenuItemName>ProjForecastCostEdit</MenuItemName>
								<MenuItemType>Action</MenuItemType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ProjTransBudget</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>ProjTransBudget</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ProjForecastTransferFromQuotationCost</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<DataSource>ProjForecastCost</DataSource>
								<MenuItemName>ProjForecastTransferFromQuotationCost</MenuItemName>
								<Text>@SYS84496</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>TradeAgreement</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ConfigurationKey>PriceDisc</ConfigurationKey>
								<ElementPosition>1789569705</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>SalesPriceExpense</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>ProjSalesPriceCost</MenuItemName>
									</AxFormControl>
								</Controls>
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS13768</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Criteria</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>CustomFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>ctrlShowDerived</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS25020</Label>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1610612733</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Overview</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>WBSID</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>wbsId</DataMethod>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TaskName</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>wbsTaskName</DataMethod>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>Derived</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>268435454</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataMethod>Derived</DataMethod>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjectCostBudget_BudgetNum</Name>
										<ElementPosition>402653181</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ModelId</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ProjectCostBudget_StartDate</Name>
										<ElementPosition>536870908</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>StartDate</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjectCostBudget_Project</Name>
										<ElementPosition>671088635</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjId</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjForecastCost_ContractLineNum</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>ContractLineId</DataField>
										<DataSource>ProjForecastCost</DataSource>
										<Label>@Proj:ContractLineId</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjCostBudget_ActivityNumber</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>805306362</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ActivityNumber</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjBudgetCost_CategoryId</Name>
										<ElementPosition>939524089</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CategoryId</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>ProjForecastCost_Resource</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ReferenceGroup</Type>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataSource>ProjForecastCost</DataSource>
										<ReferenceField>Resource</ReferenceField>
										<ReplacementFieldGroup>ResourceId</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>ProjForecastCost_ResourceCategory</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>ReferenceGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataSource>ProjForecastCost</DataSource>
										<ReferenceField>ResourceCategory</ReferenceField>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjectCostBudget_Txt</Name>
										<ElementPosition>1207959543</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Txt</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ProjectCostBudget_Qty</Name>
										<ElementPosition>1342177270</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Qty</DataField>
										<DataSource>ProjForecastCost</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ProjectCostBudget_CostPrice</Name>
										<ElementPosition>1476394997</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CostPrice</DataField>
										<DataSource>ProjForecastCost</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjectCostBudget_CurrencyCode</Name>
										<ElementPosition>1610612724</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyId</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ProjectCostBudget_SalesPrice</Name>
										<ElementPosition>1744830451</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>SalesPrice</DataField>
										<DataSource>ProjForecastCost</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjForecastCost_LinePropertyId</Name>
										<ElementPosition>1879048178</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LinePropertyId</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ProjForecastCost_ProjForecastBudgetType</Name>
										<ElementPosition>2013265905</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjForecastBudgetType</DataField>
										<DataSource>ProjForecastCost</DataSource>
										<Items />
									</AxFormControl>
								</Controls>
								<DataSource>ProjForecastCost</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS9039</Caption>
						<DataSource>ProjForecastCost</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>General</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Identification</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_ModelId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ModelId</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Identification_StartDate</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>StartDate</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_ProjId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjId</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_ContractLineNum</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>ContractLineId</DataField>
										<DataSource>ProjForecastCost</DataSource>
										<Label>@Proj:ContractLineId</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>Identification_ProjFundingSource</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741820</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Identification_ProjFundingSource_FundingSourceId</Name>
												<DataRelationPath>FundingSource</DataRelationPath>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
											</AxFormControl>
										</Controls>
										<DataSource>ProjForecastCost</DataSource>
										<ReferenceField>ProjFundingSource</ReferenceField>
										<ReplacementFieldGroup>FundingSourceName</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_ActivityNumber</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490184</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ActivityNumber</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_CategoryId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CategoryId</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>Identification_Resource</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<FilterExpression>%1</FilterExpression>
										<Type>ReferenceGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataSource>ProjForecastCost</DataSource>
										<ReferenceField>Resource</ReferenceField>
										<ReplacementFieldGroup>ResourceId</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_LinePropertyId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>LinePropertyId</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>ProjForecastCost</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Transaction</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Transaction_TransId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransId</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Transaction_Txt</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Txt</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>Transaction</DataGroup>
								<DataSource>ProjForecastCost</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CostPrice</Name>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CostPrice_Qty</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Qty</DataField>
										<DataSource>ProjForecastCost</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CostPrice_CostPrice</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CostPrice</DataField>
										<DataSource>ProjForecastCost</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CostPrice_M_costAmount</Name>
										<AllowEdit>No</AllowEdit>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>costAmount</DataMethod>
										<DataSource>ProjForecastCost</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<DataGroup>CostPrice</DataGroup>
								<DataSource>ProjForecastCost</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SalesPrice</Name>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SalesPrice_CurrencyId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyId</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SalesPrice_ExchRate</Name>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ExchRate</DataField>
										<DataSource>ProjForecastCost</DataSource>
										<MinNoOfDecimals>4</MinNoOfDecimals>
										<MinNoOfDecimalsMode>Fixed</MinNoOfDecimalsMode>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SalesPrice_SalesPrice</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SalesPrice</DataField>
										<DataSource>ProjForecastCost</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<DataGroup>SalesPrice</DataGroup>
								<DataSource>ProjForecastCost</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Administration</Name>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>Administration_Active</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Active</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Administration_modifiedBy</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>modifiedBy</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>Administration</DataGroup>
								<DataSource>ProjForecastCost</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Allocation</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SchedulingGroup_AllocateMethod</Name>
										<ElementPosition>477218588</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>AllocateMethod</DataField>
										<DataSource>ProjForecastCost</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>SchedulingGroup_Freq</Name>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Freq</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SchedulingGroup_FreqCode</Name>
										<ElementPosition>954437176</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>FreqCode</DataField>
										<DataSource>ProjForecastCost</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>SchedulingGroup_EndDate</Name>
										<ElementPosition>1193046470</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>EndDate</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SchedulingGroup_PeriodAllocateId</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>PeriodAllocateId</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>SchedulingGroup_Stop</Name>
										<ElementPosition>1670265058</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Stop</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Allocation_ProjAllocateId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1908874352</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjAllocateId</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>Allocation</DataGroup>
								<DataSource>ProjForecastCost</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS2952</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabDates</Name>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Dates</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Dates_StartDate</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>StartDate</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Dates_InvoiceDate</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>InvoiceDate</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Dates_EliminationDate</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>EliminationDate</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Dates_CostPaymDate</Name>
										<ElementPosition>1533916890</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CostPaymDate</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Dates_SalesPaymDate</Name>
										<ElementPosition>1840700268</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SalesPaymDate</DataField>
										<DataSource>ProjForecastCost</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>Dates</DataGroup>
								<DataSource>ProjForecastCost</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS80293</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>SetUp</Name>
						<ElementPosition>2013265918</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS2186</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabFinancialDimensions</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2080374782</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<NeededPermission>Manual</NeededPermission>
						<Pattern>DimensionEntryControl</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormContainerControl">
								<Name>DimensionEntryControl</Name>
								<Type>Container</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension>
									<Name>DimensionEntryControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>parmControllerClassName</Name>
											<Type>ExtendedDataType</Type>
											<TypeName>ClassName</TypeName>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmControlLabelText</Name>
											<Type>String</Type>
											<Value>@SYS101181</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmEnumerationName</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmDataSourceName</Name>
											<Type>String</Type>
											<Value>ProjForecastCost</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmValueSetReferenceField</Name>
											<Type>String</Type>
											<Value>DefaultDimension</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmEnumValueSetReferenceField</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<Controls />
							</AxFormControl>
						</Controls>
						<HideIfEmpty>No</HideIfEmpty>
						<Caption>@SYS101181</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<DataSource>ProjForecastCost</DataSource>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>