<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>MCRPriceOverrideUserLogInDialog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class MCRPriceOverrideUserLogInDialog extends FormRun
{
    salesLine               salesLine;
    SalesQuotationLine      salesQuotationLine;
    MarkupTrans             markupTrans;
    SalesTable              salesTable;
    SalesQuotationTable     salesQuotationTable;
    MCRContinuityCustLine   mcrContinuityCustLine;
    args                    args;
    boolean                 overrideUserPermission;

}
]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        #define.Cancel('Cancel')

        if (!element.closedOk())
        {
            element.args().parm(#Cancel);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes form values and form design.
    /// </summary>
    public void init()
    {
        args = element.args();

        super();

        switch (element.args().record().TableId)
        {
            case (tableNum (SalesLine)):
                salesLine = element.args().record();
                // It is coming in for an override.
                if (args.parmEnum())
                {
                    switch (args.refField())
                    {
                        case (fieldNum(SalesLine, SalesPrice)) :
                            OriginalValue.visible(true);
                            OverrideValue.visible(true);
                            OriginalValue.realValue(salesLine.mcrSalesLinePriceOverride().ListPrice);
                            OverrideValue.realValue(salesLine.mcrPricePerSalesQty());
                            break;
                        case (fieldNum(SalesLine, PriceUnit)) :
                            OverrideValue.visible(true);
                            OverrideValue.realValue(salesLine.PriceUnit);
                            break;
                        case (fieldNum(SalesLine, LinePercent)) :
                            OverrideValue.visible(true);
                            OverrideValue.realValue(salesLine.LinePercent);
                            break;
                        case (fieldNum(SalesLine, LineDisc)) :
                            OverrideValue.visible(true);
                            OverrideValue.realValue(salesLine.LineDisc);
                            break;
                    }
                }
                break;

            case tableNum(SalesQuotationLine):
                salesQuotationLine = element.args().record();
                if (args.parmEnum())
                {
                    if (args.refField() == fieldnum(SalesQuotationLine, SalesPrice))
                    {
                        OriginalValue.visible(true);
                        OverrideValue.visible(true);
                        OriginalValue.realValue(salesQuotationLine.mcrSalesQuotationLineOverride().ListPrice);
                        OverrideValue.realValue(salesQuotationLine.mcrPricePerSalesQty());
                    }
                }
                break;

            case (tableNum (MarkupTrans)):
                markupTrans = element.args().record();
                // It is coming in for an override.
                if (args.parmEnum())
                {
                    element.design().caption("@MCR11949");
                    OriginalValue.realValue(markupTrans.MCROriginalMiscChargeValue);
                    OverrideValue.realValue(markupTrans.Value);
                }
                break;

            case tableNum(SalesTable):
                salesTable = element.args().record();
                if (args.parmEnum() == NoYes::Yes)
                {
                    element.design().caption("@MCR11989");
                    OriginalValue.realValue(salesTable.orig().DiscPercent);
                    OverrideValue.realValue(salesTable.DiscPercent);
                }
                else
                {
                    // Throw an error if this form was called improperly.
                    throw error(strfmt("@MCR10663", element.name()));
                }
                break;

            case tableNum(SalesQuotationTable):
                salesQuotationTable = element.args().record();
                if (args.parmEnum() == NoYes::Yes)
                {
                    element.design().caption("@MCR11989");
                    OriginalValue.realValue(salesQuotationTable.orig().DiscPercent);
                    OverrideValue.realValue(salesQuotationTable.DiscPercent);
                }
                else
                {
                    // Throw an error if this form was called improperly.
                    throw error(strfmt("@MCR10663", element.name()));
                }
                break;

            // Set the paramenters for continuity.
            case tableNum(MCRContinuityCustLine):
                mcrContinuityCustLine = element.args().record();
                if (args.parmEnum() == NoYes::Yes)
                {
                    element.design().caption("@MCR10725");
                    OriginalValue.realValue(mcrContinuityCustLine.orig().Price);
                    OverrideValue.realValue(mcrContinuityCustLine.Price);
                }
                break;
            default:
                break;
        }
        // It is coming in from turning the override off or miscellaneous charge add.
        if (!args.parmEnum())
        {
            prices.visible(false);
            reason.visible(false);
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>ReasonCode</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            RetailMCRChannelTable::lookupPriceOverrideReasonCodes(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            // Fill in the reason code description based on which reason code was selected.
            if (reasonCode.valueStr())
            {
                Description.text(RetailMCRChannelTable::getPriceOverrideReasonCode(reasonCode.valueStr()).displaySubcodeDescription());
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UserId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            // When the user id is changed any old passwords should be blanked out.
            password.text("");

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OKButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Overrides the sales price.
        /// </summary>
        /// <remarks>
        /// See if the override user has permission to override the price.  If they do not,
        /// issue an error and set the salesPrice on the sales line back to the original price.
        /// </remarks>
        void clicked()
        {
            MCROverrideLogin_OverridePrice          overrideLogin_OverridePrice;
            MCROverrideLogin_OverrideMiscCharge     overrideLogin_OverrideMiscCharge;
            MCROverrideLogin_OverrideTotalDiscPct   overrideLogin_OverrideTotalDiscPct;
            boolean                                 validUserLogin;
            boolean                                 errorOccurred;
            str                                     passBackParameters;
            UserInfo                                userInfo;
            UserId                                  dynamicsAxUser;
            NetworkAlias                            networkUserId = UserId.valueStr();
            ItemId                                  itemId;
            InventDimId                             dimId;
            SalesPrice                              salesPricePerSalesQty;
            SalesUnit                               salesUnit;
            SalesEndDiscPct                         headerDiscPercent;

            void runOverrideLogicForLine()
            {
                // See if the override user has permission to override the price.
                overrideLogin_OverridePrice = new MCROverrideLogin_OverridePrice();

                // Check if the userId and password combination is valid.
                validUserLogin = overrideLogin_OverridePrice.IsUserLogInValid(networkUserId, Password.valueStr());

                // See if the user is in a group with permission to make the override price based on cost + markup %.
                if (validUserLogin)
                {
                    // If called for a price override.
                    if (args.parmEnum() == NoYes::Yes)
                    {
                        OverrideUserPermission = overrideLogin_OverridePrice.
                                isUserValidatedForOverride(dynamicsAxUser, itemId, dimId, salesUnit, salesPricePerSalesQty);
                    }
                    else
                    {
                        // If called to revert the price to the system calculated price
                        OverrideUserPermission = overrideLogin_OverridePrice.
                            IsUserValidForTurnPriceOverrideOff();
                    }
                }
            }

            void runOverrideLogicForHeader()
            {
                // See if the user has permission to override the total discount percent.
                overrideLogin_OverrideTotalDiscPct = new MCROverrideLogin_OverrideTotalDiscPct();

                // Check if the userId and password combination is valid.
                validUserLogin = overrideLogin_OverrideTotalDiscPct.IsUserLogInValid(
                    networkUserId, Password.valueStr());

                // See if the user is in a group with permission.
                if (validUserLogin)
                {
                    if (args.parmEnum() == NoYes::Yes)
                    {
                        OverrideUserPermission = overrideLogin_OverrideTotalDiscPct.
                            IsUserValidForOverride(dynamicsAxUser, headerDiscPercent);
                    }
                }
            }

            // Reason code will on be checked if this is a price override.
            if (args.parmEnum())
            {
                if (!reasonCode.text())
                {
                    error ("@MCR10858");
                    errorOccurred = true;
                }
                else if (!RetailInformationSubcodeTable::find(RetailMCRChannelTable::findForCurrentUser().MCRPriceOverrideRetailInfocodeId,reasonCode.text()))
                {
                    error(strfmt("@MCR12053", reasonCode.text()));
                    errorOccurred = true;
                }
            }

            if (!NetworkUserId)
            {
                error ("@MCR10866");
                errorOccurred = true;
            }
            if (errorOccurred)
            {
                throw Exception::Error;
            }

            select Id, RecId from userInfo
                where userInfo.networkAlias == networkUserId;

            if (!userInfo.RecId)
            {
                throw error ("@MCR20761");
            }

            dynamicsAxUser = userInfo.id;
            switch (element.args().record().TableId)
            {
                case tableNum (SalesLine):
                    itemId = salesLine.ItemId;
                    dimId  = SalesLine.InventDimId;
                    salesPricePerSalesQty = salesLine.mcrPricePerSalesQty();
                    salesUnit = salesLine.SalesUnit;
                    runOverrideLogicForLine();
                    break;

                case tableNum(SalesQuotationLine):
                    itemId = salesQuotationLine.ItemId;
                    dimId  = salesQuotationLine.InventDimId;
                    salesPricePerSalesQty = salesQuotationLine.mcrPricePerSalesQty();
                    salesUnit = salesQuotationLine.SalesUnit;

                    // The following section should run for both SalesLine and SalesQuotationLine.
                    runOverrideLogicForLine();
                    break;

                case tableNum(MarkupTrans):
                    // See if the override user has permission to override the misc charge.
                    overrideLogin_OverrideMiscCharge = new MCROverrideLogin_OverrideMiscCharge();

                    // Check if the userId and password combination is valid.
                    validUserLogin = overrideLogin_OverrideMiscCharge.IsUserLogInValid(networkUserId, Password.valueStr());

                    // See if the user is in a group with permission to make the override price based on cost + markup %.
                    if (validUserLogin)
                    {
                        // Ff called for a price override.
                        if (args.parmEnum() == NoYes::Yes)
                        {
                            OverrideUserPermission = overrideLogin_OverrideMiscCharge.IsUserValidForOverride(dynamicsAxUser, OriginalValue.realValue(), OverrideValue.realValue());
                        }
                        else
                        {
                            // Ff called to revert the price to the system calculated price.
                            OverrideUserPermission = overrideLogin_OverrideMiscCharge.IsUserValidForTurnMiscChargeOverrideOff();
                        }
                    }
                    element.args().record(markupTrans);
                    break;

                case tableNum(SalesTable):
                    headerDiscPercent = salesTable.DiscPercent;
                    runOverrideLogicForHeader();
                    break;
                case tableNum(SalesQuotationTable):
                    headerDiscPercent = salesQuotationTable.DiscPercent;
                    runOverrideLogicForHeader();
                    break;

                default:
                    break;
            }

            if (validUserLogin)
            {
                if (args.parmEnum() == NoYes::Yes)
                {
                    // If override user does not have permission.
                    if (!OverrideUserPermission)
                    {
                        throw error ("@MCR10800");
                    }
                }
                else
                {
                    // if there are no permission leave price overriden
                    if (!OverrideUserPermission)
                    {
                        throw error ("@MCR10834");
                    }
                }
            }

            passBackParameters = networkUserId + ", " + reasonCode.valueStr();
            element.args().parm(passBackParameters);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<BackgroundColor xmlns="">WindowBackground</BackgroundColor>
		<Caption xmlns="">@MCR10725</Caption>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Prices</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>858993458</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>OriginalValue</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1252698792</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Label>@MCR10801</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>OverrideValue</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1700091219</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS68002</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
						</Controls>
						<Caption>@SYS11865</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Reason</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1288490187</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ReasonCode</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS63086</Label>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Description</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>Description</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<Caption>@MCR10864</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>LogIn</Name>
						<ElementPosition>1717986916</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>UserId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>NetworkAlias</ExtendedDataType>
								<Label>@RET1886</Label>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Password</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>MCRPassword</ExtendedDataType>
								<PasswordStyle>Yes</PasswordStyle>
							</AxFormControl>
						</Controls>
						<Caption>@MCR4410342</Caption>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>