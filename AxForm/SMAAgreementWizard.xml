<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SMAAgreementWizard</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class SMAAgreementWizard extends FormRun
{
    #define.StartPage(1)
    #define.AgreementSelection(2)
    #define.ExistingOrNew(3)
    #define.NewProject(4)
    #define.NewAgreement(5)
    #define.NewServiceOrder(6)
    #define.Objects(7)
    #define.End(8)

    SMAAgreementWizard      sysWizard;
    boolean                 wizardInitialized;
    SMAAgreementTable       agreement;
    NumberSeq               projNumberSeq;
    NumberSeq               agreementNumberSeq;
    smmCampaignId           numAllocated;
    NumberSequenceTable     numberSequenceTable;
    NumberSequenceTable     agreementNumberSequence;
    Num                     origNum;
    Num                     origAgreementNum;
    ProjTable               newProjectTable;
    InventDim               lastInventDim;
    boolean                 ordersWithoutAgreementAllowed;
    ProjId                  existingProjectPreviousValue;


}
]]></Source>
			</Method>
			<Method>
				<Name>initProjTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProjTable</c> based on form controls.
    /// </summary>
    /// <param name = "_projTable"> The <c>ProjTable</c> record. </param>
    /// <param name = "_custTable"> The <c>CustTable</c> record.</param>
    /// <param name = "_copyFromProject"> The <c>ProjTable</c> to copy from.</param>
    /// <param name = "_invoiceProject"> The <c>ProjInvoiceTable</c> record.</param>
    protected void initProjTable(ProjTable _projTable, CustTable _custTable, ProjTable _copyFromProject, ProjInvoiceTable _invoiceProject)
    {
        _projTable.Type = projType.selection();
        _projTable.type().initProjTable();

        _projTable.initFromProjGroup(ProjGroup::find(projGroupId.text()));

        // Is the wizard opened from a sales order?
        if (sysWizard.getSalesTable())
        {
            // Initialize project based on customer on sales order
            _projTable.initFromCustTable(_custTable);
            _projTable.ProjPriceGroup = _custTable.PriceGroup;

            _projTable.DeliveryLocation     = sysWizard.getSalesTable().deliveryLocation();
            _projTable.DlvName              = sysWizard.getSalesTable().DeliveryName;
            _projTable.DefaultDimension     = sysWizard.getSalesTable().DefaultDimension;
        }
        else
        {
            // If the wizard is not opened from a sales order, the customer should be specified
            if (custAccount.text())
            {
                // Initialize project based on the customer selected in the wizard
                _projTable.initFromCustTable(_custTable);
                _projTable.ProjPriceGroup = _custTable.PriceGroup;
            }
        }

        _projTable.ProjId       = ctrlProjId.text();
        _projTable.ProjGroupId  = projGroupId.text();
        _projTable.Name         = name.text();
        _projTable.Format       = mask.text();
        _projTable.wipProject   = projWIPId.text();

        if (invoiceProjectSelection.selectionAsSMAInvoiceProjectSelection() == SMAInvoiceProjectSelection::UseExistingInvoiceProject && existingInvoiceProject.text())
        {
            _invoiceProject = ProjInvoiceTable::find(existingInvoiceProject.text());
        }
        else if (invoiceProjectSelection.selectionAsSMAInvoiceProjectSelection() == SMAInvoiceProjectSelection::CreateNewInvoiceProject && newInvoiceProject.text())
        {
            _invoiceProject = ProjInvoiceTable::find(newInvoiceProject.text());
        }
        else    // SMAInvoiceProjectSelection::NoInvoiceProject selected
        {
            _invoiceProject.clear();
        }

        // Initialize _projTable from _invoiceProject.
        if (_invoiceProject.RecId != 0)
        {
            _projTable.ProjInvoiceProjId = _invoiceProject.ProjInvoiceProjId;

            _projTable.initFromInvoice(_invoiceProject);
            if (sysWizard.getSalesTable())
            {
                _projTable.DefaultDimension     = sysWizard.getSalesTable().DefaultDimension;
            }
        }

        if (useExistingProject.selectionAsSMAProjectSelection() == SMAProjectSelection::CreateNewAndCopy)
        {
            _copyFromProject = ProjTable::find(existingProject.text());

            if (_copyFromProject)
            {
                _projTable.ProjLedgerPosting            = _copyFromProject.ProjLedgerPosting;
                _projTable.ValidateProjCategory         = _copyFromProject.ValidateProjCategory;
                _projTable.WorkerResponsible            = _copyFromProject.WorkerResponsible;
                _projTable.WorkerResponsibleFinancial   = _copyFromProject.WorkerResponsibleFinancial;
                _projTable.WorkerResponsibleSales       = _copyFromProject.WorkerResponsibleSales;
                _projTable.SortingId                    = _copyFromProject.SortingId;
                _projTable.ProjLinePropertySearch       = _copyFromProject.ProjLinePropertySearch;
                _projTable.Email                        = _custTable.email();
                _projTable.projLinePropertyId(true, _projTable, _copyFromProject.projLinePropertyId(false, _copyFromProject, ''));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSMAAgreementTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SMAAgreementTable</c> record based on form controls.
    /// </summary>
    /// <param name = "_smaAgreementTable"> The <c>SMAAgreementTable</c> record. </param>
    protected void initSMAAgreementTable(SMAAgreementTable _smaAgreementTable)
    {
        _smaAgreementTable.initValue();

        _smaAgreementTable.AgreementDescription      = agreementDescription.text();
        _smaAgreementTable.AgreementGroupId          = agreementGroupId.text();
        if (agreementId.visible())
        {
            _smaAgreementTable.AgreementId           = agreementId.text();
        }
        else
        {
            _smaAgreementTable.AgreementId           = NumberSeq::newGetNum(SMAParameters::numRefAgreementId(), false).num();
        }
        _smaAgreementTable.EndDate                   = agreementEndDate.dateValue();
        _smaAgreementTable.GroupBy                   = groupBy.selection();
        if (useExistingProject.selectionAsSMAProjectSelection() == SMAProjectSelection::UseExisting && existingProject.text())
        {
            _smaAgreementTable.ProjId                = existingProject.text();
        }
        else
        {
            _smaAgreementTable.ProjId                = ctrlProjId.text();
        }
        _smaAgreementTable.WorkerServiceResponsible  = serviceResponsible.value();
        _smaAgreementTable.WorkerPreferredTechnician = preferredTechnician.value();
        _smaAgreementTable.StartDate                 = agreementStartDate.dateValue();
        _smaAgreementTable.Suspended                 = NoYes::No;
        _smaAgreementTable.TemplateGroupId           = '';
        _smaAgreementTable.ContactPersonId           = contactPersonId.text();
        _smaAgreementTable.ServiceLevelAgreementId   = serviceLevelAgreementId.text();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSMAServiceOrderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SMAServiceOrderTable</c> based on form controls.
    /// </summary>
    /// <param name = "_smaServiceOrderTable"> The <c>SMAServiceOrderTable</c> record. </param>
    protected void initSMAServiceOrderTable(SMAServiceOrderTable _smaServiceOrderTable)
    {
        _smaServiceOrderTable.initValue();

        _smaServiceOrderTable.Origin = SMAServiceOrderOrigin::User;

        if (projectForServiceOrder.text())
        {
            _smaServiceOrderTable.ProjId = projectForServiceOrder.text();
        }
        else
        {
            if (agreementForServiceOrder.text())
            {
                _smaServiceOrderTable.AgreementId   = agreementForServiceOrder.text();
            }
            else if (agreement.AgreementId)
            {
                _smaServiceOrderTable.AgreementId   = agreement.AgreementId;
            }
        }

        if (_smaServiceOrderTable.AgreementId)
        {
            _smaServiceOrderTable.initFromAgreement();
        }

        _smaServiceOrderTable.ServiceDateTime = DateTimeUtil::removeTimeZoneOffset(serviceDateTime.dateTimeValue(), DateTimeUtil::getUserPreferredTimeZone());

        _smaServiceOrderTable.Description                   = serviceOrderDescription.text();
        _smaServiceOrderTable.WorkerResponsible             = serviceOrderWorkerResponsible.value();
        _smaServiceOrderTable.WorkerPreferredTechnician     = serviceOrderWorkerPreferredTechnician.value();
        _smaServiceOrderTable.ContactPersonId               = serviceContactPersonId.text();
        _smaServiceOrderTable.CustAccount                   = sysWizard.getSalesTable().CustAccount;

        _smaServiceOrderTable.ServicePostalAddress          = sysWizard.getSalesTable().DeliveryPostalAddress;
        _smaServiceOrderTable.ServiceAddressName            = sysWizard.getSalesTable().DeliveryName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        super();

        // Is the number sequence number not used
        if (projNumberSeq)
        {
            // Release the number so it can be used again
            projNumberSeq.abort();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        SMAAgreementTable       sourceAgreementTable;
        SMAAgreementLine        sourceAgreementLine;
        SMAAgreementLine        destinationAgreementLine;
        SMAServiceOrderTable    serviceOrderTable;
        SMAServiceTaskRelation  taskRelation;
        SMAServiceTaskRelation  newTaskRelation;
        NumberSeq               numberSeq = NumberSeq::newGetNum(SMAParameters::numRefServiceOrderId(), false);
        boolean                 includeProject;
        ProjTable               copyFromProject;
        ProjValProjCategorySetUp projValProjCategorySetUp;
        ProjValProjCategorySetUp projValProjCategorySetUpCopy;
        CustTable               custTable;
        ProjInvoiceTable        invoiceProject;
        QueryBuildDataSource    qbdsSMAAgreementTable;
        QueryBuildDataSource    qbdsSMAAgreementLine;
        Query                   query;
        SMACopyLines            copyLines;

        ttsbegin;

        // Are the Project number sequence number or does the specified number apply to the rules on the number sequence?
        if (numberSequenceTable.Manual || NumberSeq::checkChangeNumber(numberSequenceTable, tableNum(ProjTable), fieldNum(ProjTable, ProjId), origNum, ctrlProjId.text()))
        {
            if (sysWizard.getSalesTable())
            {
                custTable = CustTable::find(sysWizard.getSalesTable().CustAccount);
            }
            else
            {
                custTable = CustTable::find(custAccount.text());
            }

            // Should a new invoice project be created?
            if (invoiceProjectSelection.selectionAsSMAInvoiceProjectSelection() == SMAInvoiceProjectSelection::CreateNewInvoiceProject && newInvoiceProject.text())
            {
                invoiceProject.initValue();

                // Is the wizard opened from a sales order?
                if (sysWizard.getSalesTable())
                {
                    invoiceProject.ListCodeId           = sysWizard.getSalesTable().Listcode;
                    invoiceProject.TransactionCodeId    = sysWizard.getSalesTable().TransactionCode;
                }

                // Copy ProjPriceGroup and currency from customer
                if (custTable)
                {
                    invoiceProject.ProjPriceGroup = custTable.PriceGroup;
                    invoiceProject.CurrencyId = custTable.Currency;
                }

                // Use the invoice project id entered in the wizard
                invoiceProject.ProjInvoiceProjId = newInvoiceProject.text();

                // Create the new invoice project
                invoiceProject.insert();

                // Create the funding source and default funding rule
                ProjFundingSource::createFundingSource(invoiceProject.ProjInvoiceProjId, custTable.AccountNum);

                TradeBLWIJournalPurposeCodes::createRecord(TradeBLWICustVend::Customer, invoiceProject.RecId, custTable.AccountNum, TradeBLWITypeOfForm::InvoiceProject);

                // Invoice project %1 created
                info(strFmt("@SYS102591", invoiceProject.ProjInvoiceProjId));
            }

            // Should a new project be created?
            if ((useExistingProject.selectionAsSMAProjectSelection() == SMAProjectSelection::CreateNew || 
                 useExistingProject.selectionAsSMAProjectSelection() == SMAProjectSelection::CreateNewAndCopy) && 
                 ctrlProjId.text())
            {
                this.initProjTable(newProjectTable, custTable, copyFromProject, invoiceProject);
                newProjectTable.insert();

                if (projLinePropertyId.text())
                {
                    ProjLinePropertySetup::updateLinePropertyProj(newProjectTable.ProjId, projLinePropertyId.text(), TableGroupAll::Table, true);
                }

                // Project %1 created
                info(strFmt("@SYS102545", newProjectTable.ProjId));

                if (existingAgreement.text())
                {
                    select sourceAgreementTable where sourceAgreementTable.AgreementId == existingAgreement.text();

                    while select projValProjCategorySetUp where sourceAgreementTable.ProjId == projValProjCategorySetUp.ProjId
                    {
                        projValProjCategorySetUpCopy.GroupId = projValProjCategorySetUp.GroupId;
                        projValProjCategorySetUpCopy.CategoryId = projValProjCategorySetUp.CategoryId;
                        projValProjCategorySetUpCopy.ProjId = newProjectTable.ProjId;
                        if (projValProjCategorySetUpCopy.validateWrite())
                        {
                            projValProjCategorySetUpCopy.insert();
                        }
                    }
                }
            }

            if (sysWizard.getWizardCreateType() == SMAWizardCreateType::Agreement || (sysWizard.getWizardCreateType() == SMAWizardCreateType::ServiceOrder && agreementForServiceOrder.text() == '' && projectForServiceOrder.text() == ''))
            {
                this.initSMAAgreementTable(agreement);
                agreement.insert();

                // Agreement %1 created
                info(strFmt("@SYS102547", agreement.AgreementId));

                // Should tasks be copied from the old agreement to the new agreement?
                if (includeTasks.value() && existingAgreement.text())
                {
                    while select taskRelation where taskRelation.RelTableId == tableNum(SMAAgreementTable) && taskRelation.RelKeyId == existingAgreement.text()
                    {
                        newTaskRelation.clear();
                        newTaskRelation.DescriptionExternal = taskRelation.DescriptionExternal;
                        newTaskRelation.DescriptionInternal = taskRelation.DescriptionInternal;
                        newTaskRelation.RelKeyId            = agreement.AgreementId;
                        newTaskRelation.RelTableId          = tableNum(SMAAgreementTable);
                        newTaskRelation.ServiceTaskId       = taskRelation.ServiceTaskId;

                        newTaskRelation.insert();
                    }
                }

                if (agreement.AgreementId && copyAgreementLines.value() == NoYes::Yes && existingAgreement.text())
                {
                    while select sourceAgreementLine
                            where sourceAgreementLine.AgreementId       == existingAgreement.text()
                                    && sourceAgreementLine.Suspended    == NoYes::No
                    {
                        destinationAgreementLine.clear();

                        // Attach line to the agreement that was passed to the class
                        destinationAgreementLine.AgreementId = agreement.AgreementId;

                        // Find a new agreement line number
                        destinationAgreementLine.newAgreementLineNum();

                        // Use project from the agreement header
                        destinationAgreementLine.ProjId = agreement.ProjId;

                        includeProject = (destinationAgreementLine.ProjId) && destinationAgreementLine.ProjId == sourceAgreementLine.ProjId;

                        // Copy values from the selected agreement line
                        destinationAgreementLine.initFromAgreementLine(sourceAgreementLine, includeTasks.value(), includeProject);

                        // Copy values from the project associated with the agreement
                        destinationAgreementLine.SMAServiceLineMap::initFromProjTable(ProjTable::find(destinationAgreementLine.ProjId));

                        if (destinationAgreementLine.validateWrite())
                        {
                            destinationAgreementLine.insert();
                        }
                    }
                }
            }

            if (sysWizard.getWizardCreateType() == SMAWizardCreateType::ServiceOrder)
            {
                serviceOrderTable.ServiceOrderId = numberSeq.num();
                this.initSMAServiceOrderTable(serviceOrderTable);
                serviceOrderTable.insert();

                // Service order %1 created
                info(strFmt("@SYS102548", serviceOrderTable.ServiceOrderId));

                // Should agreement lines be copied?
                if (serviceOrderTable.AgreementId)
                {
                    // Setup query to find all agreement lines
                    query = new Query();
                    qbdsSMAAgreementTable = query.addDataSource(tableNum(SMAAgreementTable));
                    qbdsSMAAgreementLine = qbdsSMAAgreementTable.addDataSource(tableNum(SMAAgreementLine));
                    qbdsSMAAgreementLine.relations(true);
                    qbdsSMAAgreementTable.addRange(fieldNum(SMAAgreementTable, AgreementId)).value(serviceOrderTable.AgreementId);
                    qbdsSMAAgreementLine.addRange(fieldNum(SMAAgreementLine, Suspended)).value(queryValue(NoYes::No));

                    // Copy agreement lines into service order
                    copyLines = SMACopyLines::construct();
                    copyLines.parmQueryRun(new QueryRun(query));
                    copyLines.setDestinationServiceOrder(serviceOrderTable);
                    copyLines.parmIncludeObjects(NoYes::Yes);
                    copyLines.parmIncludeTasks(NoYes::Yes);
                    copyLines.copyServiceAgreementLines();
                }
            }

            // Is the wizard opened from a sales order?
            if (sysWizard.getSalesTable())
            {
                // Should the wizard create an agreement?
                if (sysWizard.getWizardCreateType() == SMAWizardCreateType::Agreement)
                {
                    // Attach the selected objects to the agreement
                    SMAServiceObjectRelation::attachObjects(tmpSMAAgreementObjects_ds, sysWizard.getSalesTable().SalesId, agreement.AgreementId, tableNum(SMAAgreementTable));
                }
                else if (sysWizard.getWizardCreateType() == SMAWizardCreateType::ServiceOrder) // Should the wizard create a service order
                {
                    // Attach the selected objects to the service order
                    SMAServiceObjectRelation::attachObjects(tmpSMAAgreementObjects_ds, sysWizard.getSalesTable().SalesId, serviceOrderTable.ServiceOrderId, tableNum(SMAServiceOrderTable));
                }
            }

            // Was a number from the project number sequence reserved?
            if (projNumberSeq)
            {
                // Mark number as used
                projNumberSeq.used();
                projNumberSeq = null;
            }

            // Was a number from the agreement number sequence reserved?
            if (agreementNumberSeq)
            {
                // Mark number as used
                agreementNumberSeq.used();
            }
        }

        ttscommit;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventDim</Name>
				<Source><![CDATA[
    void findInventDim()
    {
        if (!lastInventDim || lastInventDim.InventDimId != tmpSMAAgreementObjects.InventDimId)
        {
            lastInventDim = InventDim::find(tmpSMAAgreementObjects.InventDimId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findObjects</Name>
				<Source><![CDATA[
    void findObjects(boolean _allowIdenticalItemsAsObjects)
    {
        SalesLine               salesLine;
        InventDim               inventDimSales;
        InventDim               inventDimObject;
        SMAServiceObjectTable   serviceObjectTable;
        InventTrans             inventTrans;
        InventTransOrigin       inventTransOrigin;

        InventDimParm prodDims = InventDimParm::allProductDim();

        // Find items on the sales order that are applicable for service (exists as objects)
        if (!_allowIdenticalItemsAsObjects)
        {
            while select sum(Qty) from inventTrans
                    join  inventDimSales
                    join inventTransOrigin
                    where inventTransOrigin.RecId   == inventTrans.InventTransOrigin &&
                          inventTrans.InventDimId   == inventDimSales.InventDimId  &&
                          inventTrans.Qty           != 0
                    join firstonly serviceObjectTable
                        group by inventTrans.ItemId, inventTrans.InventDimId, serviceObjectTable.ServiceObjectId, serviceObjectTable.TemplateBOMId
                        where serviceObjectTable.ItemId == inventTrans.ItemId
                        exists join salesLine
                            where inventTransOrigin.InventTransId == salesLine.InventTransId &&
                                  salesLine.QtyOrdered      >  0                             &&
                                  salesLine.SalesId         == sysWizard.getSalesTable().SalesId
                    #InventDimExistsJoin(serviceObjectTable.InventDimId, inventDimObject, inventDimSales, prodDims)
            {
                tmpSMAAgreementObjects.ItemId           = inventTrans.ItemId;
                tmpSMAAgreementObjects.InventDimId      = inventTrans.InventDimId;
                tmpSMAAgreementObjects.ServiceObjectId  = serviceObjectTable.ServiceObjectId;
                tmpSMAAgreementObjects.SalesLineQty     = -inventTrans.Qty;
                tmpSMAAgreementObjects.TemplateBOMId    = serviceObjectTable.TemplateBOMId;

                tmpSMAAgreementObjects.insert();
            }
        }
        else
        {
            while select sum(Qty) from inventTrans
                join  inventDimSales
                    join inventTransOrigin
                    where inventTransOrigin.RecId   == inventTrans.InventTransOrigin &&
                          inventTrans.InventDimId   == inventDimSales.InventDimId &&
                          inventTrans.Qty           != 0
                exists join firstonly serviceObjectTable
                    group by inventTrans.ItemId, inventTrans.InventDimId
                    where serviceObjectTable.ItemId == inventTrans.ItemId
                    exists join salesLine
                        where inventTransOrigin.InventTransId == salesLine.InventTransId           &&
                                salesLine.QtyOrdered      >  0                                     &&
                                salesLine.SalesId         == sysWizard.getSalesTable().SalesId
                    #InventDimExistsJoin(serviceObjectTable.InventDimId, inventDimObject, inventDimSales, prodDims)
            {
                tmpSMAAgreementObjects.ItemId           = inventTrans.ItemId;
                tmpSMAAgreementObjects.InventDimId      = inventTrans.InventDimId;
                tmpSMAAgreementObjects.ServiceObjectId  = '';
                tmpSMAAgreementObjects.SalesLineQty     = -inventTrans.Qty;
                tmpSMAAgreementObjects.TemplateBOMId    = '';

                tmpSMAAgreementObjects.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        Query                   query;
        QueryRun                queryRun;
        QueryBuildDataSource    queryDatasourceProjInvoiceTable, queryDatasourceProjFundingSource;
        QueryBuildRange         queryRangeCustomer;
        ProjInvoiceTable        invoiceProjects;
        NumberSequenceTable     objectRelationNumberSequence;
        boolean                 allowAttachObjects = true;
        boolean                 allowIdenticalItemsAsObjects = SMAParameters::find().AllowIdenticalItemsAsObjects;

        super();

        query = new Query();
        queryDatasourceProjInvoiceTable = query.addDataSource(tableNum(ProjInvoiceTable));
        queryDatasourceProjFundingSource = queryDatasourceProjInvoiceTable.addDataSource(tableNum(ProjFundingSource));
        queryDatasourceProjFundingSource.joinMode(JoinMode::ExistsJoin);
        queryDatasourceProjFundingSource.relations(true);
        queryRangeCustomer = queryDatasourceProjFundingSource.addRange(fieldNum(ProjFundingSource, CustAccount));

        wizardInitialized = false;

        if (element.args().caller())
        {
            sysWizard = element.args().caller();
        }
        else
        {
            // Form was called incorrectly.
            throw error("@SYS22996");
        }

        if (sysWizard.getWizardCreateType() != SMAWizardCreateType::ServiceOrder)
        {
            sysWizard.setTabsToSkip(true, #AgreementSelection);
            sysWizard.setTabsToSkip(true, #NewServiceOrder);
        }
        else
        {
            ordersWithoutAgreementAllowed = SMAParameters::find().UnattachedServiceOrder;

            if (!ordersWithoutAgreementAllowed)
            {
                projectForServiceOrder.visible(false);
                project.visible(false);
            }
        }

        if (sysWizard.getSalesTable())
        {
            queryRangeCustomer.value(sysWizard.getSalesTable().CustAccount);

            queryRun = new QueryRun(query);
            queryRun.next();
            invoiceProjects = queryRun.get(tableNum(ProjInvoiceTable));

            // Is a invoice project found for the customer
            if (invoiceProjects)
            {
                // Use the invoice project as default
                existingInvoiceProject.text(invoiceProjects.ProjInvoiceProjId);

                // Try to see if there is more invoice projects for the customer
                queryRun.next();
                invoiceProjects = queryRun.get(tableNum(ProjInvoiceTable));

                // Is there more than one invoice project for the customer?
                if (invoiceProjects)
                {
                    // We don't want a default invoice project if there is more than one for the customer
                    existingInvoiceProject.text('');
                }
            }

            // Was a default invoice project found?
            if (existingInvoiceProject.text())
            {
                // Set invoice project controls on the form
                invoiceProjectSelection.selectionAsSMAInvoiceProjectSelection(SMAInvoiceProjectSelection::UseExistingInvoiceProject);
                existingInvoiceProject.enabled(false);
                newInvoiceProject.enabled(false);
            }
        }

        // Welcome page
        if (sysWizard.getSalesTable())
        {
            if (sysWizard.getWizardCreateType() == SMAWizardCreateType::Agreement)
            {
                // This wizard will create a new service agreement based on the sales order.
                welcomeText.text("@SYS102549");
                element.design().caption("@SYS102550");
            }
            else
            {
                // This wizard will create a new service order based on a sales order.
                welcomeText.text("@SYS102551");
                element.design().caption("@SYS102552");
            }
        }
        else
        {
            // This wizard will create a new service agreement.
            welcomeText.text("@SYS102554");
            element.design().caption("@SYS102555");
        }

        // Click Finish to complete the setup.
        ctrlEndTxt1.text("@SYS81147");

        objectRelationNumberSequence = SMAParameters::numRefSMAServiceObjectRelationId().numberSequenceTable();

        // Was object relation number sequence not set up or is it manual
        if (!objectRelationNumberSequence || objectRelationNumberSequence.Manual)
        {
            // Don't allow objects to be attached
            allowAttachObjects = false;
        }

        if (sysWizard.getSalesTable() && allowAttachObjects)
        {
            // Find objects that matches the items on the sales order
            this.findObjects(allowIdenticalItemsAsObjects);
        }

        // Was none of the objects applicable for service?
        if (!tmpSMAAgreementObjects)
        {
            // Skip the attach object page in the wizard
            sysWizard.setTabsToSkip(true, #Objects);
        }

        // Mark mandatory fields
        agreementGroupId.mandatory(true);
        agreementStartDate.mandatory(true);
        projGroupId.mandatory(true);
        ctrlProjId.mandatory(true);
        agreementId.mandatory(true);
        serviceDateTime.mandatory(true);

        // Set default values for agreement
        agreementGroupId.text(SMAParameters::find().AgreementGroupId);
        agreementStartDate.dateValue(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        serviceResponsible.value(HcmWorker::userId2Worker(curUserId()));

        if (sysWizard.getSalesTable())
        {
            agreementDescription.text(sysWizard.getSalesTable().customerName());

            contactPersonId.text(sysWizard.getSalesTable().ContactPersonId);
            if (contactPersonId.text())
            {
                contactName.text(ContactPerson::find(contactPersonId.text()).personName());
            }

            serviceContactPersonId.text(sysWizard.getSalesTable().ContactPersonId);
            if (serviceContactPersonId.text())
            {
                serviceContactName.text(ContactPerson::find(serviceContactPersonId.text()).personName());
            }
        }

        // Initialize project number sequence
        numberSequenceTable = NumberSequenceTable::find(ProjParameters::numRefProjId().NumberSequenceId);

        agreementNumberSequence = SMAParameters::numRefAgreementId().numberSequenceTable();

        if (!agreementNumberSequence.Manual && !agreementNumberSequence.AllowChangeDown && !agreementNumberSequence.AllowChangeUp)
        {
            id.visible(false);
            agreementId.visible(false);
        }
        else
        {
            if (!agreementNumberSequence.Manual)
            {
                // Get next number from number sequence
                agreementNumberSeq = NumberSeq::newGetNum(SMAParameters::numRefAgreementId(), true);

                if (agreementNumberSeq)
                {
                    origAgreementNum = agreementNumberSeq.num();

                    // Write number sequence to form field
                    agreementId.text(origAgreementNum);

                    if (!agreementNumberSequence.AllowChangeDown && !agreementNumberSequence.AllowChangeUp)
                    {
                        // Do not allow number sequence to be changed
                        agreementId.enabled(false);
                    }
                }
            }
        }

        // Don't show customer field if the wizard is opened from a sales order
        if (sysWizard.getSalesTable())
        {
            customer.visible(false);
            custAccount.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPage</Name>
				<Source><![CDATA[
    void initPage(int _fromTab, int _toTab)
    {
        this.setNext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextPageOk</Name>
				<Source><![CDATA[
    boolean nextPageOk()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevPageOk</Name>
				<Source><![CDATA[
    boolean prevPageOk()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNext</Name>
				<Source><![CDATA[
    void setNext()
    {
        boolean ok = true;

        switch (sysWizard.curTab())
        {
            case #AgreementSelection:
                if (!ordersWithoutAgreementAllowed)
                {
                    if (!agreementForServiceOrder.text())
                    {
                        ok = false;
                    }
                }
                else
                {
                    if (!agreementForServiceOrder.text() && !projectForServiceOrder.text())
                    {
                        ok = false;
                    }
                }
                break;
            case #NewServiceOrder:
                if (DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(serviceDateTime.dateTimeValue(),DateTimeUtil::getUserPreferredTimeZone())) == dateNull())
                {
                    ok = false;
                }
                break;

            case #ExistingOrNew:
                if (agreementId.visible())
                {
                    if (!agreementId.text())
                    {
                        ok = false;
                    }
                }
                if (custAccount.visible())
                {
                    if (!custAccount.text())
                    {
                        ok = false;
                    }
                }
                if (invoiceProjectSelection.selectionAsSMAInvoiceProjectSelection() == SMAInvoiceProjectSelection::UseExistingInvoiceProject)
                {
                    if (!existingInvoiceProject.text())
                    {
                        ok = false;
                    }
                    else
                    {
                        if (!ProjInvoiceTable::find(existingInvoiceProject.text()))
                        {
                            ok = false;
                        }
                    }
                }
                else
                if (invoiceProjectSelection.selectionAsSMAInvoiceProjectSelection() == SMAInvoiceProjectSelection::CreateNewInvoiceProject)
                {
                    if (!newInvoiceProject.text())
                    {
                        ok = false;
                    }
                    else
                    {
                        if (ProjInvoiceTable::find(newInvoiceProject.text()))
                        {
                            error("@SYS102556");
                            ok = false;
                        }
                    }
                }

                if (useExistingProject.selectionAsSMAProjectSelection() == SMAProjectSelection::UseExisting && existingProject.text() == '')
                {
                    ok = false;
                }

                if (useExistingAgreement.selection() == NoYes::Yes && existingAgreement.text() == '')
                {
                    ok =  false;
                }
                break;

            case #NewProject:
                if (invoiceProjectSelection.selectionAsSMAInvoiceProjectSelection() == SMAInvoiceProjectSelection::NoInvoiceProject)
                {
                    if (projType.selection() == ProjType::FixedPrice || projType.selection() == ProjType::TimeMaterial)
                    {
                        // The selected project type can not be used for project without invoice project
                        ok = false;
                    }
                }
                else
                {
                    if (projType.selection() == ProjType::Cost || projType.selection() == ProjType::Internal || projType.selection() == ProjType::Investment)
                    {
                        ok = false;
                    }
                }
                if (projGroupId.text() == '')
                {
                    ok = false;
                }
                if (ctrlProjId.text() == '')
                {
                    ok = false;
                }
                break;

            case #NewAgreement:
                if (agreementStartDate.dateValue() == dateNull())
                {
                    ok = false;
                }
                else
                {
                    if (agreementGroupId.text() == '')
                    {
                        ok = false;
                    }
                }
                break;
        }

        sysWizard.nextEnabled(ok, sysWizard.curTab(), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProject</Name>
				<Source><![CDATA[
    public void setProject(ProjId _projId, ProjInvoiceId _projInvoiceId = '')
    {
        if (_projId)
        {
            existingProject.text(_projId);
            existingProject.enabled(true);

            useExistingProject.selectionAsSMAProjectSelection(SMAProjectSelection::UseExisting);
            invoiceProjectSelection.selectionAsSMAInvoiceProjectSelection(SMAInvoiceProjectSelection::UseExistingInvoiceProject);
            existingInvoiceProject.enabled(true);
            newInvoiceProject.enabled(false);

            // The project creation page should not be shown
            sysWizard.setTabsToSkip(true, #NewProject);

            if (_projInvoiceId)
            {
                existingInvoiceProject.text(_projInvoiceId);

                // A new invoice project is created and the Next button should be activated
                sysWizard.nextEnabled(true, sysWizard.curTab(), false);
            }
            else
            {
                invoiceProjectSelection.selectionAsSMAInvoiceProjectSelection(SMAInvoiceProjectSelection::NoInvoiceProject);
                existingInvoiceProject.text('');

                invoiceProjectSelection.enabled(false);

                // When this method is called the actual invoice project is not created from the proj wizard so we don't call setNext as it will give the incorrect result
                element.setNext();
            }

            existingInvoiceProject.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tab</Name>
				<Source><![CDATA[
    FormTabControl tab()
    {
        return tab;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wizard</Name>
				<Source><![CDATA[
    SysWizard wizard()
    {
        return sysWizard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProjectLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs a query  for <c>ExistingProject</c> lookup.
    /// </summary>
    /// <returns>
    ///     An instance of a query to construct <c>ExistingProject</c> lookup.
    /// </returns>
    /// <remarks>
    ///      Extend this method to modify criteria on Project lookups.
    /// </remarks>
    protected Query buildProjectLookupQuery()
    {
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tableNum(ProjTable));
        qbds.addRange(fieldNum(ProjTable, Type)).value(queryValue(SysQuery::valueNot(ProjType::Time)));
        qbds.addRange(fieldNum(ProjTable, Status)).value(queryValue(SysQuery::valueNot(ProjStatus::Completed)));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldsToProjectLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Defines the default fields for Project lookups.
    /// </summary>
    /// <param name = "_this">
    ///     The current instance.
    /// </param>
    /// <returns>
    ///     An instance of <c>SysTableLookup</c> class which holds the lookup fields.
    /// </returns>
    /// <remarks>
    ///     Extend this method to add or remove fields from Project lookups.
    /// </remarks>
 
    protected SysTableLookup addFieldsToProjectLookup(FormControl _this)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(ProjTable), _this);

        sysTableLookup.addLookupfield(fieldNum(ProjTable, ProjId));
        sysTableLookup.addLookupfield(fieldNum(ProjTable, Name));
        sysTableLookup.addLookupfield(fieldNum(ProjTable, Type));
        sysTableLookup.addLookupfield(fieldNum(ProjTable, CustAccount));

        return sysTableLookup;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>tmpSMAAgreementObjects</Name>
				<Methods>
					<Method>
						<Name>style</Name>
						<Source><![CDATA[
        display EcoResItemStyleName style(tmpSMAAgreementObjects _tmpSMAAgreementObjects)
        {
            if (_tmpSMAAgreementObjects.InventDimId)
            {
                element.findInventDim();

                return lastInventDim.InventStyleId;
            }
            else
            {
                return '';
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>color</Name>
						<Source><![CDATA[
        display EcoResItemColorName color(tmpSMAAgreementObjects _tmpSMAAgreementObjects)
        {
            if (_tmpSMAAgreementObjects.InventDimId)
            {
                element.findInventDim();

                return lastInventDim.InventColorId;
            }
            else
            {
                return '';
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>version</Name>
						<Source><![CDATA[
        display EcoResItemVersionName version(tmpSMAAgreementObjects _tmpSMAAgreementObjects)
        {
            if (_tmpSMAAgreementObjects.InventDimId)
            {
                element.findInventDim();

                return lastInventDim.InventVersionId;
            }
            else
            {
                return '';
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>size</Name>
						<Source><![CDATA[
        display EcoResItemSizeName size(tmpSMAAgreementObjects _tmpSMAAgreementObjects)
        {
            if (_tmpSMAAgreementObjects.InventDimId)
            {
                element.findInventDim();

                return lastInventDim.InventSizeId;
            }
            else
            {
                return '';
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>config</Name>
						<Source><![CDATA[
        display EcoResItemConfigurationName config(tmpSMAAgreementObjects _tmpSMAAgreementObjects)
        {
            ;
            if (_tmpSMAAgreementObjects.InventDimId)
            {
                element.findInventDim();

                return lastInventDim.ConfigId;
            }
            else
            {
                return '';
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>CreateObject</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                Dialog                  dialog;
                DialogField             dialogNumberOfObjects;
                Counter                 counter;

                if (tmpSMAAgreementObjects.CreateObject)
                {
                    if (tmpSMAAgreementObjects.SalesLineQty == 1)
                    {
                        super();
                    }
                    else
                    {
                        dialog = new Dialog("@SYS102558");
                        dialogNumberOfObjects = dialog.addFieldValue(extendedTypeStr(SMANumberOfLines), tmpSMAAgreementObjects.SalesLineQty);

                        if (dialog.run() && dialogNumberOfObjects.value() > 0)
                        {
                            if (dialogNumberOfObjects.value() <= tmpSMAAgreementObjects.SalesLineQty)
                            {
                                if (tmpSMAAgreementObjects.SalesLineQty == dialogNumberOfObjects.value())
                                {
                                    dialogNumberOfObjects.value(dialogNumberOfObjects.value() - 1);
                                    tmpSMAAgreementObjects.CreateObject = NoYes::Yes;
                                }
                                else
                                {
                                    tmpSMAAgreementObjects.CreateObject = NoYes::No;
                                }

                                tmpSMAAgreementObjects.SalesLineQty = tmpSMAAgreementObjects.SalesLineQty - dialogNumberOfObjects.value();

                                tmpSMAAgreementObjects.update();

                                for (counter = 0; counter < dialogNumberOfObjects.value(); counter++)
                                {
                                    tmpSMAAgreementObjects.SalesLineQty = 1;
                                    tmpSMAAgreementObjects.CreateObject = NoYes::Yes;

                                    tmpSMAAgreementObjects.insert();
                                }

                                tmpSMAAgreementObjects_ds.executeQuery();
                            }
                            else
                            {
                                // The maximum allowed lines is %1
                                error(strFmt("@SYS102560", tmpSMAAgreementObjects.SalesLineQty));
                                tmpSMAAgreementObjects.CreateObject = NoYes::No;
                            }
                        }
                        else
                        {
                            tmpSMAAgreementObjects.CreateObject = NoYes::No;
                        }
                    }
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Tab</Name>
				<Type>Tab</Type>
				<Methods>
					<Method>
						<Name>tabChanged</Name>
						<Source><![CDATA[
        void tabChanged(int _fromTab, int _toTab)
        {
            super(_fromTab, _toTab);

            element.initPage(_fromTab, _toTab);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AgreementForServiceOrder</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Args                    args;
            Object                  formRun;

            args = new Args();
            args.name(formStr(SMAAgreementTabLookup));
            args.caller(this);
            args.parmEnumeration(SMAWizardCreateType::ServiceOrder);
            formRun = classfactory.formRunClass(args);
            formRun.init();
            this.performFormLookup(formRun);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean             ret;
            SMAAgreementTable   selectedAgreement;
            ;

            ret = super();

            element.setNext();

            if (this.text())
            {
                selectedAgreement = SMAAgreementTable::find(this.text());

                if (selectedAgreement)
                {
                    sysWizard.setTabsToSkip(true, #ExistingOrNew);
                    sysWizard.setTabsToSkip(true, #NewProject);
                    sysWizard.setTabsToSkip(true, #NewAgreement);
                    serviceOrderDescription.text(selectedAgreement.AgreementDescription);
                    serviceOrderWorkerResponsible.value(selectedAgreement.WorkerServiceResponsible);
                    serviceOrderWorkerPreferredTechnician.value(selectedAgreement.WorkerPreferredTechnician);
                }
            }
            else
            {
                sysWizard.setTabsToSkip(false, #ExistingOrNew);
                sysWizard.setTabsToSkip(false, #NewProject);
                sysWizard.setTabsToSkip(false, #NewAgreement);
            }

            // Clear project field
            projectForServiceOrder.text('');

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (this.text() && !SMAAgreementTable::find(this.text()))
            {
                // Agreement not found
                ret = ret && checkFailed("@SYS102542");
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProjectForServiceOrder</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Args                    args;
            Object                  formRun;

            args = new Args();
            args.name(formStr(SMAProjectCustomerLookup));
            args.caller(this);
            formRun = classfactory.formRunClass(args);
            formRun.init();
            formRun.setCustAccount(sysWizard.getSalesTable().CustAccount);
            this.performFormLookup(formRun);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.setNext();

            if (this.text())
            {
                sysWizard.setTabsToSkip(true, #ExistingOrNew);
                sysWizard.setTabsToSkip(true, #NewProject);
                sysWizard.setTabsToSkip(true, #NewAgreement);
            }
            else
            {
                sysWizard.setTabsToSkip(false, #ExistingOrNew);
                sysWizard.setTabsToSkip(false, #NewProject);
                sysWizard.setTabsToSkip(false, #NewAgreement);
            }

            // Clear agreement field
            agreementForServiceOrder.text('');

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CustAccount</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.setNext();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (this.text() && !CustTable::find(this.text()))
            {
                // Customer %1 does not exist.
                ret = ret && checkFailed(strFmt("@SYS4730", this.text()));
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AgreementId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.setNext();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (SMAAgreementTable::find(this.text()))
            {
                // Agreement already exist
                ret = checkFailed("@SYS102543");
            }
            else
            {
                if (!agreementNumberSequence.Manual)
                {
                    ret = ret && NumberSeq::checkChangeNumber(agreementNumberSequence, tableNum(SMAAgreementTable), fieldNum(SMAAgreementTable, AgreementId), origAgreementNum, this.text());
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UseExistingAgreement</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (this.selection() == NoYes::Yes)
            {
                existingAgreement.enabled(true);
                if (existingAgreement.text() != '')
                {
                    copyAgreementLines.enabled(true);
                }
                else
                {
                    copyAgreementLines.enabled(false);
                }

                existingAgreement.mandatory(true);
            }
            else
            {
                existingAgreement.enabled(false);
                existingAgreement.text('');
                copyAgreementLines.enabled(false);
                copyAgreementLines.value(NoYes::No);
                existingAgreement.mandatory(false);
                includeTasks.enabled(false);
                includeTasks.value(NoYes::No);
            }

            element.setNext();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExistingAgreement</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Args                    args;
            Object                  formRun;

            args = new Args();
            args.name(formStr(SMAAgreementTabLookup));
            args.caller(this);
            formRun = classfactory.formRunClass(args);
            formRun.init();
            this.performFormLookup(formRun);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            ProjTable           agreementProject;
            boolean             ret;
            SMAAgreementTable   agreementTable;

            ret = super();

            agreementTable = SMAAgreementTable::find(this.text());

            if (agreementTable)
            {
                if (!sysWizard.getSalesTable())
                {
                    agreementDescription.text(agreementTable.AgreementDescription);
                }
                serviceResponsible.value(agreementTable.WorkerServiceResponsible);
                preferredTechnician.value(agreementTable.WorkerPreferredTechnician);
                agreementGroupId.text(agreementTable.AgreementGroupId);
                groupBy.selection(agreementTable.GroupBy);
                serviceLevelAgreementId.text(agreementTable.ServiceLevelAgreementId);
            }

            // The selected agreement is for the same customer as the sales order
            if (agreementTable && sysWizard.getSalesTable() && agreementTable.custAccount() == sysWizard.getSalesTable().CustAccount)
            {
                existingProject.text(agreementTable.ProjId);

                if (sysWizard.getSalesTable().ReceiptDateConfirmed)
                {
                    agreementStartDate.dateValue(sysWizard.getSalesTable().ReceiptDateConfirmed);
                }
                else
                if (sysWizard.getSalesTable().ShippingDateConfirmed)
                {
                    agreementStartDate.dateValue(sysWizard.getSalesTable().ShippingDateConfirmed);
                }
                else
                {
                    agreementStartDate.dateValue(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                }

                agreementProject = ProjTable::find(agreementTable.ProjId);

                useExistingProject.enabled(true);

                useExistingProject.selectionAsSMAProjectSelection(SMAProjectSelection::UseExisting);

                existingProject.enabled(true);
                existingProject.text(agreementTable.ProjId);

                if (agreementProject.ProjInvoiceProjId)
                {
                    invoiceProjectSelection.selectionAsSMAInvoiceProjectSelection(SMAInvoiceProjectSelection::UseExistingInvoiceProject);
                    existingInvoiceProject.enabled(true);
                    existingInvoiceProject.text(agreementProject.ProjInvoiceProjId);
                    newInvoiceProject.enabled(false);
                }
                else
                {
                    existingInvoiceProject.text('');
                    invoiceProjectSelection.selectionAsSMAInvoiceProjectSelection(SMAInvoiceProjectSelection::CreateNewInvoiceProject);
                }

                sysWizard.setTabsToSkip(true, #NewProject);
            }
            else
            {
                useExistingProject.selectionAsSMAProjectSelection(SMAProjectSelection::CreateNew);

                existingProject.text('');
                existingProject.enabled(false);
                invoiceProjectSelection.selectionAsSMAInvoiceProjectSelection(SMAInvoiceProjectSelection::CreateNewInvoiceProject);
                invoiceProjectSelection.enabled(true);
                newInvoiceProject.enabled(true);
                newInvoiceProject.text('');
                existingInvoiceProject.text('');
                sysWizard.setTabsToSkip(false, #NewProject);
            }

            if (agreementTable)
            {
                copyAgreementLines.enabled(true);
                copyAgreementLines.value(NoYes::Yes);
                includeTasks.enabled(NoYes::Yes);
            }
            else
            {
                copyAgreementLines.enabled(false);
                copyAgreementLines.value(NoYes::No);
                includeTasks.enabled(NoYes::No);
            }

            element.setNext();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (!SMAAgreementTable::find(this.text()))
            {
                ret = checkFailed("@SYS102542");
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UseExistingProject</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            customerIsDifferentWarning.visible(false);

            existingInvoiceProject.text('');
            newInvoiceProject.text('');
            existingProject.text('');

            switch (this.selectionAsSMAProjectSelection())
            {
                case SMAProjectSelection::UseExisting:
                    invoiceProjectSelection.selectionAsSMAInvoiceProjectSelection(SMAInvoiceProjectSelection::UseExistingInvoiceProject);
                    invoiceProjectSelection.enabled(false);
                    existingInvoiceProject.enabled(false);
                    newInvoiceProject.enabled(false);
                    existingProject.enabled(true);
                    existingProject.mandatory(true);
                    break;

                case SMAProjectSelection::CreateNewAndCopy:
                    existingProject.enabled(true);
                    existingProject.mandatory(true);
                    sysWizard.setTabsToSkip(false, #NewProject);
                    invoiceProjectSelection.enabled(true);
                    existingInvoiceProject.enabled(false);
                    newInvoiceProject.enabled(true);
                    invoiceProjectSelection.selectionAsSMAInvoiceProjectSelection(SMAInvoiceProjectSelection::CreateNewInvoiceProject);
                    break;
            
                case SMAProjectSelection::CreateNew:
                    sysWizard.setTabsToSkip(false, #NewProject);
                    existingProject.enabled(false);
                    existingProject.mandatory(false);
                    invoiceProjectSelection.enabled(true);
                    existingInvoiceProject.enabled(false);
                    newInvoiceProject.enabled(true);
                    invoiceProjectSelection.selectionAsSMAInvoiceProjectSelection(SMAInvoiceProjectSelection::CreateNewInvoiceProject);
                    break;
            }

            element.setNext();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionAsSMAProjectSelection</Name>
						<Source><![CDATA[
        public SMAProjectSelection selectionAsSMAProjectSelection(SMAProjectSelection _selection = any2Enum(this.selection()))
        {
            if (!prmIsDefault(_selection))
            {
                this.selection(enum2int(_selection));
            }

            return _selection;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExistingProject</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            SysTableLookup sysTableLookup = element.addFieldsToProjectLookup(this);
            Query query = element.buildProjectLookupQuery();

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean             ret;
            ProjInvoiceTable    projInvoiceTable;
            ProjTable           projTable;
            ProjType            projectType;

            ret = super();

            projTable = ProjTable::find(this.text());

            if (projTable)
            {
                projectType = ProjGroup::find(projTable.ProjGroupId).ProjType;
                sysWizard.setTabsToSkip(useExistingProject.selectionAsSMAProjectSelection() == SMAProjectSelection::UseExisting, #NewProject);

                // Is the customer on the sales order different from the customer on the project
                if (sysWizard.getSalesTable() && (projTable.CustAccount != sysWizard.getSalesTable().CustAccount))
                {
                    customerIsDifferentWarning.visible(true);
                }
                else
                {
                    customerIsDifferentWarning.visible(false);
                }

                // Is the selected project an interal project?
                if (projectType == ProjType::Internal)
                {
                    invoiceProjectSelection.selectionAsSMAInvoiceProjectSelection(SMAInvoiceProjectSelection::NoInvoiceProject);
                    invoiceProjectSelection.enabled(useExistingProject.selectionAsSMAProjectSelection() != SMAProjectSelection::UseExisting);
                    existingInvoiceProject.enabled(false);
                    existingInvoiceProject.text('');
                    newInvoiceProject.enabled(false);
                    newInvoiceProject.text('');
                    customerIsDifferentWarning.visible(false);

                    custAccount.text('');
                    custAccount.enabled(true);
                }
                else
                {
                    if (useExistingProject.selectionAsSMAProjectSelection() == SMAProjectSelection::UseExisting)
                    {
                        invoiceProjectSelection.enabled(false);
                        existingInvoiceProject.enabled(false);
                        newInvoiceProject.enabled(false);
                    }
                    else
                    if (useExistingProject.selectionAsSMAProjectSelection() == SMAProjectSelection::CreateNewAndCopy)
                    {
                        invoiceProjectSelection.enabled(true);
                        existingInvoiceProject.enabled(true);
                        newInvoiceProject.enabled(false);
                    }

                    custAccount.text(projTable.CustAccount);

                    projInvoiceTable = ProjInvoiceTable::find(projTable.ProjInvoiceProjId);
                    if (projInvoiceTable)
                    {
                        invoiceProjectSelection.selectionAsSMAInvoiceProjectSelection(SMAInvoiceProjectSelection::UseExistingInvoiceProject);
                        existingInvoiceProject.text(projInvoiceTable.ProjInvoiceProjId);
                        custAccount.enabled(false);
                    }
                }
            }

            element.setNext();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean     ret;
            ProjTable   validateSelectedProject = ProjTable::find(this.text());

            ret = super();

            if (this.text())
            {
                if (!validateSelectedProject)
                {
                    // Project not found
                    ret = checkFailed("@SYS102541");
                }
                else
                {
                    if (validateSelectedProject.Type == ProjType::Time)
                    {
                        // Project may not be of type Time.
                        ret = checkFailed(strFmt("@SYS90797", validateSelectedProject.Type));
                    }
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>InvoiceProjectSelection</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            
            ret = super();

            newInvoiceProject.text('');
            existingInvoiceProject.text('');
            custWarning.visible(NoYes::No);
            custAccount.text('');

            switch (this.selectionAsSMAInvoiceProjectSelection())
            {
                case SMAInvoiceProjectSelection::CreateNewInvoiceProject:
                    newInvoiceProject.enabled(NoYes::Yes);
                    existingInvoiceProject.enabled(NoYes::No);
                    custAccount.enabled(true);
                    break;

                case SMAInvoiceProjectSelection::UseExistingInvoiceProject:
                    newInvoiceProject.enabled(NoYes::No);
                    existingInvoiceProject.enabled(NoYes::Yes);
                    custAccount.enabled(false);
                    break;
                
                case SMAInvoiceProjectSelection::NoInvoiceProject:
                    newInvoiceProject.enabled(NoYes::No);
                    existingInvoiceProject.enabled(NoYes::No);
                    custAccount.enabled(true);
                    break;
            }
            
            element.setNext();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionAsSMAInvoiceProjectSelection</Name>
						<Source><![CDATA[
        public SMAInvoiceProjectSelection selectionAsSMAInvoiceProjectSelection(SMAInvoiceProjectSelection _selection = any2Enum(this.selection()))
        {
            if (!prmIsDefault(_selection))
            {
                this.selection(enum2int(_selection));
            }

            return _selection;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExistingInvoiceProject</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean             ret;
            CustAccount         selectedCustAccount;
            ProjInvoiceTable    projInvoice;
            
            ret = super();

            if (sysWizard.getSalesTable())
            {
                selectedCustAccount = sysWizard.getSalesTable().CustAccount;
            }
            else
            {
                projInvoice = ProjInvoiceTable::find(this.text());

                if (projInvoice)
                {
                    selectedCustAccount = ProjFundingSource::findCustAccount(projInvoice.ProjInvoiceProjId).CustAccount;
                    custAccount.text(selectedCustAccount);
                }
            }

            if ( ProjFundingSource::findCustAccount(this.text()).CustAccount != selectedCustAccount)
            {
                custWarning.visible(true);
            }
            else
            {
                custWarning.visible(false);
            }

            element.setNext();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean             ret;
            ProjInvoiceTable    validateSelectedInvoiceProject = ProjInvoiceTable::find(this.text());

            ret = super();

            if (this.text())
            {
                if (!validateSelectedInvoiceProject)
                {
                    // Invoice project not found
                    ret = checkFailed("@SYS106919");
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>NewInvoiceProject</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.setNext();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>NewProject</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            ProjGroup   projGroup;
            ProjTable   projTableToCopyFrom;

            super();

            // Is campaign number sequence automatic and has the project not been assigned a id already
            if (!numberSequenceTable.Manual && ctrlProjId.text() == '')
            {
                // Get next number from number sequence
                projNumberSeq = NumberSeq::newGetNum(ProjParameters::numRefProjId(), true);

                if (projNumberSeq)
                {
                    origNum = projNumberSeq.num();

                    // Write number sequence to form field
                    ctrlProjId.text(origNum);

                    if (!numberSequenceTable.AllowChangeDown && !numberSequenceTable.AllowChangeUp)
                    {
                        // Do not allow number sequence to be changed
                        ctrlProjId.enabled(false);
                    }
                }
            }

            // If user have selected CreateNewAndCopy then copy values from selected project.
            // Do it only in case the values wasn't copied from the same project previously
            // otherwise the values will be reset each time user open the tab,
            // f.e. when navigating back from the next tab.
            if ((useExistingProject.selectionAsSMAProjectSelection() == SMAProjectSelection::CreateNewAndCopy) &&
                    (existingProject.text() != existingProjectPreviousValue))
            {
                existingProjectPreviousValue = existingProject.text();

                projTableToCopyFrom = ProjTable::find(existingProjectPreviousValue);
                if (projTableToCopyFrom)
                {
                    projType.selection(projTableToCopyFrom.Type);
                    projGroupId.text(projTableToCopyFrom.ProjGroupId);
                    mask.text(projTableToCopyFrom.Format);
                    projWipId.text(projTableToCopyFrom.wipProject);
                    projLinePropertyId.text(projTableToCopyFrom.projLinePropertyId(false, projTableToCopyFrom, ''));
                }
            }
            else
            {
                // Is no project group specified?
                if (!projGroupId.text())
                {
                    // Find default value from Service parameters
                    projGroup = ProjGroup::find(SMAParameters::find().DefaultProjGroupId);

                    // Was a default value
                    if (projGroup)
                    {
                        // Set default value
                        projGroupId.text(projGroup.ProjGroupId);

                        // Set project type according to deafult value
                        projType.selection(projGroup.ProjType);

                        if (projGroup.ProjType == ProjType::FixedPrice || projGroup.ProjType == ProjType::Investment)
                        {
                            projWipId.enabled(true);
                        }
                        else
                        {
                            projWipId.enabled(false);
                            projWipId.text('');
                        }
                    }
                }
            }

            // Is no project name specified
            if (!name.text())
            {
                // Use customer name from sales order as project name
                if (sysWizard.getSalesTable())
                {
                    name.text(sysWizard.getSalesTable().customerName());
                }
            }

            if (projType.selection() == ProjType::FixedPrice || projType.selection() == ProjType::Investment)
            {
                projWipId.enabled(true);
            }
            else
            {
                projWipId.enabled(false);
                projWipId.text('');
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProjType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            projGroupId.text('');

            if (this.selection() == ProjType::FixedPrice || this.selection() == ProjType::Investment)
            {
                projWipId.enabled(true);
            }
            else
            {
                projWipId.enabled(false);
                projWipId.text('');
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (this.selection() == ProjType::Time)
            {
                // Project type can not be used for service agreements
                ret = ret && checkFailed("@SYS102535");
            }
            else
            {
                if (invoiceProjectSelection.selectionAsSMAInvoiceProjectSelection() == SMAInvoiceProjectSelection::NoInvoiceProject)
                {
                    if (this.selection() == ProjType::FixedPrice || this.selection() == ProjType::TimeMaterial)
                    {
                        // The selected project type can not be used for project without invoice project
                        ret = ret & checkFailed("@SYS106601");
                    }
                }
                else
                {
                    if (projType.selection() == ProjType::Cost || projType.selection() == ProjType::Internal || projType.selection() == ProjType::Investment)
                    {
                        // The selected project type can not be used for project with invoice project
                        ret = ret & checkFailed("@SYS106602");
                    }
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CtrlProjId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ProjTable::find(this.text()))
            {
                // Project already exist
                error("@SYS102536");
                ret = false;
            }
            else
            if (!numberSequenceTable.Manual)
            {
                ret = NumberSeq::checkChangeNumber(numberSequenceTable, tableNum(ProjTable), fieldNum(ProjTable, ProjId), origNum, ctrlProjId.text());
            }

            element.setNext();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProjGroupId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        void lookup()
        {
            ProjGroup::lookupGroup(this, projType.selection());
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.setNext();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean     ret;
            ProjGroup   projGroup = ProjGroup::find(this.text());

            ret = super();

            if (!projGroup)
            {
                // Project group not found
                ret = checkFailed("@SYS102537");
            }
            else
            {
                if (projGroup.ProjType != projType.selection())
                {
                    // The selected project group is not of the selected project type
                    ret = checkFailed("@SYS106873");
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Mask</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && this.text() && !NumberSeq::formatCountSymbols(this.text()))
            {
                // Incorrect format, the character # must be included in the format
                ret = ret && checkFailed("@SYS67825");
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProjLinePropertyId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            Args                args;
            ProjLineProperty    projLineProperty;

            args = new Args();

            projLineProperty = ProjLineProperty::find(projLinePropertyId.text());

            args.lookupRecord(projLineProperty);
            args.caller(this);

            new MenuFunction(menuitemDisplayStr(ProjLineProperty), MenuItemType::Display).run(args);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            projLinePropertyId.text(ProjLineProperty::find(projLinePropertyId.text()).LinePropertyId);

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (projLinePropertyId.text() && ! ProjLineProperty::exist(projLinePropertyId.text()))
            {
                // Line property %1 does not exist
                ret = checkFailed(strFmt("@SYS76949", projLinePropertyId.text()));
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProjWipId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (projGroupId.text())
            {
                ProjWIPTable::lookupProjWIP(this, projGroupId.text());
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean         ret;
            ProjWIPTable    wipTable;

            ret = super();

            if (this.text())
            {
                wipTable = ProjWIPTable::find(this.text());

                if (!wipTable)
                {
                    // Estimate project not found
                    ret = ret && checkFailed("@SYS103868");
                }
                else
                {
                    if (projGroupId.text() && ProjTable::find(this.text()).ProjGroupId != projGroupId.text())
                    {
                        // Estimate project must be attached to the same project group as the current project.
                        ret = ret && checkFailed("@SYS55596");
                    }
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AgreementStartDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.setNext();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ServiceResponsible</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>lookupReference</Name>
						<Source><![CDATA[
        public Common lookupReference()
        {
            return HcmWorkerLookup::newOnlyActiveEmployeesWithinCompany().lookupWorker(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveReference</Name>
						<Source><![CDATA[
        public Common resolveReference()
        {
            Common             ret;

            ret = super();

            if (ret.RecId && !HcmWorkerLookup::newOnlyActiveEmployeesWithinCompany().validateWorker(ret.RecId))
            {
                ret.clear();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PreferredTechnician</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>lookupReference</Name>
						<Source><![CDATA[
        public Common lookupReference()
        {
            return HcmWorkerLookup::newOnlyActiveEmployeesWithinCompany().lookupWorker(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveReference</Name>
						<Source><![CDATA[
        public Common resolveReference()
        {
            Common             ret;

            ret = super();

            if (ret.RecId && !HcmWorkerLookup::newOnlyActiveEmployeesWithinCompany().validateWorker(ret.RecId))
            {
                ret.clear();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ContactPersonId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            SysTableLookup          sysTableLookup;
            Query                   query = new Query();
            QueryBuildDataSource    qbds;
            ProjTable               projTable;

            sysTableLookup = SysTableLookup::newParameters(tableNum(ContactPerson), this);

            sysTableLookup.addLookupfield(fieldNum(ContactPerson, ContactPersonId));
            sysTableLookup.addLookupfield(fieldNum(ContactPerson, Party));
            sysTableLookup.addLookupfield(fieldNum(ContactPerson, ContactForParty));

            qbds = query.addDataSource(tableNum(ContactPerson));

            // Should an existing project be used for the agreement?
            if (useExistingProject.selectionAsSMAProjectSelection() == SMAProjectSelection::UseExisting)
            {
                // Find project
                projTable = ProjTable::find(existingProject.text());

                // Does the project have a customer (i.e. not internal project)
                if (projTable.CustAccount)
                {
                    // Filter on the customer from the project
                    qbds.addRange(fieldNum(ContactPerson, ContactForParty)).value(queryValue(CustTable::find(projTable.CustAccount).Party));
                }
                else
                {
                    // Was the wizard called from a sales order
                    if (sysWizard.getSalesTable())
                    {
                        // Filter on the customer from the sales order
                        qbds.addRange(fieldNum(ContactPerson, ContactForParty)).value(queryValue(sysWizard.getSalesTable().custTable_CustAccount().Party));
                    }
                }
            }
            else
            // Was a customer specified by the user?
            if (custAccount.text())
            {
                // Filter on the customer specified by the user
                qbds.addRange(fieldNum(ContactPerson, ContactForParty)).value(queryValue(CustTable::find(custAccount.text()).Party));
            }
            else
            // Was the wizard called from a sales order
            if (sysWizard.getSalesTable())
            {
                // Filter on the customer from the sales order
                qbds.addRange(fieldNum(ContactPerson, ContactForParty)).value(queryValue(sysWizard.getSalesTable().custTable_CustAccount().Party));
            }

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            contactName.text(ContactPerson::find(this.text()).personName());

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean         ret;
            ContactPerson   contactPerson;

            ret = super();

            if (this.text())
            {
                contactPerson = ContactPerson::find(this.text());

                if (!contactPerson)
                {
                    // Contact person not found
                    ret = checkFailed("@SYS106974");
                }
                else
                {
                    DirPartyRecId customerPartyRecId;

                    if (useExistingProject.selectionAsSMAProjectSelection() == SMAProjectSelection::UseExisting)
                    {
                        customerPartyRecId = CustTable::find(ProjTable::find(existingProject.text()).CustAccount).Party;
                    }
                    else
                    if (custAccount.text())
                    {
                        customerPartyRecId = CustTable::find(custAccount.text()).Party;
                    }
                    else
                    if (sysWizard.getSalesTable())
                    {
                        customerPartyRecId = sysWizard.getSalesTable().custTable_CustAccount().Party;
                    }

                    if (custAccount && contactPerson.ContactForParty != customerPartyRecId)
                    {
                        // Contact person does not belong to the selected customer
                        ret = checkFailed("@SYS106975");
                    }
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AgreementGroupId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.setNext();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (!SMAAgreementGroup::find(this.text()))
            {
                // Agreement group not found
                ret = checkFailed("@SYS102538");
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ServiceLevelAgreementId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (!SMAServiceLevelAgreementTable::find(this.text()))
            {
                // Service level agreement not found
                ret = checkFailed("@SYS103377");
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ServiceDateTime</Name>
				<Type>DateTime</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.setNext();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ServiceOrderWorkerResponsible</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>lookupReference</Name>
						<Source><![CDATA[
        public Common lookupReference()
        {
            return HcmWorkerLookup::newOnlyActiveEmployeesWithinCompany().lookupWorker(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveReference</Name>
						<Source><![CDATA[
        public Common resolveReference()
        {
            Common             ret;

            ret = super();

            if (ret.RecId && !HcmWorkerLookup::newOnlyActiveEmployeesWithinCompany().validateWorker(ret.RecId))
            {
                ret.clear();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ServiceOrderWorkerPreferredTechnician</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>lookupReference</Name>
						<Source><![CDATA[
        public Common lookupReference()
        {
            return HcmWorkerLookup::newOnlyActiveEmployeesWithinCompany().lookupWorker(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveReference</Name>
						<Source><![CDATA[
        public Common resolveReference()
        {
            Common             ret;

            ret = super();

            if (ret.RecId && !HcmWorkerLookup::newOnlyActiveEmployeesWithinCompany().validateWorker(ret.RecId))
            {
                ret.clear();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ServiceContactPersonId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            SysTableLookup          sysTableLookup;
            Query                   query = new Query();
            QueryBuildDataSource    qbds;

            sysTableLookup = SysTableLookup::newParameters(tableNum(ContactPerson), this);

            sysTableLookup.addLookupfield(fieldNum(ContactPerson, ContactPersonId));
            sysTableLookup.addLookupfield(fieldNum(ContactPerson, Party));
            sysTableLookup.addLookupfield(fieldNum(ContactPerson, ContactForParty));

            qbds = query.addDataSource(tableNum(ContactPerson));

            // Was the wizard called from a sales order
            if (sysWizard.getSalesTable())
            {
                // Filter on the customer from the sales order
                qbds.addRange(fieldNum(ContactPerson, ContactForParty)).value(queryValue(sysWizard.getSalesTable().custTable_CustAccount().Party));
            }

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            serviceContactName.text(ContactPerson::find(this.text()).personName());

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean         ret;
            ContactPerson   contactPerson;
            CustAccount     account;

            ret = super();

            if (this.text())
            {
                contactPerson = ContactPerson::find(this.text());

                if (!contactPerson)
                {
                    // Contact person not found
                    ret = checkFailed("@SYS106974");
                }
                else
                {
                    DirPartyRecId customerPartyRecId;

                    if (sysWizard.getSalesTable())
                    {
                        customerPartyRecId = sysWizard.getSalesTable().custTable_CustAccount().Party;
                    }

                    if (custAccount && contactPerson.ContactForParty != customerPartyRecId)
                    {
                        // Contact person does not belong to the selected customer
                        ret = checkFailed("@SYS106975");
                    }
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Objects</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();

            objectGrid_ServiceObjectId.enabled(SMAParameters::find().AllowIdenticalItemsAsObjects);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ObjectGrid_CreateObject</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            InventDim   salesDim;
            InventDim   objectDim;
            boolean     ret;

            ret = super();

            if (this.checked())
            {
                if (!tmpSMAAgreementObjects.ServiceObjectId)
                {
                    // Service object must be specified
                    ret = checkFailed("@SYS106924");
                }
                else
                {
                    salesDim = InventDim::find(tmpSMAAgreementObjects.InventDimId);
                    objectDim = InventDim::find(SMAServiceObjectTable::find(tmpSMAAgreementObjects.ServiceObjectId).InventDimId);

                    if (!InventDim::isInventDimEqual(salesDim, objectDim, InventDim::dimProductDimFieldList()))
                    {
                        // The inventory dimensions of the selected service object is different from the sales line item
                        ret = checkFailed("@SYS106925");
                    }
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ObjectGrid_ServiceObjectId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // We need query like:
            // SELECT SMAServiceObjectTable INNER JOIN InventDim
            // WHERE (SMAServiceObjectTable.ItemId == '') ||
            // (SMAServiceObjectTable.ItemId == item && InventDim.configId == configId && ...)
            //
            // As we have no possibility to implement logical 'OR' operation we can do it using
            // equation A || B == !(!A && !B)
            //
            // Here   A == qbdsServiceObjectNoItem (case when ItemId == '')
            //        B == qbdsServiceObjectItem   (case when ItemId == item)
            // !A && !B == qbdsCompServiceObject
            // And resulting query is qbdsServiceObject.

            Query                   query = new Query();
            QueryBuildDataSource    qbdsServiceObject;
            QueryBuildDataSource    qbdsCompServiceObject;
            QueryBuildDataSource    qbdsServiceObjectItem;
            QueryBuildDataSource    qbdsServiceObjectNoItem;
            QueryBuildDataSource    qbdsInventDim;
            SysTableLookup          sysTableLookup;

            // Create an instance of SysTableLookup with the form control passed in
            sysTableLookup = SysTableLookup::newParameters(tableNum(SMAServiceObjectTable), this);

            // Add the fields to be shown in the lookup form
            sysTableLookup.addLookupfield(fieldNum(SMAServiceObjectTable, ServiceObjectId));
            sysTableLookup.addLookupfield(fieldNum(SMAServiceObjectTable, Description));
            sysTableLookup.addLookupfield(fieldNum(SMAServiceObjectTable, ItemId));
            sysTableLookup.addLookupfield(fieldNum(SMAServiceObjectTable, ServiceObjectGroup));

            // Create the query datasources
            qbdsServiceObject = query.addDataSource(tableNum(SMAServiceObjectTable));

            qbdsCompServiceObject = qbdsServiceObject.addDataSource(tableNum(SMAServiceObjectTable));
            qbdsCompServiceObject.relations(true);
            qbdsCompServiceObject.joinMode(JoinMode::NoExistsJoin);

            qbdsServiceObjectItem   = qbdsCompServiceObject.addDataSource(tableNum(SMAServiceObjectTable));
            qbdsServiceObjectItem.relations(true);
            qbdsServiceObjectItem.joinMode(JoinMode::NoExistsJoin);
            qbdsServiceObjectNoItem = qbdsCompServiceObject.addDataSource(tableNum(SMAServiceObjectTable));
            qbdsServiceObjectNoItem.relations(true);
            qbdsServiceObjectNoItem.joinMode(JoinMode::NoExistsJoin);

            qbdsInventDim = qbdsServiceObjectItem.addDataSource(tableNum(InventDim));
            qbdsInventDim.relations(true);
            qbdsInventDim.joinMode(JoinMode::InnerJoin);

            qbdsServiceObjectNoItem.addRange(fieldNum(SMAServiceObjectTable, ItemId)).value(SysQuery::valueEmptyString());

            qbdsServiceObjectItem.addRange(fieldNum(SMAServiceObjectTable, ItemId)).value(tmpSMAAgreementObjects.ItemId);

            if (tmpSMAAgreementObjects.InventDimId)
            {
                element.findInventDim();
            }
            else
            {
                lastInventDim = InventDim::findOrCreateBlank();
            }
            InventDim::queryAddRangeForProductDimensions(qbdsInventDim, lastInventDim);

            // Assign the query to the lookup form
            sysTableLookup.parmQuery(query);

            // Perform lookup
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            tmpSMAAgreementObjects.CreateObject = NoYes::No;
            tmpSMAAgreementObjects.TemplateBOMId    = SMAServiceObjectTable::find(tmpSMAAgreementObjects.ServiceObjectId).TemplateBOMId;

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            InventDim   salesDim;
            InventDim   objectDim;
            boolean     ret;

            ret = super();

            if (this.text())
            {
                salesDim = InventDim::find(tmpSMAAgreementObjects.InventDimId);
                objectDim = InventDim::find(SMAServiceObjectTable::find(this.text()).InventDimId);

                if (!InventDim::isInventDimEqual(salesDim, objectDim, InventDim::dimProductDimFieldList()))
                {
                    // The inventory dimensions of the selected service object is different from the sales line item
                    ret = checkFailed("@SYS106925");
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>tmpSMAAgreementObjects</Name>
			<Table>tmpSMAAgreementObjects</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CreateObject</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreateTemplateBOM</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesLineQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ServiceObjectId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TemplateBOMId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<AllowUserSetup xmlns="">No</AllowUserSetup>
		<Caption xmlns="">@SYS102532</Caption>
		<Height xmlns="">0</Height>
		<HeightMode xmlns="">Column</HeightMode>
		<Pattern xmlns="">Wizard</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">Wizard</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Width xmlns="">0</Width>
		<WidthMode xmlns="">Column</WidthMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Welcome</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>MainInstruction</Name>
								<Type>StaticText</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Body</Name>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>WelcomeGroup</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>WelcomeText</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Skip>Yes</Skip>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<BackStyle>Transparent</BackStyle>
												<Border>None</Border>
												<Label>@SCM:SMAAgreementWizard_WelcomeText</Label>
												<MultiLine>Yes</MultiLine>
												<ShowLabel>No</ShowLabel>
												<ViewEditMode>View</ViewEditMode>
											</AxFormControl>
										</Controls>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
							</AxFormControl>
						</Controls>
						<Caption>@SYS27227</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>AgreementAndProjectSelection</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>MainInstruction58</Name>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>@SYS102608</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Body59</Name>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Agreement</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>AgreementForServiceOrder</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>SMAAgreementId</ExtendedDataType>
											</AxFormControl>
										</Controls>
										<Caption>@SYS15240</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Project</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>ProjectForServiceOrder</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>ProjId</ExtendedDataType>
											</AxFormControl>
										</Controls>
										<Caption>@SYS80304</Caption>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
							</AxFormControl>
						</Controls>
						<Caption>@SYS102609</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ExistingOrNewAgreement</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>MainInstruction60</Name>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>@SYS102604</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Body61</Name>
								<Pattern>Custom</Pattern>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Customer</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>CustAccount</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>CustAccount</ExtendedDataType>
											</AxFormControl>
										</Controls>
										<Caption>@SYS24704</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Id</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>AgreementId</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>SMAAgreementId</ExtendedDataType>
												<LookupButton>Never</LookupButton>
											</AxFormControl>
										</Controls>
										<Caption>@SYS5711</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>NewOrExistingAgreement</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>UseExistingAgreement</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>715827882</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ComboBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<EnumType>NoYes</EnumType>
												<Label>@SYS102602</Label>
												<Items />
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>ExistingAgreement</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>SMAAgreementId</ExtendedDataType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>CopyAgreementLines</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS102610</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>IncludeTasks</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1789569705</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS102603</Label>
											</AxFormControl>
										</Controls>
										<Caption>@SYS15240</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ProjectAndInvoiceProject</Name>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>NewOrExistingProject</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>UseExistingProject</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>715827882</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>ComboBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<EnumType>SMAProjectSelection</EnumType>
														<Label>@SYS106579</Label>
														<Items />
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ExistingProject</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>ProjId</ExtendedDataType>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStaticTextControl">
														<Name>CustomerIsDifferentWarning</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>StaticText</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Text>@SYS106568</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>ProjTableWizard</Name>
														<ElementPosition>1789569705</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>MenuFunctionButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<MenuItemName>ProjTableWizard</MenuItemName>
													</AxFormControl>
												</Controls>
												<Caption>@SYS80304</Caption>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>NewOrExistingInvoiceProject</Name>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>Group_Group</Name>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Group</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormComboBoxControl">
																<Name>InvoiceProjectSelection</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>858993458</ElementPosition>
																<Enabled>No</Enabled>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>ComboBox</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<EnumType>SMAInvoiceProjectSelection</EnumType>
																<Items />
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>ExistingInvoiceProject</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>1288490187</ElementPosition>
																<Enabled>No</Enabled>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>String</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<ExtendedDataType>ProjInvoiceProjId</ExtendedDataType>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStaticTextControl">
																<Name>CustWarning</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>1717986916</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>StaticText</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<Visible>No</Visible>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<Text>@SYS106663</Text>
															</AxFormControl>
														</Controls>
														<FrameType>None</FrameType>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>NewInvoiceProject</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612733</ElementPosition>
														<Enabled>No</Enabled>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>ProjInvoiceProjId</ExtendedDataType>
														<Label>@SYS102600</Label>
														<LookupButton>Never</LookupButton>
													</AxFormControl>
												</Controls>
												<Caption>@SYS50055</Caption>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>@SYS102605</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>NewProject</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2013265918</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>MainInstruction62</Name>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>@SYS102595</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Body63</Name>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ProjType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>477218588</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ComboType>List</ComboType>
										<EnumType>ProjType</EnumType>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CtrlProjId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>ProjId</ExtendedDataType>
										<LookupButton>Never</LookupButton>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjGroupId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>954437176</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>ProjGroupId</ExtendedDataType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Name</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1193046470</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>ProjName</ExtendedDataType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Mask</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>NumberSequenceFormat</ExtendedDataType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjLinePropertyId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1670265058</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjWipId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1908874352</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>ProjWipId</ExtendedDataType>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
							</AxFormControl>
						</Controls>
						<Caption>@SYS53207</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>NewAgreement</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2080374782</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>MainInstruction64</Name>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>@SYS102597</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Body65</Name>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Description</Name>
										<ElementPosition>477218588</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>AgreementDescription</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>Description</ExtendedDataType>
											</AxFormControl>
										</Controls>
										<Caption>@SYS80470</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>DateRange</Name>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>AgreementStartDate</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Date</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>StartDate</ExtendedDataType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>AgreementEndDate</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Date</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>EndDate</ExtendedDataType>
											</AxFormControl>
										</Controls>
										<Caption>@SYS4080</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Responsible</Name>
										<ElementPosition>954437176</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormReferenceGroupControl">
												<Name>ServiceResponsible</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>ReferenceGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ServiceResponsible_DirPerson_FK_Name</Name>
														<DataRelationPath>DirPerson_FK</DataRelationPath>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
													</AxFormControl>
												</Controls>
												<ExtendedDataType>SMAWorkerServiceResponsible</ExtendedDataType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormReferenceGroupControl">
												<Name>PreferredTechnician</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>ReferenceGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>PreferredTechnician_DirPerson_FK_Name</Name>
														<DataRelationPath>DirPerson_FK</DataRelationPath>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
													</AxFormControl>
												</Controls>
												<ExtendedDataType>SMAWorkerPreferredTechnician</ExtendedDataType>
											</AxFormControl>
										</Controls>
										<Caption>@SYS35826</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Contact</Name>
										<ElementPosition>1193046470</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>ContactPersonId</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>ContactPersonId</ExtendedDataType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>ContactName</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612733</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>Name</ExtendedDataType>
											</AxFormControl>
										</Controls>
										<Caption>@SYS60248</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>AgreementGroup</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>AgreementGroupId</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>SMAAgreementGroupId</ExtendedDataType>
											</AxFormControl>
										</Controls>
										<Caption>@SYS88964</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ServiceOrderGroupBy</Name>
										<ElementPosition>1670265058</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>GroupBy</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>ComboBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<EnumType>SMAGroupServiceOrder</EnumType>
												<Items />
											</AxFormControl>
										</Controls>
										<Caption>@SYS40804</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SLA</Name>
										<ElementPosition>1908874352</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>ServiceLevelAgreementId</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>SMAServiceLevelAgreementId</ExtendedDataType>
											</AxFormControl>
										</Controls>
										<Caption>@SYS102596</Caption>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
							</AxFormControl>
						</Controls>
						<Caption>@SYS102598</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>CreateServiceOrder</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2113929214</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>MainInstruction66</Name>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>@SYS102607</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Body67</Name>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ServiceOrderDate</Name>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormDateTimeControl">
												<Name>ServiceDateTime</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@SYS107359</HelpText>
												<Type>DateTime</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS107358</Label>
											</AxFormControl>
										</Controls>
										<Caption>@SYS7402</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>OrderDescription</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>ServiceOrderDescription</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>Description</ExtendedDataType>
											</AxFormControl>
										</Controls>
										<Caption>@SYS80470</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>OrderResponsible</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormReferenceGroupControl">
												<Name>ServiceOrderWorkerResponsible</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>ReferenceGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ServiceOrderWorkerResponsible_DirPerson_FK_Name</Name>
														<DataRelationPath>DirPerson_FK</DataRelationPath>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
													</AxFormControl>
												</Controls>
												<ExtendedDataType>SMAWorkerServiceResponsible</ExtendedDataType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormReferenceGroupControl">
												<Name>ServiceOrderWorkerPreferredTechnician</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>ReferenceGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ServiceOrderWorkerPreferredTechnician_DirPerson_FK_Name</Name>
														<DataRelationPath>DirPerson_FK</DataRelationPath>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
													</AxFormControl>
												</Controls>
												<ExtendedDataType>SMAWorkerPreferredTechnician</ExtendedDataType>
											</AxFormControl>
										</Controls>
										<Caption>@SYS35826</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ServiceOfContact</Name>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>ServiceContactPersonId</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>ContactPersonId</ExtendedDataType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>ServiceContactName</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612733</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>Name</ExtendedDataType>
											</AxFormControl>
										</Controls>
										<Caption>@SYS60248</Caption>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
							</AxFormControl>
						</Controls>
						<Caption>@SYS102523</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Objects</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2130706430</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>MainInstruction68</Name>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>@SYS102594</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Body69</Name>
								<Pattern>Custom</Pattern>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormTabControl">
										<Name>ObjectTabControl</Name>
										<AlignControl>No</AlignControl>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Height>0</Height>
										<Type>Tab</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormTabPageControl">
												<Name>Overview</Name>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Height>0</Height>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>TabPage</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormGridControl">
														<Name>ObjectGrid</Name>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Height>0</Height>
														<Type>Grid</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>ObjectGrid_ItemId</Name>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>String</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataField>ItemId</DataField>
																<DataSource>tmpSMAAgreementObjects</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>ObjectGrid_SalesLineQty</Name>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>Real</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataField>SalesLineQty</DataField>
																<DataSource>tmpSMAAgreementObjects</DataSource>
																<NoOfDecimals>-1</NoOfDecimals>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormCheckBoxControl">
																<Name>ObjectGrid_CreateObject</Name>
																<ElementPosition>1073741820</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>CheckBox</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<BackgroundColor>WindowBackground</BackgroundColor>
																<DataField>CreateObject</DataField>
																<DataSource>tmpSMAAgreementObjects</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>ObjectGrid_ServiceObjectId</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>1342177275</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>String</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataField>ServiceObjectId</DataField>
																<DataSource>tmpSMAAgreementObjects</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormCheckBoxControl">
																<Name>ObjectGrid_CreateTemplateBOM</Name>
																<ConfigurationKey>SMABom</ConfigurationKey>
																<ElementPosition>1610612730</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>CheckBox</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<BackgroundColor>WindowBackground</BackgroundColor>
																<DataField>CreateTemplateBOM</DataField>
																<DataSource>tmpSMAAgreementObjects</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>ObjectGrid_TemplateBOMId</Name>
																<ConfigurationKey>SMABom</ConfigurationKey>
																<ElementPosition>1879048185</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>String</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataField>TemplateBOMId</DataField>
																<DataSource>tmpSMAAgreementObjects</DataSource>
															</AxFormControl>
														</Controls>
														<DataGroup>Overview</DataGroup>
														<DataSource>tmpSMAAgreementObjects</DataSource>
													</AxFormControl>
												</Controls>
												<Caption>@SYS50012</Caption>
												<Scrollbars>Auto</Scrollbars>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormTabPageControl">
												<Name>Dimensions</Name>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Height>0</Height>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>TabPage</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>config</Name>
														<AllowEdit>No</AllowEdit>
														<ElementPosition>858993458</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>config</DataMethod>
														<DataSource>tmpSMAAgreementObjects</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>size</Name>
														<AllowEdit>No</AllowEdit>
														<ElementPosition>1288490187</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>size</DataMethod>
														<DataSource>tmpSMAAgreementObjects</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>color</Name>
														<AllowEdit>No</AllowEdit>
														<ElementPosition>1717986916</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>color</DataMethod>
														<DataSource>tmpSMAAgreementObjects</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>style</Name>
														<AllowEdit>No</AllowEdit>
														<ElementPosition>1932735281</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>style</DataMethod>
														<DataSource>tmpSMAAgreementObjects</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>version</Name>
														<AllowEdit>No</AllowEdit>
														<ElementPosition>1717986917</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>version</DataMethod>
														<DataSource>tmpSMAAgreementObjects</DataSource>
													</AxFormControl>
												</Controls>
												<ColumnsMode>Fill</ColumnsMode>
												<Caption>@SYS5951</Caption>
												<Scrollbars>Auto</Scrollbars>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>@SYS102593</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>End</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2139095038</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>MainInstruction70</Name>
								<Type>StaticText</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Body71</Name>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ctrlEndTxt1</Name>
										<AlignControl>No</AlignControl>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Top>100</Top>
										<TopMode>Manual</TopMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<BackStyle>Transparent</BackStyle>
										<Border>None</Border>
										<Label>@SCM:SMAAgreementWizard_ctrlEndTxt1</Label>
										<MultiLine>Yes</MultiLine>
										<ShowLabel>No</ShowLabel>
										<ViewEditMode>View</ViewEditMode>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
							</AxFormControl>
						</Controls>
						<Caption>@SYS102606</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<ShowTabs>No</ShowTabs>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>
