<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>CustCollectionsContactPart</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class CustCollectionsContactPart extends FormRun
{
    FormRun caller;

    boolean callerHasSetCollectionsContact;
    boolean callerHasGetCollectionsContactPersonId;

    ContactPersonId selectedContactPersonId;
    AccountNum priorCustAccountNum;

    DirPartyName currentPersonName;
    Email currentPersonEMail;

    str currentContactEMail;
    [FormObservable]
    str currentContactPhone;
}
]]></Source>
			</Method>
			<Method>
				<Name>custTable</Name>
				<Source><![CDATA[
    public CustTable custTable()
    {
        if (caller && element.args().record().TableId == tablenum(CustTable))
        {
            return element.args().record() as CustTable;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editContactPersonName</Name>
				<Source><![CDATA[
    public edit ContactPersonName editContactPersonName(boolean _set, ContactPersonName _name)
    {
        ContactPerson localContactPerson;

        if (_set)
        {
            if (ContactPerson::find(_name)) // Was a contact ID entered?
            {
                selectedContactPersonId = _name; // Yes
            }
            else
            {
                localContactPerson = element.findContactPersonByName(_name);
                if (localContactPerson) // no, valid name?
                {
                    selectedContactPersonId = localContactPerson.ContactPersonId;
                }
            }
            contactPerson_ds.executeQuery();
        }
        return contactPerson.personName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableEmailToContact</Name>
				<Source><![CDATA[
    public void enableEmailToContact()
    {
        contactPerson_Email.lookupButton(element.getContactEMail(contactPerson) ? FormLookupButton::Auto : FormLookupButton::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableEmailToSalesperson</Name>
				<Source><![CDATA[
    public void enableEmailToSalesperson()
    {
        emplTable_Name.lookupButton(currentPersonEMail ? FormLookupButton::Auto : FormLookupButton::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findContactPersonByName</Name>
				<Source><![CDATA[
    public ContactPerson findContactPersonByName(ContactPersonName _name)
    {
        return ContactPerson::findName(element.custTable().AccountNum, '', _name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCollectionsContactPersonId</Name>
				<Source><![CDATA[
    public ContactPersonId getCollectionsContactPersonId()
    {
        Object callerObj = caller;

        if (callerHasGetCollectionsContactPersonId)
        {
            return callerObj.getCollectionsContactPersonId();
        }
        else
        {
            return element.getContactPerson().ContactPersonId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContactEMail</Name>
				<Source><![CDATA[
    public Email getContactEMail(ContactPerson _contact)
    {
        return element.getContactLocator(_contact, LogisticsElectronicAddressMethodType::Email);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContactLocator</Name>
				<Source><![CDATA[
    public LogisticsElectronicAddressLocator getContactLocator(ContactPerson _contact, LogisticsElectronicAddressMethodType _type)
    {
        DirPartyContactInfoView info;

        // Should be only one primary
        select firstonly Locator
            from info
            where info.Party == _contact.Party &&
                info.IsPrimary == NoYes::Yes &&
                info.Type == _type;

        // If no primary, take the first
        if (!info)
        {
            select firstonly Locator
                from info
                order by Locator
                where info.Party == _contact.Party &&
                    info.Type == _type;
        }

        return info.Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContactPerson</Name>
				<Source><![CDATA[
    private ContactPerson getContactPerson()
    {
        CustTable custTable = element.custTable();
        ContactPerson contact = ContactPerson::find(custTable.ContactPersonId);

        // No assigned contact, take the first one
        if (!contact)
        {
            select firstonly contact
                order by contact.ContactPersonId
                where contact.ContactForParty == custTable.Party;
        }
        return contact;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContactPhone</Name>
				<Source><![CDATA[
    public Email getContactPhone(ContactPerson _contact)
    {
        return element.getContactLocator(_contact, LogisticsElectronicAddressMethodType::Phone);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        FormRun callingForm;
        super();

        caller = element.args().caller();

        callingForm = caller;

        callerHasSetCollectionsContact = caller && formHasMethod(callingForm, 'SetCollectionsContact');
        callerHasGetCollectionsContactPersonId = caller && formHasMethod(callingForm, 'GetCollectionsContactPersonId');
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendEmailTo</Name>
				<Source><![CDATA[
    public void sendEmailTo(str _toAddr)
    {
        /* to be updated by "email" deliverables
        Thread t = new Thread();
        WaitStatus ws;
        container errlog;

        t.setInputParm([_toAddr]);
        t.run(classnum(CustCollectionsEmail), staticmethodstr(CustCollectionsEmail, createEMailTo));
        ws = t.waitUntilSignaled();
        errlog = t.getErrorLog();
        if (conlen(errlog) > 0)
        {
            throw error(conpeek(errlog, 1));
        }
        */
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCollectionsContact</Name>
				<Source><![CDATA[
    public void setCollectionsContact(ContactPersonId _contactPersonId)
    {
        Object callerObj = caller;

        if (callerHasSetCollectionsContact)
        {
            callerObj.setCollectionsContact(_contactPersonId);
        }
        else
        {
            selectedContactPersonId = _contactPersonId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCutCommissionPersonData</Name>
				<Source><![CDATA[
    public void setCutCommissionPersonData(CommissSalesGroup _salesGroup)
    {
        CommissionSalesRep salesRep;
        DirPerson dirPerson;
        LogisticsElectronicAddress electronicAddress;
        DirPartyContactInfoView dirPartyContactInfoView;
        utcDateTime currentDateTime;

        // Get the customer contact if there is one
        select firstonly RecId, Name from dirPerson
            exists join salesRep
                where
                    dirPerson.RecId == salesRep.Person &&
                    salesRep.GroupId == _salesGroup &&
                    salesRep.CustomersContact == NoYes::Yes;

        // If there wasnâ€™t a customer contact, get the first one
        if (!dirPerson)
        {
            select firstonly RecId, Name from dirPerson
                exists join salesRep
                    where
                        dirPerson.RecId == salesRep.Person &&
                        salesRep.GroupId == _salesGroup;
        }
        currentPersonName = dirPerson.Name;

        electronicAddress = DirParty::primaryElectronicAddress(dirPerson.RecId, LogisticsElectronicAddressMethodType::Email);

        if (electronicAddress)
        {
            currentPersonEMail = electronicAddress.Locator;
        }
        else
        {
            currentDateTime = DateTimeUtil::utcNow();

            select firstOnly Locator from dirPartyContactInfoView
                where dirPartyContactInfoView.Type == LogisticsElectronicAddressMethodType::Email
                   && dirPartyContactInfoView.IsPrimary == NoYes::No
                   && dirPartyContactInfoView.ValidFrom <= currentDateTime
                   && dirPartyContactInfoView.ValidTo >= currentDateTime
                   && dirPartyContactInfoView.Party == dirPerson.RecId;

            currentPersonEMail = dirPartyContactInfoView.RecId ? dirPartyContactInfoView.Locator : '';
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>ContactPerson</Name>
				<Methods>
					<Method>
						<Name>phone</Name>
						<Source><![CDATA[
        public display Phone phone(ContactPerson _contact)
        {
            return currentContactPhone;
        }

]]></Source>
					</Method>
					<Method>
						<Name>email</Name>
						<Source><![CDATA[
        public edit Email email(boolean set, ContactPerson _contact, Email _email)
        {
            return currentContactEMail;
        }

]]></Source>
					</Method>
					<Method>
						<Name>emailSalesPerson</Name>
						<Source><![CDATA[
        public edit Email emailSalesPerson (boolean set, Email _email)
        {
            return currentPersonEMail;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            CustTable custTable = element.custTable();

            if (priorCustAccountNum != custTable.AccountNum) // if switching customers, reselect default contact
            {
                selectedContactPersonId = element.getCollectionsContactPersonId();
                // Finds current Person data
                element.setCutCommissionPersonData(custTable.SalesGroup);
                priorCustAccountNum = custTable.AccountNum;
            }
            super();
            if (!selectedContactPersonId)
            {
                selectedContactPersonId = element.getCollectionsContactPersonId();
            }
            contactPerson.data(ContactPerson::find(selectedContactPersonId));
            contactPerson_Name.text(contactPerson.personName());

            currentContactEMail = contactPerson ? element.getContactEMail(contactPerson) : '';
            currentContactPhone = contactPerson ? element.getContactPhone(contactPerson) : '';

            contactPerson_EMail.text(currentContactEMail);
            contactPerson_Phone.text(currentContactPhone);
            emplTable_Name.text(currentPersonName);
            salesPerson_Email.text(currentPersonEMail);

            element.enableEmailToContact();
            element.enableEmailToSalesperson();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>ContactPerson_Name</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            Args args = new Args(element);

            args.record(contactPerson);
            new MenuFunction(menuitemdisplaystr(ContactPerson), MenuItemType::Display).run(args);
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            CustTable custTable = element.custTable();

            ContactPerson::lookupCustContactPerson(null, custTable.AccountNum, this, selectedContactPersonId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ok = super();

            element.setCollectionsContact(contactPerson.ContactPersonId);

            return ok;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ContactPerson_Email</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            element.sendEmailTo(element.getContactEMail(contactPerson));
        }

]]></Source>
					</Method>
					<Method>
						<Name>textChange</Name>
						<Source><![CDATA[
        public void textChange()
        {
            super();
            this.text(currentContactEMail);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>ContactPerson</Name>
			<Table>ContactPerson</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AssistantName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssistantPhone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillingInformation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Character</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ComputerNetworkName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContactForParty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContactPersonId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContactPersonParentId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DAXIntegrationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Decision</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Department</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DirectMail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocuGreeting1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocuGreeting2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocuIntro1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocuIntro2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Function</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GovernmentIDNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Imported</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Inactive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastEditAxDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Loyalty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MainResponsibleWorker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRIsDefaultContact</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Memo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Mileage</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OfficeLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrganizationalIDNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OutlookCategories</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Party</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PayeeDocument_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Profession</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Sensitivity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Spouse</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TimeAvailableFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TimeAvailableTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Title</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendRole</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VIP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WebRequestAccess</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS190117</Caption>
		<Pattern xmlns="">FormPartFactboxCard</Pattern>
		<PatternVersion xmlns="">UX7 1.0</PatternVersion>
		<Style xmlns="">FormPart</Style>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStringControl">
				<Name>ContactPerson_Name</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>String</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<DataMethod>editContactPersonName</DataMethod>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormStringControl">
				<Name>ContactPerson_Email</Name>
				<AllowEdit>No</AllowEdit>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>String</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<BackgroundColor>DynBackgroundBlue</BackgroundColor>
				<Border>None</Border>
				<DataMethod>email</DataMethod>
				<DataSource>ContactPerson</DataSource>
				<ViewEditMode>View</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormStringControl">
				<Name>ContactPerson_Phone</Name>
				<AllowEdit>No</AllowEdit>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>String</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<BackgroundColor>Highlight3D</BackgroundColor>
				<DataMethod>phone</DataMethod>
				<DataSource>ContactPerson</DataSource>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormStringControl">
				<Name>EmplTable_Name</Name>
				<AllowEdit>No</AllowEdit>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1789569705</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>String</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<BackgroundColor>DynBackgroundBlue</BackgroundColor>
				<Border>None</Border>
				<Label>@SYS81391</Label>
				<ViewEditMode>View</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormStringControl">
				<Name>SalesPerson_Email</Name>
				<AllowEdit>No</AllowEdit>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>String</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<BackgroundColor>DynBackgroundBlue</BackgroundColor>
				<Border>None</Border>
				<DataMethod>emailSalesPerson</DataMethod>
				<DataSource>ContactPerson</DataSource>
				<ViewEditMode>View</ViewEditMode>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>