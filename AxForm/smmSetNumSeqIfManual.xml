<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>smmSetNumSeqIfManual</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
    public class smmSetNumSeqIfManual extends FormRun
    {
        CustTable              newCustTable;
        str                    errorMessage;
        smmAccountNumToCreate  numtoCreate;
        VendGroupId            vendGroupId;

}
]]></Source>
			</Method>
			<Method>
				<Name>checkAccountNumDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for checking whether the account number is already used and is of the right format.
    /// </summary>
    /// <param name = "_numtoCreate">Enum value to determine the table to look for the account number.</param>
    /// <param name = "_errorMessage">The error message to raise if the account number is already used.</param>
    /// <param name = "_newAccountNumberText">A string representing the new account number.</param>
    /// <param name = "_result">A <c>EventHandlerAcceptResult</c> object which is accepted byt the subscriber if the account number is free to use and is of the right format.</param>
    delegate void checkAccountNumDelegate(
        smmAccountNumToCreate       _numtoCreate,
        str                         _errorMessage,
        str                         _newAccountNumberText,
        EventHandlerAcceptResult    _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the account number is already used and is of the right format.
    /// </summary>
    /// <returns>
    /// true if the account number is free to use and is of the right format; otherwise, false.
    /// </returns>
    public boolean checkAccountNum()
    {
        if (!newAccountNum.text())
        {
            return false;
        }

        switch (numtoCreate)
        {
            case smmAccountNumToCreate::CustAccount :
                if (! this.validateNumberSequenceFormat(newAccountNum.text()))
                {
                    return false;
                }
                else if (CustTable::exist(newAccountNum.text()))
                {
                    return checkFailed(strFmt(errorMessage, newAccountNum.text()));
                }
                break;

            case smmAccountNumToCreate::SalesOrder  :
                if (! this.validateNumberSequenceFormat(newAccountNum.text()))
                {
                    return false;
                }
                else if (SalesTable::exist(newAccountNum.text()))
                {
                    return checkFailed(strFmt(errorMessage, newAccountNum.text()));
                }
                break;

            case smmAccountNumToCreate::VendAccount  :
                if (vendGroupId && smmBusRelTableVendGroupNumSeqInUseFlight::instance().isEnabled())
                {
                    if (!this.validateNumSeqVendGroupConsideredFormat(newAccountNum.text()))
                    {
                        return false;
                    }
                    else if (VendTable::exist(newAccountNum.text()))
                    {
                        return checkFailed(strFmt(errorMessage, newAccountNum.text()));
                    }
                    break;
                }
                else
                {
                    if (! this.validateNumberSequenceFormat(newAccountNum.text()))
                    {
                        return false;
                    }
                    else if (VendTable::exist(newAccountNum.text()))
                    {
                        return checkFailed(strFmt(errorMessage, newAccountNum.text()));
                    }
                    break;
                }

            case smmAccountNumToCreate::Opportunity :
                if (! this.validateNumberSequenceFormat(newAccountNum.text()))
                {
                    return false;
                }
                else if (smmOpportunityTable::exist(newAccountNum.text()))
                {
                    return checkFailed(strFmt(errorMessage, newAccountNum.text()));
                }
                break;

            default:
                EventHandlerAcceptResult eventHandlerResult = EventHandlerAcceptResult::newSingleResponse();
                this.checkAccountNumDelegate(numtoCreate, errorMessage, newAccountNum.text(), eventHandlerResult);
                
                return eventHandlerResult.isAccepted();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNumberSequenceFormat</Name>
				<Source><![CDATA[
    private boolean validateNumberSequenceFormat(Num _num)
    {
        ExtendedTypeId dataTypeId = this.getNumberSequenceType(numtoCreate);
        NumberSequenceTable numberSequenceTable = smmParameters::findNumberSequence(dataTypeId);

        return this.checkNumberSeqFormat(_num, numberSequenceTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCaptionAndNewAccountNumDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for initializing the newAccountNum, errorMessage and the formDesign caption.
    /// </summary>
    /// <param name = "_numtoCreate">Enum value to determine the values for the newAccountNum, errorMessage and the formDesign caption.</param>
    /// <param name = "_formDesign">The <c>FormDesign</c> object of the <c>smmSetNumSeqIfManual</c> form.</param>
    /// <param name = "_newAccountNum">The newAccountNum <c>FormStringControl</c>.</param>
    /// <param name = "_result">A <c>EventHandlerResult</c> object where a string representing the errorMessage can be returned.</param>
    delegate void initCaptionAndNewAccountNumDelegate(
        smmAccountNumToCreate   _numtoCreate,
        FormDesign              _formDesign,
        FormStringControl       _newAccountNum,
        EventHandlerResult      _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCaptionAndNewAccountNum</Name>
				<Source><![CDATA[
    private void initCaptionAndNewAccountNum()
    {
        switch (numtoCreate)
        {
            case smmAccountNumToCreate::CustAccount :
                element.initCustAccount();
                break;

            case smmAccountNumToCreate::SalesOrder :
                element.initSalesOrder();
                break;

            case smmAccountNumToCreate::VendAccount :
                element.initVendAccount();
                break;

            case smmAccountNumToCreate::Opportunity :
                element.initOpportunity();
                break;

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                this.initCaptionAndNewAccountNumDelegate(numtoCreate, this.design(), newAccountNum, result);
                
                if (result.hasResult())
                {
                    errorMessage = result.result();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberSequenceType</Name>
				<Source><![CDATA[
    [Hookable]
    protected ExtendedTypeId getNumberSequenceType(SmmAccountNumToCreate _smmAccountNumToCreate)
    {
        switch (_smmAccountNumToCreate)
        {
            case smmAccountNumToCreate::CustAccount :
                return extendedTypeNum(CustAccount);

            case smmAccountNumToCreate::SalesOrder :
                return extendedTypeNum(SalesId);

            case smmAccountNumToCreate::VendAccount :
                return extendedTypeNum(VendAccount);

            case smmAccountNumToCreate::Opportunity :
                return extendedTypeNum(smmOpportunityId);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNewAccountNumFromNumberSeq</Name>
				<Source><![CDATA[
    public void setNewAccountNumFromNumberSeq(NumberSequenceType _numberSequenceType)
    {
        if (_numberSequenceType)
        {
            NumberSequenceReference numberSequenceReference = NumberSeqReference::findReference(_numberSequenceType);
            NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);

            if (!numberSequenceTable.Manual && (numberSequenceTable.AllowChangeDown || numberSequenceTable.AllowChangeUp))
            {
                NumberSeq numberSeq = NumberSeq::newGetNum(numberSequenceReference, true, true);

                Num num = numberSeq.num();

                newAccountNum.text(num);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        numtoCreate = element.args().parmEnum();

        this.initCaptionAndNewAccountNum();
        
        ExtendedTypeId numberSequenceType = this.getNumberSequenceType(numtoCreate);

        this.setNewAccountNumFromNumberSeq(numberSequenceType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustAccount</Name>
				<Source><![CDATA[
    void initCustAccount()
    {
        newAccountNum.limitText(this.stringEDTSize(extendedTypeNum(CustAccount)));
        // Customer account
        newAccountNum.label("@SYS7149");
        // Customer account number
        element.design().caption("@SYS16716");
        // Customer account '%1' already exists.
        errorMessage = "@SYS59639";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOpportunity</Name>
				<Source><![CDATA[
    private void initOpportunity()
    {
        newAccountNum.limitText(this.stringEDTSize(extendedTypeNum(smmOpportunityId)));
        // Opportunity ID
        newAccountNum.label("@SYS103056");
        // Opportunity ID
        element.design().caption("@SYS103056");
        // Opportunity ID %1 already exists.
        errorMessage = "@SYS4110066";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesOrder</Name>
				<Source><![CDATA[
    void initSalesOrder()
    {
        newAccountNum.limitText(this.stringEDTSize(extendedTypeNum(SalesId)));
        // Sales order
        newAccountNum.label("@SYS80119");
        // Sales order
        element.design().caption("@SYS80119");
        // Order '%1' already exists.
        errorMessage = "@SYS53144";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendAccount</Name>
				<Source><![CDATA[
    void initVendAccount()
    {
        newAccountNum.limitText(this.stringEDTSize(extendedTypeNum(VendAccount)));
        // Vendor account
        newAccountNum.label("@SYS14048");
        // Vendor account number
        element.design().caption("@SYS12272");
        // Vendor account '%1' already exists.
        errorMessage = "@SYS81254";
        if (element.args().parm() && smmBusRelTableVendGroupNumSeqInUseFlight::instance().isEnabled())
        {
            vendGroupId = element.args().parm();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAccountNum</Name>
				<Source><![CDATA[
    str newAccountNum()
    {
        if (element.closedOk() && element.checkAccountNum())
        {
            return newAccountNum.text();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>stringEDTSize</Name>
				<Source><![CDATA[
    private int stringEDTSize(ExtendedTypeId _extendedTypeId)
    {
        SysDictType extendedType = new SysDictType(_extendedTypeId);

        return extendedType.stringLen();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNumSeqVendGroupConsideredFormat</Name>
				<Source><![CDATA[
    private boolean validateNumSeqVendGroupConsideredFormat(Num _num)
    {
        NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(VendGroup::find(vendGroupId).VendAccountNumSeq);
        
        return this.checkNumberSeqFormat(_num, numberSequenceTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNumberSeqFormat</Name>
				<Source><![CDATA[
    private boolean checkNumberSeqFormat(Num _num, NumberSequenceTable _numberSequenceTable)
    {
        if (_numberSequenceTable && _numberSequenceTable.Manual == NoYes::Yes)
        {
            return true;
        }

        // Make sure limits are OK, and also the format is right
        return NumberSeq::numCheckFormat(_num, _numberSequenceTable);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>Check</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            if (!newAccountNum.text())
            {
                // Account number is not specified
                error("@SYS24085");
            }
            else
            if (element.checkAccountNum())
            {
                // The account number is free to use
                info("@SYS81996");
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@SYS1161</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<StatusBarStyle xmlns="">SimpleWithoutClose</StatusBarStyle>
		<Style xmlns="">Dialog</Style>
		<WindowResize xmlns="">Fixed</WindowResize>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<AlignControl>Yes</AlignControl>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>InnerGroup</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>NewAccountNum</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SCM:smmSetNumSeqIfManual_NewAccountNum</Label>
								<LimitText>20</LimitText>
								<LimitTextMode>Fixed</LimitTextMode>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>Check</Name>
								<AlignControl>Yes</AlignControl>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SYS81253</HelpText>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>ImageOnly</ButtonDisplay>
								<NormalImage>OK</NormalImage>
								<Text>@SYS28450</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OK</Name>
						<AlignControl>Yes</AlignControl>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<Text>@SYS5473</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Cancel</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
						<Text>@SYS323120</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>