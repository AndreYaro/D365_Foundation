<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>CatProcureCatalogEdit</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class CatProcureCatalogEdit extends FormRun
{
    #DEFINE.FormOpenModeForNew_Clone('FormOpenModeForNew_Clone')
    #DEFINE.FormOpenModeForEdit_Clone('FormOpenModeForEdit_Clone')
    #DEFINE.FormOpenModeForNew('FormOpenModeForNew')
    #CatDisplayCategory

    CatDisplayCategoryTreeDs    m_treeDS;
    boolean                     m_doNew;
    LanguageId                  globalLanguage;

}
]]></Source>
			</Method>
			<Method>
				<Name>addProcureCatalogRange</Name>
				<Source><![CDATA[
    public void addProcureCatalogRange(recId _procureCatalogRecId)
    {
        QueryBuildRange range;
        Query q;
        QueryBuildDataSource qbDS;

        q = catProcureCatalogTable_ds.query();
        qbDS = q.dataSourceTable(tablenum(CatProcureCatalogTable));
        range = qbDS.findRange(fieldnum(CatProcureCatalogTable, RecId));
        if (!range)
        {
            range = qbDS.addRange(fieldnum(CatProcureCatalogTable, RecId));
        }
        range.value(queryValue(_procureCatalogRecId));
        catProcureCatalogTable_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductRelationsFormClosing</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Performs the necessary actions when the <c>CatDisplayProductRelationAdd</c> form is closing.
    /// </summary>
    /// <param  name='_refreshAttrListUI'>
    ///   A boolean value that indicates if the attribute list UI should refresh.
    /// </param>
    public void addProductRelationsFormClosing(boolean _refreshAttrListUI)
    {
        if (_refreshAttrListUI)
        {
            // refreshes the UI
            catCatalogProductRelationType_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductsFormClosing</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Performs the necessary actions when the add-product form is closing.
    /// </summary>
    /// <param  name='_refreshAttrListUI'>
    ///   A boolean value that indicates if the attribute list UI should refresh.
    /// </param>
    public void addProductsFormClosing(boolean _refreshAttrListUI)
    {
        if (_refreshAttrListUI)
        {
            // refreshes the UI
            catDisplayProductAll_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVendorsFormClosing</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Performs the necessary actions when the <c>CatDisplayVendorAdd</c> form is closing.
    /// </summary>
    /// <param  name='_refreshAttrListUI'>
    ///   A boolean value that indicates if the attribute list UI should refresh.
    /// </param>
    public void addVendorsFormClosing(boolean _refreshAttrListUI)
    {
        if (_refreshAttrListUI)
        {
            // refreshes the UI
            catDisplayVendorAll_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>catalogSelected</Name>
				<Source><![CDATA[
    void catalogSelected(anytype catalogRecId)
    {
        m_treeDS.initRoot(catProcureCatalogTable.Name, catProcureCatalogTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFilterableAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates a record in <c>CatDisplayCategoryFilterableAttribute</c> table for the selected category attribute.
    /// </summary>
    /// <param  name='_attribute'>
    ///   An instance of the <c>RefRecId</c> class denoting attribute field.
    /// </param>
    public void createFilterableAttribute(recId _attribute)
    {
        CatDisplayCategoryFilterableAttribute m_catDisplayCategoryFilterableAttribute;
        CatDisplayCategorySharedInfo          m_catDisplayCategorySharedData;
        EcoResCategoryAttributeLookup         m_ecoResCategoryAttributeLookup;
        CatDisplayCategoryTable               m_catDisplayCategoryTable;

        //Get SharedData RecID from Display Category Table RecID and CategoryAttribute from EcoResAttribute.Attribute
        select SharedData, RecId from m_catDisplayCategoryTable
            where m_catDisplayCategoryTable.RecId == catDisplayCategoryTable.RecId
            join RecId from m_catDisplayCategorySharedData
                where m_catDisplayCategorySharedData.RecId == m_catDisplayCategoryTable.SharedData
            join RecId from m_ecoResCategoryAttributeLookup
                where m_ecoResCategoryAttributeLookup.Attribute == _attribute
                    && m_ecoResCategoryAttributeLookup.Category == m_catDisplayCategorySharedData.Category;
        ttsbegin;
        //Insert a record
        m_catDisplayCategoryFilterableAttribute.SharedData = m_catDisplayCategoryTable.SharedData;
        m_catDisplayCategoryFilterableAttribute.CategoryAttributeLookup = m_ecoResCategoryAttributeLookup.RecId;
        m_catDisplayCategoryFilterableAttribute.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentFilterableAttributeRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Searches for selected record.
    /// </summary>
    /// <returns>
    ///   Return selected attribute's corresponding <c>CatDisplayCategoryFilterableAttribute</c> record ID.
    /// </returns>
    public int64 currentFilterableAttributeRecId()
    {
        FormListItem m_item;
        int64 m_attributeID = 0;
        int m_count;
        m_count = filterableAttributeListView.getNextItem(FormListNext::Selected);
        if ( m_count != -1 )
        {
            m_item = filterableAttributeListView.getItem(m_count);
            m_attributeID = m_item.data();
            deleteAttributesButton.enabled(NoYes::Yes);
            return m_attributeID;
        }
        deleteAttributesButton.enabled(NoYes::No);
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDisplayCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Sets the state of the UI controls depending on which node is selected.
    /// </summary>
    void deleteDisplayCategory()
    {
        // perform delete related logic, including deleting subtree
        // refresh UI, esp. NavTreeControl
        // NOTE: CatDisplayCategoryTable_ds.refresh() doesn't do anything.
        m_treeDS.deleteEx(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTheFormTreeDatasource</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the form tree datasource.
    /// </summary>
    /// <returns>
    ///   The <c>CatDisplayCategoryTreeDs</c> object.
    /// </returns>
    CatDisplayCategoryTreeDs getTheFormTreeDatasource()
    {
        return m_treeDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        CatProcureCatalogTable tblCatalog;
        str invokingMIname;
        boolean doDuplicate = false;

        m_doNew = false;
        invokingMIname = element.args().parm();
        if ((strcmp(invokingMIname, #FormOpenModeForNew_Clone) == 0) || (strcmp(invokingMIname, #FormOpenModeForEdit_Clone) == 0))
        {
            doDuplicate = true;
        }
        else if (strcmp(invokingMIname, #FormOpenModeForNew) == 0)
        {
            m_doNew = true;
        }

        // NOTE: in case of NEW_CATALOG, element.args().record() would execute but we'd really be setting tblCatalog to the currently selected record in ListPage.
        if (doDuplicate)
        {
            // gets the record BEFORE handleInitPreSuper sets it to null:
            tblCatalog = CatProcureCatalogTable::findByRecId(element.args().record().RecId);

            if (tblCatalog.RecId)
            {
                tblCatalog = tblCatalog.cloneAndInsert();

                if (tblCatalog.RecId)
                {
                    // NOTE: cannot refresh model-based ListPage which cannot have method: element.args().caller().updateDataSource()

                    // pretend that uses has selected the newly duplicated record
                    // MUST do this or the tabs will show info for the original record (the dup was created from)
                    element.args().record(tblCatalog);
                }
                else
                {
                    error("@SYS136687");
                }
            }
            else
            {
                info("@SYS136687");
            }
        }
        
        super();

        this.setupFallbackProductTranslation();

        // since handleInitPostSuper will reset FormRun.dataSource().query, any modification to the query must occur AFTER calling handleInitPostSuper.
        // NOTE: doing CatProcureCatalogTable_ds.research+findRecord alone works only when this Form is launched from ListPage;
        //     if launched from this Form itself (via the DUP_CATALOG button), then cursor would still point to a record with RecId=0.
        if (doDuplicate)
        {
            element.addProcureCatalogRange(tblCatalog.RecId);
        }

        m_treeDS = new CatDisplayCategoryTreeDs(catDisplayCategoryTable_ds, navTreeControl,
                                           fieldnum(CatDisplayCategoryTable, RecId),
                                           fieldnum(CatDisplayCategoryTable, ParentCategory),
                                           fieldnum(CatDisplayCategoryTable, Name),
                                           catProcureCatalogTable_ds,
                                           fieldnum(CatProcureCatalogTable, RecId),
                                           fieldnum(CatProcureCatalogTable, Name),
                                           false, // No ID in description
                                           true,
                                           0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupFallbackProductTranslation</Name>
				<Source><![CDATA[
    private void setupFallbackProductTranslation()
    {
        List fallbackStringControls = new List(Types::Integer);
        List ecoResProductTranslationStringControls = new List(Types::Integer);

        ecoResProductTranslationStringControls.addEnd(element.controlId(formControlStr(CatProcureCatalogEdit, EcoResProductTranslation_Name)));
        fallbackStringControls.addEnd(element.controlId(formControlStr(CatProcureCatalogEdit, EcoResProductTranslationFallbackView_Name)));
        
        EcoResProductTranslationFallbackViewModel::setupFallbackTranslationForm(element,
                                                                                EcoResProductTranslationFallbackView_ds,
                                                                                EcoResProduct_ds,
                                                                                fallbackStringControls,
                                                                                ecoResProductTranslationStringControls);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReference_CatDisplayCategoryTable</Name>
				<Source><![CDATA[
    public Common lookupReference_CatDisplayCategoryTable(FormReferenceControl _formReferenceControl)
    {
        SysReferenceTableLookup sysTableLookup;
        Query                   query = new Query();
        QueryBuildDataSource    qbds;

        sysTableLookup = SysReferenceTableLookup::newParameters(tablenum(CatDisplayCategoryTable), _formReferenceControl);
        sysTableLookup.addLookupfield(fieldnum(CatDisplayCategoryTable, Name));

        qbds = query.addDataSource(tablenum(CatDisplayCategoryTable));
        qbds.addRange(fieldnum(CatDisplayCategoryTable, Catalog)).value(queryValue(catDisplayCategoryTable.Catalog));
        qbds.addRange(fieldnum(CatDisplayCategoryTable, TargetCategory)).value(queryValue(0));
        // exclude the *this* record which, in the database, would still qualify all of above in the query:
        qbds.addRange(fieldnum(CatDisplayCategoryTable, RecId)).value(queryValue(strfmt('!=%1', queryValue(catDisplayCategoryTable.RecId))));

        sysTableLookup.parmQuery(query);
        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDisplayCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates a new node as a sibling of the given <paramref>_parent</paramref> node.
    /// </summary>
    /// <param  name='_parent'>
    ///   The parent node's <c>RecId</c> to create a new DisplayCategory node under.
    /// </param>
    /// <param  name='_dcNodeTypeToCreate'>
    ///   The DisplayCategory node type to create a new DisplayCategory node as.
    /// </param>
    /// <param name='_rebuildSubtreeOnCreate'>
    ///   A boolean value that indicates if the subtree under the parent node of the newly created node should be rebuilt.
    /// </param>
    void newDisplayCategory(recId _parent, int _dcNodeTypeToCreate, boolean _rebuildSubtreeOnCreate)
    {
        CatDisplayCategorySharedInfo tblSharedData;

        ttsbegin;
        tblSharedData.clear();
        tblSharedData.initValue();
        tblSharedData.initMore(catProcureCatalogTable.toDisplayCategoryUpdateType(), null);
        tblSharedData.insert();
        m_treeDS.setParamsForCreate(_parent, _dcNodeTypeToCreate, tblSharedData, _rebuildSubtreeOnCreate);
        m_treeDS.created();
        ttscommit;

        this.setEditControlStateForDC();
        catDisplayCategoryGeneralGrp_Name.setFocus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newManualDisplayCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates a new node as a child of the current node.
    /// </summary>
    void newManualDisplayCategory()
    {
        #CatDisplayCategory
        // must rebuild subtree under parent of newly created child - otherwise existing siblings of the new child won't show up
        // see bug AX6:27614. also see bug AX6:255512.
        this.newDisplayCategory(catDisplayCategoryTable.RecId, #CatDisplayCategory_NodeType_Manual, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSiblingDisplayCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates a new node as a sibling of the current node.
    /// </summary>
    void newSiblingDisplayCategory()
    {
        #CatDisplayCategory
        CatDisplayCategoryTable currDisplayCategory = catDisplayCategoryTable_ds.cursor();

        if (currDisplayCategory.ParentCategory)
        {
            // must not rebuild subtree under parent of newly created sibling - otherwise existing siblings of the new node would be collapsed if already expanded
            // see bug AX6:255512. also see bug AX6:27614.
            this.newDisplayCategory(currDisplayCategory.ParentCategory, #CatDisplayCategory_NodeType_Manual, false);
        }
        else
        {
            throw warning("@SYS134845");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates a record in <c>CatDisplayCategoryFilterableAttribute</c> table for the selected category attribute.
    /// </summary>
    /// <param  name='_array'>
    ///   An instance of the <c>Array</c> class with each element denoting <c>EcoResCategoryAttributeLookup</c> record ID.
    /// </param>
    /// <remarks>
    ///   This method is called by formStr(CatAttributeForm) via element.args().caller() (hence not discoverable by xref.)
    /// </remarks>
    public void populate(Array _array)
    {
        CatDisplayCategoryFilterableAttribute tblCatDisplayCategoryFilterableAttribute;
        CatDisplayCategoryTable         tblCatDisplayCategoryTable;
        EcoResCategoryAttributeLookup   tblEcoResCategoryAttributeLookup;
        CatDisplayCategorySharedInfo    tblCatDisplayCategorySharedData;

        int m_count;

        //Get SharedData RecID from Display Category Table
        select SharedData from tblCatDisplayCategoryTable
            where tblCatDisplayCategoryTable.RecId == catDisplayCategoryTable.RecId
        join Category, RecId from tblCatDisplayCategorySharedData
            where tblCatDisplayCategorySharedData.RecId == tblCatDisplayCategoryTable.SharedData;

        ttsbegin;
        for ( m_count = 1; m_count <= _array.lastIndex(); m_count++)
        {
            //Get Category Attribute from Attribute and SharedData
            select firstonly RecId from tblEcoResCategoryAttributeLookup
                where tblEcoResCategoryAttributeLookup.RecId == _array.value(m_count);

            if ( tblEcoResCategoryAttributeLookup && tblCatDisplayCategoryTable )
            {
                //Insert a new record
                tblCatDisplayCategoryFilterableAttribute.CategoryAttributeLookup = tblEcoResCategoryAttributeLookup.RecId;
                tblCatDisplayCategoryFilterableAttribute.SharedData = tblCatDisplayCategoryTable.SharedData;
                tblCatDisplayCategoryFilterableAttribute.IsFilterable = true;
                tblCatDisplayCategoryFilterableAttribute.insert();
            }
        }
        ttscommit;
        filterableAttributeListView.init();
        if ( filterableAttributeListView.getCount() > 0 )
        {
            deleteAttributesButton.enabled(true);
        }
        else
        {
            deleteAttributesButton.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshControl</Name>
				<Source><![CDATA[
    void refreshControl(FormControl formControl, str text)
    {
        // HTML Editor sets CatProcureCatalogTranslation.WelcomeText but doesn't update the buffer - we need to do that after it closes.
        if (catProcureCatalogTranslation.WelcomeText != catProcureCatalogTranslation.orig().WelcomeText)
        {
            ttsbegin;
            catProcureCatalogTranslation.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshRangeListView</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Refreshes the list view after adding the filter range.
    /// </summary>
    /// <param  name='_table'>
    ///   An instance of the <c>common</c> data type denoting the table to refresh.
    /// </param>
    public void refreshRangeListView(Common _table)
    {
        if ( _table.TableId == tablenum(CatProcureCatalogTable) )
        {
            currencyPriceFilterRangeListView.init();
        }
        else if ( _table.TableId == tablenum(CatDisplayCategoryFilterableAttribute) )
        {
            filterRangeListView.init();
        }
        else if ( _table.TableId == tablenum(CatDisplayCategoryTable) )
        {
            categoryCurrencyPriceFilterRangeListView.init();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rename</Name>
				<Source><![CDATA[
    void rename()
    {
        if (m_treeDS.treeItemIsRoot(navTreeControl.getSelection()))
        {
            catProcureCatalogGeneralNameGrp_Name.setFocus();
        }
        else
        {
            catDisplayCategoryGeneralGrp_Name.setFocus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        // ****************************************
        // NOTE: do this AFTER handleRunPostSuper which calls *_ds.create
        // - otherwise, in case of NEW_CATALOG, CatProcureCatalogTable.RecId would still be pointing to an existing record,
        // -     and we'd be calling initRoot on the existing record.
        // ****************************************
        // NOTE: calling CatProcureCatalogTable_ds's findRecord|setRecord|research or all of them does NOT help to refresh
        m_treeDS.initRoot(
                        catProcureCatalogTable_ds.cursor().(fieldnum(CatProcureCatalogTable,Name)),
                        catProcureCatalogTable.RecId
                     );
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedAttributeDataType</Name>
				<Source><![CDATA[
    // returns the selected filter attribute datatype
    public EcoResAttributeType selectedAttributeDataType(int64 _dataFilterableAttributeRecId)
    {
        CatDisplayCategoryFilterableAttribute   filterableAttribute;
        EcoResCategoryAttributeLookup           categoryAttributeLookup;
        EcoResAttribute                         attribute;
        EcoResAttributeType                     attributeType;

        select firstonly RecId from filterableAttribute
            where filterableAttribute.RecId == _dataFilterableAttributeRecId
            join RecId from categoryAttributeLookup
                where categoryAttributeLookup.RecId == filterableAttribute.CategoryAttributeLookup
            join RecId from attribute
                where attribute.RecId == categoryAttributeLookup.Attribute
            join RecId, DataType from attributeType
                where attributeType.RecId == attribute.AttributeType
        ;

        return attributeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAttributesAndRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Sets the state of the UI controls depending on which node is selected.
    /// </summary>
    /// <param  name='_treeNodeIsRoot'>
    ///   A boolean that indicates if the new tree node selected is the root node.
    /// </param>
    private void setAttributesAndRanges(boolean _treeNodeIsRoot)
    {
        if (!_treeNodeIsRoot)
        {
            unitOfMeasureComboBox.loadAttributes();
            categoryCurrencyPriceComboBox.loadAttributes();
            filterableAttributeListView.init();
        }
        else
        {
            currencyPriceComboBox.loadAttributes();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonState</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Sets the state of the BUTTON controls depending on which node is selected.
    /// </summary>
    /// <param  name='_treeNodeIsRoot'>
    ///   A boolean that indicates if the new tree node selected is the root node.
    /// </param>
    void setButtonState(boolean _treeNodeIsRoot)
    {
        // _treeNodeIsRoot: is it for the tree root (not DisplayCategory root)
        boolean dc_isHidden;    // matters only when _treeNodeIsRoot==false
        boolean dc_isAlias;    // matters only when _treeNodeIsRoot==false
        boolean dc_isStaticUpdate;
        CatDisplayCategoryTable tblDisplayCategory;
        CatDisplayCategorySharedInfo tblSharedData;

        // Prevent the action pane from being updated.

        // Catalog's translation is done via TranslateWelcomeText button
        CatDisplayCategoryTranslationBtn.enabled(!_treeNodeIsRoot);
        catDisplayCategoryModBtnGrp.enabled(!_treeNodeIsRoot);
        if (!_treeNodeIsRoot)
        {
            // BUTTON STATE TABLE
            // ==========================================================================
            // Hidden    AMW        enabled                    disabled
            // -------------------------------------------------------------------------------------
            // YES        A        Ena,Del,NewSib            Dis,NewChd,AdP
            // YES        M        Ena,Del,New*, AdP          Dis
            // YES        W        Ena,    New*, AdP        Dis,Del
            // NO        A        Dis,Del,NewSib            Ena,NewChd,AdP
            // NO        M        Dis,Del,New*, AdP        Ena
            // NO        W        Dis,    New*, AdP        Ena,Del
            // ==========================================================================
            // that is:
            //     - NewSib is always enabled
            //     - Ena/Dis is determined by Hidden
            //     - NewChd/AdP is determined by AMW (A)
            //     - Del is determined by AMW (M)
            // exception:
            //     - if root, Del/Ena/Dis/NewSib is always disabled
            // (AMW means AliasManualWithPC)
            // ==========================================================================
            tblDisplayCategory = catDisplayCategoryTable_ds.cursor();

            // for all nodes enable & disable applies
            dc_isHidden = (NoYes::Yes == tblDisplayCategory.IsHidden);
            catDisplayCategoryEnableBtn.enabled(dc_isHidden);
            catDisplayCategoryDisableBtn.enabled( ! dc_isHidden);

            dc_isAlias = (0 != tblDisplayCategory.TargetCategory);
            catDisplayCategoryNewChdBtn.enabled( ! dc_isAlias);

            select firstonly Category from tblSharedData
                where tblSharedData.RecId == tblDisplayCategory.SharedData;
            catDisplayCategoryDeleteBtn.enabled( ! tblSharedData.Category);

            dc_isStaticUpdate = (UpdateType::Static == tblDisplayCategory.UpdateType);

            setVisibleBtn.visible(dc_isStaticUpdate);
            setInvisibleBtn.visible(dc_isStaticUpdate);
            vendorSetVisibleBtn.visible(dc_isStaticUpdate);
            vendorSetInvisibleBtn.visible(dc_isStaticUpdate);
            catDisplayProductAll_visibleOnSite.visible(dc_isStaticUpdate);
            catDisplayVendorAll_visibleOnSite.visible(dc_isStaticUpdate);
        }

        // Allow the action pane to update.
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonStateForCatalogActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Enables/Disables the catProcureCatalogUnpCmdBtn, CatProcureCatalogPubCmdBtn, CatProcureCatalogSyncBtn buttons based upon
    ///   current catalog status
    /// </summary>
    void setButtonStateForCatalogActions()
    {
        // Enable the Inactivate catalog (CatProcureCatalogUnpCmdBtn) button if catalog is in published state,
        // else disables the Inactivate catalog (CatProcureCatalogUnpCmdBtn) button.
        catProcureCatalogUnpCmdBtn.enabled(catProcureCatalogTable.PublishingStatus != ProcureCatalogPublishingStatus::Inactive);

        // Enable/Disables the Activate catalog (CatProcureCatalogPubCmdBtn) button based upon the value that was passed into the method by caller.
        CatProcureCatalogPubCmdBtn.enabled(catProcureCatalogTable.PublishingStatus != ProcureCatalogPublishingStatus::Active);

        // Enables/Disables the CatProcureCatalogSyncBtn button control - Dynamic catalog needs *no* sync.
        element.setButtonStateForCatalogSync(catProcureCatalogTable.UpdateType != CatProcureCatalogUpdateType::Dynamic);
        this.setButtonStateForPreview();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonStateForCatalogSync</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Enables/Disables the CatProcureCatalogSyncBtn button control depending on wether the selected catalog is Static or Dynamic.
    /// </summary>
    /// <param  name='_isEnabled'>
    ///   The value to Enable/Disable the CatProcureCatalogSyncBtn button.
    /// </param>
    void setButtonStateForCatalogSync(boolean _isEnabled)
    {
        catProcureCatalogSyncCmdBtn.enabled(_isEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonStateForNew</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Sets the state of the BUTTON controls when the Form is in "new" mode.
    /// </summary>
    /// <param  name='_enabled'>
    ///   Indicates if the buttons should be enabled or not.
    /// </param>
    void setButtonStateForNew(boolean _enabled)
    {
        // Prevent the action pane from being updated.

        catDisplayCategoryModBtnGrp.enabled(_enabled);
        catProcureCatalogPubBtnGrp.enabled(_enabled);

        catDisplayCategoryPropTPage.visible(false);
        catDisplayProductListTPage.visible(false);
        catDisplayVendorListTPage.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonStateForPreview</Name>
				<Source><![CDATA[
    void setButtonStateForPreview()
    {
        boolean enabled = CatProcureCatalogTable::canPreview(CatProcureCatalogTable.RecId, CatProcureCatalogTable.Owner);
        CatProcureCatalogPrvCmdBtn.enabled(enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonStateOnProductsTab</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Sets the state of the BUTTON controls on the Products tab depending on the record selected.
    /// </summary>
    void setButtonStateOnProductsTab()
    {
        CatDisplayProductAll vwDisplayProduct;
        FormDataSource ds = catDisplayProductAll_ds;
        int nVtIf = 0; // number of records that allows these button states: Visible=true,  Invisible=false
        int nVfIt = 0; // number of records that allows these button states: Visible=false, Invisible=true
        int nAll  = 0;
        int nRemove = 0;

        // -- NOTE: below doesn't work when only one row selected
        // if (CatDisplayProductAll_ds.anyMarked())
        //    ds.getFirst(1, false);

        vwDisplayProduct = ds.getFirst(true) ? ds.getFirst(true) : ds.cursor();
        while (vwDisplayProduct)
        {
            nAll++;

            // can SetVisible   only if (visibleOnSite==No ) && (origin!=ProcurementCategory)
            // can SetInvisible only if (visibleOnSite==Yes) && (origin==ProcurementCategory)
            // NOTE: the order the the IF-ELSE conditions are important.
            //      - cannot change Visibility if (visibleOnSite==No ) && (origin==ProcurementCategory)
            //          -- this means the node has UpdateType=Static; must sync to change Visibility
            if (NoYes::No==vwDisplayProduct.visibleOnSite())
            {
                nVtIf++;
            }
            else
            {
                if (CatDisplayOrigin::ProcurementCategory==vwDisplayProduct.Origin)
                {
                    nVfIt++;
                }
                else if (CatDisplayOrigin::ManuallyAdded==vwDisplayProduct.Origin)
                {
                    nRemove++;
                }
            }

            vwDisplayProduct = ds.getNext();
        }

        // SetVisibleBtn is enabled if and only if all selected records have visibleOnSite==Yes
        //   - note that some still cannot be SetVisible b/c Origin==ProcurementCategory (must be publish catalog instead)
        // SetInvisibleBtn is the same as SetVisibleBtn
        // RemoveProductCmdBtn is enabled if at least one selected record can be Removed
        boolean allowEdit = !element.inViewMode();

        if (nAll > 0)
        {
            if (nVtIf == nAll)
            {
                setVisibleBtn.enabled(allowEdit);
                setInvisibleBtn.enabled(false);
            }
            else if (nVfIt == nAll)
            {
                setVisibleBtn.enabled(false);
                setInvisibleBtn.enabled(allowEdit);
            }
            else
            {
                setVisibleBtn.enabled(false);
                setInvisibleBtn.enabled(false);
            }
        }
        else
        {
            setVisibleBtn.enabled(false);
            setInvisibleBtn.enabled(false);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(ProcEmployeeProcurementSite)))
        {
            removeProductCmdBtn.enabled(nRemove > 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonStateOnVendorsTab</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Sets the state of the BUTTON controls on the Vendors tab depending on the record selected.
    /// </summary>
    void setButtonStateOnVendorsTab()
    {
        CatDisplayVendorAll vwDisplayVendor;
        FormDataSource ds = catDisplayVendorAll_ds;
        int nVtIf = 0; // number of records that allows these button states: Visible=true,  Invisible=false
        int nVfIt = 0; // number of records that allows these button states: Visible=false, Invisible=true
        int nAll  = 0;
        int nRemove = 0;

        // -- NOTE: below doesn't work when only one row selected
        // if (CatDisplayVendorAll_ds.anyMarked())
        //    ds.getFirst(1, false);

        vwDisplayVendor = ds.getFirst(true) ? ds.getFirst(true) : ds.cursor();
        while (vwDisplayVendor)
        {
            nAll++;

            // can SetVisible   only if (visibleOnSite==No ) && (origin!=ProcurementCategory)
            // can SetInvisible only if (visibleOnSite==Yes) && (origin==ProcurementCategory)
            // NOTE: the order of the IF-ELSE conditions are important.
            //      - cannot change Visibility if (visibleOnSite==No ) && (origin==ProcurementCategory)
            //          -- this means the node has UpdateType=Static; must sync to change Visibility
            if (NoYes::No == vwDisplayVendor.visibleOnSite())
            {
                nVtIf++;
            }
            else
            {
                if (CatDisplayOrigin::ProcurementCategory == vwDisplayVendor.Origin)
                {
                    nVfIt++;
                }
                else if (CatDisplayOrigin::ManuallyAdded == vwDisplayVendor.Origin)
                {
                    nRemove++;
                }
            }

            vwDisplayVendor = ds.getNext();
        }

        // VendorSetVisibleBtn is enabled if and only if all selected records have visibleOnSite==Yes
        //   - note that some still cannot be SetVisible b/c Origin==ProcurementCategory (must be publish catalog instead)
        // VendorSetInvisibleBtn is the same as SetVisibleBtn
        // RemoveProductCmdBtn is enabled if at least one selected record can be Removed
        if (nAll > 0)
        {
            if (nVtIf == nAll)
            {
                vendorSetVisibleBtn.enabled(true);
                vendorSetInvisibleBtn.enabled(false);
            }
            else if (nVfIt == nAll)
            {
                vendorSetVisibleBtn.enabled(false);
                vendorSetInvisibleBtn.enabled(true);
            }
            else
            {
                vendorSetVisibleBtn.enabled(false);
                vendorSetInvisibleBtn.enabled(false);
            }
        }

        removeVendorCmdBtn.enabled(nRemove > 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCollapseSubTree</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Sets the state of the UI controls depending on which node is selected.
    /// </summary>
    /// <param  name='_isCollapsing'>
    ///   The value to set the <c>AncestorCategoryToCollapseTo</c> field of the this record to.
    /// </param>
    void setCollapseSubTree(NoYes _isCollapsing)
    {
        CatDisplayCategoryTable currDisplayCategory = catDisplayCategoryTable_ds.cursor();
        recId oldState = currDisplayCategory.AncestorCategoryToCollapseTo;

        if (_isCollapsing)
        {
            currDisplayCategory.AncestorCategoryToCollapseTo = currDisplayCategory.RecId;
        }
        else
        {
            currDisplayCategory.AncestorCategoryToCollapseTo = 0;
        }

        if (oldState != currDisplayCategory.AncestorCategoryToCollapseTo)
        {
            if (catDisplayCategoryTable_ds.cursor().validateWrite())
            {
                // perform behind-scene actions
                currDisplayCategory.update();

                // refresh UI: tree+tab
                catDisplayCategoryTable_ds.refresh();
                m_treeDS.recreateSelectedNode(true);
            }
            else
            {
                // if validateWrite failed and we didn't change value back, then the UI keeps
                // throwing an error and the user has NO way to fix it!
                currDisplayCategory.AncestorCategoryToCollapseTo = oldState;
                catDisplayCategoryTable_ds.refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlState</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Sets the state of the UI controls depending on which node is selected.
    /// </summary>
    /// <param  name='_treeNodeIsRoot'>
    ///   A boolean that indicates if the new tree node selected is the root node.
    /// </param>
    void setControlState(boolean _treeNodeIsRoot)
    {
        this.setButtonState(_treeNodeIsRoot);
        this.setTabPageState(_treeNodeIsRoot);
        // this avoids the otherwise UX nuisance of user selecting another DC node, then focus goes away to the details TAB
        // - preventing user from being able to mouse up+down the tree nodes.
        navTreeControl.setFocus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEditControlStateForDC</Name>
				<Source><![CDATA[
    void setEditControlStateForDC()
    {
        #CatDisplayCategory
        CatProcureCatalogTable tblCatalog;
        CatDisplayCategoryTable tblDisplayCategory;

        tblCatalog = catProcureCatalogTable_ds.cursor();
        tblDisplayCategory = catDisplayCategoryTable_ds.cursor();
        if (tblDisplayCategory)
        {
            this.setViewEditModeOnName();
            // enable all first - IsHidden is done via ActionPane buttons
            catDisplayCategoryTable_IsHidden.enabled(false);

            // determine the hide all sub-categories check box state
            if (tblDisplayCategory.AncestorCategoryToCollapseTo != 0)
            {
                if (tblDisplayCategory.AncestorCategoryToCollapseTo !=
                    tblDisplayCategory.RecId)
                {
                    hideSubCategoriesCheckBox.enabled(false);
                }
                else
                {
                    hideSubCategoriesCheckBox.enabled(true);
                }
                hideSubCategoriesCheckBox.value(1);
            }
            else
            {
                hideSubCategoriesCheckBox.enabled(true);
                hideSubCategoriesCheckBox.value(0);
            }

            // for Catalog that's not Both, DisplayCategory's UpdateType cannot be changed.
            catDisplayCategoryTable_UpdateType.enabled(CatProcureCatalogUpdateType::Both == tblCatalog.UpdateType);
            catDisplayCategoryTable_IsAlias.enabled(true);
            refGroup_ParentCategory.enabled(true);
            catDisplayCategoryTable_TargetCategory.enabled(true);
            switch (tblDisplayCategory.getNodeType())
            {
                case #CatDisplayCategory_NodeType_Alias:
                    //CatDisplayCategoryTable_IsHidden.enabled(false);
                    catDisplayCategoryTable_UpdateType.enabled(false);
                    break;
                case #CatDisplayCategory_NodeType_Manual:
                    //CatDisplayCategoryTable_IsHidden.enabled(false);
                    catDisplayCategoryTable_UpdateType.enabled(false);
                    catDisplayCategoryTable_TargetCategory.enabled(false);
                    break;
                case #CatDisplayCategory_NodeType_WithPC:
                    catDisplayCategoryTable_IsAlias.enabled(false);
                    refGroup_ParentCategory.enabled(false);
                    catDisplayCategoryTable_TargetCategory.enabled(false);
                    break;
                default:
                    throw warning(strfmt("@SYS134841", tblDisplayCategory.getNodeType()));
            }

            // disabled for root since we always use the Welcome page/view:
            sharedInfoItem_DefaultView.enabled(tblDisplayCategory.ParentCategory != 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFilterRangeGroupState</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Disables filterRangeListView if the multiple rows selected in FilterableAttribute ListView.
    /// </summary>
    /// <param name="_listControl">
    ///   This is filterableAttribute listView control.
    /// </param>
    /// <param name="_dataFilterableAttributeRecId">
    ///   Data of the currently selected row in the attribute grid.
    /// </param>
    public void setFilterRangeGroupState(FormListControl _listControl, int64 _dataFilterableAttributeRecId)
    {
        boolean                 selectedAttributeHasRange;
        EcoResAttributeType     attributeType;
        
        //If multiple|no records selected delete all the elements from FilterRangeListView and disable the FilterRangeGroup group.
        if (_listControl.getSelectedCount() != 1)
        {
            filterRangeListView.deleteAll();
            filterRangeGroup.enabled(false);
            // making just one visible - doesn't matter which one:
            filterRangeGroup.visible(true);
            EnumFilterGroup.visible(false);
        }
        else if (_listControl.getSelectedCount() == 1)
        {
            // get the selected attribute data type
            attributeType = element.selectedAttributeDataType(_dataFilterableAttributeRecId);
            selectedAttributeHasRange = attributeType && !AttributeDataTypeDiscriminator::checkAttributeDataTypeText(attributeType.DataType);
            filterRangeGroup.visible(selectedAttributeHasRange);
            EnumFilterGroup.visible(!selectedAttributeHasRange);

            if (selectedAttributeHasRange)
            {
                filterRangeGroup.enabled(true);
                filterRangeListView.init(); // reset the FilterRangeListView
            }
            else
            {
                enumFilterListView.init(); // reset the EnumFilterListView
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsHidden</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Sets the state of the UI controls depending on which node is selected.
    /// </summary>
    /// <param  name='_newState'>
    ///   The value to set the <c>IsHidden</c> field of the this record to.
    /// </param>
    void setIsHidden(NoYes _newState)
    {
        CatDisplayCategoryTable currDisplayCategory = catDisplayCategoryTable_ds.cursor();
        NoYes oldState = currDisplayCategory.IsHidden;

        currDisplayCategory.IsHidden = _newState;
        if (oldState != _newState)
        {
            if ((oldState != _newState) && (catDisplayCategoryTable_ds.cursor().validateWrite()))
            {
                // perform behind-scene actions
                currDisplayCategory.update();

                // refresh UI: tree+tab
                catDisplayCategoryTable_ds.refresh();
                m_treeDS.recreateSelectedNode(true);

                this.setButtonState(m_treeDS.treeItemIsRoot(navTreeControl.getSelection()));
            }
            else
            {
                // if validateWrite failed and we didn't change value back, then the UI keeps throwing error and user has NO way to fix it!
                currDisplayCategory.IsHidden = oldState;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPublishingStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Sets the <c>PublishingStatus</c> and <c>PublishDateTime</c> of the <c>CatProcureCatalogTable</c> record.
    /// </summary>
    /// <param  name='_status'>
    ///   The new status to set the <c>CatProcureCatalogTable</c> record to.
    /// </param>
    /// <remarks>
    ///   A warning is given if the <c>CatProcureCatalogTable</c> record's <c>PublishingStatus</c> cannot be changed.
    /// </remarks>
    void setPublishingStatus(ProcureCatalogPublishingStatus _status)
    {
        boolean canSetPublishingStatus = catProcureCatalogTable_ds.cursor().canSetPublishingStatus(_status);
        boolean updateOccurred;

        if (canSetPublishingStatus)
        {
            // NOTE: if we call m_currCatalog.setPublishingStatus() instead, then the refresh does NOT refresh call below the UI:
            //     CatProcureCatalogPropTPage still shows stale data
            updateOccurred = catProcureCatalogTable_ds.cursor().setPublishingStatus(_status);
            if (updateOccurred)
            {
                // refresh UI:
                catProcureCatalogTable_ds.refresh();
                info(strfmt("@SYS190970", catProcureCatalogTable.Name, (_status == ProcureCatalogPublishingStatus::Active ? "@SYS190971" : "@SYS190972")));
            }
        }
        else
        {
            throw warning("@SYS133624");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRangeForSharedData</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Sets the query's shared info range (filter)'s value.
    /// </summary>
    void setRangeForSharedData()
    {
        Query q;
        QueryBuildDataSource qbds;

        // Set shared data range for CatDisplayProductAll view
        q = catDisplayProductAll_ds.query();
        qbds = q.dataSourceTable(tablenum(CatDisplayProductAll));
        qbds.findRange(fieldnum(CatDisplayProductAll, SharedDataRecId)).value(queryValue(catDisplayCategoryTable.SharedData));

        // Set shared data range for CatDisplayVendorAll view
        q = catDisplayVendorAll_ds.query();
        qbds = q.dataSourceTable(tablenum(CatDisplayVendorAll));
        qbds.findRange(fieldnum(CatDisplayVendorAll, SharedDataRecId)).value(queryValue(catDisplayCategoryTable.SharedData));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTabPageState</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Sets the state of the TABPAGE controls depending on which node is selected.
    /// </summary>
    /// <param  name='_treeNodeIsRoot'>
    ///   A boolean that indicates if the new tree node selected is the root node.
    /// </param>
    void setTabPageState(boolean _treeNodeIsRoot)
    {
        CatDisplayCategorySharedInfo m_catDisplayCategorySharedData;
        CatDisplayCategoryTable      m_catDisplayCategoryTable;
        // make the rignt tab the current active one
        if (_treeNodeIsRoot)
        {
            catProcureCatalogPropTPage.visible(true);
            catDisplayCategoryPropTPage.visible(false);
            catDisplayProductListTPage.visible(false);
            catDisplayVendorListTPage.visible(false);

            if (isConfigurationkeyEnabled(configurationKeyNum(ProcEmployeeProcurementSite)))
            {
                attributeFilterRangeTPage.visible(false);
                catalogPriceRangeTPage.visible(true);
                categoryPriceRangeTPage.visible(false);
                categoryPresentations.visible(true);
                productRelationTypeTPage.visible(true);
            }

            // activate the TabPage *after* making tabs visible/invisible:
            catProcureCatalogPropTPage.activatePage();
        }
        else
        {
            // Make all relavant tabs visible/invisible
            catProcureCatalogPropTPage.visible(false);
            catDisplayCategoryPropTPage.visible(true);
            catDisplayProductListTPage.visible(true);
            catDisplayVendorListTPage.visible(true);

            if (isConfigurationkeyEnabled(configurationKeyNum(ProcEmployeeProcurementSite)))
            {
                categoryPresentations.visible(false);
                catalogPriceRangeTPage.visible(false);
                productRelationTypeTPage.visible(false);
            }

            // activate the TabPage *after* making tabs visible/invisible:
            catDisplayCategoryPropTPage.activatePage();

            if (isConfigurationkeyEnabled(configurationKeyNum(ProcEmployeeProcurementSite)))
            {
                // Do not display the Admin Tab if Category is of type Hidden/Added
                select RecId from m_catDisplayCategoryTable
                    where m_catDisplayCategoryTable.RecId == catDisplayCategoryTable.RecId
                        join Category from m_catDisplayCategorySharedData
                            where m_catDisplayCategorySharedData.RecId == m_catDisplayCategoryTable.SharedData;
                if ( m_catDisplayCategorySharedData.Category == 0 )
                {
                    attributeFilterRangeTPage.visible(false);
                    categoryPriceRangeTPage.visible(false);
                }
                else
                {
                    attributeFilterRangeTPage.visible(true);
                    categoryPriceRangeTPage.visible(true);
                }
            }

            this.setEditControlStateForDC();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setViewEditModeOnName</Name>
				<Source><![CDATA[
    void setViewEditModeOnName()
    {
        CatDisplayCategoryTable currentDisplayCategory = CatDisplayCategoryTable_ds.cursor();
        CatDisplayCategorySharedInfo currentSharedInfo = SharedInfoItem_ds.cursor();
        // don't allow Edit if (1 && (2a || 2b):
        // - (1 ) not in ReadOnly mode, and
        // - (2a) DisplayCategory has *not* corresponding EcoResCategory, or
        // - (2b) DisplayCategory IsDescriptiveDataSynchronized=No
        //       (keep DisplayCategory Name/FriendlyName/Description in sync with EcoResCategory's)
        boolean inViewMode = element.inViewMode();
        boolean allowEdit;
        // we don't need to worry if in ReadOnly mode - AX Client framework takes care of it.
        if (!inViewMode)
        {
            allowEdit = (
                    (!currentSharedInfo.Category)
                ||  ( currentDisplayCategory.IsDescriptiveDataSynchronized == NoYes::No)
            );

            CatDisplayCategoryGeneralGrp_Name.allowEdit(allowEdit);
            CatDisplayCategoryGeneralGrp_Description.allowEdit(allowEdit);
        }

        // don't allow toggling IsDescriptiveDataSynchronized unless there is corresponding EcoResCategory
        CatDisplayCategoryTable_IsDescriptiveDataSynchronized.enabled(currentSharedInfo.Category);
    }

]]></Source>
			</Method>
			<Method>
				<Name>task</Name>
				<Source><![CDATA[
    public int task(int _taskId)
    {
        #task
        int ret;

        ret = super(_taskId);

        if (_taskId == #taskEditRecord || _taskId == #taskDoneEditRecord)
        {
            // cannot be done in the EditRecord CommandButton's clicked() event
            // - all clicked() does is posting a task to MessageQueue;
            // - only here in task() the mode has actually been toggled.
            element.setViewEditModeOnName();

            // update buttons state
            element.setButtonStateOnProductsTab();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeNodeSelectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Performs the necessary actions when the tree node selection changes.
    ///   Sets the state of the UI controls depending on which node is selected.
    /// </summary>
    /// <param  name='_treeNodeIsRoot'>
    ///   A boolean that indicates if the new tree node selected is the root node.
    /// </param>
    void treeNodeSelectionChanged(boolean _treeNodeIsRoot)
    {
        this.setRangeForSharedData();
        this.setControlState(_treeNodeIsRoot);
        this.setAttributesAndRanges(_treeNodeIsRoot);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBaseFormDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Updates the list page datasource and refreshes the list page once the data in policy is changed.
    /// </summary>
    public void updateBaseFormDataSource()
    {
        FormRun formRun;
        Object  callerObject;
        str catalogDataSourceName = tablestr(CatProcureCatalogTable);

        formRun = element.args().caller();

        if (formRun != null)
        {
            formRun.dataSource(catalogDataSourceName).research(true);
        }

        if (element.args().parm() == 'FromCatProcureCatalogCreate')
        {
            callerObject = element.args().caller();
            callerObject.refreshCatalogListpageDS();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>wait</Name>
				<Source><![CDATA[
    public void wait(boolean _modal = false)
    {
        super(_modal);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>CatProcureCatalogTable</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            // Need to select all fields explicitly as parent form's (CatprocurecatalogListPage) datasource's OnlyFetchActive property is set to 'Yes'.
            this.query().dataSourceName(this.name()).addAllFields(tablestr(CatProcureCatalogTable));
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            // Enables/Disables the catProcureCatalogUnpCmdBtn, CatProcureCatalogPubCmdBtn, CatProcureCatalogSyncBtn buttons based upon
            // current catalog status
            element.setButtonStateForCatalogActions();

            if (isConfigurationkeyEnabled(configurationKeyNum(ProcEmployeeProcurementSite)))
            {
                if (categoryPresentations.isActivePage())
                {
                    catProcureCatalogTable.reread();
                }
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            Args            args;
            FormRun         formRun;
            Object          calledFormObject;
            CatProcureCatalogTable createdCatalog;

            if (m_doNew)
            {
                if (CatProcureCatalogTable::findPersonForCurrentUser().RecId)
                {
                    args = new Args();
                    args.name(formstr(CatProcureCatalogCreate));
                    args.caller(element);

                    formRun = classfactory.formRunClass(args);
                    formRun.init();
                    formRun.run();
                    formRun.wait();
                    calledFormObject = formRun;

                    if (formRun.closedOk())
                    {
                        createdCatalog = calledFormObject.getCatProcureCatalogTable();
                        catProcureCatalogTable_ds.query().dataSourceTable(tablenum(CatProcureCatalogTable)).clearRange(fieldnum(CatProcureCatalogTable, RecId));
                    }

                    if (!createdCatalog || !createdCatalog.RecId)
                    {
                        element.design().visible(false);
                        element.close();
                    }

                    // NOTE: cannot refresh model-based ListPage which cannot have method: element.args().caller().updateDataSource()
                    element.addProcureCatalogRange(createdCatalog.RecId);
                    m_treeDS.initRoot(
                                        createdCatalog.Name,
                                        createdCatalog.RecId
                                    );

                    m_doNew = false;
                    element.updateBaseFormDataSource();
                }
                else
                {
                    element.design().visible(false);
                    element.close();
                }
            }
            else
            {
                super(_append);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            boolean creatingNewRecord = ( ! catProcureCatalogTable.RecId);
            Query q;
            QueryBuildDataSource qbDS;
            QueryBuildRange range;

            ttsbegin;

            super();

            ttscommit;

            if (creatingNewRecord)
            {
                {
                    // refresh CatDisplayCategoryTable_ds
                    //
                    // NOTE: CatProcureCatalogTable_ds.refresh() does refresh CatProcureCatalogTable_ds but CatDisplayCategoryTable_ds.refresh() doesn't do CatDisplayCategoryTable_ds.
                    // Adding CatProcureCatalogTable_ds.findRecord() does help.
                    //
                    q = catDisplayCategoryTable_ds.query();
                    qbDS = q.dataSourceTable(tablenum(CatDisplayCategoryTable));
                    range = qbDS.findRange(fieldnum(CatDisplayCategoryTable, Catalog));
                    if (!range)
                    {
                        range = qbDS.addRange(fieldnum(CatDisplayCategoryTable, Catalog));
                    }
                    range.value( queryValue(this.cursor().RecId ) );
                }

                // refresh the UI
                m_treeDS.initRoot(this.cursor().(fieldnum(CatProcureCatalogTable,Name)), this.cursor().RecId);
                // enable the UI buttons now
                element.setButtonStateForNew(true);
            }
            else
            {
                // update tree node in case Name changed - what if ParentCategory changed?
                m_treeDS.modified();
            }

            // NOTE: cannot refresh model-based ListPage which cannot have method: element.args().caller().updateDataSource()
            element.updateBaseFormDataSource();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>Owner</DataField>
						<Methods>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                SysReferenceTableLookup sysTableLookup;
                Query                   query = new Query();
                QueryBuildDataSource    qbds, qbds2;

                // limit only to records with corresponding HcmWorker
                // see bug AX6:56914

                sysTableLookup = SysReferenceTableLookup::newParameters(tablenum(DirPerson), _formReferenceControl);
                sysTableLookup.addLookupfield(fieldnum(DirPerson, Name));

                qbds = query.addDataSource(tablenum(DirPerson));
                qbds2 = qbds.addDataSource(tablenum(HcmWorker));
                qbds2.relations(true);

                sysTableLookup.parmQuery(query);
                return sysTableLookup.performFormLookup();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>CatDisplayCategoryTable</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;
            boolean isAlias = catDisplayCategoryTable_IsAlias.value();

            ret = super();

            // CatDisplayCategoryTable_IsAlias control isn't data-bound, hence validation of
            // CatDisplayCategoryTable_IsAlias+CatDisplayCategoryTable.TargetCategory
            // can only be done here - in CatDisplayCategoryTable.validateWrite we don't have access to the control.
            if (ret && isAlias && (!catDisplayCategoryTable.TargetCategory))
            {
                ret = false;
                info(strfmt("@SYS190948", catDisplayCategoryTable.Name));
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            // set the control - it's not data bound
            catDisplayCategoryTable_IsAlias.value(catDisplayCategoryTable.TargetCategory!=0);
            if (!catDisplayProductAll)
                element.setButtonStateOnProductsTab();
            if (!catDisplayVendorAll)
                element.setButtonStateOnVendorsTab();

            // Enables/Disables the CatProcureCatalogSyncBtn button control depending on wether the selected catalog is Static or Dynamic.
            element.setButtonStateForCatalogSync(catDisplayCategoryTable.UpdateType == UpdateType::Static);

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            CatDisplayCategoryTable tmp = catDisplayCategoryTable;
            super(_append);
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            CatDisplayCategoryTable thisFromDB;
            CatDisplayCategoryTable newParentCategoryFromDB = catDisplayCategoryTable.parentCategoryChanged(thisFromDB);

            super();

            // update tree node in case Name changed - what if ParentCategory changed?
            // NOTE: super calls CatDisplayCategoryTable.update which will persists changes to db,
            //   hence CatDisplayCategoryTable.parentCategoryChanged() could return different results before and after the super call.
            // change to ParentCategory is committed if and only if
            // - user did make change (ie, newParentCategoryFromDB.RecId!=0)
            // - super() committed the change
            m_treeDS.modifiedEx(((catDisplayCategoryTable.ParentCategory) && (newParentCategoryFromDB.RecId == catDisplayCategoryTable.ParentCategory)),
                (  (thisFromDB.IsHidden != catDisplayCategoryTable.IsHidden)
                || ((   thisFromDB.TargetCategory) && ( ! catDisplayCategoryTable.TargetCategory))
                || (( ! thisFromDB.TargetCategory) && (   catDisplayCategoryTable.TargetCategory)) )
                );
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>ParentCategory</DataField>
						<Methods>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                // ret = super(_formReferenceControl);
                return element.lookupReference_CatDisplayCategoryTable(_formReferenceControl);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>TargetCategory</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                CatDisplayCategoryTable catDisplayCategoryTableTarget;

                super();

                // set SharedData as user
                if (catDisplayCategoryTable.TargetCategory)
                {
                    select firstonly SharedData from catDisplayCategoryTableTarget where catDisplayCategoryTableTarget.RecId == catDisplayCategoryTable.TargetCategory;
                    catDisplayCategoryTable.SharedData = catDisplayCategoryTableTarget.SharedData;
                }
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                // ret = super(_formReferenceControl);
                return element.lookupReference_CatDisplayCategoryTable(_formReferenceControl);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>UpdateType</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                // change visibility of SetVisibleBtn and SetInvisibleBtn buttons and grid column(s) accordingly
                element.setButtonState(m_treeDS.treeItemIsRoot(navTreeControl.getSelection()));
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>CatDisplayProductAll</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            element.setButtonStateOnProductsTab();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            Query q;
            QueryBuildDataSource qbds;
            int idx;

            super();

            q = this.query();
            for (idx=1; idx<=q.dataSourceCount(); idx++)
            {
                qbds = q.dataSourceNo(idx);
                // it's impossible to specify a join relation between CatDisplayProductAll and CatDisplayCategoryTable
                // - cannot specify at design time: VIEW doesn't have RELATION. (we could define RELATION on EDT but here the EDT is RecId)
                // - cannot specify using QueryBuildDataSource:
                // -- what we need is "SELECT * FROM CatDisplayProductAll WHERE CatDisplayCategoryTable.SharedData == CatDisplayProductAll.RecId" (only doable at design time)
                // -- not "SELECT * FROM CatDisplayProductAll JOIN CatDisplayCategoryTable WHERE CatDisplayCategoryTable.SharedData == CatDisplayProductAll.RecId" (QueryBuildDataSource doable at time)
                // hence it's easily to simply use addRange - luckily we always work with at most one CatDisplayCategoryTable node
                qbds.addRange(fieldnum(CatDisplayProductAll, SharedDataRecId)).value(queryValue(0));
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>EcoResProduct</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            // add the join relation
            // - cannot do this at design time in the form;
            // - cannot specify the relation on the view which, unlike table, doesn't allow relation
            Query q = this.query();
            QueryBuildDataSource qbds = q.dataSourceTable(tablenum(EcoResProduct));
            qbds.addLink(fieldnum(CatDisplayProductAll, ProductRecId), fieldnum(EcoResProduct, RecId));

            /*
                Procurement Catalogs are presenting the products that a preparer of the requisition can add.
                The product catalog should not show products that are categorized as catch weight item.
                Add the range to make sure that the CW product should not be displayed on the product catalog.
            */
            qbds.addRange(fieldNum(EcoResProduct, PdsCWProduct)).value(SysQuery::value(NoYes::No));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>CatDisplayVendorAll</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            element.setButtonStateOnVendorsTab();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            Query q;
            QueryBuildDataSource qbds;
            int idx;

            super();

            q = this.query();
            for (idx = 1; idx <= q.dataSourceCount(); idx++)
            {
                qbds = q.dataSourceNo(idx);
                // it's impossible to specify a join relation between CatDisplayVendorAll and CatDisplayCategoryTable
                // - cannot specify at design time: VIEW doesn't have RELATION. (we could define RELATION on EDT but here the EDT is RecId)
                // - cannot specify using QueryBuildDataSource:
                // -- what we need is "SELECT * FROM CatDisplayVendorAll WHERE CatDisplayCategoryTable.SharedData == CatDisplayVendorAll.RecId" (only doable at design time)
                // -- not "SELECT * FROM CatDisplayVendorAll JOIN CatDisplayCategoryTable WHERE CatDisplayCategoryTable.SharedData == CatDisplayVendorAll.RecId" (QueryBuildDataSource doable at time)
                // hence it's easily to simply use addRange - luckily we always work with at most one CatDisplayCategoryTable node
                qbds.addRange(fieldnum(CatDisplayVendorAll, SharedDataRecId)).value(queryValue(0));
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>VendCategory</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            Query q;
            QueryBuildDataSource qbds;

            super();

            // add the join relation
            // - cannot do this at design time in the form;
            // - cannot specify the relation on the view which, unlike table, doesn't allow relation
            q = this.query();
            qbds = q.dataSourceTable(tablenum(VendCategory));
            qbds.addLink(fieldnum(CatDisplayVendorAll, ProcurementCategory), fieldnum(VendCategory, Category      ));
            qbds.addLink(fieldnum(CatDisplayVendorAll, VendorDataAreaId   ), fieldnum(VendCategory, VendorDataArea));
            qbds.addLink(fieldnum(CatDisplayVendorAll, VendorAccountNum   ), fieldnum(VendCategory, VendorAccount ));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>SharedInfoItem</Name>
				<Methods>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            CatDisplayCategorySharedInfo mySharedInfo;

            select firstonly RecId from mySharedInfo where mySharedInfo.RecId == catDisplayCategoryTable.SharedData;

            if (!mySharedInfo.RecId)
                super(_append);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>CatCatalogProductRelationType</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            QueryBuildDataSource qbdsCatCatalogProductRelationType;

            super();

            qbdsCatCatalogProductRelationType = this.query().dataSourceTable(tablenum(CatCatalogProductRelationType));
            qbdsCatCatalogProductRelationType.addSortField(fieldnum(CatCatalogProductRelationType, DisplayOrder), SortOrder::Ascending);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>CatDisplayCategoryTranslation</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;
            catDisplayCategoryTranslation.LanguageId      = SystemParameters::getSystemLanguageId();
            catDisplayCategoryTranslation.FriendlyName    = catDisplayCategoryTable.Name;
            catDisplayCategoryTranslation.DisplayCategory = catDisplayCategoryTable.RecId;
            ret = super();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
            SysTranslationHelper::filterTranslationTable(catDisplayCategoryTranslation_ds, fieldnum(CatDisplayCategoryTranslation, LanguageId));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>CatDisplaySharedDataTranslation</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;

            catDisplaySharedDataTranslation.LanguageId = SystemParameters::getSystemLanguageId();
            catDisplaySharedDataTranslation.SharedData = sharedInfoItem.RecId;

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
            SysTranslationHelper::filterTranslationTable(catDisplaySharedDataTranslation_ds, fieldnum(CatDisplaySharedDataTranslation, LanguageId));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>EcoResProductTranslation</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            EcoResProductTranslation::queryAddDefaultLanguage(this.query());
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>CatProcureCatalogTranslation</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;

            catProcureCatalogTranslation.LanguageId     = SystemParameters::getSystemLanguageId();
            catProcureCatalogTranslation.Catalog        = catProcureCatalogTable.RecId;

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
            SysTranslationHelper::filterTranslationTable(catProcureCatalogTranslation_ds, fieldnum(CatProcureCatalogTranslation, LanguageId));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>EcoResCategoryForVendor</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            QueryBuildDataSource        qbdsCategory;

            super();

            qbdsCategory = EcoResCategoryForVendor_ds.query().dataSourceTable(tablenum(EcoResCategory));
            qbdsCategory.clearDynalinks();
            qbdsCategory.clearLinks();
            qbdsCategory.addLink(
                fieldNum(CatDisplayVendorAll, ProcurementCategory),
                fieldNum(EcoResCategory, recId)
            );
            qbdsCategory.addRange(fieldNum(EcoResCategory, CategoryHierarchy))
                .value(queryValue(EcoResCategoryHierarchyRole::getHierarchiesByRole(
                        EcoResCategoryNamedHierarchyRole::Procurement
                    ).CategoryHierarchy
                ));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>CatProcureCatalogSyncCmdBtn</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            // Update the LastSyncTime value to now, based upon this value it will populate the values for purchase requisition too
            CatProcureCatalogTable::updateLastSyncTime(catProcureCatalogTable.RecId);
            CatProcureCatalogTable::updatePublishDateTime(catProcureCatalogTable.RecId);
            info("@SYS332351");
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CatProcureCatalogPubCmdBtn</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.setPublishingStatus(ProcureCatalogPublishingStatus::Active);
            // to refresh the catalog list page
            element.updateBaseFormDataSource();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CatProcureCatalogUnpCmdBtn</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            if (catProcureCatalogTable.PublishingStatus == ProcureCatalogPublishingStatus::Active &&
                    Box::yesNo("@SYS340006", DialogButton::Cancel) == DialogButton::Yes)
            {
                super();

                CatCatalogPolicyRule::expireCatalogPolicies(catProcureCatalogTable.RecId);

                element.setPublishingStatus(ProcureCatalogPublishingStatus::Inactive);
                // to refresh the catalog list page
                element.updateBaseFormDataSource();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CatDisplayCategoryNewChdBtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.newManualDisplayCategory();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CatDisplayCategoryDeleteBtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.deleteDisplayCategory();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CatDisplayCategoryEnableBtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.setIsHidden(NoYes::No);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CatDisplayCategoryDisableBtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();
            element.setIsHidden(NoYes::Yes);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CatDisplayCategoryTranslationBtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            SysTranslationHelper sysTranslationHelper;

            sysTranslationHelper = new SysTranslationHelper(
                tablenum(CatDisplayCategoryTable),
                tablenum(CatDisplayCategoryTranslation)
            );

            sysTranslationHelper.launchTranslationDetailForm(
                catDisplayCategoryTable.RecId,
                // allowEdit iff not in ViewMode, and not IsDescriptiveDataSynchronized
                (!element.inViewMode()) && (catDisplayCategoryTable.IsDescriptiveDataSynchronized==NoYes::No)
            );

            super();

            // after child/Translation form updates data,
            // - refresh buffer (CatDisplayCategoryTranslation.*) which still has old data
            // - refresh the UI
            catDisplayCategoryTranslation.reread();
            catDisplayCategoryTranslation_ds.refresh();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>NavTreeControl</Name>
				<Type>Tree</Type>
				<Methods>
					<Method>
						<Name>endLabelEdit</Name>
						<Source><![CDATA[
        /// <summary>
        ///   This method ensures that the data source is updated when a label in the tree has been changed.
        /// </summary>
        /// <param name='_idx'>
        ///   The index of the changed node.
        /// </param>
        /// <param name='_text'>
        ///   The new text for the node.
        /// </param>
        /// <param name='_data'>
        ///   The data associated with the node.
        /// </param>
        public void endLabelEdit(int _idx, str _text, anytype _data)
        {
            Name origName;
            boolean isForRoot = m_treeDS.treeItemIsRoot(_idx);
            Common buffer;
            FormDataSource ds;
            fieldId nameFID;

            if (isForRoot)
            {
                buffer = catProcureCatalogTable;
                ds = catProcureCatalogTable_ds;
                nameFID = fieldnum(CatProcureCatalogTable, Name);
            }
            else
            {
                buffer = catDisplayCategoryTable;
                ds = catDisplayCategoryTable_ds;
                nameFID = fieldnum(CatDisplayCategoryTable, Name);
            }

            // there are at least 2 cases when _text would become empty:
            // - somehow if user just key in F2 (to edit) then ESC, _text would be empty
            // - user could have really entered empty string
            // in the former case, we do NOT want to set ds.Name to empty
            // - we'd be getting popup with validation error repeatedly, making it impossible to to close the FORM until killing AX client.
            // see bug AX6:12172.
            if (strlen(_text) > 0)
            {
                origName = buffer.(nameFID);
                buffer.(nameFID) = _text;

                if (ds.validateWrite())
                {
                    // NOTE:
                    // when update fails due to PK violation, it seems an error is thrown,
                    // and code after this isn't executed...we might want to catch it and revert Name for the tree node?
                    // - otherwise the name on tree node vs that in the tab would be different, even after user navigates away/back to this node. bad UX.
                    // - note that this *does* mean that the name user typed would be forever gone.
                    buffer.update();
                    ds.executeQuery();
                }
                else
                {
                    // revert back so we don't constantly get popup that cannot be clicked away - bug AX6:12172
                    buffer.(nameFID) = origName;
                    info(strfmt("@SYS136412", "@SYS92116", _text));
                }
            }
            else
            {
                info(strfmt("@SYS136411", "@SYS92116"));

                // - if F2+ESC cases _text=="", then afterwards tree node shows orig (non-empty) Name - fine
                // - if user explicitly set tree node to "" - then afterwards the tree node still has empty text, inconsistent with Tab (ds)
                // 	-- but there is no easy way to fix that:
                // 		--- calling super with buffer.(nameFID) doesn't help
                // 		--- calling NavTreeControl.getItem(_idx).text( buffer.(nameFID) ) doesn't help either
                // 			---- NavTreeControl and FormTreeItem don't have any refresh method; rebuilding tree would cause other UX issues.
            }

            super(_idx, buffer.(nameFID), _data);
        }

]]></Source>
					</Method>
					<Method>
						<Name>expanding</Name>
						<Source><![CDATA[
        boolean expanding(int _idx, FormTreeExpand _action, anytype _data)
        {
            boolean ret;
            ret = super(_idx, _action, _data);
            m_treeDS.expanding(_idx, _action, _data);

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        void selectionChanged(FormTreeItem oldItem, FormTreeItem newItem, FormTreeSelect how)
        {
            super(oldItem, newItem, how);

            m_treeDS.selectionChanged(oldItem, newItem);

            element.treeNodeSelectionChanged(m_treeDS.treeItemIsRoot(newItem.idx()));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CatDisplayCategoryTable_IsDescriptiveDataSynchronized</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            if (CatDisplayCategoryTable.IsDescriptiveDataSynchronized == NoYes::Yes)
            {
                CatDisplayCategoryTable.synchronizeDescriptiveData();

                // refresh UI:
                CatDisplayCategoryTable.reread();
                CatDisplayCategoryTable_ds.refresh();
                CatDisplayCategoryTranslation.reread();
                CatDisplayCategoryTranslation_ds.refresh();
            }
            element.setViewEditModeOnName();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CatDisplayCategoryTable_IsAlias</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            boolean isAlias;

            ret = super();

            // must get the state *after* calling super
            isAlias = catDisplayCategoryTable_IsAlias.value();
            catDisplayCategoryTable_TargetCategory.enabled(isAlias);

            if (isAlias)
            {
                if (catDisplayCategoryTable.orig().TargetCategory)
                {
                    // revet SharedData in case user just changed isAlias twice without a Save in between
                    catDisplayCategoryTable.TargetCategory = catDisplayCategoryTable.orig().TargetCategory;
                }
                else
                {
                    // otherwise set it to alias to self
                    // - this is only as a workaround for this UI issue:
                    //      if we didn't have this workaround, user could
                    //      - check the "shortcut"/alias flag (YES)
                    //      - navigate away to a different category
                    //          -- user will NOT be warned or errored, and the original category would still have "alias/shortcut"=NO
                    //          -- control's modified(), datasource's validateWrite() method will NOT be called
                    //          -- datasource's leave() method WILL be called - but it's also called in so many other occasions that we simply cannot use it for this purpose
                    // Need to ask AX client team if there is a better way to really fix this.
                    // Alternatively, we can keep the IsAlias column on the table and bind this control to it. Not ideal.
                    catDisplayCategoryTable.TargetCategory = catDisplayCategoryTable.RecId;
                }
                catDisplayCategoryTable_TargetCategory.value(catDisplayCategoryTable.orig().TargetCategory);

                // now make user select the target node this one is an alias for
                catDisplayCategoryTable_TargetCategory.setFocus();
            }
            else
            {
                // revet SharedData in case used just changed isAlias twice without a Save in between
                catDisplayCategoryTable.SharedData = catDisplayCategoryTable.orig().SharedData;
                catDisplayCategoryTable.TargetCategory = 0;
                catDisplayCategoryTable_TargetCategory.value(0);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CatDisplayCategoryTable_TargetCategory</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            CatDisplayCategoryTable targetDC;

            super();

            // set SharedData using TargetCategory
            if (catDisplayCategoryTable.TargetCategory)
            {
                select firstonly RecId from targetDC where targetDC.RecId == catDisplayCategoryTable.TargetCategory;
                catDisplayCategoryTable.SharedData = targetDC.SharedData;
            }
            else
            {
                catDisplayCategoryTable.SharedData = catDisplayCategoryTable.orig().SharedData;
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HideSubCategoriesCheckBox</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            element.setCollapseSubTree(this.checked());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RemoveProductCmdBtn</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            CatDisplayProductAll vwDisplayProduct;
            CatDisplayProductCategory tblAdded;
            int nSelected = 0;
            int nAffected = 0;

            FormDataSource ds = catDisplayProductAll_ds;

            super();
            vwDisplayProduct = ds.getFirst(true) ? ds.getFirst(true) : ds.cursor();

            ttsbegin;
            while (vwDisplayProduct)
            {
                nSelected++;
                if (vwDisplayProduct.Origin == CatDisplayOrigin::ManuallyAdded)
                {
                    select forupdate RecId from tblAdded
                        where tblAdded.Origin == CatDisplayOrigin::ManuallyAdded
                            && tblAdded.ProductCategory == vwDisplayProduct.ProductCategoryRecId
                            && tblAdded.SharedData == vwDisplayProduct.SharedDataRecId
                    ;
                    tblAdded.delete();
                    nAffected++;
                }

                vwDisplayProduct = ds.getNext();
            }
            ttscommit;

            if (nAffected > 0)
            {
                catDisplayProductAll_ds.executeQuery();
            }
            if ((nSelected > 0) && (nSelected > nAffected))
            {
                info(strfmt("@SYS135914", "@SYS26394", "@SYS135660", "@SYS135658", strfmt("@SYS135912", nAffected, nSelected)));
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SetVisibleBtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            CatDisplayProductAll vwDisplayProduct;
            CatDisplayProductCategory tblAdded;
            CatDisplayProductCategory tblHidden;
            EcoResProductCategory tblPC;

            CatDisplayProductOriginal vwDPC2;
            CatDisplayCategorySharedInfo tblSharedData2;
            EcoResProductCategory tblPC2;

            int nSelected = 0;
            int nAffected = 0;

            FormDataSource ds = catDisplayProductAll_ds;

            super();

            ttsbegin;
            for (vwDisplayProduct = getFirstSelection(ds);
            vwDisplayProduct;
            vwDisplayProduct = ds.getNext()
            )
            {
                nSelected++;
                // can only set visible products with origin=ManuallyHidden
                if (CatDisplayOrigin::ManuallyHidden == vwDisplayProduct.Origin)
                {
                    nAffected++;

                    // does the product already (also) has origin=ProcurementCategory?
                    // if not,
                    //  - check and add to tblAdded
                    // either way,
                    //  - delete from tblHidden
                    select firstonly RecId from vwDPC2
                        join RecId from tblSharedData2
                            where vwDPC2.SharedDataRecId == tblSharedData2.RecId
                        join RecId from tblPC2
                            where tblPC2.Category == tblSharedData2.Category
                                && tblPC2.Product == vwDPC2.ProductRecId
                    ;
                    if ( ! vwDPC2.RecId)
                    {
                        select forupdate RecId from tblAdded
                            where tblAdded.Origin == CatDisplayOrigin::ManuallyAdded
                                && tblAdded.SharedData == vwDisplayProduct.SharedDataRecId
                                && tblAdded.ProductCategory == vwDisplayProduct.ProductCategoryRecId
                        ;

                        if ( ! tblAdded.RecId)
                        {
                            tblAdded.clear();
                            tblAdded.Origin = CatDisplayOrigin::ManuallyAdded;
                            tblAdded.SharedData = vwDisplayProduct.SharedDataRecId;
                            tblAdded.ProductCategory = vwDisplayProduct.ProductCategoryRecId;
                            tblAdded.insert();
                        }
                    }

                    select forupdate RecId from tblHidden
                        where tblHidden.Origin == CatDisplayOrigin::ManuallyHidden
                            && tblHidden.SharedData == vwDisplayProduct.SharedDataRecId
                        join RecId from tblPC
                            where tblPC.Product == vwDisplayProduct.ProductRecId
                                && tblHidden.ProductCategory == tblPC.RecId
                    ;
                    if (tblHidden.RecId)
                    {
                        tblHidden.delete();
                    }
                }
            }
            ttscommit;

            if (nAffected > 0)
            {
                catDisplayProductAll_ds.executeQuery();
            }
            if ((nSelected > 0) && (nSelected > nAffected))
            {
                warning(strfmt("@SYS135914", "@SYS132128", "@SYS135670", "@SYS26062", strfmt("@SYS135912", nAffected, nSelected)));
                warning("@SYS345401");
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SetInvisibleBtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            CatDisplayProductAll vwDisplayProduct;
            CatDisplayProductCategory tblAdded;
            CatDisplayProductCategory tblHidden;
            EcoResProductCategory tblPC;
            int nSelected = 0;
            int nAffected = 0;

            FormDataSource ds = catDisplayProductAll_ds;

            super();

            ttsbegin;
            for (vwDisplayProduct = getFirstSelection(ds);
            vwDisplayProduct;
            vwDisplayProduct = ds.getNext()
            )
            {
                nSelected++;
                // can only set invisible products with origin=ProcurementCategory
                if (CatDisplayOrigin::ProcurementCategory == vwDisplayProduct.Origin)
                {
                    select firstonly RecId from tblPC
                        where tblPC.Product == vwDisplayProduct.ProductRecId;

                    select forupdate RecId from tblHidden
                        where tblHidden.Origin == CatDisplayOrigin::ManuallyHidden
                            && tblHidden.SharedData == vwDisplayProduct.SharedDataRecId
                            && tblHidden.ProductCategory == tblPC.RecId;

                    if ( ! tblHidden.RecId)
                    {
                        nAffected++;

                        tblHidden.clear();
                        tblHidden.Origin = CatDisplayOrigin::ManuallyHidden;
                        tblHidden.SharedData = vwDisplayProduct.SharedDataRecId;
                        tblHidden.ProductCategory = tblPC.RecId;
                        tblHidden.insert();
                    }
                    select forupdate RecId from tblAdded
                            where  tblAdded.Origin == CatDisplayOrigin::ManuallyAdded
                                && tblAdded.SharedData == vwDisplayProduct.SharedDataRecId
                                && tblAdded.ProductCategory == vwDisplayProduct.ProductCategoryRecId
                        ;
                    if (tblAdded.RecId)
                    {
                        tblAdded.delete();
                    }
                }
            }
            ttscommit;

            if (nAffected > 0)
            {
                catDisplayProductAll_ds.executeQuery();
            }
            if ((nSelected > 0) && (nSelected > nAffected))
            {
                info(strfmt("@SYS135913", "@SYS132127", "@SYS135660", "@SYS134703", "@SYS135670", "@SYS5461", strfmt("@SYS135912", nAffected, nSelected)));
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RemoveVendorCmdBtn</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            CatDisplayVendorAll vwDisplayVendor;
            CatDisplayVendorCategory tblAdded;
            int nSelected = 0;
            int nAffected = 0;

            FormDataSource ds = catDisplayVendorAll_ds;

            super();
            vwDisplayVendor = ds.getFirst(true) ? ds.getFirst(true) : ds.cursor();

            ttsbegin;
            while (vwDisplayVendor)
            {
                nSelected++;
                if (vwDisplayVendor.Origin == CatDisplayOrigin::ManuallyAdded)
                {
                    tblAdded = CatDisplayVendorCategory::findByCatDisplayVendorAllWithOrigin(vwDisplayVendor, CatDisplayOrigin::ManuallyAdded, true);
                    // if a VendCategory has multiple VendProcurementCategoryStatus,
                    // then multiple rows would appear - should only delete first.
                    // trying to delete the rest would cause nAffected wrong.
                    if (tblAdded.RecId)
                    {
                        tblAdded.delete();
                        nAffected++;
                    }
                }

                vwDisplayVendor = ds.getNext();
            }
            ttscommit;

            if (nAffected > 0)
            {
                catDisplayVendorAll_ds.executeQuery();
            }

            if ((nSelected > 0) && (nSelected > nAffected))
            {
                info(strfmt("@SYS300676", "@SYS26394", "@SYS300709", "@SYS135658", strfmt("@SYS135912", nAffected, nSelected)));
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OpenVendorMIBtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            CatDisplayVendorAll displayVendorAll = getFirstSelection(catDisplayVendorAll_ds);
            MenuFunction        vdMenuFunction;
            Args                args            = new Args(element);
            VendTable           vendor;

            // form VendTableDetails works only if selected vendor's dataarea matches curext.
            // Hence we must painstakingly changeCompany instead of simply using a MenuItemButton.
            if (displayVendorAll && displayVendorAll.VendorDataAreaId)
            {
                vendor = VendTable::findByDataAreaId(displayVendorAll.VendorAccountNum, displayVendorAll.VendorDataAreaId);
                changeCompany(vendor.company())
                {
                    args.record(vendor);
                    vdMenuFunction = new MenuFunction(menuitemDisplayStr(VendTableDetails), MenuItemType::Display);
                    vdMenuFunction.openMode(OpenMode::View);
                    vdMenuFunction.run(args);
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>VendorSetVisibleBtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            CatDisplayVendorAll vwDisplayVendor;
            CatDisplayVendorCategory tblHidden;

            int nSelected = 0;
            int nAffected = 0;

            FormDataSource ds = catDisplayVendorAll_ds;

            super();

            ttsbegin;
            for (vwDisplayVendor = getFirstSelection(ds);
            vwDisplayVendor;
            vwDisplayVendor = ds.getNext()
            )
            {
                nSelected++;

                // can only set visible products with origin = ManuallyHidden
                if (CatDisplayOrigin::ManuallyHidden == vwDisplayVendor.Origin)
                {
                    nAffected++;

                    tblHidden = CatDisplayVendorCategory::findByCatDisplayVendorAllWithOrigin(vwDisplayVendor, CatDisplayOrigin::ManuallyHidden, true);
                    if (tblHidden.RecId)
                    {
                        tblHidden.delete();
                    }
                }
            }
            ttscommit;

            if (nAffected > 0)
            {
                catDisplayVendorAll_ds.executeQuery();
            }
            if ((nSelected > 0) && (nSelected > nAffected))
            {
                info("@SYS345399");
                info(strfmt("@SYS300676", "@SYS132128", "@SYS135670", "@SYS26062", strfmt("@SYS135912", nAffected, nSelected)));
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>VendorSetInvisibleBtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            CatDisplayVendorAll         vwDisplayVendor;
            CatDisplayVendorCategory    tblAdded;
            CatDisplayVendorCategory    tblHidden;
            int nSelected = 0;
            int nAffected = 0;

            FormDataSource ds = catDisplayVendorAll_ds;

            super();
            ttsbegin;
            for (vwDisplayVendor = getFirstSelection(ds);
            vwDisplayVendor;
            vwDisplayVendor = ds.getNext()
            )
            {
                nSelected++;
                // can only set invisible products with origin = ProcurementCategory
                if (CatDisplayOrigin::ProcurementCategory == vwDisplayVendor.Origin)
                {
                    tblHidden = CatDisplayVendorCategory::findByCatDisplayVendorAllWithOrigin(vwDisplayVendor, CatDisplayOrigin::ManuallyHidden);

                    if ( ! tblHidden.RecId)
                    {
                        nAffected++;

                        tblHidden.clear();
                        tblHidden.Origin = CatDisplayOrigin::ManuallyHidden;
                        tblHidden.SharedData = vwDisplayVendor.SharedDataRecId;
                        tblHidden.VendorCategory = vwDisplayVendor.VendorCategory;
                        tblHidden.insert();

                        select forupdate tblAdded
                            where  tblAdded.Origin == CatDisplayOrigin::ManuallyAdded
                                && tblAdded.SharedData == vwDisplayVendor.SharedDataRecId
                                && tblAdded.VendorCategory == vwDisplayVendor.VendorCategory
                        ;
                        if (tblAdded.RecId)
                        {
                            tblAdded.delete();
                        }
                    }
                }

                vwDisplayVendor = ds.getNext();
            }
            ttscommit;

            if (nAffected > 0)
            {
                catDisplayVendorAll_ds.executeQuery();
            }
            if ((nSelected > 0) && (nSelected > nAffected))
            {
                info(strfmt("@SYS300692", "@SYS132127", "@SYS300709", "@SYS134703", "@SYS135670", "@SYS5461", strfmt("@SYS135912", nAffected, nSelected)));
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AttributeFilterRangeTPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        /// <summary>
        ///   Loads the unit of measure combo box on page activation.
        /// </summary>
        public void pageActivated()
        {
            super();
            unitOfMeasureComboBox.selectUOM();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DeleteAttributesButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///   Deletes attributes.
        /// </summary>
        void clicked()
        {
            CatDisplayCategoryFilterableAttribute   catDisplayCategoryFilterableAttribute;
            int                                     rowPosition;

            rowPosition = filterableAttributeListView.getNextItem(FormListNext::Selected);

            //Either if no selected attribute or Click "no" on confirmation box, stop the execution.
            if ( (rowPosition < 0 ) || Box::yesNo(strfmt("@SYS134302","@SYS191289"),DialogButton::No) != DialogButton::Yes)
            {
                return;
            }

            ttsbegin;
            while (rowPosition != -1)
            {
                select forupdate catDisplayCategoryFilterableAttribute
                        where catDisplayCategoryFilterableAttribute.RecId == element.currentFilterableAttributeRecId();
                if ( catDisplayCategoryFilterableAttribute )
                {
                    catDisplayCategoryFilterableAttribute.delete();
                    filterableAttributeListView.delete(rowPosition);
                }
                rowPosition = filterableAttributeListView.getNextItem(FormListNext::Selected);
            }
            ttscommit;

            if ( filterableAttributeListView.getCount() > 0 )
            {
                deleteAttributesButton.enabled(true);
            }
            else
            {
                addFilterRange.enabled(false);
                deleteAttributesButton.enabled(false);
                filterRangeListView.init(); // to avoid showing old data when all records are deleted from filterableattributeslist.
            }

            filterableAttributeListView.init(); // to make the selection of the first record in the filterable attributes list
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FilterableAttributeListView</Name>
				<Type>ListView</Type>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        ///   Initializes the FilterableAttributeListView control.
        /// </summary>
        public void init()
        {
            CatDisplayCategoryFilterableAttribute   m_catDisplayCategoryFilterableAttribute;
            CatDisplayCategoryTable                 m_catDisplayCategoryTable;
            EcoResCategoryAttributeLookup           m_ecoResCategoryAttributeLookup;
            EcoResAttribute                         m_ecoResAttribute;
            EcoResAttributeTranslation              attributeTranslation;
            EcoResAttributeType                     attributeType;
            FormListItem                            m_listItem;
            FormListColumn                          m_listAttribute = new FormListColumn("@SYS300707");  // Attribute
            FormListColumn                          m_listRecID     = new FormListColumn("@SYS21886"); // hidden
            FormListColumn                          columnDataType  = new FormListColumn("@SYS40150"); // Data type
            FormListColumn                          columnAttributeType = new FormListColumn("@SYS333319");  // Attribute type
            int                                     m_idx;
            str                                     lastItemRecId;
            str                                     lastItemDataType;
            str                                     lastItemAttributeType;

            // hide the child controls of filterableAttributeListView
            // - their respective init() API would unhide them as appropriate.
            // EnumFilterGroup is the ancestor of EnumFilterListView
            EnumFilterGroup.visible(false);
            // using FilterRangeGroup (the ancestor of FilterRangeListView) would
            // cause UX problem when user changes category/filterattribute
            FilterRangeListView.visible(false);

            filterableAttributeListView.deleteAll();
            m_listAttribute.width(120);
            columnDataType.width(60);
            columnAttributeType.width(120);
            m_listRecID.width(0);

            if ( filterableAttributeListView.getColumnCount() < 3)
            {
                filterableAttributeListView.addColumn(1,m_listAttribute);
                filterableAttributeListView.addColumn(2,m_listRecID);
                filterableAttributeListView.addColumn(3,columnDataType);
                filterableAttributeListView.addColumn(4,columnAttributeType);
            }

            while select RecId from m_catDisplayCategoryTable
                where m_catDisplayCategoryTable.RecId == catDisplayCategoryTable.RecId
                    join RecId from m_catDisplayCategoryFilterableAttribute
                        where m_catDisplayCategoryFilterableAttribute.SharedData == m_catDisplayCategoryTable.SharedData
                    join RecId from m_ecoResCategoryAttributeLookup
                        where m_ecoResCategoryAttributeLookup.RecId == m_catDisplayCategoryFilterableAttribute.CategoryAttributeLookup
                    join Name, RecId from  m_ecoResAttribute
                        order by m_ecoResAttribute.Name
                        where m_ecoResAttribute.RecId == m_ecoResCategoryAttributeLookup.Attribute
                    outer join FriendlyName from  attributeTranslation
                        where m_ecoResAttribute.RecId == attributeTranslation.Attribute
                            && attributeTranslation.Language == SysTranslationHelper::getPrimaryLanguage()
                    join DataType, Name from  attributeType
                        where attributeType.RecId == m_ecoResAttribute.AttributeType
                            // filterable if one of: numeric type; datetype type; text type *and* enum
                            && (
                                    ((attributeType.DataType == AttributeDataType::Text) && (attributeType.IsEnumeration == NoYes::Yes))
                                ||   (attributeType.DataType == AttributeDataType::Currency)
                                ||   (attributeType.DataType == AttributeDataType::Decimal)
                                ||   (attributeType.DataType == AttributeDataType::Integer)
                                ||   (attributeType.DataType == AttributeDataType::DateTime)
                            )
            {
                m_listItem = new FormListItem(strfmt("%1", (attributeTranslation.FriendlyName ? attributeTranslation.FriendlyName : m_ecoResAttribute.Name)));
                m_listItem.data(int642str(m_catDisplayCategoryFilterableAttribute.RecId));
                m_listItem.idx(any2int(m_catDisplayCategoryFilterableAttribute.RecId));
                m_idx = filterableAttributeListView.addItem(m_listItem);
                filterableAttributeListView.setText(m_idx, strfmt("%1",m_catDisplayCategoryFilterableAttribute.RecId),1);
                filterableAttributeListView.setText(m_idx, strfmt("%1",attributeType.DataType),2);
                filterableAttributeListView.setText(m_idx, strfmt("%1",attributeType.Name),3);

                // save for use after the WHILE loop when the buffer data is gone
                lastItemRecId = strfmt("%1",m_catDisplayCategoryFilterableAttribute.RecId);
                lastItemDataType = strfmt("%1",attributeType.DataType);
                lastItemAttributeType = attributeType.Name;
            }

            if ( filterableAttributeListView.getCount() > 0 )
            {
                // delete+re-add for the item of selection; selection would fire selectionChanged event.
                filterableAttributeListView.delete(m_idx);
                m_listItem.stateSelected(true);
                m_listItem.stateFocus(true);
                filterableAttributeListView.addItem(m_listItem);
                filterableAttributeListView.setText(m_idx, lastItemRecId,    1);
                filterableAttributeListView.setText(m_idx, lastItemDataType, 2);
                filterableAttributeListView.setText(m_idx, lastItemAttributeType, 3);

                deleteAttributesButton.enabled(true);
            }
            else
            {
                addFilterRange.enabled(false);
                deleteAttributesButton.enabled(false);
                unitOfMeasureComboBox.enabled(false);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged(int _idx, anytype _Data)
        {
            super(_idx, _Data);

            if (isConfigurationkeyEnabled(configurationKeyNum(ProcEmployeeProcurementSite)))
            {
                element.setFilterRangeGroupState(this, any2int64(_Data));

                if ( this.getSelectedCount()==1 &&  attributeFilterRangeTPage.isActivePage() )
                {
                    unitOfMeasureComboBox.selectUOM();
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UnitOfMeasureComboBox</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>loadAttributes</Name>
						<Source><![CDATA[
        /// <summary>
        ///   Loads unit of measure combo box with values from unit of measure table.
        /// </summary>
        public void loadAttributes()
        {
            this.manageState();
        }

]]></Source>
					</Method>
					<Method>
						<Name>manageState</Name>
						<Source><![CDATA[
        /// <summary>
        ///   Manages UI controls.
        /// </summary>
        public void manageState()
        {
            if ( this.valueStr() == '' )
            {
                addFilterRange.enabled(false);
                removeFilterRange.enabled(false);
            }

            filterRangeListView.init();
            if ( filterRangeListView.getCount() < 1)
            {
                removeFilterRange.enabled(false);
            }
            else
            {
                removeFilterRange.enabled(true);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            ret = super();
            this.manageState();
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectUOM</Name>
						<Source><![CDATA[
        /// <summary>
        ///   Selects appropriate unit of measure in the combo box for given attribute.
        /// </summary>
        public void selectUOM()
        {
            CatDisplayCategoryFilterRange           tblCatDisplayCategoryFilterRange;
            CatDisplayCategoryAttributeRange        tblCatDisplayCategoryAttributeRange;
            CatDisplayCategoryFilterableAttribute   tblCatDisplayCategoryFilterableAttribute;
            boolean                                 isAttributeNumericDataType = false;
            boolean                                 isDefaultAttributeAssociatedToDomain = false;

            UnitOfMeasure                   tblUnitOfMeasure;
            EcoResCategoryAttributeLookup   tblEcoResCategoryAttributeLookup;
            EcoResAttribute                 tblEcoResAttribute;
            EcoResAttributeType                    tblEcoResAttributeType;
            EcoResAttributeTypeUnitOfMeasure       tblEcoResAttributeTypeUnitOfMeasure;

            //Get filterable attribute
            unitOfMeasureComboBox.clear();

            //Get filterable attribute
            select firstonly RecId from tblCatDisplayCategoryFilterableAttribute
                where tblCatDisplayCategoryFilterableAttribute.RecId == element.currentFilterableAttributeRecId();

            //Check if attribute is numeric
            isAttributeNumericDataType = CatDisplayCategoryFilterableAttribute::isAttributeNumericDataType(
            tblCatDisplayCategoryFilterableAttribute);

            //Disable add filter range button if the attribute is not of type numeric
            addFilterRange.enabled(isAttributeNumericDataType);

            if (!isAttributeNumericDataType)
            {
                this.manageState();
                return;
            }

            while select RecId, Symbol from tblUnitOfMeasure
                join RecId, AttributeType, DefaultUnitOfMeasure from tblEcoResAttributeTypeUnitOfMeasure
                    where tblEcoResAttributeTypeUnitOfMeasure.DefaultUnitOfMeasure == tblUnitOfMeasure.RecId
                join RecId from tblEcoResAttributeType
                    where tblEcoResAttributeType.RecId == tblEcoResAttributeTypeUnitOfMeasure.AttributeType
                join RecId, AttributeType from tblEcoResAttribute
                    where tblEcoResAttribute.AttributeType == tblEcoResAttributeType.RecId
                join RecId, Attribute from tblEcoResCategoryAttributeLookup
                    where tblEcoResCategoryAttributeLookup.Attribute == tblEcoResAttribute.RecId
                join RecId from tblCatDisplayCategoryFilterableAttribute
                    where tblCatDisplayCategoryFilterableAttribute.CategoryAttributeLookup == tblEcoResCategoryAttributeLookup.RecId
                        && tblCatDisplayCategoryFilterableAttribute.RecId == element.currentFilterableAttributeRecId()
            {
                unitOfMeasureComboBox.add(tblUnitOfMeasure.Symbol);
                isDefaultAttributeAssociatedToDomain = true;
            }
            //If default unit of measure is associated to the domain for the selected attribute
            if (isDefaultAttributeAssociatedToDomain)
            {
                //Trying to get UnitOfMeasure for the Attribute
                select firstonly RecId, UnitOfMeasure from tblCatDisplayCategoryAttributeRange
                        where tblCatDisplayCategoryAttributeRange.FilterAttribute == element.currentFilterableAttributeRecId()
                    join RecId from tblCatDisplayCategoryFilterRange
                        where tblCatDisplayCategoryFilterRange.RecId == tblCatDisplayCategoryAttributeRange.FilterRange
                    join Symbol, RecId from tblUnitOfMeasure
                        where tblUnitOfMeasure.RecId == tblCatDisplayCategoryAttributeRange.UnitOfMeasure;

                //Select the unit of measure combobox
                if ( tblCatDisplayCategoryAttributeRange )
                {
                    unitOfMeasureComboBox.selectText(tblUnitOfMeasure.Symbol);
                }
                else if ( unitOfMeasureComboBox.count() > 0 )
                {
                    unitOfMeasureComboBox.selectText(unitOfMeasureComboBox.getText(0));
                }
            }
            else
            {
                info("@SYS328432");
            }
            this.manageState();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AddFilterRange</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///   Opens up the CatPriceRange form by passing the current selected <c>UnitOfMeasure</c>
        ///   and <c>CatDisplayCategoryFilterableAttribute</c> table buffers.
        /// </summary>
        void clicked()
        {
            CatDisplayCategoryFilterableAttribute catDisplayCategoryFilterableAttribute;
            UnitOfMeasure   tblUnitOfMeasure;
            Args            args;

            args = new Args();
            args.caller(element);

            select Symbol, RecId from tblUnitOfMeasure
                where tblUnitOfMeasure.Symbol == unitOfMeasureComboBox.valueStr();

            if ( !tblUnitOfMeasure )
            {
                return;
            }

            select catDisplayCategoryFilterableAttribute
                where catDisplayCategoryFilterableAttribute.RecId == element.currentFilterableAttributeRecId();

            if ( !catDisplayCategoryFilterableAttribute )
            {
                return;
            }

            args.record(catDisplayCategoryFilterableAttribute);
            args.parm(int642str(tblUnitOfMeasure.RecId));

            this.menufunction().run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RemoveFilterRange</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///   Removes one or more selected <c>CatDisplayCategoryAttributeRange</c> records.
        /// </summary>
        void clicked()
        {
            CatDisplayCategoryAttributeRange    catDisplayCategoryAttributeRange;
            int                                 recordPosition;

            recordPosition = filterRangeListView.getNextItem(FormListNext::Selected);

            //Either if no selected attribute filter ranges records or Click "no" on confirmation box: stop the execution.
            if ( (recordPosition < 0 ) || Box::yesNo(strfmt("@SYS134302","@SYS191230"),DialogButton::No) != DialogButton::Yes)
            {
                return;
            }

            //Get records to be deleted
            ttsbegin;
            while (recordPosition != -1)
            {
                select forupdate catDisplayCategoryAttributeRange
                where catDisplayCategoryAttributeRange.FilterRange == filterRangeListView.currentPriceRange()
                && catDisplayCategoryAttributeRange.FilterAttribute == element.currentFilterableAttributeRecId();

                if ( catDisplayCategoryAttributeRange )
                {
                    catDisplayCategoryAttributeRange.delete();
                    filterRangeListView.delete(recordPosition);
                }
                recordPosition = filterRangeListView.getNextItem(FormListNext::Selected);
            }
            ttscommit;

            filterRangeListView.init();
            if ( filterRangeListView.getCount() < 1 )
            {
                removeFilterRange.enabled(false);
            }
            else
            {
                removeFilterRange.enabled(true);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FilterRangeListView</Name>
				<Type>ListView</Type>
				<Methods>
					<Method>
						<Name>currentPriceRange</Name>
						<Source><![CDATA[
        /// <summary>
        ///   Searches for selected record.
        /// </summary>
        /// <returns>
        ///   Return selected attribute of int64 datatype .
        /// </returns>
        public int64 currentPriceRange()
        {
            FormListItem m_item;
            int64 m_currentPriceRangeID;
            int   m_count;

            m_count = filterRangeListView.getNextItem(FormListNext::Selected);
            if ( m_count > -1 )
            {
                m_item = filterRangeListView.getItem(m_count);
                m_currentPriceRangeID = m_item.data();
            }
            return m_currentPriceRangeID;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            RecId                                   displayCategoryFilterableAttributeRecId = element.currentFilterableAttributeRecId();
            CatDisplayCategoryFilterableAttribute   displayCategoryFilterableAttribute;
            CatDisplayCategoryTable                 displayCategory;
            EcoResCategoryAttributeLookup           categoryAttributeLookup;
            EcoResAttribute                         attribute;
            EcoResAttributeType                     attributeType, selectedAttributeDataType;
            CatDisplayCategoryAttributeRange        tblCatDisplayCategoryAttributeRange;
            CatDisplayCategoryFilterRange           tblFilterRange;
            UnitOfMeasure                           tblUnitOfMeasure;

            int             m_idx;
            FormListItem    m_listItem;
            FormListColumn  m_minRange;
            FormListColumn  m_maxRange;
            m_minRange      = new FormListColumn("@SYS81437");
            m_maxRange      = new FormListColumn("@SYS21886");

            filterRangeListView.deleteAll();
            m_maxRange.width(150);
            m_minRange.width(150);

            if (displayCategoryFilterableAttributeRecId)
            {
                select RecId from displayCategory
                    where displayCategory.RecId == catDisplayCategoryTable.RecId
                    join RecId from displayCategoryFilterableAttribute
                        where displayCategoryFilterableAttribute.SharedData == displayCategory.SharedData
                    join RecId from categoryAttributeLookup
                        where categoryAttributeLookup.RecId == displayCategoryFilterableAttribute.CategoryAttributeLookup
                    join RecId from attribute
                        where attribute.RecId == categoryAttributeLookup.Attribute
                    join RecId from  attributeType
                        where  attributeType.RecId == attribute.AttributeType
                            // only these AttributeType's can have FilterRange's:
                            && (
                                     (attributeType.DataType == AttributeDataType::Currency)
                                ||   (attributeType.DataType == AttributeDataType::Decimal)
                                ||   (attributeType.DataType == AttributeDataType::Integer)
                                ||   (attributeType.DataType == AttributeDataType::DateTime)
                            )
                ;
                // using FilterRangeGroup (the ancestor of FilterRangeListView) would
                // cause UX problem when user changes category/filterattribute
                FilterRangeListView.visible(attributeType.RecId);
                if (attributeType.RecId)
                {
                    if ( filterRangeListView.getColumnCount() < 2)
                    {
                        filterRangeListView.addColumn(1,m_minRange);
                        filterRangeListView.addColumn(2,m_maxRange);
                    }

                    select Symbol, RecId from tblUnitOfMeasure
                        where tblUnitOfMeasure.Symbol == unitOfMeasureComboBox.valueStr();

                    if ( tblUnitOfMeasure )
                    {
                        // get the select attribute data type.
                        selectedAttributeDataType = element.selectedAttributeDataType(displayCategoryFilterableAttributeRecId);

                        while select RecId from tblCatDisplayCategoryAttributeRange
                            where tblCatDisplayCategoryAttributeRange.FilterAttribute == displayCategoryFilterableAttributeRecId
                            join LowerLimit, UpperLimit, RecId from tblFilterRange
                                where tblFilterRange.RecId == tblCatDisplayCategoryAttributeRange.FilterRange
                                && tblCatDisplayCategoryAttributeRange.UnitOfMeasure == tblUnitOfMeasure.RecId
                        {
                            // to show "and below" text and to ignore decimal part if the data type is of type integer.
                            m_listItem = new FormListItem(tblFilterRange.LowerLimit <= #CatDisplayCategory_FilterRangeLowerLimit ? "@SYS332355" : (
                                    (selectedAttributeDataType.DataType == AttributeDataType::Integer) ? strfmt("%1",real2int(tblFilterRange.LowerLimit) ) : strfmt("%1",tblFilterRange.LowerLimit) ));
                            m_listItem.data(int642str(tblFilterRange.RecId));
                            m_listItem.idx(any2int(tblFilterRange.RecId));
                            m_listItem.stateFocus(true);
                            m_listItem.stateSelected(true);
                            m_idx = filterRangeListView.addItem(m_listItem);

                            if ( tblFilterRange.UpperLimit >= #CatDisplayCategory_FilterRangeUpperLimit )
                            {
                                filterRangeListView.setText(m_idx, strfmt("%1","@SYS308915"),1);
                            }
                            else
                            {
                                // if the selected attribute is of integer ignore the decimal part.
                                if (selectedAttributeDataType.DataType == AttributeDataType::Integer)
                                {
                                    filterRangeListView.setText(m_idx, strfmt("%1",real2int(tblFilterRange.UpperLimit)),1);
                                }
                                else
                                {
                                    filterRangeListView.setText(m_idx, strfmt("%1",tblFilterRange.UpperLimit),1);
                                }
                            }
                        }
                    }

                    removeFilterRange.enabled(filterRangeListView.getCount() > 0);

                    if ( filterRangeListView.getCount() > 0 || unitOfMeasureComboBox.count() == 0 )
                    {
                        unitOfMeasureComboBox.enabled(false);
                    }
                    else
                    {
                        unitOfMeasureComboBox.enabled(true);
                    }
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EnumFilterListView</Name>
				<Type>ListView</Type>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        ///   Initializes the EnumFilterListView control.
        /// </summary>
        public void init()
        {
            RecId                                   displayCategoryFilterableAttributeRecId = element.currentFilterableAttributeRecId();
            CatDisplayCategoryFilterableAttribute   displayCategoryFilterableAttribute;
            CatDisplayCategoryTable                 displayCategory;
            EcoResCategoryAttributeLookup           categoryAttributeLookup;
            EcoResAttribute                         attribute;
            EcoResAttributeType                     attributeType;
            EcoResEnumerationAttributeTypeValue     enumerationAttributeTypeValue;
            EcoResTextValue                         textValue;
            EcoResTextValueTranslation              translation;
            FormListItem                            listItem;
            FormListColumn                          valueColumn  = new FormListColumn("@SYS40150");
            FormListColumn                          listRecID     = new FormListColumn("@SYS21886"); // hidden
            int                                     listItemID;
            str                                     listItemText;

            EnumFilterListView.deleteAll();
            if (displayCategoryFilterableAttributeRecId)
            {
                select RecId from displayCategory
                    where displayCategory.RecId == catDisplayCategoryTable.RecId
                    join RecId from displayCategoryFilterableAttribute
                        where displayCategoryFilterableAttribute.SharedData == displayCategory.SharedData
                    join RecId from categoryAttributeLookup
                        where categoryAttributeLookup.RecId == displayCategoryFilterableAttribute.CategoryAttributeLookup
                    join RecId from attribute
                        where attribute.RecId == categoryAttributeLookup.Attribute
                    join RecId from  attributeType
                        where  attributeType.RecId == attribute.AttributeType
                            && attributeType.DataType == AttributeDataType::Text
                            && attributeType.IsEnumeration == NoYes::Yes
                ;
                // EnumFilterGroup is the ancestor of EnumFilterListView
                EnumFilterGroup.visible(attributeType.RecId);
                if (attributeType.RecId)
                {
                    valueColumn.width(300);
                    listRecID.width(0);

                    if (EnumFilterListView.getColumnCount() < 2)
                    {
                        EnumFilterListView.addColumn(1,listRecID);
                        EnumFilterListView.addColumn(2,valueColumn);
                    }

                    while select RecId from enumerationAttributeTypeValue
                            order by enumerationAttributeTypeValue.OrdinalNumber
                            where enumerationAttributeTypeValue.AttributeType == attributeType.RecId
                        join TextValue from textValue
                            where enumerationAttributeTypeValue.Value == textValue.RecId
                        outer join TextValue from translation
                            where  translation.TextValueTable == textValue.RecId
                                && translation.Language == SysTranslationHelper::getPrimaryLanguage()
                    {
                        listItemText = strfmt("%1", (translation.TextValue ? translation.TextValue : textValue.TextValue));
                        listItem = new FormListItem(listItemText);
                        listItem.data(int642str(displayCategoryFilterableAttribute.RecId));
                        listItem.idx(any2int(displayCategoryFilterableAttribute.RecId));
                        listItemID = EnumFilterListView.addItem(listItem);
                        EnumFilterListView.setText(listItemID, listItemText, 1);
                    }
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CatalogPriceRangeTPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        /// <summary>
        ///   Loads the unit of measure combo box for given catalog on page activation.
        /// </summary>
        public void pageActivated()
        {
            super();
            currencyPriceComboBox.loadAttributes();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CurrencyPriceComboBox</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>loadAttributes</Name>
						<Source><![CDATA[
        /// <summary>
        ///   Loads unit of measure combo box with values from unit of measure table.
        /// </summary>
        public void loadAttributes()
        {
            this.selectUOM();
            this.modified();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = true;
            //ret = super(); // this occasionally causes AX to run in infinite loop

            if ( this.valueStr() == '' )
            {
                currencyPriceAddRange.enabled(false);
                currencyPriceRemoveRange.enabled(false);
            }
            else
            {
                currencyPriceAddRange.enabled(true);
            }
            if ( currencyPriceFilterRangeListView.getCount() < 1 )
            {
                currencyPriceRemoveRange.enabled(false);
            }
            else
            {
                currencyPriceRemoveRange.enabled(true);
            }
            currencyPriceFilterRangeListView.init();
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectUOM</Name>
						<Source><![CDATA[
        /// <summary>
        ///   Selects appropriate unit of measure in the combo box for given price range.
        /// </summary>
        public void selectUOM()
        {
            CatProcureCatalogPriceRange procurecatalogPriceRangeRange;
            CatProcureCatalogTable      procureCatalog;
            CatCatalogPolicyRule        catalogRule;
            SysPolicyRule               policyRule;
            SysPolicy                   policy;
            SysPolicyOrganization       policyOrganization;
            Ledger                      ledger;
            Currency                    currency;
            OMHierarchyRelationship     omHierarchyRelationship;
            OMInternalOrganization      omInternalOrganization;
            utcdatetime                 now = DateTimeUtil::utcNow();

            currencyPriceComboBox.clear();

            select firstonly RecId, Currency from procurecatalogPriceRangeRange
                where procurecatalogPriceRangeRange.ProcureCatalog == catProcureCatalogTable.RecId;

            //Get the policy for the catalog
            //Get organization (LE) for this policy
            //Get Default currency for this organization
            while select  RecId from procureCatalog
                where procureCatalog.RecId == catProcureCatalogTable.RecId
                join RecId from catalogRule
                    where catalogRule.Catalog == procureCatalog.RecId
                join RecId from policyRule
                    where policyRule.RecId == catalogRule.RecId
                        && policyRule.ValidFrom <= now
                        && policyRule.ValidTo > now
                join RecId from policy
                    where policy.RecId == policyRule.Policy
                join RecId from policyOrganization
                    where policyOrganization.Policy == policy.RecId
                join PrimaryForLegalEntity, AccountingCurrency from ledger group by ledger.AccountingCurrency
                    where ledger.PrimaryForLegalEntity == policyOrganization.Organization
            {
                currencyPriceComboBox.add(ledger.AccountingCurrency);
            }

            //If no policy is associated to catalog
            //or if policy exists but not associated to an LE
            //Get the default organization (LE), and associate it's currency
            if ( currencyPriceComboBox.count() == 0 )
            {
                select firstonly RecId, ChildOrganization from omHierarchyRelationship
                    where omHierarchyRelationship.ParentOrganization == 0
                        && omHierarchyRelationship.ValidFrom <= now
                        && omHierarchyRelationship.ValidTo > now
                    join RecId from omInternalOrganization
                        where omInternalOrganization.RecId == omHierarchyRelationship.ChildOrganization
                    join PrimaryForLegalEntity, AccountingCurrency from ledger
                        where ledger.PrimaryForLegalEntity == omInternalOrganization.RecId
                    join CurrencyCode from currency group by ledger.AccountingCurrency
                        where  currency.CurrencyCode == ledger.AccountingCurrency;
                //If default LE is found
                if ( ledger )
                {
                    currencyPriceComboBox.add(ledger.AccountingCurrency);
                }
                else
                {
                    while select CurrencyCode from currency group by CurrencyCode
                    {
                        currencyPriceComboBox.add(currency.CurrencyCode);
                    }
                }
            }
            if ( procurecatalogPriceRangeRange )
            {
                currencyPriceComboBox.selectText(procurecatalogPriceRangeRange.Currency);
            }
            else
            {
                currencyPriceComboBox.selectText(currencyPriceComboBox.getText(0));
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CurrencyPriceAddRange</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///   Opens up the CatPriceRange form by passing the current <c>CatProcureCatalogTable</c> and CurrencyCode.
        /// </summary>
        void clicked()
        {
            Args   args = new Args();

            args.caller(element);

            if ( !catProcureCatalogTable )
            {
                return;
            }

            args.record(catProcureCatalogTable);

            if (currencyPriceComboBox.valueStr() == "")
            {
                return;
            }
            args.parm(currencyPriceComboBox.valueStr());

            this.menufunction().run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CurrencyPriceRemoveRange</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///   Removes one or more selected <c>CatProcureCatalogPriceRange</c> records .
        /// </summary>
        void clicked()
        {
            CatProcureCatalogPriceRange catProcureCatalogPriceRange;
            int                         rowPosition;

            rowPosition = currencyPriceFilterRangeListView.getNextItem(FormListNext::Selected);

            //Either if no selected filter ranges records or Click "no" on confirmation box: stop the execution.
            if ((rowPosition < 0) || Box::yesNo(strfmt("@SYS134302","@SYS191507"),DialogButton::No) != DialogButton::Yes)
            {
                return;
            }

            //Select the records to be deleted
            ttsbegin;
            while (rowPosition != -1)
            {
                select forupdate catProcureCatalogPriceRange
                where catProcureCatalogPriceRange.ProcureCatalog == catProcureCatalogTable.RecId
                    && catProcureCatalogPriceRange.FilterRange == currencyPriceFilterRangeListView.currentPriceRange();

                if ( catProcureCatalogPriceRange )
                {
                    catProcureCatalogPriceRange.delete();
                    currencyPriceFilterRangeListView.delete(rowPosition);
                }
                rowPosition = currencyPriceFilterRangeListView.getNextItem(FormListNext::Selected);
            }
            ttscommit;

            currencyPriceFilterRangeListView.init();
            if ( currencyPriceFilterRangeListView.getCount() < 1 )
            {
                currencyPriceRemoveRange.enabled(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CurrencyPriceFilterRangeListView</Name>
				<Type>ListView</Type>
				<Methods>
					<Method>
						<Name>currentPriceRange</Name>
						<Source><![CDATA[
        /// <summary>
        ///   Searches for selected record.
        /// </summary>
        /// <returns>
        ///   Return selected price range of int64 datatype .
        /// </returns>
        public int64 currentPriceRange()
        {
            FormListItem m_item;
            int64 m_currentPriceRangeID;
            int   m_count;

            m_count = currencyPriceFilterRangeListView.getNextItem(FormListNext::Selected);
            if ( m_count > -1 )
            {
                m_item = currencyPriceFilterRangeListView.getItem(m_count);
                m_currentPriceRangeID = m_item.data();
            }
            return m_currentPriceRangeID;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        ///   Initializes the CurrencyPriceFilterRangeListView control (price filter range list view).
        /// </summary>
        public void init()
        {
            int idx;
            CatDisplayCategoryFilterRange m_catDisplayCategoryFilterRange;
            CatProcureCatalogPriceRange   m_catProcureCatalogPriceRange;

            FormListItem    m_listItem;
            FormListColumn  m_minRange;
            FormListColumn  m_maxRange;
            m_minRange        = new FormListColumn("@SYS81437");
            m_maxRange        = new FormListColumn("@SYS21886");

            currencyPriceFilterRangeListView.deleteAll();
            m_maxRange.width(125);
            m_minRange.width(125);
            if ( currencyPriceFilterRangeListView.getColumnCount() < 2)
            {
                currencyPriceFilterRangeListView.addColumn(1,m_minRange);
                currencyPriceFilterRangeListView.addColumn(2,m_maxRange);
            }
            while select RecId from m_catProcureCatalogPriceRange
                where m_catProcureCatalogPriceRange.ProcureCatalog == catProcureCatalogTable.RecId
                    && m_catProcureCatalogPriceRange.Currency == currencyPriceComboBox.valueStr()
                join LowerLimit, UpperLimit, RecId from m_catDisplayCategoryFilterRange
                    where m_catDisplayCategoryFilterRange.RecId == m_catProcureCatalogPriceRange.FilterRange
            {
                m_listItem = new FormListItem(m_catDisplayCategoryFilterRange.LowerLimit <= #CatDisplayCategory_FilterRangeLowerLimit ? "@SYS332355" : strfmt("%1" ,m_catDisplayCategoryFilterRange.LowerLimit) );
                m_listItem.data(int642str(m_catDisplayCategoryFilterRange.RecId));
                m_listItem.idx(any2int(m_catDisplayCategoryFilterRange.RecId));
                idx = currencyPriceFilterRangeListView.addItem(m_listItem);

                if ( m_catDisplayCategoryFilterRange.UpperLimit == #CatDisplayCategory_FilterRangeUpperLimit )
                {
                    currencyPriceFilterRangeListView.setText(idx, strfmt("%1","@SYS308915"),1);
                }
                else
                {
                    currencyPriceFilterRangeListView.setText(idx, strfmt("%1",m_catDisplayCategoryFilterRange.UpperLimit),1);
                }
                if (currencyPriceFilterRangeListView.getCount() == 1)
                {
                    m_listItem.stateFocus(true);
                    m_listItem.stateSelected(true);
                }
            }
            if ( currencyPriceFilterRangeListView.getCount() > 0 )
            {
                currencyPriceRemoveRange.enabled(true);
            }
            else
            {
                currencyPriceRemoveRange.enabled(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CategoryPriceRangeTPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();
            categoryCurrencyPriceComboBox.loadAttributes();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CategoryCurrencyPriceComboBox</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>loadAttributes</Name>
						<Source><![CDATA[
        public void loadAttributes()
        {
            this.selectUOM();
            this.modified();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = true;
            //ret = super(); // this occasionally causes AX to run in infinite loop

            if ( this.valueStr() == '' )
            {
                categoryCurrencyPriceRemoveRange.enabled(false);
                categoryCurrencyPriceAddRange.enabled(false);
            }
            else
            {
                categoryCurrencyPriceAddRange.enabled(true);
            }
            if ( categoryCurrencyPriceFilterRangeListView.getCount() < 1 )
            {
                categoryCurrencyPriceRemoveRange.enabled(false);
            }
            else
            {
                categoryCurrencyPriceRemoveRange.enabled(true);
            }
            categoryCurrencyPriceFilterRangeListView.init();
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectUOM</Name>
						<Source><![CDATA[
        public void selectUOM()
        {
            CatDisplayCategoryPriceRange    displayCategoryPriceRange;
            CatProcureCatalogTable          procureCatalog;
            CatCatalogPolicyRule            catalogRule;
            SysPolicyRule                   policyRule;
            SysPolicy                       policy;
            SysPolicyOrganization           policyOrganization;
            Ledger                          ledger;
            Currency                        currency;
            OMHierarchyRelationship         omHierarchyRelationship;
            OMInternalOrganization          omInternalOrganization;
            utcdatetime                     now = DateTimeUtil::utcNow();

            categoryCurrencyPriceComboBox.clear();

            select firstonly RecId, Currency from displayCategoryPriceRange
                where displayCategoryPriceRange.SharedData == catDisplayCategoryTable.SharedData;

            //Get the policy for the catalog
            //Get organization (LE) for this policy
            //Get Default currency for this organization
            while select  RecId from procureCatalog
                where procureCatalog.RecId == catProcureCatalogTable.RecId
                join RecId from catalogRule
                    where catalogRule.Catalog == procureCatalog.RecId
                join RecId from policyRule
                    where policyRule.RecId == catalogRule.RecId
                        && policyRule.ValidFrom <= now
                        && policyRule.ValidTo > now
                join RecId from policy
                    where policy.RecId == policyRule.Policy
                join RecId from policyOrganization
                    where policyOrganization.Policy == policy.RecId
                join PrimaryForLegalEntity, AccountingCurrency from ledger group by ledger.AccountingCurrency
                    where ledger.PrimaryForLegalEntity == policyOrganization.Organization
            {
                categoryCurrencyPriceComboBox.add(ledger.AccountingCurrency);
            }
            //If no policy is associated to catalog
            //or if policy exists but not associated to an LE
            //Get the default organization (LE), and associate it's currency
            if ( categoryCurrencyPriceComboBox.count() == 0 )
            {
                select firstonly RecId, ChildOrganization from omHierarchyRelationship
                        where omHierarchyRelationship.ParentOrganization == 0
                            && omHierarchyRelationship.ValidFrom <= now
                            && omHierarchyRelationship.ValidTo > now
                        join RecId from omInternalOrganization
                            where omInternalOrganization.RecId == omHierarchyRelationship.ChildOrganization
                        join PrimaryForLegalEntity, AccountingCurrency from ledger
                            where ledger.PrimaryForLegalEntity == omInternalOrganization.RecId
                        join CurrencyCode from currency group by ledger.AccountingCurrency
                            where  currency.CurrencyCode == ledger.AccountingCurrency;
                //If default LE is found
                if ( ledger )
                {
                    categoryCurrencyPriceComboBox.add(ledger.AccountingCurrency);
                }
                else
                {
                    while select CurrencyCode from currency group by CurrencyCode
                    {
                        categoryCurrencyPriceComboBox.add(currency.CurrencyCode);
                    }
                }
            }
            if ( displayCategoryPriceRange )
            {
                categoryCurrencyPriceComboBox.selectText(displayCategoryPriceRange.Currency);
            }
            else
            {
                categoryCurrencyPriceComboBox.selectText(categoryCurrencyPriceComboBox.getText(0));
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CategoryCurrencyPriceAddRange</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///   Opens up the CatPriceRange form by passing the current selected <c>CatDisplayCategoryTable</c> and CurrencyCode.
        /// </summary>
        void clicked()
        {
            Args    args = new Args();

            args.caller(element);

            if ( !catDisplayCategoryTable )
            {
                return;
            }

            args.record(catDisplayCategoryTable);

            if (categoryCurrencyPriceComboBox.valueStr() == "")
            {
                return;
            }
            args.parm(categoryCurrencyPriceComboBox.valueStr());

            this.menufunction().run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CategoryCurrencyPriceRemoveRange</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///   Removes one or more selected <c>CatDisplayCategoryPriceRange</c> records.
        /// </summary>
        void clicked()
        {
            CatDisplayCategoryPriceRange    catDisplayCategoryPriceRange;
            CatDisplayCategoryTable         m_catDisplayCategoryTable;
            int                             rowPosition;

            rowPosition = categoryCurrencyPriceFilterRangeListView.getNextItem(FormListNext::Selected);

            //Either if no selected filter ranges records or Click "no" on confirmation box: stop the execution.
            if ((rowPosition < 0) || Box::yesNo(strfmt("@SYS134302","@SYS191507"),DialogButton::No) != DialogButton::Yes)
            {
                return;
            }

            //Get RecID for Display Category Table
            select SharedData from m_catDisplayCategoryTable
                where m_catDisplayCategoryTable.RecId == catDisplayCategoryTable.RecId;

            ttsbegin;
            while (rowPosition != -1)
            {
                //Get record to be deleted
                select forupdate catDisplayCategoryPriceRange
                        where catDisplayCategoryPriceRange.SharedData == m_catDisplayCategoryTable.SharedData
                            && catDisplayCategoryPriceRange.FilterRange == categoryCurrencyPriceFilterRangeListView.currentPriceRange();
                if ( catDisplayCategoryPriceRange )
                {
                    catDisplayCategoryPriceRange.delete();
                    categoryCurrencyPriceFilterRangeListView.delete(rowPosition);
                }
                rowPosition = categoryCurrencyPriceFilterRangeListView.getNextItem(FormListNext::Selected);
            }
            ttscommit;
            categoryCurrencyPriceFilterRangeListView.init();

            if ( categoryCurrencyPriceFilterRangeListView.getCount() < 1 )
            {
                categoryCurrencyPriceRemoveRange.enabled(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CategoryCurrencyPriceFilterRangeListView</Name>
				<Type>ListView</Type>
				<Methods>
					<Method>
						<Name>currentPriceRange</Name>
						<Source><![CDATA[
        /// <summary>
        ///   Searches for selected record.
        /// </summary>
        /// <returns>
        ///   Return selected price range of int64 datatype .
        /// </returns>
        public int64 currentPriceRange()
        {
            FormListItem m_item;
            int64 m_currentPriceRangeID;
            int   m_count;

            m_count = categoryCurrencyPriceFilterRangeListView.getNextItem(FormListNext::Selected);
            if ( m_count > -1 )
            {
                m_item = categoryCurrencyPriceFilterRangeListView.getItem(m_count);
                m_currentPriceRangeID = m_item.data();
            }
            return m_currentPriceRangeID;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        ///   Initializes the CategoryCurrencyPriceFilterRangeListView control (price filter range list view).
        /// </summary>
        public void init()
        {
            CatDisplayCategoryFilterRange m_catDisplayCategoryFilterRange;
            CatDisplayCategoryPriceRange  m_catDisplayCategoryPriceRange;
            CatDisplayCategoryTable       m_catDisplayCategoryTable;

            FormListItem    m_listItem;
            FormListColumn  m_minRange;
            FormListColumn  m_maxRange;
            int             m_idx;
            m_minRange      = new FormListColumn("@SYS81437");
            m_maxRange      = new FormListColumn("@SYS21886");

            categoryCurrencyPriceFilterRangeListView.deleteAll();
            m_maxRange.width(125);
            m_minRange.width(125);
            if ( categoryCurrencyPriceFilterRangeListView.getColumnCount() < 2)
            {
                categoryCurrencyPriceFilterRangeListView.addColumn(1,m_minRange);
                categoryCurrencyPriceFilterRangeListView.addColumn(2,m_maxRange);
            }

            while select RecId from m_catDisplayCategoryTable
                where m_catDisplayCategoryTable.RecId == catDisplayCategoryTable.RecId
                join RecId, Currency from m_catDisplayCategoryPriceRange
                    where m_catDisplayCategoryPriceRange.SharedData == m_catDisplayCategoryTable.SharedData
                    && m_catDisplayCategoryPriceRange.Currency == categoryCurrencyPriceComboBox.valueStr()
                join RecId, LowerLimit, UpperLimit from m_catDisplayCategoryFilterRange
                    where m_catDisplayCategoryFilterRange.RecId == m_catDisplayCategoryPriceRange.FilterRange

            {
                m_listItem = new FormListItem(m_catDisplayCategoryFilterRange.LowerLimit <= #CatDisplayCategory_FilterRangeLowerLimit ? "@SYS332355" : strfmt("%1", m_catDisplayCategoryFilterRange.LowerLimit) );
                m_listItem.data(int642str(m_catDisplayCategoryFilterRange.RecId));
                m_listItem.idx(any2int(m_catDisplayCategoryFilterRange.RecId));
                m_idx = categoryCurrencyPriceFilterRangeListView.addItem(m_listItem);
                if ( m_catDisplayCategoryFilterRange.UpperLimit == #CatDisplayCategory_FilterRangeUpperLimit )
                {
                    categoryCurrencyPriceFilterRangeListView.setText(m_idx, strfmt("%1","@SYS308915"),1);
                }
                else
                {
                    categoryCurrencyPriceFilterRangeListView.setText(m_idx, strfmt("%1",m_catDisplayCategoryFilterRange.UpperLimit),1);
                }

                if (categoryCurrencyPriceFilterRangeListView.getCount() == 1)
                {
                    m_listItem.stateSelected(true);
                    m_listItem.stateFocus(true);
                }
            }
            if ( categoryCurrencyPriceFilterRangeListView.getCount() > 0 )
            {
                categoryCurrencyPriceRemoveRange.enabled(true);
            }
            else
            {
                categoryCurrencyPriceRemoveRange.enabled(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CategoryPresentations</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EditWelcomeText</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TranslateWelcomeText</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            SysTranslationHelper sysTranslationHelper;

            sysTranslationHelper = new SysTranslationHelper(
                                             tablenum(CatProcureCatalogTable),
                                             tablenum(CatProcureCatalogTranslation)
                                          );

            sysTranslationHelper.launchTranslationDetailForm(catProcureCatalogTable.RecId);

            super();

            // after child/Translation form updates data,
            // - refresh buffer (CatProcureCatalogTranslation.WelcomeText) which still has old data
            // - refresh the UI
            catProcureCatalogTranslation.reread();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RemoveProductRelationTypeBtn</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            CatCatalogProductRelationType tmpCatCatalogProductRelationType;
            int nSelected = 0;

            FormDataSource ds = catCatalogProductRelationType_ds;

            super();

            // Point to the first selected record
            tmpCatCatalogProductRelationType = ds.getFirst(true) ? ds.getFirst(true) : ds.cursor();

            ttsbegin;

            // For each selected record
            while (tmpCatCatalogProductRelationType)
            {
                nSelected++;

                // Delete record
                tmpCatCatalogProductRelationType.delete();

                tmpCatCatalogProductRelationType = ds.getNext();
            }

            ttscommit;

            if (nSelected > 0)
            {
                // Refresh grid
                catCatalogProductRelationType_ds.executeQuery();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MoveUpBtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            CatCatalogProductRelationType tmpCatCatalogProductRelationType;
            CatCatalogProductRelationType lastMovedCatCatalogProductRelationType;
            int nMoved = 0;

            FormDataSource ds = catCatalogProductRelationType_ds;

            super();

            // Point to the first selected record
            tmpCatCatalogProductRelationType = ds.getFirst(true) ? ds.getFirst(true) : ds.cursor();

            // For each selected record
            while (tmpCatCatalogProductRelationType)
            {
                if (tmpCatCatalogProductRelationType.moveUpDisplayOrder())
                {
                    nMoved++;
                    lastMovedCatCatalogProductRelationType = CatCatalogProductRelationType::findByDisplayOrder(tmpCatCatalogProductRelationType.Catalog, tmpCatCatalogProductRelationType.DisplayOrder, false);
                }

                tmpCatCatalogProductRelationType = ds.getNext();
            }

            if (nMoved > 0)
            {
                // Refresh grid
                catCatalogProductRelationType_ds.executeQuery();
                catCatalogProductRelationType_ds.positionToRecord(lastMovedCatCatalogProductRelationType);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MoveDownBtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            CatCatalogProductRelationType tmpCatCatalogProductRelationType;
            CatCatalogProductRelationType lastMovedCatCatalogProductRelationType;
            int nMoved = 0;

            FormDataSource ds = catCatalogProductRelationType_ds;

            super();

            // Point to the first selected record
            tmpCatCatalogProductRelationType = ds.getFirst(true) ? ds.getFirst(true) : ds.cursor();

            // For each selected record
            while (tmpCatCatalogProductRelationType)
            {
                if (tmpCatCatalogProductRelationType.moveDownDisplayOrder())
                {
                    nMoved++;
                    lastMovedCatCatalogProductRelationType = CatCatalogProductRelationType::findByDisplayOrder(tmpCatCatalogProductRelationType.Catalog, tmpCatCatalogProductRelationType.DisplayOrder, false);
                }

                tmpCatCatalogProductRelationType = ds.getNext();
            }

            if (nMoved > 0)
            {
                // Refresh grid
                catCatalogProductRelationType_ds.executeQuery();
                catCatalogProductRelationType_ds.positionToRecord(lastMovedCatCatalogProductRelationType);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>CatProcureCatalogTable</Name>
			<Table>CatProcureCatalogTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MultipleGridPageSize</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Owner</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProcurementHierarchy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PublishDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PublishingStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SingleGridPageSize</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UpdateType</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>CatDisplayCategoryTable</Name>
			<Table>CatDisplayCategoryTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AncestorCategoryToCollapseTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Catalog</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsDescriptiveDataSynchronized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsHidden</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NestedSetLeft</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NestedSetRight</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SharedData</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TargetCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TreeLevel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UpdateType</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>CatProcureCatalogTable</JoinSource>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>CatDisplayProductAll</Name>
			<Table>CatDisplayProductAll</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Origin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProcurementCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProductCategoryDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProductCategoryRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProductRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SharedDataLastSyncTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SharedDataRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>unionAllBranchId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>CatDisplayCategoryTable</JoinSource>
			<LinkType>Active</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>EcoResProduct</Name>
			<Table>EcoResProduct</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DisplayProductNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWProduct</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProductType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>relationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SearchName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>CatDisplayProductAll</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources>
				<AxFormDataSourceDerived>
					<Name>EcoResProduct_EcoResDistinctProduct</Name>
					<Table>EcoResDistinctProduct</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources>
						<AxFormDataSourceDerived>
							<Name>EcoResProduct_EcoResDistinctProductVariant</Name>
							<Table>EcoResDistinctProductVariant</Table>
							<Fields>
								<AxFormDataSourceField>
									<DataField>ProductMaster</DataField>
								</AxFormDataSourceField>
								<AxFormDataSourceField>
									<DataField>RecId</DataField>
								</AxFormDataSourceField>
								<AxFormDataSourceField>
									<DataField>RetaiTotalWeight</DataField>
								</AxFormDataSourceField>
								<AxFormDataSourceField>
									<DataField>TableId</DataField>
								</AxFormDataSourceField>
							</Fields>
							<ReferencedDataSources />
							<DerivedDataSources />
						</AxFormDataSourceDerived>
					</DerivedDataSources>
				</AxFormDataSourceDerived>
				<AxFormDataSourceDerived>
					<Name>EcoResProduct_EcoResProductMaster</Name>
					<Table>EcoResProductMaster</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RetailColorGroupId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RetailSizeGroupId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RetailStyleGroupId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>VariantConfigurationTechnology</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
			</DerivedDataSources>
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>CatDisplayVendorAll</Name>
			<Table>CatDisplayVendorAll</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Origin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProcurementCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SharedDataLastSynchronizationTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SharedDataRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>unionAllBranchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendorAccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendorCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendorCategoryModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendorDataAreaId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<CrossCompanyAutoQuery>Yes</CrossCompanyAutoQuery>
			<JoinSource>CatDisplayCategoryTable</JoinSource>
			<LinkType>Active</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>VendTable</Name>
			<Table>VendTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCentralBankPurposeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCentralBankPurposeText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCentralBankTransTypeCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankOrderOfPayment_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BidOnly</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BirthCountyCode_IT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BirthDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BirthPlace</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Blocked</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BlockedReleaseDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashAccountingRegime_ES</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCMNum_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChangeRequestAllowOverride</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChangeRequestEnabled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChangeRequestOverride</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CISCompanyRegNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CISNationalInsuranceNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CISStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CISUniqueTaxPayerRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CISVerificationDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CISVerificationNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ClearingPeriod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CNAE_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CNPJCPFNum_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommercialRegister</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommercialRegisterInsetNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommercialRegisterSection</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompanyChainId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompanyIdSiret</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompanyNAFCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompanyType_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ConsDay_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContactPersonId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditMax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditRating</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Curp_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Currency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DBA</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultInventStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DestinationCodeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DiotCountryCode_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DisabledOwned</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DlvMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DlvTerm</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EnterpriseCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EnterpriseNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EthnicOriginId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FactoringAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FemaleOwned</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FineCode_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FiscalCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ForeignEntityIndicator</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ForeignResident_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ForeignTaxRegistration_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FreightZone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Heir_IT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HUBZone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ICMSContributor_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IENum_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InclTax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>INSSCEI_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntBank_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterestCode_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventProfileId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventProfileType_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSiteId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsPaymFeeCovered_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsResident_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemBuyerGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineOfBusinessId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LocallyOwned</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LvPaymTransCodes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MainContactWorker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MandatoryVatDate_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkupGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchingPolicy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Memo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MinorityOwned</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MultiLineDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NameControl</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Nationality_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NIT_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NonTaxable_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>numberSequenceGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetAccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OneTimeVendor</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OperationType_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrganizationNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrgId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Party</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymDayId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymSched</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymSpec</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymTermId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriceGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchAmountPurchaseOrder</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchCalendarId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchPoolId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegNum_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResidenceForeignCountryRegionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Rfc_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SecondTIN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SegmentId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SeparateDivisionId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ServiceCodeOnDlvAddress_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SmallBusiness</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StateInscription_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StructDepartment_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubsegmentId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SuppItemGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TAMRebateGroupID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tax1099Fields</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tax1099NameChoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tax1099RegNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tax1099Reports</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxIDType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxPeriodPaymentCode_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdCalculate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdVendorType_TH</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UnitedVATInvoice_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseCashDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATOperationCode_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATPartnerKind_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATTaxAgent_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendConsumption_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendExceptionGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendIncomeCode_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendInvoiceDeclaration_IS</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendItemGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendorType_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendPriceToleranceGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VeteranOwned</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>W9</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>W9Included</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>YourAccountNum</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<CrossCompanyAutoQuery>Yes</CrossCompanyAutoQuery>
			<JoinSource>VendCategory</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>DirPartyTable</Name>
			<Table>DirPartyTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>KnownAs</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LanguageId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NameAlias</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PartyNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryAddressLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryContactEmail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryContactFax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryContactPhone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryContactTelex</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryContactURL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>relationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>VendTable</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<OnlyFetchActive>Yes</OnlyFetchActive>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources>
				<AxFormDataSourceDerived>
					<Name>DirPartyTable_DirPerson</Name>
					<Table>DirPerson</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>AnniversaryDay</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>AnniversaryMonth</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>AnniversaryYear</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>BirthDay</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>BirthMonth</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>BirthYear</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ChildrenNames</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>CommunicatorSignIn</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Gender</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Hobbies</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Initials</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>MaritalStatus</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>NameSequence</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>PersonalSuffix</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>PersonalTitle</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>PhoneticFirstName</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>PhoneticLastName</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>PhoneticMiddleName</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ProfessionalSuffix</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ProfessionalTitle</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
				<AxFormDataSourceDerived>
					<Name>DirPartyTable_DirOrganizationBase</Name>
					<Table>DirOrganizationBase</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>DunsNumberRecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>PhoneticName</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources>
						<AxFormDataSourceDerived>
							<Name>DirPartyTable_DirOrganization</Name>
							<Table>DirOrganization</Table>
							<Fields>
								<AxFormDataSourceField>
									<DataField>ABC</DataField>
								</AxFormDataSourceField>
								<AxFormDataSourceField>
									<DataField>NumberOfEmployees</DataField>
								</AxFormDataSourceField>
								<AxFormDataSourceField>
									<DataField>OrgNumber</DataField>
								</AxFormDataSourceField>
								<AxFormDataSourceField>
									<DataField>RecId</DataField>
								</AxFormDataSourceField>
								<AxFormDataSourceField>
									<DataField>TableId</DataField>
								</AxFormDataSourceField>
							</Fields>
							<ReferencedDataSources />
							<DerivedDataSources />
						</AxFormDataSourceDerived>
						<AxFormDataSourceDerived>
							<Name>DirPartyTable_OMInternalOrganization</Name>
							<Table>OMInternalOrganization</Table>
							<Fields>
								<AxFormDataSourceField>
									<DataField>OrganizationType</DataField>
								</AxFormDataSourceField>
								<AxFormDataSourceField>
									<DataField>RecId</DataField>
								</AxFormDataSourceField>
								<AxFormDataSourceField>
									<DataField>TableId</DataField>
								</AxFormDataSourceField>
							</Fields>
							<ReferencedDataSources />
							<DerivedDataSources>
								<AxFormDataSourceDerived>
									<Name>DirPartyTable_CompanyInfo</Name>
									<Table>CompanyInfo</Table>
									<Fields>
										<AxFormDataSourceField>
											<DataField>Accountant_LT</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>AccountingPersonnel_JP</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>AccountOfficeRefNum</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>ActivityCode</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>AddrFormat</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>Bank</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>BankAcctUsedFor1099</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>BankCentralBankPurposeCode</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>BankCentralBankPurposeText</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>BranchId</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>BranchNumber</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>BusinessActivity_SA</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>BusinessActivityDesc_SA</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>BusinessCommencedDate_JP</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>BusinessInitialCapital_JP</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>BusinessItem_JP</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>BusinessNumber_CA</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>CertifiedTaxAccountant_JP</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>CNAE_BR</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>CombinedFedStateFiler</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>CommercialRegister</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>CommercialRegisterInsetNumber</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>CommercialRegisterSection</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>CompanyNAFCode</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>CompanyRegComFR</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>CompanyRepresentative_JP</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>CompanyType_MX</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>ConversionDate</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>CoRegNum</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>CUC_IT</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>Curp_MX</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>CustomsCustomerNumber_FI</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>CustomsLicenseNumber_FI</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>DataArea</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>DBA</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>DVRid</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>EnterpriseCode</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>EnterpriseNumber</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>FICreditorID_DK</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>FileNumber_SA</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>FiscalCode_IT</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>ForeignEntityIndicator</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>FSS_RU</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>FSSAccount_RU</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>Giro</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>GiroContract</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>GiroContractAccount</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>Head_LT</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>ImportVATNum</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>ImportVATNumBranchId</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>IntrastatCode</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>IsConsolidationCompany</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>IsEliminationCompany</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>IssuingSignature</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>Key</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>LastFilingIndicator</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>LegalFormFR</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>LegalNature_IT</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>LegalRepresentative_JP</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>LegalRepresentativeCurp_MX</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>LegalRepresentativeName_MX</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>LegalRepresentativeRfc_MX</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>NameControl</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>OrganizationLegalForm_RU</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>OrgId</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>PackMaterialFeeLicenseNum</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>PaymInstruction1</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>PaymInstruction2</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>PaymInstruction3</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>PaymInstruction4</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>PaymRoutingDNB</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>PaymTraderNumber</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>PersonInCharge_JP</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>PFRegNum_RU</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>PlanningCompany</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>PrintCorrInvoiceLabel_DE</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>PrintCorrInvoiceLabelEffDate_DE</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>PrintEnterpriseregister_NO</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>PrintINNKPPInAddress_RU</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>RAlienCorpCountry</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>RAlienCorpName</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>RecId</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>RegNum</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>Resident_W</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>Rfc_MX</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>RFullName</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>ShippingCalendarId</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>SiaCode</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>SoftwareIdentificationCode_CA</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>StateInscription_MX</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>SubordinateCode</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>TableId</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>Tax1099RegNum</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>TaxAuthority_RU</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>TaxRepresentative</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>TCC</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>TemplateFolder_W</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>UPSNum</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>validate1099OnEntry</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>VATNum</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>VATNumBranchId</DataField>
										</AxFormDataSourceField>
									</Fields>
									<ReferencedDataSources />
									<DerivedDataSources />
								</AxFormDataSourceDerived>
								<AxFormDataSourceDerived>
									<Name>DirPartyTable_OMTeam</Name>
									<Table>OMTeam</Table>
									<Fields>
										<AxFormDataSourceField>
											<DataField>Description</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>IsActive</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>RecId</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>TableId</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>TeamAdministrator</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>TeamMembershipCriterion</DataField>
										</AxFormDataSourceField>
									</Fields>
									<ReferencedDataSources />
									<DerivedDataSources />
								</AxFormDataSourceDerived>
								<AxFormDataSourceDerived>
									<Name>DirPartyTable_OMOperatingUnit</Name>
									<Table>OMOperatingUnit</Table>
									<Fields>
										<AxFormDataSourceField>
											<DataField>HcmWorker</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>OMOperatingUnitNumber</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>OMOperatingUnitType</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>RecId</DataField>
										</AxFormDataSourceField>
										<AxFormDataSourceField>
											<DataField>TableId</DataField>
										</AxFormDataSourceField>
									</Fields>
									<ReferencedDataSources />
									<DerivedDataSources />
								</AxFormDataSourceDerived>
							</DerivedDataSources>
						</AxFormDataSourceDerived>
					</DerivedDataSources>
				</AxFormDataSourceDerived>
			</DerivedDataSources>
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>VendCategory</Name>
			<Table>VendCategory</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Category</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendorAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendorDataArea</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>CatDisplayVendorAll</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>SharedInfoItem</Name>
			<Table>CatDisplayCategorySharedInfo</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Category</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultView</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsCustomOrderShown</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastSyncTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Origin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SearchText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WelcomeText</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources>
				<AxFormReferencedDataSource>
					<Name>EcoResCategory</Name>
					<Table>EcoResCategory</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>CategoryHierarchy</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ChangeStatus</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Code</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>createdBy</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>createdDateTime</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>dataAreaId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DefaultProjectGlobalCategory</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DefaultThreshold_PSN</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>InstanceRelationType</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>IsActive</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>IsCategoryAttributesInherited</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>IsTangible</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Level</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>modifiedBy</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>modifiedDateTime</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Name</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>NestedSetLeft</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>NestedSetRight</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ParentCategory</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>PKWiUCode</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>relationType</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<JoinSource>SharedInfoItem</JoinSource>
					<LinkType>OuterJoin</LinkType>
					<JoinRelation>Category</JoinRelation>
				</AxFormReferencedDataSource>
			</ReferencedDataSources>
			<DelayActive>No</DelayActive>
			<JoinSource>CatDisplayCategoryTable</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowDelete>No</AllowDelete>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>CatCatalogProductRelationType</Name>
			<Table>CatCatalogProductRelationType</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Catalog</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DisplayOrder</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProductRelationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>CatProcureCatalogTable</JoinSource>
			<LinkType>Active</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>EcoResProductRelationType</Name>
			<Table>EcoResProductRelationType</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>CatCatalogProductRelationType</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>CatDisplayCategoryTranslation</Name>
			<Table>CatDisplayCategoryTranslation</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DisplayCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FriendlyName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LanguageId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>CatDisplayCategoryTable</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>CatDisplaySharedDataTranslation</Name>
			<Table>CatDisplaySharedDataTranslation</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LanguageId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SearchText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SharedData</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WelcomeText</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>SharedInfoItem</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>EcoResProductTranslationFallbackView</Name>
			<Table>EcoResProductTranslationFallbackView</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LanguageId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Product</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SystemDescription</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SystemLanguageId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SystemName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>EcoResProduct</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<OnlyFetchActive>Yes</OnlyFetchActive>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>EcoResProductTranslation</Name>
			<Table>EcoResProductTranslation</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LanguageId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Product</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>EcoResProduct</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>CatProcureCatalogTranslation</Name>
			<Table>CatProcureCatalogTranslation</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Catalog</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LanguageId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WelcomeText</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>CatProcureCatalogTable</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>EcoResCategoryForVendor</Name>
			<Table>EcoResCategory</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CategoryHierarchy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChangeStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Code</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultProjectGlobalCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultThreshold_PSN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsActive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsCategoryAttributesInherited</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsTangible</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Level</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NestedSetLeft</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NestedSetRight</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PKWiUCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>relationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>CatDisplayVendorAll</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<OnlyFetchActive>Yes</OnlyFetchActive>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<MaxAccessRight>View</MaxAccessRight>
			<OptionalRecordMode>None</OptionalRecordMode>
			<DataSourceLinks />
			<DerivedDataSources>
				<AxFormDataSourceDerived>
					<Name>EcoResCategoryForVendor_PCClass</Name>
					<Table>PCClass</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ReuseEnabled</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
			</DerivedDataSources>
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS336223</Caption>
		<DataSource xmlns="">CatProcureCatalogTable</DataSource>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">SimpleListDetails-Tree</Pattern>
		<PatternVersion xmlns="">1.3</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<StatusBarStyle xmlns="">Simple</StatusBarStyle>
		<Style xmlns="">SimpleListDetails</Style>
		<TitleDataSource xmlns="">CatProcureCatalogTable</TitleDataSource>
		<WorkflowDataSource xmlns="">CatProcureCatalogTable</WorkflowDataSource>
		<WorkflowEnabled xmlns="">Yes</WorkflowEnabled>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>TheActionPane</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>CatProcureCatalogPubBtnGrp</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1227133512</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>CatProcureCatalogSyncCmdBtn</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>715827882</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SYS339031</HelpText>
								<NeededPermission>Delete</NeededPermission>
								<Type>CommandButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<AutoRefreshData>Yes</AutoRefreshData>
								<Text>@SYS132126</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>CatProcureCatalogPubCmdBtn</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SYS138597</HelpText>
								<NeededPermission>Delete</NeededPermission>
								<Type>CommandButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<AutoRefreshData>Yes</AutoRefreshData>
								<Text>@SYS339032</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>CatProcureCatalogUnpCmdBtn</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SYS138598</HelpText>
								<NeededPermission>Delete</NeededPermission>
								<Type>CommandButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<AutoRefreshData>Yes</AutoRefreshData>
								<Text>@SYS132116</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>CatProcureCatalogPrvCmdBtn</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ConfigurationKey>ProcEmployeeProcurementSite</ConfigurationKey>
								<ElementPosition>1789569705</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SYS305407</HelpText>
								<NeededPermission>Delete</NeededPermission>
								<Type>CommandButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Text>@SYS190983</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalRight</ArrangeMethod>
						<Caption>@SYS53421</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneTabControl">
						<Name>CategoryNavigationActPaneTab</Name>
						<Type>ActionPaneTab</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>CatDisplayCategoryModBtnGrp</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>920350134</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Left>0</Left>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>CatDisplayCategoryNewChdBtn</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>ProcEmployeeProcurementSite</ConfigurationKey>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@SYS134859</HelpText>
										<NeededPermission>Delete</NeededPermission>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Big>Yes</Big>
										<Primary>Yes</Primary>
										<Text>@SYS134837</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>CatDisplayCategoryDeleteBtn</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>ProcEmployeeProcurementSite</ConfigurationKey>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@SYS134857</HelpText>
										<NeededPermission>Delete</NeededPermission>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Big>Yes</Big>
										<Text>@SYS14425</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>CatDisplayCategoryEnableBtn</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@SYS134855</HelpText>
										<NeededPermission>Delete</NeededPermission>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Text>@SCM:ShowAllProducts</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>CatDisplayCategoryDisableBtn</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@SYS134854</HelpText>
										<NeededPermission>Delete</NeededPermission>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Text>@SCM:HideAllProducts</Text>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Caption>@SYS132117</Caption>
							</AxFormControl>
						</Controls>
						<Caption>@SYS132117</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneTabControl">
						<Name>CatProcureCatalogActPaneTab</Name>
						<ConfigurationKey>ProcEmployeeProcurementSite</ConfigurationKey>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ActionPaneTab</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>DefineLanguageButtonGroup</Name>
								<ElementPosition>1533916890</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Left>0</Left>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>CatDisplayCategoryTranslationBtn</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@SYS312027</HelpText>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Big>Yes</Big>
										<NeedsRecord>Yes</NeedsRecord>
										<Text>@SYS2713</Text>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Caption>@SYS15819</Caption>
								<DataSource>CatDisplayCategoryTable</DataSource>
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
						<AlignChildren>No</AlignChildren>
						<ArrangeMethod>Vertical</ArrangeMethod>
						<Caption>@SYS89156</Caption>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>NavTreeGrp</Name>
				<ElementPosition>939524094</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>300</Width>
				<WidthMode>Manual</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTreeControl">
						<Name>NavTreeControl</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Tree</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
					</AxFormControl>
				</Controls>
				<FrameType>None</FrameType>
				<Style>SidePanel</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>VSplitter</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1409286141</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<AlignChild>No</AlignChild>
				<ColumnsMode>Fill</ColumnsMode>
				<HideIfEmpty>No</HideIfEmpty>
				<LeftMargin>0</LeftMargin>
				<LeftMarginMode>Fixed</LeftMarginMode>
				<FrameType>None</FrameType>
				<Style>SplitterVerticalContainer</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>HeaderGroup</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<Visible>No</Visible>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>TheTab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1879048190</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>CatProcureCatalogPropTPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CatProcureCatalogGridPageSizeGrp</Name>
								<ConfigurationKey>ProcEmployeeProcurementSite</ConfigurationKey>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>CatProcureCatalogPageSizeGrp_MultipleGridPageSize</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@SYS191026</HelpText>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>MultipleGridPageSize</DataField>
										<DataSource>CatProcureCatalogTable</DataSource>
										<Label>@SYS91254</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>CatProcureCatalogPageSizeGrp_SingleGridPageSize</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@SYS191024</HelpText>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SingleGridPageSize</DataField>
										<DataSource>CatProcureCatalogTable</DataSource>
										<Label>@SYS91255</Label>
									</AxFormControl>
								</Controls>
								<Caption>@SYS191228</Caption>
								<DataGroup>PageSize</DataGroup>
								<DataSource>CatProcureCatalogTable</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CatProcureCatalogGeneralNameGrp_Name</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>Name</DataField>
								<DataSource>CatProcureCatalogTable</DataSource>
								<FastTabSummary>Yes</FastTabSummary>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CatProcureCatalogGeneralNameGrp_Description</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>Description</DataField>
								<DataSource>CatProcureCatalogTable</DataSource>
								<DisplayHeight>5</DisplayHeight>
								<DisplayHeightMode>Fixed</DisplayHeightMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>CatProcureCatalogTable_PublishingStatus</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ComboType>List</ComboType>
								<DataField>PublishingStatus</DataField>
								<DataSource>CatProcureCatalogTable</DataSource>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>CatProcureCatalogGeneralXerGrp_UpdateType</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_ProcurementAndSourcing:CatProcureCatalogEdit_CatProcureCatalogGeneralXerGrp_UpdateType</HelpText>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ComboType>List</ComboType>
								<DataField>UpdateType</DataField>
								<DataSource>CatProcureCatalogTable</DataSource>
								<FastTabSummary>Yes</FastTabSummary>
								<Label>@SYS335171</Label>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>CatProcureCatalogGeneralXerGrp_Owner</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ReferenceGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CatProcureCatalogGeneralXerGrp_Owner_Name</Name>
										<DataRelationPath>DirPerson_Owner</DataRelationPath>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
								</Controls>
								<DataSource>CatProcureCatalogTable</DataSource>
								<ReferenceField>Owner</ReferenceField>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<BackgroundColor>WindowBackground</BackgroundColor>
						<Caption>@SYS132112</Caption>
						<DataSource>CatProcureCatalogTable</DataSource>
						<FastTabExpanded>Yes</FastTabExpanded>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>CatDisplayCategoryPropTPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CatDisplayCategoryGeneralGrp</Name>
								<ConfigurationKey>ProcEmployeeProcurementSite</ConfigurationKey>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>CatDisplayCategoryTable_IsDescriptiveDataSynchronized</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>477218588</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_ProcurementAndSourcing:CatProcureCatalogEdit_CatDisplayCategoryTable_IsDescriptiveDataSynchronized</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>IsDescriptiveDataSynchronized</DataField>
										<DataSource>CatDisplayCategoryTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>EcoResCategory_Name</Name>
										<ElementPosition>894784852</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Name</DataField>
										<DataSource>EcoResCategory</DataSource>
										<Label>@SYS345148</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>CatDisplayCategoryTable_IsHidden</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@SYS134860</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>IsHidden</DataField>
										<DataSource>CatDisplayCategoryTable</DataSource>
										<Label>@SYS54478</Label>
									</AxFormControl>
								</Controls>
								<Caption>@SYS19924</Caption>
								<DataSource>CatDisplayCategoryTable</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CatDisplayCategoryOptionsGrp</Name>
								<ConfigurationKey>ProcEmployeeProcurementSite</ConfigurationKey>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>CatDisplayCategoryTable_IsAlias</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@SYS310276</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS310275</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>CatDisplayCategoryTable_TargetCategory</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>CatDisplayCategoryTable_TargetCategory_Name</Name>
												<DataRelationPath>TargetCategory</DataRelationPath>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
											</AxFormControl>
										</Controls>
										<DataSource>CatDisplayCategoryTable</DataSource>
										<ReferenceField>TargetCategory</ReferenceField>
									</AxFormControl>
								</Controls>
								<Caption>@SYS132118</Caption>
								<DataSource>CatDisplayCategoryTable</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CatDisplayCategoryDisplaySettingGroup</Name>
								<ConfigurationKey>ProcEmployeeProcurementSite</ConfigurationKey>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>HideSubCategoriesCheckBox</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@SYS312289</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS312288</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>SharedInfoItem_IsCustomOrderShown</Name>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_ProcurementAndSourcing:CatProcureCatalogEdit_SharedInfoItem_IsCustomOrderShown</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>IsCustomOrderShown</DataField>
										<DataSource>SharedInfoItem</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SharedInfoItem_DefaultView</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>DefaultView</DataField>
										<DataSource>SharedInfoItem</DataSource>
										<Items />
									</AxFormControl>
								</Controls>
								<Caption>@SYS312286</Caption>
								<DataSource>CatDisplayCategoryTable</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CatDisplayCategoryGeneralGrp_Name</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>Name</DataField>
								<DataSource>CatDisplayCategoryTable</DataSource>
								<FastTabSummary>Yes</FastTabSummary>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CatDisplayCategoryGeneralGrp_Description</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>Description</DataField>
								<DataSource>CatDisplayCategoryTranslation</DataSource>
								<DisplayHeight>5</DisplayHeight>
								<DisplayHeightMode>Fixed</DisplayHeightMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>RefGroup_ParentCategory</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@SYS136939</HelpText>
								<Type>ReferenceGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RefGroup_ParentCategory_Name</Name>
										<DataRelationPath>CatDisplayCategoryTable</DataRelationPath>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
								</Controls>
								<DataSource>CatDisplayCategoryTable</DataSource>
								<FrameType>None</FrameType>
								<Label>@SYS132123</Label>
								<ReferenceField>ParentCategory</ReferenceField>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>CatDisplayCategoryTable_UpdateType</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_ProcurementAndSourcing:CatProcureCatalogEdit_CatDisplayCategoryTable_UpdateType</HelpText>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ComboType>List</ComboType>
								<DataField>UpdateType</DataField>
								<DataSource>CatDisplayCategoryTable</DataSource>
								<FastTabSummary>Yes</FastTabSummary>
								<Label>@SYS335171</Label>
								<Items />
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<BackgroundColor>WindowBackground</BackgroundColor>
						<Caption>@SYS133627</Caption>
						<DataSource>CatDisplayCategoryTable</DataSource>
						<FastTabExpanded>Yes</FastTabExpanded>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>CatDisplayProductListTPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>CatDisplayProductListActionPane</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneTabControl">
										<Name>CatDisplayProductListActionPaneTab</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPaneTab</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>CatDisplayProductListBtnGrp</Name>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Left>0</Left>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>AddProductMIBtn</Name>
														<ElementPosition>613566756</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>MenuFunctionButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataSource>CatDisplayCategoryTable</DataSource>
														<MenuItemName>CatDisplayProductAdd</MenuItemName>
														<Text>@SYS2318</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCommandButtonControl">
														<Name>RemoveProductCmdBtn</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ConfigurationKey>ProcEmployeeProcurementSite</ConfigurationKey>
														<ElementPosition>920350134</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<NeededPermission>Delete</NeededPermission>
														<Type>CommandButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
														<Command>Delete</Command>
														<MultiSelect>Yes</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<NormalImage>Delete</NormalImage>
														<Text>@SYS26394</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>OpenProductMIBtn</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1227133512</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@SYS137451</HelpText>
														<Type>MenuFunctionButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<CopyCallerQuery>No</CopyCallerQuery>
														<DataSource>EcoResProduct</DataSource>
														<MenuItemName>EcoResProductDetails</MenuItemName>
														<MultiSelect>No</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<Text>@SYS318405</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>SetVisibleBtn</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1533916890</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@SYS135918</HelpText>
														<NeededPermission>Delete</NeededPermission>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<MultiSelect>Yes</MultiSelect>
														<Text>@SYS300683</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>SetInvisibleBtn</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1840700268</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@SYS135917</HelpText>
														<NeededPermission>Delete</NeededPermission>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<MultiSelect>Yes</MultiSelect>
														<Text>@SYS300679</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>CatDisplayProductListGrid</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>EcoResProduct_DisplayProductNumber</Name>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>DisplayProductNumber</DataField>
										<DataSource>EcoResProduct</DataSource>
										<FastTabSummary>No</FastTabSummary>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>EcoResProductTranslation_Name</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Name</DataField>
										<DataSource>EcoResProductTranslation</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>EcoResProductTranslationFallbackView_Name</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Name</DataField>
										<DataSource>EcoResProductTranslationFallbackView</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>CatDisplayProductAll_Origin</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@SYS135922</HelpText>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Origin</DataField>
										<DataSource>CatDisplayProductAll</DataSource>
										<Label>@SYS342973</Label>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>CatDisplayProductAll_visibleOnSite</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>visibleOnSite</DataMethod>
										<DataSource>CatDisplayProductAll</DataSource>
										<Label>@SYS135670</Label>
										<Items />
									</AxFormControl>
								</Controls>
								<DataSource>CatDisplayProductAll</DataSource>
							</AxFormControl>
						</Controls>
						<BackgroundColor>WindowBackground</BackgroundColor>
						<Caption>@SYS133912</Caption>
						<DataSource>CatDisplayProductAll</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>CatDisplayVendorListTPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2013265918</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>CatDisplayVendorListActionPane</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneTabControl">
										<Name>CatDisplayVendorListActionPaneTab</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPaneTab</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>CatDisplayVendorListBtnGrp</Name>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Left>0</Left>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>AddVendorMIBtn</Name>
														<ElementPosition>613566756</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>MenuFunctionButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataSource>CatDisplayCategoryTable</DataSource>
														<MenuItemName>CatDisplayVendorAdd</MenuItemName>
														<Text>@SYS2318</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCommandButtonControl">
														<Name>RemoveVendorCmdBtn</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>920350134</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<NeededPermission>Delete</NeededPermission>
														<Type>CommandButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
														<Command>Delete</Command>
														<MultiSelect>Yes</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<NormalImage>Delete</NormalImage>
														<Text>@SYS26394</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>OpenVendorMIBtn</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1227133512</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@SYS300689</HelpText>
														<NeededPermission>Delete</NeededPermission>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<MultiSelect>No</MultiSelect>
														<Text>@SYS318405</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>VendorSetVisibleBtn</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1533916890</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@SYS300691</HelpText>
														<NeededPermission>Delete</NeededPermission>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<MultiSelect>Yes</MultiSelect>
														<Text>@SYS300683</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>VendorSetInvisibleBtn</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1840700268</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@SYS300680</HelpText>
														<NeededPermission>Delete</NeededPermission>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<MultiSelect>Yes</MultiSelect>
														<Text>@SYS300679</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>CatDisplayVendorListGrid</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>EcoResCategoryForVendor_Name</Name>
										<ElementPosition>357913940</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Name</DataField>
										<DataSource>EcoResCategoryForVendor</DataSource>
										<Label>@SYS11718</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>VendTable_AccountNum</Name>
										<ElementPosition>715827881</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@SYS300708</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AccountNum</DataField>
										<DataSource>VendTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>DirPartyTable_Name</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@SYS135592</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Name</DataField>
										<DataSource>DirPartyTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>VendTable_dataAreaId</Name>
										<ElementPosition>1252698793</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>dataAreaId</DataField>
										<DataSource>VendTable</DataSource>
										<Label>@SYS343163</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>CatDisplayVendorAll_Origin</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@SYS300710</HelpText>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Origin</DataField>
										<DataSource>CatDisplayVendorAll</DataSource>
										<Label>@SYS300709</Label>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>CatDisplayVendorAll_visibleOnSite</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>ProcEmployeeProcurementSite</ConfigurationKey>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@SYS300674</HelpText>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>visibleOnSite</DataMethod>
										<DataSource>CatDisplayVendorAll</DataSource>
										<Label>@SYS300711</Label>
										<Items />
									</AxFormControl>
								</Controls>
								<DataSource>CatDisplayVendorAll</DataSource>
							</AxFormControl>
						</Controls>
						<BackgroundColor>WindowBackground</BackgroundColor>
						<Caption>@SYS300706</Caption>
						<DataSource>CatDisplayVendorAll</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>AttributeFilterRangeTPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ConfigurationKey>ProcEmployeeProcurementSite</ConfigurationKey>
						<ElementPosition>2105016318</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>AvailableFilters</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>AvailableFiltersActionPaneGroup</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Left>0</Left>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormActionPaneControl">
												<Name>AvailableFiltersActionPane</Name>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ActionPane</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>300</Width>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormActionPaneTabControl">
														<Name>AvailableFiltersActionPaneTab</Name>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>ActionPaneTab</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormButtonGroupControl">
																<Name>ButtonGroup</Name>
																<ElementPosition>1431655764</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<LeftMode>AutoLeft</LeftMode>
																<Type>ButtonGroup</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormMenuFunctionButtonControl">
																		<Name>AddAttributesButton</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>1073741822</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<HelpText>@SYS328872</HelpText>
																		<Left>0</Left>
																		<LeftMode>Center</LeftMode>
																		<Type>MenuFunctionButton</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataSource>CatDisplayCategoryTable</DataSource>
																		<MenuItemName>CatAttributeForm</MenuItemName>
																		<NeedsRecord>Yes</NeedsRecord>
																		<Text>@SYS332349</Text>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormButtonControl">
																		<Name>DeleteAttributesButton</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>1610612734</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Left>0</Left>
																		<LeftMode>Center</LeftMode>
																		<NeededPermission>Delete</NeededPermission>
																		<Type>Button</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
																		<NormalImage>Delete</NormalImage>
																		<ShowShortCut>No</ShowShortCut>
																		<Text>@SYS332358</Text>
																	</AxFormControl>
																</Controls>
																<ArrangeMethod>Vertical</ArrangeMethod>
															</AxFormControl>
														</Controls>
														<AlignChild>No</AlignChild>
														<AlignChildren>No</AlignChildren>
														<ArrangeMethod>Vertical</ArrangeMethod>
														<Columns>2</Columns>
													</AxFormControl>
												</Controls>
												<AlignChild>No</AlignChild>
												<AlignChildren>No</AlignChildren>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<Columns>2</Columns>
												<Style>Strip</Style>
											</AxFormControl>
										</Controls>
										<Columns>2</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Group_Group</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Left>0</Left>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormListViewControl">
												<Name>FilterableAttributeListView</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Left>0</Left>
												<LeftMode>LeftEdge</LeftMode>
												<Type>ListView</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>300</Width>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<GridLines>Yes</GridLines>
												<RowSelect>Yes</RowSelect>
												<SingleSelection>No</SingleSelection>
												<ViewType>Report</ViewType>
											</AxFormControl>
										</Controls>
										<Columns>2</Columns>
									</AxFormControl>
								</Controls>
								<Caption>@SYS191232</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FilterRangeGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655763</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>UnitOfMeasureGroup</Name>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Height>0</Height>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>UnitOfMeasureComboBox</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Left>0</Left>
												<LeftMode>LeftEdge</LeftMode>
												<Type>ComboBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<AppendNew>Yes</AppendNew>
												<ComboType>List</ComboType>
												<Label>@SYS96151</Label>
												<Items />
											</AxFormControl>
										</Controls>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>FilterRangeButtonGroup</Name>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormActionPaneControl">
												<Name>FilterRangeActionPane</Name>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ActionPane</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>300</Width>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormActionPaneTabControl">
														<Name>FilterRangeActionPaneTab</Name>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>ActionPaneTab</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormButtonGroupControl">
																<Name>AddRemoveFilterButtonGroup</Name>
																<ElementPosition>1431655764</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<LeftMode>AutoLeft</LeftMode>
																<Type>ButtonGroup</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormMenuFunctionButtonControl">
																		<Name>AddFilterRange</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>1073741822</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<HelpText>@SYS191254</HelpText>
																		<Left>0</Left>
																		<LeftMode>Center</LeftMode>
																		<Type>MenuFunctionButton</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataSource>CatDisplayCategoryTable</DataSource>
																		<MenuItemName>CatPriceRangeForm</MenuItemName>
																		<NeedsRecord>Yes</NeedsRecord>
																		<ShowShortCut>No</ShowShortCut>
																		<Text>@SYS332350</Text>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormButtonControl">
																		<Name>RemoveFilterRange</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>1610612734</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<HelpText>@SYS191256</HelpText>
																		<Left>0</Left>
																		<LeftMode>Center</LeftMode>
																		<NeededPermission>Delete</NeededPermission>
																		<Type>Button</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
																		<NormalImage>Delete</NormalImage>
																		<ShowShortCut>No</ShowShortCut>
																		<Text>@SYS332348</Text>
																	</AxFormControl>
																</Controls>
																<ArrangeMethod>Vertical</ArrangeMethod>
															</AxFormControl>
														</Controls>
														<AlignChild>No</AlignChild>
														<AlignChildren>No</AlignChildren>
														<ArrangeMethod>Vertical</ArrangeMethod>
													</AxFormControl>
												</Controls>
												<AlignChild>No</AlignChild>
												<AlignChildren>No</AlignChildren>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<Style>Strip</Style>
											</AxFormControl>
										</Controls>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>FilterRangeGridGroup</Name>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormListViewControl">
												<Name>FilterRangeListView</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ListView</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>300</Width>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<GridLines>Yes</GridLines>
												<RowSelect>Yes</RowSelect>
												<ViewType>Report</ViewType>
											</AxFormControl>
										</Controls>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<Caption>@SYS191230</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>EnumFilterGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1789569704</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>EnumFilterGridGroup</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormListViewControl">
												<Name>EnumFilterListView</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ListView</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>300</Width>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ColumnHeader>No</ColumnHeader>
												<GridLines>Yes</GridLines>
												<RowSelect>Yes</RowSelect>
												<ViewType>Report</ViewType>
											</AxFormControl>
										</Controls>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<Caption>@SYS310142</Caption>
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
						<Columns>2</Columns>
						<BackgroundColor>WindowBackground</BackgroundColor>
						<Caption>@SYS191230</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>CatalogPriceRangeTPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ConfigurationKey>ProcEmployeeProcurementSite</ConfigurationKey>
						<ElementPosition>2129657854</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CurrencyPriceGroup</Name>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>CurrencyPriceComboBox</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<AppendNew>Yes</AppendNew>
										<ComboType>List</ComboType>
										<Label>@SYS311561</Label>
										<Items />
									</AxFormControl>
								</Controls>
								<Caption>@SYS191230</Caption>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CatalogPriceRangeActionStripGroup</Name>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneControl">
										<Name>CatalogPriceRangeActionStrip</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPane</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormActionPaneTabControl">
												<Name>ActionPaneTab</Name>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ActionPaneTab</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonGroupControl">
														<Name>CurrencyPriceAddRemoveButtonGroup</Name>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<LeftMode>AutoLeft</LeftMode>
														<Type>ButtonGroup</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormMenuFunctionButtonControl">
																<Name>CurrencyPriceAddRange</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>1073741822</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Left>0</Left>
																<LeftMode>Center</LeftMode>
																<Type>MenuFunctionButton</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataSource>CatProcureCatalogTable</DataSource>
																<MenuItemName>CatPriceRangeForm</MenuItemName>
																<NeedsRecord>Yes</NeedsRecord>
																<ShowShortCut>No</ShowShortCut>
																<Text>@SYS2318</Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormButtonControl">
																<Name>CurrencyPriceRemoveRange</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>1610612734</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Left>0</Left>
																<LeftMode>Center</LeftMode>
																<NeededPermission>Delete</NeededPermission>
																<Type>Button</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
																<NormalImage>Delete</NormalImage>
																<ShowShortCut>No</ShowShortCut>
																<Text>@SYS26394</Text>
															</AxFormControl>
														</Controls>
														<ArrangeMethod>Vertical</ArrangeMethod>
													</AxFormControl>
												</Controls>
												<AlignChild>No</AlignChild>
												<AlignChildren>No</AlignChildren>
												<ArrangeMethod>Vertical</ArrangeMethod>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
										<Style>Strip</Style>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CurrencyPriceFilterRangeGroup</Name>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Height>0</Height>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormListViewControl">
										<Name>CurrencyPriceFilterRangeListView</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ListView</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>255</Width>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<GridLines>Yes</GridLines>
										<RowSelect>Yes</RowSelect>
										<SingleSelection>No</SingleSelection>
										<ViewType>Report</ViewType>
									</AxFormControl>
								</Controls>
								<Columns>2</Columns>
							</AxFormControl>
						</Controls>
						<BackgroundColor>WindowBackground</BackgroundColor>
						<Caption>@SYS191507</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>CategoryPriceRangeTPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ConfigurationKey>ProcEmployeeProcurementSite</ConfigurationKey>
						<ElementPosition>2137522174</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CategoryCurrencyPriceGroup</Name>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>CategoryCurrencyPriceComboBox</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<AppendNew>Yes</AppendNew>
										<ComboType>List</ComboType>
										<Label>@SYS311561</Label>
										<Items />
									</AxFormControl>
								</Controls>
								<Caption>@SYS191230</Caption>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CategoryCurrencyPriceActionStripGroup</Name>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneControl">
										<Name>CategoryCurrencyPriceActionStrip</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPane</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormActionPaneTabControl">
												<Name>CategoryCurrencyPriceTab</Name>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ActionPaneTab</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonGroupControl">
														<Name>CategoryCurrencyPriceAddRemoveButtonGroup</Name>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<LeftMode>AutoLeft</LeftMode>
														<Type>ButtonGroup</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormMenuFunctionButtonControl">
																<Name>CategoryCurrencyPriceAddRange</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>1073741822</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Left>0</Left>
																<LeftMode>Center</LeftMode>
																<Type>MenuFunctionButton</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataSource>CatDisplayCategoryTable</DataSource>
																<MenuItemName>CatPriceRangeForm</MenuItemName>
																<NeedsRecord>Yes</NeedsRecord>
																<ShowShortCut>No</ShowShortCut>
																<Text>@SYS2318</Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormButtonControl">
																<Name>CategoryCurrencyPriceRemoveRange</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>1610612734</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<HelpText>@SYS328874</HelpText>
																<Left>0</Left>
																<LeftMode>Center</LeftMode>
																<NeededPermission>Delete</NeededPermission>
																<Type>Button</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
																<NormalImage>Delete</NormalImage>
																<ShowShortCut>No</ShowShortCut>
																<Text>@SYS26394</Text>
															</AxFormControl>
														</Controls>
														<ArrangeMethod>Vertical</ArrangeMethod>
													</AxFormControl>
												</Controls>
												<AlignChild>No</AlignChild>
												<AlignChildren>No</AlignChildren>
												<ArrangeMethod>Vertical</ArrangeMethod>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
										<Style>Strip</Style>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CategoryCurrencyPriceFilterRangeGroup</Name>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Height>0</Height>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormListViewControl">
										<Name>CategoryCurrencyPriceFilterRangeListView</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ListView</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>255</Width>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<GridLines>Yes</GridLines>
										<RowSelect>Yes</RowSelect>
										<SingleSelection>No</SingleSelection>
										<ViewType>Report</ViewType>
									</AxFormControl>
								</Controls>
								<Columns>2</Columns>
							</AxFormControl>
						</Controls>
						<BackgroundColor>WindowBackground</BackgroundColor>
						<Caption>@SYS191507</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>CategoryPresentations</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ConfigurationKey>ProcEmployeeProcurementSite</ConfigurationKey>
						<ElementPosition>2141192190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>WelcomeText</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Height>0</Height>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>WelcomeTextGroup1</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormActionPaneControl">
												<Name>WelcomeTextActionPane</Name>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ActionPane</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormActionPaneTabControl">
														<Name>WelcomeTextActionPaneTab1</Name>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>ActionPaneTab</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormButtonGroupControl">
																<Name>WelcomeTextButtonGroup</Name>
																<ElementPosition>1431655764</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Left>0</Left>
																<Type>ButtonGroup</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormButtonControl">
																		<Name>EditWelcomeText</Name>
																		<ElementPosition>1073741822</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<HelpText>@SYS85419</HelpText>
																		<NeededPermission>Delete</NeededPermission>
																		<Type>Button</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<NeedsRecord>Yes</NeedsRecord>
																		<Text>@SYS2475</Text>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormButtonControl">
																		<Name>TranslateWelcomeText</Name>
																		<ElementPosition>1610612733</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<HelpText>@SYS312026</HelpText>
																		<Type>Button</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<Text>@SYS312030</Text>
																	</AxFormControl>
																</Controls>
																<ArrangeMethod>Vertical</ArrangeMethod>
															</AxFormControl>
														</Controls>
														<AlignChild>No</AlignChild>
														<AlignChildren>No</AlignChildren>
														<ArrangeMethod>Vertical</ArrangeMethod>
													</AxFormControl>
												</Controls>
												<AlignChild>No</AlignChild>
												<AlignChildren>No</AlignChildren>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<Style>Strip</Style>
											</AxFormControl>
										</Controls>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormHTMLControl">
										<Name>CatProcureCatalogTranslation_WelcomeText</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>HTML</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Caption>@SYS313810</Caption>
										<ClassName>{25336920-03F9-11CF-8FD0-00AA00686F13}</ClassName>
									</AxFormControl>
								</Controls>
								<HideIfEmpty>No</HideIfEmpty>
								<Caption>@SYS301069</Caption>
								<DataSource>CatProcureCatalogTranslation</DataSource>
							</AxFormControl>
						</Controls>
						<BackgroundColor>WindowBackground</BackgroundColor>
						<Caption>@SYS59054</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ProductRelationTypeTPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ConfigurationKey>ProcEmployeeProcurementSite</ConfigurationKey>
						<ElementPosition>2145386494</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ProductRelationTypeActionPane</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneTabControl">
										<Name>ProductRelationTypeActionPaneTab</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPaneTab</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>CatCatalogProductRelationTypeBtnGrp</Name>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Left>0</Left>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>AddProductRelationTypeBtn</Name>
														<ElementPosition>715827882</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>MenuFunctionButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataSource>CatProcureCatalogTable</DataSource>
														<MenuItemName>CatDisplayProductRelationAdd</MenuItemName>
														<Text>@SYS2318</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCommandButtonControl">
														<Name>RemoveProductRelationTypeBtn</Name>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<NeededPermission>Delete</NeededPermission>
														<Type>CommandButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
														<Command>Delete</Command>
														<MultiSelect>Yes</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<NormalImage>Delete</NormalImage>
														<Text>@SYS26394</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>MoveUpBtn</Name>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@SYS305399</HelpText>
														<NeededPermission>Delete</NeededPermission>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
														<MultiSelect>No</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<NormalImage>Up</NormalImage>
														<Text>@SYS305409</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>MoveDownBtn</Name>
														<ElementPosition>1789569705</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@SYS305400</HelpText>
														<NeededPermission>Delete</NeededPermission>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
														<MultiSelect>No</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<NormalImage>Down</NormalImage>
														<Text>@SYS305401</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>CatCatalogProductRelationTypeGrid</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>EcoResProductRelationType_Name</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Name</DataField>
										<DataSource>EcoResProductRelationType</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>CatCatalogProductRelationType</DataSource>
							</AxFormControl>
						</Controls>
						<BackgroundColor>WindowBackground</BackgroundColor>
						<Caption>@SYS305398</Caption>
						<DataSource>CatCatalogProductRelationType</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>
